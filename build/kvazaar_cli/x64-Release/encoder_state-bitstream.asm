; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_exit:PROC
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
?uuid@?1??encoder_state_write_bitstream_prefix_sei_version@@9@9 DB 032H ; `encoder_state_write_bitstream_prefix_sei_version'::`2'::uuid
	DB	0feH
	DB	046H
	DB	06cH
	DB	098H
	DB	041H
	DB	042H
	DB	069H
	DB	0aeH
	DB	035H
	DB	06aH
	DB	091H
	DB	054H
	DB	09eH
	DB	0f3H
	DB	0f1H
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
?sar@?2??encoder_state_write_bitstream_VUI@@9@9 DB 01H	; `encoder_state_write_bitstream_VUI'::`3'::sar
	DB	01H
	DB	01H
	DB	0cH
	DB	0bH
	DB	02H
	DB	0aH
	DB	0bH
	DB	03H
	DB	010H
	DB	0bH
	DB	04H
	DB	028H
	DB	021H
	DB	05H
	DB	018H
	DB	0bH
	DB	06H
	DB	014H
	DB	0bH
	DB	07H
	DB	020H
	DB	0bH
	DB	08H
	DB	050H
	DB	021H
	DB	09H
	DB	012H
	DB	0bH
	DB	0aH
	DB	0fH
	DB	0bH
	DB	0bH
	DB	040H
	DB	021H
	DB	0cH
	DB	0a0H
	DB	063H
	DB	0dH
	DB	04H
	DB	03H
	DB	0eH
	DB	03H
	DB	02H
	DB	0fH
	DB	02H
	DB	01H
	DB	010H
	DB	00H
	DB	00H
	DB	0ffH
	ORG $+5
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+6
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
PUBLIC	kvz_encoder_state_worker_write_bitstream
PUBLIC	kvz_encoder_state_write_bitstream
PUBLIC	kvz_encoder_state_write_bitstream_slice_header
PUBLIC	kvz_encoder_state_write_parameter_sets
pdata	SEGMENT
$pdata$kvz_encoder_state_write_bitstream DD imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream
$pdata$0$kvz_encoder_state_write_bitstream DD imagerel $LN12+10
	DD	imagerel $LN12+45
	DD	imagerel $chain$0$kvz_encoder_state_write_bitstream
$pdata$2$kvz_encoder_state_write_bitstream DD imagerel $LN12+45
	DD	imagerel $LN12+110
	DD	imagerel $chain$2$kvz_encoder_state_write_bitstream
$pdata$4$kvz_encoder_state_write_bitstream DD imagerel $LN12+110
	DD	imagerel $LN12+124
	DD	imagerel $chain$4$kvz_encoder_state_write_bitstream
$pdata$5$kvz_encoder_state_write_bitstream DD imagerel $LN12+124
	DD	imagerel $LN12+134
	DD	imagerel $chain$5$kvz_encoder_state_write_bitstream
$pdata$encoder_state_write_bitstream_main DD imagerel encoder_state_write_bitstream_main
	DD	imagerel encoder_state_write_bitstream_main+1049
	DD	imagerel $unwind$encoder_state_write_bitstream_main
$pdata$encoder_state_write_bitstream_children DD imagerel encoder_state_write_bitstream_children
	DD	imagerel encoder_state_write_bitstream_children+31
	DD	imagerel $unwind$encoder_state_write_bitstream_children
$pdata$2$encoder_state_write_bitstream_children DD imagerel encoder_state_write_bitstream_children+31
	DD	imagerel encoder_state_write_bitstream_children+301
	DD	imagerel $chain$2$encoder_state_write_bitstream_children
$pdata$3$encoder_state_write_bitstream_children DD imagerel encoder_state_write_bitstream_children+301
	DD	imagerel encoder_state_write_bitstream_children+310
	DD	imagerel $chain$3$encoder_state_write_bitstream_children
$pdata$encoder_state_write_slice_header DD imagerel encoder_state_write_slice_header
	DD	imagerel encoder_state_write_slice_header+196
	DD	imagerel $unwind$encoder_state_write_slice_header
$pdata$add_checksum DD imagerel add_checksum
	DD	imagerel add_checksum+19
	DD	imagerel $unwind$add_checksum
$pdata$0$add_checksum DD imagerel add_checksum+19
	DD	imagerel add_checksum+33
	DD	imagerel $chain$0$add_checksum
$pdata$1$add_checksum DD imagerel add_checksum+33
	DD	imagerel add_checksum+195
	DD	imagerel $chain$1$add_checksum
$pdata$2$add_checksum DD imagerel add_checksum+195
	DD	imagerel add_checksum+599
	DD	imagerel $chain$2$add_checksum
$pdata$3$add_checksum DD imagerel add_checksum+599
	DD	imagerel add_checksum+888
	DD	imagerel $chain$3$add_checksum
$pdata$4$add_checksum DD imagerel add_checksum+888
	DD	imagerel add_checksum+1096
	DD	imagerel $chain$4$add_checksum
$pdata$5$add_checksum DD imagerel add_checksum+1096
	DD	imagerel add_checksum+1247
	DD	imagerel $chain$5$add_checksum
$pdata$kvz_encoder_state_write_bitstream_slice_header DD imagerel $LN84
	DD	imagerel $LN84+883
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream_slice_header
$pdata$kvz_encoder_state_write_bitstream_slice_header_independent DD imagerel kvz_encoder_state_write_bitstream_slice_header_independent
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent+99
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream_slice_header_independent
$pdata$2$kvz_encoder_state_write_bitstream_slice_header_independent DD imagerel kvz_encoder_state_write_bitstream_slice_header_independent+99
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent+410
	DD	imagerel $chain$2$kvz_encoder_state_write_bitstream_slice_header_independent
$pdata$5$kvz_encoder_state_write_bitstream_slice_header_independent DD imagerel kvz_encoder_state_write_bitstream_slice_header_independent+410
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent+2122
	DD	imagerel $chain$5$kvz_encoder_state_write_bitstream_slice_header_independent
$pdata$encoder_state_write_bitstream_entry_points_write DD imagerel encoder_state_write_bitstream_entry_points_write
	DD	imagerel encoder_state_write_bitstream_entry_points_write+46
	DD	imagerel $unwind$encoder_state_write_bitstream_entry_points_write
$pdata$5$encoder_state_write_bitstream_entry_points_write DD imagerel encoder_state_write_bitstream_entry_points_write+46
	DD	imagerel encoder_state_write_bitstream_entry_points_write+379
	DD	imagerel $chain$5$encoder_state_write_bitstream_entry_points_write
$pdata$6$encoder_state_write_bitstream_entry_points_write DD imagerel encoder_state_write_bitstream_entry_points_write+379
	DD	imagerel encoder_state_write_bitstream_entry_points_write+387
	DD	imagerel $chain$6$encoder_state_write_bitstream_entry_points_write
$pdata$encoder_state_entry_points_explore DD imagerel encoder_state_entry_points_explore
	DD	imagerel encoder_state_entry_points_explore+41
	DD	imagerel $unwind$encoder_state_entry_points_explore
$pdata$0$encoder_state_entry_points_explore DD imagerel encoder_state_entry_points_explore+41
	DD	imagerel encoder_state_entry_points_explore+143
	DD	imagerel $chain$0$encoder_state_entry_points_explore
$pdata$1$encoder_state_entry_points_explore DD imagerel encoder_state_entry_points_explore+143
	DD	imagerel encoder_state_entry_points_explore+165
	DD	imagerel $chain$1$encoder_state_entry_points_explore
$pdata$encoder_state_write_picture_timing_sei_message DD imagerel encoder_state_write_picture_timing_sei_message
	DD	imagerel encoder_state_write_picture_timing_sei_message+30
	DD	imagerel $unwind$encoder_state_write_picture_timing_sei_message
$pdata$1$encoder_state_write_picture_timing_sei_message DD imagerel encoder_state_write_picture_timing_sei_message+30
	DD	imagerel encoder_state_write_picture_timing_sei_message+220
	DD	imagerel $chain$1$encoder_state_write_picture_timing_sei_message
$pdata$2$encoder_state_write_picture_timing_sei_message DD imagerel encoder_state_write_picture_timing_sei_message+220
	DD	imagerel encoder_state_write_picture_timing_sei_message+275
	DD	imagerel $chain$2$encoder_state_write_picture_timing_sei_message
$pdata$3$encoder_state_write_picture_timing_sei_message DD imagerel encoder_state_write_picture_timing_sei_message+275
	DD	imagerel encoder_state_write_picture_timing_sei_message+308
	DD	imagerel $chain$3$encoder_state_write_picture_timing_sei_message
$pdata$encoder_state_write_bitstream_prefix_sei_version DD imagerel encoder_state_write_bitstream_prefix_sei_version
	DD	imagerel encoder_state_write_bitstream_prefix_sei_version+1069
	DD	imagerel $unwind$encoder_state_write_bitstream_prefix_sei_version
$pdata$encoder_state_write_bitstream_pic_parameter_set DD imagerel encoder_state_write_bitstream_pic_parameter_set
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set+470
	DD	imagerel $unwind$encoder_state_write_bitstream_pic_parameter_set
$pdata$0$encoder_state_write_bitstream_pic_parameter_set DD imagerel encoder_state_write_bitstream_pic_parameter_set+470
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set+603
	DD	imagerel $chain$0$encoder_state_write_bitstream_pic_parameter_set
$pdata$1$encoder_state_write_bitstream_pic_parameter_set DD imagerel encoder_state_write_bitstream_pic_parameter_set+603
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set+1612
	DD	imagerel $chain$1$encoder_state_write_bitstream_pic_parameter_set
$pdata$encoder_state_write_bitstream_seq_parameter_set DD imagerel encoder_state_write_bitstream_seq_parameter_set
	DD	imagerel encoder_state_write_bitstream_seq_parameter_set+1133
	DD	imagerel $unwind$encoder_state_write_bitstream_seq_parameter_set
$pdata$encoder_state_write_bitstream_SPS_extension DD imagerel encoder_state_write_bitstream_SPS_extension
	DD	imagerel encoder_state_write_bitstream_SPS_extension+231
	DD	imagerel $unwind$encoder_state_write_bitstream_SPS_extension
$pdata$encoder_state_write_bitstream_VUI DD imagerel encoder_state_write_bitstream_VUI
	DD	imagerel encoder_state_write_bitstream_VUI+9
	DD	imagerel $unwind$encoder_state_write_bitstream_VUI
$pdata$4$encoder_state_write_bitstream_VUI DD imagerel encoder_state_write_bitstream_VUI+9
	DD	imagerel encoder_state_write_bitstream_VUI+2285
	DD	imagerel $chain$4$encoder_state_write_bitstream_VUI
$pdata$5$encoder_state_write_bitstream_VUI DD imagerel encoder_state_write_bitstream_VUI+2285
	DD	imagerel encoder_state_write_bitstream_VUI+2351
	DD	imagerel $chain$5$encoder_state_write_bitstream_VUI
$pdata$encoder_state_write_bitstream_scaling_list DD imagerel encoder_state_write_bitstream_scaling_list
	DD	imagerel encoder_state_write_bitstream_scaling_list+895
	DD	imagerel $unwind$encoder_state_write_bitstream_scaling_list
$pdata$encoder_state_write_bitstream_vid_parameter_set DD imagerel encoder_state_write_bitstream_vid_parameter_set
	DD	imagerel encoder_state_write_bitstream_vid_parameter_set+382
	DD	imagerel $unwind$encoder_state_write_bitstream_vid_parameter_set
$pdata$encoder_state_write_bitstream_PTL DD imagerel encoder_state_write_bitstream_PTL
	DD	imagerel encoder_state_write_bitstream_PTL+391
	DD	imagerel $unwind$encoder_state_write_bitstream_PTL
$pdata$encoder_state_write_bitstream_aud DD imagerel encoder_state_write_bitstream_aud
	DD	imagerel encoder_state_write_bitstream_aud+170
	DD	imagerel $unwind$encoder_state_write_bitstream_aud
$pdata$kvz_math_ceil_log2 DD imagerel kvz_math_ceil_log2
	DD	imagerel kvz_math_ceil_log2+192
	DD	imagerel $unwind$kvz_math_ceil_log2
$pdata$kvz_math_floor_log2 DD imagerel kvz_math_floor_log2
	DD	imagerel kvz_math_floor_log2+142
	DD	imagerel $unwind$kvz_math_floor_log2
$pdata$kvz_encoder_state_write_parameter_sets DD imagerel $LN13
	DD	imagerel $LN13+236
	DD	imagerel $unwind$kvz_encoder_state_write_parameter_sets
xdata	SEGMENT
$unwind$kvz_encoder_state_write_bitstream DD 010401H
	DD	04204H
$chain$0$kvz_encoder_state_write_bitstream DD 020521H
	DD	043405H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream
$chain$2$kvz_encoder_state_write_bitstream DD 020021H
	DD	043400H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream
$chain$4$kvz_encoder_state_write_bitstream DD 020021H
	DD	043400H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream
$chain$5$kvz_encoder_state_write_bitstream DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+10
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream
$unwind$encoder_state_write_bitstream_main DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
$unwind$encoder_state_write_bitstream_children DD 040901H
	DD	0f0053209H
	DD	060027003H
$chain$2$encoder_state_write_bitstream_children DD 061521H
	DD	0ae415H
	DD	09540dH
	DD	083405H
	DD	imagerel encoder_state_write_bitstream_children
	DD	imagerel encoder_state_write_bitstream_children+31
	DD	imagerel $unwind$encoder_state_write_bitstream_children
$chain$3$encoder_state_write_bitstream_children DD 021H
	DD	imagerel encoder_state_write_bitstream_children
	DD	imagerel encoder_state_write_bitstream_children+31
	DD	imagerel $unwind$encoder_state_write_bitstream_children
$unwind$encoder_state_write_slice_header DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$add_checksum DD 060c01H
	DD	0e008d20cH
	DD	07004c006H
	DD	030026003H
$chain$0$add_checksum DD 020821H
	DD	0175408H
	DD	imagerel add_checksum
	DD	imagerel add_checksum+19
	DD	imagerel $unwind$add_checksum
$chain$1$add_checksum DD 020521H
	DD	0cf405H
	DD	imagerel add_checksum+19
	DD	imagerel add_checksum+33
	DD	imagerel $chain$0$add_checksum
$chain$2$add_checksum DD 020521H
	DD	0dd405H
	DD	imagerel add_checksum+33
	DD	imagerel add_checksum+195
	DD	imagerel $chain$1$add_checksum
$chain$3$add_checksum DD 021H
	DD	imagerel add_checksum+33
	DD	imagerel add_checksum+195
	DD	imagerel $chain$1$add_checksum
$chain$4$add_checksum DD 021H
	DD	imagerel add_checksum+19
	DD	imagerel add_checksum+33
	DD	imagerel $chain$0$add_checksum
$chain$5$add_checksum DD 021H
	DD	imagerel add_checksum
	DD	imagerel add_checksum+19
	DD	imagerel $unwind$add_checksum
$unwind$kvz_encoder_state_write_bitstream_slice_header DD 0a1401H
	DD	0e3414H
	DD	0f0105214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
$unwind$kvz_encoder_state_write_bitstream_slice_header_independent DD 071101H
	DD	0f00dc211H
	DD	07009e00bH
	DD	050076008H
	DD	03006H
$chain$2$kvz_encoder_state_write_bitstream_slice_header_independent DD 061621H
	DD	038816H
	DD	04780dH
	DD	056805H
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent+99
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream_slice_header_independent
$chain$5$kvz_encoder_state_write_bitstream_slice_header_independent DD 047921H
	DD	0cd479H
	DD	014c474H
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent
	DD	imagerel kvz_encoder_state_write_bitstream_slice_header_independent+99
	DD	imagerel $unwind$kvz_encoder_state_write_bitstream_slice_header_independent
$unwind$encoder_state_write_bitstream_entry_points_write DD 031601H
	DD	0d012a216H
	DD	07010H
$chain$5$encoder_state_write_bitstream_entry_points_write DD 0c2421H
	DD	06f424H
	DD	07e420H
	DD	08c419H
	DD	096415H
	DD	0a540fH
	DD	0e3404H
	DD	imagerel encoder_state_write_bitstream_entry_points_write
	DD	imagerel encoder_state_write_bitstream_entry_points_write+46
	DD	imagerel $unwind$encoder_state_write_bitstream_entry_points_write
$chain$6$encoder_state_write_bitstream_entry_points_write DD 021H
	DD	imagerel encoder_state_write_bitstream_entry_points_write
	DD	imagerel encoder_state_write_bitstream_entry_points_write+46
	DD	imagerel $unwind$encoder_state_write_bitstream_entry_points_write
$unwind$encoder_state_entry_points_explore DD 081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
$chain$0$encoder_state_entry_points_explore DD 020521H
	DD	067405H
	DD	imagerel encoder_state_entry_points_explore
	DD	imagerel encoder_state_entry_points_explore+41
	DD	imagerel $unwind$encoder_state_entry_points_explore
$chain$1$encoder_state_entry_points_explore DD 021H
	DD	imagerel encoder_state_entry_points_explore
	DD	imagerel encoder_state_entry_points_explore+41
	DD	imagerel $unwind$encoder_state_entry_points_explore
$unwind$encoder_state_write_picture_timing_sei_message DD 020601H
	DD	060023206H
$chain$1$encoder_state_write_picture_timing_sei_message DD 040a21H
	DD	07740aH
	DD	063405H
	DD	imagerel encoder_state_write_picture_timing_sei_message
	DD	imagerel encoder_state_write_picture_timing_sei_message+30
	DD	imagerel $unwind$encoder_state_write_picture_timing_sei_message
$chain$2$encoder_state_write_picture_timing_sei_message DD 021H
	DD	imagerel encoder_state_write_picture_timing_sei_message
	DD	imagerel encoder_state_write_picture_timing_sei_message+30
	DD	imagerel $unwind$encoder_state_write_picture_timing_sei_message
$chain$3$encoder_state_write_picture_timing_sei_message DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel encoder_state_write_picture_timing_sei_message
	DD	imagerel encoder_state_write_picture_timing_sei_message+30
	DD	imagerel $unwind$encoder_state_write_picture_timing_sei_message
$unwind$encoder_state_write_bitstream_prefix_sei_version DD 0d1f01H
	DD	08d641fH
	DD	08c541fH
	DD	08b341fH
	DD	084011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
$unwind$encoder_state_write_bitstream_pic_parameter_set DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0e0113215H
$chain$0$encoder_state_write_bitstream_pic_parameter_set DD 020521H
	DD	065405H
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set+470
	DD	imagerel $unwind$encoder_state_write_bitstream_pic_parameter_set
$chain$1$encoder_state_write_bitstream_pic_parameter_set DD 021H
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set
	DD	imagerel encoder_state_write_bitstream_pic_parameter_set+470
	DD	imagerel $unwind$encoder_state_write_bitstream_pic_parameter_set
$unwind$encoder_state_write_bitstream_seq_parameter_set DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
$unwind$encoder_state_write_bitstream_SPS_extension DD 020601H
	DD	030023206H
$unwind$encoder_state_write_bitstream_VUI DD 040901H
	DD	0d0055209H
	DD	030027003H
$chain$4$encoder_state_write_bitstream_VUI DD 0ae621H
	DD	05e4e6H
	DD	0cc4deH
	DD	0a54d6H
	DD	04f40dH
	DD	0b6405H
	DD	imagerel encoder_state_write_bitstream_VUI
	DD	imagerel encoder_state_write_bitstream_VUI+9
	DD	imagerel $unwind$encoder_state_write_bitstream_VUI
$chain$5$encoder_state_write_bitstream_VUI DD 021H
	DD	imagerel encoder_state_write_bitstream_VUI
	DD	imagerel encoder_state_write_bitstream_VUI+9
	DD	imagerel $unwind$encoder_state_write_bitstream_VUI
$unwind$encoder_state_write_bitstream_scaling_list DD 0a1401H
	DD	0143414H
	DD	0f010b214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
$unwind$encoder_state_write_bitstream_vid_parameter_set DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$encoder_state_write_bitstream_PTL DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
$unwind$encoder_state_write_bitstream_aud DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$kvz_math_ceil_log2 DD 020601H
	DD	030023206H
$unwind$kvz_math_floor_log2 DD 020601H
	DD	030023206H
$unwind$kvz_encoder_state_write_parameter_sets DD 040a01H
	DD	06340aH
	DD	07006320aH
	ORG $+2
$SG4294953430 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294953433 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294953437 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294953442 DB ' qp=%d', 00H
	ORG $+2
$SG4294953446 DB ' %dx%d', 00H
	ORG $+2
$SG4294953431 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294953432 DB 'Unsupported node type %c!', 0aH, 00H
	ORG $+5
$SG4294953434 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294953435 DB 'Failure, reference not found!', 00H
	ORG $+2
$SG4294953436 DB 'Failure, reference not found!', 00H
	ORG $+2
$SG4294953438 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294953439 DB 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'R', 00H, '_'
	DB	00H, 'B', 00H, 'U', 00H, 'F', 00H, '_', 00H, 'L', 00H, 'E', 00H
	DB	'N', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, 00H, 00H
	ORG $+6
$SG4294953441 DB ' ref=%d', 00H
$SG4294953440 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294953443 DB ' intra_period=%d', 00H
	ORG $+7
$SG4294953444 DB ' sao=%d', 00H
$SG4294953445 DB ' deblock=%d:%d:%d', 00H
	ORG $+6
$SG4294953448 DB '!', 00H, '(', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'i', 00H, 'n'
	DB	00H, '.', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG4294953447 DB 'Kvazaar HEVC Encoder v. 2.1.0 - Copyleft 2012-2015 - ht'
	DB	'tp://ultravideo.cs.tut.fi/ - options:', 00H
	ORG $+3
$SG4294953449 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294953450 DB 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+7
$SG4294953451 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H
	DB	'v', 00H, 'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294953452 DB 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+7
$SG4294953453 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H
	DB	'v', 00H, 'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
kvz_encoder_state_write_parameter_sets PROC

; 1130 : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	call	kvz_bitstream_writebyte

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 64					; 00000040H
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1133 :   encoder_state_write_bitstream_vid_parameter_set(stream, state);

	mov	rdx, rbx
	mov	rcx, rdi
	call	encoder_state_write_bitstream_vid_parameter_set
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 66					; 00000042H
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1137 :   encoder_state_write_bitstream_seq_parameter_set(stream, state);

	mov	rdx, rbx
	mov	rcx, rdi
	call	encoder_state_write_bitstream_seq_parameter_set
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 68					; 00000044H
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	mov	rcx, rdi
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1141 :   encoder_state_write_bitstream_pic_parameter_set(stream, state);

	mov	rdx, rbx
	mov	rcx, rdi

; 1142 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1141 :   encoder_state_write_bitstream_pic_parameter_set(stream, state);

	jmp	encoder_state_write_bitstream_pic_parameter_set
kvz_encoder_state_write_parameter_sets ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
_TEXT	SEGMENT
state$ = 8
encoder_state_must_write_vps PROC

; 363  :   const int32_t frame = state->frame->num;

	mov	rax, QWORD PTR [rcx+40]
	mov	r8d, DWORD PTR [rax+8]

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	rax, QWORD PTR [rcx]
	mov	ecx, DWORD PTR [rax+8]

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	test	ecx, ecx
	jle	SHORT $LN7@encoder_st
	mov	eax, r8d
	cdq
	idiv	ecx
	test	edx, edx
	je	SHORT $LN5@encoder_st
	test	ecx, ecx
$LN7@encoder_st:
	js	SHORT $LN4@encoder_st
	test	r8d, r8d
	jne	SHORT $LN4@encoder_st
$LN5@encoder_st:
	mov	al, 1

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	ret	0
$LN4@encoder_st:

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	xor	al, al

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	ret	0
encoder_state_must_write_vps ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
_TEXT	SEGMENT
value$ = 48
kvz_math_floor_log2 PROC

; 44   : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx

; 45   :   assert(value > 0);

	test	ecx, ecx
	jne	SHORT $LN6@kvz_math_f
	lea	r8d, QWORD PTR [rcx+45]
	lea	rcx, OFFSET FLAT:$SG4294953452
	lea	rdx, OFFSET FLAT:$SG4294953453
	call	QWORD PTR __imp__wassert
$LN6@kvz_math_f:

; 46   : 
; 47   :   unsigned result = 0;
; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {
; 50   :     unsigned bits = 1ull << i;
; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	xor	r9d, r9d
	mov	eax, 1
	mov	edx, eax
	mov	r8d, r9d
	rol	rdx, 4
	mov	ecx, edx
	shl	eax, cl
	cmp	ebx, eax
	mov	eax, 8
	cmovae	r8d, edx
	mov	edx, 4

; 52   :     result += shift;
; 53   :     value >>= shift;

	mov	ecx, r8d
	shr	ebx, cl
	mov	ecx, r9d
	cmp	ebx, 256				; 00000100H
	cmovae	ecx, eax
	shr	ebx, cl
	cmp	ebx, 16
	lea	eax, DWORD PTR [r8+rcx]
	mov	ecx, r9d
	cmovae	ecx, edx
	mov	edx, 2
	add	eax, ecx
	shr	ebx, cl
	cmp	ebx, 4
	mov	ecx, r9d
	cmovae	ecx, edx
	add	eax, ecx
	shr	ebx, cl
	cmp	ebx, edx
	setae	r9b
	add	eax, r9d

; 54   :   }
; 55   : 
; 56   :   return result;
; 57   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_math_floor_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
_TEXT	SEGMENT
value$ = 48
kvz_math_ceil_log2 PROC

; 60   : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx

; 61   :   assert(value > 0);

	test	ecx, ecx
	jne	SHORT $LN9@kvz_math_c
	lea	r8d, QWORD PTR [rcx+61]
	lea	rcx, OFFSET FLAT:$SG4294953450
	lea	rdx, OFFSET FLAT:$SG4294953451
	call	QWORD PTR __imp__wassert

; 45   :   assert(value > 0);

	lea	r8d, QWORD PTR [rbx+45]
	lea	rdx, OFFSET FLAT:$SG4294953453
	lea	rcx, OFFSET FLAT:$SG4294953452
	call	QWORD PTR __imp__wassert
$LN9@kvz_math_c:

; 46   : 
; 47   :   unsigned result = 0;
; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {
; 50   :     unsigned bits = 1ull << i;
; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	xor	r10d, r10d
	mov	eax, 1
	mov	edx, eax
	mov	r8d, r10d
	rol	rdx, 4

; 52   :     result += shift;
; 53   :     value >>= shift;

	mov	r9d, ebx
	mov	ecx, edx
	shl	eax, cl
	cmp	ebx, eax
	mov	eax, 8
	cmovae	r8d, edx
	mov	ecx, r8d
	shr	r9d, cl
	mov	ecx, r10d
	cmp	r9d, 256				; 00000100H
	cmovae	ecx, eax
	mov	eax, 4
	shr	r9d, cl
	cmp	r9d, 16
	lea	edx, DWORD PTR [r8+rcx]
	mov	ecx, r10d
	cmovae	ecx, eax
	mov	eax, 2
	add	edx, ecx
	shr	r9d, cl
	cmp	r9d, 4
	mov	ecx, r10d
	cmovae	ecx, eax
	shr	r9d, cl
	cmp	r9d, 2
	lea	eax, DWORD PTR [rcx+rdx]
	mov	ecx, r10d
	setae	cl
	add	eax, ecx

; 62   : 
; 63   :   // The ceil_log2 is just floor_log2 + 1, except for exact powers of 2.
; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	lea	ecx, DWORD PTR [rbx-1]
	test	ecx, ebx
	setne	r10b
	add	eax, r10d

; 65   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_math_ceil_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 48
encoder_state_write_bitstream_aud PROC

; 58   : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	add	rcx, 96					; 00000060H
	call	kvz_bitstream_writebyte

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 70					; 00000046H
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 62   :   uint8_t pic_type = state->frame->slicetype == KVZ_SLICE_I ? 0

	mov	rax, QWORD PTR [rbx+40]
	xor	edx, edx
	mov	ecx, DWORD PTR [rax+88]
	cmp	ecx, 2
	je	SHORT $LN4@encoder_st
	cmp	ecx, 1
	setne	dl
	inc	edx
$LN4@encoder_st:

; 63   :     : state->frame->slicetype == KVZ_SLICE_P ? 1
; 64   :     : 2;
; 65   :   WRITE_U(stream, pic_type, 3, "pic_type");

	mov	r8b, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+121]
	and	cl, 7
	je	SHORT $LN9@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, 8
	xor	edx, edx
	sub	r8b, cl
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
$LN9@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 68   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
encoder_state_write_bitstream_aud ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
encoder_state_write_bitstream_PTL PROC

; 72   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx

; 73   :   // PTL
; 74   :   // Profile Tier
; 75   :   WRITE_U(stream, 0, 2, "general_profile_space");

	mov	r8b, 2
	xor	edx, edx
	mov	rbx, rcx
	call	kvz_bitstream_put

; 76   :   WRITE_U(stream, state->encoder_control->cfg.high_tier, 1, "general_tier_flag");

	mov	rax, QWORD PTR [rdi]
	mov	r8b, 1
	mov	rcx, rbx
	movzx	edx, BYTE PTR [rax+2450]
	call	kvz_bitstream_put

; 77   :   // Main Profile == 1,  Main 10 profile == 2
; 78   :   WRITE_U(stream, (state->encoder_control->bitdepth == 8) ? 1 : 2, 5, "general_profile_idc");

	mov	rax, QWORD PTR [rdi]
	xor	r14d, r14d
	mov	edx, r14d
	mov	r8b, 5
	mov	rcx, rbx
	cmp	BYTE PTR [rax+2592], 8
	setne	dl
	inc	edx
	call	kvz_bitstream_put

; 79   :   /* Compatibility flags should be set at general_profile_idc
; 80   :    *  (so with general_profile_idc = 1, compatibility_flag[1] should be 1)
; 81   :    * According to specification, when compatibility_flag[1] is set,
; 82   :    *  compatibility_flag[2] should be set too.
; 83   :    */
; 84   :   WRITE_U(stream, 3 << 29, 32, "general_profile_compatibility_flag[]");

	mov	r8b, 32					; 00000020H
	mov	edx, 1610612736				; 60000000H
	mov	rcx, rbx
	call	kvz_bitstream_put

; 85   : 
; 86   :   WRITE_U(stream, 1, 1, "general_progressive_source_flag");

	mov	r8b, 1
	lea	edx, QWORD PTR [r14+1]
	mov	rcx, rbx
	call	kvz_bitstream_put

; 87   :   WRITE_U(stream, state->encoder_control->in.source_scan_type != 0, 1, "general_interlaced_source_flag");

	mov	rax, QWORD PTR [rdi]
	mov	edx, r14d
	mov	r8b, 1
	mov	rcx, rbx
	cmp	BYTE PTR [rax+2560], dl
	setne	dl
	call	kvz_bitstream_put

; 88   :   WRITE_U(stream, 0, 1, "general_non_packed_constraint_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 89   :   WRITE_U(stream, 0, 1, "general_frame_only_constraint_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 90   : 
; 91   :   WRITE_U(stream, 0, 32, "XXX_reserved_zero_44bits[0..31]");

	mov	r8b, 32					; 00000020H
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 92   :   WRITE_U(stream, 0, 12, "XXX_reserved_zero_44bits[32..43]");

	mov	r8b, 12
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 93   : 
; 94   :   // end Profile Tier
; 95   : 
; 96   :   uint8_t level = state->encoder_control->cfg.level;
; 97   :   WRITE_U(stream, level * 3, 8, "general_level_idc");

	mov	rax, QWORD PTR [rdi]
	mov	r8b, 8
	movzx	ecx, BYTE PTR [rax+2448]
	lea	edx, DWORD PTR [rcx+rcx*2]
	mov	rcx, rbx
	call	kvz_bitstream_put

; 98   : 
; 99   :   WRITE_U(stream, 0, 1, "sub_layer_profile_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 100  :   WRITE_U(stream, 0, 1, "sub_layer_level_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
	lea	ebp, QWORD PTR [r14+7]
$LL4@encoder_st:

; 103  :     WRITE_U(stream, 0, 2, "reserved_zero_2bits");

	mov	sil, 2
	npad	11
$LL7@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	add	sil, 255				; 000000ffH

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {
; 237  :       stream->data |= 1;
; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN12@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN13@encoder_st
	cmp	dil, 4
	jae	SHORT $LN13@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN13@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN12@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL7@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 102  :   for (int i = 1; i < 8; i++) {

	sub	rbp, 1
	jne	SHORT $LL4@encoder_st

; 104  :   }
; 105  : 
; 106  :   // end PTL
; 107  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
encoder_state_write_bitstream_PTL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
encoder$ = 8
max_required_dpb_size PROC

; 111  :   int max_buffer = 1;
; 112  :   for (int g = 0; g < encoder->cfg.gop_len; ++g) {

	movsx	r11, BYTE PTR [rcx+300]
	mov	eax, 1
	mov	r10, r11
	test	r11b, r11b
	jle	SHORT $LN14@max_requir
	lea	r9, QWORD PTR [rcx+316]
	npad	4
$LL4@max_requir:

; 113  :     int neg_refs = encoder->cfg.gop[g].ref_neg_count;

	movsx	edx, BYTE PTR [r9+17]
	lea	r9, QWORD PTR [r9+64]
	mov	r8d, eax

; 114  :     int pos_refs = encoder->cfg.gop[g].ref_pos_count;

	movsx	eax, BYTE PTR [r9-64]

; 115  :     if (neg_refs + pos_refs + 1 > max_buffer) max_buffer = neg_refs + pos_refs + 1;

	inc	eax
	add	eax, edx
	cmp	eax, r8d
	cmovle	eax, r8d
	sub	r10, 1
	jne	SHORT $LL4@max_requir

; 116  :   }
; 117  : 
; 118  :   if (encoder->cfg.gop_len == 0) max_buffer = encoder->cfg.ref_frames + 1;

	test	r11b, r11b
$LN14@max_requir:
	jne	SHORT $LN13@max_requir
	mov	eax, DWORD PTR [rcx+128]
	inc	eax
$LN13@max_requir:

; 119  : 
; 120  :   return max_buffer;
; 121  : }

	ret	0
max_required_dpb_size ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
encoder$ = 8
max_num_reorder_pics PROC

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	cmp	BYTE PTR [rcx+301], 0
	je	SHORT $LN5@max_num_re
	xor	ecx, ecx
	movzx	eax, cl

; 126  : }

	ret	0
$LN5@max_num_re:

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	movsx	eax, BYTE PTR [rcx+300]
	xor	ecx, ecx
	dec	eax
	test	eax, eax
	cmovle	eax, ecx

; 126  : }

	ret	0
max_num_reorder_pics ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
encoder_state_write_bitstream_vid_parameter_set PROC

; 130  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 131  : #ifdef KVZ_DEBUG
; 132  :   printf("=========== Video Parameter Set ID: 0 ===========\n");
; 133  : #endif
; 134  :   const encoder_control_t* encoder = state->encoder_control;

	mov	rsi, QWORD PTR [rdx]
	mov	rbx, rdx

; 135  : 
; 136  :   WRITE_U(stream, 0, 4, "vps_video_parameter_set_id");

	xor	edx, edx
	mov	r8b, 4
	mov	rdi, rcx
	call	kvz_bitstream_put

; 137  :   WRITE_U(stream, 3, 2, "vps_reserved_three_2bits" );

	mov	r8b, 2
	mov	edx, 3
	mov	rcx, rdi
	call	kvz_bitstream_put

; 138  :   WRITE_U(stream, 0, 6, "vps_reserved_zero_6bits" );

	mov	r8b, 6
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put

; 139  :   WRITE_U(stream, 1, 3, "vps_max_sub_layers_minus1");

	mov	r8b, 3
	mov	edx, 1
	mov	rcx, rdi
	call	kvz_bitstream_put

; 140  :   WRITE_U(stream, 0, 1, "vps_temporal_id_nesting_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put

; 141  :   WRITE_U(stream, 0xffff, 16, "vps_reserved_ffff_16bits");

	mov	r8b, 16
	mov	edx, 65535				; 0000ffffH
	mov	rcx, rdi
	call	kvz_bitstream_put

; 142  : 
; 143  :   encoder_state_write_bitstream_PTL(stream, state);

	mov	rdx, rbx
	mov	rcx, rdi
	call	encoder_state_write_bitstream_PTL

; 144  : 
; 145  :   WRITE_U(stream, 0, 1, "vps_sub_layer_ordering_info_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put

; 112  :   for (int g = 0; g < encoder->cfg.gop_len; ++g) {

	movsx	r10, BYTE PTR [rsi+300]
	mov	eax, 1
	mov	r9, r10
	test	r10b, r10b
	jle	SHORT $LN25@encoder_st
	lea	r8, QWORD PTR [rsi+316]
$LL7@encoder_st:

; 113  :     int neg_refs = encoder->cfg.gop[g].ref_neg_count;

	movsx	ecx, BYTE PTR [r8+17]
	lea	r8, QWORD PTR [r8+64]
	mov	edx, eax

; 114  :     int pos_refs = encoder->cfg.gop[g].ref_pos_count;

	movsx	eax, BYTE PTR [r8-64]

; 115  :     if (neg_refs + pos_refs + 1 > max_buffer) max_buffer = neg_refs + pos_refs + 1;

	inc	eax
	add	eax, ecx
	cmp	eax, edx
	cmovle	eax, edx
	sub	r9, 1
	jne	SHORT $LL7@encoder_st

; 116  :   }
; 117  : 
; 118  :   if (encoder->cfg.gop_len == 0) max_buffer = encoder->cfg.ref_frames + 1;

	test	r10b, r10b
$LN25@encoder_st:
	jne	SHORT $LN9@encoder_st
	mov	eax, DWORD PTR [rsi+128]
	inc	eax
$LN9@encoder_st:

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	xor	ecx, ecx

; 146  : 
; 147  :   int max_buffer  = max_required_dpb_size(encoder);

	movzx	r8d, al

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	cmp	BYTE PTR [rsi+301], cl
	jne	SHORT $LN13@encoder_st
	lea	eax, DWORD PTR [r10-1]
	test	eax, eax
	cmovg	ecx, eax
$LN13@encoder_st:

; 148  :   int max_reorder = max_num_reorder_pics(encoder);

	movzx	ebx, cl

; 149  :   if (max_buffer - 1 < max_reorder) max_buffer = max_reorder + 1;

	lea	eax, DWORD PTR [r8-1]

; 150  :   WRITE_UE(stream, max_buffer - 1, "vps_max_dec_pic_buffering_minus1");

	cmp	eax, ebx
	mov	rcx, rdi
	lea	edx, DWORD PTR [rbx+1]
	cmovge	edx, r8d
	dec	edx
	call	kvz_bitstream_put_ue

; 151  :   WRITE_UE(stream, max_reorder, "vps_max_num_reorder_pics");

	mov	edx, ebx
	mov	rcx, rdi
	call	kvz_bitstream_put_ue

; 152  : 
; 153  :   WRITE_UE(stream, 0, "vps_max_latency_increase");

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put_ue

; 154  : 
; 155  :   WRITE_U(stream, 0, 6, "vps_max_nuh_reserved_zero_layer_id");

	mov	r8b, 6
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put

; 156  :   WRITE_UE(stream, 0, "vps_max_op_sets_minus1");

	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put_ue

; 157  :   WRITE_U(stream, 0, 1, "vps_timing_info_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put

; 158  : 
; 159  :   //IF timing info
; 160  :   //END IF
; 161  : 
; 162  :   WRITE_U(stream, 0, 1, "vps_extension_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rdi
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rdi
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rdi+25]
	and	cl, 7
	je	SHORT $LN18@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, 8
	xor	edx, edx
	sub	r8b, cl
	mov	rcx, rdi
	call	kvz_bitstream_put
$LN18@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 165  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
encoder_state_write_bitstream_vid_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
tv1097 = 32
$T1 = 40
tv1105 = 48
tv1101 = 56
tv1104 = 64
tv1095 = 72
tv1096 = 80
stream$ = 160
list_id$1$ = 168
state$ = 168
ref_matrix_id$1$ = 176
tv1102 = 184
encoder_state_write_bitstream_scaling_list PROC

; 169  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 170  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	r13, QWORD PTR [rdx]
	lea	r8, OFFSET FLAT:kvz_g_scaling_list_num
	xor	ebx, ebx
	mov	QWORD PTR tv1101[rsp], r8
	lea	rbp, OFFSET FLAT:kvz_g_scaling_list_size
	mov	QWORD PTR tv1102[rsp], rbx
	mov	r15, rcx
	mov	QWORD PTR tv1097[rsp], rbp

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	lea	r9, QWORD PTR [r13+2620]
	mov	r12d, ebx
	lea	r10, QWORD PTR [r13+2720]
	mov	QWORD PTR tv1096[rsp], r9
	mov	QWORD PTR tv1095[rsp], r10
	lea	r11d, QWORD PTR [rbx+8]
	mov	eax, ebx
	npad	3
$LL4@encoder_st:

; 173  :     int32_t list_id;
; 174  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	cmp	BYTE PTR [r8], 0
	mov	edx, ebx
	mov	DWORD PTR list_id$1$[rsp], ebx
	mov	rcx, rbx
	mov	QWORD PTR $T1[rsp], rbx
	jbe	$LN2@encoder_st

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	mov	QWORD PTR tv1105[rsp], r9
	mov	r8, r10
	mov	QWORD PTR tv1104[rsp], r10
	npad	8
$LL7@encoder_st:

; 175  :       uint8_t scaling_list_pred_mode_flag = 1;

	mov	esi, -1					; ffffffffH
	mov	r14b, 1

; 176  :       int32_t pred_list_idx;
; 177  :       int32_t i;
; 178  :       uint32_t ref_matrix_id = UINT32_MAX;

	mov	DWORD PTR ref_matrix_id$1$[rsp], esi

; 179  : 
; 180  :       for (pred_list_idx = list_id; pred_list_idx >= 0; pred_list_idx--) {

	mov	edi, edx
	mov	rbx, rcx
	test	edx, edx
	js	$LN9@encoder_st

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	movzx	esi, WORD PTR [rbp]
	mov	rbp, QWORD PTR [r8]
$LL10@encoder_st:

; 181  :         const int32_t * const pred_list  = (list_id == pred_list_idx) ?

	cmp	rcx, rbx
	jne	SHORT $LN22@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 268  :   const int32_t *list_ptr = g_quant_intra_default_8x8; // Default to "8x8" intra

	lea	rax, OFFSET FLAT:g_quant_intra_default_8x8
	mov	rdx, rax

; 269  :   switch(size_id) {

	test	r12d, r12d
	je	SHORT $LN31@encoder_st
	cmp	r12d, 2
	jbe	SHORT $LN32@encoder_st
	cmp	r12d, 3
	jne	SHORT $LN23@encoder_st

; 277  :     case SCALING_LIST_32x32:
; 278  :       if (list_id > 0) list_ptr = g_quant_inter_default_8x8;

	test	edi, edi
	je	SHORT $LN23@encoder_st
	lea	rdx, OFFSET FLAT:g_quant_inter_default_8x8
	jmp	SHORT $LN23@encoder_st
$LN32@encoder_st:

; 272  :       break;
; 273  :     case SCALING_LIST_8x8:
; 274  :     case SCALING_LIST_16x16:
; 275  :       if (list_id > 2) list_ptr = g_quant_inter_default_8x8;
; 276  :       break;

	cmp	edi, 2
	lea	rdx, OFFSET FLAT:g_quant_inter_default_8x8
	cmovbe	rdx, rax
	jmp	SHORT $LN23@encoder_st
$LN31@encoder_st:

; 270  :     case SCALING_LIST_4x4:
; 271  :       list_ptr = g_quant_default_4x4;

	lea	rdx, OFFSET FLAT:g_quant_default_4x4
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 181  :         const int32_t * const pred_list  = (list_id == pred_list_idx) ?

	jmp	SHORT $LN23@encoder_st
$LN22@encoder_st:
	add	rax, rbx
	mov	rdx, QWORD PTR [r13+rax*8+2720]
$LN23@encoder_st:

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	mov	r8, r11
	cmp	r11w, si
	jb	SHORT $LN25@encoder_st
	mov	r8, rsi
$LN25@encoder_st:
	lea	r8, QWORD PTR [r8*4]
	mov	rcx, rbp
	call	memcmp
	test	eax, eax
	jne	SHORT $LN8@encoder_st
	cmp	r12d, 2
	jb	SHORT $LN15@encoder_st
	mov	rax, QWORD PTR tv1102[rsp]
	mov	r8, QWORD PTR tv1105[rsp]
	add	rax, rbx
	mov	ecx, DWORD PTR [r13+rax*4+2620]
	cmp	DWORD PTR [r8], ecx
	je	SHORT $LN15@encoder_st
$LN8@encoder_st:

; 179  : 
; 180  :       for (pred_list_idx = list_id; pred_list_idx >= 0; pred_list_idx--) {

	dec	edi
	sub	rbx, 1
	js	SHORT $LN81@encoder_st
	mov	rax, QWORD PTR tv1102[rsp]
	mov	r11d, 8
	mov	rcx, QWORD PTR $T1[rsp]
	jmp	$LL10@encoder_st
$LN15@encoder_st:

; 186  :             ((size_id < SCALING_LIST_16x16) ||
; 187  :              (encoder->scaling_list.scaling_list_dc[size_id][list_id] == encoder->scaling_list.scaling_list_dc[size_id][pred_list_idx]))) {
; 188  :           ref_matrix_id = pred_list_idx;
; 189  :           scaling_list_pred_mode_flag = 0;

	movzx	ebx, BYTE PTR [r15+24]
	xor	r14b, r14b
	mov	rbp, QWORD PTR tv1097[rsp]
	add	bl, bl
	mov	esi, edi
	jmp	SHORT $LN82@encoder_st
$LN81@encoder_st:

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	mov	esi, DWORD PTR ref_matrix_id$1$[rsp]
	mov	rbp, QWORD PTR tv1097[rsp]
$LN9@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	movzx	ebx, BYTE PTR [r15+24]
	add	bl, bl
	mov	BYTE PTR [r15+24], bl
	or	bl, r14b
$LN82@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [r15+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [r15+25], 8
	mov	BYTE PTR [r15+24], bl
	jne	SHORT $LN43@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [r15+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [r15+25], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN44@encoder_st
	cmp	bl, 4
	jae	SHORT $LN44@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, r15
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN44@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al
	mov	ecx, 0
	test	bl, bl
	movzx	eax, al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, bl
	cmovne	eax, ecx
	mov	rcx, r15
	mov	BYTE PTR [r15+26], al
	call	kvz_bitstream_writebyte
$LN43@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 195  :       if (!scaling_list_pred_mode_flag) {

	test	r14b, r14b
	jne	SHORT $LN16@encoder_st

; 196  :         WRITE_UE(stream, list_id - ref_matrix_id, "scaling_list_pred_matrix_id_delta");

	mov	edx, DWORD PTR list_id$1$[rsp]
	mov	rcx, r15
	sub	edx, esi
	call	kvz_bitstream_put_ue

; 197  :       } else {

	jmp	$LN5@encoder_st
$LN16@encoder_st:

; 198  :         int32_t delta;
; 199  :         const int32_t coef_num = MIN(MAX_MATRIX_COEF_NUM, kvz_g_scaling_list_size[size_id]);

	movzx	eax, WORD PTR [rbp]
	mov	ecx, 64					; 00000040H
	mov	edi, ecx
	cmp	cx, ax
	jb	SHORT $LN27@encoder_st
	mov	edi, eax
$LN27@encoder_st:

; 200  :         const uint32_t * const scan_cg = (size_id == 0) ? g_sig_last_scan_16x16 : g_sig_last_scan_32x32;

	test	r12d, r12d
	lea	rax, OFFSET FLAT:g_sig_last_scan_16x16
	lea	rsi, OFFSET FLAT:g_sig_last_scan_32x32

; 201  :         int32_t next_coef = 8;

	mov	ebp, 8
	cmove	rsi, rax

; 202  :         const int32_t * const coef_list = encoder->scaling_list.scaling_list_coeff[size_id][list_id];

	mov	rax, QWORD PTR tv1102[rsp]
	add	rax, QWORD PTR $T1[rsp]
	mov	r14, QWORD PTR [r13+rax*8+2720]

; 203  : 
; 204  :         if (size_id >= SCALING_LIST_16x16) {

	cmp	r12d, 2
	jb	SHORT $LN18@encoder_st

; 205  :           WRITE_SE(stream, encoder->scaling_list.scaling_list_dc[size_id][list_id] - 8, "scaling_list_dc_coef_minus8");

	lea	rbx, QWORD PTR [rax*4]
	mov	edx, DWORD PTR [rbx+r13+2620]
	add	edx, -8
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	test	edx, edx
	jg	SHORT $LN51@encoder_st
	neg	edx
	add	edx, edx
	jmp	SHORT $LN52@encoder_st
$LN51@encoder_st:
	lea	edx, DWORD PTR [rdx*2-1]
$LN52@encoder_st:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	rcx, r15
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 206  :           next_coef = encoder->scaling_list.scaling_list_dc[size_id][list_id];

	mov	ebp, DWORD PTR [rbx+r13+2620]
$LN18@encoder_st:

; 209  :         for (i = 0; i < coef_num; i++) {

	xor	eax, eax
	mov	ebx, eax
	test	rdi, rdi
	je	SHORT $LN5@encoder_st
	npad	1
$LL13@encoder_st:

; 210  :           delta     = coef_list[scan_cg[i]] - next_coef;

	mov	eax, DWORD PTR [rsi+rbx*4]
	mov	ecx, DWORD PTR [r14+rax*4]
	mov	eax, ecx
	sub	eax, ebp

; 211  :           next_coef = coef_list[scan_cg[i]];

	mov	ebp, ecx

; 212  :           if (delta > 127)
; 213  :             delta -= 256;
; 214  :           if (delta < -128)

	cmp	eax, 127				; 0000007fH
	lea	ecx, DWORD PTR [rax-256]
	cmovle	ecx, eax
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	cmp	ecx, -128				; ffffffffffffff80H
	lea	edx, DWORD PTR [rcx+256]
	cmovge	edx, ecx
	test	edx, edx
	jg	SHORT $LN55@encoder_st
	neg	edx
	add	edx, edx
	jmp	SHORT $LN56@encoder_st
$LN55@encoder_st:
	lea	edx, DWORD PTR [rdx*2-1]
$LN56@encoder_st:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	rcx, r15
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 209  :         for (i = 0; i < coef_num; i++) {

	inc	rbx
	cmp	rbx, rdi
	jl	SHORT $LL13@encoder_st
$LN5@encoder_st:

; 173  :     int32_t list_id;
; 174  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	mov	rax, QWORD PTR tv1101[rsp]
	mov	r11d, 8
	mov	edx, DWORD PTR list_id$1$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	inc	edx
	mov	r8, QWORD PTR tv1104[rsp]
	inc	rcx
	movzx	eax, BYTE PTR [rax]
	add	r8, 8
	add	QWORD PTR tv1105[rsp], 4
	mov	rbp, QWORD PTR tv1097[rsp]
	cmp	edx, eax
	mov	rax, QWORD PTR tv1102[rsp]
	mov	DWORD PTR list_id$1$[rsp], edx
	mov	QWORD PTR $T1[rsp], rcx
	mov	QWORD PTR tv1104[rsp], r8
	jl	$LL7@encoder_st
	mov	r8, QWORD PTR tv1101[rsp]
	xor	ebx, ebx
	mov	r9, QWORD PTR tv1096[rsp]
	mov	r10, QWORD PTR tv1095[rsp]
$LN2@encoder_st:

; 171  :   uint32_t size_id;
; 172  :   for (size_id = 0; size_id < SCALING_LIST_SIZE_NUM; size_id++) {

	add	r10, 48					; 00000030H
	add	r9, 24
	add	rbp, 2
	mov	QWORD PTR tv1095[rsp], r10
	inc	r8
	mov	QWORD PTR tv1096[rsp], r9
	add	rax, 6
	mov	QWORD PTR tv1097[rsp], rbp
	inc	r12d
	mov	QWORD PTR tv1101[rsp], r8
	mov	QWORD PTR tv1102[rsp], rax
	cmp	r12d, 4
	jb	$LL4@encoder_st

; 215  :             delta += 256;
; 216  : 
; 217  :           WRITE_SE(stream, delta, "scaling_list_delta_coef");
; 218  :         }
; 219  :       }
; 220  :     }
; 221  :   }
; 222  : }

	mov	rbx, QWORD PTR [rsp+160]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
encoder_state_write_bitstream_scaling_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 80
state$ = 88
encoder_state_write_bitstream_VUI PROC

; 227  : {

	push	rbx
	push	rdi
	push	r13
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR [rsp+88], rsi

; 228  :   const encoder_control_t * const encoder = state->encoder_control;
; 229  : #ifdef KVZ_DEBUG
; 230  :   printf("=========== VUI Set ID: 0 ===========\n");
; 231  : #endif
; 232  :   if (encoder->cfg.vui.sar_width > 0 && encoder->cfg.vui.sar_height > 0) {

	xor	r13d, r13d
	mov	QWORD PTR [rsp+32], r15
	mov	rbx, rcx
	mov	r15, QWORD PTR [rdx]
	mov	r9d, DWORD PTR [r15+104]
	test	r9d, r9d
	jle	$LN5@encoder_st
	mov	r8d, DWORD PTR [r15+108]
	test	r8d, r8d
	jle	SHORT $LN5@encoder_st

; 233  :     int i;
; 234  :     static const struct
; 235  :     {
; 236  :       uint8_t width;
; 237  :       uint8_t height;
; 238  :       uint8_t idc;
; 239  :     } sar[] = {
; 240  :       // aspect_ratio_idc = 0 -> unspecified
; 241  :       {  1,  1, 1 }, { 12, 11, 2 }, { 10, 11, 3 }, { 16, 11, 4 },
; 242  :       { 40, 33, 5 }, { 24, 11, 6 }, { 20, 11, 7 }, { 32, 11, 8 },
; 243  :       { 80, 33, 9 }, { 18, 11, 10}, { 15, 11, 11}, { 64, 33, 12},
; 244  :       {160, 99, 13}, {  4,  3, 14}, {  3,  2, 15}, {  2,  1, 16},
; 245  :       // aspect_ratio_idc = [17..254] -> reserved
; 246  :       { 0, 0, 255 }
; 247  :     };
; 248  : 
; 249  :     for (i = 0; sar[i].idc != 255; i++)

	mov	edi, r13d

; 250  :       if (sar[i].width  == encoder->cfg.vui.sar_width &&

	lea	rsi, OFFSET FLAT:?sar@?2??encoder_state_write_bitstream_VUI@@9@9
	mov	edx, r13d
	mov	ecx, r13d
$LL4@encoder_st:
	movzx	eax, BYTE PTR [rcx+rsi]
	cmp	eax, r9d
	jne	SHORT $LN2@encoder_st
	movzx	eax, BYTE PTR [rcx+rsi+1]
	cmp	eax, r8d
	je	SHORT $LN295@encoder_st
$LN2@encoder_st:

; 233  :     int i;
; 234  :     static const struct
; 235  :     {
; 236  :       uint8_t width;
; 237  :       uint8_t height;
; 238  :       uint8_t idc;
; 239  :     } sar[] = {
; 240  :       // aspect_ratio_idc = 0 -> unspecified
; 241  :       {  1,  1, 1 }, { 12, 11, 2 }, { 10, 11, 3 }, { 16, 11, 4 },
; 242  :       { 40, 33, 5 }, { 24, 11, 6 }, { 20, 11, 7 }, { 32, 11, 8 },
; 243  :       { 80, 33, 9 }, { 18, 11, 10}, { 15, 11, 11}, { 64, 33, 12},
; 244  :       {160, 99, 13}, {  4,  3, 14}, {  3,  2, 15}, {  2,  1, 16},
; 245  :       // aspect_ratio_idc = [17..254] -> reserved
; 246  :       { 0, 0, 255 }
; 247  :     };
; 248  : 
; 249  :     for (i = 0; sar[i].idc != 255; i++)

	inc	rdx
	inc	edi
	lea	rcx, QWORD PTR [rdx+rdx*2]
	cmp	BYTE PTR [rcx+rsi+2], 255		; 000000ffH
	jne	SHORT $LL4@encoder_st
$LN295@encoder_st:

; 251  :           sar[i].height == encoder->cfg.vui.sar_height)
; 252  :         break;
; 253  : 
; 254  :     WRITE_U(stream, 1, 1, "aspect_ratio_info_present_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 255  :     WRITE_U(stream, sar[i].idc, 8, "aspect_ratio_idc");

	movsxd	rax, edi
	mov	r8b, 8
	mov	rcx, rbx
	lea	rdi, QWORD PTR [rax+rax*2]
	movzx	edx, BYTE PTR [rdi+rsi+2]
	call	kvz_bitstream_put

; 256  :     if (sar[i].idc == 255) {

	cmp	BYTE PTR [rdi+rsi+2], 255		; 000000ffH
	jne	SHORT $LN6@encoder_st

; 257  :       // EXTENDED_SAR
; 258  :       WRITE_U(stream, encoder->cfg.vui.sar_width, 16, "sar_width");

	mov	edx, DWORD PTR [r15+104]
	mov	r8b, 16
	mov	rcx, rbx
	call	kvz_bitstream_put

; 259  :       WRITE_U(stream, encoder->cfg.vui.sar_height, 16, "sar_height");

	mov	edx, DWORD PTR [r15+108]
	mov	r8b, 16
	mov	rcx, rbx

; 260  :     }
; 261  :   } else

	jmp	SHORT $LN381@encoder_st
$LN5@encoder_st:

; 262  :     WRITE_U(stream, 0, 1, "aspect_ratio_info_present_flag");

	mov	r8b, 1
	xor	edx, edx
$LN381@encoder_st:

; 263  : 
; 264  :   //IF aspect ratio info
; 265  :   //ENDIF
; 266  : 
; 267  :   if (encoder->cfg.vui.overscan > 0) {

	call	kvz_bitstream_put
$LN6@encoder_st:
	cmp	BYTE PTR [r15+112], r13b
	jle	SHORT $LN9@encoder_st

; 268  :     WRITE_U(stream, 1, 1, "overscan_info_present_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 269  :     WRITE_U(stream, encoder->cfg.vui.overscan - 1, 1, "overscan_appropriate_flag");

	movsx	edx, BYTE PTR [r15+112]
	dec	edx

; 270  :   } else

	jmp	SHORT $LN10@encoder_st
$LN9@encoder_st:

; 271  :     WRITE_U(stream, 0, 1, "overscan_info_present_flag");

	mov	edx, r13d
$LN10@encoder_st:
	mov	QWORD PTR [rsp+80], rbp

; 272  : 
; 273  :   //IF overscan info
; 274  :   //ENDIF
; 275  : 
; 276  :   if (encoder->cfg.vui.videoformat != 5 ||
; 277  :       encoder->cfg.vui.fullrange   != 0 ||
; 278  :       encoder->cfg.vui.colorprim   != 2 ||
; 279  :       encoder->cfg.vui.transfer    != 2 ||

	mov	r8b, 1
	mov	QWORD PTR [rsp+96], r12
	mov	rcx, rbx
	mov	QWORD PTR [rsp+40], r14
	call	kvz_bitstream_put
	cmp	BYTE PTR [r15+113], 5
	jne	SHORT $LN13@encoder_st
	cmp	BYTE PTR [r15+114], r13b
	jne	SHORT $LN13@encoder_st
	cmp	BYTE PTR [r15+115], 2
	jne	SHORT $LN13@encoder_st
	cmp	BYTE PTR [r15+116], 2
	jne	SHORT $LN13@encoder_st
	cmp	BYTE PTR [r15+117], 2
	jne	SHORT $LN13@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	$LN305@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN124@encoder_st
	cmp	dil, 4
	jae	SHORT $LN124@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN124@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 250  :       if (sar[i].width  == encoder->cfg.vui.sar_width &&

	jmp	$LN305@encoder_st
$LN13@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil
	or	dil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN27@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN28@encoder_st
	cmp	dil, 4
	jae	SHORT $LN28@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN28@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	mov	BYTE PTR [rbx+26], r13b
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN27@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 282  :     WRITE_U(stream, encoder->cfg.vui.videoformat, 3, "chroma_format");

	movsx	r14d, BYTE PTR [r15+113]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	lea	rbp, OFFSET FLAT:kvz_bit_set_mask+12
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 282  :     WRITE_U(stream, encoder->cfg.vui.videoformat, 3, "chroma_format");

	mov	sil, 3
	npad	3
$LL34@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [rbp], r14d
	je	SHORT $LN343@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN343@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN39@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN40@encoder_st
	cmp	dil, 4
	jae	SHORT $LN40@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN40@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN39@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL34@encoder_st

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 283  :     WRITE_U(stream, encoder->cfg.vui.fullrange, 1, "video_full_range_flag");

	movsx	eax, BYTE PTR [r15+114]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	dil, dil
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	al, 1
	je	SHORT $LN344@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN344@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN51@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN52@encoder_st
	cmp	dil, 4
	jae	SHORT $LN52@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN52@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN51@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 286  :         encoder->cfg.vui.transfer    != 2 ||

	cmp	BYTE PTR [r15+115], 2
	jne	SHORT $LL58@encoder_st
	cmp	BYTE PTR [r15+116], 2
	jne	SHORT $LL58@encoder_st
	cmp	BYTE PTR [r15+117], 2
	jne	SHORT $LL58@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	$LN305@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN112@encoder_st
	cmp	dil, 4
	jae	SHORT $LN112@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN112@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 250  :       if (sar[i].width  == encoder->cfg.vui.sar_width &&

	jmp	$LN305@encoder_st
$LL58@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil
	or	dil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN63@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN64@encoder_st
	cmp	dil, 4
	jae	SHORT $LN64@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN64@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	mov	BYTE PTR [rbx+26], r13b
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN63@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 289  :       WRITE_U(stream, encoder->cfg.vui.colorprim, 8, "colour_primaries");

	movsx	r12d, BYTE PTR [r15+115]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	lea	r14, OFFSET FLAT:kvz_bit_set_mask+32
	mov	rbp, r14
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 289  :       WRITE_U(stream, encoder->cfg.vui.colorprim, 8, "colour_primaries");

	mov	sil, 8
	npad	11
$LL70@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [rbp], r12d
	je	SHORT $LN72@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN72@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN75@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN76@encoder_st
	cmp	dil, 4
	jae	SHORT $LN76@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN76@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN75@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL70@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 290  :       WRITE_U(stream, encoder->cfg.vui.transfer, 8, "transfer_characteristics");

	movsx	r12d, BYTE PTR [r15+116]
	mov	sil, 8
	mov	rbp, r14
	npad	13
$LL82@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [rbp], r12d
	je	SHORT $LN84@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN84@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN87@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN88@encoder_st
	cmp	dil, 4
	jae	SHORT $LN88@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN88@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN87@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL82@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 291  :       WRITE_U(stream, encoder->cfg.vui.colormatrix, 8, "matrix_coeffs");

	movsx	ebp, BYTE PTR [r15+117]
	mov	sil, 8
$LL94@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	r14, QWORD PTR [r14-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	ebp, DWORD PTR [r14]
	je	SHORT $LN96@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN96@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN99@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN100@encoder_st
	cmp	dil, 4
	jae	SHORT $LN100@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN100@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN99@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL94@encoder_st
$LN305@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 300  :   if (encoder->cfg.vui.chroma_loc > 0) {

	movzx	eax, BYTE PTR [rbx+25]
	movzx	edi, BYTE PTR [rbx+24]
	inc	al
	add	dil, dil
	cmp	DWORD PTR [r15+120], r13d
	mov	BYTE PTR [rbx+25], al
	jle	SHORT $LN17@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, 8
	jne	SHORT $LN135@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN136@encoder_st
	cmp	dil, 4
	jae	SHORT $LN136@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN136@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	mov	BYTE PTR [rbx+26], r13b
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN135@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 302  :     WRITE_UE(stream, encoder->cfg.vui.chroma_loc, "chroma_sample_loc_type_top_field");

	mov	edx, DWORD PTR [r15+120]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 303  :     WRITE_UE(stream, encoder->cfg.vui.chroma_loc, "chroma_sample_loc_type_bottom_field");

	mov	edx, DWORD PTR [r15+120]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 304  :   } else

	jmp	SHORT $LL154@encoder_st
$LN17@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	mov	BYTE PTR [rbx+24], dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, 8
	jne	SHORT $LL154@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN148@encoder_st
	cmp	dil, 4
	jae	SHORT $LN148@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN148@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	2
$LL154@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN159@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN160@encoder_st
	cmp	dil, 4
	jae	SHORT $LN160@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN160@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN159@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 311  :   WRITE_U(stream, encoder->vui.field_seq_flag, 1, "field_seq_flag"); // 0: frames, 1: fields

	movsx	eax, BYTE PTR [r15+2608]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	dil, dil
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	al, 1
	je	SHORT $LN350@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN350@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN171@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN172@encoder_st
	cmp	dil, 4
	jae	SHORT $LN172@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN172@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN171@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 312  :   WRITE_U(stream, encoder->vui.frame_field_info_present_flag, 1, "frame_field_info_present_flag");

	movsx	eax, BYTE PTR [r15+2609]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	dil, dil
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	al, 1
	je	SHORT $LN351@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN351@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LL190@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN184@encoder_st
	cmp	dil, 4
	jae	SHORT $LN184@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN184@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	1
$LL190@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN195@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN196@encoder_st
	cmp	dil, 4
	jae	SHORT $LN196@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN196@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN195@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 318  :   WRITE_U(stream, encoder->vui.timing_info_present_flag, 1, "vui_timing_info_present_flag");

	movsx	eax, BYTE PTR [r15+2610]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	dil, dil
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	al, 1
	je	SHORT $LN353@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN353@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN207@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN208@encoder_st
	cmp	dil, 4
	jae	SHORT $LN208@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN208@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN207@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 319  :   if (encoder->vui.timing_info_present_flag) {

	cmp	BYTE PTR [r15+2610], r13b
	je	$LL262@encoder_st

; 320  :     WRITE_U(stream, encoder->vui.num_units_in_tick, 32, "vui_num_units_in_tick");

	mov	r12d, DWORD PTR [r15+2600]
	lea	r14, OFFSET FLAT:kvz_bit_set_mask+128
	mov	rbp, r14
	mov	sil, 32					; 00000020H
	npad	1
$LL214@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	r12d, DWORD PTR [rbp]
	je	SHORT $LN354@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN354@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN219@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN220@encoder_st
	cmp	dil, 4
	jae	SHORT $LN220@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN220@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN219@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL214@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 321  :     WRITE_U(stream, encoder->vui.time_scale, 32, "vui_time_scale");

	mov	ebp, DWORD PTR [r15+2604]
	mov	sil, 32					; 00000020H
	npad	14
$LL226@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	lea	r14, QWORD PTR [r14-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+24], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [r14], ebp
	je	SHORT $LN355@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+24], dil
$LN355@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN231@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN232@encoder_st
	cmp	dil, 4
	jae	SHORT $LN232@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN232@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN231@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL226@encoder_st

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LL250@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN244@encoder_st
	cmp	dil, 4
	jae	SHORT $LN244@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN244@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	12
$LL250@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LL262@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN256@encoder_st
	cmp	dil, 4
	jae	SHORT $LN256@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN256@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	3
$LL262@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	r15, QWORD PTR [rsp+32]
	mov	r14, QWORD PTR [rsp+40]
	mov	r12, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+80]
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN267@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN268@encoder_st
	cmp	dil, 4
	jae	SHORT $LN268@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN268@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN267@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 331  : }

	add	rsp, 48					; 00000030H
	pop	r13
	pop	rdi
	pop	rbx
	ret	0
encoder_state_write_bitstream_VUI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
encoder_state_write_bitstream_SPS_extension PROC

; 336  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 337  :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	rax, QWORD PTR [rdx]
	mov	rbx, rcx

; 338  :   if (cfg->implicit_rdpcm && cfg->lossless) {

	cmp	DWORD PTR [rax+2420], 0
	je	$LN2@encoder_st
	cmp	DWORD PTR [rax+2392], 0
	je	$LN2@encoder_st

; 339  :     WRITE_U(stream, 1, 1, "sps_extension_present_flag");

	mov	r8b, 1
	mov	edx, 1
	call	kvz_bitstream_put

; 340  : 
; 341  :     WRITE_U(stream, 1, 1, "sps_range_extension_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 342  :     WRITE_U(stream, 0, 1, "sps_multilayer_extension_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 343  :     WRITE_U(stream, 0, 1, "sps_3d_extension_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 344  :     WRITE_U(stream, 0, 5, "sps_extension_5bits");

	mov	r8b, 5
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 345  : 
; 346  :     WRITE_U(stream, 0, 1, "transform_skip_rotation_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 347  :     WRITE_U(stream, 0, 1, "transform_skip_context_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 348  :     WRITE_U(stream, 1, 1, "implicit_rdpcm_enabled_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 349  :     WRITE_U(stream, 0, 1, "explicit_rdpcm_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 350  :     WRITE_U(stream, 0, 1, "extended_precision_processing_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 351  :     WRITE_U(stream, 0, 1, "intra_smoothing_disabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 352  :     WRITE_U(stream, 0, 1, "high_precision_offsets_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 353  :     WRITE_U(stream, 0, 1, "persistent_rice_adaptation_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
$LN2@encoder_st:

; 354  :     WRITE_U(stream, 0, 1, "cabac_bypass_alignment_enabled_flag");
; 355  :   } else {
; 356  :     WRITE_U(stream, 0, 1, "sps_extension_present_flag");
; 357  :   }
; 358  : }

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	kvz_bitstream_put
encoder_state_write_bitstream_SPS_extension ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
encoder_state_write_bitstream_seq_parameter_set PROC

; 362  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 363  :   const encoder_control_t * encoder = state->encoder_control;

	mov	rsi, QWORD PTR [rdx]
	mov	r14, rdx

; 364  : 
; 365  : #ifdef KVZ_DEBUG
; 366  :   printf("=========== Sequence Parameter Set ID: 0 ===========\n");
; 367  : #endif
; 368  : 
; 369  :   // TODO: profile IDC and level IDC should be defined later on
; 370  :   WRITE_U(stream, 0, 4, "sps_video_parameter_set_id");

	xor	edx, edx
	mov	r8b, 4
	mov	rbx, rcx
	call	kvz_bitstream_put

; 371  :   WRITE_U(stream, 1, 3, "sps_max_sub_layers_minus1");

	mov	r8b, 3
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 372  :   WRITE_U(stream, 0, 1, "sps_temporal_id_nesting_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 373  : 
; 374  :   encoder_state_write_bitstream_PTL(stream, state);

	mov	rdx, r14
	mov	rcx, rbx
	call	encoder_state_write_bitstream_PTL

; 375  : 
; 376  :   WRITE_UE(stream, 0, "sps_seq_parameter_set_id");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 377  :   WRITE_UE(stream, encoder->chroma_format, "chroma_format_idc");

	mov	edx, DWORD PTR [rsi+2596]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 378  : 
; 379  :   if (encoder->chroma_format == KVZ_CSP_444) {

	cmp	DWORD PTR [rsi+2596], 3
	jne	SHORT $LN2@encoder_st

; 380  :     WRITE_U(stream, 0, 1, "separate_colour_plane_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
$LN2@encoder_st:

; 381  :   }
; 382  : 
; 383  :   if (encoder->cfg.partial_coding.fullWidth != 0) {

	movzx	eax, WORD PTR [rsi+2478]
	mov	rcx, rbx
	test	ax, ax
	je	SHORT $LN3@encoder_st

; 384  :     WRITE_UE(stream, encoder->cfg.partial_coding.fullWidth, "pic_width_in_luma_samples");

	mov	edx, eax
	call	kvz_bitstream_put_ue

; 385  :     WRITE_UE(stream, encoder->cfg.partial_coding.fullHeight, "pic_height_in_luma_samples");

	movzx	edx, WORD PTR [rsi+2480]

; 386  :   }

	jmp	SHORT $LN4@encoder_st
$LN3@encoder_st:

; 387  :   else {
; 388  :     WRITE_UE(stream, encoder->in.width, "pic_width_in_luma_samples");

	mov	edx, DWORD PTR [rsi+2528]
	call	kvz_bitstream_put_ue

; 389  :     WRITE_UE(stream, encoder->in.height, "pic_height_in_luma_samples");

	mov	edx, DWORD PTR [rsi+2532]
$LN4@encoder_st:

; 390  :   }
; 391  : 
; 392  :   if (encoder->in.width != encoder->in.real_width || encoder->in.height != encoder->in.real_height) {

	mov	rcx, rbx
	call	kvz_bitstream_put_ue
	mov	ecx, DWORD PTR [rsi+2528]
	cmp	ecx, DWORD PTR [rsi+2544]
	jne	SHORT $LN39@encoder_st
	mov	eax, DWORD PTR [rsi+2548]
	cmp	DWORD PTR [rsi+2532], eax
	jne	SHORT $LN39@encoder_st

; 404  :              "conf_win_bottom_offset");
; 405  :   } else {
; 406  :     WRITE_U(stream, 0, 1, "conformance_window_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
	jmp	SHORT $LN6@encoder_st
$LN39@encoder_st:

; 393  :     // The standard does not seem to allow setting conf_win values such that
; 394  :     // the number of luma samples is not a multiple of 2. Options are to either
; 395  :     // hide one line or show an extra line of non-video. Neither seems like a
; 396  :     // very good option, so let's not even try.
; 397  :     assert(!(encoder->in.width % 2));

	test	cl, 1
	je	SHORT $LN12@encoder_st
	mov	r8d, 397				; 0000018dH
	lea	rdx, OFFSET FLAT:$SG4294953449
	lea	rcx, OFFSET FLAT:$SG4294953448
	call	QWORD PTR __imp__wassert
$LN12@encoder_st:

; 398  :     WRITE_U(stream, 1, 1, "conformance_window_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 399  :     WRITE_UE(stream, 0, "conf_win_left_offset");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 400  :     WRITE_UE(stream, (encoder->in.width - encoder->in.real_width) >> 1,

	mov	edx, DWORD PTR [rsi+2528]
	mov	rcx, rbx
	sub	edx, DWORD PTR [rsi+2544]
	sar	edx, 1
	call	kvz_bitstream_put_ue

; 401  :              "conf_win_right_offset");
; 402  :     WRITE_UE(stream, 0, "conf_win_top_offset");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 403  :     WRITE_UE(stream, (encoder->in.height - encoder->in.real_height) >> 1,

	mov	edx, DWORD PTR [rsi+2532]
	mov	rcx, rbx
	sub	edx, DWORD PTR [rsi+2548]
	sar	edx, 1
	call	kvz_bitstream_put_ue
$LN6@encoder_st:

; 407  :   }
; 408  : 
; 409  :   //IF window flag
; 410  :   //END IF
; 411  : 
; 412  :   WRITE_UE(stream, encoder->bitdepth-8, "bit_depth_luma_minus8");

	movsx	edx, BYTE PTR [rsi+2592]
	mov	rcx, rbx
	sub	edx, 8
	call	kvz_bitstream_put_ue

; 413  :   WRITE_UE(stream, encoder->bitdepth-8, "bit_depth_chroma_minus8");

	movsx	edx, BYTE PTR [rsi+2592]
	mov	rcx, rbx
	sub	edx, 8
	call	kvz_bitstream_put_ue

; 414  :   WRITE_UE(stream, encoder->poc_lsb_bits - 4, "log2_max_pic_order_cnt_lsb_minus4");

	mov	edx, DWORD PTR [rsi+6540]
	mov	rcx, rbx
	sub	edx, 4
	call	kvz_bitstream_put_ue

; 415  : 
; 416  :   WRITE_U(stream, 0, 1, "sps_sub_layer_ordering_info_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 112  :   for (int g = 0; g < encoder->cfg.gop_len; ++g) {

	movsx	r10, BYTE PTR [rsi+300]
	mov	eax, 1
	mov	r9, r10
	test	r10b, r10b
	jle	SHORT $LN40@encoder_st
	lea	r8, QWORD PTR [rsi+316]
	npad	13
$LL16@encoder_st:

; 113  :     int neg_refs = encoder->cfg.gop[g].ref_neg_count;

	movsx	ecx, BYTE PTR [r8+17]
	lea	r8, QWORD PTR [r8+64]
	mov	edx, eax

; 114  :     int pos_refs = encoder->cfg.gop[g].ref_pos_count;

	movsx	eax, BYTE PTR [r8-64]

; 115  :     if (neg_refs + pos_refs + 1 > max_buffer) max_buffer = neg_refs + pos_refs + 1;

	inc	eax
	add	eax, ecx
	cmp	eax, edx
	cmovle	eax, edx
	sub	r9, 1
	jne	SHORT $LL16@encoder_st

; 116  :   }
; 117  : 
; 118  :   if (encoder->cfg.gop_len == 0) max_buffer = encoder->cfg.ref_frames + 1;

	test	r10b, r10b
$LN40@encoder_st:
	jne	SHORT $LN18@encoder_st
	mov	eax, DWORD PTR [rsi+128]
	inc	eax
$LN18@encoder_st:

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	xor	ebp, ebp

; 417  : 
; 418  :   //for each layer
; 419  :   int max_buffer  = max_required_dpb_size(encoder);

	movzx	r8d, al

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	mov	ecx, ebp
	cmp	BYTE PTR [rsi+301], bpl
	jne	SHORT $LN22@encoder_st
	lea	eax, DWORD PTR [r10-1]
	test	eax, eax
	cmovg	ecx, eax
$LN22@encoder_st:

; 420  :   int max_reorder = max_num_reorder_pics(encoder);

	movzx	edi, cl

; 421  :   if (max_buffer - 1 < max_reorder) max_buffer = max_reorder + 1;

	lea	eax, DWORD PTR [r8-1]

; 422  :   WRITE_UE(stream, max_buffer - 1, "sps_max_dec_pic_buffering_minus1");

	cmp	eax, edi
	mov	rcx, rbx
	lea	edx, DWORD PTR [rdi+1]
	cmovge	edx, r8d
	dec	edx
	call	kvz_bitstream_put_ue

; 423  :   WRITE_UE(stream, max_reorder, "sps_max_num_reorder_pics");

	mov	edx, edi
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 424  : 
; 425  :   WRITE_UE(stream, 0, "sps_max_latency_increase_plus1");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 426  :   //end for
; 427  : 
; 428  :   WRITE_UE(stream, MIN_SIZE-3, "log2_min_coding_block_size_minus3");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 429  :   WRITE_UE(stream, MAX_DEPTH, "log2_diff_max_min_coding_block_size");

	mov	edx, 3
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 430  :   WRITE_UE(stream, 0, "log2_min_transform_block_size_minus2");   // 4x4

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 431  :   WRITE_UE(stream, 3, "log2_diff_max_min_transform_block_size"); // 4x4...32x32

	mov	edx, 3
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 432  :   WRITE_UE(stream, encoder->tr_depth_inter, "max_transform_hierarchy_depth_inter");

	mov	edx, DWORD PTR [rsi+6524]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 433  :   WRITE_UE(stream, encoder->cfg.tr_depth_intra, "max_transform_hierarchy_depth_intra");

	mov	edx, DWORD PTR [rsi+76]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 434  : 
; 435  :   // scaling list
; 436  :   WRITE_U(stream, encoder->scaling_list.enable, 1, "scaling_list_enable_flag");

	movsx	edx, BYTE PTR [rsi+2616]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 437  :   if (encoder->scaling_list.enable) {

	cmp	BYTE PTR [rsi+2616], 0
	je	SHORT $LN10@encoder_st

; 438  :     // Signal scaling list data for custom lists
; 439  :     WRITE_U(stream, (encoder->cfg.scaling_list == KVZ_SCALING_LIST_CUSTOM) ? 1 : 0, 1, "sps_scaling_list_data_present_flag");

	cmp	BYTE PTR [rsi+2472], 1
	mov	edx, ebp
	mov	r8b, 1
	mov	rcx, rbx
	sete	dl
	call	kvz_bitstream_put

; 440  :     if (encoder->cfg.scaling_list == KVZ_SCALING_LIST_CUSTOM) {

	cmp	BYTE PTR [rsi+2472], 1
	jne	SHORT $LN10@encoder_st

; 441  :       encoder_state_write_bitstream_scaling_list(stream, state);

	mov	rdx, r14
	mov	rcx, rbx
	call	encoder_state_write_bitstream_scaling_list
$LN10@encoder_st:

; 442  :     }
; 443  :   }
; 444  : 
; 445  :   WRITE_U(stream, (encoder->cfg.amp_enable ? 1 : 0), 1, "amp_enabled_flag");

	cmp	DWORD PTR [rsi+60], 0
	mov	edx, ebp
	mov	r8b, 1
	mov	rcx, rbx
	setne	dl
	call	kvz_bitstream_put

; 446  : 
; 447  :   WRITE_U(stream, encoder->cfg.sao_type ? 1 : 0, 1,

	cmp	DWORD PTR [rsi+44], 0
	mov	r8b, 1
	mov	rcx, rbx
	setne	bpl
	mov	edx, ebp
	call	kvz_bitstream_put

; 448  :           "sample_adaptive_offset_enabled_flag");
; 449  :   WRITE_U(stream, ENABLE_PCM, 1, "pcm_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 450  :   #if ENABLE_PCM == 1
; 451  :     WRITE_U(stream, 7, 4, "pcm_sample_bit_depth_luma_minus1");
; 452  :     WRITE_U(stream, 7, 4, "pcm_sample_bit_depth_chroma_minus1");
; 453  :     WRITE_UE(stream, 0, "log2_min_pcm_coding_block_size_minus3");
; 454  :     WRITE_UE(stream, 2, "log2_diff_max_min_pcm_coding_block_size");
; 455  :     WRITE_U(stream, 1, 1, "pcm_loop_filter_disable_flag");
; 456  :   #endif
; 457  : 
; 458  :   WRITE_UE(stream, 0, "num_short_term_ref_pic_sets");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 459  : 
; 460  :   //IF num short term ref pic sets
; 461  :   //ENDIF
; 462  : 
; 463  :   WRITE_U(stream, 0, 1, "long_term_ref_pics_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 464  : 
; 465  :   //IF long_term_ref_pics_present
; 466  :   //ENDIF
; 467  : 
; 468  :   WRITE_U(stream, state->encoder_control->cfg.tmvp_enable, 1,

	mov	rax, QWORD PTR [r14]
	mov	r8b, 1
	mov	rcx, rbx
	mov	edx, DWORD PTR [rax+2396]
	call	kvz_bitstream_put

; 469  :           "sps_temporal_mvp_enable_flag");
; 470  :   WRITE_U(stream, 0, 1, "sps_strong_intra_smoothing_enable_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 471  :   WRITE_U(stream, 1, 1, "vui_parameters_present_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 472  : 
; 473  :   encoder_state_write_bitstream_VUI(stream, state);

	mov	rdx, r14
	mov	rcx, rbx
	call	encoder_state_write_bitstream_VUI

; 337  :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	rax, QWORD PTR [r14]

; 338  :   if (cfg->implicit_rdpcm && cfg->lossless) {

	cmp	DWORD PTR [rax+2420], 0
	je	$LN27@encoder_st
	cmp	DWORD PTR [rax+2392], 0
	je	$LN27@encoder_st

; 339  :     WRITE_U(stream, 1, 1, "sps_extension_present_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 340  : 
; 341  :     WRITE_U(stream, 1, 1, "sps_range_extension_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 342  :     WRITE_U(stream, 0, 1, "sps_multilayer_extension_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 343  :     WRITE_U(stream, 0, 1, "sps_3d_extension_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 344  :     WRITE_U(stream, 0, 5, "sps_extension_5bits");

	mov	r8b, 5
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 345  : 
; 346  :     WRITE_U(stream, 0, 1, "transform_skip_rotation_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 347  :     WRITE_U(stream, 0, 1, "transform_skip_context_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 348  :     WRITE_U(stream, 1, 1, "implicit_rdpcm_enabled_flag");

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 349  :     WRITE_U(stream, 0, 1, "explicit_rdpcm_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 350  :     WRITE_U(stream, 0, 1, "extended_precision_processing_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 351  :     WRITE_U(stream, 0, 1, "intra_smoothing_disabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 352  :     WRITE_U(stream, 0, 1, "high_precision_offsets_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 353  :     WRITE_U(stream, 0, 1, "persistent_rice_adaptation_enabled_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
$LN27@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put
	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+25]
	and	cl, 7
	je	SHORT $LN31@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, 8
	xor	edx, edx
	sub	r8b, cl
	mov	rcx, rbx
	call	kvz_bitstream_put
$LN31@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 478  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
encoder_state_write_bitstream_seq_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
encoder_state_write_bitstream_pic_parameter_set PROC

; 482  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 483  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rdi, QWORD PTR [rdx]
	mov	rbx, rcx

; 484  : #ifdef KVZ_DEBUG
; 485  :   printf("=========== Picture Parameter Set ID: 0 ===========\n");
; 486  : #endif
; 487  :   WRITE_UE(stream, 0, "pic_parameter_set_id");

	xor	edx, edx
	call	kvz_bitstream_put_ue

; 488  :   WRITE_UE(stream, 0, "seq_parameter_set_id");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 489  :   WRITE_U(stream, encoder->pps.dependent_slice_segments_enabled_flag, 1, "dependent_slice_segments_enabled_flag");

	movzx	edx, BYTE PTR [rdi+6528]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 490  :   WRITE_U(stream, 0, 1, "output_flag_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 491  :   WRITE_U(stream, 0, 3, "num_extra_slice_header_bits");

	mov	r8b, 3
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 492  :   WRITE_U(stream, encoder->cfg.signhide_enable, 1, "sign_data_hiding_flag");

	mov	edx, DWORD PTR [rdi+52]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 493  :   WRITE_U(stream, 0, 1, "cabac_init_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 494  : 
; 495  :   WRITE_UE(stream, 0, "num_ref_idx_l0_default_active_minus1");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 496  :   WRITE_UE(stream, 0, "num_ref_idx_l1_default_active_minus1");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 497  :   
; 498  :   // If tiles and slices = tiles is enabled, signal QP in the slice header. Keeping the PPS constant for OMAF etc
; 499  :   // Keep QP constant here also if it will be only set at CU level.
; 500  :   bool constant_qp_in_pps = ((encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable) || encoder->cfg.set_qp_in_cu;

	xor	r14d, r14d
	test	BYTE PTR [rdi+2440], 1
	je	SHORT $LN236@encoder_st
	cmp	BYTE PTR [rdi+6368], r14b
	jne	SHORT $LN237@encoder_st
$LN236@encoder_st:
	cmp	BYTE PTR [rdi+2463], r14b
	jne	SHORT $LN237@encoder_st

; 501  :   WRITE_SE(stream, constant_qp_in_pps ? 0 : (((int8_t)encoder->cfg.qp) - 26), "pic_init_qp_minus26");

	movsx	edx, BYTE PTR [rdi]
	sub	edx, 26
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	test	edx, edx
	jle	SHORT $LN234@encoder_st
	lea	edx, DWORD PTR [rdx*2-1]
	jmp	SHORT $LN22@encoder_st
$LN237@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 501  :   WRITE_SE(stream, constant_qp_in_pps ? 0 : (((int8_t)encoder->cfg.qp) - 26), "pic_init_qp_minus26");

	mov	edx, r14d
$LN234@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	neg	edx
	add	edx, edx
$LN22@encoder_st:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 503  :   WRITE_U(stream, 0, 1, "constrained_intra_pred_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 504  :   WRITE_U(stream, encoder->cfg.trskip_enable, 1, "transform_skip_enabled_flag");

	mov	edx, DWORD PTR [rdi+72]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 505  : 
; 506  :   if (encoder->max_qp_delta_depth >= 0) {

	mov	r8b, 1
	mov	rcx, rbx
	cmp	BYTE PTR [rdi+6520], r14b
	jl	SHORT $LN8@encoder_st

; 507  :     // Use separate QP for each LCU when rate control is enabled.
; 508  :     WRITE_U(stream, 1, 1, "cu_qp_delta_enabled_flag");

	mov	edx, 1
	call	kvz_bitstream_put

; 509  :     WRITE_UE(stream, encoder->max_qp_delta_depth, "diff_cu_qp_delta_depth");

	movsx	edx, BYTE PTR [rdi+6520]
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 510  :   } else {

	jmp	SHORT $LN9@encoder_st
$LN8@encoder_st:

; 511  :     WRITE_U(stream, 0, 1, "cu_qp_delta_enabled_flag");

	xor	edx, edx
	call	kvz_bitstream_put
$LN9@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 517  :   WRITE_U(stream, 0, 1, "pps_slice_chroma_qp_offsets_present_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 518  :   WRITE_U(stream, 0, 1, "weighted_pred_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 519  :   WRITE_U(stream, 0, 1, "weighted_bipred_idc");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put

; 520  : 
; 521  :   //WRITE_U(stream, 0, 1, "dependent_slices_enabled_flag");
; 522  :   WRITE_U(stream, encoder->cfg.lossless, 1, "transquant_bypass_enable_flag");

	mov	edx, DWORD PTR [rdi+2392]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 523  :   WRITE_U(stream, encoder->tiles_enable, 1, "tiles_enabled_flag");

	movsx	edx, BYTE PTR [rdi+6368]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 524  :   //wavefronts
; 525  :   WRITE_U(stream, encoder->cfg.wpp, 1, "entropy_coding_sync_enabled_flag");

	mov	edx, DWORD PTR [rdi+168]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 526  : 
; 527  :   if (encoder->tiles_enable) {

	cmp	BYTE PTR [rdi+6368], r14b
	je	$LN37@encoder_st

; 528  :     WRITE_UE(stream, encoder->cfg.tiles_width_count  - 1, "num_tile_columns_minus1");

	mov	edx, DWORD PTR [rdi+144]
	mov	rcx, rbx
	dec	edx
	call	kvz_bitstream_put_ue

; 529  :     WRITE_UE(stream, encoder->cfg.tiles_height_count - 1, "num_tile_rows_minus1");

	mov	edx, DWORD PTR [rdi+148]
	mov	rcx, rbx
	dec	edx
	call	kvz_bitstream_put_ue

; 530  :     
; 531  :     WRITE_U(stream, encoder->tiles_uniform_spacing_flag, 1, "uniform_spacing_flag");

	movsx	edx, BYTE PTR [rdi+6369]
	mov	r8b, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 532  :     
; 533  :     if (!encoder->tiles_uniform_spacing_flag) {

	cmp	BYTE PTR [rdi+6369], r14b
	jne	$LN6@encoder_st

; 534  :       int i;
; 535  :       for (i = 0; i < encoder->cfg.tiles_width_count - 1; ++i) {

	mov	eax, DWORD PTR [rdi+144]
	dec	eax
	mov	QWORD PTR [rsp+48], rbp
	mov	ebp, r14d
	test	eax, eax
	jle	SHORT $LN3@encoder_st

; 497  :   
; 498  :   // If tiles and slices = tiles is enabled, signal QP in the slice header. Keeping the PPS constant for OMAF etc
; 499  :   // Keep QP constant here also if it will be only set at CU level.
; 500  :   bool constant_qp_in_pps = ((encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable) || encoder->cfg.set_qp_in_cu;

	mov	rsi, r14
	npad	11
$LL4@encoder_st:

; 536  :         WRITE_UE(stream, encoder->tiles_col_width[i] - 1, "column_width_minus1[...]");

	mov	rax, QWORD PTR [rdi+6376]
	mov	rcx, rbx
	mov	edx, DWORD PTR [rax+rsi]
	dec	edx
	call	kvz_bitstream_put_ue
	mov	eax, DWORD PTR [rdi+144]
	lea	rsi, QWORD PTR [rsi+4]
	dec	eax
	inc	ebp
	cmp	ebp, eax
	jl	SHORT $LL4@encoder_st
$LN3@encoder_st:

; 537  :       }
; 538  :       for (i = 0; i < encoder->cfg.tiles_height_count - 1; ++i) {

	mov	eax, DWORD PTR [rdi+148]
	mov	esi, r14d
	dec	eax
	test	eax, eax
	jle	SHORT $LN238@encoder_st

; 497  :   
; 498  :   // If tiles and slices = tiles is enabled, signal QP in the slice header. Keeping the PPS constant for OMAF etc
; 499  :   // Keep QP constant here also if it will be only set at CU level.
; 500  :   bool constant_qp_in_pps = ((encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable) || encoder->cfg.set_qp_in_cu;

	mov	rbp, r14
	npad	8
$LL7@encoder_st:

; 539  :         WRITE_UE(stream, encoder->tiles_row_height[i] - 1, "row_height_minus1[...]");

	mov	rax, QWORD PTR [rdi+6384]
	mov	rcx, rbx
	mov	edx, DWORD PTR [rax+rbp]
	dec	edx
	call	kvz_bitstream_put_ue
	mov	eax, DWORD PTR [rdi+148]
	lea	rbp, QWORD PTR [rbp+4]
	dec	eax
	inc	esi
	cmp	esi, eax
	jl	SHORT $LL7@encoder_st
$LN238@encoder_st:
	mov	rbp, QWORD PTR [rsp+48]
$LN6@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN37@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN38@encoder_st
	cmp	sil, 4
	jae	SHORT $LN38@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN38@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN37@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LL56@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN50@encoder_st
	cmp	sil, 4
	jae	SHORT $LN50@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN50@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	11
$LL56@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil
	or	sil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LL68@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN62@encoder_st
	cmp	sil, 4
	jae	SHORT $LN62@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN62@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	mov	BYTE PTR [rbx+26], r14b
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LL68@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN73@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN74@encoder_st
	cmp	sil, 4
	jae	SHORT $LN74@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN74@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN73@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 551  :   WRITE_U(stream, encoder->cfg.deblock_enable ? 0 : 1, 1,

	mov	eax, DWORD PTR [rdi+40]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	sil, sil
	mov	BYTE PTR [rbx+24], sil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	eax, eax
	jne	SHORT $LN219@encoder_st

; 237  :       stream->data |= 1;

	or	sil, 1
	mov	BYTE PTR [rbx+24], sil
$LN219@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN85@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN86@encoder_st
	cmp	sil, 4
	jae	SHORT $LN86@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN86@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN85@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 555  :   if (encoder->cfg.deblock_enable) {

	cmp	DWORD PTR [rdi+40], r14d
	je	SHORT $LL100@encoder_st

; 556  :      WRITE_SE(stream, encoder->cfg.deblock_beta, "beta_offset_div2");

	mov	edx, DWORD PTR [rdi+96]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	test	edx, edx
	jg	SHORT $LN93@encoder_st
	neg	edx
	add	edx, edx
	jmp	SHORT $LN94@encoder_st
$LN93@encoder_st:
	lea	edx, DWORD PTR [rdx*2-1]
$LN94@encoder_st:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 557  :      WRITE_SE(stream, encoder->cfg.deblock_tc, "tc_offset_div2");

	mov	edx, DWORD PTR [rdi+100]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	test	edx, edx
	jg	SHORT $LN97@encoder_st
	neg	edx
	add	edx, edx
	jmp	SHORT $LN98@encoder_st
$LN97@encoder_st:
	lea	edx, DWORD PTR [rdx*2-1]
$LN98@encoder_st:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	rcx, rbx
	call	kvz_bitstream_put_ue
	npad	7
$LL100@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LL112@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN106@encoder_st
	cmp	dil, 4
	jae	SHORT $LN106@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN106@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	3
$LL112@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN117@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN118@encoder_st
	cmp	dil, 4
	jae	SHORT $LN118@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN118@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN117@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 566  :   WRITE_UE(stream, 0, "log2_parallel_merge_level_minus2");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LL136@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN130@encoder_st
	cmp	dil, 4
	jae	SHORT $LN130@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN130@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	12
$LL136@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LL151@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN142@encoder_st
	cmp	dil, 4
	jae	SHORT $LN142@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN142@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
	npad	3
$LL151@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil
	or	dil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN156@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN157@encoder_st
	cmp	dil, 4
	jae	SHORT $LN157@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN157@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	mov	BYTE PTR [rbx+26], r14b
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN156@encoder_st:

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rbx+25]
	and	al, 7
	je	SHORT $LN199@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	esi, 8
	sub	sil, al

; 233  :   while (bits--) {

	je	SHORT $LN199@encoder_st
	npad	12
$LL163@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+24]
	add	sil, 255				; 000000ffH

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], dil
	jne	SHORT $LN168@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], r14b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN169@encoder_st
	cmp	dil, 4
	jae	SHORT $LN169@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN169@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	test	dil, dil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, r14d
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN168@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL163@encoder_st
$LN199@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 571  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
encoder_state_write_bitstream_pic_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
buf$ = 48
tv1567 = 1104
length$1$ = 1104
state$ = 1104
encoder_state_write_bitstream_prefix_sei_version PROC

; 574  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 1056				; 00000420H
	mov	rbx, rcx

; 575  : #define STR_BUF_LEN 1000
; 576  :   bitstream_t * const stream = &state->stream;
; 577  :   int i, length;
; 578  :   char buf[STR_BUF_LEN] = { 0 };

	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rsp+16]
	mov	r8d, 984				; 000003d8H
	call	memset

; 579  :   char *s = buf + 16;
; 580  :   const kvz_config * const cfg = &state->encoder_control->cfg;
; 581  : 
; 582  :   // random uuid_iso_iec_11578 generated with www.famkruithof.net/uuid/uuidgen
; 583  :   static const uint8_t uuid[16] = {
; 584  :     0x32, 0xfe, 0x46, 0x6c, 0x98, 0x41, 0x42, 0x69,
; 585  :     0xae, 0x35, 0x6a, 0x91, 0x54, 0x9e, 0xf3, 0xf1
; 586  :   };
; 587  :   memcpy(buf, uuid, 16);

	movups	xmm0, XMMWORD PTR ?uuid@?1??encoder_state_write_bitstream_prefix_sei_version@@9@9
	mov	rdi, QWORD PTR [rbx]

; 588  : 
; 589  :   // user_data_payload_byte
; 590  :   s += sprintf(s, "Kvazaar HEVC Encoder v. " VERSION_STRING " - "

	lea	rdx, OFFSET FLAT:$SG4294953447
	lea	rcx, QWORD PTR buf$[rsp+16]
	movaps	XMMWORD PTR buf$[rsp], xmm0
	call	sprintf

; 591  :                   "Copyleft 2012-2015 - http://ultravideo.cs.tut.fi/ - options:");
; 592  :   s += sprintf(s, " %dx%d", cfg->width, cfg->height);

	mov	r9d, DWORD PTR [rdi+16]
	lea	rsi, QWORD PTR buf$[rsp+16]
	mov	r8d, DWORD PTR [rdi+12]
	lea	rdx, OFFSET FLAT:$SG4294953446
	movsxd	rcx, eax
	add	rsi, rcx
	mov	rcx, rsi
	call	sprintf

; 593  :   s += sprintf(s, " deblock=%d:%d:%d", cfg->deblock_enable,

	mov	r9d, DWORD PTR [rdi+96]
	lea	rdx, OFFSET FLAT:$SG4294953445
	mov	r8d, DWORD PTR [rdi+40]
	movsxd	rcx, eax
	mov	eax, DWORD PTR [rdi+100]
	add	rsi, rcx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], eax
	call	sprintf

; 594  :                cfg->deblock_beta, cfg->deblock_tc);
; 595  :   s += sprintf(s, " sao=%d", cfg->sao_type);

	mov	r8d, DWORD PTR [rdi+44]
	lea	rdx, OFFSET FLAT:$SG4294953444
	movsxd	rcx, eax
	add	rsi, rcx
	mov	rcx, rsi
	call	sprintf

; 596  :   s += sprintf(s, " intra_period=%d", cfg->intra_period);

	mov	r8d, DWORD PTR [rdi+4]
	lea	rdx, OFFSET FLAT:$SG4294953443
	movsxd	rcx, eax
	add	rsi, rcx
	mov	rcx, rsi
	call	sprintf

; 597  :   s += sprintf(s, " qp=%d", cfg->qp);

	mov	r8d, DWORD PTR [rdi]
	lea	rdx, OFFSET FLAT:$SG4294953442
	movsxd	rcx, eax
	add	rsi, rcx
	mov	rcx, rsi
	call	sprintf

; 598  :   s += sprintf(s, " ref=%d", cfg->ref_frames);

	mov	r8d, DWORD PTR [rdi+128]
	lea	rdx, OFFSET FLAT:$SG4294953441
	movsxd	rcx, eax
	add	rsi, rcx
	mov	rcx, rsi
	call	sprintf
	lea	rcx, QWORD PTR buf$[rsp]
	sub	esi, ecx

; 599  : 
; 600  :   length = (int)(s - buf + 1);  // length, +1 for \0

	lea	r13d, DWORD PTR [rsi+1]
	add	r13d, eax
	mov	DWORD PTR length$1$[rsp], r13d

; 601  : 
; 602  :   // Assert this so that in the future if the message gets longer, we remember
; 603  :   // to increase the buf len. Divide by 2 for margin.
; 604  :   assert(length < STR_BUF_LEN / 2);

	cmp	r13d, 500				; 000001f4H
	jl	SHORT $LN9@encoder_st
	mov	r8d, 604				; 0000025cH
	lea	rdx, OFFSET FLAT:$SG4294953440
	lea	rcx, OFFSET FLAT:$SG4294953439
	call	QWORD PTR __imp__wassert
$LN9@encoder_st:

; 605  : 
; 606  :   // payloadType = 5 -> user_data_unregistered
; 607  :   WRITE_U(stream, 5, 8, "last_payload_type_byte");

	mov	r8b, 8
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 5
	call	kvz_bitstream_put

; 610  :   for (i = 0; i <= length - 255; i += 255)

	xor	eax, eax
	mov	r12d, eax
	lea	eax, DWORD PTR [r13-255]
	test	eax, eax
	js	$LN3@encoder_st

; 605  : 
; 606  :   // payloadType = 5 -> user_data_unregistered
; 607  :   WRITE_U(stream, 5, 8, "last_payload_type_byte");

	mov	eax, -2139062143			; 80808081H
	mul	r13d
	shr	edx, 7
	imul	r12d, edx, 255				; 000000ffH
	xor	r13d, r13d
	mov	r15d, edx
	npad	10
$LL4@encoder_st:

; 611  :     WRITE_U(stream, 255, 8, "ff_byte");

	mov	sil, 8
	lea	r14, OFFSET FLAT:kvz_bit_set_mask+32
	npad	6
$LL11@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+120]
	lea	r14, QWORD PTR [r14-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+120], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	cmp	BYTE PTR [r14], r13b
	je	SHORT $LN97@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+120], dil
$LN97@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+121]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+121], 8
	jne	SHORT $LN16@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+121], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN17@encoder_st
	cmp	dil, 4
	jae	SHORT $LN17@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN17@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rbx+96]
	test	dil, dil
	movzx	eax, al
	movzx	edx, dil
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+122], al
	call	kvz_bitstream_writebyte
$LN16@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL11@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 610  :   for (i = 0; i <= length - 255; i += 255)

	sub	r15, 1
	jne	SHORT $LL4@encoder_st
	mov	r13d, DWORD PTR length$1$[rsp]
$LN3@encoder_st:
	mov	r15d, r13d

; 612  :   WRITE_U(stream, length - i, 8, "last_payload_size_byte");

	lea	r14, OFFSET FLAT:kvz_bit_set_mask+32
	sub	r15d, r12d
	mov	sil, 8
	xor	r13d, r13d
	npad	6
$LL23@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+120]
	lea	r14, QWORD PTR [r14-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+120], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [r14], r15d
	je	SHORT $LN98@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+120], dil
$LN98@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+121]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+121], 8
	jne	SHORT $LN28@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+121], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN29@encoder_st
	cmp	dil, 4
	jae	SHORT $LN29@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN29@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rbx+96]
	test	dil, dil
	movzx	eax, al
	movzx	edx, dil
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+122], al
	call	kvz_bitstream_writebyte
$LN28@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL23@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 614  :   for (i = 0; i < length; i++)

	movsxd	r13, DWORD PTR length$1$[rsp]
	mov	QWORD PTR tv1567[rsp], r13
	test	r13, r13
	jle	$LN6@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	xor	eax, eax
	mov	r12d, eax
	npad	9
$LL7@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 615  :     WRITE_U(stream, ((uint8_t *)buf)[i], 8, "sei_payload");

	movzx	r15d, BYTE PTR buf$[rsp+r12]
	lea	r14, OFFSET FLAT:kvz_bit_set_mask+32
	mov	sil, 8
	xor	r13d, r13d
	npad	13
$LL35@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+120]
	lea	r14, QWORD PTR [r14-4]
	add	dil, dil
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rbx+120], dil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [r14], r15d
	je	SHORT $LN99@encoder_st

; 237  :       stream->data |= 1;

	or	dil, 1
	mov	BYTE PTR [rbx+120], dil
$LN99@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+121]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+121], 8
	jne	SHORT $LN40@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+121], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN41@encoder_st
	cmp	dil, 4
	jae	SHORT $LN41@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN41@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rbx+96]
	test	dil, dil
	movzx	eax, al
	movzx	edx, dil
	cmovne	eax, r13d
	mov	BYTE PTR [rbx+122], al
	call	kvz_bitstream_writebyte
$LN40@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL35@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 614  :   for (i = 0; i < length; i++)

	inc	r12
	cmp	r12, QWORD PTR tv1567[rsp]
	jl	$LL7@encoder_st
$LN6@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 289  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rbx+121]
	test	al, 7
	je	$LN89@encoder_st

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+120]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	al
	add	dil, dil
	mov	BYTE PTR [rbx+121], al
	or	dil, 1
	mov	BYTE PTR [rbx+120], dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, 8
	jne	SHORT $LN58@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+122], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN59@encoder_st
	cmp	dil, 4
	jae	SHORT $LN59@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
$LN59@encoder_st:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	mov	BYTE PTR [rbx+122], 0
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
$LN58@encoder_st:

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rbx+121]
	and	al, 7
	je	SHORT $LN89@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	esi, 8
	sub	sil, al

; 233  :   while (bits--) {

	je	SHORT $LN89@encoder_st
	npad	4
$LL65@encoder_st:

; 234  :     stream->data <<= 1;

	movzx	edi, BYTE PTR [rbx+120]
	add	sil, 255				; 000000ffH

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+121]
	add	dil, dil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+121], 8
	mov	BYTE PTR [rbx+120], dil
	jne	SHORT $LN70@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN71@encoder_st
	cmp	dil, 4
	jae	SHORT $LN71@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN71@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al
	mov	ecx, 0
	test	dil, dil
	movzx	eax, al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, dil
	cmovne	eax, ecx
	lea	rcx, QWORD PTR [rbx+96]
	mov	BYTE PTR [rbx+122], al
	call	kvz_bitstream_writebyte
$LN70@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL65@encoder_st
$LN89@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 621  : }

	lea	r11, QWORD PTR [rsp+1056]
	mov	rbx, QWORD PTR [r11+56]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
encoder_state_write_bitstream_prefix_sei_version ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 48
encoder_state_write_picture_timing_sei_message PROC

; 658  : static void encoder_state_write_picture_timing_sei_message(encoder_state_t * const state) {

	push	rsi
	sub	rsp, 32					; 00000020H

; 659  : 
; 660  :   bitstream_t * const stream = &state->stream;
; 661  : 
; 662  :   if (state->encoder_control->vui.frame_field_info_present_flag){

	mov	rax, QWORD PTR [rcx]
	lea	rsi, QWORD PTR [rcx+96]
	cmp	BYTE PTR [rax+2609], 0
	je	$LN15@encoder_st

; 663  : 
; 664  :     int8_t odd_picture = state->frame->num % 2;

	mov	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rdi
	mov	r8d, DWORD PTR [rax+8]
	and	r8d, -2147483647			; ffffffff80000001H
	jge	SHORT $LN17@encoder_st
	dec	r8d
	or	r8d, -2
	inc	r8d
$LN17@encoder_st:

; 665  :     int8_t pic_struct = 0; //0: progressive picture, 1: top field, 2: bottom field, 3...
; 666  :     int8_t source_scan_type = 1; //0: interlaced, 1: progressive
; 667  : 
; 668  :     switch (state->tile->frame->source->interlacing){

	mov	rax, QWORD PTR [rcx+48]
	mov	rcx, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rcx]
	mov	ecx, DWORD PTR [rdx+112]
	test	ecx, ecx
	je	SHORT $LN5@encoder_st
	sub	ecx, 1
	je	$LN6@encoder_st
	cmp	ecx, 1
	je	$LN7@encoder_st

; 681  :     default:
; 682  :       assert(0); //Should never execute

	mov	r8d, 682				; 000002aaH
	lea	rdx, OFFSET FLAT:$SG4294953438
	lea	rcx, OFFSET FLAT:$SG4294953437
	call	QWORD PTR __imp__wassert
$LN5@encoder_st:

; 683  :       break;
; 684  :     }
; 685  : 
; 686  :     WRITE_U(stream, 1, 8, "last_payload_type_byte"); //pic_timing

	xor	ebx, ebx
	mov	edi, ebx
	mov	ebx, 1
$LN10@encoder_st:
	mov	r8b, 8
	mov	edx, 1
	mov	rcx, rsi
	call	kvz_bitstream_put

; 687  :     WRITE_U(stream, 1, 8, "last_payload_size_byte");

	mov	r8b, 8
	mov	edx, 1
	mov	rcx, rsi
	call	kvz_bitstream_put

; 688  :     WRITE_U(stream, pic_struct, 4, "pic_struct");

	mov	r8b, 4
	mov	edx, edi
	mov	rcx, rsi
	call	kvz_bitstream_put

; 689  :     WRITE_U(stream, source_scan_type, 2, "source_scan_type");

	mov	r8b, 2
	mov	edx, ebx
	mov	rcx, rsi
	call	kvz_bitstream_put

; 690  :     WRITE_U(stream, 0, 1, "duplicate_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, rsi
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 289  :   if ((stream->cur_bit & 7) != 0) {

	test	BYTE PTR [rsi+25], 7
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 690  :     WRITE_U(stream, 0, 1, "duplicate_flag");

	mov	rdi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 289  :   if ((stream->cur_bit & 7) != 0) {

	je	SHORT $LN15@encoder_st

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rsi
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rsi+25]
	and	cl, 7
	je	SHORT $LN15@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, 8
	xor	edx, edx
	sub	r8b, cl
	mov	rcx, rsi
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 694  : }

	add	rsp, 32					; 00000020H
	pop	rsi
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	jmp	kvz_bitstream_put
$LN15@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 694  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN7@encoder_st:

; 677  :     case 2: //Bottom field first
; 678  :       pic_struct = odd_picture ? 1 : 2;
; 679  :       source_scan_type = 0;

	neg	r8b
	sbb	edi, edi
	add	edi, 2
	xor	ebx, ebx

; 680  :       break;

	jmp	$LN10@encoder_st
$LN6@encoder_st:

; 669  :     case 0: //Progressive frame
; 670  :       pic_struct = 0;
; 671  :       source_scan_type = 1;
; 672  :       break;
; 673  :     case 1: //Top field first
; 674  :       pic_struct = odd_picture ? 2 : 1;
; 675  :       source_scan_type = 0;

	xor	ebx, ebx
	test	r8b, r8b
	mov	edi, ebx
	setne	dil
	inc	edi

; 676  :       break;

	jmp	$LN10@encoder_st
encoder_state_write_picture_timing_sei_message ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 48
r_count$ = 56
r_max_length$ = 64
encoder_state_entry_points_explore PROC

; 697  : static void encoder_state_entry_points_explore(const encoder_state_t * const state, int * const r_count, int * const r_max_length) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r14
	sub	rsp, 32					; 00000020H

; 698  :   int i;
; 699  :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	rax, QWORD PTR [rcx+16]
	xor	ebx, ebx
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
	cmp	QWORD PTR [rax], rbx
	je	SHORT $LN3@encoder_st
	mov	QWORD PTR [rsp+48], rdi
	mov	r9d, ebx
	mov	edi, ebx
$LL4@encoder_st:

; 700  :     if (state->children[i].is_leaf) {

	cmp	DWORD PTR [r9+rax+72], 0
	je	SHORT $LN5@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	edx, DWORD PTR [r9+rax+96]

; 136  :   return position * 8 + stream->cur_bit;

	movzx	ecx, BYTE PTR [r9+rax+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 702  :       ++(*r_count);

	inc	DWORD PTR [rbp]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	lea	r8, QWORD PTR [rcx+rdx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 701  :       const int my_length = kvz_bitstream_tell(&state->children[i].stream)/8;

	shr	r8, 3

; 703  :       if (my_length > *r_max_length) {

	cmp	r8d, DWORD PTR [rsi]
	jle	SHORT $LN2@encoder_st

; 704  :         *r_max_length = my_length;

	mov	DWORD PTR [rsi], r8d

; 705  :       }
; 706  :     } else {

	jmp	SHORT $LN2@encoder_st
$LN5@encoder_st:

; 707  :       encoder_state_entry_points_explore(&state->children[i], r_count, r_max_length);

	movsxd	rcx, ebx
	mov	r8, rsi
	imul	rcx, rcx, 424				; 000001a8H
	mov	rdx, rbp
	add	rcx, rax
	call	encoder_state_entry_points_explore
	mov	rax, QWORD PTR [r14+16]
$LN2@encoder_st:

; 698  :   int i;
; 699  :   for (i = 0; state->children[i].encoder_control; ++i) {

	inc	rdi
	inc	ebx
	imul	r9, rdi, 424				; 000001a8H
	cmp	QWORD PTR [r9+rax], 0
	jne	SHORT $LL4@encoder_st
	mov	rdi, QWORD PTR [rsp+48]
$LN3@encoder_st:

; 708  :     }
; 709  :   }
; 710  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
encoder_state_entry_points_explore ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 112
state$ = 120
num_entry_points$ = 128
write_length$ = 136
r_count$ = 144
encoder_state_write_bitstream_entry_points_write PROC

; 712  : static void encoder_state_write_bitstream_entry_points_write(bitstream_t * const stream, const encoder_state_t * const state, const int num_entry_points, const int write_length, int * const r_count) {

	mov	r11, rsp
	mov	DWORD PTR [r11+32], r9d
	mov	DWORD PTR [r11+24], r8d
	mov	QWORD PTR [r11+16], rdx
	push	rdi
	push	r13
	sub	rsp, 88					; 00000058H
	mov	rax, rdx
	mov	rdi, rcx

; 713  :   int i;
; 714  :   for (i = 0; state->children[i].encoder_control; ++i) {

	xor	edx, edx
	mov	r13d, edx
	mov	rcx, QWORD PTR [rax+16]
	cmp	QWORD PTR [rcx], rdx
	je	$LN3@encoder_st
	mov	QWORD PTR [r11+8], rbx
	lea	r10, OFFSET FLAT:kvz_bit_set_mask
	mov	QWORD PTR [r11-24], rbp
	mov	eax, edx
	mov	QWORD PTR [r11-32], rsi
	mov	QWORD PTR [r11-40], r12
	mov	r12d, edx
	mov	QWORD PTR [r11-48], r14
	mov	QWORD PTR [r11-56], r15
	mov	r15, QWORD PTR r_count$[rsp]
	npad	6
$LL4@encoder_st:

; 715  :     if (state->children[i].is_leaf) {

	add	rax, rcx
	cmp	DWORD PTR [rax+72], 0
	je	$LN5@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	ecx, DWORD PTR [rax+96]

; 136  :   return position * 8 + stream->cur_bit;

	movzx	eax, BYTE PTR [rax+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 717  :       ++(*r_count);

	inc	DWORD PTR [r15]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	lea	rdx, QWORD PTR [rax+rcx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 716  :       const int my_length = kvz_bitstream_tell(&state->children[i].stream)/8;

	shr	rdx, 3

; 718  :       //Don't write the last one
; 719  :       if (*r_count < num_entry_points) {

	cmp	DWORD PTR [r15], r8d
	jge	$LN2@encoder_st

; 720  :         WRITE_U(stream, my_length - 1, write_length, "entry_point_offset-minus1")

	movzx	esi, r9b
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 233  :   while (bits--) {

	test	r9b, r9b
	je	$LN2@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 720  :         WRITE_U(stream, my_length - 1, write_length, "entry_point_offset-minus1")

	lea	r14d, DWORD PTR [rdx-1]
	xor	r15d, r15d
	lea	rbp, QWORD PTR [r10+rsi*4]
$LL12@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	bl, bl
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rdi+24], bl

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	r14d, DWORD PTR [rbp]
	je	SHORT $LN117@encoder_st

; 237  :       stream->data |= 1;

	or	bl, 1
	mov	BYTE PTR [rdi+24], bl
$LN117@encoder_st:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rdi+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rdi+25], 8
	jne	SHORT $LN17@encoder_st

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+25], r15b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN18@encoder_st
	cmp	bl, 4
	jae	SHORT $LN18@encoder_st

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN18@encoder_st:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, bl
	test	bl, bl
	movzx	eax, al
	mov	rcx, rdi
	cmovne	eax, r15d
	mov	BYTE PTR [rdi+26], al
	call	kvz_bitstream_writebyte
$LN17@encoder_st:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL12@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 722  :     } else {

	mov	r15, QWORD PTR r_count$[rsp]
	jmp	SHORT $LN120@encoder_st
$LN5@encoder_st:

; 723  :       encoder_state_write_bitstream_entry_points_write(stream, &state->children[i], num_entry_points, write_length, r_count);

	movsxd	rax, r13d
	imul	rdx, rax, 424				; 000001a8H
	mov	QWORD PTR [rsp+32], r15
	add	rdx, rcx
	mov	rcx, rdi
	call	encoder_state_write_bitstream_entry_points_write
$LN120@encoder_st:

; 713  :   int i;
; 714  :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	r8d, DWORD PTR num_entry_points$[rsp]
	lea	r10, OFFSET FLAT:kvz_bit_set_mask
	mov	r9d, DWORD PTR write_length$[rsp]
$LN2@encoder_st:
	mov	rcx, QWORD PTR state$[rsp]
	inc	r12
	imul	rax, r12, 424				; 000001a8H
	mov	rcx, QWORD PTR [rcx+16]
	inc	r13d
	cmp	QWORD PTR [rax+rcx], 0
	jne	$LL4@encoder_st
	mov	r15, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+112]
$LN3@encoder_st:

; 724  :     }
; 725  :   }
; 726  : }

	add	rsp, 88					; 00000058H
	pop	r13
	pop	rdi
	ret	0
encoder_state_write_bitstream_entry_points_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
last_poc$1$ = 32
j$3$ = 32
last_poc$2$ = 36
j$2$ = 36
tv3223 = 40
tv3184 = 40
stream$ = 160
state$ = 168
ref_positive$1$ = 176
ref_negative$1$ = 184
kvz_encoder_state_write_bitstream_slice_header_independent PROC

; 731  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 732  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rbp, QWORD PTR [rdx]

; 733  : 
; 734  :   int j;
; 735  :   int ref_negative = 0;

	xor	edi, edi

; 736  :   int ref_positive = 0;
; 737  :   if (encoder->cfg.gop_len) {

	mov	r10, QWORD PTR [rdx+40]
	mov	esi, edi
	mov	r15, rdx
	mov	DWORD PTR ref_negative$1$[rsp], edi
	mov	rbx, rcx
	mov	DWORD PTR ref_positive$1$[rsp], edi
	mov	r14d, edi
	cmp	BYTE PTR [rbp+300], sil
	je	$LN23@kvz_encode

; 738  :     for (j = 0; j < state->frame->ref->used_size; j++) {

	mov	r11, QWORD PTR [r10+40]
	mov	r8d, edi
	mov	ecx, DWORD PTR [r11+36]
	cmp	ecx, 8
	jb	$LN193@kvz_encode
	movd	xmm5, DWORD PTR [r10+12]
	mov	eax, ecx

; 739  :       if (state->frame->ref->pocs[j] < state->frame->poc) {

	mov	r9, QWORD PTR [r11+16]
	and	eax, -8					; fffffff8H
	movaps	XMMWORD PTR [rsp+80], xmm6
	xorps	xmm3, xmm3
	movaps	XMMWORD PTR [rsp+64], xmm7
	xorps	xmm6, xmm6
	movaps	XMMWORD PTR [rsp+48], xmm8
	xorps	xmm7, xmm7
	movdqa	xmm8, XMMWORD PTR __xmm@00000001000000010000000100000001
	xorps	xmm4, xmm4
	pshufd	xmm5, xmm5, 0
	mov	edx, edi
	npad	1
$LL4@kvz_encode:
	movdqu	xmm0, XMMWORD PTR [r9+rdx]
	lea	rdx, QWORD PTR [rdx+32]
	add	r8d, 8

; 740  :         ref_negative++;

	movdqa	xmm1, xmm3
	movdqa	xmm2, xmm5
	pcmpgtd	xmm2, xmm0
	paddd	xmm1, xmm8
	pand	xmm1, xmm2
	movdqa	xmm0, xmm2
	pandn	xmm0, xmm3
	movdqa	xmm3, xmm1
	por	xmm3, xmm0

; 741  :       } else {
; 742  :         ref_positive++;

	movdqa	xmm0, xmm4
	paddd	xmm0, xmm8
	pand	xmm4, xmm2
	movdqa	xmm1, xmm2
	movdqa	xmm2, xmm5
	pandn	xmm1, xmm0
	movdqa	xmm0, xmm4
	movdqa	xmm4, xmm1
	movdqa	xmm1, xmm8
	por	xmm4, xmm0
	paddd	xmm1, xmm6
	movdqu	xmm0, XMMWORD PTR [r9+rdx-16]
	pcmpgtd	xmm2, xmm0
	pand	xmm1, xmm2
	movdqa	xmm0, xmm2
	pandn	xmm0, xmm6
	movdqa	xmm6, xmm1
	por	xmm6, xmm0
	movdqa	xmm1, xmm2
	pand	xmm2, xmm7
	movdqa	xmm0, xmm8
	paddd	xmm0, xmm7
	pandn	xmm1, xmm0
	movdqa	xmm7, xmm1
	por	xmm7, xmm2
	cmp	r8d, eax
	jb	$LL4@kvz_encode

; 738  :     for (j = 0; j < state->frame->ref->used_size; j++) {

	movaps	xmm8, XMMWORD PTR [rsp+48]
	paddd	xmm4, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+64]
	paddd	xmm3, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+80]
	movdqa	xmm0, xmm4
	psrldq	xmm0, 8
	paddd	xmm4, xmm0
	movdqa	xmm0, xmm4
	psrldq	xmm0, 4
	paddd	xmm4, xmm0
	movdqa	xmm0, xmm3
	psrldq	xmm0, 8
	paddd	xmm3, xmm0
	movd	esi, xmm4
	movdqa	xmm0, xmm3
	psrldq	xmm0, 4
	paddd	xmm3, xmm0
	mov	DWORD PTR ref_positive$1$[rsp], esi
	movd	r14d, xmm3
	mov	DWORD PTR ref_negative$1$[rsp], r14d
$LN193@kvz_encode:
	cmp	r8d, ecx
	jae	SHORT $LN24@kvz_encode

; 739  :       if (state->frame->ref->pocs[j] < state->frame->poc) {

	mov	r11, QWORD PTR [r11+16]
	sub	ecx, r8d
	mov	r9d, DWORD PTR [r10+12]
	movsxd	rax, r8d
	mov	r8d, ecx
	lea	rdx, QWORD PTR [rax*4]
	npad	8
$LL190@kvz_encode:

; 738  :     for (j = 0; j < state->frame->ref->used_size; j++) {

	cmp	DWORD PTR [r11+rdx], r9d
	lea	eax, DWORD PTR [rsi+1]
	lea	rdx, QWORD PTR [rdx+4]
	cmovge	esi, eax
	lea	eax, DWORD PTR [r14+1]
	cmovge	eax, r14d
	mov	r14d, eax
	sub	r8, 1
	jne	SHORT $LL190@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	mov	DWORD PTR ref_negative$1$[rsp], eax
	mov	DWORD PTR ref_positive$1$[rsp], esi
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 745  :   } else ref_negative = state->frame->ref->used_size;

	jmp	SHORT $LN24@kvz_encode
$LN23@kvz_encode:
	mov	rax, QWORD PTR [r10+40]
	mov	r14d, DWORD PTR [rax+36]
	mov	DWORD PTR ref_negative$1$[rsp], r14d
$LN24@kvz_encode:

; 746  : 
; 747  :   WRITE_UE(stream, state->frame->slicetype, "slice_type");

	mov	edx, DWORD PTR [r10+88]
	mov	rcx, rbx
	mov	QWORD PTR [rsp+160], r12
	mov	QWORD PTR [rsp+96], r13
	call	kvz_bitstream_put_ue

; 748  : 
; 749  :   if (state->frame->pictype != KVZ_NAL_IDR_W_RADL
; 750  :       && state->frame->pictype != KVZ_NAL_IDR_N_LP)

	mov	r8, QWORD PTR [r15+40]
	movzx	eax, BYTE PTR [r8+84]
	sub	al, 19
	cmp	al, 1
	jbe	$LN88@kvz_encode

; 751  :   {
; 752  :     const int poc_lsb = state->frame->poc & ((1 << encoder->poc_lsb_bits) - 1);

	mov	ecx, DWORD PTR [rbp+6540]
	mov	edx, 1
	shl	edx, cl
	dec	edx
	and	edx, DWORD PTR [r8+12]

; 753  :     WRITE_U(stream, poc_lsb, encoder->poc_lsb_bits, "pic_order_cnt_lsb");

	movzx	r8d, cl
	mov	rcx, rbx
	call	kvz_bitstream_put

; 754  : 
; 755  :     int last_poc = 0;
; 756  :     int poc_shift = 0;
; 757  : 
; 758  :     WRITE_U(stream, 0, 1, "short_term_ref_pic_set_sps_flag");

	mov	r8b, 1
	mov	DWORD PTR last_poc$1$[rsp], edi
	xor	edx, edx
	mov	rcx, rbx
	mov	r15d, edi
	call	kvz_bitstream_put

; 759  :     WRITE_UE(stream, ref_negative, "num_negative_pics");

	mov	edx, r14d
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 760  :     WRITE_UE(stream, ref_positive, "num_positive_pics");

	mov	edx, esi
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 761  :     for (j = 0; j < ref_negative; j++) {

	mov	DWORD PTR j$2$[rsp], edi
	mov	r13d, edi
	test	r14d, r14d
	jle	$LN240@kvz_encode
	movsxd	rax, r14d
	mov	r12, rdi
	mov	QWORD PTR tv3223[rsp], rax
	mov	r14, rdi
$LL7@kvz_encode:

; 762  :       int8_t delta_poc = 0;
; 763  : 
; 764  :       if (encoder->cfg.gop_len) {

	cmp	BYTE PTR [rbp+300], dil
	je	$LN46@kvz_encode

; 765  :         int8_t found = 0;
; 766  :         do {
; 767  :           delta_poc = encoder->cfg.gop[state->frame->gop_offset].ref_neg[j + poc_shift];

	mov	rsi, QWORD PTR state$[rsp]
	xor	r9b, r9b
	mov	rsi, QWORD PTR [rsi+40]
	mov	r13, QWORD PTR [rsi+40]
	movsx	r11, BYTE PTR [rsi+16]
	shl	r11, 6

; 768  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	r8d, DWORD PTR [r13+36]
	npad	2
$LL10@kvz_encode:
	lea	rax, QWORD PTR [r14+r12]
	mov	ecx, edi
	add	rax, r11
	movsx	r10d, BYTE PTR [rax+rbp+334]
	test	r8d, r8d
	je	SHORT $LN12@kvz_encode

; 769  :             if (state->frame->ref->pocs[i] == state->frame->poc - delta_poc) {

	mov	edx, DWORD PTR [rsi+12]
	mov	rax, QWORD PTR [r13+16]
	sub	edx, r10d
$LL13@kvz_encode:
	cmp	DWORD PTR [rax], edx
	je	SHORT $LN173@kvz_encode

; 768  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	inc	ecx
	add	rax, 4
	cmp	ecx, r8d
	jb	SHORT $LL13@kvz_encode

; 805  :           }
; 806  :         } while (!found);

	jmp	SHORT $LN12@kvz_encode
$LN173@kvz_encode:

; 770  :               found = 1;

	mov	r9b, 1
$LN12@kvz_encode:

; 771  :               break;
; 772  :             }
; 773  :           }
; 774  :           if (!found) poc_shift++;
; 775  :           if (j + poc_shift == ref_negative) {

	test	r9b, r9b
	lea	eax, DWORD PTR [r15+1]
	cmovne	eax, r15d
	mov	r15d, eax
	mov	eax, DWORD PTR j$2$[rsp]
	add	eax, r15d
	cmp	eax, DWORD PTR ref_negative$1$[rsp]
	je	$LN174@kvz_encode
	lea	rax, QWORD PTR [r14+1]
	test	r9b, r9b
	cmovne	rax, r14

; 778  :           }
; 779  :         } while (!found);

	mov	r14, rax
	je	SHORT $LL10@kvz_encode

; 780  :       }
; 781  : 
; 782  :       WRITE_UE(stream, encoder->cfg.gop_len?delta_poc - last_poc - 1:0, "delta_poc_s0_minus1");

	mov	r13d, DWORD PTR j$2$[rsp]
	mov	edx, r10d
	sub	edx, DWORD PTR last_poc$1$[rsp]
	dec	edx
	mov	DWORD PTR last_poc$1$[rsp], r10d
	jmp	SHORT $LN47@kvz_encode
$LN46@kvz_encode:
	mov	edx, edi
	mov	DWORD PTR last_poc$1$[rsp], edi
$LN47@kvz_encode:
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 784  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s0_flag");

	mov	rax, QWORD PTR state$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	sil, sil
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 784  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s0_flag");

	mov	rax, QWORD PTR [rax+40]
	movzx	ecx, BYTE PTR [rax+83]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	mov	BYTE PTR [rbx+24], sil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	cl, cl
	jne	SHORT $LN215@kvz_encode

; 237  :       stream->data |= 1;

	or	sil, 1
	mov	BYTE PTR [rbx+24], sil
$LN215@kvz_encode:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN64@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN65@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN65@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN65@kvz_encode:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, edi
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN64@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 761  :     for (j = 0; j < ref_negative; j++) {

	inc	r13d
	inc	r12
	mov	DWORD PTR j$2$[rsp], r13d
	cmp	r12, QWORD PTR tv3223[rsp]
	jl	$LL7@kvz_encode
	mov	esi, DWORD PTR ref_positive$1$[rsp]
$LN240@kvz_encode:

; 785  :     }
; 786  :     last_poc = 0;

	mov	DWORD PTR last_poc$2$[rsp], edi

; 787  :     poc_shift = 0;

	mov	r15d, edi

; 788  :     for (j = 0; j < ref_positive; j++) {      

	mov	DWORD PTR j$3$[rsp], edi
	mov	r13d, edi
	test	esi, esi
	jle	$LN241@kvz_encode
	movsxd	rax, esi
	mov	r12, rdi
	mov	QWORD PTR tv3184[rsp], rax
	mov	r14, rdi
$LL16@kvz_encode:

; 789  :       int8_t delta_poc = 0;
; 790  :       
; 791  :       if (encoder->cfg.gop_len) {

	cmp	BYTE PTR [rbp+300], dil
	je	$LN48@kvz_encode

; 792  :         int8_t found = 0;
; 793  :         do {
; 794  :           delta_poc = encoder->cfg.gop[state->frame->gop_offset].ref_pos[j + poc_shift];

	mov	rax, QWORD PTR state$[rsp]
	xor	r10b, r10b
	mov	ecx, DWORD PTR ref_positive$1$[rsp]
	mov	r13, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [r13+40]
	movsx	rsi, BYTE PTR [r13+16]
	shl	rsi, 6

; 795  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	r9d, DWORD PTR [rax+36]
$LL19@kvz_encode:
	lea	rax, QWORD PTR [r14+r12]
	mov	edx, edi
	add	rax, rsi
	movsx	r11d, BYTE PTR [rax+rbp+317]
	test	r9d, r9d
	je	SHORT $LN21@kvz_encode

; 796  :             if (state->frame->ref->pocs[i] == state->frame->poc + delta_poc) {

	mov	rax, QWORD PTR [r13+40]
	mov	r8d, DWORD PTR [r13+12]
	add	r8d, r11d
	mov	rax, QWORD PTR [rax+16]
	npad	3
$LL22@kvz_encode:
	cmp	DWORD PTR [rax], r8d
	je	SHORT $LN175@kvz_encode

; 795  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	inc	edx
	add	rax, 4
	cmp	edx, r9d
	jb	SHORT $LL22@kvz_encode

; 805  :           }
; 806  :         } while (!found);

	jmp	SHORT $LN247@kvz_encode
$LN174@kvz_encode:

; 776  :             fprintf(stderr, "Failure, reference not found!");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294953436
	call	fprintf

; 777  :             exit(EXIT_FAILURE);

	mov	ecx, 1
	call	QWORD PTR __imp_exit
	int	3
$LN175@kvz_encode:

; 797  :               found = 1;

	mov	r10b, 1
$LN247@kvz_encode:

; 798  :               break;
; 799  :             }
; 800  :           }
; 801  :           if (!found) poc_shift++;
; 802  :           if (j + poc_shift == ref_positive) {

	mov	ecx, DWORD PTR ref_positive$1$[rsp]
$LN21@kvz_encode:
	test	r10b, r10b
	lea	eax, DWORD PTR [r15+1]
	cmovne	eax, r15d
	mov	r15d, eax
	mov	eax, DWORD PTR j$3$[rsp]
	add	eax, r15d
	cmp	eax, ecx
	je	$LN176@kvz_encode
	lea	rax, QWORD PTR [r14+1]
	test	r10b, r10b
	cmovne	rax, r14

; 805  :           }
; 806  :         } while (!found);

	mov	r14, rax
	je	$LL19@kvz_encode

; 807  :       }
; 808  :       
; 809  :       WRITE_UE(stream, encoder->cfg.gop_len ? delta_poc - last_poc - 1 : 0, "delta_poc_s1_minus1");

	mov	r13d, DWORD PTR j$3$[rsp]
	mov	edx, r11d
	sub	edx, DWORD PTR last_poc$2$[rsp]
	dec	edx
	mov	DWORD PTR last_poc$2$[rsp], r11d
	jmp	SHORT $LN49@kvz_encode
$LN48@kvz_encode:
	mov	edx, edi
	mov	DWORD PTR last_poc$2$[rsp], edi
$LN49@kvz_encode:
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 811  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s1_flag");

	mov	rax, QWORD PTR state$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	add	sil, sil
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 811  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s1_flag");

	mov	rax, QWORD PTR [rax+40]
	movzx	ecx, BYTE PTR [rax+83]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	mov	BYTE PTR [rbx+24], sil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	cl, cl
	jne	SHORT $LN216@kvz_encode

; 237  :       stream->data |= 1;

	or	sil, 1
	mov	BYTE PTR [rbx+24], sil
$LN216@kvz_encode:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN76@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN77@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN77@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN77@kvz_encode:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, edi
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN76@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 788  :     for (j = 0; j < ref_positive; j++) {      

	inc	r13d
	inc	r12
	mov	DWORD PTR j$3$[rsp], r13d
	cmp	r12, QWORD PTR tv3184[rsp]
	jl	$LL16@kvz_encode
$LN241@kvz_encode:

; 812  :     }
; 813  :     //WRITE_UE(stream, 0, "short_term_ref_pic_set_idx");
; 814  :     
; 815  :     if (state->encoder_control->cfg.tmvp_enable) {

	mov	r15, QWORD PTR state$[rsp]
	mov	r14d, DWORD PTR ref_negative$1$[rsp]
	mov	rax, QWORD PTR [r15]
	cmp	DWORD PTR [rax+2396], edi
	je	SHORT $LN88@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]
	add	sil, sil
	mov	BYTE PTR [rbx+24], sil

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	r14d, r14d
	je	SHORT $LN217@kvz_encode

; 237  :       stream->data |= 1;

	or	sil, 1
	mov	BYTE PTR [rbx+24], sil
$LN217@kvz_encode:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	jne	SHORT $LN88@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN89@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN89@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN89@kvz_encode:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, edi
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN88@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 824  :   if (encoder->cfg.sao_type) {

	cmp	DWORD PTR [rbp+44], edi
	je	$LN112@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil
	or	sil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN100@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN101@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN101@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN101@kvz_encode:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	mov	BYTE PTR [rbx+26], dil
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN100@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 826  :     if (encoder->chroma_format != KVZ_CSP_400) {

	cmp	DWORD PTR [rbp+2596], edi
	je	SHORT $LN112@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil
	or	sil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN112@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN113@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN113@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN113@kvz_encode:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	mov	BYTE PTR [rbx+26], dil
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN112@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 831  :   if (state->frame->slicetype != KVZ_SLICE_I) {

	mov	rax, QWORD PTR [r15+40]
	cmp	DWORD PTR [rax+88], 2
	je	$LN39@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil
	or	sil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN124@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN125@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN125@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN125@kvz_encode:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	mov	BYTE PTR [rbx+26], dil
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN124@kvz_encode:

; 237  :       stream->data |= 1;

	mov	rax, QWORD PTR [r15+40]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 833  :       WRITE_UE(stream, MAX(0, ((int)state->frame->ref_LX_size[0]) - 1), "num_ref_idx_l0_active_minus1");

	mov	edx, edi
	movzx	ecx, BYTE PTR [rax+81]
	sub	ecx, 1
	cmovns	edx, ecx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue

; 834  :       if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	rax, QWORD PTR [r15+40]
	cmp	DWORD PTR [rax+88], edi
	jne	SHORT $LN136@kvz_encode

; 835  :         WRITE_UE(stream, MAX(0, ((int)state->frame->ref_LX_size[1]) - 1), "num_ref_idx_l1_active_minus1");

	movzx	eax, BYTE PTR [rax+82]
	mov	edx, edi
	sub	eax, 1
	mov	rcx, rbx
	cmovns	edx, eax
	call	kvz_bitstream_put_ue
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN136@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN137@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN137@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN137@kvz_encode:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	sil, sil
	movzx	eax, al
	mov	rcx, rbx
	cmovne	eax, edi
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
$LN136@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 840  :       if (state->encoder_control->cfg.tmvp_enable && ref_negative > 0) {

	mov	rax, QWORD PTR [r15]
	cmp	DWORD PTR [rax+2396], edi
	je	SHORT $LN43@kvz_encode
	test	r14d, r14d
	jle	SHORT $LN43@kvz_encode

; 841  :         if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	rax, QWORD PTR [r15+40]
	cmp	DWORD PTR [rax+88], edi
	jne	SHORT $LN148@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	esi, BYTE PTR [rbx+24]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rbx+25]
	add	sil, sil
	or	sil, 1

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rbx+25], 8
	mov	BYTE PTR [rbx+24], sil
	jne	SHORT $LN148@kvz_encode

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rbx+26], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rbx+25], dil

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN149@kvz_encode
	cmp	sil, 4
	jae	SHORT $LN149@kvz_encode

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN149@kvz_encode:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	mov	BYTE PTR [rbx+26], dil
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
$LN148@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 846  :         if (ref_negative > 1) {

	cmp	r14d, 1
	jle	SHORT $LN43@kvz_encode

; 847  :           // Use first reference from L0
; 848  :           // ToDo: use better reference
; 849  :           WRITE_UE(stream, 0, "collocated_ref_idx");

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
$LN43@kvz_encode:

; 850  :         }
; 851  :       }
; 852  :       const uint8_t max_merge_cands = state->encoder_control->cfg.max_merge;
; 853  :       WRITE_UE(stream, 5- max_merge_cands, "five_minus_max_num_merge_cand");

	mov	rax, QWORD PTR [r15]
	mov	edx, 5
	movzx	ecx, BYTE PTR [rax+2473]
	sub	edx, ecx
	mov	rcx, rbx
	call	kvz_bitstream_put_ue
$LN39@kvz_encode:

; 854  :   }
; 855  : 
; 856  :   {
; 857  :     // If tiles are enabled, signal the full QP here (relative to the base value of 26)
; 858  :     // If QP is to be set only at CU level, force slice_qp_delta zero
; 859  :     bool signal_qp_in_slice_header = (encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable;

	test	BYTE PTR [rbp+2440], 1
	je	SHORT $LN56@kvz_encode

; 860  :     int slice_qp_delta = state->frame->QP - (signal_qp_in_slice_header ? 26 : encoder->cfg.qp);

	mov	edx, 26
	cmp	BYTE PTR [rbp+6368], dil
	jne	SHORT $LN57@kvz_encode
$LN56@kvz_encode:
	mov	edx, DWORD PTR [rbp]
$LN57@kvz_encode:
	mov	rax, QWORD PTR [r15+40]
	movsx	ecx, BYTE PTR [rax+24]
	sub	ecx, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	cmp	BYTE PTR [rbp+2463], dil
	cmove	edi, ecx
	test	edi, edi
	jg	SHORT $LN156@kvz_encode
	neg	edi
	add	edi, edi
	jmp	SHORT $LN157@kvz_encode
$LN176@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 803  :             fprintf(stderr, "Failure, reference not found!");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294953435
	call	fprintf

; 804  :             exit(EXIT_FAILURE);

	mov	ecx, 1
	call	QWORD PTR __imp_exit
	int	3
$LN156@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 269  :   uint32_t code_num = data <= 0 ? (-data) << 1 : (data << 1) - 1;

	lea	edi, DWORD PTR [rdi*2-1]
$LN157@kvz_encode:

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	mov	edx, edi
	mov	rcx, rbx
	mov	r13, QWORD PTR [rsp+96]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 864  : }

	mov	r12, QWORD PTR [rsp+160]
	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 270  :   kvz_bitstream_put_ue(stream, code_num);

	jmp	kvz_bitstream_put_ue
$LN246@kvz_encode:
kvz_encoder_state_write_bitstream_slice_header_independent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 112
max_length_seen$1 = 120
state$ = 120
entry_points_written$2 = 128
num_entry_points$3 = 128
independent$ = 128
kvz_encoder_state_write_bitstream_slice_header PROC

; 870  : {

$LN84:
	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 871  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rbx, QWORD PTR [rdx]
	mov	r15, rcx
	movzx	esi, r8b
	mov	r14, rdx

; 872  : 
; 873  : #ifdef KVZ_DEBUG
; 874  :   printf("=========== Slice ===========\n");
; 875  : #endif
; 876  : 
; 877  :   if (encoder->cfg.partial_coding.fullWidth != 0) {

	mov	rcx, rbx
	movzx	eax, WORD PTR [rbx+2478]
	test	ax, ax
	je	SHORT $LN2@kvz_encode

; 878  :     state->slice->start_in_rs = encoder->cfg.partial_coding.startCTU_x +

	lea	r9d, DWORD PTR [rax+63]
	movzx	eax, BYTE PTR [rbx+2477]
	shr	r9d, 6
	imul	r9d, eax
	movzx	eax, BYTE PTR [rbx+2476]
	add	r9d, eax
	mov	rax, QWORD PTR [rdx+56]
	mov	DWORD PTR [rax+12], r9d
	mov	rcx, QWORD PTR [rdx]
$LN2@kvz_encode:

; 879  :       CEILDIV(encoder->cfg.partial_coding.fullWidth, 64) * encoder->cfg.partial_coding.startCTU_y;
; 880  :   }
; 881  : 
; 882  :   bool first_slice_segment_in_pic = (state->slice->start_in_rs == 0);

	mov	rax, QWORD PTR [rdx+56]
	cmp	DWORD PTR [rax+12], 0
	sete	dil

; 883  :   if ((state->encoder_control->cfg.slices & KVZ_SLICES_WPP)
; 884  :       && state->wfrow->lcu_offset_y > 0)

	xor	ebp, ebp
	test	BYTE PTR [rcx+2440], 2
	je	SHORT $LN3@kvz_encode
	mov	rax, QWORD PTR [rdx+64]
	movzx	edi, dil
	cmp	DWORD PTR [rax], ebp
	cmovg	edi, ebp
$LN3@kvz_encode:

; 885  :   {
; 886  :     first_slice_segment_in_pic = false;
; 887  :   }
; 888  : 
; 889  :   WRITE_U(stream, first_slice_segment_in_pic, 1, "first_slice_segment_in_pic_flag");

	movzx	edx, dil
	mov	r8b, 1
	mov	rcx, r15
	call	kvz_bitstream_put

; 890  : 
; 891  :   if (state->frame->pictype >= KVZ_NAL_BLA_W_LP
; 892  :     && state->frame->pictype <= KVZ_NAL_RSV_IRAP_VCL23) {

	mov	rax, QWORD PTR [r14+40]
	movzx	ecx, BYTE PTR [rax+84]
	sub	cl, 16
	cmp	cl, 7
	ja	SHORT $LN4@kvz_encode

; 893  :     WRITE_U(stream, 0, 1, "no_output_of_prior_pics_flag");

	mov	r8b, 1
	xor	edx, edx
	mov	rcx, r15
	call	kvz_bitstream_put
$LN4@kvz_encode:

; 894  :   }
; 895  : 
; 896  :   WRITE_UE(stream, 0, "slice_pic_parameter_set_id");

	xor	edx, edx
	mov	rcx, r15
	call	kvz_bitstream_put_ue

; 897  : 
; 898  :   if (!first_slice_segment_in_pic) {

	mov	r12d, 1
	lea	r13d, QWORD PTR [r12+7]
	test	dil, dil
	jne	$LN5@kvz_encode

; 899  :     if (encoder->pps.dependent_slice_segments_enabled_flag) {

	cmp	BYTE PTR [rbx+6528], bpl
	je	SHORT $LN6@kvz_encode

; 900  :       WRITE_U(stream, !independent, 1, "dependent_slice_segment_flag");

	test	sil, sil
	mov	edx, ebp
	movzx	r8d, r12b
	mov	rcx, r15
	sete	dl
	call	kvz_bitstream_put
$LN6@kvz_encode:

; 901  :     }
; 902  : 
; 903  :     int lcu_cnt = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	edi, DWORD PTR [rbx+2540]
	imul	edi, DWORD PTR [rbx+2536]

; 904  :     if (encoder->cfg.partial_coding.fullWidth != 0) {

	movzx	eax, WORD PTR [rbx+2478]
	test	ax, ax
	je	SHORT $LN7@kvz_encode

; 905  :       lcu_cnt = CEILDIV(encoder->cfg.partial_coding.fullWidth, 64) * CEILDIV(encoder->cfg.partial_coding.fullHeight, 64);

	movzx	edi, WORD PTR [rbx+2480]
	add	eax, 63					; 0000003fH
	add	edi, 63					; 0000003fH
	shr	eax, 6
	shr	edi, 6
	imul	edi, eax
$LN7@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 61   :   assert(value > 0);

	test	edi, edi
	jne	SHORT $LN24@kvz_encode
	lea	r8d, QWORD PTR [rdi+61]
	lea	rdx, OFFSET FLAT:$SG4294953451
	lea	rcx, OFFSET FLAT:$SG4294953450
	call	QWORD PTR __imp__wassert

; 45   :   assert(value > 0);

	lea	r8d, QWORD PTR [rdi+45]
	lea	rdx, OFFSET FLAT:$SG4294953453
	lea	rcx, OFFSET FLAT:$SG4294953452
	call	QWORD PTR __imp__wassert
$LN24@kvz_encode:

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	eax, r12d
	mov	rdx, r12
	rol	rdx, 4
	mov	r8d, ebp
	mov	ecx, edx

; 53   :     value >>= shift;

	mov	r9d, edi
	shl	eax, cl
	cmp	edi, eax
	mov	eax, 4
	cmovae	r8d, edx
	mov	ecx, r8d
	shr	r9d, cl
	mov	ecx, ebp
	cmp	r9d, 256				; 00000100H
	cmovae	ecx, r13d
	shr	r9d, cl
	cmp	r9d, 16
	lea	edx, DWORD PTR [r8+rcx]

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	mov	r8d, ebp

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	ecx, ebp
	cmovae	ecx, eax

; 52   :     result += shift;

	add	edx, ecx

; 53   :     value >>= shift;

	shr	r9d, cl
	cmp	r9d, eax
	mov	ecx, ebp
	mov	eax, 2
	cmovae	ecx, eax
	mov	eax, ebp
	add	edx, ecx
	shr	r9d, cl
	cmp	r9d, 2
	setae	al
	add	edx, eax

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	lea	eax, DWORD PTR [rdi-1]
	test	eax, edi
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 908  :     int slice_start_rs = state->slice->start_in_rs;

	mov	rax, QWORD PTR [r14+56]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	setne	r8b
	add	r8d, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 908  :     int slice_start_rs = state->slice->start_in_rs;

	mov	edx, DWORD PTR [rax+12]

; 909  :     if (state->encoder_control->cfg.slices & KVZ_SLICES_WPP) {

	mov	rax, QWORD PTR [r14]
	test	BYTE PTR [rax+2440], 2
	je	SHORT $LN8@kvz_encode

; 910  :       slice_start_rs += state->wfrow->lcu_offset_y * state->tile->frame->width_in_lcu;

	mov	rax, QWORD PTR [r14+48]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR [r14+64]
	mov	r9d, DWORD PTR [rcx+28]
	imul	r9d, DWORD PTR [rax]
	add	edx, r9d
$LN8@kvz_encode:

; 911  :     }
; 912  :     WRITE_U(stream, slice_start_rs, num_bits, "slice_segment_address");

	mov	rcx, r15
	call	kvz_bitstream_put
$LN5@kvz_encode:

; 913  :   }
; 914  : 
; 915  :   if (independent) {

	test	sil, sil
	je	SHORT $LN9@kvz_encode

; 916  :     kvz_encoder_state_write_bitstream_slice_header_independent(stream, state);

	mov	rdx, r14
	mov	rcx, r15
	call	kvz_encoder_state_write_bitstream_slice_header_independent
$LN9@kvz_encode:

; 917  :   }
; 918  :    
; 919  :   if (encoder->tiles_enable || encoder->cfg.wpp) {

	cmp	BYTE PTR [rbx+6368], bpl
	jne	SHORT $LN11@kvz_encode
	cmp	DWORD PTR [rbx+168], ebp
	je	$LN14@kvz_encode
$LN11@kvz_encode:

; 920  :     int num_entry_points = 0;
; 921  :     int max_length_seen = 0;

	mov	ebx, ebp
	mov	DWORD PTR num_entry_points$3[rsp], ebp
	mov	esi, ebp
	mov	DWORD PTR max_length_seen$1[rsp], ebx

; 922  :     
; 923  :     if (state->is_leaf) {

	cmp	DWORD PTR [r14+72], ebx
	je	SHORT $LN12@kvz_encode

; 924  :       num_entry_points = 1;

	mov	esi, r12d

; 925  :     } else {

	jmp	$LN27@kvz_encode
$LN12@kvz_encode:

; 699  :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	r10, QWORD PTR [r14+16]
	mov	edi, ebp
	cmp	QWORD PTR [r10], rbx
	je	SHORT $LN27@kvz_encode

; 700  :     if (state->children[i].is_leaf) {

	mov	r11, rbp
	mov	rax, rbp
	npad	3
$LL28@kvz_encode:
	cmp	DWORD PTR [rax+r10+72], ebp
	je	SHORT $LN29@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	ecx, DWORD PTR [rax+r10+96]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 702  :       ++(*r_count);

	inc	esi
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	movzx	eax, BYTE PTR [rax+r10+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 702  :       ++(*r_count);

	mov	DWORD PTR num_entry_points$3[rsp], esi
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	lea	rdx, QWORD PTR [rax+rcx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 701  :       const int my_length = kvz_bitstream_tell(&state->children[i].stream)/8;

	shr	rdx, 3

; 703  :       if (my_length > *r_max_length) {

	cmp	edx, ebx
	jle	SHORT $LN26@kvz_encode

; 704  :         *r_max_length = my_length;

	mov	ebx, edx
	mov	DWORD PTR max_length_seen$1[rsp], edx

; 705  :       }
; 706  :     } else {

	jmp	SHORT $LN26@kvz_encode
$LN29@kvz_encode:

; 707  :       encoder_state_entry_points_explore(&state->children[i], r_count, r_max_length);

	movsxd	rax, edi
	lea	r8, QWORD PTR max_length_seen$1[rsp]
	imul	rcx, rax, 424				; 000001a8H
	lea	rdx, QWORD PTR num_entry_points$3[rsp]
	add	rcx, r10
	call	encoder_state_entry_points_explore
	mov	esi, DWORD PTR num_entry_points$3[rsp]
	mov	ebx, DWORD PTR max_length_seen$1[rsp]
$LN26@kvz_encode:

; 699  :   for (i = 0; state->children[i].encoder_control; ++i) {

	inc	r11
	inc	edi
	imul	rax, r11, 424				; 000001a8H
	cmp	QWORD PTR [rax+r10], rbp
	jne	SHORT $LL28@kvz_encode
$LN27@kvz_encode:

; 926  :     encoder_state_entry_points_explore(state, &num_entry_points, &max_length_seen);
; 927  :     }
; 928  :     
; 929  :     int num_offsets = num_entry_points - 1;

	lea	edi, DWORD PTR [rsi-1]

; 930  : 
; 931  :     WRITE_UE(stream, num_offsets, "num_entry_point_offsets");

	mov	rcx, r15
	mov	edx, edi
	call	kvz_bitstream_put_ue

; 932  :     if (num_offsets > 0) {

	test	edi, edi
	jle	$LN14@kvz_encode

; 933  :       int entry_points_written = 0;

	mov	DWORD PTR entry_points_written$2[rsp], ebp
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 45   :   assert(value > 0);

	test	ebx, ebx
	jne	SHORT $LN60@kvz_encode
	lea	r8d, QWORD PTR [rbx+45]
	lea	rdx, OFFSET FLAT:$SG4294953453
	lea	rcx, OFFSET FLAT:$SG4294953452
	call	QWORD PTR __imp__wassert
$LN60@kvz_encode:

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	edx, ebp
	mov	rax, r12
	rol	rax, 4
	mov	ecx, eax
	shl	r12d, cl
	cmp	ebx, r12d
	cmovae	edx, eax
	mov	eax, 4

; 53   :     value >>= shift;

	mov	ecx, edx
	shr	ebx, cl
	mov	ecx, ebp
	cmp	ebx, 256				; 00000100H
	cmovae	ecx, r13d
	shr	ebx, cl
	cmp	ebx, 16
	lea	edi, DWORD PTR [rcx+rdx]
	mov	ecx, ebp
	cmovae	ecx, eax
	add	edi, ecx
	shr	ebx, cl
	cmp	ebx, eax
	mov	ecx, ebp
	mov	eax, 2
	cmovae	ecx, eax
	add	edi, ecx
	shr	ebx, cl
	cmp	ebx, eax
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 935  :       WRITE_UE(stream, offset_len - 1, "offset_len_minus1");

	mov	rcx, r15
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	setae	bpl

; 52   :     result += shift;

	add	edi, ebp
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 935  :       WRITE_UE(stream, offset_len - 1, "offset_len_minus1");

	mov	edx, edi
	call	kvz_bitstream_put_ue

; 936  :       encoder_state_write_bitstream_entry_points_write(stream, state, num_entry_points, offset_len, &entry_points_written); 

	lea	rax, QWORD PTR entry_points_written$2[rsp]
	mov	r8d, esi
	lea	r9d, DWORD PTR [rdi+1]
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, r14
	mov	rcx, r15
	call	encoder_state_write_bitstream_entry_points_write
$LN14@kvz_encode:

; 937  :     }
; 938  :   }
; 939  : }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_encoder_state_write_bitstream_slice_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
checksum$ = 48
$T1 = 160
state$ = 160
tv1810 = 168
tv1853 = 176
add_checksum PROC

; 948  : {

	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r14
	sub	rsp, 112				; 00000070H

; 949  :   bitstream_t * const stream = &state->stream;
; 950  :   const videoframe_t * const frame = state->tile->frame;

	mov	rax, QWORD PTR [rcx+48]
	mov	rdi, rcx
	mov	QWORD PTR [rsp+184], rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	add	rcx, 96					; 00000060H
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 948  : {

	mov	QWORD PTR [rsp+96], r15

; 949  :   bitstream_t * const stream = &state->stream;
; 950  :   const videoframe_t * const frame = state->tile->frame;

	mov	rbx, QWORD PTR [rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 80					; 00000050H
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 955  :   WRITE_U(stream, 132, 8, "sei_type");

	mov	r8b, 8
	lea	rcx, QWORD PTR [rdi+96]
	mov	edx, 132				; 00000084H
	call	kvz_bitstream_put

; 956  : 
; 957  :   int num_colors = (state->encoder_control->chroma_format == KVZ_CSP_400 ? 1 : 3);

	mov	rdx, QWORD PTR [rdi]

; 958  : 
; 959  :   switch (state->encoder_control->cfg.hash)

	mov	eax, 1
	mov	r15d, 3
	mov	ebp, DWORD PTR [rdx+2596]
	test	ebp, ebp
	mov	ecx, DWORD PTR [rdx+2364]
	cmove	r15d, eax
	xor	r12d, r12d
	mov	QWORD PTR tv1853[rsp], r15
	test	ecx, ecx
	je	$LN15@add_checks
	sub	ecx, eax
	je	$LN13@add_checks
	cmp	ecx, eax
	jne	$LN17@add_checks

; 978  :     kvz_image_md5(frame->rec, checksum, state->encoder_control->bitdepth);

	mov	rbx, QWORD PTR [rbx+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 96   :   kvz_array_md5(im->y, im->height, im->width, im->width, checksum_out[0], bitdepth);

	lea	rax, QWORD PTR checksum$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 978  :     kvz_image_md5(frame->rec, checksum, state->encoder_control->bitdepth);

	movzx	esi, BYTE PTR [rdx+2592]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 96   :   kvz_array_md5(im->y, im->height, im->width, im->width, checksum_out[0], bitdepth);

	mov	BYTE PTR [rsp+40], sil
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 978  :     kvz_image_md5(frame->rec, checksum, state->encoder_control->bitdepth);

	mov	QWORD PTR [rsp+104], r13
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 96   :   kvz_array_md5(im->y, im->height, im->width, im->width, checksum_out[0], bitdepth);

	mov	r8d, DWORD PTR [rbx+64]
	mov	r9d, r8d
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+16]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR kvz_array_md5

; 97   : 
; 98   :   /* The number of chroma pixels is half that of luma. */
; 99   :   if (im->chroma_format != KVZ_CSP_400) {

	cmp	DWORD PTR [rbx+116], r12d
	je	SHORT $LN25@add_checks

; 100  :     kvz_array_md5(im->u, im->height >> 1, im->width >> 1, im->width >> 1, checksum_out[1], bitdepth);

	mov	r8d, DWORD PTR [rbx+64]
	lea	rax, QWORD PTR checksum$[rsp+16]
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+24]
	sar	r8d, 1
	mov	r9d, r8d
	sar	edx, 1
	mov	BYTE PTR [rsp+40], sil
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR kvz_array_md5

; 101  :     kvz_array_md5(im->v, im->height >> 1, im->width >> 1, im->width >> 1, checksum_out[2], bitdepth);

	mov	r8d, DWORD PTR [rbx+64]
	lea	rax, QWORD PTR checksum$[rsp+32]
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+32]
	sar	r8d, 1
	mov	r9d, r8d
	sar	edx, 1
	mov	BYTE PTR [rsp+40], sil
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR kvz_array_md5
$LN25@add_checks:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 980  :     WRITE_U(stream, 1 + num_colors * 16, 8, "size");

	mov	edx, 49					; 00000031H
	lea	rcx, QWORD PTR [rdi+96]
	mov	eax, 17
	test	ebp, ebp
	mov	r8b, 8
	cmove	edx, eax
	call	kvz_bitstream_put

; 981  :     WRITE_U(stream, 0, 8, "hash_type");  // 0 = md5

	mov	r8b, 8
	lea	rcx, QWORD PTR [rdi+96]
	xor	edx, edx
	call	kvz_bitstream_put
	lea	r13, QWORD PTR checksum$[rsp]
	mov	QWORD PTR $T1[rsp], r12
	mov	QWORD PTR tv1810[rsp], r13
	npad	11
$LL9@add_checks:

; 984  :       for (int b = 0; b < 16; ++b) {

	mov	r15, r12
	npad	13
$LL12@add_checks:

; 985  :         WRITE_U(stream, checksum[i][b], 8, "picture_md5");

	movzx	r12d, BYTE PTR [r15+r13]
	lea	rbp, OFFSET FLAT:kvz_bit_set_mask+32
	xor	r13d, r13d
	mov	sil, 8
$LL28@add_checks:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+120]
	lea	rbp, QWORD PTR [rbp-4]
	add	bl, bl
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rdi+120], bl

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [rbp], r12d
	je	SHORT $LN120@add_checks

; 237  :       stream->data |= 1;

	or	bl, 1
	mov	BYTE PTR [rdi+120], bl
$LN120@add_checks:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rdi+121]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rdi+121], 8
	jne	SHORT $LN33@add_checks

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+121], r13b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN34@add_checks
	cmp	bl, 4
	jae	SHORT $LN34@add_checks

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN34@add_checks:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rdi+96]
	test	bl, bl
	movzx	eax, al
	movzx	edx, bl
	cmovne	eax, r13d
	mov	BYTE PTR [rdi+122], al
	call	kvz_bitstream_writebyte
$LN33@add_checks:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL28@add_checks
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 984  :       for (int b = 0; b < 16; ++b) {

	mov	r13, QWORD PTR tv1810[rsp]
	inc	r15
	cmp	r15, 16
	jl	$LL12@add_checks

; 982  : 
; 983  :     for (int i = 0; i < num_colors; ++i) {

	mov	rax, QWORD PTR $T1[rsp]
	add	r13, 16
	inc	rax
	mov	QWORD PTR tv1810[rsp], r13
	mov	r12d, 0
	mov	QWORD PTR $T1[rsp], rax
	cmp	rax, QWORD PTR tv1853[rsp]
	jl	$LL9@add_checks

; 986  :       }
; 987  :     }
; 988  : 
; 989  :     break;

	mov	r13, QWORD PTR [rsp+104]
	jmp	$LN17@add_checks
$LN13@add_checks:

; 962  :     kvz_image_checksum(frame->rec, checksum, state->encoder_control->bitdepth);

	mov	rbx, QWORD PTR [rbx+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 79   :   kvz_array_checksum(im->y, im->height, im->width, im->width, checksum_out[0], bitdepth);

	lea	rax, QWORD PTR checksum$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 962  :     kvz_image_checksum(frame->rec, checksum, state->encoder_control->bitdepth);

	movzx	esi, BYTE PTR [rdx+2592]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 79   :   kvz_array_checksum(im->y, im->height, im->width, im->width, checksum_out[0], bitdepth);

	mov	BYTE PTR [rsp+40], sil
	mov	QWORD PTR [rsp+32], rax
	mov	r8d, DWORD PTR [rbx+64]
	mov	r9d, r8d
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+16]
	call	QWORD PTR kvz_array_checksum

; 80   : 
; 81   :   /* The number of chroma pixels is half that of luma. */
; 82   :   if (im->chroma_format != KVZ_CSP_400) {

	cmp	DWORD PTR [rbx+116], r12d
	je	SHORT $LN22@add_checks

; 83   :     kvz_array_checksum(im->u, im->height >> 1, im->width >> 1, im->width >> 1, checksum_out[1], bitdepth);

	mov	r8d, DWORD PTR [rbx+64]
	lea	rax, QWORD PTR checksum$[rsp+16]
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+24]
	sar	r8d, 1
	mov	r9d, r8d
	sar	edx, 1
	mov	BYTE PTR [rsp+40], sil
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR kvz_array_checksum

; 84   :     kvz_array_checksum(im->v, im->height >> 1, im->width >> 1, im->width >> 1, checksum_out[2], bitdepth);

	mov	r8d, DWORD PTR [rbx+64]
	lea	rax, QWORD PTR checksum$[rsp+32]
	mov	edx, DWORD PTR [rbx+68]
	mov	rcx, QWORD PTR [rbx+32]
	sar	r8d, 1
	mov	r9d, r8d
	sar	edx, 1
	mov	BYTE PTR [rsp+40], sil
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR kvz_array_checksum
$LN22@add_checks:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 964  :     WRITE_U(stream, 1 + num_colors * 4, 8, "size");

	mov	edx, 13
	lea	rcx, QWORD PTR [rdi+96]
	mov	eax, 5
	test	ebp, ebp
	mov	r8b, 8
	cmove	edx, eax
	call	kvz_bitstream_put

; 965  :     WRITE_U(stream, 2, 8, "hash_type");  // 2 = checksum

	mov	r8b, 8
	lea	rcx, QWORD PTR [rdi+96]
	mov	edx, 2
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 237  :       stream->data |= 1;

	mov	rsi, r12
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 964  :     WRITE_U(stream, 1 + num_colors * 4, 8, "size");

	lea	rbx, QWORD PTR checksum$[rsp+2]
	npad	1
$LL6@add_checks:

; 966  : 
; 967  :     for (int i = 0; i < num_colors; ++i) {
; 968  :       uint32_t checksum_val = (

	movzx	edx, BYTE PTR [rbx-2]

; 969  :         (checksum[i][0] << 24) + (checksum[i][1] << 16) +
; 970  :         (checksum[i][2] << 8) + (checksum[i][3]));
; 971  :       WRITE_U(stream, checksum_val, 32, "picture_checksum");

	lea	rcx, QWORD PTR [rdi+96]
	movzx	eax, BYTE PTR [rbx-1]
	mov	r8b, 32					; 00000020H
	shl	eax, 16
	shl	edx, 24
	add	edx, eax
	movzx	eax, BYTE PTR [rbx]
	shl	eax, 8
	add	edx, eax
	movzx	eax, BYTE PTR [rbx+1]
	add	edx, eax
	call	kvz_bitstream_put
	inc	rsi
	lea	rbx, QWORD PTR [rbx+16]
	cmp	rsi, r15
	jl	SHORT $LL6@add_checks

; 972  :       CHECKPOINT("checksum[%d] = %u", i, checksum_val);
; 973  :     }
; 974  : 
; 975  :     break;

	jmp	SHORT $LN17@add_checks
$LN15@add_checks:

; 990  : 
; 991  :   case KVZ_HASH_NONE:
; 992  :     // Means we shouldn't be writing this SEI.
; 993  :     assert(0);

	mov	r8d, 993				; 000003e1H
	lea	rdx, OFFSET FLAT:$SG4294953434
	lea	rcx, OFFSET FLAT:$SG4294953433
	call	QWORD PTR __imp__wassert
$LN17@add_checks:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 289  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rdi+121]
	mov	esi, 8
	mov	r15, QWORD PTR [rsp+96]
	test	al, 7
	je	$LN109@add_checks

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+120]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	al
	add	bl, bl
	mov	BYTE PTR [rdi+121], al
	or	bl, 1
	mov	BYTE PTR [rdi+120], bl

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, sil
	jne	SHORT $LN51@add_checks

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rdi+122], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN52@add_checks
	cmp	bl, 4
	jae	SHORT $LN52@add_checks

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte
$LN52@add_checks:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, bl
	mov	BYTE PTR [rdi+122], 0
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte
$LN51@add_checks:

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rdi+121]
	movzx	ecx, al
	and	cl, 7
	je	SHORT $LN109@add_checks

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	ebp, esi
	sub	bpl, cl

; 233  :   while (bits--) {

	je	SHORT $LN109@add_checks
	npad	5
$LL58@add_checks:

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+120]
	add	bpl, 255				; 000000ffH

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rdi+121]
	add	bl, bl
	movzx	eax, BYTE PTR [rdi+121]
	mov	BYTE PTR [rdi+120], bl

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, sil
	jne	SHORT $LN63@add_checks

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN64@add_checks
	cmp	bl, 4
	jae	SHORT $LN64@add_checks

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN64@add_checks:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rdi+96]
	test	bl, bl
	movzx	eax, al
	movzx	edx, bl
	cmovne	eax, r12d
	mov	BYTE PTR [rdi+122], al
	call	kvz_bitstream_writebyte
	movzx	eax, BYTE PTR [rdi+121]
$LN63@add_checks:

; 233  :   while (bits--) {

	test	bpl, bpl
	jne	SHORT $LL58@add_checks
$LN109@add_checks:

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+120]

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	al
	mov	rbp, QWORD PTR [rsp+184]
	add	bl, bl
	or	bl, 1
	mov	BYTE PTR [rdi+121], al
	mov	BYTE PTR [rdi+120], bl

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	al, sil
	jne	SHORT $LN78@add_checks

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	BYTE PTR [rdi+122], 2

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	jne	SHORT $LN79@add_checks
	cmp	bl, 4
	jae	SHORT $LN79@add_checks

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte
$LN79@add_checks:

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, bl
	mov	BYTE PTR [rdi+122], 0
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte
$LN78@add_checks:

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rdi+121]
	and	al, 7
	je	SHORT $LN111@add_checks

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	sub	sil, al

; 233  :   while (bits--) {

	je	SHORT $LN111@add_checks
	npad	1
$LL85@add_checks:

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+120]
	add	sil, 255				; 000000ffH

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rdi+121]
	add	bl, bl

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rdi+121], 8
	mov	BYTE PTR [rdi+120], bl
	jne	SHORT $LN90@add_checks

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+122]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+121], 0

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN91@add_checks
	cmp	bl, 4
	jae	SHORT $LN91@add_checks

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	lea	rcx, QWORD PTR [rdi+96]
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN91@add_checks:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	lea	rcx, QWORD PTR [rdi+96]
	test	bl, bl
	movzx	eax, al
	movzx	edx, bl
	cmovne	eax, r12d
	mov	BYTE PTR [rdi+122], al
	call	kvz_bitstream_writebyte
$LN90@add_checks:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL85@add_checks
$LN111@add_checks:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1000 : }

	add	rsp, 112				; 00000070H
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
add_checksum ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
stream$ = 48
state$ = 56
independent$ = 64
encoder_state_write_slice_header PROC

; 1006 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 1007 :   kvz_nal_write(stream, state->frame->pictype, 0, state->frame->first_nal);

	mov	rax, QWORD PTR [rdx+40]
	movzx	ebp, r8b
	mov	rdi, rdx
	mov	rbx, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 53   :   if(long_start_code)

	cmp	BYTE PTR [rax+200], 0
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1007 :   kvz_nal_write(stream, state->frame->pictype, 0, state->frame->first_nal);

	movzx	esi, BYTE PTR [rax+84]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 53   :   if(long_start_code)

	je	SHORT $LN4@encoder_st

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	call	kvz_bitstream_writebyte
$LN4@encoder_st:

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;

	lea	edx, DWORD PTR [rsi+rsi]

; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	mov	rcx, rbx
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1008 :   state->frame->first_nal = false;

	mov	rax, QWORD PTR [rdi+40]

; 1009 : 
; 1010 :   kvz_encoder_state_write_bitstream_slice_header(stream, state, independent);

	movzx	r8d, bpl
	mov	rdx, rdi
	mov	rcx, rbx
	mov	BYTE PTR [rax+200], 0
	call	kvz_encoder_state_write_bitstream_slice_header
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, rbx
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+25]
	and	cl, 7
	je	SHORT $LN7@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, 8
	xor	edx, edx
	sub	r8b, cl
	mov	rcx, rbx
	call	kvz_bitstream_put
$LN7@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1012 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
encoder_state_write_slice_header ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 64
encoder_state_write_bitstream_children PROC

; 1018 : {

	push	rsi
	push	rdi
	push	r15
	sub	rsp, 32					; 00000020H

; 1021 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	xor	r15d, r15d
	mov	rdi, rcx
	mov	rcx, QWORD PTR [rcx+16]
	mov	esi, r15d
	cmp	QWORD PTR [rcx], rsi
	je	$LN3@encoder_st
	mov	QWORD PTR [rsp+64], rbx
	mov	ebx, r15d
	mov	QWORD PTR [rsp+72], rbp
	mov	ebp, r15d
	mov	QWORD PTR [rsp+80], r14
$LL4@encoder_st:

; 1022 :     if (state->children[i].type == ENCODER_STATE_TYPE_SLICE) {

	mov	eax, DWORD PTR [rbx+rcx+8]
	cmp	eax, 83					; 00000053H
	jne	SHORT $LN5@encoder_st

; 1023 :       encoder_state_write_slice_header(&state->stream, &state->children[i], true);

	mov	r8b, 1
	jmp	SHORT $LN97@encoder_st
$LN5@encoder_st:

; 1024 :     } else if (state->children[i].type == ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	cmp	eax, 87					; 00000057H
	jne	SHORT $LN8@encoder_st

; 1025 :       if ((state->encoder_control->cfg.slices & KVZ_SLICES_WPP) && i != 0) {

	mov	rax, QWORD PTR [rdi]
	test	BYTE PTR [rax+2440], 2
	je	SHORT $LN8@encoder_st
	test	esi, esi
	je	SHORT $LN8@encoder_st

; 1026 :         // Add header for dependent WPP row slice.
; 1027 :         encoder_state_write_slice_header(&state->stream, &state->children[i], false);

	xor	r8d, r8d
$LN97@encoder_st:

; 1028 :       }
; 1029 :     }
; 1030 :     kvz_encoder_state_write_bitstream(&state->children[i]);

	movsxd	rax, esi
	imul	rdx, rax, 424				; 000001a8H
	add	rdx, rcx
	lea	rcx, QWORD PTR [rdi+96]
	call	encoder_state_write_slice_header
$LN8@encoder_st:
	movsxd	rax, esi
	imul	rcx, rax, 424				; 000001a8H
	add	rcx, QWORD PTR [rdi+16]
	call	kvz_encoder_state_write_bitstream

; 1031 :     kvz_bitstream_move(&state->stream, &state->children[i].stream);

	add	rbx, QWORD PTR [rdi+16]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 174  :   assert(dst->cur_bit == 0);

	cmp	BYTE PTR [rdi+121], r15b
	je	SHORT $LN80@encoder_st
	mov	r8d, 174				; 000000aeH
	lea	rdx, OFFSET FLAT:$SG4294953922
	lea	rcx, OFFSET FLAT:$SG4294953921
	call	QWORD PTR __imp__wassert
$LN80@encoder_st:

; 175  : 
; 176  :   if (src->len > 0) {

	cmp	DWORD PTR [rbx+96], r15d
	jbe	SHORT $LN78@encoder_st

; 177  :     if (dst->first == NULL) {

	mov	rax, QWORD PTR [rbx+104]
	cmp	QWORD PTR [rdi+104], r15
	jne	SHORT $LN77@encoder_st

; 178  :       dst->first = src->first;

	mov	QWORD PTR [rdi+104], rax

; 179  :       dst->last = src->last;

	mov	rax, QWORD PTR [rbx+112]
	mov	QWORD PTR [rdi+112], rax

; 180  :       dst->len = src->len;

	mov	eax, DWORD PTR [rbx+96]
	mov	DWORD PTR [rdi+96], eax

; 181  :     } else {

	jmp	SHORT $LN78@encoder_st
$LN77@encoder_st:

; 182  :       dst->last->next = src->first;

	mov	rcx, QWORD PTR [rdi+112]
	mov	QWORD PTR [rcx+4104], rax

; 183  :       dst->last = src->last;

	mov	rax, QWORD PTR [rbx+112]
	mov	QWORD PTR [rdi+112], rax

; 184  :       dst->len += src->len;

	mov	eax, DWORD PTR [rbx+96]
	add	DWORD PTR [rdi+96], eax
$LN78@encoder_st:

; 185  :     }
; 186  :   }
; 187  : 
; 188  :   // Move the leftover bits.
; 189  :   dst->data = src->data;

	movzx	eax, BYTE PTR [rbx+120]
	xorps	xmm0, xmm0
	mov	BYTE PTR [rdi+120], al
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1021 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	inc	rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 190  :   dst->cur_bit = src->cur_bit;

	movzx	eax, BYTE PTR [rbx+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1021 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	inc	esi
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 190  :   dst->cur_bit = src->cur_bit;

	mov	BYTE PTR [rdi+121], al

; 191  :   dst->zerocount = src->zerocount;

	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdi+122], al

; 74   :   memset(stream, 0, sizeof(bitstream_t));

	movups	XMMWORD PTR [rbx+96], xmm0
	movups	XMMWORD PTR [rbx+112], xmm0
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1021 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	mov	rcx, QWORD PTR [rdi+16]
	imul	rbx, rbp, 424				; 000001a8H
	cmp	QWORD PTR [rbx+rcx], r15
	jne	$LL4@encoder_st
	mov	r14, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
$LN3@encoder_st:

; 1032 :   }
; 1033 : }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	rdi
	pop	rsi
	ret	0
encoder_state_write_bitstream_children ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 64
encoder_state_write_bitstream_main PROC

; 1036 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	movzx	eax, BYTE PTR [rcx+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1045 :   if (encoder->cfg.aud_enable) {

	xor	ebp, ebp
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	edx, DWORD PTR [rcx+96]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1036 : {

	mov	rbx, rcx

; 1037 :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rsi, QWORD PTR [rcx]

; 1045 :   if (encoder->cfg.aud_enable) {

	lea	r14d, QWORD PTR [rbp+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	lea	r15, QWORD PTR [rax+rdx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1042 :   state->frame->first_nal = true;

	mov	rax, QWORD PTR [rcx+40]
	mov	BYTE PTR [rax+200], 1

; 1045 :   if (encoder->cfg.aud_enable) {

	cmp	DWORD PTR [rsi+124], ebp
	je	$LN22@encoder_st

; 1046 :     state->frame->first_nal = false;

	mov	rax, QWORD PTR [rcx+40]
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	add	rcx, 96					; 00000060H
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1046 :     state->frame->first_nal = false;

	mov	BYTE PTR [rax+200], bpl
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	call	kvz_bitstream_writebyte

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 70					; 00000046H
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 62   :   uint8_t pic_type = state->frame->slicetype == KVZ_SLICE_I ? 0

	mov	rax, QWORD PTR [rbx+40]
	mov	edx, ebp
	mov	ecx, DWORD PTR [rax+88]
	cmp	ecx, 2
	je	SHORT $LN17@encoder_st
	cmp	ecx, 1
	setne	dl
	inc	edx
$LN17@encoder_st:

; 63   :     : state->frame->slicetype == KVZ_SLICE_P ? 1
; 64   :     : 2;
; 65   :   WRITE_U(stream, pic_type, 3, "pic_type");

	mov	r8b, 3
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+121]
	and	cl, 7
	je	SHORT $LN22@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, r14d
	xor	edx, edx
	sub	r8b, cl
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
$LN22@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	rax, QWORD PTR [rbx]
	mov	rcx, QWORD PTR [rbx+40]
	mov	r8d, DWORD PTR [rax+8]
	mov	r9d, DWORD PTR [rcx+8]

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	test	r8d, r8d
	jle	SHORT $LN62@encoder_st
	mov	eax, r9d
	cdq
	idiv	r8d
	test	edx, edx
	je	SHORT $LN60@encoder_st
	test	r8d, r8d
$LN62@encoder_st:
	js	SHORT $LN27@encoder_st
	test	r9d, r9d
	jne	SHORT $LN27@encoder_st
$LN60@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1051 :     state->frame->first_nal = false;

	mov	BYTE PTR [rcx+200], bpl

; 1052 :     kvz_encoder_state_write_parameter_sets(&state->stream, state);

	mov	rdx, rbx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_encoder_state_write_parameter_sets
	mov	rcx, QWORD PTR [rbx+40]
$LN27@encoder_st:

; 1053 :   }
; 1054 : 
; 1055 :   // Send Kvazaar version information only in the first frame.
; 1056 :   if (state->frame->num == 0 && encoder->cfg.add_encoder_info) {

	cmp	DWORD PTR [rcx+8], ebp
	jne	$LN34@encoder_st
	cmp	DWORD PTR [rsi+296], ebp
	je	$LN34@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 53   :   if(long_start_code)

	cmp	BYTE PTR [rcx+200], bpl
	je	SHORT $LN31@encoder_st

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
$LN31@encoder_st:

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 78					; 0000004eH
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1058 :     state->frame->first_nal = false;

	mov	rax, QWORD PTR [rbx+40]

; 1059 :     encoder_state_write_bitstream_prefix_sei_version(state);

	mov	rcx, rbx
	mov	BYTE PTR [rax+200], bpl
	call	encoder_state_write_bitstream_prefix_sei_version
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+121]
	and	cl, 7
	je	SHORT $LN34@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, r14d
	xor	edx, edx
	sub	r8b, cl
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
$LN34@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1066 :   if (encoder->vui.frame_field_info_present_flag) {

	cmp	BYTE PTR [rsi+2609], bpl
	je	$LN56@encoder_st
; File F:\open_codec_learn_2021\kvazaar-master\src\nal.c

; 53   :   if(long_start_code)

	mov	rax, QWORD PTR [rbx+40]
	cmp	BYTE PTR [rax+200], bpl
	je	SHORT $LN37@encoder_st

; 54   :     kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
$LN37@encoder_st:

; 55   : 
; 56   :   // start_code_prefix_one_3bytes
; 57   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 58   :   kvz_bitstream_writebyte(bitstream, zero);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 59   :   kvz_bitstream_writebyte(bitstream, start_code_prefix_one_3bytes);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 60   : 
; 61   :   // Handle header bits with full bytes instead of using bitstream
; 62   :   // forbidden_zero_flag(1) + nal_unit_type(6) + 1bit of nuh_layer_id
; 63   :   byte = nal_type << 1;
; 64   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 78					; 0000004eH
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte

; 65   : 
; 66   :   // 5bits of nuh_layer_id + nuh_temporal_id_plus1(3)
; 67   :   byte = (temporal_id + 1) & 7;
; 68   :   kvz_bitstream_writebyte(bitstream, byte);

	mov	dl, 1
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1074 :     state->frame->first_nal = false;

	mov	rax, QWORD PTR [rbx+40]
	mov	BYTE PTR [rax+200], bpl

; 662  :   if (state->encoder_control->vui.frame_field_info_present_flag){

	mov	rax, QWORD PTR [rbx]
	cmp	BYTE PTR [rax+2609], bpl
	je	$LN53@encoder_st

; 663  : 
; 664  :     int8_t odd_picture = state->frame->num % 2;

	mov	rax, QWORD PTR [rbx+40]
	mov	r8d, DWORD PTR [rax+8]
	and	r8d, -2147483647			; ffffffff80000001H
	jge	SHORT $LN61@encoder_st
	dec	r8d
	or	r8d, -2
	inc	r8d
$LN61@encoder_st:

; 665  :     int8_t pic_struct = 0; //0: progressive picture, 1: top field, 2: bottom field, 3...
; 666  :     int8_t source_scan_type = 1; //0: interlaced, 1: progressive
; 667  : 
; 668  :     switch (state->tile->frame->source->interlacing){

	mov	rax, QWORD PTR [rbx+48]
	mov	rcx, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rcx]
	mov	ecx, DWORD PTR [rdx+112]
	test	ecx, ecx
	je	SHORT $LN43@encoder_st
	sub	ecx, 1
	je	$LN44@encoder_st
	cmp	ecx, 1
	je	$LN45@encoder_st

; 681  :     default:
; 682  :       assert(0); //Should never execute

	mov	r8d, 682				; 000002aaH
	lea	rdx, OFFSET FLAT:$SG4294953438
	lea	rcx, OFFSET FLAT:$SG4294953437
	call	QWORD PTR __imp__wassert
$LN43@encoder_st:

; 683  :       break;
; 684  :     }
; 685  : 
; 686  :     WRITE_U(stream, 1, 8, "last_payload_type_byte"); //pic_timing

	mov	esi, ebp
	mov	ebp, 1
$LN48@encoder_st:
	movzx	r8d, r14b
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 687  :     WRITE_U(stream, 1, 8, "last_payload_size_byte");

	movzx	r8d, r14b
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 688  :     WRITE_U(stream, pic_struct, 4, "pic_struct");

	mov	r8b, 4
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, esi
	call	kvz_bitstream_put

; 689  :     WRITE_U(stream, source_scan_type, 2, "source_scan_type");

	mov	r8b, 2
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, ebp
	call	kvz_bitstream_put

; 690  :     WRITE_U(stream, 0, 1, "duplicate_flag");

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	xor	edx, edx
	call	kvz_bitstream_put
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 289  :   if ((stream->cur_bit & 7) != 0) {

	test	BYTE PTR [rbx+121], 7
	je	SHORT $LN53@encoder_st

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	ecx, BYTE PTR [rbx+121]
	and	cl, 7
	je	SHORT $LN53@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	mov	r8d, r14d
	xor	edx, edx
	sub	r8b, cl
	lea	rcx, QWORD PTR [rbx+96]
	call	kvz_bitstream_put
$LN53@encoder_st:

; 278  :   kvz_bitstream_put(stream, 1, 1);

	mov	r8b, 1
	lea	rcx, QWORD PTR [rbx+96]
	mov	edx, 1
	call	kvz_bitstream_put

; 279  :   if ((stream->cur_bit & 7) != 0) {

	movzx	eax, BYTE PTR [rbx+121]
	and	al, 7
	je	SHORT $LN56@encoder_st

; 280  :     kvz_bitstream_put(stream, 0, 8 - (stream->cur_bit & 7));

	sub	r14b, al
	lea	rcx, QWORD PTR [rbx+96]
	movzx	r8d, r14b
	xor	edx, edx
	call	kvz_bitstream_put
$LN56@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1081 :   encoder_state_write_bitstream_children(state);

	mov	rcx, rbx
	call	encoder_state_write_bitstream_children

; 1082 : 
; 1083 :   if (state->encoder_control->cfg.hash != KVZ_HASH_NONE) {

	mov	rax, QWORD PTR [rbx]
	cmp	DWORD PTR [rax+2364], 0
	je	SHORT $LN6@encoder_st

; 1084 :     // Calculate checksum
; 1085 :     add_checksum(state);

	mov	rcx, rbx
	call	add_checksum
$LN6@encoder_st:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	ecx, DWORD PTR [rbx+96]

; 136  :   return position * 8 + stream->cur_bit;

	movzx	eax, BYTE PTR [rbx+121]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1092 :   if (state->frame->num > 0) {

	mov	rdx, QWORD PTR [rbx+40]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 136  :   return position * 8 + stream->cur_bit;

	lea	rdi, QWORD PTR [rax+rcx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c

; 1090 :   state->stats_bitstream_length = (newpos >> 3) - (curpos >> 3);

	mov	rax, r15
	shr	rax, 3
	mov	rcx, rdi
	shr	rcx, 3
	sub	ecx, eax
	mov	DWORD PTR [rbx+364], ecx

; 1092 :   if (state->frame->num > 0) {

	cmp	DWORD PTR [rdx+8], 0
	jle	SHORT $LN7@encoder_st

; 1093 :     state->frame->total_bits_coded = state->previous_encoder_state->frame->total_bits_coded;

	mov	rax, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rcx+96]
	mov	QWORD PTR [rdx+96], rax
	mov	rdx, QWORD PTR [rbx+40]
$LN7@encoder_st:

; 1094 :   }
; 1095 :   state->frame->total_bits_coded += newpos - curpos;

	mov	rax, rdi
	sub	rax, r15
	add	QWORD PTR [rdx+96], rax

; 1096 :   if(state->encoder_control->cfg.rc_algorithm == KVZ_OBA || state->encoder_control->cfg.stats_file_prefix) {

	mov	rax, QWORD PTR [rbx]
	cmp	BYTE PTR [rax+2484], 2
	je	SHORT $LN9@encoder_st
	cmp	QWORD PTR [rax+2496], 0
	je	SHORT $LN8@encoder_st
$LN9@encoder_st:

; 1097 :     kvz_update_after_picture(state);

	mov	rcx, rbx
	call	kvz_update_after_picture
$LN8@encoder_st:

; 1098 :   }
; 1099 : 
; 1100 :   if(state->frame->gop_offset)

	mov	rdx, QWORD PTR [rbx+40]
	cmp	BYTE PTR [rdx+16], 0
	je	SHORT $LN10@encoder_st

; 1101 :     state->frame->cur_gop_bits_coded = state->previous_encoder_state->frame->cur_gop_bits_coded;

	mov	rax, QWORD PTR [rbx+32]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rcx+104]
	mov	QWORD PTR [rdx+104], rax
	mov	rdx, QWORD PTR [rbx+40]
$LN10@encoder_st:

; 1102 :   state->frame->cur_gop_bits_coded += newpos - curpos;
; 1103 : }

	mov	rbx, QWORD PTR [rsp+64]
	sub	rdi, r15
	add	QWORD PTR [rdx+104], rdi
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
$LN45@encoder_st:

; 679  :       source_scan_type = 0;

	neg	r8b
	sbb	esi, esi
	add	esi, 2

; 680  :       break;

	jmp	$LN48@encoder_st
$LN44@encoder_st:

; 669  :     case 0: //Progressive frame
; 670  :       pic_struct = 0;
; 671  :       source_scan_type = 1;
; 672  :       break;
; 673  :     case 1: //Top field first
; 674  :       pic_struct = odd_picture ? 2 : 1;
; 675  :       source_scan_type = 0;

	test	r8b, r8b
	mov	esi, ebp
	setne	sil
	inc	esi

; 676  :       break;

	jmp	$LN48@encoder_st
encoder_state_write_bitstream_main ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
state$ = 48
kvz_encoder_state_write_bitstream PROC

; 1106 : {

$LN12:
	sub	rsp, 40					; 00000028H

; 1107 :   if (!state->is_leaf) {

	cmp	DWORD PTR [rcx+72], 0
	jne	SHORT $LN9@kvz_encode

; 1108 :     switch (state->type) {

	mov	QWORD PTR [rsp+32], rbx
	mov	ebx, DWORD PTR [rcx+8]
	cmp	ebx, 77					; 0000004dH
	je	SHORT $LN5@kvz_encode
	lea	eax, DWORD PTR [rbx-83]
	cmp	eax, 1
	ja	SHORT $LN7@kvz_encode

; 1111 :         break;
; 1112 :       case ENCODER_STATE_TYPE_TILE:
; 1113 :       case ENCODER_STATE_TYPE_SLICE:
; 1114 :         encoder_state_write_bitstream_children(state);

	mov	rbx, QWORD PTR [rsp+32]

; 1119 :     }
; 1120 :   }
; 1121 : }

	add	rsp, 40					; 00000028H

; 1111 :         break;
; 1112 :       case ENCODER_STATE_TYPE_TILE:
; 1113 :       case ENCODER_STATE_TYPE_SLICE:
; 1114 :         encoder_state_write_bitstream_children(state);

	jmp	encoder_state_write_bitstream_children
$LN7@kvz_encode:

; 1115 :         break;
; 1116 :       default:
; 1117 :         fprintf(stderr, "Unsupported node type %c!\n", state->type);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, ebx
	lea	rdx, OFFSET FLAT:$SG4294953432
	mov	rcx, rax
	call	fprintf

; 1118 :         assert(0);

	mov	r8d, 1118				; 0000045eH
	lea	rdx, OFFSET FLAT:$SG4294953431
	lea	rcx, OFFSET FLAT:$SG4294953430
	mov	rbx, QWORD PTR [rsp+32]

; 1119 :     }
; 1120 :   }
; 1121 : }

	add	rsp, 40					; 00000028H

; 1118 :         assert(0);

	rex_jmp	QWORD PTR __imp__wassert
$LN5@kvz_encode:

; 1109 :       case ENCODER_STATE_TYPE_MAIN:
; 1110 :         encoder_state_write_bitstream_main(state);

	mov	rbx, QWORD PTR [rsp+32]

; 1119 :     }
; 1120 :   }
; 1121 : }

	add	rsp, 40					; 00000028H

; 1109 :       case ENCODER_STATE_TYPE_MAIN:
; 1110 :         encoder_state_write_bitstream_main(state);

	jmp	encoder_state_write_bitstream_main
	mov	rbx, QWORD PTR [rsp+32]
$LN9@kvz_encode:

; 1119 :     }
; 1120 :   }
; 1121 : }

	add	rsp, 40					; 00000028H
	ret	0
kvz_encoder_state_write_bitstream ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
_TEXT	SEGMENT
opaque$ = 8
kvz_encoder_state_worker_write_bitstream PROC

; 1125 :   kvz_encoder_state_write_bitstream((encoder_state_t *) opaque);

	jmp	kvz_encoder_state_write_bitstream
kvz_encoder_state_worker_write_bitstream ENDP
_TEXT	ENDS
END
