; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

INIT_QT_ROOT_CBF DB 04fH
	DB	04fH
	DB	09aH
INIT_CU_QP_DELTA_ABS DB 09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
INIT_MERGE_IDX_EXT DB 089H
	DB	07aH
	DB	09aH
	ORG $+2
INIT_SAO_TYPE_IDX DB 0a0H
	DB	0b9H
	DB	0c8H
	ORG $+2
INIT_MERGE_FLAG_EXT DB 09aH
	DB	06eH
	DB	09aH
	ORG $+6
INIT_LAST DB	07dH
	DB	06eH
	DB	07cH
	DB	06eH
	DB	05fH
	DB	05eH
	DB	07dH
	DB	06fH
	DB	06fH
	DB	04fH
	DB	07dH
	DB	07eH
	DB	06fH
	DB	06fH
	DB	04fH
	DB	06cH
	DB	07bH
	DB	05dH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	07dH
	DB	06eH
	DB	05eH
	DB	06eH
	DB	05fH
	DB	04fH
	DB	07dH
	DB	06fH
	DB	06eH
	DB	04eH
	DB	06eH
	DB	06fH
	DB	06fH
	DB	05fH
	DB	05eH
	DB	06cH
	DB	07bH
	DB	06cH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	06eH
	DB	06eH
	DB	07cH
	DB	07dH
	DB	08cH
	DB	099H
	DB	07dH
	DB	07fH
	DB	08cH
	DB	06dH
	DB	06fH
	DB	08fH
	DB	07fH
	DB	06fH
	DB	04fH
	DB	06cH
	DB	07bH
	DB	03fH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+6
INIT_ABS_FLAG DB 06bH
	DB	0a7H
	DB	05bH
	DB	06bH
	DB	06bH
	DB	0a7H
	DB	06bH
	DB	0a7H
	DB	05bH
	DB	07aH
	DB	06bH
	DB	0a7H
	DB	08aH
	DB	099H
	DB	088H
	DB	0a7H
	DB	098H
	DB	098H
	ORG $+2
INIT_INTRA_PRED_MODE DB 0b7H
	DB	09aH
	DB	0b8H
	ORG $+1
INIT_SIG_CG_FLAG DB 079H
	DB	08cH
	DB	03dH
	DB	09aH
	DB	079H
	DB	08cH
	DB	03dH
	DB	09aH
	DB	05bH
	DB	0abH
	DB	086H
	DB	08dH
INIT_SAO_MERGE_FLAG DB 099H
	DB	099H
	DB	099H
	ORG $+1
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
INIT_REF_PIC DB	099H
	DB	099H
	DB	099H
	DB	099H
	DB	09aH
	DB	09aH
	ORG $+2
INIT_CHROMA_PRED_MODE DB 098H
	DB	08bH
	DB	098H
	DB	08bH
	DB	03fH
	DB	08bH
	ORG $+2
INIT_MVD DB	0a9H
	DB	0c6H
	DB	08cH
	DB	0c6H
	DB	09aH
	DB	09aH
	ORG $+6
INIT_SIG_FLAG DB 0aaH
	DB	09aH
	DB	08bH
	DB	099H
	DB	08bH
	DB	07bH
	DB	07bH
	DB	03fH
	DB	07cH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0aaH
	DB	099H
	DB	08aH
	DB	08aH
	DB	07aH
	DB	079H
	DB	07aH
	DB	079H
	DB	0a7H
	DB	097H
	DB	0b7H
	DB	08cH
	DB	097H
	DB	0b7H
	DB	08cH
	DB	09bH
	DB	09aH
	DB	08bH
	DB	099H
	DB	08bH
	DB	07bH
	DB	07bH
	DB	03fH
	DB	099H
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0aaH
	DB	099H
	DB	07bH
	DB	07bH
	DB	06bH
	DB	079H
	DB	06bH
	DB	079H
	DB	0a7H
	DB	097H
	DB	0b7H
	DB	08cH
	DB	097H
	DB	0b7H
	DB	08cH
	DB	06fH
	DB	06fH
	DB	07dH
	DB	06eH
	DB	06eH
	DB	05eH
	DB	07cH
	DB	06cH
	DB	07cH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	08cH
	DB	08bH
	DB	0b6H
	DB	0b6H
	DB	098H
	DB	088H
	DB	098H
	DB	088H
	DB	099H
	DB	088H
	DB	08bH
	DB	06fH
	DB	088H
	DB	08bH
	DB	06fH
	ORG $+2
INIT_SPLIT_FLAG DB 06bH
	DB	08bH
	DB	07eH
	DB	06bH
	DB	08bH
	DB	07eH
	DB	08bH
	DB	08dH
	DB	09dH
	ORG $+7
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
INIT_QT_CBF DB	099H
	DB	06fH
	DB	09aH
	DB	09aH
	DB	095H
	DB	05cH
	DB	0a7H
	DB	09aH
	DB	099H
	DB	06fH
	DB	09aH
	DB	09aH
	DB	095H
	DB	06bH
	DB	0a7H
	DB	09aH
	DB	06fH
	DB	08dH
	DB	09aH
	DB	09aH
	DB	05eH
	DB	08aH
	DB	0b6H
	DB	09aH
INIT_MVP_IDX DB	0a8H
	DB	09aH
	DB	0a8H
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+2
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
INIT_PART_SIZE DB 09aH
	DB	08bH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	08bH
	DB	09aH
	DB	09aH
	DB	0b8H
	DB	09aH
	DB	09aH
	DB	09aH
INIT_CU_TRANSQUANT_BYPASS DB 09aH
	DB	09aH
	DB	09aH
	ORG $+1
INIT_TRANS_SUBDIV_FLAG DB 0e0H
	DB	0a7H
	DB	07aH
	DB	07cH
	DB	08aH
	DB	05eH
	DB	099H
	DB	08aH
	DB	08aH
	ORG $+3
INIT_TRANSFORMSKIP_FLAG DB 08bH
	DB	08bH
	DB	08bH
	DB	08bH
	DB	08bH
	DB	08bH
	ORG $+2
INIT_PRED_MODE DB 086H
	DB	095H
	DB	09aH
	ORG $+1
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
INIT_INTER_DIR DB 05fH
	DB	04fH
	DB	03fH
	DB	01fH
	DB	01fH
	DB	05fH
	DB	04fH
	DB	03fH
	DB	01fH
	DB	01fH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+1
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
INIT_SKIP_FLAG DB 0c5H
	DB	0b9H
	DB	0c9H
	DB	0c5H
	DB	0b9H
	DB	0c9H
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+7
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
INIT_ONE_FLAG DB 09aH
	DB	0c4H
	DB	0a7H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	0b6H
	DB	086H
	DB	095H
	DB	088H
	DB	099H
	DB	079H
	DB	088H
	DB	07aH
	DB	0a9H
	DB	0d0H
	DB	0a6H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	09aH
	DB	0c4H
	DB	0c4H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	0b6H
	DB	086H
	DB	095H
	DB	088H
	DB	099H
	DB	079H
	DB	088H
	DB	089H
	DB	0a9H
	DB	0c2H
	DB	0a6H
	DB	0a7H
	DB	09aH
	DB	0a7H
	DB	089H
	DB	0b6H
	DB	08cH
	DB	05cH
	DB	089H
	DB	08aH
	DB	08cH
	DB	098H
	DB	08aH
	DB	08bH
	DB	099H
	DB	04aH
	DB	095H
	DB	05cH
	DB	08bH
	DB	06bH
	DB	07aH
	DB	098H
	DB	08cH
	DB	0b3H
	DB	0a6H
	DB	0b6H
	DB	08cH
	DB	0e3H
	DB	07aH
	DB	0c5H
PUBLIC	kvz_ctx_init
PUBLIC	kvz_context_calc_pattern_sig_ctx
PUBLIC	kvz_context_get_sig_coeff_group
PUBLIC	kvz_context_get_sig_ctx_inc
PUBLIC	kvz_init_contexts
PUBLIC	kvz_context_copy
pdata	SEGMENT
$pdata$kvz_context_calc_pattern_sig_ctx DD imagerel $LN7
	DD	imagerel $LN7+108
	DD	imagerel $unwind$kvz_context_calc_pattern_sig_ctx
$pdata$kvz_context_get_sig_coeff_group DD imagerel $LN8
	DD	imagerel $LN8+115
	DD	imagerel $unwind$kvz_context_get_sig_coeff_group
$pdata$kvz_context_get_sig_ctx_inc DD imagerel $LN23
	DD	imagerel $LN23+265
	DD	imagerel $unwind$kvz_context_get_sig_ctx_inc
$pdata$kvz_init_contexts DD imagerel $LN626
	DD	imagerel $LN626+4132
	DD	imagerel $unwind$kvz_init_contexts
xdata	SEGMENT
$unwind$kvz_context_calc_pattern_sig_ctx DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$kvz_context_get_sig_coeff_group DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$kvz_context_get_sig_ctx_inc DD 010401H
	DD	08204H
$unwind$kvz_init_contexts DD 0b1801H
	DD	096418H
	DD	085418H
	DD	073418H
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
target_state$ = 8
source_state$ = 16
kvz_context_copy PROC

; 306  :   cabac_data_t * const target_cabac = &target_state->cabac;

	sub	rcx, -128				; ffffffffffffff80H

; 307  :   const cabac_data_t * const source_cabac = &source_state->cabac;

	lea	rax, QWORD PTR [rdx+128]

; 308  :   
; 309  :   if (target_cabac == source_cabac) return;

	cmp	rcx, rax
	je	$LN1@kvz_contex

; 310  : 
; 311  :   target_cabac->ctx = source_cabac->ctx;

	movups	xmm0, XMMWORD PTR [rax+40]
	movups	XMMWORD PTR [rcx+40], xmm0
	movups	xmm1, XMMWORD PTR [rax+56]
	movups	XMMWORD PTR [rcx+56], xmm1
	movups	xmm0, XMMWORD PTR [rax+72]
	movups	XMMWORD PTR [rcx+72], xmm0
	movups	xmm1, XMMWORD PTR [rax+88]
	movups	XMMWORD PTR [rcx+88], xmm1
	movups	xmm0, XMMWORD PTR [rax+104]
	movups	XMMWORD PTR [rcx+104], xmm0
	movups	xmm1, XMMWORD PTR [rax+120]
	movups	XMMWORD PTR [rcx+120], xmm1
	movups	xmm0, XMMWORD PTR [rax+136]
	movups	XMMWORD PTR [rcx+136], xmm0
	movups	xmm0, XMMWORD PTR [rax+152]
	movups	XMMWORD PTR [rcx+152], xmm0
	movups	xmm1, XMMWORD PTR [rax+168]
	movups	XMMWORD PTR [rcx+168], xmm1
	movups	xmm0, XMMWORD PTR [rax+184]
	movups	XMMWORD PTR [rcx+184], xmm0
	movups	xmm1, XMMWORD PTR [rax+200]
	movups	XMMWORD PTR [rcx+200], xmm1
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR [rcx+216], rax
$LN1@kvz_contex:

; 312  : }

	ret	0
kvz_context_copy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
tv9821 = 48
state$ = 48
QP$ = 56
slice$ = 64
kvz_init_contexts PROC

; 222  : {

$LN626:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15

; 223  :   cabac_data_t * const cabac = &state->cabac;
; 224  :   uint16_t i;
; 225  : 
; 226  :   // Initialize contexts
; 227  :   kvz_ctx_init(&cabac->ctx.transform_skip_model_luma, QP, INIT_TRANSFORMSKIP_FLAG[slice][0]);

	movsx	esi, dl
	lea	r13, QWORD PTR [rcx+128]
	movsx	r14, r8b
	lea	r15, OFFSET FLAT:__ImageBase
	mov	QWORD PTR tv9821[rsp], r14
	movzx	ecx, BYTE PTR INIT_TRANSFORMSKIP_FLAG[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN537@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN33@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN26@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN27@kvz_init_c
$LN33@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN27@kvz_init_c
$LN537@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN26@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN27@kvz_init_c:

; 228  :   kvz_ctx_init(&cabac->ctx.transform_skip_model_chroma, QP, INIT_TRANSFORMSKIP_FLAG[slice][1]);

	mov	BYTE PTR [r13+222], dl
	movzx	ecx, BYTE PTR INIT_TRANSFORMSKIP_FLAG[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN538@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN43@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN36@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN37@kvz_init_c
$LN43@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN37@kvz_init_c
$LN538@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN36@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN37@kvz_init_c:

; 229  : 
; 230  :   kvz_ctx_init(&cabac->ctx.sao_merge_flag_model, QP, INIT_SAO_MERGE_FLAG[slice]);

	mov	BYTE PTR [r13+223], dl
	movzx	ecx, BYTE PTR INIT_SAO_MERGE_FLAG[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN539@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN53@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN46@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN47@kvz_init_c
$LN53@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN47@kvz_init_c
$LN539@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN46@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN47@kvz_init_c:

; 231  :   kvz_ctx_init(&cabac->ctx.sao_type_idx_model, QP, INIT_SAO_TYPE_IDX[slice]);

	mov	BYTE PTR [r13+40], dl
	movzx	ecx, BYTE PTR INIT_SAO_TYPE_IDX[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN540@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN63@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN56@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN57@kvz_init_c
$LN63@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN57@kvz_init_c
$LN540@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN56@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN57@kvz_init_c:

; 232  : 
; 233  :   kvz_ctx_init(&cabac->ctx.cu_merge_flag_ext_model, QP, INIT_MERGE_FLAG_EXT[slice][0]);

	mov	BYTE PTR [r13+41], dl
	movzx	ecx, BYTE PTR INIT_MERGE_FLAG_EXT[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN541@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN73@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN66@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN67@kvz_init_c
$LN73@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN67@kvz_init_c
$LN541@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN66@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN67@kvz_init_c:

; 234  :   kvz_ctx_init(&cabac->ctx.cu_merge_idx_ext_model, QP, INIT_MERGE_IDX_EXT[slice][0]);

	mov	BYTE PTR [r13+213], dl
	movzx	ecx, BYTE PTR INIT_MERGE_IDX_EXT[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN542@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN83@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN76@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN77@kvz_init_c
$LN83@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN77@kvz_init_c
$LN542@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN76@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN77@kvz_init_c:

; 235  :   kvz_ctx_init(&cabac->ctx.cu_pred_mode_model, QP, INIT_PRED_MODE[slice][0]);

	mov	BYTE PTR [r13+212], dl
	movzx	ecx, BYTE PTR INIT_PRED_MODE[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN543@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN93@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN86@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN87@kvz_init_c
$LN93@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN87@kvz_init_c
$LN543@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN86@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN87@kvz_init_c:

; 236  :   kvz_ctx_init(&cabac->ctx.cu_transquant_bypass, QP, INIT_CU_TRANSQUANT_BYPASS[slice][0]);

	mov	BYTE PTR [r13+208], dl
	movzx	ecx, BYTE PTR INIT_CU_TRANSQUANT_BYPASS[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN544@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN103@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN96@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN97@kvz_init_c
$LN103@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN97@kvz_init_c
$LN544@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN96@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN97@kvz_init_c:

; 237  : 
; 238  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[0], QP, INIT_SKIP_FLAG[slice][0]);

	mov	BYTE PTR [r13+214], dl
	lea	rbp, QWORD PTR [r14+r14*2]
	movzx	ecx, BYTE PTR INIT_SKIP_FLAG[r15+rbp]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN545@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN113@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN106@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN107@kvz_init_c
$LN113@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN107@kvz_init_c
$LN545@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN106@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN107@kvz_init_c:

; 239  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[1], QP, INIT_SKIP_FLAG[slice][1]);

	mov	BYTE PTR [r13+209], dl
	movzx	ecx, BYTE PTR INIT_SKIP_FLAG[r15+rbp+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN546@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN123@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN116@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN117@kvz_init_c
$LN123@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN117@kvz_init_c
$LN546@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN116@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN117@kvz_init_c:

; 240  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[2], QP, INIT_SKIP_FLAG[slice][2]);

	mov	BYTE PTR [r13+210], dl
	movzx	ecx, BYTE PTR INIT_SKIP_FLAG[r15+rbp+2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN547@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN133@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN126@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN127@kvz_init_c
$LN133@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN127@kvz_init_c
$LN547@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN126@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN127@kvz_init_c:

; 241  : 
; 242  :   kvz_ctx_init(&cabac->ctx.split_flag_model[0], QP, INIT_SPLIT_FLAG[slice][0]);

	mov	BYTE PTR [r13+211], dl
	movzx	ecx, BYTE PTR INIT_SPLIT_FLAG[r15+rbp]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN548@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN143@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN136@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN137@kvz_init_c
$LN143@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN137@kvz_init_c
$LN548@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN136@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN137@kvz_init_c:

; 243  :   kvz_ctx_init(&cabac->ctx.split_flag_model[1], QP, INIT_SPLIT_FLAG[slice][1]);

	mov	BYTE PTR [r13+42], dl
	movzx	ecx, BYTE PTR INIT_SPLIT_FLAG[r15+rbp+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN549@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN153@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN146@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN147@kvz_init_c
$LN153@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN147@kvz_init_c
$LN549@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN146@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN147@kvz_init_c:

; 244  :   kvz_ctx_init(&cabac->ctx.split_flag_model[2], QP, INIT_SPLIT_FLAG[slice][2]);

	mov	BYTE PTR [r13+43], dl
	movzx	ecx, BYTE PTR INIT_SPLIT_FLAG[r15+rbp+2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN550@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN163@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN156@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN157@kvz_init_c
$LN163@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN157@kvz_init_c
$LN550@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN156@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN157@kvz_init_c:

; 245  : 
; 246  :   kvz_ctx_init(&cabac->ctx.intra_mode_model, QP, INIT_INTRA_PRED_MODE[slice]);

	mov	BYTE PTR [r13+44], dl
	movzx	ecx, BYTE PTR INIT_INTRA_PRED_MODE[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN551@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN173@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN166@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN167@kvz_init_c
$LN173@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN167@kvz_init_c
$LN551@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN166@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN167@kvz_init_c:

; 247  : 
; 248  :   kvz_ctx_init(&cabac->ctx.chroma_pred_model[0], QP, INIT_CHROMA_PRED_MODE[slice][0]);

	mov	BYTE PTR [r13+45], dl
	movzx	ecx, BYTE PTR INIT_CHROMA_PRED_MODE[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN552@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN183@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN176@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN177@kvz_init_c
$LN183@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN177@kvz_init_c
$LN552@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN176@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN177@kvz_init_c:

; 249  :   kvz_ctx_init(&cabac->ctx.chroma_pred_model[1], QP, INIT_CHROMA_PRED_MODE[slice][1]);

	mov	BYTE PTR [r13+46], dl
	movzx	ecx, BYTE PTR INIT_CHROMA_PRED_MODE[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN553@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN193@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN186@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN187@kvz_init_c
$LN193@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN187@kvz_init_c
$LN553@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN186@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN187@kvz_init_c:

; 250  : 
; 251  :   kvz_ctx_init(&cabac->ctx.cu_abs_model_chroma[0], QP, INIT_ABS_FLAG[slice][4]);

	mov	BYTE PTR [r13+47], dl
	lea	rax, QWORD PTR [r14+r14*2]
	lea	r12, QWORD PTR [rax+rax]
	movzx	ecx, BYTE PTR INIT_ABS_FLAG[r12+r15+4]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN554@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN203@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN196@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN197@kvz_init_c
$LN203@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN197@kvz_init_c
$LN554@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN196@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN197@kvz_init_c:

; 252  :   kvz_ctx_init(&cabac->ctx.cu_abs_model_chroma[1], QP, INIT_ABS_FLAG[slice][5]);

	mov	BYTE PTR [r13+206], dl
	movzx	ecx, BYTE PTR INIT_ABS_FLAG[r12+r15+5]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN555@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN213@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN206@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN207@kvz_init_c
$LN213@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN207@kvz_init_c
$LN555@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN206@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN207@kvz_init_c:

; 253  : 
; 254  :   //TODO: ignore P/B contexts on intra frame
; 255  :   kvz_ctx_init(&cabac->ctx.cu_qt_root_cbf_model, QP, INIT_QT_ROOT_CBF[slice][0]);

	mov	BYTE PTR [r13+207], dl
	movzx	ecx, BYTE PTR INIT_QT_ROOT_CBF[r14+r15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN556@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN223@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN216@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN217@kvz_init_c
$LN223@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN217@kvz_init_c
$LN556@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN216@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN217@kvz_init_c:

; 256  : 
; 257  :   kvz_ctx_init(&cabac->ctx.cu_mvd_model[0], QP, INIT_MVD[slice][0]);

	mov	BYTE PTR [r13+221], dl
	movzx	ecx, BYTE PTR INIT_MVD[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN557@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN233@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN226@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN227@kvz_init_c
$LN233@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN227@kvz_init_c
$LN557@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN226@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN227@kvz_init_c:

; 258  :   kvz_ctx_init(&cabac->ctx.cu_mvd_model[1], QP, INIT_MVD[slice][1]);

	mov	BYTE PTR [r13+215], dl
	movzx	ecx, BYTE PTR INIT_MVD[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN558@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN243@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN236@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN237@kvz_init_c
$LN243@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN237@kvz_init_c
$LN558@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN236@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN237@kvz_init_c:

; 259  :   kvz_ctx_init(&cabac->ctx.cu_ref_pic_model[0], QP, INIT_REF_PIC[slice][0]);

	mov	BYTE PTR [r13+216], dl
	movzx	ecx, BYTE PTR INIT_REF_PIC[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN559@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN253@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN246@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN247@kvz_init_c
$LN253@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN247@kvz_init_c
$LN559@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN246@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN247@kvz_init_c:

; 260  :   kvz_ctx_init(&cabac->ctx.cu_ref_pic_model[1], QP, INIT_REF_PIC[slice][1]);

	mov	BYTE PTR [r13+217], dl
	movzx	ecx, BYTE PTR INIT_REF_PIC[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN560@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN263@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN256@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN257@kvz_init_c
$LN263@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN257@kvz_init_c
$LN560@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN256@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN257@kvz_init_c:

; 261  :   kvz_ctx_init(&cabac->ctx.mvp_idx_model[0], QP, INIT_MVP_IDX[slice][0]);

	mov	BYTE PTR [r13+218], dl
	movzx	ecx, BYTE PTR INIT_MVP_IDX[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN561@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN273@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN266@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN267@kvz_init_c
$LN273@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN267@kvz_init_c
$LN561@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN266@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN267@kvz_init_c:

; 262  :   kvz_ctx_init(&cabac->ctx.mvp_idx_model[1], QP, INIT_MVP_IDX[slice][1]);

	mov	BYTE PTR [r13+219], dl
	movzx	ecx, BYTE PTR INIT_MVP_IDX[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN562@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN283@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN276@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN277@kvz_init_c
$LN283@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN277@kvz_init_c
$LN562@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN276@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN277@kvz_init_c:

; 263  : 
; 264  :   kvz_ctx_init(&cabac->ctx.cu_qp_delta_abs[0], QP, INIT_CU_QP_DELTA_ABS[slice][0]);

	mov	BYTE PTR [r13+220], dl
	movzx	ecx, BYTE PTR INIT_CU_QP_DELTA_ABS[r15+r14*2]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN563@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN293@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN286@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN287@kvz_init_c
$LN293@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN287@kvz_init_c
$LN563@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN286@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN287@kvz_init_c:

; 265  :   kvz_ctx_init(&cabac->ctx.cu_qp_delta_abs[1], QP, INIT_CU_QP_DELTA_ABS[slice][1]);

	mov	BYTE PTR [r13+64], dl
	movzx	ecx, BYTE PTR INIT_CU_QP_DELTA_ABS[r15+r14*2+1]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN564@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN303@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN296@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN297@kvz_init_c
$LN303@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN297@kvz_init_c
$LN564@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN296@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN297@kvz_init_c:

; 266  : 
; 267  :   for (i = 0; i < 4; i++) {

	lea	rax, QWORD PTR [r14-12]
	mov	BYTE PTR [r13+65], dl
	lea	rax, QWORD PTR [rax+rax*2]
	mov	edi, 4
	add	rax, rax
	lea	rcx, QWORD PTR [r14*4-72]
	sub	rax, r13
	lea	r10, QWORD PTR INIT_SIG_CG_FLAG[r15]
	sub	rcx, r13
	lea	r11, QWORD PTR INIT_ABS_FLAG[r15]
	add	r11, rax
	lea	rbx, QWORD PTR INIT_PART_SIZE[r15]
	add	r10, rcx
	lea	r8, QWORD PTR [r13+72]
	add	rbx, rcx
	mov	r9d, edi
	npad	1
$LL4@kvz_init_c:

; 268  :     kvz_ctx_init(&cabac->ctx.cu_sig_coeff_group_model[i], QP, INIT_SIG_CG_FLAG[slice][i]);

	movzx	ecx, BYTE PTR [r10+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN565@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN313@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN306@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN307@kvz_init_c
$LN313@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN307@kvz_init_c
$LN565@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN306@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN307@kvz_init_c:

; 269  :     kvz_ctx_init(&cabac->ctx.cu_abs_model_luma[i], QP, INIT_ABS_FLAG[slice][i]);

	mov	BYTE PTR [r8], dl
	movzx	ecx, BYTE PTR [r11+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN566@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN323@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN316@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN317@kvz_init_c
$LN323@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN317@kvz_init_c
$LN566@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN316@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN317@kvz_init_c:

; 270  :     kvz_ctx_init(&cabac->ctx.part_size_model[i], QP, INIT_PART_SIZE[slice][i]);

	mov	BYTE PTR [r8+130], dl
	movzx	ecx, BYTE PTR [rbx+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN567@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN333@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN326@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN2@kvz_init_c
$LN333@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN2@kvz_init_c
$LN567@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN326@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN2@kvz_init_c:

; 266  : 
; 267  :   for (i = 0; i < 4; i++) {

	mov	BYTE PTR [r8-4], dl
	inc	r8
	sub	r9, 1
	jne	$LL4@kvz_init_c

; 271  :   }
; 272  :   for (i = 0; i < 3; i++) {

	sub	rbp, r13
	lea	r10, QWORD PTR INIT_TRANS_SUBDIV_FLAG[r15-53]
	add	r10, rbp
	lea	r8, QWORD PTR [r13+53]
	mov	r9d, 3
$LL7@kvz_init_c:

; 273  :     kvz_ctx_init(&cabac->ctx.trans_subdiv_model[i], QP, INIT_TRANS_SUBDIV_FLAG[slice][i]);

	movzx	ecx, BYTE PTR [r10+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN568@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN343@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN336@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN5@kvz_init_c
$LN343@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN5@kvz_init_c
$LN568@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN336@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN5@kvz_init_c:

; 271  :   }
; 272  :   for (i = 0; i < 3; i++) {

	mov	BYTE PTR [r8], dl
	inc	r8
	sub	r9, 1
	jne	SHORT $LL7@kvz_init_c

; 274  :   }
; 275  :   for (i = 0; i < 4; i++) {

	lea	rax, QWORD PTR [r14*8-56]
	sub	rax, r13
	lea	r9, QWORD PTR INIT_QT_CBF[r15]
	add	r9, rax
	lea	r10, QWORD PTR INIT_QT_CBF[r15+4]
	add	r10, rax
	lea	r8, QWORD PTR [r13+56]
	npad	7
$LL10@kvz_init_c:

; 276  :     kvz_ctx_init(&cabac->ctx.qt_cbf_model_luma[i], QP, INIT_QT_CBF[slice][i]);

	movzx	ecx, BYTE PTR [r9+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN569@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN353@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN346@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN347@kvz_init_c
$LN353@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN347@kvz_init_c
$LN569@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN346@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN347@kvz_init_c:

; 277  :     kvz_ctx_init(&cabac->ctx.qt_cbf_model_chroma[i], QP, INIT_QT_CBF[slice][i + 4]);

	mov	BYTE PTR [r8], dl
	movzx	ecx, BYTE PTR [r10+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN570@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN363@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN356@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN8@kvz_init_c
$LN363@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN8@kvz_init_c
$LN570@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN356@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN8@kvz_init_c:

; 274  :   }
; 275  :   for (i = 0; i < 4; i++) {

	mov	BYTE PTR [r8+4], dl
	inc	r8
	sub	rdi, 1
	jne	$LL10@kvz_init_c

; 278  :   }
; 279  : 
; 280  :   for (i = 0; i < 5; i++) {

	lea	rax, QWORD PTR [r14+r14*4]
	sub	rax, r13
	lea	r10, QWORD PTR INIT_INTER_DIR[r15-48]
	add	r10, rax
	lea	r8, QWORD PTR [r13+48]
	lea	r9d, QWORD PTR [rdi+5]
	npad	15
$LL13@kvz_init_c:

; 281  :     kvz_ctx_init(&cabac->ctx.inter_dir[i], QP, INIT_INTER_DIR[slice][i]);

	movzx	ecx, BYTE PTR [r10+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN571@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN373@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN366@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN11@kvz_init_c
$LN373@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN11@kvz_init_c
$LN571@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN366@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN11@kvz_init_c:

; 278  :   }
; 279  : 
; 280  :   for (i = 0; i < 5; i++) {

	mov	BYTE PTR [r8], dl
	inc	r8
	sub	r9, 1
	jne	SHORT $LL13@kvz_init_c

; 282  :   }
; 283  : 
; 284  :   for (i = 0; i < 8; i++) {

	lea	rax, QWORD PTR [r14+r14*2]
	mov	r9d, 8
	lea	rbp, QWORD PTR [rax*8]
	mov	r10, rbp
	lea	r11, OFFSET FLAT:INIT_ONE_FLAG
	sub	r10, r13
	lea	r8, QWORD PTR [r13+194]
	add	r10, r11
	npad	1
$LL16@kvz_init_c:

; 285  :     kvz_ctx_init(&cabac->ctx.cu_one_model_chroma[i], QP, INIT_ONE_FLAG[slice][i+16]);

	movzx	ecx, BYTE PTR [r10+r8-178]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN572@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN383@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN376@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN14@kvz_init_c
$LN383@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN14@kvz_init_c
$LN572@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN376@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN14@kvz_init_c:

; 282  :   }
; 283  : 
; 284  :   for (i = 0; i < 8; i++) {

	mov	BYTE PTR [r8], dl
	inc	r8
	sub	r9, 1
	jne	SHORT $LL16@kvz_init_c

; 286  :   }
; 287  : 
; 288  :   for (i = 0; i < 15; i++) {

	imul	rax, r14, 30
	lea	rdx, OFFSET FLAT:INIT_LAST+15
	mov	rcx, r13
	sub	rcx, rax
	sub	r11, r12
	sub	rcx, rdx
	mov	r9d, 15
	sub	r11, rdx
	lea	r8, QWORD PTR [rax+rdx]
	lea	r15, QWORD PTR [rcx+118]
	lea	rbx, QWORD PTR [rcx+148]
	lea	rdi, QWORD PTR [rcx+133]
	lea	r14, QWORD PTR [rcx+163]
	lea	r10, QWORD PTR [rcx+178]
	npad	2
$LL19@kvz_init_c:

; 289  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_y_luma[i], QP, INIT_LAST[slice][i] );

	movzx	ecx, BYTE PTR [r8-15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN573@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN393@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN386@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN387@kvz_init_c
$LN393@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN387@kvz_init_c
$LN573@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN386@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN387@kvz_init_c:

; 290  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_x_luma[i], QP, INIT_LAST[slice][i] );

	mov	BYTE PTR [r15+r8], dl
	movzx	ecx, BYTE PTR [r8-15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN574@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN403@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN396@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN397@kvz_init_c
$LN403@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN397@kvz_init_c
$LN574@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN396@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN397@kvz_init_c:

; 291  : 
; 292  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_y_chroma[i], QP, INIT_LAST[slice][i+15] );

	mov	BYTE PTR [rbx+r8], dl
	movzx	ecx, BYTE PTR [r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN575@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN413@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN406@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN407@kvz_init_c
$LN413@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN407@kvz_init_c
$LN575@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN406@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN407@kvz_init_c:

; 293  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_x_chroma[i], QP, INIT_LAST[slice][i+15] );

	mov	BYTE PTR [rdi+r8], dl
	movzx	ecx, BYTE PTR [r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN576@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN423@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN416@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN417@kvz_init_c
$LN423@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN417@kvz_init_c
$LN576@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN416@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN417@kvz_init_c:

; 294  : 
; 295  :     kvz_ctx_init(&cabac->ctx.cu_one_model_luma[i], QP, INIT_ONE_FLAG[slice][i]);

	mov	BYTE PTR [r14+r8], dl
	movzx	ecx, BYTE PTR [r11+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN577@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN433@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN426@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN17@kvz_init_c
$LN433@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN17@kvz_init_c
$LN577@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN426@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN17@kvz_init_c:

; 286  :   }
; 287  : 
; 288  :   for (i = 0; i < 15; i++) {

	mov	BYTE PTR [r10+r8], dl
	inc	r8
	sub	r9, 1
	jne	$LL19@kvz_init_c

; 296  :   }
; 297  :   kvz_ctx_init(&cabac->ctx.cu_one_model_luma[15], QP, INIT_ONE_FLAG[slice][15]);

	lea	rax, OFFSET FLAT:INIT_ONE_FLAG
	movzx	ecx, BYTE PTR [rax+rbp+15]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rcx-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN578@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN443@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN436@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN437@kvz_init_c
$LN443@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN437@kvz_init_c
$LN578@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN436@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN437@kvz_init_c:

; 298  : 
; 299  :   for (i = 0; i < 27; i++) {

	imul	rax, QWORD PTR tv9821[rsp], 42		; 0000002aH
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	BYTE PTR [r13+193], dl
	sub	rax, r13
	lea	r10, QWORD PTR INIT_SIG_FLAG[rcx-76]
	add	r10, rax
	lea	r11, QWORD PTR INIT_SIG_FLAG[rcx-49]
	xor	r9d, r9d
	lea	r8, QWORD PTR [r13+76]
	add	r11, rax
	npad	12
$LL22@kvz_init_c:

; 300  :     kvz_ctx_init(&cabac->ctx.cu_sig_model_luma[i], QP, INIT_SIG_FLAG[slice][i]);

	movzx	ecx, BYTE PTR [r10+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN579@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN453@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN446@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN447@kvz_init_c
$LN453@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 210  :   } else {

	jmp	SHORT $LN447@kvz_init_c
$LN579@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN446@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	lea	edx, DWORD PTR [rax+rax]
$LN447@kvz_init_c:

; 301  :     if(i < 15) kvz_ctx_init(&cabac->ctx.cu_sig_model_chroma[i], QP, INIT_SIG_FLAG[slice][i+27]);

	mov	BYTE PTR [r8], dl
	cmp	r9w, 15
	jae	SHORT $LN20@kvz_init_c
	movzx	ecx, BYTE PTR [r11+r8]

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	ecx, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, esi
	lea	edx, DWORD PTR [rax+rax*4]
	sar	edx, 4
	add	edx, -16				; fffffff0H
	lea	edx, DWORD PTR [rdx+rcx*8]
	cmp	edx, 1
	jl	SHORT $LN580@kvz_init_c
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN463@kvz_init_c

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN456@kvz_init_c

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH
	mov	BYTE PTR [r8+27], dl

; 210  :   } else {

	jmp	SHORT $LN20@kvz_init_c
$LN463@kvz_init_c:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH
	mov	BYTE PTR [r8+27], dl

; 210  :   } else {

	jmp	SHORT $LN20@kvz_init_c
$LN580@kvz_init_c:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN456@kvz_init_c:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	add	al, al
	mov	BYTE PTR [r8+27], al
$LN20@kvz_init_c:

; 298  : 
; 299  :   for (i = 0; i < 27; i++) {

	inc	r9w
	inc	r8
	cmp	r9w, 27
	jb	$LL22@kvz_init_c

; 302  :   }
; 303  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_init_contexts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
ctx_ind_map$ = 0
pattern_sig_ctx$ = 80
scan_idx$ = 88
pos_x$ = 96
pos_y$ = 104
block_type$ = 112
texture_type$ = 120
kvz_context_get_sig_ctx_inc PROC

; 368  : {

$LN23:
	sub	rsp, 72					; 00000048H

; 369  :   const int32_t ctx_ind_map[16] =

	movdqa	xmm0, XMMWORD PTR __xmm@00000005000000040000000100000000

; 370  :   {
; 371  :     0, 1, 4, 5,
; 372  :     2, 3, 4, 5,
; 373  :     6, 6, 8, 8,
; 374  :     7, 7, 8, 8
; 375  :   };
; 376  : 
; 377  :   int32_t cnt,offset,pos_x_in_subset,pos_y_in_subset;
; 378  : 
; 379  :   if (pos_x + pos_y == 0) return 0;

	lea	eax, DWORD PTR [r8+r9]
	movdqa	xmm1, XMMWORD PTR __xmm@00000005000000040000000300000002
	mov	r10d, r9d
	movdqa	XMMWORD PTR ctx_ind_map$[rsp], xmm0
	mov	r11d, ecx
	movdqa	xmm0, XMMWORD PTR __xmm@00000008000000080000000600000006
	movdqa	XMMWORD PTR ctx_ind_map$[rsp+16], xmm1
	movdqa	xmm1, XMMWORD PTR __xmm@00000008000000080000000700000007
	movdqa	XMMWORD PTR ctx_ind_map$[rsp+32], xmm0
	movdqa	XMMWORD PTR ctx_ind_map$[rsp+48], xmm1
	test	eax, eax
	jne	SHORT $LN2@kvz_contex

; 397  : }

	add	rsp, 72					; 00000048H
	ret	0
$LN2@kvz_contex:

; 380  : 
; 381  :   if (block_type == 2) return ctx_ind_map[4 * pos_y + pos_x];

	mov	eax, DWORD PTR block_type$[rsp]
	cmp	eax, 2
	jne	SHORT $LN3@kvz_contex
	lea	eax, DWORD PTR [r8+r9*4]
	movsxd	rcx, eax
	mov	eax, DWORD PTR ctx_ind_map$[rsp+rcx*4]

; 397  : }

	add	rsp, 72					; 00000048H
	ret	0
$LN3@kvz_contex:

; 382  : 
; 383  :   offset = (block_type == 3) ? ((scan_idx == SCAN_DIAG) ? 9 : 15) : ((texture_type == 0) ? 21 : 12);

	cmp	eax, 3
	jne	SHORT $LN11@kvz_contex
	mov	eax, 9
	test	edx, edx
	lea	r9d, QWORD PTR [rax+6]
	jmp	SHORT $LN21@kvz_contex
$LN11@kvz_contex:
	cmp	BYTE PTR texture_type$[rsp], 0
	mov	eax, 21
	mov	r9d, 12
$LN21@kvz_contex:

; 384  :   pos_x_in_subset = pos_x - ((pos_x>>2)<<2);

	cmove	r9d, eax
	mov	ecx, r8d

; 385  :   pos_y_in_subset = pos_y - ((pos_y>>2)<<2);

	mov	eax, r10d
	and	ecx, 3
	and	eax, 3

; 386  : 
; 387  :   if (pattern_sig_ctx == 0) {

	xor	edx, edx
	test	r11d, r11d
	jne	SHORT $LN4@kvz_contex

; 388  :     cnt = (pos_x_in_subset + pos_y_in_subset <= 2) ? ((pos_x_in_subset + pos_y_in_subset==0) ? 2 : 1) : 0;

	lea	r11d, DWORD PTR [rax+rcx]
	cmp	r11d, 2
	ja	SHORT $LN17@kvz_contex
	neg	r11d
	sbb	eax, eax
	add	eax, 2
	jmp	SHORT $LN9@kvz_contex
$LN4@kvz_contex:

; 389  :   } else if (pattern_sig_ctx==1) {

	cmp	r11d, 1
	jne	SHORT $LN6@kvz_contex

; 390  :     cnt = (pos_y_in_subset <= 1) ? ((pos_y_in_subset == 0) ? 2 : 1) : 0;

	cmp	eax, r11d
	ja	SHORT $LN17@kvz_contex
	neg	eax
	sbb	eax, eax
	add	eax, 2
	jmp	SHORT $LN9@kvz_contex
$LN6@kvz_contex:

; 391  :   } else if (pattern_sig_ctx==2) {

	cmp	r11d, 2
	jne	SHORT $LN8@kvz_contex

; 392  :     cnt = (pos_x_in_subset <= 1) ? ((pos_x_in_subset == 0) ? 2 : 1) : 0;

	cmp	ecx, 1
	ja	SHORT $LN17@kvz_contex
	neg	ecx
	sbb	eax, eax
	add	eax, r11d
	jmp	SHORT $LN9@kvz_contex
$LN17@kvz_contex:

; 395  :   }
; 396  :   return (( texture_type == 0 && ((pos_x>>2) + (pos_y>>2)) > 0 ) ? 3 : 0) + offset + cnt;

	mov	eax, edx
	jmp	SHORT $LN9@kvz_contex
$LN8@kvz_contex:

; 393  :   } else {
; 394  :     cnt = 2;

	mov	eax, 2
$LN9@kvz_contex:

; 395  :   }
; 396  :   return (( texture_type == 0 && ((pos_x>>2) + (pos_y>>2)) > 0 ) ? 3 : 0) + offset + cnt;

	cmp	BYTE PTR texture_type$[rsp], dl
	jne	SHORT $LN20@kvz_contex
	sar	r8d, 2
	sar	r10d, 2
	add	r8d, r10d
	test	r8d, r8d
	jle	SHORT $LN20@kvz_contex
	mov	edx, 3
$LN20@kvz_contex:
	add	eax, edx
	add	eax, r9d

; 397  : }

	add	rsp, 72					; 00000048H
	ret	0
kvz_context_get_sig_ctx_inc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
sig_coeff_group_flag$ = 8
pos_x$ = 16
pos_y$ = 24
width$ = 32
kvz_context_get_sig_coeff_group PROC

; 319  : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 320  :   uint32_t uiRight = 0;
; 321  :   uint32_t uiLower = 0;
; 322  :   width >>= 2;

	sar	r9d, 2
	xor	eax, eax
	xor	r10d, r10d
	mov	r11d, r8d
	mov	rdi, rcx

; 323  :   if (pos_x < (uint32_t)width - 1) uiRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	lea	ebx, DWORD PTR [r9-1]
	cmp	edx, ebx
	jae	SHORT $LN2@kvz_contex
	mov	eax, r8d
	lea	r8d, DWORD PTR [rdx+1]
	imul	eax, r9d
	add	r8d, eax
	xor	eax, eax
	cmp	DWORD PTR [rcx+r8*4], eax
	setne	al
$LN2@kvz_contex:

; 324  :   if (pos_y < (uint32_t)width - 1) uiLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	cmp	r11d, ebx
	jae	SHORT $LN3@kvz_contex
	lea	ecx, DWORD PTR [r11+1]
	imul	ecx, r9d
	add	ecx, edx
	cmp	DWORD PTR [rdi+rcx*4], r10d
	setne	r10b
$LN3@kvz_contex:

; 325  : 
; 326  :   return uiRight || uiLower;

	test	eax, eax
	jne	SHORT $LN5@kvz_contex
	test	r10d, r10d
	jne	SHORT $LN5@kvz_contex

; 327  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN5@kvz_contex:
	mov	rbx, QWORD PTR [rsp+8]
	mov	eax, 1
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
kvz_context_get_sig_coeff_group ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
sig_coeff_group_flag$ = 8
pos_x$ = 16
pos_y$ = 24
width$ = 32
kvz_context_calc_pattern_sig_ctx PROC

; 340  : {

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 341  :   uint32_t sigRight = 0;

	xor	r10d, r10d
	mov	ebx, edx
	mov	r11d, r10d

; 342  :   uint32_t sigLower = 0;
; 343  : 
; 344  :   if (width == 4) return -1;

	cmp	r9d, 4
	jne	SHORT $LN2@kvz_contex
	lea	eax, QWORD PTR [r10-1]

; 349  : 
; 350  :   return sigRight + (sigLower<<1);
; 351  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN2@kvz_contex:

; 345  : 
; 346  :   width >>= 2;

	sar	r9d, 2

; 347  :   if (pos_x < (uint32_t)width - 1) sigRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	lea	edx, DWORD PTR [r9-1]
	cmp	ebx, edx
	jae	SHORT $LN3@kvz_contex
	mov	eax, r8d
	imul	eax, r9d
	inc	eax
	add	eax, ebx
	cmp	DWORD PTR [rcx+rax*4], r10d
	setne	r11b
$LN3@kvz_contex:

; 348  :   if (pos_y < (uint32_t)width - 1) sigLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	cmp	r8d, edx
	jae	SHORT $LN4@kvz_contex
	lea	eax, DWORD PTR [r8+1]
	imul	eax, r9d
	add	eax, ebx
	cmp	DWORD PTR [rcx+rax*4], r10d
	setne	r10b
$LN4@kvz_contex:

; 349  : 
; 350  :   return sigRight + (sigLower<<1);
; 351  : }

	mov	rbx, QWORD PTR [rsp+8]
	lea	eax, DWORD PTR [r11+r10*2]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
kvz_context_calc_pattern_sig_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
_TEXT	SEGMENT
ctx$ = 8
qp$ = 16
init_value$ = 24
kvz_ctx_init PROC

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, r8d

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	and	r8d, 15
	shr	eax, 4
	sub	eax, 9

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	imul	eax, edx
	lea	edx, DWORD PTR [r8-2]
	lea	eax, DWORD PTR [rax+rax*4]
	sar	eax, 4
	lea	edx, DWORD PTR [rax+rdx*8]
	cmp	edx, 1
	jl	SHORT $LN12@kvz_ctx_in
	cmp	edx, 126				; 0000007eH
	jge	SHORT $LN9@kvz_ctx_in

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	edx, 64					; 00000040H
	jl	SHORT $LN2@kvz_ctx_in

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 212  :   }
; 213  : }

	mov	BYTE PTR [rcx], dl
	ret	0
$LN9@kvz_ctx_in:

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	dl, 126					; 0000007eH

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	add	dl, dl
	sub	dl, 127					; 0000007fH

; 212  :   }
; 213  : }

	mov	BYTE PTR [rcx], dl
	ret	0
$LN12@kvz_ctx_in:

; 207  : 
; 208  :   if (init_state >= 64) {

	mov	dl, 1
$LN2@kvz_ctx_in:

; 210  :   } else {
; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	al, dl
	add	al, al

; 212  :   }
; 213  : }

	mov	BYTE PTR [rcx], al
	ret	0
kvz_ctx_init ENDP
_TEXT	ENDS
END
