; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294948997
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294948996
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294948995
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294948994
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294948993
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294948992
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294948991
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294948990
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294948989
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294948988
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294948987
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294948986
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294948985
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294948984
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294948983
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294948982
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294948981
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294948980
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294948979
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294948978
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294948977
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294948976
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294948975
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294948974
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294948973
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294948972
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294948971
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294948970
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294948969
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294948968
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294948967
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294948966
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294948965
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294948964
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294948963
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294948962
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294948961
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294948960
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294948959
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294948958
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294948957
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294948956
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294948955
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294948954
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294948953
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294948952
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294948951
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294948950
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294948949
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294948948
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294948947
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294948946
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294948945
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294948944
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294948943
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294948942
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294948941
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294948940
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294948939
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294948938
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294948937
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294948936
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294948935
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294948947 DB 'quant', 00H
	ORG $+6
$SG4294948997 DB 'array_checksum', 00H
	ORG $+1
$SG4294948996 DB 'array_md5', 00H
	ORG $+6
$SG4294948995 DB 'reg_sad', 00H
$SG4294948994 DB 'sad_4x4', 00H
$SG4294948993 DB 'sad_8x8', 00H
$SG4294948992 DB 'sad_16x16', 00H
	ORG $+6
$SG4294948991 DB 'sad_32x32', 00H
	ORG $+6
$SG4294948990 DB 'sad_64x64', 00H
	ORG $+6
$SG4294948989 DB 'satd_4x4', 00H
	ORG $+7
$SG4294948988 DB 'satd_8x8', 00H
	ORG $+7
$SG4294948987 DB 'satd_16x16', 00H
	ORG $+5
$SG4294948986 DB 'satd_32x32', 00H
	ORG $+5
$SG4294948985 DB 'satd_64x64', 00H
	ORG $+5
$SG4294948984 DB 'satd_any_size', 00H
	ORG $+2
$SG4294948983 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294948982 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294948981 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294948980 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294948979 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294948978 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294948977 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294948976 DB 'satd_16x16_dual', 00H
$SG4294948975 DB 'satd_32x32_dual', 00H
$SG4294948974 DB 'satd_64x64_dual', 00H
$SG4294948973 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294948972 DB 'pixels_calc_ssd', 00H
$SG4294948971 DB 'bipred_average', 00H
	ORG $+1
$SG4294948970 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294948969 DB 'ver_sad', 00H
$SG4294948968 DB 'hor_sad', 00H
$SG4294948967 DB 'pixel_var', 00H
	ORG $+6
$SG4294948966 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294948965 DB 'dct_4x4', 00H
$SG4294948964 DB 'dct_8x8', 00H
$SG4294948963 DB 'dct_16x16', 00H
	ORG $+6
$SG4294948962 DB 'dct_32x32', 00H
	ORG $+6
$SG4294948961 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294948960 DB 'idct_4x4', 00H
	ORG $+7
$SG4294948959 DB 'idct_8x8', 00H
	ORG $+7
$SG4294948958 DB 'idct_16x16', 00H
	ORG $+5
$SG4294948957 DB 'idct_32x32', 00H
	ORG $+5
$SG4294948956 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294948955 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948954 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294948953 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948952 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294948951 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294948950 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294948949 DB 'sample_octpel_chroma_hi', 00H
$SG4294948948 DB 'get_extended_block', 00H
	ORG $+5
$SG4294948946 DB 'quantize_residual', 00H
	ORG $+6
$SG4294948945 DB 'dequant', 00H
$SG4294948944 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294948943 DB 'fast_coeff_cost', 00H
$SG4294948942 DB 'angular_pred', 00H
	ORG $+3
$SG4294948941 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294948940 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294948939 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294948938 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294948937 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294948936 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294948935 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategy_register_nal_generic
?ckmap@?1??array_checksum_generic4@@9@9 DD 04000H DUP (?) ; `array_checksum_generic4'::`2'::ckmap
?ckmap@?1??array_checksum_generic8@@9@9 DQ 02008H DUP (?) ; `array_checksum_generic8'::`2'::ckmap
?ckmap_initialized@?1??array_checksum_generic8@@9@9 DB 01H DUP (?) ; `array_checksum_generic8'::`2'::ckmap_initialized
	ALIGN	4

?ckmap_initialized@?1??array_checksum_generic4@@9@9 DB 01H DUP (?) ; `array_checksum_generic4'::`2'::ckmap_initialized
_BSS	ENDS
pdata	SEGMENT
$pdata$array_checksum_generic8 DD imagerel array_checksum_generic8
	DD	imagerel array_checksum_generic8+157
	DD	imagerel $unwind$array_checksum_generic8
$pdata$4$array_checksum_generic8 DD imagerel array_checksum_generic8+157
	DD	imagerel array_checksum_generic8+560
	DD	imagerel $chain$4$array_checksum_generic8
$pdata$5$array_checksum_generic8 DD imagerel array_checksum_generic8+560
	DD	imagerel array_checksum_generic8+607
	DD	imagerel $chain$5$array_checksum_generic8
$pdata$array_checksum_generic4 DD imagerel array_checksum_generic4
	DD	imagerel array_checksum_generic4+154
	DD	imagerel $unwind$array_checksum_generic4
$pdata$4$array_checksum_generic4 DD imagerel array_checksum_generic4+154
	DD	imagerel array_checksum_generic4+464
	DD	imagerel $chain$4$array_checksum_generic4
$pdata$5$array_checksum_generic4 DD imagerel array_checksum_generic4+464
	DD	imagerel array_checksum_generic4+512
	DD	imagerel $chain$5$array_checksum_generic4
$pdata$array_checksum_generic DD imagerel array_checksum_generic
	DD	imagerel array_checksum_generic+29
	DD	imagerel $unwind$array_checksum_generic
$pdata$0$array_checksum_generic DD imagerel array_checksum_generic+29
	DD	imagerel array_checksum_generic+125
	DD	imagerel $chain$0$array_checksum_generic
$pdata$1$array_checksum_generic DD imagerel array_checksum_generic+125
	DD	imagerel array_checksum_generic+172
	DD	imagerel $chain$1$array_checksum_generic
$pdata$array_md5_generic DD imagerel array_md5_generic
	DD	imagerel array_md5_generic+14
	DD	imagerel $unwind$array_md5_generic
$pdata$1$array_md5_generic DD imagerel array_md5_generic+14
	DD	imagerel array_md5_generic+82
	DD	imagerel $chain$1$array_md5_generic
$pdata$2$array_md5_generic DD imagerel array_md5_generic+82
	DD	imagerel array_md5_generic+161
	DD	imagerel $chain$2$array_md5_generic
$pdata$3$array_md5_generic DD imagerel array_md5_generic+161
	DD	imagerel array_md5_generic+230
	DD	imagerel $chain$3$array_md5_generic
$pdata$4$array_md5_generic DD imagerel array_md5_generic+230
	DD	imagerel array_md5_generic+330
	DD	imagerel $chain$4$array_md5_generic
$pdata$kvz_strategy_register_nal_generic DD imagerel $LN4
	DD	imagerel $LN4+200
	DD	imagerel $unwind$kvz_strategy_register_nal_generic
xdata	SEGMENT
$unwind$array_checksum_generic8 DD 041b01H
	DD	0d017d21bH
	DD	030147015H
$chain$4$array_checksum_generic8 DD 0a2221H
	DD	09f422H
	DD	0ae41aH
	DD	0bc412H
	DD	0c640cH
	DD	0d5405H
	DD	imagerel array_checksum_generic8
	DD	imagerel array_checksum_generic8+157
	DD	imagerel $unwind$array_checksum_generic8
$chain$5$array_checksum_generic8 DD 021H
	DD	imagerel array_checksum_generic8
	DD	imagerel array_checksum_generic8+157
	DD	imagerel $unwind$array_checksum_generic8
$unwind$array_checksum_generic4 DD 041201H
	DD	0d00e9212H
	DD	0600ac00cH
$chain$4$array_checksum_generic4 DD 0a2521H
	DD	06f425H
	DD	07e41dH
	DD	087418H
	DD	09540fH
	DD	0103408H
	DD	imagerel array_checksum_generic4
	DD	imagerel array_checksum_generic4+154
	DD	imagerel $unwind$array_checksum_generic4
$chain$5$array_checksum_generic4 DD 021H
	DD	imagerel array_checksum_generic4
	DD	imagerel array_checksum_generic4+154
	DD	imagerel $unwind$array_checksum_generic4
$unwind$array_checksum_generic DD 050b01H
	DD	04640bH
	DD	03340bH
	DD	0700bH
$chain$0$array_checksum_generic DD 020521H
	DD	025405H
	DD	imagerel array_checksum_generic
	DD	imagerel array_checksum_generic+29
	DD	imagerel $unwind$array_checksum_generic
$chain$1$array_checksum_generic DD 021H
	DD	imagerel array_checksum_generic
	DD	imagerel array_checksum_generic+29
	DD	imagerel $unwind$array_checksum_generic
$unwind$array_md5_generic DD 020e01H
	DD	05004f20eH
$chain$1$array_md5_generic DD 040b21H
	DD	014740bH
	DD	0123404H
	DD	imagerel array_md5_generic
	DD	imagerel array_md5_generic+14
	DD	imagerel $unwind$array_md5_generic
$chain$2$array_md5_generic DD 020421H
	DD	0136404H
	DD	imagerel array_md5_generic+14
	DD	imagerel array_md5_generic+82
	DD	imagerel $chain$1$array_md5_generic
$chain$3$array_md5_generic DD 021H
	DD	imagerel array_md5_generic+14
	DD	imagerel array_md5_generic+82
	DD	imagerel $chain$1$array_md5_generic
$chain$4$array_md5_generic DD 021H
	DD	imagerel array_md5_generic
	DD	imagerel array_md5_generic+14
	DD	imagerel $unwind$array_md5_generic
$unwind$kvz_strategy_register_nal_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+6
$SG4294948927 DB 'array_checksum', 00H
	ORG $+1
$SG4294948932 DB 'generic', 00H
	ORG $+4
$SG4294948928 DB 'generic8', 00H
	ORG $+7
$SG4294948929 DB 'array_checksum', 00H
	ORG $+1
$SG4294948930 DB 'generic4', 00H
	ORG $+7
$SG4294948931 DB 'array_checksum', 00H
	ORG $+1
$SG4294948933 DB 'array_md5', 00H
	ORG $+6
$SG4294948934 DB 'generic', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_nal_generic PROC

; 179  : int kvz_strategy_register_nal_generic(void* opaque, uint8_t bitdepth) {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 180  :   bool success = true;
; 181  : 
; 182  :   success &= kvz_strategyselector_register(opaque, "array_md5", "generic", 0, &array_md5_generic);

	lea	rax, OFFSET FLAT:array_md5_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294948934
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948933
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 183  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic", 0, &array_checksum_generic);

	lea	r8, OFFSET FLAT:$SG4294948932
	lea	rax, OFFSET FLAT:array_checksum_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948931
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 184  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic4", 1, &array_checksum_generic4);

	lea	r8, OFFSET FLAT:$SG4294948930
	lea	rax, OFFSET FLAT:array_checksum_generic4
	and	edi, ebx
	mov	r9d, 1
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948929
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 185  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic8", 2, &array_checksum_generic8);

	lea	r8, OFFSET FLAT:$SG4294948928
	lea	rax, OFFSET FLAT:array_checksum_generic8
	mov	r9d, 2
	lea	rdx, OFFSET FLAT:$SG4294948927
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register

; 186  :   
; 187  :   return success;
; 188  : }

	mov	rsi, QWORD PTR [rsp+72]
	and	eax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_nal_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
_TEXT	SEGMENT
md5_ctx$ = 32
data$ = 144
height$ = 152
width$ = 160
stride$ = 168
checksum_out$ = 176
bitdepth$ = 184
array_md5_generic PROC

; 45   : {

	mov	r11, rsp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	QWORD PTR [r11+8], rbx
	mov	rbx, rcx
	mov	QWORD PTR [r11+24], rdi
	mov	edi, edx

; 46   :   assert(SEI_HASH_MAX_LENGTH >= 16);
; 47   : 
; 48   :   context_md5_t md5_ctx;
; 49   :   kvz_md5_init(&md5_ctx);
; 50   :   
; 51   :   unsigned bytes = width * height * sizeof(kvz_pixel);

	imul	edi, r8d
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c

; 53   :   ctx->buf[0] = 0x67452301;

	mov	DWORD PTR md5_ctx$[rbp-128], 1732584193	; 67452301H

; 54   :   ctx->buf[1] = 0xefcdab89;

	mov	DWORD PTR md5_ctx$[rbp-124], -271733879	; efcdab89H

; 55   :   ctx->buf[2] = 0x98badcfe;

	mov	DWORD PTR md5_ctx$[rbp-120], -1732584194 ; 98badcfeH

; 56   :   ctx->buf[3] = 0x10325476;

	mov	DWORD PTR md5_ctx$[rbp-116], 271733878	; 10325476H

; 73   :   if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t)

	lea	eax, DWORD PTR [rdi*8]
	mov	DWORD PTR md5_ctx$[rbp-112], eax

; 74   :     ctx->bits[1]++;        /* Carry from low to high */
; 75   :   ctx->bits[1] += len >> 29;

	mov	eax, edi
	shr	eax, 29
	mov	DWORD PTR md5_ctx$[rbp-108], eax

; 76   : 
; 77   :   t = (t >> 3) & 0x3f;    /* Bytes already in shsInfo->data */
; 78   : 
; 79   :   /* Handle any leading odd-sized chunks */
; 80   : 
; 81   :   if (t) {
; 82   :     unsigned char *p = ctx->in.b8 + t;
; 83   : 
; 84   :     t = 64 - t;
; 85   :     if (len < t) {
; 86   :       memcpy(p, buf, len);
; 87   :       return;
; 88   :     }
; 89   :     memcpy(p, buf, t);
; 90   :     byteReverse(ctx->in.b32, 16);
; 91   :     MD5Transform(ctx->buf, ctx->in.b32);
; 92   :     buf += t;
; 93   :     len -= t;
; 94   :   }
; 95   :   /* Process data in 64-byte chunks */
; 96   : 
; 97   :   while (len >= 64) {

	cmp	edi, 64					; 00000040H
	jb	SHORT $LN7@array_md5_

; 54   :   ctx->buf[1] = 0xefcdab89;

	mov	QWORD PTR [r11+16], rsi
	mov	esi, edi
	shr	rsi, 6
	npad	4
$LL6@array_md5_:

; 98   :     memcpy(ctx->in.b8, buf, 64);

	movups	xmm0, XMMWORD PTR [rbx]

; 99   :     byteReverse(ctx->in.b32, 16);
; 100  :     MD5Transform(ctx->buf, ctx->in.b32);

	lea	rdx, QWORD PTR md5_ctx$[rbp-104]
	lea	rcx, QWORD PTR md5_ctx$[rbp-128]
	movups	XMMWORD PTR md5_ctx$[rbp-104], xmm0
	movups	xmm1, XMMWORD PTR [rbx+16]
	movups	XMMWORD PTR md5_ctx$[rbp-88], xmm1
	movups	xmm0, XMMWORD PTR [rbx+32]
	movups	XMMWORD PTR md5_ctx$[rbp-72], xmm0
	movups	xmm1, XMMWORD PTR [rbx+48]
	movups	XMMWORD PTR md5_ctx$[rbp-56], xmm1
	call	MD5Transform

; 101  :     buf += 64;

	add	rbx, 64					; 00000040H

; 102  :     len -= 64;

	add	edi, -64				; ffffffc0H
	sub	rsi, 1
	jne	SHORT $LL6@array_md5_

; 76   : 
; 77   :   t = (t >> 3) & 0x3f;    /* Bytes already in shsInfo->data */
; 78   : 
; 79   :   /* Handle any leading odd-sized chunks */
; 80   : 
; 81   :   if (t) {
; 82   :     unsigned char *p = ctx->in.b8 + t;
; 83   : 
; 84   :     t = 64 - t;
; 85   :     if (len < t) {
; 86   :       memcpy(p, buf, len);
; 87   :       return;
; 88   :     }
; 89   :     memcpy(p, buf, t);
; 90   :     byteReverse(ctx->in.b32, 16);
; 91   :     MD5Transform(ctx->buf, ctx->in.b32);
; 92   :     buf += t;
; 93   :     len -= t;
; 94   :   }
; 95   :   /* Process data in 64-byte chunks */
; 96   : 
; 97   :   while (len >= 64) {

	mov	rsi, QWORD PTR [rsp+152]
$LN7@array_md5_:

; 103  :   }
; 104  : 
; 105  :     /* Handle any remaining bytes of data. */
; 106  : 
; 107  :   memcpy(ctx->in.b8, buf, len);

	mov	r8d, edi
	lea	rcx, QWORD PTR md5_ctx$[rbp-104]
	mov	rdx, rbx
	call	memcpy

; 120  :   count = (ctx->bits[0] >> 3) & 0x3F;

	mov	edx, DWORD PTR md5_ctx$[rbp-112]

; 121  : 
; 122  :   /* Set the first char of padding to 0x80.  This is safe since there is
; 123  :      always at least one byte free */
; 124  :   p = ctx->in.b8 + count;

	lea	rcx, QWORD PTR md5_ctx$[rbp-104]

; 125  :   *p++ = 0x80;
; 126  : 
; 127  :   /* Bytes of padding needed to make 64 bytes */
; 128  :   count = 64 - 1 - count;

	mov	rdi, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [rsp+144]
	shr	edx, 3
	and	edx, 63					; 0000003fH
	mov	eax, edx
	add	rcx, rax
	mov	eax, 63					; 0000003fH
	sub	eax, edx

; 129  : 
; 130  :   /* Pad out to 56 mod 64 */
; 131  :   if (count < 8) {

	xor	edx, edx
	mov	BYTE PTR [rcx], 128			; 00000080H
	inc	rcx
	cmp	eax, 8
	jae	SHORT $LN13@array_md5_

; 132  :     /* Two lots of padding:  Pad the first block to 64 bytes */
; 133  :     memset(p, 0, count);

	mov	r8d, eax
	call	memset

; 134  :     byteReverse(ctx->in.b32, 16);
; 135  :     MD5Transform(ctx->buf, ctx->in.b32);

	lea	rdx, QWORD PTR md5_ctx$[rbp-104]
	lea	rcx, QWORD PTR md5_ctx$[rbp-128]
	call	MD5Transform
	xorps	xmm0, xmm0

; 136  : 
; 137  :     /* Now fill the next block with 56 bytes */
; 138  :     memset(ctx->in.b8, 0, 56);

	xor	eax, eax
	movups	XMMWORD PTR md5_ctx$[rbp-104], xmm0
	mov	QWORD PTR md5_ctx$[rbp-56], rax
	movups	XMMWORD PTR md5_ctx$[rbp-88], xmm0
	movups	XMMWORD PTR md5_ctx$[rbp-72], xmm0

; 139  :   } else {

	jmp	SHORT $LN14@array_md5_
$LN13@array_md5_:

; 140  :     /* Pad block to 56 bytes */
; 141  :     memset(p, 0, count - 8);

	add	eax, -8					; fffffff8H
	mov	r8d, eax
	call	memset
$LN14@array_md5_:

; 142  :   }
; 143  :   byteReverse(ctx->in.b32, 14);
; 144  : 
; 145  :   /* Append length in bits and transform */
; 146  :   ctx->in.b32[14] = ctx->bits[0];

	mov	eax, DWORD PTR md5_ctx$[rbp-112]

; 147  :   ctx->in.b32[15] = ctx->bits[1];
; 148  : 
; 149  :   MD5Transform(ctx->buf, ctx->in.b32);

	lea	rdx, QWORD PTR md5_ctx$[rbp-104]
	mov	DWORD PTR md5_ctx$[rbp-48], eax
	lea	rcx, QWORD PTR md5_ctx$[rbp-128]
	mov	eax, DWORD PTR md5_ctx$[rbp-108]
	mov	DWORD PTR md5_ctx$[rbp-44], eax
	call	MD5Transform

; 150  :   byteReverse((uint32_t *) ctx->buf, 4);
; 151  :   memcpy(digest, ctx->buf, 16);

	mov	rax, QWORD PTR checksum_out$[rbp-128]
	movaps	xmm0, XMMWORD PTR md5_ctx$[rbp-128]
	movups	XMMWORD PTR [rax], xmm0
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c

; 55   : }

	add	rsp, 128				; 00000080H
	pop	rbp
	ret	0
array_md5_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
_TEXT	SEGMENT
data$ = 16
height$ = 24
width$ = 32
stride$ = 40
checksum_out$ = 48
bitdepth$ = 56
array_checksum_generic PROC

; 60   :                                    unsigned char checksum_out[SEI_HASH_MAX_LENGTH], const uint8_t bitdepth) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi

; 61   :   int x, y;
; 62   :   int checksum = 0;

	xor	r11d, r11d

; 63   :   
; 64   :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 65   :   
; 66   :   for (y = 0; y < height; ++y) {

	xor	r10d, r10d
	mov	edi, r8d
	mov	esi, edx
	mov	rbx, rcx
	test	edx, edx
	jle	SHORT $LN3@array_chec
	mov	QWORD PTR [rsp+16], rbp
	movsxd	rbp, r9d
$LL4@array_chec:

; 67   :     for (x = 0; x < width; ++x) {

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN2@array_chec
	mov	r9d, r10d
	mov	r8, rbx
	shr	r9d, 8
	npad	11
$LL7@array_chec:

; 68   :       const uint8_t mask = (uint8_t)((x & 0xff) ^ (y & 0xff) ^ (x >> 8) ^ (y >> 8));

	mov	ecx, eax
	lea	r8, QWORD PTR [r8+1]
	shr	ecx, 8
	movzx	edx, cl
	movzx	ecx, r9b

; 69   :       checksum += (data[(y * stride) + x] & 0xff) ^ mask;

	xor	edx, ecx
	movzx	ecx, r10b
	xor	edx, ecx
	movzx	ecx, al
	xor	edx, ecx
	inc	eax
	movzx	ecx, BYTE PTR [r8-1]
	xor	edx, ecx
	add	r11d, edx
	cmp	eax, edi
	jl	SHORT $LL7@array_chec
$LN2@array_chec:

; 63   :   
; 64   :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 65   :   
; 66   :   for (y = 0; y < height; ++y) {

	inc	r10d
	add	rbx, rbp
	cmp	r10d, esi
	jl	SHORT $LL4@array_chec
	mov	rbp, QWORD PTR [rsp+16]
$LN3@array_chec:

; 70   : #if KVZ_BIT_DEPTH > 8
; 71   :       checksum += ((data[(y * stride) + x] >> 8) & 0xff) ^ mask;
; 72   : #endif
; 73   :     }
; 74   :   }
; 75   : 
; 76   :   // Unpack uint into byte-array.
; 77   :   checksum_out[0] = (checksum >> 24) & 0xff;

	mov	rcx, QWORD PTR checksum_out$[rsp]
	mov	eax, r11d

; 78   :   checksum_out[1] = (checksum >> 16) & 0xff;
; 79   :   checksum_out[2] = (checksum >> 8) & 0xff;
; 80   :   checksum_out[3] = (checksum) & 0xff;
; 81   : }

	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	sar	eax, 24
	mov	BYTE PTR [rcx], al
	mov	eax, r11d
	sar	eax, 16
	mov	BYTE PTR [rcx+1], al
	mov	eax, r11d
	sar	eax, 8
	mov	BYTE PTR [rcx+2], al
	mov	BYTE PTR [rcx+3], r11b
	pop	rdi
	ret	0
array_checksum_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
_TEXT	SEGMENT
data$ = 112
height$ = 120
width$ = 128
stride$ = 136
checksum_out$ = 144
bitdepth$ = 152
array_checksum_generic4 PROC

; 86   :                                    unsigned char checksum_out[SEI_HASH_MAX_LENGTH], const uint8_t bitdepth) {

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	r12
	push	r13
	sub	rsp, 80					; 00000050H

; 87   :   uint32_t checksum = 0;
; 88   :   int y, x, xp;
; 89   :   
; 90   :   static uint8_t ckmap_initialized = 0;
; 91   :   static uint32_t ckmap[64*256];
; 92   : 
; 93   :   //TODO: add 10-bit support
; 94   :   if(bitdepth != 8) {

	movzx	eax, BYTE PTR bitdepth$[rsp]
	xor	r10d, r10d
	movsxd	r13, r9d
	mov	esi, r8d
	mov	r12d, edx
	cmp	al, 8
	je	SHORT $LN17@array_chec

; 95   :     array_checksum_generic(data, height, width, stride,checksum_out, bitdepth);

	mov	BYTE PTR bitdepth$[rsp], al
	mov	r9d, r13d

; 129  : }

	add	rsp, 80					; 00000050H
	pop	r13
	pop	r12
	pop	rsi

; 95   :     array_checksum_generic(data, height, width, stride,checksum_out, bitdepth);

	jmp	array_checksum_generic
$LN17@array_chec:

; 96   :     return;
; 97   :   }
; 98   :   if (!ckmap_initialized) {

	cmp	BYTE PTR ?ckmap_initialized@?1??array_checksum_generic4@@9@9, r10b
	lea	rax, OFFSET FLAT:?ckmap@?1??array_checksum_generic4@@9@9
	jne	SHORT $LN18@array_chec

; 99   :     uint8_t * const ckmap_uint8 = (uint8_t*)&ckmap;
; 100  :     int x, y;
; 101  :     for (y = 0; y < 256; ++y) {

	xor	r8d, r8d
	mov	rdx, rax
	npad	8
$LL4@array_chec:

; 102  :       for (x = 0; x < 256; ++x) {

	xor	eax, eax
$LL7@array_chec:

; 103  :         ckmap_uint8[y*256+x] = x^y;

	movzx	ecx, r8b
	xor	cl, al
	inc	eax
	mov	BYTE PTR [rdx], cl
	inc	rdx
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL7@array_chec

; 99   :     uint8_t * const ckmap_uint8 = (uint8_t*)&ckmap;
; 100  :     int x, y;
; 101  :     for (y = 0; y < 256; ++y) {

	inc	r8d
	cmp	r8d, 256				; 00000100H
	jl	SHORT $LL4@array_chec

; 104  :       }
; 105  :     }
; 106  :     ckmap_initialized = 1;

	mov	rcx, QWORD PTR data$[rsp]
	mov	BYTE PTR ?ckmap_initialized@?1??array_checksum_generic4@@9@9, 1
$LN18@array_chec:

; 107  :   }
; 108  : 
; 109  :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 110  : 
; 111  :   for (y = 0; y < height; ++y) {

	xor	r9d, r9d
	test	r12d, r12d
	jle	$LN9@array_chec
	mov	QWORD PTR [rsp+128], rbx
	mov	eax, esi
	mov	QWORD PTR [rsp+72], rbp
	cdq
	and	edx, 3
	mov	QWORD PTR [rsp+64], rdi
	mov	QWORD PTR [rsp+56], r14
	mov	rbx, r13
	mov	QWORD PTR [rsp+48], r15
	mov	rbp, rcx
	lea	r15d, DWORD PTR [rdx+rax]
	sar	r15d, 2
	xor	r14d, r14d
	npad	3
$LL10@array_chec:

; 112  :     for (xp = 0; xp < width/4; ++xp) {

	xor	r8d, r8d
	test	r15d, r15d
	jle	SHORT $LN12@array_chec
	movzx	r11d, r9b
	lea	r12, OFFSET FLAT:?ckmap@?1??array_checksum_generic4@@9@9
	shl	r11d, 6
	mov	rdi, rbp
	xor	ebx, ebx
	npad	4
$LL13@array_chec:

; 113  :       const int x = xp * 4;
; 114  :       const uint32_t mask = ckmap[(xp&63)+64*(y&255)] ^ (((x >> 8) ^ (y >> 8)) * 0x1010101);

	mov	ecx, r8d
	lea	rdi, QWORD PTR [rdi+4]
	and	ecx, 63					; 0000003fH
	mov	eax, ebx
	xor	eax, r9d
	add	ecx, r11d
	sar	eax, 8
	inc	r8d
	imul	eax, eax, 16843009			; 01010101H
	add	ebx, 4

; 115  :       const uint32_t cksumbytes = (*((uint32_t*)(&data[(y * stride) + x]))) ^ mask;

	mov	edx, DWORD PTR [r12+rcx*4]
	xor	edx, eax
	xor	edx, DWORD PTR [rdi-4]

; 116  :       checksum += ((cksumbytes >> 24) & 0xff) + ((cksumbytes >> 16) & 0xff) + ((cksumbytes >> 8) & 0xff) + (cksumbytes & 0xff);

	mov	eax, edx
	shr	eax, 16
	movzx	ecx, al
	mov	eax, edx
	shr	eax, 8
	movzx	eax, al
	add	ecx, eax
	movzx	eax, dl
	shr	edx, 24
	add	ecx, eax
	add	r10d, edx
	add	r10d, ecx
	cmp	r8d, r15d
	jl	SHORT $LL13@array_chec
	mov	r12d, DWORD PTR height$[rsp]
	mov	rbx, r13
	mov	rcx, QWORD PTR data$[rsp]
$LN12@array_chec:

; 117  :     }
; 118  :     for (x = xp*4; x < width; ++x) {

	lea	edx, DWORD PTR [r8*4]
	cmp	edx, esi
	jge	SHORT $LN8@array_chec
	mov	r11d, r9d
	lea	eax, DWORD PTR [rdx+r14]
	sar	r11d, 8
	movsxd	r8, eax
	add	r8, rcx
	npad	7
$LL16@array_chec:

; 119  :       uint8_t mask = (uint8_t)((x & 0xff) ^ (y & 0xff) ^ (x >> 8) ^ (y >> 8));

	mov	eax, edx
	lea	r8, QWORD PTR [r8+1]
	sar	eax, 8
	movzx	ecx, al
	movzx	eax, r9b

; 120  :       checksum += (data[(y * stride) + x] & 0xff) ^ mask;

	xor	ecx, eax
	movzx	eax, r11b
	xor	ecx, eax
	movzx	eax, BYTE PTR [r8-1]
	xor	ecx, eax
	movzx	eax, dl
	xor	ecx, eax
	inc	edx
	add	r10d, ecx
	cmp	edx, esi
	jl	SHORT $LL16@array_chec
$LN8@array_chec:

; 107  :   }
; 108  : 
; 109  :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 110  : 
; 111  :   for (y = 0; y < height; ++y) {

	mov	rcx, QWORD PTR data$[rsp]
	inc	r9d
	add	r14d, r13d
	add	rbp, rbx
	cmp	r9d, r12d
	jl	$LL10@array_chec
	mov	r15, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+128]
$LN9@array_chec:

; 121  :     }
; 122  :   }
; 123  : 
; 124  :   // Unpack uint into byte-array.
; 125  :   checksum_out[0] = (checksum >> 24) & 0xff;

	mov	rcx, QWORD PTR checksum_out$[rsp]
	mov	eax, r10d
	shr	eax, 24
	mov	BYTE PTR [rcx], al

; 126  :   checksum_out[1] = (checksum >> 16) & 0xff;

	mov	eax, r10d
	shr	eax, 16
	mov	BYTE PTR [rcx+1], al

; 127  :   checksum_out[2] = (checksum >> 8) & 0xff;

	mov	eax, r10d
	shr	eax, 8
	mov	BYTE PTR [rcx+2], al

; 128  :   checksum_out[3] = (checksum) & 0xff;

	mov	BYTE PTR [rcx+3], r10b

; 129  : }

	add	rsp, 80					; 00000050H
	pop	r13
	pop	r12
	pop	rsi
	ret	0
array_checksum_generic4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
_TEXT	SEGMENT
tv1000 = 48
data$ = 144
height$ = 152
width$ = 160
stride$ = 168
checksum_out$ = 176
bitdepth$ = 184
array_checksum_generic8 PROC

; 134  :                                    unsigned char checksum_out[SEI_HASH_MAX_LENGTH], const uint8_t bitdepth) {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	push	r13
	sub	rsp, 112				; 00000070H

; 135  :   uint32_t checksum = 0;
; 136  :   int y, x, xp;
; 137  :   
; 138  :   static uint8_t ckmap_initialized = 0;
; 139  :   static uint64_t ckmap[32*256];
; 140  :   
; 141  :   //TODO: add 10-bit support
; 142  :   if(bitdepth != 8) {

	movzx	eax, BYTE PTR bitdepth$[rsp]
	xor	r10d, r10d
	movsxd	rdi, r9d
	mov	ebx, r8d
	mov	r13d, edx
	cmp	al, 8
	je	SHORT $LN17@array_chec

; 143  :     array_checksum_generic(data, height, width, stride,checksum_out, bitdepth);

	mov	BYTE PTR bitdepth$[rsp], al
	mov	r9d, edi

; 177  : }

	add	rsp, 112				; 00000070H
	pop	r13
	pop	rdi
	pop	rbx

; 143  :     array_checksum_generic(data, height, width, stride,checksum_out, bitdepth);

	jmp	array_checksum_generic
$LN17@array_chec:

; 144  :     return;
; 145  :   }
; 146  :   if (!ckmap_initialized) {

	cmp	BYTE PTR ?ckmap_initialized@?1??array_checksum_generic8@@9@9, r10b
	jne	SHORT $LN18@array_chec

; 147  :     uint8_t * const ckmap_uint8 = (uint8_t*)&ckmap;
; 148  :     int x, y;
; 149  :     for (y = 0; y < 256; ++y) {

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:?ckmap@?1??array_checksum_generic8@@9@9
	npad	3
$LL4@array_chec:

; 150  :       for (x = 0; x < 256; ++x) {

	xor	eax, eax
$LL7@array_chec:

; 151  :         ckmap_uint8[y*256+x] = x^y;

	movzx	ecx, r8b
	xor	cl, al
	inc	eax
	mov	BYTE PTR [rdx], cl
	inc	rdx
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL7@array_chec

; 147  :     uint8_t * const ckmap_uint8 = (uint8_t*)&ckmap;
; 148  :     int x, y;
; 149  :     for (y = 0; y < 256; ++y) {

	inc	r8d
	cmp	r8d, 256				; 00000100H
	jl	SHORT $LL4@array_chec

; 152  :       }
; 153  :     }
; 154  :     ckmap_initialized = 1;

	mov	rcx, QWORD PTR data$[rsp]
	mov	BYTE PTR ?ckmap_initialized@?1??array_checksum_generic8@@9@9, 1
$LN18@array_chec:

; 155  :   }
; 156  : 
; 157  :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 158  : 
; 159  :   for (y = 0; y < height; ++y) {

	xor	r9d, r9d
	test	r13d, r13d
	jle	$LN9@array_chec
	mov	QWORD PTR [rsp+104], rbp
	mov	eax, ebx
	mov	QWORD PTR [rsp+96], rsi
	cdq
	mov	QWORD PTR [rsp+88], r12
	and	edx, 7
	mov	QWORD PTR [rsp+80], r14
	mov	rsi, rdi
	mov	QWORD PTR [rsp+72], r15
	mov	r14, rcx
	mov	QWORD PTR tv1000[rsp], rdi
	lea	r12d, DWORD PTR [rdx+rax]
	sar	r12d, 3
	xor	r15d, r15d
$LL10@array_chec:

; 160  :     for (xp = 0; xp < width/8; ++xp) {

	xor	r11d, r11d
	test	r12d, r12d
	jle	$LN12@array_chec
	movzx	edi, r9b
	lea	rbx, OFFSET FLAT:?ckmap@?1??array_checksum_generic8@@9@9
	shl	edi, 5
	mov	rbp, r14
	xor	esi, esi
	mov	r13, 72340172838076673			; 0101010101010101H
	npad	5
$LL13@array_chec:

; 161  :       const int x = xp * 8;
; 162  :       const uint64_t mask = ckmap[(xp&31)+32*(y&255)] ^ ((uint64_t)((x >> 8) ^ (y >> 8)) * 0x101010101010101);

	mov	eax, esi
	lea	rbp, QWORD PTR [rbp+8]
	xor	eax, r9d
	mov	edx, r11d
	sar	eax, 8
	and	edx, 31
	movsxd	rcx, eax
	add	edx, edi
	imul	rcx, r13

; 163  :       const uint64_t cksumbytes = (*((uint64_t*)(&data[(y * stride) + x]))) ^ mask;

	mov	r8, QWORD PTR [rbx+rdx*8]
	inc	r11d
	xor	r8, rcx
	add	esi, 8
	xor	r8, QWORD PTR [rbp-8]

; 164  :       checksum += ((cksumbytes >> 56) & 0xff) + ((cksumbytes >> 48) & 0xff) + ((cksumbytes >> 40) & 0xff) + ((cksumbytes >> 32) & 0xff) + ((cksumbytes >> 24) & 0xff) + ((cksumbytes >> 16) & 0xff) + ((cksumbytes >> 8) & 0xff) + (cksumbytes & 0xff);

	mov	rax, r8
	shr	rax, 48					; 00000030H
	movzx	edx, al
	mov	rax, r8
	shr	rax, 40					; 00000028H
	movzx	eax, al
	add	edx, eax
	mov	rax, r8
	shr	rax, 32					; 00000020H
	movzx	ecx, al
	mov	rax, r8
	shr	rax, 24
	add	edx, ecx
	movzx	ecx, al
	mov	rax, r8
	shr	rax, 16
	add	edx, ecx
	movzx	ecx, al
	mov	rax, r8
	shr	rax, 8
	add	edx, ecx
	movzx	ecx, al
	mov	rax, r8
	shr	rax, 56					; 00000038H
	add	edx, ecx
	add	edx, eax
	movzx	eax, r8b
	add	r10d, eax
	add	r10d, edx
	cmp	r11d, r12d
	jl	$LL13@array_chec
	mov	ebx, DWORD PTR width$[rsp]
	mov	r13d, DWORD PTR height$[rsp]
	mov	edi, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	rsi, QWORD PTR tv1000[rsp]
$LN12@array_chec:

; 165  :     }
; 166  :     for (x = xp*8; x < width; ++x) {

	lea	edx, DWORD PTR [r11*8]
	cmp	edx, ebx
	jge	SHORT $LN8@array_chec
	mov	r11d, r9d
	lea	eax, DWORD PTR [rdx+r15]
	sar	r11d, 8
	movsxd	r8, eax
	add	r8, rcx
	npad	2
$LL16@array_chec:

; 167  :       uint8_t mask = (uint8_t)((x & 0xff) ^ (y & 0xff) ^ (x >> 8) ^ (y >> 8));

	mov	eax, edx
	lea	r8, QWORD PTR [r8+1]
	sar	eax, 8
	movzx	ecx, al
	movzx	eax, BYTE PTR [r8-1]

; 168  :       checksum += (data[(y * stride) + x] & 0xff) ^ mask;

	xor	ecx, eax
	movzx	eax, r9b
	xor	ecx, eax
	movzx	eax, r11b
	xor	ecx, eax
	movzx	eax, dl
	xor	ecx, eax
	inc	edx
	add	r10d, ecx
	cmp	edx, ebx
	jl	SHORT $LL16@array_chec
$LN8@array_chec:

; 155  :   }
; 156  : 
; 157  :   assert(SEI_HASH_MAX_LENGTH >= 4);
; 158  : 
; 159  :   for (y = 0; y < height; ++y) {

	mov	rcx, QWORD PTR data$[rsp]
	inc	r9d
	add	r15d, edi
	add	r14, rsi
	cmp	r9d, r13d
	jl	$LL10@array_chec
	mov	r15, QWORD PTR [rsp+72]
	mov	r14, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
$LN9@array_chec:

; 169  :     }
; 170  :   }
; 171  : 
; 172  :   // Unpack uint into byte-array.
; 173  :   checksum_out[0] = (checksum >> 24) & 0xff;

	mov	rcx, QWORD PTR checksum_out$[rsp]
	mov	eax, r10d
	shr	eax, 24
	mov	BYTE PTR [rcx], al

; 174  :   checksum_out[1] = (checksum >> 16) & 0xff;

	mov	eax, r10d
	shr	eax, 16
	mov	BYTE PTR [rcx+1], al

; 175  :   checksum_out[2] = (checksum >> 8) & 0xff;

	mov	eax, r10d
	shr	eax, 8
	mov	BYTE PTR [rcx+2], al

; 176  :   checksum_out[3] = (checksum) & 0xff;

	mov	BYTE PTR [rcx+3], r10b

; 177  : }

	add	rsp, 112				; 00000070H
	pop	r13
	pop	rdi
	pop	rbx
	ret	0
array_checksum_generic8 ENDP
_TEXT	ENDS
END
