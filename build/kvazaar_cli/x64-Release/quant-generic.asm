; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294950017
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294950016
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294950015
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294950014
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294950013
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294950012
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294950011
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294950010
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294950009
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294950008
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294950007
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294950006
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294950005
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294950004
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294950003
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294950002
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294950001
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294950000
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294949999
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294949998
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294949997
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294949996
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294949995
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294949994
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294949993
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294949992
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294949991
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294949990
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294949989
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294949988
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294949987
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294949986
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294949985
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294949984
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294949983
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294949982
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294949981
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294949980
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294949979
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294949978
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294949977
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294949976
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294949975
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294949974
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294949973
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294949972
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294949971
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294949970
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294949969
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294949968
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294949967
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294949966
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294949965
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294949964
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294949963
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294949962
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294949961
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294949960
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294949959
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294949958
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294949957
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294949956
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294949955
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294949967 DB 'quant', 00H
	ORG $+7
$SG4294950017 DB 'array_checksum', 00H
	ORG $+1
$SG4294950016 DB 'array_md5', 00H
	ORG $+6
$SG4294950015 DB 'reg_sad', 00H
$SG4294950014 DB 'sad_4x4', 00H
$SG4294950013 DB 'sad_8x8', 00H
$SG4294950012 DB 'sad_16x16', 00H
	ORG $+6
$SG4294950011 DB 'sad_32x32', 00H
	ORG $+6
$SG4294950010 DB 'sad_64x64', 00H
	ORG $+6
$SG4294950009 DB 'satd_4x4', 00H
	ORG $+7
$SG4294950008 DB 'satd_8x8', 00H
	ORG $+7
$SG4294950007 DB 'satd_16x16', 00H
	ORG $+5
$SG4294950006 DB 'satd_32x32', 00H
	ORG $+5
$SG4294950005 DB 'satd_64x64', 00H
	ORG $+5
$SG4294950004 DB 'satd_any_size', 00H
	ORG $+2
$SG4294950003 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294950002 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294950001 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294950000 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294949999 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294949998 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294949997 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294949996 DB 'satd_16x16_dual', 00H
$SG4294949995 DB 'satd_32x32_dual', 00H
$SG4294949994 DB 'satd_64x64_dual', 00H
$SG4294949993 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294949992 DB 'pixels_calc_ssd', 00H
$SG4294949991 DB 'bipred_average', 00H
	ORG $+1
$SG4294949990 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294949989 DB 'ver_sad', 00H
$SG4294949988 DB 'hor_sad', 00H
$SG4294949987 DB 'pixel_var', 00H
	ORG $+6
$SG4294949986 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294949985 DB 'dct_4x4', 00H
$SG4294949984 DB 'dct_8x8', 00H
$SG4294949983 DB 'dct_16x16', 00H
	ORG $+6
$SG4294949982 DB 'dct_32x32', 00H
	ORG $+6
$SG4294949981 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294949980 DB 'idct_4x4', 00H
	ORG $+7
$SG4294949979 DB 'idct_8x8', 00H
	ORG $+7
$SG4294949978 DB 'idct_16x16', 00H
	ORG $+5
$SG4294949977 DB 'idct_32x32', 00H
	ORG $+5
$SG4294949976 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294949975 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294949974 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294949973 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294949972 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294949971 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294949970 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294949969 DB 'sample_octpel_chroma_hi', 00H
$SG4294949968 DB 'get_extended_block', 00H
	ORG $+5
$SG4294949966 DB 'quantize_residual', 00H
	ORG $+6
$SG4294949965 DB 'dequant', 00H
$SG4294949964 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294949963 DB 'fast_coeff_cost', 00H
$SG4294949962 DB 'angular_pred', 00H
	ORG $+3
$SG4294949961 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294949960 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294949959 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294949958 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294949957 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294949956 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294949955 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_dequant_generic
PUBLIC	kvz_quantize_residual_generic
PUBLIC	kvz_quant_generic
PUBLIC	kvz_strategy_register_quant_generic
pdata	SEGMENT
$pdata$fast_coeff_cost_generic DD imagerel fast_coeff_cost_generic
	DD	imagerel fast_coeff_cost_generic+60
	DD	imagerel $unwind$fast_coeff_cost_generic
$pdata$0$fast_coeff_cost_generic DD imagerel fast_coeff_cost_generic+60
	DD	imagerel fast_coeff_cost_generic+115
	DD	imagerel $chain$0$fast_coeff_cost_generic
$pdata$1$fast_coeff_cost_generic DD imagerel fast_coeff_cost_generic+115
	DD	imagerel fast_coeff_cost_generic+130
	DD	imagerel $chain$1$fast_coeff_cost_generic
$pdata$kvz_dequant_generic DD imagerel $LN102
	DD	imagerel $LN102+1397
	DD	imagerel $unwind$kvz_dequant_generic
$pdata$kvz_quantize_residual_generic DD imagerel $LN145
	DD	imagerel $LN145+1401
	DD	imagerel $unwind$kvz_quantize_residual_generic
$pdata$kvz_quant_generic DD imagerel $LN109
	DD	imagerel $LN109+1373
	DD	imagerel $unwind$kvz_quant_generic
$pdata$kvz_strategy_register_quant_generic DD imagerel $LN4
	DD	imagerel $LN4+235
	DD	imagerel $unwind$kvz_strategy_register_quant_generic
xdata	SEGMENT
$unwind$fast_coeff_cost_generic DD 010401H
	DD	0204H
$chain$0$fast_coeff_cost_generic DD 020421H
	DD	03404H
	DD	imagerel fast_coeff_cost_generic
	DD	imagerel fast_coeff_cost_generic+60
	DD	imagerel $unwind$fast_coeff_cost_generic
$chain$1$fast_coeff_cost_generic DD 021H
	DD	imagerel fast_coeff_cost_generic
	DD	imagerel fast_coeff_cost_generic+60
	DD	imagerel $unwind$fast_coeff_cost_generic
$unwind$kvz_dequant_generic DD 0b1a01H
	DD	07741aH
	DD	06641aH
	DD	05541aH
	DD	04341aH
	DD	0e018f01aH
	DD	0d016H
$unwind$kvz_quantize_residual_generic DD 0b3801H
	DD	0224342cH
	DD	021a012cH
	DD	0e01df01fH
	DD	0c019d01bH
	DD	060167017H
	DD	05015H
$unwind$kvz_quant_generic DD 0a2301H
	DD	02030123H
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0300b500cH
$unwind$kvz_strategy_register_quant_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+6
$SG4294949939 DB 'fast_coeff_cost', 00H
$SG4294949940 DB 'generic', 00H
$SG4294949941 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294949942 DB 'generic', 00H
$SG4294949943 DB 'dequant', 00H
$SG4294949944 DB 'generic', 00H
$SG4294949945 DB 'quantize_residual', 00H
	ORG $+6
$SG4294949946 DB 'generic', 00H
$SG4294949947 DB 'quant', 00H
	ORG $+2
$SG4294949948 DB 'generic', 00H
$SG4294949949 DB 00H, 03H, 01H, 02H, 00H
	ORG $+3
$SG4294949950 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'M'
	DB	00H, 'I', 00H, 'N', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D', 00H
	DB	'T', 00H, 'H', 00H, 00H, 00H
	ORG $+4
$SG4294949951 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'q', 00H, 'u'
	DB	00H, 'a', 00H, 'n', 00H, 't', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294949952 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'M'
	DB	00H, 'A', 00H, 'X', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D', 00H
	DB	'T', 00H, 'H', 00H, 00H, 00H
	ORG $+4
$SG4294949953 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'q', 00H, 'u'
	DB	00H, 'a', 00H, 'n', 00H, 't', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294949954 DB 00H, 03H, 01H, 02H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_quant_generic PROC

; 378  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 379  :   bool success = true;
; 380  : 
; 381  :   success &= kvz_strategyselector_register(opaque, "quant", "generic", 0, &kvz_quant_generic);

	lea	rax, OFFSET FLAT:kvz_quant_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294949948
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294949947
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 382  :   success &= kvz_strategyselector_register(opaque, "quantize_residual", "generic", 0, &kvz_quantize_residual_generic);

	lea	r8, OFFSET FLAT:$SG4294949946
	lea	rax, OFFSET FLAT:kvz_quantize_residual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949945
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 383  :   success &= kvz_strategyselector_register(opaque, "dequant", "generic", 0, &kvz_dequant_generic);

	lea	r8, OFFSET FLAT:$SG4294949944
	lea	rax, OFFSET FLAT:kvz_dequant_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294949943
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 384  :   success &= kvz_strategyselector_register(opaque, "coeff_abs_sum", "generic", 0, &coeff_abs_sum_generic);

	lea	r8, OFFSET FLAT:$SG4294949942
	lea	rax, OFFSET FLAT:coeff_abs_sum_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949941
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 385  :   success &= kvz_strategyselector_register(opaque, "fast_coeff_cost", "generic", 0, &fast_coeff_cost_generic);

	lea	r8, OFFSET FLAT:$SG4294949940
	lea	rax, OFFSET FLAT:fast_coeff_cost_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949939
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register

; 386  : 
; 387  :   return success;
; 388  : }

	mov	rbx, QWORD PTR [rsp+64]
	and	eax, edi
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_quant_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
encoder$1$ = 0
delta_u$ = 16
scan$1$ = 4192
state$ = 4192
coef$ = 4200
q_coef$ = 4208
width$ = 4216
height$ = 4224
subset$1$ = 4232
type$ = 4232
last_cg$1$ = 4240
scan_idx$ = 4240
block_type$ = 4248
kvz_quant_generic PROC

; 52   : {

$LN109:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4120				; 00001018H
	call	__chkstk
	sub	rsp, rax

; 53   :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rsi, QWORD PTR [rcx]

; 54   :   const uint32_t log2_block_size = kvz_g_convert_to_bit[width] + 2;

	lea	r12, OFFSET FLAT:__ImageBase

; 55   :   const uint32_t * const scan = kvz_g_sig_last_scan[scan_idx][log2_block_size - 1];

	movsx	rax, BYTE PTR scan_idx$[rsp]
	mov	rdi, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 144  :   if(type == 0) {

	movsx	r15, BYTE PTR type$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 52   : {

	mov	rbx, r8
	movsxd	rbp, r9d

; 53   :   const encoder_control_t * const encoder = state->encoder_control;

	mov	QWORD PTR encoder$1$[rsp], rsi

; 55   :   const uint32_t * const scan = kvz_g_sig_last_scan[scan_idx][log2_block_size - 1];

	lea	r10, QWORD PTR [rax+rax*4]
	movsx	r14d, BYTE PTR kvz_g_convert_to_bit[rbp+r12]
	lea	r11d, DWORD PTR [r14+1]
	add	r11, r10
	mov	rax, QWORD PTR kvz_g_sig_last_scan[r12+r11*8]

; 56   : 
; 57   :   int32_t qp_scaled = kvz_get_scaled_qp(type, state->qp, (encoder->bitdepth - 8) * 6);

	movsx	r11d, BYTE PTR [rsi+2592]
	mov	QWORD PTR scan$1$[rsp], rax
	lea	ecx, DWORD PTR [r11-8]
	movzx	eax, cl
	add	al, al
	add	cl, al
	movsx	eax, BYTE PTR [rdi+384]
	add	cl, cl
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 144  :   if(type == 0) {

	test	r15b, r15b
	jne	SHORT $LN49@kvz_quant_

; 145  :     qp_scaled = qp + qp_offset;

	mov	r9d, eax
	movsx	eax, cl
	add	r9d, eax

; 146  :   } else {

	jmp	SHORT $LN52@kvz_quant_
$LN49@kvz_quant_:

; 147  :     qp_scaled = CLIP(-qp_offset, 57, qp);

	mov	r8d, 57					; 00000039H
	cmp	al, 57					; 00000039H
	jg	SHORT $LN55@kvz_quant_
	mov	r8d, eax
$LN55@kvz_quant_:
	movsx	edx, cl
	mov	r9d, edx
	neg	r9d
	cmp	r9d, r8d
	jg	SHORT $LN57@kvz_quant_
	cmp	al, 57					; 00000039H
	jle	SHORT $LN56@kvz_quant_
	mov	r9d, 57					; 00000039H
	jmp	SHORT $LN51@kvz_quant_
$LN56@kvz_quant_:
	mov	r9d, eax
$LN57@kvz_quant_:

; 148  :     if(qp_scaled < 0) {

	test	r9d, r9d
	js	SHORT $LN106@kvz_quant_
$LN51@kvz_quant_:

; 149  :       qp_scaled = qp_scaled + qp_offset;
; 150  :     } else {
; 151  :       qp_scaled = kvz_g_chroma_scale[qp_scaled] + qp_offset;

	mov	eax, r9d
	movzx	r9d, BYTE PTR kvz_g_chroma_scale[rax+r12]
$LN106@kvz_quant_:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 58   :   const uint32_t log2_tr_size = kvz_g_convert_to_bit[width] + 2;

	add	r9d, edx
$LN52@kvz_quant_:

; 59   :   const int32_t scalinglist_type = (block_type == CU_INTRA ? 0 : 3) + (int8_t)("\0\3\1\2"[type]);

	movsx	ecx, BYTE PTR $SG4294949954[r15+r12]
	lea	r8d, DWORD PTR [r14+2]
	xor	r15d, r15d

; 60   :   const int32_t *quant_coeff = encoder->scaling_list.quant_coeff[log2_tr_size - 2][scalinglist_type][qp_scaled % 6];

	mov	eax, 715827883				; 2aaaaaabH
	imul	r9d
	mov	eax, 3

; 61   :   const int32_t transform_shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size; //!< Represents scaling through forward transform
; 62   :   const int32_t q_bits = QUANT_SHIFT + qp_scaled / 6 + transform_shift;
; 63   :   const int32_t add = ((state->frame->slicetype == KVZ_SLICE_I) ? 171 : 85) << (q_bits - 9);

	mov	r13d, 85				; 00000055H
	mov	r10d, edx
	shr	r10d, 31
	add	r10d, edx
	cmp	BYTE PTR block_type$[rsp], 1
	cmove	eax, r15d
	add	ecx, eax
	lea	eax, DWORD PTR [r8-2]
	movsxd	rdx, ecx
	lea	rax, QWORD PTR [rax+rax*2]
	lea	rcx, QWORD PTR [rdx+rax*2]
	lea	eax, DWORD PTR [r10+r10*2]
	sub	r10d, r11d
	add	eax, eax
	lea	rdx, QWORD PTR [rcx+rcx*2]
	sub	r9d, eax
	sub	r10d, r8d
	add	r10d, 29
	movsxd	rax, r9d
	lea	rcx, QWORD PTR [rax+rdx*2]
	mov	rax, QWORD PTR [rdi+40]
	mov	r14, QWORD PTR [rsi+rcx*8+2912]

; 64   :   const int32_t q_bits8 = q_bits - 8;

	lea	r12d, DWORD PTR [r10-8]
	mov	ecx, 171				; 000000abH

; 65   : 
; 66   :   uint32_t ac_sum = 0;

	mov	esi, r15d
	cmp	DWORD PTR [rax+88], 2
	cmove	r13d, ecx

; 67   : 
; 68   :   for (int32_t n = 0; n < width * height; n++) {

	imul	ebp, DWORD PTR height$[rsp]
	lea	ecx, DWORD PTR [r10-9]
	shl	r13d, cl
	mov	DWORD PTR width$[rsp], ebp
	movsxd	rdi, ebp
	test	ebp, ebp
	jle	$LN3@kvz_quant_
	mov	rbp, QWORD PTR coef$[rsp]
	mov	r9d, r15d
	sub	rbp, rbx
	movsxd	r15, r13d
	mov	r11, rbx
	mov	r12d, -32768				; ffffffffffff8000H
	mov	ebx, 32767				; 00007fffH
	npad	14
$LL76@kvz_quant_:

; 69   :     int32_t level = coef[n];

	movsx	r8d, WORD PTR [r11+rbp]
	lea	r11, QWORD PTR [r11+2]

; 70   :     int64_t abs_level = (int64_t)abs(level);

	mov	eax, r8d

; 71   :     int32_t  sign;
; 72   : 
; 73   :     sign = (level < 0 ? -1 : 1);
; 74   : 
; 75   :     int32_t curr_quant_coeff = quant_coeff[n];
; 76   :     level = (abs_level * curr_quant_coeff + add) >> q_bits;

	mov	ecx, r10d
	sar	r8d, 31
	cdq
	xor	eax, edx
	and	r8d, -2
	sub	eax, edx
	inc	r8d
	movsxd	rdx, eax
	movsxd	rax, DWORD PTR [r14+r9*4]
	imul	rdx, rax
	add	rdx, r15
	sar	rdx, cl

; 77   :     ac_sum += level;

	add	esi, edx

; 78   : 
; 79   :     level *= sign;

	imul	edx, r8d

; 80   :     q_coef[n] = (coeff_t)(CLIP(-32768, 32767, level));

	cmp	edx, ebx
	cmovg	edx, ebx
	cmp	edx, r12d
	cmovl	edx, r12d
	inc	r9
	mov	WORD PTR [r11-2], dx
	cmp	r9, rdi
	jl	SHORT $LL76@kvz_quant_
	mov	rbx, QWORD PTR q_coef$[rsp]
	lea	r12d, DWORD PTR [r10-8]
	mov	ebp, DWORD PTR width$[rsp]
$LN3@kvz_quant_:

; 81   : 
; 82   :   }
; 83   : 
; 84   :   if (!encoder->cfg.signhide_enable || ac_sum < 2) return;

	mov	rax, QWORD PTR encoder$1$[rsp]
	cmp	DWORD PTR [rax+52], 0
	je	$LN24@kvz_quant_
	cmp	esi, 2
	jb	$LN24@kvz_quant_

; 85   : 
; 86   :   int32_t delta_u[LCU_WIDTH*LCU_WIDTH >> 2];
; 87   : 
; 88   :   for (int32_t n = 0; n < width * height; n++) {

	xor	esi, esi
	test	rdi, rdi
	jle	SHORT $LN6@kvz_quant_
	mov	rbp, QWORD PTR coef$[rsp]
	mov	r8d, esi
	movsxd	r9, r13d
	npad	2
$LL80@kvz_quant_:

; 89   :     int32_t level = coef[n];

	movsx	eax, WORD PTR [rbp+r8*2]

; 90   :     int64_t abs_level = (int64_t)abs(level);
; 91   :     int32_t curr_quant_coeff = quant_coeff[n];
; 92   : 
; 93   :     level = (abs_level * curr_quant_coeff + add) >> q_bits;

	mov	ecx, r10d
	cdq
	xor	eax, edx
	sub	eax, edx
	movsxd	rdx, eax
	movsxd	rax, DWORD PTR [r14+r8*4]
	imul	rdx, rax
	lea	rax, QWORD PTR [rdx+r9]
	sar	rax, cl

; 94   :     delta_u[n] = (int32_t)((abs_level * curr_quant_coeff - (level << q_bits)) >> q_bits8);

	shl	eax, cl
	mov	ecx, r12d
	cdqe
	sub	rdx, rax
	sar	rdx, cl
	mov	DWORD PTR delta_u$[rsp+r8*4], edx
	inc	r8
	cmp	r8, rdi
	jl	SHORT $LL80@kvz_quant_
	mov	ebp, DWORD PTR width$[rsp]
$LN6@kvz_quant_:

; 95   :   }
; 96   : 
; 97   :   if (ac_sum >= 2) {
; 98   : #define SCAN_SET_SIZE 16
; 99   : #define LOG2_SCAN_SET_SIZE 4
; 100  :     int32_t n, last_cg = -1, abssum = 0, subset, subpos;
; 101  :     for (subset = (width*height - 1) >> LOG2_SCAN_SET_SIZE; subset >= 0; subset--) {

	lea	ecx, DWORD PTR [rbp-1]
	mov	r13d, -1
	sar	ecx, 4
	mov	DWORD PTR last_cg$1$[rsp], r13d
	mov	DWORD PTR subset$1$[rsp], ecx
	test	ecx, ecx
	js	$LN24@kvz_quant_
	npad	12
$LL10@kvz_quant_:

; 102  :       int32_t first_nz_pos_in_cg = SCAN_SET_SIZE, last_nz_pos_in_cg = -1;

	mov	r9, QWORD PTR scan$1$[rsp]
	mov	ebp, r13d

; 103  :       subpos = subset << LOG2_SCAN_SET_SIZE;

	mov	r13d, ecx

; 104  :       abssum = 0;
; 105  : 
; 106  :       // Find last coeff pos
; 107  :       for (n = SCAN_SET_SIZE - 1; n >= 0; n--)  {

	mov	r8d, 15
	shl	r13d, 4
	mov	r12d, 16
	movsxd	r15, r13d
	mov	r11d, esi
	lea	rcx, QWORD PTR [r9+60]
	mov	edx, r8d
	lea	rcx, QWORD PTR [rcx+r15*4]
	npad	1
$LL13@kvz_quant_:

; 108  :         if (q_coef[scan[n + subpos]])  {

	mov	eax, DWORD PTR [rcx]
	cmp	WORD PTR [rbx+rax*2], 0
	jne	SHORT $LN67@kvz_quant_

; 104  :       abssum = 0;
; 105  : 
; 106  :       // Find last coeff pos
; 107  :       for (n = SCAN_SET_SIZE - 1; n >= 0; n--)  {

	dec	r8d
	sub	rcx, 4
	sub	rdx, 1
	jns	SHORT $LL13@kvz_quant_

; 116  :         if (q_coef[scan[n + subpos]]) {

	jmp	SHORT $LN12@kvz_quant_
$LN67@kvz_quant_:

; 109  :           last_nz_pos_in_cg = n;

	mov	ebp, r8d
$LN12@kvz_quant_:

; 110  :           break;
; 111  :         }
; 112  :       }
; 113  : 
; 114  :       // First coeff pos
; 115  :       for (n = 0; n <SCAN_SET_SIZE; n++) {

	mov	r8d, esi
	lea	rcx, QWORD PTR [r9+r15*4]
	mov	rdx, rsi
$LL16@kvz_quant_:

; 116  :         if (q_coef[scan[n + subpos]]) {

	mov	eax, DWORD PTR [rcx]
	cmp	WORD PTR [rbx+rax*2], 0
	jne	SHORT $LN68@kvz_quant_

; 110  :           break;
; 111  :         }
; 112  :       }
; 113  : 
; 114  :       // First coeff pos
; 115  :       for (n = 0; n <SCAN_SET_SIZE; n++) {

	inc	r8d
	inc	rdx
	add	rcx, 4
	cmp	rdx, r12
	jl	SHORT $LL16@kvz_quant_

; 116  :         if (q_coef[scan[n + subpos]]) {

	jmp	SHORT $LN15@kvz_quant_
$LN68@kvz_quant_:

; 117  :           first_nz_pos_in_cg = n;

	mov	r12d, r8d
$LN15@kvz_quant_:

; 118  :           break;
; 119  :         }
; 120  :       }
; 121  : 
; 122  :       // Sum all kvz_quant coeffs between first and last
; 123  :       for (n = first_nz_pos_in_cg; n <= last_nz_pos_in_cg; n++) {

	xor	r8d, r8d
	mov	edi, r12d
	movsxd	rsi, ebp
	mov	r9d, r8d
	mov	r14d, r12d
	mov	r10d, r8d
	cmp	rdi, rsi
	jg	SHORT $LN89@kvz_quant_
	mov	rax, rsi
	sub	rax, rdi
	inc	rax
	cmp	rax, 2
	jl	SHORT $LN100@kvz_quant_
	mov	rcx, QWORD PTR scan$1$[rsp]
	lea	rax, QWORD PTR [rdi+r15]
	mov	rdx, rsi
	sub	rdx, rdi
	dec	rdx
	shr	rdx, 1
	lea	r8, QWORD PTR [rcx+rax*4]
	inc	rdx
	lea	r14, QWORD PTR [rdi+rdx*2]
	npad	5
$LL92@kvz_quant_:

; 124  :         abssum += q_coef[scan[n + subpos]];

	mov	eax, DWORD PTR [r8]
	lea	r8, QWORD PTR [r8+8]
	movsx	ecx, WORD PTR [rbx+rax*2]
	mov	eax, DWORD PTR [r8-4]
	add	r9d, ecx
	movsx	ecx, WORD PTR [rbx+rax*2]
	add	r10d, ecx
	sub	rdx, 1
	jne	SHORT $LL92@kvz_quant_

; 118  :           break;
; 119  :         }
; 120  :       }
; 121  : 
; 122  :       // Sum all kvz_quant coeffs between first and last
; 123  :       for (n = first_nz_pos_in_cg; n <= last_nz_pos_in_cg; n++) {

	cmp	r14, rsi
	jg	SHORT $LN91@kvz_quant_
$LN100@kvz_quant_:

; 124  :         abssum += q_coef[scan[n + subpos]];

	mov	rcx, QWORD PTR scan$1$[rsp]
	lea	rax, QWORD PTR [r14+r15]
	mov	ecx, DWORD PTR [rcx+rax*4]
	movsx	r11d, WORD PTR [rbx+rcx*2]
$LN91@kvz_quant_:
	lea	eax, DWORD PTR [r10+r9]
	add	r11d, eax
	xor	r8d, r8d
$LN89@kvz_quant_:

; 125  :       }
; 126  : 
; 127  :       if (last_nz_pos_in_cg >= 0 && last_cg == -1) {

	mov	r14d, DWORD PTR last_cg$1$[rsp]
	test	ebp, ebp
	js	SHORT $LN28@kvz_quant_
	cmp	r14d, -1
	mov	eax, 1
	cmove	r14d, eax
	mov	DWORD PTR last_cg$1$[rsp], r14d
$LN28@kvz_quant_:

; 128  :         last_cg = 1;
; 129  :       }
; 130  : 
; 131  :       if (last_nz_pos_in_cg - first_nz_pos_in_cg >= 4) {

	mov	eax, ebp
	sub	eax, r12d
	cmp	eax, 4
	jl	$LN104@kvz_quant_

; 132  :         int32_t signbit = (q_coef[scan[subpos + first_nz_pos_in_cg]] > 0 ? 0 : 1);

	mov	rdx, QWORD PTR scan$1$[rsp]
	lea	eax, DWORD PTR [r12+r13]
	mov	r12d, r8d
	movsxd	rcx, eax

; 133  :         if (signbit != (abssum & 0x1)) { // compare signbit with sum_parity

	mov	r13d, -1
	mov	eax, DWORD PTR [rdx+rcx*4]
	cmp	WORD PTR [rbx+rax*2], 0
	setle	r12b
	and	r11d, 1
	cmp	r12d, r11d
	je	$LN8@kvz_quant_

; 135  :           int16_t final_change = 0, cur_change = 0;
; 136  :           for (n = (last_cg == 1 ? last_nz_pos_in_cg : SCAN_SET_SIZE - 1); n >= 0; n--) {

	cmp	r14d, 1
	mov	eax, 15
	movzx	esi, r8w
	movzx	r9d, r8w
	cmove	eax, ebp
	mov	r10d, 2147483647			; 7fffffffH
	movsxd	r8, eax
	mov	r11d, r13d
	test	eax, eax
	js	$LN21@kvz_quant_

; 134  :           int32_t min_cost_inc = 0x7fffffff, min_pos = -1, cur_cost = 0x7fffffff;

	lea	rax, QWORD PTR [r8+r15]
	lea	r14, QWORD PTR [rdx+rax*4]
$LL22@kvz_quant_:

; 137  :             uint32_t blkPos = scan[n + subpos];

	mov	ebp, DWORD PTR [r14]

; 138  :             if (q_coef[blkPos] != 0) {

	movsx	eax, WORD PTR [rbx+rbp*2]
	test	ax, ax
	je	SHORT $LN31@kvz_quant_

; 139  :               if (delta_u[blkPos] > 0) {

	mov	ecx, DWORD PTR delta_u$[rsp+rbp*4]
	test	ecx, ecx
	jg	SHORT $LN107@kvz_quant_

; 140  :                 cur_cost = -delta_u[blkPos];
; 141  :                 cur_change = 1;
; 142  :               }
; 143  :               else if (n == first_nz_pos_in_cg && abs(q_coef[blkPos]) == 1) {

	cmp	r8, rdi
	jne	SHORT $LN35@kvz_quant_
	cdq
	xor	eax, edx
	sub	eax, edx
	cmp	eax, 1
	jne	SHORT $LN35@kvz_quant_

; 144  :                 cur_cost = 0x7fffffff;

	mov	ecx, 2147483647				; 7fffffffH

; 145  :               }

	jmp	SHORT $LN38@kvz_quant_
$LN35@kvz_quant_:

; 146  :               else {
; 147  :                 cur_cost = delta_u[blkPos];
; 148  :                 cur_change = -1;

	movzx	r9d, r13w

; 149  :               }
; 150  :             }

	jmp	SHORT $LN38@kvz_quant_
$LN31@kvz_quant_:

; 151  :             else if (n < first_nz_pos_in_cg && ((coef[blkPos] >= 0) ? 0 : 1) != signbit) {

	cmp	r8, rdi
	jae	SHORT $LN37@kvz_quant_
	mov	rax, QWORD PTR coef$[rsp]
	movzx	eax, WORD PTR [rax+rbp*2]
	shr	eax, 15
	cmp	eax, r12d
	je	SHORT $LN37@kvz_quant_

; 152  :               cur_cost = 0x7fffffff;

	mov	ecx, 2147483647				; 7fffffffH

; 153  :             }

	jmp	SHORT $LN38@kvz_quant_
$LN37@kvz_quant_:

; 154  :             else {
; 155  :               cur_cost = -delta_u[blkPos];

	mov	ecx, DWORD PTR delta_u$[rsp+rbp*4]
$LN107@kvz_quant_:

; 156  :               cur_change = 1;
; 157  :             }
; 158  : 
; 159  :             if (cur_cost < min_cost_inc) {

	mov	r9d, 1
	neg	ecx
$LN38@kvz_quant_:
	cmp	ecx, r10d
	movzx	eax, r9w
	cmovge	ax, si
	cmovl	r11d, ebp
	sub	r14, 4
	movzx	esi, ax
	cmp	ecx, r10d
	cmovge	ecx, r10d
	sub	r8, 1
	mov	r10d, ecx
	jns	$LL22@kvz_quant_
	mov	r14d, DWORD PTR last_cg$1$[rsp]
$LN21@kvz_quant_:

; 160  :               min_cost_inc = cur_cost;
; 161  :               final_change = cur_change;
; 162  :               min_pos = blkPos;
; 163  :             }
; 164  :           } // CG loop
; 165  : 
; 166  :           if (q_coef[min_pos] == 32767 || q_coef[min_pos] == -32768) {

	movsxd	rax, r11d
	mov	r8d, 32767				; 00007fffH
	lea	rdx, QWORD PTR [rax+rax]
	movzx	ecx, WORD PTR [rdx+rbx]
	movzx	eax, cx
	sub	ax, r8w
	mov	r8d, 65534				; 0000fffeH
	test	ax, r8w
	jne	SHORT $LN40@kvz_quant_

; 167  :             final_change = -1;

	mov	esi, r13d
$LN40@kvz_quant_:

; 168  :           }
; 169  : 
; 170  :           if (coef[min_pos] >= 0) q_coef[min_pos] += final_change;

	mov	rax, QWORD PTR coef$[rsp]
	cmp	WORD PTR [rdx+rax], 0
	jl	SHORT $LN42@kvz_quant_
	add	cx, si
	mov	WORD PTR [rdx+rbx], cx
	jmp	SHORT $LN8@kvz_quant_
$LN42@kvz_quant_:

; 171  :           else q_coef[min_pos] -= final_change;

	sub	cx, si
	mov	WORD PTR [rdx+rbx], cx
	jmp	SHORT $LN8@kvz_quant_
$LN104@kvz_quant_:

; 128  :         last_cg = 1;
; 129  :       }
; 130  : 
; 131  :       if (last_nz_pos_in_cg - first_nz_pos_in_cg >= 4) {

	mov	r13d, -1
$LN8@kvz_quant_:

; 95   :   }
; 96   : 
; 97   :   if (ac_sum >= 2) {
; 98   : #define SCAN_SET_SIZE 16
; 99   : #define LOG2_SCAN_SET_SIZE 4
; 100  :     int32_t n, last_cg = -1, abssum = 0, subset, subpos;
; 101  :     for (subset = (width*height - 1) >> LOG2_SCAN_SET_SIZE; subset >= 0; subset--) {

	mov	ecx, DWORD PTR subset$1$[rsp]
	xor	esi, esi
	dec	ecx
	mov	eax, esi
	cmp	r14d, 1
	mov	DWORD PTR subset$1$[rsp], ecx
	cmovne	eax, r14d
	mov	DWORD PTR last_cg$1$[rsp], eax
	test	ecx, ecx
	jns	$LL10@kvz_quant_
$LN24@kvz_quant_:

; 172  :         } // Hide
; 173  :       }
; 174  :       if (last_cg == 1) last_cg = 0;
; 175  :     }
; 176  : 
; 177  : #undef SCAN_SET_SIZE
; 178  : #undef LOG2_SCAN_SET_SIZE
; 179  :   }
; 180  : }

	add	rsp, 4120				; 00001018H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_quant_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
has_coeffs$1$ = 0
tv2236 = 4
tv2267 = 8
coeff$ = 64
residual$ = 2112
state$ = 4368
cur_cu$ = 4376
width$ = 4384
color$ = 4392
scan_order$ = 4400
use_trskip$ = 4408
in_stride$ = 4416
out_stride$ = 4424
ref_in$ = 4432
pred_in$ = 4440
rec_out$ = 4448
coeff_out$ = 4456
early_skip$ = 4464
kvz_quantize_residual_generic PROC

; 205  : {

$LN145:
	mov	QWORD PTR [rsp+24], rbx
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4304				; 000010d0H
	call	__chkstk
	sub	rsp, rax
	lea	rbp, QWORD PTR [rsp+144]
	and	rbp, -64				; ffffffffffffffc0H

; 206  :   // Temporary arrays to pass data to and from kvz_quant and transform functions.
; 207  :   ALIGNED(64) int16_t residual[TR_MAX_WIDTH * TR_MAX_WIDTH];
; 208  :   ALIGNED(64) coeff_t coeff[TR_MAX_WIDTH * TR_MAX_WIDTH];
; 209  : 
; 210  :   int has_coeffs = 0;

	xor	esi, esi
	mov	edi, r8d
	mov	DWORD PTR has_coeffs$1$[rbp], esi
	mov	r12d, r9d
	mov	r14, rdx
	mov	r13, rcx

; 211  : 
; 212  :   assert(width <= TR_MAX_WIDTH);

	cmp	r8d, 32					; 00000020H
	jle	SHORT $LN35@kvz_quanti
	mov	r8d, 212				; 000000d4H
	lea	rdx, OFFSET FLAT:$SG4294949953
	lea	rcx, OFFSET FLAT:$SG4294949952
	call	QWORD PTR __imp__wassert

; 234  :   if (state->encoder_control->cfg.rdoq_enable &&

	jmp	SHORT $LN137@kvz_quanti
$LN35@kvz_quanti:

; 213  :   assert(width >= TR_MIN_WIDTH);

	cmp	edi, 4
	jge	SHORT $LN36@kvz_quanti
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294949951
	lea	rcx, OFFSET FLAT:$SG4294949950
	call	QWORD PTR __imp__wassert
$LN36@kvz_quanti:

; 214  : 
; 215  :   // Get residual. (ref_in - pred_in -> residual)
; 216  :   {
; 217  :     int y, x;
; 218  :     for (y = 0; y < width; ++y) {

	test	edi, edi
	jle	$LN3@kvz_quanti
$LN137@kvz_quanti:
	mov	r10, QWORD PTR ref_in$[rsp]
	lea	rbx, QWORD PTR residual$[rbp]
	sub	r10, QWORD PTR pred_in$[rsp]
	mov	r14, rdi
	movsxd	r13, DWORD PTR in_stride$[rsp]
	mov	r11, QWORD PTR pred_in$[rsp]
	movsxd	r15, edi
	add	r15, r15
$LL4@kvz_quanti:

; 219  :       for (x = 0; x < width; ++x) {

	mov	rdx, r11
	mov	r8, rbx
	mov	r9, rdi
	npad	5
$LL7@kvz_quanti:

; 220  :         residual[x + y * width] = (int16_t)(ref_in[x + y * in_stride] - pred_in[x + y * in_stride]);

	movzx	ecx, BYTE PTR [r10+rdx]
	lea	r8, QWORD PTR [r8+2]
	movzx	eax, BYTE PTR [rdx]
	lea	rdx, QWORD PTR [rdx+1]
	sub	cx, ax
	mov	WORD PTR [r8-2], cx
	sub	r9, 1
	jne	SHORT $LL7@kvz_quanti

; 214  : 
; 215  :   // Get residual. (ref_in - pred_in -> residual)
; 216  :   {
; 217  :     int y, x;
; 218  :     for (y = 0; y < width; ++y) {

	add	r11, r13
	add	rbx, r15
	sub	r14, 1
	jne	SHORT $LL4@kvz_quanti
	mov	r12d, DWORD PTR color$[rsp]
	mov	r13, QWORD PTR state$[rsp]
	mov	r14, QWORD PTR cur_cu$[rsp]
$LN3@kvz_quanti:

; 221  :       }
; 222  :     }
; 223  :   }
; 224  : 
; 225  :   // Transform residual. (residual -> coeff)
; 226  :   if (use_trskip) {

	mov	r15d, DWORD PTR use_trskip$[rsp]
	lea	rcx, OFFSET FLAT:kvz_g_convert_to_bit
	mov	r10, QWORD PTR [r13]
	mov	ebx, 13
	test	r15d, r15d
	je	SHORT $LN23@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 165  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	rax, dil

; 166  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;

	mov	r9d, ebx

; 167  :   int32_t  j,k;
; 168  :   for (j = 0; j < block_size; j++) {

	movsx	r11d, dil
	movsx	ecx, BYTE PTR [rax+rcx]
	movsx	eax, BYTE PTR [r10+2592]
	sub	r9d, ecx
	sub	r9d, eax
	mov	r10d, esi
	test	dil, dil
	jle	$LN53@kvz_quanti
	npad	8
$LL48@kvz_quanti:

; 169  :     for(k = 0; k < block_size; k ++) {

	mov	eax, r11d
	mov	r8d, r11d
	imul	eax, r10d
	movsxd	rdx, eax
	add	rdx, rdx
$LL51@kvz_quanti:

; 170  :       // Casting back and forth to make UBSan not trigger due to left-shifting negatives
; 171  :       coeff[j * block_size + k] = (int16_t)((uint16_t)(block[j * block_size + k]) << shift);

	movzx	eax, WORD PTR residual$[rbp+rdx]
	lea	rdx, QWORD PTR [rdx+2]
	mov	ecx, r9d
	shl	ax, cl
	mov	WORD PTR coeff$[rbp+rdx-2], ax
	sub	r8, 1
	jne	SHORT $LL51@kvz_quanti

; 167  :   int32_t  j,k;
; 168  :   for (j = 0; j < block_size; j++) {

	inc	r10d
	cmp	r10d, r11d
	jl	SHORT $LL48@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 228  :   }

	jmp	SHORT $LN53@kvz_quanti
$LN23@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 80   :   switch (width) {

	movzx	ecx, dil
	cmp	dil, 4
	je	SHORT $LN58@kvz_quanti
	cmp	cl, 8
	je	SHORT $LN60@kvz_quanti
	cmp	cl, 16
	je	SHORT $LN62@kvz_quanti
	mov	rax, QWORD PTR kvz_dct_32x32
	cmp	cl, 32					; 00000020H
	cmovne	rax, rsi

; 91   :   case 32:
; 92   :     return kvz_dct_32x32;

	jmp	SHORT $LN55@kvz_quanti
$LN62@kvz_quanti:

; 89   :   case 16:
; 90   :     return kvz_dct_16x16;

	mov	rax, QWORD PTR kvz_dct_16x16
	jmp	SHORT $LN55@kvz_quanti
$LN60@kvz_quanti:

; 86   :     }
; 87   :   case 8:
; 88   :     return kvz_dct_8x8;

	mov	rax, QWORD PTR kvz_dct_8x8
	jmp	SHORT $LN55@kvz_quanti
$LN58@kvz_quanti:

; 82   :     if (color == COLOR_Y && type == CU_INTRA) {

	test	r12d, r12d
	jne	SHORT $LN59@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 230  :     kvz_transform2d(state->encoder_control, residual, coeff, width, color, cur_cu->type);

	movzx	eax, BYTE PTR [r14]
	and	al, 3
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 82   :     if (color == COLOR_Y && type == CU_INTRA) {

	cmp	al, 1

; 83   :       return kvz_fast_forward_dst_4x4;

	mov	rax, QWORD PTR kvz_fast_forward_dst_4x4
	je	SHORT $LN55@kvz_quanti
$LN59@kvz_quanti:

; 84   :     } else {
; 85   :       return kvz_dct_4x4;

	mov	rax, QWORD PTR kvz_dct_4x4
$LN55@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	movzx	ecx, BYTE PTR [r10+2592]
	lea	r8, QWORD PTR coeff$[rbp]
	lea	rdx, QWORD PTR residual$[rbp]
	call	rax
$LN53@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 234  :   if (state->encoder_control->cfg.rdoq_enable &&

	mov	rax, QWORD PTR [r13]
	cmp	DWORD PTR [rax+48], esi
	je	SHORT $LN136@kvz_quanti
	cmp	edi, 4
	jg	SHORT $LN27@kvz_quanti
	cmp	DWORD PTR [rax+2400], esi
	jne	SHORT $LN136@kvz_quanti
$LN27@kvz_quanti:

; 235  :       (width > 4 || !state->encoder_control->cfg.rdoq_skip))
; 236  :   {
; 237  :     int8_t tr_depth = cur_cu->tr_depth - cur_cu->depth;
; 238  :     tr_depth += (cur_cu->part_size == SIZE_NxN ? 1 : 0);

	movzx	r8d, BYTE PTR [r14]

; 239  :     kvz_rdoq(state, coeff, coeff_out, width, width, (color == COLOR_Y ? 0 : 2),

	mov	r9d, edi
	movzx	eax, r8b
	and	al, 224					; 000000e0H
	cmp	al, 96					; 00000060H
	movzx	eax, r8b
	sete	dl
	shr	al, 2
	and	al, 7
	and	r8b, 3
	sub	dl, al
	movzx	eax, BYTE PTR [r14+1]
	mov	r14, QWORD PTR coeff_out$[rsp]
	and	al, 7
	add	dl, al
	mov	eax, r12d
	mov	BYTE PTR [rsp+64], dl
	neg	eax
	movzx	eax, BYTE PTR scan_order$[rsp]
	lea	rdx, QWORD PTR coeff$[rbp]
	mov	BYTE PTR [rsp+56], r8b
	sbb	cl, cl
	and	cl, 2
	mov	BYTE PTR [rsp+48], al
	mov	BYTE PTR [rsp+40], cl
	mov	r8, r14
	mov	rcx, r13
	mov	DWORD PTR [rsp+32], edi
	call	kvz_rdoq

; 240  :       scan_order, cur_cu->type, tr_depth);
; 241  :   } else {

	jmp	SHORT $LN26@kvz_quanti
$LN136@kvz_quanti:

; 242  :     kvz_quant(state, coeff, coeff_out, width, width, (color == COLOR_Y ? 0 : 2),

	movzx	edx, BYTE PTR [r14]
	mov	eax, r12d
	mov	r14, QWORD PTR coeff_out$[rsp]
	and	dl, 3
	mov	BYTE PTR [rsp+56], dl
	neg	eax
	movzx	eax, BYTE PTR scan_order$[rsp]
	lea	rdx, QWORD PTR coeff$[rbp]
	sbb	cl, cl
	mov	BYTE PTR [rsp+48], al
	and	cl, 2
	mov	r9d, edi
	mov	BYTE PTR [rsp+40], cl
	mov	r8, r14
	mov	rcx, r13
	mov	DWORD PTR [rsp+32], edi
	call	QWORD PTR kvz_quant
$LN26@kvz_quanti:

; 243  :       scan_order, cur_cu->type);
; 244  :   }
; 245  : 
; 246  :   // Check if there are any non-zero coefficients.
; 247  :   {
; 248  :     int i;
; 249  :     for (i = 0; i < width * width; ++i) {

	mov	eax, edi
	imul	eax, edi
	movsxd	rcx, eax
	test	eax, eax
	jle	SHORT $LN141@kvz_quanti
	mov	rax, rsi
$LL10@kvz_quanti:

; 250  :       if (coeff_out[i] != 0) {

	cmp	WORD PTR [r14+rax*2], si
	jne	$LN98@kvz_quanti

; 243  :       scan_order, cur_cu->type);
; 244  :   }
; 245  : 
; 246  :   // Check if there are any non-zero coefficients.
; 247  :   {
; 248  :     int i;
; 249  :     for (i = 0; i < width * width; ++i) {

	inc	rax
	cmp	rax, rcx
	jl	SHORT $LL10@kvz_quanti
$LN141@kvz_quanti:

; 279  :   else if (rec_out != pred_in) {

	mov	eax, esi
$LN29@kvz_quanti:
	mov	r11, QWORD PTR rec_out$[rsp]
	mov	rdx, QWORD PTR pred_in$[rsp]
	cmp	r11, rdx
	je	SHORT $LN138@kvz_quanti

; 280  :     // With no coeffs and rec_out == pred_int we skip copying the coefficients
; 281  :     // because the reconstruction is just the prediction.
; 282  :     int y, x;
; 283  : 
; 284  :     for (y = 0; y < width; ++y) {

	test	edi, edi
	jle	SHORT $LN138@kvz_quanti
	movsxd	r14, DWORD PTR in_stride$[rsp]
	mov	r9, rsi
	movsxd	r15, DWORD PTR out_stride$[rsp]
	mov	r10, rdi
	npad	10
$LL19@kvz_quanti:

; 285  :       for (x = 0; x < width; ++x) {

	mov	r8, rsi
	lea	rcx, QWORD PTR [r9+r11]
	sub	r8, r9
	sub	r8, r11
	add	r8, rdx
	mov	rdx, rdi
	npad	13
$LL110@kvz_quanti:

; 286  :         rec_out[x + y * out_stride] = pred_in[x + y * in_stride];

	movzx	eax, BYTE PTR [r8+rcx]
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	sub	rdx, 1
	jne	SHORT $LL110@kvz_quanti

; 280  :     // With no coeffs and rec_out == pred_int we skip copying the coefficients
; 281  :     // because the reconstruction is just the prediction.
; 282  :     int y, x;
; 283  : 
; 284  :     for (y = 0; y < width; ++y) {

	mov	rdx, QWORD PTR pred_in$[rsp]
	add	r9, r15
	add	rsi, r14
	sub	r10, 1
	jne	SHORT $LL19@kvz_quanti
$LN143@kvz_quanti:

; 287  :       }
; 288  :     }
; 289  :   }
; 290  : 
; 291  :   return has_coeffs;
; 292  : }

	mov	eax, DWORD PTR has_coeffs$1$[rbp]
$LN138@kvz_quanti:
	mov	rbx, QWORD PTR [rsp+4384]
	add	rsp, 4304				; 000010d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN98@kvz_quanti:

; 251  :         has_coeffs = 1;

	mov	eax, 1
	mov	DWORD PTR has_coeffs$1$[rbp], eax

; 252  :         break;
; 253  :       }
; 254  :     }
; 255  :   }
; 256  : 
; 257  :   // Do the inverse quantization and transformation and the reconstruction to
; 258  :   // rec_out.
; 259  :   if (has_coeffs && !early_skip) {

	cmp	BYTE PTR early_skip$[rsp], sil
	jne	$LN29@kvz_quanti

; 260  :     int y, x;
; 261  : 
; 262  :     // Get quantized residual. (coeff_out -> coeff -> residual)
; 263  :     kvz_dequant(state, coeff_out, coeff, width, width, (color == COLOR_Y ? 0 : (color == COLOR_U ? 2 : 3)), cur_cu->type);

	mov	ecx, esi
	test	r12d, r12d
	je	SHORT $LN38@kvz_quanti
	cmp	r12d, eax
	setne	cl
	add	ecx, 2
$LN38@kvz_quanti:
	mov	rax, QWORD PTR cur_cu$[rsp]
	lea	r8, QWORD PTR coeff$[rbp]
	mov	r9d, edi
	mov	rdx, r14
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	mov	BYTE PTR [rsp+48], al
	mov	BYTE PTR [rsp+40], cl
	mov	rcx, r13
	mov	DWORD PTR [rsp+32], edi
	call	QWORD PTR kvz_dequant
	mov	r9, QWORD PTR [r13]

; 264  :     if (use_trskip) {

	test	r15d, r15d
	je	SHORT $LN31@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 184  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	rax, dil
	lea	rcx, OFFSET FLAT:kvz_g_convert_to_bit

; 185  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 186  :   int32_t  j,k;
; 187  :   int32_t offset;
; 188  :   offset = (1 << (shift -1)); // For rounding
; 189  :   for ( j = 0; j < block_size; j++ ) {

	movsx	r11d, dil
	movsx	ecx, BYTE PTR [rax+rcx]
	movsx	eax, BYTE PTR [r9+2592]
	sub	ebx, ecx
	sub	ebx, eax
	mov	r9d, esi
	mov	eax, DWORD PTR has_coeffs$1$[rbp]
	mov	r10d, eax
	lea	ecx, DWORD PTR [rbx-1]
	shl	r10d, cl
	test	dil, dil
	jle	$LN74@kvz_quanti
	npad	11
$LL69@kvz_quanti:

; 190  :     for(k = 0; k < block_size; k ++) {

	mov	eax, r11d
	mov	r8d, r11d
	imul	eax, r9d
	cdqe
	add	rax, rax
	npad	1
$LL72@kvz_quanti:

; 191  :       block[j * block_size + k] =  (coeff[j * block_size + k] + offset) >> shift;

	movsx	edx, WORD PTR coeff$[rbp+rax]
	lea	rax, QWORD PTR [rax+2]
	add	edx, r10d
	mov	ecx, ebx
	sar	edx, cl
	mov	WORD PTR residual$[rbp+rax-2], dx
	sub	r8, 1
	jne	SHORT $LL72@kvz_quanti

; 185  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 186  :   int32_t  j,k;
; 187  :   int32_t offset;
; 188  :   offset = (1 << (shift -1)); // For rounding
; 189  :   for ( j = 0; j < block_size; j++ ) {

	inc	r9d
	cmp	r9d, r11d
	jl	SHORT $LL69@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 266  :     }

	jmp	SHORT $LN142@kvz_quanti
$LN31@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 109  :   switch (width) {

	movzx	ecx, dil
	cmp	dil, 4
	je	SHORT $LN79@kvz_quanti
	cmp	cl, 8
	je	SHORT $LN81@kvz_quanti
	cmp	cl, 16
	je	SHORT $LN83@kvz_quanti
	mov	rax, QWORD PTR kvz_idct_32x32
	cmp	cl, 32					; 00000020H
	cmovne	rax, rsi

; 120  :   case 32:
; 121  :     return kvz_idct_32x32;

	jmp	SHORT $LN76@kvz_quanti
$LN83@kvz_quanti:

; 118  :   case 16:
; 119  :     return kvz_idct_16x16;

	mov	rax, QWORD PTR kvz_idct_16x16
	jmp	SHORT $LN76@kvz_quanti
$LN81@kvz_quanti:

; 115  :     }
; 116  :   case 8:
; 117  :     return kvz_idct_8x8;

	mov	rax, QWORD PTR kvz_idct_8x8
	jmp	SHORT $LN76@kvz_quanti
$LN79@kvz_quanti:

; 111  :     if (color == COLOR_Y && type == CU_INTRA) {

	test	r12d, r12d
	jne	SHORT $LN80@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 268  :       kvz_itransform2d(state->encoder_control, residual, coeff, width, color, cur_cu->type);

	mov	rax, QWORD PTR cur_cu$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	al, 3
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 111  :     if (color == COLOR_Y && type == CU_INTRA) {

	cmp	al, 1

; 112  :       return kvz_fast_inverse_dst_4x4;

	mov	rax, QWORD PTR kvz_fast_inverse_dst_4x4
	je	SHORT $LN76@kvz_quanti
$LN80@kvz_quanti:

; 113  :     } else {
; 114  :       return kvz_idct_4x4;

	mov	rax, QWORD PTR kvz_idct_4x4
$LN76@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	movzx	ecx, BYTE PTR [r9+2592]
	lea	r8, QWORD PTR residual$[rbp]
	lea	rdx, QWORD PTR coeff$[rbp]
	call	rax
$LN142@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 272  :     for (y = 0; y < width; ++y) {

	mov	eax, DWORD PTR has_coeffs$1$[rbp]
$LN74@kvz_quanti:
	test	edi, edi
	jle	$LN138@kvz_quanti
	movsxd	r13, DWORD PTR in_stride$[rsp]
	lea	r14, QWORD PTR residual$[rbp]
	mov	r12, QWORD PTR rec_out$[rsp]
	mov	rcx, rdi
	movsxd	r15, edi
	mov	rbx, rsi
	add	r15, r15
	mov	QWORD PTR tv2267[rbp], rcx
	mov	r10, rsi
	npad	4
$LL13@kvz_quanti:

; 273  :       for (x = 0; x < width; ++x) {

	mov	r11, rbx
	lea	rdx, QWORD PTR [r10+r12]
	sub	r11, r10
	mov	r8, r14
	sub	r11, r12
	mov	r9, rcx
	add	r11, QWORD PTR pred_in$[rsp]
	mov	r12d, 255				; 000000ffH
$LL16@kvz_quanti:

; 274  :         int16_t val = residual[x + y * width] + pred_in[x + y * in_stride];

	movzx	eax, BYTE PTR [rdx+r11]
	add	ax, WORD PTR [r8]

; 275  :         rec_out[x + y * out_stride] = (kvz_pixel)CLIP(0, PIXEL_MAX, val);

	cmp	r12w, ax
	jl	SHORT $LN135@kvz_quanti
	cmp	si, ax
	movzx	ecx, al
	mov	DWORD PTR tv2236[rbp], esi
	cmovg	ecx, esi
	jmp	SHORT $LN42@kvz_quanti
$LN135@kvz_quanti:
	movzx	ecx, r12b
$LN42@kvz_quanti:
	mov	BYTE PTR [rdx], cl
	add	r8, 2
	inc	rdx
	sub	r9, 1
	jne	SHORT $LL16@kvz_quanti

; 272  :     for (y = 0; y < width; ++y) {

	movsxd	rax, DWORD PTR out_stride$[rsp]
	add	r14, r15
	mov	r12, QWORD PTR rec_out$[rsp]
	add	r10, rax
	mov	rcx, QWORD PTR tv2267[rbp]
	add	rbx, r13
	sub	rdi, 1
	jne	SHORT $LL13@kvz_quanti

; 276  :       }
; 277  :     }
; 278  :   }

	jmp	$LN143@kvz_quanti
kvz_quantize_residual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
state$ = 32
q_coef$ = 40
coef$ = 48
width$ = 56
height$ = 64
type$ = 72
block_type$ = 80
kvz_dequant_generic PROC

; 299  : {

$LN102:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r13
	push	r14
	push	r15

; 300  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rsi, QWORD PTR [rcx]
	mov	r10, rdx
	mov	r11d, DWORD PTR height$[rsp]
	mov	rdi, r8
	movsxd	r13, r9d

; 301  :   int32_t shift,add,coeff_q;
; 302  :   int32_t n;
; 303  :   int32_t transform_shift = 15 - encoder->bitdepth - (kvz_g_convert_to_bit[ width ] + 2);

	lea	r8, OFFSET FLAT:__ImageBase
	mov	ebp, 13
	movsx	edx, BYTE PTR [rsi+2592]
	mov	r9d, edx

; 304  : 
; 305  :   int32_t qp_scaled = kvz_get_scaled_qp(type, state->qp, (encoder->bitdepth-8)*6);

	sub	dl, 8
	movsx	r15d, BYTE PTR kvz_g_convert_to_bit[r13+r8]
	movzx	eax, dl
	add	al, al
	sub	ebp, r15d
	add	dl, al
	movsx	eax, BYTE PTR [rcx+384]
	add	dl, dl
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 144  :   if(type == 0) {

	cmp	BYTE PTR type$[rsp], 0
	jne	SHORT $LN33@kvz_dequan

; 145  :     qp_scaled = qp + qp_offset;

	mov	ecx, eax
	movsx	eax, dl
	add	ecx, eax

; 146  :   } else {

	jmp	SHORT $LN36@kvz_dequan
$LN33@kvz_dequan:

; 147  :     qp_scaled = CLIP(-qp_offset, 57, qp);

	mov	ebx, 57					; 00000039H
	cmp	al, 57					; 00000039H
	jg	SHORT $LN39@kvz_dequan
	mov	ebx, eax
$LN39@kvz_dequan:
	movsx	r8d, dl
	mov	ecx, r8d
	neg	ecx
	cmp	ecx, ebx
	jg	SHORT $LN41@kvz_dequan
	cmp	al, 57					; 00000039H
	jle	SHORT $LN40@kvz_dequan
	mov	ecx, 57					; 00000039H
	jmp	SHORT $LN35@kvz_dequan
$LN40@kvz_dequan:
	mov	ecx, eax
$LN41@kvz_dequan:

; 148  :     if(qp_scaled < 0) {

	test	ecx, ecx
	js	SHORT $LN100@kvz_dequan
$LN35@kvz_dequan:

; 149  :       qp_scaled = qp_scaled + qp_offset;
; 150  :     } else {
; 151  :       qp_scaled = kvz_g_chroma_scale[qp_scaled] + qp_offset;

	mov	eax, ecx
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	ecx, BYTE PTR kvz_g_chroma_scale[rax+rcx]
$LN100@kvz_dequan:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 307  :   shift = 20 - QUANT_SHIFT - transform_shift;

	add	ecx, r8d
	lea	r8, OFFSET FLAT:__ImageBase
$LN36@kvz_dequan:
	sub	r9d, ebp

; 308  : 
; 309  :   if (encoder->scaling_list.enable)

	imul	r11d, r13d
	add	r9d, 6
	mov	eax, 715827883				; 2aaaaaabH
	imul	ecx

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	movd	xmm4, r9d
	mov	r14d, edx
	shr	r14d, 31
	add	r14d, edx
	lea	eax, DWORD PTR [r14+r14*2]
	add	eax, eax
	sub	ecx, eax
	cmp	BYTE PTR [rsi+2616], 0
	movsxd	rbx, ecx
	je	$LN11@kvz_dequan

; 310  :   {
; 311  :     uint32_t log2_tr_size = kvz_g_convert_to_bit[ width ] + 2;
; 312  :     int32_t scalinglist_type = (block_type == CU_INTRA ? 0 : 3) + (int8_t)("\0\3\1\2"[type]);

	movsx	rax, BYTE PTR type$[rsp]
	movsx	ecx, BYTE PTR $SG4294949949[rax+r8]
	xor	r8d, r8d
	cmp	BYTE PTR block_type$[rsp], 1
	mov	eax, 3
	cmove	eax, r8d

; 313  : 
; 314  :     const int32_t *dequant_coef = encoder->scaling_list.de_quant_coeff[log2_tr_size-2][scalinglist_type][qp_scaled%6];
; 315  :     shift += 4;

	add	r9d, 4
	add	ecx, eax
	movsxd	rdx, ecx
	lea	rcx, QWORD PTR [r15+r15*2]
	lea	rax, QWORD PTR [rdx+rcx*2]

; 316  : 
; 317  :     if (shift >qp_scaled / 6) {

	mov	edx, r8d
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR [rbx+rcx*2]
	mov	rsi, QWORD PTR [rsi+rax*8+4064]
	cmp	r9d, r14d
	jle	$LN13@kvz_dequan

; 318  :       add = 1 << (shift - qp_scaled/6 - 1);

	sub	r9d, r14d
	mov	ebp, 1
	lea	ecx, DWORD PTR [r9-1]
	shl	ebp, cl
	movd	xmm3, ebp
	pshufd	xmm3, xmm3, 0

; 319  : 
; 320  :       for (n = 0; n < width * height; n++) {

	test	r11d, r11d
	jle	$LN53@kvz_dequan
	cmp	r11d, 8
	jb	$LN53@kvz_dequan

; 318  :       add = 1 << (shift - qp_scaled/6 - 1);

	cmp	DWORD PTR __isa_available, 2
	jl	$LN53@kvz_dequan
	lea	eax, DWORD PTR [r11-1]
	movd	xmm4, r9d
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rsi+rcx*4]
	lea	rbx, QWORD PTR [rdi+rcx*2]
	cmp	rdi, rax
	ja	SHORT $LN54@kvz_dequan
	cmp	rbx, rsi
	jae	$LN53@kvz_dequan
$LN54@kvz_dequan:
	lea	rax, QWORD PTR [r10+rcx*2]
	cmp	rdi, rax
	ja	SHORT $LN55@kvz_dequan
	cmp	rbx, r10
	jae	$LN53@kvz_dequan
$LN55@kvz_dequan:
	mov	ecx, r11d
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN99@kvz_dequan
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN99@kvz_dequan:
	mov	eax, r11d
	sub	eax, ecx
	mov	rcx, r10

; 319  : 
; 320  :       for (n = 0; n < width * height; n++) {

	movsxd	rbx, eax
	sub	rcx, rdi
	lea	rax, QWORD PTR [rdi+8]
	npad	7
$LL4@kvz_dequan:

; 321  :         coeff_q = ((q_coef[n] * dequant_coef[n]) + add ) >> (shift -  qp_scaled/6);

	movdqu	xmm1, XMMWORD PTR [rsi+r8*4]
	add	edx, 8
	movq	xmm0, QWORD PTR [rcx+rax-8]
	lea	rax, QWORD PTR [rax+16]
	pmovsxwd xmm2, xmm0
	movq	xmm0, QWORD PTR [rcx+rax-16]
	pmulld	xmm2, xmm1
	movdqu	xmm1, XMMWORD PTR [rsi+r8*4+16]
	add	r8, 8
	paddd	xmm2, xmm3
	psrad	xmm2, xmm4
	packssdw xmm2, xmm2

; 322  :         coef[n] = (coeff_t)CLIP(-32768,32767,coeff_q);

	movq	QWORD PTR [rax-24], xmm2
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm2, xmm3
	psrad	xmm2, xmm4
	packssdw xmm2, xmm2
	movq	QWORD PTR [rax-16], xmm2
	cmp	r8, rbx
	jl	SHORT $LL4@kvz_dequan
$LN53@kvz_dequan:

; 318  :       add = 1 << (shift - qp_scaled/6 - 1);

	movsxd	rbx, edx

; 319  : 
; 320  :       for (n = 0; n < width * height; n++) {

	movsxd	r14, r11d
	cmp	rbx, r14
	jge	$LN9@kvz_dequan

; 318  :       add = 1 << (shift - qp_scaled/6 - 1);

	lea	r11, QWORD PTR [rdi+rbx*2]
	sub	r10, rdi
	mov	edx, 32767				; 00007fffH
	mov	r8d, -32768				; ffffffffffff8000H
$LL50@kvz_dequan:

; 321  :         coeff_q = ((q_coef[n] * dequant_coef[n]) + add ) >> (shift -  qp_scaled/6);

	movsx	eax, WORD PTR [r11+r10]
	lea	r11, QWORD PTR [r11+2]
	imul	eax, DWORD PTR [rsi+rbx*4]
	mov	ecx, r9d
	add	eax, ebp
	sar	eax, cl

; 322  :         coef[n] = (coeff_t)CLIP(-32768,32767,coeff_q);

	cmp	eax, edx
	cmovg	eax, edx
	cmp	eax, r8d
	cmovl	eax, r8d
	inc	rbx
	mov	WORD PTR [r11-2], ax
	cmp	rbx, r14
	jl	SHORT $LL50@kvz_dequan

; 323  :       }
; 324  :     } else {

	jmp	$LN9@kvz_dequan
$LN13@kvz_dequan:

; 325  :       for (n = 0; n < width * height; n++) {

	test	r11d, r11d
	jle	$LN9@kvz_dequan
	cmp	r11d, 8
	jb	$LN96@kvz_dequan
	cmp	DWORD PTR __isa_available, 2
	jl	$LN96@kvz_dequan

; 328  :         coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q << (qp_scaled/6 - shift));

	mov	eax, r14d
	sub	eax, r9d
	movd	xmm3, eax
	lea	eax, DWORD PTR [r11-1]
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rsi+rcx*4]
	lea	rbx, QWORD PTR [rdi+rcx*2]
	cmp	rdi, rax
	ja	SHORT $LN70@kvz_dequan

; 325  :       for (n = 0; n < width * height; n++) {

	cmp	rbx, rsi
	jae	$LN96@kvz_dequan
$LN70@kvz_dequan:
	lea	rax, QWORD PTR [r10+rcx*2]
	cmp	rdi, rax
	ja	SHORT $LN71@kvz_dequan
	cmp	rbx, r10
	jae	$LN96@kvz_dequan
$LN71@kvz_dequan:
	mov	ecx, r11d
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN98@kvz_dequan
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN98@kvz_dequan:
	mov	eax, r11d
	sub	eax, ecx
	mov	rcx, r10
	movsxd	rbp, eax
	sub	rcx, rdi
	lea	rax, QWORD PTR [rdi+8]
	npad	1
$LL7@kvz_dequan:

; 326  :         // Clip to avoid possible overflow in following shift left operation
; 327  :         coeff_q   = CLIP(-32768, 32767, q_coef[n] * dequant_coef[n]);

	movdqu	xmm1, XMMWORD PTR [rsi+r8*4]
	add	edx, 8
	movq	xmm0, QWORD PTR [rcx+rax-8]
	lea	rax, QWORD PTR [rax+16]
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	movdqu	xmm1, XMMWORD PTR [rsi+r8*4+16]
	add	r8, 8
	packssdw xmm2, xmm2
	pmovsxwd xmm0, xmm2

; 328  :         coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q << (qp_scaled/6 - shift));

	pslld	xmm0, xmm3
	packssdw xmm0, xmm0
	movq	QWORD PTR [rax-24], xmm0
	movq	xmm0, QWORD PTR [rcx+rax-16]
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	packssdw xmm2, xmm2
	pmovsxwd xmm0, xmm2
	pslld	xmm0, xmm3
	packssdw xmm0, xmm0
	movq	QWORD PTR [rax-16], xmm0
	cmp	r8, rbp
	jl	SHORT $LL7@kvz_dequan

; 325  :       for (n = 0; n < width * height; n++) {

	cmp	edx, r11d
	jge	$LN9@kvz_dequan
$LN96@kvz_dequan:

; 328  :         coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q << (qp_scaled/6 - shift));

	movsxd	rax, edx
	sub	r14d, r9d
	sub	r10, rdi
	mov	r8d, -32768				; ffffffffffff8000H
	sub	r11d, edx
	mov	edx, 32767				; 00007fffH
	lea	r9, QWORD PTR [rdi+rax*2]
	lea	rbx, QWORD PTR [rsi+rax*4]
$LL56@kvz_dequan:

; 326  :         // Clip to avoid possible overflow in following shift left operation
; 327  :         coeff_q   = CLIP(-32768, 32767, q_coef[n] * dequant_coef[n]);

	movsx	eax, WORD PTR [r10+r9]
	imul	eax, DWORD PTR [rbx]
	cmp	eax, edx
	jg	SHORT $LN94@kvz_dequan
	cmp	eax, r8d
	cmovl	eax, r8d
	jmp	SHORT $LN61@kvz_dequan
$LN94@kvz_dequan:
	mov	eax, edx
$LN61@kvz_dequan:

; 328  :         coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q << (qp_scaled/6 - shift));

	mov	ecx, r14d
	shl	eax, cl
	cmp	eax, edx
	jg	SHORT $LN95@kvz_dequan
	cmp	eax, r8d
	cmovl	eax, r8d
	jmp	SHORT $LN67@kvz_dequan
$LN95@kvz_dequan:
	mov	eax, edx
$LN67@kvz_dequan:
	mov	WORD PTR [r9], ax
	add	rbx, 4
	add	r9, 2
	sub	r11, 1
	jne	SHORT $LL56@kvz_dequan

; 329  :       }
; 330  :     }
; 331  :   } else {

	jmp	$LN9@kvz_dequan
$LN11@kvz_dequan:

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	movsx	esi, WORD PTR kvz_g_inv_quant_scales[r8+rbx*2]
	mov	ecx, r14d
	shl	esi, cl
	xor	r8d, r8d

; 333  :     add = 1 << (shift-1);

	lea	ecx, DWORD PTR [r9-1]
	mov	ebp, 1
	shl	ebp, cl
	mov	edx, r8d
	movd	xmm2, esi
	pshufd	xmm2, xmm2, 0
	movd	xmm3, ebp
	pshufd	xmm3, xmm3, 0

; 334  : 
; 335  :     for (n = 0; n < width*height; n++) {

	test	r11d, r11d
	jle	$LN75@kvz_dequan
	cmp	r11d, 16
	jb	$LN75@kvz_dequan

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	cmp	DWORD PTR __isa_available, 2
	jl	$LN75@kvz_dequan
	lea	eax, DWORD PTR [r11-1]
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r10+rcx*2]
	lea	rbx, QWORD PTR [rdi+rcx*2]
	cmp	rdi, rax
	ja	SHORT $LN76@kvz_dequan
	cmp	rbx, r10
	jae	$LN75@kvz_dequan
$LN76@kvz_dequan:
	mov	ecx, r11d
	and	ecx, -2147483633			; ffffffff8000000fH
	jge	SHORT $LN97@kvz_dequan
	dec	ecx
	or	ecx, -16
	inc	ecx
$LN97@kvz_dequan:
	mov	eax, r11d
	sub	eax, ecx
	lea	rcx, QWORD PTR [rdi+8]

; 334  : 
; 335  :     for (n = 0; n < width*height; n++) {

	movsxd	rbx, eax
	mov	rax, r10
	sub	rax, rdi
	npad	11
$LL10@kvz_dequan:

; 336  :       coeff_q   = (q_coef[n] * scale + add) >> shift;

	movq	xmm0, QWORD PTR [rax+rcx-8]
	lea	rcx, QWORD PTR [rcx+32]
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax+rcx-32]
	add	edx, 16
	pmulld	xmm1, xmm2
	paddd	xmm1, xmm3
	add	r8, 16
	psrad	xmm1, xmm4
	packssdw xmm1, xmm1

; 337  :       coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q);

	movq	QWORD PTR [rcx-40], xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax+rcx-24]
	pmulld	xmm1, xmm2
	paddd	xmm1, xmm3
	psrad	xmm1, xmm4
	packssdw xmm1, xmm1
	movq	QWORD PTR [rcx-32], xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax+rcx-16]
	pmulld	xmm1, xmm2
	paddd	xmm1, xmm3
	psrad	xmm1, xmm4
	packssdw xmm1, xmm1
	movq	QWORD PTR [rcx-24], xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, xmm2
	paddd	xmm1, xmm3
	psrad	xmm1, xmm4
	packssdw xmm1, xmm1
	movq	QWORD PTR [rcx-16], xmm1
	cmp	r8, rbx
	jl	$LL10@kvz_dequan
$LN75@kvz_dequan:

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	movsxd	rax, edx

; 334  : 
; 335  :     for (n = 0; n < width*height; n++) {

	movsxd	rbx, r11d
	cmp	rax, rbx
	jge	SHORT $LN9@kvz_dequan

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	sub	r10, rdi
	lea	r11, QWORD PTR [rdi+rax*2]
	sub	rbx, rax
	mov	edx, 32767				; 00007fffH
	mov	r8d, -32768				; ffffffffffff8000H
	npad	8
$LL72@kvz_dequan:

; 336  :       coeff_q   = (q_coef[n] * scale + add) >> shift;

	movsx	eax, WORD PTR [r10+r11]
	lea	r11, QWORD PTR [r11+2]
	imul	eax, esi
	mov	ecx, r9d
	add	eax, ebp
	sar	eax, cl

; 337  :       coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q);

	cmp	eax, edx
	cmovg	eax, edx
	cmp	eax, r8d
	cmovl	eax, r8d
	mov	WORD PTR [r11-2], ax
	sub	rbx, 1
	jne	SHORT $LL72@kvz_dequan
$LN9@kvz_dequan:

; 338  :     }
; 339  :   }
; 340  : }

	mov	rbx, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+56]
	pop	r15
	pop	r14
	pop	r13
	ret	0
kvz_dequant_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
coeffs$ = 8
length$ = 16
coeff_abs_sum_generic PROC

; 344  :   uint32_t sum = 0;

	xor	r9d, r9d
	mov	r11, rdx
	mov	r10, rcx
	mov	r8d, r9d

; 345  :   for (int i = 0; i < length; i++) {

	cmp	rdx, 8
	jb	SHORT $LN9@coeff_abs_

; 344  :   uint32_t sum = 0;

	cmp	DWORD PTR __isa_available, 2
	jl	SHORT $LN9@coeff_abs_
	and	rdx, -8
	xorps	xmm4, xmm4
	xorps	xmm3, xmm3
	npad	11
$LL4@coeff_abs_:

; 346  :     sum += abs(coeffs[i]);

	movq	xmm0, QWORD PTR [rcx]
	lea	rcx, QWORD PTR [rcx+16]
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rcx-8]
	pabsd	xmm2, xmm1
	paddd	xmm2, xmm4
	add	r8d, 8
	movdqa	xmm4, xmm2
	movsxd	rax, r8d
	pmovsxwd xmm1, xmm0
	pabsd	xmm2, xmm1
	paddd	xmm2, xmm3
	movdqa	xmm3, xmm2
	cmp	rax, rdx
	jb	SHORT $LL4@coeff_abs_

; 344  :   uint32_t sum = 0;

	paddd	xmm3, xmm4
	movdqa	xmm0, xmm3
	psrldq	xmm0, 8
	paddd	xmm3, xmm0
	movdqa	xmm0, xmm3
	psrldq	xmm0, 4
	paddd	xmm3, xmm0
	movd	r9d, xmm3
$LN9@coeff_abs_:

; 345  :   for (int i = 0; i < length; i++) {

	movsxd	rax, r8d
	cmp	rax, r11
	jae	SHORT $LN16@coeff_abs_
	lea	r10, QWORD PTR [r10+rax*2]
	npad	4
$LL8@coeff_abs_:

; 346  :     sum += abs(coeffs[i]);

	movsx	eax, WORD PTR [r10]
	lea	r10, QWORD PTR [r10+2]
	cdq
	inc	r8d
	xor	eax, edx
	movsxd	rcx, r8d
	sub	eax, edx
	add	r9d, eax
	cmp	rcx, r11
	jb	SHORT $LL8@coeff_abs_
$LN16@coeff_abs_:

; 347  :   }
; 348  :   return sum;
; 349  : }

	mov	eax, r9d
	ret	0
coeff_abs_sum_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
wts_packed$ = 8
weights$ = 16
get_coeff_weights PROC

; 353  :   weights[0] = (wts_packed >>  0) & 0xffff;
; 354  :   weights[1] = (wts_packed >> 16) & 0xffff;

	mov	rax, rcx
	mov	WORD PTR [rdx], cx
	shr	rax, 16
	mov	WORD PTR [rdx+2], ax

; 355  :   weights[2] = (wts_packed >> 32) & 0xffff;

	mov	rax, rcx
	shr	rax, 32					; 00000020H

; 356  :   weights[3] = (wts_packed >> 48) & 0xffff;

	shr	rcx, 48					; 00000030H
	mov	WORD PTR [rdx+4], ax
	mov	WORD PTR [rdx+6], cx

; 357  : }

	ret	0
get_coeff_weights ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
_TEXT	SEGMENT
coeff$ = 16
width$ = 24
weights_unpacked$ = 32
weights$ = 32
fast_coeff_cost_generic PROC

; 360  : {

	sub	rsp, 8

; 354  :   weights[1] = (wts_packed >> 16) & 0xffff;

	mov	rax, r8

; 362  :   uint16_t weights_unpacked[4];
; 363  : 
; 364  :   get_coeff_weights(weights, weights_unpacked);
; 365  : 
; 366  :   for (int32_t i = 0; i < width * width; i++) {

	imul	edx, edx

; 354  :   weights[1] = (wts_packed >> 16) & 0xffff;

	shr	rax, 16

; 361  :   uint32_t sum = 0;

	xor	r9d, r9d

; 354  :   weights[1] = (wts_packed >> 16) & 0xffff;

	mov	WORD PTR weights_unpacked$[rsp+2], ax

; 360  : {

	mov	r11, rcx

; 355  :   weights[2] = (wts_packed >> 32) & 0xffff;

	mov	rax, r8
	mov	WORD PTR weights_unpacked$[rsp], r8w
	shr	rax, 32					; 00000020H

; 356  :   weights[3] = (wts_packed >> 48) & 0xffff;

	shr	r8, 48					; 00000030H
	mov	WORD PTR weights_unpacked$[rsp+4], ax
	mov	WORD PTR weights_unpacked$[rsp+6], r8w

; 362  :   uint16_t weights_unpacked[4];
; 363  : 
; 364  :   get_coeff_weights(weights, weights_unpacked);
; 365  : 
; 366  :   for (int32_t i = 0; i < width * width; i++) {

	movsxd	r10, edx
	test	edx, edx
	jle	SHORT $LN3@fast_coeff
	mov	QWORD PTR [rsp], rbx
	mov	r8d, r9d
	lea	ebx, QWORD PTR [r9+3]
	npad	9
$LL4@fast_coeff:

; 367  :      int16_t curr = coeff[i];
; 368  :     uint32_t curr_abs = abs(curr);

	movsx	eax, WORD PTR [r11+r8*2]
	cdq
	xor	eax, edx
	sub	eax, edx

; 369  :     if (curr_abs > 3) {

	cmp	eax, ebx
	cmova	eax, ebx
	inc	r8

; 370  :       curr_abs = 3;
; 371  :     }
; 372  :     sum += weights_unpacked[curr_abs];

	movzx	ecx, WORD PTR weights_unpacked$[rsp+rax*2]
	add	r9d, ecx
	cmp	r8, r10
	jl	SHORT $LL4@fast_coeff

; 362  :   uint16_t weights_unpacked[4];
; 363  : 
; 364  :   get_coeff_weights(weights, weights_unpacked);
; 365  : 
; 366  :   for (int32_t i = 0; i < width * width; i++) {

	mov	rbx, QWORD PTR [rsp]
$LN3@fast_coeff:

; 373  :   }
; 374  :   return (sum + (1 << 7)) >> 8;

	lea	eax, DWORD PTR [r9+128]
	shr	eax, 8

; 375  : }

	add	rsp, 8
	ret	0
fast_coeff_cost_generic ENDP
_TEXT	ENDS
END
