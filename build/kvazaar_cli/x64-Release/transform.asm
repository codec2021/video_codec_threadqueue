; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	kvz_g_chroma_scale
	ORG $+7
kvz_g_chroma_scale DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	021H
	DB	022H
	DB	022H
	DB	023H
	DB	023H
	DB	024H
	DB	024H
	DB	025H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	ORG $+6
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+14
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_quantize_residual_trskip
PUBLIC	kvz_quantize_lcu_residual
PUBLIC	kvz_get_scaled_qp
PUBLIC	kvz_itransform2d
PUBLIC	kvz_transformskip
PUBLIC	kvz_transform2d
PUBLIC	kvz_itransformskip
pdata	SEGMENT
$pdata$quantize_tr_residual DD imagerel quantize_tr_residual
	DD	imagerel quantize_tr_residual+105
	DD	imagerel $unwind$quantize_tr_residual
$pdata$0$quantize_tr_residual DD imagerel quantize_tr_residual+105
	DD	imagerel quantize_tr_residual+128
	DD	imagerel $chain$0$quantize_tr_residual
$pdata$4$quantize_tr_residual DD imagerel quantize_tr_residual+128
	DD	imagerel quantize_tr_residual+1056
	DD	imagerel $chain$4$quantize_tr_residual
$pdata$5$quantize_tr_residual DD imagerel quantize_tr_residual+1056
	DD	imagerel quantize_tr_residual+1086
	DD	imagerel $chain$5$quantize_tr_residual
$pdata$6$quantize_tr_residual DD imagerel quantize_tr_residual+1086
	DD	imagerel quantize_tr_residual+1098
	DD	imagerel $chain$6$quantize_tr_residual
$pdata$7$quantize_tr_residual DD imagerel quantize_tr_residual+1098
	DD	imagerel quantize_tr_residual+1390
	DD	imagerel $chain$7$quantize_tr_residual
$pdata$kvz_quantize_residual_trskip DD imagerel $LN11
	DD	imagerel $LN11+600
	DD	imagerel $unwind$kvz_quantize_residual_trskip
$pdata$rdpcm DD	imagerel rdpcm
	DD	imagerel rdpcm+178
	DD	imagerel $unwind$rdpcm
$pdata$bypass_transquant DD imagerel bypass_transquant
	DD	imagerel bypass_transquant+32
	DD	imagerel $unwind$bypass_transquant
$pdata$4$bypass_transquant DD imagerel bypass_transquant+32
	DD	imagerel bypass_transquant+226
	DD	imagerel $chain$4$bypass_transquant
$pdata$5$bypass_transquant DD imagerel bypass_transquant+226
	DD	imagerel bypass_transquant+240
	DD	imagerel $chain$5$bypass_transquant
$pdata$xy_to_zorder DD imagerel xy_to_zorder
	DD	imagerel xy_to_zorder+272
	DD	imagerel $unwind$xy_to_zorder
$pdata$copy_coeffs DD imagerel copy_coeffs
	DD	imagerel copy_coeffs+30
	DD	imagerel $unwind$copy_coeffs
$pdata$kvz_quantize_lcu_residual DD imagerel $LN184
	DD	imagerel $LN184+1026
	DD	imagerel $unwind$kvz_quantize_lcu_residual
$pdata$kvz_transformskip DD imagerel $LN18
	DD	imagerel $LN18+161
	DD	imagerel $unwind$kvz_transformskip
$pdata$kvz_itransformskip DD imagerel $LN18
	DD	imagerel $LN18+183
	DD	imagerel $unwind$kvz_itransformskip
xdata	SEGMENT
$unwind$quantize_tr_residual DD 051001H
	DD	0160110H
	DD	07007e009H
	DD	06006H
$chain$0$quantize_tr_residual DD 020821H
	DD	0153408H
	DD	imagerel quantize_tr_residual
	DD	imagerel quantize_tr_residual+105
	DD	imagerel $unwind$quantize_tr_residual
$chain$4$quantize_tr_residual DD 082f21H
	DD	011f42fH
	DD	012d427H
	DD	013c418H
	DD	0145408H
	DD	imagerel quantize_tr_residual+105
	DD	imagerel quantize_tr_residual+128
	DD	imagerel $chain$0$quantize_tr_residual
$chain$5$quantize_tr_residual DD 021H
	DD	imagerel quantize_tr_residual+105
	DD	imagerel quantize_tr_residual+128
	DD	imagerel $chain$0$quantize_tr_residual
$chain$6$quantize_tr_residual DD 021H
	DD	imagerel quantize_tr_residual
	DD	imagerel quantize_tr_residual+105
	DD	imagerel $unwind$quantize_tr_residual
$chain$7$quantize_tr_residual DD 0a0021H
	DD	011f400H
	DD	012d400H
	DD	013c400H
	DD	0145400H
	DD	0153400H
	DD	imagerel quantize_tr_residual
	DD	imagerel quantize_tr_residual+105
	DD	imagerel $unwind$quantize_tr_residual
$unwind$kvz_quantize_residual_trskip DD 0d1f01H
	DD	024641fH
	DD	023541fH
	DD	022341fH
	DD	01c011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
$unwind$rdpcm DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
$unwind$bypass_transquant DD 040a01H
	DD	0f006320aH
	DD	05002d004H
$chain$4$bypass_transquant DD 0a2b21H
	DD	02e42bH
	DD	03c41bH
	DD	0a7414H
	DD	09640aH
	DD	083405H
	DD	imagerel bypass_transquant
	DD	imagerel bypass_transquant+32
	DD	imagerel $unwind$bypass_transquant
$chain$5$bypass_transquant DD 021H
	DD	imagerel bypass_transquant
	DD	imagerel bypass_transquant+32
	DD	imagerel $unwind$bypass_transquant
$unwind$xy_to_zorder DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$copy_coeffs DD 010401H
	DD	04204H
$unwind$kvz_quantize_lcu_residual DD 092301H
	DD	0f01fc223H
	DD	0d01be01dH
	DD	07017c019H
	DD	050156016H
	DD	03014H
$unwind$kvz_transformskip DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$kvz_itransformskip DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
	ORG $+6
$SG4294943545 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '4', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, '6'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '3', 00H, '2', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG4294943546 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG4294943547 DB 'y', 00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'y', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294943548 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'u', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG4294943549 DB 'x', 00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+8
$SG4294943550 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'u', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+14
$SG4294943551 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+8
$SG4294943552 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'u', 00H, '.', 00H, 'h', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
encoder$ = 8
block$ = 16
coeff$ = 24
block_size$ = 32
kvz_itransformskip PROC

; 183  : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 184  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	rax, r9b
	mov	rsi, rdx
	lea	rdx, OFFSET FLAT:kvz_g_convert_to_bit

; 185  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 186  :   int32_t  j,k;
; 187  :   int32_t offset;
; 188  :   offset = (1 << (shift -1)); // For rounding
; 189  :   for ( j = 0; j < block_size; j++ ) {

	movsx	edi, r9b
	mov	r11d, 13
	mov	ebx, 1
	mov	rbp, r8
	movsx	r10d, BYTE PTR [rax+rdx]
	movsx	eax, BYTE PTR [rcx+2592]
	sub	r11d, r10d
	sub	r11d, eax
	xor	r10d, r10d
	lea	ecx, DWORD PTR [r11-1]
	shl	ebx, cl
	test	r9b, r9b
	jle	SHORT $LN3@kvz_itrans
	npad	12
$LL4@kvz_itrans:

; 190  :     for(k = 0; k < block_size; k ++) {

	mov	eax, edi
	mov	r8d, edi
	imul	eax, r10d
	mov	r9, rbp
	sub	r9, rsi
	cdqe
	lea	rax, QWORD PTR [rsi+rax*2]
	npad	11
$LL7@kvz_itrans:

; 191  :       block[j * block_size + k] =  (coeff[j * block_size + k] + offset) >> shift;

	movsx	edx, WORD PTR [r9+rax]
	lea	rax, QWORD PTR [rax+2]
	add	edx, ebx
	mov	ecx, r11d
	sar	edx, cl
	mov	WORD PTR [rax-2], dx
	sub	r8, 1
	jne	SHORT $LL7@kvz_itrans

; 185  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 186  :   int32_t  j,k;
; 187  :   int32_t offset;
; 188  :   offset = (1 << (shift -1)); // For rounding
; 189  :   for ( j = 0; j < block_size; j++ ) {

	inc	r10d
	cmp	r10d, edi
	jl	SHORT $LL4@kvz_itrans
$LN3@kvz_itrans:

; 192  :     }
; 193  :   }
; 194  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
kvz_itransformskip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
encoder$ = 8
block$ = 16
coeff$ = 24
block_size$ = 32
color$ = 40
type$ = 48
kvz_transform2d PROC
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 80   :   switch (width) {

	cmp	r9b, 4
	je	SHORT $LN6@kvz_transf
	cmp	r9b, 8
	je	SHORT $LN8@kvz_transf
	cmp	r9b, 16
	je	SHORT $LN10@kvz_transf
	mov	rax, QWORD PTR kvz_dct_32x32
	xor	r10d, r10d
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	movzx	ecx, BYTE PTR [rcx+2592]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 80   :   switch (width) {

	cmp	r9b, 32					; 00000020H
	cmovne	rax, r10
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	rex_jmp	rax
$LN10@kvz_transf:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 90   :     return kvz_dct_16x16;

	mov	rax, QWORD PTR kvz_dct_16x16
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	movzx	ecx, BYTE PTR [rcx+2592]
	rex_jmp	rax
$LN8@kvz_transf:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 88   :     return kvz_dct_8x8;

	mov	rax, QWORD PTR kvz_dct_8x8
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	movzx	ecx, BYTE PTR [rcx+2592]
	rex_jmp	rax
$LN6@kvz_transf:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 82   :     if (color == COLOR_Y && type == CU_INTRA) {

	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN7@kvz_transf
	cmp	DWORD PTR type$[rsp], 1

; 83   :       return kvz_fast_forward_dst_4x4;

	mov	rax, QWORD PTR kvz_fast_forward_dst_4x4
	je	SHORT $LN3@kvz_transf
$LN7@kvz_transf:

; 84   :     } else {
; 85   :       return kvz_dct_4x4;

	mov	rax, QWORD PTR kvz_dct_4x4
$LN3@kvz_transf:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	movzx	ecx, BYTE PTR [rcx+2592]
	rex_jmp	rax
kvz_transform2d ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
encoder$ = 8
block$ = 16
coeff$ = 24
block_size$ = 32
kvz_transformskip PROC

; 164  : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi

; 165  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	rax, r9b
	mov	rsi, rdx
	lea	rdx, OFFSET FLAT:kvz_g_convert_to_bit

; 166  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 167  :   int32_t  j,k;
; 168  :   for (j = 0; j < block_size; j++) {

	movsx	ebx, r9b
	mov	r11d, 13
	mov	rdi, r8
	movsx	r10d, BYTE PTR [rax+rdx]
	movsx	eax, BYTE PTR [rcx+2592]
	sub	r11d, r10d
	sub	r11d, eax
	xor	r10d, r10d
	test	r9b, r9b
	jle	SHORT $LN3@kvz_transf
	npad	12
$LL4@kvz_transf:

; 169  :     for(k = 0; k < block_size; k ++) {

	mov	eax, ebx
	mov	r8d, ebx
	imul	eax, r10d
	mov	r9, rsi
	sub	r9, rdi
	cdqe
	lea	rax, QWORD PTR [rdi+rax*2]
	npad	11
$LL7@kvz_transf:

; 170  :       // Casting back and forth to make UBSan not trigger due to left-shifting negatives
; 171  :       coeff[j * block_size + k] = (int16_t)((uint16_t)(block[j * block_size + k]) << shift);

	movzx	edx, WORD PTR [r9+rax]
	lea	rax, QWORD PTR [rax+2]
	mov	ecx, r11d
	shl	dx, cl
	mov	WORD PTR [rax-2], dx
	sub	r8, 1
	jne	SHORT $LL7@kvz_transf

; 166  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;
; 167  :   int32_t  j,k;
; 168  :   for (j = 0; j < block_size; j++) {

	inc	r10d
	cmp	r10d, ebx
	jl	SHORT $LL4@kvz_transf
$LN3@kvz_transf:

; 172  :     }
; 173  :   }
; 174  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
kvz_transformskip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
encoder$ = 8
block$ = 16
coeff$ = 24
block_size$ = 32
color$ = 40
type$ = 48
kvz_itransform2d PROC

; 219  : {

	mov	r10, r8
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 109  :   switch (width) {

	cmp	r9b, 4
	je	SHORT $LN6@kvz_itrans
	cmp	r9b, 8
	je	SHORT $LN8@kvz_itrans
	cmp	r9b, 16
	je	SHORT $LN10@kvz_itrans
	mov	rax, QWORD PTR kvz_idct_32x32
	xor	r8d, r8d
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	movzx	ecx, BYTE PTR [rcx+2592]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 109  :   switch (width) {

	cmp	r9b, 32					; 00000020H
	cmovne	rax, r8
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	mov	r8, rdx
	mov	rdx, r10
	rex_jmp	rax
$LN10@kvz_itrans:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 119  :     return kvz_idct_16x16;

	mov	rax, QWORD PTR kvz_idct_16x16
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	mov	r8, rdx
	movzx	ecx, BYTE PTR [rcx+2592]
	mov	rdx, r10
	rex_jmp	rax
$LN8@kvz_itrans:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 117  :     return kvz_idct_8x8;

	mov	rax, QWORD PTR kvz_idct_8x8
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	mov	r8, rdx
	movzx	ecx, BYTE PTR [rcx+2592]
	mov	rdx, r10
	rex_jmp	rax
$LN6@kvz_itrans:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 111  :     if (color == COLOR_Y && type == CU_INTRA) {

	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN7@kvz_itrans
	cmp	DWORD PTR type$[rsp], 1

; 112  :       return kvz_fast_inverse_dst_4x4;

	mov	rax, QWORD PTR kvz_fast_inverse_dst_4x4
	je	SHORT $LN3@kvz_itrans
$LN7@kvz_itrans:

; 113  :     } else {
; 114  :       return kvz_idct_4x4;

	mov	rax, QWORD PTR kvz_idct_4x4
$LN3@kvz_itrans:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	movzx	ecx, BYTE PTR [rcx+2592]
	mov	r8, rdx
	mov	rdx, r10
	rex_jmp	rax
kvz_itransform2d ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
type$ = 8
qp$ = 16
qp_offset$ = 24
kvz_get_scaled_qp PROC

; 142  : {

	movsx	r9d, r8b

; 143  :   int32_t qp_scaled = 0;
; 144  :   if(type == 0) {

	test	cl, cl
	jne	SHORT $LN2@kvz_get_sc

; 145  :     qp_scaled = qp + qp_offset;

	movsx	eax, dl
	add	eax, r9d

; 152  :     }
; 153  :   }
; 154  :   return qp_scaled;
; 155  : }

	ret	0
$LN2@kvz_get_sc:

; 146  :   } else {
; 147  :     qp_scaled = CLIP(-qp_offset, 57, qp);

	mov	r8d, 57					; 00000039H
	cmp	dl, 57					; 00000039H
	jg	SHORT $LN8@kvz_get_sc
	movsx	r8d, dl
$LN8@kvz_get_sc:
	mov	eax, r9d
	movsx	r10d, dl
	neg	eax
	mov	ecx, r9d
	cmp	eax, r8d
	jg	SHORT $LN10@kvz_get_sc
	cmp	dl, 57					; 00000039H
	jle	SHORT $LN9@kvz_get_sc
	mov	eax, 57					; 00000039H

; 149  :       qp_scaled = qp_scaled + qp_offset;
; 150  :     } else {
; 151  :       qp_scaled = kvz_g_chroma_scale[qp_scaled] + qp_offset;

	lea	rdx, OFFSET FLAT:kvz_g_chroma_scale
	movzx	eax, BYTE PTR [rax+rdx]

; 152  :     }
; 153  :   }
; 154  :   return qp_scaled;
; 155  : }

	add	eax, ecx
	ret	0
$LN9@kvz_get_sc:

; 146  :   } else {
; 147  :     qp_scaled = CLIP(-qp_offset, 57, qp);

	mov	eax, r10d
$LN10@kvz_get_sc:

; 148  :     if(qp_scaled < 0) {

	test	eax, eax
	js	SHORT $LN13@kvz_get_sc

; 149  :       qp_scaled = qp_scaled + qp_offset;
; 150  :     } else {
; 151  :       qp_scaled = kvz_g_chroma_scale[qp_scaled] + qp_offset;

	lea	rdx, OFFSET FLAT:kvz_g_chroma_scale
	movzx	eax, BYTE PTR [rax+rdx]
$LN13@kvz_get_sc:

; 152  :     }
; 153  :   }
; 154  :   return qp_scaled;
; 155  : }

	add	eax, ecx
	ret	0
kvz_get_scaled_qp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
lcu_px$$sroa$463$1$ = 80
state$ = 176
luma$ = 184
chroma$ = 192
x$ = 200
y$ = 208
lcu_px$$sroa$462$1$ = 216
depth$ = 216
cur_pu$ = 224
lcu$ = 232
early_skip$ = 240
kvz_quantize_lcu_residual PROC

; 451  : {

$LN184:
	mov	DWORD PTR [rsp+32], r9d
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H
	movzx	r12d, BYTE PTR depth$[rsp]
	mov	r14, rcx

; 452  :   const int32_t width = LCU_WIDTH >> depth;
; 453  :   const vector2d_t lcu_px  = { SUB_SCU(x), SUB_SCU(y) };

	mov	esi, DWORD PTR y$[rsp]
	mov	ecx, r12d

; 454  : 
; 455  :   if (cur_pu == NULL) {

	mov	r15, QWORD PTR cur_pu$[rsp]
	mov	ebp, 64					; 00000040H
	mov	rbx, QWORD PTR lcu$[rsp]
	mov	eax, esi
	and	eax, 63					; 0000003fH
	sar	ebp, cl
	mov	edi, r9d
	mov	DWORD PTR lcu_px$$sroa$463$1$[rsp], eax
	and	r9d, 63					; 0000003fH
	movzx	r10d, dl
	mov	DWORD PTR lcu_px$$sroa$462$1$[rsp], r9d
	test	r15, r15
	jne	SHORT $LN2@kvz_quanti

; 456  :     cur_pu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	shr	eax, 2
	imul	ecx, eax, 17
	mov	eax, r9d
	shr	eax, 2
	add	ecx, 18
	add	eax, ecx
	lea	r15, QWORD PTR [rax+1561]
	lea	r15, QWORD PTR [rax+r15*4]
	lea	r15, QWORD PTR [rbx+r15*4]
$LN2@kvz_quanti:

; 457  :   }
; 458  : 
; 459  :   // Tell clang-analyzer what is up. For some reason it can't figure out from
; 460  :   // asserting just depth.
; 461  :   assert(width ==  4 ||

	lea	eax, DWORD PTR [rbp-4]
	cmp	eax, 60					; 0000003cH
	ja	SHORT $LN180@kvz_quanti
	mov	rcx, 1152921504875286545		; 1000000010001011H
	bt	rcx, rax
	jb	SHORT $LN12@kvz_quanti
$LN180@kvz_quanti:
	mov	r8d, 465				; 000001d1H
	lea	rdx, OFFSET FLAT:$SG4294943546
	lea	rcx, OFFSET FLAT:$SG4294943545
	call	QWORD PTR __imp__wassert
	movzx	r10d, BYTE PTR luma$[rsp]
	movzx	r8d, BYTE PTR chroma$[rsp]
$LN12@kvz_quanti:

; 462  :          width ==  8 ||
; 463  :          width == 16 ||
; 464  :          width == 32 ||
; 465  :          width == 64);
; 466  : 
; 467  :   // Reset CBFs because CBFs might have been set
; 468  :   // for depth earlier
; 469  :   if (luma) {

	lea	rax, OFFSET FLAT:cbf_masks
	test	r10b, r10b
	je	SHORT $LN172@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	movzx	eax, WORD PTR [rax+r12*2]
	not	ax
	and	WORD PTR [r15+4], ax
	lea	rax, OFFSET FLAT:cbf_masks
$LN172@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 472  :   if (chroma) {

	test	r8b, r8b
	je	SHORT $LN179@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	movzx	eax, WORD PTR [rax+r12*2]
	movzx	ecx, ax
	shl	ax, 5
	shl	cx, 10
	not	ax
	not	cx
	and	cx, ax
	and	WORD PTR [r15+4], cx
$LN179@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 477  :   if (depth == 0 || cur_pu->tr_depth > depth) {

	test	r12b, r12b
	je	$LN7@kvz_quanti
	movzx	eax, BYTE PTR [r15+1]
	and	al, 7
	cmp	al, r12b
	ja	$LN7@kvz_quanti

; 497  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_Y);
; 498  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_U);
; 499  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_V);
; 500  :     }
; 501  : 
; 502  :   } else {
; 503  :     // Process a leaf TU.
; 504  :     if (luma) {

	movzx	ebp, BYTE PTR early_skip$[rsp]
	test	r10b, r10b
	je	SHORT $LN9@kvz_quanti

; 505  :       quantize_tr_residual(state, COLOR_Y, x, y, depth, cur_pu, lcu, early_skip);

	mov	BYTE PTR [rsp+56], bpl
	mov	r9d, esi
	mov	QWORD PTR [rsp+48], rbx
	mov	r8d, edi
	mov	QWORD PTR [rsp+40], r15
	xor	edx, edx
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], r12b
	call	quantize_tr_residual
	movzx	r8d, BYTE PTR chroma$[rsp]
$LN9@kvz_quanti:

; 506  :     }
; 507  :     if (chroma) {

	test	r8b, r8b
	je	$LN170@kvz_quanti

; 508  :       quantize_tr_residual(state, COLOR_U, x, y, depth, cur_pu, lcu, early_skip);

	mov	BYTE PTR [rsp+56], bpl
	mov	r9d, esi
	mov	QWORD PTR [rsp+48], rbx
	mov	r8d, edi
	mov	QWORD PTR [rsp+40], r15
	mov	edx, 1
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], r12b
	call	quantize_tr_residual

; 509  :       quantize_tr_residual(state, COLOR_V, x, y, depth, cur_pu, lcu, early_skip);

	mov	BYTE PTR [rsp+56], bpl
	mov	r9d, esi
	mov	QWORD PTR [rsp+48], rbx
	mov	r8d, edi
	mov	QWORD PTR [rsp+40], r15
	mov	edx, 2
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], r12b
	call	quantize_tr_residual
	jmp	$LN170@kvz_quanti
$LN7@kvz_quanti:

; 478  : 
; 479  :     // Split transform and increase depth
; 480  :     const int offset = width / 2;
; 481  :     const int32_t x2 = x + offset;
; 482  :     const int32_t y2 = y + offset;
; 483  : 
; 484  :     kvz_quantize_lcu_residual(state, luma, chroma, x,  y,  depth + 1, NULL, lcu, early_skip);

	movzx	ebx, BYTE PTR early_skip$[rsp]
	mov	eax, ebp
	mov	r9d, DWORD PTR x$[rsp]
	cdq
	mov	rcx, QWORD PTR state$[rsp]
	sub	eax, edx
	sar	eax, 1
	movzx	edx, r10b
	mov	BYTE PTR [rsp+64], bl
	mov	r14d, eax
	add	esi, eax
	lea	ebp, DWORD PTR [rax+rdi]
	mov	rax, QWORD PTR lcu$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	edi, DWORD PTR [r12+1]
	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR [rsp+48], 0
	mov	BYTE PTR [rsp+40], dil
	mov	DWORD PTR [rsp+32], eax
	call	kvz_quantize_lcu_residual

; 485  :     kvz_quantize_lcu_residual(state, luma, chroma, x2, y,  depth + 1, NULL, lcu, early_skip);

	mov	rax, QWORD PTR lcu$[rsp]
	mov	r9d, ebp
	movzx	r8d, BYTE PTR chroma$[rsp]
	movzx	edx, BYTE PTR luma$[rsp]
	mov	rcx, QWORD PTR state$[rsp]
	mov	BYTE PTR [rsp+64], bl
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR y$[rsp]
	mov	QWORD PTR [rsp+48], 0
	mov	BYTE PTR [rsp+40], dil
	mov	DWORD PTR [rsp+32], eax
	call	kvz_quantize_lcu_residual

; 486  :     kvz_quantize_lcu_residual(state, luma, chroma, x,  y2, depth + 1, NULL, lcu, early_skip);

	mov	rax, QWORD PTR lcu$[rsp]
	mov	r9d, DWORD PTR x$[rsp]
	movzx	r8d, BYTE PTR chroma$[rsp]
	movzx	edx, BYTE PTR luma$[rsp]
	mov	rcx, QWORD PTR state$[rsp]
	mov	BYTE PTR [rsp+64], bl
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	BYTE PTR [rsp+40], dil
	mov	DWORD PTR [rsp+32], esi
	call	kvz_quantize_lcu_residual

; 487  :     kvz_quantize_lcu_residual(state, luma, chroma, x2, y2, depth + 1, NULL, lcu, early_skip);

	movzx	r8d, BYTE PTR chroma$[rsp]
	mov	r9d, ebp
	movzx	edx, BYTE PTR luma$[rsp]
	mov	rcx, QWORD PTR state$[rsp]
	mov	BYTE PTR [rsp+64], bl
	mov	rbx, QWORD PTR lcu$[rsp]
	mov	QWORD PTR [rsp+56], rbx
	mov	QWORD PTR [rsp+48], 0
	mov	BYTE PTR [rsp+40], dil
	mov	DWORD PTR [rsp+32], esi
	call	kvz_quantize_lcu_residual

; 488  : 
; 489  :     // Propagate coded block flags from child CUs to parent CU.
; 490  :     uint16_t child_cbfs[3] = {

	mov	r8d, DWORD PTR lcu_px$$sroa$462$1$[rsp]
	mov	r9d, DWORD PTR lcu_px$$sroa$463$1$[rsp]
	mov	eax, r9d
	shr	eax, 2
	imul	eax, eax, 17
	lea	edx, DWORD PTR [r8+r14]
	shr	r8d, 2
	sar	edx, 2
	add	eax, edx
	cdqe
	add	rax, 1267				; 000004f3H
	lea	rax, QWORD PTR [rax+rax*4]
	movzx	edi, WORD PTR [rbx+rax*4]
	lea	eax, DWORD PTR [r9+r14]
	sar	eax, 2
	imul	ecx, eax, 17
	lea	eax, DWORD PTR [rcx+r8]
	cdqe
	add	rax, 1267				; 000004f3H
	lea	rax, QWORD PTR [rax+rax*4]
	movzx	r11d, WORD PTR [rbx+rax*4]
	lea	eax, DWORD PTR [rdx+rcx]
	movsxd	rcx, eax
	add	rcx, 1267				; 000004f3H

; 491  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y         )->cbf,
; 492  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x,          lcu_px.y + offset)->cbf,
; 493  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y + offset)->cbf,
; 494  :     };
; 495  : 
; 496  :     if (depth <= MAX_DEPTH) {

	cmp	r12b, 3
	lea	rax, QWORD PTR [rcx+rcx*4]
	movzx	r10d, WORD PTR [rbx+rax*4]
	ja	$LN170@kvz_quanti
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	lea	rcx, OFFSET FLAT:cbf_masks
	mov	edx, 16
	movzx	r8d, WORD PTR [rcx+r12*2+2]
	test	r8w, di

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN136@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	test	r8w, r11w

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN136@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	test	r8w, r10w

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	je	SHORT $LN174@kvz_quanti
$LN136@kvz_quanti:

; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	eax, edx
	mov	ecx, r12d
	sar	eax, cl
	or	WORD PTR [r15+4], ax
$LN174@kvz_quanti:

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	mov	eax, r8d
	shl	eax, 5
	test	edi, eax

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN149@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	mov	r9d, r11d
	test	r11d, eax

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN149@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	mov	ecx, r10d
	test	r10d, eax

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	je	SHORT $LN175@kvz_quanti
$LN149@kvz_quanti:

; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	ecx, r12d
	mov	eax, edx
	sar	eax, cl
	mov	r9d, r11d
	shl	ax, 5
	mov	ecx, r10d
	or	WORD PTR [r15+4], ax
$LN175@kvz_quanti:

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	shl	r8d, 10
	test	edi, r8d

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN162@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	test	r9d, r8d

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN162@kvz_quanti

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	test	r8d, ecx

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	je	SHORT $LN170@kvz_quanti
$LN162@kvz_quanti:

; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	ecx, r12d
	sar	edx, cl
	shl	dx, 10
	or	WORD PTR [r15+4], dx
$LN170@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 512  : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_quantize_lcu_residual ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
src$ = 48
dest$ = 56
width$ = 64
copy_coeffs PROC

; 369  : {

	sub	rsp, 40					; 00000028H
	mov	rax, rdx

; 370  :   memcpy(dest, src, width * width * sizeof(coeff_t));

	mov	rdx, rcx
	imul	r8, r8
	mov	rcx, rax
	add	r8, r8
	call	memcpy

; 371  : }

	add	rsp, 40					; 00000028H
	ret	0
copy_coeffs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
width$ = 48
x$ = 56
y$ = 64
xy_to_zorder PROC

; 386  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	edi, edx
	mov	esi, ecx

; 387  :   assert(width % 4 == 0 && width >= 4 && width <= 64);

	test	cl, 3
	jne	SHORT $LN10@xy_to_zord
	lea	eax, DWORD PTR [rcx-4]
	cmp	eax, 60					; 0000003cH
	jbe	SHORT $LN11@xy_to_zord
$LN10@xy_to_zord:
	mov	r8d, 387				; 00000183H
	lea	rdx, OFFSET FLAT:$SG4294943552
	lea	rcx, OFFSET FLAT:$SG4294943551
	call	QWORD PTR __imp__wassert
$LN11@xy_to_zord:

; 388  :   assert(x % 4 == 0 && x < width);

	test	dil, 3
	jne	SHORT $LN12@xy_to_zord
	cmp	edi, esi
	jb	SHORT $LN13@xy_to_zord
$LN12@xy_to_zord:
	mov	r8d, 388				; 00000184H
	lea	rdx, OFFSET FLAT:$SG4294943550
	lea	rcx, OFFSET FLAT:$SG4294943549
	call	QWORD PTR __imp__wassert
$LN13@xy_to_zord:

; 389  :   assert(y % 4 == 0 && y < width);

	test	bl, 3
	jne	SHORT $LN14@xy_to_zord
	cmp	ebx, esi
	jb	SHORT $LN15@xy_to_zord
$LN14@xy_to_zord:
	mov	r8d, 389				; 00000185H
	lea	rdx, OFFSET FLAT:$SG4294943548
	lea	rcx, OFFSET FLAT:$SG4294943547
	call	QWORD PTR __imp__wassert
$LN15@xy_to_zord:

; 390  : 
; 391  :   unsigned result = 0;

	xor	edx, edx

; 392  : 
; 393  :   switch (width) {

	cmp	esi, 8
	je	SHORT $LN7@xy_to_zord
	cmp	esi, 16
	je	SHORT $LN6@xy_to_zord
	cmp	esi, 32					; 00000020H
	je	SHORT $LN5@xy_to_zord
	cmp	esi, 64					; 00000040H
	jne	SHORT $LN17@xy_to_zord

; 394  :     case 64:
; 395  :       result += x / 32 * (32*32);
; 396  :       result += y / 32 * (64*32);

	mov	ecx, ebx
	mov	eax, edi
	shr	ecx, 5

; 397  :       x %= 32;

	and	edi, 31
	shr	eax, 5
	lea	edx, DWORD PTR [rax+rcx*2]
	shl	edx, 10

; 398  :       y %= 32;

	and	ebx, 31
$LN5@xy_to_zord:

; 399  :       // fallthrough
; 400  :     case 32:
; 401  :       result += x / 16 * (16*16);
; 402  :       result += y / 16 * (32*16);

	mov	ecx, ebx
	mov	eax, edi
	shr	ecx, 4

; 403  :       x %= 16;

	and	edi, 15
	shr	eax, 4
	lea	ecx, DWORD PTR [rax+rcx*2]
	shl	ecx, 8
	add	edx, ecx

; 404  :       y %= 16;

	and	ebx, 15
$LN6@xy_to_zord:

; 405  :       // fallthrough
; 406  :     case 16:
; 407  :       result += x / 8 * ( 8*8);
; 408  :       result += y / 8 * (16*8);

	mov	ecx, ebx
	mov	eax, edi
	shr	ecx, 3

; 409  :       x %= 8;

	and	edi, 7
	shr	eax, 3
	lea	ecx, DWORD PTR [rax+rcx*2]
	shl	ecx, 6
	add	edx, ecx

; 410  :       y %= 8;

	and	ebx, 7
$LN7@xy_to_zord:

; 411  :       // fallthrough
; 412  :     case 8:
; 413  :       result += x / 4 * (4*4);
; 414  :       result += y / 4 * (8*4);

	shr	ebx, 2
	shr	edi, 2
	lea	eax, DWORD PTR [rdi+rbx*2]
	shl	eax, 4
	add	eax, edx

; 415  :       // fallthrough
; 416  :     case 4:
; 417  :       break;
; 418  :   }
; 419  : 
; 420  :   return result;
; 421  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN17@xy_to_zord:
	mov	rbx, QWORD PTR [rsp+48]
	mov	eax, edx
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
xy_to_zorder ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
cbf$ = 8
depth$ = 16
plane$ = 24
cbf_is_set PROC

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movsxd	rax, edx
	movzx	r9d, cx
	lea	rcx, OFFSET FLAT:cbf_masks
	movzx	edx, WORD PTR [rcx+rax*2]
	lea	ecx, DWORD PTR [r8+r8*4]
	shl	edx, cl
	mov	eax, 0
	test	edx, r9d
	setne	al

; 519  : }

	ret	0
cbf_is_set ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
cbf$ = 8
depth$ = 16
plane$ = 24
cbf_set	PROC

; 535  : {

	mov	r9, rcx

; 536  :   // Return value of the bit corresponding to the level.
; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	eax, 16
	mov	ecx, edx
	sar	eax, cl
	lea	ecx, DWORD PTR [r8+r8*4]
	shl	ax, cl
	or	WORD PTR [r9], ax

; 538  : }

	ret	0
cbf_set	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
cbf$ = 8
child_cbfs$ = 16
depth$ = 24
plane$ = 32
cbf_set_conditionally PROC

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	lea	r11d, DWORD PTR [r9+r9*4]
	movsxd	rax, r8d

; 545  : {

	mov	r10, rcx

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	lea	rcx, OFFSET FLAT:cbf_masks+2
	movzx	r9d, WORD PTR [rcx+rax*2]
	mov	ecx, r11d
	movzx	eax, WORD PTR [rdx]
	shl	r9d, cl
	test	eax, r9d

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN4@cbf_set_co

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR [rdx+2]
	test	eax, r9d

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	jne	SHORT $LN4@cbf_set_co

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR [rdx+4]
	test	eax, r9d

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	je	SHORT $LN12@cbf_set_co
$LN4@cbf_set_co:

; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	ecx, r8d
	mov	eax, 16
	sar	eax, cl
	mov	ecx, r11d
	shl	ax, cl
	or	WORD PTR [r10], ax
$LN12@cbf_set_co:

; 547  :                        cbf_is_set(child_cbfs[1], depth + 1, plane) ||
; 548  :                        cbf_is_set(child_cbfs[2], depth + 1, plane);
; 549  :   if (child_cbf_set) {
; 550  :     cbf_set(cbf, depth, plane);
; 551  :   }
; 552  : }

	ret	0
cbf_set_conditionally ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
_TEXT	SEGMENT
cbf$ = 8
depth$ = 16
plane$ = 24
cbf_clear PROC

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	movsxd	rax, edx
	mov	r9, rcx
	lea	rdx, OFFSET FLAT:cbf_masks
	lea	ecx, DWORD PTR [r8+r8*4]
	movzx	edx, WORD PTR [rdx+rax*2]
	shl	dx, cl
	not	dx
	and	WORD PTR [r9], dx

; 560  : }

	ret	0
cbf_clear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
tv480 = 0
width$ = 64
in_stride$ = 72
out_stride$ = 80
ref_in$ = 88
pred_in$ = 96
rec_out$ = 104
coeff_out$ = 112
bypass_transquant PROC

; 92   : {

	push	rbp
	push	r13
	push	r15
	sub	rsp, 32					; 00000020H

; 93   :   bool nonzero_coeffs = false;

	xor	bpl, bpl
	mov	r15, r9
	mov	r13d, edx

; 94   : 
; 95   :   for (int y = 0; y < width; ++y) {

	test	ecx, ecx
	jle	$LN17@bypass_tra

; 93   :   bool nonzero_coeffs = false;

	mov	r11, QWORD PTR rec_out$[rsp]
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+72], rsi
	mov	rsi, QWORD PTR coeff_out$[rsp]
	mov	QWORD PTR [rsp+80], rdi
	xor	edi, edi
	mov	QWORD PTR [rsp+24], r12
	mov	r12, QWORD PTR pred_in$[rsp]
	movsxd	rbx, ecx
	movsxd	rax, r8d
	mov	QWORD PTR [rsp+16], r14
	mov	QWORD PTR tv480[rsp], rax
	lea	rdx, QWORD PTR [rbx+rbx]
	mov	r14d, ecx
$LL4@bypass_tra:

; 96   :     for (int x = 0; x < width; ++x) {

	test	rbx, rbx
	je	SHORT $LN2@bypass_tra

; 97   :       int32_t in_idx    = x + y * in_stride;
; 98   :       int32_t out_idx   = x + y * out_stride;

	xor	ecx, ecx
	mov	r9d, edi
	mov	r10, rsi
	npad	13
$LL7@bypass_tra:

; 99   :       int32_t coeff_idx = x + y * width;
; 100  : 
; 101  :       // The residual must be computed before writing to rec_out because
; 102  :       // pred_in and rec_out may point to the same array.
; 103  :       coeff_t coeff        = (coeff_t)(ref_in[in_idx] - pred_in[in_idx]);

	movsxd	rax, r9d
	lea	r10, QWORD PTR [r10+2]
	movzx	edx, BYTE PTR [rax+r12]
	lea	r8, QWORD PTR [rax+r15]
	movzx	eax, BYTE PTR [rax+r15]
	sub	ax, dx

; 104  :       coeff_out[coeff_idx] = coeff;
; 105  :       rec_out[out_idx]     = ref_in[in_idx];
; 106  : 
; 107  :       nonzero_coeffs |= (coeff != 0);

	mov	edx, 0
	mov	WORD PTR [r10-2], ax
	movzx	eax, BYTE PTR [r8]
	setne	dl
	mov	BYTE PTR [r11+rcx], al
	movzx	eax, bpl
	or	edx, eax
	setne	bpl
	inc	r9d
	inc	rcx
	cmp	rcx, rbx
	jl	SHORT $LL7@bypass_tra
	mov	rax, QWORD PTR tv480[rsp]
	lea	rdx, QWORD PTR [rbx+rbx]
$LN2@bypass_tra:

; 94   : 
; 95   :   for (int y = 0; y < width; ++y) {

	add	edi, r13d
	add	rsi, rdx
	add	r11, rax
	sub	r14, 1
	jne	SHORT $LL4@bypass_tra

; 108  :     }
; 109  :   }
; 110  : 
; 111  :   return nonzero_coeffs;

	mov	r14, QWORD PTR [rsp+16]
	mov	r12, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
$LN17@bypass_tra:

; 112  : }

	movzx	eax, bpl
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r13
	pop	rbp
	ret	0
bypass_transquant ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
width$ = 8
dir$ = 16
coeff$ = 24
rdpcm	PROC

; 124  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 125  :   const int offset = (dir == RDPCM_HOR) ? 1 : width;

	mov	eax, 1
	mov	ebp, ecx
	cmp	edx, eax
	mov	edi, ecx
	mov	rsi, r8
	cmove	ebp, eax

; 126  :   const int min_x  = (dir == RDPCM_HOR) ? 1 : 0;

	xor	ecx, ecx
	cmp	edx, eax
	mov	ebx, ecx

; 127  :   const int min_y  = (dir == RDPCM_HOR) ? 0 : 1;
; 128  : 
; 129  :   for (int y = width - 1; y >= min_y; y--) {

	lea	r10d, DWORD PTR [rdi-1]
	setne	cl
	sete	bl
	cmp	r10d, ecx
	jl	SHORT $LN3@rdpcm

; 125  :   const int offset = (dir == RDPCM_HOR) ? 1 : width;

	mov	r9d, r10d
	mov	r11d, r10d
	imul	r9d, edi
	sub	r11d, ecx
	inc	r11d
	npad	6
$LL4@rdpcm:

; 130  :     for (int x = width - 1; x >= min_x; x--) {

	cmp	r10d, ebx
	jl	SHORT $LN2@rdpcm
	lea	eax, DWORD PTR [r9+r10]
	mov	r8d, r10d
	movsxd	rcx, eax
	sub	r8d, ebx
	lea	rax, QWORD PTR [rsi+rcx*2]
	mov	ecx, r9d
	sub	ecx, ebp
	add	ecx, r10d
	movsxd	rcx, ecx
	inc	r8d
	lea	rdx, QWORD PTR [rsi+rcx*2]
	npad	8
$LL7@rdpcm:

; 131  :       const int index = x + y * width;
; 132  :       coeff[index] -= coeff[index - offset];

	movzx	ecx, WORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx-2]
	sub	WORD PTR [rax], cx
	lea	rax, QWORD PTR [rax-2]
	sub	r8, 1
	jne	SHORT $LL7@rdpcm
$LN2@rdpcm:

; 127  :   const int min_y  = (dir == RDPCM_HOR) ? 0 : 1;
; 128  : 
; 129  :   for (int y = width - 1; y >= min_y; y--) {

	sub	r9d, edi
	sub	r11, 1
	jne	SHORT $LL4@rdpcm
$LN3@rdpcm:

; 133  :     }
; 134  :   }
; 135  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
rdpcm	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
noskip$ = 112
skip$ = 168
state$ = 272
cur_cu$ = 280
width$ = 288
color$ = 296
scan_order$ = 304
trskip_out$ = 312
in_stride$ = 320
out_stride$ = 328
ref_in$ = 336
pred_in$ = 344
rec_out$ = 352
coeff_out$ = 360
kvz_quantize_residual_trskip PROC

; 249  : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 224				; 000000e0H

; 250  :   struct {
; 251  :     kvz_pixel rec[4*4];
; 252  :     coeff_t coeff[4*4];
; 253  :     uint32_t cost;
; 254  :     int has_coeffs;
; 255  :   } skip, noskip, *best;
; 256  : 
; 257  :   const int bit_cost = (int)(state->lambda + 0.5);

	movsd	xmm0, QWORD PTR [rcx+368]

; 258  :   
; 259  :   noskip.has_coeffs = kvz_quantize_residual(

	lea	rax, QWORD PTR noskip$[rsp+16]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	mov	rsi, QWORD PTR ref_in$[rsp]
	mov	ebp, r9d
	mov	ebx, DWORD PTR in_stride$[rsp]
	mov	r14, rdx
	mov	edi, DWORD PTR scan_order$[rsp]
	mov	r12, rcx
	mov	BYTE PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR noskip$[rsp]
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR pred_in$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rsi
	mov	DWORD PTR [rsp+56], 4
	movsxd	r13, r8d
	mov	DWORD PTR [rsp+48], ebx
	mov	r8d, r13d
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edi
	cvttsd2si r15d, xmm0
	call	QWORD PTR kvz_quantize_residual

; 260  :       state, cur_cu, width, color, scan_order,
; 261  :       0, in_stride, 4,
; 262  :       ref_in, pred_in, noskip.rec, noskip.coeff, false);
; 263  :   noskip.cost = kvz_pixels_calc_ssd(ref_in, noskip.rec, in_stride, 4, 4);

	mov	r9d, 4
	mov	DWORD PTR [rsp+32], 4
	mov	r8d, ebx
	mov	DWORD PTR noskip$[rsp+52], eax
	lea	rdx, QWORD PTR noskip$[rsp]
	mov	rcx, rsi
	call	QWORD PTR kvz_pixels_calc_ssd

; 264  :   noskip.cost += kvz_get_coeff_cost(state, noskip.coeff, 4, 0, scan_order) * bit_cost;

	xor	r9d, r9d
	mov	BYTE PTR [rsp+32], dil
	lea	rdx, QWORD PTR noskip$[rsp+16]
	mov	DWORD PTR noskip$[rsp+48], eax
	mov	rcx, r12
	lea	r8d, QWORD PTR [r9+4]
	call	kvz_get_coeff_cost

; 265  : 
; 266  :   skip.has_coeffs = kvz_quantize_residual(

	mov	BYTE PTR [rsp+96], 0
	mov	r9d, ebp
	imul	eax, r15d
	mov	r8d, r13d
	mov	rdx, r14
	mov	rcx, r12
	add	DWORD PTR noskip$[rsp+48], eax
	lea	rax, QWORD PTR skip$[rsp+16]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR skip$[rsp]
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR pred_in$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], rsi
	mov	DWORD PTR [rsp+56], 4
	mov	DWORD PTR [rsp+48], ebx
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], edi
	call	QWORD PTR kvz_quantize_residual

; 267  :     state, cur_cu, width, color, scan_order,
; 268  :     1, in_stride, 4,
; 269  :     ref_in, pred_in, skip.rec, skip.coeff, false);
; 270  :   skip.cost = kvz_pixels_calc_ssd(ref_in, skip.rec, in_stride, 4, 4);

	mov	r9d, 4
	mov	DWORD PTR [rsp+32], 4
	mov	r8d, ebx
	mov	DWORD PTR skip$[rsp+52], eax
	lea	rdx, QWORD PTR skip$[rsp]
	mov	rcx, rsi
	call	QWORD PTR kvz_pixels_calc_ssd

; 271  :   skip.cost += kvz_get_coeff_cost(state, skip.coeff, 4, 0, scan_order) * bit_cost;

	xor	r9d, r9d
	mov	BYTE PTR [rsp+32], dil
	lea	rdx, QWORD PTR skip$[rsp+16]
	mov	DWORD PTR skip$[rsp+48], eax
	mov	rcx, r12
	lea	r8d, QWORD PTR [r9+4]
	call	kvz_get_coeff_cost
	mov	ecx, DWORD PTR skip$[rsp+48]
	imul	eax, r15d
	add	ecx, eax
	mov	DWORD PTR skip$[rsp+48], ecx
	cmp	DWORD PTR noskip$[rsp+48], ecx

; 272  : 
; 273  :   if (noskip.cost <= skip.cost) {

	ja	SHORT $LN2@kvz_quanti

; 274  :     *trskip_out = 0;
; 275  :     best = &noskip;

	lea	rbx, QWORD PTR noskip$[rsp]
	xor	cl, cl

; 276  :   } else {

	jmp	SHORT $LN3@kvz_quanti
$LN2@kvz_quanti:

; 277  :     *trskip_out = 1;
; 278  :     best = &skip;

	lea	rbx, QWORD PTR skip$[rsp]
	mov	cl, 1
$LN3@kvz_quanti:

; 279  :   }
; 280  : 
; 281  :   if (best->has_coeffs || rec_out != pred_in) {

	mov	rax, QWORD PTR trskip_out$[rsp]
	mov	rdx, QWORD PTR rec_out$[rsp]
	mov	BYTE PTR [rax], cl
	cmp	DWORD PTR [rbx+52], 0
	jne	SHORT $LN5@kvz_quanti
	cmp	rdx, QWORD PTR pred_in$[rsp]
	je	SHORT $LN9@kvz_quanti
$LN5@kvz_quanti:

; 282  :     // If there is no residual and reconstruction is already in rec_out, 
; 283  :     // we can skip this.
; 284  :     kvz_pixels_blit(best->rec, rec_out, width, width, 4, out_stride);

	mov	eax, DWORD PTR out_stride$[rsp]
	mov	r9d, r13d
	mov	DWORD PTR [rsp+40], eax
	mov	r8d, r13d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 4
	call	kvz_pixels_blit
	mov	edi, DWORD PTR [rbx+52]
	jmp	SHORT $LN4@kvz_quanti
$LN9@kvz_quanti:

; 279  :   }
; 280  : 
; 281  :   if (best->has_coeffs || rec_out != pred_in) {

	xor	edi, edi
$LN4@kvz_quanti:
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 370  :   memcpy(dest, src, width * width * sizeof(coeff_t));

	mov	rcx, QWORD PTR coeff_out$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 286  :   copy_coeffs(best->coeff, coeff_out, width);

	lea	rdx, QWORD PTR [rbx+16]
	mov	r8, r13
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 370  :   memcpy(dest, src, width * width * sizeof(coeff_t));

	imul	r8, r8
	add	r8, r8
	call	memcpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 289  : }

	lea	r11, QWORD PTR [rsp+224]
	mov	eax, edi
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_quantize_residual_trskip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
_TEXT	SEGMENT
tv2085 = 112
tv2000 = 116
cfg$1$ = 120
tv2004 = 208
state$ = 208
has_coeffs$1$ = 216
tv1966 = 216
tr_skip$1 = 216
color$ = 216
mode$1$ = 224
x$ = 224
tr_width$1$ = 232
y$ = 232
depth$ = 240
cur_pu$ = 248
lcu$ = 256
early_skip$ = 264
quantize_tr_residual PROC

; 304  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 176				; 000000b0H

; 305  :   const kvz_config *cfg    = &state->encoder_control->cfg;

	mov	rax, QWORD PTR [rcx]
	mov	esi, r8d

; 306  :   const int32_t shift      = color == COLOR_Y ? 0 : 1;
; 307  :   const vector2d_t lcu_px  = { SUB_SCU(x) >> shift, SUB_SCU(y) >> shift };
; 308  : 
; 309  :   // If luma is 4x4, do chroma for the 8x8 luma area when handling the top
; 310  :   // left PU because the coordinates are correct.
; 311  :   bool handled_elsewhere = color != COLOR_Y &&

	movzx	r8d, BYTE PTR depth$[rsp]
	and	esi, 63					; 0000003fH
	mov	QWORD PTR cfg$1$[rsp], rax
	mov	edi, r9d
	mov	eax, esi
	mov	r14d, edx
	shr	eax, 1
	test	edx, edx
	cmovne	esi, eax
	and	edi, 63					; 0000003fH
	mov	eax, edi
	shr	eax, 1
	test	edx, edx
	cmovne	edi, eax
	je	SHORT $LN20@quantize_t
	cmp	r8b, 3
	jbe	SHORT $LN20@quantize_t
	test	sil, 3
	jne	$LN76@quantize_t
	test	dil, 3
	jne	$LN76@quantize_t
$LN20@quantize_t:
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	mov	r9, QWORD PTR cur_pu$[rsp]
	lea	ecx, DWORD PTR [rdx+rdx*4]
	mov	QWORD PTR [rsp+168], rbx
	lea	rdx, OFFSET FLAT:cbf_masks
	movzx	edx, WORD PTR [rdx+r8*2]
	shl	dx, cl
	mov	QWORD PTR [rsp+160], rbp
	not	dx
	and	WORD PTR [r9+4], dx
	mov	QWORD PTR [rsp+152], r12
	mov	DWORD PTR tv2000[rsp], ecx
	mov	ecx, r8d
	mov	QWORD PTR [rsp+144], r13
	mov	QWORD PTR [rsp+136], r15
	mov	DWORD PTR tv2085[rsp], ecx
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 324  :   if (color == COLOR_Y) {

	test	r14d, r14d
	jne	SHORT $LN5@quantize_t

; 325  :     tr_width = LCU_WIDTH >> depth;
; 326  :   } else {
; 327  :     const int chroma_depth = (depth == MAX_PU_DEPTH ? depth - 1 : depth);
; 328  :     tr_width = LCU_WIDTH_C >> chroma_depth;
; 329  :   }
; 330  :   const int32_t lcu_width = LCU_WIDTH >> shift;
; 331  :   const int8_t mode =

	movzx	edx, BYTE PTR [r9+8]
	lea	r15d, QWORD PTR [r14+64]
	jmp	SHORT $LN113@quantize_t
$LN5@quantize_t:
	movzx	edx, BYTE PTR [r9+9]
	lea	eax, DWORD PTR [r8-1]
	cmp	r8b, 4
	mov	r15d, 32				; 00000020H
	cmovne	eax, ecx
	movzx	ecx, al
$LN113@quantize_t:

; 332  :     (color == COLOR_Y) ? cur_pu->intra.mode : cur_pu->intra.mode_chroma;
; 333  :   const coeff_scan_order_t scan_idx =

	movzx	eax, BYTE PTR [r9]
	mov	ebx, r15d
	sar	ebx, cl
	and	al, 3
	mov	DWORD PTR tr_width$1$[rsp], ebx
	mov	BYTE PTR mode$1$[rsp], dl
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1585 :   if (cu_type == CU_INTRA && depth >= 3) {

	cmp	al, 1
	jne	SHORT $LN35@quantize_t
	cmp	r8b, 3
	jb	SHORT $LN35@quantize_t

; 1586 :     if (intra_mode >= 6 && intra_mode <= 14) {

	lea	eax, DWORD PTR [rdx-6]
	cmp	al, 8
	ja	SHORT $LN33@quantize_t

; 1587 :       return SCAN_VER;

	mov	ebp, 2
	jmp	SHORT $LN31@quantize_t
$LN33@quantize_t:

; 1588 :     } else if (intra_mode >= 22 && intra_mode <= 30) {

	lea	eax, DWORD PTR [rdx-22]
	cmp	al, 8
	ja	SHORT $LN35@quantize_t

; 1589 :       return SCAN_HOR;

	mov	ebp, 1
	jmp	SHORT $LN31@quantize_t
$LN35@quantize_t:

; 1590 :     }
; 1591 :   }
; 1592 : 
; 1593 :   return SCAN_DIAG;

	xor	ebp, ebp
$LN31@quantize_t:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 335  :   const int offset = lcu_px.x + lcu_px.y * lcu_width;

	mov	eax, r15d
	imul	eax, edi
	add	eax, esi
	mov	DWORD PTR tv1966[rsp], eax
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 388  :   assert(x % 4 == 0 && x < width);

	test	sil, 3
	jne	SHORT $LN48@quantize_t
	cmp	esi, r15d
	jb	SHORT $LN49@quantize_t
$LN48@quantize_t:
	mov	r8d, 388				; 00000184H
	lea	rdx, OFFSET FLAT:$SG4294943550
	lea	rcx, OFFSET FLAT:$SG4294943549
	call	QWORD PTR __imp__wassert
$LN49@quantize_t:

; 389  :   assert(y % 4 == 0 && y < width);

	test	dil, 3
	jne	SHORT $LN50@quantize_t
	cmp	edi, r15d
	jb	SHORT $LN51@quantize_t
$LN50@quantize_t:
	mov	r8d, 389				; 00000185H
	lea	rdx, OFFSET FLAT:$SG4294943548
	lea	rcx, OFFSET FLAT:$SG4294943547
	call	QWORD PTR __imp__wassert
$LN51@quantize_t:

; 390  : 
; 391  :   unsigned result = 0;

	xor	edx, edx

; 392  : 
; 393  :   switch (width) {

	test	r14d, r14d
	jne	SHORT $LN41@quantize_t

; 394  :     case 64:
; 395  :       result += x / 32 * (32*32);
; 396  :       result += y / 32 * (64*32);

	mov	ecx, edi
	mov	eax, esi
	shr	ecx, 5

; 397  :       x %= 32;

	and	esi, 31
	shr	eax, 5
	lea	edx, DWORD PTR [rax+rcx*2]
	shl	edx, 10

; 398  :       y %= 32;

	and	edi, 31
$LN41@quantize_t:

; 399  :       // fallthrough
; 400  :     case 32:
; 401  :       result += x / 16 * (16*16);

	mov	eax, esi

; 402  :       result += y / 16 * (32*16);

	mov	ecx, edi
	shr	ecx, 4

; 403  :       x %= 16;

	and	esi, 15
	shr	eax, 4

; 404  :       y %= 16;

	and	edi, 15
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 342  :   const kvz_pixel *ref = NULL;

	xor	r13d, r13d

; 343  :   // Pointers to current location in arrays with quantized coefficients.
; 344  :   coeff_t *coeff = NULL;

	xor	r12d, r12d
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 402  :       result += y / 16 * (32*16);

	lea	ecx, DWORD PTR [rax+rcx*2]

; 405  :       // fallthrough
; 406  :     case 16:
; 407  :       result += x / 8 * ( 8*8);

	mov	eax, esi
	shl	ecx, 8

; 408  :       result += y / 8 * (16*8);
; 409  :       x %= 8;

	and	esi, 7
	add	edx, ecx

; 410  :       y %= 8;
; 411  :       // fallthrough
; 412  :     case 8:
; 413  :       result += x / 4 * (4*4);

	shr	esi, 2
	mov	ecx, edi
	shr	eax, 3
	shr	ecx, 3
	and	edi, 7

; 414  :       result += y / 4 * (8*4);

	shr	edi, 2
	lea	ecx, DWORD PTR [rax+rcx*2]
	shl	ecx, 6
	lea	r8d, DWORD PTR [rsi+rdi*2]
	add	edx, ecx
	shl	r8d, 4
	add	r8d, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 340  :   kvz_pixel *pred = NULL;

	xor	esi, esi

; 345  : 
; 346  :   switch (color) {

	mov	ecx, r14d
	test	r14d, r14d
	je	SHORT $LN7@quantize_t
	sub	ecx, 1
	je	SHORT $LN8@quantize_t
	cmp	ecx, 1
	jne	$LN2@quantize_t

; 357  :     case COLOR_V:
; 358  :       pred = &lcu->rec.v[offset];

	mov	rcx, QWORD PTR lcu$[rsp]
	mov	eax, DWORD PTR tv1966[rsp]

; 359  :       ref  = &lcu->ref.v[offset];
; 360  :       coeff = &lcu->coeff.v[z_index];

	mov	r12d, r8d
	lea	rsi, QWORD PTR [rcx+11660]
	lea	r13, QWORD PTR [rcx+5512]
	add	rsi, rax
	add	r13, rax
	add	r12, 11464				; 00002cc8H
	jmp	SHORT $LN114@quantize_t
$LN8@quantize_t:

; 351  :       break;
; 352  :     case COLOR_U:
; 353  :       pred = &lcu->rec.u[offset];

	mov	rcx, QWORD PTR lcu$[rsp]
	mov	eax, DWORD PTR tv1966[rsp]

; 354  :       ref  = &lcu->ref.u[offset];
; 355  :       coeff = &lcu->coeff.u[z_index];

	mov	r12d, r8d
	lea	rsi, QWORD PTR [rcx+10636]
	lea	r13, QWORD PTR [rcx+4488]
	add	rsi, rax
	add	r13, rax
	add	r12, 10440				; 000028c8H

; 356  :       break;

	jmp	SHORT $LN114@quantize_t
$LN7@quantize_t:

; 347  :     case COLOR_Y:
; 348  :       pred  = &lcu->rec.y[offset];

	mov	rcx, QWORD PTR lcu$[rsp]
	mov	eax, DWORD PTR tv1966[rsp]

; 349  :       ref   = &lcu->ref.y[offset];
; 350  :       coeff = &lcu->coeff.y[z_index];

	mov	r12d, r8d
	lea	rsi, QWORD PTR [rcx+6540]
	lea	r13, QWORD PTR [rcx+392]
	add	rsi, rax
	add	r13, rax
	add	r12, 6344				; 000018c8H
$LN114@quantize_t:

; 361  :       break;
; 362  :   }
; 363  : 
; 364  :   const bool can_use_trskip = tr_width == 4 &&

	lea	r12, QWORD PTR [rcx+r12*2]
$LN2@quantize_t:
	mov	rcx, QWORD PTR cfg$1$[rsp]
	cmp	ebx, 4
	jne	SHORT $LN27@quantize_t
	test	r14d, r14d
	jne	SHORT $LN27@quantize_t
	cmp	DWORD PTR [rcx+72], r14d
	je	SHORT $LN27@quantize_t
	mov	al, 1
	jmp	SHORT $LN28@quantize_t
$LN27@quantize_t:
	xor	al, al
$LN28@quantize_t:

; 365  :                               color == COLOR_Y &&
; 366  :                               cfg->trskip_enable;
; 367  : 
; 368  :   bool has_coeffs;
; 369  : 
; 370  :   if (cfg->lossless) {

	cmp	DWORD PTR [rcx+2392], 0
	je	$LN10@quantize_t

; 93   :   bool nonzero_coeffs = false;

	xor	bpl, bpl
	mov	BYTE PTR has_coeffs$1$[rsp], bpl

; 94   : 
; 95   :   for (int y = 0; y < width; ++y) {

	test	ebx, ebx
	jle	$LN54@quantize_t

; 93   :   bool nonzero_coeffs = false;

	movsxd	rdi, ebx
	xor	ebp, ebp
	mov	eax, ebx
	mov	r11, rsi
	mov	r14, r12
	mov	QWORD PTR tv2004[rsp], rax
	mov	ecx, r15d
	xor	bl, bl
	lea	rdx, QWORD PTR [rdi+rdi]
	npad	6
$LL55@quantize_t:

; 96   :     for (int x = 0; x < width; ++x) {

	test	rdi, rdi
	jle	SHORT $LN53@quantize_t

; 97   :       int32_t in_idx    = x + y * in_stride;
; 98   :       int32_t out_idx   = x + y * out_stride;

	xor	r8d, r8d
	mov	r9d, ebp
	mov	r10, r14
	npad	2
$LL58@quantize_t:

; 99   :       int32_t coeff_idx = x + y * width;
; 100  : 
; 101  :       // The residual must be computed before writing to rec_out because
; 102  :       // pred_in and rec_out may point to the same array.
; 103  :       coeff_t coeff        = (coeff_t)(ref_in[in_idx] - pred_in[in_idx]);

	movsxd	rax, r9d
	lea	r10, QWORD PTR [r10+2]
	movzx	ecx, BYTE PTR [rax+rsi]
	lea	rdx, QWORD PTR [rax+r13]
	movzx	eax, BYTE PTR [rax+r13]
	sub	ax, cx

; 104  :       coeff_out[coeff_idx] = coeff;
; 105  :       rec_out[out_idx]     = ref_in[in_idx];
; 106  : 
; 107  :       nonzero_coeffs |= (coeff != 0);

	mov	ecx, 0
	mov	WORD PTR [r10-2], ax
	movzx	eax, BYTE PTR [rdx]
	setne	cl
	mov	BYTE PTR [r11+r8], al
	movzx	eax, bl
	or	ecx, eax
	setne	bl
	inc	r9d
	inc	r8
	cmp	r8, rdi
	jl	SHORT $LL58@quantize_t
	mov	rax, QWORD PTR tv2004[rsp]
	lea	rdx, QWORD PTR [rdi+rdi]
	mov	BYTE PTR has_coeffs$1$[rsp], bl
	mov	ecx, r15d
$LN53@quantize_t:

; 94   : 
; 95   :   for (int y = 0; y < width; ++y) {

	add	r14, rdx
	add	ebp, r15d
	add	r11, rcx
	sub	rax, 1
	mov	QWORD PTR tv2004[rsp], rax
	jne	SHORT $LL55@quantize_t
	mov	ebx, DWORD PTR tr_width$1$[rsp]
	movzx	ebp, BYTE PTR has_coeffs$1$[rsp]
	mov	rcx, QWORD PTR cfg$1$[rsp]
$LN54@quantize_t:

; 371  :     has_coeffs = bypass_transquant(tr_width,
; 372  :                                    lcu_width, // in stride
; 373  :                                    lcu_width, // out stride
; 374  :                                    ref,
; 375  :                                    pred,
; 376  :                                    pred,
; 377  :                                    coeff);
; 378  :     if (cfg->implicit_rdpcm && cur_pu->type == CU_INTRA) {

	cmp	DWORD PTR [rcx+2420], 0
	je	SHORT $LN109@quantize_t
	mov	rax, QWORD PTR cur_pu$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	cmp	al, 1
	jne	SHORT $LN109@quantize_t

; 379  :       // implicit rdpcm for horizontal and vertical intra modes
; 380  :       if (mode == 10) {

	movzx	eax, BYTE PTR mode$1$[rsp]
	cmp	al, 10
	jne	$LN13@quantize_t

; 129  :   for (int y = width - 1; y >= min_y; y--) {

	lea	r11d, DWORD PTR [rbx-1]
	test	r11d, r11d
	js	SHORT $LN109@quantize_t
	mov	r10d, r11d

; 130  :     for (int x = width - 1; x >= min_x; x--) {

	mov	edi, r11d
	imul	r10d, ebx
	npad	4
$LL63@quantize_t:
	cmp	edi, 1
	jl	SHORT $LN61@quantize_t
	lea	eax, DWORD PTR [r10+rdi]
	mov	r9, rdi
	movsxd	rcx, eax
	movzx	edx, WORD PTR [r12+rcx*2]
	lea	r8, QWORD PTR [r12+rcx*2]
	npad	8
$LL66@quantize_t:

; 131  :       const int index = x + y * width;
; 132  :       coeff[index] -= coeff[index - offset];

	movzx	ecx, WORD PTR [r8-2]
	lea	r8, QWORD PTR [r8-2]
	sub	dx, cx
	mov	WORD PTR [r8+2], dx
	movzx	edx, cx
	sub	r9, 1
	jne	SHORT $LL66@quantize_t
$LN61@quantize_t:

; 108  :     }
; 109  :   }
; 110  : 
; 111  :   return nonzero_coeffs;
; 112  : }
; 113  : 
; 114  : /**
; 115  :  * Apply DPCM to residual.
; 116  :  *
; 117  :  * \param width   width of the block
; 118  :  * \param dir     RDPCM direction
; 119  :  * \param coeff   coefficients (residual) to filter
; 120  :  */
; 121  : static void rdpcm(const int width,
; 122  :                   const rdpcm_dir dir,
; 123  :                   coeff_t *coeff)
; 124  : {
; 125  :   const int offset = (dir == RDPCM_HOR) ? 1 : width;
; 126  :   const int min_x  = (dir == RDPCM_HOR) ? 1 : 0;
; 127  :   const int min_y  = (dir == RDPCM_HOR) ? 0 : 1;
; 128  : 
; 129  :   for (int y = width - 1; y >= min_y; y--) {

	sub	r10d, ebx
	sub	r11d, 1
	jns	SHORT $LL63@quantize_t
$LN109@quantize_t:

; 406  :                                        cur_pu,
; 407  :                                        tr_width,
; 408  :                                        color,
; 409  :                                        scan_idx,
; 410  :                                        false, // tr skip
; 411  :                                        lcu_width,
; 412  :                                        lcu_width,
; 413  :                                        ref,
; 414  :                                        pred,
; 415  :                                        pred,
; 416  :                                        coeff,
; 417  :                                        early_skip);
; 418  :   }
; 419  : 
; 420  :   if (has_coeffs) {

	mov	rbx, QWORD PTR cur_pu$[rsp]
$LN17@quantize_t:
	mov	r15, QWORD PTR [rsp+136]
	test	bpl, bpl
	mov	rbp, QWORD PTR [rsp+160]
	mov	r13, QWORD PTR [rsp+144]
	mov	r12, QWORD PTR [rsp+152]
	je	SHORT $LN112@quantize_t
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h

; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	ecx, DWORD PTR tv2085[rsp]
	mov	eax, 16
	sar	eax, cl
	mov	ecx, DWORD PTR tv2000[rsp]
	shl	ax, cl
	or	WORD PTR [rbx+4], ax
$LN112@quantize_t:
	mov	rbx, QWORD PTR [rsp+168]
$LN76@quantize_t:
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c

; 423  : }

	add	rsp, 176				; 000000b0H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN13@quantize_t:

; 381  :         rdpcm(tr_width, RDPCM_HOR, coeff);
; 382  :       } else if (mode == 26) {

	cmp	al, 26
	jne	SHORT $LN109@quantize_t

; 129  :   for (int y = width - 1; y >= min_y; y--) {

	lea	r11d, DWORD PTR [rbx-1]
	cmp	r11d, 1
	jl	SHORT $LN109@quantize_t
	mov	r9d, r11d
	mov	r10d, r11d
	imul	r9d, ebx
	neg	ebx
$LL71@quantize_t:

; 130  :     for (int x = width - 1; x >= min_x; x--) {

	mov	edx, r11d
	test	r11d, r11d
	js	SHORT $LN69@quantize_t
	lea	eax, DWORD PTR [r9+r11]
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r12+rcx*2]
	lea	ecx, DWORD PTR [r9+rbx]
	add	ecx, edx
	movsxd	rcx, ecx
	lea	r8, QWORD PTR [r12+rcx*2]
	npad	12
$LL74@quantize_t:

; 131  :       const int index = x + y * width;
; 132  :       coeff[index] -= coeff[index - offset];

	movzx	ecx, WORD PTR [r8]
	lea	r8, QWORD PTR [r8-2]
	sub	WORD PTR [rax], cx
	lea	rax, QWORD PTR [rax-2]
	sub	edx, 1
	jns	SHORT $LL74@quantize_t
$LN69@quantize_t:

; 108  :     }
; 109  :   }
; 110  : 
; 111  :   return nonzero_coeffs;
; 112  : }
; 113  : 
; 114  : /**
; 115  :  * Apply DPCM to residual.
; 116  :  *
; 117  :  * \param width   width of the block
; 118  :  * \param dir     RDPCM direction
; 119  :  * \param coeff   coefficients (residual) to filter
; 120  :  */
; 121  : static void rdpcm(const int width,
; 122  :                   const rdpcm_dir dir,
; 123  :                   coeff_t *coeff)
; 124  : {
; 125  :   const int offset = (dir == RDPCM_HOR) ? 1 : width;
; 126  :   const int min_x  = (dir == RDPCM_HOR) ? 1 : 0;
; 127  :   const int min_y  = (dir == RDPCM_HOR) ? 0 : 1;
; 128  : 
; 129  :   for (int y = width - 1; y >= min_y; y--) {

	add	r9d, ebx
	sub	r10, 1
	jne	SHORT $LL71@quantize_t

; 383  :         rdpcm(tr_width, RDPCM_VER, coeff);
; 384  :       }
; 385  :     }

	jmp	$LN109@quantize_t
$LN10@quantize_t:

; 386  : 
; 387  :   } else if (can_use_trskip) {

	mov	rcx, QWORD PTR state$[rsp]
	mov	r8d, ebx
	mov	rbx, QWORD PTR cur_pu$[rsp]
	mov	r9d, r14d
	mov	rdx, rbx
	test	al, al
	je	SHORT $LN16@quantize_t

; 388  :     int8_t tr_skip = 0;
; 389  : 
; 390  :     // Try quantization with trskip and use it if it's better.
; 391  :     has_coeffs = kvz_quantize_residual_trskip(state,

	mov	QWORD PTR [rsp+88], r12
	lea	rax, QWORD PTR tr_skip$1[rsp]
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+64], r13
	mov	DWORD PTR [rsp+56], r15d
	mov	DWORD PTR [rsp+48], r15d
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], ebp
	mov	BYTE PTR tr_skip$1[rsp], 0
	call	kvz_quantize_residual_trskip
	test	eax, eax

; 392  :                                               cur_pu,
; 393  :                                               tr_width,
; 394  :                                               color,
; 395  :                                               scan_idx,
; 396  :                                               &tr_skip,
; 397  :                                               lcu_width,
; 398  :                                               lcu_width,
; 399  :                                               ref,
; 400  :                                               pred,
; 401  :                                               pred,
; 402  :                                               coeff);
; 403  :     cur_pu->tr_skip = tr_skip;

	movzx	eax, BYTE PTR tr_skip$1[rsp]
	setne	bpl
	and	BYTE PTR [rbx+2], 254			; 000000feH
	and	al, 1
	or	BYTE PTR [rbx+2], al

; 404  :   } else {

	jmp	$LN17@quantize_t
$LN16@quantize_t:

; 405  :     has_coeffs = kvz_quantize_residual(state,

	movzx	eax, BYTE PTR early_skip$[rsp]
	mov	BYTE PTR [rsp+96], al
	mov	QWORD PTR [rsp+88], r12
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+64], r13
	mov	DWORD PTR [rsp+56], r15d
	mov	DWORD PTR [rsp+48], r15d
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], ebp
	call	QWORD PTR kvz_quantize_residual
	test	eax, eax
	setne	bpl

; 129  :   for (int y = width - 1; y >= min_y; y--) {

	jmp	$LN17@quantize_t
quantize_tr_residual ENDP
_TEXT	ENDS
END
