; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp___stdio_common_vsprintf:PROC
	ORG $+2
MIN_SMOOTHING_WINDOW DD 028H
MAX_LAMBDA DQ	040c3880000000000r		; 10000
MIN_LAMBDA DQ	03fb999999999999ar		; 0.1
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_set_lcu_lambda_and_qp
PUBLIC	kvz_set_picture_lambda_and_qp
PUBLIC	kvz_update_after_picture
PUBLIC	kvz_set_ctu_qp_lambda
PUBLIC	kvz_estimate_pic_lambda
PUBLIC	sprintf
PUBLIC	_vsprintf_l
PUBLIC	_vsnprintf_l
PUBLIC	kvz_free_rc_data
PUBLIC	kvz_get_rc_data
	ALIGN	8

bits_file DQ	01H DUP (?)
dist_file DQ	01H DUP (?)
data	DQ	01H DUP (?)
qp_file	DQ	01H DUP (?)
lambda_file DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$kvz_set_lcu_lambda_and_qp DD imagerel $LN99
	DD	imagerel $LN99+77
	DD	imagerel $unwind$kvz_set_lcu_lambda_and_qp
$pdata$2$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+77
	DD	imagerel $LN99+314
	DD	imagerel $chain$2$kvz_set_lcu_lambda_and_qp
$pdata$9$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+314
	DD	imagerel $LN99+711
	DD	imagerel $chain$9$kvz_set_lcu_lambda_and_qp
$pdata$10$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+711
	DD	imagerel $LN99+913
	DD	imagerel $chain$10$kvz_set_lcu_lambda_and_qp
$pdata$11$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+913
	DD	imagerel $LN99+1006
	DD	imagerel $chain$11$kvz_set_lcu_lambda_and_qp
$pdata$12$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+1006
	DD	imagerel $LN99+1128
	DD	imagerel $chain$12$kvz_set_lcu_lambda_and_qp
$pdata$13$kvz_set_lcu_lambda_and_qp DD imagerel $LN99+1128
	DD	imagerel $LN99+1373
	DD	imagerel $chain$13$kvz_set_lcu_lambda_and_qp
$pdata$kvz_set_picture_lambda_and_qp DD imagerel $LN52
	DD	imagerel $LN52+39
	DD	imagerel $unwind$kvz_set_picture_lambda_and_qp
$pdata$1$kvz_set_picture_lambda_and_qp DD imagerel $LN52+39
	DD	imagerel $LN52+237
	DD	imagerel $chain$1$kvz_set_picture_lambda_and_qp
$pdata$2$kvz_set_picture_lambda_and_qp DD imagerel $LN52+237
	DD	imagerel $LN52+282
	DD	imagerel $chain$2$kvz_set_picture_lambda_and_qp
$pdata$3$kvz_set_picture_lambda_and_qp DD imagerel $LN52+282
	DD	imagerel $LN52+488
	DD	imagerel $chain$3$kvz_set_picture_lambda_and_qp
$pdata$kvz_update_after_picture DD imagerel $LN269
	DD	imagerel $LN269+837
	DD	imagerel $unwind$kvz_update_after_picture
$pdata$6$kvz_update_after_picture DD imagerel $LN269+837
	DD	imagerel $LN269+2084
	DD	imagerel $chain$6$kvz_update_after_picture
$pdata$9$kvz_update_after_picture DD imagerel $LN269+2084
	DD	imagerel $LN269+2985
	DD	imagerel $chain$9$kvz_update_after_picture
$pdata$10$kvz_update_after_picture DD imagerel $LN269+2985
	DD	imagerel $LN269+3216
	DD	imagerel $chain$10$kvz_update_after_picture
$pdata$update_ck DD imagerel update_ck
	DD	imagerel update_ck+81
	DD	imagerel $unwind$update_ck
$pdata$0$update_ck DD imagerel update_ck+81
	DD	imagerel update_ck+86
	DD	imagerel $chain$0$update_ck
$pdata$1$update_ck DD imagerel update_ck+86
	DD	imagerel update_ck+232
	DD	imagerel $chain$1$update_ck
$pdata$2$update_ck DD imagerel update_ck+232
	DD	imagerel update_ck+426
	DD	imagerel $chain$2$update_ck
$pdata$3$update_ck DD imagerel update_ck+426
	DD	imagerel update_ck+447
	DD	imagerel $chain$3$update_ck
$pdata$update_pic_ck DD imagerel update_pic_ck
	DD	imagerel update_pic_ck+329
	DD	imagerel $unwind$update_pic_ck
$pdata$kvz_set_ctu_qp_lambda DD imagerel $LN143
	DD	imagerel $LN143+357
	DD	imagerel $unwind$kvz_set_ctu_qp_lambda
$pdata$3$kvz_set_ctu_qp_lambda DD imagerel $LN143+357
	DD	imagerel $LN143+1440
	DD	imagerel $chain$3$kvz_set_ctu_qp_lambda
$pdata$4$kvz_set_ctu_qp_lambda DD imagerel $LN143+1440
	DD	imagerel $LN143+1721
	DD	imagerel $chain$4$kvz_set_ctu_qp_lambda
$pdata$qp_to_lambda DD imagerel qp_to_lambda
	DD	imagerel qp_to_lambda+49
	DD	imagerel $unwind$qp_to_lambda
$pdata$get_ctu_bits DD imagerel get_ctu_bits
	DD	imagerel get_ctu_bits+951
	DD	imagerel $unwind$get_ctu_bits
$pdata$6$get_ctu_bits DD imagerel get_ctu_bits+951
	DD	imagerel get_ctu_bits+1865
	DD	imagerel $chain$6$get_ctu_bits
$pdata$7$get_ctu_bits DD imagerel get_ctu_bits+1865
	DD	imagerel get_ctu_bits+1926
	DD	imagerel $chain$7$get_ctu_bits
$pdata$kvz_estimate_pic_lambda DD imagerel $LN187
	DD	imagerel $LN187+244
	DD	imagerel $unwind$kvz_estimate_pic_lambda
$pdata$3$kvz_estimate_pic_lambda DD imagerel $LN187+244
	DD	imagerel $LN187+436
	DD	imagerel $chain$3$kvz_estimate_pic_lambda
$pdata$4$kvz_estimate_pic_lambda DD imagerel $LN187+436
	DD	imagerel $LN187+542
	DD	imagerel $chain$4$kvz_estimate_pic_lambda
$pdata$9$kvz_estimate_pic_lambda DD imagerel $LN187+542
	DD	imagerel $LN187+915
	DD	imagerel $chain$9$kvz_estimate_pic_lambda
$pdata$10$kvz_estimate_pic_lambda DD imagerel $LN187+915
	DD	imagerel $LN187+1904
	DD	imagerel $chain$10$kvz_estimate_pic_lambda
$pdata$11$kvz_estimate_pic_lambda DD imagerel $LN187+1904
	DD	imagerel $LN187+2455
	DD	imagerel $chain$11$kvz_estimate_pic_lambda
$pdata$calculate_weights DD imagerel calculate_weights
	DD	imagerel calculate_weights+37
	DD	imagerel $unwind$calculate_weights
$pdata$11$calculate_weights DD imagerel calculate_weights+37
	DD	imagerel calculate_weights+435
	DD	imagerel $chain$11$calculate_weights
$pdata$12$calculate_weights DD imagerel calculate_weights+435
	DD	imagerel calculate_weights+456
	DD	imagerel $chain$12$calculate_weights
$pdata$solve_cubic_equation DD imagerel solve_cubic_equation
	DD	imagerel solve_cubic_equation+24
	DD	imagerel $unwind$solve_cubic_equation
$pdata$9$solve_cubic_equation DD imagerel solve_cubic_equation+24
	DD	imagerel solve_cubic_equation+125
	DD	imagerel $chain$9$solve_cubic_equation
$pdata$14$solve_cubic_equation DD imagerel solve_cubic_equation+125
	DD	imagerel solve_cubic_equation+623
	DD	imagerel $chain$14$solve_cubic_equation
$pdata$15$solve_cubic_equation DD imagerel solve_cubic_equation+623
	DD	imagerel solve_cubic_equation+790
	DD	imagerel $chain$15$solve_cubic_equation
$pdata$16$solve_cubic_equation DD imagerel solve_cubic_equation+790
	DD	imagerel solve_cubic_equation+1042
	DD	imagerel $chain$16$solve_cubic_equation
$pdata$17$solve_cubic_equation DD imagerel solve_cubic_equation+1042
	DD	imagerel solve_cubic_equation+1060
	DD	imagerel $chain$17$solve_cubic_equation
$pdata$lambda_to_qp DD imagerel lambda_to_qp
	DD	imagerel lambda_to_qp+51
	DD	imagerel $unwind$lambda_to_qp
$pdata$pic_allocate_bits DD imagerel pic_allocate_bits
	DD	imagerel pic_allocate_bits+379
	DD	imagerel $unwind$pic_allocate_bits
$pdata$2$pic_allocate_bits DD imagerel pic_allocate_bits+379
	DD	imagerel pic_allocate_bits+410
	DD	imagerel $chain$2$pic_allocate_bits
$pdata$3$pic_allocate_bits DD imagerel pic_allocate_bits+410
	DD	imagerel pic_allocate_bits+575
	DD	imagerel $chain$3$pic_allocate_bits
$pdata$4$pic_allocate_bits DD imagerel pic_allocate_bits+575
	DD	imagerel pic_allocate_bits+622
	DD	imagerel $chain$4$pic_allocate_bits
$pdata$5$pic_allocate_bits DD imagerel pic_allocate_bits+622
	DD	imagerel pic_allocate_bits+753
	DD	imagerel $chain$5$pic_allocate_bits
$pdata$6$pic_allocate_bits DD imagerel pic_allocate_bits+753
	DD	imagerel pic_allocate_bits+1002
	DD	imagerel $chain$6$pic_allocate_bits
$pdata$xCalcHADs8x8_ISlice DD imagerel xCalcHADs8x8_ISlice
	DD	imagerel xCalcHADs8x8_ISlice+777
	DD	imagerel $unwind$xCalcHADs8x8_ISlice
$pdata$gop_allocate_bits DD imagerel gop_allocate_bits
	DD	imagerel gop_allocate_bits+298
	DD	imagerel $unwind$gop_allocate_bits
$pdata$update_parameters DD imagerel update_parameters
	DD	imagerel update_parameters+297
	DD	imagerel $unwind$update_parameters
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN8
	DD	imagerel $LN8+94
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN6
	DD	imagerel $LN6+93
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
pdata	SEGMENT
$pdata$kvz_free_rc_data DD imagerel $LN73
	DD	imagerel $LN73+20
	DD	imagerel $unwind$kvz_free_rc_data
$pdata$1$kvz_free_rc_data DD imagerel $LN73+20
	DD	imagerel $LN73+30
	DD	imagerel $chain$1$kvz_free_rc_data
$pdata$2$kvz_free_rc_data DD imagerel $LN73+30
	DD	imagerel $LN73+280
	DD	imagerel $chain$2$kvz_free_rc_data
$pdata$3$kvz_free_rc_data DD imagerel $LN73+280
	DD	imagerel $LN73+434
	DD	imagerel $chain$3$kvz_free_rc_data
$pdata$4$kvz_free_rc_data DD imagerel $LN73+434
	DD	imagerel $LN73+439
	DD	imagerel $chain$4$kvz_free_rc_data
$pdata$kvz_get_rc_data DD imagerel $LN60
	DD	imagerel $LN60+945
	DD	imagerel $unwind$kvz_get_rc_data
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
xdata	SEGMENT
$unwind$kvz_set_lcu_lambda_and_qp DD 0c4401H
	DD	03e844H
	DD	04d82eH
	DD	05c819H
	DD	01b0113H
	DD	0700ae00cH
	DD	030086009H
$chain$2$kvz_set_lcu_lambda_and_qp DD 061a21H
	DD	0b681aH
	DD	018f40fH
	DD	0225404H
	DD	imagerel $LN99
	DD	imagerel $LN99+77
	DD	imagerel $unwind$kvz_set_lcu_lambda_and_qp
$chain$9$kvz_set_lcu_lambda_and_qp DD 0e5f21H
	DD	06b85fH
	DD	07a852H
	DD	089849H
	DD	098840H
	DD	0a7835H
	DD	019d414H
	DD	01ac408H
	DD	imagerel $LN99+77
	DD	imagerel $LN99+314
	DD	imagerel $chain$2$kvz_set_lcu_lambda_and_qp
$chain$10$kvz_set_lcu_lambda_and_qp DD 0a0021H
	DD	06b800H
	DD	07a800H
	DD	089800H
	DD	098800H
	DD	0a7800H
	DD	imagerel $LN99+77
	DD	imagerel $LN99+314
	DD	imagerel $chain$2$kvz_set_lcu_lambda_and_qp
$chain$11$kvz_set_lcu_lambda_and_qp DD 020021H
	DD	098800H
	DD	imagerel $LN99+77
	DD	imagerel $LN99+314
	DD	imagerel $chain$2$kvz_set_lcu_lambda_and_qp
$chain$12$kvz_set_lcu_lambda_and_qp DD 021H
	DD	imagerel $LN99+77
	DD	imagerel $LN99+314
	DD	imagerel $chain$2$kvz_set_lcu_lambda_and_qp
$chain$13$kvz_set_lcu_lambda_and_qp DD 021H
	DD	imagerel $LN99
	DD	imagerel $LN99+77
	DD	imagerel $unwind$kvz_set_lcu_lambda_and_qp
$unwind$kvz_set_picture_lambda_and_qp DD 040a01H
	DD	0b340aH
	DD	07006720aH
$chain$1$kvz_set_picture_lambda_and_qp DD 040a21H
	DD	03680aH
	DD	0a6405H
	DD	imagerel $LN52
	DD	imagerel $LN52+39
	DD	imagerel $unwind$kvz_set_picture_lambda_and_qp
$chain$2$kvz_set_picture_lambda_and_qp DD 020021H
	DD	036800H
	DD	imagerel $LN52
	DD	imagerel $LN52+39
	DD	imagerel $unwind$kvz_set_picture_lambda_and_qp
$chain$3$kvz_set_picture_lambda_and_qp DD 021H
	DD	imagerel $LN52
	DD	imagerel $LN52+39
	DD	imagerel $unwind$kvz_set_picture_lambda_and_qp
$unwind$kvz_update_after_picture DD 016d901H
	DD	0b88d9H
	DD	0c78c1H
	DD	0d68b9H
	DD	01f74afH
	DD	07c860H
	DD	08b856H
	DD	09a849H
	DD	0a9829H
	DD	021010eH
	DD	0c005d007H
	DD	030025003H
$chain$6$kvz_update_after_picture DD 061821H
	DD	01df418H
	DD	01ee410H
	DD	0206408H
	DD	imagerel $LN269
	DD	imagerel $LN269+837
	DD	imagerel $unwind$kvz_update_after_picture
$chain$9$kvz_update_after_picture DD 063e21H
	DD	04f83eH
	DD	05e82bH
	DD	06d806H
	DD	imagerel $LN269+837
	DD	imagerel $LN269+2084
	DD	imagerel $chain$6$kvz_update_after_picture
$chain$10$kvz_update_after_picture DD 021H
	DD	imagerel $LN269+837
	DD	imagerel $LN269+2084
	DD	imagerel $chain$6$kvz_update_after_picture
$unwind$update_ck DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
$chain$0$update_ck DD 020521H
	DD	036805H
	DD	imagerel update_ck
	DD	imagerel update_ck+81
	DD	imagerel $unwind$update_ck
$chain$1$update_ck DD 020521H
	DD	027805H
	DD	imagerel update_ck+81
	DD	imagerel update_ck+86
	DD	imagerel $chain$0$update_ck
$chain$2$update_ck DD 021H
	DD	imagerel update_ck+81
	DD	imagerel update_ck+86
	DD	imagerel $chain$0$update_ck
$chain$3$update_ck DD 021H
	DD	imagerel update_ck
	DD	imagerel update_ck+81
	DD	imagerel $unwind$update_ck
$unwind$update_pic_ck DD 062501H
	DD	027825H
	DD	03681dH
	DD	030027206H
$unwind$kvz_set_ctu_qp_lambda DD 0123801H
	DD	04b838H
	DD	05a832H
	DD	069829H
	DD	096820H
	DD	0150118H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
$chain$3$kvz_set_ctu_qp_lambda DD 082321H
	DD	02d823H
	DD	03c814H
	DD	07880eH
	DD	087808H
	DD	imagerel $LN143
	DD	imagerel $LN143+357
	DD	imagerel $unwind$kvz_set_ctu_qp_lambda
$chain$4$kvz_set_ctu_qp_lambda DD 040021H
	DD	02d800H
	DD	03c800H
	DD	imagerel $LN143
	DD	imagerel $LN143+357
	DD	imagerel $unwind$kvz_set_ctu_qp_lambda
$unwind$qp_to_lambda DD 010401H
	DD	04204H
$unwind$get_ctu_bits DD 0104d01H
	DD	0ac84dH
	DD	0f782bH
	DD	0106824H
	DD	023011aH
	DD	0e011f013H
	DD	0c00dd00fH
	DD	0600a700bH
	DD	030085009H
$chain$6$get_ctu_bits DD 0e6321H
	DD	07f863H
	DD	08e850H
	DD	09d83eH
	DD	0bb82cH
	DD	0ca823H
	DD	0d9812H
	DD	0e8809H
	DD	imagerel get_ctu_bits
	DD	imagerel get_ctu_bits+951
	DD	imagerel $unwind$get_ctu_bits
$chain$7$get_ctu_bits DD 021H
	DD	imagerel get_ctu_bits
	DD	imagerel get_ctu_bits+951
	DD	imagerel $unwind$get_ctu_bits
$unwind$kvz_estimate_pic_lambda DD 0f4c01H
	DD	05e84cH
	DD	07c83dH
	DD	0b8827H
	DD	0c7822H
	DD	01e0111H
	DD	0c008e00aH
	DD	060057006H
	DD	05004H
$chain$3$kvz_estimate_pic_lambda DD 082221H
	DD	04f822H
	DD	0a981cH
	DD	0d6813H
	DD	0273408H
	DD	imagerel $LN187
	DD	imagerel $LN187+244
	DD	imagerel $unwind$kvz_estimate_pic_lambda
$chain$4$kvz_estimate_pic_lambda DD 021H
	DD	imagerel $LN187
	DD	imagerel $LN187+244
	DD	imagerel $unwind$kvz_estimate_pic_lambda
$chain$9$kvz_estimate_pic_lambda DD 0108921H
	DD	06d889H
	DD	08b87cH
	DD	09a863H
	DD	01cf45aH
	DD	04f800H
	DD	0a9800H
	DD	0d6800H
	DD	0273400H
	DD	imagerel $LN187
	DD	imagerel $LN187+244
	DD	imagerel $unwind$kvz_estimate_pic_lambda
$chain$10$kvz_estimate_pic_lambda DD 020821H
	DD	01dd408H
	DD	imagerel $LN187+542
	DD	imagerel $LN187+915
	DD	imagerel $chain$9$kvz_estimate_pic_lambda
$chain$11$kvz_estimate_pic_lambda DD 021H
	DD	imagerel $LN187+542
	DD	imagerel $LN187+915
	DD	imagerel $chain$9$kvz_estimate_pic_lambda
$unwind$calculate_weights DD 061301H
	DD	078813H
	DD	015010eH
	DD	0e005f007H
$chain$11$calculate_weights DD 0186821H
	DD	02d868H
	DD	03c859H
	DD	04b846H
	DD	05a838H
	DD	069833H
	DD	08782eH
	DD	09682aH
	DD	014c41cH
	DD	01b7416H
	DD	01a6410H
	DD	0195408H
	DD	0183404H
	DD	imagerel calculate_weights
	DD	imagerel calculate_weights+37
	DD	imagerel $unwind$calculate_weights
$chain$12$calculate_weights DD 021H
	DD	imagerel calculate_weights
	DD	imagerel calculate_weights+37
	DD	imagerel $unwind$calculate_weights
$unwind$solve_cubic_equation DD 041401H
	DD	07b814H
	DD	01d010fH
$chain$9$solve_cubic_equation DD 0145021H
	DD	05d850H
	DD	06c840H
	DD	08a836H
	DD	09982dH
	DD	0a8824H
	DD	0b7817H
	DD	0c6813H
	DD	01af40fH
	DD	01c740bH
	DD	0206404H
	DD	imagerel solve_cubic_equation
	DD	imagerel solve_cubic_equation+24
	DD	imagerel $unwind$solve_cubic_equation
$chain$14$solve_cubic_equation DD 0a3621H
	DD	03f836H
	DD	04e827H
	DD	01be421H
	DD	01f5412H
	DD	01e3404H
	DD	imagerel solve_cubic_equation+24
	DD	imagerel solve_cubic_equation+125
	DD	imagerel $chain$9$solve_cubic_equation
$chain$15$solve_cubic_equation DD 021H
	DD	imagerel solve_cubic_equation+24
	DD	imagerel solve_cubic_equation+125
	DD	imagerel $chain$9$solve_cubic_equation
$chain$16$solve_cubic_equation DD 0c0021H
	DD	05d800H
	DD	08a800H
	DD	099800H
	DD	0a8800H
	DD	0b7800H
	DD	0c6800H
	DD	imagerel solve_cubic_equation
	DD	imagerel solve_cubic_equation+24
	DD	imagerel $unwind$solve_cubic_equation
$chain$17$solve_cubic_equation DD 021H
	DD	imagerel solve_cubic_equation
	DD	imagerel solve_cubic_equation+24
	DD	imagerel $unwind$solve_cubic_equation
$unwind$lambda_to_qp DD 010401H
	DD	04204H
$unwind$pic_allocate_bits DD 081001H
	DD	0103410H
	DD	0d00c7210H
	DD	07008c00aH
	DD	050066007H
$chain$2$pic_allocate_bits DD 061221H
	DD	027812H
	DD	03680dH
	DD	0ff405H
	DD	imagerel pic_allocate_bits
	DD	imagerel pic_allocate_bits+379
	DD	imagerel $unwind$pic_allocate_bits
$chain$3$pic_allocate_bits DD 020521H
	DD	0ee405H
	DD	imagerel pic_allocate_bits+379
	DD	imagerel pic_allocate_bits+410
	DD	imagerel $chain$2$pic_allocate_bits
$chain$4$pic_allocate_bits DD 021H
	DD	imagerel pic_allocate_bits+379
	DD	imagerel pic_allocate_bits+410
	DD	imagerel $chain$2$pic_allocate_bits
$chain$5$pic_allocate_bits DD 040021H
	DD	027800H
	DD	036800H
	DD	imagerel pic_allocate_bits
	DD	imagerel pic_allocate_bits+379
	DD	imagerel $unwind$pic_allocate_bits
$chain$6$pic_allocate_bits DD 021H
	DD	imagerel pic_allocate_bits
	DD	imagerel pic_allocate_bits+379
	DD	imagerel $unwind$pic_allocate_bits
$unwind$xCalcHADs8x8_ISlice DD 0d2701H
	DD	0697427H
	DD	0686427H
	DD	0663427H
	DD	0600127H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
$unwind$gop_allocate_bits DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$update_parameters DD 0a3101H
	DD	028831H
	DD	037827H
	DD	04681aH
	DD	0c340aH
	DD	07006920aH
$unwind$kvz_free_rc_data DD 010401H
	DD	04204H
$chain$1$kvz_free_rc_data DD 040a21H
	DD	07640aH
	DD	063405H
	DD	imagerel $LN73
	DD	imagerel $LN73+20
	DD	imagerel $unwind$kvz_free_rc_data
$chain$2$kvz_free_rc_data DD 020521H
	DD	047405H
	DD	imagerel $LN73+20
	DD	imagerel $LN73+30
	DD	imagerel $chain$1$kvz_free_rc_data
$chain$3$kvz_free_rc_data DD 021H
	DD	imagerel $LN73+20
	DD	imagerel $LN73+30
	DD	imagerel $chain$1$kvz_free_rc_data
$chain$4$kvz_free_rc_data DD 021H
	DD	imagerel $LN73
	DD	imagerel $LN73+20
	DD	imagerel $unwind$kvz_free_rc_data
$unwind$kvz_get_rc_data DD 0d2101H
	DD	01b7421H
	DD	01a6421H
	DD	0195421H
	DD	0183421H
	DD	0140121H
	DD	0e018f01aH
	DD	0c016H
smoothing_window DD 028H
	ORG $+1
$SG4294955510 DB 0aH, 00H
	ORG $+2
$SG4294955511 DB 0aH, 00H
	ORG $+1
$SG4294955512 DB 0aH, 00H
	ORG $+2
$SG4294955513 DB 0aH, 00H
	ORG $+2
$SG4294955514 DB '%f ', 00H
$SG4294955515 DB '%d ', 00H
	ORG $+1
$SG4294955516 DB '%d ', 00H
$SG4294955517 DB '%f ', 00H
$SG4294955526 DB 'w', 00H
	ORG $+2
$SG4294955528 DB 'w', 00H
	ORG $+2
$SG4294955530 DB 'w', 00H
	ORG $+2
$SG4294955532 DB 'w', 00H
$SG4294955518 DB '%d %d %d', 0aH, 00H
	ORG $+6
$SG4294955519 DB '%d %d %d', 0aH, 00H
	ORG $+6
$SG4294955520 DB '%d %d %d', 0aH, 00H
	ORG $+6
$SG4294955521 DB '%d %d %d', 0aH, 00H
	ORG $+6
$SG4294955527 DB '%slambda.txt', 00H
$SG4294955524 DB '!', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'c', 00H, '_', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, '[', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '0', 00H, ')', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, '(', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'k', 00H, '_'
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, '[', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ')'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+4
$SG4294955525 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4294955529 DB '%sqp.txt', 00H
	ORG $+7
$SG4294955531 DB '%sdist.txt', 00H
	ORG $+5
$SG4294955533 DB '%sbits.txt', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
buff$1 = 32
encoder$ = 192
kvz_get_rc_data PROC

; 63   : kvz_rc_data * kvz_get_rc_data(const encoder_control_t * const encoder) {

$LN60:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 160				; 000000a0H

; 64   :   if (data != NULL || encoder == NULL) return data;

	mov	rdx, QWORD PTR data
	mov	rbp, rcx
	test	rdx, rdx
	jne	$LN12@kvz_get_rc
	test	rcx, rcx
	je	$LN12@kvz_get_rc

; 65   : 
; 66   :   data = calloc(1, sizeof(kvz_rc_data));

	mov	edx, 376				; 00000178H
	mov	ecx, 1
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR data, rax
	mov	rdi, rax

; 67   : 
; 68   :   if (data == NULL) return NULL;

	test	rax, rax
	je	$LN57@kvz_get_rc
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 81   :     *mutex = new std::mutex();

	mov	ecx, 80					; 00000050H
	call	??2@YAPEAX_K@Z				; operator new
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	mov	edx, 2
	mov	rcx, rax
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 81   :     *mutex = new std::mutex();

	mov	rbx, rax
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	call	QWORD PTR __imp__Mtx_init_in_situ
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 70   :   if (pthread_mutex_init(&data->lambda_lock, NULL) != 0) return NULL;

	mov	rcx, QWORD PTR data
	add	rcx, 360				; 00000168H
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 81   :     *mutex = new std::mutex();

	mov	QWORD PTR [rdi+352], rbx
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 70   :   if (pthread_mutex_init(&data->lambda_lock, NULL) != 0) return NULL;

	call	pthread_mutex_init
	test	eax, eax
	jne	$LN57@kvz_get_rc

; 71   :   if (pthread_mutex_init(&data->intra_lock, NULL) != 0) return NULL;

	mov	rcx, QWORD PTR data
	add	rcx, 368				; 00000170H
	call	pthread_mutex_init
	test	eax, eax
	jne	$LN57@kvz_get_rc

; 72   :   for (int (i) = 0; (i) < KVZ_MAX_GOP_LAYERS; ++(i)) {

	mov	edi, 304				; 00000130H
	xor	r12d, r12d
$LL4@kvz_get_rc:

; 73   :     if (pthread_rwlock_init(&data->ck_ctu_lock[i], NULL) != 0) return NULL;

	mov	rbx, QWORD PTR data
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 97   :   *lock = new rw_lock_internal;

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new

; 98   :   static_cast<rw_lock_internal*>(*lock)->lock = new std::shared_mutex;

	mov	ecx, 8
	mov	QWORD PTR [rdi+rbx], rax
	call	??2@YAPEAX_K@Z				; operator new
	mov	rcx, rax
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 37   :         : _Myhandle(nullptr) {}

	mov	QWORD PTR [rax], r12
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 98   :   static_cast<rw_lock_internal*>(*lock)->lock = new std::shared_mutex;

	mov	rax, QWORD PTR [rdi+rbx]
	mov	QWORD PTR [rax], rcx

; 99   :   static_cast<rw_lock_internal*>(*lock)->write_lock = false;

	mov	rax, QWORD PTR [rdi+rbx]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 72   :   for (int (i) = 0; (i) < KVZ_MAX_GOP_LAYERS; ++(i)) {

	add	rdi, 8
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 99   :   static_cast<rw_lock_internal*>(*lock)->write_lock = false;

	mov	BYTE PTR [rax+8], r12b
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 72   :   for (int (i) = 0; (i) < KVZ_MAX_GOP_LAYERS; ++(i)) {

	cmp	rdi, 352				; 00000160H
	jl	SHORT $LL4@kvz_get_rc

; 74   :   }
; 75   : 
; 76   :   const int num_lcus = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	eax, DWORD PTR [rbp+2540]
	mov	ebx, 48					; 00000030H
	imul	eax, DWORD PTR [rbp+2536]
	mov	r14, 4617315517961601024		; 4014000000000000H
	mov	r15, -4631501856787818086		; bfb999999999999aH

; 87   : 
; 88   :     for (int j = 0; j < num_lcus; j++) {

	movsxd	rdi, eax
	lea	rsi, QWORD PTR [rdi*8]
$LL7@kvz_get_rc:

; 79   :     data->c_para[i] = malloc(sizeof(double) * num_lcus);

	mov	rcx, rsi
	call	QWORD PTR __imp_malloc
	mov	rcx, rax
	mov	rax, QWORD PTR data
	mov	QWORD PTR [rbx+rax-48], rcx

; 80   :     if (data->c_para[i] == NULL) return NULL;

	test	rcx, rcx
	je	$LN57@kvz_get_rc

; 81   : 
; 82   :     data->k_para[i] = malloc(sizeof(double) * num_lcus);

	mov	rcx, rsi
	call	QWORD PTR __imp_malloc
	mov	rdx, QWORD PTR data
	mov	QWORD PTR [rbx+rdx], rax

; 83   :     if (data->k_para[i] == NULL) return NULL;

	test	rax, rax
	je	$LN57@kvz_get_rc

; 84   : 
; 85   :     data->pic_c_para[i] = 5.0;

	mov	QWORD PTR [rbx+rdx+48], r14
	mov	rcx, r12

; 86   :     data->pic_k_para[i] = -0.1;

	mov	QWORD PTR [rbx+rdx+96], r15

; 87   : 
; 88   :     for (int j = 0; j < num_lcus; j++) {

	cmp	rdi, 4
	jl	SHORT $LC51@kvz_get_rc
	lea	r8, QWORD PTR [rdi-3]
	npad	9
$LL52@kvz_get_rc:

; 89   :       data->c_para[i][j] = 5.0;

	mov	rax, QWORD PTR [rbx+rdx-48]
	mov	QWORD PTR [rax+rcx*8], r14

; 90   :       data->k_para[i][j] = -0.1;

	mov	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rax+rcx*8], r15
	mov	rax, QWORD PTR [rbx+rdx-48]
	mov	QWORD PTR [rax+rcx*8+8], r14
	mov	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rax+rcx*8+8], r15
	mov	rax, QWORD PTR [rbx+rdx-48]
	mov	QWORD PTR [rax+rcx*8+16], r14
	mov	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rax+rcx*8+16], r15
	mov	rax, QWORD PTR [rbx+rdx-48]
	mov	QWORD PTR [rax+rcx*8+24], r14
	mov	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rax+rcx*8+24], r15
	add	rcx, 4
	cmp	rcx, r8
	jl	SHORT $LL52@kvz_get_rc
$LC51@kvz_get_rc:

; 87   : 
; 88   :     for (int j = 0; j < num_lcus; j++) {

	cmp	rcx, rdi
	jge	SHORT $LN5@kvz_get_rc
$LC10@kvz_get_rc:

; 89   :       data->c_para[i][j] = 5.0;

	mov	rax, QWORD PTR [rbx+rdx-48]
	mov	QWORD PTR [rax+rcx*8], r14

; 90   :       data->k_para[i][j] = -0.1;

	mov	rax, QWORD PTR [rbx+rdx]
	mov	QWORD PTR [rax+rcx*8], r15
	inc	rcx
	cmp	rcx, rdi
	jl	SHORT $LC10@kvz_get_rc
$LN5@kvz_get_rc:

; 77   : 
; 78   :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; i++) {

	add	rbx, 8
	cmp	rbx, 96					; 00000060H
	jl	$LL7@kvz_get_rc

; 91   :     }
; 92   :   }
; 93   :   data->intra_bpp = calloc(num_lcus, sizeof(double));

	mov	edx, 8
	mov	rcx, rdi
	call	QWORD PTR __imp_calloc
	mov	r8, rax
	mov	rax, QWORD PTR data
	mov	QWORD PTR [rax+256], r8

; 94   :   if (data->intra_bpp == NULL) return NULL;

	test	r8, r8
	je	$LN57@kvz_get_rc

; 95   :   data->intra_dis = calloc(num_lcus, sizeof(double));

	mov	edx, 8
	mov	rcx, rdi
	call	QWORD PTR __imp_calloc
	mov	rdx, QWORD PTR data
	mov	QWORD PTR [rdx+264], rax

; 96   :   if (data->intra_dis == NULL) return NULL;

	test	rax, rax
	je	$LN57@kvz_get_rc

; 97   : 
; 98   :   memset(data->previous_lambdas, 0, sizeof(data->previous_lambdas));

	xor	eax, eax
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rdx+192], xmm0
	movups	XMMWORD PTR [rdx+208], xmm0
	movups	XMMWORD PTR [rdx+224], xmm0
	mov	QWORD PTR [rdx+240], rax

; 99   : 
; 100  :   data->previous_frame_lambda = 0.0;
; 101  : 
; 102  :   data->intra_pic_bpp = 0.0;
; 103  :   data->intra_pic_distortion = 0.0;
; 104  : 
; 105  :   data->intra_alpha = 6.7542000000000000;

	mov	rax, 4619290571578184355		; 401b044d013a92a3H
	mov	QWORD PTR [rdx+288], rax

; 106  :   data->intra_beta = 1.7860000000000000;

	mov	rax, 4610722248107130618		; 3ffc9374bc6a7efaH
	mov	QWORD PTR [rdx+296], rax
	mov	QWORD PTR [rdx+248], r12
	mov	QWORD PTR [rdx+280], r12
	mov	QWORD PTR [rdx+272], r12

; 107  :   if(encoder->cfg.stats_file_prefix) {

	mov	r8, QWORD PTR [rbp+2496]
	test	r8, r8
	je	$LN12@kvz_get_rc

; 108  :     char buff[128];
; 109  :     sprintf(buff, "%sbits.txt", encoder->cfg.stats_file_prefix);

	lea	rdx, OFFSET FLAT:$SG4294955533
	lea	rcx, QWORD PTR buff$1[rsp]
	call	sprintf

; 110  :     bits_file = fopen(buff, "w");

	lea	rdx, OFFSET FLAT:$SG4294955532
	lea	rcx, QWORD PTR buff$1[rsp]
	call	QWORD PTR __imp_fopen

; 111  :     sprintf(buff, "%sdist.txt", encoder->cfg.stats_file_prefix);

	mov	r8, QWORD PTR [rbp+2496]
	lea	rdx, OFFSET FLAT:$SG4294955531
	lea	rcx, QWORD PTR buff$1[rsp]
	mov	QWORD PTR bits_file, rax
	call	sprintf

; 112  :     dist_file = fopen(buff, "w");

	lea	rdx, OFFSET FLAT:$SG4294955530
	lea	rcx, QWORD PTR buff$1[rsp]
	call	QWORD PTR __imp_fopen

; 113  :     sprintf(buff, "%sqp.txt", encoder->cfg.stats_file_prefix);

	mov	r8, QWORD PTR [rbp+2496]
	lea	rdx, OFFSET FLAT:$SG4294955529
	lea	rcx, QWORD PTR buff$1[rsp]
	mov	QWORD PTR dist_file, rax
	call	sprintf

; 114  :     qp_file = fopen(buff, "w");

	lea	rdx, OFFSET FLAT:$SG4294955528
	lea	rcx, QWORD PTR buff$1[rsp]
	call	QWORD PTR __imp_fopen

; 115  :     sprintf(buff, "%slambda.txt", encoder->cfg.stats_file_prefix);

	mov	r8, QWORD PTR [rbp+2496]
	lea	rdx, OFFSET FLAT:$SG4294955527
	lea	rcx, QWORD PTR buff$1[rsp]
	mov	QWORD PTR qp_file, rax
	call	sprintf

; 116  :     lambda_file = fopen(buff, "w");

	lea	rdx, OFFSET FLAT:$SG4294955526
	lea	rcx, QWORD PTR buff$1[rsp]
	call	QWORD PTR __imp_fopen
	mov	rdx, QWORD PTR data
	mov	QWORD PTR lambda_file, rax
$LN12@kvz_get_rc:

; 64   :   if (data != NULL || encoder == NULL) return data;

	mov	rax, rdx
$LN1@kvz_get_rc:

; 117  :   }
; 118  :   return data;
; 119  : }

	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	ret	0
$LN57@kvz_get_rc:

; 96   :   if (data->intra_dis == NULL) return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_get_rc
kvz_get_rc_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
kvz_free_rc_data PROC

; 121  : void kvz_free_rc_data() {

$LN73:
	sub	rsp, 40					; 00000028H

; 122  :   if (data == NULL) return;

	mov	rax, QWORD PTR data
	test	rax, rax
	je	$LN1@kvz_free_r

; 123  : 
; 124  :   pthread_mutex_destroy(&data->ck_frame_lock);

	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+32], rdi
	lea	rdi, QWORD PTR [rax+352]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rdi]
	test	rbx, rbx
	je	SHORT $LN19@kvz_free_r
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN19@kvz_free_r:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	xor	esi, esi
	mov	QWORD PTR [rdi], rsi
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 125  :   pthread_mutex_destroy(&data->lambda_lock);

	lea	rdi, QWORD PTR [rax+360]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rdi]
	test	rbx, rbx
	je	SHORT $LN31@kvz_free_r
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	lea	edx, QWORD PTR [rsi+80]
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN31@kvz_free_r:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rdi], rsi
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 126  :   pthread_mutex_destroy(&data->intra_lock);

	lea	rdi, QWORD PTR [rax+368]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rdi]
	test	rbx, rbx
	je	SHORT $LN43@kvz_free_r
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN43@kvz_free_r:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rdi], rsi
	mov	ebx, 304				; 00000130H
	npad	11
$LL4@kvz_free_r:

; 105  :   delete static_cast<rw_lock_internal*>(*rwlock)->lock;

	mov	rcx, QWORD PTR [rbx+rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 128  :     pthread_rwlock_destroy(&data->ck_ctu_lock[i]);

	lea	rdi, QWORD PTR [rbx+rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 105  :   delete static_cast<rw_lock_internal*>(*rwlock)->lock;

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN65@kvz_free_r
	mov	edx, 8
	mov	rcx, rax
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rcx, QWORD PTR [rdi]
$LN65@kvz_free_r:

; 106  :   delete static_cast<rw_lock_internal*>(*rwlock);

	mov	edx, 16
	call	??3@YAXPEAX_K@Z				; operator delete
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 127  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; ++i) {

	add	rbx, 8
	cmp	rbx, 352				; 00000160H
	jge	SHORT $LN70@kvz_free_r
	mov	rax, QWORD PTR data
	jmp	SHORT $LL4@kvz_free_r
$LN70@kvz_free_r:

; 129  :   }
; 130  : 
; 131  :   if (data->intra_bpp) FREE_POINTER(data->intra_bpp);

	mov	rcx, QWORD PTR data
	mov	rdi, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR [rcx+256]
	test	rax, rax
	je	SHORT $LN9@kvz_free_r
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rcx+256], rsi
$LN9@kvz_free_r:

; 132  :   if (data->intra_dis) FREE_POINTER(data->intra_dis);

	mov	rax, QWORD PTR [rcx+264]
	test	rax, rax
	je	SHORT $LN10@kvz_free_r
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rcx+264], rsi
$LN10@kvz_free_r:
	mov	rbx, rsi
$LL7@kvz_free_r:

; 134  :     if (data->c_para[i]) FREE_POINTER(data->c_para[i]);

	mov	rax, QWORD PTR [rbx+rcx]
	test	rax, rax
	je	SHORT $LN11@kvz_free_r
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rbx+rcx], rsi
$LN11@kvz_free_r:

; 135  :     if (data->k_para[i]) FREE_POINTER(data->k_para[i]);

	mov	rax, QWORD PTR [rbx+rcx+48]
	test	rax, rax
	je	SHORT $LN5@kvz_free_r
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rbx+rcx+48], rsi
$LN5@kvz_free_r:

; 133  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; i++) {

	add	rbx, 8
	cmp	rbx, 48					; 00000030H
	jl	SHORT $LL7@kvz_free_r

; 136  :   }
; 137  :   FREE_POINTER(data);

	call	QWORD PTR __imp_free
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR data, rsi
	mov	rsi, QWORD PTR [rsp+56]
$LN1@kvz_free_r:

; 138  : }

	add	rsp, 40					; 00000028H
	ret	0
kvz_free_rc_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$dead$ = 72
_Format$ = 80
_Locale$dead$ = 88
_ArgList$ = 96
_vsnprintf_l PROC					; COMDAT

; 1389 :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r8
	mov	rdi, rcx

; 1390 :         int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	r9, rbx
	mov	rdx, rdi
	mov	rbx, -1
	mov	r8, rbx
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR _ArgList$[rsp]
	or	rcx, 1
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	call	QWORD PTR __imp___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	test	eax, eax
	cmovs	eax, ebx

; 1395 :     }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1459 :     {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 1390 :         int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	rbx, -1
	mov	QWORD PTR [rsp+32], 0
	mov	r8, rbx
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	QWORD PTR __imp___stdio_common_vsprintf

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1463 :         #pragma warning(pop)
; 1464 :     }

	mov	rsi, QWORD PTR [rsp+72]

; 1394 :         return _Result < 0 ? -1 : _Result;

	test	eax, eax
	cmovs	eax, ebx

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1463 :         #pragma warning(pop)
; 1464 :     }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Buffer$ = 80
_Format$ = 88
sprintf	PROC						; COMDAT

; 1781 :     {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rdi, rcx

; 1390 :         int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	r9, rbx
	mov	QWORD PTR [rsp+40], rsi
	mov	rbx, -1
	mov	QWORD PTR [rsp+32], 0
	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	QWORD PTR __imp___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	test	eax, eax
	cmovs	eax, ebx

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);
; 1792 :         return _Result;
; 1793 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
_TEXT	SEGMENT
state$ = 8
encoder_state_must_write_vps PROC

; 363  :   const int32_t frame = state->frame->num;

	mov	rax, QWORD PTR [rcx+40]
	mov	r8d, DWORD PTR [rax+8]

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	rax, QWORD PTR [rcx]
	mov	ecx, DWORD PTR [rax+8]

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	test	ecx, ecx
	jle	SHORT $LN7@encoder_st
	mov	eax, r8d
	cdq
	idiv	ecx
	test	edx, edx
	je	SHORT $LN5@encoder_st
	test	ecx, ecx
$LN7@encoder_st:
	js	SHORT $LN4@encoder_st
	test	r8d, r8d
	jne	SHORT $LN4@encoder_st
$LN5@encoder_st:
	mov	al, 1

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	ret	0
$LN4@encoder_st:

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	xor	al, al

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	ret	0
encoder_state_must_write_vps ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
lambda$ = 8
clip_lambda PROC

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm0, xmm0
	setp	al
	cmp	al, 1
	jne	SHORT $LN2@clip_lambd
	movsd	xmm0, QWORD PTR __real@40c3880000000000

; 61   : }

	ret	0
$LN2@clip_lambd:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm0, QWORD PTR __real@40c3880000000000
	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, xmm1
	jb	SHORT $LN9@clip_lambd
	movaps	xmm1, xmm0
$LN9@clip_lambd:
	movaps	xmm0, xmm1

; 61   : }

	ret	0
clip_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
bits$ = 96
pixels$ = 104
lambda_real$ = 112
alpha$ = 120
beta$ = 128
update_parameters PROC

; 155  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H

; 156  :   const double bpp              = bits / (double)pixels;
; 157  :   const double lambda_comp      = clip_lambda(*alpha * pow(bpp, *beta));

	mov	rbx, QWORD PTR beta$[rsp]
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR [rsp+64], xmm6
	mov	rdi, r9
	mov	eax, ecx
	movaps	xmm6, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm7
	movsd	xmm1, QWORD PTR [rbx]
	movaps	XMMWORD PTR [rsp+32], xmm8
	xorps	xmm8, xmm8
	cvtsi2sd xmm8, rax
	mov	eax, edx
	cvtsi2sd xmm0, rax
	divsd	xmm8, xmm0
	movaps	xmm0, xmm8
	call	pow

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	movsd	xmm7, QWORD PTR __real@3fb999999999999a

; 156  :   const double bpp              = bits / (double)pixels;
; 157  :   const double lambda_comp      = clip_lambda(*alpha * pow(bpp, *beta));

	movaps	xmm2, xmm0
	mulsd	xmm2, QWORD PTR [rdi]

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm2, xmm2
	setp	al
	cmp	al, 1
	jne	SHORT $LN22@update_par
	movsd	xmm2, QWORD PTR __real@40c3880000000000
	jmp	SHORT $LN28@update_par
$LN22@update_par:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm2, QWORD PTR __real@40c3880000000000
	comisd	xmm2, xmm7
	jae	SHORT $LN28@update_par
	movaps	xmm2, xmm7
$LN28@update_par:

; 158  :   const double lambda_log_ratio = log(lambda_real) - log(lambda_comp);

	divsd	xmm6, xmm2
	movaps	xmm0, xmm6
	call	log
	movaps	xmm6, xmm0

; 159  : 
; 160  :   *alpha += 0.10 * lambda_log_ratio * (*alpha);

	mulsd	xmm0, xmm7

; 161  :   *alpha = CLIP(0.05, 20, *alpha);

	movsd	xmm7, QWORD PTR __real@3fa999999999999a
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR [rdi]
	minsd	xmm0, QWORD PTR __real@4034000000000000
	comisd	xmm0, xmm7
	jae	SHORT $LN7@update_par
	movaps	xmm0, xmm7
$LN7@update_par:
	movsd	QWORD PTR [rdi], xmm0

; 162  : 
; 163  :   *beta  += 0.05 * lambda_log_ratio * CLIP(-5.0, -1.0, log(bpp));

	movaps	xmm0, xmm8
	call	log
	minsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	xmm1, QWORD PTR __real@c014000000000000
	comisd	xmm0, xmm1
	jb	SHORT $LN14@update_par
	movaps	xmm1, xmm0
$LN14@update_par:

; 164  :   *beta  = CLIP(-3, -0.1, *beta);

	movsd	xmm0, QWORD PTR __real@c008000000000000
	mulsd	xmm6, xmm7
	mulsd	xmm6, xmm1
	addsd	xmm6, QWORD PTR [rbx]
	minsd	xmm6, QWORD PTR __real@bfb999999999999a
	comisd	xmm6, xmm0
	jae	SHORT $LN19@update_par
	movsd	QWORD PTR [rbx], xmm0
	jmp	SHORT $LN20@update_par
$LN19@update_par:
	movsd	QWORD PTR [rbx], xmm6
$LN20@update_par:

; 165  : }

	mov	rbx, QWORD PTR [rsp+96]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm8, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
update_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 8
gop_allocate_bits PROC

; 173  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi

; 174  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rbx, QWORD PTR [rcx]

; 175  : 
; 176  :   // At this point, total_bits_coded of the current state contains the
; 177  :   // number of bits written encoder->owf frames before the current frame.
; 178  :   uint64_t bits_coded = state->frame->total_bits_coded;

	mov	r11, QWORD PTR [rcx+40]

; 179  :   int pictures_coded = 0;
; 180  :   if(encoder->cfg.gop_len) {

	movsx	edi, BYTE PTR [rbx+300]
	mov	r9, QWORD PTR [r11+96]
	test	dil, dil
	je	SHORT $LN4@gop_alloca

; 181  :     pictures_coded = MAX(0, state->frame->num - CEILDIV(encoder->cfg.owf, encoder->cfg.gop_len)*encoder->cfg.gop_len);

	mov	esi, DWORD PTR [rbx+172]
	lea	r8d, DWORD PTR [rsi-1]
	add	r8d, edi
	mov	eax, r8d
	cdq
	idiv	edi

; 182  :   }

	mov	eax, 0
	sub	edx, r8d
	add	edx, DWORD PTR [r11+8]
	cmovns	eax, edx

; 185  :   }
; 186  :     
; 187  :   if (encoder->cfg.gop_len > 0 && encoder->cfg.owf > 0) {

	mov	r10d, eax
	test	dil, dil
	jle	SHORT $LN11@gop_alloca
	test	esi, esi
	jle	SHORT $LN11@gop_alloca

; 188  :     // Subtract number of bits in the partially coded GOP.
; 189  :     bits_coded -= state->frame->cur_gop_bits_coded;

	sub	r9, QWORD PTR [r11+104]
	jmp	SHORT $LN11@gop_alloca
$LN4@gop_alloca:

; 183  :   else {
; 184  :     pictures_coded = MAX(0, state->frame->num - encoder->cfg.owf);

	mov	r10d, DWORD PTR [r11+8]
	mov	eax, 0
	sub	r10d, DWORD PTR [rbx+172]
	cmovs	r10d, eax
$LN11@gop_alloca:

; 190  :   }
; 191  : 
; 192  :   smoothing_window = MAX(MIN_SMOOTHING_WINDOW, smoothing_window - encoder->cfg.gop_len / 2);
; 193  :   double gop_target_bits = -1;

	movsd	xmm2, QWORD PTR __real@bff0000000000000
	mov	eax, edi
	cdq
	xorps	xmm3, xmm3
	sub	eax, edx
	mov	edx, DWORD PTR smoothing_window
	sar	eax, 1
	sub	edx, eax
	mov	eax, 40					; 00000028H
	cmp	edx, eax
	cmovl	edx, eax

; 196  :     // Equation 12 from https://doi.org/10.1109/TIP.2014.2336550
; 197  :     gop_target_bits =

	lea	esi, QWORD PTR [rax-39]
$LN24@gop_alloca:

; 194  : 
; 195  :   while( gop_target_bits < 0 && smoothing_window < 150) {

	mov	DWORD PTR smoothing_window, edx
	cmp	edx, 150				; 00000096H
	jge	SHORT $LN3@gop_alloca

; 196  :     // Equation 12 from https://doi.org/10.1109/TIP.2014.2336550
; 197  :     gop_target_bits =

	cmp	dil, sil
	lea	eax, DWORD PTR [rdx+r10]
	movd	xmm2, eax
	mov	r8d, edi
	cvtdq2pd xmm2, xmm2
	cmovl	r8d, esi
	xorps	xmm0, xmm0
	mulsd	xmm2, QWORD PTR [rbx+6456]
	test	r9, r9
	js	SHORT $LN22@gop_alloca
	cvtsi2sd xmm0, r9
	jmp	SHORT $LN23@gop_alloca
$LN22@gop_alloca:
	mov	rax, r9
	mov	rcx, r9
	shr	rcx, 1
	and	eax, esi
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN23@gop_alloca:
	subsd	xmm2, xmm0
	movd	xmm1, edx
	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	mulsd	xmm2, xmm0
	divsd	xmm2, xmm1

; 198  :       (encoder->target_avg_bppic * (pictures_coded + smoothing_window) - bits_coded)
; 199  :       * MAX(1, encoder->cfg.gop_len) / smoothing_window;
; 200  :     if(gop_target_bits < 0) {

	comisd	xmm2, xmm3
	jae	SHORT $LN3@gop_alloca

; 201  :       smoothing_window += 10;

	add	edx, 10
	jmp	SHORT $LN24@gop_alloca
$LN3@gop_alloca:

; 202  :     }
; 203  :   }
; 204  :   // Allocate at least 200 bits for each GOP like HM does.
; 205  :   return MAX(200, gop_target_bits);

	maxsd	xmm2, QWORD PTR __real@4069000000000000

; 206  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	movaps	xmm0, xmm2
	ret	0
gop_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
m3$ = 0
diff$ = 0
m2$ = 256
piOrg$ = 816
y$ = 824
iStrideOrg$ = 832
xCalcHADs8x8_ISlice PROC

; 209  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-512]
	sub	rsp, 768				; 00000300H

; 210  :   piOrg += y * iStrideOrg;

	imul	edx, r8d
	movsxd	r9, r8d
	movsxd	rax, edx
	add	rcx, rax

; 211  :   int i, j;
; 212  :   int diff[64], m1[8][8], m2[8][8], m3[8][8], iSumHad = 0;

	xor	r13d, r13d
	mov	edx, r13d
	npad	6
$LL4@xCalcHADs8:

; 213  : 
; 214  :   for (int k = 0; k < 64; k += 8) {
; 215  :     diff[k + 0] = piOrg[0];

	movzx	eax, BYTE PTR [rcx]
	mov	DWORD PTR diff$[rsp+rdx*4], eax
	movzx	eax, BYTE PTR [rcx+1]
	mov	DWORD PTR diff$[rsp+rdx*4+4], eax
	movzx	eax, BYTE PTR [rcx+2]
	mov	DWORD PTR diff$[rsp+rdx*4+8], eax
	movzx	eax, BYTE PTR [rcx+3]
	mov	DWORD PTR diff$[rsp+rdx*4+12], eax
	movzx	eax, BYTE PTR [rcx+4]
	mov	DWORD PTR diff$[rsp+rdx*4+16], eax
	movzx	eax, BYTE PTR [rcx+5]
	mov	DWORD PTR diff$[rsp+rdx*4+20], eax
	movzx	eax, BYTE PTR [rcx+6]
	mov	DWORD PTR diff$[rsp+rdx*4+24], eax
	movzx	eax, BYTE PTR [rcx+7]

; 216  :     diff[k + 1] = piOrg[1];
; 217  :     diff[k + 2] = piOrg[2];
; 218  :     diff[k + 3] = piOrg[3];
; 219  :     diff[k + 4] = piOrg[4];
; 220  :     diff[k + 5] = piOrg[5];
; 221  :     diff[k + 6] = piOrg[6];
; 222  :     diff[k + 7] = piOrg[7];
; 223  : 
; 224  :     piOrg += iStrideOrg;

	add	rcx, r9
	mov	DWORD PTR diff$[rsp+rdx*4+28], eax
	add	rdx, 8
	cmp	rdx, 64					; 00000040H
	jl	SHORT $LL4@xCalcHADs8

; 225  :   }
; 226  : 
; 227  :   //horizontal
; 228  :   for (j = 0; j < 8; j++) {

	mov	r12, r13
	npad	2
$LL7@xCalcHADs8:

; 229  :     int jj = j << 3;

	lea	eax, DWORD PTR [r13*8]
	inc	r13d

; 230  :     m2[j][0] = diff[jj] + diff[jj + 4];

	movsxd	rcx, eax
	lea	r12, QWORD PTR [r12+32]
	mov	eax, DWORD PTR diff$[rsp+rcx*4+16]

; 231  :     m2[j][1] = diff[jj + 1] + diff[jj + 5];

	mov	edx, DWORD PTR diff$[rsp+rcx*4+20]

; 232  :     m2[j][2] = diff[jj + 2] + diff[jj + 6];

	mov	r8d, DWORD PTR diff$[rsp+rcx*4+24]
	mov	r15d, DWORD PTR diff$[rsp+rcx*4]
	mov	r14d, DWORD PTR diff$[rsp+rcx*4+4]
	mov	r11d, DWORD PTR diff$[rsp+rcx*4+8]

; 233  :     m2[j][3] = diff[jj + 3] + diff[jj + 7];

	mov	r9d, DWORD PTR diff$[rsp+rcx*4+28]
	mov	ebx, DWORD PTR diff$[rsp+rcx*4+12]
	lea	esi, DWORD PTR [r15+rax]

; 234  :     m2[j][4] = diff[jj] - diff[jj + 4];

	sub	r15d, eax
	lea	edi, DWORD PTR [r14+rdx]
	lea	r10d, DWORD PTR [r11+r8]

; 235  :     m2[j][5] = diff[jj + 1] - diff[jj + 5];

	sub	r14d, edx

; 236  :     m2[j][6] = diff[jj + 2] - diff[jj + 6];

	sub	r11d, r8d
	lea	ecx, DWORD PTR [rbx+r9]

; 237  :     m2[j][7] = diff[jj + 3] - diff[jj + 7];

	sub	ebx, r9d

; 238  : 
; 239  :     m1[j][0] = m2[j][0] + m2[j][2];

	lea	r9d, DWORD PTR [r10+rsi]

; 240  :     m1[j][1] = m2[j][1] + m2[j][3];
; 241  :     m1[j][2] = m2[j][0] - m2[j][2];

	sub	esi, r10d
	lea	edx, DWORD PTR [rcx+rdi]

; 242  :     m1[j][3] = m2[j][1] - m2[j][3];

	sub	edi, ecx

; 243  :     m1[j][4] = m2[j][4] + m2[j][6];

	lea	r8d, DWORD PTR [r11+r15]

; 244  :     m1[j][5] = m2[j][5] + m2[j][7];
; 245  :     m1[j][6] = m2[j][4] - m2[j][6];

	sub	r15d, r11d

; 246  :     m1[j][7] = m2[j][5] - m2[j][7];
; 247  : 
; 248  :     m2[j][0] = m1[j][0] + m1[j][1];

	lea	eax, DWORD PTR [rdx+r9]

; 249  :     m2[j][1] = m1[j][0] - m1[j][1];

	sub	r9d, edx
	mov	DWORD PTR m2$[rbp+r12-288], eax
	lea	ecx, DWORD PTR [rbx+r14]

; 250  :     m2[j][2] = m1[j][2] + m1[j][3];

	lea	eax, DWORD PTR [rdi+rsi]
	mov	DWORD PTR m2$[rbp+r12-284], r9d
	sub	r14d, ebx
	mov	DWORD PTR m2$[rbp+r12-280], eax

; 251  :     m2[j][3] = m1[j][2] - m1[j][3];
; 252  :     m2[j][4] = m1[j][4] + m1[j][5];

	lea	eax, DWORD PTR [rcx+r8]
	sub	esi, edi
	mov	DWORD PTR m2$[rbp+r12-272], eax

; 253  :     m2[j][5] = m1[j][4] - m1[j][5];

	sub	r8d, ecx
	mov	DWORD PTR m2$[rbp+r12-276], esi

; 254  :     m2[j][6] = m1[j][6] + m1[j][7];

	lea	eax, DWORD PTR [r14+r15]
	mov	DWORD PTR m2$[rbp+r12-268], r8d

; 255  :     m2[j][7] = m1[j][6] - m1[j][7];

	sub	r15d, r14d
	mov	DWORD PTR m2$[rbp+r12-264], eax
	mov	DWORD PTR m2$[rbp+r12-260], r15d
	cmp	r13d, 8
	jl	$LL7@xCalcHADs8

; 256  :   }
; 257  : 
; 258  :   //vertical
; 259  :   for (i = 0; i < 8; i++) {

	xor	r13d, r13d
	mov	r15d, 8
	mov	r14d, r13d
	mov	r12d, r15d
	npad	8
$LL10@xCalcHADs8:

; 260  :     m3[0][i] = m2[0][i] + m2[4][i];

	mov	ebx, DWORD PTR m2$[rbp+r14-128]
	mov	r10d, DWORD PTR m2$[rbp+r14-96]
	mov	r8d, DWORD PTR m2$[rbp+r14-64]
	mov	ecx, DWORD PTR m2$[rbp+r14-32]
	mov	r11d, DWORD PTR m2$[rbp+r14-256]
	mov	r9d, DWORD PTR m2$[rbp+r14-224]
	mov	edx, DWORD PTR m2$[rbp+r14-192]
	mov	esi, DWORD PTR m2$[rbp+r14-160]
	lea	r14, QWORD PTR [r14+4]
	lea	eax, DWORD PTR [r11+rbx]

; 261  :     m3[1][i] = m2[1][i] + m2[5][i];
; 262  :     m3[2][i] = m2[2][i] + m2[6][i];
; 263  :     m3[3][i] = m2[3][i] + m2[7][i];
; 264  :     m3[4][i] = m2[0][i] - m2[4][i];

	sub	r11d, ebx
	mov	DWORD PTR m3$[rsp+r14-4], eax
	lea	eax, DWORD PTR [r9+r10]
	mov	DWORD PTR m3$[rsp+r14+28], eax
	sub	r9d, r10d
	lea	eax, DWORD PTR [rdx+r8]
	sub	edx, r8d
	mov	DWORD PTR m3$[rsp+r14+60], eax
	lea	eax, DWORD PTR [rsi+rcx]
	mov	DWORD PTR m3$[rsp+r14+92], eax
	sub	esi, ecx
	mov	DWORD PTR m3$[rsp+r14+124], r11d
	mov	DWORD PTR m3$[rbp+r14-100], r9d
	mov	DWORD PTR m3$[rbp+r14-68], edx
	mov	DWORD PTR m3$[rbp+r14-36], esi

; 265  :     m3[5][i] = m2[1][i] - m2[5][i];
; 266  :     m3[6][i] = m2[2][i] - m2[6][i];
; 267  :     m3[7][i] = m2[3][i] - m2[7][i];
; 268  : 
; 269  :     m1[0][i] = m3[0][i] + m3[2][i];
; 270  :     m1[1][i] = m3[1][i] + m3[3][i];

	mov	eax, DWORD PTR m3$[rsp+r14+92]
	mov	ecx, DWORD PTR m3$[rsp+r14+60]
	mov	ebx, DWORD PTR m3$[rsp+r14+28]
	mov	edi, DWORD PTR m3$[rsp+r14-4]

; 271  :     m1[2][i] = m3[0][i] - m3[2][i];
; 272  :     m1[3][i] = m3[1][i] - m3[3][i];
; 273  :     m1[4][i] = m3[4][i] + m3[6][i];

	mov	r11d, DWORD PTR m3$[rsp+r14+124]

; 274  :     m1[5][i] = m3[5][i] + m3[7][i];

	mov	r9d, DWORD PTR m3$[rbp+r14-100]
	lea	r8d, DWORD PTR [rax+rbx]
	sub	ebx, eax
	mov	eax, DWORD PTR m3$[rbp+r14-68]
	lea	r10d, DWORD PTR [rcx+rdi]
	sub	edi, ecx
	lea	ecx, DWORD PTR [r9+rsi]

; 275  :     m1[6][i] = m3[4][i] - m3[6][i];
; 276  :     m1[7][i] = m3[5][i] - m3[7][i];

	sub	r9d, esi
	lea	edx, DWORD PTR [r11+rax]
	sub	r11d, eax

; 277  : 
; 278  :     m2[0][i] = m1[0][i] + m1[1][i];

	lea	eax, DWORD PTR [r10+r8]

; 279  :     m2[1][i] = m1[0][i] - m1[1][i];

	sub	r10d, r8d
	mov	DWORD PTR m2$[rbp+r14-260], eax

; 280  :     m2[2][i] = m1[2][i] + m1[3][i];

	lea	eax, DWORD PTR [rdi+rbx]
	mov	DWORD PTR m2$[rbp+r14-196], eax

; 281  :     m2[3][i] = m1[2][i] - m1[3][i];

	sub	edi, ebx

; 282  :     m2[4][i] = m1[4][i] + m1[5][i];

	lea	eax, DWORD PTR [rcx+rdx]
	mov	DWORD PTR m2$[rbp+r14-228], r10d
	mov	DWORD PTR m2$[rbp+r14-132], eax

; 283  :     m2[5][i] = m1[4][i] - m1[5][i];

	sub	edx, ecx

; 284  :     m2[6][i] = m1[6][i] + m1[7][i];

	lea	eax, DWORD PTR [r9+r11]
	mov	DWORD PTR m2$[rbp+r14-164], edi

; 285  :     m2[7][i] = m1[6][i] - m1[7][i];

	sub	r11d, r9d
	mov	DWORD PTR m2$[rbp+r14-100], edx
	mov	DWORD PTR m2$[rbp+r14-36], r11d
	mov	DWORD PTR m2$[rbp+r14-68], eax
	sub	r12, 1
	jne	$LL10@xCalcHADs8

; 261  :     m3[1][i] = m2[1][i] + m2[5][i];
; 262  :     m3[2][i] = m2[2][i] + m2[6][i];
; 263  :     m3[3][i] = m2[3][i] + m2[7][i];
; 264  :     m3[4][i] = m2[0][i] - m2[4][i];

	lea	r8, QWORD PTR m2$[rbp-232]
	npad	2
$LL13@xCalcHADs8:

; 286  :   }
; 287  : 
; 288  :   for (i = 0; i < 8; i++) {
; 289  :     for (j = 0; j < 8; j++) {
; 290  :       iSumHad += abs(m2[i][j]);

	mov	eax, DWORD PTR [r8-24]
	lea	r8, QWORD PTR [r8+32]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR [r8-52]
	xor	ecx, edx
	sub	ecx, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-48]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-44]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-40]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-36]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-28]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR [r8-32]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r13d, eax
	add	r13d, ecx
	sub	r15, 1
	jne	SHORT $LL13@xCalcHADs8

; 291  :     }
; 292  :   }
; 293  :   iSumHad -= abs(m2[0][0]);

	mov	eax, DWORD PTR m2$[rbp-256]

; 294  :   iSumHad = (iSumHad + 2) >> 2;
; 295  :   return(iSumHad);
; 296  : }

	lea	r11, QWORD PTR [rsp+768]
	mov	rbx, QWORD PTR [r11+48]
	cdq
	mov	rsi, QWORD PTR [r11+64]
	xor	eax, edx
	mov	rdi, QWORD PTR [r11+72]
	sub	eax, edx
	sub	r13d, eax
	lea	eax, DWORD PTR [r13+2]
	sar	eax, 2
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
xCalcHADs8x8_ISlice ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 8
pic_header_bits PROC

; 305  :   const kvz_config* cfg = &state->encoder_control->cfg;

	mov	r9, QWORD PTR [rcx]

; 306  : 
; 307  :   // nal type and slice header
; 308  :   uint64_t bits = 48 + 24;
; 309  : 
; 310  :   // entry points
; 311  :   bits += 12 * state->encoder_control->in.height_in_lcu;

	mov	eax, DWORD PTR [r9+2540]
	lea	edx, DWORD PTR [rax+rax*2]
	shl	edx, 2
	movsxd	r8, edx

; 312  : 
; 313  :   switch (cfg->hash) {

	mov	edx, DWORD PTR [r9+2364]
	add	r8, 72					; 00000048H
	sub	edx, 1
	je	SHORT $LN4@pic_header
	cmp	edx, 1
	jne	SHORT $LN6@pic_header

; 316  :       break;
; 317  : 
; 318  :     case KVZ_HASH_MD5:
; 319  :       bits += 456;

	add	r8, 456					; 000001c8H

; 320  :       break;

	jmp	SHORT $LN6@pic_header
$LN4@pic_header:

; 314  :     case KVZ_HASH_CHECKSUM:
; 315  :       bits += 168;

	add	r8, 168					; 000000a8H
$LN6@pic_header:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h

; 363  :   const int32_t frame = state->frame->num;

	mov	rax, QWORD PTR [rcx+40]

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	ecx, DWORD PTR [r9+8]
	mov	r10d, DWORD PTR [rax+8]

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	test	ecx, ecx
	jle	SHORT $LN18@pic_header
	mov	eax, r10d
	cdq
	idiv	ecx
	test	edx, edx
	je	SHORT $LN14@pic_header
	test	ecx, ecx
$LN18@pic_header:
	js	SHORT $LN13@pic_header
	test	r10d, r10d
	jne	SHORT $LN13@pic_header
$LN14@pic_header:
	mov	ecx, 1
	jmp	SHORT $LN15@pic_header
$LN13@pic_header:
	xor	ecx, ecx
$LN15@pic_header:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 330  :   if (state->frame->num == 0 && cfg->add_encoder_info) {

	test	ecx, ecx
	lea	rax, QWORD PTR [r8+613]
	cmove	rax, r8
	test	r10d, r10d
	jne	SHORT $LN16@pic_header
	cmp	DWORD PTR [r9+296], r10d
	je	SHORT $LN16@pic_header

; 331  :     bits += 1392;

	add	rax, 1392				; 00000570H
$LN16@pic_header:

; 332  :   }
; 333  : 
; 334  :   return bits;
; 335  : }

	ret	0
pic_header_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 112
pic_allocate_bits PROC

; 343  : {

	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 64					; 00000040H

; 344  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rbx, QWORD PTR [rcx]

; 345  : 
; 346  :   if (encoder->cfg.gop_len == 0 ||
; 347  :       state->frame->gop_offset == 0 ||

	xor	r13d, r13d
	mov	rsi, rcx
	movsx	r11d, BYTE PTR [rbx+300]
	lea	r12d, QWORD PTR [r13+1]
	test	r11b, r11b
	je	SHORT $LN10@pic_alloca
	mov	rdx, QWORD PTR [rcx+40]
	cmp	BYTE PTR [rdx+16], r13b
	je	SHORT $LN10@pic_alloca
	cmp	DWORD PTR [rdx+8], r13d
	je	SHORT $LN10@pic_alloca

; 353  :   } else {
; 354  :     state->frame->cur_gop_target_bits =

	mov	rax, QWORD PTR [rcx+32]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rcx+120]
	mov	QWORD PTR [rdx+120], rax
	jmp	$LN9@pic_alloca
$LN10@pic_alloca:

; 178  :   uint64_t bits_coded = state->frame->total_bits_coded;

	mov	rdi, QWORD PTR [rcx+40]
	mov	r9, QWORD PTR [rdi+96]

; 179  :   int pictures_coded = 0;
; 180  :   if(encoder->cfg.gop_len) {

	test	r11b, r11b
	je	SHORT $LN25@pic_alloca

; 181  :     pictures_coded = MAX(0, state->frame->num - CEILDIV(encoder->cfg.owf, encoder->cfg.gop_len)*encoder->cfg.gop_len);

	mov	ebp, DWORD PTR [rbx+172]
	lea	r8d, DWORD PTR [rbp-1]
	add	r8d, r11d
	mov	eax, r8d
	cdq
	idiv	r11d

; 182  :   }

	mov	eax, r13d
	sub	edx, r8d
	add	edx, DWORD PTR [rdi+8]
	cmovns	eax, edx

; 185  :   }
; 186  :     
; 187  :   if (encoder->cfg.gop_len > 0 && encoder->cfg.owf > 0) {

	mov	r10d, eax
	test	r11b, r11b
	jle	SHORT $LN32@pic_alloca
	test	ebp, ebp
	jle	SHORT $LN32@pic_alloca

; 188  :     // Subtract number of bits in the partially coded GOP.
; 189  :     bits_coded -= state->frame->cur_gop_bits_coded;

	sub	r9, QWORD PTR [rdi+104]
	jmp	SHORT $LN32@pic_alloca
$LN25@pic_alloca:

; 183  :   else {
; 184  :     pictures_coded = MAX(0, state->frame->num - encoder->cfg.owf);

	mov	r10d, DWORD PTR [rdi+8]
	sub	r10d, DWORD PTR [rbx+172]
	cmovs	r10d, r13d
$LN32@pic_alloca:

; 193  :   double gop_target_bits = -1;

	movsd	xmm2, QWORD PTR __real@bff0000000000000
	mov	eax, r11d
	cdq
	xorps	xmm3, xmm3

; 190  :   }
; 191  : 
; 192  :   smoothing_window = MAX(MIN_SMOOTHING_WINDOW, smoothing_window - encoder->cfg.gop_len / 2);

	sub	eax, edx
	mov	edx, DWORD PTR smoothing_window
	sar	eax, 1
	sub	edx, eax
	mov	eax, 40					; 00000028H
	cmp	edx, eax
	cmovl	edx, eax
$LN76@pic_alloca:

; 194  : 
; 195  :   while( gop_target_bits < 0 && smoothing_window < 150) {

	mov	DWORD PTR smoothing_window, edx
	cmp	edx, 150				; 00000096H
	jge	SHORT $LN70@pic_alloca

; 196  :     // Equation 12 from https://doi.org/10.1109/TIP.2014.2336550
; 197  :     gop_target_bits =

	movsx	eax, BYTE PTR [rbx+300]
	mov	r8d, r12d
	cmp	al, r12b
	jl	SHORT $LN37@pic_alloca
	mov	r8d, eax
$LN37@pic_alloca:
	lea	eax, DWORD PTR [r10+rdx]
	xorps	xmm0, xmm0
	movd	xmm2, eax
	cvtdq2pd xmm2, xmm2
	mulsd	xmm2, QWORD PTR [rbx+6456]
	test	r9, r9
	js	SHORT $LN74@pic_alloca
	cvtsi2sd xmm0, r9
	jmp	SHORT $LN75@pic_alloca
$LN74@pic_alloca:
	mov	rax, r9
	mov	rcx, r9
	shr	rcx, 1
	and	eax, r12d
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN75@pic_alloca:
	subsd	xmm2, xmm0
	movd	xmm1, edx
	movd	xmm0, r8d
	cvtdq2pd xmm0, xmm0
	cvtdq2pd xmm1, xmm1
	mulsd	xmm2, xmm0
	divsd	xmm2, xmm1

; 198  :       (encoder->target_avg_bppic * (pictures_coded + smoothing_window) - bits_coded)
; 199  :       * MAX(1, encoder->cfg.gop_len) / smoothing_window;
; 200  :     if(gop_target_bits < 0) {

	comisd	xmm2, xmm3
	jae	SHORT $LN70@pic_alloca

; 201  :       smoothing_window += 10;

	add	edx, 10
	jmp	$LN76@pic_alloca
$LN70@pic_alloca:

; 202  :     }
; 203  :   }
; 204  :   // Allocate at least 200 bits for each GOP like HM does.
; 205  :   return MAX(200, gop_target_bits);

	maxsd	xmm2, QWORD PTR __real@4069000000000000

; 348  :       state->frame->num == 0)
; 349  :   {
; 350  :     // A new GOP starts at this frame.
; 351  :     state->frame->cur_gop_target_bits = gop_allocate_bits(state);

	movsd	QWORD PTR [rdi+120], xmm2

; 352  :     state->frame->cur_gop_bits_coded  = 0;

	mov	rax, QWORD PTR [rsi+40]
	mov	QWORD PTR [rax+104], r13
$LN9@pic_alloca:

; 355  :       state->previous_encoder_state->frame->cur_gop_target_bits;
; 356  :   }
; 357  : 
; 358  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	r9, QWORD PTR [rsi+40]
	cmp	BYTE PTR [r9+83], r13b
	je	$LN11@pic_alloca
	cmp	BYTE PTR [rbx+2485], r13b
	je	$LN11@pic_alloca

; 359  :     int total_cost = 0;
; 360  :     for (int y = 0; y < encoder->cfg.height; y += 8) {

	mov	edi, r13d
	mov	QWORD PTR [rsp+120], r15
	mov	r15d, r13d
	movaps	XMMWORD PTR [rsp+48], xmm6
	movaps	XMMWORD PTR [rsp+32], xmm7
	cmp	DWORD PTR [rbx+16], r13d
	jle	$LN66@pic_alloca
	mov	eax, DWORD PTR [rbx+12]
	mov	QWORD PTR [rsp+112], r14
	npad	1
$LL4@pic_alloca:

; 361  :       for (int x = 0; x < encoder->cfg.width; x += 8) {

	mov	ebp, r13d
	test	eax, eax
	jle	$LN2@pic_alloca
	mov	eax, edi
	cdq
	and	edx, 63					; 0000003fH
	lea	r14d, DWORD PTR [rdx+rax]
	sar	r14d, 6
	npad	7
$LL7@pic_alloca:

; 362  :         int cost = xCalcHADs8x8_ISlice(state->tile->frame->source->y + x, y, state->tile->frame->source->stride);

	mov	rcx, QWORD PTR [rsi+48]
	mov	rdx, QWORD PTR [rcx]
	movsxd	rcx, ebp
	mov	r8, QWORD PTR [rdx]
	mov	edx, edi
	add	rcx, QWORD PTR [r8+16]
	mov	r8d, DWORD PTR [r8+72]
	call	xCalcHADs8x8_ISlice
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rdx, QWORD PTR [rsi+48]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 362  :         int cost = xCalcHADs8x8_ISlice(state->tile->frame->source->y + x, y, state->tile->frame->source->stride);

	mov	r9d, eax
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rcx, QWORD PTR [rsi]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 363  :         total_cost += cost;

	add	r15d, eax

; 364  :         kvz_get_lcu_stats(state, x / 64, y / 64)->i_cost += cost;

	mov	eax, ebp
	add	ebp, 8
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	r8d, DWORD PTR [rdx+16]
	add	r8d, r14d
	imul	r8d, DWORD PTR [rcx+2536]
	add	r8d, DWORD PTR [rdx+12]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 364  :         kvz_get_lcu_stats(state, x / 64, y / 64)->i_cost += cost;

	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	add	eax, r8d

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	rdx, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 364  :         kvz_get_lcu_stats(state, x / 64, y / 64)->i_cost += cost;

	mov	rax, QWORD PTR [rsi+40]
	mov	rcx, QWORD PTR [rax+160]
	add	DWORD PTR [rcx+rdx*8+64], r9d
	mov	eax, DWORD PTR [rbx+12]
	cmp	ebp, eax
	jl	SHORT $LL7@pic_alloca
$LN2@pic_alloca:

; 359  :     int total_cost = 0;
; 360  :     for (int y = 0; y < encoder->cfg.height; y += 8) {

	add	edi, 8
	cmp	edi, DWORD PTR [rbx+16]
	jl	$LL4@pic_alloca
	mov	r9, QWORD PTR [rsi+40]
	mov	r14, QWORD PTR [rsp+112]
$LN66@pic_alloca:
	movd	xmm0, r15d

; 365  :       }
; 366  :     }
; 367  :     state->frame->icost = total_cost;
; 368  :     state->frame->remaining_weight = total_cost;
; 369  : 
; 370  :     double bits = state->frame->cur_gop_target_bits / MAX(encoder->cfg.gop_len, 1);

	mov	r15, QWORD PTR [rsp+120]
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR [r9+208], xmm0
	mov	rax, QWORD PTR [rsi+40]
	movsd	QWORD PTR [rax+216], xmm0
	movsx	eax, BYTE PTR [rbx+300]
	cmp	al, r12b
	jle	SHORT $LN16@pic_alloca
	mov	r12d, eax
$LN16@pic_alloca:
	mov	rcx, QWORD PTR [rsi+40]

; 371  :     double alpha, beta = 0.5582;
; 372  :     if (bits * 40 < encoder->cfg.width * encoder->cfg.height) {

	mov	eax, DWORD PTR [rbx+12]
	imul	eax, DWORD PTR [rbx+16]
	movd	xmm0, r12d
	movsd	xmm6, QWORD PTR [rcx+120]
	cvtdq2pd xmm0, xmm0
	divsd	xmm6, xmm0
	movd	xmm0, eax
	movaps	xmm1, xmm6
	mulsd	xmm1, QWORD PTR __real@4044000000000000
	cvtdq2pd xmm0, xmm0
	comisd	xmm1, xmm0
	jae	SHORT $LN12@pic_alloca

; 373  :       alpha = 0.25;

	movsd	xmm7, QWORD PTR __real@3fd0000000000000

; 374  :     }

	jmp	SHORT $LN13@pic_alloca
$LN12@pic_alloca:

; 375  :     else {
; 376  :       alpha = 0.3;

	movsd	xmm7, QWORD PTR __real@3fd3333333333333
$LN13@pic_alloca:

; 377  :     }
; 378  :     return MAX(100, alpha*pow(state->frame->icost * 4 / bits, beta)*bits);

	movsd	xmm0, QWORD PTR [rcx+208]
	mulsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	xmm1, QWORD PTR __real@3fe1dcc63f141206
	divsd	xmm0, xmm6
	call	pow
	mulsd	xmm0, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	mulsd	xmm0, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
	jmp	$LN77@pic_alloca
$LN11@pic_alloca:

; 379  :   }
; 380  : 
; 381  :   if (encoder->cfg.gop_len <= 0) {

	cmp	BYTE PTR [rbx+300], r13b
	jg	SHORT $LN14@pic_alloca

; 382  :     return state->frame->cur_gop_target_bits;

	movsd	xmm0, QWORD PTR [r9+120]
	jmp	$LN1@pic_alloca
$LN14@pic_alloca:

; 305  :   const kvz_config* cfg = &state->encoder_control->cfg;

	mov	r10, QWORD PTR [rsi]

; 383  :   }
; 384  : 
; 385  :   const double pic_weight = encoder->gop_layer_weights[

	movsx	rax, BYTE PTR [r9+16]
	shl	rax, 6
	movsx	rax, BYTE PTR [rax+rbx+314]
	movsd	xmm0, QWORD PTR [rbx+rax*8+6464]

; 311  :   bits += 12 * state->encoder_control->in.height_in_lcu;

	mov	eax, DWORD PTR [r10+2540]
	lea	ecx, DWORD PTR [rax+rax*2]
	shl	ecx, 2
	movsxd	r8, ecx

; 312  : 
; 313  :   switch (cfg->hash) {

	mov	ecx, DWORD PTR [r10+2364]
	add	r8, 72					; 00000048H
	sub	ecx, r12d
	je	SHORT $LN45@pic_alloca
	cmp	ecx, r12d
	jne	SHORT $LN47@pic_alloca

; 316  :       break;
; 317  : 
; 318  :     case KVZ_HASH_MD5:
; 319  :       bits += 456;

	add	r8, 456					; 000001c8H

; 320  :       break;

	jmp	SHORT $LN47@pic_alloca
$LN45@pic_alloca:

; 314  :     case KVZ_HASH_CHECKSUM:
; 315  :       bits += 168;

	add	r8, 168					; 000000a8H
$LN47@pic_alloca:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	ecx, DWORD PTR [r10+8]
	mov	r11d, DWORD PTR [r9+8]

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	test	ecx, ecx
	jle	SHORT $LN78@pic_alloca
	mov	eax, r11d
	cdq
	idiv	ecx
	test	edx, edx
	je	SHORT $LN56@pic_alloca
	test	ecx, ecx
$LN78@pic_alloca:
	js	SHORT $LN54@pic_alloca
	test	r11d, r11d
	je	SHORT $LN56@pic_alloca
$LN54@pic_alloca:
	mov	r12d, r13d
$LN56@pic_alloca:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 330  :   if (state->frame->num == 0 && cfg->add_encoder_info) {

	test	r12d, r12d
	lea	rax, QWORD PTR [r8+613]
	cmove	rax, r8
	mov	rcx, rax
	test	r11d, r11d
	jne	SHORT $LN49@pic_alloca
	cmp	DWORD PTR [r10+296], r13d
	je	SHORT $LN49@pic_alloca

; 331  :     bits += 1392;

	lea	rcx, QWORD PTR [rax+1392]
$LN49@pic_alloca:

; 386  :     encoder->cfg.gop[state->frame->gop_offset].layer - 1];
; 387  :   const double pic_target_bits =

	mulsd	xmm0, QWORD PTR [r9+120]
	xorps	xmm1, xmm1
	test	rcx, rcx
	js	SHORT $LN72@pic_alloca
	cvtsi2sd xmm1, rcx
	jmp	SHORT $LN73@pic_alloca
$LN72@pic_alloca:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm1, rax
	addsd	xmm1, xmm1
$LN73@pic_alloca:
	subsd	xmm0, xmm1
$LN77@pic_alloca:

; 388  :     state->frame->cur_gop_target_bits * pic_weight - pic_header_bits(state);
; 389  :   // Allocate at least 100 bits for each picture like HM does.
; 390  :   return MAX(100, pic_target_bits);
; 391  : }

	maxsd	xmm0, QWORD PTR __real@4059000000000000
$LN1@pic_alloca:
	mov	rbx, QWORD PTR [rsp+128]
	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
pic_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
lambda$ = 48
lambda_to_qp PROC

; 394  : {

	sub	rsp, 40					; 00000028H

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si eax, xmm0

; 396  :   return CLIP_TO_QP(qp);

	cmp	al, 51					; 00000033H
	jg	SHORT $LN9@lambda_to_
	test	al, al
	jns	SHORT $LN6@lambda_to_
	xor	al, al

; 397  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@lambda_to_:

; 396  :   return CLIP_TO_QP(qp);

	mov	al, 51					; 00000033H
$LN6@lambda_to_:

; 397  : }

	add	rsp, 40					; 00000028H
	ret	0
lambda_to_qp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
tv1061 = 32
tv1042 = 40
state$ = 240
ctu_index$ = 248
last_ctu$ = 256
est_lambda$ = 264
target_bits$ = 272
solve_cubic_equation PROC

; 404  : {

	mov	rax, rsp
	movsd	QWORD PTR [rax+32], xmm3
	sub	rsp, 232				; 000000e8H
	movaps	XMMWORD PTR [rax-120], xmm11
	movaps	xmm11, xmm3
	mov	QWORD PTR [rax+24], rsi
	mov	rsi, rcx
	mov	QWORD PTR [rax-8], rdi
	mov	QWORD PTR [rax-24], r15
	movaps	XMMWORD PTR [rax-40], xmm6
	movaps	XMMWORD PTR [rax-56], xmm7

; 405  :   double best_lambda = 0.0;
; 406  :   double para_a = 0.0;
; 407  :   double para_b = 0.0;
; 408  :   double para_c = 0.0;
; 409  :   double para_d = 0.0;
; 410  :   double delta = 0.0;
; 411  :   double para_aa = 0.0;
; 412  :   double para_bb = 0.0;
; 413  :   double para_cc = 0.0;
; 414  :   for (int i = ctu_index; i < last_ctu; i++)

	movsd	xmm7, QWORD PTR __real@3fe0000000000000
	movaps	XMMWORD PTR [rax-72], xmm8
	xorps	xmm8, xmm8
	movaps	XMMWORD PTR [rax-88], xmm9
	xorps	xmm9, xmm9
	movaps	XMMWORD PTR [rax-104], xmm10
	xorps	xmm10, xmm10
	movaps	XMMWORD PTR [rsp+96], xmm12
	xorps	xmm12, xmm12
	movsxd	rdi, edx
	movsxd	r15, r8d
	movaps	XMMWORD PTR [rsp+80], xmm13
	xorps	xmm13, xmm13
	cmp	rdi, r15
	jge	$LN3@solve_cubi

; 428  :     para_a = para_a - c * pow(b, 3.0) / 6.0;
; 429  :     para_b = para_b + (pow(b, 2.0) / 2.0 + pow(b, 3.0)*log(d) / 2.0)*c;

	movsd	xmm7, QWORD PTR __real@bff0000000000000
	mov	QWORD PTR [rax+8], rbx
	movaps	xmm0, xmm7
	mov	rbx, QWORD PTR [rcx+232]
	mov	QWORD PTR [rax+16], rbp
	mov	rbp, QWORD PTR [rcx+240]
	divsd	xmm0, xmm3
	mov	QWORD PTR [rax-16], r14
	movaps	XMMWORD PTR [rsp+64], xmm14
	movsd	QWORD PTR tv1061[rsp], xmm0
	movaps	xmm0, xmm3
	movaps	XMMWORD PTR [rsp+48], xmm15
	call	log
	movsd	xmm11, QWORD PTR tv1061[rsp]
	lea	r14, QWORD PTR [rdi+rdi*8]
	movaps	xmm15, xmm0
	shl	r14, 3
	mulsd	xmm15, xmm0
	movaps	xmm14, xmm0
	movaps	xmm0, xmm15
	mulsd	xmm0, xmm14
	movsd	QWORD PTR tv1042[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	npad	5
$LL4@solve_cubi:

; 415  :   {
; 416  :     double a = 0.0;
; 417  :     double b = 0.0;
; 418  :     double c = 0.0;
; 419  :     double d = 0.0;
; 420  :     assert(!((state->c_para[i] <= 0) || (state->k_para[i] >= 0))); //Check C and K during each solution 

	comisd	xmm8, QWORD PTR [rbx+rdi*8]
	jae	SHORT $LN12@solve_cubi
	comisd	xmm8, QWORD PTR [rbp+rdi*8]
	ja	SHORT $LN13@solve_cubi
$LN12@solve_cubi:
	mov	r8d, 420				; 000001a4H
	lea	rdx, OFFSET FLAT:$SG4294955525
	lea	rcx, OFFSET FLAT:$SG4294955524
	call	QWORD PTR __imp__wassert
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	rbp, QWORD PTR [rsi+240]
	mov	rbx, QWORD PTR [rsi+232]
$LN13@solve_cubi:

; 421  : 
; 422  :     double CLCU = state->c_para[i];
; 423  :     double KLCU = state->k_para[i];
; 424  :     a = -CLCU * KLCU / pow(state->lcu_stats[i].pixels, KLCU - 1.0);

	mov	rax, QWORD PTR [rsi+160]
	movsd	xmm6, QWORD PTR [rbp+rdi*8]

; 425  :     b = -1.0 / (KLCU - 1.0);

	movaps	xmm1, xmm6
	subsd	xmm1, xmm0
	xorps	xmm0, xmm0
	mov	ecx, DWORD PTR [rax+r14+4]
	divsd	xmm7, xmm1
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsi2sd xmm0, rcx
	call	pow
	mulsd	xmm6, QWORD PTR [rbx+rdi*8]

; 426  :     d = est_lambda;
; 427  :     c = pow(a / d, b);

	movaps	xmm1, xmm7
	mulsd	xmm0, xmm11
	mulsd	xmm0, xmm6
	call	pow

; 428  :     para_a = para_a - c * pow(b, 3.0) / 6.0;
; 429  :     para_b = para_b + (pow(b, 2.0) / 2.0 + pow(b, 3.0)*log(d) / 2.0)*c;

	movsd	xmm6, QWORD PTR __real@3fe0000000000000
	movaps	xmm5, xmm0
	movaps	xmm2, xmm7

; 430  :     para_c = para_c - (pow(b, 3.0) / 2.0*pow(log(d), 2.0) + pow(b, 2.0)*log(d) + b)*c;

	movaps	xmm1, xmm15
	mulsd	xmm2, xmm7
	inc	rdi
	add	r14, 72					; 00000048H
	movaps	xmm4, xmm2
	movaps	xmm3, xmm2
	mulsd	xmm2, xmm14
	mulsd	xmm4, xmm7
	mulsd	xmm3, xmm6
	mulsd	xmm1, xmm4
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm5
	mulsd	xmm1, xmm6
	mulsd	xmm0, QWORD PTR __real@bfc5555555555555
	addsd	xmm1, xmm2

; 431  :     para_d = para_d + c * (1 + b * log(d) + pow(b, 2.0) / 2 * pow(log(d), 2.0) + pow(b, 3.0) / 6 * pow(log(d), 3.0));

	movaps	xmm2, xmm15
	mulsd	xmm2, xmm3
	addsd	xmm13, xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm14
	addsd	xmm1, xmm7
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm5
	addsd	xmm0, xmm3
	subsd	xmm10, xmm1
	movsd	xmm1, QWORD PTR tv1042[rsp]
	mulsd	xmm1, xmm4
	mulsd	xmm0, xmm5
	mulsd	xmm1, QWORD PTR __real@3fc5555555555555
	addsd	xmm9, xmm0
	movaps	xmm0, xmm14
	mulsd	xmm0, xmm7
	movsd	xmm7, QWORD PTR __real@bff0000000000000
	addsd	xmm2, xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm1, xmm0
	addsd	xmm2, xmm1
	mulsd	xmm2, xmm5
	addsd	xmm12, xmm2
	cmp	rdi, r15
	jl	$LL4@solve_cubi
	movsd	xmm11, QWORD PTR est_lambda$[rsp]
	movaps	xmm7, xmm6
	movaps	xmm15, XMMWORD PTR [rsp+48]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+216]
	mov	rbp, QWORD PTR [rsp+248]
	mov	rbx, QWORD PTR [rsp+240]
$LN3@solve_cubi:

; 432  :   }
; 433  : 
; 434  :   para_d = para_d - target_bits;

	subsd	xmm12, QWORD PTR target_bits$[rsp]

; 435  :   para_aa = para_b * para_b - 3 * para_a*para_c;
; 436  :   para_bb = para_b * para_c - 9 * para_a*para_d;
; 437  :   para_cc = para_c * para_c - 3 * para_b*para_d;
; 438  : 
; 439  :   delta = para_bb * para_bb - 4 * para_aa*para_cc;

	mov	r15, QWORD PTR [rsp+208]
	movaps	xmm4, xmm10
	mov	rdi, QWORD PTR [rsp+224]
	movaps	xmm5, xmm13
	mulsd	xmm5, QWORD PTR __real@4008000000000000
	movaps	xmm2, xmm9
	mov	rsi, QWORD PTR [rsp+256]
	mulsd	xmm4, xmm9
	mulsd	xmm2, xmm9
	movaps	xmm0, xmm5
	mulsd	xmm0, xmm10
	mulsd	xmm10, xmm10
	subsd	xmm2, xmm0
	movaps	xmm0, xmm13
	mulsd	xmm0, QWORD PTR __real@4022000000000000
	mulsd	xmm0, xmm12
	subsd	xmm4, xmm0
	movaps	xmm0, xmm9
	mulsd	xmm0, QWORD PTR __real@4008000000000000
	movaps	xmm3, xmm4
	mulsd	xmm0, xmm12
	movaps	xmm12, XMMWORD PTR [rsp+96]
	mulsd	xmm3, xmm4
	subsd	xmm10, xmm0
	mulsd	xmm10, xmm2
	mulsd	xmm10, QWORD PTR __real@4010000000000000
	subsd	xmm3, xmm10

; 440  : 
; 441  :   if (delta > 0.0)  //Check whether delta is right

	comisd	xmm3, xmm8
	jbe	$LN5@solve_cubi

; 442  :   {
; 443  :     double temp_x = 0.0;
; 444  :     double part1 = 0.0;
; 445  :     double part2 = 0.0;
; 446  :     double flag1 = 0.0;
; 447  :     double flag2 = 0.0;
; 448  :     part1 = para_aa * para_b + 3 * para_a*(-para_bb - pow(delta, 0.5)) / 2.0;
; 449  :     part2 = para_aa * para_b + 3 * para_a*(-para_bb + pow(delta, 0.5)) / 2.0;
; 450  :     if (part1 < 0.0) {

	movsd	xmm1, QWORD PTR __real@bfd5555555555555
	xorps	xmm6, xmm6
	sqrtsd	xmm6, xmm3
	mulsd	xmm2, xmm9
	movaps	xmm0, xmm6
	subsd	xmm6, xmm4
	addsd	xmm0, xmm4
	movaps	xmm3, xmm2
	mulsd	xmm6, xmm5
	mulsd	xmm0, xmm5
	mulsd	xmm6, xmm7
	mulsd	xmm0, xmm7
	movsd	xmm7, QWORD PTR __real@3fd5555555555555
	addsd	xmm6, xmm2
	subsd	xmm3, xmm0
	comisd	xmm3, xmm8
	jae	SHORT $LN7@solve_cubi

; 451  :       part1 = -part1;

	movaps	xmm3, xmm0

; 452  :       flag1 = -1.0;

	movaps	xmm10, xmm1
	subsd	xmm3, xmm2

; 453  :     }

	jmp	SHORT $LN8@solve_cubi
$LN7@solve_cubi:

; 454  :     else {
; 455  :       flag1 = 1.0;

	movaps	xmm10, xmm7
$LN8@solve_cubi:

; 456  :     }
; 457  :     if (part2 < 0.0) {

	comisd	xmm6, xmm8
	jae	SHORT $LN9@solve_cubi

; 458  :       part2 = -part2;

	xorps	xmm6, QWORD PTR __xmm@80000000000000008000000000000000

; 459  :       flag2 = -1.0;

	movaps	xmm8, xmm1

; 460  :     }

	jmp	SHORT $LN10@solve_cubi
$LN9@solve_cubi:

; 461  :     else {
; 462  :       flag2 = 1.0;

	movaps	xmm8, xmm7
$LN10@solve_cubi:

; 463  :     }
; 464  :     temp_x = (-para_b - flag1 * pow(part1, 1.0 / 3.0) - flag2 * pow(part2, 1.0 / 3.0)) / 3 / para_a;

	mulsd	xmm9, xmm1
	movaps	xmm0, xmm3
	movaps	xmm1, xmm7
	call	pow
	mulsd	xmm0, xmm10
	movaps	xmm1, xmm7
	subsd	xmm9, xmm0
	movaps	xmm0, xmm6
	call	pow
	mulsd	xmm0, xmm8
	subsd	xmm9, xmm0
	divsd	xmm9, xmm13

; 465  :     best_lambda = exp(temp_x);

	movaps	xmm0, xmm9
	call	exp
	movaps	xmm11, xmm0
$LN5@solve_cubi:

; 466  :   }
; 467  :   else {
; 468  :     best_lambda = est_lambda;  //Use the original picture estimated lambda for the current CTU
; 469  :   }
; 470  :   best_lambda = CLIP(0.001, 100000000.0, best_lambda);

	minsd	xmm11, QWORD PTR __real@4197d78400000000
	movsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movaps	xmm13, XMMWORD PTR [rsp+80]
	movaps	xmm10, XMMWORD PTR [rsp+128]
	movaps	xmm9, XMMWORD PTR [rsp+144]
	comisd	xmm11, xmm0
	movaps	xmm8, XMMWORD PTR [rsp+160]
	movaps	xmm7, XMMWORD PTR [rsp+176]
	movaps	xmm6, XMMWORD PTR [rsp+192]
	jb	SHORT $LN16@solve_cubi

; 471  : 
; 472  :   return best_lambda;

	movaps	xmm0, xmm11
$LN16@solve_cubi:

; 473  : }

	movaps	xmm11, XMMWORD PTR [rsp+112]
	add	rsp, 232				; 000000e8H
	ret	0
solve_cubic_equation ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 192
ctu_count$ = 200
est_lambda$ = 208
calculate_weights PROC

; 475  : static INLINE double calculate_weights(encoder_state_t* const state, const int ctu_count, double est_lambda) {

	mov	rax, rsp
	push	r14
	push	r15
	sub	rsp, 168				; 000000a8H
	movaps	XMMWORD PTR [rax-72], xmm8
	xorps	xmm8, xmm8

; 476  :   double total_weight = 0;
; 477  :   for(int i = 0; i < ctu_count; i++) {

	movsxd	r15, edx
	mov	r14, rcx
	test	edx, edx
	jle	$LN13@calculate_

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	rbp, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+24], rsi
	xor	esi, esi
	mov	QWORD PTR [rax+32], rdi
	mov	edi, esi
	mov	QWORD PTR [rax-24], r12
	mov	r12, 4576918229304087675		; 3f847ae147ae147bH
	movaps	XMMWORD PTR [rax-40], xmm6
	movaps	XMMWORD PTR [rax-56], xmm7
	movaps	XMMWORD PTR [rax-88], xmm9
	movaps	XMMWORD PTR [rax-104], xmm10
	movsd	xmm10, QWORD PTR __real@bff0000000000000
	movaps	XMMWORD PTR [rax-120], xmm11
	movaps	xmm9, xmm10
	movsd	xmm11, QWORD PTR __xmm@80000000000000008000000000000000
	movaps	XMMWORD PTR [rsp+48], xmm12
	movsd	xmm12, QWORD PTR __real@3ff0000000000000
	movaps	XMMWORD PTR [rsp+32], xmm13
	movsd	xmm13, QWORD PTR __real@3f847ae147ae147b
	divsd	xmm9, xmm2
	npad	5
$LL4@calculate_:

; 478  :     double c_lcu = state->frame->c_para[i];
; 479  :     double k_lcu = state->frame->k_para[i];
; 480  :     double a = -c_lcu * k_lcu / pow(state->frame->lcu_stats[i].pixels, k_lcu - 1.0);

	mov	rax, QWORD PTR [rbp+240]
	xorps	xmm0, xmm0
	mov	rbx, QWORD PTR [rbp+160]
	movsd	xmm7, QWORD PTR [rax+rsi*8]
	mov	eax, DWORD PTR [rbx+rdi+4]
	movaps	xmm6, xmm7
	subsd	xmm6, xmm12
	cvtsi2sd xmm0, rax
	movaps	xmm1, xmm6
	xorps	xmm1, xmm11
	call	pow
	mov	rax, QWORD PTR [rbp+232]

; 481  :     double b = -1.0 / (k_lcu - 1.0);

	movaps	xmm1, xmm10
	divsd	xmm1, xmm6
	mulsd	xmm7, QWORD PTR [rax+rsi*8]
	mulsd	xmm0, xmm9
	mulsd	xmm0, xmm7

; 482  :     state->frame->lcu_stats[i].original_weight = state->frame->lcu_stats[i].weight = pow(a / est_lambda, b);

	call	pow
	movsd	QWORD PTR [rbx+rdi+8], xmm0
	mov	rax, QWORD PTR [r14+40]
	mov	rcx, QWORD PTR [rax+160]
	movsd	QWORD PTR [rcx+rdi+16], xmm0

; 483  :     if (state->frame->lcu_stats[i].weight < 0.01) {

	mov	rax, QWORD PTR [r14+40]
	mov	rcx, QWORD PTR [rax+160]
	comisd	xmm13, QWORD PTR [rcx+rdi+8]
	jbe	SHORT $LN12@calculate_

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	QWORD PTR [rcx+rdi+8], r12
$LN12@calculate_:

; 485  :     }
; 486  :     total_weight += state->frame->lcu_stats[i].weight;

	mov	rbp, QWORD PTR [r14+40]
	inc	rsi
	mov	rax, QWORD PTR [rbp+160]
	addsd	xmm8, QWORD PTR [rax+rdi+8]
	add	rdi, 72					; 00000048H
	cmp	rsi, r15
	jl	$LL4@calculate_

; 487  :   }
; 488  :   return total_weight;

	movaps	xmm13, XMMWORD PTR [rsp+32]
	movaps	xmm0, xmm8
	movaps	xmm12, XMMWORD PTR [rsp+48]
	movaps	xmm11, XMMWORD PTR [rsp+64]
	movaps	xmm10, XMMWORD PTR [rsp+80]
	movaps	xmm9, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+128]
	movaps	xmm6, XMMWORD PTR [rsp+144]
	mov	r12, QWORD PTR [rsp+160]
	mov	rdi, QWORD PTR [rsp+216]
	mov	rsi, QWORD PTR [rsp+208]
	mov	rbp, QWORD PTR [rsp+200]
	mov	rbx, QWORD PTR [rsp+192]

; 489  : }

	movaps	xmm8, XMMWORD PTR [rsp+112]
	add	rsp, 168				; 000000a8H
	pop	r15
	pop	r14
	ret	0
$LN13@calculate_:
	movaps	xmm8, XMMWORD PTR [rsp+112]
	xorps	xmm0, xmm0
	add	rsp, 168				; 000000a8H
	pop	r15
	pop	r14
	ret	0
calculate_weights ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
tv3153 = 48
iteration_number$1$ = 288
state$ = 288
est_lambda$2$ = 296
tv3166 = 304
kvz_estimate_pic_lambda PROC

; 492  : void kvz_estimate_pic_lambda(encoder_state_t * const state) {

$LN187:
	mov	rax, rsp
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	sub	rsp, 240				; 000000f0H

; 493  :   const encoder_control_t * const encoder = state->encoder_control;
; 494  : 
; 495  :   const int layer = encoder->cfg.gop[state->frame->gop_offset].layer - (state->frame->is_irap ? 1 : 0);

	mov	r8, QWORD PTR [rcx+40]
	xor	r12d, r12d
	mov	rbp, QWORD PTR [rcx]
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-88], xmm7
	movaps	XMMWORD PTR [rax-104], xmm8
	movzx	edx, BYTE PTR [r8+83]
	movsx	rax, BYTE PTR [r8+16]
	shl	rax, 6
	test	dl, dl
	movaps	XMMWORD PTR [rsp+112], xmm12

; 496  :   const int ctu_count = state->tile->frame->height_in_lcu * state->tile->frame->width_in_lcu;
; 497  : 
; 498  :   double alpha;
; 499  :   double beta;
; 500  :   if(state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	movsd	xmm12, QWORD PTR __real@3ff0000000000000
	movaps	XMMWORD PTR [rsp+80], xmm14
	movsx	esi, BYTE PTR [rax+rbp+314]
	mov	eax, r12d
	movaps	xmm14, XMMWORD PTR __xmm@80000000000000008000000000000000
	setne	al
	sub	esi, eax
	mov	rax, QWORD PTR [rcx+48]
	mov	rcx, QWORD PTR [rax]
	mov	r14d, DWORD PTR [rcx+28]
	imul	r14d, DWORD PTR [rcx+24]
	test	dl, dl
	je	SHORT $LN173@kvz_estima
	cmp	BYTE PTR [rbp+2485], r12b
	je	SHORT $LN173@kvz_estima
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [r8+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+368]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN66@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN66@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 502  :     alpha = state->frame->new_ratecontrol->intra_alpha;

	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+176]
	movsd	xmm7, QWORD PTR [rcx+288]

; 503  :     beta = state->frame->new_ratecontrol->intra_beta;

	movsd	xmm8, QWORD PTR [rcx+296]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+368]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN94@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN173@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 506  :   else if(state->frame->poc == 0) {

	cmp	DWORD PTR [r8+12], r12d
	jne	$LN16@kvz_estima

; 507  :     alpha = state->frame->rc_alpha;

	movsd	xmm7, QWORD PTR [r8+136]

; 508  :     beta = state->frame->rc_beta;

	movsd	xmm8, QWORD PTR [r8+144]
$LN94@kvz_estima:

; 515  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->ck_frame_lock);
; 516  :   }
; 517  :   double bits = pic_allocate_bits(state);

	mov	QWORD PTR [rsp+312], rbx
	mov	rcx, rdi
	movaps	XMMWORD PTR [rsp+208], xmm6
	movaps	XMMWORD PTR [rsp+160], xmm9
	movaps	XMMWORD PTR [rsp+64], xmm15
	call	pic_allocate_bits

; 518  :   state->frame->cur_pic_target_bits = bits;

	mov	rax, QWORD PTR [rdi+40]
	movaps	xmm9, xmm0

; 519  : 
; 520  :   double est_lambda;
; 521  :   int32_t num_pixels = state->encoder_control->cfg.width * state->encoder_control->cfg.height;
; 522  :   double bpp = bits / num_pixels;
; 523  :   if (state->frame->is_irap) {

	movsd	xmm15, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [rax+128], xmm0
	movaps	xmm0, xmm12
	mov	rax, QWORD PTR [rdi]
	mov	rbx, QWORD PTR [rdi+40]
	mov	ecx, DWORD PTR [rax+16]
	imul	ecx, DWORD PTR [rax+12]
	movd	xmm1, ecx
	cvtdq2pd xmm1, xmm1
	divsd	xmm0, xmm1
	movaps	xmm6, xmm0
	mulsd	xmm6, xmm9
	cmp	BYTE PTR [rbx+83], r12b
	je	$LN18@kvz_estima

; 524  :     if(encoder->cfg.intra_bit_allocation) {

	cmp	BYTE PTR [rbp+2485], r12b
	je	$LN20@kvz_estima

; 525  :       state->frame->i_bits_left = bits;
; 526  :       double temp = pow(state->frame->icost / num_pixels, BETA1);

	movsd	xmm1, QWORD PTR __real@3ff406f694467382
	movsd	QWORD PTR [rbx+224], xmm9
	mov	rbx, QWORD PTR [rdi+40]
	mulsd	xmm0, QWORD PTR [rbx+208]
	call	pow

; 527  :       est_lambda = alpha / 256 * pow(temp/bpp, beta);

	divsd	xmm0, xmm6
	movaps	xmm1, xmm8
	call	pow
	movaps	xmm6, xmm0
	mulsd	xmm6, xmm7
	mulsd	xmm6, QWORD PTR __real@3f70000000000000

; 528  :     }

	jmp	$LN19@kvz_estima
$LN16@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [r8+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+352]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN85@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN85@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 512  :     alpha = -state->frame->new_ratecontrol->pic_c_para[layer] *

	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+176]
	movsxd	rax, esi
	movsd	xmm8, QWORD PTR [rcx+rax*8+144]
	movaps	xmm7, xmm8

; 513  :       state->frame->new_ratecontrol->pic_k_para[layer];
; 514  :     beta = state->frame->new_ratecontrol->pic_k_para[layer] - 1;

	subsd	xmm8, xmm12
	mulsd	xmm7, QWORD PTR [rcx+rax*8+96]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+352]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 512  :     alpha = -state->frame->new_ratecontrol->pic_c_para[layer] *

	xorps	xmm7, xmm14
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	$LN94@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN20@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 531  :       est_lambda = alpha * pow(bpp, beta) * 0.5;

	movaps	xmm1, xmm8
	movaps	xmm0, xmm6
	call	pow
	movaps	xmm6, xmm0
	mulsd	xmm6, xmm7
	mulsd	xmm6, xmm15

; 532  :     }
; 533  :   }

	jmp	SHORT $LN19@kvz_estima
$LN18@kvz_estima:

; 534  :   else {
; 535  :     est_lambda = alpha * pow(bpp, beta);

	movaps	xmm1, xmm8
	movaps	xmm0, xmm6
	call	pow
	movaps	xmm6, xmm0
	mulsd	xmm6, xmm7
$LN19@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [rbx+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+360]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN103@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN103@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 540  :   if ((temp_lambda = state->frame->new_ratecontrol->previous_lambdas[layer]) > 0.0) {

	mov	rax, QWORD PTR [rdi+40]
	mov	QWORD PTR [rsp+224], r15
	movaps	XMMWORD PTR [rsp+144], xmm10
	movsd	xmm10, QWORD PTR __real@3fb999999999999a
	mov	rcx, QWORD PTR [rax+176]
	movaps	XMMWORD PTR [rsp+128], xmm11
	xorps	xmm11, xmm11
	movsxd	r15, esi
	movaps	XMMWORD PTR [rsp+96], xmm13
	movsd	xmm13, QWORD PTR __real@40c3880000000000
	movsd	QWORD PTR est_lambda$2$[rsp], xmm10
	movsd	xmm0, QWORD PTR [rcx+r15*8+192]
	comisd	xmm0, xmm11
	jbe	SHORT $LN37@kvz_estima

; 541  :     temp_lambda = CLIP(0.1, 10000.0, temp_lambda);

	minsd	xmm0, xmm13
	comisd	xmm0, xmm10
	jae	SHORT $LN33@kvz_estima
	movaps	xmm0, xmm10
$LN33@kvz_estima:

; 542  :     est_lambda = CLIP(temp_lambda * pow(2.0, -1), temp_lambda * 2, est_lambda);

	movaps	xmm1, xmm0
	addsd	xmm1, xmm0
	minsd	xmm1, xmm6
	movaps	xmm6, xmm0
	mulsd	xmm6, xmm15
	comisd	xmm6, xmm1
	ja	SHORT $LN37@kvz_estima
	movaps	xmm6, xmm1
$LN37@kvz_estima:

; 543  :   }
; 544  : 
; 545  :   if((temp_lambda = state->frame->new_ratecontrol->previous_frame_lambda) > 0.0) {

	movsd	xmm0, QWORD PTR [rcx+248]
	comisd	xmm0, xmm11
	jbe	SHORT $LN49@kvz_estima

; 546  :     temp_lambda = CLIP(0.1, 2000.0, temp_lambda);

	minsd	xmm0, QWORD PTR __real@409f400000000000
	comisd	xmm0, xmm10
	jae	SHORT $LN45@kvz_estima
	movaps	xmm0, xmm10
$LN45@kvz_estima:

; 547  :     est_lambda = CLIP(temp_lambda * pow(2.0, -10.0 / 3.0), temp_lambda * pow(2.0, 10.0 / 3.0), est_lambda);

	movaps	xmm1, xmm0
	mulsd	xmm1, QWORD PTR __real@402428a2f98d728b
	minsd	xmm1, xmm6
	movaps	xmm6, xmm0
	mulsd	xmm6, QWORD PTR __real@3fb965fea53d6e3c
	comisd	xmm6, xmm1
	ja	SHORT $LN49@kvz_estima
	movaps	xmm6, xmm1
$LN49@kvz_estima:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+360]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN112@kvz_estima

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN112@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 551  :   est_lambda = CLIP(0.1, 10000.0, est_lambda);

	minsd	xmm6, xmm13
	comisd	xmm6, xmm10
	jb	SHORT $LN55@kvz_estima
	movsd	QWORD PTR est_lambda$2$[rsp], xmm6
	movaps	xmm10, xmm6
$LN55@kvz_estima:

; 552  : 
; 553  :   double total_weight = 0;
; 554  : 
; 555  :   if(!state->frame->is_irap) {

	mov	rsi, QWORD PTR [rdi+40]
	movsxd	rbp, r14d
	cmp	BYTE PTR [rsi+83], r12b
	jne	$LN24@kvz_estima

; 556  :     double best_lambda = est_lambda;
; 557  :     if(!state->encoder_control->cfg.frame_allocation) {

	mov	rax, QWORD PTR [rdi]
	movaps	xmm15, xmm10
	movsd	xmm13, QWORD PTR __real@bff0000000000000
	mov	rcx, rsi
	mov	QWORD PTR [rsp+232], r13
	cmp	BYTE PTR [rax+2483], r12b
	jne	$LN3@kvz_estima
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 112  :   static_cast<rw_lock_internal*>(*rwlock)->lock->lock_shared();

	mov	rax, QWORD PTR [rsi+176]
	mov	rcx, QWORD PTR [rax+r15*8+304]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 54   :         _Smtx_lock_shared(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_lock_shared
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 559  :       memcpy(state->frame->c_para, state->frame->new_ratecontrol->c_para[layer], ctu_count * sizeof(double));

	mov	rcx, QWORD PTR [rdi+40]
	lea	rbx, QWORD PTR [rbp*8]
	mov	r8, rbx
	mov	rdx, QWORD PTR [rcx+176]
	mov	rcx, QWORD PTR [rcx+232]
	mov	rdx, QWORD PTR [rdx+r15*8]
	call	memcpy

; 560  :       memcpy(state->frame->k_para, state->frame->new_ratecontrol->k_para[layer], ctu_count * sizeof(double));

	mov	rcx, QWORD PTR [rdi+40]
	mov	r8, rbx
	mov	rdx, QWORD PTR [rcx+176]
	mov	rcx, QWORD PTR [rcx+240]
	mov	rdx, QWORD PTR [rdx+r15*8+48]
	call	memcpy

; 561  :       pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	rax, QWORD PTR [rdi+40]
	mov	rdx, QWORD PTR [rax+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 125  :   if (static_cast<rw_lock_internal*>(*rwlock)->write_lock) {

	mov	rcx, QWORD PTR [rdx+r15*8+304]
	cmp	BYTE PTR [rcx+8], r12b
	je	SHORT $LN121@kvz_estima

; 126  :     static_cast<rw_lock_internal*>(*rwlock)->write_lock = false;

	mov	BYTE PTR [rcx+8], r12b

; 127  :     static_cast<rw_lock_internal*>(*rwlock)->lock->unlock();

	mov	rcx, QWORD PTR [rdx+r15*8+304]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 50   :         _Smtx_unlock_exclusive(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_exclusive
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 128  :   }

	jmp	SHORT $LN127@kvz_estima
$LN121@kvz_estima:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 62   :         _Smtx_unlock_shared(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_shared
$LN127@kvz_estima:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 562  :       temp_lambda = est_lambda;

	movaps	xmm15, xmm10

; 563  :       double taylor_e3;
; 564  :       int iteration_number = 0;

	mov	DWORD PTR iteration_number$1$[rsp], r12d
	mov	esi, r12d
	npad	6
$LL4@kvz_estima:

; 567  :         best_lambda = temp_lambda = solve_cubic_equation(state->frame, 0, ctu_count, temp_lambda, bits);

	mov	rcx, QWORD PTR [rdi+40]
	movaps	xmm3, xmm15
	mov	r8d, r14d
	movsd	QWORD PTR [rsp+32], xmm9
	xor	edx, edx
	movaps	xmm8, xmm11
	call	solve_cubic_equation
	movaps	xmm10, xmm0
	movaps	xmm15, xmm0
	unpcklpd xmm10, xmm10
	mov	rbx, r12

; 568  :         for (int i = 0; i < ctu_count; ++i) {

	test	r14d, r14d
	jle	$LN152@kvz_estima
	cmp	r14d, 2
	jb	$LN152@kvz_estima

; 569  :           double CLCU = state->frame->c_para[i];
; 570  :           double KLCU = state->frame->k_para[i];

	mov	rax, QWORD PTR [rdi+40]
	xorps	xmm0, xmm0
	xorps	xmm8, xmm8
	movaps	XMMWORD PTR tv3153[rsp], xmm0
	mov	rcx, QWORD PTR [rax+232]
	mov	r13, QWORD PTR [rax+240]

; 571  :           double a = -CLCU * KLCU / pow(state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	mov	r15, QWORD PTR [rax+160]
	mov	QWORD PTR tv3166[rsp], rcx
	mov	ecx, r14d
	and	ecx, -2147483647			; ffffffff80000001H
	jge	SHORT $LN175@kvz_estima

; 565  :       do {
; 566  :         taylor_e3 = 0.0;

	dec	ecx
	or	ecx, -2
	inc	ecx
$LN175@kvz_estima:

; 569  :           double CLCU = state->frame->c_para[i];
; 570  :           double KLCU = state->frame->k_para[i];

	movaps	xmm13, XMMWORD PTR __xmm@bff0000000000000bff0000000000000
	mov	eax, r14d
	movaps	xmm12, XMMWORD PTR tv3153[rsp]
	sub	eax, ecx
	mov	rbp, QWORD PTR tv3166[rsp]
	xor	esi, esi
	movsxd	r12, eax
	npad	1
$LL7@kvz_estima:
	movups	xmm2, XMMWORD PTR [r13+rbx*8]

; 571  :           double a = -CLCU * KLCU / pow(state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	movd	xmm1, DWORD PTR [rsi+r15+4]
	movd	xmm0, DWORD PTR [rsi+r15+76]
	movaps	xmm7, xmm2
	subpd	xmm7, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movups	xmm6, XMMWORD PTR [rbp+rbx*8]
	punpckldq xmm1, xmm0
	cvtdq2pd xmm3, xmm1
	movaps	xmm1, xmm7
	movaps	xmm0, xmm3
	cmppd	xmm0, xmm12, 1
	mulpd	xmm6, xmm2
	andps	xmm0, XMMWORD PTR __xmm@41f000000000000041f0000000000000
	addpd	xmm0, xmm3
	call	__vdecl_pow2
	divpd	xmm6, xmm0

; 572  :           double b = -1.0 / (KLCU - 1.0);

	movaps	xmm1, xmm13
	xorps	xmm6, xmm14

; 573  :           taylor_e3 += pow(a / best_lambda, b);

	divpd	xmm6, xmm10
	divpd	xmm1, xmm7
	movaps	xmm0, xmm6
	call	__vdecl_pow2
	add	rbx, 2
	add	rsi, 144				; 00000090H
	addpd	xmm8, xmm0
	cmp	rbx, r12
	jl	SHORT $LL7@kvz_estima

; 565  :       do {
; 566  :         taylor_e3 = 0.0;

	movsd	xmm12, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm8
	movsd	xmm13, QWORD PTR __real@bff0000000000000
	mov	esi, DWORD PTR iteration_number$1$[rsp]
	unpckhpd xmm0, xmm8
	addsd	xmm8, xmm0
	movsxd	rbp, r14d
$LN152@kvz_estima:

; 568  :         for (int i = 0; i < ctu_count; ++i) {

	cmp	rbx, rbp
	jge	$LN6@kvz_estima

; 569  :           double CLCU = state->frame->c_para[i];
; 570  :           double KLCU = state->frame->k_para[i];

	mov	rax, QWORD PTR [rdi+40]
	lea	rsi, QWORD PTR [rbx+rbx*8]
	movaps	xmm10, xmm13
	shl	rsi, 3
	divsd	xmm10, xmm15
	mov	r15, QWORD PTR [rax+240]
	mov	r12, QWORD PTR [rax+232]

; 571  :           double a = -CLCU * KLCU / pow(state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	mov	r13, QWORD PTR [rax+160]
	npad	5
$LL151@kvz_estima:
	mov	eax, DWORD PTR [rsi+r13+4]
	xorps	xmm0, xmm0
	movsd	xmm6, QWORD PTR [r15+rbx*8]
	movaps	xmm7, xmm6
	subsd	xmm7, xmm12
	cvtsi2sd xmm0, rax
	movaps	xmm1, xmm7
	xorps	xmm1, xmm14
	call	pow

; 573  :           taylor_e3 += pow(a / best_lambda, b);

	mulsd	xmm0, QWORD PTR [r12+rbx*8]
	movaps	xmm1, xmm13
	divsd	xmm1, xmm7
	mulsd	xmm6, xmm10
	mulsd	xmm0, xmm6
	call	pow
	inc	rbx
	addsd	xmm8, xmm0
	add	rsi, 72					; 00000048H
	cmp	rbx, rbp
	jl	SHORT $LL151@kvz_estima
	mov	esi, DWORD PTR iteration_number$1$[rsp]
$LN6@kvz_estima:

; 574  :         }
; 575  :         iteration_number++;

	inc	esi

; 576  :       }
; 577  :       while (fabs(taylor_e3 - bits) > 0.01 && iteration_number <= 11);

	subsd	xmm8, xmm9
	mov	DWORD PTR iteration_number$1$[rsp], esi
	andps	xmm8, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	comisd	xmm8, QWORD PTR __real@3f847ae147ae147b
	jbe	SHORT $LN27@kvz_estima
	mov	r12d, 0
	cmp	esi, 11
	jle	$LL4@kvz_estima
$LN27@kvz_estima:

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	rsi, QWORD PTR [rdi+40]
	xor	r12d, r12d
	movsd	xmm10, QWORD PTR est_lambda$2$[rsp]
	mov	rcx, rsi
$LN3@kvz_estima:

; 397  : }
; 398  : 
; 399  : static double solve_cubic_equation(const encoder_state_config_frame_t * const state,
; 400  :                             int ctu_index,
; 401  :                             int last_ctu,
; 402  :                             double est_lambda,
; 403  :                             double target_bits) 
; 404  : {
; 405  :   double best_lambda = 0.0;
; 406  :   double para_a = 0.0;
; 407  :   double para_b = 0.0;
; 408  :   double para_c = 0.0;
; 409  :   double para_d = 0.0;
; 410  :   double delta = 0.0;
; 411  :   double para_aa = 0.0;
; 412  :   double para_bb = 0.0;
; 413  :   double para_cc = 0.0;
; 414  :   for (int i = ctu_index; i < last_ctu; i++)
; 415  :   {
; 416  :     double a = 0.0;
; 417  :     double b = 0.0;
; 418  :     double c = 0.0;
; 419  :     double d = 0.0;
; 420  :     assert(!((state->c_para[i] <= 0) || (state->k_para[i] >= 0))); //Check C and K during each solution 
; 421  : 
; 422  :     double CLCU = state->c_para[i];
; 423  :     double KLCU = state->k_para[i];
; 424  :     a = -CLCU * KLCU / pow(state->lcu_stats[i].pixels, KLCU - 1.0);
; 425  :     b = -1.0 / (KLCU - 1.0);
; 426  :     d = est_lambda;
; 427  :     c = pow(a / d, b);
; 428  :     para_a = para_a - c * pow(b, 3.0) / 6.0;
; 429  :     para_b = para_b + (pow(b, 2.0) / 2.0 + pow(b, 3.0)*log(d) / 2.0)*c;
; 430  :     para_c = para_c - (pow(b, 3.0) / 2.0*pow(log(d), 2.0) + pow(b, 2.0)*log(d) + b)*c;
; 431  :     para_d = para_d + c * (1 + b * log(d) + pow(b, 2.0) / 2 * pow(log(d), 2.0) + pow(b, 3.0) / 6 * pow(log(d), 3.0));
; 432  :   }
; 433  : 
; 434  :   para_d = para_d - target_bits;
; 435  :   para_aa = para_b * para_b - 3 * para_a*para_c;
; 436  :   para_bb = para_b * para_c - 9 * para_a*para_d;
; 437  :   para_cc = para_c * para_c - 3 * para_b*para_d;
; 438  : 
; 439  :   delta = para_bb * para_bb - 4 * para_aa*para_cc;
; 440  : 
; 441  :   if (delta > 0.0)  //Check whether delta is right
; 442  :   {
; 443  :     double temp_x = 0.0;
; 444  :     double part1 = 0.0;
; 445  :     double part2 = 0.0;
; 446  :     double flag1 = 0.0;
; 447  :     double flag2 = 0.0;
; 448  :     part1 = para_aa * para_b + 3 * para_a*(-para_bb - pow(delta, 0.5)) / 2.0;
; 449  :     part2 = para_aa * para_b + 3 * para_a*(-para_bb + pow(delta, 0.5)) / 2.0;
; 450  :     if (part1 < 0.0) {
; 451  :       part1 = -part1;
; 452  :       flag1 = -1.0;
; 453  :     }
; 454  :     else {
; 455  :       flag1 = 1.0;
; 456  :     }
; 457  :     if (part2 < 0.0) {
; 458  :       part2 = -part2;
; 459  :       flag2 = -1.0;
; 460  :     }
; 461  :     else {
; 462  :       flag2 = 1.0;
; 463  :     }
; 464  :     temp_x = (-para_b - flag1 * pow(part1, 1.0 / 3.0) - flag2 * pow(part2, 1.0 / 3.0)) / 3 / para_a;
; 465  :     best_lambda = exp(temp_x);
; 466  :   }
; 467  :   else {
; 468  :     best_lambda = est_lambda;  //Use the original picture estimated lambda for the current CTU
; 469  :   }
; 470  :   best_lambda = CLIP(0.001, 100000000.0, best_lambda);
; 471  : 
; 472  :   return best_lambda;
; 473  : }
; 474  : 
; 475  : static INLINE double calculate_weights(encoder_state_t* const state, const int ctu_count, double est_lambda) {
; 476  :   double total_weight = 0;
; 477  :   for(int i = 0; i < ctu_count; i++) {

	test	rbp, rbp
	jle	$LN130@kvz_estima
	movsd	xmm10, QWORD PTR __real@3f847ae147ae147b
	movaps	xmm8, xmm13
	divsd	xmm8, xmm15
	mov	r15, r12
	mov	r14, r12

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	r13, 4576918229304087675		; 3f847ae147ae147bH
	npad	6
$LL131@kvz_estima:

; 478  :     double c_lcu = state->frame->c_para[i];
; 479  :     double k_lcu = state->frame->k_para[i];

	mov	rax, QWORD PTR [rsi+240]
	xorps	xmm0, xmm0

; 480  :     double a = -c_lcu * k_lcu / pow(state->frame->lcu_stats[i].pixels, k_lcu - 1.0);

	mov	rbx, QWORD PTR [rsi+160]
	movsd	xmm7, QWORD PTR [rax+r15*8]
	mov	eax, DWORD PTR [rbx+r14+4]
	movaps	xmm6, xmm7
	subsd	xmm6, xmm12
	cvtsi2sd xmm0, rax
	movaps	xmm1, xmm6
	xorps	xmm1, xmm14
	call	pow

; 481  :     double b = -1.0 / (k_lcu - 1.0);
; 482  :     state->frame->lcu_stats[i].original_weight = state->frame->lcu_stats[i].weight = pow(a / est_lambda, b);

	mov	rax, QWORD PTR [rsi+232]
	movaps	xmm1, xmm13
	divsd	xmm1, xmm6
	mulsd	xmm0, QWORD PTR [rax+r15*8]
	mulsd	xmm7, xmm8
	mulsd	xmm0, xmm7
	call	pow
	movsd	QWORD PTR [rbx+r14+8], xmm0
	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+160]
	movsd	QWORD PTR [rcx+r14+16], xmm0

; 483  :     if (state->frame->lcu_stats[i].weight < 0.01) {

	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+160]
	comisd	xmm10, QWORD PTR [rcx+r14+8]
	jbe	SHORT $LN174@kvz_estima

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	QWORD PTR [rcx+r14+8], r13
$LN174@kvz_estima:

; 485  :     }
; 486  :     total_weight += state->frame->lcu_stats[i].weight;

	mov	rcx, QWORD PTR [rdi+40]
	inc	r15
	mov	rsi, rcx
	mov	rax, QWORD PTR [rcx+160]
	addsd	xmm11, QWORD PTR [rax+r14+8]
	add	r14, 72					; 00000048H
	cmp	r15, rbp
	jl	$LL131@kvz_estima
	movsd	xmm10, QWORD PTR est_lambda$2$[rsp]
$LN130@kvz_estima:

; 578  :     }
; 579  :     total_weight = calculate_weights(state, ctu_count, best_lambda);
; 580  :     state->frame->remaining_weight = bits;

	mov	r13, QWORD PTR [rsp+232]
	movsd	QWORD PTR [rcx+216], xmm9
	mov	rsi, QWORD PTR [rdi+40]

; 581  :   }

	jmp	SHORT $LN9@kvz_estima
$LN24@kvz_estima:

; 582  :   else {
; 583  :     for (int i = 0; i < ctu_count; ++i) {

	test	r14d, r14d
	jle	SHORT $LN9@kvz_estima

; 584  :       state->frame->lcu_stats[i].weight = MAX(0.01,

	mov	rbx, QWORD PTR [rsi+160]
	movaps	xmm0, xmm10
	movaps	xmm1, xmm12
	divsd	xmm0, xmm7
	divsd	xmm1, xmm8
	call	pow

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	movsd	xmm2, QWORD PTR __real@3f847ae147ae147b
	mov	rcx, r12
	mov	rdx, rbp
$LL10@kvz_estima:

; 584  :       state->frame->lcu_stats[i].weight = MAX(0.01,

	mov	eax, DWORD PTR [rbx+rcx+4]
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, rax
	mulsd	xmm1, xmm0
	maxsd	xmm1, xmm2
	movsd	QWORD PTR [rbx+rcx+8], xmm1
	mov	rsi, QWORD PTR [rdi+40]

; 585  :         state->frame->lcu_stats[i].pixels * pow(est_lambda / alpha,
; 586  :                                                 1.0 / beta));
; 587  :       total_weight += state->frame->lcu_stats[i].weight;

	mov	rbx, QWORD PTR [rsi+160]
	addsd	xmm11, QWORD PTR [rbx+rcx+8]
	add	rcx, 72					; 00000048H
	sub	rdx, 1
	jne	SHORT $LL10@kvz_estima
$LN9@kvz_estima:

; 588  :     }
; 589  :   }
; 590  : 
; 591  :   for(int i = 0; i < ctu_count; ++i) {

	mov	r9, r12
	cmp	rbp, 4
	jl	$LN164@kvz_estima

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	lea	r8, QWORD PTR [rbp-4]
	movaps	xmm1, xmm12
	shr	r8, 2
	mov	rdx, r12
	inc	r8
	divsd	xmm1, xmm11
	lea	r9, QWORD PTR [r8*4]
	npad	14

; 588  :     }
; 589  :   }
; 590  : 
; 591  :   for(int i = 0; i < ctu_count; ++i) {

$LL161@kvz_estima:

; 592  :     state->frame->lcu_stats[i].weight = bits * state->frame->lcu_stats[i].weight / total_weight;

	mov	rax, QWORD PTR [rdi+40]
	movaps	xmm0, xmm9
	lea	rdx, QWORD PTR [rdx+288]
	mov	rcx, QWORD PTR [rax+160]
	mulsd	xmm0, QWORD PTR [rcx+rdx-280]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [rcx+rdx-280], xmm0
	movaps	xmm0, xmm9
	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+160]
	mulsd	xmm0, QWORD PTR [rcx+rdx-208]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [rcx+rdx-208], xmm0
	movaps	xmm0, xmm9
	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+160]
	mulsd	xmm0, QWORD PTR [rcx+rdx-136]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [rcx+rdx-136], xmm0
	movaps	xmm0, xmm9
	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+160]
	mulsd	xmm0, QWORD PTR [rcx+rdx-64]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR [rcx+rdx-64], xmm0
	sub	r8, 1
	jne	$LL161@kvz_estima

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	rsi, QWORD PTR [rdi+40]
$LN164@kvz_estima:

; 588  :     }
; 589  :   }
; 590  : 
; 591  :   for(int i = 0; i < ctu_count; ++i) {

	cmp	r9, rbp
	jge	SHORT $LN159@kvz_estima
	lea	rdx, QWORD PTR [r9+r9*8]
	shl	rdx, 3
	sub	rbp, r9
	divsd	xmm12, xmm11
$LC13@kvz_estima:

; 592  :     state->frame->lcu_stats[i].weight = bits * state->frame->lcu_stats[i].weight / total_weight;

	mov	rax, QWORD PTR [rdi+40]
	movaps	xmm1, xmm9
	lea	rdx, QWORD PTR [rdx+72]
	mov	rcx, QWORD PTR [rax+160]
	mulsd	xmm1, QWORD PTR [rcx+rdx-64]
	mulsd	xmm1, xmm12
	movsd	QWORD PTR [rcx+rdx-64], xmm1
	sub	rbp, 1
	jne	SHORT $LC13@kvz_estima

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	rsi, QWORD PTR [rdi+40]
$LN159@kvz_estima:

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	movaps	xmm0, xmm10

; 593  :   }
; 594  : 
; 595  :   state->frame->lambda = est_lambda;

	movsd	QWORD PTR [rsi], xmm10

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si eax, xmm0

; 396  :   return CLIP_TO_QP(qp);

	cmp	al, 51					; 00000033H
	jg	SHORT $LN172@kvz_estima
	test	al, al
	movzx	ecx, al
	cmovs	ecx, r12d
	jmp	SHORT $LN139@kvz_estima
$LN172@kvz_estima:
	mov	cl, 51					; 00000033H
$LN139@kvz_estima:

; 596  :   state->frame->QP = lambda_to_qp(est_lambda);

	mov	rax, QWORD PTR [rdi+40]

; 597  : }

	lea	r11, QWORD PTR [rsp+240]
	movaps	xmm13, XMMWORD PTR [rsp+96]
	movaps	xmm11, XMMWORD PTR [rsp+128]
	movaps	xmm10, XMMWORD PTR [rsp+144]
	mov	r15, QWORD PTR [rsp+224]
	movaps	xmm6, XMMWORD PTR [rsp+208]
	movaps	xmm9, XMMWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [rsp+312]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	movaps	xmm7, XMMWORD PTR [r11-48]
	movaps	xmm8, XMMWORD PTR [r11-64]
	movaps	xmm12, XMMWORD PTR [r11-128]
	movaps	xmm14, XMMWORD PTR [rsp+80]
	mov	BYTE PTR [rax+24], cl
	mov	rsp, r11
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN184@kvz_estima:
kvz_estimate_pic_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
tv2166 = 48
tv2222 = 56
tv2226 = 64
tv2201 = 72
tv2195 = 80
tv2214 = 96
last_ctu$1$ = 352
state$ = 352
used_ctu_count$1$ = 360
pos$ = 360
iter$1$ = 368
index$1$ = 376
get_ctu_bits PROC

; 600  : static double get_ctu_bits(encoder_state_t * const state, vector2d_t pos) {

	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 280				; 00000118H

; 601  :   int avg_bits;
; 602  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	r9, QWORD PTR [rcx]
	mov	r13, rcx
	movaps	XMMWORD PTR [rax-88], xmm6

; 603  :   
; 604  :   int num_ctu = state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu;
; 605  :   const int index = pos.x + pos.y * state->tile->frame->width_in_lcu;

	mov	r10, rdx
	movaps	XMMWORD PTR [rax-104], xmm7
	shr	r10, 32					; 00000020H
	mov	r11, QWORD PTR [r13+48]

; 606  : 
; 607  :   if (state->frame->is_irap) {

	mov	r8, QWORD PTR [r13+40]
	mov	ebx, DWORD PTR [r9+2540]
	mov	ecx, DWORD PTR [r9+2536]
	movaps	XMMWORD PTR [rax-184], xmm12
	mov	rax, QWORD PTR [r11]
	imul	ebx, ecx
	mov	ebp, DWORD PTR [rax+28]
	imul	ebp, r10d
	add	ebp, edx
	cmp	BYTE PTR [r8+83], 0
	mov	DWORD PTR index$1$[rsp], ebp
	je	$LN11@get_ctu_bi

; 608  :     if(encoder->cfg.intra_bit_allocation) {

	cmp	BYTE PTR [r9+2485], 0
	je	$LN13@get_ctu_bi
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	eax, DWORD PTR [r11+16]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 609  :       int cus_left = num_ctu - index + 1;

	sub	ebx, ebp
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	add	eax, r10d
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 609  :       int cus_left = num_ctu - index + 1;

	inc	ebx
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	imul	eax, ecx
	add	eax, DWORD PTR [r11+12]
	add	eax, edx

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	rcx, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 611  :       double mad = kvz_get_lcu_stats(state, pos.x, pos.y)->i_cost;

	mov	rax, QWORD PTR [r8+160]
	movd	xmm7, DWORD PTR [rax+rcx*8+64]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [r8+168]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 611  :       double mad = kvz_get_lcu_stats(state, pos.x, pos.y)->i_cost;

	cvtdq2pd xmm7, xmm7
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN35@get_ctu_bi

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN35@get_ctu_bi:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 614  :       double bits_left = state->frame->cur_pic_target_bits - state->frame->cur_frame_bits_coded;

	mov	rdx, QWORD PTR [r13+40]
	xorps	xmm0, xmm0
	mov	rcx, QWORD PTR [rdx+112]
	test	rcx, rcx
	js	SHORT $LN106@get_ctu_bi
	cvtsi2sd xmm0, rcx
	jmp	SHORT $LN107@get_ctu_bi
$LN106@get_ctu_bi:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
$LN107@get_ctu_bi:
	movsd	xmm3, QWORD PTR [rdx+128]
	mov	ecx, 4

; 615  :       double weighted_bits_left = (bits_left * window + (bits_left - state->frame->i_bits_left)*cus_left) / window;
; 616  :       avg_bits = mad * weighted_bits_left / state->frame->remaining_weight;

	movsd	xmm4, QWORD PTR [rdx+216]
	subsd	xmm3, xmm0
	cmp	ebx, ecx
	movd	xmm0, ebx
	cvtdq2pd xmm0, xmm0
	mov	eax, ebx
	cmovg	eax, ecx
	movd	xmm2, eax
	movaps	xmm6, xmm3
	subsd	xmm6, QWORD PTR [rdx+224]
	cvtdq2pd xmm2, xmm2
	mulsd	xmm6, xmm0
	movaps	xmm1, xmm2
	mulsd	xmm1, xmm3
	addsd	xmm6, xmm1
	divsd	xmm6, xmm2
	mulsd	xmm6, xmm7
	divsd	xmm6, xmm4

; 617  :       state->frame->remaining_weight -= mad;

	subsd	xmm4, xmm7
	movsd	QWORD PTR [rdx+216], xmm4

; 618  :       state->frame->i_bits_left -= state->frame->cur_pic_target_bits * mad / state->frame->icost;

	mov	rax, QWORD PTR [r13+40]
	mulsd	xmm7, QWORD PTR [rax+128]
	movsd	xmm0, QWORD PTR [rax+224]
	divsd	xmm7, QWORD PTR [rax+208]
	subsd	xmm0, xmm7
	movsd	QWORD PTR [rax+224], xmm0
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 91   :     static_cast<std::mutex*>(*mutex)->unlock();

	mov	rax, QWORD PTR [r13+40]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+168]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	$LN12@get_ctu_bi

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN13@get_ctu_bi:
	xorps	xmm6, xmm6
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 622  :       avg_bits = state->frame->cur_pic_target_bits * ((double)state->frame->lcu_stats[index].pixels /

	movsxd	rax, ebp
	lea	rcx, QWORD PTR [rax+rax*8]
	mov	rax, QWORD PTR [r8+160]
	mov	ecx, DWORD PTR [rax+rcx*8+4]
	mov	eax, DWORD PTR [r9+2532]
	imul	eax, DWORD PTR [r9+2528]
	cvtsi2sd xmm6, rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	divsd	xmm6, xmm0
	mulsd	xmm6, QWORD PTR [r8+128]

; 623  :         (state->encoder_control->in.height * state->encoder_control->in.width));
; 624  :     }
; 625  :   }

	jmp	$LN12@get_ctu_bi
$LN11@get_ctu_bi:

; 626  :   else {
; 627  :     double total_weight = 0;
; 628  :     // In case wpp is used only the ctus of the current frame are safe to use
; 629  :     const int used_ctu_count = MIN(4, (encoder->cfg.wpp ? (pos.y + 1) * encoder->in.width_in_lcu : num_ctu) - index);

	mov	edx, DWORD PTR [r9+168]
	mov	edi, DWORD PTR pos$[rsp+4]
	test	edx, edx
	je	SHORT $LN18@get_ctu_bi
	lea	eax, DWORD PTR [rdi+1]
	imul	eax, ecx
	jmp	SHORT $LN19@get_ctu_bi
$LN18@get_ctu_bi:
	mov	eax, ebx
$LN19@get_ctu_bi:
	sub	eax, ebp
	cmp	eax, 4
	jle	SHORT $LN22@get_ctu_bi
	mov	edi, 4
	jmp	SHORT $LN110@get_ctu_bi
$LN22@get_ctu_bi:
	test	edx, edx
	je	SHORT $LN20@get_ctu_bi
	inc	edi
	imul	edi, ecx
	jmp	SHORT $LN21@get_ctu_bi
$LN20@get_ctu_bi:
	mov	edi, ebx
$LN21@get_ctu_bi:
	sub	edi, ebp
$LN110@get_ctu_bi:

; 630  :     int target_bits = 0;
; 631  :     double best_lambda = 0.0;
; 632  :     double temp_lambda = state->frame->lambda;

	movsd	xmm12, QWORD PTR [r8]

; 633  :     double taylor_e3 = 0.0;
; 634  :     int iter = 0;
; 635  : 
; 636  :     int last_ctu = index + used_ctu_count;

	lea	r12d, DWORD PTR [rdi+rbp]
	xor	ebx, ebx

; 637  :     for (int i = index; i < last_ctu; i++) {

	movsxd	r14, ebp
	movsxd	rsi, r12d
	mov	r15d, ebx
	mov	DWORD PTR used_ctu_count$1$[rsp], edi
	mov	r9, r14
	mov	DWORD PTR iter$1$[rsp], ebx
	mov	DWORD PTR last_ctu$1$[rsp], r12d
	mov	QWORD PTR tv2201[rsp], r14
	cmp	r14, rsi
	jge	$LN80@get_ctu_bi
	mov	rax, rsi
	sub	rax, r14
	cmp	rax, 4
	jl	$LC81@get_ctu_bi

; 638  :       target_bits += state->frame->lcu_stats[i].weight;

	mov	rax, QWORD PTR [r8+160]
	lea	rcx, QWORD PTR [r14*8+10]
	add	rcx, r14
	lea	rdx, QWORD PTR [rax+rcx*8]
	mov	rcx, rsi
	sub	rcx, r14
	sub	rcx, 4
	shr	rcx, 2
	inc	rcx
	lea	r9, QWORD PTR [r14+rcx*4]
	npad	5
$LL82@get_ctu_bi:
	movd	xmm0, ebx
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR [rdx-72]
	cvttsd2si eax, xmm0
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR [rdx]
	cvttsd2si eax, xmm0
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	addsd	xmm1, QWORD PTR [rdx+72]
	cvttsd2si eax, xmm1
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR [rdx+144]
	add	rdx, 288				; 00000120H
	cvttsd2si ebx, xmm0
	sub	rcx, 1
	jne	SHORT $LL82@get_ctu_bi

; 637  :     for (int i = index; i < last_ctu; i++) {

	cmp	r9, rsi
	jge	SHORT $LN80@get_ctu_bi
$LC81@get_ctu_bi:
	mov	rax, QWORD PTR [r8+160]
	lea	rdx, QWORD PTR [r9*8+1]
	add	rdx, r9
	lea	rdx, QWORD PTR [rax+rdx*8]
	mov	rax, rsi
	sub	rax, r9
$LC94@get_ctu_bi:
	movd	xmm0, ebx

; 638  :       target_bits += state->frame->lcu_stats[i].weight;

	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR [rdx]
	add	rdx, 72					; 00000048H
	cvttsd2si ebx, xmm0
	sub	rax, 1
	jne	SHORT $LC94@get_ctu_bi
$LN80@get_ctu_bi:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [r8+168]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN54@get_ctu_bi

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN54@get_ctu_bi:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 642  :     total_weight = state->frame->remaining_weight;

	mov	rdx, QWORD PTR [r13+40]

; 643  :     target_bits = MAX(target_bits + state->frame->cur_pic_target_bits - state->frame->cur_frame_bits_coded - (int)total_weight, 10);

	xorps	xmm0, xmm0
	movd	xmm6, ebx
	cvtdq2pd xmm6, xmm6
	mov	rcx, QWORD PTR [rdx+112]
	addsd	xmm6, QWORD PTR [rdx+128]
	test	rcx, rcx
	js	SHORT $LN104@get_ctu_bi
	cvtsi2sd xmm0, rcx
	jmp	SHORT $LN105@get_ctu_bi
$LN104@get_ctu_bi:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
$LN105@get_ctu_bi:
	cvttsd2si eax, QWORD PTR [rdx+216]
	movsd	xmm1, QWORD PTR __real@4024000000000000
	subsd	xmm6, xmm0
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm6, xmm0
	comisd	xmm6, xmm1
	ja	SHORT $LN25@get_ctu_bi
	movaps	xmm6, xmm1
$LN25@get_ctu_bi:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rdx+168]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN72@get_ctu_bi

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN72@get_ctu_bi:
	movaps	XMMWORD PTR [rsp+224], xmm8
	movaps	XMMWORD PTR [rsp+208], xmm9
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 659  :     } while (fabs(taylor_e3 - target_bits) > 0.01 && iter < 5);

	movaps	xmm9, XMMWORD PTR __xmm@80000000000000008000000000000000
	movaps	XMMWORD PTR [rsp+192], xmm10
	movaps	XMMWORD PTR [rsp+176], xmm11
	movsd	xmm11, QWORD PTR __real@3ff0000000000000
	movaps	XMMWORD PTR [rsp+144], xmm13
	movsd	xmm13, QWORD PTR __real@bff0000000000000
	movaps	XMMWORD PTR [rsp+128], xmm14
	movsd	xmm14, QWORD PTR __real@3f847ae147ae147b
	cvttsd2si eax, xmm6
	movaps	XMMWORD PTR [rsp+112], xmm15
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	movsd	QWORD PTR tv2195[rsp], xmm0
	npad	8
$LL7@get_ctu_bi:

; 649  :       best_lambda = solve_cubic_equation(state->frame, index, last_ctu, temp_lambda, target_bits);

	mov	rcx, QWORD PTR [r13+40]
	movaps	xmm3, xmm12
	mov	r8d, r12d
	movsd	QWORD PTR [rsp+32], xmm0
	mov	edx, ebp
	xorps	xmm8, xmm8
	call	solve_cubic_equation
	movaps	xmm10, xmm0
	movaps	xmm12, xmm0
	unpcklpd xmm10, xmm10

; 650  :       temp_lambda = best_lambda;
; 651  :       for (int i = index; i < last_ctu; i++) {

	mov	rbx, r14
	cmp	r14, rsi
	jge	$LN88@get_ctu_bi
	cmp	edi, 2
	jb	$LN102@get_ctu_bi

; 652  :         double CLCU = state->frame->c_para[i];
; 653  :         double KLCU = state->frame->k_para[i];

	mov	rax, QWORD PTR [r13+40]
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR tv2214[rsp], xmm0
	mov	rcx, QWORD PTR [rax+240]

; 654  :         double a = -CLCU * KLCU / pow((double)state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	mov	r12, QWORD PTR [rax+160]
	mov	QWORD PTR tv2222[rsp], rcx
	mov	rcx, QWORD PTR [rax+232]
	mov	QWORD PTR tv2226[rsp], rcx
	mov	ecx, edi
	and	ecx, -2147483647			; ffffffff80000001H
	jge	SHORT $LN103@get_ctu_bi

; 644  :     pthread_mutex_unlock(&state->frame->rc_lock);
; 645  : 
; 646  :     //just similar with the process at frame level, details can refer to the function kvz_estimate_pic_lambda
; 647  :     do {
; 648  :       taylor_e3 = 0.0;

	dec	ecx
	or	ecx, -2
	inc	ecx
$LN103@get_ctu_bi:
	mov	eax, DWORD PTR last_ctu$1$[rsp]

; 652  :         double CLCU = state->frame->c_para[i];
; 653  :         double KLCU = state->frame->k_para[i];

	lea	rdi, QWORD PTR [r14+r14*8]
	movaps	xmm14, XMMWORD PTR __xmm@41f000000000000041f0000000000000
	sub	eax, ecx
	movaps	xmm15, XMMWORD PTR __xmm@3ff00000000000003ff0000000000000
	movaps	xmm11, XMMWORD PTR __xmm@bff0000000000000bff0000000000000
	movaps	xmm13, XMMWORD PTR tv2214[rsp]
	mov	rbp, QWORD PTR tv2222[rsp]
	mov	r14, QWORD PTR tv2226[rsp]
	cdqe
	mov	r15, rax
	shl	rdi, 3
	npad	8
$LL10@get_ctu_bi:
	movups	xmm2, XMMWORD PTR [rbp+rbx*8]

; 654  :         double a = -CLCU * KLCU / pow((double)state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	movd	xmm1, DWORD PTR [r12+rdi+4]
	movd	xmm0, DWORD PTR [r12+rdi+76]
	movaps	xmm7, xmm2
	movups	xmm6, XMMWORD PTR [r14+rbx*8]
	punpckldq xmm1, xmm0
	cvtdq2pd xmm3, xmm1
	subpd	xmm7, xmm15
	movaps	xmm0, xmm3
	cmppd	xmm0, xmm13, 1
	movaps	xmm1, xmm7
	andps	xmm0, xmm14
	addpd	xmm0, xmm3
	mulpd	xmm6, xmm2
	call	__vdecl_pow2
	divpd	xmm6, xmm0

; 655  :         double b = -1.0 / (KLCU - 1.0);

	movaps	xmm1, xmm11
	xorps	xmm6, xmm9

; 656  :         taylor_e3 += pow(a / best_lambda, b);

	divpd	xmm6, xmm10
	divpd	xmm1, xmm7
	movaps	xmm0, xmm6
	call	__vdecl_pow2
	add	rbx, 2
	add	rdi, 144				; 00000090H
	addpd	xmm8, xmm0
	cmp	rbx, r15
	jl	SHORT $LL10@get_ctu_bi

; 644  :     pthread_mutex_unlock(&state->frame->rc_lock);
; 645  : 
; 646  :     //just similar with the process at frame level, details can refer to the function kvz_estimate_pic_lambda
; 647  :     do {
; 648  :       taylor_e3 = 0.0;

	movsd	xmm11, QWORD PTR __real@3ff0000000000000
	movaps	xmm0, xmm8
	movsd	xmm13, QWORD PTR __real@bff0000000000000
	mov	r14, QWORD PTR tv2201[rsp]
	mov	ebp, DWORD PTR index$1$[rsp]
	mov	r15d, DWORD PTR iter$1$[rsp]

; 650  :       temp_lambda = best_lambda;
; 651  :       for (int i = index; i < last_ctu; i++) {

	movsd	xmm14, QWORD PTR __real@3f847ae147ae147b
	unpckhpd xmm0, xmm8
	addsd	xmm8, xmm0
	cmp	rbx, rsi
	jge	$LN108@get_ctu_bi
$LN102@get_ctu_bi:

; 652  :         double CLCU = state->frame->c_para[i];
; 653  :         double KLCU = state->frame->k_para[i];

	mov	rax, QWORD PTR [r13+40]
	lea	rdi, QWORD PTR [rbx+rbx*8]
	movaps	xmm10, xmm11
	shl	rdi, 3
	divsd	xmm10, xmm12
	mov	rbp, QWORD PTR [rax+240]
	mov	r15, QWORD PTR [rax+232]

; 654  :         double a = -CLCU * KLCU / pow((double)state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	mov	r12, QWORD PTR [rax+160]
	npad	9
$LL74@get_ctu_bi:
	mov	eax, DWORD PTR [r12+rdi+4]
	xorps	xmm0, xmm0
	movsd	xmm6, QWORD PTR [rbp+rbx*8]
	movaps	xmm7, xmm6
	subsd	xmm7, xmm11
	cvtsi2sd xmm0, rax
	movaps	xmm1, xmm7
	xorps	xmm1, xmm9
	call	pow

; 656  :         taylor_e3 += pow(a / best_lambda, b);

	mulsd	xmm0, QWORD PTR [r15+rbx*8]
	movaps	xmm1, xmm13
	divsd	xmm1, xmm7
	mulsd	xmm6, xmm10
	mulsd	xmm0, xmm6
	xorps	xmm0, xmm9
	call	pow
	inc	rbx
	addsd	xmm8, xmm0
	add	rdi, 72					; 00000048H
	cmp	rbx, rsi
	jl	SHORT $LL74@get_ctu_bi

; 650  :       temp_lambda = best_lambda;
; 651  :       for (int i = index; i < last_ctu; i++) {

	mov	ebp, DWORD PTR index$1$[rsp]
	mov	r15d, DWORD PTR iter$1$[rsp]
$LN108@get_ctu_bi:

; 657  :       }
; 658  :       iter++;

	mov	r12d, DWORD PTR last_ctu$1$[rsp]
	mov	edi, DWORD PTR used_ctu_count$1$[rsp]
$LN88@get_ctu_bi:

; 659  :     } while (fabs(taylor_e3 - target_bits) > 0.01 && iter < 5);

	movsd	xmm0, QWORD PTR tv2195[rsp]
	inc	r15d
	subsd	xmm8, xmm0
	mov	DWORD PTR iter$1$[rsp], r15d
	andps	xmm8, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	comisd	xmm8, xmm14
	jbe	SHORT $LN15@get_ctu_bi
	cmp	r15d, 5
	jl	$LL7@get_ctu_bi
$LN15@get_ctu_bi:

; 660  : 
; 661  :     double c_ctu = state->frame->c_para[index];
; 662  :     double k_ctu = state->frame->k_para[index];

	mov	rbx, QWORD PTR [r13+40]

; 663  :     double a = -c_ctu * k_ctu / pow(((double)state->frame->lcu_stats[index].pixels), k_ctu - 1.0);

	lea	rsi, QWORD PTR [r14+r14*8]
	xorps	xmm0, xmm0
	mov	rax, QWORD PTR [rbx+240]
	mov	rdi, QWORD PTR [rbx+160]
	movsd	xmm6, QWORD PTR [rax+r14*8]
	mov	eax, DWORD PTR [rdi+rsi*8+4]
	movaps	xmm7, xmm6
	subsd	xmm7, xmm11
	cvtsi2sd xmm0, rax
	movaps	xmm1, xmm7
	xorps	xmm1, xmm9
	call	pow
	mov	rax, QWORD PTR [rbx+232]

; 664  :     double b = -1.0 / (k_ctu - 1.0);

	divsd	xmm13, xmm7
	mulsd	xmm6, QWORD PTR [rax+r14*8]

; 665  : 
; 666  :     state->frame->lcu_stats[index].weight = MAX(pow(a / best_lambda, b), 0.01);

	movaps	xmm1, xmm13
	mulsd	xmm0, xmm6
	divsd	xmm0, xmm12
	xorps	xmm0, xmm9
	call	pow

; 667  : 
; 668  :     avg_bits = (int)(state->frame->lcu_stats[index].weight + 0.5);

	movaps	xmm15, XMMWORD PTR [rsp+112]
	maxsd	xmm0, xmm14
	movaps	xmm14, XMMWORD PTR [rsp+128]
	movaps	xmm13, XMMWORD PTR [rsp+144]
	movaps	xmm11, XMMWORD PTR [rsp+176]
	movaps	xmm10, XMMWORD PTR [rsp+192]
	movaps	xmm9, XMMWORD PTR [rsp+208]
	movaps	xmm8, XMMWORD PTR [rsp+224]
	movsd	QWORD PTR [rdi+rsi*8+8], xmm0
	mov	rax, QWORD PTR [r13+40]
	mov	rcx, QWORD PTR [rax+160]
	movsd	xmm6, QWORD PTR [rcx+rsi*8+8]
	addsd	xmm6, QWORD PTR __real@3fe0000000000000
$LN12@get_ctu_bi:

; 669  :   }
; 670  : 
; 671  :   if (avg_bits < 1) {

	cvttsd2si eax, xmm6

; 672  :     avg_bits = 1;
; 673  :   }
; 674  : 
; 675  :   return avg_bits;
; 676  : }

	lea	r11, QWORD PTR [rsp+280]
	mov	ecx, 1
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	cmp	eax, ecx
	movaps	xmm12, XMMWORD PTR [r11-120]
	cmovl	eax, ecx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN109@get_ctu_bi:
get_ctu_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$dead$ = 48
qp$ = 56
qp_to_lambda PROC

; 679  : {

	sub	rsp, 40					; 00000028H

; 680  :   const int shift_qp = 12;
; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	lea	eax, DWORD PTR [rdx-12]
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, QWORD PTR __real@3fd5555555555555
	call	pow
	mulsd	xmm0, QWORD PTR __real@3fe23d70a3d70a3d

; 682  : 
; 683  :   // NOTE: HM adjusts lambda for inter according to Hadamard usage in ME.
; 684  :   //       SATD is currently always enabled for ME, so this has no effect.
; 685  :   // bool hadamard_me = true;
; 686  :   // if (!hadamard_me && state->frame->slicetype != KVZ_SLICE_I) {
; 687  :   //   lambda *= 0.95;
; 688  :   // }
; 689  : 
; 690  :   return lambda;
; 691  : }

	add	rsp, 40					; 00000028H
	ret	0
qp_to_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
frame_allocation$1$ = 240
state$ = 240
pos$ = 248
encoder$1$ = 256
tv2368 = 264
kvz_set_ctu_qp_lambda PROC

; 693  :  void kvz_set_ctu_qp_lambda(encoder_state_t * const state, vector2d_t pos) {

$LN143:
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 168				; 000000a8H
	movaps	XMMWORD PTR [rsp+144], xmm6
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+96], xmm9
	mov	r14, rcx
	movaps	XMMWORD PTR [rsp+80], xmm10
	movaps	XMMWORD PTR [rsp+64], xmm11

; 694  :   double bits = get_ctu_bits(state, pos);

	call	get_ctu_bits

; 695  : 
; 696  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rdx, QWORD PTR [r14]
	movaps	xmm11, xmm0

; 697  :   const int frame_allocation = state->encoder_control->cfg.frame_allocation;
; 698  : 
; 699  :   int index = pos.x + pos.y * state->encoder_control->in.width_in_lcu;
; 700  :   lcu_stats_t* ctu = &state->frame->lcu_stats[index];

	mov	rdi, QWORD PTR [r14+40]
	xorps	xmm0, xmm0
	mov	r13d, DWORD PTR pos$[rsp+4]

; 701  :   double bpp = bits / ctu->pixels;
; 702  : 
; 703  :   double alpha;
; 704  :   double beta;
; 705  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	movsd	xmm6, QWORD PTR __real@3ff0000000000000
	movsx	eax, BYTE PTR [rdx+2483]
	mov	rbp, QWORD PTR [rdi+160]
	mov	r12d, DWORD PTR [rdx+2536]
	imul	r12d, r13d
	mov	DWORD PTR frame_allocation$1$[rsp], eax
	mov	QWORD PTR encoder$1$[rsp], rdx
	mov	QWORD PTR tv2368[rsp], rbp
	add	r12d, ebx
	cmp	BYTE PTR [rdi+83], 0
	movsxd	rcx, r12d
	lea	r15, QWORD PTR [rcx+rcx*8]
	mov	eax, DWORD PTR [rbp+r15*8+4]
	cvtsi2sd xmm0, rax
	divsd	xmm11, xmm0
	je	SHORT $LN131@kvz_set_ct
	cmp	BYTE PTR [rdx+2485], 0
	je	SHORT $LN131@kvz_set_ct
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [rdi+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+368]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN85@kvz_set_ct

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN85@kvz_set_ct:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 707  :     alpha = state->frame->new_ratecontrol->intra_alpha;

	mov	rax, QWORD PTR [r14+40]
	mov	rcx, QWORD PTR [rax+176]
	movsd	xmm9, QWORD PTR [rcx+288]

; 708  :     beta = state->frame->new_ratecontrol->intra_beta;

	movsd	xmm10, QWORD PTR [rcx+296]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+368]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN95@kvz_set_ct

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN95@kvz_set_ct:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 710  :   }

	mov	rdi, QWORD PTR [r14+40]
	mov	rdx, QWORD PTR encoder$1$[rsp]
	jmp	SHORT $LN140@kvz_set_ct
$LN131@kvz_set_ct:

; 711  :   else if(state->frame->num == 0) {

	cmp	DWORD PTR [rdi+8], 0
	jne	SHORT $LN10@kvz_set_ct

; 712  :     alpha = state->frame->rc_alpha;

	movsd	xmm9, QWORD PTR [rdi+136]

; 713  :     beta = state->frame->rc_beta;

	movsd	xmm10, QWORD PTR [rdi+144]

; 714  :   }

	jmp	SHORT $LN140@kvz_set_ct
$LN10@kvz_set_ct:

; 715  :   else {
; 716  :     alpha = -state->frame->c_para[index] * state->frame->k_para[index];

	mov	rax, QWORD PTR [rdi+240]
	movsd	xmm10, QWORD PTR [rax+rcx*8]
	mov	rax, QWORD PTR [rdi+232]
	movaps	xmm9, xmm10

; 717  :     beta = state->frame->k_para[index] - 1;

	subsd	xmm10, xmm6
	mulsd	xmm9, QWORD PTR [rax+rcx*8]
	xorps	xmm9, QWORD PTR __xmm@80000000000000008000000000000000
$LN140@kvz_set_ct:

; 718  :   }
; 719  : 
; 720  :   double est_lambda;
; 721  :   int est_qp;
; 722  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	movzx	eax, BYTE PTR [rdi+83]
	mov	rsi, rdi
	movaps	XMMWORD PTR [rsp+128], xmm7
	movaps	XMMWORD PTR [rsp+112], xmm8
	movaps	XMMWORD PTR [rsp+48], xmm12
	movsd	xmm12, QWORD PTR __real@3fd5555555555555
	movaps	XMMWORD PTR [rsp+32], xmm13
	movsd	xmm13, QWORD PTR __real@4000000000000000
	test	al, al
	je	$LN12@kvz_set_ct
	cmp	BYTE PTR [rdx+2485], 0
	je	$LN12@kvz_set_ct

; 723  :     double cost_per_pixel = (double)ctu->i_cost / ctu->pixels;
; 724  :     cost_per_pixel = pow(cost_per_pixel, BETA1);
; 725  :     est_lambda = alpha / 256.0 * pow(cost_per_pixel / bpp, beta);
; 726  :     est_qp = state->frame->QP;
; 727  :     double max_lambda = exp(((double)est_qp + 2.49 - 13.7122) / 4.2005);

	movsx	eax, BYTE PTR [rdi+24]
	xorps	xmm7, xmm7
	cvtsi2sd xmm7, eax

; 728  :     double min_lambda = exp(((double)est_qp - 2.49 - 13.7122) / 4.2005);

	movaps	xmm0, xmm7
	subsd	xmm0, QWORD PTR __real@403033c36113404e
	mulsd	xmm0, QWORD PTR __real@3fce78f9e000f9a2
	call	exp
	mov	eax, DWORD PTR [rbp+r15*8+4]
	movaps	xmm8, xmm0
	movsd	xmm1, QWORD PTR __real@3ff406f694467382
	xorps	xmm2, xmm2
	cvtsi2sd xmm2, DWORD PTR [rbp+r15*8+64]
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, rax
	divsd	xmm2, xmm0
	movaps	xmm0, xmm2
	call	pow
	divsd	xmm0, xmm11
	movaps	xmm1, xmm10
	call	pow
	mulsd	xmm7, QWORD PTR __real@3fce78f9e000f9a2
	movaps	xmm10, xmm0
	mulsd	xmm10, xmm9
	subsd	xmm7, QWORD PTR __real@40055f81d1b7e0a6
	mulsd	xmm10, QWORD PTR __real@3f70000000000000
	movaps	xmm0, xmm7
	call	exp

; 729  :     est_lambda = CLIP(min_lambda, max_lambda, est_lambda);

	minsd	xmm10, xmm0
	comisd	xmm8, xmm10
	ja	SHORT $LN30@kvz_set_ct
	movaps	xmm8, xmm10
$LN30@kvz_set_ct:

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	movaps	xmm0, xmm8
	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a

; 396  :   return CLIP_TO_QP(qp);

	xor	esi, esi
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si ecx, xmm0
	cmp	cl, 51					; 00000033H
	jg	SHORT $LN129@kvz_set_ct
	test	cl, cl
	movzx	eax, cl
	cmovs	eax, esi

; 730  : 
; 731  :     est_qp = lambda_to_qp(est_lambda);

	movsx	edx, al

; 732  :   }

	jmp	$LN64@kvz_set_ct
$LN129@kvz_set_ct:

; 396  :   return CLIP_TO_QP(qp);

	mov	al, 51					; 00000033H

; 730  : 
; 731  :     est_qp = lambda_to_qp(est_lambda);

	movsx	edx, al

; 732  :   }

	jmp	$LN64@kvz_set_ct
$LN12@kvz_set_ct:

; 733  :   else {
; 734  :     // In case wpp is used the previous ctus may not be ready from above rows
; 735  :     const int ctu_limit = encoder->cfg.wpp ? pos.y * encoder->in.width_in_lcu : 0;

	cmp	DWORD PTR [rdx+168], 0
	je	SHORT $LN34@kvz_set_ct
	mov	ebp, DWORD PTR [rdx+2536]
	imul	ebp, r13d
	jmp	SHORT $LN35@kvz_set_ct
$LN34@kvz_set_ct:
	xor	ebp, ebp
$LN35@kvz_set_ct:

; 736  :     
; 737  :     est_lambda = alpha * pow(bpp, beta) * (state->frame->is_irap ? 0.5 : 1);

	test	al, al
	je	SHORT $LN36@kvz_set_ct
	movsd	xmm6, QWORD PTR __real@3fe0000000000000
$LN36@kvz_set_ct:
	movaps	xmm1, xmm10
	movaps	xmm0, xmm11
	call	pow

; 738  :     const double clip_lambda = state->frame->lambda;
; 739  : 
; 740  :     double clip_neighbor_lambda = -1;
; 741  :     int clip_qp = -1;
; 742  :     if (encoder->cfg.clip_neighbour || state->frame->num == 0) {

	mov	rax, QWORD PTR encoder$1$[rsp]
	movaps	xmm7, xmm0
	movsd	xmm11, QWORD PTR [rsi]
	mov	r13d, -1
	movsd	xmm10, QWORD PTR __real@bff0000000000000
	mulsd	xmm7, xmm9
	xorps	xmm9, xmm9
	cmp	BYTE PTR [rax+2486], 0
	mulsd	xmm7, xmm6
	jne	SHORT $LN16@kvz_set_ct
	cmp	DWORD PTR [rsi+8], 0
	je	SHORT $LN16@kvz_set_ct

; 752  :           break;
; 753  :         }
; 754  :       }
; 755  :     }
; 756  :     else {
; 757  :       
; 758  :       if (state->frame->lcu_stats[index].lambda > 0) {

	mov	rdx, QWORD PTR [rsi+160]
	comisd	xmm9, QWORD PTR [rdx+r15*8+24]
	jae	SHORT $LN132@kvz_set_ct

; 759  :         clip_neighbor_lambda = state->frame->previous_layer_state->frame->lcu_stats[index].lambda;

	mov	rax, QWORD PTR [rsi+184]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rcx+160]
	movsd	xmm10, QWORD PTR [rax+r15*8+24]
$LN132@kvz_set_ct:

; 760  :       }
; 761  :       if (state->frame->lcu_stats[index].qp > 0) {

	cmp	BYTE PTR [rdx+r15*8+68], 0
	jle	$LN6@kvz_set_ct

; 762  :         clip_qp = state->frame->previous_layer_state->frame->lcu_stats[index].qp;

	mov	rax, QWORD PTR [rsi+184]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rcx+160]
	movsx	r13d, BYTE PTR [rax+r15*8+68]
	jmp	$LN6@kvz_set_ct
$LN16@kvz_set_ct:

; 743  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	lea	r8d, DWORD PTR [r12-1]
	movsxd	r10, ebp
	movsxd	r9, r8d
	cmp	r9d, ebp
	jl	$LN135@kvz_set_ct

; 744  :         if (state->frame->lcu_stats[temp_index].lambda > 0) {

	mov	r11, QWORD PTR [rsi+160]
	lea	rdx, QWORD PTR [r9*8+3]
	add	rdx, r9
	mov	rcx, r9
	lea	rdx, QWORD PTR [r11+rdx*8]
$LL4@kvz_set_ct:
	comisd	xmm9, QWORD PTR [rdx]
	jb	SHORT $LN119@kvz_set_ct

; 743  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	dec	r9d
	dec	rcx
	sub	rdx, 72					; 00000048H
	cmp	rcx, r10
	jge	SHORT $LL4@kvz_set_ct

; 750  :         if (state->frame->lcu_stats[temp_index].qp > -1) {

	jmp	SHORT $LN141@kvz_set_ct
$LN119@kvz_set_ct:

; 745  :           clip_neighbor_lambda = state->frame->lcu_stats[temp_index].lambda;

	movsxd	rax, r9d
	lea	rcx, QWORD PTR [rax+rax*8]
	movsd	xmm10, QWORD PTR [r11+rcx*8+24]
$LN141@kvz_set_ct:

; 750  :         if (state->frame->lcu_stats[temp_index].qp > -1) {

	mov	rax, rdi
	movsxd	rcx, r8d
	mov	r9, QWORD PTR [rax+160]
	lea	rax, QWORD PTR [rcx+rcx*8]
	lea	rdx, QWORD PTR [rax*8+68]
	add	rdx, r9
	npad	6
$LL7@kvz_set_ct:
	cmp	BYTE PTR [rdx], r13b
	jg	SHORT $LN120@kvz_set_ct

; 746  :           break;
; 747  :         }
; 748  :       }
; 749  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	dec	r8d
	dec	rcx
	sub	rdx, 72					; 00000048H
	cmp	rcx, r10
	jge	SHORT $LL7@kvz_set_ct

; 750  :         if (state->frame->lcu_stats[temp_index].qp > -1) {

	jmp	SHORT $LN6@kvz_set_ct
$LN120@kvz_set_ct:

; 751  :           clip_qp = state->frame->lcu_stats[temp_index].qp;

	movsxd	rax, r8d
	lea	rcx, QWORD PTR [rax+rax*8]
	movsx	r13d, BYTE PTR [r9+rcx*8+68]
$LN6@kvz_set_ct:

; 763  :       }
; 764  :     }
; 765  : 
; 766  : 
; 767  :     if (clip_neighbor_lambda > 0) {

	comisd	xmm10, xmm9
	mov	ebp, DWORD PTR frame_allocation$1$[rsp]
	jbe	SHORT $LN40@kvz_set_ct

; 768  :       est_lambda = CLIP(clip_neighbor_lambda * pow(2, -(1.0 + frame_allocation) / 3.0),

	xorps	xmm6, xmm6
	movaps	xmm0, xmm13
	cvtsi2sd xmm6, ebp
	mulsd	xmm6, xmm12
	movaps	xmm1, xmm6
	addsd	xmm1, xmm12
	call	pow
	movsd	xmm1, QWORD PTR __real@bfd5555555555555
	movaps	xmm8, xmm0
	mulsd	xmm8, xmm10
	subsd	xmm1, xmm6
	movaps	xmm0, xmm13
	minsd	xmm8, xmm7
	call	pow
	movaps	xmm7, xmm0
	mulsd	xmm7, xmm10
	comisd	xmm7, xmm8
	ja	SHORT $LN40@kvz_set_ct
	movaps	xmm7, xmm8
	jmp	SHORT $LN40@kvz_set_ct
$LN135@kvz_set_ct:

; 743  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	mov	ebp, DWORD PTR frame_allocation$1$[rsp]
$LN40@kvz_set_ct:

; 769  :         clip_neighbor_lambda * pow(2.0, (1.0 + frame_allocation) / 3.0),
; 770  :         est_lambda);
; 771  :     }
; 772  : 
; 773  :     if (clip_lambda > 0) {

	comisd	xmm11, xmm9
	jbe	SHORT $LN22@kvz_set_ct

; 774  :       est_lambda = CLIP(clip_lambda * pow(2, -(2.0 + frame_allocation) / 3.0),

	xorps	xmm6, xmm6
	movaps	xmm0, xmm13
	cvtsi2sd xmm6, ebp
	mulsd	xmm6, xmm12
	movaps	xmm1, xmm6
	addsd	xmm1, xmm12
	call	pow
	movsd	xmm1, QWORD PTR __real@bfe5555555555555
	movaps	xmm8, xmm0
	mulsd	xmm8, xmm11
	subsd	xmm1, xmm6
	movaps	xmm0, xmm13
	minsd	xmm8, xmm7
	call	pow
	mulsd	xmm0, xmm11

; 775  :         clip_lambda * pow(2.0, (1.0 + frame_allocation) / 3.0),
; 776  :         est_lambda);
; 777  :     }

	maxsd	xmm8, xmm0
	jmp	SHORT $LN52@kvz_set_ct
$LN22@kvz_set_ct:

; 778  :     else {
; 779  :       est_lambda = CLIP(10.0, 1000.0, est_lambda);

	minsd	xmm7, QWORD PTR __real@408f400000000000
	movsd	xmm8, QWORD PTR __real@4024000000000000
	comisd	xmm7, xmm8
	jb	SHORT $LN52@kvz_set_ct
	movaps	xmm8, xmm7
$LN52@kvz_set_ct:

; 780  :     }
; 781  : 
; 782  :     if (est_lambda < 0.1) {

	maxsd	xmm8, QWORD PTR __real@3fb999999999999a

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	movaps	xmm0, xmm8
	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si ecx, xmm0

; 396  :   return CLIP_TO_QP(qp);

	cmp	cl, 51					; 00000033H
	jg	SHORT $LN130@kvz_set_ct
	test	cl, cl
	movzx	eax, cl
	mov	esi, 0
	cmovs	eax, esi
	jmp	SHORT $LN112@kvz_set_ct
$LN130@kvz_set_ct:
	mov	al, 51					; 00000033H
	xor	esi, esi
$LN112@kvz_set_ct:

; 783  :       est_lambda = 0.1;
; 784  :     }
; 785  : 
; 786  :     est_qp = lambda_to_qp(est_lambda);

	movsx	ecx, al

; 787  : 
; 788  :     if( clip_qp > -1) {

	cmp	r13d, -1
	jle	SHORT $LN58@kvz_set_ct

; 789  :       est_qp = CLIP(clip_qp - 1 - frame_allocation,

	lea	edx, DWORD PTR [rbp+1]
	add	edx, r13d
	sub	r13d, ebp
	dec	r13d
	mov	eax, edx
	cmp	edx, ecx
	cmovge	eax, ecx
	cmp	r13d, eax
	jle	SHORT $LN60@kvz_set_ct
	mov	ecx, r13d
	jmp	SHORT $LN58@kvz_set_ct
$LN60@kvz_set_ct:
	cmp	edx, ecx
	cmovl	ecx, edx
$LN58@kvz_set_ct:

; 790  :         clip_qp + 1 + frame_allocation,
; 791  :         est_qp);
; 792  :     }
; 793  : 
; 794  :     est_qp = CLIP(state->frame->QP - 2 - frame_allocation,

	movsx	eax, BYTE PTR [rdi+24]
	lea	r8d, DWORD PTR [rbp+2]
	mov	r13d, DWORD PTR pos$[rsp+4]
	add	r8d, eax
	sub	eax, ebp
	mov	rbp, QWORD PTR tv2368[rsp]
	cmp	r8d, ecx
	lea	edx, DWORD PTR [rax-2]
	mov	eax, r8d
	cmovge	eax, ecx
	cmp	edx, eax
	jg	SHORT $LN64@kvz_set_ct
	cmp	r8d, ecx
	mov	edx, ecx
	cmovl	edx, r8d
$LN64@kvz_set_ct:

; 795  :       state->frame->QP + 2 + frame_allocation,
; 796  :       est_qp);
; 797  :   }
; 798  : 
; 799  :   state->lambda = est_lambda;
; 800  :   state->lambda_sqrt = sqrt(est_lambda);
; 801  :   state->qp = est_qp;
; 802  :   ctu->qp = est_qp;
; 803  :   ctu->lambda = est_lambda;
; 804  :   ctu->i_cost = 0;
; 805  : 
; 806  :   // Apply variance adaptive quantization
; 807  :   if (encoder->cfg.vaq) {

	mov	rax, QWORD PTR encoder$1$[rsp]
	xorps	xmm0, xmm0
	movaps	xmm7, XMMWORD PTR [rsp+128]
	movsd	QWORD PTR [r14+368], xmm8
	sqrtsd	xmm0, xmm8
	mov	BYTE PTR [r14+384], dl
	movsd	QWORD PTR [r14+376], xmm0
	movsd	QWORD PTR [rbp+r15*8+24], xmm8
	movaps	xmm8, XMMWORD PTR [rsp+112]
	mov	BYTE PTR [rbp+r15*8+68], dl
	mov	DWORD PTR [rbp+r15*8+64], esi
	cmp	DWORD PTR [rax+2468], 0
	je	$LN138@kvz_set_ct

; 808  :     vector2d_t lcu = {

	mov	rdx, QWORD PTR [r14+48]
	mov	ecx, DWORD PTR [rdx+16]

; 809  :       pos.x + state->tile->lcu_offset_x,
; 810  :       pos.y + state->tile->lcu_offset_y
; 811  :     };
; 812  :     int id = lcu.x + lcu.y * state->tile->frame->width_in_lcu;

	mov	rax, QWORD PTR [rdx]
	add	ecx, r13d
	mov	r8d, DWORD PTR [rdx+12]
	add	r8d, ebx
	mov	edx, DWORD PTR [rax+28]

; 813  :     int aq_offset = round(state->frame->aq_offsets[id]);

	mov	rax, QWORD PTR [r14+40]
	imul	edx, ecx
	mov	rcx, QWORD PTR [rax+192]
	add	edx, r8d
	movsxd	rdx, edx
	movsd	xmm0, QWORD PTR [rcx+rdx*8]
	call	QWORD PTR __imp_round

; 814  :     state->qp += aq_offset;

	movzx	edx, BYTE PTR [r14+384]
	cvttsd2si eax, xmm0
	add	dl, al

; 815  :     // Maximum delta QP is clipped according to ITU T-REC-H.265 specification chapter 7.4.9.10 Transform unit semantics
; 816  :     // Clipping range is a function of bit depth
; 817  :     // Since this value will be later combined with qp_pred, clip to half of that instead to be safe
; 818  :     state->qp = CLIP(state->frame->QP + KVZ_QP_DELTA_MIN / 2, state->frame->QP + KVZ_QP_DELTA_MAX / 2, state->qp);

	mov	rax, QWORD PTR [r14+40]
	movsx	r8d, dl
	mov	BYTE PTR [r14+384], dl
	movsx	ecx, BYTE PTR [rax+24]
	lea	r9d, DWORD PTR [rcx+25]
	add	ecx, -13
	cmp	r9d, r8d
	mov	eax, r9d
	cmovge	eax, r8d
	cmp	ecx, eax
	jg	SHORT $LN70@kvz_set_ct
	cmp	r9d, r8d
	mov	ecx, r8d
	cmovl	ecx, r9d
$LN70@kvz_set_ct:

; 819  :     state->qp = CLIP_TO_QP(state->qp);

	cmp	cl, 51					; 00000033H
	jle	SHORT $LN74@kvz_set_ct
	mov	al, 51					; 00000033H
	jmp	SHORT $LN76@kvz_set_ct
$LN74@kvz_set_ct:
	test	cl, cl
	movzx	eax, cl
	cmovs	eax, esi
$LN76@kvz_set_ct:
	mov	BYTE PTR [r14+384], al

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	movaps	xmm0, xmm13

; 820  :     state->lambda = qp_to_lambda(state, state->qp);

	movsx	eax, al

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	sub	eax, 12
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, xmm12
	call	pow
	mulsd	xmm0, QWORD PTR __real@3fe23d70a3d70a3d

; 821  :     state->lambda_sqrt = sqrt(state->lambda);

	xorps	xmm1, xmm1
	sqrtsd	xmm1, xmm0
	movsd	QWORD PTR [r14+368], xmm0
	movsd	QWORD PTR [r14+376], xmm1

; 822  : 
; 823  :     ctu->adjust_lambda = state->lambda;

	movsd	QWORD PTR [rbp+r15*8+32], xmm0

; 824  :     ctu->adjust_qp = state->qp;

	movzx	eax, BYTE PTR [r14+384]
	mov	BYTE PTR [rbp+r15*8+69], al
$LN138@kvz_set_ct:

; 825  :     //ctu->qp = state->qp;
; 826  :     //ctu->lambda = state->lambda;
; 827  :   }
; 828  : }

	movaps	xmm12, XMMWORD PTR [rsp+48]
	movaps	xmm13, XMMWORD PTR [rsp+32]
	movaps	xmm6, XMMWORD PTR [rsp+144]
	movaps	xmm9, XMMWORD PTR [rsp+96]
	movaps	xmm10, XMMWORD PTR [rsp+80]
	movaps	xmm11, XMMWORD PTR [rsp+64]
	add	rsp, 168				; 000000a8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN139@kvz_set_ct:
kvz_set_ctu_qp_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 80
bpp$ = 88
distortion$ = 96
lambda$ = 104
layer$ = 112
update_pic_ck PROC

; 831  : static void update_pic_ck(encoder_state_t * const state, double bpp, double distortion, double lambda, int layer) {

	push	rbx
	sub	rsp, 64					; 00000040H

; 832  :   double new_k = 0, new_c;
; 833  :   if(state->frame->num == 1) {
; 834  :     new_k = log(distortion / state->frame->new_ratecontrol->intra_pic_distortion) /
; 835  :       log(bpp / state->frame->new_ratecontrol->intra_pic_bpp);
; 836  :     new_c = distortion / pow(bpp, new_k);
; 837  :   }
; 838  :   new_k = -bpp * lambda / distortion;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movaps	xmm4, xmm1
	divsd	xmm0, xmm2
	mov	rbx, rcx
	movaps	XMMWORD PTR [rsp+48], xmm6
	movaps	xmm6, xmm2
	movaps	XMMWORD PTR [rsp+32], xmm7
	movaps	xmm7, xmm1
	mulsd	xmm7, xmm3
	mulsd	xmm7, xmm0

; 839  :   new_c = distortion / pow(bpp, new_k);

	movaps	xmm0, xmm4
	movaps	xmm1, xmm7
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	call	pow

; 840  : 
; 841  :   new_c = CLIP(+.1, 100.0, new_c);

	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	mulsd	xmm0, xmm6
	minsd	xmm0, QWORD PTR __real@4059000000000000
	comisd	xmm0, xmm1
	jb	SHORT $LN12@update_pic
	movaps	xmm1, xmm0
$LN12@update_pic:

; 842  :   new_k = CLIP(-3.0, -0.001, new_k);

	minsd	xmm7, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	xmm0, QWORD PTR __real@c008000000000000
	comisd	xmm7, xmm0
	jb	SHORT $LN18@update_pic
	movaps	xmm0, xmm7
$LN18@update_pic:

; 843  : 
; 844  :   if(state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	mov	rdx, QWORD PTR [rbx+40]
	cmp	BYTE PTR [rdx+83], 0
	jne	SHORT $LN8@update_pic
	mov	rax, QWORD PTR [rbx]
	movsx	ecx, BYTE PTR [rax+2483]
	mov	eax, 4
	sub	eax, ecx
	cmp	DWORD PTR [rdx+8], eax
	jle	SHORT $LN8@update_pic

; 847  :       state->frame->new_ratecontrol->pic_k_para[i] = new_k;
; 848  :     }
; 849  :   }
; 850  :   else {
; 851  :     state->frame->new_ratecontrol->pic_c_para[layer] = new_c;

	mov	rax, QWORD PTR [rdx+176]
	movsxd	rcx, DWORD PTR layer$[rsp]
	movsd	QWORD PTR [rax+rcx*8+96], xmm1

; 852  :     state->frame->new_ratecontrol->pic_k_para[layer] = new_k;

	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+rcx*8+144], xmm0

; 853  :   }
; 854  : }

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN8@update_pic:

; 845  :     for(int i = 1; i < 5; i++) {
; 846  :       state->frame->new_ratecontrol->pic_c_para[i] = new_c;

	mov	rax, QWORD PTR [rdx+176]

; 853  :   }
; 854  : }

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rax+104], xmm1
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+152], xmm0
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+112], xmm1
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+160], xmm0
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+120], xmm1
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+168], xmm0
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+128], xmm1
	mov	rax, QWORD PTR [rdx+176]
	movsd	QWORD PTR [rax+176], xmm0
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
update_pic_ck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 80
ctu_index$ = 88
layer$ = 96
update_ck PROC

; 858  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 859  :   double bpp = (double)state->frame->lcu_stats[ctu_index].bits / state->frame->lcu_stats[ctu_index].pixels;

	mov	rbx, QWORD PTR [rcx+40]
	mov	rsi, rcx
	movsxd	rdi, edx
	movsxd	rbp, r8d

; 860  :   double distortion = state->frame->lcu_stats[ctu_index].distortion;
; 861  :   double lambda = state->frame->lcu_stats[ctu_index].lambda;

	mov	r9, QWORD PTR [rbx+160]
	lea	rdx, QWORD PTR [rdi+rdi*8]

; 862  : 
; 863  :   double new_k = 0, new_c = -1;
; 864  :   if (!state->frame->lcu_stats[ctu_index].skipped) {

	cmp	BYTE PTR [r9+rdx*8+70], 0
	movsd	xmm1, QWORD PTR [r9+rdx*8+24]
	jne	$LN3@update_ck

; 865  :     distortion = MAX(distortion, 0.0001);

	mov	eax, DWORD PTR [r9+rdx*8]
	xorps	xmm2, xmm2
	movsd	xmm3, QWORD PTR __real@3f1a36e2eb1c432d
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR [rsp+48], xmm6
	movaps	XMMWORD PTR [rsp+32], xmm7
	movsd	xmm7, QWORD PTR [r9+rdx*8+56]
	cvtsi2sd xmm2, rax
	mov	eax, DWORD PTR [r9+rdx*8+4]
	maxsd	xmm7, xmm3
	cvtsi2sd xmm0, rax
	divsd	xmm2, xmm0

; 866  : 
; 867  :     bpp = CLIP(0.0001, 10.0, bpp);

	minsd	xmm2, QWORD PTR __real@4024000000000000
	comisd	xmm2, xmm3
	jb	SHORT $LN14@update_ck
	movaps	xmm3, xmm2
$LN14@update_ck:

; 868  :     new_k = -bpp * lambda / distortion;

	movsd	xmm0, QWORD PTR __real@bff0000000000000

; 869  :     new_k = CLIP(-3.0, -0.001, new_k);

	movsd	xmm6, QWORD PTR __real@c008000000000000
	divsd	xmm0, xmm7
	mulsd	xmm1, xmm3
	mulsd	xmm1, xmm0
	minsd	xmm1, QWORD PTR __real@bf50624dd2f1a9fc
	comisd	xmm1, xmm6
	jb	SHORT $LN20@update_ck
	movaps	xmm6, xmm1
$LN20@update_ck:

; 870  :     new_c = distortion / pow(bpp, new_k);

	movaps	xmm1, xmm6
	movaps	xmm0, xmm3
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	call	pow

; 871  :     
; 872  :     new_c = CLIP(+.1, 100.0, new_c);

	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	mulsd	xmm0, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+32]
	minsd	xmm0, QWORD PTR __real@4059000000000000
	comisd	xmm0, xmm1
	jb	SHORT $LN26@update_ck
	movaps	xmm1, xmm0
$LN26@update_ck:

; 873  : 
; 874  :     if (state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	cmp	BYTE PTR [rbx+83], 0
	jne	SHORT $LN8@update_ck
	mov	rax, QWORD PTR [rsi]
	movsx	ecx, BYTE PTR [rax+2483]
	mov	eax, 4
	sub	eax, ecx
	cmp	DWORD PTR [rbx+8], eax
	jle	SHORT $LN8@update_ck

; 878  :       }
; 879  :     }
; 880  :     else {
; 881  :       state->frame->new_ratecontrol->c_para[layer][ctu_index] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+rbp*8]
	movsd	QWORD PTR [rcx+rdi*8], xmm1

; 882  :       state->frame->new_ratecontrol->k_para[layer][ctu_index] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+rbp*8+48]
	jmp	SHORT $LN38@update_ck
$LN8@update_ck:

; 875  :       for (int i = 1; i < 5; i++) {
; 876  :         state->frame->new_ratecontrol->c_para[i][ctu_index] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+8]
	movsd	QWORD PTR [rcx+rdi*8], xmm1

; 877  :         state->frame->new_ratecontrol->k_para[i][ctu_index] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+56]
	movsd	QWORD PTR [rcx+rdi*8], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+16]
	movsd	QWORD PTR [rcx+rdi*8], xmm1
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+64]
	movsd	QWORD PTR [rcx+rdi*8], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+24]
	movsd	QWORD PTR [rcx+rdi*8], xmm1
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+72]
	movsd	QWORD PTR [rcx+rdi*8], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+32]
	movsd	QWORD PTR [rcx+rdi*8], xmm1
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+80]
$LN38@update_ck:
	movsd	QWORD PTR [rcx+rdi*8], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]
$LN3@update_ck:

; 883  :     }
; 884  :   }
; 885  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
update_ck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 8
calc_poc PROC

; 889  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rax, QWORD PTR [rcx]

; 890  :   if((encoder->cfg.open_gop && !encoder->cfg.gop_lowdelay) || !encoder->cfg.intra_period) {

	movzx	edx, BYTE PTR [rax+2464]
	test	dl, dl
	je	SHORT $LN11@calc_poc
	cmp	BYTE PTR [rax+301], 0
	je	SHORT $LN3@calc_poc
$LN11@calc_poc:
	mov	r10d, DWORD PTR [rax+4]
	test	r10d, r10d
	jne	SHORT $LN2@calc_poc
$LN3@calc_poc:

; 891  :     return state->frame->poc;

	mov	rax, QWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rax+12]

; 898  :   }
; 899  :   assert(0);
; 900  :   return -1;
; 901  : }

	ret	0
$LN2@calc_poc:

; 892  :   }
; 893  :   if(!encoder->cfg.gop_len || encoder->cfg.open_gop || encoder->cfg.intra_period == 1 || encoder->cfg.gop_lowdelay) {

	cmp	BYTE PTR [rax+300], 0
	je	SHORT $LN6@calc_poc
	test	dl, dl
	jne	SHORT $LN6@calc_poc
	cmp	r10d, 1
	je	SHORT $LN6@calc_poc
	cmp	BYTE PTR [rax+301], dl
	jne	SHORT $LN6@calc_poc

; 895  :   }
; 896  :   if (!encoder->cfg.gop_lowdelay && !encoder->cfg.open_gop) {
; 897  :     return state->frame->poc + state->frame->num / (encoder->cfg.intra_period + 1) * (encoder->cfg.intra_period + 1);

	mov	r8, QWORD PTR [rcx+40]
	lea	ecx, DWORD PTR [r10+1]
	mov	eax, DWORD PTR [r8+8]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR [r8+12]
	sub	eax, edx
	add	eax, DWORD PTR [r8+8]

; 898  :   }
; 899  :   assert(0);
; 900  :   return -1;
; 901  : }

	ret	0
$LN6@calc_poc:

; 894  :     return state->frame->poc + state->frame->num / encoder->cfg.intra_period * encoder->cfg.intra_period;

	mov	rcx, QWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rcx+8]
	cdq
	idiv	r10d
	mov	eax, DWORD PTR [rcx+12]
	sub	eax, edx
	add	eax, DWORD PTR [rcx+8]

; 898  :   }
; 899  :   assert(0);
; 900  :   return -1;
; 901  : }

	ret	0
calc_poc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
layer$1$ = 48
encoder$1$ = 56
y_ctu$1$ = 304
state$ = 304
tv3620 = 312
tv3696 = 320
x_ctu$1$ = 328
kvz_update_after_picture PROC

; 904  : void kvz_update_after_picture(encoder_state_t * const state) {

$LN269:
	push	rbx
	push	rbp
	push	r12
	push	r13
	sub	rsp, 264				; 00000108H

; 905  :   double total_distortion = 0;
; 906  :   double lambda = 0;
; 907  :   int32_t pixels = (state->encoder_control->in.width * state->encoder_control->in.height);

	mov	r11, QWORD PTR [rcx]
	mov	r12, rcx

; 908  :   double pic_bpp = (double)state->frame->cur_frame_bits_coded / pixels;

	mov	rbx, QWORD PTR [rcx+40]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	movaps	XMMWORD PTR [rsp+160], xmm9
	xorps	xmm9, xmm9
	mov	eax, DWORD PTR [r11+2532]
	imul	eax, DWORD PTR [r11+2528]
	mov	rdx, QWORD PTR [rbx+112]
	movaps	XMMWORD PTR [rsp+144], xmm10
	xorps	xmm10, xmm10
	movaps	XMMWORD PTR [rsp+128], xmm11
	xorps	xmm11, xmm11
	movaps	XMMWORD PTR [rsp+112], xmm12
	xorps	xmm12, xmm12
	mov	QWORD PTR encoder$1$[rsp], r11
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	divsd	xmm2, xmm0
	test	rdx, rdx
	js	SHORT $LN258@kvz_update
	cvtsi2sd xmm12, rdx
	jmp	SHORT $LN259@kvz_update
$LN258@kvz_update:
	mov	rax, rdx
	and	edx, 1
	shr	rax, 1
	or	rax, rdx
	cvtsi2sd xmm12, rax
	addsd	xmm12, xmm12
$LN259@kvz_update:

; 909  : 
; 910  :   const encoder_control_t * const encoder = state->encoder_control;
; 911  :   const int layer = encoder->cfg.gop[state->frame->gop_offset].layer - (state->frame->is_irap ? 1 : 0);

	movzx	ecx, BYTE PTR [rbx+83]
	xor	r13d, r13d
	movsx	rax, BYTE PTR [rbx+16]
	shl	rax, 6
	mov	QWORD PTR [rsp+248], rdi
	test	cl, cl
	movaps	XMMWORD PTR [rsp+208], xmm6
	movaps	XMMWORD PTR [rsp+192], xmm7
	movsx	ebp, BYTE PTR [rax+r11+314]
	mov	eax, r13d
	setne	al
	movaps	XMMWORD PTR [rsp+176], xmm8
	sub	ebp, eax
	mulsd	xmm12, xmm2
	mov	DWORD PTR layer$1$[rsp], ebp

; 912  : 
; 913  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	test	cl, cl
	je	$LN71@kvz_update
	cmp	BYTE PTR [r11+2485], r13b
	je	$LN71@kvz_update

; 914  :     double lnbpp = log(pow(state->frame->icost / pixels, BETA1));

	mulsd	xmm2, QWORD PTR [rbx+208]
	movsd	xmm1, QWORD PTR __real@3ff406f694467382
	movaps	xmm0, xmm2
	call	pow
	call	log
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [rbx+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 914  :     double lnbpp = log(pow(state->frame->icost / pixels, BETA1));

	movaps	xmm8, xmm0
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+368]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN61@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN61@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 916  :     double diff_lambda = state->frame->new_ratecontrol->intra_beta * log(state->frame->cur_frame_bits_coded) - log(state->frame->cur_pic_target_bits);

	mov	rbx, QWORD PTR [r12+40]
	xorps	xmm0, xmm0
	mov	rcx, QWORD PTR [rbx+112]
	mov	rdi, QWORD PTR [rbx+176]
	test	rcx, rcx
	js	SHORT $LN256@kvz_update
	cvtsi2sd xmm0, rcx
	jmp	SHORT $LN257@kvz_update
$LN256@kvz_update:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
$LN257@kvz_update:
	call	log
	movaps	xmm6, xmm0
	movsd	xmm0, QWORD PTR [rbx+128]
	mulsd	xmm6, QWORD PTR [rdi+296]
	call	log

; 917  : 
; 918  :     diff_lambda = CLIP(-0.125, 0.125, 0.25*diff_lambda);

	movsd	xmm7, QWORD PTR __real@bfc0000000000000
	subsd	xmm6, xmm0
	mulsd	xmm6, QWORD PTR __real@3fd0000000000000
	minsd	xmm6, QWORD PTR __real@3fc0000000000000
	comisd	xmm6, xmm7
	jb	SHORT $LN45@kvz_update
	movaps	xmm7, xmm6
$LN45@kvz_update:

; 919  : 
; 920  :     state->frame->new_ratecontrol->intra_alpha *= exp(diff_lambda);

	movaps	xmm0, xmm7
	call	exp
	mulsd	xmm0, QWORD PTR [rdi+288]

; 921  :     state->frame->new_ratecontrol->intra_beta += diff_lambda / lnbpp;

	divsd	xmm7, xmm8
	movsd	QWORD PTR [rdi+288], xmm0
	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
	addsd	xmm7, QWORD PTR [rcx+296]
	movsd	QWORD PTR [rcx+296], xmm7
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 91   :     static_cast<std::mutex*>(*mutex)->unlock();

	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+368]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN260@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN260@kvz_update:

; 130  :     if (_Res != _Thrd_success) {

	mov	r11, QWORD PTR encoder$1$[rsp]
$LN71@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 925  :   if (encoder->cfg.stats_file_prefix) {

	cmp	QWORD PTR [r11+2496], r13
	je	$LN30@kvz_update

; 889  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rax, QWORD PTR [r12]

; 890  :   if((encoder->cfg.open_gop && !encoder->cfg.gop_lowdelay) || !encoder->cfg.intra_period) {

	movzx	ecx, BYTE PTR [rax+2464]
	test	cl, cl
	je	SHORT $LN250@kvz_update
	cmp	BYTE PTR [rax+301], r13b
	je	SHORT $LN77@kvz_update
$LN250@kvz_update:
	mov	r10d, DWORD PTR [rax+4]
	test	r10d, r10d
	jne	SHORT $LN76@kvz_update
$LN77@kvz_update:

; 891  :     return state->frame->poc;

	mov	rax, QWORD PTR [r12+40]
	mov	ebx, DWORD PTR [rax+12]
	jmp	SHORT $LN75@kvz_update
$LN76@kvz_update:

; 892  :   }
; 893  :   if(!encoder->cfg.gop_len || encoder->cfg.open_gop || encoder->cfg.intra_period == 1 || encoder->cfg.gop_lowdelay) {

	cmp	BYTE PTR [rax+300], r13b
	je	SHORT $LN80@kvz_update
	test	cl, cl
	jne	SHORT $LN80@kvz_update
	cmp	r10d, 1
	je	SHORT $LN80@kvz_update
	cmp	BYTE PTR [rax+301], r13b
	jne	SHORT $LN80@kvz_update

; 895  :   }
; 896  :   if (!encoder->cfg.gop_lowdelay && !encoder->cfg.open_gop) {
; 897  :     return state->frame->poc + state->frame->num / (encoder->cfg.intra_period + 1) * (encoder->cfg.intra_period + 1);

	mov	r8, QWORD PTR [r12+40]
	lea	ecx, DWORD PTR [r10+1]
	mov	eax, DWORD PTR [r8+8]
	mov	ebx, DWORD PTR [r8+12]
	cdq
	idiv	ecx
	sub	ebx, edx
	add	ebx, DWORD PTR [r8+8]
	jmp	SHORT $LN75@kvz_update
$LN80@kvz_update:

; 894  :     return state->frame->poc + state->frame->num / encoder->cfg.intra_period * encoder->cfg.intra_period;

	mov	rcx, QWORD PTR [r12+40]
	mov	eax, DWORD PTR [rcx+8]
	mov	ebx, DWORD PTR [rcx+12]
	cdq
	idiv	r10d
	sub	ebx, edx
	add	ebx, DWORD PTR [rcx+8]
$LN75@kvz_update:

; 926  :     int poc = calc_poc(state);
; 927  :     fprintf(dist_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR [r11+2540]
	lea	rdx, OFFSET FLAT:$SG4294955521
	mov	r9d, DWORD PTR [r11+2536]
	mov	r8d, ebx
	mov	rcx, QWORD PTR dist_file
	mov	DWORD PTR [rsp+32], eax
	call	fprintf

; 928  :     fprintf(bits_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	rdi, QWORD PTR encoder$1$[rsp]
	lea	rdx, OFFSET FLAT:$SG4294955520
	mov	rcx, QWORD PTR bits_file
	mov	r8d, ebx
	mov	eax, DWORD PTR [rdi+2540]
	mov	r9d, DWORD PTR [rdi+2536]
	mov	DWORD PTR [rsp+32], eax
	call	fprintf

; 929  :     fprintf(qp_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR [rdi+2540]
	lea	rdx, OFFSET FLAT:$SG4294955519
	mov	r9d, DWORD PTR [rdi+2536]
	mov	r8d, ebx
	mov	rcx, QWORD PTR qp_file
	mov	DWORD PTR [rsp+32], eax
	call	fprintf

; 930  :     fprintf(lambda_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR [rdi+2540]
	lea	rdx, OFFSET FLAT:$SG4294955518
	mov	r9d, DWORD PTR [rdi+2536]
	mov	r8d, ebx
	mov	rcx, QWORD PTR lambda_file
	mov	DWORD PTR [rsp+32], eax
	call	fprintf
	mov	r11, rdi
$LN30@kvz_update:

; 931  :   }
; 932  : 
; 933  :   for(int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	mov	rcx, QWORD PTR [r12]
	mov	ebx, r13d
	mov	QWORD PTR [rsp+256], rsi
	mov	QWORD PTR [rsp+240], r14
	mov	QWORD PTR [rsp+232], r15
	mov	DWORD PTR y_ctu$1$[rsp], ebx
	cmp	DWORD PTR [rcx+2540], ebx
	jle	$LN3@kvz_update

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	rdx, rcx
	mov	DWORD PTR tv3620[rsp], r13d
	mov	edi, r13d
	npad	2
$LL4@kvz_update:

; 934  :     for (int x_ctu = 0; x_ctu < state->encoder_control->in.width_in_lcu; x_ctu++) {

	cmp	DWORD PTR [rdx+2536], 0
	mov	r9d, r13d
	mov	DWORD PTR x_ctu$1$[rsp], r13d
	mov	rcx, rdx
	jle	$LN253@kvz_update

; 890  :   if((encoder->cfg.open_gop && !encoder->cfg.gop_lowdelay) || !encoder->cfg.intra_period) {

	lea	r8d, DWORD PTR [rdi+64]
	mov	r14d, r13d
	mov	DWORD PTR tv3696[rsp], r8d
	npad	6
$LL7@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rcx, QWORD PTR [r12+48]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 935  :       int ctu_distortion = 0;

	mov	esi, r13d
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	eax, DWORD PTR [rcx+16]
	add	eax, ebx
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	ebx, edi
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	imul	eax, DWORD PTR [rdx+2536]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	rdi, QWORD PTR [rcx]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	add	eax, DWORD PTR [rcx+12]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	ebp, DWORD PTR [rdi+20]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	add	eax, r9d

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	r15, QWORD PTR [rax+rax*8]
	mov	rax, QWORD PTR [r12+40]
	mov	r13, QWORD PTR [rax+160]
	npad	12
$LL10@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	cmp	r8d, ebp
	mov	eax, r8d
	cmovge	eax, ebp
	cmp	ebx, eax
	jge	SHORT $LN9@kvz_update

; 938  :         for (int x = x_ctu * 64; x < MIN((x_ctu + 1) * 64, state->tile->frame->width); x++) {

	mov	r11d, DWORD PTR [rdi+16]

; 939  :           int temp = (int)state->tile->frame->source->y[x + y * state->encoder_control->in.width] -

	lea	r10d, DWORD PTR [r14+64]
	mov	r9d, r14d
	npad	8
$LL13@kvz_update:

; 938  :         for (int x = x_ctu * 64; x < MIN((x_ctu + 1) * 64, state->tile->frame->width); x++) {

	cmp	r10d, r11d
	mov	eax, r10d
	cmovge	eax, r11d
	cmp	r9d, eax
	jge	SHORT $LN8@kvz_update

; 939  :           int temp = (int)state->tile->frame->source->y[x + y * state->encoder_control->in.width] -

	mov	rax, QWORD PTR [r12]
	mov	ecx, DWORD PTR [rax+2528]
	mov	rax, QWORD PTR [rdi]
	imul	ecx, ebx
	add	ecx, r9d
	movsxd	rdx, ecx
	mov	rcx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rdi+8]
	movzx	r8d, BYTE PTR [rcx+rdx]
	mov	rcx, QWORD PTR [rax+16]
	movzx	eax, BYTE PTR [rcx+rdx]
	sub	r8d, eax

; 940  :             state->tile->frame->rec->y[x + y * state->encoder_control->in.width];
; 941  :           ctu_distortion += temp * temp;

	imul	r8d, r8d
	add	esi, r8d
	inc	r9d
	jmp	SHORT $LL13@kvz_update
$LN8@kvz_update:

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	r8d, DWORD PTR tv3696[rsp]
	inc	ebx
	jmp	SHORT $LL10@kvz_update
$LN9@kvz_update:

; 942  :         }        
; 943  :       }
; 944  :       ctu->distortion = (double)ctu_distortion / ctu->pixels;

	mov	eax, DWORD PTR [r13+r15*8+4]
	xorps	xmm0, xmm0

; 945  :       total_distortion += (double)ctu_distortion / ctu->pixels;
; 946  :       lambda += ctu->lambda / (state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu);

	movsd	xmm1, QWORD PTR [r13+r15*8+24]

; 947  :       if(encoder->cfg.stats_file_prefix) {

	mov	r11, QWORD PTR encoder$1$[rsp]
	movd	xmm2, esi
	cvtsi2sd xmm0, rax
	cvtdq2pd xmm2, xmm2
	divsd	xmm2, xmm0
	movsd	QWORD PTR [r13+r15*8+56], xmm2
	addsd	xmm9, xmm2
	mov	rcx, QWORD PTR [r12]
	mov	eax, DWORD PTR [rcx+2540]
	imul	eax, DWORD PTR [rcx+2536]
	cmp	QWORD PTR [r11+2496], 0
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	divsd	xmm1, xmm0
	addsd	xmm10, xmm1
	je	$LN5@kvz_update

; 948  :         fprintf(dist_file, "%f ", ctu->distortion);

	mov	rcx, QWORD PTR dist_file
	lea	rdx, OFFSET FLAT:$SG4294955517
	movq	r8, xmm2
	call	fprintf

; 949  :         fprintf(bits_file, "%d ", ctu->bits);

	mov	r8d, DWORD PTR [r13+r15*8]
	lea	rdx, OFFSET FLAT:$SG4294955516
	mov	rcx, QWORD PTR bits_file
	call	fprintf

; 950  :         fprintf(qp_file, "%d ", ctu->adjust_qp ? ctu->adjust_qp : ctu->qp);

	movzx	eax, BYTE PTR [r13+r15*8+69]
	test	al, al
	jne	SHORT $LN53@kvz_update
	movzx	eax, BYTE PTR [r13+r15*8+68]
$LN53@kvz_update:
	mov	rcx, QWORD PTR qp_file
	lea	rdx, OFFSET FLAT:$SG4294955515
	movsx	r8d, al
	call	fprintf

; 951  :         fprintf(lambda_file, "%f ", ctu->adjust_lambda ? ctu->adjust_lambda : ctu->lambda);

	movsd	xmm2, QWORD PTR [r13+r15*8+32]
	ucomisd	xmm2, xmm11
	jne	SHORT $LN55@kvz_update
	movsd	xmm2, QWORD PTR [r13+r15*8+24]
$LN55@kvz_update:
	mov	rcx, QWORD PTR lambda_file
	lea	rdx, OFFSET FLAT:$SG4294955514
	movq	r8, xmm2
	call	fprintf
	mov	rcx, QWORD PTR [r12]
	mov	r8d, DWORD PTR tv3696[rsp]
	mov	r11, QWORD PTR encoder$1$[rsp]
$LN5@kvz_update:

; 934  :     for (int x_ctu = 0; x_ctu < state->encoder_control->in.width_in_lcu; x_ctu++) {

	mov	r9d, DWORD PTR x_ctu$1$[rsp]
	add	r14d, 64				; 00000040H
	mov	ebx, DWORD PTR y_ctu$1$[rsp]
	inc	r9d
	mov	rdx, rcx
	mov	edi, DWORD PTR tv3620[rsp]
	mov	r13d, 0
	mov	DWORD PTR x_ctu$1$[rsp], r9d
	cmp	r9d, DWORD PTR [rcx+2536]
	jl	$LL7@kvz_update
$LN253@kvz_update:

; 952  :       }
; 953  :     }
; 954  :     if (encoder->cfg.stats_file_prefix) {

	cmp	QWORD PTR [r11+2496], 0
	je	SHORT $LN2@kvz_update

; 955  :       fprintf(dist_file, "\n");

	mov	rcx, QWORD PTR dist_file
	lea	rdx, OFFSET FLAT:$SG4294955513
	call	fprintf

; 956  :       fprintf(bits_file, "\n");

	mov	rcx, QWORD PTR bits_file
	lea	rdx, OFFSET FLAT:$SG4294955512
	call	fprintf

; 957  :       fprintf(qp_file, "\n");

	mov	rcx, QWORD PTR qp_file
	lea	rdx, OFFSET FLAT:$SG4294955511
	call	fprintf

; 958  :       fprintf(lambda_file, "\n");

	mov	rcx, QWORD PTR lambda_file
	lea	rdx, OFFSET FLAT:$SG4294955510
	call	fprintf
	mov	rcx, QWORD PTR [r12]
	mov	r11, QWORD PTR encoder$1$[rsp]
$LN2@kvz_update:

; 931  :   }
; 932  : 
; 933  :   for(int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	inc	ebx
	add	edi, 64					; 00000040H
	mov	rdx, rcx
	mov	DWORD PTR y_ctu$1$[rsp], ebx
	mov	DWORD PTR tv3620[rsp], edi
	cmp	ebx, DWORD PTR [rcx+2540]
	jl	$LL4@kvz_update
	mov	ebp, DWORD PTR layer$1$[rsp]
$LN3@kvz_update:

; 959  :     }
; 960  :   }
; 961  : 
; 962  :   if(encoder->cfg.stats_file_prefix && encoder->cfg.rc_algorithm != KVZ_OBA) return;

	cmp	QWORD PTR [r11+2496], 0
	je	SHORT $LN33@kvz_update
	cmp	BYTE PTR [r11+2484], 2
	jne	$LN264@kvz_update
$LN33@kvz_update:

; 963  : 
; 964  :   total_distortion /= (state->encoder_control->in.height_in_lcu * state->encoder_control->in.width_in_lcu);

	mov	eax, DWORD PTR [rcx+2540]
	imul	eax, DWORD PTR [rcx+2536]
	movd	xmm0, eax

; 965  :   if (state->frame->is_irap) {

	mov	rax, QWORD PTR [r12+40]
	cvtdq2pd xmm0, xmm0
	cmp	BYTE PTR [rax+83], 0
	divsd	xmm9, xmm0
	je	$LN254@kvz_update
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [rax+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+368]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN91@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN91@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 967  :     for (int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	mov	rbx, QWORD PTR [r12]
	mov	r11d, r13d
	cmp	DWORD PTR [rbx+2540], 0
	jle	$LN15@kvz_update
	mov	eax, DWORD PTR [rbx+2536]
	npad	9
$LL16@kvz_update:

; 968  :       for (int x_ctu = 0; x_ctu < state->encoder_control->in.width_in_lcu; x_ctu++) {

	mov	r10d, r13d
	test	eax, eax
	jle	$LN14@kvz_update
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rsi, QWORD PTR [r12+48]

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	mov	rdi, QWORD PTR [r12+40]
	npad	11
$LL19@kvz_update:

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	ecx, DWORD PTR [rbx+2536]
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR [rsi+16]

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	mov	r8, QWORD PTR [rdi+160]
	add	eax, r11d
	imul	eax, ecx
	add	eax, DWORD PTR [rsi+12]
	add	eax, r10d
	cdqe
	lea	r9, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 970  :         state->frame->new_ratecontrol->intra_dis[x_ctu + y_ctu * state->encoder_control->in.width_in_lcu] =

	mov	eax, r11d
	imul	eax, ecx
	add	eax, r10d
	movsxd	rdx, eax
	mov	rax, QWORD PTR [rdi+176]
	mov	rcx, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [r8+r9*8+56]
	mov	QWORD PTR [rcx+rdx*8], rax

; 971  :           ctu->distortion;
; 972  :         state->frame->new_ratecontrol->intra_bpp[x_ctu + y_ctu * state->encoder_control->in.width_in_lcu] =

	xor	edx, edx
	mov	eax, DWORD PTR [r8+r9*8]
	div	DWORD PTR [r8+r9*8+4]
	mov	ecx, eax
	mov	eax, DWORD PTR [rbx+2536]
	imul	eax, r11d
	cvtsi2sd xmm0, rcx
	add	eax, r10d
	inc	r10d
	movsxd	rdx, eax
	mov	rax, QWORD PTR [rdi+176]
	mov	rcx, QWORD PTR [rax+256]
	movsd	QWORD PTR [rcx+rdx*8], xmm0
	mov	eax, DWORD PTR [rbx+2536]
	cmp	r10d, eax
	jl	$LL19@kvz_update
$LN14@kvz_update:

; 967  :     for (int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	inc	r11d
	cmp	r11d, DWORD PTR [rbx+2540]
	jl	$LL16@kvz_update
$LN15@kvz_update:

; 973  :           ctu->bits / ctu->pixels;
; 974  :       }
; 975  :     }
; 976  :     state->frame->new_ratecontrol->intra_pic_distortion = total_distortion;

	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
	movsd	QWORD PTR [rcx+272], xmm9

; 977  :     state->frame->new_ratecontrol->intra_pic_bpp = pic_bpp;

	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
	movsd	QWORD PTR [rcx+280], xmm12
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 91   :     static_cast<std::mutex*>(*mutex)->unlock();

	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+368]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN254@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN254@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 86   :     static_cast<std::mutex*>(*mutex)->lock();

	mov	rax, QWORD PTR [r12+40]
	mov	rcx, QWORD PTR [rax+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx+360]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN111@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN111@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 982  :   state->frame->new_ratecontrol->previous_frame_lambda = lambda;

	mov	rax, QWORD PTR [r12+40]

; 983  :   state->frame->new_ratecontrol->previous_lambdas[layer] = lambda;

	movsxd	r15, ebp
	mov	rcx, QWORD PTR [rax+176]
	movsd	QWORD PTR [rcx+248], xmm10
	mov	rcx, QWORD PTR [r12+40]
	mov	rax, QWORD PTR [rcx+176]
	movsd	QWORD PTR [rax+r15*8+192], xmm10
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 91   :     static_cast<std::mutex*>(*mutex)->unlock();

	mov	rax, QWORD PTR [rcx+176]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rax+360]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN120@kvz_update

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN120@kvz_update:
	movaps	XMMWORD PTR [rsp+96], xmm13
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 838  :   new_k = -bpp * lambda / distortion;

	movaps	xmm6, xmm12
	movsd	xmm13, QWORD PTR __real@bff0000000000000

; 839  :   new_c = distortion / pow(bpp, new_k);

	movaps	xmm0, xmm12
	movaps	xmm1, xmm13
	mulsd	xmm6, xmm10
	divsd	xmm1, xmm9
	movaps	XMMWORD PTR [rsp+80], xmm14
	movsd	xmm14, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm6, xmm1
	movaps	XMMWORD PTR [rsp+64], xmm15
	movaps	xmm1, xmm6
	xorps	xmm1, xmm14
	call	pow

; 840  : 
; 841  :   new_c = CLIP(+.1, 100.0, new_c);

	movsd	xmm15, QWORD PTR __real@4059000000000000
	movsd	xmm10, QWORD PTR __real@3fb999999999999a
	mulsd	xmm0, xmm9
	minsd	xmm0, xmm15
	comisd	xmm0, xmm10
	jae	SHORT $LN137@kvz_update
	movaps	xmm0, xmm10
$LN137@kvz_update:

; 842  :   new_k = CLIP(-3.0, -0.001, new_k);

	movsd	xmm11, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	xmm9, QWORD PTR __real@c008000000000000
	minsd	xmm6, xmm11
	comisd	xmm6, xmm9
	jae	SHORT $LN143@kvz_update
	movaps	xmm6, xmm9
$LN143@kvz_update:

; 843  : 
; 844  :   if(state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	mov	rbx, QWORD PTR [r12+40]
	cmp	BYTE PTR [rbx+83], 0
	jne	SHORT $LN255@kvz_update
	mov	rax, QWORD PTR [r12]
	movsx	ecx, BYTE PTR [rax+2483]
	mov	eax, 4
	sub	eax, ecx
	cmp	DWORD PTR [rbx+8], eax
	jle	SHORT $LN255@kvz_update

; 848  :     }
; 849  :   }
; 850  :   else {
; 851  :     state->frame->new_ratecontrol->pic_c_para[layer] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+r15*8+96], xmm0

; 852  :     state->frame->new_ratecontrol->pic_k_para[layer] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+r15*8+144], xmm6
	jmp	SHORT $LN126@kvz_update
$LN255@kvz_update:

; 845  :     for(int i = 1; i < 5; i++) {
; 846  :       state->frame->new_ratecontrol->pic_c_para[i] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+104], xmm0

; 847  :       state->frame->new_ratecontrol->pic_k_para[i] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+152], xmm6
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+112], xmm0
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+160], xmm6
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+120], xmm0
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+168], xmm6
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+128], xmm0
	mov	rax, QWORD PTR [rbx+176]
	movsd	QWORD PTR [rax+176], xmm6
$LN126@kvz_update:

; 984  :   pthread_mutex_unlock(&state->frame->new_ratecontrol->lambda_lock);
; 985  : 
; 986  :   update_pic_ck(state, pic_bpp, total_distortion, lambda, layer);
; 987  :   if (state->frame->num <= 4 || state->frame->is_irap){

	cmp	DWORD PTR [rbx+8], 4
	mov	edi, 312				; 00000138H
	jle	SHORT $LN37@kvz_update
	cmp	BYTE PTR [rbx+83], 0
	jne	SHORT $LN37@kvz_update

; 990  :     }
; 991  :   }
; 992  :   else{
; 993  :     pthread_rwlock_wrlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	rbx, QWORD PTR [rbx+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 118  :   static_cast<rw_lock_internal*>(*rwlock)->lock->lock();

	mov	rcx, QWORD PTR [rbx+r15*8+304]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 42   :         _Smtx_lock_exclusive(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_lock_exclusive
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 119  :   static_cast<rw_lock_internal*>(*rwlock)->write_lock = true;

	mov	rax, QWORD PTR [rbx+r15*8+304]
	mov	BYTE PTR [rax+8], 1
	jmp	SHORT $LN21@kvz_update
$LN37@kvz_update:
	mov	rsi, rdi
	npad	14
$LL22@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 989  :       pthread_rwlock_wrlock(&state->frame->new_ratecontrol->ck_ctu_lock[i]);

	mov	rax, QWORD PTR [r12+40]
	mov	rbx, QWORD PTR [rax+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 118  :   static_cast<rw_lock_internal*>(*rwlock)->lock->lock();

	mov	rcx, QWORD PTR [rsi+rbx]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 42   :         _Smtx_lock_exclusive(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_lock_exclusive
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 119  :   static_cast<rw_lock_internal*>(*rwlock)->write_lock = true;

	mov	rax, QWORD PTR [rsi+rbx]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 988  :     for (int i = 1; i < 5; ++i) {

	add	rsi, 8
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 119  :   static_cast<rw_lock_internal*>(*rwlock)->write_lock = true;

	mov	BYTE PTR [rax+8], 1
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 988  :     for (int i = 1; i < 5; ++i) {

	cmp	rsi, 344				; 00000158H
	jl	SHORT $LL22@kvz_update
$LN21@kvz_update:

; 994  :   }
; 995  :   for(int i = 0; i < state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu; i++) {

	mov	r14, QWORD PTR [r12]
	mov	eax, DWORD PTR [r14+2536]
	imul	eax, DWORD PTR [r14+2540]
	test	eax, eax
	jle	$LN24@kvz_update

; 859  :   double bpp = (double)state->frame->lcu_stats[ctu_index].bits / state->frame->lcu_stats[ctu_index].pixels;

	mov	rbx, QWORD PTR [r12+40]
	mov	rsi, r13
	movsd	xmm8, QWORD PTR __real@3f1a36e2eb1c432d
	mov	rbp, r13
	movsd	xmm12, QWORD PTR __real@4024000000000000
	npad	11
$LL25@kvz_update:

; 860  :   double distortion = state->frame->lcu_stats[ctu_index].distortion;
; 861  :   double lambda = state->frame->lcu_stats[ctu_index].lambda;

	mov	rcx, QWORD PTR [rbx+160]

; 862  : 
; 863  :   double new_k = 0, new_c = -1;
; 864  :   if (!state->frame->lcu_stats[ctu_index].skipped) {

	cmp	BYTE PTR [rcx+rbp+70], 0
	movsd	xmm6, QWORD PTR [rcx+rbp+24]
	jne	$LN23@kvz_update

; 865  :     distortion = MAX(distortion, 0.0001);

	mov	eax, DWORD PTR [rcx+rbp]
	xorps	xmm2, xmm2
	movsd	xmm7, QWORD PTR [rcx+rbp+56]
	xorps	xmm0, xmm0
	maxsd	xmm7, xmm8
	cvtsi2sd xmm2, rax
	mov	eax, DWORD PTR [rcx+rbp+4]
	cvtsi2sd xmm0, rax
	divsd	xmm2, xmm0

; 866  : 
; 867  :     bpp = CLIP(0.0001, 10.0, bpp);

	minsd	xmm2, xmm12
	comisd	xmm2, xmm8
	jae	SHORT $LN168@kvz_update
	movaps	xmm2, xmm8
$LN168@kvz_update:

; 868  :     new_k = -bpp * lambda / distortion;

	movaps	xmm0, xmm13
	mulsd	xmm6, xmm2
	divsd	xmm0, xmm7
	mulsd	xmm6, xmm0

; 869  :     new_k = CLIP(-3.0, -0.001, new_k);

	minsd	xmm6, xmm11
	comisd	xmm6, xmm9
	jae	SHORT $LN174@kvz_update
	movaps	xmm6, xmm9
$LN174@kvz_update:

; 870  :     new_c = distortion / pow(bpp, new_k);

	movaps	xmm1, xmm6
	movaps	xmm0, xmm2
	xorps	xmm1, xmm14
	call	pow
	mulsd	xmm0, xmm7

; 871  :     
; 872  :     new_c = CLIP(+.1, 100.0, new_c);

	minsd	xmm0, xmm15
	comisd	xmm0, xmm10
	jae	SHORT $LN180@kvz_update
	movaps	xmm0, xmm10
$LN180@kvz_update:

; 873  : 
; 874  :     if (state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	cmp	BYTE PTR [rbx+83], 0
	jne	SHORT $LN160@kvz_update
	movsx	eax, BYTE PTR [r14+2483]
	mov	ecx, 4
	sub	ecx, eax
	cmp	DWORD PTR [rbx+8], ecx
	jle	SHORT $LN160@kvz_update

; 878  :       }
; 879  :     }
; 880  :     else {
; 881  :       state->frame->new_ratecontrol->c_para[layer][ctu_index] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+r15*8]
	movsd	QWORD PTR [rsi+rcx], xmm0

; 882  :       state->frame->new_ratecontrol->k_para[layer][ctu_index] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+r15*8+48]
	jmp	SHORT $LN266@kvz_update
$LN160@kvz_update:

; 875  :       for (int i = 1; i < 5; i++) {
; 876  :         state->frame->new_ratecontrol->c_para[i][ctu_index] = new_c;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+8]
	movsd	QWORD PTR [rsi+rcx], xmm0

; 877  :         state->frame->new_ratecontrol->k_para[i][ctu_index] = new_k;

	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+56]
	movsd	QWORD PTR [rsi+rcx], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+16]
	movsd	QWORD PTR [rsi+rcx], xmm0
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+64]
	movsd	QWORD PTR [rsi+rcx], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+24]
	movsd	QWORD PTR [rsi+rcx], xmm0
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+72]
	movsd	QWORD PTR [rsi+rcx], xmm6
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+32]
	movsd	QWORD PTR [rsi+rcx], xmm0
	mov	rax, QWORD PTR [rbx+176]
	mov	rcx, QWORD PTR [rax+80]
$LN266@kvz_update:

; 994  :   }
; 995  :   for(int i = 0; i < state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu; i++) {

	movsd	QWORD PTR [rsi+rcx], xmm6
$LN23@kvz_update:
	mov	eax, DWORD PTR [r14+2540]
	inc	r13d
	imul	eax, DWORD PTR [r14+2536]
	add	rbp, 72					; 00000048H
	add	rsi, 8
	cmp	r13d, eax
	jl	$LL25@kvz_update
$LN24@kvz_update:

; 996  :     update_ck(state, i, layer);
; 997  :   }
; 998  :   if (state->frame->num <= 4 || state->frame->is_irap){

	mov	rax, QWORD PTR [r12+40]
	movaps	xmm15, XMMWORD PTR [rsp+64]
	movaps	xmm14, XMMWORD PTR [rsp+80]
	movaps	xmm13, XMMWORD PTR [rsp+96]
	cmp	DWORD PTR [rax+8], 4
	jle	SHORT $LL40@kvz_update
	cmp	BYTE PTR [rax+83], 0
	jne	SHORT $LL40@kvz_update

; 1001 :     }
; 1002 :   }
; 1003 :   else{
; 1004 :     pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	rdx, QWORD PTR [rax+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 125  :   if (static_cast<rw_lock_internal*>(*rwlock)->write_lock) {

	mov	rcx, QWORD PTR [rdx+r15*8+304]
	cmp	BYTE PTR [rcx+8], 0
	je	SHORT $LN191@kvz_update

; 126  :     static_cast<rw_lock_internal*>(*rwlock)->write_lock = false;

	mov	BYTE PTR [rcx+8], 0

; 127  :     static_cast<rw_lock_internal*>(*rwlock)->lock->unlock();

	mov	rcx, QWORD PTR [rdx+r15*8+304]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 50   :         _Smtx_unlock_exclusive(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_exclusive
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 128  :   }

	jmp	SHORT $LN264@kvz_update
$LN191@kvz_update:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 62   :         _Smtx_unlock_shared(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_shared
	jmp	SHORT $LN264@kvz_update
	npad	12
$LL40@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1000 :       pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[i]);

	mov	rax, QWORD PTR [r12+40]
	mov	rdx, QWORD PTR [rax+176]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 125  :   if (static_cast<rw_lock_internal*>(*rwlock)->write_lock) {

	mov	rcx, QWORD PTR [rdi+rdx]
	cmp	BYTE PTR [rcx+8], 0
	je	SHORT $LN183@kvz_update

; 126  :     static_cast<rw_lock_internal*>(*rwlock)->write_lock = false;

	mov	BYTE PTR [rcx+8], 0

; 127  :     static_cast<rw_lock_internal*>(*rwlock)->lock->unlock();

	mov	rcx, QWORD PTR [rdi+rdx]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 50   :         _Smtx_unlock_exclusive(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_exclusive
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 128  :   }

	jmp	SHORT $LN26@kvz_update
$LN183@kvz_update:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\shared_mutex

; 62   :         _Smtx_unlock_shared(&_Myhandle);

	mov	rcx, QWORD PTR [rcx]
	call	_Smtx_unlock_shared
$LN26@kvz_update:
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 999  :     for (int i = 1; i < 5; ++i) {

	add	rdi, 8
	cmp	rdi, 344				; 00000158H
	jl	SHORT $LL40@kvz_update
$LN264@kvz_update:
	mov	r14, QWORD PTR [rsp+240]

; 1005 :   }
; 1006 : }

	lea	r11, QWORD PTR [rsp+264]
	movaps	xmm9, XMMWORD PTR [r11-104]
	movaps	xmm10, XMMWORD PTR [r11-120]
	movaps	xmm11, XMMWORD PTR [r11-136]
	mov	rsi, QWORD PTR [rsp+256]
	mov	r15, QWORD PTR [rsp+232]
	movaps	xmm8, XMMWORD PTR [rsp+176]
	movaps	xmm7, XMMWORD PTR [rsp+192]
	movaps	xmm6, XMMWORD PTR [rsp+208]
	mov	rdi, QWORD PTR [rsp+248]
	movaps	xmm12, XMMWORD PTR [rsp+112]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rbp
	pop	rbx
	ret	0
$LN265@kvz_update:
kvz_update_after_picture ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 80
kvz_set_picture_lambda_and_qp PROC

; 1013 : {

$LN52:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1014 :   const encoder_control_t * const ctrl = state->encoder_control;

	mov	rbx, QWORD PTR [rcx]
	mov	rdi, rcx

; 1015 : 
; 1016 :   if (ctrl->cfg.target_bitrate > 0) {

	mov	rdx, QWORD PTR [rcx+40]
	cmp	DWORD PTR [rbx+2352], 0
	jle	$LN2@kvz_set_pi

; 1017 :     // Rate control enabled
; 1018 : 
; 1019 :     if (state->frame->num > ctrl->cfg.owf) {

	mov	eax, DWORD PTR [rbx+172]
	mov	QWORD PTR [rsp+80], rsi
	movaps	XMMWORD PTR [rsp+48], xmm6
	cmp	DWORD PTR [rdx+8], eax
	jle	SHORT $LN4@kvz_set_pi

; 1020 :       // At least one frame has been written.
; 1021 :       update_parameters(state->stats_bitstream_length * 8,

	mov	ecx, DWORD PTR [rcx+364]
	lea	rax, QWORD PTR [rdx+144]
	movsd	xmm2, QWORD PTR [rdx]
	lea	r9, QWORD PTR [rdx+136]
	mov	edx, DWORD PTR [rbx+2552]
	shl	ecx, 3
	mov	QWORD PTR [rsp+32], rax
	call	update_parameters
$LN4@kvz_set_pi:

; 1022 :                         ctrl->in.pixels_per_pic,
; 1023 :                         state->frame->lambda,
; 1024 :                         &state->frame->rc_alpha,
; 1025 :                         &state->frame->rc_beta);
; 1026 :     }
; 1027 : 
; 1028 :     const double pic_target_bits = pic_allocate_bits(state);

	mov	rcx, rdi
	call	pic_allocate_bits

; 1029 :     const double target_bpp = pic_target_bits / ctrl->in.pixels_per_pic;
; 1030 :     double lambda = state->frame->rc_alpha * pow(target_bpp, state->frame->rc_beta);

	mov	rsi, QWORD PTR [rdi+40]
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, QWORD PTR [rbx+2552]
	movaps	xmm6, xmm0
	divsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR [rsi+144]
	call	pow
	movaps	xmm3, xmm0
	mulsd	xmm3, QWORD PTR [rsi+136]

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm3, xmm3
	setp	al
	cmp	al, 1
	jne	SHORT $LN27@kvz_set_pi
	movsd	xmm0, QWORD PTR __real@40c3880000000000
	jmp	SHORT $LN31@kvz_set_pi
$LN27@kvz_set_pi:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm3, QWORD PTR __real@40c3880000000000
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm3, xmm0
	jb	SHORT $LN31@kvz_set_pi
	movaps	xmm0, xmm3
$LN31@kvz_set_pi:

; 1031 :     lambda = clip_lambda(lambda);
; 1032 : 
; 1033 :     state->frame->lambda              = lambda;

	movsd	QWORD PTR [rsi], xmm0

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	mov	rsi, QWORD PTR [rsp+80]
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si ecx, xmm0

; 396  :   return CLIP_TO_QP(qp);

	cmp	cl, 51					; 00000033H
	jg	SHORT $LN45@kvz_set_pi
	test	cl, cl
	jns	SHORT $LN40@kvz_set_pi
	xor	cl, cl
	jmp	SHORT $LN40@kvz_set_pi
$LN45@kvz_set_pi:
	mov	cl, 51					; 00000033H
$LN40@kvz_set_pi:

; 1034 :     state->frame->QP                  = lambda_to_qp(lambda);

	mov	rax, QWORD PTR [rdi+40]
	mov	BYTE PTR [rax+24], cl

; 1035 :     state->frame->cur_pic_target_bits = pic_target_bits;

	mov	rax, QWORD PTR [rdi+40]
	movsd	QWORD PTR [rax+128], xmm6
	movaps	xmm6, XMMWORD PTR [rsp+48]

; 1054 :   }
; 1055 : }

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN2@kvz_set_pi:

; 1036 : 
; 1037 :   } else {
; 1038 :     // Rate control disabled
; 1039 :     kvz_gop_config const * const gop = &ctrl->cfg.gop[state->frame->gop_offset];

	movsx	rcx, BYTE PTR [rdx+16]
	shl	rcx, 6

; 1040 :     const int gop_len = ctrl->cfg.gop_len;
; 1041 : 
; 1042 :     if (gop_len > 0 && state->frame->slicetype != KVZ_SLICE_I) {

	cmp	BYTE PTR [rbx+300], 0
	jle	SHORT $LN5@kvz_set_pi
	cmp	DWORD PTR [rdx+88], 2
	je	SHORT $LN5@kvz_set_pi

; 1043 :       double qp = ctrl->cfg.qp;
; 1044 :       qp += gop->qp_offset;

	movsx	eax, BYTE PTR [rcx+rbx+312]
	movd	xmm0, DWORD PTR [rbx]
	cvtdq2pd xmm0, xmm0
	movd	xmm2, eax
	cvtdq2pd xmm2, xmm2
	addsd	xmm2, xmm0
	xorps	xmm0, xmm0

; 1045 :       qp += CLIP(0.0, 3.0, qp * gop->qp_model_scale + gop->qp_model_offset);

	movaps	xmm1, xmm2
	mulsd	xmm1, QWORD PTR [rcx+rbx+360]
	addsd	xmm1, QWORD PTR [rcx+rbx+352]
	minsd	xmm1, QWORD PTR __real@4008000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN11@kvz_set_pi
	movaps	xmm0, xmm1
$LN11@kvz_set_pi:
	addsd	xmm0, xmm2

; 1046 :       state->frame->QP = CLIP_TO_QP((int)(qp + 0.5));

	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0

; 1047 : 
; 1048 :     }

	jmp	SHORT $LN50@kvz_set_pi
$LN5@kvz_set_pi:

; 1049 :     else {
; 1050 :       state->frame->QP = CLIP_TO_QP(ctrl->cfg.qp + ctrl->cfg.intra_qp_offset);

	movsx	ecx, BYTE PTR [rbx+2460]
	mov	eax, DWORD PTR [rbx]
	add	eax, ecx
$LN50@kvz_set_pi:

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	cmp	eax, 51					; 00000033H
	jg	SHORT $LN47@kvz_set_pi
	test	eax, eax
	jns	SHORT $LN23@kvz_set_pi
	xor	eax, eax
	jmp	SHORT $LN23@kvz_set_pi
$LN47@kvz_set_pi:
	mov	eax, 51					; 00000033H
$LN23@kvz_set_pi:
	mov	BYTE PTR [rdx+24], al

; 1051 :     }
; 1052 : 
; 1053 :     state->frame->lambda = qp_to_lambda(state, state->frame->QP);

	mov	rbx, QWORD PTR [rdi+40]

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	movsd	xmm0, QWORD PTR __real@4000000000000000

; 1051 :     }
; 1052 : 
; 1053 :     state->frame->lambda = qp_to_lambda(state, state->frame->QP);

	movsx	eax, BYTE PTR [rbx+24]

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	sub	eax, 12
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, QWORD PTR __real@3fd5555555555555
	call	pow
	mulsd	xmm0, QWORD PTR __real@3fe23d70a3d70a3d

; 1051 :     }
; 1052 : 
; 1053 :     state->frame->lambda = qp_to_lambda(state, state->frame->QP);

	movsd	QWORD PTR [rbx], xmm0

; 1054 :   }
; 1055 : }

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
kvz_set_picture_lambda_and_qp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
state$ = 8
pos$ = 16
lcu_allocate_bits PROC

; 1066 :   double lcu_weight;
; 1067 :   if (state->frame->num > state->encoder_control->cfg.owf) {

	mov	r8, QWORD PTR [rcx]
	mov	r9, QWORD PTR [rcx+40]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	mov	eax, DWORD PTR [r8+172]
	cmp	DWORD PTR [r9+8], eax
	jle	SHORT $LN2@lcu_alloca
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rax, QWORD PTR [rcx+48]
	mov	rcx, rdx
	shr	rcx, 32					; 00000020H
	add	ecx, DWORD PTR [rax+16]
	imul	ecx, DWORD PTR [r8+2536]
	add	ecx, DWORD PTR [rax+12]
	lea	eax, DWORD PTR [rdx+rcx]

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	rcx, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1068 :     lcu_weight = kvz_get_lcu_stats(state, pos.x, pos.y)->weight;

	mov	rax, QWORD PTR [r9+160]
	movsd	xmm0, QWORD PTR [rax+rcx*8+8]

; 1073 :   }
; 1074 : 
; 1075 :   // Target number of bits for the current LCU.
; 1076 :   const double lcu_target_bits = state->frame->cur_pic_target_bits * lcu_weight;

	mulsd	xmm0, QWORD PTR [r9+128]

; 1077 : 
; 1078 :   // Allocate at least one bit for each LCU.
; 1079 :   return MAX(1, lcu_target_bits);

	maxsd	xmm0, xmm2

; 1080 : }

	ret	0
$LN2@lcu_alloca:

; 1069 :   } else {
; 1070 :     const uint32_t num_lcus = state->encoder_control->in.width_in_lcu *

	mov	eax, DWORD PTR [r8+2540]
	xorps	xmm1, xmm1
	imul	eax, DWORD PTR [r8+2536]

; 1071 :                               state->encoder_control->in.height_in_lcu;
; 1072 :     lcu_weight = 1.0 / num_lcus;

	movaps	xmm0, xmm2
	cvtsi2sd xmm1, rax
	divsd	xmm0, xmm1

; 1073 :   }
; 1074 : 
; 1075 :   // Target number of bits for the current LCU.
; 1076 :   const double lcu_target_bits = state->frame->cur_pic_target_bits * lcu_weight;

	mulsd	xmm0, QWORD PTR [r9+128]

; 1077 : 
; 1078 :   // Allocate at least one bit for each LCU.
; 1079 :   return MAX(1, lcu_target_bits);

	maxsd	xmm0, xmm2

; 1080 : }

	ret	0
lcu_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
_TEXT	SEGMENT
tv1675 = 256
state$ = 256
pos$ = 264
kvz_set_lcu_lambda_and_qp PROC

; 1084 : {

$LN99:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 216				; 000000d8H
	movaps	XMMWORD PTR [rsp+80], xmm12
	mov	rdi, rcx

; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	movsd	xmm12, QWORD PTR __real@3fd5555555555555
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	r8, rdx
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1084 : {

	movaps	XMMWORD PTR [rsp+64], xmm13
	mov	rbx, rdx

; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	movsd	xmm13, QWORD PTR __real@4000000000000000
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1601 :   return &state->frame->lcu_stats[index];

	mov	r9, QWORD PTR [rdi+40]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1084 : {

	movaps	XMMWORD PTR [rsp+48], xmm14

; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	movsd	xmm14, QWORD PTR __real@3fe23d70a3d70a3d
	mov	QWORD PTR [rax+24], rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1601 :   return &state->frame->lcu_stats[index];

	mov	r14, QWORD PTR [r9+160]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1084 : {

	mov	QWORD PTR [rax-56], r15

; 1085 :   const encoder_control_t * const ctrl = state->encoder_control;

	mov	r15, QWORD PTR [rcx]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rcx, QWORD PTR [rcx+48]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1084 : {

	movaps	XMMWORD PTR [rax-72], xmm6
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	shr	r8, 32					; 00000020H
	mov	r10d, DWORD PTR [r15+2536]
	mov	eax, r10d
	mov	ebp, DWORD PTR [rcx+16]
	mov	edx, DWORD PTR [rcx+12]
	add	ebp, r8d
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	mov	r11, QWORD PTR [r15+2432]
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	imul	eax, ebp
	add	eax, edx
	add	eax, ebx

; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	rsi, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	test	r11, r11
	je	$LN2@kvz_set_lc

; 1089 :     vector2d_t lcu = {
; 1090 :       pos.x + state->tile->lcu_offset_x,
; 1091 :       pos.y + state->tile->lcu_offset_y
; 1092 :     };
; 1093 :     vector2d_t roi = {

	mov	r8d, DWORD PTR [r15+2424]
	lea	ecx, DWORD PTR [rdx+rbx]
	mov	eax, r8d
	imul	eax, ecx
	cdq
	idiv	r10d
	mov	ecx, eax
	mov	eax, DWORD PTR [r15+2428]
	imul	eax, ebp
	cdq
	idiv	DWORD PTR [r15+2540]

; 1094 :       lcu.x * ctrl->cfg.roi.width / ctrl->in.width_in_lcu,
; 1095 :       lcu.y * ctrl->cfg.roi.height / ctrl->in.height_in_lcu
; 1096 :     };
; 1097 :     int roi_index = roi.x + roi.y * ctrl->cfg.roi.width;

	imul	eax, r8d
	add	eax, ecx

; 1098 :     int dqp = ctrl->cfg.roi.dqps[roi_index];

	cdqe
	movsx	edx, BYTE PTR [rax+r11]

; 1099 :     state->qp = CLIP_TO_QP(state->frame->QP + dqp);

	movsx	eax, BYTE PTR [r9+24]
	add	edx, eax
	cmp	edx, 51					; 00000033H
	jg	SHORT $LN94@kvz_set_lc
	test	edx, edx
	jns	SHORT $LN14@kvz_set_lc
	xor	edx, edx
	jmp	SHORT $LN14@kvz_set_lc
$LN94@kvz_set_lc:
	mov	edx, 51					; 00000033H
$LN14@kvz_set_lc:

; 1100 :     state->lambda = qp_to_lambda(state, state->qp);

	movsx	eax, dl

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	movaps	xmm0, xmm13
	sub	eax, 12

; 1099 :     state->qp = CLIP_TO_QP(state->frame->QP + dqp);

	mov	BYTE PTR [rdi+384], dl
	movd	xmm1, eax

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, xmm12
	call	pow
	movaps	xmm6, xmm0

; 1101 :     state->lambda_sqrt = sqrt(state->lambda);

	xorps	xmm0, xmm0

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	mulsd	xmm6, xmm14

; 1100 :     state->lambda = qp_to_lambda(state, state->qp);

	movsd	QWORD PTR [rdi+368], xmm6

; 1101 :     state->lambda_sqrt = sqrt(state->lambda);

	sqrtsd	xmm0, xmm6

; 1102 : 
; 1103 :   }

	jmp	$LN97@kvz_set_lc
$LN2@kvz_set_lc:

; 1104 :   else if (ctrl->cfg.target_bitrate > 0) {

	cmp	DWORD PTR [r15+2352], 0
	jle	$LN4@kvz_set_lc

; 1105 :     const uint32_t pixels    = MIN(LCU_WIDTH, state->tile->frame->width  - LCU_WIDTH * pos.x) *

	mov	rcx, QWORD PTR [rcx]
	mov	eax, ebx
	mov	QWORD PTR [rsp+208], r12

; 1106 :                                MIN(LCU_WIDTH, state->tile->frame->height - LCU_WIDTH * pos.y);
; 1107 : 
; 1108 :     if (state->frame->num > ctrl->cfg.owf) {

	lea	r12, QWORD PTR [r14+rsi*8]
	mov	QWORD PTR [rsp+200], r13
	lea	r13, QWORD PTR [r14+48]
	shl	eax, 6
	lea	r13, QWORD PTR [r13+rsi*8]
	mov	edx, DWORD PTR [rcx+16]
	mov	ebp, DWORD PTR [rcx+20]
	sub	edx, eax
	mov	eax, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+160], xmm7
	cmp	edx, eax
	movaps	XMMWORD PTR [rsp+144], xmm8
	movaps	XMMWORD PTR [rsp+128], xmm9
	cmovg	edx, eax
	movaps	XMMWORD PTR [rsp+112], xmm10
	shl	r8d, 6
	sub	ebp, r8d
	movaps	XMMWORD PTR [rsp+96], xmm11
	cmp	ebp, eax
	cmovg	ebp, eax
	mov	eax, DWORD PTR [r15+172]
	imul	ebp, edx
	cmp	DWORD PTR [r9+8], eax
	jle	SHORT $LN6@kvz_set_lc

; 1109 :       update_parameters(lcu->bits,

	movsd	xmm2, QWORD PTR [r14+rsi*8+24]
	lea	r9, QWORD PTR [r12+40]
	mov	ecx, DWORD PTR [r14+rsi*8]
	mov	edx, ebp
	mov	QWORD PTR [rsp+32], r13
	call	update_parameters

; 1110 :                         pixels,
; 1111 :                         lcu->lambda,
; 1112 :                         &lcu->rc_alpha,
; 1113 :                         &lcu->rc_beta);
; 1114 :     } else {

	jmp	SHORT $LN7@kvz_set_lc
$LN6@kvz_set_lc:

; 1115 :       lcu->rc_alpha = state->frame->rc_alpha;

	mov	rax, QWORD PTR [r9+136]
	mov	QWORD PTR [r12+40], rax

; 1116 :       lcu->rc_beta  = state->frame->rc_beta;

	mov	rax, QWORD PTR [rdi+40]
	mov	rcx, QWORD PTR [rax+144]
	mov	QWORD PTR [r13], rcx
$LN7@kvz_set_lc:

; 1067 :   if (state->frame->num > state->encoder_control->cfg.owf) {

	mov	r8, QWORD PTR [rdi+40]
	mov	rdx, QWORD PTR [rdi]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mov	eax, DWORD PTR [r8+8]
	mov	DWORD PTR tv1675[rsp], eax
	cmp	eax, DWORD PTR [rdx+172]
	jle	SHORT $LN50@kvz_set_lc
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	rax, QWORD PTR [rdi+48]
	mov	ecx, DWORD PTR [rax+16]
	add	ecx, DWORD PTR pos$[rsp+4]
	imul	ecx, DWORD PTR [rdx+2536]
	add	ecx, DWORD PTR [rax+12]
	lea	eax, DWORD PTR [rbx+rcx]

; 1601 :   return &state->frame->lcu_stats[index];

	cdqe
	lea	rcx, QWORD PTR [rax+rax*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 1068 :     lcu_weight = kvz_get_lcu_stats(state, pos.x, pos.y)->weight;

	mov	rax, QWORD PTR [r8+160]
	movsd	xmm2, QWORD PTR [rax+rcx*8+8]

; 1069 :   } else {

	jmp	SHORT $LN51@kvz_set_lc
$LN50@kvz_set_lc:

; 1070 :     const uint32_t num_lcus = state->encoder_control->in.width_in_lcu *

	mov	eax, DWORD PTR [rdx+2540]
	xorps	xmm0, xmm0
	imul	eax, DWORD PTR [rdx+2536]

; 1071 :                               state->encoder_control->in.height_in_lcu;
; 1072 :     lcu_weight = 1.0 / num_lcus;

	movaps	xmm2, xmm1
	cvtsi2sd xmm0, rax
	divsd	xmm2, xmm0
$LN51@kvz_set_lc:

; 1073 :   }
; 1074 : 
; 1075 :   // Target number of bits for the current LCU.
; 1076 :   const double lcu_target_bits = state->frame->cur_pic_target_bits * lcu_weight;

	mulsd	xmm2, QWORD PTR [r8+128]
	xorps	xmm0, xmm0

; 1117 :     }
; 1118 : 
; 1119 :     const double target_bits = lcu_allocate_bits(state, pos);
; 1120 :     const double target_bpp  = target_bits / pixels;

	mov	eax, ebp

; 1121 : 
; 1122 :     double lambda = clip_lambda(lcu->rc_alpha * pow(target_bpp, lcu->rc_beta));

	movsd	xmm10, QWORD PTR [r13]
	movaps	xmm9, xmm1
	movsd	xmm11, QWORD PTR [r12+40]
	cvtsi2sd xmm0, rax

; 1079 :   return MAX(1, lcu_target_bits);

	maxsd	xmm2, xmm1

; 1121 : 
; 1122 :     double lambda = clip_lambda(lcu->rc_alpha * pow(target_bpp, lcu->rc_beta));

	movaps	xmm1, xmm10
	divsd	xmm9, xmm0
	mulsd	xmm2, xmm9
	movaps	xmm0, xmm2
	call	pow

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	movsd	xmm8, QWORD PTR __real@3fb999999999999a

; 1121 : 
; 1122 :     double lambda = clip_lambda(lcu->rc_alpha * pow(target_bpp, lcu->rc_beta));

	movaps	xmm7, xmm0

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	mov	r13, QWORD PTR [rsp+200]
	mov	r12, QWORD PTR [rsp+208]
	movsd	xmm6, QWORD PTR __real@40c3880000000000

; 1121 : 
; 1122 :     double lambda = clip_lambda(lcu->rc_alpha * pow(target_bpp, lcu->rc_beta));

	mulsd	xmm7, xmm11

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm7, xmm7
	setp	al
	cmp	al, 1
	jne	SHORT $LN58@kvz_set_lc
	movaps	xmm7, xmm6
	jmp	SHORT $LN64@kvz_set_lc
$LN58@kvz_set_lc:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm7, xmm6
	comisd	xmm7, xmm8
	jae	SHORT $LN64@kvz_set_lc
	movaps	xmm7, xmm8
$LN64@kvz_set_lc:

; 1123 :     // Clip lambda according to the equations 24 and 26 in
; 1124 :     // https://doi.org/10.1109/TIP.2014.2336550
; 1125 :     if (state->frame->num > ctrl->cfg.owf) {

	mov	eax, DWORD PTR tv1675[rsp]
	cmp	eax, DWORD PTR [r15+172]
	jle	SHORT $LN23@kvz_set_lc

; 1126 :       const double bpp         = lcu->bits / (double)pixels;

	mov	eax, DWORD PTR [r14+rsi*8]
	xorps	xmm0, xmm0

; 1127 :       const double lambda_comp = clip_lambda(lcu->rc_alpha * pow(bpp, lcu->rc_beta));

	movaps	xmm1, xmm10
	cvtsi2sd xmm0, rax
	mulsd	xmm0, xmm9
	call	pow
	movaps	xmm2, xmm0
	mulsd	xmm2, xmm11

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm2, xmm2
	setp	al
	cmp	al, 1
	jne	SHORT $LN67@kvz_set_lc
	movaps	xmm2, xmm6
	jmp	SHORT $LN73@kvz_set_lc
$LN67@kvz_set_lc:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm2, xmm6
	comisd	xmm2, xmm8
	jae	SHORT $LN73@kvz_set_lc
	movaps	xmm2, xmm8
$LN73@kvz_set_lc:

; 1128 :       lambda = CLIP(lambda_comp * 0.7937005259840998,

	movaps	xmm0, xmm2
	mulsd	xmm0, QWORD PTR __real@3ff428a2f98d728b
	minsd	xmm0, xmm7
	movaps	xmm7, xmm2
	mulsd	xmm7, QWORD PTR __real@3fe965fea53d6e3d
	comisd	xmm7, xmm0
	ja	SHORT $LN23@kvz_set_lc
	movaps	xmm7, xmm0
$LN23@kvz_set_lc:

; 1129 :                     lambda_comp * 1.2599210498948732,
; 1130 :                     lambda);
; 1131 :     }
; 1132 :     lambda = CLIP(state->frame->lambda * 0.6299605249474366,

	mov	rax, QWORD PTR [rdi+40]
	movaps	xmm11, XMMWORD PTR [rsp+96]
	movaps	xmm10, XMMWORD PTR [rsp+112]
	movaps	xmm9, XMMWORD PTR [rsp+128]
	movsd	xmm0, QWORD PTR [rax]
	movaps	xmm2, xmm0
	mulsd	xmm0, QWORD PTR __real@3ff965fea53d6e3c
	mulsd	xmm2, QWORD PTR __real@3fe428a2f98d728b
	minsd	xmm0, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+160]
	comisd	xmm2, xmm0
	ja	SHORT $LN29@kvz_set_lc
	movaps	xmm2, xmm0
$LN29@kvz_set_lc:

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	ucomisd	xmm2, xmm2
	setp	al
	cmp	al, 1
	je	SHORT $LN82@kvz_set_lc

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	minsd	xmm2, xmm6
	comisd	xmm2, xmm8
	movaps	xmm6, xmm2
	jae	SHORT $LN82@kvz_set_lc
	movaps	xmm6, xmm8
$LN82@kvz_set_lc:

; 1133 :                   state->frame->lambda * 1.5874010519681994,
; 1134 :                   lambda);
; 1135 :     lambda = clip_lambda(lambda);
; 1136 : 
; 1137 :     state->lambda      = lambda;
; 1138 :     state->lambda_sqrt = sqrt(lambda);

	sqrtpd	xmm0, xmm6
	movsd	QWORD PTR [rdi+368], xmm6
	movsd	QWORD PTR [rdi+376], xmm0

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	movaps	xmm0, xmm6
	call	log
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	movaps	xmm8, XMMWORD PTR [rsp+144]
	addsd	xmm0, QWORD PTR __real@402c71d14e3bcd36
	cvttsd2si eax, xmm0

; 396  :   return CLIP_TO_QP(qp);

	cmp	al, 51					; 00000033H
	jg	SHORT $LN95@kvz_set_lc
	test	al, al
	jns	SHORT $LN89@kvz_set_lc
	xor	al, al

; 1139 :     state->qp          = lambda_to_qp(lambda);

	mov	BYTE PTR [rdi+384], al

; 1140 : 
; 1141 :   } else {

	jmp	SHORT $LN5@kvz_set_lc
$LN95@kvz_set_lc:

; 396  :   return CLIP_TO_QP(qp);

	mov	al, 51					; 00000033H
$LN89@kvz_set_lc:

; 1139 :     state->qp          = lambda_to_qp(lambda);

	mov	BYTE PTR [rdi+384], al

; 1140 : 
; 1141 :   } else {

	jmp	SHORT $LN5@kvz_set_lc
$LN4@kvz_set_lc:

; 1142 :     state->qp          = state->frame->QP;

	movzx	eax, BYTE PTR [r9+24]
	mov	BYTE PTR [rdi+384], al

; 1143 :     state->lambda      = state->frame->lambda;

	movsd	xmm6, QWORD PTR [r9]
	movsd	QWORD PTR [rdi+368], xmm6
	movsd	xmm0, QWORD PTR [r9]

; 1144 :     state->lambda_sqrt = sqrt(state->frame->lambda);

	sqrtpd	xmm0, xmm0
$LN97@kvz_set_lc:

; 1145 :   }
; 1146 : 
; 1147 :   lcu->lambda = state->lambda;

	movsd	QWORD PTR [rdi+376], xmm0
$LN5@kvz_set_lc:

; 1148 :   lcu->qp = state->qp;

	mov	rbp, QWORD PTR [rsp+272]
	movsd	QWORD PTR [r14+rsi*8+24], xmm6
	movzx	eax, BYTE PTR [rdi+384]
	movaps	xmm6, XMMWORD PTR [rsp+176]
	mov	BYTE PTR [r14+rsi*8+68], al

; 1149 : 
; 1150 :   // Apply variance adaptive quantization
; 1151 :   if (ctrl->cfg.vaq) {

	cmp	DWORD PTR [r15+2468], 0
	mov	r15, QWORD PTR [rsp+192]
	je	$LN9@kvz_set_lc

; 1152 :     vector2d_t lcu_pos = {

	mov	rdx, QWORD PTR [rdi+48]
	mov	ecx, DWORD PTR pos$[rsp+4]

; 1153 :       pos.x + state->tile->lcu_offset_x,
; 1154 :       pos.y + state->tile->lcu_offset_y
; 1155 :     };
; 1156 :     int id = lcu_pos.x + lcu_pos.y * state->tile->frame->width_in_lcu;

	mov	rax, QWORD PTR [rdx]
	mov	r8d, DWORD PTR [rdx+12]
	add	ecx, DWORD PTR [rdx+16]
	add	r8d, ebx
	mov	edx, DWORD PTR [rax+28]

; 1157 :     int aq_offset = round(state->frame->aq_offsets[id]);

	mov	rax, QWORD PTR [rdi+40]
	imul	edx, ecx
	mov	rcx, QWORD PTR [rax+192]
	add	edx, r8d
	movsxd	rdx, edx
	movsd	xmm0, QWORD PTR [rcx+rdx*8]
	call	QWORD PTR __imp_round
	cvttsd2si eax, xmm0

; 1158 :     state->qp += aq_offset;    

	add	BYTE PTR [rdi+384], al

; 1159 :     // Maximum delta QP is clipped according to ITU T-REC-H.265 specification chapter 7.4.9.10 Transform unit semantics
; 1160 :     // Clipping range is a function of bit depth
; 1161 :     // Since this value will be later combined with qp_pred, clip to half of that instead to be safe
; 1162 :     state->qp = CLIP(state->frame->QP + KVZ_QP_DELTA_MIN / 2, state->frame->QP + KVZ_QP_DELTA_MAX / 2, state->qp);

	mov	rax, QWORD PTR [rdi+40]
	movsx	edx, BYTE PTR [rdi+384]
	movsx	ecx, BYTE PTR [rax+24]
	lea	r8d, DWORD PTR [rcx+25]
	add	ecx, -13
	cmp	r8d, edx
	mov	eax, r8d
	cmovge	eax, edx
	cmp	ecx, eax
	jg	SHORT $LN35@kvz_set_lc
	cmp	r8d, edx
	mov	ecx, edx
	cmovl	ecx, r8d
$LN35@kvz_set_lc:
	mov	BYTE PTR [rdi+384], cl

; 1163 :     state->qp = CLIP_TO_QP(state->qp);

	cmp	cl, 51					; 00000033H
	jg	SHORT $LN96@kvz_set_lc
	test	cl, cl
	jns	SHORT $LN42@kvz_set_lc
	xor	cl, cl
	jmp	SHORT $LN42@kvz_set_lc
$LN96@kvz_set_lc:
	mov	cl, 51					; 00000033H
$LN42@kvz_set_lc:

; 1164 :     state->lambda = qp_to_lambda(state, state->qp);

	movsx	eax, cl

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	movaps	xmm0, xmm13
	sub	eax, 12

; 1163 :     state->qp = CLIP_TO_QP(state->qp);

	mov	BYTE PTR [rdi+384], cl
	movd	xmm1, eax

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, xmm12
	call	pow
	mulsd	xmm0, xmm14

; 1165 :     state->lambda_sqrt = sqrt(state->lambda);

	xorps	xmm1, xmm1
	sqrtsd	xmm1, xmm0
	movsd	QWORD PTR [rdi+368], xmm0
	movsd	QWORD PTR [rdi+376], xmm1

; 1166 : 
; 1167 :     lcu->adjust_lambda = state->lambda;

	movsd	QWORD PTR [r14+rsi*8+32], xmm0

; 1168 :     lcu->adjust_qp = state->qp;

	movzx	eax, BYTE PTR [rdi+384]
	mov	BYTE PTR [r14+rsi*8+69], al
$LN9@kvz_set_lc:

; 1169 :   }
; 1170 : }

	movaps	xmm12, XMMWORD PTR [rsp+80]
	movaps	xmm13, XMMWORD PTR [rsp+64]
	movaps	xmm14, XMMWORD PTR [rsp+48]
	add	rsp, 216				; 000000d8H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
kvz_set_lcu_lambda_and_qp ENDP
_TEXT	ENDS
END
