; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	ORG $+4
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_calc_sao_offset_array
PUBLIC	kvz_sao_reconstruct
PUBLIC	kvz_sao_search_lcu
pdata	SEGMENT
$pdata$sao_search_luma DD imagerel sao_search_luma
	DD	imagerel sao_search_luma+352
	DD	imagerel $unwind$sao_search_luma
$pdata$sao_search_chroma DD imagerel sao_search_chroma
	DD	imagerel sao_search_chroma+473
	DD	imagerel $unwind$sao_search_chroma
$pdata$sao_search_best_mode DD imagerel sao_search_best_mode
	DD	imagerel sao_search_best_mode+72
	DD	imagerel $unwind$sao_search_best_mode
$pdata$0$sao_search_best_mode DD imagerel sao_search_best_mode+72
	DD	imagerel sao_search_best_mode+1174
	DD	imagerel $chain$0$sao_search_best_mode
$pdata$1$sao_search_best_mode DD imagerel sao_search_best_mode+1174
	DD	imagerel sao_search_best_mode+1713
	DD	imagerel $chain$1$sao_search_best_mode
$pdata$sao_search_band_sao DD imagerel sao_search_band_sao
	DD	imagerel sao_search_band_sao+502
	DD	imagerel $unwind$sao_search_band_sao
$pdata$sao_search_edge_sao DD imagerel sao_search_edge_sao
	DD	imagerel sao_search_edge_sao+900
	DD	imagerel $unwind$sao_search_edge_sao
$pdata$calc_sao_bands DD imagerel calc_sao_bands
	DD	imagerel calc_sao_bands+40
	DD	imagerel $unwind$calc_sao_bands
$pdata$3$calc_sao_bands DD imagerel calc_sao_bands+40
	DD	imagerel calc_sao_bands+183
	DD	imagerel $chain$3$calc_sao_bands
$pdata$4$calc_sao_bands DD imagerel calc_sao_bands+183
	DD	imagerel calc_sao_bands+191
	DD	imagerel $chain$4$calc_sao_bands
$pdata$calc_sao_band_offsets DD imagerel calc_sao_band_offsets
	DD	imagerel calc_sao_band_offsets+997
	DD	imagerel $unwind$calc_sao_band_offsets
$pdata$kvz_calc_sao_offset_array DD imagerel $LN19
	DD	imagerel $LN19+74
	DD	imagerel $unwind$kvz_calc_sao_offset_array
$pdata$0$kvz_calc_sao_offset_array DD imagerel $LN19+74
	DD	imagerel $LN19+180
	DD	imagerel $chain$0$kvz_calc_sao_offset_array
$pdata$1$kvz_calc_sao_offset_array DD imagerel $LN19+180
	DD	imagerel $LN19+199
	DD	imagerel $chain$1$kvz_calc_sao_offset_array
$pdata$kvz_sao_reconstruct DD imagerel $LN19
	DD	imagerel $LN19+367
	DD	imagerel $unwind$kvz_sao_reconstruct
$pdata$kvz_sao_search_lcu DD imagerel $LN43
	DD	imagerel $LN43+1302
	DD	imagerel $unwind$kvz_sao_search_lcu
xdata	SEGMENT
$unwind$sao_search_luma DD 0b1f01H
	DD	0412541fH
	DD	0410341fH
	DD	040a011fH
	DD	0e010f012H
	DD	0700cc00eH
	DD	0600bH
$unwind$sao_search_chroma DD 0b2201H
	DD	021a3422H
	DD	02100122H
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$sao_search_best_mode DD 0c3801H
	DD	0117838H
	DD	027012aH
	DD	0e01df01fH
	DD	0c019d01bH
	DD	060167017H
	DD	050143015H
$chain$0$sao_search_best_mode DD 020421H
	DD	0126804H
	DD	imagerel sao_search_best_mode
	DD	imagerel sao_search_best_mode+72
	DD	imagerel $unwind$sao_search_best_mode
$chain$1$sao_search_best_mode DD 021H
	DD	imagerel sao_search_best_mode
	DD	imagerel sao_search_best_mode+72
	DD	imagerel $unwind$sao_search_best_mode
$unwind$sao_search_band_sao DD 0b2101H
	DD	0393421H
	DD	02e0121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
$unwind$sao_search_edge_sao DD 0106201H
	DD	098862H
	DD	0a7855H
	DD	0b683fH
	DD	0190126H
	DD	0e01df01fH
	DD	0c019d01bH
	DD	060167017H
	DD	030145015H
$unwind$calc_sao_bands DD 040801H
	DD	0d006f008H
	DD	05002c004H
$chain$3$calc_sao_bands DD 081e21H
	DD	08e41eH
	DD	077419H
	DD	066412H
	DD	053405H
	DD	imagerel calc_sao_bands
	DD	imagerel calc_sao_bands+40
	DD	imagerel $unwind$calc_sao_bands
$chain$4$calc_sao_bands DD 021H
	DD	imagerel calc_sao_bands
	DD	imagerel calc_sao_bands+40
	DD	imagerel $unwind$calc_sao_bands
$unwind$calc_sao_band_offsets DD 0b2101H
	DD	02c3421H
	DD	0240121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
$unwind$kvz_calc_sao_offset_array DD 081201H
	DD	066412H
	DD	055412H
	DD	043412H
	DD	07010e012H
$chain$0$kvz_calc_sao_offset_array DD 020521H
	DD	03f405H
	DD	imagerel $LN19
	DD	imagerel $LN19+74
	DD	imagerel $unwind$kvz_calc_sao_offset_array
$chain$1$kvz_calc_sao_offset_array DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+74
	DD	imagerel $unwind$kvz_calc_sao_offset_array
$unwind$kvz_sao_reconstruct DD 0c1c01H
	DD	013641cH
	DD	012541cH
	DD	011341cH
	DD	0f018921cH
	DD	0d014e016H
	DD	07010c012H
$unwind$kvz_sao_search_lcu DD 0a1e01H
	DD	021b011eH
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
$SG4294945125 DB 's', 00H, 'a', 00H, 'o', 00H, '_', 00H, 'c', 00H, 'h', 00H
	DB	'r', 00H, 'o', 00H, 'm', 00H, 'a', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'o', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'S', 00H, 'A', 00H, 'O'
	DB	00H, '_', 00H, 'N', 00H, 'U', 00H, 'M', 00H, '_', 00H, 'E', 00H
	DB	'O', 00H, 00H, 00H
	ORG $+12
$SG4294945126 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	'a', 00H, 'o', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+12
$SG4294945127 DB 's', 00H, 'a', 00H, 'o', 00H, '_', 00H, 'l', 00H, 'u', 00H
	DB	'm', 00H, 'a', 00H, '-', 00H, '>', 00H, 'e', 00H, 'o', 00H, '_'
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'S', 00H, 'A', 00H, 'O', 00H, '_', 00H, 'N'
	DB	00H, 'U', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'O', 00H, 00H, 00H
$SG4294945128 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	'a', 00H, 'o', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+12
$SG4294945129 DB '!', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 'f', 00H, 'g', 00H, '.', 00H, 'l', 00H, 'o', 00H, 's', 00H
	DB	's', 00H, 'l', 00H, 'e', 00H, 's', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG4294945130 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	'a', 00H, 'o', 00H, '.', 00H, 'c', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
tv1095 = 80
merge_cost_chroma$ = 88
merge_cost_luma$ = 104
tv827 = 120
sao_left_chroma$1$ = 128
sao_top_chroma$1$ = 136
sao_chroma$1$ = 144
sao_left_luma$1$ = 152
sao_top_luma$1$ = 160
rec_list$1 = 168
sao_luma$1$ = 184
orig_list$2 = 192
orig$3 = 208
rec$4 = 2256
state$ = 4384
tv847 = 4392
block_height$1$ = 4392
lcu_x$ = 4392
block_width$1$ = 4400
lcu_y$ = 4400
tv831 = 4408
kvz_sao_search_lcu PROC

; 669  : {

$LN43:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4312				; 000010d8H
	call	__chkstk
	sub	rsp, rax
	mov	rdi, rcx
	mov	r15d, r8d

; 670  :   assert(!state->encoder_control->cfg.lossless);

	mov	rcx, QWORD PTR [rcx]
	mov	ebx, edx
	cmp	DWORD PTR [rcx+2392], 0
	je	SHORT $LN18@kvz_sao_se
	mov	r8d, 670				; 0000029eH
	lea	rdx, OFFSET FLAT:$SG4294945130
	lea	rcx, OFFSET FLAT:$SG4294945129
	call	QWORD PTR __imp__wassert
	mov	rcx, QWORD PTR [rdi]
$LN18@kvz_sao_se:

; 671  : 
; 672  :   videoframe_t* const frame = state->tile->frame;

	mov	rax, QWORD PTR [rdi+48]

; 673  :   const int stride = frame->width_in_lcu;
; 674  :   int32_t merge_cost_luma[3] = { INT32_MAX };
; 675  :   int32_t merge_cost_chroma[3] = { INT32_MAX };
; 676  :   sao_info_t *sao_luma = &frame->sao_luma[lcu_y * stride + lcu_x];
; 677  :   sao_info_t *sao_chroma = NULL;

	xor	r14d, r14d
	mov	DWORD PTR merge_cost_luma$[rsp], 2147483647 ; 7fffffffH
	mov	DWORD PTR merge_cost_chroma$[rsp], 2147483647 ; 7fffffffH
	mov	QWORD PTR sao_chroma$1$[rsp], r14
	mov	rdi, QWORD PTR [rax]
	xor	eax, eax
	mov	QWORD PTR merge_cost_luma$[rsp+4], rax
	mov	QWORD PTR merge_cost_chroma$[rsp+4], rax
	mov	r10d, DWORD PTR [rdi+28]
	mov	r11d, r10d
	mov	r9, QWORD PTR [rdi+40]
	imul	r11d, r15d
	add	r11d, ebx
	movsxd	rax, r11d
	imul	rdx, rax, 68				; 00000044H

; 678  :   int enable_chroma = state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR [rcx+2596]
	mov	DWORD PTR tv847[rsp], eax
	lea	rbp, QWORD PTR [rdx+r9]
	mov	QWORD PTR sao_luma$1$[rsp], rbp

; 679  :   if (enable_chroma) {

	test	eax, eax
	je	SHORT $LN38@kvz_sao_se

; 680  :     sao_chroma = &frame->sao_chroma[lcu_y * stride + lcu_x];

	mov	r14, QWORD PTR [rdi+48]
	add	r14, rdx
	mov	QWORD PTR sao_chroma$1$[rsp], r14
$LN38@kvz_sao_se:

; 681  :   }
; 682  : 
; 683  :   // Merge candidates
; 684  :   sao_info_t *sao_top_luma    = lcu_y != 0 ? &frame->sao_luma  [(lcu_y - 1) * stride + lcu_x] : NULL;

	test	r15d, r15d
	je	SHORT $LN19@kvz_sao_se
	lea	r8d, DWORD PTR [r15-1]
	mov	eax, r8d
	imul	eax, r10d
	add	eax, ebx
	cdqe
	imul	rdx, rax, 68				; 00000044H
	add	rdx, r9
	jmp	SHORT $LN40@kvz_sao_se
$LN19@kvz_sao_se:
	xor	edx, edx
	lea	r8d, QWORD PTR [rdx-1]
$LN40@kvz_sao_se:

; 685  :   sao_info_t *sao_left_luma   = lcu_x != 0 ? &frame->sao_luma  [lcu_y       * stride + lcu_x - 1] : NULL;

	mov	QWORD PTR sao_top_luma$1$[rsp], rdx
	test	ebx, ebx
	je	SHORT $LN21@kvz_sao_se
	lea	eax, DWORD PTR [r11-1]
	movsxd	rcx, eax
	imul	r12, rcx, 68				; 00000044H
	add	r12, r9
	jmp	SHORT $LN41@kvz_sao_se
$LN21@kvz_sao_se:
	xor	r12d, r12d
$LN41@kvz_sao_se:

; 686  :   sao_info_t *sao_top_chroma  = NULL;

	xor	esi, esi
	mov	QWORD PTR sao_left_luma$1$[rsp], r12

; 687  :   sao_info_t *sao_left_chroma = NULL;

	xor	r13d, r13d
	mov	QWORD PTR sao_top_chroma$1$[rsp], rsi
	mov	QWORD PTR sao_left_chroma$1$[rsp], r13

; 688  :   if (enable_chroma) {

	cmp	DWORD PTR tv847[rsp], esi
	je	SHORT $LN5@kvz_sao_se

; 689  :     if (lcu_y != 0) sao_top_chroma =  &frame->sao_chroma[(lcu_y - 1) * stride + lcu_x];

	test	r15d, r15d
	je	SHORT $LN39@kvz_sao_se
	imul	r8d, r10d
	lea	eax, DWORD PTR [rbx+r8]
	cdqe
	imul	rsi, rax, 68				; 00000044H
	add	rsi, QWORD PTR [rdi+48]
	mov	QWORD PTR sao_top_chroma$1$[rsp], rsi
$LN39@kvz_sao_se:

; 690  :     if (lcu_x != 0) sao_left_chroma = &frame->sao_chroma[lcu_y       * stride + lcu_x - 1];

	test	ebx, ebx
	je	SHORT $LN5@kvz_sao_se
	lea	eax, DWORD PTR [r11-1]
	movsxd	rcx, eax
	imul	r13, rcx, 68				; 00000044H
	add	r13, QWORD PTR [rdi+48]
	mov	QWORD PTR sao_left_chroma$1$[rsp], r13
$LN5@kvz_sao_se:

; 691  :   }
; 692  : 
; 693  :   sao_search_luma(state, frame, lcu_x, lcu_y, sao_luma, sao_top_luma, sao_left_luma, merge_cost_luma);

	mov	rcx, QWORD PTR state$[rsp]
	lea	rax, QWORD PTR merge_cost_luma$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	r9d, r15d
	mov	QWORD PTR [rsp+48], r12
	mov	r8d, ebx
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, rdi
	mov	QWORD PTR [rsp+32], rbp
	call	sao_search_luma

; 694  :   if (enable_chroma) {

	cmp	DWORD PTR tv847[rsp], 0
	je	$LN6@kvz_sao_se

; 613  :   if (x_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->width / 2) {

	mov	edx, DWORD PTR [rdi+16]
	mov	eax, 32					; 00000020H
	mov	DWORD PTR block_width$1$[rsp], eax
	mov	ecx, ebx
	shl	ecx, 5
	mov	DWORD PTR block_height$1$[rsp], eax
	mov	DWORD PTR tv1095[rsp], ecx
	add	ecx, eax
	mov	eax, edx
	shr	eax, 1
	cmp	ecx, eax
	jb	SHORT $LN29@kvz_sao_se

; 614  :     block_width = (frame->width - x_ctb * LCU_WIDTH) / 2;

	shl	ebx, 6
	mov	eax, edx
	sub	eax, ebx
	shr	eax, 1
	mov	DWORD PTR block_width$1$[rsp], eax
$LN29@kvz_sao_se:

; 615  :   }
; 616  :   if (y_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->height / 2) {

	mov	edx, DWORD PTR [rdi+20]
	lea	ecx, DWORD PTR [r15+1]
	mov	eax, edx
	shl	ecx, 5
	shr	eax, 1
	cmp	ecx, eax
	jb	SHORT $LN30@kvz_sao_se

; 617  :     block_height = (frame->height - y_ctb * LCU_WIDTH) / 2;

	mov	eax, r15d
	mov	ecx, edx
	shl	eax, 6
	sub	ecx, eax
	shr	ecx, 1
	mov	DWORD PTR block_height$1$[rsp], ecx
$LN30@kvz_sao_se:
	mov	r12d, DWORD PTR block_width$1$[rsp]

; 618  :   }
; 619  : 
; 620  :   sao->type = SAO_TYPE_EDGE;

	xor	r10d, r10d
	mov	r13d, DWORD PTR block_height$1$[rsp]
	mov	rbp, rdi
	shl	r15d, 5
	xor	r9d, r9d
	mov	DWORD PTR [r14], 2
	mov	r14d, DWORD PTR tv1095[rsp]
	mov	QWORD PTR tv827[rsp], r9
	mov	DWORD PTR tv831[rsp], r10d
	npad	11
$LL28@kvz_sao_se:

; 621  : 
; 622  :   // Copy data to temporary buffers and init orig and rec lists to point to those buffers.
; 623  :   for (color_i = COLOR_U; color_i <= COLOR_V; ++color_i) {
; 624  :     kvz_pixel *data = &frame->source->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->source->stride / 2)];
; 625  :     kvz_pixel *recdata = &frame->rec->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->rec->stride / 2)];

	mov	rcx, QWORD PTR [rbp+8]

; 626  :     kvz_pixels_blit(data, orig[color_i - 1], block_width, block_height,

	lea	rdi, QWORD PTR orig$3[rsp]
	mov	r8, QWORD PTR [rbp]
	movsxd	rbx, r10d
	shl	rbx, 10
	mov	eax, DWORD PTR [rcx+72]
	add	rdi, rbx
	cdq
	mov	DWORD PTR [rsp+40], r12d
	sub	eax, edx
	sar	eax, 1
	imul	eax, r15d
	lea	esi, DWORD PTR [r14+rax]
	mov	eax, DWORD PTR [r8+72]
	add	rsi, QWORD PTR [r9+rcx+48]
	cdq
	sub	eax, edx
	mov	rdx, rdi
	sar	eax, 1
	mov	ecx, eax
	mov	DWORD PTR [rsp+32], eax
	imul	ecx, r15d
	add	ecx, r14d
	add	rcx, QWORD PTR [r9+r8+48]
	mov	r9d, r13d
	mov	r8d, r12d
	call	kvz_pixels_blit

; 627  :                         frame->source->stride / 2, block_width);
; 628  :     kvz_pixels_blit(recdata, rec[color_i - 1], block_width, block_height,

	lea	rax, QWORD PTR rec$4[rsp]
	mov	DWORD PTR [rsp+40], r12d
	add	rbx, rax
	mov	r9d, r13d
	mov	rax, QWORD PTR [rbp+8]
	mov	r8d, r12d
	mov	rcx, rsi
	mov	eax, DWORD PTR [rax+72]
	cdq
	sub	eax, edx
	mov	rdx, rbx
	sar	eax, 1
	mov	DWORD PTR [rsp+32], eax
	call	kvz_pixels_blit

; 629  :                         frame->rec->stride / 2, block_width);
; 630  :     orig_list[color_i - 1] = &orig[color_i - 1][0];

	mov	r9, QWORD PTR tv827[rsp]
	mov	r10d, DWORD PTR tv831[rsp]
	inc	r10d
	mov	DWORD PTR tv831[rsp], r10d
	mov	QWORD PTR orig_list$2[rsp+r9], rdi

; 631  :     rec_list[color_i - 1] = &rec[color_i - 1][0];

	mov	QWORD PTR rec_list$1[rsp+r9], rbx
	add	r9, 8
	mov	QWORD PTR tv827[rsp], r9
	cmp	r9, 8
	jle	$LL28@kvz_sao_se

; 632  :   }
; 633  : 
; 634  :   // Calculate
; 635  :   sao_search_best_mode(state, orig_list, rec_list, block_width, block_height, 2, sao, sao_top, sao_left, merge_cost);

	mov	ecx, DWORD PTR block_height$1$[rsp]
	lea	rax, QWORD PTR merge_cost_chroma$[rsp]
	mov	r13, QWORD PTR sao_left_chroma$1$[rsp]
	lea	r8, QWORD PTR rec_list$1[rsp]
	mov	rsi, QWORD PTR sao_top_chroma$1$[rsp]
	lea	rdx, QWORD PTR orig_list$2[rsp]
	mov	r14, QWORD PTR sao_chroma$1$[rsp]
	mov	r9d, r12d
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], r13
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+48], r14
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR state$[rsp]
	call	sao_search_best_mode

; 695  :     sao_search_chroma(state, frame, lcu_x, lcu_y, sao_chroma, sao_top_chroma, sao_left_chroma, merge_cost_chroma);
; 696  :   } else {

	mov	r9d, DWORD PTR merge_cost_chroma$[rsp+8]
	xor	r15d, r15d
	mov	r10d, DWORD PTR merge_cost_chroma$[rsp]
	mov	ebx, DWORD PTR merge_cost_chroma$[rsp+4]
	mov	rbp, QWORD PTR sao_luma$1$[rsp]
	mov	r12, QWORD PTR sao_left_luma$1$[rsp]
	jmp	SHORT $LN7@kvz_sao_se
$LN6@kvz_sao_se:

; 697  :     merge_cost_chroma[0] = 0;

	xor	r15d, r15d
	mov	r10d, r15d

; 698  :     merge_cost_chroma[1] = 0;

	mov	ebx, r15d

; 699  :     merge_cost_chroma[2] = 0;

	mov	r9d, r15d
$LN7@kvz_sao_se:

; 700  :   }
; 701  : 
; 702  :   sao_luma->merge_up_flag = sao_luma->merge_left_flag = 0;
; 703  :   // Check merge costs
; 704  :   if (sao_top_luma) {

	mov	rdx, QWORD PTR sao_top_luma$1$[rsp]
	mov	r8d, r15d
	mov	r11d, DWORD PTR merge_cost_luma$[rsp+8]
	mov	edi, DWORD PTR merge_cost_luma$[rsp]
	mov	QWORD PTR [rbp+12], 0
	test	rdx, rdx
	je	SHORT $LN9@kvz_sao_se

; 705  :     // Merge up if cost is equal or smaller to the searched mode cost
; 706  :     if (merge_cost_luma[2] + merge_cost_chroma[2] <= merge_cost_luma[0] + merge_cost_chroma[0]) {

	lea	ecx, DWORD PTR [r11+r9]
	lea	eax, DWORD PTR [r10+rdi]
	cmp	ecx, eax
	jg	SHORT $LN9@kvz_sao_se

; 707  :       *sao_luma = *sao_top_luma;

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rbp], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbp+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbp+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rbp+48], xmm1
	mov	eax, DWORD PTR [rdx+64]
	mov	DWORD PTR [rbp+64], eax

; 708  :       if (sao_top_chroma) *sao_chroma = *sao_top_chroma;

	test	rsi, rsi
	je	SHORT $LN10@kvz_sao_se
	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [r14], xmm0
	movups	xmm1, XMMWORD PTR [rsi+16]
	movups	XMMWORD PTR [r14+16], xmm1
	movups	xmm0, XMMWORD PTR [rsi+32]
	movups	XMMWORD PTR [r14+32], xmm0
	movups	xmm1, XMMWORD PTR [rsi+48]
	movups	XMMWORD PTR [r14+48], xmm1
	mov	eax, DWORD PTR [rsi+64]
	mov	DWORD PTR [r14+64], eax
$LN10@kvz_sao_se:

; 709  :       sao_luma->merge_up_flag = 1;

	mov	DWORD PTR [rbp+16], 1

; 710  :       sao_luma->merge_left_flag = 0;

	mov	r8d, 1
	mov	DWORD PTR [rbp+12], r15d
$LN9@kvz_sao_se:

; 711  :     }
; 712  :   }
; 713  :   if (sao_left_luma) {

	test	r12, r12
	je	$LN13@kvz_sao_se

; 714  :     // Merge left if cost is equal or smaller to the searched mode cost
; 715  :     // AND smaller than merge up cost, if merge up was already chosen
; 716  :     if (merge_cost_luma[1] + merge_cost_chroma[1] <= merge_cost_luma[0] + merge_cost_chroma[0]) {

	mov	ecx, DWORD PTR merge_cost_luma$[rsp+4]
	lea	eax, DWORD PTR [r10+rdi]
	add	ecx, ebx
	cmp	ecx, eax
	jg	SHORT $LN13@kvz_sao_se

; 717  :       if (!sao_luma->merge_up_flag || merge_cost_luma[1] + merge_cost_chroma[1] < merge_cost_luma[2] + merge_cost_chroma[2]) {

	test	r8d, r8d
	je	SHORT $LN14@kvz_sao_se
	lea	eax, DWORD PTR [r11+r9]
	cmp	ecx, eax
	jge	SHORT $LN13@kvz_sao_se
$LN14@kvz_sao_se:

; 718  :         *sao_luma = *sao_left_luma;

	movups	xmm0, XMMWORD PTR [r12]
	movups	XMMWORD PTR [rbp], xmm0
	movups	xmm1, XMMWORD PTR [r12+16]
	movups	XMMWORD PTR [rbp+16], xmm1
	movups	xmm0, XMMWORD PTR [r12+32]
	movups	XMMWORD PTR [rbp+32], xmm0
	movups	xmm1, XMMWORD PTR [r12+48]
	movups	XMMWORD PTR [rbp+48], xmm1
	mov	eax, DWORD PTR [r12+64]
	mov	DWORD PTR [rbp+64], eax

; 719  :         if (sao_left_chroma) *sao_chroma = *sao_left_chroma;

	test	r13, r13
	je	SHORT $LN15@kvz_sao_se
	movups	xmm0, XMMWORD PTR [r13]
	movups	XMMWORD PTR [r14], xmm0
	movups	xmm1, XMMWORD PTR [r13+16]
	movups	XMMWORD PTR [r14+16], xmm1
	movups	xmm0, XMMWORD PTR [r13+32]
	movups	XMMWORD PTR [r14+32], xmm0
	movups	xmm1, XMMWORD PTR [r13+48]
	movups	XMMWORD PTR [r14+48], xmm1
	mov	eax, DWORD PTR [r13+64]
	mov	DWORD PTR [r14+64], eax
$LN15@kvz_sao_se:

; 720  :         sao_luma->merge_left_flag = 1;

	mov	QWORD PTR [rbp+12], 1
$LN13@kvz_sao_se:

; 721  :         sao_luma->merge_up_flag = 0;
; 722  :       }
; 723  :     }
; 724  :   }
; 725  :   assert(sao_luma->eo_class < SAO_NUM_EO);

	cmp	DWORD PTR [rbp+4], 4
	jl	SHORT $LN23@kvz_sao_se
	mov	r8d, 725				; 000002d5H
	lea	rdx, OFFSET FLAT:$SG4294945128
	lea	rcx, OFFSET FLAT:$SG4294945127
	call	QWORD PTR __imp__wassert
$LN23@kvz_sao_se:

; 726  :   CHECKPOINT_SAO_INFO("sao_luma", *sao_luma);
; 727  : 
; 728  :   if (sao_chroma) {

	test	r14, r14
	je	SHORT $LN24@kvz_sao_se

; 729  :     assert(sao_chroma->eo_class < SAO_NUM_EO);

	cmp	DWORD PTR [r14+4], 4
	jl	SHORT $LN24@kvz_sao_se
	mov	r8d, 729				; 000002d9H
	lea	rdx, OFFSET FLAT:$SG4294945126
	lea	rcx, OFFSET FLAT:$SG4294945125
	call	QWORD PTR __imp__wassert
$LN24@kvz_sao_se:

; 730  :     CHECKPOINT_SAO_INFO("sao_chroma", *sao_chroma);
; 731  :   }
; 732  : }

	add	rsp, 4312				; 000010d8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_sao_search_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
ctrl$1$ = 128
state$ = 128
buffer$ = 136
stride$ = 144
frame_x$ = 152
frame_y$ = 160
width$ = 168
height$ = 176
sao$ = 184
color$ = 192
kvz_sao_reconstruct PROC

; 309  : {

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 310  :   const encoder_control_t *const ctrl = state->encoder_control;

	mov	rax, QWORD PTR [rcx]
	mov	r11, rdx

; 311  :   videoframe_t *const frame = state->tile->frame;
; 312  :   const int shift = color == COLOR_Y ? 0 : 1;

	movsxd	r13, DWORD PTR color$[rsp]
	mov	ebx, r9d

; 313  : 
; 314  :   const int frame_width = frame->width >> shift;
; 315  :   const int frame_height = frame->height >> shift;
; 316  :   const int frame_stride = frame->rec->stride >> shift;
; 317  :   kvz_pixel *output = &frame->rec->data[color][frame_x + frame_y * frame_stride];

	mov	edi, DWORD PTR frame_y$[rsp]
	test	r13d, r13d

; 318  : 
; 319  :   if (sao->type == SAO_TYPE_EDGE) {

	mov	r12, QWORD PTR sao$[rsp]
	mov	QWORD PTR ctrl$1$[rsp], rax
	mov	rax, QWORD PTR [rcx+48]
	setne	cl
	movsxd	r15, r8d
	mov	rdx, QWORD PTR [rax]
	mov	esi, DWORD PTR [rdx+16]
	mov	ebp, DWORD PTR [rdx+20]
	mov	rdx, QWORD PTR [rdx+8]
	sar	esi, cl
	sar	ebp, cl
	mov	r14d, DWORD PTR [rdx+72]
	sar	r14d, cl
	mov	eax, r14d
	imul	eax, edi
	add	eax, r9d
	movsxd	r10, eax
	add	r10, QWORD PTR [rdx+r13*8+40]
	mov	eax, DWORD PTR [r12]
	cmp	eax, 2
	jne	$LN9@kvz_sao_re

; 320  :     const vector2d_t *offset = g_sao_edge_offsets[sao->eo_class];

	movsxd	r8, DWORD PTR [r12+4]
	lea	rax, OFFSET FLAT:g_sao_edge_offsets

; 321  : 
; 322  :     if (frame_x + width + offset[0].x > frame_width ||

	mov	r9d, DWORD PTR width$[rsp]
	shl	r8, 4
	add	r8, rax
	mov	ecx, DWORD PTR [r8]
	add	ecx, ebx
	lea	eax, DWORD PTR [rcx+r9]
	cmp	eax, esi
	jg	SHORT $LN16@kvz_sao_re
	mov	eax, DWORD PTR [r8+8]
	add	eax, ebx
	add	eax, r9d
	cmp	eax, esi
	jle	SHORT $LN3@kvz_sao_re
$LN16@kvz_sao_re:

; 323  :         frame_x + width + offset[1].x > frame_width)
; 324  :     {
; 325  :       // Nothing to do for the rightmost column.
; 326  :       width -= 1;

	dec	r9d
$LN3@kvz_sao_re:

; 327  :     }
; 328  :     if (frame_x + offset[0].x < 0 || frame_x + offset[1].x < 0) {

	test	ecx, ecx
	js	SHORT $LN6@kvz_sao_re
	mov	ecx, DWORD PTR [r8+8]
	add	ecx, ebx
	jns	SHORT $LN5@kvz_sao_re
$LN6@kvz_sao_re:

; 329  :       // Nothing to do for the leftmost column.
; 330  :       buffer += 1;

	inc	r11

; 331  :       output += 1;

	inc	r10

; 332  :       width -= 1;

	dec	r9d
$LN5@kvz_sao_re:

; 333  :     }
; 334  :     if (frame_y + height + offset[0].y > frame_height ||

	mov	ecx, DWORD PTR [r8+4]
	mov	edx, DWORD PTR height$[rsp]
	add	ecx, edi
	lea	eax, DWORD PTR [rcx+rdx]
	cmp	eax, ebp
	jg	SHORT $LN17@kvz_sao_re
	mov	eax, DWORD PTR [r8+12]
	add	eax, edi
	add	eax, edx
	cmp	eax, ebp
	jle	SHORT $LN7@kvz_sao_re
$LN17@kvz_sao_re:

; 335  :         frame_y + height + offset[1].y > frame_height)
; 336  :     {
; 337  :       // Nothing to do for the bottommost row.
; 338  :       height -= 1;

	dec	edx
$LN7@kvz_sao_re:

; 339  :     }
; 340  :     if (frame_y + offset[0].y < 0 || frame_y + offset[1].y < 0) {

	test	ecx, ecx
	js	SHORT $LN10@kvz_sao_re
	mov	ecx, DWORD PTR [r8+12]
	add	ecx, edi
	jns	SHORT $LN15@kvz_sao_re
$LN10@kvz_sao_re:

; 341  :       // Nothing to do for the topmost row.
; 342  :       buffer += stride;
; 343  :       output += frame_stride;

	movsxd	rax, r14d
	add	r11, r15
	add	r10, rax

; 344  :       height -= 1;

	dec	edx

; 345  :     }
; 346  :   }
; 347  : 
; 348  :   if (sao->type != SAO_TYPE_NONE) {

	jmp	SHORT $LN15@kvz_sao_re
$LN9@kvz_sao_re:
	test	eax, eax
	je	SHORT $LN11@kvz_sao_re
	mov	edx, DWORD PTR height$[rsp]
	mov	r9d, DWORD PTR width$[rsp]
$LN15@kvz_sao_re:

; 349  :     kvz_sao_reconstruct_color(ctrl,

	mov	rcx, QWORD PTR ctrl$1$[rsp]
	mov	r8, r10
	mov	DWORD PTR [rsp+64], r13d
	mov	DWORD PTR [rsp+56], edx
	mov	rdx, r11
	mov	DWORD PTR [rsp+48], r9d
	mov	r9, r12
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], r15d
	call	QWORD PTR kvz_sao_reconstruct_color
$LN11@kvz_sao_re:

; 350  :                               buffer,
; 351  :                               output,
; 352  :                               sao,
; 353  :                               stride,
; 354  :                               frame_stride,
; 355  :                               width,
; 356  :                               height,
; 357  :                               color);
; 358  :   }
; 359  : }

	lea	r11, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [r11+56]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsi, QWORD PTR [r11+72]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_sao_reconstruct ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
encoder$ = 24
sao$ = 32
offset$ = 40
color_i$ = 48
kvz_calc_sao_offset_array PROC

; 179  : {

$LN19:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14

; 180  :   int32_t val;
; 181  :   const int32_t values = (1<<encoder->bitdepth);

	movsx	ecx, BYTE PTR [rcx+2592]
	mov	esi, 1
	shl	esi, cl

; 182  :   const int32_t shift = encoder->bitdepth-5;
; 183  :   const int32_t band_pos = (color_i == COLOR_V) ? 1 : 0;
; 184  :   const int32_t cur_bp   = sao->band_position[band_pos];

	mov	eax, 20
	cmp	r9d, 2

; 185  : 
; 186  :   // Loop through all intensity values and construct an offset array
; 187  :   for (val = 0; val < values; val++) {

	movsxd	r10, esi
	mov	r11, r8
	mov	ebp, r9d
	lea	ebx, DWORD PTR [rcx-5]
	mov	r14, rdx
	mov	ecx, 24
	cmove	eax, ecx
	xor	r8d, r8d
	mov	edi, DWORD PTR [rax+rdx]
	test	esi, esi
	jle	SHORT $LN3@kvz_calc_s
	mov	QWORD PTR [rsp+24], r15
	xor	r9d, r9d
	lea	r15d, QWORD PTR [rcx-18]
	npad	10
$LL4@kvz_calc_s:

; 188  :     int32_t cur_band     = val >> shift;

	mov	edx, r8d
	mov	ecx, ebx
	sar	edx, cl

; 189  :     int32_t cb_minus_cbp = cur_band - cur_bp;

	sub	edx, edi

; 190  : 
; 191  :     if (cb_minus_cbp >= 0 && cb_minus_cbp <= 3) {

	cmp	edx, 3
	ja	SHORT $LN5@kvz_calc_s

; 192  :       uint32_t offset_id    = cb_minus_cbp + 1 + 5 * band_pos;

	cmp	ebp, 2
	mov	eax, 1
	cmove	eax, r15d
	add	eax, edx

; 193  :       int32_t val_unclipped = val + sao->offsets[offset_id];

	lea	edx, DWORD PTR [rsi-1]

; 194  :       offset[val] = CLIP(0, values - 1, val_unclipped);

	mov	ecx, edx
	mov	eax, DWORD PTR [r14+rax*4+28]
	add	eax, r8d
	cmp	edx, eax
	cmovge	ecx, eax
	test	ecx, ecx
	jns	SHORT $LN12@kvz_calc_s
	xor	eax, eax
	jmp	SHORT $LN2@kvz_calc_s
$LN12@kvz_calc_s:
	cmp	edx, eax
	cmovl	eax, edx

; 195  : 
; 196  :     } else {

	jmp	SHORT $LN2@kvz_calc_s
$LN5@kvz_calc_s:

; 197  :       offset[val] = val;

	mov	eax, r8d
$LN2@kvz_calc_s:

; 185  : 
; 186  :   // Loop through all intensity values and construct an offset array
; 187  :   for (val = 0; val < values; val++) {

	mov	DWORD PTR [r11+r9*4], eax
	inc	r8d
	inc	r9
	cmp	r9, r10
	jl	SHORT $LL4@kvz_calc_s
	mov	r15, QWORD PTR [rsp+24]
$LN3@kvz_calc_s:

; 198  :     }
; 199  :   }
; 200  : }

	mov	rbx, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	pop	r14
	pop	rdi
	ret	0
kvz_calc_sao_offset_array ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
sao$ = 8
init_sao_info PROC

; 46   :   sao->type = SAO_TYPE_NONE;

	xor	eax, eax
	mov	DWORD PTR [rcx], eax

; 47   :   sao->merge_left_flag = 0;

	mov	QWORD PTR [rcx+12], rax

; 48   :   sao->merge_up_flag = 0;
; 49   : }

	ret	0
init_sao_info ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
state$ = 8
sao_top$ = 16
sao_left$ = 24
sao_mode_bits_none PROC

; 54   :   float mode_bits = 0.0;
; 55   :   const cabac_data_t * const cabac = &state->cabac;
; 56   :   const cabac_ctx_t *ctx = NULL;
; 57   :   // FL coded merges.
; 58   :   if (sao_left != NULL) {

	lea	r9, OFFSET FLAT:kvz_f_entropy_bits
	xorps	xmm0, xmm0
	test	r8, r8
	je	SHORT $LN6@sao_mode_b

; 59   :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	movss	xmm0, DWORD PTR [r9+rax*4]
$LN6@sao_mode_b:

; 61   :   }
; 62   :   if (sao_top != NULL) {    

	test	rdx, rdx
	je	SHORT $LN3@sao_mode_b

; 63   :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 64   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	addss	xmm0, DWORD PTR [r9+rax*4]
$LN3@sao_mode_b:

; 65   :   }
; 66   : 
; 67   :   // TR coded type_idx_, none = 0
; 68   :   ctx = &(cabac->ctx.sao_type_idx_model);
; 69   :   mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+169]
	addss	xmm0, DWORD PTR [r9+rax*4]

; 70   : 
; 71   :   return mode_bits;
; 72   : }

	ret	0
sao_mode_bits_none ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
state$ = 8
merge_cand$ = 16
sao_mode_bits_merge PROC

; 76   :   float mode_bits = 0.0;
; 77   :   const cabac_data_t * const cabac = &state->cabac;
; 78   :   const cabac_ctx_t *ctx = NULL;
; 79   :   // FL coded merges.
; 80   :   ctx = &(cabac->ctx.sao_merge_flag_model);
; 81   : 
; 82   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 1);

	movzx	r8d, BYTE PTR [rcx+168]
	lea	r9, OFFSET FLAT:kvz_f_entropy_bits
	xor	ecx, ecx
	cmp	dl, 1
	mov	eax, ecx
	sete	al
	xor	rax, r8
	movss	xmm0, DWORD PTR [r9+rax*4]

; 83   :   if (merge_cand == 1) return mode_bits;

	cmp	dl, 1
	je	SHORT $LN1@sao_mode_b

; 84   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 2);

	cmp	dl, 2
	sete	cl
	xor	rcx, r8
	addss	xmm0, DWORD PTR [r9+rcx*4]
$LN1@sao_mode_b:

; 85   :   return mode_bits;
; 86   : }

	ret	0
sao_mode_bits_merge ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
state$ = 8
edge_class$dead$ = 16
offsets$ = 24
sao_top$ = 32
sao_left$ = 40
buf_cnt$ = 48
sao_mode_bits_edge PROC

; 93   :   float mode_bits = 0.0;
; 94   :   const cabac_data_t * const cabac = &state->cabac;
; 95   :   const cabac_ctx_t *ctx = NULL;
; 96   :   // FL coded merges.
; 97   :   if (sao_left != NULL) {

	cmp	QWORD PTR sao_left$[rsp], 0
	lea	rdx, OFFSET FLAT:kvz_f_entropy_bits
	mov	r10, r8
	xorps	xmm1, xmm1
	je	SHORT $LN39@sao_mode_b

; 98   :     ctx = &(cabac->ctx.sao_merge_flag_model);   
; 99   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	movss	xmm1, DWORD PTR [rdx+rax*4]
$LN39@sao_mode_b:

; 100  :   }
; 101  :   if (sao_top != NULL) {

	test	r9, r9
	je	SHORT $LN9@sao_mode_b

; 102  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 103  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	addss	xmm1, DWORD PTR [rdx+rax*4]
$LN9@sao_mode_b:

; 104  :   }
; 105  : 
; 106  :   // TR coded type_idx_, edge = 2 = cMax
; 107  :   ctx = &(cabac->ctx.sao_type_idx_model);
; 108  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	movzx	eax, BYTE PTR [rcx+169]
	xor	r8d, r8d

; 109  : 
; 110  :   // TR coded offsets.
; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	mov	r11d, DWORD PTR buf_cnt$[rsp]
	xor	rax, 1
	movss	xmm0, DWORD PTR [rdx+rax*4]
	addss	xmm0, DWORD PTR __real@3f800000
	addss	xmm1, xmm0
	test	r11d, r11d
	je	$LN3@sao_mode_b
	npad	1
$LL4@sao_mode_b:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	lea	r9d, DWORD PTR [r8+r8*4]
	lea	eax, DWORD PTR [r9+1]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	xor	eax, edx
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN19@sao_mode_b

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN20@sao_mode_b
$LN19@sao_mode_b:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN20@sao_mode_b:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+2]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN29@sao_mode_b

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN30@sao_mode_b
$LN29@sao_mode_b:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN30@sao_mode_b:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm1, eax
	lea	eax, DWORD PTR [r9+3]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm1, xmm1
	xor	eax, edx
	addss	xmm1, xmm0
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN32@sao_mode_b

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN33@sao_mode_b
$LN32@sao_mode_b:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN33@sao_mode_b:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+4]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN35@sao_mode_b

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN36@sao_mode_b
$LN35@sao_mode_b:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN36@sao_mode_b:

; 98   :     ctx = &(cabac->ctx.sao_merge_flag_model);   
; 99   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	add	eax, ecx

; 109  : 
; 110  :   // TR coded offsets.
; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	inc	r8d
	movd	xmm1, eax
	cvtdq2ps xmm1, xmm1
	addss	xmm1, xmm0
	cmp	r8d, r11d
	jb	$LL4@sao_mode_b
$LN3@sao_mode_b:

; 119  :       }
; 120  :     }    
; 121  :   }
; 122  : 
; 123  :   mode_bits += 2.0;

	addss	xmm1, DWORD PTR __real@40000000

; 124  : 
; 125  :   return mode_bits;

	movaps	xmm0, xmm1

; 126  : }

	ret	0
sao_mode_bits_edge ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
state$ = 8
band_position$dead$ = 16
offsets$ = 24
sao_top$ = 32
sao_left$ = 40
buf_cnt$ = 48
sao_mode_bits_band PROC

; 133  :   float mode_bits = 0.0;
; 134  :   const cabac_data_t * const cabac = &state->cabac;
; 135  :   const cabac_ctx_t *ctx = NULL;
; 136  :   // FL coded merges.
; 137  :   if (sao_left != NULL) {

	cmp	QWORD PTR sao_left$[rsp], 0
	lea	rdx, OFFSET FLAT:kvz_f_entropy_bits
	mov	r10, r8
	xorps	xmm2, xmm2
	je	SHORT $LN45@sao_mode_b

; 138  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 139  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	movss	xmm2, DWORD PTR [rdx+rax*4]
$LN45@sao_mode_b:

; 140  :   }
; 141  :   if (sao_top != NULL) {

	test	r9, r9
	je	SHORT $LN9@sao_mode_b

; 142  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 143  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [rcx+168]
	addss	xmm2, DWORD PTR [rdx+rax*4]
$LN9@sao_mode_b:

; 144  :   }
; 145  : 
; 146  :   // TR coded sao_type_idx_, band = 1
; 147  :   ctx = &(cabac->ctx.sao_type_idx_model);
; 148  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	movzx	eax, BYTE PTR [rcx+169]
	xor	r8d, r8d

; 149  : 
; 150  :   // TR coded offsets and possible FL coded offset signs.
; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	mov	r11d, DWORD PTR buf_cnt$[rsp]
	xor	rax, 1
	movss	xmm0, DWORD PTR [rdx+rax*4]
	addss	xmm0, DWORD PTR __real@3f800000
	addss	xmm2, xmm0
	test	r11d, r11d
	je	$LN3@sao_mode_b
	npad	1
$LL4@sao_mode_b:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	lea	r9d, DWORD PTR [r8+r8*4]
	lea	eax, DWORD PTR [r9+1]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	xor	eax, edx
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN20@sao_mode_b

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN21@sao_mode_b
$LN20@sao_mode_b:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN21@sao_mode_b:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+2]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm2
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN32@sao_mode_b

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN33@sao_mode_b
$LN32@sao_mode_b:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN33@sao_mode_b:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm1, eax
	lea	eax, DWORD PTR [r9+3]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm1, xmm1
	xor	eax, edx
	addss	xmm1, xmm0
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN36@sao_mode_b

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN37@sao_mode_b
$LN36@sao_mode_b:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN37@sao_mode_b:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+4]
	mov	eax, DWORD PTR [r10+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN40@sao_mode_b

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN41@sao_mode_b
$LN40@sao_mode_b:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN41@sao_mode_b:

; 149  : 
; 150  :   // TR coded offsets and possible FL coded offset signs.
; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	add	eax, ecx
	inc	r8d
	movd	xmm2, eax
	cvtdq2ps xmm2, xmm2
	addss	xmm2, xmm0
	cmp	r8d, r11d
	jb	$LL4@sao_mode_b
$LN3@sao_mode_b:
	xorps	xmm1, xmm1

; 159  :         mode_bits += abs_offset + 1 + 1;
; 160  :       } else {
; 161  :         mode_bits += abs_offset + 2 + 1;
; 162  :       }      
; 163  :     }
; 164  :   }
; 165  : 
; 166  :   // FL coded band position.
; 167  :   mode_bits += 5.0 * buf_cnt;

	cvtsi2sd xmm1, r11
	cvtps2pd xmm0, xmm2
	mulsd	xmm1, QWORD PTR __real@4014000000000000
	addsd	xmm1, xmm0
	cvtpd2ps xmm0, xmm1

; 168  : 
; 169  :   return mode_bits;
; 170  : }

	ret	0
sao_mode_bits_band ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
tv1822 = 0
tv1824 = 8
tv1815 = 16
dist$ = 32
temp_offsets$ = 160
sao_bands$ = 352
offsets$ = 360
band_position$ = 368
tv1996 = 376
tv1977 = 376
calc_sao_band_offsets PROC

; 209  : {

	mov	r11, rsp
	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+24], r8
	mov	QWORD PTR [r11+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 288				; 00000120H
	xorps	xmm0, xmm0

; 210  :   int band;
; 211  :   int offset;
; 212  :   int best_dist;
; 213  :   int temp_dist;
; 214  :   int dist[32];
; 215  :   int temp_offsets[32];
; 216  :   int temp_rate[32];
; 217  :   int best_dist_pos = 0;
; 218  : 
; 219  :   FILL(dist, 0);

	mov	DWORD PTR tv1977[rsp], -1
	xor	edi, edi
	lea	rax, QWORD PTR [r11-180]
	lea	r15, QWORD PTR [r11-176]
	sub	rax, rcx
	lea	rbp, QWORD PTR [r11-172]
	sub	r15, rcx
	sub	rbp, rcx
	lea	r10, QWORD PTR [r11-184]
	add	rax, -132				; ffffffffffffff7cH
	lea	rbx, QWORD PTR dist$[rsp+4]
	sub	rbx, rcx
	mov	QWORD PTR tv1822[rsp], rax
	add	rbx, -132				; ffffffffffffff7cH
	lea	r14, QWORD PTR dist$[rsp+8]
	sub	r14, rcx
	mov	QWORD PTR tv1824[rsp], rbx
	lea	r12, QWORD PTR dist$[rsp+12]
	add	r14, -132				; ffffffffffffff7cH
	sub	r12, rcx
	lea	r13, QWORD PTR dist$[rsp]
	sub	r13, rcx
	lea	r8, QWORD PTR [rcx+132]
	add	r15, -132				; ffffffffffffff7cH
	lea	esi, QWORD PTR [rdi+8]
	add	r12, -132				; ffffffffffffff7cH
	lea	r9d, QWORD PTR [rdi+7]
	add	rbp, -132				; ffffffffffffff7cH
	add	r13, -132				; ffffffffffffff7cH
	sub	r10, rcx
	mov	r11d, 2147483647			; 7fffffffH
	add	r10, -132				; ffffffffffffff7cH
	mov	QWORD PTR tv1815[rsp], r10
	movups	XMMWORD PTR dist$[rsp], xmm0
	movups	XMMWORD PTR dist$[rsp+16], xmm0
	movups	XMMWORD PTR dist$[rsp+32], xmm0
	movups	XMMWORD PTR dist$[rsp+48], xmm0
	movups	XMMWORD PTR dist$[rsp+64], xmm0
	movups	XMMWORD PTR dist$[rsp+80], xmm0
	movups	XMMWORD PTR dist$[rsp+96], xmm0
	movups	XMMWORD PTR dist$[rsp+112], xmm0
$LL4@calc_sao_b:

; 224  :     best_dist = INT_MAX;
; 225  :     offset = 0;
; 226  :     if (sao_bands[1][band] != 0) {

	mov	ecx, DWORD PTR [r8-4]
	mov	edx, edi
	test	ecx, ecx
	je	SHORT $LN14@calc_sao_b

; 227  :       offset = (sao_bands[0][band] + (sao_bands[1][band] >> 1)) / sao_bands[1][band];

	mov	eax, ecx
	sar	eax, 1
	add	eax, DWORD PTR [r8-132]
	cdq
	idiv	ecx

; 228  :       offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	eax, 7
	mov	edx, eax
	cmovg	edx, r9d
	cmp	edx, -7
	jge	SHORT $LN14@calc_sao_b
	lea	r9, QWORD PTR [r8+r13]
	mov	DWORD PTR [r10+r8], edi
	lea	rcx, QWORD PTR [r10+r8]
	mov	DWORD PTR [r9], r11d
	mov	edx, -7
	jmp	SHORT $LN61@calc_sao_b
$LN14@calc_sao_b:

; 229  :     }
; 230  :     dist[band] = offset==0?0:INT_MAX;

	mov	eax, edx

; 231  :     temp_offsets[band] = 0;

	mov	DWORD PTR [r10+r8], edi
	neg	eax
	lea	r9, QWORD PTR [r8+r13]
	sbb	ecx, ecx
	and	ecx, r11d
	mov	DWORD PTR [r9], ecx
	lea	rcx, QWORD PTR [r10+r8]

; 232  :     while(offset != 0) {

	test	edx, edx
	je	SHORT $LN2@calc_sao_b
$LN61@calc_sao_b:

; 233  :       temp_dist = sao_bands[1][band]*offset*offset - 2*offset*sao_bands[0][band];

	mov	eax, DWORD PTR [r8-132]
	mov	r10d, DWORD PTR [r8-4]
	lea	ebx, DWORD PTR [rax+rax]
	npad	10
$LL5@calc_sao_b:
	mov	eax, r10d
	imul	eax, edx
	sub	eax, ebx
	imul	eax, edx

; 234  : 
; 235  :       // Store best distortion and offset
; 236  :       if(temp_dist < best_dist) {

	cmp	eax, r11d
	jge	SHORT $LN11@calc_sao_b

; 237  :         dist[band] = temp_dist;

	mov	DWORD PTR [r9], eax

; 238  :         temp_offsets[band] = offset;

	mov	DWORD PTR [rcx], edx
$LN11@calc_sao_b:

; 239  :       }
; 240  :       offset += (offset > 0) ? -1:1;

	test	edx, edx
	mov	eax, 1
	cmovg	eax, DWORD PTR tv1977[rsp]
	add	edx, eax
	jne	SHORT $LL5@calc_sao_b
	mov	rbx, QWORD PTR tv1824[rsp]
$LN2@calc_sao_b:

; 224  :     best_dist = INT_MAX;
; 225  :     offset = 0;
; 226  :     if (sao_bands[1][band] != 0) {

	mov	r10d, DWORD PTR [r8]
	mov	edx, edi
	test	r10d, r10d
	je	SHORT $LN26@calc_sao_b

; 227  :       offset = (sao_bands[0][band] + (sao_bands[1][band] >> 1)) / sao_bands[1][band];

	mov	eax, r10d
	sar	eax, 1
	add	eax, DWORD PTR [r8-128]
	cdq
	idiv	r10d

; 228  :       offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	eax, 7
	mov	edx, eax
	mov	eax, 7
	cmovg	edx, eax
	cmp	edx, -7
	jge	SHORT $LN26@calc_sao_b
	mov	rcx, QWORD PTR tv1822[rsp]
	lea	r9, QWORD PTR [rbx+r8]
	add	rcx, r8
	mov	DWORD PTR [r9], r11d
	lea	edx, QWORD PTR [rax-14]
	mov	DWORD PTR [rcx], edi
	jmp	SHORT $LN60@calc_sao_b
$LN26@calc_sao_b:

; 229  :     }
; 230  :     dist[band] = offset==0?0:INT_MAX;

	mov	eax, edx
	lea	r9, QWORD PTR [rbx+r8]
	neg	eax
	sbb	ecx, ecx
	and	ecx, r11d
	mov	DWORD PTR [r9], ecx

; 231  :     temp_offsets[band] = 0;

	mov	rcx, QWORD PTR tv1822[rsp]
	add	rcx, r8
	mov	DWORD PTR [rcx], edi

; 232  :     while(offset != 0) {

	test	edx, edx
	je	SHORT $LN31@calc_sao_b
$LN60@calc_sao_b:

; 233  :       temp_dist = sao_bands[1][band]*offset*offset - 2*offset*sao_bands[0][band];

	mov	eax, DWORD PTR [r8-128]
	lea	ebx, DWORD PTR [rax+rax]
	npad	1
$LL29@calc_sao_b:
	mov	eax, r10d
	imul	eax, edx
	sub	eax, ebx
	imul	eax, edx

; 234  : 
; 235  :       // Store best distortion and offset
; 236  :       if(temp_dist < best_dist) {

	cmp	eax, r11d
	jge	SHORT $LN30@calc_sao_b

; 237  :         dist[band] = temp_dist;

	mov	DWORD PTR [r9], eax

; 238  :         temp_offsets[band] = offset;

	mov	DWORD PTR [rcx], edx
$LN30@calc_sao_b:

; 239  :       }
; 240  :       offset += (offset > 0) ? -1:1;

	test	edx, edx
	mov	eax, 1
	cmovg	eax, DWORD PTR tv1977[rsp]
	add	edx, eax
	jne	SHORT $LL29@calc_sao_b
$LN31@calc_sao_b:

; 224  :     best_dist = INT_MAX;
; 225  :     offset = 0;
; 226  :     if (sao_bands[1][band] != 0) {

	mov	ecx, DWORD PTR [r8+4]
	mov	edx, edi
	test	ecx, ecx
	je	SHORT $LN33@calc_sao_b

; 227  :       offset = (sao_bands[0][band] + (sao_bands[1][band] >> 1)) / sao_bands[1][band];

	mov	eax, ecx
	sar	eax, 1
	add	eax, DWORD PTR [r8-124]
	cdq
	idiv	ecx

; 228  :       offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	eax, 7
	mov	edx, eax
	mov	eax, 7
	cmovg	edx, eax
	cmp	edx, -7
	jge	SHORT $LN33@calc_sao_b
	lea	r9, QWORD PTR [r14+r8]
	mov	DWORD PTR [r15+r8], edi
	lea	rcx, QWORD PTR [r15+r8]
	mov	DWORD PTR [r9], r11d
	lea	edx, QWORD PTR [rax-14]
	jmp	SHORT $LN59@calc_sao_b
$LN33@calc_sao_b:

; 229  :     }
; 230  :     dist[band] = offset==0?0:INT_MAX;

	mov	eax, edx

; 231  :     temp_offsets[band] = 0;

	mov	DWORD PTR [r15+r8], edi
	neg	eax
	lea	r9, QWORD PTR [r14+r8]
	sbb	ecx, ecx
	and	ecx, r11d
	mov	DWORD PTR [r9], ecx
	lea	rcx, QWORD PTR [r15+r8]

; 232  :     while(offset != 0) {

	test	edx, edx
	je	SHORT $LN38@calc_sao_b
$LN59@calc_sao_b:

; 233  :       temp_dist = sao_bands[1][band]*offset*offset - 2*offset*sao_bands[0][band];

	mov	eax, DWORD PTR [r8-124]
	mov	r10d, DWORD PTR [r8+4]
	lea	ebx, DWORD PTR [rax+rax]
	npad	6
$LL36@calc_sao_b:
	mov	eax, r10d
	imul	eax, edx
	sub	eax, ebx
	imul	eax, edx

; 234  : 
; 235  :       // Store best distortion and offset
; 236  :       if(temp_dist < best_dist) {

	cmp	eax, r11d
	jge	SHORT $LN37@calc_sao_b

; 237  :         dist[band] = temp_dist;

	mov	DWORD PTR [r9], eax

; 238  :         temp_offsets[band] = offset;

	mov	DWORD PTR [rcx], edx
$LN37@calc_sao_b:

; 239  :       }
; 240  :       offset += (offset > 0) ? -1:1;

	test	edx, edx
	mov	eax, 1
	cmovg	eax, DWORD PTR tv1977[rsp]
	add	edx, eax
	jne	SHORT $LL36@calc_sao_b
$LN38@calc_sao_b:

; 224  :     best_dist = INT_MAX;
; 225  :     offset = 0;
; 226  :     if (sao_bands[1][band] != 0) {

	mov	ecx, DWORD PTR [r8+8]
	mov	edx, edi
	test	ecx, ecx
	je	SHORT $LN40@calc_sao_b

; 227  :       offset = (sao_bands[0][band] + (sao_bands[1][band] >> 1)) / sao_bands[1][band];

	mov	eax, ecx
	sar	eax, 1
	add	eax, DWORD PTR [r8-120]
	cdq
	idiv	ecx

; 228  :       offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	eax, 7
	mov	edx, eax
	mov	eax, 7
	cmovg	edx, eax
	cmp	edx, -7
	jge	SHORT $LN40@calc_sao_b
	lea	r9, QWORD PTR [r8+r12]
	mov	DWORD PTR [r8+rbp], edi
	lea	rcx, QWORD PTR [r8+rbp]
	mov	DWORD PTR [r9], r11d
	lea	edx, QWORD PTR [rax-14]
	jmp	SHORT $LN58@calc_sao_b
$LN40@calc_sao_b:

; 229  :     }
; 230  :     dist[band] = offset==0?0:INT_MAX;

	mov	eax, edx

; 231  :     temp_offsets[band] = 0;

	mov	DWORD PTR [r8+rbp], edi
	neg	eax
	lea	r9, QWORD PTR [r12+r8]
	sbb	ecx, ecx
	and	ecx, r11d
	mov	DWORD PTR [r9], ecx
	lea	rcx, QWORD PTR [r8+rbp]

; 232  :     while(offset != 0) {

	test	edx, edx
	je	SHORT $LN45@calc_sao_b
$LN58@calc_sao_b:

; 233  :       temp_dist = sao_bands[1][band]*offset*offset - 2*offset*sao_bands[0][band];

	mov	eax, DWORD PTR [r8-120]
	mov	r10d, DWORD PTR [r8+8]
	lea	ebx, DWORD PTR [rax+rax]
	npad	6
$LL43@calc_sao_b:
	mov	eax, r10d
	imul	eax, edx
	sub	eax, ebx
	imul	eax, edx

; 234  : 
; 235  :       // Store best distortion and offset
; 236  :       if(temp_dist < best_dist) {

	cmp	eax, r11d
	jge	SHORT $LN44@calc_sao_b

; 237  :         dist[band] = temp_dist;

	mov	DWORD PTR [r9], eax

; 238  :         temp_offsets[band] = offset;

	mov	DWORD PTR [rcx], edx
$LN44@calc_sao_b:

; 239  :       }
; 240  :       offset += (offset > 0) ? -1:1;

	test	edx, edx
	mov	eax, 1
	cmovg	eax, DWORD PTR tv1977[rsp]
	add	edx, eax
	jne	SHORT $LL43@calc_sao_b
$LN45@calc_sao_b:

; 220  :   FILL(temp_rate, 0);
; 221  : 
; 222  :   // Calculate distortion for each band using N*h^2 - 2*h*E
; 223  :   for (band = 0; band < 32; band++) {

	mov	r10, QWORD PTR tv1815[rsp]
	add	r8, 16
	mov	rbx, QWORD PTR tv1824[rsp]
	mov	r9d, 7
	sub	rsi, 1
	jne	$LL4@calc_sao_b

; 241  :     }
; 242  :   }
; 243  : 
; 244  :   best_dist = INT_MAX;

	mov	ebx, DWORD PTR dist$[rsp+8]
	lea	rcx, QWORD PTR dist$[rsp+8]
	mov	r9d, edi
$LL22@calc_sao_b:

; 245  :   //Find starting pos for best 4 band distortions
; 246  :   for (band = 0; band < 28; band++) {
; 247  :     temp_dist = dist[band] + dist[band+1] + dist[band+2] + dist[band+3];

	mov	eax, DWORD PTR [rcx-8]
	lea	rdx, QWORD PTR [rcx+4]
	add	eax, DWORD PTR [rcx-4]
	mov	r8d, DWORD PTR [rdx]
	lea	ecx, DWORD PTR [r8+rax]
	mov	eax, r9d
	add	ecx, ebx
	mov	ebx, r8d
	cmp	ecx, r11d
	mov	r10d, ecx
	lea	rcx, QWORD PTR [rdx]
	cmovge	r10d, r11d
	cmovge	eax, edi
	inc	r9d
	movsxd	rdi, eax
	mov	r11d, r10d
	cmp	r9d, 28
	jl	SHORT $LL22@calc_sao_b

; 248  :     if(temp_dist < best_dist) {
; 249  :       best_dist = temp_dist;
; 250  :       best_dist_pos = band;
; 251  :     }
; 252  :   }
; 253  :   // Copy best offsets to output
; 254  :   memcpy(offsets, &temp_offsets[best_dist_pos], 4*sizeof(int));

	mov	rax, QWORD PTR offsets$[rsp]
	movups	xmm0, XMMWORD PTR temp_offsets$[rsp+rdi*4]

; 255  : 
; 256  :   *band_position = best_dist_pos;
; 257  : 
; 258  :   return best_dist;
; 259  : }

	mov	rbx, QWORD PTR [rsp+352]
	movups	XMMWORD PTR [rax], xmm0
	mov	rax, QWORD PTR band_position$[rsp]
	mov	DWORD PTR [rax], edi
	mov	eax, r10d
	add	rsp, 288				; 00000120H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
calc_sao_band_offsets ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
state$ = 40
orig_data$ = 48
rec_data$ = 56
block_width$ = 64
block_height$ = 72
sao_bands$ = 80
calc_sao_bands PROC

; 269  : {

	push	rbp
	push	r12
	push	r13
	push	r15

; 270  :   int y, x;
; 271  :   int shift = state->encoder_control->bitdepth-5;

	mov	rax, QWORD PTR [rcx]
	mov	r12, r8
	mov	ebp, r9d
	mov	r15, rdx
	movzx	r13d, BYTE PTR [rax+2592]

; 272  : 
; 273  :   //Loop pixels and take top 5 bits to classify different bands
; 274  :   for (y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR block_height$[rsp]
	test	eax, eax
	jle	$LN3@calc_sao_b

; 270  :   int y, x;
; 271  :   int shift = state->encoder_control->bitdepth-5;

	mov	QWORD PTR [rsp+40], rbx
	mov	r11, rdx
	mov	rbx, QWORD PTR sao_bands$[rsp]
	mov	QWORD PTR [rsp+48], rsi
	mov	esi, eax
	mov	QWORD PTR [rsp+56], rdi
	mov	QWORD PTR [rsp+64], r14
	movsxd	r14, ebp
	npad	7
$LL4@calc_sao_b:

; 275  :     for (x = 0; x < block_width; ++x) {

	test	ebp, ebp
	jle	SHORT $LN2@calc_sao_b
	lea	eax, DWORD PTR [r13-5]
	mov	r9, r12
	movzx	edi, al
	sub	r9, r15
	mov	rax, r11
	mov	r10, rbp
	npad	9
$LL7@calc_sao_b:

; 276  :       int32_t curr_pos = y * block_width + x;
; 277  : 
; 278  :       kvz_pixel sb_index = rec_data[curr_pos] >> shift;

	movzx	edx, BYTE PTR [r9+rax]
	lea	rax, QWORD PTR [rax+1]
	mov	rcx, rdi
	mov	r8d, edx
	shr	r8, cl

; 279  :       sao_bands[0][sb_index] += orig_data[curr_pos] - rec_data[curr_pos];

	movzx	ecx, BYTE PTR [rax-1]
	sub	ecx, edx
	add	DWORD PTR [rbx+r8*4], ecx

; 280  :       sao_bands[1][sb_index]++;

	inc	DWORD PTR [rbx+r8*4+128]
	sub	r10, 1
	jne	SHORT $LL7@calc_sao_b
$LN2@calc_sao_b:

; 272  : 
; 273  :   //Loop pixels and take top 5 bits to classify different bands
; 274  :   for (y = 0; y < block_height; ++y) {

	add	r11, r14
	sub	rsi, 1
	jne	SHORT $LL4@calc_sao_b
	mov	r14, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+48]
	mov	rbx, QWORD PTR [rsp+40]
$LN3@calc_sao_b:

; 281  :     }
; 282  :   }
; 283  : }

	pop	r15
	pop	r13
	pop	r12
	pop	rbp
	ret	0
calc_sao_bands ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
edge_class$1$ = 48
tv1072 = 56
edge_offset$1 = 64
cat_sum_cnt$ = 104
state$ = 272
data$ = 280
recdata$ = 288
block_width$ = 296
block_height$ = 304
buf_cnt$ = 312
sao_out$ = 320
sao_top$ = 328
sao_left$ = 336
sao_search_edge_sao PROC

; 368  : {

	mov	rax, rsp
	mov	DWORD PTR [rax+32], r9d
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 200				; 000000c8H

; 369  :   sao_eo_class edge_class;
; 370  :   // This array is used to calculate the mean offset used to minimize distortion.
; 371  :   int cat_sum_cnt[2][NUM_SAO_EDGE_CATEGORIES];
; 372  :   unsigned i = 0;
; 373  :   
; 374  : 
; 375  :   sao_out->type = SAO_TYPE_EDGE;

	mov	r10, QWORD PTR sao_out$[rsp]
	xor	ebx, ebx
	mov	r12d, DWORD PTR buf_cnt$[rsp]
	mov	r11, rcx
	movaps	XMMWORD PTR [rax-88], xmm6
	lea	rcx, OFFSET FLAT:kvz_f_entropy_bits
	movss	xmm6, DWORD PTR __real@3f800000
	mov	r13d, ebx
	movaps	XMMWORD PTR [rax-104], xmm7
	movss	xmm7, DWORD PTR __real@40000000
	movaps	XMMWORD PTR [rax-120], xmm8
	mov	eax, r9d
	movsd	xmm8, QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR [r10], 2

; 376  :   sao_out->ddistortion = INT_MAX;

	mov	DWORD PTR [r10+8], 2147483647		; 7fffffffH
	mov	DWORD PTR edge_class$1$[rsp], ebx
$LL4@sao_search:

; 379  :     int edge_offset[NUM_SAO_EDGE_CATEGORIES*2];
; 380  :     int sum_ddistortion = 0;

	mov	ebp, ebx
	mov	esi, ebx

; 381  :     sao_eo_cat edge_cat;
; 382  : 
; 383  :     // Call calc_sao_edge_dir once for luma and twice for chroma.
; 384  :     for (i = 0; i < buf_cnt; ++i) {

	test	r12d, r12d
	je	$LN6@sao_search
	mov	r15, r8
	mov	r14, rdx
	sub	r15, rdx
	mov	QWORD PTR tv1072[rsp], r15
	npad	4
$LL7@sao_search:

; 385  :       FILL(cat_sum_cnt, 0);
; 386  :       kvz_calc_sao_edge_dir(data[i], recdata[i], edge_class,

	mov	rdx, QWORD PTR [r15+r14]
	xor	ecx, ecx
	mov	QWORD PTR cat_sum_cnt$[rsp+32], rcx
	xorps	xmm0, xmm0
	lea	rcx, QWORD PTR cat_sum_cnt$[rsp]
	mov	r9d, eax
	mov	QWORD PTR [rsp+40], rcx
	mov	r8d, r13d
	mov	ecx, DWORD PTR block_height$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR [r14]
	movups	XMMWORD PTR cat_sum_cnt$[rsp], xmm0
	movups	XMMWORD PTR cat_sum_cnt$[rsp+16], xmm0
	call	QWORD PTR kvz_calc_sao_edge_dir
	mov	r8, -2
	lea	ebx, DWORD PTR [rsi*4+1]
	add	ebx, esi
	lea	r10, QWORD PTR cat_sum_cnt$[rsp+24]
	xor	r12d, r12d
	lea	edi, QWORD PTR [r8+6]
	lea	r15d, QWORD PTR [r8+9]
	lea	r13d, QWORD PTR [r8-5]
	npad	10
$LL41@sao_search:

; 387  :                         block_width, block_height, cat_sum_cnt);
; 388  :     
; 389  : 
; 390  :       for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 391  :         int cat_sum = cat_sum_cnt[0][edge_cat];
; 392  :         int cat_cnt = cat_sum_cnt[1][edge_cat];

	mov	r9d, DWORD PTR [r10]

; 393  : 
; 394  :         // The optimum offset can be calculated by getting the minima of the
; 395  :         // fast ddistortion estimation formula. The minima is the mean error
; 396  :         // and we round that to the nearest integer.
; 397  :         int offset = 0;

	mov	edx, r12d
	mov	r11d, DWORD PTR [r10-20]

; 398  :         if (cat_cnt != 0) {

	test	r9d, r9d
	je	SHORT $LN42@sao_search

; 399  :           offset = (cat_sum + (cat_cnt >> 1)) / cat_cnt;

	mov	eax, r9d
	sar	eax, 1
	add	eax, r11d
	cdq
	idiv	r9d

; 400  :           offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	eax, r15d
	mov	edx, eax
	cmovg	edx, r15d
	cmp	edx, r13d
	cmovl	edx, r13d
$LN42@sao_search:

; 401  :         }
; 402  : 
; 403  :         // Sharpening edge offsets can't be encoded, so set them to 0 here.
; 404  :         if (edge_cat >= SAO_EO_CAT1 && edge_cat <= SAO_EO_CAT2 && offset < 0) {

	lea	rcx, QWORD PTR [r8+2]
	cmp	rcx, 1
	ja	SHORT $LN45@sao_search
	test	edx, edx
	cmovs	edx, r12d
$LN45@sao_search:

; 405  :           offset = 0;
; 406  :         }
; 407  :         if (edge_cat >= SAO_EO_CAT3 && edge_cat <= SAO_EO_CAT4 && offset > 0) {

	cmp	r8, 1
	ja	SHORT $LN46@sao_search
	test	edx, edx
	cmovg	edx, r12d
$LN46@sao_search:

; 408  :           offset = 0;
; 409  :         }
; 410  : 
; 411  :         edge_offset[edge_cat+5*i] = offset;
; 412  :         // The ddistortion is amount by which the SSE of data changes. It should
; 413  :         // be negative for all categories, if offset was chosen correctly.
; 414  :         // ddistortion = N * h^2 - 2 * h * E, where N is the number of samples
; 415  :         // and E is the sum of errors.
; 416  :         // It basically says that all pixels that are not improved by offset
; 417  :         // increase increase SSE by h^2 and all pixels that are improved by
; 418  :         // offset decrease SSE by h*E.
; 419  :         sum_ddistortion += cat_cnt * offset * offset - 2 * offset * cat_sum;

	mov	ecx, edx
	mov	DWORD PTR edge_offset$1[rsp+rbx*4], edx
	imul	ecx, r9d
	lea	eax, DWORD PTR [r11+r11]
	inc	ebx
	add	r10, 4
	inc	r8
	sub	ecx, eax
	imul	ecx, edx
	add	ebp, ecx
	sub	rdi, 1
	jne	SHORT $LL41@sao_search

; 381  :     sao_eo_cat edge_cat;
; 382  : 
; 383  :     // Call calc_sao_edge_dir once for luma and twice for chroma.
; 384  :     for (i = 0; i < buf_cnt; ++i) {

	mov	r12d, DWORD PTR buf_cnt$[rsp]
	inc	esi
	mov	r15, QWORD PTR tv1072[rsp]
	add	r14, 8
	mov	r13d, DWORD PTR edge_class$1$[rsp]
	mov	eax, DWORD PTR block_width$[rsp]
	cmp	esi, r12d
	jb	$LL7@sao_search
	mov	r10, QWORD PTR sao_out$[rsp]
	lea	rcx, OFFSET FLAT:kvz_f_entropy_bits
	mov	r11, QWORD PTR state$[rsp]
	xor	ebx, ebx
$LN6@sao_search:

; 97   :   if (sao_left != NULL) {

	cmp	QWORD PTR sao_left$[rsp], 0
	xorps	xmm1, xmm1
	je	SHORT $LN77@sao_search

; 98   :     ctx = &(cabac->ctx.sao_merge_flag_model);   
; 99   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r11+168]
	movss	xmm1, DWORD PTR [rcx+rax*4]
$LN77@sao_search:

; 100  :   }
; 101  :   if (sao_top != NULL) {

	cmp	QWORD PTR sao_top$[rsp], 0
	je	SHORT $LN76@sao_search

; 102  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 103  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r11+168]
	addss	xmm1, DWORD PTR [rcx+rax*4]
$LN76@sao_search:

; 104  :   }
; 105  : 
; 106  :   // TR coded type_idx_, edge = 2 = cMax
; 107  :   ctx = &(cabac->ctx.sao_type_idx_model);
; 108  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	movzx	eax, BYTE PTR [r11+169]
	mov	r8d, ebx
	xor	rax, 1
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, xmm6
	addss	xmm1, xmm0

; 109  : 
; 110  :   // TR coded offsets.
; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	test	r12d, r12d
	je	$LN20@sao_search
	npad	12
$LL21@sao_search:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	lea	r9d, DWORD PTR [r8+r8*4]
	lea	eax, DWORD PTR [r9+1]
	mov	eax, DWORD PTR edge_offset$1[rsp+rax*4]
	cdq
	xor	eax, edx
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN49@sao_search

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN50@sao_search
$LN49@sao_search:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN50@sao_search:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+2]
	mov	eax, DWORD PTR edge_offset$1[rsp+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN62@sao_search

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN63@sao_search
$LN62@sao_search:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN63@sao_search:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm1, eax
	lea	eax, DWORD PTR [r9+3]
	mov	eax, DWORD PTR edge_offset$1[rsp+rax*4]
	cdq
	cvtdq2ps xmm1, xmm1
	xor	eax, edx
	addss	xmm1, xmm0
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN65@sao_search

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN66@sao_search
$LN65@sao_search:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN66@sao_search:

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {
; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+4]
	mov	eax, DWORD PTR edge_offset$1[rsp+rax*4]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	je	SHORT $LN68@sao_search

; 117  :       } else {
; 118  :         mode_bits += abs_offset + 2;

	mov	ecx, 2
	cmp	eax, 7
	jne	SHORT $LN69@sao_search
$LN68@sao_search:

; 116  :         mode_bits += abs_offset + 1;

	mov	ecx, 1
$LN69@sao_search:

; 433  :       sao_out->eo_class = edge_class;
; 434  :       sao_out->ddistortion = sum_ddistortion;
; 435  :       memcpy(sao_out->offsets, edge_offset, sizeof(int) * NUM_SAO_EDGE_CATEGORIES * 2);

	add	eax, ecx

; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	inc	r8d
	movd	xmm1, eax

; 433  :       sao_out->eo_class = edge_class;
; 434  :       sao_out->ddistortion = sum_ddistortion;
; 435  :       memcpy(sao_out->offsets, edge_offset, sizeof(int) * NUM_SAO_EDGE_CATEGORIES * 2);

	cvtdq2ps xmm1, xmm1
	addss	xmm1, xmm0

; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	cmp	r8d, r12d
	jb	$LL21@sao_search
	lea	rcx, OFFSET FLAT:kvz_f_entropy_bits
$LN20@sao_search:

; 119  :       }
; 120  :     }    
; 121  :   }
; 122  : 
; 123  :   mode_bits += 2.0;

	addss	xmm1, xmm7

; 420  :       }
; 421  :     }
; 422  : 
; 423  :     {
; 424  :       float mode_bits = sao_mode_bits_edge(state, edge_class, edge_offset, sao_top, sao_left, buf_cnt);
; 425  :       sum_ddistortion += (int)((double)mode_bits*state->lambda +0.5);
; 426  :     }
; 427  :     // SAO is not applied for category 0.
; 428  :     edge_offset[SAO_EO_CAT0] = 0;

	mov	DWORD PTR edge_offset$1[rsp], ebx

; 429  :     edge_offset[SAO_EO_CAT0 + 5] = 0;

	mov	DWORD PTR edge_offset$1[rsp+20], ebx
	cvtps2pd xmm0, xmm1
	mulsd	xmm0, QWORD PTR [r11+368]
	addsd	xmm0, xmm8
	cvttsd2si eax, xmm0
	add	ebp, eax

; 430  : 
; 431  :     // Choose the offset class that offers the least error after offset.
; 432  :     if (sum_ddistortion < sao_out->ddistortion) {

	cmp	ebp, DWORD PTR [r10+8]
	jge	SHORT $LN2@sao_search

; 433  :       sao_out->eo_class = edge_class;
; 434  :       sao_out->ddistortion = sum_ddistortion;
; 435  :       memcpy(sao_out->offsets, edge_offset, sizeof(int) * NUM_SAO_EDGE_CATEGORIES * 2);

	movups	xmm0, XMMWORD PTR edge_offset$1[rsp]
	mov	DWORD PTR [r10+4], r13d
	movups	xmm1, XMMWORD PTR edge_offset$1[rsp+16]
	mov	DWORD PTR [r10+8], ebp
	movups	XMMWORD PTR [r10+28], xmm0
	movsd	xmm0, QWORD PTR edge_offset$1[rsp+32]
	movups	XMMWORD PTR [r10+44], xmm1
	movsd	QWORD PTR [r10+60], xmm0
$LN2@sao_search:

; 377  : 
; 378  :   for (edge_class = SAO_EO0; edge_class <= SAO_EO3; ++edge_class) {

	mov	eax, DWORD PTR block_width$[rsp]
	inc	r13d
	mov	rdx, QWORD PTR data$[rsp]
	mov	r8, QWORD PTR recdata$[rsp]
	mov	DWORD PTR edge_class$1$[rsp], r13d
	cmp	r13d, 3
	jle	$LL4@sao_search

; 436  :     }
; 437  :   }
; 438  : }

	lea	r11, QWORD PTR [rsp+200]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
sao_search_edge_sao ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
ddistortion$1$ = 48
tv649 = 56
temp_offsets$1 = 64
sao_bands$2 = 112
state$ = 432
data$ = 440
recdata$ = 448
block_width$ = 456
block_height$ = 464
buf_cnt$ = 472
sao_out$ = 480
sao_top$ = 488
sao_left$ = 496
sao_search_band_sao PROC

; 446  : {

	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 368				; 00000170H

; 447  :   unsigned i;
; 448  : 
; 449  :   sao_out->type = SAO_TYPE_BAND;

	mov	r14, QWORD PTR sao_out$[rsp]

; 450  :   sao_out->ddistortion = MAX_INT;
; 451  : 
; 452  :   // Band offset
; 453  :   {
; 454  :     int sao_bands[2][32];
; 455  :     int temp_offsets[10];
; 456  :     int ddistortion = 0;

	xor	ebp, ebp
	mov	ebx, 2147483647				; 7fffffffH
	mov	esi, r9d
	mov	r12, r8
	mov	rdi, rdx
	mov	r13, rcx
	mov	DWORD PTR ddistortion$1$[rsp], ebp
	mov	r15d, ebp
	mov	DWORD PTR [r14], 1
	mov	DWORD PTR [r14+8], ebx

; 457  :     float temp_rate = 0.0;
; 458  :     
; 459  :     for (i = 0; i < buf_cnt; ++i) {

	cmp	DWORD PTR buf_cnt$[rsp], ebp
	jbe	$LN3@sao_search
	lea	rbx, QWORD PTR [r14+20]
	sub	r12, rdx
	mov	QWORD PTR tv649[rsp], rbx
	mov	QWORD PTR recdata$[rsp], r12
	npad	1
$LL4@sao_search:

; 460  :       FILL(sao_bands, 0);

	xor	edx, edx
	lea	rcx, QWORD PTR sao_bands$2[rsp]
	mov	r8d, 256				; 00000100H
	call	memset

; 271  :   int shift = state->encoder_control->bitdepth-5;

	mov	rax, QWORD PTR [r13]

; 461  :       calc_sao_bands(state, data[i], recdata[i],block_width,

	mov	r12, QWORD PTR [r12+rdi]
	mov	r14, QWORD PTR [rdi]

; 271  :   int shift = state->encoder_control->bitdepth-5;

	movzx	r13d, BYTE PTR [rax+2592]

; 272  : 
; 273  :   //Loop pixels and take top 5 bits to classify different bands
; 274  :   for (y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR block_height$[rsp]
	test	eax, eax
	jle	SHORT $LN9@sao_search

; 460  :       FILL(sao_bands, 0);

	movsxd	rbp, esi
	mov	rbx, r14
	mov	edi, eax
$LL10@sao_search:

; 275  :     for (x = 0; x < block_width; ++x) {

	test	esi, esi
	jle	SHORT $LN8@sao_search
	lea	eax, DWORD PTR [r13-5]
	mov	r10, r12
	movzx	ecx, al
	sub	r10, r14
	mov	r9, rbx
	mov	r11, rsi
	npad	1
$LL13@sao_search:

; 276  :       int32_t curr_pos = y * block_width + x;
; 277  : 
; 278  :       kvz_pixel sb_index = rec_data[curr_pos] >> shift;

	movzx	edx, BYTE PTR [r10+r9]

; 279  :       sao_bands[0][sb_index] += orig_data[curr_pos] - rec_data[curr_pos];

	movzx	eax, BYTE PTR [r9]
	lea	r9, QWORD PTR [r9+1]
	sub	eax, edx
	mov	r8d, edx
	shr	r8, cl
	add	DWORD PTR sao_bands$2[rsp+r8*4], eax

; 280  :       sao_bands[1][sb_index]++;

	inc	DWORD PTR sao_bands$2[rsp+r8*4+128]
	sub	r11, 1
	jne	SHORT $LL13@sao_search
$LN8@sao_search:

; 272  : 
; 273  :   //Loop pixels and take top 5 bits to classify different bands
; 274  :   for (y = 0; y < block_height; ++y) {

	add	rbx, rbp
	sub	rdi, 1
	jne	SHORT $LL10@sao_search
	mov	rdi, QWORD PTR data$[rsp]
	mov	ebp, DWORD PTR ddistortion$1$[rsp]
	mov	rbx, QWORD PTR tv649[rsp]
$LN9@sao_search:

; 462  :                      block_height,sao_bands);
; 463  :     
; 464  : 
; 465  :       ddistortion += calc_sao_band_offsets(sao_bands, &temp_offsets[1+5*i], &sao_out->band_position[i]);      

	lea	eax, DWORD PTR [r15*4+1]
	mov	r8, rbx
	add	eax, r15d
	lea	rdx, QWORD PTR temp_offsets$1[rsp]
	lea	rcx, QWORD PTR sao_bands$2[rsp]
	lea	rdx, QWORD PTR [rdx+rax*4]
	call	calc_sao_band_offsets
	mov	r12, QWORD PTR recdata$[rsp]
	add	ebp, eax
	mov	r13, QWORD PTR state$[rsp]
	add	rbx, 4
	add	rdi, 8
	mov	DWORD PTR ddistortion$1$[rsp], ebp
	inc	r15d
	mov	QWORD PTR tv649[rsp], rbx
	mov	QWORD PTR data$[rsp], rdi
	cmp	r15d, DWORD PTR buf_cnt$[rsp]
	jb	$LL4@sao_search
	mov	r14, QWORD PTR sao_out$[rsp]
	mov	ebx, DWORD PTR [r14+8]
$LN3@sao_search:

; 466  :     }
; 467  : 
; 468  :     temp_rate = sao_mode_bits_band(state, sao_out->band_position, temp_offsets, sao_top, sao_left, buf_cnt);

	mov	rax, QWORD PTR sao_left$[rsp]
	lea	r8, QWORD PTR temp_offsets$1[rsp]
	mov	edi, DWORD PTR buf_cnt$[rsp]
	mov	rcx, r13
	mov	r9, QWORD PTR sao_top$[rsp]
	mov	DWORD PTR [rsp+40], edi
	mov	QWORD PTR [rsp+32], rax
	call	sao_mode_bits_band

; 469  :     ddistortion += (int)((double)temp_rate*state->lambda + 0.5);

	xorps	xmm3, xmm3
	cvtss2sd xmm3, xmm0
	mulsd	xmm3, QWORD PTR [r13+368]
	addsd	xmm3, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm3
	add	ebp, eax

; 470  : 
; 471  :     // Select band sao over edge sao when distortion is lower
; 472  :     if (ddistortion < sao_out->ddistortion) {

	cmp	ebp, ebx
	jge	SHORT $LN5@sao_search

; 473  :       sao_out->type = SAO_TYPE_BAND;
; 474  :       sao_out->ddistortion = ddistortion;
; 475  :       memcpy(&sao_out->offsets[0], &temp_offsets[0], sizeof(int) * buf_cnt * 5);

	lea	r8, QWORD PTR [rdi+rdi*4]
	mov	DWORD PTR [r14], 1
	shl	r8, 2
	lea	rcx, QWORD PTR [r14+28]
	lea	rdx, QWORD PTR temp_offsets$1[rsp]
	mov	DWORD PTR [r14+8], ebp
	call	memcpy
$LN5@sao_search:

; 476  :     }
; 477  :   }
; 478  : }

	mov	rbx, QWORD PTR [rsp+456]
	add	rsp, 368				; 00000170H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
sao_search_band_sao ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
edge_sao$1$ = 80
band_sao$ = 96
edge_sao$ = 176
merge_sao$1 = 256
state$ = 384
data$ = 392
recdata$ = 400
block_width$ = 408
block_height$ = 416
buf_cnt$ = 424
tv1661 = 432
sao_out$ = 432
tv1660 = 440
sao_top$ = 440
i$1$ = 448
sao_left$ = 448
merge_cost$ = 456
sao_search_best_mode PROC

; 494  : {

	mov	rax, rsp
	mov	DWORD PTR [rax+32], r9d
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-120]
	sub	rsp, 312				; 00000138H

; 506  :   band_sao.eo_class = SAO_EO0;
; 507  : 
; 508  :   if (state->encoder_control->cfg.sao_type & 1){

	mov	r14d, DWORD PTR buf_cnt$[rbp-256]
	mov	r15, rdx
	movaps	XMMWORD PTR [rax-104], xmm7
	mov	r13, rcx
	movsd	xmm7, QWORD PTR __real@3fe0000000000000
	mov	esi, 2147483647				; 7fffffffH
	movaps	XMMWORD PTR [rax-88], xmm6

; 46   :   sao->type = SAO_TYPE_NONE;

	xor	eax, eax
	mov	QWORD PTR edge_sao$[rbp-256], rax

; 47   :   sao->merge_left_flag = 0;

	mov	QWORD PTR edge_sao$[rbp-244], rax

; 46   :   sao->type = SAO_TYPE_NONE;

	mov	QWORD PTR band_sao$[rsp], rax

; 47   :   sao->merge_left_flag = 0;

	mov	QWORD PTR band_sao$[rsp+12], rax

; 495  :   sao_info_t edge_sao;
; 496  :   sao_info_t band_sao;
; 497  : 
; 498  :   init_sao_info(&edge_sao);
; 499  :   init_sao_info(&band_sao);
; 500  :   
; 501  :   //Avoid "random" uninitialized value
; 502  :   edge_sao.band_position[0] = edge_sao.band_position[1] = 0;

	mov	QWORD PTR edge_sao$[rbp-236], rax

; 503  :   edge_sao.eo_class = SAO_EO0;
; 504  :   band_sao.offsets[0] = 0;

	mov	DWORD PTR band_sao$[rsp+28], eax

; 505  :   band_sao.offsets[5] = 0;

	mov	DWORD PTR band_sao$[rbp-208], eax

; 506  :   band_sao.eo_class = SAO_EO0;
; 507  : 
; 508  :   if (state->encoder_control->cfg.sao_type & 1){

	mov	rax, QWORD PTR [rcx]
	test	BYTE PTR [rax+44], 1
	je	$LN19@sao_search

; 509  :     sao_search_edge_sao(state, data, recdata, block_width, block_height, buf_cnt, &edge_sao, sao_top, sao_left);

	mov	rdi, QWORD PTR sao_left$[rbp-256]
	lea	rax, QWORD PTR edge_sao$[rbp-256]
	mov	rbx, QWORD PTR sao_top$[rbp-256]
	mov	QWORD PTR [rsp+64], rdi
	mov	QWORD PTR [rsp+56], rbx
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR block_height$[rbp-256]
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], eax
	call	sao_search_edge_sao

; 510  :     float mode_bits = sao_mode_bits_edge(state, edge_sao.eo_class, edge_sao.offsets, sao_top, sao_left, buf_cnt);

	mov	r9, rbx
	mov	DWORD PTR [rsp+40], r14d
	lea	r8, QWORD PTR edge_sao$[rbp-228]
	mov	QWORD PTR [rsp+32], rdi
	mov	rcx, r13
	call	sao_mode_bits_edge

; 511  :     int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	xorps	xmm2, xmm2
	xor	ebx, ebx
	cvtss2sd xmm2, xmm0
	mulsd	xmm2, QWORD PTR [r13+368]
	addsd	xmm2, xmm7
	cvttsd2si r12d, xmm2
	mov	DWORD PTR edge_sao$1$[rsp], r12d

; 512  :     unsigned buf_i;
; 513  :     
; 514  :     for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	test	r14d, r14d
	je	SHORT $LN3@sao_search
	mov	r13d, DWORD PTR block_width$[rbp-256]
	mov	rdi, r15
	mov	r15, QWORD PTR recdata$[rbp-256]
	sub	r15, QWORD PTR data$[rbp-256]
	mov	esi, DWORD PTR block_height$[rbp-256]
	npad	7
$LL4@sao_search:

; 515  :       ddistortion += kvz_sao_edge_ddistortion(data[buf_i], recdata[buf_i], 

	mov	rdx, QWORD PTR [r15+rdi]
	lea	ecx, DWORD PTR [rbx+rbx*4]
	lea	rax, QWORD PTR edge_sao$[rbp-228]
	mov	r9d, esi
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, r13d
	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR edge_sao$[rbp-252]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR kvz_sao_edge_ddistortion
	inc	ebx
	lea	rdi, QWORD PTR [rdi+8]
	add	r12d, eax
	cmp	ebx, r14d
	jb	SHORT $LL4@sao_search
	mov	r13, QWORD PTR state$[rbp-256]
	mov	esi, 2147483647				; 7fffffffH
	mov	r15, QWORD PTR data$[rbp-256]
	mov	DWORD PTR edge_sao$1$[rsp], r12d
$LN3@sao_search:

; 516  :                                           block_width, block_height,
; 517  :                                           edge_sao.eo_class, &edge_sao.offsets[5 * buf_i]);
; 518  :     }
; 519  :     
; 520  :     edge_sao.ddistortion = ddistortion;

	mov	rax, QWORD PTR [r13]

; 521  :   }

	mov	r9d, DWORD PTR block_width$[rbp-256]
	mov	r8, QWORD PTR recdata$[rbp-256]
	mov	DWORD PTR edge_sao$[rbp-248], r12d
	jmp	SHORT $LN20@sao_search
$LN19@sao_search:

; 522  :   else{
; 523  :     edge_sao.ddistortion = INT_MAX;

	mov	r12d, esi
	mov	DWORD PTR edge_sao$1$[rsp], esi
	mov	DWORD PTR edge_sao$[rbp-248], esi
$LN20@sao_search:

; 524  :   }
; 525  : 
; 526  :   if (state->encoder_control->cfg.sao_type & 2){

	test	BYTE PTR [rax+44], 2
	lea	r11, OFFSET FLAT:kvz_f_entropy_bits
	xorps	xmm6, xmm6
	je	$LN21@sao_search

; 527  :     sao_search_band_sao(state, data, recdata, block_width, block_height, buf_cnt, &band_sao, sao_top, sao_left);

	mov	rdi, QWORD PTR sao_left$[rbp-256]
	lea	rax, QWORD PTR band_sao$[rsp]
	mov	rbx, QWORD PTR sao_top$[rbp-256]
	mov	rdx, r15
	mov	QWORD PTR [rsp+64], rdi
	mov	rcx, r13
	mov	QWORD PTR [rsp+56], rbx
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR block_height$[rbp-256]
	mov	DWORD PTR [rsp+40], r14d
	mov	DWORD PTR [rsp+32], eax
	call	sao_search_band_sao

; 137  :   if (sao_left != NULL) {

	lea	r11, OFFSET FLAT:kvz_f_entropy_bits
	xorps	xmm2, xmm2
	test	rdi, rdi
	je	SHORT $LN110@sao_search

; 138  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 139  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r13+168]
	movss	xmm2, DWORD PTR [r11+rax*4]
$LN110@sao_search:

; 140  :   }
; 141  :   if (sao_top != NULL) {

	test	rbx, rbx
	je	SHORT $LN111@sao_search

; 142  :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 143  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r13+168]
	addss	xmm2, DWORD PTR [r11+rax*4]
$LN111@sao_search:

; 144  :   }
; 145  : 
; 146  :   // TR coded sao_type_idx_, band = 1
; 147  :   ctx = &(cabac->ctx.sao_type_idx_model);
; 148  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	movzx	eax, BYTE PTR [r13+169]
	xor	r8d, r8d
	xor	rax, 1
	movss	xmm0, DWORD PTR [r11+rax*4]
	addss	xmm0, DWORD PTR __real@3f800000
	addss	xmm2, xmm0

; 149  : 
; 150  :   // TR coded offsets and possible FL coded offset signs.
; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	test	r14d, r14d
	je	$LN39@sao_search
	npad	4
$LL40@sao_search:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	lea	r9d, DWORD PTR [r8+r8*4]
	lea	eax, DWORD PTR [r9+1]
	mov	eax, DWORD PTR band_sao$[rsp+rax*4+28]
	cdq
	xor	eax, edx
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN73@sao_search

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN74@sao_search
$LN73@sao_search:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN74@sao_search:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+2]
	mov	eax, DWORD PTR band_sao$[rsp+rax*4+28]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm2
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN90@sao_search

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN91@sao_search
$LN90@sao_search:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN91@sao_search:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm1, eax
	lea	eax, DWORD PTR [r9+3]
	mov	eax, DWORD PTR band_sao$[rsp+rax*4+28]
	cdq
	cvtdq2ps xmm1, xmm1
	xor	eax, edx
	addss	xmm1, xmm0
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN94@sao_search

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN95@sao_search
$LN94@sao_search:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN95@sao_search:

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {
; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	add	eax, ecx
	movd	xmm0, eax
	lea	eax, DWORD PTR [r9+4]
	mov	eax, DWORD PTR band_sao$[rsp+rax*4+28]
	cdq
	cvtdq2ps xmm0, xmm0
	xor	eax, edx
	addss	xmm0, xmm1
	sub	eax, edx

; 156  :       if (abs_offset == 0) {

	jne	SHORT $LN98@sao_search

; 157  :         mode_bits += abs_offset + 1;

	lea	ecx, QWORD PTR [rax+1]
	jmp	SHORT $LN99@sao_search
$LN98@sao_search:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	xor	ecx, ecx
	cmp	eax, 7
	setne	cl
	add	ecx, 2
$LN99@sao_search:

; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	add	eax, ecx

; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	inc	r8d
	movd	xmm2, eax

; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	cvtdq2ps xmm2, xmm2
	addss	xmm2, xmm0

; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	cmp	r8d, r14d
	jb	$LL40@sao_search
$LN39@sao_search:
	xorps	xmm1, xmm1

; 159  :         mode_bits += abs_offset + 1 + 1;
; 160  :       } else {
; 161  :         mode_bits += abs_offset + 2 + 1;
; 162  :       }      
; 163  :     }
; 164  :   }
; 165  : 
; 166  :   // FL coded band position.
; 167  :   mode_bits += 5.0 * buf_cnt;

	mov	eax, r14d
	cvtps2pd xmm0, xmm2

; 528  :     float mode_bits = sao_mode_bits_band(state, band_sao.band_position, band_sao.offsets, sao_top, sao_left, buf_cnt);
; 529  :     int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	xor	ebx, ebx

; 167  :   mode_bits += 5.0 * buf_cnt;

	cvtsi2sd xmm1, rax
	mulsd	xmm1, QWORD PTR __real@4014000000000000
	addsd	xmm1, xmm0
	cvtpd2ps xmm0, xmm1

; 528  :     float mode_bits = sao_mode_bits_band(state, band_sao.band_position, band_sao.offsets, sao_top, sao_left, buf_cnt);
; 529  :     int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	cvtps2pd xmm1, xmm0
	mulsd	xmm1, QWORD PTR [r13+368]
	addsd	xmm1, xmm7
	cvttsd2si esi, xmm1

; 530  :     unsigned buf_i;
; 531  :     
; 532  :     for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	test	r14d, r14d
	je	$LN21@sao_search

; 139  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	r12, QWORD PTR recdata$[rbp-256]
	mov	rdi, r15
	sub	r12, QWORD PTR data$[rbp-256]
	lea	r15, QWORD PTR band_sao$[rsp+20]
	npad	13
$LL7@sao_search:

; 533  :       ddistortion += kvz_sao_band_ddistortion(state, data[buf_i], recdata[buf_i], 

	mov	r9d, DWORD PTR block_width$[rbp-256]
	lea	ecx, DWORD PTR [rbx*4+1]
	mov	r8, QWORD PTR [rdi+r12]
	lea	rax, QWORD PTR band_sao$[rsp+28]
	mov	rdx, QWORD PTR [rdi]
	add	ecx, ebx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, r13
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR [r15]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR block_height$[rbp-256]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR kvz_sao_band_ddistortion
	inc	ebx
	lea	r15, QWORD PTR [r15+4]
	add	esi, eax
	lea	rdi, QWORD PTR [rdi+8]
	cmp	ebx, r14d
	jb	SHORT $LL7@sao_search
	mov	r12d, DWORD PTR edge_sao$[rbp-248]
	lea	r11, OFFSET FLAT:kvz_f_entropy_bits
	mov	r15, QWORD PTR data$[rbp-256]
	mov	DWORD PTR edge_sao$1$[rsp], r12d
$LN21@sao_search:

; 534  :                                           block_width, block_height, 
; 535  :                                           band_sao.band_position[buf_i], &band_sao.offsets[1 + 5 * buf_i]);
; 536  :     }
; 537  :     
; 538  :     band_sao.ddistortion = ddistortion;
; 539  :   }
; 540  :   else{
; 541  :     band_sao.ddistortion = INT_MAX;
; 542  :   }
; 543  : 
; 544  :   if (edge_sao.ddistortion <= band_sao.ddistortion) {

	mov	rcx, QWORD PTR sao_out$[rbp-256]
	cmp	r12d, esi
	mov	r12, QWORD PTR merge_cost$[rbp-256]
	mov	DWORD PTR band_sao$[rsp+8], esi
	jg	SHORT $LN23@sao_search

; 545  :     *sao_out = edge_sao;

	movaps	xmm0, XMMWORD PTR edge_sao$[rbp-256]
	movaps	xmm1, XMMWORD PTR edge_sao$[rbp-240]
	mov	eax, DWORD PTR edge_sao$[rbp-192]
	movups	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, XMMWORD PTR edge_sao$[rbp-224]
	movups	XMMWORD PTR [rcx+16], xmm1
	movaps	xmm1, XMMWORD PTR edge_sao$[rbp-208]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	mov	DWORD PTR [rcx+64], eax

; 546  :     merge_cost[0] = edge_sao.ddistortion;

	mov	eax, DWORD PTR edge_sao$1$[rsp]
	mov	DWORD PTR [r12], eax

; 547  :   } else {

	jmp	SHORT $LN24@sao_search
$LN23@sao_search:

; 548  :     *sao_out = band_sao;

	movaps	xmm0, XMMWORD PTR band_sao$[rsp]
	movaps	xmm1, XMMWORD PTR band_sao$[rsp+16]
	mov	eax, DWORD PTR band_sao$[rbp-192]
	movups	XMMWORD PTR [rcx], xmm0
	movaps	xmm0, XMMWORD PTR band_sao$[rbp-224]
	movups	XMMWORD PTR [rcx+16], xmm1
	movaps	xmm1, XMMWORD PTR band_sao$[rbp-208]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm1
	mov	DWORD PTR [rcx+64], eax

; 549  :     merge_cost[0] = band_sao.ddistortion;

	mov	DWORD PTR [r12], esi
$LN24@sao_search:

; 58   :   if (sao_left != NULL) {

	mov	r8, QWORD PTR sao_left$[rbp-256]
	mov	r10, QWORD PTR state$[rbp-256]
	test	r8, r8
	je	SHORT $LN112@sao_search

; 59   :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r10+168]
	movss	xmm6, DWORD PTR [r11+rax*4]
$LN112@sao_search:

; 61   :   }
; 62   :   if (sao_top != NULL) {    

	mov	rdx, QWORD PTR sao_top$[rbp-256]
	test	rdx, rdx
	je	SHORT $LN113@sao_search

; 63   :     ctx = &(cabac->ctx.sao_merge_flag_model);
; 64   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r10+168]
	addss	xmm6, DWORD PTR [r11+rax*4]
$LN113@sao_search:

; 65   :   }
; 66   : 
; 67   :   // TR coded type_idx_, none = 0
; 68   :   ctx = &(cabac->ctx.sao_type_idx_model);
; 69   :   mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	movzx	eax, BYTE PTR [r10+169]

; 550  :   }
; 551  : 
; 552  :   // Choose between SAO and doing nothing, taking into account the
; 553  :   // rate-distortion cost of coding do nothing.
; 554  :   {
; 555  :     int cost_of_nothing = (int)(sao_mode_bits_none(state, sao_top, sao_left) * state->lambda + 0.5);

	xorps	xmm0, xmm0

; 69   :   mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	addss	xmm6, DWORD PTR [r11+rax*4]

; 550  :   }
; 551  : 
; 552  :   // Choose between SAO and doing nothing, taking into account the
; 553  :   // rate-distortion cost of coding do nothing.
; 554  :   {
; 555  :     int cost_of_nothing = (int)(sao_mode_bits_none(state, sao_top, sao_left) * state->lambda + 0.5);

	cvtss2sd xmm0, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+288]
	mulsd	xmm0, QWORD PTR [r10+368]
	addsd	xmm0, xmm7
	cvttsd2si eax, xmm0

; 556  :     if (sao_out->ddistortion >= cost_of_nothing) {

	cmp	DWORD PTR [rcx+8], eax
	jl	SHORT $LN25@sao_search

; 557  :       sao_out->type = SAO_TYPE_NONE;

	mov	DWORD PTR [rcx], 0

; 558  :       merge_cost[0] = cost_of_nothing;

	mov	DWORD PTR [r12], eax
$LN25@sao_search:

; 559  :     }
; 560  :   }
; 561  : 
; 562  :   // Calculate merge costs
; 563  :   if (sao_top || sao_left) {

	test	rdx, rdx
	jne	SHORT $LN27@sao_search
	test	r8, r8
	je	$LN9@sao_search
$LN27@sao_search:

; 564  :     sao_info_t* merge_sao[2] = { sao_left, sao_top};
; 565  :     int i;
; 566  :     for (i = 0; i < 2; i++) {

	xor	r13d, r13d
	mov	QWORD PTR merge_sao$1[rbp-248], rdx
	add	r12, 4
	mov	QWORD PTR merge_sao$1[rbp-256], r8
	lea	rdx, QWORD PTR merge_sao$1[rbp-256]
	mov	QWORD PTR tv1660[rbp-256], r12
	mov	DWORD PTR i$1$[rbp-256], r13d
	mov	QWORD PTR tv1661[rbp-256], rdx
	npad	10
$LL10@sao_search:

; 567  :       sao_info_t* merge_cand = merge_sao[i];

	mov	rdi, QWORD PTR [rdx]

; 568  : 
; 569  :       if (merge_cand) {

	test	rdi, rdi
	je	$LN8@sao_search

; 82   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 1);

	movzx	ecx, BYTE PTR [r10+168]
	xor	eax, eax
	test	r13b, r13b
	sete	al
	xor	rax, rcx
	movss	xmm0, DWORD PTR [r11+rax*4]

; 83   :   if (merge_cand == 1) return mode_bits;

	test	r13b, r13b
	je	SHORT $LN55@sao_search

; 84   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 2);

	xor	eax, eax
	cmp	r13b, 1
	sete	al
	xor	rax, rcx
	addss	xmm0, DWORD PTR [r11+rax*4]
$LN55@sao_search:

; 570  :         unsigned buf_i;
; 571  :         float mode_bits = sao_mode_bits_merge(state, i + 1);
; 572  :         int ddistortion = (int)(mode_bits * state->lambda + 0.5);
; 573  : 
; 574  :         switch (merge_cand->type) {

	mov	ecx, DWORD PTR [rdi]
	cvtps2pd xmm0, xmm0
	mulsd	xmm0, QWORD PTR [r10+368]
	addsd	xmm0, xmm7
	cvttsd2si ebx, xmm0
	test	ecx, ecx
	je	$LN31@sao_search
	sub	ecx, 1
	je	SHORT $LN30@sao_search
	cmp	ecx, 1
	jne	$LN8@sao_search

; 575  :           case SAO_TYPE_EDGE:
; 576  :                 for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	xor	esi, esi
	test	r14d, r14d
	je	$LN31@sao_search
	mov	r12d, DWORD PTR buf_cnt$[rbp-256]

; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	r14, r15
	mov	r15, QWORD PTR recdata$[rbp-256]
	sub	r15, QWORD PTR data$[rbp-256]
	mov	r13d, DWORD PTR block_width$[rbp-256]
$LL15@sao_search:

; 577  :                   ddistortion += kvz_sao_edge_ddistortion(data[buf_i], recdata[buf_i],

	mov	r9d, DWORD PTR block_height$[rbp-256]
	lea	ecx, DWORD PTR [rsi+rsi*4]
	mov	rdx, QWORD PTR [r14+r15]
	lea	rcx, QWORD PTR [rcx+7]
	lea	rax, QWORD PTR [rdi+rcx*4]
	mov	r8d, r13d
	mov	rcx, QWORD PTR [r14]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR [rdi+4]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR kvz_sao_edge_ddistortion
	inc	esi
	lea	r14, QWORD PTR [r14+8]
	add	ebx, eax
	cmp	esi, r12d
	jb	SHORT $LL15@sao_search

; 578  :                     block_width, block_height,
; 579  :                     merge_cand->eo_class, &merge_cand->offsets[5 * buf_i]);
; 580  :                 }
; 581  :                 merge_cost[i + 1] = ddistortion;
; 582  :             break;

	jmp	$LN116@sao_search
$LN30@sao_search:

; 583  :           case SAO_TYPE_BAND:
; 584  :               for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	xor	esi, esi
	test	r14d, r14d
	je	$LN31@sao_search

; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	r12, QWORD PTR recdata$[rbp-256]
	mov	r14, r15
	sub	r12, QWORD PTR data$[rbp-256]
	lea	r15, QWORD PTR [rdi+20]
	mov	r13d, DWORD PTR buf_cnt$[rbp-256]
	npad	7
$LL18@sao_search:

; 585  :                 ddistortion += kvz_sao_band_ddistortion(state, data[buf_i], recdata[buf_i],

	mov	r9d, DWORD PTR block_width$[rbp-256]
	lea	ecx, DWORD PTR [rsi*4+1]
	mov	r8, QWORD PTR [r14+r12]
	add	ecx, esi
	mov	rdx, QWORD PTR [r14]
	add	rcx, 7
	lea	rax, QWORD PTR [rdi+rcx*4]
	mov	rcx, r10
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR [r15]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR block_height$[rbp-256]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR kvz_sao_band_ddistortion
	mov	r10, QWORD PTR state$[rbp-256]
	lea	r15, QWORD PTR [r15+4]
	add	ebx, eax
	lea	r14, QWORD PTR [r14+8]
	inc	esi
	cmp	esi, r13d
	jb	SHORT $LL18@sao_search
$LN116@sao_search:

; 564  :     sao_info_t* merge_sao[2] = { sao_left, sao_top};
; 565  :     int i;
; 566  :     for (i = 0; i < 2; i++) {

	mov	rdx, QWORD PTR tv1661[rbp-256]
	lea	r11, OFFSET FLAT:kvz_f_entropy_bits
	mov	r10, QWORD PTR state$[rbp-256]
	mov	r14d, DWORD PTR buf_cnt$[rbp-256]
	mov	r12, QWORD PTR tv1660[rbp-256]
	mov	r13d, DWORD PTR i$1$[rbp-256]
$LN31@sao_search:
	mov	DWORD PTR [r12], ebx
$LN8@sao_search:
	mov	r15, QWORD PTR data$[rbp-256]
	inc	r13d
	add	r12, 4
	mov	DWORD PTR i$1$[rbp-256], r13d
	add	rdx, 8
	mov	QWORD PTR tv1660[rbp-256], r12
	mov	QWORD PTR tv1661[rbp-256], rdx
	cmp	r13d, 2
	jl	$LL10@sao_search
$LN9@sao_search:

; 586  :                   block_width, block_height,
; 587  :                   merge_cand->band_position[buf_i], &merge_cand->offsets[1 + 5 * buf_i]);
; 588  :               }
; 589  :               merge_cost[i + 1] = ddistortion;
; 590  :             break;
; 591  :           case SAO_TYPE_NONE:
; 592  :             merge_cost[i + 1] = ddistortion;
; 593  :             break;
; 594  :           }
; 595  :       }
; 596  :     }
; 597  :   }
; 598  : 
; 599  :   return;
; 600  : }

	movaps	xmm7, XMMWORD PTR [rsp+272]
	add	rsp, 312				; 00000138H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
sao_search_best_mode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
tv496 = 80
rec_list$ = 88
orig_list$ = 104
orig$ = 128
rec$ = 2176
state$ = 4288
tv509 = 4296
frame$ = 4296
x_ctb$ = 4304
y_ctb$ = 4312
sao$ = 4320
sao_top$ = 4328
sao_left$ = 4336
merge_cost$ = 4344
sao_search_chroma PROC

; 603  : {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4224				; 00001080H
	call	__chkstk
	sub	rsp, rax

; 604  :   int block_width  = (LCU_WIDTH / 2);
; 605  :   int block_height = (LCU_WIDTH / 2);
; 606  :   const kvz_pixel *orig_list[2];
; 607  :   const kvz_pixel *rec_list[2];
; 608  :   kvz_pixel orig[2][LCU_CHROMA_SIZE];
; 609  :   kvz_pixel rec[2][LCU_CHROMA_SIZE];
; 610  :   color_t color_i;
; 611  : 
; 612  :   // Check for right and bottom boundaries.
; 613  :   if (x_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->width / 2) {

	mov	r13d, r8d
	mov	r12, rdx
	mov	edx, DWORD PTR [rdx+16]
	mov	ebx, 32					; 00000020H
	shl	r13d, 5
	mov	eax, edx
	shr	eax, 1
	mov	r15d, r9d
	mov	r14d, ebx
	lea	r10d, DWORD PTR [r13+32]
	cmp	r10d, eax
	jb	SHORT $LN5@sao_search

; 614  :     block_width = (frame->width - x_ctb * LCU_WIDTH) / 2;

	shl	r8d, 6
	mov	ebx, edx
	sub	ebx, r8d
	shr	ebx, 1
$LN5@sao_search:

; 615  :   }
; 616  :   if (y_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->height / 2) {

	mov	edx, DWORD PTR [r12+20]
	lea	ecx, DWORD PTR [r9+1]
	mov	eax, edx
	shl	ecx, 5
	shr	eax, 1
	cmp	ecx, eax
	jb	SHORT $LN6@sao_search

; 617  :     block_height = (frame->height - y_ctb * LCU_WIDTH) / 2;

	mov	eax, r15d
	mov	r14d, edx
	shl	eax, 6
	sub	r14d, eax
	shr	r14d, 1
$LN6@sao_search:

; 618  :   }
; 619  : 
; 620  :   sao->type = SAO_TYPE_EDGE;

	mov	rax, QWORD PTR sao$[rsp]
	shl	r15d, 5
	xor	r10d, r10d
	mov	QWORD PTR tv509[rsp], r10
	mov	r9d, r10d
	mov	DWORD PTR [rax], 2
	mov	QWORD PTR tv496[rsp], r10
	npad	6
$LL4@sao_search:

; 621  : 
; 622  :   // Copy data to temporary buffers and init orig and rec lists to point to those buffers.
; 623  :   for (color_i = COLOR_U; color_i <= COLOR_V; ++color_i) {
; 624  :     kvz_pixel *data = &frame->source->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->source->stride / 2)];
; 625  :     kvz_pixel *recdata = &frame->rec->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->rec->stride / 2)];

	mov	rcx, QWORD PTR [r12+8]

; 626  :     kvz_pixels_blit(data, orig[color_i - 1], block_width, block_height,

	lea	rsi, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR [r12]
	movsxd	rdi, r10d
	shl	rdi, 10
	mov	eax, DWORD PTR [rcx+72]
	add	rsi, rdi
	cdq
	mov	DWORD PTR [rsp+40], ebx
	sub	eax, edx
	sar	eax, 1
	imul	eax, r15d
	lea	ebp, DWORD PTR [rax+r13]
	mov	eax, DWORD PTR [r8+72]
	add	rbp, QWORD PTR [r9+rcx+48]
	cdq
	sub	eax, edx
	mov	rdx, rsi
	sar	eax, 1
	mov	ecx, eax
	mov	DWORD PTR [rsp+32], eax
	imul	ecx, r15d
	add	ecx, r13d
	add	rcx, QWORD PTR [r9+r8+48]
	mov	r9d, r14d
	mov	r8d, ebx
	call	kvz_pixels_blit

; 627  :                         frame->source->stride / 2, block_width);
; 628  :     kvz_pixels_blit(recdata, rec[color_i - 1], block_width, block_height,

	lea	rax, QWORD PTR rec$[rsp]
	mov	DWORD PTR [rsp+40], ebx
	add	rdi, rax
	mov	r9d, r14d
	mov	rax, QWORD PTR [r12+8]
	mov	r8d, ebx
	mov	rcx, rbp
	mov	eax, DWORD PTR [rax+72]
	cdq
	sub	eax, edx
	mov	rdx, rdi
	sar	eax, 1
	mov	DWORD PTR [rsp+32], eax
	call	kvz_pixels_blit

; 629  :                         frame->rec->stride / 2, block_width);
; 630  :     orig_list[color_i - 1] = &orig[color_i - 1][0];

	mov	r9, QWORD PTR tv496[rsp]
	mov	r10, QWORD PTR tv509[rsp]
	inc	r10d
	mov	QWORD PTR tv509[rsp], r10
	mov	QWORD PTR orig_list$[rsp+r9], rsi

; 631  :     rec_list[color_i - 1] = &rec[color_i - 1][0];

	mov	QWORD PTR rec_list$[rsp+r9], rdi
	add	r9, 8
	mov	QWORD PTR tv496[rsp], r9
	cmp	r9, 8
	jle	$LL4@sao_search

; 632  :   }
; 633  : 
; 634  :   // Calculate
; 635  :   sao_search_best_mode(state, orig_list, rec_list, block_width, block_height, 2, sao, sao_top, sao_left, merge_cost);

	mov	rax, QWORD PTR merge_cost$[rsp]
	lea	r8, QWORD PTR rec_list$[rsp]
	mov	rcx, QWORD PTR state$[rsp]
	lea	rdx, QWORD PTR orig_list$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	r9d, ebx
	mov	rax, QWORD PTR sao_left$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR sao_top$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR sao$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], r14d
	call	sao_search_best_mode

; 636  : }

	mov	rbx, QWORD PTR [rsp+4304]
	add	rsp, 4224				; 00001080H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
sao_search_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
_TEXT	SEGMENT
orig$ = 80
rec$ = 4176
state$ = 8320
orig_list$ = 8328
frame$ = 8328
x_ctb$ = 8336
y_ctb$ = 8344
rec_list$ = 8352
sao$ = 8352
sao_top$ = 8360
sao_left$ = 8368
merge_cost$ = 8376
sao_search_luma PROC

; 639  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	mov	eax, 8272				; 00002050H
	call	__chkstk
	sub	rsp, rax

; 640  :   kvz_pixel orig[LCU_LUMA_SIZE];
; 641  :   kvz_pixel rec[LCU_LUMA_SIZE];
; 642  :   const kvz_pixel * orig_list[1] = { NULL };
; 643  :   const kvz_pixel * rec_list[1] = { NULL };
; 644  :   kvz_pixel *data = &frame->source->y[CU_TO_PIXEL(x_ctb, y_ctb, 0, frame->source->stride)];

	mov	r10, QWORD PTR [rdx]
	mov	r12, rcx

; 645  :   kvz_pixel *recdata = &frame->rec->y[CU_TO_PIXEL(x_ctb, y_ctb, 0, frame->rec->stride)];

	mov	rcx, QWORD PTR [rdx+8]
	mov	r11d, r9d
	shl	r8d, 6

; 646  :   int block_width = LCU_WIDTH;

	mov	edi, 64					; 00000040H
	shl	r11d, 6
	mov	r14, rdx
	mov	ebp, DWORD PTR [r10+72]

; 647  :   int block_height = LCU_WIDTH;

	mov	esi, edi
	mov	r15d, DWORD PTR [rcx+72]
	imul	r15d, r11d

; 648  : 
; 649  :   // Check for right and bottom boundaries.
; 650  :   if (x_ctb * LCU_WIDTH + LCU_WIDTH >= (unsigned)frame->width) {

	lea	eax, DWORD PTR [r8+64]
	imul	ebp, r11d
	add	r15d, r8d
	add	r15, QWORD PTR [rcx+16]
	add	ebp, r8d
	add	rbp, QWORD PTR [r10+16]
	mov	ecx, DWORD PTR [rdx+16]
	cmp	eax, ecx
	jb	SHORT $LN2@sao_search

; 651  :     block_width = frame->width - x_ctb * LCU_WIDTH;

	mov	edi, ecx
	sub	edi, r8d
$LN2@sao_search:

; 652  :   }
; 653  :   if (y_ctb * LCU_WIDTH + LCU_WIDTH >= (unsigned)frame->height) {

	mov	edx, DWORD PTR [rdx+20]
	shl	r9d, 6
	lea	eax, DWORD PTR [r9+64]
	cmp	eax, edx
	jb	SHORT $LN3@sao_search

; 654  :     block_height = frame->height - y_ctb * LCU_WIDTH;

	mov	esi, edx
	sub	esi, r9d
$LN3@sao_search:

; 655  :   }
; 656  : 
; 657  :   sao->type = SAO_TYPE_EDGE;

	mov	rbx, QWORD PTR sao$[rsp]

; 658  : 
; 659  :   // Fill temporary buffers with picture data.
; 660  :   kvz_pixels_blit(data, orig, block_width, block_height, frame->source->stride, block_width);

	lea	rdx, QWORD PTR orig$[rsp]
	mov	DWORD PTR [rsp+40], edi
	mov	r9d, esi
	mov	r8d, edi
	mov	rcx, rbp
	mov	DWORD PTR [rbx], 2
	mov	rax, QWORD PTR [r14]
	mov	eax, DWORD PTR [rax+72]
	mov	DWORD PTR [rsp+32], eax
	call	kvz_pixels_blit

; 661  :   kvz_pixels_blit(recdata, rec, block_width, block_height, frame->rec->stride, block_width);

	mov	rax, QWORD PTR [r14+8]
	lea	rdx, QWORD PTR rec$[rsp]
	mov	DWORD PTR [rsp+40], edi
	mov	r9d, esi
	mov	r8d, edi
	mov	rcx, r15
	mov	eax, DWORD PTR [rax+72]
	mov	DWORD PTR [rsp+32], eax
	call	kvz_pixels_blit

; 662  : 
; 663  :   orig_list[0] = orig;

	lea	rax, QWORD PTR orig$[rsp]

; 664  :   rec_list[0] = rec;
; 665  :   sao_search_best_mode(state, orig_list, rec_list, block_width, block_height, 1, sao, sao_top, sao_left, merge_cost);

	mov	r9d, edi
	mov	QWORD PTR orig_list$[rsp], rax
	lea	r8, QWORD PTR rec_list$[rsp]
	lea	rax, QWORD PTR rec$[rsp]
	mov	rcx, r12
	mov	QWORD PTR rec_list$[rsp], rax
	lea	rdx, QWORD PTR orig_list$[rsp]
	mov	rax, QWORD PTR merge_cost$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR sao_left$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR sao_top$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rbx
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], esi
	call	sao_search_best_mode

; 666  : }

	lea	r11, QWORD PTR [rsp+8272]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
sao_search_luma ENDP
_TEXT	ENDS
END
