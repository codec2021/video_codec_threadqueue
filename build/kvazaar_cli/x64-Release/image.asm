; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_pixels_blit
PUBLIC	kvz_image_calc_satd
PUBLIC	kvz_image_calc_sad
PUBLIC	kvz_yuv_t_free
PUBLIC	kvz_yuv_t_alloc
PUBLIC	kvz_image_make_subimage
PUBLIC	kvz_image_copy_ref
PUBLIC	kvz_image_alloc_420
PUBLIC	kvz_image_alloc
PUBLIC	kvz_image_free
pdata	SEGMENT
$pdata$kvz_pixels_blit DD imagerel $LN180
	DD	imagerel $LN180+140
	DD	imagerel $unwind$kvz_pixels_blit
$pdata$0$kvz_pixels_blit DD imagerel $LN180+140
	DD	imagerel $LN180+4718
	DD	imagerel $chain$0$kvz_pixels_blit
$pdata$1$kvz_pixels_blit DD imagerel $LN180+4718
	DD	imagerel $LN180+4744
	DD	imagerel $chain$1$kvz_pixels_blit
$pdata$kvz_image_calc_satd DD imagerel $LN11
	DD	imagerel $LN11+460
	DD	imagerel $unwind$kvz_image_calc_satd
$pdata$kvz_image_calc_sad DD imagerel $LN14
	DD	imagerel $LN14+337
	DD	imagerel $unwind$kvz_image_calc_sad
$pdata$image_interpolated_sad DD imagerel image_interpolated_sad
	DD	imagerel image_interpolated_sad+1454
	DD	imagerel $unwind$image_interpolated_sad
$pdata$cor_sad DD imagerel cor_sad
	DD	imagerel cor_sad+63
	DD	imagerel $unwind$cor_sad
$pdata$2$cor_sad DD imagerel cor_sad+63
	DD	imagerel cor_sad+347
	DD	imagerel $chain$2$cor_sad
$pdata$3$cor_sad DD imagerel cor_sad+347
	DD	imagerel cor_sad+359
	DD	imagerel $chain$3$cor_sad
$pdata$kvz_yuv_t_free DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$kvz_yuv_t_free
$pdata$kvz_yuv_t_alloc DD imagerel $LN6
	DD	imagerel $LN6+111
	DD	imagerel $unwind$kvz_yuv_t_alloc
$pdata$kvz_image_make_subimage DD imagerel $LN15
	DD	imagerel $LN15+260
	DD	imagerel $unwind$kvz_image_make_subimage
$pdata$0$kvz_image_make_subimage DD imagerel $LN15+260
	DD	imagerel $LN15+378
	DD	imagerel $chain$0$kvz_image_make_subimage
$pdata$1$kvz_image_make_subimage DD imagerel $LN15+378
	DD	imagerel $LN15+461
	DD	imagerel $chain$1$kvz_image_make_subimage
$pdata$kvz_image_copy_ref DD imagerel $LN6
	DD	imagerel $LN6+61
	DD	imagerel $unwind$kvz_image_copy_ref
$pdata$kvz_image_alloc DD imagerel $LN13
	DD	imagerel $LN13+331
	DD	imagerel $unwind$kvz_image_alloc
$pdata$kvz_image_free DD imagerel $LN21
	DD	imagerel $LN21+105
	DD	imagerel $unwind$kvz_image_free
xdata	SEGMENT
$unwind$kvz_pixels_blit DD 0a1901H
	DD	0b7419H
	DD	0a6419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
$chain$0$kvz_pixels_blit DD 020521H
	DD	085405H
	DD	imagerel $LN180
	DD	imagerel $LN180+140
	DD	imagerel $unwind$kvz_pixels_blit
$chain$1$kvz_pixels_blit DD 021H
	DD	imagerel $LN180
	DD	imagerel $LN180+140
	DD	imagerel $unwind$kvz_pixels_blit
$unwind$kvz_image_calc_satd DD 0d2e01H
	DD	021bc42eH
	DD	021a742eH
	DD	0219642eH
	DD	0218342eH
	DD	0214012eH
	DD	0e017f019H
	DD	05015H
$unwind$kvz_image_calc_sad DD 0a1801H
	DD	0106418H
	DD	0f5418H
	DD	0e3418H
	DD	0f0149218H
	DD	07010e012H
$unwind$image_interpolated_sad DD 0a1e01H
	DD	013341eH
	DD	0f01a721eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
$unwind$cor_sad DD 050d01H
	DD	0d00be00dH
	DD	05007c009H
	DD	03006H
$chain$2$cor_sad DD 061521H
	DD	08f415H
	DD	07740dH
	DD	066405H
	DD	imagerel cor_sad
	DD	imagerel cor_sad+63
	DD	imagerel $unwind$cor_sad
$chain$3$cor_sad DD 021H
	DD	imagerel cor_sad
	DD	imagerel cor_sad+63
	DD	imagerel $unwind$cor_sad
$unwind$kvz_yuv_t_free DD 020601H
	DD	030023206H
$unwind$kvz_yuv_t_alloc DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$kvz_image_make_subimage DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0e0143218H
	DD	07010c012H
$chain$0$kvz_image_make_subimage DD 020521H
	DD	08f405H
	DD	imagerel $LN15
	DD	imagerel $LN15+260
	DD	imagerel $unwind$kvz_image_make_subimage
$chain$1$kvz_image_make_subimage DD 021H
	DD	imagerel $LN15
	DD	imagerel $LN15+260
	DD	imagerel $unwind$kvz_image_make_subimage
$unwind$kvz_image_copy_ref DD 020601H
	DD	030023206H
$unwind$kvz_image_alloc DD 0c8c01H
	DD	0cf48cH
	DD	0bc484H
	DD	0a647aH
	DD	0d340dH
	DD	0e009520dH
	DD	050067007H
$unwind$kvz_image_free DD 020a01H
	DD	03006320aH
	ORG $+4
$SG4294955935 DB 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+4
$SG4294955936 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955937 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H
	DB	00H, 00H
$SG4294955938 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955939 DB 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g'
	DB	00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG4294955953 DB '(', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
$SG4294955940 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955955 DB '(', 00H, 'x', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
$SG4294955941 DB 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H
	DB	'h', 00H, 't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'h', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+6
$SG4294955942 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955957 DB '(', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG4294955943 DB 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H
	DB	't', 00H, 'h', 00H, 00H, 00H
$SG4294955944 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955959 DB '(', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG4294955945 DB 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H
	DB	'h', 00H, 't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'h', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+7
$SG4294955946 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955961 DB 'n', 00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H
	ORG $+4
$SG4294955947 DB 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H
	DB	't', 00H, 'h', 00H, 00H, 00H
$SG4294955948 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955963 DB '(', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG4294955949 DB 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'h', 00H, 'e'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, 00H, 00H
$SG4294955950 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955965 DB '(', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG4294955951 DB 'x', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'w', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H, 'i'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG4294955952 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955954 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294955956 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+3
$SG4294955958 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+3
$SG4294955960 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+7
$SG4294955962 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+4
$SG4294955964 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+3
$SG4294955966 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
im$ = 48
kvz_image_free PROC

; 115  : {

$LN21:

; 116  :   if (im == NULL) return;

	test	rcx, rcx
	je	SHORT $LN19@kvz_image_
	push	rbx
	sub	rsp, 32					; 00000020H

; 115  : {

	mov	rbx, rcx

; 117  : 
; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	eax, -1
	lock xadd DWORD PTR [rcx+88], eax
	sub	eax, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN1@kvz_image_

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rcx+80]
	cmp	rcx, rbx
	je	SHORT $LN4@kvz_image_

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN5@kvz_image_
$LN4@kvz_image_:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rbx]
	call	QWORD PTR __imp_free
$LN5@kvz_image_:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;

	xor	eax, eax

; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+80], rax
	mov	QWORD PTR [rbx], rax
	mov	QWORD PTR [rbx+8], rax
	mov	QWORD PTR [rbx+32], rax
	mov	QWORD PTR [rbx+24], rax
	mov	QWORD PTR [rbx+16], rax
	mov	QWORD PTR [rbx+56], rax
	mov	QWORD PTR [rbx+48], rax
	mov	QWORD PTR [rbx+40], rax
	call	QWORD PTR __imp_free
$LN1@kvz_image_:

; 138  : }

	add	rsp, 32					; 00000020H
	pop	rbx
$LN19@kvz_image_:
	ret	0
kvz_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
chroma_sizes$ = 32
chroma_format$ = 80
width$ = 88
height$ = 96
kvz_image_alloc PROC

; 57   : {

$LN13:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
	movsxd	r14, ecx
	mov	ebp, r8d
	mov	edi, edx

; 58   :   //Assert that we have a well defined image
; 59   :   assert((width % 2) == 0);

	test	dl, 1
	je	SHORT $LN7@kvz_image_
	mov	r8d, 59					; 0000003bH
	lea	rdx, OFFSET FLAT:$SG4294955966
	lea	rcx, OFFSET FLAT:$SG4294955965
	call	QWORD PTR __imp__wassert
$LN7@kvz_image_:

; 60   :   assert((height % 2) == 0);

	test	bpl, 1
	je	SHORT $LN8@kvz_image_
	mov	r8d, 60					; 0000003cH
	lea	rdx, OFFSET FLAT:$SG4294955964
	lea	rcx, OFFSET FLAT:$SG4294955963
	call	QWORD PTR __imp__wassert
$LN8@kvz_image_:

; 61   : 
; 62   :   const size_t simd_padding_width = 64;
; 63   : 
; 64   :   kvz_picture *im = MALLOC(kvz_picture, 1);

	mov	ecx, 184				; 000000b8H
	call	QWORD PTR __imp_malloc
	mov	rbx, rax

; 65   :   if (!im) return NULL;

	test	rax, rax
	jne	SHORT $LN2@kvz_image_

; 104  : }

	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
$LN2@kvz_image_:
	mov	QWORD PTR [rsp+80], rsi

; 66   : 
; 67   :   unsigned int luma_size = width * height;

	mov	esi, edi
	imul	esi, ebp
	mov	QWORD PTR [rsp+88], r12

; 68   :   unsigned chroma_sizes[] = { 0, luma_size / 4, luma_size / 2, luma_size };

	xor	r12d, r12d
	mov	QWORD PTR [rsp+96], r15
	mov	DWORD PTR chroma_sizes$[rsp], r12d

; 69   :   unsigned chroma_size = chroma_sizes[chroma_format];
; 70   : 
; 71   :   im->chroma_format = chroma_format;

	mov	DWORD PTR [rbx+116], r14d
	mov	eax, esi
	mov	DWORD PTR chroma_sizes$[rsp+12], esi
	shr	eax, 2
	mov	DWORD PTR chroma_sizes$[rsp+4], eax
	mov	eax, esi
	shr	eax, 1
	mov	DWORD PTR chroma_sizes$[rsp+8], eax
	mov	r15d, DWORD PTR chroma_sizes$[rsp+r14*4]

; 72   : 
; 73   :   //Allocate memory, pad the full data buffer from both ends
; 74   :   im->fulldata_buf = MALLOC_SIMD_PADDED(kvz_pixel, (luma_size + 2 * chroma_size), simd_padding_width * 2);

	lea	ecx, DWORD PTR [rsi+r15*2]
	sub	rcx, -128				; ffffffffffffff80H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rbx], rax

; 75   :   if (!im->fulldata_buf) {

	test	rax, rax
	jne	SHORT $LN3@kvz_image_

; 76   :     free(im);

	mov	rcx, rbx
	call	QWORD PTR __imp_free

; 77   :     return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@kvz_image_
$LN3@kvz_image_:

; 78   :   }
; 79   :   im->fulldata = im->fulldata_buf + simd_padding_width / sizeof(kvz_pixel);
; 80   : 
; 81   :   im->base_image = im;

	mov	QWORD PTR [rbx+80], rbx
	lea	rdx, QWORD PTR [rax+64]
	mov	QWORD PTR [rbx+8], rdx

; 82   :   im->refcount = 1; //We give a reference to caller
; 83   :   im->width = width;
; 84   :   im->height = height;
; 85   :   im->stride = width;
; 86   :   im->chroma_format = chroma_format;
; 87   : 
; 88   :   im->y = im->data[COLOR_Y] = &im->fulldata[0];

	mov	QWORD PTR [rbx+40], rdx
	mov	DWORD PTR [rbx+88], 1
	mov	DWORD PTR [rbx+64], edi
	mov	DWORD PTR [rbx+68], ebp
	mov	DWORD PTR [rbx+72], edi
	mov	QWORD PTR [rbx+16], rdx

; 89   : 
; 90   :   if (chroma_format == KVZ_CSP_400) {

	test	r14d, r14d
	jne	SHORT $LN4@kvz_image_

; 91   :     im->u = im->data[COLOR_U] = NULL;
; 92   :     im->v = im->data[COLOR_V] = NULL;

	mov	rax, r12
	mov	rcx, r12

; 93   :   } else {

	jmp	SHORT $LN5@kvz_image_
$LN4@kvz_image_:

; 94   :     im->u = im->data[COLOR_U] = &im->fulldata[luma_size];
; 95   :     im->v = im->data[COLOR_V] = &im->fulldata[luma_size + chroma_size];

	lea	eax, DWORD PTR [r15+rsi]
	mov	ecx, esi
	add	rax, rdx
	add	rcx, rdx
$LN5@kvz_image_:

; 96   :   }
; 97   : 
; 98   :   im->pts = 0;

	mov	QWORD PTR [rbx+48], rcx
	mov	QWORD PTR [rbx+24], rcx
	mov	QWORD PTR [rbx+56], rax
	mov	QWORD PTR [rbx+32], rax

; 99   :   im->dts = 0;
; 100  : 
; 101  :   im->interlacing = KVZ_INTERLACING_NONE;
; 102  : 
; 103  :   return im;

	mov	rax, rbx
	mov	QWORD PTR [rbx+96], r12
	mov	QWORD PTR [rbx+104], r12
	mov	DWORD PTR [rbx+112], r12d
$LN11@kvz_image_:

; 104  : }

	mov	r12, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+80]
	mov	r15, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
kvz_image_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
width$ = 8
height$ = 16
kvz_image_alloc_420 PROC

; 49   :   return kvz_image_alloc(KVZ_CSP_420, width, height);

	mov	r8d, edx
	mov	edx, ecx
	mov	ecx, 1
	jmp	kvz_image_alloc
kvz_image_alloc_420 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
im$ = 48
kvz_image_copy_ref PROC

; 146  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, 1
	lock xadd DWORD PTR [rcx+88], eax
	inc	eax

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	eax, 2
	jge	SHORT $LN4@kvz_image_
	mov	r8d, 150				; 00000096H
	lea	rdx, OFFSET FLAT:$SG4294955962
	lea	rcx, OFFSET FLAT:$SG4294955961
	call	QWORD PTR __imp__wassert
$LN4@kvz_image_:

; 151  :   return im;
; 152  : }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_image_copy_ref ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
orig_image$ = 64
x_offset$ = 72
y_offset$ = 80
width$ = 88
height$ = 96
kvz_image_make_subimage PROC

; 159  : {

$LN15:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r12d, r9d
	mov	edi, r8d
	mov	r14d, edx
	mov	rsi, rcx

; 160  :   // Assert that we have a well defined image
; 161  :   assert((width % 2) == 0);

	test	r9b, 1
	je	SHORT $LN5@kvz_image_
	mov	r8d, 161				; 000000a1H
	lea	rdx, OFFSET FLAT:$SG4294955960
	lea	rcx, OFFSET FLAT:$SG4294955959
	call	QWORD PTR __imp__wassert
$LN5@kvz_image_:

; 162  :   assert((height % 2) == 0);

	mov	ebp, DWORD PTR height$[rsp]
	test	bpl, 1
	je	SHORT $LN6@kvz_image_
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:$SG4294955958
	lea	rcx, OFFSET FLAT:$SG4294955957
	call	QWORD PTR __imp__wassert
$LN6@kvz_image_:

; 163  : 
; 164  :   assert((x_offset % 2) == 0);

	test	r14b, 1
	je	SHORT $LN7@kvz_image_
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:$SG4294955956
	lea	rcx, OFFSET FLAT:$SG4294955955
	call	QWORD PTR __imp__wassert
$LN7@kvz_image_:

; 165  :   assert((y_offset % 2) == 0);

	test	dil, 1
	je	SHORT $LN8@kvz_image_
	mov	r8d, 165				; 000000a5H
	lea	rdx, OFFSET FLAT:$SG4294955954
	lea	rcx, OFFSET FLAT:$SG4294955953
	call	QWORD PTR __imp__wassert
$LN8@kvz_image_:

; 166  : 
; 167  :   assert(x_offset + width <= orig_image->width);

	lea	eax, DWORD PTR [r14+r12]
	cmp	eax, DWORD PTR [rsi+64]
	jbe	SHORT $LN9@kvz_image_
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:$SG4294955952
	lea	rcx, OFFSET FLAT:$SG4294955951
	call	QWORD PTR __imp__wassert
$LN9@kvz_image_:

; 168  :   assert(y_offset + height <= orig_image->height);

	lea	eax, DWORD PTR [rdi+rbp]
	cmp	eax, DWORD PTR [rsi+68]
	jbe	SHORT $LN10@kvz_image_
	mov	r8d, 168				; 000000a8H
	lea	rdx, OFFSET FLAT:$SG4294955950
	lea	rcx, OFFSET FLAT:$SG4294955949
	call	QWORD PTR __imp__wassert
$LN10@kvz_image_:

; 169  : 
; 170  :   kvz_picture *im = MALLOC(kvz_picture, 1);

	mov	ecx, 184				; 000000b8H
	call	QWORD PTR __imp_malloc
	mov	rbx, rax

; 171  :   if (!im) return NULL;

	test	rax, rax
	je	$LN1@kvz_image_
$LN2@kvz_image_:
	mov	QWORD PTR [rsp+64], r15

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, 1

; 172  : 
; 173  :   im->base_image = kvz_image_copy_ref(orig_image->base_image);

	mov	r15, QWORD PTR [rsi+80]

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	lock xadd DWORD PTR [r15+88], eax
	inc	eax

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	eax, 2
	jge	SHORT $LN13@kvz_image_
	mov	r8d, 150				; 00000096H
	lea	rdx, OFFSET FLAT:$SG4294955962
	lea	rcx, OFFSET FLAT:$SG4294955961
	call	QWORD PTR __imp__wassert
$LN13@kvz_image_:

; 174  :   im->refcount = 1; // We give a reference to caller
; 175  :   im->width = width;
; 176  :   im->height = height;
; 177  :   im->stride = orig_image->stride;

	mov	r9d, DWORD PTR [rsi+72]

; 178  :   im->chroma_format = orig_image->chroma_format;
; 179  : 
; 180  :   im->y = im->data[COLOR_Y] = &orig_image->y[x_offset + y_offset * orig_image->stride];

	mov	edx, r9d
	mov	r8d, DWORD PTR [rsi+116]
	imul	edx, edi
	mov	QWORD PTR [rbx+80], r15
	mov	r15, QWORD PTR [rsp+64]
	mov	DWORD PTR [rbx+88], 1
	mov	DWORD PTR [rbx+64], r12d
	add	edx, r14d
	mov	DWORD PTR [rbx+68], ebp
	add	rdx, QWORD PTR [rsi+16]
	mov	DWORD PTR [rbx+72], r9d
	mov	DWORD PTR [rbx+116], r8d
	mov	QWORD PTR [rbx+40], rdx
	mov	QWORD PTR [rbx+16], rdx

; 181  :   if (orig_image->chroma_format != KVZ_CSP_400) {

	test	r8d, r8d
	je	SHORT $LN3@kvz_image_

; 182  :     im->u = im->data[COLOR_U] = &orig_image->u[x_offset / 2 + y_offset / 2 * orig_image->stride / 2];

	mov	rcx, QWORD PTR [rsi+24]
	shr	edi, 1
	imul	edi, r9d
	shr	r14d, 1
	shr	edi, 1
	lea	edx, DWORD PTR [r14+rdi]
	add	rcx, rdx
	mov	QWORD PTR [rbx+48], rcx
	mov	QWORD PTR [rbx+24], rcx

; 183  :     im->v = im->data[COLOR_V] = &orig_image->v[x_offset / 2 + y_offset / 2 * orig_image->stride / 2];

	mov	rcx, QWORD PTR [rsi+32]
	add	rcx, rdx
	mov	QWORD PTR [rbx+56], rcx
	mov	QWORD PTR [rbx+32], rcx
$LN3@kvz_image_:

; 184  :   }
; 185  : 
; 186  :   im->pts = 0;

	xor	eax, eax
	mov	QWORD PTR [rbx+96], rax

; 187  :   im->dts = 0;

	mov	QWORD PTR [rbx+104], rax

; 188  : 
; 189  :   return im;

	mov	rax, rbx
$LN1@kvz_image_:

; 190  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r12
	pop	rdi
	ret	0
kvz_image_make_subimage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
luma_size$ = 48
chroma_size$ = 56
kvz_yuv_t_alloc PROC

; 193  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rbx, ecx

; 194  :   yuv_t *yuv = (yuv_t *)malloc(sizeof(*yuv));

	mov	ecx, 32					; 00000020H
	movsxd	rsi, edx
	call	QWORD PTR __imp_malloc

; 195  :   yuv->size = luma_size;
; 196  : 
; 197  :   // Get buffers with separate mallocs in order to take advantage of
; 198  :   // automatic buffer overrun checks.
; 199  :   yuv->y = (kvz_pixel *)malloc(luma_size * sizeof(*yuv->y));

	mov	rcx, rbx
	mov	rdi, rax
	mov	DWORD PTR [rax], ebx
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rdi+8], rax

; 200  :   if (chroma_size == 0) {

	test	esi, esi
	jne	SHORT $LN2@kvz_yuv_t_

; 201  :     yuv->u = NULL;
; 202  :     yuv->v = NULL;

	xor	eax, eax
	mov	esi, eax

; 203  :   } else {

	jmp	SHORT $LN3@kvz_yuv_t_
$LN2@kvz_yuv_t_:

; 204  :     yuv->u = (kvz_pixel *)malloc(chroma_size * sizeof(*yuv->u));

	mov	rcx, rsi
	mov	rbx, rsi
	call	QWORD PTR __imp_malloc

; 205  :     yuv->v = (kvz_pixel *)malloc(chroma_size * sizeof(*yuv->v));

	mov	rcx, rbx
	mov	rsi, rax
	call	QWORD PTR __imp_malloc
$LN3@kvz_yuv_t_:

; 206  :   }
; 207  :   
; 208  :   return yuv;

	mov	QWORD PTR [rdi+16], rsi
	mov	QWORD PTR [rdi+24], rax
	mov	rax, rdi

; 209  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_yuv_t_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
yuv$ = 48
kvz_yuv_t_free PROC

; 212  : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 213  :   if (yuv) {

	test	rcx, rcx
	je	SHORT $LN2@kvz_yuv_t_

; 214  :     FREE_POINTER(yuv->y);

	mov	rcx, QWORD PTR [rcx+8]
	call	QWORD PTR __imp_free

; 215  :     FREE_POINTER(yuv->u);

	mov	rcx, QWORD PTR [rbx+16]
	mov	QWORD PTR [rbx+8], 0
	call	QWORD PTR __imp_free

; 216  :     FREE_POINTER(yuv->v);

	mov	rcx, QWORD PTR [rbx+24]
	mov	QWORD PTR [rbx+16], 0
	call	QWORD PTR __imp_free
	mov	QWORD PTR [rbx+24], 0
$LN2@kvz_yuv_t_:

; 217  :   }
; 218  :   FREE_POINTER(yuv);

	mov	rcx, rbx

; 219  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 217  :   }
; 218  :   FREE_POINTER(yuv);

	rex_jmp	QWORD PTR __imp_free
kvz_yuv_t_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
data1$ = 8
data2$ = 16
width$ = 24
height$ = 32
stride1$ = 40
stride2$ = 48
optimized_sad$ = 56
reg_sad_maybe_optimized PROC

; 225  :   if (optimized_sad != NULL)

	mov	r10, QWORD PTR optimized_sad$[rsp]
	mov	r11d, r9d
	mov	eax, DWORD PTR stride2$[rsp]
	test	r10, r10
	je	SHORT $LN2@reg_sad_ma

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	r9d, DWORD PTR stride1$[rsp]
	mov	r8d, r11d
	mov	DWORD PTR stride1$[rsp], eax
	rex_jmp	r10
$LN2@reg_sad_ma:

; 227  :   else
; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	DWORD PTR stride2$[rsp], eax
	rex_jmp	QWORD PTR kvz_reg_sad
reg_sad_maybe_optimized ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
pic_data$ = 48
ref_data$ = 56
block_width$ = 64
block_height$ = 72
pic_stride$ = 80
cor_sad	PROC

; 244  : {

	mov	DWORD PTR [rsp+32], r9d
	push	rbx
	push	rbp
	push	r12
	push	r13
	push	r14

; 245  :   kvz_pixel ref = *ref_data;

	movzx	r12d, BYTE PTR [rdx]

; 246  :   int x, y;
; 247  :   unsigned sad = 0;

	xor	r14d, r14d
	mov	r13d, DWORD PTR pic_stride$[rsp]
	xor	ebx, ebx

; 250  :     for (x = 0; x < block_width; ++x) {

	movsx	eax, r12b
	mov	r10d, r8d
	mov	rbp, rcx
	movd	xmm1, eax
	punpcklbw xmm1, xmm1
	punpcklwd xmm1, xmm1
	pshufd	xmm1, xmm1, 0
	test	r9d, r9d
	jle	$LN27@cor_sad

; 245  :   kvz_pixel ref = *ref_data;

	mov	QWORD PTR [rsp+48], rsi
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+56], rdi
	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+64], r15
$LL4@cor_sad:

; 250  :     for (x = 0; x < block_width; ++x) {

	xor	ecx, ecx
	test	r10d, r10d
	jle	SHORT $LN14@cor_sad
	cmp	r10d, 32				; 00000020H
	jb	SHORT $LN14@cor_sad

; 251  :       sad += abs(pic_data[y * pic_stride + x] - ref);

	mov	r8d, ebx
	mov	r9d, r10d
	imul	r8d, r13d
	and	r9d, -32				; ffffffffffffffe0H
	npad	1
$LL7@cor_sad:
	lea	edx, DWORD PTR [r8+rcx]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [rdx+16]
	movdqu	xmm0, XMMWORD PTR [rdx+rbp]
	psadbw	xmm0, xmm1
	paddd	xmm0, xmm3
	movdqa	xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR [rax+rbp]
	psadbw	xmm0, xmm1
	paddd	xmm0, xmm2
	movdqa	xmm2, xmm0
	cmp	ecx, r9d
	jl	SHORT $LL7@cor_sad
	mov	r9d, DWORD PTR block_height$[rsp]
$LN14@cor_sad:
	xor	edi, edi
	xor	esi, esi

; 250  :     for (x = 0; x < block_width; ++x) {

	cmp	ecx, r10d
	jge	SHORT $LN2@cor_sad
	mov	r11d, r13d
	mov	eax, r10d
	imul	r11d, ebx
	sub	eax, ecx
	mov	r9d, r12d
	cmp	eax, 2
	jl	SHORT $LL13@cor_sad
	lea	r15d, DWORD PTR [r10-1]
	npad	9

; 251  :       sad += abs(pic_data[y * pic_stride + x] - ref);

$LL22@cor_sad:
	lea	r8d, DWORD PTR [r11+rcx]
	add	ecx, 2
	movzx	eax, BYTE PTR [r8+rbp]
	sub	eax, r12d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	edi, eax
	lea	eax, DWORD PTR [r8+1]
	movzx	eax, BYTE PTR [rax+rbp]
	sub	eax, r12d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	esi, eax
	cmp	ecx, r15d
	jl	SHORT $LL22@cor_sad

; 250  :     for (x = 0; x < block_width; ++x) {

	cmp	ecx, r10d
	jge	SHORT $LN21@cor_sad
$LL13@cor_sad:

; 251  :       sad += abs(pic_data[y * pic_stride + x] - ref);

	lea	eax, DWORD PTR [r11+rcx]
	movzx	eax, BYTE PTR [rax+rbp]
	sub	eax, r9d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r14d, eax
$LN21@cor_sad:
	mov	r9d, DWORD PTR block_height$[rsp]
	lea	eax, DWORD PTR [rsi+rdi]
	add	r14d, eax
$LN2@cor_sad:

; 248  : 
; 249  :   for (y = 0; y < block_height; ++y) {

	inc	ebx
	cmp	ebx, r9d
	jl	$LL4@cor_sad

; 252  :     }
; 253  :   }
; 254  : 
; 255  :   return sad;

	mov	r15, QWORD PTR [rsp+64]
	paddd	xmm2, xmm3
	mov	rdi, QWORD PTR [rsp+56]
	movdqa	xmm0, xmm2
	mov	rsi, QWORD PTR [rsp+48]
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	add	eax, r14d

; 256  : }

	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	pop	rbx
	ret	0
$LN27@cor_sad:

; 252  :     }
; 253  :   }
; 254  : 
; 255  :   return sad;

	mov	eax, r14d

; 256  : }

	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	pop	rbx
	ret	0
cor_sad	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
pic$ = 128
ref$ = 136
bottom$1$ = 144
pic_x$ = 144
pic_y$ = 152
right$1$ = 160
ref_x$ = 160
tv1241 = 168
ref_y$ = 168
block_width$ = 176
tv1240 = 184
block_height$ = 184
optimized_sad$ = 192
image_interpolated_sad PROC

; 276  : {

	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 277  :   kvz_pixel *pic_data, *ref_data;
; 278  : 
; 279  :   int left, right, top, bottom;
; 280  :   int result = 0;
; 281  : 
; 282  :   // Change the movement vector to point right next to the frame. This doesn't
; 283  :   // affect the result but removes some special cases.
; 284  :   if (ref_x > ref->width)            ref_x = ref->width;

	mov	ebx, DWORD PTR [rdx+64]
	mov	r13, rcx

; 285  :   if (ref_y > ref->height)           ref_y = ref->height;

	mov	edi, DWORD PTR [rdx+68]
	mov	esi, r8d

; 286  :   if (ref_x + block_width < 0)  ref_x = -block_width;
; 287  :   if (ref_y + block_height < 0) ref_y = -block_height;

	mov	r15d, DWORD PTR block_height$[rsp]

; 288  : 
; 289  :   // These are the number of pixels by how far the movement vector points
; 290  :   // outside the frame. They are always >= 0. If all of them are 0, the
; 291  :   // movement vector doesn't point outside the frame.
; 292  :   left   = (ref_x < 0) ? -ref_x : 0;

	mov	edx, r15d
	mov	ebp, DWORD PTR block_width$[rsp]
	mov	r8d, ebp
	mov	r10d, DWORD PTR ref_x$[rsp]
	cmp	r10d, ebx
	mov	r11d, DWORD PTR ref_y$[rsp]
	cmovg	r10d, ebx
	cmp	r11d, edi
	cmovg	r11d, edi
	neg	r8d
	lea	eax, DWORD PTR [r10+rbp]
	test	eax, eax
	lea	eax, DWORD PTR [r11+r15]
	cmovns	r8d, r10d
	neg	edx
	test	eax, eax

; 293  :   top    = (ref_y < 0) ? -ref_y : 0;

	mov	r10d, r8d

; 294  :   right  = (ref_x + block_width  > ref->width)  ? ref_x + block_width  - ref->width  : 0;

	mov	ecx, r8d
	cmovns	edx, r11d
	neg	r10d
	xor	r11d, r11d
	lea	eax, DWORD PTR [r8+rbp]
	test	r8d, r8d
	mov	r14d, edx
	cmovns	r10d, r11d
	neg	r14d
	test	edx, edx
	mov	DWORD PTR tv1241[rsp], r10d
	cmovns	r14d, r11d
	sub	ecx, ebx
	add	ecx, ebp
	mov	DWORD PTR tv1240[rsp], r14d
	cmp	eax, ebx

; 295  :   bottom = (ref_y + block_height > ref->height) ? ref_y + block_height - ref->height : 0;
; 296  : 
; 297  :   // Center picture to the current block and reference to the point where
; 298  :   // movement vector is pointing to. That point might be outside the buffer,
; 299  :   // but that is ok because we project the movement vector to the buffer
; 300  :   // before dereferencing the pointer.
; 301  :   pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	ebx, DWORD PTR [r13+72]
	lea	eax, DWORD PTR [rdx+r15]
	cmovg	r11d, ecx
	mov	ecx, edx
	sub	ecx, edi
	mov	DWORD PTR right$1$[rsp], r11d
	add	ecx, r15d
	cmp	eax, edi
	mov	edi, 0
	mov	eax, ebx
	cmovg	edi, ecx
	imul	eax, r9d
	mov	DWORD PTR bottom$1$[rsp], edi
	add	eax, esi

; 302  :   ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	rsi, QWORD PTR ref$[rsp]
	movsxd	r12, eax
	add	r12, QWORD PTR [r13+16]
	mov	ecx, DWORD PTR [rsi+72]
	mov	eax, ecx
	imul	eax, edx
	add	eax, r8d
	movsxd	r13, eax
	add	r13, QWORD PTR [rsi+16]

; 303  : 
; 304  :   // The handling of movement vectors that point outside the picture is done
; 305  :   // in the following way.
; 306  :   // - Correct the index of ref_data so that it points to the top-left
; 307  :   //   of the area we want to compare against.
; 308  :   // - Correct the index of pic_data to point inside the current block, so
; 309  :   //   that we compare the right part of the block to the ref_data.
; 310  :   // - Reduce block_width and block_height so that the the size of the area
; 311  :   //   being compared is correct.
; 312  :   //
; 313  :   // NOTE: No more correct since hor_sad was modified to be a separate
; 314  :   // strategy
; 315  :   if (top && left) {

	test	r14d, r14d
	je	$LN45@image_inte
	test	r10d, r10d
	je	$LN41@image_inte

; 316  :     result += cor_sad(pic_data,

	imul	ecx, r14d
	mov	r9d, r14d
	mov	r8d, r10d
	add	ecx, r10d
	movsxd	rbx, ecx
	mov	rcx, QWORD PTR pic$[rsp]
	add	rbx, r13
	mov	rdx, rbx
	mov	eax, DWORD PTR [rcx+72]
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], eax
	call	cor_sad

; 317  :                       &ref_data[top * ref->stride + left],
; 318  :                       left, top, pic->stride);
; 319  :     result += kvz_ver_sad(&pic_data[left],

	mov	rdx, QWORD PTR pic$[rsp]
	mov	edi, eax
	movsxd	rsi, DWORD PTR tv1241[rsp]
	mov	r8d, ebp
	sub	r8d, esi
	mov	r9d, r14d
	mov	eax, DWORD PTR [rdx+72]
	mov	rdx, rbx
	lea	rcx, QWORD PTR [r12+rsi]
	mov	DWORD PTR [rsp+32], eax
	call	QWORD PTR kvz_ver_sad

; 320  :                       &ref_data[top * ref->stride + left],
; 321  :                       block_width - left, top, pic->stride);
; 322  : 
; 323  :     result += kvz_hor_sad(pic_data + top * pic->stride,

	sub	r15d, r14d
	mov	r8d, ebp
	add	edi, eax
	mov	rax, QWORD PTR ref$[rsp]
	mov	r9d, DWORD PTR [rax+72]
	mov	rax, QWORD PTR pic$[rsp]
	mov	r10d, DWORD PTR [rax+72]
	mov	eax, r9d
	imul	eax, r14d
	movsxd	rdx, eax
	mov	eax, r10d
	imul	eax, r14d
	add	rdx, r13
	movsxd	rcx, eax
	mov	eax, DWORD PTR right$1$[rsp]
	add	rcx, r12
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], esi
	mov	DWORD PTR [rsp+40], r9d
	mov	r9d, r15d
	mov	DWORD PTR [rsp+32], r10d
	call	QWORD PTR kvz_hor_sad
	add	eax, edi
	jmp	$LN39@image_inte
$LN41@image_inte:

; 324  :                           ref_data + top * ref->stride,
; 325  :                           block_width, block_height - top,
; 326  :                           pic->stride, ref->stride,
; 327  :                           left, right);
; 328  : 
; 329  :   } else if (top && right) {

	test	r11d, r11d
	je	$LN45@image_inte

; 330  :     result += kvz_ver_sad(pic_data,

	imul	ecx, r14d
	mov	edi, ebp
	sub	edi, r11d
	mov	DWORD PTR [rsp+32], ebx
	mov	r9d, r14d
	mov	r8d, edi
	movsxd	rdx, ecx
	mov	rcx, r12
	add	rdx, r13
	call	QWORD PTR kvz_ver_sad

; 331  :                       &ref_data[top * ref->stride],
; 332  :                       block_width - right, top, pic->stride);
; 333  :     result += cor_sad(&pic_data[block_width - right],

	mov	r8d, DWORD PTR right$1$[rsp]
	mov	r14d, eax
	mov	rax, QWORD PTR pic$[rsp]
	mov	esi, DWORD PTR [rsi+72]
	mov	ebx, esi
	imul	ebx, DWORD PTR tv1240[rsp]
	mov	ebp, DWORD PTR [rax+72]
	mov	eax, DWORD PTR block_width$[rsp]
	dec	eax
	mov	DWORD PTR [rsp+32], ebp
	mov	ecx, ebx
	sub	ecx, r8d
	add	ecx, eax
	movsxd	rdx, ecx
	movsxd	rcx, edi
	add	rdx, r13
	mov	edi, DWORD PTR tv1240[rsp]
	add	rcx, r12
	mov	r9d, edi
	call	cor_sad

; 334  :                       &ref_data[top * ref->stride + (block_width - right - 1)],
; 335  :                       right, top, pic->stride);
; 336  : 
; 337  :     result += kvz_hor_sad(pic_data + top * pic->stride,

	mov	r8d, DWORD PTR block_width$[rsp]
	add	r14d, eax
	mov	eax, ebp
	movsxd	rdx, ebx
	imul	eax, edi
	sub	r15d, edi
	add	rdx, r13
	mov	r9d, r15d
	movsxd	rcx, eax
	mov	eax, DWORD PTR right$1$[rsp]
	add	rcx, r12
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR tv1241[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	DWORD PTR [rsp+40], esi
	mov	DWORD PTR [rsp+32], ebp
	call	QWORD PTR kvz_hor_sad
	add	eax, r14d
	jmp	$LN39@image_inte
$LN45@image_inte:

; 338  :                           ref_data + top * ref->stride,
; 339  :                           block_width, block_height - top,
; 340  :                           pic->stride, ref->stride,
; 341  :                           left, right);
; 342  : 
; 343  :   } else if (bottom && left) {

	test	edi, edi
	je	$LN46@image_inte
	test	r10d, r10d
	je	$LN43@image_inte

; 344  :     result += kvz_hor_sad(pic_data, ref_data, block_width, block_height - bottom,

	mov	DWORD PTR [rsp+56], r11d
	sub	r15d, edi
	mov	DWORD PTR [rsp+48], r10d
	mov	r9d, r15d
	mov	DWORD PTR [rsp+40], ecx
	mov	r8d, ebp
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], ebx
	mov	rdx, r13
	call	QWORD PTR kvz_hor_sad

; 345  :                           pic->stride, ref->stride, left, right);
; 346  : 
; 347  :     result += cor_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	r14d, DWORD PTR tv1241[rsp]
	lea	ecx, DWORD PTR [r15-1]
	mov	r9d, DWORD PTR bottom$1$[rsp]
	mov	esi, eax
	mov	rax, QWORD PTR pic$[rsp]
	mov	r8d, r14d
	mov	edi, DWORD PTR [rax+72]
	mov	rax, QWORD PTR ref$[rsp]
	imul	r15d, edi
	mov	DWORD PTR [rsp+32], edi
	imul	ecx, DWORD PTR [rax+72]
	add	ecx, r14d
	movsxd	rbx, ecx
	add	rbx, r13
	movsxd	rcx, r15d
	mov	rdx, rbx
	add	rcx, r12
	call	cor_sad

; 348  :                       &ref_data[(block_height - bottom - 1) * ref->stride + left],
; 349  :                       left, bottom, pic->stride);
; 350  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride + left],

	mov	r9d, DWORD PTR bottom$1$[rsp]
	add	esi, eax
	lea	eax, DWORD PTR [r14+r15]
	mov	DWORD PTR [rsp+32], edi
	movsxd	rcx, eax
	sub	ebp, r14d
	add	rcx, r12
	mov	r8d, ebp
	mov	rdx, rbx
	call	QWORD PTR kvz_ver_sad
	add	eax, esi
	jmp	$LN39@image_inte
$LN43@image_inte:

; 351  :                       &ref_data[(block_height - bottom - 1) * ref->stride + left],
; 352  :                       block_width - left, bottom, pic->stride);
; 353  :   } else if (bottom && right) {

	test	r11d, r11d
	je	$LN46@image_inte

; 354  :     result += kvz_hor_sad(pic_data, ref_data, block_width, block_height - bottom,

	mov	DWORD PTR [rsp+56], r11d
	sub	r15d, edi
	mov	DWORD PTR [rsp+48], r10d
	mov	r9d, r15d
	mov	DWORD PTR [rsp+40], ecx
	mov	r8d, ebp
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], ebx
	mov	rdx, r13
	call	QWORD PTR kvz_hor_sad

; 355  :                           pic->stride, ref->stride, left, right);
; 356  : 
; 357  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	esi, DWORD PTR right$1$[rsp]
	lea	ebx, DWORD PTR [r15-1]
	mov	edi, eax
	mov	r8d, ebp
	mov	rax, QWORD PTR pic$[rsp]
	sub	r8d, esi
	mov	r9d, DWORD PTR [rax+72]
	mov	rax, QWORD PTR ref$[rsp]
	mov	DWORD PTR [rsp+32], r9d
	mov	ecx, DWORD PTR [rax+72]
	imul	ecx, ebx
	movsxd	rdx, ecx
	mov	ecx, r15d
	imul	ecx, r9d
	add	rdx, r13
	mov	r9d, DWORD PTR bottom$1$[rsp]
	movsxd	rcx, ecx
	add	rcx, r12
	call	QWORD PTR kvz_ver_sad
	add	edi, eax

; 358  :                       &ref_data[(block_height - bottom - 1) * ref->stride],
; 359  :                       block_width - right, bottom, pic->stride);
; 360  :     result += cor_sad(&pic_data[(block_height - bottom) * pic->stride + block_width - right],

	mov	r8d, esi
	mov	rax, QWORD PTR pic$[rsp]
	mov	r9d, DWORD PTR [rax+72]
	mov	rax, QWORD PTR ref$[rsp]
	imul	r15d, r9d
	mov	DWORD PTR [rsp+32], r9d
	mov	r9d, DWORD PTR bottom$1$[rsp]
	mov	eax, DWORD PTR [rax+72]
	imul	eax, ebx
	sub	r15d, esi
	add	r15d, ebp
	movsxd	rcx, r15d
	add	rcx, r12
	sub	eax, esi
	dec	eax
	add	eax, ebp
	movsxd	rdx, eax
	add	rdx, r13
	call	cor_sad
	add	eax, edi
	jmp	$LN39@image_inte
$LN46@image_inte:

; 361  :                       &ref_data[(block_height - bottom - 1) * ref->stride + block_width - right - 1],
; 362  :                       right, bottom, pic->stride);
; 363  :   } else if (top) {

	test	r14d, r14d
	je	$LN14@image_inte

; 364  :     result += kvz_ver_sad(pic_data,

	imul	ecx, r14d
	mov	r9d, r14d
	mov	r8d, ebp
	mov	DWORD PTR [rsp+32], ebx
	movsxd	rdx, ecx
	mov	rcx, r12
	add	rdx, r13
	call	QWORD PTR kvz_ver_sad

; 365  :                       &ref_data[top * ref->stride],
; 366  :                       block_width, top, pic->stride);
; 367  :     result += reg_sad_maybe_optimized(&pic_data[top * pic->stride],

	mov	r8d, DWORD PTR [rsi+72]
	sub	r15d, r14d
	mov	ecx, r8d
	mov	ebx, eax
	mov	rax, QWORD PTR pic$[rsp]
	imul	ecx, r14d
	mov	r9d, DWORD PTR [rax+72]

; 225  :   if (optimized_sad != NULL)

	mov	rax, QWORD PTR optimized_sad$[rsp]

; 365  :                       &ref_data[top * ref->stride],
; 366  :                       block_width, top, pic->stride);
; 367  :     result += reg_sad_maybe_optimized(&pic_data[top * pic->stride],

	movsxd	rdx, ecx
	mov	ecx, r9d
	imul	ecx, r14d
	add	rdx, r13
	movsxd	rcx, ecx
	add	rcx, r12

; 225  :   if (optimized_sad != NULL)

	test	rax, rax
	je	SHORT $LN30@image_inte

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r15d
	call	rax

; 365  :                       &ref_data[top * ref->stride],
; 366  :                       block_width, top, pic->stride);
; 367  :     result += reg_sad_maybe_optimized(&pic_data[top * pic->stride],

	add	eax, ebx
	jmp	$LN39@image_inte
$LN30@image_inte:

; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	DWORD PTR [rsp+40], r8d
	mov	r8d, ebp
	mov	DWORD PTR [rsp+32], r9d
	mov	r9d, r15d
	call	QWORD PTR kvz_reg_sad

; 365  :                       &ref_data[top * ref->stride],
; 366  :                       block_width, top, pic->stride);
; 367  :     result += reg_sad_maybe_optimized(&pic_data[top * pic->stride],

	add	eax, ebx
	jmp	$LN39@image_inte
$LN14@image_inte:

; 368  :                       &ref_data[top * ref->stride],
; 369  :                       block_width, block_height - top, pic->stride, ref->stride,
; 370  :                       optimized_sad);
; 371  :   } else if (bottom) {

	mov	rdx, r13
	test	edi, edi
	je	SHORT $LN16@image_inte

; 225  :   if (optimized_sad != NULL)

	mov	rax, QWORD PTR optimized_sad$[rsp]

; 372  :     result += reg_sad_maybe_optimized(pic_data,

	sub	r15d, edi

; 225  :   if (optimized_sad != NULL)

	test	rax, rax
	je	SHORT $LN34@image_inte

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, ebx
	mov	rcx, r12
	mov	r8d, r15d
	call	rax
	jmp	SHORT $LN47@image_inte
$LN34@image_inte:

; 227  :   else
; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	DWORD PTR [rsp+40], ecx
	mov	r9d, r15d
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, ebp
	call	QWORD PTR kvz_reg_sad
$LN47@image_inte:

; 373  :                       ref_data,
; 374  :                       block_width, block_height - bottom, pic->stride, ref->stride,
; 375  :                       optimized_sad);
; 376  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	ebx, eax
	mov	r9d, edi
	mov	rax, QWORD PTR pic$[rsp]
	mov	r8d, DWORD PTR [rax+72]
	lea	eax, DWORD PTR [r15-1]
	imul	eax, DWORD PTR [rsi+72]
	imul	r15d, r8d
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, ebp
	movsxd	rdx, eax
	movsxd	rcx, r15d
	add	rdx, r13
	add	rcx, r12
	call	QWORD PTR kvz_ver_sad
	add	eax, ebx
	jmp	SHORT $LN39@image_inte
$LN16@image_inte:

; 377  :                       &ref_data[(block_height - bottom - 1) * ref->stride],
; 378  :                       block_width, bottom, pic->stride);
; 379  :   } else if (left | right) {

	mov	eax, r10d
	or	eax, r11d
	je	SHORT $LN18@image_inte

; 380  :     result += kvz_hor_sad(pic_data, ref_data,

	mov	DWORD PTR [rsp+56], r11d
	mov	r9d, r15d
	mov	DWORD PTR [rsp+48], r10d
	mov	r8d, ebp
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], ebx
	call	QWORD PTR kvz_hor_sad

; 381  :                           block_width, block_height, pic->stride,
; 382  :                           ref->stride, left, right);
; 383  :   } else {

	jmp	SHORT $LN39@image_inte
$LN18@image_inte:

; 225  :   if (optimized_sad != NULL)

	mov	rax, QWORD PTR optimized_sad$[rsp]
	test	rax, rax
	je	SHORT $LN38@image_inte

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, ebx
	mov	rcx, r12
	mov	r8d, r15d
	call	rax
	jmp	SHORT $LN39@image_inte
$LN38@image_inte:

; 227  :   else
; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	DWORD PTR [rsp+40], ecx
	mov	r9d, r15d
	mov	rcx, r12
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, ebp
	call	QWORD PTR kvz_reg_sad
$LN39@image_inte:

; 384  :     result += reg_sad_maybe_optimized(pic_data, ref_data,
; 385  :                                       block_width, block_height,
; 386  :                                       pic->stride, ref->stride,
; 387  :                                       optimized_sad);
; 388  :   }
; 389  :   return result;
; 390  : }

	mov	rbx, QWORD PTR [rsp+152]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
image_interpolated_sad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
pic$ = 112
ref$ = 120
pic_x$ = 128
pic_y$ = 136
ref_x$ = 144
ref_y$ = 152
block_width$ = 160
block_height$ = 168
optimized_sad$ = 176
kvz_image_calc_sad PROC

; 409  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 410  :   assert(pic_x >= 0 && pic_x <= pic->width - block_width);

	mov	edi, DWORD PTR block_width$[rsp]
	mov	ebp, r9d
	mov	r15d, r8d
	mov	r14, rdx
	mov	rsi, rcx
	test	r8d, r8d
	js	SHORT $LN5@kvz_image_
	mov	eax, DWORD PTR [rcx+64]
	sub	eax, edi
	cmp	r8d, eax
	jle	SHORT $LN6@kvz_image_
$LN5@kvz_image_:
	mov	r8d, 410				; 0000019aH
	lea	rdx, OFFSET FLAT:$SG4294955948
	lea	rcx, OFFSET FLAT:$SG4294955947
	call	QWORD PTR __imp__wassert
$LN6@kvz_image_:

; 411  :   assert(pic_y >= 0 && pic_y <= pic->height - block_height);

	mov	ebx, DWORD PTR block_height$[rsp]
	test	ebp, ebp
	js	SHORT $LN7@kvz_image_
	mov	eax, DWORD PTR [rsi+68]
	sub	eax, ebx
	cmp	ebp, eax
	jle	SHORT $LN8@kvz_image_
$LN7@kvz_image_:
	mov	r8d, 411				; 0000019bH
	lea	rdx, OFFSET FLAT:$SG4294955946
	lea	rcx, OFFSET FLAT:$SG4294955945
	call	QWORD PTR __imp__wassert
$LN8@kvz_image_:

; 412  : 
; 413  :   uint32_t res;
; 414  : 
; 415  :   if (ref_x >= 0 && ref_x <= ref->width  - block_width &&
; 416  :       ref_y >= 0 && ref_y <= ref->height - block_height)

	mov	edx, DWORD PTR ref_x$[rsp]
	mov	ecx, DWORD PTR ref_y$[rsp]
	test	edx, edx
	js	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR [r14+64]
	sub	eax, edi
	cmp	edx, eax
	jg	SHORT $LN2@kvz_image_
	test	ecx, ecx
	js	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR [r14+68]
	sub	eax, ebx
	cmp	ecx, eax
	jg	SHORT $LN2@kvz_image_

; 417  :   {
; 418  :     // Reference block is completely inside the frame, so just calculate the
; 419  :     // SAD directly. This is the most common case, which is why it's first.
; 420  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	r9d, DWORD PTR [rsi+72]
	mov	eax, r9d

; 421  :     const kvz_pixel *ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	r8d, DWORD PTR [r14+72]
	imul	eax, ebp
	add	eax, r15d
	movsxd	r10, eax
	mov	eax, r8d
	add	r10, QWORD PTR [rsi+16]
	imul	eax, ecx

; 225  :   if (optimized_sad != NULL)

	mov	rcx, r10

; 421  :     const kvz_pixel *ref_data = &ref->y[ref_y * ref->stride + ref_x];

	add	eax, edx
	movsxd	rdx, eax
	add	rdx, QWORD PTR [r14+16]

; 225  :   if (optimized_sad != NULL)

	mov	rax, QWORD PTR optimized_sad$[rsp]
	test	rax, rax
	je	SHORT $LN10@kvz_image_

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, ebx
	call	rax
	jmp	SHORT $LN3@kvz_image_
$LN10@kvz_image_:

; 227  :   else
; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	DWORD PTR [rsp+40], r8d
	mov	r8d, edi
	mov	DWORD PTR [rsp+32], r9d
	mov	r9d, ebx
	call	QWORD PTR kvz_reg_sad

; 422  : 
; 423  :     res = reg_sad_maybe_optimized(pic_data,
; 424  :                                   ref_data,
; 425  :                                   block_width,
; 426  :                                   block_height,
; 427  :                                   pic->stride,
; 428  :                                   ref->stride,
; 429  :                                   optimized_sad);
; 430  :   } else {

	jmp	SHORT $LN3@kvz_image_
$LN2@kvz_image_:

; 431  :     // Call a routine that knows how to interpolate pixels outside the frame.
; 432  :     res = image_interpolated_sad(pic, ref, pic_x, pic_y, ref_x, ref_y, block_width, block_height, optimized_sad);

	mov	rax, QWORD PTR optimized_sad$[rsp]
	mov	r9d, ebp
	mov	QWORD PTR [rsp+64], rax
	mov	r8d, r15d
	mov	DWORD PTR [rsp+56], ebx
	mov	DWORD PTR [rsp+48], edi
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], edx
	mov	rdx, r14
	call	image_interpolated_sad
$LN3@kvz_image_:

; 433  :   }
; 434  :   return res >> (KVZ_BIT_DEPTH - 8);
; 435  : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rbp, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+128]
	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
kvz_image_calc_sad ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
ext_origin$1 = 48
ext$2 = 56
epol_args$3 = 64
ext_buffer$4 = 160
pic$ = 4288
ref$ = 4296
pic_x$ = 4304
pic_y$ = 4312
ext_s$5 = 4320
ref_x$ = 4320
ref_y$ = 4328
block_width$ = 4336
block_height$ = 4344
kvz_image_calc_satd PROC

; 452  : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r12
	push	rbp
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-4000]
	mov	eax, 4256				; 000010a0H
	call	__chkstk
	sub	rsp, rax

; 453  :   assert(pic_x >= 0 && pic_x <= pic->width - block_width);

	mov	r14d, DWORD PTR block_width$[rbp-256]
	mov	r15d, r9d
	mov	r12d, r8d
	mov	rbx, rdx
	mov	rdi, rcx
	test	r8d, r8d
	js	SHORT $LN5@kvz_image_
	mov	eax, DWORD PTR [rcx+64]
	sub	eax, r14d
	cmp	r8d, eax
	jle	SHORT $LN6@kvz_image_
$LN5@kvz_image_:
	mov	r8d, 453				; 000001c5H
	lea	rdx, OFFSET FLAT:$SG4294955944
	lea	rcx, OFFSET FLAT:$SG4294955943
	call	QWORD PTR __imp__wassert
$LN6@kvz_image_:

; 454  :   assert(pic_y >= 0 && pic_y <= pic->height - block_height);

	mov	esi, DWORD PTR block_height$[rbp-256]
	test	r15d, r15d
	js	SHORT $LN7@kvz_image_
	mov	eax, DWORD PTR [rdi+68]
	sub	eax, esi
	cmp	r15d, eax
	jle	SHORT $LN8@kvz_image_
$LN7@kvz_image_:
	mov	r8d, 454				; 000001c6H
	lea	rdx, OFFSET FLAT:$SG4294955942
	lea	rcx, OFFSET FLAT:$SG4294955941
	call	QWORD PTR __imp__wassert
$LN8@kvz_image_:

; 455  : 
; 456  :   if (ref_x >= 0 && ref_x <= ref->width  - block_width &&
; 457  :       ref_y >= 0 && ref_y <= ref->height - block_height)

	mov	ecx, DWORD PTR ref_x$[rbp-256]
	mov	edx, DWORD PTR ref_y$[rbp-256]
	test	ecx, ecx
	js	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR [rbx+64]
	sub	eax, r14d
	cmp	ecx, eax
	jg	SHORT $LN2@kvz_image_
	test	edx, edx
	js	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR [rbx+68]
	sub	eax, esi
	cmp	edx, eax
	jg	SHORT $LN2@kvz_image_

; 458  :   {
; 459  :     // Reference block is completely inside the frame, so just calculate the
; 460  :     // SAD directly. This is the most common case, which is why it's first.
; 461  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];
; 462  :     const kvz_pixel *ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	r11d, DWORD PTR [rbx+72]
	mov	r9d, DWORD PTR [rdi+72]
	mov	eax, r9d
	imul	eax, r15d

; 463  :     return kvz_satd_any_size(block_width,

	mov	DWORD PTR [rsp+40], r11d
	add	eax, r12d
	movsxd	r8, eax
	mov	eax, r11d
	imul	eax, edx
	add	eax, ecx
	movsxd	r10, eax
	add	r10, QWORD PTR [rbx+16]
	mov	QWORD PTR [rsp+32], r10
	jmp	$LN9@kvz_image_
$LN2@kvz_image_:

; 464  :                              block_height,
; 465  :                              pic_data,
; 466  :                              pic->stride,
; 467  :                              ref_data,
; 468  :                              ref->stride) >> (KVZ_BIT_DEPTH - 8);
; 469  :   } else {
; 470  :     // Extrapolate pixels from outside the frame.
; 471  : 
; 472  :     // Space for extrapolated pixels and the part from the picture
; 473  :     // The extrapolation function will set the pointers and stride.
; 474  :     kvz_pixel ext_buffer[LCU_LUMA_SIZE];
; 475  :     kvz_pixel *ext = NULL;
; 476  :     kvz_pixel *ext_origin = NULL;
; 477  :     int ext_s = 0;
; 478  :     kvz_epol_args epol_args = {

	mov	rax, QWORD PTR [rbx+16]
	xor	r8d, r8d
	mov	QWORD PTR epol_args$3[rsp], rax
	mov	eax, DWORD PTR [rbx+64]
	mov	DWORD PTR epol_args$3[rsp+8], eax
	mov	eax, DWORD PTR [rbx+68]
	mov	DWORD PTR epol_args$3[rsp+12], eax
	mov	eax, DWORD PTR [rbx+72]
	mov	DWORD PTR epol_args$3[rsp+16], eax

; 479  :       .src = ref->y,
; 480  :       .src_w = ref->width,
; 481  :       .src_h = ref->height,
; 482  :       .src_s = ref->stride,
; 483  :       .blk_x = ref_x,
; 484  :       .blk_y = ref_y,
; 485  :       .blk_w = block_width,
; 486  :       .blk_h = block_height,
; 487  :       .pad_l = 0,
; 488  :       .pad_r = 0,
; 489  :       .pad_t = 0,
; 490  :       .pad_b = 0,
; 491  :       .pad_b_simd = 0,
; 492  :     };
; 493  : 
; 494  :     // Initialize separately. Gets rid of warning
; 495  :     // about using nonstandard extension.
; 496  :     epol_args.buf = ext_buffer;

	lea	rax, QWORD PTR ext_buffer$4[rbp-256]
	mov	QWORD PTR epol_args$3[rsp+56], rax

; 497  :     epol_args.ext = &ext;

	lea	rax, QWORD PTR ext$2[rsp]
	mov	QWORD PTR epol_args$3[rbp-192], rax

; 498  :     epol_args.ext_origin = &ext_origin;

	lea	rax, QWORD PTR ext_origin$1[rsp]
	mov	QWORD PTR epol_args$3[rbp-184], rax

; 499  :     epol_args.ext_s = &ext_s;

	lea	rax, QWORD PTR ext_s$5[rbp-256]
	mov	DWORD PTR epol_args$3[rsp+20], ecx

; 500  : 
; 501  :     kvz_get_extended_block(&epol_args);

	lea	rcx, QWORD PTR epol_args$3[rsp]
	mov	QWORD PTR epol_args$3[rbp-176], rax
	mov	QWORD PTR ext$2[rsp], r8
	mov	QWORD PTR ext_origin$1[rsp], r8
	mov	DWORD PTR ext_s$5[rbp-256], r8d
	mov	DWORD PTR epol_args$3[rsp+24], edx
	mov	DWORD PTR epol_args$3[rsp+28], r14d
	mov	DWORD PTR epol_args$3[rsp+32], esi
	mov	QWORD PTR epol_args$3[rsp+36], r8
	mov	QWORD PTR epol_args$3[rsp+44], r8
	mov	DWORD PTR epol_args$3[rsp+52], r8d
	call	QWORD PTR kvz_get_extended_block

; 502  : 
; 503  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	r9d, DWORD PTR [rdi+72]
	mov	eax, r9d
	imul	eax, r15d
	add	eax, r12d
	movsxd	r8, eax

; 504  : 
; 505  :     unsigned satd = kvz_satd_any_size(block_width,

	mov	eax, DWORD PTR ext_s$5[rbp-256]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR ext_origin$1[rsp]
	mov	QWORD PTR [rsp+32], rax
$LN9@kvz_image_:

; 506  :       block_height,
; 507  :       pic_data,
; 508  :       pic->stride,
; 509  :       ext_origin,
; 510  :       ext_s) >> (KVZ_BIT_DEPTH - 8);
; 511  : 
; 512  :     return satd;
; 513  :   }
; 514  : }

	add	r8, QWORD PTR [rdi+16]
	mov	edx, esi
	mov	ecx, r14d
	call	QWORD PTR kvz_satd_any_size
	lea	r11, QWORD PTR [rsp+4256]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rdi, QWORD PTR [r11+48]
	mov	r12, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
kvz_image_calc_satd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
_TEXT	SEGMENT
orig$ = 64
dst$ = 72
width$ = 80
height$ = 88
orig_stride$ = 96
dst_stride$ = 104
kvz_pixels_blit PROC

; 543  : {

$LN180:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 544  :   unsigned y;
; 545  :   //There is absolutely no reason to have a width greater than the source or the destination stride.
; 546  :   assert(width <= orig_stride);

	mov	edi, DWORD PTR orig_stride$[rsp]
	mov	r12d, r9d
	mov	r15d, r8d
	mov	rsi, rdx
	mov	r14, rcx
	cmp	r8d, edi
	jbe	SHORT $LN31@kvz_pixels
	mov	r8d, 546				; 00000222H
	lea	rdx, OFFSET FLAT:$SG4294955940
	lea	rcx, OFFSET FLAT:$SG4294955939
	call	QWORD PTR __imp__wassert
$LN31@kvz_pixels:

; 547  :   assert(width <= dst_stride);

	mov	ebx, DWORD PTR dst_stride$[rsp]
	cmp	r15d, ebx
	jbe	SHORT $LN32@kvz_pixels
	mov	r8d, 547				; 00000223H
	lea	rdx, OFFSET FLAT:$SG4294955938
	lea	rcx, OFFSET FLAT:$SG4294955937
	call	QWORD PTR __imp__wassert
$LN32@kvz_pixels:

; 548  : 
; 549  : #ifdef CHECKPOINTS
; 550  :   char *buffer = malloc((3 * width + 1) * sizeof(char));
; 551  :   for (y = 0; y < height; ++y) {
; 552  :     int p;
; 553  :     for (p = 0; p < width; ++p) {
; 554  :       sprintf((buffer + 3*p), "%02X ", orig[y*orig_stride]);
; 555  :     }
; 556  :     buffer[3*width] = 0;
; 557  :     CHECKPOINT("kvz_pixels_blit_avx2: %04d: %s", y, buffer);
; 558  :   }
; 559  :   FREE_POINTER(buffer);
; 560  : #endif //CHECKPOINTS
; 561  : 
; 562  :   if (width == orig_stride && width == dst_stride) {

	cmp	r15d, edi
	jne	SHORT $LN22@kvz_pixels
	cmp	r15d, ebx
	jne	SHORT $LN22@kvz_pixels

; 563  :     memcpy(dst, orig, width * height * sizeof(kvz_pixel));

	imul	r15d, r12d
	mov	rdx, r14
	mov	rcx, rsi
	mov	r8d, r15d
	call	memcpy

; 564  :     return;

	jmp	$LN5@kvz_pixels
$LN22@kvz_pixels:
	mov	QWORD PTR [rsp+64], rbp

; 565  :   }
; 566  : 
; 567  :   int nxn_width = (width == height) ? width : 0;

	xor	ebp, ebp
	cmp	r15d, r12d
	mov	eax, ebp
	cmove	eax, r15d

; 568  :   switch (nxn_width) {

	cmp	eax, 4
	je	$LN23@kvz_pixels
	cmp	eax, 8
	je	$LN24@kvz_pixels
	cmp	eax, 16
	je	$LN25@kvz_pixels
	cmp	eax, 32					; 00000020H
	je	$LN26@kvz_pixels
	cmp	eax, 64					; 00000040H
	je	SHORT $LN27@kvz_pixels

; 574  :   default:
; 575  : 
; 576  :     if (orig == dst) {

	cmp	r14, rsi
	jne	SHORT $LN34@kvz_pixels

; 577  :       //If we have the same array, then we should have the same stride
; 578  :       assert(orig_stride == dst_stride);

	cmp	edi, ebx
	je	$LN178@kvz_pixels
	mov	r8d, 578				; 00000242H
	lea	rdx, OFFSET FLAT:$SG4294955936
	lea	rcx, OFFSET FLAT:$SG4294955935
	call	QWORD PTR __imp__wassert

; 579  :       return;

	jmp	$LN178@kvz_pixels
$LN34@kvz_pixels:

; 580  :     }
; 581  :     assert(orig != dst || orig_stride == dst_stride);
; 582  : 
; 583  :     for (y = 0; y < height; ++y) {

	test	r12d, r12d
	je	$LN178@kvz_pixels
	npad	6
$LL21@kvz_pixels:

; 584  :       memcpy(&dst[y*dst_stride], &orig[y*orig_stride], width * sizeof(kvz_pixel));

	mov	edx, ebp
	mov	ecx, ebp
	imul	edx, edi
	mov	r8, r15
	imul	ecx, ebx
	add	rdx, r14
	add	rcx, rsi
	call	memcpy
	inc	ebp
	cmp	ebp, r12d
	jb	SHORT $LL21@kvz_pixels

; 580  :     }
; 581  :     assert(orig != dst || orig_stride == dst_stride);
; 582  : 
; 583  :     for (y = 0; y < height; ++y) {

	jmp	$LN178@kvz_pixels
$LN27@kvz_pixels:

; 573  :     BLIT_PIXELS_CASE(64)

	movups	xmm0, XMMWORD PTR [r14]
	lea	eax, DWORD PTR [rbx+rbx]
	lea	edx, DWORD PTR [rdi+rdi]
	movups	XMMWORD PTR [rsi], xmm0
	movups	xmm1, XMMWORD PTR [r14+16]
	movups	XMMWORD PTR [rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [r14+32]
	movups	XMMWORD PTR [rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [r14+48]
	movups	XMMWORD PTR [rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+r14]
	movups	XMMWORD PTR [rbx+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdi+r14+16]
	movups	XMMWORD PTR [rbx+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+r14+32]
	movups	XMMWORD PTR [rbx+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+r14+48]
	movups	XMMWORD PTR [rbx+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	lea	edx, DWORD PTR [rdi+rdi*2]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	lea	edx, DWORD PTR [rdi*4]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	lea	edx, DWORD PTR [rdi+rdi*4]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 7
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rdi+rdi*2]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*2]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 7
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	lea	edx, DWORD PTR [rdi*8]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	lea	edx, DWORD PTR [rdi+rdi*8]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 11
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rdi+rdi*4]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*4]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	lea	ecx, DWORD PTR [rdi+rdi*2]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 11
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 13
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 13
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 14
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 14
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 15
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 15
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	mov	eax, ebx
	imul	edx, edi, 17
	shl	eax, 4
	mov	ecx, edi
	shl	ecx, 4
	movups	xmm0, XMMWORD PTR [rcx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 17
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 19
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rdi+rdi*8]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*8]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	lea	ecx, DWORD PTR [rdi+rdi*4]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 19
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 21
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 21
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 22
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 22
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 23
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 23
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	ecx, DWORD PTR [rdi+rdi*2]
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	shl	ecx, 3
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 25
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 3
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 25
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 26
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 26
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 27
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 27
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 28
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 28
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 29
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 29
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 30
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 30
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 31
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 31
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	mov	ecx, edi
	shl	ecx, 5
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 33				; 00000021H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	mov	eax, ebx
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 5
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	lea	ecx, DWORD PTR [rdi+rdi*8]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 33				; 00000021H
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 34				; 00000022H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 34				; 00000022H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 35				; 00000023H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 35				; 00000023H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 37				; 00000025H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*8]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 37				; 00000025H
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 38				; 00000026H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 38				; 00000026H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 39				; 00000027H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	ecx, DWORD PTR [rdi+rdi*4]
	imul	eax, ebx, 39				; 00000027H
	shl	ecx, 3
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 41				; 00000029H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 3
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 41				; 00000029H
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 42				; 0000002aH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 42				; 0000002aH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 43				; 0000002bH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 43				; 0000002bH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 44				; 0000002cH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 44				; 0000002cH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 45				; 0000002dH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 45				; 0000002dH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 46				; 0000002eH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 46				; 0000002eH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 47				; 0000002fH
	lea	ecx, DWORD PTR [rdi+rdi*2]
	imul	edx, edi, 47				; 0000002fH
	shl	ecx, 4
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 49				; 00000031H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 4
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 49				; 00000031H
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 50				; 00000032H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 50				; 00000032H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 51				; 00000033H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 51				; 00000033H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 52				; 00000034H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 52				; 00000034H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 53				; 00000035H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 53				; 00000035H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 54				; 00000036H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 54				; 00000036H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	edx, edi, 55				; 00000037H
	imul	eax, ebx, 55				; 00000037H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 56				; 00000038H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 56				; 00000038H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 57				; 00000039H
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 57				; 00000039H
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 58				; 0000003aH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 58				; 0000003aH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 59				; 0000003bH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 59				; 0000003bH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 60				; 0000003cH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 60				; 0000003cH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 61				; 0000003dH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 61				; 0000003dH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	imul	edx, edi, 62				; 0000003eH
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	eax, ebx, 62				; 0000003eH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	imul	edx, edi, 63				; 0000003fH
	imul	eax, ebx, 63				; 0000003fH
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	jmp	$LN178@kvz_pixels
$LN26@kvz_pixels:

; 572  :     BLIT_PIXELS_CASE(32)

	movups	xmm0, XMMWORD PTR [r14]
	lea	eax, DWORD PTR [rbx+rbx]
	lea	edx, DWORD PTR [rdi+rdi]
	movups	XMMWORD PTR [rsi], xmm0
	movups	xmm1, XMMWORD PTR [r14+16]
	movups	XMMWORD PTR [rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+r14]
	movups	XMMWORD PTR [rbx+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdi+r14+16]
	movups	XMMWORD PTR [rbx+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	lea	edx, DWORD PTR [rdi+rdi*2]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	lea	edx, DWORD PTR [rdi*4]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	lea	edx, DWORD PTR [rdi+rdi*4]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 7
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rdi+rdi*2]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*2]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 7
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	lea	edx, DWORD PTR [rdi*8]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	lea	edx, DWORD PTR [rdi+rdi*8]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 11
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rdi+rdi*4]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*4]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	lea	ecx, DWORD PTR [rdi+rdi*2]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 11
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	imul	edx, edi, 13
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	mov	ecx, edi
	imul	eax, ebx, 13
	shl	ecx, 4
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 14
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 14
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 15
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 15
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 17
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	mov	eax, ebx
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 4
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 17
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 19
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rdi+rdi*8]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*8]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	lea	ecx, DWORD PTR [rdi+rdi*4]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 19
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 21
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	lea	ecx, DWORD PTR [rdi+rdi*2]
	shl	ecx, 3
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 21
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 22
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 22
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 23
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 23
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 25
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 3
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rcx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 25
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 26
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 26
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 27
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 27
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 28
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 28
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 29
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 29
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 30
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 30
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	imul	edx, edi, 31
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	imul	eax, ebx, 31
	movups	xmm0, XMMWORD PTR [rdx+r14]
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rdx+r14+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	jmp	$LN178@kvz_pixels
$LN25@kvz_pixels:

; 571  :     BLIT_PIXELS_CASE(16)

	movups	xmm0, XMMWORD PTR [r14]
	lea	eax, DWORD PTR [rbx+rbx]
	lea	edx, DWORD PTR [rdi+rdi]
	movups	XMMWORD PTR [rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdi+r14]
	movups	XMMWORD PTR [rbx+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	edx, DWORD PTR [rdi+rdi*2]
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	edx, DWORD PTR [rdi*4]
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	edx, DWORD PTR [rdi+rdi*4]
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx+rbx*4]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	edx, edi, 7
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rdi+rdi*2]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*2]
	add	eax, eax
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	edx, DWORD PTR [rdi*8]
	imul	eax, ebx, 7
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	lea	edx, DWORD PTR [rdi+rdi*8]
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx+rbx*8]
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	edx, edi, 11
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rdi+rdi*4]
	lea	ecx, DWORD PTR [rax+rax]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	lea	eax, DWORD PTR [rbx+rbx*4]
	add	eax, eax
	lea	ecx, DWORD PTR [rdi+rdi*2]
	shl	ecx, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 11
	imul	edx, edi, 13
	movups	XMMWORD PTR [rax+rsi], xmm0
	lea	eax, DWORD PTR [rbx+rbx*2]
	movups	xmm0, XMMWORD PTR [rcx+r14]
	shl	eax, 2
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 13
	imul	edx, edi, 14
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 14
	imul	edx, edi, 15
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm0, XMMWORD PTR [rdx+r14]
	imul	eax, ebx, 15
	movups	XMMWORD PTR [rax+rsi], xmm0
	jmp	$LN178@kvz_pixels
$LN24@kvz_pixels:

; 570  :     BLIT_PIXELS_CASE(8)

	mov	rax, QWORD PTR [r14]
	lea	ecx, DWORD PTR [rbx+rbx]
	mov	QWORD PTR [rsi], rax
	mov	rax, QWORD PTR [rdi+r14]
	mov	QWORD PTR [rbx+rsi], rax
	lea	eax, DWORD PTR [rdi+rdi]
	mov	rax, QWORD PTR [rax+r14]
	mov	QWORD PTR [rcx+rsi], rax
	lea	ecx, DWORD PTR [rbx+rbx*2]
	lea	eax, DWORD PTR [rdi+rdi*2]
	mov	rax, QWORD PTR [rax+r14]
	mov	QWORD PTR [rcx+rsi], rax
	lea	ecx, DWORD PTR [rbx*4]
	lea	eax, DWORD PTR [rdi*4]
	mov	rax, QWORD PTR [rax+r14]
	mov	QWORD PTR [rcx+rsi], rax
	lea	ecx, DWORD PTR [rbx+rbx*4]
	lea	eax, DWORD PTR [rdi+rdi*4]
	mov	rax, QWORD PTR [rax+r14]
	mov	QWORD PTR [rcx+rsi], rax
	lea	eax, DWORD PTR [rdi+rdi*2]
	lea	edx, DWORD PTR [rax+rax]
	lea	eax, DWORD PTR [rbx+rbx*2]
	lea	ecx, DWORD PTR [rax+rax]
	mov	rax, QWORD PTR [rdx+r14]
	mov	QWORD PTR [rcx+rsi], rax
	imul	eax, edi, 7
	imul	ecx, ebx, 7
	mov	rax, QWORD PTR [rax+r14]
	mov	QWORD PTR [rcx+rsi], rax
	jmp	SHORT $LN178@kvz_pixels
$LN23@kvz_pixels:

; 569  :     BLIT_PIXELS_CASE(4)

	mov	eax, DWORD PTR [r14]
	lea	ecx, DWORD PTR [rbx+rbx]
	mov	DWORD PTR [rsi], eax
	mov	eax, DWORD PTR [rdi+r14]
	mov	DWORD PTR [rbx+rsi], eax
	lea	eax, DWORD PTR [rdi+rdi]
	mov	eax, DWORD PTR [rax+r14]
	mov	DWORD PTR [rcx+rsi], eax
	lea	eax, DWORD PTR [rdi+rdi*2]
	lea	ecx, DWORD PTR [rbx+rbx*2]
	mov	eax, DWORD PTR [rax+r14]
	mov	DWORD PTR [rcx+rsi], eax
$LN178@kvz_pixels:
	mov	rbp, QWORD PTR [rsp+64]
$LN5@kvz_pixels:

; 585  :     }
; 586  :     break;
; 587  :   }
; 588  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
kvz_pixels_blit ENDP
_TEXT	ENDS
END
