; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_malloc:PROC
EXTRN	__imp_round:PROC
EXTRN	__imp_log2:PROC
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
kvz_gop_ra8 DQ	03ff0000000000000r		; 1
	DB	00H
	DB	08H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	03H
	DB	08H
	DB	0cH
	DB	010H
	ORG $+2
	ORG $+13
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DB	03H
	DB	04H
	DB	02H
	DB	01H
	DB	01H
	DB	04H
	ORG $+15
	DB	02H
	DB	04H
	DB	08H
	ORG $+2
	ORG $+14
	DQ	0c019000000000000r		; -6.25
	DQ	03fd0000000000000r		; 0.25
	DQ	03ff0000000000000r		; 1
	DB	04H
	DB	02H
	DB	03H
	DB	01H
	DB	02H
	DB	02H
	DB	06H
	ORG $+14
	DB	02H
	DB	02H
	DB	06H
	ORG $+2
	ORG $+14
	DQ	0c019000000000000r		; -6.25
	DQ	03fd0000000000000r		; 0.25
	DQ	03ff0000000000000r		; 1
	DB	08H
	DB	01H
	DB	04H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	07H
	ORG $+13
	DB	01H
	DB	01H
	ORG $+2
	ORG $+15
	DQ	0c01c000000000000r		; -7
	DQ	03fcf5c28f5c28f5cr		; 0.245
	DQ	03ff0000000000000r		; 1
	DB	08H
	DB	03H
	DB	04H
	DB	00H
	DB	02H
	DB	01H
	DB	05H
	ORG $+14
	DB	02H
	DB	01H
	DB	03H
	ORG $+2
	ORG $+14
	DQ	0c01c000000000000r		; -7
	DQ	03fcf5c28f5c28f5cr		; 0.245
	DQ	03ff0000000000000r		; 1
	DB	04H
	DB	06H
	DB	03H
	DB	01H
	DB	01H
	DB	02H
	ORG $+15
	DB	02H
	DB	02H
	DB	06H
	ORG $+2
	ORG $+14
	DQ	0c019000000000000r		; -6.25
	DQ	03fd0000000000000r		; 0.25
	DQ	03ff0000000000000r		; 1
	DB	08H
	DB	05H
	DB	04H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	ORG $+14
	DB	02H
	DB	01H
	DB	05H
	ORG $+2
	ORG $+14
	DQ	0c01c000000000000r		; -7
	DQ	03fcf5c28f5c28f5cr		; 0.245
	DQ	03ff0000000000000r		; 1
	DB	08H
	DB	07H
	DB	04H
	DB	00H
	DB	01H
	DB	01H
	ORG $+15
	DB	03H
	DB	01H
	DB	03H
	DB	07H
	ORG $+2
	ORG $+13
	DQ	0c01c000000000000r		; -7
	DQ	03fcf5c28f5c28f5cr		; 0.245
kvz_gop_ra16 DQ	03ff0000000000000r		; 1
	DB	01H
	DB	010H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	03H
	DB	010H
	DB	018H
	DB	020H
	ORG $+2
	ORG $+13
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DB	01H
	DB	08H
	DB	02H
	DB	01H
	DB	01H
	DB	08H
	ORG $+15
	DB	02H
	DB	08H
	DB	010H
	ORG $+2
	ORG $+14
	DQ	0c0138a0902de00d2r		; -4.8848
	DQ	03fca617c1bda511ar		; 0.2061
	DQ	03ff0000000000000r		; 1
	DB	04H
	DB	04H
	DB	03H
	DB	01H
	DB	02H
	DB	04H
	DB	0cH
	ORG $+14
	DB	02H
	DB	04H
	DB	0cH
	ORG $+2
	ORG $+14
	DQ	0c016fd8adab9f55ar		; -5.7476
	DQ	03fcd42c3c9eecbfbr		; 0.2286
	DQ	03ff0000000000000r		; 1
	DB	05H
	DB	02H
	DB	04H
	DB	01H
	DB	03H
	DB	02H
	DB	06H
	DB	0eH
	ORG $+13
	DB	02H
	DB	02H
	DB	0aH
	ORG $+2
	ORG $+14
	DQ	0c01799999999999ar		; -5.9
	DQ	03fcddcc63f141206r		; 0.2333
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	01H
	DB	05H
	DB	00H
	DB	04H
	DB	01H
	DB	03H
	DB	07H
	DB	0fH
	ORG $+12
	DB	01H
	DB	01H
	ORG $+2
	ORG $+15
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	03H
	DB	05H
	DB	00H
	DB	03H
	DB	01H
	DB	05H
	DB	0dH
	ORG $+13
	DB	02H
	DB	01H
	DB	03H
	ORG $+2
	ORG $+14
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	05H
	DB	06H
	DB	04H
	DB	01H
	DB	02H
	DB	02H
	DB	0aH
	ORG $+14
	DB	02H
	DB	02H
	DB	06H
	ORG $+2
	ORG $+14
	DQ	0c01799999999999ar		; -5.9
	DQ	03fcddcc63f141206r		; 0.2333
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	05H
	DB	05H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	0bH
	ORG $+13
	DB	02H
	DB	01H
	DB	05H
	ORG $+2
	ORG $+14
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	07H
	DB	05H
	DB	00H
	DB	02H
	DB	01H
	DB	09H
	ORG $+14
	DB	03H
	DB	01H
	DB	03H
	DB	07H
	ORG $+2
	ORG $+13
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	04H
	DB	0cH
	DB	03H
	DB	01H
	DB	01H
	DB	04H
	ORG $+15
	DB	02H
	DB	04H
	DB	0cH
	ORG $+2
	ORG $+14
	DQ	0c016fd8adab9f55ar		; -5.7476
	DQ	03fcd42c3c9eecbfbr		; 0.2286
	DQ	03ff0000000000000r		; 1
	DB	05H
	DB	0aH
	DB	04H
	DB	01H
	DB	02H
	DB	02H
	DB	06H
	ORG $+14
	DB	02H
	DB	02H
	DB	0aH
	ORG $+2
	ORG $+14
	DQ	0c01799999999999ar		; -5.9
	DQ	03fcddcc63f141206r		; 0.2333
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	09H
	DB	05H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	07H
	ORG $+13
	DB	02H
	DB	01H
	DB	09H
	ORG $+2
	ORG $+14
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	0bH
	DB	05H
	DB	00H
	DB	02H
	DB	01H
	DB	05H
	ORG $+14
	DB	03H
	DB	01H
	DB	03H
	DB	0bH
	ORG $+2
	ORG $+13
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	05H
	DB	0eH
	DB	04H
	DB	01H
	DB	01H
	DB	02H
	ORG $+15
	DB	03H
	DB	02H
	DB	06H
	DB	0eH
	ORG $+2
	ORG $+13
	DQ	0c01799999999999ar		; -5.9
	DQ	03fcddcc63f141206r		; 0.2333
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	0dH
	DB	05H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	ORG $+14
	DB	03H
	DB	01H
	DB	05H
	DB	0dH
	ORG $+2
	ORG $+13
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
	DQ	03ff0000000000000r		; 1
	DB	06H
	DB	0fH
	DB	05H
	DB	00H
	DB	01H
	DB	01H
	ORG $+15
	DB	04H
	DB	01H
	DB	03H
	DB	07H
	DB	0fH
	ORG $+2
	ORG $+12
	DQ	0c01c93dd97f62b6br		; -7.1444
	DQ	03fd3333333333333r		; 0.3
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294958087
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294958086
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294958085
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294958084
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294958083
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294958082
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294958081
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294958080
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294958079
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294958078
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294958077
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294958076
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294958075
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294958074
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294958073
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294958072
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294958071
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294958070
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294958069
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294958068
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294958067
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294958066
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294958065
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294958064
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294958063
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294958062
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294958061
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294958060
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294958059
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294958058
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294958057
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294958056
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294958055
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294958054
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294958053
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294958052
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294958051
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294958050
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294958049
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294958048
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294958047
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294958046
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294958045
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294958044
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294958043
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294958042
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294958041
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294958040
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294958039
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294958038
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294958037
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294958036
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294958035
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294958034
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294958033
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294958032
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294958031
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294958030
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294958029
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294958028
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294958027
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294958026
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294958025
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
ERP_AQP_STRENGTH DQ 04008000000000000r		; 3
kvz_gop_lowdelay4 DQ 03ff0000000000000r		; 1
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	04H
	DB	01H
	DB	05H
	DB	09H
	DB	0dH
	ORG $+2
	ORG $+12
	DQ	0c01a000000000000r		; -6.5
	DQ	03fd09374bc6a7efar		; 0.259
	DQ	03ff0000000000000r		; 1
	DB	04H
	DB	02H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	03H
	DB	01H
	DB	02H
	DB	06H
	DB	0aH
	ORG $+2
	ORG $+12
	DQ	0c01a000000000000r		; -6.5
	DQ	03fd09374bc6a7efar		; 0.259
	DQ	03ff0000000000000r		; 1
	DB	05H
	DB	03H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	03H
	DB	01H
	DB	03H
	DB	07H
	DB	0bH
	ORG $+2
	ORG $+12
	DQ	0c01a000000000000r		; -6.5
	DQ	03fd09374bc6a7efar		; 0.259
	DQ	03ff0000000000000r		; 1
	DB	01H
	DB	04H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+15
	DB	03H
	DB	01H
	DB	04H
	DB	08H
	DB	0cH
	ORG $+2
	ORG $+12
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294958037 DB 'quant', 00H
	ORG $+2
$SG4294958087 DB 'array_checksum', 00H
	ORG $+1
$SG4294958086 DB 'array_md5', 00H
$SG4294958085 DB 'reg_sad', 00H
$SG4294958084 DB 'sad_4x4', 00H
$SG4294958083 DB 'sad_8x8', 00H
$SG4294958082 DB 'sad_16x16', 00H
	ORG $+2
$SG4294958081 DB 'sad_32x32', 00H
$SG4294958080 DB 'sad_64x64', 00H
	ORG $+2
$SG4294958079 DB 'satd_4x4', 00H
	ORG $+2
$SG4294958078 DB 'satd_8x8', 00H
	ORG $+2
$SG4294958077 DB 'satd_16x16', 00H
	ORG $+2
$SG4294958076 DB 'satd_32x32', 00H
	ORG $+2
$SG4294958075 DB 'satd_64x64', 00H
	ORG $+1
$SG4294958074 DB 'satd_any_size', 00H
	ORG $+2
$SG4294958073 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294958072 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294958071 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294958070 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294958069 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294958068 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294958067 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294958066 DB 'satd_16x16_dual', 00H
$SG4294958065 DB 'satd_32x32_dual', 00H
$SG4294958064 DB 'satd_64x64_dual', 00H
$SG4294958063 DB 'satd_any_size_quad', 00H
	ORG $+2
$SG4294958062 DB 'pixels_calc_ssd', 00H
$SG4294958061 DB 'bipred_average', 00H
	ORG $+1
$SG4294958060 DB 'get_optimized_sad', 00H
$SG4294958059 DB 'ver_sad', 00H
$SG4294958058 DB 'hor_sad', 00H
$SG4294958057 DB 'pixel_var', 00H
$SG4294958056 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294958055 DB 'dct_4x4', 00H
$SG4294958054 DB 'dct_8x8', 00H
$SG4294958053 DB 'dct_16x16', 00H
	ORG $+1
$SG4294958052 DB 'dct_32x32', 00H
$SG4294958051 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294958050 DB 'idct_4x4', 00H
	ORG $+2
$SG4294958049 DB 'idct_8x8', 00H
$SG4294958048 DB 'idct_16x16', 00H
	ORG $+2
$SG4294958047 DB 'idct_32x32', 00H
	ORG $+2
$SG4294958046 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294958045 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294958044 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294958043 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294958042 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294958041 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294958040 DB 'sample_quarterpel_luma_hi', 00H
$SG4294958039 DB 'sample_octpel_chroma_hi', 00H
$SG4294958038 DB 'get_extended_block', 00H
	ORG $+2
$SG4294958036 DB 'quantize_residual', 00H
	ORG $+2
$SG4294958035 DB 'dequant', 00H
$SG4294958034 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294958033 DB 'fast_coeff_cost', 00H
$SG4294958032 DB 'angular_pred', 00H
	ORG $+3
$SG4294958031 DB 'intra_pred_planar', 00H
$SG4294958030 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294958029 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294958028 DB 'calc_sao_edge_dir', 00H
	ORG $+2
$SG4294958027 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294958026 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294958025 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_encoder_control_input_init
PUBLIC	kvz_encoder_control_init
PUBLIC	kvz_encoder_control_free
pdata	SEGMENT
$pdata$encoder_control_init_gop_layer_weights DD imagerel encoder_control_init_gop_layer_weights
	DD	imagerel encoder_control_init_gop_layer_weights+143
	DD	imagerel $unwind$encoder_control_init_gop_layer_weights
$pdata$0$encoder_control_init_gop_layer_weights DD imagerel encoder_control_init_gop_layer_weights+143
	DD	imagerel encoder_control_init_gop_layer_weights+306
	DD	imagerel $chain$0$encoder_control_init_gop_layer_weights
$pdata$1$encoder_control_init_gop_layer_weights DD imagerel encoder_control_init_gop_layer_weights+306
	DD	imagerel encoder_control_init_gop_layer_weights+1274
	DD	imagerel $chain$1$encoder_control_init_gop_layer_weights
$pdata$kvz_encoder_control_input_init DD imagerel $LN11
	DD	imagerel $LN11+242
	DD	imagerel $unwind$kvz_encoder_control_input_init
$pdata$init_erp_aqp_roi DD imagerel init_erp_aqp_roi
	DD	imagerel init_erp_aqp_roi+460
	DD	imagerel $unwind$init_erp_aqp_roi
$pdata$2$init_erp_aqp_roi DD imagerel init_erp_aqp_roi+460
	DD	imagerel init_erp_aqp_roi+1023
	DD	imagerel $chain$2$init_erp_aqp_roi
$pdata$3$init_erp_aqp_roi DD imagerel init_erp_aqp_roi+1023
	DD	imagerel init_erp_aqp_roi+1087
	DD	imagerel $chain$3$init_erp_aqp_roi
$pdata$get_max_parallelism DD imagerel get_max_parallelism
	DD	imagerel get_max_parallelism+144
	DD	imagerel $unwind$get_max_parallelism
$pdata$4$get_max_parallelism DD imagerel get_max_parallelism+144
	DD	imagerel get_max_parallelism+368
	DD	imagerel $chain$4$get_max_parallelism
$pdata$5$get_max_parallelism DD imagerel get_max_parallelism+368
	DD	imagerel get_max_parallelism+393
	DD	imagerel $chain$5$get_max_parallelism
$pdata$kvz_math_ceil_log2 DD imagerel kvz_math_ceil_log2
	DD	imagerel kvz_math_ceil_log2+192
	DD	imagerel $unwind$kvz_math_ceil_log2
$pdata$kvz_math_floor_log2 DD imagerel kvz_math_floor_log2
	DD	imagerel kvz_math_floor_log2+142
	DD	imagerel $unwind$kvz_math_floor_log2
$pdata$kvz_encoder_control_init DD imagerel $LN547
	DD	imagerel $LN547+2036
	DD	imagerel $unwind$kvz_encoder_control_init
$pdata$1$kvz_encoder_control_init DD imagerel $LN547+2036
	DD	imagerel $LN547+2306
	DD	imagerel $chain$1$kvz_encoder_control_init
$pdata$2$kvz_encoder_control_init DD imagerel $LN547+2306
	DD	imagerel $LN547+5399
	DD	imagerel $chain$2$kvz_encoder_control_init
$pdata$kvz_encoder_control_free DD imagerel $LN59
	DD	imagerel $LN59+21
	DD	imagerel $unwind$kvz_encoder_control_free
$pdata$2$kvz_encoder_control_free DD imagerel $LN59+21
	DD	imagerel $LN59+43
	DD	imagerel $chain$2$kvz_encoder_control_free
$pdata$6$kvz_encoder_control_free DD imagerel $LN59+43
	DD	imagerel $LN59+544
	DD	imagerel $chain$6$kvz_encoder_control_free
$pdata$7$kvz_encoder_control_free DD imagerel $LN59+544
	DD	imagerel $LN59+660
	DD	imagerel $chain$7$kvz_encoder_control_free
$pdata$8$kvz_encoder_control_free DD imagerel $LN59+660
	DD	imagerel $LN59+661
	DD	imagerel $chain$8$kvz_encoder_control_free
xdata	SEGMENT
$unwind$encoder_control_init_gop_layer_weights DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
$chain$0$encoder_control_init_gop_layer_weights DD 020521H
	DD	026805H
	DD	imagerel encoder_control_init_gop_layer_weights
	DD	imagerel encoder_control_init_gop_layer_weights+143
	DD	imagerel $unwind$encoder_control_init_gop_layer_weights
$chain$1$encoder_control_init_gop_layer_weights DD 021H
	DD	imagerel encoder_control_init_gop_layer_weights
	DD	imagerel encoder_control_init_gop_layer_weights+143
	DD	imagerel $unwind$encoder_control_init_gop_layer_weights
$unwind$kvz_encoder_control_input_init DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$init_erp_aqp_roi DD 0199001H
	DD	05f890H
	DD	07d88aH
	DD	08c865H
	DD	09b85dH
	DD	0b9850H
	DD	0c8844H
	DD	0d783aH
	DD	0e6833H
	DD	020011cH
	DD	0e013f015H
	DD	0700fd011H
	DD	0500d600eH
	DD	0300cH
$chain$2$init_erp_aqp_roi DD 062221H
	DD	06e822H
	DD	0aa816H
	DD	01fc408H
	DD	imagerel init_erp_aqp_roi
	DD	imagerel init_erp_aqp_roi+460
	DD	imagerel $unwind$init_erp_aqp_roi
$chain$3$init_erp_aqp_roi DD 021H
	DD	imagerel init_erp_aqp_roi
	DD	imagerel init_erp_aqp_roi+460
	DD	imagerel $unwind$init_erp_aqp_roi
$unwind$get_max_parallelism DD 040a01H
	DD	0e006120aH
	DD	05002d004H
$chain$4$get_max_parallelism DD 0a2921H
	DD	0f429H
	DD	01c425H
	DD	09741dH
	DD	086410H
	DD	073405H
	DD	imagerel get_max_parallelism
	DD	imagerel get_max_parallelism+144
	DD	imagerel $unwind$get_max_parallelism
$chain$5$get_max_parallelism DD 021H
	DD	imagerel get_max_parallelism
	DD	imagerel get_max_parallelism+144
	DD	imagerel $unwind$get_max_parallelism
$unwind$kvz_math_ceil_log2 DD 020601H
	DD	030023206H
$unwind$kvz_math_floor_log2 DD 020601H
	DD	030023206H
$unwind$kvz_encoder_control_init DD 091501H
	DD	0f011e215H
	DD	0d00de00fH
	DD	07009c00bH
	DD	050076008H
	DD	03006H
$chain$1$kvz_encoder_control_init DD 041521H
	DD	057815H
	DD	066805H
	DD	imagerel $LN547
	DD	imagerel $LN547+2036
	DD	imagerel $unwind$kvz_encoder_control_init
$chain$2$kvz_encoder_control_init DD 021H
	DD	imagerel $LN547
	DD	imagerel $LN547+2036
	DD	imagerel $unwind$kvz_encoder_control_init
$unwind$kvz_encoder_control_free DD 021501H
	DD	050119215H
$chain$2$kvz_encoder_control_free DD 061621H
	DD	087416H
	DD	096412H
	DD	0e3404H
	DD	imagerel $LN59
	DD	imagerel $LN59+21
	DD	imagerel $unwind$kvz_encoder_control_free
$chain$6$kvz_encoder_control_free DD 081021H
	DD	04f410H
	DD	05e40cH
	DD	06d408H
	DD	07c404H
	DD	imagerel $LN59+21
	DD	imagerel $LN59+43
	DD	imagerel $chain$2$kvz_encoder_control_free
$chain$7$kvz_encoder_control_free DD 040021H
	DD	04f400H
	DD	05e400H
	DD	imagerel $LN59+21
	DD	imagerel $LN59+43
	DD	imagerel $chain$2$kvz_encoder_control_free
$chain$8$kvz_encoder_control_free DD 021H
	DD	imagerel $LN59
	DD	imagerel $LN59+21
	DD	imagerel $unwind$kvz_encoder_control_free
$SG4294958012 DB 'rb', 00H
	ORG $+3
$SG4294958014 DB 'rb', 00H
	ORG $+6
$SG4294957996 DB 'Unsupported number of GOP layers (%d)', 0aH, 00H
	ORG $+6
$SG4294957997 DB 'Rate control: Using experimental weights for GOP layers'
	DB	' (%d)', 0aH, 00H
	ORG $+2
$SG4294957998 DB 'Unsupported amount of layers (%d) for lowdelay GOP', 0aH
	DB	00H
$SG4294958015 DB 00H, 01H, 02H, 03H, 00H
	ORG $+6
$SG4294958010 DB 'Failed to parse fast coeff table, using default', 0aH, 00H
	ORG $+6
$SG4294958011 DB 'Could not open fast coeff table file.', 0aH, 00H
	ORG $+6
$SG4294958016 DB 'Could not initialize threadqueue.', 0aH, 00H
	ORG $+6
$SG4294958017 DB '--threads=auto value set to %d.', 0aH, 00H
	ORG $+7
$SG4294957999 DB 'W', 00H, 'I', 00H, 'T', 00H, 'H', 00H, 'I', 00H, 'N', 00H
	DB	'(', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'p', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, '.', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, ',', 00H, ' ', 00H, 'P', 00H
	DB	'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'H'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, ',', 00H, ' ', 00H, 'P'
	DB	00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H
	DB	'H', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG4294958000 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294958001 DB 'W', 00H, 'I', 00H, 'T', 00H, 'H', 00H, 'I', 00H, 'N', 00H
	DB	'(', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'p', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, '.', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, ',', 00H, ' ', 00H, 'P', 00H
	DB	'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'H'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, ',', 00H, ' ', 00H, 'P'
	DB	00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H
	DB	'H', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG4294958002 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294958003 DB 'W', 00H, 'I', 00H, 'T', 00H, 'H', 00H, 'I', 00H, 'N', 00H
	DB	'(', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'p', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, ',', 00H, ' ', 00H, 'P', 00H
	DB	'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'H'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H
	DB	'_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, ',', 00H, ' ', 00H, 'P'
	DB	00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H
	DB	'H', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG4294958004 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
	ORG $+4
$SG4294958005 DB 'W', 00H, 'I', 00H, 'T', 00H, 'H', 00H, 'I', 00H, 'N', 00H
	DB	'(', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'p', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, ',', 00H, ' ', 00H, 'P', 00H
	DB	'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H, 'H'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H
	DB	'_', 00H, 'M', 00H, 'I', 00H, 'N', 00H, ',', 00H, ' ', 00H, 'P'
	DB	00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H, 'T', 00H
	DB	'H', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG4294958006 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
$SG4294958007 DB 'Too many tiles (height)!', 0aH, 00H
	ORG $+1
$SG4294958008 DB 'Too many tiles (width)!', 0aH, 00H
	ORG $+7
$SG4294958013 DB 'Could not open CQM file.', 0aH, 00H
	ORG $+6
$SG4294958018 DB '--owf=auto value set to %d.', 0aH, 00H
	ORG $+3
$SG4294958019 DB 'Failed to allocate encoder control.', 0aH, 00H
	ORG $+3
$SG4294958009 DB 'No output file defined for Fast RD sampling or accuracy'
	DB	' check.', 0aH, 00H
$SG4294958020 DB 'Config object must not be null!', 0aH, 00H
	ORG $+1
$SG4294958021 DB 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG4294958022 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H
	DB	'v', 00H, 'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294958023 DB 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+7
$SG4294958024 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H
	DB	'v', 00H, 'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rdo.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rdo.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
encoder$ = 96
tv644 = 104
kvz_encoder_control_free PROC

; 709  : {

$LN59:

; 710  :   if (!encoder) return;

	test	rcx, rcx
	je	$LN56@kvz_encode

; 709  : {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	sub	rsp, 80					; 00000050H

; 711  : 
; 712  :   //Slices
; 713  :   FREE_POINTER(encoder->slice_addresses_in_ts);

	mov	QWORD PTR [rax+24], rbx
	mov	rbp, rcx
	mov	rcx, QWORD PTR [rcx+6440]
	mov	QWORD PTR [rax-16], rsi
	mov	QWORD PTR [rax-24], rdi
	mov	QWORD PTR [rax-32], r12
	mov	QWORD PTR [rax-40], r13
	mov	QWORD PTR [rax-48], r14
	mov	QWORD PTR [rax-56], r15
	call	QWORD PTR __imp_free

; 714  : 
; 715  :   //Tiles
; 716  :   FREE_POINTER(encoder->tiles_col_width);

	mov	rcx, QWORD PTR [rbp+6376]
	xor	r14d, r14d
	mov	QWORD PTR [rbp+6440], r14
	call	QWORD PTR __imp_free

; 717  :   FREE_POINTER(encoder->tiles_row_height);

	mov	rcx, QWORD PTR [rbp+6384]
	mov	QWORD PTR [rbp+6376], r14
	call	QWORD PTR __imp_free

; 718  : 
; 719  :   FREE_POINTER(encoder->tiles_col_bd);

	mov	rcx, QWORD PTR [rbp+6392]
	mov	QWORD PTR [rbp+6384], r14
	call	QWORD PTR __imp_free

; 720  :   FREE_POINTER(encoder->tiles_row_bd);

	mov	rcx, QWORD PTR [rbp+6400]
	mov	QWORD PTR [rbp+6392], r14
	call	QWORD PTR __imp_free

; 721  : 
; 722  :   FREE_POINTER(encoder->tiles_ctb_addr_rs_to_ts);

	mov	rcx, QWORD PTR [rbp+6408]
	mov	QWORD PTR [rbp+6400], r14
	call	QWORD PTR __imp_free

; 723  :   FREE_POINTER(encoder->tiles_ctb_addr_ts_to_rs);

	mov	rcx, QWORD PTR [rbp+6416]
	mov	QWORD PTR [rbp+6408], r14
	call	QWORD PTR __imp_free

; 724  : 
; 725  :   FREE_POINTER(encoder->tiles_tile_id);

	mov	rcx, QWORD PTR [rbp+6424]
	mov	QWORD PTR [rbp+6416], r14
	call	QWORD PTR __imp_free

; 726  : 
; 727  :   FREE_POINTER(encoder->cfg.roi.dqps);

	mov	rcx, QWORD PTR [rbp+2432]
	mov	QWORD PTR [rbp+6424], r14
	call	QWORD PTR __imp_free

; 728  :   FREE_POINTER(encoder->cfg.optional_key);

	mov	rcx, QWORD PTR [rbp+2376]
	mov	QWORD PTR [rbp+2432], r14
	call	QWORD PTR __imp_free
	lea	r13, OFFSET FLAT:kvz_g_scaling_list_num
	mov	QWORD PTR [rbp+2376], r14
	mov	QWORD PTR tv644[rsp], r13
	mov	r15d, r14d
	mov	r12d, r14d
$LL7@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 129  :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	cmp	BYTE PTR [r13], 0
	mov	ebx, r14d
	jbe	$LN5@kvz_encode
	npad	1
$LL10@kvz_encode:
	mov	r13, QWORD PTR encoder$[rsp]
	mov	rsi, r14

; 130  :       for (qp = 0; qp < 6; qp++) {

	mov	r14d, 6
	npad	2
$LL13@kvz_encode:

; 131  :         if (!(sizeId == 3 && listId == 3)) {

	cmp	r15d, 3
	jne	SHORT $LN15@kvz_encode
	cmp	ebx, r15d
	jne	SHORT $LN15@kvz_encode

; 134  :           FREE_POINTER(scaling_list->error_scale[sizeId][listId][qp]);

	mov	ebp, ebx
	jmp	SHORT $LN11@kvz_encode
$LN15@kvz_encode:

; 132  :           FREE_POINTER(scaling_list->quant_coeff[sizeId][listId][qp]);

	mov	ebp, ebx
	lea	rax, QWORD PTR [r12+rbp]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rdi, QWORD PTR [rsi+rcx*2]
	mov	rcx, QWORD PTR [r13+rdi*8+2912]
	call	QWORD PTR __imp_free

; 133  :           FREE_POINTER(scaling_list->de_quant_coeff[sizeId][listId][qp]);

	mov	rcx, QWORD PTR [r13+rdi*8+4064]
	mov	QWORD PTR [r13+rdi*8+2912], 0
	call	QWORD PTR __imp_free

; 134  :           FREE_POINTER(scaling_list->error_scale[sizeId][listId][qp]);

	mov	rcx, QWORD PTR [r13+rdi*8+5216]
	mov	QWORD PTR [r13+rdi*8+4064], 0
	call	QWORD PTR __imp_free
	mov	QWORD PTR [r13+rdi*8+5216], 0
$LN11@kvz_encode:

; 130  :       for (qp = 0; qp < 6; qp++) {

	inc	rsi
	sub	r14, 1
	jne	SHORT $LL13@kvz_encode

; 135  :         }
; 136  :       }
; 137  :       FREE_POINTER(scaling_list->scaling_list_coeff[sizeId][listId]);

	lea	rax, QWORD PTR [r12+rbp]
	lea	rdi, QWORD PTR [rax*8]
	mov	rcx, QWORD PTR [rdi+r13+2720]
	call	QWORD PTR __imp_free
	mov	QWORD PTR [rdi+r13+2720], r14
	inc	ebx
	mov	r13, QWORD PTR tv644[rsp]
	movzx	eax, BYTE PTR [r13]
	cmp	ebx, eax
	jb	$LL10@kvz_encode
$LN5@kvz_encode:

; 128  :   for (sizeId = 0; sizeId < 4; sizeId++) {

	inc	r13
	inc	r15d
	add	r12, 6
	mov	QWORD PTR tv644[rsp], r13
	cmp	r15d, 4
	jb	$LL7@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 732  :   kvz_threadqueue_free(encoder->threadqueue);

	mov	rbp, QWORD PTR encoder$[rsp]
	mov	rcx, QWORD PTR [rbp+6448]
	call	kvz_threadqueue_free
	mov	r13, QWORD PTR [rsp+48]
	lea	r15, OFFSET FLAT:__ImageBase
	mov	r12, QWORD PTR [rsp+56]
	mov	rbx, r14

; 733  :   encoder->threadqueue = NULL;

	mov	QWORD PTR [rbp+6448], r14
	npad	1
$LL20@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\rdo.c

; 1185 :     FILE *curr = fastrd_learning_outfile[i];

	mov	rcx, QWORD PTR fastrd_learning_outfile[rbx+r15]

; 1186 :     pthread_mutex_t *curr_mtx = outfile_mutex + i;
; 1187 :     if (curr != NULL) {

	test	rcx, rcx
	je	SHORT $LN21@kvz_encode

; 1188 :       fclose(curr);

	call	QWORD PTR __imp_fclose
$LN21@kvz_encode:

; 1189 :     }
; 1190 :     if (curr_mtx != NULL) {

	lea	rdi, QWORD PTR outfile_mutex[r15]
	add	rdi, rbx
	je	SHORT $LN18@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rsi, QWORD PTR [rdi]
	test	rsi, rsi
	je	SHORT $LN29@kvz_encode
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rsi
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rsi
	call	??3@YAXPEAX_K@Z				; operator delete
$LN29@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rdi], r14
$LN18@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\rdo.c

; 1184 :   for (i = 0; i < RD_SAMPLING_MAX_LAST_QP; i++) {

	add	rbx, 8
	cmp	rbx, 400				; 00000190H
	jl	SHORT $LL20@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 737  :   free(encoder);

	mov	rcx, rbp
	call	QWORD PTR __imp_free
	mov	r15, QWORD PTR [rsp+32]
	mov	r14, QWORD PTR [rsp+40]
	mov	rdi, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+112]

; 738  : }

	add	rsp, 80					; 00000050H
	pop	rbp
$LN56@kvz_encode:
	ret	0
kvz_encoder_control_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\fast_coeff_cost.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
tiles_tile_id$1$ = 48
encoder$1$ = 48
tv7341 = 56
tiles_ctb_addr_ts_to_rs$1$ = 64
curr_wts$1 = 64
cfg$ = 192
sizeId$1$ = 200
tiles_col_bd$1$ = 200
tiles_row_bd$1$ = 208
tv7308 = 208
tiles_ctb_addr_rs_to_ts$1$ = 216
tv7301 = 216
kvz_encoder_control_init PROC

; 222  : {

$LN547:
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 120				; 00000078H

; 223  :   encoder_control_t *encoder = NULL;

	xor	r13d, r13d
	mov	rbp, rcx
	mov	edi, r13d

; 224  : 
; 225  :   if (!cfg) {

	test	rcx, rcx
	jne	SHORT $LN68@kvz_encode

; 226  :     fprintf(stderr, "Config object must not be null!\n");

	lea	ecx, QWORD PTR [rbp+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958020
$LN545@kvz_encode:

; 699  : 
; 700  : init_failed:
; 701  :   kvz_encoder_control_free(encoder);

	call	fprintf
$init_failed$548:
	mov	rcx, rdi
	call	kvz_encoder_control_free

; 702  :   return NULL;

	xor	eax, eax
$LN1@kvz_encode:

; 703  : }

	add	rsp, 120				; 00000078H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN68@kvz_encode:

; 227  :     goto init_failed;
; 228  :   }
; 229  : 
; 230  :   // Make sure that the parameters make sense.
; 231  :   if (!kvz_config_validate(cfg)) {

	call	kvz_config_validate
	test	eax, eax
	je	SHORT $init_failed$548

; 232  :     goto init_failed;
; 233  :   }
; 234  : 
; 235  :   encoder = calloc(1, sizeof(encoder_control_t));

	mov	r15d, 1
	mov	edx, 6944				; 00001b20H
	mov	ecx, r15d
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR encoder$1$[rsp], rax
	mov	rdi, rax

; 236  :   if (!encoder) {

	test	rax, rax
	jne	SHORT $LN70@kvz_encode

; 237  :     fprintf(stderr, "Failed to allocate encoder control.\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958019

; 238  :     goto init_failed;

	jmp	SHORT $LN545@kvz_encode
$LN70@kvz_encode:

; 239  :   }
; 240  : 
; 241  :   // Take a copy of the config.
; 242  :   memcpy(&encoder->cfg, cfg, sizeof(encoder->cfg));

	mov	rcx, rdi
	mov	rdx, rbp
	mov	r8d, 2528				; 000009e0H
	call	memcpy

; 243  :   // Set fields that are not copied to NULL.
; 244  :   encoder->cfg.cqmfile = NULL;
; 245  :   encoder->cfg.tiles_width_split = NULL;
; 246  :   encoder->cfg.tiles_height_split = NULL;
; 247  :   encoder->cfg.slice_addresses_in_ts = NULL;
; 248  :   encoder->cfg.fast_coeff_table_fn = NULL;
; 249  : 
; 250  :   if (encoder->cfg.gop_len > 0) {

	movzx	edx, BYTE PTR [rdi+300]
	mov	r14d, 2
	mov	QWORD PTR [rdi+136], r13
	movzx	eax, dl
	mov	QWORD PTR [rdi+152], r13
	movzx	r10d, dl
	mov	QWORD PTR [rdi+160], r13
	mov	QWORD PTR [rdi+184], r13
	mov	QWORD PTR [rdi+2504], r13
	test	dl, dl
	jle	$LN74@kvz_encode

; 251  :     if (encoder->cfg.gop_lowdelay) {

	cmp	BYTE PTR [rdi+301], r13b
	je	$LN74@kvz_encode

; 252  :       if (encoder->cfg.gop_len == 4 && encoder->cfg.ref_frames == 4) {

	cmp	dl, 4
	jne	SHORT $LN73@kvz_encode
	cmp	DWORD PTR [rdi+128], 4
	jne	SHORT $LN73@kvz_encode

; 253  :         memcpy(encoder->cfg.gop, kvz_gop_lowdelay4, sizeof(kvz_gop_lowdelay4));

	lea	rax, QWORD PTR [rdi+304]
	mov	r8d, r14d
	lea	rcx, OFFSET FLAT:kvz_gop_lowdelay4
$LL542@kvz_encode:
	lea	rax, QWORD PTR [rax+128]
	movups	xmm0, XMMWORD PTR [rcx]
	movups	xmm1, XMMWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [rcx+128]
	movups	XMMWORD PTR [rax-128], xmm0
	movups	xmm0, XMMWORD PTR [rcx-96]
	movups	XMMWORD PTR [rax-112], xmm1
	movups	xmm1, XMMWORD PTR [rcx-80]
	movups	XMMWORD PTR [rax-96], xmm0
	movups	xmm0, XMMWORD PTR [rcx-64]
	movups	XMMWORD PTR [rax-80], xmm1
	movups	xmm1, XMMWORD PTR [rcx-48]
	movups	XMMWORD PTR [rax-64], xmm0
	movups	xmm0, XMMWORD PTR [rcx-32]
	movups	XMMWORD PTR [rax-48], xmm1
	movups	xmm1, XMMWORD PTR [rcx-16]
	movups	XMMWORD PTR [rax-32], xmm0
	movups	XMMWORD PTR [rax-16], xmm1
	sub	r8, r15
	jne	SHORT $LL542@kvz_encode
	mov	al, 4

; 254  :       } else {

	jmp	SHORT $LN74@kvz_encode
$LN73@kvz_encode:

; 255  :         kvz_config_process_lp_gop(&encoder->cfg);

	mov	rcx, rdi
	call	kvz_config_process_lp_gop
	movzx	eax, BYTE PTR [rdi+300]
	movzx	r10d, al
$LN74@kvz_encode:

; 256  :       }
; 257  :     }
; 258  :   } 
; 259  :   
; 260  :   if( encoder->cfg.intra_qp_offset_auto ) {

	mov	ebx, 4
	lea	r12d, QWORD PTR [rbx+4]
	cmp	BYTE PTR [rdi+2461], r13b
	je	$LN75@kvz_encode

; 262  :     encoder->cfg.intra_qp_offset = encoder->cfg.gop_len > 1 ? MAX(-(int8_t)kvz_math_ceil_log2( encoder->cfg.gop_len ) + 1, -3) : 0;

	cmp	al, r15b
	jle	$LN141@kvz_encode
	movsx	r9d, al
	mov	rsi, r15
	rol	rsi, 4
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	ebp, r15d
	mov	ecx, esi
	mov	eax, r13d
	shl	ebp, cl

; 53   :     value >>= shift;

	mov	r8d, r9d
	cmp	r9d, ebp
	cmovae	eax, esi
	mov	ecx, eax
	shr	r8d, cl
	mov	ecx, r13d
	cmp	r8d, 256				; 00000100H
	cmovae	ecx, r12d
	shr	r8d, cl
	cmp	r8d, 16
	lea	edx, DWORD PTR [rcx+rax]
	mov	eax, r13d
	mov	ecx, r13d
	cmovae	ecx, ebx
	add	edx, ecx
	shr	r8d, cl
	cmp	r8d, ebx
	mov	ecx, r13d
	cmovae	ecx, r14d
	shr	r8d, cl
	cmp	r8d, r14d
	setae	al
	add	eax, ecx
	add	edx, eax

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	lea	eax, DWORD PTR [r9-1]
	test	eax, r9d
	setne	al
	add	al, dl
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 262  :     encoder->cfg.intra_qp_offset = encoder->cfg.gop_len > 1 ? MAX(-(int8_t)kvz_math_ceil_log2( encoder->cfg.gop_len ) + 1, -3) : 0;

	movsx	ecx, al
	mov	eax, r15d
	sub	eax, ecx
	cmp	eax, -3
	jle	$LN139@kvz_encode
	movsx	ebx, r10b
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 61   :   assert(value > 0);

	test	r10b, r10b
	jne	SHORT $LN247@kvz_encode
	lea	r8d, QWORD PTR [r12+53]
	lea	rdx, OFFSET FLAT:$SG4294958022
	lea	rcx, OFFSET FLAT:$SG4294958021
	call	QWORD PTR __imp__wassert

; 45   :   assert(value > 0);

	lea	r8d, QWORD PTR [r12+37]
	lea	rdx, OFFSET FLAT:$SG4294958024
	lea	rcx, OFFSET FLAT:$SG4294958023
	call	QWORD PTR __imp__wassert
	movzx	r10d, BYTE PTR [rdi+300]
$LN247@kvz_encode:

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	cmp	ebx, ebp
	mov	eax, r13d

; 53   :     value >>= shift;

	mov	edx, ebx
	cmovae	eax, esi
	mov	ecx, eax
	shr	edx, cl
	mov	ecx, r13d
	cmp	edx, 256				; 00000100H
	cmovae	ecx, r12d
	shr	edx, cl
	cmp	edx, 16
	lea	r8d, DWORD PTR [rcx+rax]
	mov	eax, 4
	mov	ecx, r13d
	cmovae	ecx, eax
	add	r8d, ecx
	shr	edx, cl
	cmp	edx, eax
	mov	ecx, r13d
	mov	eax, r13d
	cmovae	ecx, r14d
	add	r8d, ecx
	shr	edx, cl
	cmp	edx, r14d

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	mov	ecx, r15d

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	setae	al

; 52   :     result += shift;

	add	r8d, eax

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	lea	eax, DWORD PTR [rbx-1]
	test	eax, ebx
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 262  :     encoder->cfg.intra_qp_offset = encoder->cfg.gop_len > 1 ? MAX(-(int8_t)kvz_math_ceil_log2( encoder->cfg.gop_len ) + 1, -3) : 0;

	mov	ebx, 4
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	setne	al
	sub	cl, al
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 262  :     encoder->cfg.intra_qp_offset = encoder->cfg.gop_len > 1 ? MAX(-(int8_t)kvz_math_ceil_log2( encoder->cfg.gop_len ) + 1, -3) : 0;

	sub	cl, r8b
	jmp	SHORT $LN142@kvz_encode
$LN139@kvz_encode:
	mov	cl, -3
	jmp	SHORT $LN142@kvz_encode
$LN141@kvz_encode:
	xor	cl, cl
$LN142@kvz_encode:
	mov	BYTE PTR [rdi+2460], cl
$LN75@kvz_encode:

; 263  :   }
; 264  : 
; 265  :   // Disable GOP and QP offset for all-intra coding
; 266  :   if (encoder->cfg.intra_period == 1) {

	cmp	DWORD PTR [rdi+4], r15d
	jne	SHORT $LN76@kvz_encode

; 267  :     encoder->cfg.gop_len = 0;

	mov	BYTE PTR [rdi+300], r13b

; 268  :     encoder->cfg.intra_qp_offset = 0;

	xor	r10b, r10b
	mov	BYTE PTR [rdi+2460], r13b
$LN76@kvz_encode:

; 271  :   encoder->poc_lsb_bits = MAX(4, kvz_math_ceil_log2(encoder->cfg.gop_len * 2 + 1));

	movsx	eax, r10b
	mov	rdx, r15
	rol	rdx, 4
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	r8d, r13d
	mov	ecx, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 273  :   encoder->max_inter_ref_lcu.right = 1;

	mov	DWORD PTR [rdi+6532], r15d

; 274  :   encoder->max_inter_ref_lcu.down  = 1;

	mov	DWORD PTR [rdi+6536], r15d
	lea	r11d, DWORD PTR [rax+rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	eax, r15d
	shl	eax, cl
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 271  :   encoder->poc_lsb_bits = MAX(4, kvz_math_ceil_log2(encoder->cfg.gop_len * 2 + 1));

	lea	r10d, DWORD PTR [r11+1]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	cmp	r10d, eax

; 53   :     value >>= shift;

	mov	r9d, r10d
	cmovae	r8d, edx
	mov	ecx, r8d
	shr	r9d, cl
	mov	ecx, r13d
	cmp	r9d, 256				; 00000100H
	cmovae	ecx, r12d
	xor	r12d, r12d
	shr	r9d, cl
	mov	eax, r12d
	cmp	r9d, 16
	lea	edx, DWORD PTR [rcx+r8]
	mov	ecx, r12d
	cmovae	ecx, ebx
	add	edx, ecx
	shr	r9d, cl
	cmp	r9d, 4
	mov	ecx, r12d
	cmovae	ecx, r14d
	add	edx, ecx
	shr	r9d, cl
	cmp	r9d, r14d
	setae	al

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	test	r10d, r11d

; 52   :     result += shift;

	lea	ecx, DWORD PTR [rax+rdx]

; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	mov	eax, r12d
	setne	al
	add	ecx, eax
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 271  :   encoder->poc_lsb_bits = MAX(4, kvz_math_ceil_log2(encoder->cfg.gop_len * 2 + 1));

	cmp	ecx, 4
	cmovb	ecx, ebx
	mov	DWORD PTR [rdi+6540], ecx

; 275  : 
; 276  :   int max_threads = encoder->cfg.threads;

	mov	ecx, DWORD PTR [rdi+192]
	mov	esi, ecx

; 277  :   if (max_threads < 0) {

	test	ecx, ecx
	jns	SHORT $LN77@kvz_encode

; 60   :   if (kvz_g_hardware_flags.logical_cpu_count == 0) {

	mov	esi, DWORD PTR kvz_g_hardware_flags+48
	test	esi, esi
	cmove	esi, ebx
$LN77@kvz_encode:

; 278  :     max_threads = cfg_num_threads();
; 279  :   }
; 280  :   max_threads = MAX(1, max_threads);

	cmp	esi, r15d
	cmovl	esi, r15d

; 281  : 
; 282  :   // Need to set owf before initializing threadqueue.
; 283  :   if (encoder->cfg.owf < 0) {

	cmp	DWORD PTR [rdi+172], r12d
	jge	SHORT $LN78@kvz_encode

; 284  :     int best_parallelism = 0;
; 285  : 
; 286  :     for (encoder->cfg.owf = 0; true; encoder->cfg.owf++) {
; 287  :       int parallelism = get_max_parallelism(encoder);

	mov	rcx, rdi
	mov	DWORD PTR [rdi+172], r12d
	call	get_max_parallelism
	mov	ebx, r12d

; 288  : 
; 289  :       if (parallelism <= best_parallelism) {

	test	eax, eax
	jle	SHORT $LN372@kvz_encode
$LL4@kvz_encode:

; 292  :         break;
; 293  :       }
; 294  : 
; 295  :       best_parallelism = parallelism;

	mov	ebp, eax

; 296  :       if (parallelism >= max_threads) {

	cmp	eax, esi
	jge	SHORT $LN373@kvz_encode

; 284  :     int best_parallelism = 0;
; 285  : 
; 286  :     for (encoder->cfg.owf = 0; true; encoder->cfg.owf++) {
; 287  :       int parallelism = get_max_parallelism(encoder);

	mov	ebx, DWORD PTR [rdi+172]
	mov	rcx, rdi
	inc	ebx
	mov	DWORD PTR [rdi+172], ebx
	call	get_max_parallelism

; 288  : 
; 289  :       if (parallelism <= best_parallelism) {

	cmp	eax, ebp
	jg	SHORT $LL4@kvz_encode
$LN372@kvz_encode:

; 290  :         // No improvement over previous OWF.
; 291  :         encoder->cfg.owf--;

	dec	ebx
$LN373@kvz_encode:

; 297  :         // Cannot have more parallelism than there are threads.
; 298  :         break;
; 299  :       }
; 300  :     }
; 301  : 
; 302  :     // Add two frames so that we have frames ready to be coded when one is
; 303  :     // completed.
; 304  :     encoder->cfg.owf += 2;

	add	ebx, r14d

; 305  : 
; 306  :     fprintf(stderr, "--owf=auto value set to %d.\n", encoder->cfg.owf);

	mov	ecx, r14d
	mov	DWORD PTR [rdi+172], ebx
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, ebx
	lea	rdx, OFFSET FLAT:$SG4294958018
	mov	rcx, rax
	call	fprintf
	mov	ecx, DWORD PTR [rdi+192]
$LN78@kvz_encode:

; 307  :   }
; 308  : 
; 309  :   if (encoder->cfg.threads < 0) {

	test	ecx, ecx
	jns	SHORT $LN81@kvz_encode

; 310  :     encoder->cfg.threads = MIN(max_threads, get_max_parallelism(encoder));

	mov	rcx, rdi
	call	get_max_parallelism
	cmp	esi, eax
	mov	ebx, eax

; 311  :     fprintf(stderr, "--threads=auto value set to %d.\n", encoder->cfg.threads);

	mov	ecx, r14d
	cmovl	ebx, esi
	mov	DWORD PTR [rdi+192], ebx
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, ebx
	lea	rdx, OFFSET FLAT:$SG4294958017
	mov	rcx, rax
	call	fprintf
	mov	ecx, DWORD PTR [rdi+192]
$LN81@kvz_encode:

; 312  :   }
; 313  : 
; 314  :   if (encoder->cfg.source_scan_type != KVZ_INTERLACING_NONE) {

	cmp	BYTE PTR [rdi+88], r12b
	je	SHORT $LN83@kvz_encode

; 315  :     // If using interlaced coding with OWF, the OWF has to be an even number
; 316  :     // to ensure that the pair of fields will be output for the same picture.
; 317  :     if (encoder->cfg.owf % 2 == 1) {

	mov	edx, DWORD PTR [rdi+172]
	mov	eax, edx
	and	eax, -2147483647			; ffffffff80000001H
	jge	SHORT $LN541@kvz_encode
	dec	eax
	or	eax, -2
	inc	eax
$LN541@kvz_encode:
	cmp	eax, r15d
	jne	SHORT $LN83@kvz_encode

; 318  :       encoder->cfg.owf += 1;

	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR [rdi+172], eax
$LN83@kvz_encode:

; 319  :     }
; 320  :   }
; 321  : 
; 322  :   encoder->threadqueue = kvz_threadqueue_init(encoder->cfg.threads);

	call	kvz_threadqueue_init
	mov	QWORD PTR [rdi+6448], rax

; 323  :   if (!encoder->threadqueue) {

	test	rax, rax
	jne	SHORT $LN84@kvz_encode

; 324  :     fprintf(stderr, "Could not initialize threadqueue.\n");

	mov	ecx, r14d
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958016

; 325  :     goto init_failed;

	jmp	$LN545@kvz_encode
$LN84@kvz_encode:

; 326  :   }
; 327  : 
; 328  :   encoder->bitdepth = KVZ_BIT_DEPTH;
; 329  : 
; 330  :   encoder->chroma_format = KVZ_FORMAT2CSP(encoder->cfg.input_format);

	movsxd	rax, DWORD PTR [rdi+2404]
	lea	rcx, OFFSET FLAT:$SG4294958015
	mov	ebx, r12d
	mov	BYTE PTR [rdi+2592], 8

; 331  : 
; 332  :   // Interlacing
; 333  :   encoder->in.source_scan_type = (int8_t)encoder->cfg.source_scan_type;
; 334  :   encoder->vui.field_seq_flag = encoder->cfg.source_scan_type != 0;
; 335  :   encoder->vui.frame_field_info_present_flag = encoder->cfg.source_scan_type != 0;
; 336  : 
; 337  :   // Initialize the scaling list
; 338  :   kvz_scalinglist_init(&encoder->scaling_list);

	lea	rsi, QWORD PTR [rdi+2616]
	mov	DWORD PTR sizeId$1$[rsp], ebx
	lea	r13, OFFSET FLAT:kvz_g_scaling_list_size
	movsx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 6
	mov	DWORD PTR [rdi+2596], eax
	movzx	eax, BYTE PTR [rdi+88]
	mov	BYTE PTR [rdi+2560], al
	test	al, al
	setne	al
	mov	BYTE PTR [rdi+2608], al
	mov	BYTE PTR [rdi+2609], al
	lea	rax, OFFSET FLAT:kvz_g_scaling_list_num
	mov	QWORD PTR tv7301[rsp], rax
	mov	rdi, r12
	mov	QWORD PTR tv7308[rsp], rax
	npad	3
$LL272@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 91   :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	cmp	BYTE PTR [rax], 0
	mov	ebp, r12d
	jbe	$LN544@kvz_encode
	npad	4
$LL275@kvz_encode:
	mov	r14, r12

; 92   :       for (qp = 0; qp < 6; qp++) {

	mov	r12, rcx
$LL278@kvz_encode:

; 93   :         if (!(sizeId == 3 && listId == 3)) {

	cmp	ebx, 3
	jne	SHORT $LN289@kvz_encode
	cmp	ebp, ebx
	jne	SHORT $LN289@kvz_encode

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	mov	r15d, ebp
	jmp	SHORT $LN276@kvz_encode
$LN289@kvz_encode:

; 94   :           scaling_list->quant_coeff[sizeId][listId][qp]    = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	mov	r15d, ebp
	mov	edx, 4
	lea	rax, QWORD PTR [r15+rdi]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rbx, QWORD PTR [r14+rcx*2]
	movzx	ecx, WORD PTR [r13]
	call	QWORD PTR __imp_calloc

; 95   :           scaling_list->de_quant_coeff[sizeId][listId][qp] = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	movzx	ecx, WORD PTR [r13]
	mov	edx, 4
	mov	QWORD PTR [rsi+rbx*8+296], rax
	call	QWORD PTR __imp_calloc

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	movzx	ecx, WORD PTR [r13]
	mov	edx, 8
	mov	QWORD PTR [rsi+rbx*8+1448], rax
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR [rsi+rbx*8+2600], rax
	mov	ebx, DWORD PTR sizeId$1$[rsp]
$LN276@kvz_encode:

; 92   :       for (qp = 0; qp < 6; qp++) {

	inc	r14
	sub	r12, 1
	jne	SHORT $LL278@kvz_encode

; 97   :         }
; 98   :       }
; 99   :       scaling_list->scaling_list_coeff[sizeId][listId] = (int32_t*)calloc(MIN(MAX_MATRIX_COEF_NUM, kvz_g_scaling_list_size[sizeId]), sizeof(int32_t));

	movzx	eax, WORD PTR [r13]
	mov	r14d, 64				; 00000040H
	mov	ecx, r14d
	cmp	r14w, ax
	jb	SHORT $LN292@kvz_encode
	mov	ecx, eax
$LN292@kvz_encode:
	mov	r14d, 4
	mov	edx, r14d
	call	QWORD PTR __imp_calloc
	lea	rcx, QWORD PTR [r15+rdi]
	inc	ebp
	mov	QWORD PTR [rsi+rcx*8+104], rax
	lea	r12d, QWORD PTR [r14-4]
	mov	rax, QWORD PTR tv7308[rsp]
	lea	ecx, QWORD PTR [r14+2]
	movzx	eax, BYTE PTR [rax]
	cmp	ebp, eax
	jb	$LL275@kvz_encode
	mov	rax, QWORD PTR tv7308[rsp]

; 91   :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	jmp	SHORT $LN270@kvz_encode
$LN544@kvz_encode:
	mov	r14d, 4
$LN270@kvz_encode:

; 90   :   for (sizeId = 0; sizeId < 4; sizeId++) {

	inc	ebx
	inc	rax
	add	r13, 2
	mov	DWORD PTR sizeId$1$[rsp], ebx
	add	rdi, 6
	mov	QWORD PTR tv7308[rsp], rax
	cmp	ebx, 4
	jb	$LL272@kvz_encode

; 100  :     }
; 101  :   }
; 102  :   // alias, assign pointer to an existing array
; 103  :   for (qp = 0; qp < 6; qp++) {
; 104  :     scaling_list->quant_coeff[3][3][qp]    = scaling_list->quant_coeff[3][1][qp];

	mov	rax, QWORD PTR [rsi+1208]
	mov	rcx, r14
	mov	QWORD PTR [rsi+1304], rax

; 105  :     scaling_list->de_quant_coeff[3][3][qp] = scaling_list->de_quant_coeff[3][1][qp];

	mov	rax, QWORD PTR [rsi+2360]
	mov	QWORD PTR [rsi+2456], rax

; 106  :     scaling_list->error_scale[3][3][qp]    = scaling_list->error_scale[3][1][qp];

	mov	rax, QWORD PTR [rsi+3512]
	mov	rdi, QWORD PTR encoder$1$[rsp]
	mov	QWORD PTR [rsi+3608], rax
	mov	rax, QWORD PTR [rsi+1216]
	mov	QWORD PTR [rsi+1312], rax
	mov	rax, QWORD PTR [rsi+2368]
	mov	QWORD PTR [rsi+2464], rax
	mov	rax, QWORD PTR [rsi+3520]
	mov	QWORD PTR [rsi+3616], rax
	mov	rax, QWORD PTR [rsi+1224]
	mov	QWORD PTR [rsi+1320], rax
	mov	rax, QWORD PTR [rsi+2376]
	mov	QWORD PTR [rsi+2472], rax
	mov	rax, QWORD PTR [rsi+3528]
	mov	QWORD PTR [rsi+3624], rax
	mov	rax, QWORD PTR [rsi+1232]
	mov	QWORD PTR [rsi+1328], rax
	mov	rax, QWORD PTR [rsi+2384]
	mov	QWORD PTR [rsi+2480], rax
	mov	rax, QWORD PTR [rsi+3536]
	mov	QWORD PTR [rsi+3632], rax
	mov	rax, QWORD PTR [rsi+1240]
	mov	QWORD PTR [rsi+1336], rax
	mov	rax, QWORD PTR [rsi+2392]
	mov	QWORD PTR [rsi+2488], rax
	mov	rax, QWORD PTR [rsi+3544]
	mov	QWORD PTR [rsi+3640], rax
	mov	rax, QWORD PTR [rsi+1248]
	mov	QWORD PTR [rsi+1344], rax
	mov	rax, QWORD PTR [rsi+2400]
	mov	QWORD PTR [rsi+2496], rax
	mov	rax, QWORD PTR [rsi+3552]
	mov	QWORD PTR [rsi+3648], rax
	lea	rax, QWORD PTR [rsi+12]
	npad	13
$LL284@kvz_encode:

; 107  :   }
; 108  :   
; 109  :   //Initialize dc (otherwise we switch on undef in kvz_scalinglist_set)
; 110  :   for (sizeId = 0; sizeId < SCALING_LIST_SIZE_NUM; ++sizeId) {
; 111  :     for (listId = 0; listId < SCALING_LIST_NUM; ++listId) {
; 112  :       scaling_list->scaling_list_dc[sizeId][listId] = 0;

	mov	QWORD PTR [rax-8], 0
	mov	QWORD PTR [rax], 0
	mov	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+24]
	sub	rcx, 1
	jne	SHORT $LL284@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 341  :   if (cfg->scaling_list == KVZ_SCALING_LIST_CUSTOM && cfg->cqmfile) {

	mov	r15, QWORD PTR cfg$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 116  :   scaling_list->enable = 0;

	mov	WORD PTR [rsi], cx
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 341  :   if (cfg->scaling_list == KVZ_SCALING_LIST_CUSTOM && cfg->cqmfile) {

	movzx	eax, BYTE PTR [r15+2472]
	cmp	al, 1
	jne	SHORT $LN85@kvz_encode
	mov	rcx, QWORD PTR [r15+136]
	test	rcx, rcx
	je	SHORT $LN89@kvz_encode

; 342  :     FILE* cqmfile = fopen(cfg->cqmfile, "rb");

	lea	rdx, OFFSET FLAT:$SG4294958014
	call	QWORD PTR __imp_fopen
	mov	rbx, rax

; 343  :     if (cqmfile) {

	test	rax, rax
	je	SHORT $LN87@kvz_encode

; 344  :       kvz_scalinglist_parse(&encoder->scaling_list, cqmfile);

	mov	rdx, rax
	mov	rcx, rsi
	call	kvz_scalinglist_parse

; 345  :       fclose(cqmfile);

	mov	rcx, rbx
	call	QWORD PTR __imp_fclose

; 349  :     }

	jmp	SHORT $LN89@kvz_encode
$LN87@kvz_encode:

; 346  :     } else {
; 347  :       fprintf(stderr, "Could not open CQM file.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958013

; 348  :       goto init_failed;

	jmp	$LN545@kvz_encode
$LN85@kvz_encode:

; 350  :   } else if (cfg->scaling_list == KVZ_SCALING_LIST_DEFAULT) {

	cmp	al, 2
	jne	SHORT $LN89@kvz_encode

; 351  :     // Enable scaling lists if default lists are used
; 352  :     encoder->scaling_list.enable = 1;

	mov	BYTE PTR [rsi], 1

; 353  :     encoder->scaling_list.use_default_list = 1;

	mov	BYTE PTR [rdi+2617], 1
$LN89@kvz_encode:

; 354  :   }
; 355  : 
; 356  :   if (cfg->fast_coeff_table_fn) {

	mov	rcx, QWORD PTR [r15+2504]
	test	rcx, rcx
	je	$LN90@kvz_encode

; 357  :     FILE *fast_coeff_table_f = fopen(cfg->fast_coeff_table_fn, "rb");

	lea	rdx, OFFSET FLAT:$SG4294958012
	call	QWORD PTR __imp_fopen
	mov	rbp, rax

; 358  :     if (fast_coeff_table_f == NULL) {

	test	rax, rax
	jne	SHORT $LN92@kvz_encode

; 359  :       fprintf(stderr, "Could not open fast coeff table file.\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958011

; 360  :       goto init_failed;

	jmp	$LN545@kvz_encode
$LN92@kvz_encode:
	movaps	XMMWORD PTR [rsp+96], xmm6
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	mov	rbx, r12
	movss	xmm6, DWORD PTR __real@43800000
	movaps	XMMWORD PTR [rsp+80], xmm7
	movss	xmm7, DWORD PTR __real@3f000000
$LL296@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\fast_coeff_cost.c

; 66   :                                                     curr_wts + 3) != 4) {

	lea	rax, QWORD PTR curr_wts$1[rsp+12]
	mov	rcx, rbp
	mov	QWORD PTR [rsp+40], rax
	lea	r9, QWORD PTR curr_wts$1[rsp+4]
	lea	rax, QWORD PTR curr_wts$1[rsp+8]
	lea	r8, QWORD PTR curr_wts$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294949518
	call	fscanf
	cmp	eax, 4
	jne	$LN529@kvz_encode

; 40   :   return (uint16_t)(f * 256.0f + 0.5f);

	movss	xmm0, DWORD PTR curr_wts$1[rsp+12]
	mulss	xmm0, xmm6
	addss	xmm0, xmm7
	cvttss2si eax, xmm0
	movss	xmm0, DWORD PTR curr_wts$1[rsp+8]
	mulss	xmm0, xmm6

; 50   :     result |= to_q88(f[i]);

	movzx	edx, ax

; 40   :   return (uint16_t)(f * 256.0f + 0.5f);

	shl	rdx, 16
	addss	xmm0, xmm7
	cvttss2si eax, xmm0
	movss	xmm0, DWORD PTR curr_wts$1[rsp+4]
	mulss	xmm0, xmm6

; 50   :     result |= to_q88(f[i]);

	movzx	ecx, ax
	or	rdx, rcx
	shl	rdx, 16

; 40   :   return (uint16_t)(f * 256.0f + 0.5f);

	addss	xmm0, xmm7
	cvttss2si eax, xmm0
	movss	xmm0, DWORD PTR curr_wts$1[rsp]

; 50   :     result |= to_q88(f[i]);

	movzx	ecx, ax
	or	rdx, rcx

; 40   :   return (uint16_t)(f * 256.0f + 0.5f);

	mulss	xmm0, xmm6

; 50   :     result |= to_q88(f[i]);

	shl	rdx, 16

; 40   :   return (uint16_t)(f * 256.0f + 0.5f);

	addss	xmm0, xmm7
	cvttss2si eax, xmm0

; 50   :     result |= to_q88(f[i]);

	movzx	ecx, ax
	or	rdx, rcx

; 69   :     wts_by_qp[i] = to_4xq88(curr_wts);

	mov	QWORD PTR [rdi+rbx*8+6544], rdx
	inc	rbx
	cmp	rbx, 50					; 00000032H
	jl	$LL296@kvz_encode

; 66   :                                                     curr_wts + 3) != 4) {

	jmp	SHORT $LN93@kvz_encode
$LN529@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 363  :       fprintf(stderr, "Failed to parse fast coeff table, using default\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958010
	call	fprintf

; 364  :       kvz_fast_coeff_use_default_table(&encoder->fast_coeff_table);

	lea	rcx, QWORD PTR [rdi+6544]
	call	kvz_fast_coeff_use_default_table
$LN93@kvz_encode:

; 365  :     }
; 366  :     fclose(fast_coeff_table_f);

	mov	rcx, rbp
	call	QWORD PTR __imp_fclose
	movaps	xmm7, XMMWORD PTR [rsp+80]
	movaps	xmm6, XMMWORD PTR [rsp+96]

; 367  :   } else {

	jmp	SHORT $LN91@kvz_encode
$LN90@kvz_encode:

; 368  :     kvz_fast_coeff_use_default_table(&encoder->fast_coeff_table);

	lea	rcx, QWORD PTR [rdi+6544]
	call	kvz_fast_coeff_use_default_table
$LN91@kvz_encode:

; 369  :   }
; 370  : 
; 371  :   if (cfg->fastrd_sampling_on || cfg->fastrd_accuracy_check_on) {

	cmp	BYTE PTR [r15+2513], 0
	jne	SHORT $LN95@kvz_encode
	cmp	BYTE PTR [r15+2514], 0
	je	SHORT $LN97@kvz_encode
$LN95@kvz_encode:

; 372  :     if (cfg->fastrd_learning_outdir_fn == NULL) {

	mov	rcx, QWORD PTR [r15+2520]
	test	rcx, rcx
	jne	SHORT $LN96@kvz_encode

; 373  :       fprintf(stderr, "No output file defined for Fast RD sampling or accuracy check.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958009

; 374  :       goto init_failed;

	jmp	$LN545@kvz_encode
$LN96@kvz_encode:

; 375  :     }
; 376  :     if (kvz_init_rdcost_outfiles(cfg->fastrd_learning_outdir_fn) != 0) {

	call	kvz_init_rdcost_outfiles
	test	eax, eax
	jne	$init_failed$548
$LN97@kvz_encode:

; 377  :       goto init_failed;
; 378  :     }
; 379  :   }
; 380  : 
; 381  :   kvz_scalinglist_process(&encoder->scaling_list, encoder->bitdepth);

	movzx	r13d, BYTE PTR [rdi+2592]
	lea	rdx, OFFSET FLAT:g_quant_intra_default_8x8
	mov	rdi, r12
	lea	rcx, OFFSET FLAT:g_quant_inter_default_8x8
	mov	r15d, r12d
	lea	rax, OFFSET FLAT:kvz_g_scaling_list_num
	npad	8
$LL309@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c

; 412  :     for (list = 0; list < kvz_g_scaling_list_num[size]; list++) {

	movzx	eax, BYTE PTR [rax]
	mov	ebp, r12d
	test	eax, eax
	je	$LN307@kvz_encode
	npad	2
$LL312@kvz_encode:

; 413  :       const int32_t * const list_ptr = scaling_list->use_default_list ?

	cmp	BYTE PTR [rsi+1], 0
	je	SHORT $LN317@kvz_encode

; 268  :   const int32_t *list_ptr = g_quant_intra_default_8x8; // Default to "8x8" intra

	mov	r14, rdx

; 269  :   switch(size_id) {

	test	r15d, r15d
	je	SHORT $LN322@kvz_encode
	cmp	r15d, 2
	jbe	SHORT $LN323@kvz_encode
	cmp	r15d, 3
	jne	SHORT $LN318@kvz_encode

; 277  :     case SCALING_LIST_32x32:
; 278  :       if (list_id > 0) list_ptr = g_quant_inter_default_8x8;

	test	ebp, ebp
	je	SHORT $LN318@kvz_encode
	mov	r14, rcx
	jmp	SHORT $LN318@kvz_encode
$LN323@kvz_encode:

; 272  :       break;
; 273  :     case SCALING_LIST_8x8:
; 274  :     case SCALING_LIST_16x16:
; 275  :       if (list_id > 2) list_ptr = g_quant_inter_default_8x8;
; 276  :       break;

	cmp	ebp, 2
	mov	r14, rcx
	cmovbe	r14, rdx
	jmp	SHORT $LN318@kvz_encode
$LN322@kvz_encode:

; 270  :     case SCALING_LIST_4x4:
; 271  :       list_ptr = g_quant_default_4x4;

	lea	r14, OFFSET FLAT:g_quant_default_4x4

; 413  :       const int32_t * const list_ptr = scaling_list->use_default_list ?

	jmp	SHORT $LN318@kvz_encode
$LN317@kvz_encode:
	lea	rax, QWORD PTR [rdi+r12]
	mov	r14, QWORD PTR [rsi+rax*8+104]
$LN318@kvz_encode:

; 414  :                                        kvz_scalinglist_get_default(size, list) :
; 415  :                                        scaling_list->scaling_list_coeff[size][list];
; 416  : 
; 417  :       for (qp = 0; qp < SCALING_LIST_REM_NUM; qp++) {

	xor	ebx, ebx
	npad	13
$LL315@kvz_encode:

; 418  :         kvz_scalinglist_set(scaling_list, list_ptr, list, size, qp);

	mov	r9d, r15d
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	kvz_scalinglist_set

; 419  :         scalinglist_set_err_scale(bitdepth, scaling_list, list, size, qp);

	mov	r9d, r15d
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, ebp
	mov	rdx, rsi
	movzx	ecx, r13b
	call	scalinglist_set_err_scale
	inc	ebx
	cmp	ebx, 6
	jb	SHORT $LL315@kvz_encode

; 412  :     for (list = 0; list < kvz_g_scaling_list_num[size]; list++) {

	mov	rcx, QWORD PTR tv7301[rsp]
	lea	rdx, OFFSET FLAT:g_quant_intra_default_8x8
	inc	ebp
	inc	r12
	movzx	eax, BYTE PTR [rcx]
	lea	rcx, OFFSET FLAT:g_quant_inter_default_8x8
	cmp	ebp, eax
	jb	$LL312@kvz_encode
	lea	rcx, OFFSET FLAT:g_quant_inter_default_8x8
	xor	r12d, r12d
	lea	rdx, OFFSET FLAT:g_quant_intra_default_8x8
$LN307@kvz_encode:

; 279  :       break;
; 280  :   }
; 281  :   return list_ptr;
; 282  : }
; 283  : 
; 284  : 
; 285  : /**
; 286  :  * \brief get scaling list for decoder
; 287  :  *
; 288  :  */
; 289  : static void scalinglist_process_dec(const int32_t * const coeff, int32_t *dequantcoeff,
; 290  :                                     int32_t inv_quant_scales, uint32_t height,
; 291  :                                     uint32_t width, uint32_t ratio,
; 292  :                                     int32_t size_num, uint32_t dc,
; 293  :                                     uint8_t flat)
; 294  : {
; 295  :   uint32_t j,i;
; 296  : 
; 297  :   // Flat scaling list
; 298  :   if (flat) {
; 299  :     for (j = 0; j < height * width; j++) {
; 300  :       *dequantcoeff++ = inv_quant_scales<<4;
; 301  :     }
; 302  :   } else {
; 303  :     for (j = 0; j < height; j++) {
; 304  :       for (i = 0; i < width; i++) {
; 305  :         dequantcoeff[j*width + i] = inv_quant_scales * coeff[size_num * (j / ratio) + i / ratio];
; 306  :       }
; 307  :     }
; 308  :     if (ratio > 1) {
; 309  :       dequantcoeff[0] = inv_quant_scales * dc;
; 310  :     }
; 311  :   }
; 312  : }
; 313  : 
; 314  : /**
; 315  :  * \brief get scaling list for encoder
; 316  :  *
; 317  :  */
; 318  : void kvz_scalinglist_process_enc(const int32_t * const coeff, int32_t* quantcoeff, const int32_t quant_scales,
; 319  :                              const uint32_t height, const uint32_t width, const uint32_t ratio, 
; 320  :                              const int32_t size_num, const uint32_t dc, const uint8_t flat)
; 321  : {
; 322  :   uint32_t j,i;
; 323  :   int32_t nsqth = (height < width) ? 4: 1; //!< height ratio for NSQT
; 324  :   int32_t nsqtw = (width < height) ? 4: 1; //!< width ratio for NSQT
; 325  : 
; 326  :   // Flat scaling list
; 327  :   if (flat) {
; 328  :     for (j = 0; j < height * width; j++) {
; 329  :       *quantcoeff++ = quant_scales>>4;
; 330  :     }
; 331  :   } else {
; 332  :     for (j = 0; j < height; j++) {
; 333  :       for (i = 0; i < width; i++) {
; 334  :         uint32_t coeffpos  = size_num * (j * nsqth / ratio) + i * nsqtw / ratio;
; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);
; 336  :       }
; 337  :     }
; 338  :     if (ratio > 1) {
; 339  :       quantcoeff[0] = quant_scales / dc;
; 340  :     }
; 341  :   }
; 342  : }
; 343  : 
; 344  : 
; 345  : 
; 346  : /** set error scale coefficients
; 347  :  * \param list List ID
; 348  :  * \param uiSize Size
; 349  :  * \param uiQP Quantization parameter
; 350  :  */
; 351  : static void scalinglist_set_err_scale(uint8_t bitdepth, scaling_list_t * const scaling_list, uint32_t list,uint32_t size, uint32_t qp)
; 352  : {
; 353  :   uint32_t log2_tr_size   = kvz_g_convert_to_bit[ g_scaling_list_size_x[size] ] + 2;
; 354  :   int32_t transform_shift = MAX_TR_DYNAMIC_RANGE - bitdepth - log2_tr_size;  // Represents scaling through forward transform
; 355  : 
; 356  :   uint32_t i,max_num_coeff  = kvz_g_scaling_list_size[size];
; 357  :   const int32_t *quantcoeff = scaling_list->quant_coeff[size][list][qp];
; 358  :   //This cast is allowed, since error_scale is a malloc'd pointer in kvz_scalinglist_init
; 359  :   double *err_scale         = (double *) scaling_list->error_scale[size][list][qp];
; 360  : 
; 361  :   // Compensate for scaling of bitcount in Lagrange cost function
; 362  :   double scale = CTX_FRAC_ONE_BIT;
; 363  :   // Compensate for scaling through forward transform
; 364  :   scale = scale*pow(2.0,-2.0*transform_shift);
; 365  :   for(i=0;i<max_num_coeff;i++) {
; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));
; 367  :   }
; 368  : }
; 369  : 
; 370  : 
; 371  : /**
; 372  :  * \brief set scaling lists
; 373  :  *
; 374  :  */
; 375  : void kvz_scalinglist_set(scaling_list_t * const scaling_list, const int32_t * const coeff, uint32_t listId, uint32_t sizeId, uint32_t qp)
; 376  : {
; 377  :   const uint32_t width  = g_scaling_list_size_x[sizeId];
; 378  :   const uint32_t height = g_scaling_list_size_x[sizeId];
; 379  :   const uint32_t ratio  = g_scaling_list_size_x[sizeId] / MIN(8, g_scaling_list_size_x[sizeId]);
; 380  :   const uint32_t dc = scaling_list->scaling_list_dc[sizeId][listId] != 0 ? scaling_list->scaling_list_dc[sizeId][listId] : 16;
; 381  :   //These cast are allowed, since these are pointer's to malloc'd area in kvz_scalinglist_init
; 382  :   int32_t *quantcoeff   = (int32_t*) scaling_list->quant_coeff[sizeId][listId][qp];
; 383  :   int32_t *dequantcoeff = (int32_t*) scaling_list->de_quant_coeff[sizeId][listId][qp];
; 384  : 
; 385  :   // Encoder list
; 386  :   kvz_scalinglist_process_enc(coeff, quantcoeff, kvz_g_quant_scales[qp]<<4, height, width, ratio,
; 387  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 388  :   // Decoder list
; 389  :   scalinglist_process_dec(coeff, dequantcoeff, kvz_g_inv_quant_scales[qp], height, width, ratio,
; 390  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 391  : 
; 392  : 
; 393  :   // TODO: support NSQT
; 394  :   // if(sizeId == /*SCALING_LIST_32x32*/3 || sizeId == /*SCALING_LIST_16x16*/2) { //for NSQT
; 395  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_VER*/1];
; 396  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height,width>>2,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 397  : 
; 398  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_HOR*/2];
; 399  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height>>2,width,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 400  :   // }
; 401  : }
; 402  : 
; 403  : /**
; 404  :  * \brief
; 405  :  *
; 406  :  */
; 407  : void kvz_scalinglist_process(scaling_list_t * const scaling_list, uint8_t bitdepth)
; 408  : {
; 409  :   uint32_t size,list,qp;
; 410  : 
; 411  :   for (size = 0; size < SCALING_LIST_SIZE_NUM; size++) {

	mov	rax, QWORD PTR tv7301[rsp]
	inc	r15d
	inc	rax
	add	rdi, 6
	mov	QWORD PTR tv7301[rsp], rax
	cmp	r15d, 4
	jb	$LL309@kvz_encode
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c

; 383  :   kvz_encoder_control_input_init(encoder, encoder->cfg.width, encoder->cfg.height);

	mov	rdi, QWORD PTR encoder$1$[rsp]
	mov	r10d, DWORD PTR [rdi+12]

; 755  :   if (encoder->in.width % CU_MIN_SIZE_PIXELS) {

	mov	ecx, r10d
	mov	eax, DWORD PTR [rdi+16]
	cdq
	mov	DWORD PTR [rdi+2528], r10d
	sub	eax, edx
	mov	DWORD PTR [rdi+2544], r10d
	sar	eax, 1
	cmp	BYTE PTR [rdi+2560], 0
	mov	r8d, eax
	cmove	r8d, DWORD PTR [rdi+16]
	mov	DWORD PTR [rdi+2532], r8d
	mov	DWORD PTR [rdi+2548], r8d
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN540@kvz_encode
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN540@kvz_encode:
	mov	r9d, r10d
	test	ecx, ecx
	je	SHORT $LN330@kvz_encode

; 756  :     encoder->in.width += CU_MIN_SIZE_PIXELS - (width % CU_MIN_SIZE_PIXELS);

	sub	r9d, ecx
	add	r9d, 8
	mov	DWORD PTR [rdi+2528], r9d
$LN330@kvz_encode:

; 757  :   }
; 758  : 
; 759  :   if (encoder->in.height % CU_MIN_SIZE_PIXELS) {

	mov	ecx, r8d
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN539@kvz_encode
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN539@kvz_encode:
	mov	r11d, r8d
	test	ecx, ecx
	je	SHORT $LN331@kvz_encode

; 760  :     encoder->in.height += CU_MIN_SIZE_PIXELS - (height % CU_MIN_SIZE_PIXELS);

	sub	r11d, ecx
	add	r11d, 8
	mov	DWORD PTR [rdi+2532], r11d
$LN331@kvz_encode:

; 761  :   }
; 762  : 
; 763  :   encoder->in.height_in_lcu = encoder->in.height / LCU_WIDTH;

	mov	eax, r11d
	cdq
	and	edx, 63					; 0000003fH
	lea	ebx, DWORD PTR [rdx+rax]

; 764  :   encoder->in.width_in_lcu  = encoder->in.width / LCU_WIDTH;

	mov	eax, r9d
	cdq
	sar	ebx, 6
	and	edx, 63					; 0000003fH
	mov	DWORD PTR [rdi+2540], ebx
	add	eax, edx

; 765  : 
; 766  :   // Add one extra LCU when image not divisible by LCU_WIDTH
; 767  :   if (encoder->in.height_in_lcu * LCU_WIDTH < height) {

	mov	ecx, ebx
	sar	eax, 6
	shl	ecx, 6
	mov	DWORD PTR [rdi+2536], eax
	cmp	ecx, r8d
	jge	SHORT $LN332@kvz_encode

; 768  :     encoder->in.height_in_lcu++;

	lea	ecx, DWORD PTR [rbx+1]
	mov	DWORD PTR [rdi+2540], ecx
$LN332@kvz_encode:

; 769  :   }
; 770  : 
; 771  :   if (encoder->in.width_in_lcu * LCU_WIDTH < width) {

	mov	ecx, eax
	shl	ecx, 6
	cmp	ecx, r10d
	jge	SHORT $LN333@kvz_encode

; 772  :     encoder->in.width_in_lcu++;

	inc	eax
	mov	DWORD PTR [rdi+2536], eax
$LN333@kvz_encode:

; 384  : 
; 385  :   if (encoder->cfg.framerate_num != 0) {

	mov	edx, DWORD PTR [rdi+2352]
	mov	eax, DWORD PTR [rdi+32]

; 775  :   encoder->in.pixels_per_pic = encoder->in.width * encoder->in.height;

	imul	r9d, r11d
	movd	xmm0, edx

; 384  : 
; 385  :   if (encoder->cfg.framerate_num != 0) {

	cvtdq2pd xmm0, xmm0

; 775  :   encoder->in.pixels_per_pic = encoder->in.width * encoder->in.height;

	movsxd	rcx, r9d
	mov	QWORD PTR [rdi+2552], rcx

; 384  : 
; 385  :   if (encoder->cfg.framerate_num != 0) {

	test	eax, eax
	je	SHORT $LN98@kvz_encode

; 386  :     double framerate = encoder->cfg.framerate_num / (double)encoder->cfg.framerate_denom;

	movd	xmm1, DWORD PTR [rdi+36]
	cvtdq2pd xmm1, xmm1

; 387  :     encoder->target_avg_bppic = encoder->cfg.target_bitrate / framerate;

	mulsd	xmm1, xmm0
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	divsd	xmm1, xmm0

; 388  :   } else {

	jmp	SHORT $LN99@kvz_encode
$LN98@kvz_encode:

; 389  :     encoder->target_avg_bppic = encoder->cfg.target_bitrate / encoder->cfg.framerate;

	movaps	xmm1, xmm0
	divsd	xmm1, QWORD PTR [rdi+24]
$LN99@kvz_encode:

; 390  :   }
; 391  :   encoder->target_avg_bpp = encoder->target_avg_bppic / encoder->in.pixels_per_pic;

	movsd	QWORD PTR [rdi+6456], xmm1
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, rcx
	divsd	xmm1, xmm0
	movsd	QWORD PTR [rdi+6464], xmm1

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	test	edx, edx
	jle	SHORT $LN100@kvz_encode
	mov	rcx, rdi
	call	encoder_control_init_gop_layer_weights
	test	eax, eax
	je	$init_failed$548
$LN100@kvz_encode:

; 394  :       !encoder_control_init_gop_layer_weights(encoder))
; 395  :   {
; 396  :     goto init_failed;
; 397  :   }
; 398  : 
; 399  :   if (cfg->erp_aqp) {

	mov	rsi, QWORD PTR cfg$[rsp]
	cmp	DWORD PTR [rsi+2444], 0
	je	SHORT $LN101@kvz_encode

; 400  :     init_erp_aqp_roi(encoder,

	mov	r9d, DWORD PTR [rsi+2428]
	mov	rcx, rdi
	mov	r8d, DWORD PTR [rsi+2424]
	mov	rdx, QWORD PTR [rsi+2432]
	call	init_erp_aqp_roi
	jmp	SHORT $LN103@kvz_encode
$LN101@kvz_encode:

; 401  :                      cfg->roi.dqps,
; 402  :                      cfg->roi.width,
; 403  :                      cfg->roi.height);
; 404  : 
; 405  :   } else if (cfg->roi.dqps) {

	cmp	QWORD PTR [rsi+2432], 0
	je	SHORT $LN103@kvz_encode

; 406  :     // Copy delta QP array for ROI coding.
; 407  :     const size_t roi_size = encoder->cfg.roi.width * encoder->cfg.roi.height;

	mov	eax, DWORD PTR [rdi+2428]

; 408  :     encoder->cfg.roi.dqps = calloc(roi_size, sizeof(cfg->roi.dqps[0]));

	mov	edx, 1
	imul	eax, DWORD PTR [rdi+2424]
	movsxd	rbx, eax
	mov	rcx, rbx
	call	QWORD PTR __imp_calloc

; 409  :     memcpy(encoder->cfg.roi.dqps,

	mov	rdx, QWORD PTR [rsi+2432]
	mov	r8, rbx
	mov	rcx, rax
	mov	QWORD PTR [rdi+2432], rax
	call	memcpy
$LN103@kvz_encode:

; 410  :            cfg->roi.dqps,
; 411  :            roi_size * sizeof(*cfg->roi.dqps));
; 412  : 
; 413  :   }
; 414  : 
; 415  :   // NOTE: When tr_depth_inter is equal to 0, the transform is still split
; 416  :   // for SMP and AMP partition units.
; 417  :   encoder->tr_depth_inter = 0;
; 418  : 
; 419  :   if (encoder->cfg.target_bitrate > 0 || encoder->cfg.roi.dqps || encoder->cfg.set_qp_in_cu || encoder->cfg.vaq) {

	cmp	DWORD PTR [rdi+2352], 0
	mov	DWORD PTR [rdi+6524], r12d
	jg	SHORT $LN106@kvz_encode
	cmp	QWORD PTR [rdi+2432], 0
	jne	SHORT $LN106@kvz_encode
	cmp	BYTE PTR [rdi+2463], 0
	jne	SHORT $LN106@kvz_encode
	cmp	DWORD PTR [rdi+2468], 0
	jne	SHORT $LN106@kvz_encode

; 421  :   } else {
; 422  :     encoder->max_qp_delta_depth = -1;

	mov	al, -1
	jmp	SHORT $LN105@kvz_encode
$LN106@kvz_encode:

; 420  :     encoder->max_qp_delta_depth = 0;

	xor	al, al
$LN105@kvz_encode:

; 423  :   }
; 424  : 
; 425  :   //Tiles
; 426  :   encoder->tiles_enable = encoder->cfg.tiles_width_count > 1 ||

	mov	BYTE PTR [rdi+6520], al
	movsxd	rcx, DWORD PTR [rdi+144]
	cmp	ecx, 1
	jg	SHORT $LN532@kvz_encode
	cmp	DWORD PTR [rdi+148], 1
	jg	SHORT $LN532@kvz_encode
	xor	al, al
	jmp	SHORT $LN148@kvz_encode
$LN532@kvz_encode:
	mov	al, 1
$LN148@kvz_encode:

; 427  :                           encoder->cfg.tiles_height_count > 1;
; 428  : 
; 429  :   {
; 430  :     const int num_ctbs = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	edx, DWORD PTR [rdi+2540]
	mov	BYTE PTR [rdi+6368], al
	mov	eax, DWORD PTR [rdi+2536]
	mov	ebx, eax
	imul	ebx, edx

; 431  : 
; 432  :     //Temporary pointers to allow encoder fields to be const
; 433  :     int32_t *tiles_col_width, *tiles_row_height, *tiles_ctb_addr_rs_to_ts, *tiles_ctb_addr_ts_to_rs, *tiles_tile_id, *tiles_col_bd, *tiles_row_bd;
; 434  : 
; 435  :     if (encoder->cfg.tiles_width_count > encoder->in.width_in_lcu) {

	cmp	ecx, eax
	jle	SHORT $LN107@kvz_encode

; 436  :       fprintf(stderr, "Too many tiles (width)!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958008

; 437  :       goto init_failed;

	jmp	$LN545@kvz_encode
$LN107@kvz_encode:

; 438  : 
; 439  :     } else if (encoder->cfg.tiles_height_count > encoder->in.height_in_lcu) {

	cmp	DWORD PTR [rdi+148], edx
	jle	SHORT $LN109@kvz_encode

; 440  :       fprintf(stderr, "Too many tiles (height)!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294958007

; 441  :       goto init_failed;

	jmp	$LN545@kvz_encode
$LN109@kvz_encode:

; 442  :     }
; 443  : 
; 444  :     //Will be (perhaps) changed later
; 445  :     encoder->tiles_uniform_spacing_flag = 1;
; 446  : 
; 447  :     encoder->tiles_col_width = tiles_col_width =

	shl	rcx, 2
	mov	BYTE PTR [rdi+6369], 1
	call	QWORD PTR __imp_malloc

; 448  :       MALLOC(int32_t, encoder->cfg.tiles_width_count);
; 449  :     encoder->tiles_row_height = tiles_row_height =

	movsxd	rcx, DWORD PTR [rdi+148]
	mov	r12, rax
	shl	rcx, 2
	mov	QWORD PTR [rdi+6376], rax
	call	QWORD PTR __imp_malloc

; 450  :       MALLOC(int32_t, encoder->cfg.tiles_height_count);
; 451  : 
; 452  :     encoder->tiles_col_bd = tiles_col_bd =

	movsxd	rcx, DWORD PTR [rdi+144]
	mov	r14, rax
	mov	QWORD PTR [rdi+6384], rax
	lea	rcx, QWORD PTR [rcx*4+4]
	call	QWORD PTR __imp_malloc

; 453  :       MALLOC(int32_t, encoder->cfg.tiles_width_count + 1);
; 454  :     encoder->tiles_row_bd = tiles_row_bd =

	movsxd	rcx, DWORD PTR [rdi+148]
	mov	QWORD PTR tiles_col_bd$1$[rsp], rax
	mov	QWORD PTR [rdi+6392], rax
	lea	rcx, QWORD PTR [rcx*4+4]
	call	QWORD PTR __imp_malloc

; 455  :       MALLOC(int32_t, encoder->cfg.tiles_height_count + 1);
; 456  : 
; 457  :     encoder->tiles_ctb_addr_rs_to_ts = tiles_ctb_addr_rs_to_ts =

	movsxd	rbp, ebx
	mov	r13, rax
	mov	QWORD PTR tiles_row_bd$1$[rsp], rax
	mov	QWORD PTR [rdi+6400], rax
	mov	QWORD PTR tv7341[rsp], rbp
	lea	rbx, QWORD PTR [rbp*4]
	mov	rcx, rbx
	call	QWORD PTR __imp_malloc

; 458  :       MALLOC(int32_t, num_ctbs);
; 459  :     encoder->tiles_ctb_addr_ts_to_rs = tiles_ctb_addr_ts_to_rs =

	mov	rcx, rbx
	mov	QWORD PTR tiles_ctb_addr_rs_to_ts$1$[rsp], rax
	mov	rsi, rax
	mov	QWORD PTR [rdi+6408], rax
	call	QWORD PTR __imp_malloc

; 460  :       MALLOC(int32_t, num_ctbs);
; 461  :     encoder->tiles_tile_id = tiles_tile_id =

	mov	rcx, rbx
	mov	QWORD PTR tiles_ctb_addr_ts_to_rs$1$[rsp], rax
	mov	r15, rax
	mov	QWORD PTR [rdi+6416], rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tiles_tile_id$1$[rsp], rax
	mov	r11, rax
	mov	QWORD PTR [rdi+6424], rax

; 462  :       MALLOC(int32_t, num_ctbs);
; 463  : 
; 464  :     if (!tiles_col_width ||
; 465  :         !tiles_row_height ||
; 466  :         !tiles_row_bd ||
; 467  :         !tiles_col_bd ||
; 468  :         !tiles_ctb_addr_rs_to_ts ||
; 469  :         !tiles_ctb_addr_ts_to_rs ||

	test	r12, r12
	je	$init_failed$548
	test	r14, r14
	je	$init_failed$548
	test	r13, r13
	je	$init_failed$548
	cmp	QWORD PTR tiles_col_bd$1$[rsp], 0
	je	$init_failed$548
	test	rsi, rsi
	je	$init_failed$548
	test	r15, r15
	je	$init_failed$548
	test	rax, rax
	je	$init_failed$548

; 470  :         !tiles_tile_id) {
; 471  :       goto init_failed;
; 472  :     }
; 473  : 
; 474  :     //(6-3) and (6-4) in ITU-T Rec. H.265 (04/2013)
; 475  :     if (!cfg->tiles_width_split) {

	mov	r15, QWORD PTR cfg$[rsp]
	movsxd	rcx, DWORD PTR [rdi+144]
	cmp	QWORD PTR [r15+152], 0
	jne	SHORT $LN112@kvz_encode

; 476  :       for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {

	xor	eax, eax
	test	ecx, ecx
	jle	$LN113@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	mov	rbx, r12
	npad	7
$LL7@kvz_encode:

; 477  :         tiles_col_width[i] =

	mov	r8d, DWORD PTR [rdi+2536]
	lea	r10d, DWORD PTR [rax+1]
	mov	r9d, DWORD PTR [rdi+144]
	lea	rbx, QWORD PTR [rbx+4]
	imul	eax, r8d
	cdq
	idiv	r9d
	mov	ecx, eax
	mov	eax, r10d
	imul	eax, r8d
	cdq
	idiv	r9d
	sub	eax, ecx
	mov	DWORD PTR [rbx-4], eax
	mov	eax, r10d
	cmp	r10d, DWORD PTR [rdi+144]
	jl	SHORT $LL7@kvz_encode

; 478  :           (i+1) * encoder->in.width_in_lcu / encoder->cfg.tiles_width_count -
; 479  :            i    * encoder->in.width_in_lcu / encoder->cfg.tiles_width_count;
; 480  :       }
; 481  :     } else {

	jmp	SHORT $LN113@kvz_encode
$LN112@kvz_encode:

; 482  :       int32_t last_pos_in_px = 0;
; 483  :       tiles_col_width[encoder->cfg.tiles_width_count - 1] = encoder->in.width_in_lcu;

	mov	eax, DWORD PTR [rdi+2536]
	xor	edx, edx
	mov	DWORD PTR [r12+rcx*4-4], eax

; 484  :       for (int i = 0; i < encoder->cfg.tiles_width_count - 1; ++i) {

	xor	r9d, r9d
	mov	eax, DWORD PTR [rdi+144]
	dec	eax
	test	eax, eax
	jle	SHORT $LN9@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	xor	r8d, r8d
	npad	3
$LL10@kvz_encode:

; 485  :         int32_t column_width_in_lcu = (cfg->tiles_width_split[i] - last_pos_in_px) / LCU_WIDTH;

	mov	rax, QWORD PTR [r15+152]
	lea	r8, QWORD PTR [r8+4]
	inc	r9d
	mov	ecx, DWORD PTR [r8+rax-4]
	mov	eax, ecx
	sub	eax, edx
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx

; 486  :         last_pos_in_px = cfg->tiles_width_split[i];

	mov	edx, ecx
	sar	eax, 6

; 487  :         tiles_col_width[i] = column_width_in_lcu;

	mov	DWORD PTR [r8+r12-4], eax

; 488  :         tiles_col_width[encoder->cfg.tiles_width_count - 1] -= column_width_in_lcu;

	movsxd	rcx, DWORD PTR [rdi+144]
	sub	DWORD PTR [r12+rcx*4-4], eax
	mov	eax, DWORD PTR [rdi+144]
	dec	eax
	cmp	r9d, eax
	jl	SHORT $LL10@kvz_encode
$LN9@kvz_encode:

; 489  :       }
; 490  :       encoder->tiles_uniform_spacing_flag = 0;

	mov	BYTE PTR [rdi+6369], 0
$LN113@kvz_encode:

; 491  :     }
; 492  : 
; 493  :     if (!cfg->tiles_height_split) {

	cmp	QWORD PTR [r15+160], 0
	movsxd	rax, DWORD PTR [rdi+148]
	jne	SHORT $LN114@kvz_encode

; 494  :       for (int i = 0; i < encoder->cfg.tiles_height_count; ++i) {

	xor	ebx, ebx
	test	eax, eax
	jle	$LN115@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	mov	r15, r14
$LL13@kvz_encode:

; 495  :         tiles_row_height[i] = ((i+1) * encoder->in.height_in_lcu) / encoder->cfg.tiles_height_count -

	mov	r8d, DWORD PTR [rdi+2540]
	lea	r10d, DWORD PTR [rbx+1]
	mov	r9d, DWORD PTR [rdi+148]
	lea	r15, QWORD PTR [r15+4]
	imul	ebx, r8d
	mov	eax, r10d
	imul	eax, r8d
	cdq
	idiv	r9d
	mov	ecx, eax
	mov	eax, ebx
	cdq
	mov	ebx, r10d
	idiv	r9d
	sub	ecx, eax
	mov	DWORD PTR [r15-4], ecx
	cmp	r10d, DWORD PTR [rdi+148]
	jl	SHORT $LL13@kvz_encode

; 496  :                                    i * encoder->in.height_in_lcu / encoder->cfg.tiles_height_count;
; 497  :       }
; 498  :     } else {

	jmp	SHORT $LN115@kvz_encode
$LN114@kvz_encode:

; 499  :       int32_t last_pos_in_px = 0;
; 500  :       tiles_row_height[encoder->cfg.tiles_height_count - 1] = encoder->in.height_in_lcu;

	mov	rcx, rax
	xor	edx, edx
	mov	eax, DWORD PTR [rdi+2540]

; 501  :       for (int i = 0; i < encoder->cfg.tiles_height_count - 1; ++i) {

	xor	r9d, r9d
	mov	DWORD PTR [r14+rcx*4-4], eax
	mov	eax, DWORD PTR [rdi+148]
	dec	eax
	test	eax, eax
	jle	SHORT $LN15@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	xor	r8d, r8d
	npad	8
$LL16@kvz_encode:

; 502  :         int32_t row_height_in_lcu = (cfg->tiles_height_split[i] - last_pos_in_px) / LCU_WIDTH;

	mov	rax, QWORD PTR [r15+160]
	lea	r8, QWORD PTR [r8+4]
	inc	r9d
	mov	ecx, DWORD PTR [r8+rax-4]
	mov	eax, ecx
	sub	eax, edx
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx

; 503  :         last_pos_in_px = cfg->tiles_height_split[i];

	mov	edx, ecx
	sar	eax, 6

; 504  :         tiles_row_height[i] = row_height_in_lcu;

	mov	DWORD PTR [r8+r14-4], eax

; 505  :         tiles_row_height[encoder->cfg.tiles_height_count - 1] -= row_height_in_lcu;

	movsxd	rcx, DWORD PTR [rdi+148]
	sub	DWORD PTR [r14+rcx*4-4], eax
	mov	eax, DWORD PTR [rdi+148]
	dec	eax
	cmp	r9d, eax
	jl	SHORT $LL16@kvz_encode
$LN15@kvz_encode:

; 506  :       }
; 507  :       encoder->tiles_uniform_spacing_flag = 0;

	mov	BYTE PTR [rdi+6369], 0
$LN115@kvz_encode:

; 508  :     }
; 509  : 
; 510  :     //(6-5) in ITU-T Rec. H.265 (04/2013)
; 511  :     tiles_col_bd[0] = 0;

	mov	rax, QWORD PTR tiles_col_bd$1$[rsp]

; 512  :     for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {

	xor	edx, edx
	mov	DWORD PTR [rax], 0
	cmp	DWORD PTR [rdi+144], edx
	jle	SHORT $LN18@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	mov	r8, rax
	mov	rcx, r12
	sub	r8, r12
	npad	8
$LL19@kvz_encode:

; 513  :       tiles_col_bd[i+1] = tiles_col_bd[i] + tiles_col_width[i];

	mov	eax, DWORD PTR [r8+rcx]
	inc	edx
	add	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r8+rcx+4], eax
	lea	rcx, QWORD PTR [rcx+4]
	cmp	edx, DWORD PTR [rdi+144]
	jl	SHORT $LL19@kvz_encode
$LN18@kvz_encode:

; 514  :     }
; 515  : 
; 516  :     //(6-6) in ITU-T Rec. H.265 (04/2013)
; 517  :     tiles_row_bd[0] = 0;
; 518  :     for (int i = 0; i < encoder->cfg.tiles_height_count; ++i) {

	xor	edx, edx
	mov	DWORD PTR [r13], 0
	cmp	DWORD PTR [rdi+148], edx
	jle	SHORT $LN21@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	mov	r8, r13
	mov	rcx, r14
	sub	r8, r14
	npad	12
$LL22@kvz_encode:

; 519  :       tiles_row_bd[i+1] = tiles_row_bd[i] + tiles_row_height[i];

	mov	eax, DWORD PTR [r8+rcx]
	inc	edx
	add	eax, DWORD PTR [rcx]
	mov	DWORD PTR [r8+rcx+4], eax
	lea	rcx, QWORD PTR [rcx+4]
	cmp	edx, DWORD PTR [rdi+148]
	jl	SHORT $LL22@kvz_encode
$LN21@kvz_encode:

; 520  :     }
; 521  : 
; 522  :     //(6-7) in ITU-T Rec. H.265 (04/2013)
; 523  :     //j == ctbAddrRs
; 524  :     for (int j = 0; j < num_ctbs; ++j) {

	xor	r15d, r15d
	test	rbp, rbp
	jle	$LN39@kvz_encode

; 392  : 
; 393  :   if (encoder->cfg.target_bitrate > 0 &&

	mov	r11, QWORD PTR tiles_row_bd$1$[rsp]
	mov	rbx, rsi
	mov	rsi, QWORD PTR tiles_col_bd$1$[rsp]
	mov	r13, rbp
	npad	5
$LL25@kvz_encode:

; 525  :       int tileX = 0, tileY = 0;
; 526  :       int tbX = j % encoder->in.width_in_lcu;

	mov	eax, r15d
	xor	r9d, r9d
	cdq
	xor	r8d, r8d
	idiv	DWORD PTR [rdi+2536]

; 527  :       int tbY = j / encoder->in.width_in_lcu;
; 528  : 
; 529  :       for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {

	xor	ecx, ecx
	mov	r10d, eax
	mov	ebp, edx
	mov	eax, DWORD PTR [rdi+144]
	test	eax, eax
	jle	SHORT $LN489@kvz_encode
	npad	15
$LL28@kvz_encode:

; 530  :         if (tbX >= tiles_col_bd[i]) tileX = i;

	cmp	ebp, DWORD PTR [rsi+rcx*4]
	cmovge	r9, rcx
	inc	rcx
	sub	rax, 1
	jne	SHORT $LL28@kvz_encode
$LN489@kvz_encode:

; 531  :       }
; 532  : 
; 533  :       for (int i = 0; i < encoder->cfg.tiles_height_count; ++i) {

	mov	ecx, DWORD PTR [rdi+148]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN490@kvz_encode
	npad	4
$LL31@kvz_encode:

; 534  :         if (tbY >= tiles_row_bd[i]) tileY = i;

	cmp	r10d, DWORD PTR [r11+rax*4]
	cmovge	r8, rax
	inc	rax
	sub	rcx, 1
	jne	SHORT $LL31@kvz_encode
$LN490@kvz_encode:

; 535  :       }
; 536  : 
; 537  :       tiles_ctb_addr_rs_to_ts[j] = 0;

	xor	ecx, ecx
	xor	edx, edx
	mov	DWORD PTR [rbx], ecx

; 538  :       for (int i = 0; i < tileX; ++i) {

	test	r9, r9
	jle	SHORT $LN33@kvz_encode
	npad	4
$LL34@kvz_encode:

; 539  :         tiles_ctb_addr_rs_to_ts[j] += tiles_row_height[tileY] * tiles_col_width[i];

	mov	eax, DWORD PTR [r12+rdx*4]
	inc	rdx
	imul	eax, DWORD PTR [r14+r8*4]
	add	ecx, eax
	mov	DWORD PTR [rbx], ecx
	cmp	rdx, r9
	jl	SHORT $LL34@kvz_encode
$LN33@kvz_encode:

; 540  :       }
; 541  :       for (int i = 0; i < tileY; ++i) {

	xor	edx, edx
	test	r8, r8
	jle	SHORT $LN36@kvz_encode
	npad	4
$LL37@kvz_encode:

; 542  :         tiles_ctb_addr_rs_to_ts[j] += encoder->in.width_in_lcu * tiles_row_height[i];

	mov	eax, DWORD PTR [r14+rdx*4]
	inc	rdx
	imul	eax, DWORD PTR [rdi+2536]
	add	ecx, eax
	mov	DWORD PTR [rbx], ecx
	cmp	rdx, r8
	jl	SHORT $LL37@kvz_encode
$LN36@kvz_encode:

; 543  :       }
; 544  :       tiles_ctb_addr_rs_to_ts[j] += (tbY - tiles_row_bd[tileY]) * tiles_col_width[tileX] +

	sub	r10d, DWORD PTR [r11+r8*4]
	inc	r15d
	imul	r10d, DWORD PTR [r12+r9*4]
	sub	r10d, DWORD PTR [rsi+r9*4]
	add	r10d, ecx
	add	r10d, ebp
	mov	DWORD PTR [rbx], r10d
	add	rbx, 4
	sub	r13, 1
	jne	$LL25@kvz_encode
	mov	rsi, QWORD PTR tiles_ctb_addr_rs_to_ts$1$[rsp]
	xor	ecx, ecx
	mov	r11, QWORD PTR tiles_tile_id$1$[rsp]
	xor	edx, edx
	mov	r8, QWORD PTR tv7341[rsp]
	mov	r9, QWORD PTR tiles_ctb_addr_ts_to_rs$1$[rsp]
	npad	7
$LL40@kvz_encode:

; 545  :                                      tbX - tiles_col_bd[tileX];
; 546  :     }
; 547  : 
; 548  :     //(6-8) in ITU-T Rec. H.265 (04/2013)
; 549  :     //Make reverse map from tile scan to raster scan
; 550  :     for (int j = 0; j < num_ctbs; ++j) {
; 551  :       tiles_ctb_addr_ts_to_rs[tiles_ctb_addr_rs_to_ts[j]] = j;

	movsxd	rax, DWORD PTR [rsi+rcx*4]
	inc	rcx
	mov	DWORD PTR [r9+rax*4], edx
	inc	edx
	cmp	rcx, r8
	jl	SHORT $LL40@kvz_encode
	mov	r13, QWORD PTR tiles_row_bd$1$[rsp]
$LN39@kvz_encode:

; 552  :     }
; 553  : 
; 554  :     //(6-9) in ITU-T Rec. H.265 (04/2013)
; 555  :     int tileIdx = 0;
; 556  :     for (int j = 0; j < encoder->cfg.tiles_height_count; ++j) {

	mov	ecx, DWORD PTR [rdi+148]
	xor	r10d, r10d
	xor	r14d, r14d
	test	ecx, ecx
	jle	$LN494@kvz_encode
	mov	rbx, r13
	mov	r13, QWORD PTR tiles_col_bd$1$[rsp]
	npad	7
$LL43@kvz_encode:

; 557  :       for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {

	xor	ebp, ebp
	cmp	DWORD PTR [rdi+144], ebp
	jle	SHORT $LN41@kvz_encode
	lea	r9, QWORD PTR [r13+4]
	npad	2
$LL46@kvz_encode:

; 558  :         for (int y = tiles_row_bd[j]; y < tiles_row_bd[j+1]; ++y) {

	mov	r8d, DWORD PTR [rbx]
	cmp	r8d, DWORD PTR [rbx+4]
	jge	SHORT $LN534@kvz_encode
	mov	eax, DWORD PTR [r9]
	npad	4
$LL49@kvz_encode:

; 559  :           for (int x = tiles_col_bd[i]; x < tiles_col_bd[i+1]; ++x) {

	mov	edx, DWORD PTR [r9-4]
	cmp	edx, eax
	jge	SHORT $LN47@kvz_encode
	npad	8
$LL52@kvz_encode:

; 560  :             tiles_tile_id[tiles_ctb_addr_rs_to_ts[y * encoder->in.width_in_lcu + x]] = tileIdx;

	mov	eax, r8d
	imul	eax, DWORD PTR [rdi+2536]
	add	eax, edx
	inc	edx
	cdqe
	movsxd	rcx, DWORD PTR [rsi+rax*4]
	mov	DWORD PTR [r11+rcx*4], r10d
	mov	eax, DWORD PTR [r9]
	cmp	edx, eax
	jl	SHORT $LL52@kvz_encode
$LN47@kvz_encode:

; 558  :         for (int y = tiles_row_bd[j]; y < tiles_row_bd[j+1]; ++y) {

	inc	r8d
	cmp	r8d, DWORD PTR [rbx+4]
	jl	SHORT $LL49@kvz_encode
$LN534@kvz_encode:

; 561  :           }
; 562  :         }
; 563  :         ++tileIdx;

	inc	r10d
	inc	ebp
	add	r9, 4
	cmp	ebp, DWORD PTR [rdi+144]
	jl	SHORT $LL46@kvz_encode
$LN41@kvz_encode:

; 552  :     }
; 553  : 
; 554  :     //(6-9) in ITU-T Rec. H.265 (04/2013)
; 555  :     int tileIdx = 0;
; 556  :     for (int j = 0; j < encoder->cfg.tiles_height_count; ++j) {

	mov	ecx, DWORD PTR [rdi+148]
	inc	r14d
	add	rbx, 4
	cmp	r14d, ecx
	jl	SHORT $LL43@kvz_encode
	mov	r13, QWORD PTR tiles_row_bd$1$[rsp]
$LN494@kvz_encode:

; 564  :       }
; 565  :     }
; 566  : 
; 567  :     if (encoder->cfg.slices & KVZ_SLICES_WPP) {

	mov	eax, DWORD PTR [rdi+2440]
	test	al, 2
	je	SHORT $LN118@kvz_encode

; 568  :       // Each WPP row will be put into a dependent slice.
; 569  :       encoder->pps.dependent_slice_segments_enabled_flag = 1;

	mov	BYTE PTR [rdi+6528], 1
$LN118@kvz_encode:

; 570  :     }
; 571  : 
; 572  :     //Slices
; 573  :     if (encoder->cfg.slices & KVZ_SLICES_TILES) {

	test	al, 1
	je	$LN119@kvz_encode

; 574  :       // Configure a single independent slice per tile.
; 575  : 
; 576  :       int *slice_addresses_in_ts;
; 577  :       encoder->slice_count = encoder->cfg.tiles_width_count * encoder->cfg.tiles_height_count;

	mov	eax, DWORD PTR [rdi+144]
	imul	eax, ecx

; 578  :       encoder->slice_addresses_in_ts = slice_addresses_in_ts = MALLOC(int, encoder->slice_count);

	movsxd	rcx, eax
	shl	rcx, 2
	mov	DWORD PTR [rdi+6432], eax
	call	QWORD PTR __imp_malloc

; 579  : 
; 580  :       int slice_id = 0;
; 581  :       for (int tile_row = 0; tile_row < encoder->cfg.tiles_height_count; ++tile_row) {

	xor	r15d, r15d
	mov	QWORD PTR [rdi+6440], rax
	mov	r10, rax
	mov	r11d, r15d
	cmp	DWORD PTR [rdi+148], r15d
	jle	SHORT $LN543@kvz_encode
	mov	r9d, r15d
$LL55@kvz_encode:

; 582  :         for (int tile_col = 0; tile_col < encoder->cfg.tiles_width_count; ++tile_col) {

	mov	r8d, r15d
	cmp	DWORD PTR [rdi+144], r15d
	jle	SHORT $LN53@kvz_encode
	mov	rdx, QWORD PTR tiles_col_bd$1$[rsp]
	npad	8
$LL58@kvz_encode:

; 583  :           int x = tiles_col_bd[tile_col];
; 584  :           int y = tiles_row_bd[tile_row];
; 585  :           int rs = y * encoder->in.width_in_lcu + x;

	mov	eax, DWORD PTR [r13]
	lea	rdx, QWORD PTR [rdx+4]
	imul	eax, DWORD PTR [rdi+2536]
	inc	r8d
	add	eax, DWORD PTR [rdx-4]

; 586  :           int ts = tiles_ctb_addr_rs_to_ts[rs];

	cdqe

; 587  :           slice_addresses_in_ts[slice_id] = ts;

	mov	ecx, DWORD PTR [rsi+rax*4]
	mov	DWORD PTR [r10+r9*4], ecx

; 588  :           slice_id += 1;

	inc	r9
	cmp	r8d, DWORD PTR [rdi+144]
	jl	SHORT $LL58@kvz_encode
$LN53@kvz_encode:

; 579  : 
; 580  :       int slice_id = 0;
; 581  :       for (int tile_row = 0; tile_row < encoder->cfg.tiles_height_count; ++tile_row) {

	inc	r11d
	add	r13, 4
	cmp	r11d, DWORD PTR [rdi+148]
	jl	SHORT $LL55@kvz_encode
$LN543@kvz_encode:

; 617  :           }
; 618  :         }
; 619  :       }
; 620  :     }
; 621  : 
; 622  : #ifdef _DEBUG_PRINT_THREADING_INFO
; 623  :     printf("Tiles columns width:");
; 624  :     for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {
; 625  :       printf(" %d", encoder->tiles_col_width[i]);
; 626  :     }
; 627  :     printf("\n");
; 628  :     printf("Tiles row height:");
; 629  :     for (int i = 0; i < encoder->cfg.tiles_height_count; ++i) {
; 630  :       printf(" %d", encoder->tiles_row_height[i]);
; 631  :     }
; 632  :     printf("\n");
; 633  :     //Print tile index map
; 634  :     for (int y = 0; y < encoder->in.height_in_lcu; ++y) {
; 635  :       for (int x = 0; x < encoder->in.width_in_lcu; ++x) {
; 636  :         const int lcu_id_rs = y * encoder->in.width_in_lcu + x;
; 637  :         const int lcu_id_ts = encoder->tiles_ctb_addr_rs_to_ts[lcu_id_rs];
; 638  :         const char slice_start = kvz_lcu_at_slice_start(encoder, lcu_id_ts) ? '|' : ' ';
; 639  :         const char slice_end = kvz_lcu_at_slice_end(encoder, lcu_id_ts)  ? '|' : ' ';
; 640  : 
; 641  :         printf("%c%03d%c", slice_start, encoder->tiles_tile_id[lcu_id_ts], slice_end);
; 642  :       }
; 643  :       printf("\n");
; 644  :     }
; 645  :     printf("\n");
; 646  :     if (encoder->cfg.wpp) {
; 647  :       printf("Wavefront Parallel Processing: enabled\n");
; 648  :     } else {
; 649  :       printf("Wavefront Parallel Processing: disabled\n");
; 650  :     }
; 651  :     printf("\n");
; 652  : #endif //KVZ_DEBUG
; 653  :   }
; 654  : 
; 655  :   for( size_t i = 0; i < KVZ_MAX_GOP_LAYERS; i++ )

	mov	rbp, QWORD PTR cfg$[rsp]
$LN63@kvz_encode:
	mov	rsi, rdi
	lea	rbx, QWORD PTR [rbp+224]
	sub	rsi, rbp
	mov	r14d, 6
	npad	11
$LL67@kvz_encode:

; 656  :   {
; 657  :       if( encoder->cfg.pu_depth_inter.min[i] < 0 || cfg->pu_depth_inter.max[i] < 0 ) continue;

	mov	eax, DWORD PTR [rsi+rbx-24]
	test	eax, eax
	js	$LN65@kvz_encode
	cmp	DWORD PTR [rbx], 0
	jl	$LN65@kvz_encode

; 658  :       assert( WITHIN( encoder->cfg.pu_depth_inter.min[i], PU_DEPTH_INTER_MIN, PU_DEPTH_INTER_MAX ) );

	cmp	eax, 3
	jle	SHORT $LN150@kvz_encode
	mov	r8d, 658				; 00000292H
	lea	rdx, OFFSET FLAT:$SG4294958006
	lea	rcx, OFFSET FLAT:$SG4294958005
	call	QWORD PTR __imp__wassert
$LN150@kvz_encode:

; 659  :       assert( WITHIN( encoder->cfg.pu_depth_inter.max[i], PU_DEPTH_INTER_MIN, PU_DEPTH_INTER_MAX ) );

	cmp	DWORD PTR [rsi+rbx], 3
	jbe	SHORT $LN152@kvz_encode
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG4294958004
	lea	rcx, OFFSET FLAT:$SG4294958003
	call	QWORD PTR __imp__wassert
$LN152@kvz_encode:

; 660  : 
; 661  :       if( encoder->cfg.pu_depth_intra.min[i] < 0 || cfg->pu_depth_intra.max[i] < 0 ) continue;

	mov	eax, DWORD PTR [rsi+rbx+24]
	test	eax, eax
	js	SHORT $LN65@kvz_encode
	cmp	DWORD PTR [rbx+48], 0
	jl	SHORT $LN65@kvz_encode

; 662  :       assert( WITHIN( encoder->cfg.pu_depth_intra.min[i], PU_DEPTH_INTRA_MIN, PU_DEPTH_INTRA_MAX ) );

	cmp	eax, 4
	jle	SHORT $LN154@kvz_encode
	mov	r8d, 662				; 00000296H
	lea	rdx, OFFSET FLAT:$SG4294958002
	lea	rcx, OFFSET FLAT:$SG4294958001
	call	QWORD PTR __imp__wassert
$LN154@kvz_encode:

; 663  :       assert( WITHIN( encoder->cfg.pu_depth_intra.max[i], PU_DEPTH_INTRA_MIN, PU_DEPTH_INTRA_MAX ) );

	cmp	DWORD PTR [rsi+rbx+48], 4
	jbe	SHORT $LN65@kvz_encode
	mov	r8d, 663				; 00000297H
	lea	rdx, OFFSET FLAT:$SG4294958000
	lea	rcx, OFFSET FLAT:$SG4294957999
	call	QWORD PTR __imp__wassert
$LN65@kvz_encode:

; 617  :           }
; 618  :         }
; 619  :       }
; 620  :     }
; 621  : 
; 622  : #ifdef _DEBUG_PRINT_THREADING_INFO
; 623  :     printf("Tiles columns width:");
; 624  :     for (int i = 0; i < encoder->cfg.tiles_width_count; ++i) {
; 625  :       printf(" %d", encoder->tiles_col_width[i]);
; 626  :     }
; 627  :     printf("\n");
; 628  :     printf("Tiles row height:");
; 629  :     for (int i = 0; i < encoder->cfg.tiles_height_count; ++i) {
; 630  :       printf(" %d", encoder->tiles_row_height[i]);
; 631  :     }
; 632  :     printf("\n");
; 633  :     //Print tile index map
; 634  :     for (int y = 0; y < encoder->in.height_in_lcu; ++y) {
; 635  :       for (int x = 0; x < encoder->in.width_in_lcu; ++x) {
; 636  :         const int lcu_id_rs = y * encoder->in.width_in_lcu + x;
; 637  :         const int lcu_id_ts = encoder->tiles_ctb_addr_rs_to_ts[lcu_id_rs];
; 638  :         const char slice_start = kvz_lcu_at_slice_start(encoder, lcu_id_ts) ? '|' : ' ';
; 639  :         const char slice_end = kvz_lcu_at_slice_end(encoder, lcu_id_ts)  ? '|' : ' ';
; 640  : 
; 641  :         printf("%c%03d%c", slice_start, encoder->tiles_tile_id[lcu_id_ts], slice_end);
; 642  :       }
; 643  :       printf("\n");
; 644  :     }
; 645  :     printf("\n");
; 646  :     if (encoder->cfg.wpp) {
; 647  :       printf("Wavefront Parallel Processing: enabled\n");
; 648  :     } else {
; 649  :       printf("Wavefront Parallel Processing: disabled\n");
; 650  :     }
; 651  :     printf("\n");
; 652  : #endif //KVZ_DEBUG
; 653  :   }
; 654  : 
; 655  :   for( size_t i = 0; i < KVZ_MAX_GOP_LAYERS; i++ )

	add	rbx, 4
	sub	r14, 1
	jne	$LL67@kvz_encode

; 664  :   }
; 665  :   // Disable in-loop filters, sign hiding and transform skip when using
; 666  :   // lossless coding.
; 667  :   if (encoder->cfg.lossless) {

	cmp	DWORD PTR [rdi+2392], r14d
	je	SHORT $LN131@kvz_encode

; 668  :     encoder->cfg.deblock_enable  = false;

	mov	QWORD PTR [rdi+40], r14

; 669  :     encoder->cfg.sao_type        = false;
; 670  :     encoder->cfg.signhide_enable = false;

	mov	DWORD PTR [rdi+52], r15d

; 671  :     encoder->cfg.trskip_enable   = false;

	mov	DWORD PTR [rdi+72], r15d
$LN131@kvz_encode:

; 672  :   }
; 673  : 
; 674  :   // If fractional framerate is set, use that instead of the floating point framerate.
; 675  :   if (encoder->cfg.framerate_num != 0) {

	mov	ecx, DWORD PTR [rdi+32]
	test	ecx, ecx
	je	SHORT $LN133@kvz_encode

; 676  :     encoder->vui.timing_info_present_flag = 1;
; 677  :     encoder->vui.num_units_in_tick = encoder->cfg.framerate_denom;
; 678  :     encoder->vui.time_scale = encoder->cfg.framerate_num;
; 679  :     if (encoder->cfg.source_scan_type != KVZ_INTERLACING_NONE) {

	cmp	BYTE PTR [rdi+88], 0
	mov	eax, DWORD PTR [rdi+36]
	mov	DWORD PTR [rdi+2600], eax
	mov	BYTE PTR [rdi+2610], 1
	mov	DWORD PTR [rdi+2604], ecx
	je	SHORT $LN133@kvz_encode

; 680  :       // when field_seq_flag=1, the time_scale and num_units_in_tick refer to
; 681  :       // field rate rather than frame rate.
; 682  :       encoder->vui.time_scale *= 2;

	lea	eax, DWORD PTR [rcx+rcx]
	mov	DWORD PTR [rdi+2604], eax
$LN133@kvz_encode:

; 683  :     }
; 684  :   }
; 685  : 
; 686  :   if (encoder->cfg.vps_period >= 0) {

	mov	ecx, DWORD PTR [rdi+8]
	test	ecx, ecx
	js	$LN134@kvz_encode

; 687  :     encoder->cfg.vps_period = encoder->cfg.vps_period * encoder->cfg.intra_period;

	mov	eax, DWORD PTR [rdi+4]
	imul	eax, ecx

; 688  :   } else {

	jmp	$LN135@kvz_encode
$LN119@kvz_encode:

; 589  :         }
; 590  :       }
; 591  : 
; 592  :     } else {
; 593  :       int *slice_addresses_in_ts;
; 594  :       encoder->slice_count = encoder->cfg.slice_count;

	movsxd	rax, DWORD PTR [rdi+176]
	mov	DWORD PTR [rdi+6432], eax

; 595  :       if (encoder->slice_count == 0) {

	test	eax, eax
	jne	SHORT $LN121@kvz_encode

; 596  :         encoder->slice_count = 1;
; 597  : 
; 598  :         encoder->slice_addresses_in_ts = slice_addresses_in_ts =

	lea	ecx, QWORD PTR [rax+4]
	mov	DWORD PTR [rdi+6432], 1
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rdi+6440], rax

; 599  :           MALLOC(int, encoder->slice_count);
; 600  :         if (!slice_addresses_in_ts) goto init_failed;

	test	rax, rax
	je	$init_failed$548

; 601  : 
; 602  :         slice_addresses_in_ts[0] = 0;

	xor	r15d, r15d
	mov	DWORD PTR [rax], r15d

; 603  : 
; 604  :       } else {

	jmp	$LN543@kvz_encode
$LN121@kvz_encode:

; 605  :         encoder->slice_addresses_in_ts = slice_addresses_in_ts =

	mov	rcx, rax
	shl	rcx, 2
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rdi+6440], rax
	mov	r9, rax

; 606  :           MALLOC(int, encoder->slice_count);
; 607  :         if (!slice_addresses_in_ts) goto init_failed;

	test	rax, rax
	je	$init_failed$548

; 608  : 
; 609  :         if (!cfg->slice_addresses_in_ts) {

	mov	rbp, QWORD PTR cfg$[rsp]
	xor	r15d, r15d
	cmp	QWORD PTR [rbp+184], r15
	jne	SHORT $LN125@kvz_encode

; 610  :           slice_addresses_in_ts[0] = 0;

	mov	DWORD PTR [rax], r15d

; 611  :           for (int i = 1; i < encoder->slice_count; ++i) {

	cmp	DWORD PTR [rdi+6432], 1
	jle	$LN63@kvz_encode
	lea	rcx, QWORD PTR [rax+4]
	mov	r8d, 1
	npad	12
$LL61@kvz_encode:

; 612  :             slice_addresses_in_ts[i] = encoder->in.width_in_lcu * encoder->in.height_in_lcu * i / encoder->slice_count;

	mov	eax, r8d
	lea	rcx, QWORD PTR [rcx+4]
	imul	eax, DWORD PTR [rdi+2540]
	inc	r8d
	imul	eax, DWORD PTR [rdi+2536]
	cdq
	idiv	DWORD PTR [rdi+6432]
	mov	DWORD PTR [rcx-4], eax
	cmp	r8d, DWORD PTR [rdi+6432]
	jl	SHORT $LL61@kvz_encode

; 613  :           }
; 614  :         } else {

	jmp	$LN63@kvz_encode
$LN125@kvz_encode:

; 615  :           for (int i = 0; i < encoder->slice_count; ++i) {

	mov	r8d, r15d
	cmp	DWORD PTR [rdi+6432], r15d
	jle	$LN63@kvz_encode
	mov	rdx, r15
	npad	13
$LL64@kvz_encode:

; 616  :             slice_addresses_in_ts[i] = cfg->slice_addresses_in_ts[i];

	mov	rax, QWORD PTR [rbp+184]
	lea	rdx, QWORD PTR [rdx+4]
	inc	r8d
	mov	ecx, DWORD PTR [rdx+rax-4]
	mov	DWORD PTR [rdx+r9-4], ecx
	cmp	r8d, DWORD PTR [rdi+6432]
	jl	SHORT $LL64@kvz_encode

; 579  : 
; 580  :       int slice_id = 0;
; 581  :       for (int tile_row = 0; tile_row < encoder->cfg.tiles_height_count; ++tile_row) {

	jmp	$LN63@kvz_encode
$LN134@kvz_encode:

; 689  :     encoder->cfg.vps_period = -1;

	mov	eax, -1
$LN135@kvz_encode:

; 690  :   }
; 691  : 
; 692  :   if(encoder->cfg.optional_key){

	mov	DWORD PTR [rdi+8], eax
	cmp	QWORD PTR [rdi+2376], 0
	je	SHORT $LN136@kvz_encode

; 693  :     encoder->cfg.optional_key = MALLOC(uint8_t,16);

	mov	ecx, 16
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rdi+2376], rax

; 694  :     if (!encoder->cfg.optional_key) goto init_failed;

	test	rax, rax
	je	$init_failed$548

; 695  :     memcpy(encoder->cfg.optional_key, cfg->optional_key, 16);

	mov	rcx, QWORD PTR [rbp+2376]
	movups	xmm0, XMMWORD PTR [rcx]
	movups	XMMWORD PTR [rax], xmm0
$LN136@kvz_encode:

; 696  :   }
; 697  : 
; 698  :   return encoder;

	mov	rax, rdi
	jmp	$LN1@kvz_encode
kvz_encoder_control_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
_TEXT	SEGMENT
value$ = 48
kvz_math_floor_log2 PROC

; 44   : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx

; 45   :   assert(value > 0);

	test	ecx, ecx
	jne	SHORT $LN6@kvz_math_f
	lea	r8d, QWORD PTR [rcx+45]
	lea	rcx, OFFSET FLAT:$SG4294958023
	lea	rdx, OFFSET FLAT:$SG4294958024
	call	QWORD PTR __imp__wassert
$LN6@kvz_math_f:

; 46   : 
; 47   :   unsigned result = 0;
; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {
; 50   :     unsigned bits = 1ull << i;
; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	xor	r9d, r9d
	mov	eax, 1
	mov	edx, eax
	mov	r8d, r9d
	rol	rdx, 4
	mov	ecx, edx
	shl	eax, cl
	cmp	ebx, eax
	mov	eax, 8
	cmovae	r8d, edx
	mov	edx, 4

; 52   :     result += shift;
; 53   :     value >>= shift;

	mov	ecx, r8d
	shr	ebx, cl
	mov	ecx, r9d
	cmp	ebx, 256				; 00000100H
	cmovae	ecx, eax
	shr	ebx, cl
	cmp	ebx, 16
	lea	eax, DWORD PTR [r8+rcx]
	mov	ecx, r9d
	cmovae	ecx, edx
	mov	edx, 2
	add	eax, ecx
	shr	ebx, cl
	cmp	ebx, 4
	mov	ecx, r9d
	cmovae	ecx, edx
	add	eax, ecx
	shr	ebx, cl
	cmp	ebx, edx
	setae	r9b
	add	eax, r9d

; 54   :   }
; 55   : 
; 56   :   return result;
; 57   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_math_floor_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
_TEXT	SEGMENT
value$ = 48
kvz_math_ceil_log2 PROC

; 60   : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx

; 61   :   assert(value > 0);

	test	ecx, ecx
	jne	SHORT $LN9@kvz_math_c
	lea	r8d, QWORD PTR [rcx+61]
	lea	rcx, OFFSET FLAT:$SG4294958021
	lea	rdx, OFFSET FLAT:$SG4294958022
	call	QWORD PTR __imp__wassert

; 45   :   assert(value > 0);

	lea	r8d, QWORD PTR [rbx+45]
	lea	rdx, OFFSET FLAT:$SG4294958024
	lea	rcx, OFFSET FLAT:$SG4294958023
	call	QWORD PTR __imp__wassert
$LN9@kvz_math_c:

; 46   : 
; 47   :   unsigned result = 0;
; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {
; 50   :     unsigned bits = 1ull << i;
; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	xor	r10d, r10d
	mov	eax, 1
	mov	edx, eax
	mov	r8d, r10d
	rol	rdx, 4

; 52   :     result += shift;
; 53   :     value >>= shift;

	mov	r9d, ebx
	mov	ecx, edx
	shl	eax, cl
	cmp	ebx, eax
	mov	eax, 8
	cmovae	r8d, edx
	mov	ecx, r8d
	shr	r9d, cl
	mov	ecx, r10d
	cmp	r9d, 256				; 00000100H
	cmovae	ecx, eax
	mov	eax, 4
	shr	r9d, cl
	cmp	r9d, 16
	lea	edx, DWORD PTR [r8+rcx]
	mov	ecx, r10d
	cmovae	ecx, eax
	mov	eax, 2
	add	edx, ecx
	shr	r9d, cl
	cmp	r9d, 4
	mov	ecx, r10d
	cmovae	ecx, eax
	shr	r9d, cl
	cmp	r9d, 2
	lea	eax, DWORD PTR [rcx+rdx]
	mov	ecx, r10d
	setae	cl
	add	eax, ecx

; 62   : 
; 63   :   // The ceil_log2 is just floor_log2 + 1, except for exact powers of 2.
; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	lea	ecx, DWORD PTR [rbx-1]
	test	ecx, ebx
	setne	r10b
	add	eax, r10d

; 65   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_math_ceil_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
cfg_num_threads PROC

; 60   :   if (kvz_g_hardware_flags.logical_cpu_count == 0) {

	mov	eax, DWORD PTR kvz_g_hardware_flags+48
	mov	ecx, 4
	test	eax, eax
	cmove	eax, ecx

; 61   :     // Default to 4 if we don't know the number of CPUs.
; 62   :     return 4;
; 63   :   }
; 64   : 
; 65   :   return kvz_g_hardware_flags.logical_cpu_count;
; 66   : }

	ret	0
cfg_num_threads ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
tv407 = 48
encoder$ = 48
get_max_parallelism PROC

; 70   : {

	push	rbp
	push	r13
	push	r14
	sub	rsp, 16

; 71   :   const int width_lcu  = CEILDIV(encoder->cfg.width, LCU_WIDTH);

	mov	eax, DWORD PTR [rcx+12]
	mov	r8, rcx

; 72   :   const int height_lcu = CEILDIV(encoder->cfg.height, LCU_WIDTH);
; 73   :   const int wpp_limit  = MIN(height_lcu, CEILDIV(width_lcu, 2));
; 74   :   const int par_frames = encoder->cfg.owf + 1;

	mov	r14d, DWORD PTR [rcx+172]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	lea	ebp, DWORD PTR [rdx+rax]
	mov	eax, DWORD PTR [rcx+16]

; 75   : 
; 76   :   int parallelism = 0;
; 77   : 
; 78   :   if (encoder->cfg.intra_period == 1) {

	mov	ecx, DWORD PTR [rcx+168]
	add	eax, 63					; 0000003fH
	cdq
	sar	ebp, 6
	and	edx, 63					; 0000003fH
	lea	r13d, DWORD PTR [rdx+rax]
	sar	r13d, 6
	lea	eax, DWORD PTR [rbp+1]
	cdq
	mov	r11d, r13d
	sub	eax, edx
	sar	eax, 1
	cmp	r13d, eax
	mov	DWORD PTR tv407[rsp], eax
	cmovge	r11d, eax
	inc	r14d
	xor	r9d, r9d
	cmp	DWORD PTR [r8+4], 1
	jne	SHORT $LN5@get_max_pa

; 79   :     int threads_per_frame;
; 80   :     if (encoder->cfg.wpp) {

	test	ecx, ecx
	jne	SHORT $LN8@get_max_pa

; 81   :       // Usually limited by width because starting to code a CTU requires
; 82   :       // that the next two CTUs in the row above have been completed.
; 83   :       threads_per_frame = wpp_limit;
; 84   :     } else {
; 85   :       // One thread for each tile.
; 86   :       threads_per_frame = encoder->cfg.tiles_width_count *

	mov	r11d, DWORD PTR [r8+148]
	imul	r11d, DWORD PTR [r8+144]
$LN8@get_max_pa:

; 87   :                           encoder->cfg.tiles_height_count;
; 88   :     }
; 89   :     // Divide by two since all frames cannot achieve the maximum
; 90   :     // parallelism all the time.
; 91   :     parallelism = par_frames * threads_per_frame / 2;

	imul	r11d, r14d
	mov	eax, r11d
	cdq
	sub	eax, edx
	sar	eax, 1

; 136  : }

	add	rsp, 16
	pop	r14
	pop	r13
	pop	rbp
	ret	0
$LN5@get_max_pa:

; 92   : 
; 93   :   } else {
; 94   :     if (encoder->cfg.wpp) {

	test	ecx, ecx
	je	$LN9@get_max_pa

; 95   :       const int last_diagonal = (width_lcu - 1) + (height_lcu - 1) * 2;

	mov	QWORD PTR [rsp+56], rbx

; 96   : 
; 97   :       // Index of a diagonal. The diagonal contains CTUs whose coordinates
; 98   :       // satisfy x + 2*y == diagonal. We start the sum from the longest
; 99   :       // diagonal.
; 100  :       int diagonal = CEILDIV(last_diagonal, 2);
; 101  : 
; 102  :       // Difference between diagonal indices in consecutive frames.
; 103  :       const int frame_delay = 1 + encoder->max_inter_ref_lcu.right +
; 104  :                               2 * encoder->max_inter_ref_lcu.down;
; 105  :       int step = frame_delay;
; 106  :       int direction = -1;

	mov	r10d, -1
	mov	QWORD PTR [rsp+64], rsi
	lea	esi, DWORD PTR [r13*2]
	mov	QWORD PTR [rsp+72], rdi

; 107  : 
; 108  :       // Compute number of threads for each parallel frame.
; 109  :       for (int num_frames = 0; num_frames < par_frames; num_frames++) {

	mov	edi, r9d
	mov	QWORD PTR [rsp+8], r12
	mov	QWORD PTR [rsp], r15
	lea	r15d, DWORD PTR [rbp-3]
	add	r15d, esi
	lea	eax, DWORD PTR [r15+1]
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [r8+6536]
	sar	eax, 1
	mov	ecx, eax
	lea	r12d, DWORD PTR [rdx*2+1]
	add	r12d, DWORD PTR [r8+6532]
	mov	ebx, r12d
	test	r14d, r14d
	jle	SHORT $LN28@get_max_pa
	npad	7
$LL4@get_max_pa:

; 110  :         if (diagonal < 0 || diagonal > last_diagonal) {

	test	ecx, ecx
	js	SHORT $LN28@get_max_pa
	cmp	ecx, r15d
	jg	SHORT $LN28@get_max_pa

; 111  :           // No room for more threads.
; 112  :           break;
; 113  :         }
; 114  : 
; 115  :         // Count number of CTUs on the diagonal.
; 116  :         if (diagonal < MIN(2 * height_lcu, width_lcu)) {

	cmp	esi, ebp
	mov	eax, esi
	cmovge	eax, ebp
	cmp	ecx, eax
	jge	SHORT $LN13@get_max_pa

; 117  :           parallelism += 1 + diagonal / 2;

	mov	eax, ecx
	test	ecx, ecx
	jns	SHORT $LN27@get_max_pa
	lea	eax, DWORD PTR [rcx+1]
$LN27@get_max_pa:
	sar	eax, 1
	inc	r9d
	add	r9d, eax

; 118  :         } else {

	jmp	SHORT $LN14@get_max_pa
$LN13@get_max_pa:

; 119  :           parallelism += MIN(

	lea	eax, DWORD PTR [rcx+1]
	cdq
	lea	r8d, DWORD PTR [r13-1]
	sub	eax, edx
	mov	edx, DWORD PTR tv407[rsp]
	sar	eax, 1
	sub	edx, eax
	add	r8d, edx
	cmp	r11d, r8d
	cmovl	r8d, r11d
	add	r9d, r8d
$LN14@get_max_pa:

; 120  :             wpp_limit,
; 121  :             height_lcu + CEILDIV(width_lcu, 2) - 1 - CEILDIV(diagonal, 2)
; 122  :           );
; 123  :         }
; 124  :         diagonal += direction * step;

	mov	edx, r10d
	inc	edi
	imul	edx, ebx

; 125  :         step += frame_delay;
; 126  :         direction = -direction;

	neg	r10d
	add	ebx, r12d
	add	ecx, edx
	cmp	edi, r14d
	jl	SHORT $LL4@get_max_pa
$LN28@get_max_pa:
	mov	r12, QWORD PTR [rsp+8]

; 131  :                     encoder->cfg.tiles_height_count;
; 132  :     }
; 133  :   }
; 134  : 
; 135  :   return parallelism;

	mov	eax, r9d
	mov	rdi, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+56]
	mov	r15, QWORD PTR [rsp]

; 136  : }

	add	rsp, 16
	pop	r14
	pop	r13
	pop	rbp
	ret	0
$LN9@get_max_pa:

; 127  :       }
; 128  : 
; 129  :     } else {
; 130  :       parallelism = encoder->cfg.tiles_width_count *

	mov	eax, DWORD PTR [r8+148]
	imul	eax, DWORD PTR [r8+144]

; 136  : }

	add	rsp, 16
	pop	r14
	pop	r13
	pop	rbp
	ret	0
get_max_parallelism ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
y$ = 8
h$ = 16
ws_weight PROC

; 149  : {

	movd	xmm3, edx

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	cvtdq2pd xmm3, xmm3
	movd	xmm0, ecx
	cvtdq2pd xmm0, xmm0
	movaps	xmm1, xmm3
	mulsd	xmm1, QWORD PTR __real@3fe0000000000000
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@400921fb54442d18
	divsd	xmm1, xmm3
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, xmm1
	jmp	cos
ws_weight ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
height$1$ = 32
tv1014 = 40
tv1013 = 48
tv1009 = 56
$T1 = 64
tv1023 = 320
encoder$ = 320
orig_roi$ = 328
width$1$ = 336
orig_width$ = 336
orig_height$ = 344
init_erp_aqp_roi PROC

; 169  : {

	mov	rax, rsp
	mov	DWORD PTR [rax+32], r9d
	mov	QWORD PTR [rax+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 256				; 00000100H

; 170  :   // Update ROI with WS-PSNR delta QPs.
; 171  :   int height = encoder->in.height_in_lcu;

	mov	esi, DWORD PTR [rcx+2540]

; 172  :   int width  = orig_roi ? orig_width : 1;

	test	rdx, rdx

; 173  : 
; 174  :   int frame_height = encoder->in.real_height;

	mov	r14d, DWORD PTR [rcx+2548]
	mov	rbp, rdx
	movaps	XMMWORD PTR [rax-88], xmm6
	mov	r15, rcx
	movaps	XMMWORD PTR [rax-104], xmm7
	mov	edi, 1
	movaps	XMMWORD PTR [rax-120], xmm8
	cmovne	edi, r8d
	movaps	XMMWORD PTR [rax-136], xmm9

; 175  : 
; 176  :   encoder->cfg.roi.width  = width;
; 177  :   encoder->cfg.roi.height = height;
; 178  :   encoder->cfg.roi.dqps   = calloc(width * height, sizeof(orig_roi[0]));

	mov	edx, 1
	movaps	XMMWORD PTR [rax-168], xmm11
	movaps	XMMWORD PTR [rax-184], xmm12
	mov	eax, edi
	imul	eax, esi
	mov	DWORD PTR [rcx+2424], edi
	mov	DWORD PTR [rcx+2428], esi

; 188  : 
; 189  :     double lcu_weight = 0.0;

	movd	xmm8, r14d
	pshufd	xmm8, xmm8, 0
	movsxd	rcx, eax
	movaps	XMMWORD PTR [rsp+112], xmm13
	movaps	XMMWORD PTR [rsp+80], xmm15
	mov	DWORD PTR height$1$[rsp], esi
	mov	DWORD PTR width$1$[rsp], edi
	movdqa	XMMWORD PTR $T1[rsp], xmm8
	call	QWORD PTR __imp_calloc
	movsd	xmm12, QWORD PTR __real@3fe0000000000000
	xor	r13d, r13d
	movsd	xmm15, QWORD PTR __real@400921fb54442d18
	xorps	xmm11, xmm11
	mov	QWORD PTR [r15+2432], rax
	mov	ebx, r13d
	test	r14d, r14d
	jle	$LN47@init_erp_a

; 179  : 
; 180  :   double total_weight = 0.0;
; 181  :   for (int y = 0; y < frame_height; y++) {

	cmp	r14d, 2
	jb	$LN56@init_erp_a

; 170  :   // Update ROI with WS-PSNR delta QPs.
; 171  :   int height = encoder->in.height_in_lcu;

	movdqa	xmm9, XMMWORD PTR __xmm@00000003000000020000000100000000
	mov	eax, r14d
	and	eax, -2147483647			; ffffffff80000001H
	jge	SHORT $LN58@init_erp_a
	dec	eax
	or	eax, -2
	inc	eax
$LN58@init_erp_a:
	movaps	xmm7, XMMWORD PTR __xmm@400921fb54442d18400921fb54442d18

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	movq	xmm0, xmm8
	movaps	xmm8, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000

; 170  :   // Update ROI with WS-PSNR delta QPs.
; 171  :   int height = encoder->in.height_in_lcu;

	mov	edi, r14d
	cvtdq2pd xmm1, xmm0
	sub	edi, eax
	movaps	xmm6, xmm8
	mulpd	xmm6, xmm1
	divpd	xmm7, xmm1
$LL4@init_erp_a:

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	movd	xmm1, ebx
	movq	xmm0, xmm9
	pshufd	xmm1, xmm1, 0
	paddd	xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm6
	addpd	xmm0, xmm8
	mulpd	xmm0, xmm7
	call	__vdecl_cos2

; 179  : 
; 180  :   double total_weight = 0.0;
; 181  :   for (int y = 0; y < frame_height; y++) {

	add	ebx, 2

; 182  :     total_weight += ws_weight(y, frame_height);

	addpd	xmm11, xmm0
	cmp	ebx, edi
	jl	SHORT $LL4@init_erp_a

; 170  :   // Update ROI with WS-PSNR delta QPs.
; 171  :   int height = encoder->in.height_in_lcu;

	movdqa	xmm8, XMMWORD PTR $T1[rsp]
	movaps	xmm0, xmm11

; 179  : 
; 180  :   double total_weight = 0.0;
; 181  :   for (int y = 0; y < frame_height; y++) {

	mov	edi, DWORD PTR width$1$[rsp]
	unpckhpd xmm0, xmm11
	addsd	xmm11, xmm0
	cmp	ebx, r14d
	jge	SHORT $LN47@init_erp_a
$LN56@init_erp_a:
	movd	xmm13, r14d
	movaps	xmm7, xmm15
	cvtdq2pd xmm13, xmm13
	movaps	xmm6, xmm13
	mulsd	xmm6, xmm12
	divsd	xmm7, xmm13
$LL37@init_erp_a:
	movd	xmm0, ebx

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm6
	addsd	xmm0, xmm12
	mulsd	xmm0, xmm7
	call	cos

; 179  : 
; 180  :   double total_weight = 0.0;
; 181  :   for (int y = 0; y < frame_height; y++) {

	inc	ebx

; 182  :     total_weight += ws_weight(y, frame_height);

	addsd	xmm11, xmm0
	cmp	ebx, r14d
	jl	SHORT $LL37@init_erp_a
	jmp	SHORT $LN3@init_erp_a
$LN47@init_erp_a:
	movd	xmm13, r14d
	cvtdq2pd xmm13, xmm13
$LN3@init_erp_a:

; 183  :   }
; 184  : 
; 185  :   for (int y_lcu = 0; y_lcu < height; y_lcu++) {

	test	esi, esi
	jle	$LN6@init_erp_a
	mov	QWORD PTR [rsp+248], r12
	mov	ecx, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+160], xmm10
	mov	r12d, r13d
	movsxd	rax, edi
	movaps	XMMWORD PTR [rsp+96], xmm14
	movsd	xmm14, QWORD PTR __real@c008000000000000
	mov	DWORD PTR tv1023[rsp], r13d
	mov	QWORD PTR tv1014[rsp], r13
	mov	QWORD PTR tv1013[rsp], rax
	mov	QWORD PTR tv1009[rsp], rsi
	npad	2
$LL7@init_erp_a:

; 186  :     int y_orig = LCU_WIDTH * y_lcu;
; 187  :     int lcu_height = MIN(LCU_WIDTH, frame_height - y_orig);

	cmp	r14d, 64				; 00000040H
	mov	esi, r14d
	xorps	xmm6, xmm6

; 190  :     for (int y = y_orig; y < y_orig + lcu_height; y++) {

	mov	ebx, r12d
	cmovg	esi, ecx
	lea	edi, DWORD PTR [r12+rsi]
	cmp	r12d, edi
	jge	$LN9@init_erp_a
	cmp	esi, 2
	jb	$LN55@init_erp_a

; 188  : 
; 189  :     double lcu_weight = 0.0;

	movdqa	xmm10, XMMWORD PTR __xmm@00000003000000020000000100000000
	mov	eax, esi
	and	eax, -2147483647			; ffffffff80000001H
	jge	SHORT $LN57@init_erp_a
	dec	eax
	or	eax, -2
	inc	eax
$LN57@init_erp_a:
	movaps	xmm9, XMMWORD PTR __xmm@3fe00000000000003fe0000000000000

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	movq	xmm0, xmm8
	movaps	xmm8, XMMWORD PTR __xmm@400921fb54442d18400921fb54442d18

; 188  : 
; 189  :     double lcu_weight = 0.0;

	mov	ebp, edi
	cvtdq2pd xmm1, xmm0
	sub	ebp, eax
	movaps	xmm7, xmm1
	mulpd	xmm7, xmm9
	divpd	xmm8, xmm1
	npad	7
$LL10@init_erp_a:

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	movd	xmm1, ebx
	movq	xmm0, xmm10
	pshufd	xmm1, xmm1, 0
	paddd	xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm7
	addpd	xmm0, xmm9
	mulpd	xmm0, xmm8
	call	__vdecl_cos2

; 190  :     for (int y = y_orig; y < y_orig + lcu_height; y++) {

	add	ebx, 2

; 191  :       lcu_weight += ws_weight(y, frame_height);

	addpd	xmm6, xmm0
	cmp	ebx, ebp
	jl	SHORT $LL10@init_erp_a

; 188  : 
; 189  :     double lcu_weight = 0.0;

	mov	rbp, QWORD PTR orig_roi$[rsp]
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0

; 190  :     for (int y = y_orig; y < y_orig + lcu_height; y++) {

	cmp	ebx, edi
	jge	SHORT $LN9@init_erp_a
$LN55@init_erp_a:
	movaps	xmm7, xmm13
	movaps	xmm8, xmm15
	mulsd	xmm7, xmm12
	divsd	xmm8, xmm13
	npad	3
$LL39@init_erp_a:
	movd	xmm0, ebx

; 150  :   return cos((y - 0.5 * h + 0.5) * (M_PI / h));

	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm7
	addsd	xmm0, xmm12
	mulsd	xmm0, xmm8
	call	cos

; 190  :     for (int y = y_orig; y < y_orig + lcu_height; y++) {

	inc	ebx

; 191  :       lcu_weight += ws_weight(y, frame_height);

	addsd	xmm6, xmm0
	cmp	ebx, edi
	jl	SHORT $LL39@init_erp_a
$LN9@init_erp_a:
	movd	xmm1, esi

; 192  :     }
; 193  :     // Normalize.
; 194  :     lcu_weight = (lcu_weight * frame_height) / (total_weight * lcu_height);

	movaps	xmm0, xmm13
	cvtdq2pd xmm1, xmm1
	mulsd	xmm0, xmm6
	mulsd	xmm1, xmm11
	divsd	xmm0, xmm1

; 195  : 
; 196  :     int8_t qp_delta = round(-ERP_AQP_STRENGTH * log2(lcu_weight));

	call	QWORD PTR __imp_log2
	mulsd	xmm0, xmm14
	call	QWORD PTR __imp_round

; 197  : 
; 198  :     if (orig_roi) {

	mov	r11, QWORD PTR tv1013[rsp]
	cvttsd2si ecx, xmm0
	test	rbp, rbp
	je	SHORT $LN14@init_erp_a

; 202  :       for (int x = 0; x < width; x++) {

	test	r11, r11
	jle	SHORT $LN5@init_erp_a

; 199  :       // If a ROI array already exists, we copy the existing values to the
; 200  :       // new array while adding qp_delta to each.
; 201  :       int y_roi = y_lcu * orig_height / height;

	mov	eax, DWORD PTR tv1023[rsp]
	mov	r8, QWORD PTR tv1014[rsp]
	cdq
	idiv	DWORD PTR height$1$[rsp]
	movsx	r9d, cl
	mov	rdx, r11
	imul	eax, DWORD PTR width$1$[rsp]
	movsxd	r10, eax
	sub	r10, r8
	add	r10, rbp
	mov	ebp, -51				; ffffffffffffffcdH
$LL13@init_erp_a:

; 203  :         encoder->cfg.roi.dqps[x + y_lcu * width] =

	movsx	ecx, BYTE PTR [r8+r10]
	add	ecx, r9d
	cmp	ecx, 51					; 00000033H
	jle	SHORT $LN19@init_erp_a
	mov	ecx, 51					; 00000033H
	jmp	SHORT $LN21@init_erp_a
$LN19@init_erp_a:
	cmp	ecx, ebp
	cmovl	ecx, ebp
$LN21@init_erp_a:
	mov	rax, QWORD PTR [r15+2432]
	mov	BYTE PTR [r8+rax], cl
	inc	r8
	sub	rdx, 1
	jne	SHORT $LL13@init_erp_a

; 204  :           CLIP(-51, 51, orig_roi[x + y_roi * width] + qp_delta);
; 205  :       }
; 206  : 
; 207  :     } else {

	mov	rbp, QWORD PTR orig_roi$[rsp]
	jmp	SHORT $LN5@init_erp_a
$LN14@init_erp_a:

; 208  :       // Otherwise, simply write qp_delta to the ROI array.
; 209  :       encoder->cfg.roi.dqps[y_lcu] = qp_delta;

	mov	rax, QWORD PTR [r15+2432]
	mov	BYTE PTR [rax+r13], cl
$LN5@init_erp_a:

; 183  :   }
; 184  : 
; 185  :   for (int y_lcu = 0; y_lcu < height; y_lcu++) {

	mov	eax, DWORD PTR orig_height$[rsp]
	add	r12d, 64				; 00000040H
	add	DWORD PTR tv1023[rsp], eax
	sub	r14d, 64				; 00000040H
	add	QWORD PTR tv1014[rsp], r11
	inc	r13
	sub	QWORD PTR tv1009[rsp], 1
	mov	ecx, 64					; 00000040H
	movdqa	xmm8, XMMWORD PTR $T1[rsp]
	jne	$LL7@init_erp_a
	movaps	xmm14, XMMWORD PTR [rsp+96]
	movaps	xmm10, XMMWORD PTR [rsp+160]
	mov	r12, QWORD PTR [rsp+248]
$LN6@init_erp_a:

; 210  :     }
; 211  :   }
; 212  : }

	movaps	xmm13, XMMWORD PTR [rsp+112]
	lea	r11, QWORD PTR [rsp+256]
	movaps	xmm6, XMMWORD PTR [r11-32]
	movaps	xmm7, XMMWORD PTR [r11-48]
	movaps	xmm8, XMMWORD PTR [r11-64]
	movaps	xmm9, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-112]
	movaps	xmm12, XMMWORD PTR [r11-128]
	movaps	xmm15, XMMWORD PTR [rsp+80]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
init_erp_aqp_roi ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
encoder$ = 8
width$ = 16
height$ = 24
kvz_encoder_control_input_init PROC

; 742  : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	ebx, edx

; 743  :   // Halve for interlaced content
; 744  :   if (encoder->in.source_scan_type != 0) height /= 2;
; 745  : 
; 746  :   encoder->in.width = width;

	mov	eax, r8d
	cdq
	mov	DWORD PTR [rcx+2528], ebx
	sub	eax, edx

; 747  :   encoder->in.height = height;
; 748  :   encoder->in.real_width = width;

	mov	DWORD PTR [rcx+2544], ebx
	sar	eax, 1
	mov	r9, rcx
	cmp	BYTE PTR [rcx+2560], 0
	mov	r10d, eax
	cmove	r10d, r8d

; 749  :   encoder->in.real_height = height;
; 750  : 
; 751  :   // If input dimensions are not divisible by the smallest block size, add
; 752  :   // pixels to the dimensions, so that they are. These extra pixels will be
; 753  :   // compressed along with the real ones but they will be cropped out before
; 754  :   // rendering.
; 755  :   if (encoder->in.width % CU_MIN_SIZE_PIXELS) {

	mov	r8d, ebx
	mov	DWORD PTR [rcx+2532], r10d
	mov	DWORD PTR [rcx+2548], r10d
	mov	ecx, ebx
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN9@kvz_encode
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN9@kvz_encode:
	test	ecx, ecx
	je	SHORT $LN3@kvz_encode

; 756  :     encoder->in.width += CU_MIN_SIZE_PIXELS - (width % CU_MIN_SIZE_PIXELS);

	sub	r8d, ecx
	add	r8d, 8
	mov	DWORD PTR [r9+2528], r8d
$LN3@kvz_encode:

; 757  :   }
; 758  : 
; 759  :   if (encoder->in.height % CU_MIN_SIZE_PIXELS) {

	mov	ecx, r10d
	and	ecx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN8@kvz_encode
	dec	ecx
	or	ecx, -8
	inc	ecx
$LN8@kvz_encode:
	mov	r11d, r10d
	test	ecx, ecx
	je	SHORT $LN4@kvz_encode

; 760  :     encoder->in.height += CU_MIN_SIZE_PIXELS - (height % CU_MIN_SIZE_PIXELS);

	sub	r11d, ecx
	add	r11d, 8
	mov	DWORD PTR [r9+2532], r11d
$LN4@kvz_encode:

; 761  :   }
; 762  : 
; 763  :   encoder->in.height_in_lcu = encoder->in.height / LCU_WIDTH;

	mov	eax, r11d
	cdq
	and	edx, 63					; 0000003fH
	lea	edi, DWORD PTR [rdx+rax]

; 764  :   encoder->in.width_in_lcu  = encoder->in.width / LCU_WIDTH;

	mov	eax, r8d
	cdq
	sar	edi, 6
	and	edx, 63					; 0000003fH
	mov	DWORD PTR [r9+2540], edi
	add	eax, edx

; 765  : 
; 766  :   // Add one extra LCU when image not divisible by LCU_WIDTH
; 767  :   if (encoder->in.height_in_lcu * LCU_WIDTH < height) {

	mov	ecx, edi
	sar	eax, 6
	shl	ecx, 6
	mov	DWORD PTR [r9+2536], eax
	cmp	ecx, r10d
	jge	SHORT $LN5@kvz_encode

; 768  :     encoder->in.height_in_lcu++;

	lea	ecx, DWORD PTR [rdi+1]
	mov	DWORD PTR [r9+2540], ecx
$LN5@kvz_encode:

; 769  :   }
; 770  : 
; 771  :   if (encoder->in.width_in_lcu * LCU_WIDTH < width) {

	mov	ecx, eax
	shl	ecx, 6
	cmp	ecx, ebx
	jge	SHORT $LN6@kvz_encode

; 772  :     encoder->in.width_in_lcu++;

	inc	eax
	mov	DWORD PTR [r9+2536], eax
$LN6@kvz_encode:

; 773  :   }
; 774  : 
; 775  :   encoder->in.pixels_per_pic = encoder->in.width * encoder->in.height;
; 776  : 
; 777  : 
; 778  :   #ifdef KVZ_DEBUG
; 779  :   if (width != encoder->in.width || height != encoder->in.height) {
; 780  :     printf("Picture buffer has been extended to be a multiple of the smallest block size:\r\n");
; 781  :     printf("  Width = %d (%d), Height = %d (%d)\r\n", width, encoder->in.width, height,
; 782  :            encoder->in.height);
; 783  :   }
; 784  :   #endif
; 785  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	imul	r8d, r11d
	movsxd	rax, r8d
	mov	QWORD PTR [r9+2552], rax
	ret	0
kvz_encoder_control_input_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder.c
_TEXT	SEGMENT
encoder$ = 64
encoder_control_init_gop_layer_weights PROC

; 796  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 797  : 
; 798  :   kvz_gop_config const * const gop = encoder->cfg.gop;
; 799  :   const int8_t gop_len = encoder->cfg.gop_len;

	movsx	rdx, BYTE PTR [rcx+300]

; 800  : 
; 801  :   int num_layers = 0;

	xor	ebp, ebp
	mov	rbx, rcx
	mov	r8d, ebp

; 802  :   for (int i = 0; i < gop_len; ++i) {

	mov	rsi, rdx
	test	dl, dl
	jle	$LN16@encoder_co
	lea	rax, QWORD PTR [rcx+314]
	mov	rcx, rdx
	npad	7
$LL4@encoder_co:

; 803  :     num_layers = MAX(gop[i].layer, num_layers);

	movsx	edi, BYTE PTR [rax]
	lea	rax, QWORD PTR [rax+64]
	cmp	edi, r8d
	cmovle	edi, r8d
	mov	r8d, edi
	sub	rcx, 1
	jne	SHORT $LL4@encoder_co

; 804  :   }
; 805  : 
; 806  :   switch (num_layers) {

	test	edi, edi
	js	$LN35@encoder_co
	cmp	edi, 1
	jle	$LN16@encoder_co
	cmp	edi, 4
	jle	$LN17@encoder_co
	cmp	edi, 5
	jne	$LN35@encoder_co

; 866  :     case 5:
; 867  :       if(!encoder->cfg.gop_lowdelay) {

	cmp	BYTE PTR [rbx+301], bpl
	jne	$LN33@encoder_co

; 868  :         // These are obtained by running HM with RA GOP 16 collecting the ratio of bits spent for each
; 869  :         // layer from the CTC sequences and then fitting power curve
; 870  :         encoder->gop_layer_weights[0] = 13.0060187535 * pow(encoder->target_avg_bpp, -0.3727651453);

	movsd	xmm1, QWORD PTR __real@bfd7db625709bd73
	movaps	XMMWORD PTR [rsp+32], xmm6
	movsd	xmm6, QWORD PTR [rbx+6464]
	movaps	xmm0, xmm6
	call	pow
	mulsd	xmm0, QWORD PTR __real@402a0314e3dae3ef

; 871  :         encoder->gop_layer_weights[1] = 7.3654107392 * pow(encoder->target_avg_bpp, -0.0854329266);

	movsd	xmm1, QWORD PTR __real@bfb5deeea9bfa22f
	movsd	QWORD PTR [rbx+6472], xmm0
	movaps	xmm0, xmm6
	call	pow
	mulsd	xmm0, QWORD PTR __real@401d762e3b99e27e

; 872  :         encoder->gop_layer_weights[2] = 3.6563990701 * pow(encoder->target_avg_bpp, -0.0576990493);

	movsd	xmm1, QWORD PTR __real@bfad8abad381f0fc
	movsd	QWORD PTR [rbx+6480], xmm0
	movaps	xmm0, xmm6
	call	pow
	mulsd	xmm0, QWORD PTR __real@400d404e27d9a26e

; 873  :         encoder->gop_layer_weights[3] = 2.1486937288 * pow(encoder->target_avg_bpp, -0.0155389471);

	movsd	xmm1, QWORD PTR __real@bf8fd2e22cdec4ed
	movsd	QWORD PTR [rbx+6488], xmm0
	movaps	xmm0, xmm6
	call	pow
	mulsd	xmm0, QWORD PTR __real@40013086567287c5

; 874  :         encoder->gop_layer_weights[4] = 1;        

	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	r8d, edi
	mov	QWORD PTR [rbx+6504], rax
	movaps	xmm6, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rbx+6496], xmm0

; 879  :       }
; 880  :       break;

	jmp	$LN8@encoder_co
$LN33@encoder_co:

; 875  :       } 
; 876  :       else {
; 877  :         fprintf(stderr, "Unsupported amount of layers (%d) for lowdelay GOP\n", num_layers);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG4294957998
	mov	rcx, rax
	call	fprintf

; 878  :         return 0;

	xor	eax, eax
	jmp	$LN1@encoder_co
$LN17@encoder_co:

; 810  :       break;
; 811  : 
; 812  :     // Use the first layers of the 4-layer weights.
; 813  :     case 2:
; 814  :     case 3:
; 815  : 
; 816  :     case 4:
; 817  :       if (encoder->cfg.gop_lowdelay) {

	movsd	xmm0, QWORD PTR [rbx+6464]
	cmp	BYTE PTR [rbx+301], bpl
	je	$LN18@encoder_co

; 818  :         // These weights are based on http://doi.org/10.1109/TIP.2014.2336550
; 819  :         // They are meant for lp-g4d3r4t1 gop, but work ok for others.
; 820  :         if (encoder->target_avg_bpp <= 0.05) {

	comisd	xmm0, QWORD PTR __real@3fa999999999999a
	ja	SHORT $LN20@encoder_co

; 821  :           encoder->gop_layer_weights[0] = 14;

	mov	rax, 4624070917402656768		; 402c000000000000H

; 822  :           encoder->gop_layer_weights[1] = 3;
; 823  :           encoder->gop_layer_weights[2] = 2;
; 824  :           encoder->gop_layer_weights[3] = 1;

	jmp	SHORT $LN77@encoder_co
$LN20@encoder_co:

; 825  :         } else if (encoder->target_avg_bpp <= 0.1) {

	comisd	xmm0, QWORD PTR __real@3fb999999999999a
	ja	SHORT $LN22@encoder_co

; 826  :           encoder->gop_layer_weights[0] = 12;

	mov	rax, 4622945017495814144		; 4028000000000000H
$LN77@encoder_co:

; 892  :       }
; 893  :   }
; 894  : 
; 895  :   // Normalize weights so that the sum of weights in a GOP is one.
; 896  :   double sum_weights = 0;
; 897  :   for (int i = 0; i < gop_len; ++i) {

	mov	QWORD PTR [rbx+6472], rax
	mov	rax, 4613937818241073152		; 4008000000000000H
	mov	QWORD PTR [rbx+6480], rax
	mov	rax, 4611686018427387904		; 4000000000000000H
	jmp	$LN75@encoder_co
$LN22@encoder_co:

; 827  :           encoder->gop_layer_weights[1] = 3;
; 828  :           encoder->gop_layer_weights[2] = 2;
; 829  :           encoder->gop_layer_weights[3] = 1;
; 830  :         } else if (encoder->target_avg_bpp <= 0.2) {

	mov	rax, 4613937818241073152		; 4008000000000000H
	mov	QWORD PTR [rbx+6480], rax
	mov	rax, 4611686018427387904		; 4000000000000000H
	mov	QWORD PTR [rbx+6488], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+6496], rax
	comisd	xmm0, QWORD PTR __real@3fc999999999999a
	ja	SHORT $LN24@encoder_co

; 831  :           encoder->gop_layer_weights[0] = 10;

	mov	rax, 4621819117588971520		; 4024000000000000H

; 832  :           encoder->gop_layer_weights[1] = 3;
; 833  :           encoder->gop_layer_weights[2] = 2;
; 834  :           encoder->gop_layer_weights[3] = 1;
; 835  :         } else {

	jmp	$LN76@encoder_co
$LN24@encoder_co:

; 836  :           encoder->gop_layer_weights[0] = 6;

	mov	rax, 4618441417868443648		; 4018000000000000H

; 837  :           encoder->gop_layer_weights[1] = 3;
; 838  :           encoder->gop_layer_weights[2] = 2;
; 839  :           encoder->gop_layer_weights[3] = 1;
; 840  :         }
; 841  :       } else {

	jmp	$LN76@encoder_co
$LN18@encoder_co:

; 842  :         // These weights are from http://doi.org/10.1109/TIP.2014.2336550
; 843  :         if (encoder->target_avg_bpp <= 0.05) {

	comisd	xmm0, QWORD PTR __real@3fa999999999999a
	ja	SHORT $LN26@encoder_co

; 844  :           encoder->gop_layer_weights[0] = 30;

	mov	rax, 4629137466983448576		; 403e000000000000H
	mov	QWORD PTR [rbx+6472], rax

; 845  :           encoder->gop_layer_weights[1] = 8;

	mov	rax, 4620693217682128896		; 4020000000000000H

; 846  :           encoder->gop_layer_weights[2] = 4;
; 847  :           encoder->gop_layer_weights[3] = 1;

	jmp	SHORT $LN74@encoder_co
$LN26@encoder_co:

; 848  :         } else if (encoder->target_avg_bpp <= 0.1) {

	comisd	xmm0, QWORD PTR __real@3fb999999999999a
	ja	SHORT $LN28@encoder_co

; 849  :           encoder->gop_layer_weights[0] = 25;

	mov	rax, 4627730092099895296		; 4039000000000000H
	mov	QWORD PTR [rbx+6472], rax

; 850  :           encoder->gop_layer_weights[1] = 7;

	mov	rax, 4619567317775286272		; 401c000000000000H
$LN74@encoder_co:

; 892  :       }
; 893  :   }
; 894  : 
; 895  :   // Normalize weights so that the sum of weights in a GOP is one.
; 896  :   double sum_weights = 0;
; 897  :   for (int i = 0; i < gop_len; ++i) {

	mov	QWORD PTR [rbx+6480], rax
	mov	rax, 4616189618054758400		; 4010000000000000H
$LN75@encoder_co:
	mov	QWORD PTR [rbx+6488], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+6496], rax
	jmp	$LN8@encoder_co
$LN28@encoder_co:

; 851  :           encoder->gop_layer_weights[2] = 4;
; 852  :           encoder->gop_layer_weights[3] = 1;
; 853  :         } else if (encoder->target_avg_bpp <= 0.2) {

	mov	rax, 4616189618054758400		; 4010000000000000H
	mov	QWORD PTR [rbx+6488], rax
	mov	rax, 4607182418800017408		; 3ff0000000000000H
	mov	QWORD PTR [rbx+6496], rax
	comisd	xmm0, QWORD PTR __real@3fc999999999999a
	ja	SHORT $LN30@encoder_co

; 854  :           encoder->gop_layer_weights[0] = 20;

	mov	rax, 4626322717216342016		; 4034000000000000H
	mov	QWORD PTR [rbx+6472], rax

; 855  :           encoder->gop_layer_weights[1] = 6;

	mov	rax, 4618441417868443648		; 4018000000000000H

; 861  :           encoder->gop_layer_weights[2] = 4;
; 862  :           encoder->gop_layer_weights[3] = 1;
; 863  :         }
; 864  :       }
; 865  :       break;

	mov	QWORD PTR [rbx+6480], rax
	jmp	$LN8@encoder_co
$LN30@encoder_co:

; 856  :           encoder->gop_layer_weights[2] = 4;
; 857  :           encoder->gop_layer_weights[3] = 1;
; 858  :         } else {
; 859  :           encoder->gop_layer_weights[0] = 15;

	mov	rax, 4624633867356078080		; 402e000000000000H
	mov	QWORD PTR [rbx+6472], rax

; 860  :           encoder->gop_layer_weights[1] = 5;

	mov	rax, 4617315517961601024		; 4014000000000000H

; 861  :           encoder->gop_layer_weights[2] = 4;
; 862  :           encoder->gop_layer_weights[3] = 1;
; 863  :         }
; 864  :       }
; 865  :       break;

	mov	QWORD PTR [rbx+6480], rax
	jmp	$LN8@encoder_co
$LN35@encoder_co:

; 881  :     default:
; 882  :       if (!encoder->cfg.gop_lowdelay && encoder->cfg.gop_len == 16) {

	cmp	BYTE PTR [rbx+301], bpl
	jne	SHORT $LN36@encoder_co
	cmp	dl, 16
	jne	SHORT $LN36@encoder_co

; 883  :         fprintf(stdout, 

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, edi
	lea	rdx, OFFSET FLAT:$SG4294957997
	mov	rcx, rax
	call	fprintf

; 884  :                 "Rate control: Using experimental weights for GOP layers (%d)\n",
; 885  :                 num_layers);
; 886  :         for (int i = 0; i < MAX_GOP_LAYERS; ++i) {
; 887  :           encoder->gop_layer_weights[i] = (i == 0) ? 10 : 2;

	mov	rax, 4621819117588971520		; 4024000000000000H
	mov	r8d, edi
	mov	QWORD PTR [rbx+6472], rax
	mov	rax, 4611686018427387904		; 4000000000000000H
	mov	QWORD PTR [rbx+6480], rax
	mov	QWORD PTR [rbx+6488], rax
	mov	QWORD PTR [rbx+6496], rax
	mov	QWORD PTR [rbx+6504], rax
	mov	QWORD PTR [rbx+6512], rax
	jmp	SHORT $LN8@encoder_co
$LN36@encoder_co:

; 888  :         }
; 889  :       } else {
; 890  :         fprintf(stderr, "Unsupported number of GOP layers (%d)\n", num_layers);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, edi
	lea	rdx, OFFSET FLAT:$SG4294957996
	mov	rcx, rax
	call	fprintf

; 891  :         return 0;

	xor	eax, eax
	jmp	$LN1@encoder_co
$LN16@encoder_co:

; 807  :     case 0:
; 808  :     case 1:
; 809  :       encoder->gop_layer_weights[0] = 1;

	mov	rax, 4607182418800017408		; 3ff0000000000000H
$LN76@encoder_co:

; 892  :       }
; 893  :   }
; 894  : 
; 895  :   // Normalize weights so that the sum of weights in a GOP is one.
; 896  :   double sum_weights = 0;
; 897  :   for (int i = 0; i < gop_len; ++i) {

	mov	QWORD PTR [rbx+6472], rax
$LN8@encoder_co:
	xorps	xmm2, xmm2
	mov	rcx, rbp
	cmp	rsi, 4
	jl	SHORT $LC59@encoder_co

; 803  :     num_layers = MAX(gop[i].layer, num_layers);

	lea	r9, QWORD PTR [rsi-4]
	shr	r9, 2
	lea	rdx, QWORD PTR [rbx+378]
	inc	r9
	lea	rcx, QWORD PTR [r9*4]
	npad	9

; 892  :       }
; 893  :   }
; 894  : 
; 895  :   // Normalize weights so that the sum of weights in a GOP is one.
; 896  :   double sum_weights = 0;
; 897  :   for (int i = 0; i < gop_len; ++i) {

$LL60@encoder_co:

; 898  :     sum_weights += encoder->gop_layer_weights[gop[i].layer - 1];

	movsx	rax, BYTE PTR [rdx-64]
	addsd	xmm2, QWORD PTR [rbx+rax*8+6464]
	movsx	rax, BYTE PTR [rdx]
	addsd	xmm2, QWORD PTR [rbx+rax*8+6464]
	movsx	rax, BYTE PTR [rdx+64]
	addsd	xmm2, QWORD PTR [rbx+rax*8+6464]
	movsx	rax, BYTE PTR [rdx+128]
	add	rdx, 256				; 00000100H
	addsd	xmm2, QWORD PTR [rbx+rax*8+6464]
	sub	r9, 1
	jne	SHORT $LL60@encoder_co
$LC59@encoder_co:

; 892  :       }
; 893  :   }
; 894  : 
; 895  :   // Normalize weights so that the sum of weights in a GOP is one.
; 896  :   double sum_weights = 0;
; 897  :   for (int i = 0; i < gop_len; ++i) {

	cmp	rcx, rsi
	jge	SHORT $LN58@encoder_co
	mov	rax, rcx
	lea	rdx, QWORD PTR [rbx+314]
	shl	rax, 6
	add	rdx, rax
$LC12@encoder_co:

; 898  :     sum_weights += encoder->gop_layer_weights[gop[i].layer - 1];

	movsx	rax, BYTE PTR [rdx]
	inc	rcx
	add	rdx, 64					; 00000040H
	addsd	xmm2, QWORD PTR [rbx+rax*8+6464]
	cmp	rcx, rsi
	jl	SHORT $LC12@encoder_co
$LN58@encoder_co:

; 899  :   }
; 900  :   for (int i = 0; i < num_layers; ++i) {

	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	movsxd	rdx, r8d
	cmp	rdx, 4
	jl	SHORT $LN65@encoder_co

; 803  :     num_layers = MAX(gop[i].layer, num_layers);

	movaps	xmm3, xmm4
	lea	rcx, QWORD PTR [rdx-4]
	divsd	xmm3, xmm2
	shr	rcx, 2
	lea	rax, QWORD PTR [rbx+6480]
	inc	rcx
	lea	rbp, QWORD PTR [rcx*4]

; 901  :     encoder->gop_layer_weights[i] /= sum_weights;

	unpcklpd xmm3, xmm3
	npad	4
$LL63@encoder_co:
	movups	xmm0, XMMWORD PTR [rax-8]
	lea	rax, QWORD PTR [rax+32]
	mulpd	xmm0, xmm3
	movups	XMMWORD PTR [rax-40], xmm0
	movups	xmm0, XMMWORD PTR [rax-24]
	mulpd	xmm0, xmm3
	movups	XMMWORD PTR [rax-24], xmm0
	sub	rcx, 1
	jne	SHORT $LL63@encoder_co
$LN65@encoder_co:

; 899  :   }
; 900  :   for (int i = 0; i < num_layers; ++i) {

	cmp	rbp, rdx
	jge	SHORT $LN61@encoder_co
	lea	rcx, QWORD PTR [rbx+6472]
	sub	rdx, rbp
	lea	rcx, QWORD PTR [rcx+rbp*8]
	divsd	xmm4, xmm2
$LC15@encoder_co:
	lea	rcx, QWORD PTR [rcx+8]

; 901  :     encoder->gop_layer_weights[i] /= sum_weights;

	movaps	xmm0, xmm4
	mulsd	xmm0, QWORD PTR [rcx-8]
	movsd	QWORD PTR [rcx-8], xmm0
	sub	rdx, 1
	jne	SHORT $LC15@encoder_co
$LN61@encoder_co:

; 902  :   }
; 903  : 
; 904  :   return 1;

	mov	eax, 1
$LN1@encoder_co:

; 905  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
encoder_control_init_gop_layer_weights ENDP
_TEXT	ENDS
END
