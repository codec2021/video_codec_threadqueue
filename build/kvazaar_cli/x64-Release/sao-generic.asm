; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9 DD 01H ; `sao_calc_eo_cat'::`2'::sao_eo_idx_to_eo_category
	DD	02H
	DD	00H
	DD	03H
	DD	04H
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294947842
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294947841
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294947840
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294947839
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294947838
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294947837
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294947836
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294947835
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294947834
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294947833
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294947832
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294947831
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294947830
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294947829
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294947828
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294947827
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294947826
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294947825
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294947824
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294947823
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294947822
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294947821
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294947820
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294947819
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294947818
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294947817
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294947816
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294947815
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294947814
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294947813
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294947812
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294947811
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294947810
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294947809
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294947808
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294947807
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294947806
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294947805
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294947804
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294947803
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294947802
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294947801
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294947800
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294947799
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294947798
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294947797
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294947796
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294947795
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294947794
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294947793
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294947792
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294947791
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294947790
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294947789
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294947788
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294947787
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294947786
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294947785
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294947784
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294947783
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294947782
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294947781
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294947780
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294947792 DB 'quant', 00H
	ORG $+7
$SG4294947842 DB 'array_checksum', 00H
	ORG $+1
$SG4294947841 DB 'array_md5', 00H
	ORG $+6
$SG4294947840 DB 'reg_sad', 00H
$SG4294947839 DB 'sad_4x4', 00H
$SG4294947838 DB 'sad_8x8', 00H
$SG4294947837 DB 'sad_16x16', 00H
	ORG $+6
$SG4294947836 DB 'sad_32x32', 00H
	ORG $+6
$SG4294947835 DB 'sad_64x64', 00H
	ORG $+6
$SG4294947834 DB 'satd_4x4', 00H
	ORG $+7
$SG4294947833 DB 'satd_8x8', 00H
	ORG $+7
$SG4294947832 DB 'satd_16x16', 00H
	ORG $+5
$SG4294947831 DB 'satd_32x32', 00H
	ORG $+5
$SG4294947830 DB 'satd_64x64', 00H
	ORG $+5
$SG4294947829 DB 'satd_any_size', 00H
	ORG $+2
$SG4294947828 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294947827 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294947826 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294947825 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294947824 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294947823 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294947822 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294947821 DB 'satd_16x16_dual', 00H
$SG4294947820 DB 'satd_32x32_dual', 00H
$SG4294947819 DB 'satd_64x64_dual', 00H
$SG4294947818 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294947817 DB 'pixels_calc_ssd', 00H
$SG4294947816 DB 'bipred_average', 00H
	ORG $+1
$SG4294947815 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294947814 DB 'ver_sad', 00H
$SG4294947813 DB 'hor_sad', 00H
$SG4294947812 DB 'pixel_var', 00H
	ORG $+6
$SG4294947811 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294947810 DB 'dct_4x4', 00H
$SG4294947809 DB 'dct_8x8', 00H
$SG4294947808 DB 'dct_16x16', 00H
	ORG $+6
$SG4294947807 DB 'dct_32x32', 00H
	ORG $+6
$SG4294947806 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294947805 DB 'idct_4x4', 00H
	ORG $+7
$SG4294947804 DB 'idct_8x8', 00H
	ORG $+7
$SG4294947803 DB 'idct_16x16', 00H
	ORG $+5
$SG4294947802 DB 'idct_32x32', 00H
	ORG $+5
$SG4294947801 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294947800 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294947799 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294947798 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294947797 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294947796 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294947795 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294947794 DB 'sample_octpel_chroma_hi', 00H
$SG4294947793 DB 'get_extended_block', 00H
	ORG $+5
$SG4294947791 DB 'quantize_residual', 00H
	ORG $+6
$SG4294947790 DB 'dequant', 00H
$SG4294947789 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294947788 DB 'fast_coeff_cost', 00H
$SG4294947787 DB 'angular_pred', 00H
	ORG $+3
$SG4294947786 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294947785 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294947784 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294947783 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294947782 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294947781 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294947780 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategy_register_sao_generic
pdata	SEGMENT
$pdata$sao_reconstruct_color_generic DD imagerel sao_reconstruct_color_generic
	DD	imagerel sao_reconstruct_color_generic+715
	DD	imagerel $unwind$sao_reconstruct_color_generic
$pdata$calc_sao_edge_dir_generic DD imagerel calc_sao_edge_dir_generic
	DD	imagerel calc_sao_edge_dir_generic+83
	DD	imagerel $unwind$calc_sao_edge_dir_generic
$pdata$6$calc_sao_edge_dir_generic DD imagerel calc_sao_edge_dir_generic+83
	DD	imagerel calc_sao_edge_dir_generic+404
	DD	imagerel $chain$6$calc_sao_edge_dir_generic
$pdata$7$calc_sao_edge_dir_generic DD imagerel calc_sao_edge_dir_generic+404
	DD	imagerel calc_sao_edge_dir_generic+410
	DD	imagerel $chain$7$calc_sao_edge_dir_generic
$pdata$sao_band_ddistortion_generic DD imagerel sao_band_ddistortion_generic
	DD	imagerel sao_band_ddistortion_generic+51
	DD	imagerel $unwind$sao_band_ddistortion_generic
$pdata$5$sao_band_ddistortion_generic DD imagerel sao_band_ddistortion_generic+51
	DD	imagerel sao_band_ddistortion_generic+259
	DD	imagerel $chain$5$sao_band_ddistortion_generic
$pdata$6$sao_band_ddistortion_generic DD imagerel sao_band_ddistortion_generic+259
	DD	imagerel sao_band_ddistortion_generic+269
	DD	imagerel $chain$6$sao_band_ddistortion_generic
$pdata$sao_edge_ddistortion_generic DD imagerel sao_edge_ddistortion_generic
	DD	imagerel sao_edge_ddistortion_generic+107
	DD	imagerel $unwind$sao_edge_ddistortion_generic
$pdata$3$sao_edge_ddistortion_generic DD imagerel sao_edge_ddistortion_generic+107
	DD	imagerel sao_edge_ddistortion_generic+432
	DD	imagerel $chain$3$sao_edge_ddistortion_generic
$pdata$4$sao_edge_ddistortion_generic DD imagerel sao_edge_ddistortion_generic+432
	DD	imagerel sao_edge_ddistortion_generic+445
	DD	imagerel $chain$4$sao_edge_ddistortion_generic
$pdata$kvz_strategy_register_sao_generic DD imagerel $LN4
	DD	imagerel $LN4+194
	DD	imagerel $unwind$kvz_strategy_register_sao_generic
xdata	SEGMENT
$unwind$sao_reconstruct_color_generic DD 0b2101H
	DD	0883421H
	DD	0800121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
$unwind$calc_sao_edge_dir_generic DD 020c01H
	DD	07008920cH
$chain$6$calc_sao_edge_dir_generic DD 0e2b21H
	DD	06f42bH
	DD	07e423H
	DD	08d41fH
	DD	09c417H
	DD	0f640fH
	DD	0e540bH
	DD	0c3404H
	DD	imagerel calc_sao_edge_dir_generic
	DD	imagerel calc_sao_edge_dir_generic+83
	DD	imagerel $unwind$calc_sao_edge_dir_generic
$chain$7$calc_sao_edge_dir_generic DD 021H
	DD	imagerel calc_sao_edge_dir_generic
	DD	imagerel calc_sao_edge_dir_generic+83
	DD	imagerel $unwind$calc_sao_edge_dir_generic
$unwind$sao_band_ddistortion_generic DD 031201H
	DD	0f00e4212H
	DD	0700cH
$chain$5$sao_band_ddistortion_generic DD 0c2621H
	DD	0e426H
	DD	01d41dH
	DD	02c416H
	DD	03640fH
	DD	04540bH
	DD	0b3404H
	DD	imagerel sao_band_ddistortion_generic
	DD	imagerel sao_band_ddistortion_generic+51
	DD	imagerel $unwind$sao_band_ddistortion_generic
$chain$6$sao_band_ddistortion_generic DD 021H
	DD	imagerel sao_band_ddistortion_generic
	DD	imagerel sao_band_ddistortion_generic+51
	DD	imagerel $unwind$sao_band_ddistortion_generic
$unwind$sao_edge_ddistortion_generic DD 050f01H
	DD	0d00b820fH
	DD	07007c009H
	DD	05006H
$chain$3$sao_edge_ddistortion_generic DD 081821H
	DD	06f418H
	DD	07e413H
	DD	08640eH
	DD	0e3405H
	DD	imagerel sao_edge_ddistortion_generic
	DD	imagerel sao_edge_ddistortion_generic+107
	DD	imagerel $unwind$sao_edge_ddistortion_generic
$chain$4$sao_edge_ddistortion_generic DD 021H
	DD	imagerel sao_edge_ddistortion_generic
	DD	imagerel sao_edge_ddistortion_generic+107
	DD	imagerel $unwind$sao_edge_ddistortion_generic
$unwind$kvz_strategy_register_sao_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+3
$SG4294947772 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294947773 DB 'generic', 00H
$SG4294947774 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294947775 DB 'generic', 00H
$SG4294947776 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294947777 DB 'generic', 00H
$SG4294947778 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294947779 DB 'generic', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_sao_generic PROC

; 128  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 129  :   bool success = true;
; 130  : 
; 131  :   success &= kvz_strategyselector_register(opaque, "sao_edge_ddistortion", "generic", 0, &sao_edge_ddistortion_generic);

	lea	rax, OFFSET FLAT:sao_edge_ddistortion_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294947779
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947778
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 132  :   success &= kvz_strategyselector_register(opaque, "calc_sao_edge_dir", "generic", 0, &calc_sao_edge_dir_generic);

	lea	r8, OFFSET FLAT:$SG4294947777
	lea	rax, OFFSET FLAT:calc_sao_edge_dir_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947776
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 133  :   success &= kvz_strategyselector_register(opaque, "sao_reconstruct_color", "generic", 0, &sao_reconstruct_color_generic);

	lea	r8, OFFSET FLAT:$SG4294947775
	lea	rax, OFFSET FLAT:sao_reconstruct_color_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947774
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 134  :   success &= kvz_strategyselector_register(opaque, "sao_band_ddistortion", "generic", 0, &sao_band_ddistortion_generic);

	lea	r8, OFFSET FLAT:$SG4294947773
	lea	rax, OFFSET FLAT:sao_band_ddistortion_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947772
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register

; 135  : 
; 136  :   return success;
; 137  : }

	mov	rsi, QWORD PTR [rsp+72]
	and	eax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_sao_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
_TEXT	SEGMENT
a$ = 8
b$ = 16
c$ = 24
sao_calc_eo_cat PROC

; 44   :   // Mapping relationships between a, b and c to eo_idx.
; 45   :   static const int sao_eo_idx_to_eo_category[] = { 1, 2, 0, 3, 4 };
; 46   : 
; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	eax, cl
	xor	ecx, ecx
	movzx	r9d, r8b
	mov	r8d, r9d
	sub	r8d, eax
	movzx	eax, dl
	sub	r9d, eax
	mov	edx, ecx
	test	r9d, r9d
	mov	eax, r8d
	setg	dl
	shr	eax, 31
	add	edx, 2
	shr	r9d, 31
	sub	edx, r9d
	sub	edx, eax
	test	r8d, r8d
	setg	cl
	lea	eax, DWORD PTR [rcx+rdx]

; 48   : 
; 49   :   return sao_eo_idx_to_eo_category[eo_idx];

	cdqe
	lea	rcx, OFFSET FLAT:?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9
	mov	eax, DWORD PTR [rcx+rax*4]

; 50   : }

	ret	0
sao_calc_eo_cat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
_TEXT	SEGMENT
tv840 = 0
b_ofs$ = 8
a_ofs$ = 16
b_ofs$1$ = 24
a_ofs$1$ = 32
orig_data$ = 112
rec_data$ = 120
block_width$ = 128
tv839 = 136
block_height$ = 136
y$1$ = 144
eo_class$ = 144
offsets$ = 152
sao_edge_ddistortion_generic PROC

; 58   : {

	mov	DWORD PTR [rsp+24], r8d
	push	rbp
	push	rdi
	push	r12
	push	r13
	sub	rsp, 72					; 00000048H
	mov	r12, rcx

; 59   :   int y, x;
; 60   :   int32_t sum = 0;
; 61   :   vector2d_t a_ofs = g_sao_edge_offsets[eo_class][0];

	lea	rax, OFFSET FLAT:__ImageBase
	movsxd	rcx, DWORD PTR eo_class$[rsp]
	mov	ebp, 1
	add	rcx, rcx
	mov	DWORD PTR y$1$[rsp], ebp
	xor	edi, edi
	mov	r11d, r8d
	mov	r13, rdx
	mov	r10, QWORD PTR g_sao_edge_offsets[rax+rcx*8]

; 62   :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];

	mov	rcx, QWORD PTR g_sao_edge_offsets[rax+rcx*8+8]

; 63   : 
; 64   :   for (y = 1; y < block_height - 1; y++) {

	lea	eax, DWORD PTR [r9-1]
	mov	QWORD PTR a_ofs$1$[rsp], r10
	mov	QWORD PTR a_ofs$[rsp], r10
	mov	QWORD PTR b_ofs$1$[rsp], rcx
	mov	QWORD PTR b_ofs$[rsp], rcx
	mov	DWORD PTR tv840[rsp], eax
	cmp	eax, ebp
	jle	$LN21@sao_edge_d
	mov	QWORD PTR [rsp+112], rbx
	lea	r9d, DWORD PTR [r8-1]
	mov	QWORD PTR [rsp+64], rsi
	mov	QWORD PTR [rsp+56], r14
	mov	QWORD PTR [rsp+48], r15
	mov	DWORD PTR tv839[rsp], r9d
	npad	5
$LL4@sao_edge_d:

; 65   :     for (x = 1; x < block_width - 1; x++) {

	cmp	r9d, 1
	jle	$LN2@sao_edge_d
	mov	r8d, DWORD PTR b_ofs$[rsp+4]
	lea	ebx, DWORD PTR [r9-1]
	mov	eax, DWORD PTR a_ofs$[rsp+4]
	add	r8d, ebp
	sub	eax, r8d
	mov	r14d, ebp
	sub	r14d, r8d
	add	eax, ebp
	imul	r14d, r11d
	lea	rbp, OFFSET FLAT:__ImageBase
	mov	edx, r8d
	imul	eax, r11d
	imul	edx, r11d
	sub	r14d, ecx
	inc	edx
	add	edx, ecx
	sub	eax, ecx
	lea	ecx, DWORD PTR [rax+r10]
	mov	r10, QWORD PTR offsets$[rsp]
$LL7@sao_edge_d:

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	r8d, BYTE PTR [rdx+r13]

; 71   :       uint8_t   b    =  rec_data[b_pos];
; 72   :       uint8_t   c    =  rec_data[c_pos];

	lea	eax, DWORD PTR [r14+rdx]

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	esi, BYTE PTR [rax+r13]
	xor	r9d, r9d

; 71   :       uint8_t   b    =  rec_data[b_pos];
; 72   :       uint8_t   c    =  rec_data[c_pos];

	mov	r15d, eax

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	mov	r11d, esi
	sub	r11d, r8d

; 66   :       uint32_t c_pos =  y            * block_width + x;
; 67   :       uint32_t a_pos = (y + a_ofs.y) * block_width + x + a_ofs.x;
; 68   :       uint32_t b_pos = (y + b_ofs.y) * block_width + x + b_ofs.x;
; 69   : 
; 70   :       uint8_t   a    =  rec_data[a_pos];

	lea	eax, DWORD PTR [rcx+rdx]

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	eax, BYTE PTR [rax+r13]
	mov	r8d, esi
	sub	r8d, eax
	mov	eax, r11d
	test	r8d, r8d
	setg	r9b
	shr	eax, 31
	add	r9d, 2
	shr	r8d, 31
	sub	r9d, r8d
	sub	r9d, eax
	xor	eax, eax
	test	r11d, r11d
	setg	al
	add	eax, r9d

; 48   : 
; 49   :   return sao_eo_idx_to_eo_category[eo_idx];

	cdqe

; 73   :       uint8_t   orig = orig_data[c_pos];
; 74   : 
; 75   :       int32_t eo_cat = sao_calc_eo_cat(a, b, c);
; 76   :       int32_t offset = offsets[eo_cat];

	movsxd	rax, DWORD PTR ?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9[rbp+rax*4]
	mov	r9d, DWORD PTR [r10+rax*4]

; 77   : 
; 78   :       if (offset != 0) {

	test	r9d, r9d
	je	SHORT $LN5@sao_edge_d

; 79   :         int32_t diff   = orig - c;

	movzx	eax, BYTE PTR [r15+r12]
	sub	eax, esi

; 80   :         int32_t delta  = diff - offset;

	mov	r8d, eax

; 81   :         int32_t curr   = delta * delta - diff * diff;

	imul	eax, eax
	sub	r8d, r9d
	imul	r8d, r8d

; 82   : 
; 83   :         sum += curr;

	sub	r8d, eax
	add	edi, r8d
$LN5@sao_edge_d:

; 65   :     for (x = 1; x < block_width - 1; x++) {

	inc	edx
	sub	rbx, 1
	jne	$LL7@sao_edge_d
	mov	rcx, QWORD PTR b_ofs$1$[rsp]
	mov	r10, QWORD PTR a_ofs$1$[rsp]
	mov	ebp, DWORD PTR y$1$[rsp]
	mov	r11d, DWORD PTR block_width$[rsp]
	mov	r9d, DWORD PTR tv839[rsp]
	mov	eax, DWORD PTR tv840[rsp]
$LN2@sao_edge_d:

; 63   : 
; 64   :   for (y = 1; y < block_height - 1; y++) {

	inc	ebp
	mov	DWORD PTR y$1$[rsp], ebp
	cmp	ebp, eax
	jl	$LL4@sao_edge_d

; 84   :       }
; 85   :     }
; 86   :   }
; 87   :   return sum;

	mov	r15, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+112]
$LN21@sao_edge_d:

; 88   : }

	mov	eax, edi
	add	rsp, 72					; 00000048H
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
sao_edge_ddistortion_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
_TEXT	SEGMENT
tv487 = 64
state$ = 64
orig_data$ = 72
rec_data$ = 80
block_width$ = 88
block_height$ = 96
band_pos$ = 104
sao_bands$ = 112
sao_band_ddistortion_generic PROC

; 97   : {

	mov	r11, rsp
	mov	QWORD PTR [r11+24], r8
	mov	QWORD PTR [r11+16], rdx
	push	rdi
	push	r15
	sub	rsp, 40					; 00000028H

; 98   :   int y, x;
; 99   :   int shift = state->encoder_control->bitdepth-5;

	mov	rax, QWORD PTR [rcx]

; 100  :   int sum = 0;

	xor	edi, edi
	movsxd	r15, r9d
	movzx	r9d, BYTE PTR [rax+2592]

; 101  :   for (y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR block_height$[rsp]
	mov	BYTE PTR tv487[rsp], r9b
	test	eax, eax
	jle	$LN18@sao_band_d

; 98   :   int y, x;
; 99   :   int shift = state->encoder_control->bitdepth-5;

	mov	QWORD PTR [r11+32], rbx
	mov	rcx, r15
	mov	QWORD PTR [r11-24], rbp
	mov	QWORD PTR [r11-32], rsi
	mov	rsi, rdx
	mov	QWORD PTR [r11-40], r12
	mov	r12d, eax
	mov	QWORD PTR [r11-48], r13
	mov	r13d, DWORD PTR band_pos$[rsp]
	mov	QWORD PTR [rsp], r14
	mov	r14, QWORD PTR sao_bands$[rsp]
	npad	2
$LL4@sao_band_d:

; 102  :     for (x = 0; x < block_width; ++x) {

	test	r15d, r15d
	jle	SHORT $LN2@sao_band_d
	lea	eax, DWORD PTR [r9-5]
	mov	ebx, r15d
	mov	r11, r8
	movzx	ebp, al
	sub	r11, rdx
	mov	r9, rsi
	npad	8
$LL7@sao_band_d:

; 103  :       const int32_t curr_pos = y * block_width + x;
; 104  : 
; 105  :       kvz_pixel rec  =  rec_data[curr_pos];
; 106  :       kvz_pixel orig = orig_data[curr_pos];
; 107  : 
; 108  :       int32_t band = (rec >> shift) - band_pos;

	movzx	r10d, BYTE PTR [r11+r9]
	mov	ecx, ebp
	mov	eax, r10d

; 109  :       int32_t offset = 0;

	xor	r8d, r8d
	shr	eax, cl
	sub	eax, r13d

; 110  :       if (band >= 0 && band <= 3) {

	cmp	eax, 3
	ja	SHORT $LN8@sao_band_d

; 111  :         offset = sao_bands[band];

	movsxd	rcx, eax
	mov	r8d, DWORD PTR [r14+rcx*4]
$LN8@sao_band_d:

; 112  :       }
; 113  :       // Offset is applied to reconstruction, so it is subtracted from diff.
; 114  : 
; 115  :       int32_t diff  = orig - rec;

	movzx	edx, BYTE PTR [r9]
	sub	edx, r10d

; 116  :       int32_t delta = diff - offset;

	mov	ecx, edx
	sub	ecx, r8d

; 117  : 
; 118  :       int32_t dmask = (offset == 0) ? -1 : 0;
; 119  :       diff  &= ~dmask;

	neg	r8d
	sbb	eax, eax
	inc	r9

; 120  :       delta &= ~dmask;

	and	ecx, eax
	and	edx, eax

; 121  : 
; 122  :       sum += delta * delta - diff * diff;

	imul	ecx, ecx
	imul	edx, edx
	sub	ecx, edx
	add	edi, ecx
	sub	rbx, 1
	jne	SHORT $LL7@sao_band_d
	mov	rdx, QWORD PTR orig_data$[rsp]
	mov	rcx, r15
	mov	r8, QWORD PTR rec_data$[rsp]
	movzx	r9d, BYTE PTR tv487[rsp]
$LN2@sao_band_d:

; 101  :   for (y = 0; y < block_height; ++y) {

	add	rsi, rcx
	sub	r12, 1
	jne	$LL4@sao_band_d

; 123  :     }
; 124  :   }
; 125  : 
; 126  :   return sum;

	mov	r14, QWORD PTR [rsp]
	mov	r13, QWORD PTR [rsp+8]
	mov	r12, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rbp, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+88]
$LN18@sao_band_d:

; 127  : }

	mov	eax, edi
	add	rsp, 40					; 00000028H
	pop	r15
	pop	rdi
	ret	0
sao_band_ddistortion_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
_TEXT	SEGMENT
tv656 = 0
b_ofs$ = 8
a_ofs$ = 16
a_ofs$1$ = 24
b_ofs$1$ = 32
orig_data$ = 96
rec_data$ = 104
eo_class$ = 112
block_width$ = 120
tv659 = 128
block_height$ = 128
cat_sum_cnt$ = 136
calc_sao_edge_dir_generic PROC

; 56   : {

	mov	r11, rsp
	mov	QWORD PTR [r11+16], rdx
	push	rdi
	sub	rsp, 80					; 00000050H

; 59   :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];
; 60   :   // Arrays orig_data and rec_data are quarter size for chroma.
; 61   : 
; 62   :   // Don't sample the edge pixels because this function doesn't have access to
; 63   :   // their neighbours.
; 64   : 
; 65   :   
; 66   : 
; 67   :   for (y = 1; y < block_height - 1; ++y) {

	mov	edx, DWORD PTR block_height$[rsp]
	movsxd	r8, r8d
	dec	edx
	add	r8, r8
	movsxd	rdi, r9d
	mov	r9, rcx
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	rax, QWORD PTR g_sao_edge_offsets[rcx+r8*8]
	mov	r8, QWORD PTR g_sao_edge_offsets[rcx+r8*8+8]
	mov	QWORD PTR a_ofs$1$[rsp], rax
	mov	QWORD PTR a_ofs$[rsp], rax
	mov	QWORD PTR [r11-56], r8
	mov	QWORD PTR [r11-80], r8
	cmp	edx, 1
	jle	$LN3@calc_sao_e

; 57   :   int y, x;
; 58   :   vector2d_t a_ofs = g_sao_edge_offsets[eo_class][0];

	mov	QWORD PTR [r11+8], rbx
	lea	ecx, DWORD PTR [rdi-1]
	mov	QWORD PTR [r11+24], rbp
	mov	QWORD PTR [r11+32], rsi
	lea	rsi, QWORD PTR [r9+rdi]
	mov	QWORD PTR [r11-16], r12
	lea	r12d, DWORD PTR [rdx-1]
	mov	QWORD PTR [r11-24], r13
	mov	QWORD PTR [r11-32], r14
	lea	r14d, DWORD PTR [rdi+1]
	mov	QWORD PTR [r11-40], r15
	movsxd	r15, ecx
	mov	rcx, rdi
	mov	DWORD PTR tv659[rsp], r14d
	mov	QWORD PTR tv656[rsp], r12
$LL4@calc_sao_e:

; 68   :     for (x = 1; x < block_width - 1; ++x) {

	cmp	r15, 1
	jle	$LN2@calc_sao_e

; 76   :       cat_sum_cnt[0][eo_cat] += orig_data[y * block_width + x] - c;

	mov	edx, DWORD PTR b_ofs$[rsp+4]
	mov	ebp, r14d
	mov	r12, QWORD PTR rec_data$[rsp]
	lea	r14, OFFSET FLAT:__ImageBase
	imul	edx, edi
	mov	ecx, 1
	add	edx, r8d
	movsxd	r13, edx
	mov	edx, DWORD PTR a_ofs$[rsp+4]
	imul	edx, edi
	add	edx, eax
	mov	rax, QWORD PTR cat_sum_cnt$[rsp]
	movsxd	r8, edx
	npad	1
$LL7@calc_sao_e:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	xor	r10d, r10d
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 69   :       const kvz_pixel *c_data = &rec_data[y * block_width + x];

	movsxd	r9, ebp
	add	r9, r12
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	edx, BYTE PTR [r8+r9]
	movzx	ebx, BYTE PTR [r9]
	mov	r11d, ebx
	sub	r11d, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 72   :       kvz_pixel b = c_data[b_ofs.y * block_width + b_ofs.x];

	movzx	edx, BYTE PTR [r9+r13]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	mov	r9d, ebx
	sub	r9d, edx
	mov	edx, r11d
	test	r9d, r9d
	setg	r10b
	shr	edx, 31
	shr	r9d, 31
	sub	r10d, r9d
	sub	r10d, edx
	xor	edx, edx
	test	r11d, r11d
	setg	dl
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 68   :     for (x = 1; x < block_width - 1; ++x) {

	inc	ebp
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	add	edx, 2
	add	r10d, edx

; 48   : 
; 49   :   return sao_eo_idx_to_eo_category[eo_idx];

	movsxd	rdx, r10d
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 76   :       cat_sum_cnt[0][eo_cat] += orig_data[y * block_width + x] - c;

	movsxd	r9, DWORD PTR ?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9[r14+rdx*4]
	movzx	edx, BYTE PTR [rsi+rcx]
	inc	rcx
	sub	edx, ebx
	add	DWORD PTR [rax+r9*4], edx

; 77   :       cat_sum_cnt[1][eo_cat] += 1;

	inc	DWORD PTR [rax+r9*4+20]
	cmp	rcx, r15
	jl	SHORT $LL7@calc_sao_e
	mov	rax, QWORD PTR a_ofs$1$[rsp]
	mov	rcx, rdi
	mov	r8, QWORD PTR b_ofs$1$[rsp]
	mov	r14d, DWORD PTR tv659[rsp]
	mov	r12, QWORD PTR tv656[rsp]
$LN2@calc_sao_e:

; 59   :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];
; 60   :   // Arrays orig_data and rec_data are quarter size for chroma.
; 61   : 
; 62   :   // Don't sample the edge pixels because this function doesn't have access to
; 63   :   // their neighbours.
; 64   : 
; 65   :   
; 66   : 
; 67   :   for (y = 1; y < block_height - 1; ++y) {

	add	r14d, edi
	add	rsi, rcx
	sub	r12, 1
	mov	DWORD PTR tv659[rsp], r14d
	mov	QWORD PTR tv656[rsp], r12
	jne	$LL4@calc_sao_e
	mov	r15, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]
	mov	r13, QWORD PTR [rsp+64]
	mov	r12, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+120]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [rsp+96]
$LN3@calc_sao_e:

; 78   :     }
; 79   :   }
; 80   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
calc_sao_edge_dir_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
_TEXT	SEGMENT
offsets$1 = 0
encoder$ = 1088
rec_data$ = 1096
new_rec_data$ = 1104
tv1690 = 1112
sao$ = 1112
stride$ = 1120
new_stride$ = 1128
block_width$ = 1136
block_height$ = 1144
offset_v$1$ = 1152
color_i$ = 1152
sao_reconstruct_color_generic PROC

; 92   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 1024				; 00000400H
	mov	ebx, DWORD PTR color_i$[rsp]

; 93   :   // Arrays orig_data and rec_data are quarter size for chroma.
; 94   :   int offset_v = color_i == COLOR_V ? 5 : 0;

	xor	r11d, r11d
	cmp	ebx, 2
	mov	r12, rdx
	mov	eax, r11d
	mov	edx, 5
	cmove	eax, edx
	mov	r15, r9

; 95   : 
; 96   :   if (sao->type == SAO_TYPE_BAND) {

	cmp	DWORD PTR [r9], 1
	mov	r14, r8
	mov	DWORD PTR offset_v$1$[rsp], eax
	jne	$LN14@sao_recons
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c

; 181  :   const int32_t values = (1<<encoder->bitdepth);

	movsx	ecx, BYTE PTR [rcx+2592]
	mov	r10d, 1
	shl	r10d, cl

; 182  :   const int32_t shift = encoder->bitdepth-5;
; 183  :   const int32_t band_pos = (color_i == COLOR_V) ? 1 : 0;
; 184  :   const int32_t cur_bp   = sao->band_position[band_pos];

	mov	eax, 20
	cmp	ebx, 2

; 185  : 
; 186  :   // Loop through all intensity values and construct an offset array
; 187  :   for (val = 0; val < values; val++) {

	movsxd	rdi, r10d
	mov	r8d, r11d
	lea	esi, DWORD PTR [rcx-5]
	mov	ecx, 24
	cmove	eax, ecx
	mov	ebp, DWORD PTR [rax+r9]
	test	r10d, r10d
	jle	SHORT $LN25@sao_recons
	mov	r9d, r11d
	lea	r13d, QWORD PTR [r11+6]
	npad	4
$LL26@sao_recons:

; 188  :     int32_t cur_band     = val >> shift;

	mov	edx, r8d
	mov	ecx, esi
	sar	edx, cl

; 189  :     int32_t cb_minus_cbp = cur_band - cur_bp;

	sub	edx, ebp

; 190  : 
; 191  :     if (cb_minus_cbp >= 0 && cb_minus_cbp <= 3) {

	cmp	edx, 3
	ja	SHORT $LN27@sao_recons

; 192  :       uint32_t offset_id    = cb_minus_cbp + 1 + 5 * band_pos;

	cmp	ebx, 2

; 193  :       int32_t val_unclipped = val + sao->offsets[offset_id];

	lea	ecx, DWORD PTR [r10-1]
	mov	eax, 1
	cmove	eax, r13d
	add	eax, edx
	mov	edx, DWORD PTR [r15+rax*4+28]

; 194  :       offset[val] = CLIP(0, values - 1, val_unclipped);

	mov	eax, ecx
	add	edx, r8d
	cmp	ecx, edx
	cmovge	eax, edx
	test	eax, eax
	jns	SHORT $LN34@sao_recons
	mov	edx, r11d
	jmp	SHORT $LN24@sao_recons
$LN34@sao_recons:
	cmp	ecx, edx
	cmovl	edx, ecx

; 195  : 
; 196  :     } else {

	jmp	SHORT $LN24@sao_recons
$LN27@sao_recons:

; 197  :       offset[val] = val;

	mov	edx, r8d
$LN24@sao_recons:

; 185  : 
; 186  :   // Loop through all intensity values and construct an offset array
; 187  :   for (val = 0; val < values; val++) {

	mov	DWORD PTR offsets$1[rsp+r9*4], edx
	inc	r8d
	inc	r9
	cmp	r9, rdi
	jl	SHORT $LL26@sao_recons
$LN25@sao_recons:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 99   :     for (int y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR block_height$[rsp]
	test	eax, eax
	jle	$LN9@sao_recons
	movsxd	rdi, DWORD PTR block_width$[rsp]
	mov	r10, r11
	movsxd	rsi, DWORD PTR stride$[rsp]
	mov	ebx, eax
	movsxd	rbp, DWORD PTR new_stride$[rsp]
	npad	3
$LL4@sao_recons:

; 100  :       for (int x = 0; x < block_width; ++x) {

	test	rdi, rdi
	jle	SHORT $LN2@sao_recons

; 101  :         new_rec_data[y * new_stride + x] = offsets[rec_data[y * stride + x]];

	mov	r9, r11
	lea	rdx, QWORD PTR [r10+r14]
	sub	r9, r10
	mov	r8, rdi
	sub	r9, r14
	add	r9, r12
	npad	8
$LL7@sao_recons:
	movzx	eax, BYTE PTR [r9+rdx]
	lea	rdx, QWORD PTR [rdx+1]
	movzx	ecx, BYTE PTR offsets$1[rsp+rax*4]
	mov	BYTE PTR [rdx-1], cl
	sub	r8, 1
	jne	SHORT $LL7@sao_recons
$LN2@sao_recons:

; 99   :     for (int y = 0; y < block_height; ++y) {

	add	r10, rbp
	add	r11, rsi
	sub	rbx, 1
	jne	SHORT $LL4@sao_recons

; 102  :       }
; 103  :     }
; 104  :   } else {

	jmp	$LN9@sao_recons
$LN14@sao_recons:

; 105  :     // Don't sample the edge pixels because this function doesn't have access to
; 106  :     // their neighbours.
; 107  :     for (int y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR block_height$[rsp]
	test	eax, eax
	jle	$LN9@sao_recons
	movsxd	r8, DWORD PTR stride$[rsp]
	mov	r13d, eax
	mov	ecx, DWORD PTR block_width$[rsp]
	mov	rdx, r8
	movsxd	rax, DWORD PTR new_stride$[rsp]
	mov	rbp, r11
	mov	QWORD PTR tv1690[rsp], r8
	mov	rsi, r11
$LL10@sao_recons:

; 108  :       for (int x = 0; x < block_width; ++x) {

	test	ecx, ecx
	jle	$LN8@sao_recons
	mov	rdi, rbp
	mov	ebx, ecx
	sub	rdi, rsi
	lea	r10, QWORD PTR [rsi+r12]
	sub	rdi, r12
	mov	r12d, DWORD PTR offset_v$1$[rsp]
	add	rdi, r14
	lea	r14, OFFSET FLAT:__ImageBase
	npad	6
$LL13@sao_recons:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	r9d, BYTE PTR [r10]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 109  :         vector2d_t a_ofs = g_sao_edge_offsets[sao->eo_class][0];

	movsxd	rax, DWORD PTR [r15+4]
	add	rax, rax
	mov	rcx, QWORD PTR g_sao_edge_offsets[r14+rax*8]

; 110  :         vector2d_t b_ofs = g_sao_edge_offsets[sao->eo_class][1];

	mov	rax, QWORD PTR g_sao_edge_offsets[r14+rax*8+8]
	mov	rdx, rax
	shr	rdx, 32					; 00000020H

; 115  :         kvz_pixel b = c_data[b_ofs.y * stride + b_ofs.x];

	imul	edx, r8d
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	mov	r8d, r9d
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 115  :         kvz_pixel b = c_data[b_ofs.y * stride + b_ofs.x];

	add	eax, edx
	cdqe
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	edx, BYTE PTR [rax+r10]
	mov	rax, rcx
	shr	rax, 32					; 00000020H
	sub	r8d, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 113  :         kvz_pixel a = c_data[a_ofs.y * stride + a_ofs.x];

	imul	eax, DWORD PTR stride$[rsp]
	add	eax, ecx
	cdqe
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h

; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	ecx, BYTE PTR [rax+r10]
	mov	eax, r9d
	sub	eax, ecx
	mov	ecx, r11d
	test	eax, eax
	setg	cl
	shr	eax, 31
	add	ecx, 2
	sub	ecx, eax
	mov	eax, r8d
	shr	eax, 31
	sub	ecx, eax
	mov	eax, r11d
	test	r8d, r8d
	setg	al
	add	eax, ecx

; 48   : 
; 49   :   return sao_eo_idx_to_eo_category[eo_idx];

	cdqe
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 119  :         new_data[0] = (kvz_pixel)CLIP(0, (1 << KVZ_BIT_DEPTH) - 1, c_data[0] + sao->offsets[eo_cat + offset_v]);

	mov	eax, DWORD PTR ?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9[r14+rax*4]
	add	eax, r12d
	cdqe
	mov	eax, DWORD PTR [r15+rax*4+28]
	add	eax, r9d
	cmp	eax, 255				; 000000ffH
	jg	SHORT $LN58@sao_recons
	test	eax, eax
	cmovs	eax, r11d
	jmp	SHORT $LN20@sao_recons
$LN58@sao_recons:
	mov	eax, 255				; 000000ffH
$LN20@sao_recons:

; 108  :       for (int x = 0; x < block_width; ++x) {

	mov	r8d, DWORD PTR stride$[rsp]

; 119  :         new_data[0] = (kvz_pixel)CLIP(0, (1 << KVZ_BIT_DEPTH) - 1, c_data[0] + sao->offsets[eo_cat + offset_v]);

	mov	BYTE PTR [rdi+r10], al
	inc	r10
	sub	rbx, 1
	jne	$LL13@sao_recons
	mov	r14, QWORD PTR new_rec_data$[rsp]
	mov	r12, QWORD PTR rec_data$[rsp]
	mov	ecx, DWORD PTR block_width$[rsp]
	movsxd	rax, DWORD PTR new_stride$[rsp]
	mov	rdx, QWORD PTR tv1690[rsp]
$LN8@sao_recons:

; 105  :     // Don't sample the edge pixels because this function doesn't have access to
; 106  :     // their neighbours.
; 107  :     for (int y = 0; y < block_height; ++y) {

	add	rsi, rdx
	add	rbp, rax
	sub	r13, 1
	jne	$LL10@sao_recons
$LN9@sao_recons:

; 120  :       }
; 121  :     }
; 122  :   }
; 123  : }

	mov	rbx, QWORD PTR [rsp+1088]
	add	rsp, 1024				; 00000400H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
sao_reconstruct_color_generic ENDP
_TEXT	ENDS
END
