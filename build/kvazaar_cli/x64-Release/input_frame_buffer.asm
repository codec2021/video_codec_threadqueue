; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_encoder_feed_frame
PUBLIC	kvz_init_input_frame_buffer
pdata	SEGMENT
$pdata$kvz_encoder_feed_frame DD imagerel $LN53
	DD	imagerel $LN53+1009
	DD	imagerel $unwind$kvz_encoder_feed_frame
$pdata$kvz_init_input_frame_buffer DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$kvz_init_input_frame_buffer
xdata	SEGMENT
$unwind$kvz_encoder_feed_frame DD 0c2101H
	DD	0d6421H
	DD	0c5421H
	DD	0a3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
$unwind$kvz_init_input_frame_buffer DD 020601H
	DD	030023206H
$SG4294959160 DB 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'p', 00H
	DB	'i', 00H, 'c', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+1
$SG4294959161 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+4
$SG4294959162 DB 'g', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'o', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'c', 00H, 'f', 00H, 'g', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'o', 00H, 'p', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' '
	DB	00H, '+', 00H, ' ', 00H, 'i', 00H, 's', 00H, '_', 00H, 'c', 00H
	DB	'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'g'
	DB	00H, 'o', 00H, 'p', 00H, ' ', 00H, '?', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, ':', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+7
$SG4294959163 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+7
$SG4294959164 DB 'b', 00H, 'u', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'i', 00H, 'c', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, '[', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'_', 00H, 'i', 00H, 'd', 00H, 'x', 00H, ']', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H
	ORG $+1
$SG4294959165 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+5
$SG4294959166 DB 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 'i', 00H, 'd', 00H
	DB	'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'_', 00H, 'i', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'g', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG4294959167 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
_TEXT	SEGMENT
input_buffer$ = 48
kvz_init_input_frame_buffer PROC

; 41   : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 42   :   FILL(input_buffer->pic_buffer, 0);
; 43   :   FILL(input_buffer->pts_buffer, 0);

	xor	edx, edx
	mov	r8d, 1536				; 00000600H
	mov	rbx, rcx
	call	memset

; 44   :   input_buffer->num_in = 0;

	xor	eax, eax
	mov	QWORD PTR [rbx+1536], rax

; 45   :   input_buffer->num_out = 0;

	mov	QWORD PTR [rbx+1544], rax

; 46   :   input_buffer->delay = 0;

	mov	QWORD PTR [rbx+1552], rax

; 47   :   input_buffer->gop_skipped = 0;

	mov	DWORD PTR [rbx+1560], eax

; 48   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_init_input_frame_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
_TEXT	SEGMENT
buf$ = 80
state$ = 88
img_in$ = 96
first_done$ = 104
kvz_encoder_feed_frame PROC

; 70   : {

$LN53:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+16], rdx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 71   :   const encoder_control_t* const encoder = state->encoder_control;
; 72   :   const kvz_config* const cfg = &encoder->cfg;

	mov	rdi, QWORD PTR [rdx]
	mov	rbx, rcx
	mov	r12d, r9d
	mov	rsi, r8
	mov	r9, rdx

; 73   : 
; 74   :   const int gop_buf_size = 3 * cfg->gop_len;
; 75   : 
; 76   :   bool is_closed_gop = false;
; 77   : 
; 78   :   // Check for closed gop, we need an extra frame in the buffer in this case
; 79   :   if (!cfg->open_gop && cfg->intra_period > 0 && cfg->gop_len > 0) is_closed_gop = true;

	cmp	BYTE PTR [rdi+2464], 0
	movsx	ecx, BYTE PTR [rdi+300]
	lea	r13d, DWORD PTR [rcx+rcx*2]
	jne	SHORT $LN5@kvz_encode
	cmp	DWORD PTR [rdi+4], 0
	jle	SHORT $LN5@kvz_encode
	test	cl, cl
	jle	SHORT $LN5@kvz_encode
	mov	r14b, 1

; 179  :       for (;;) {
; 180  :         assert(gop_offset < cfg->gop_len + is_closed_gop ? 1 : 0);

	jmp	SHORT $LN50@kvz_encode
$LN5@kvz_encode:

; 80   : 
; 81   :   if (cfg->gop_len == 0 || cfg->gop_lowdelay) {

	xor	r14b, r14b
	test	cl, cl
	je	$LN7@kvz_encode
$LN50@kvz_encode:
	cmp	BYTE PTR [rdi+301], 0
	jne	$LN7@kvz_encode

; 99   :   }
; 100  :   
; 101  :   if (img_in != NULL) {

	test	rsi, rsi
	je	$LN14@kvz_encode

; 102  :     // Index of the next input picture, in range [-1, +inf). Values
; 103  :     // i and j refer to the same indices in buf->pic_buffer iff
; 104  :     // i === j (mod gop_buf_size).
; 105  :     int64_t idx_in = buf->num_in - 1;
; 106  : 
; 107  :     // Index in buf->pic_buffer and buf->pts_buffer.
; 108  :     int buf_idx = (idx_in + gop_buf_size) % gop_buf_size;

	mov	rax, QWORD PTR [rbx+1536]
	dec	rax
	movsxd	r15, r13d
	add	rax, r15
	cdq
	idiv	r15
	mov	rbp, rdx

; 109  : 
; 110  :     // Save the input image in the buffer.
; 111  :     assert(buf_idx >= 0 && buf_idx < gop_buf_size);

	test	edx, edx
	js	SHORT $LN28@kvz_encode
	cmp	ebp, r13d
	jl	SHORT $LN29@kvz_encode
$LN28@kvz_encode:
	mov	r8d, 111				; 0000006fH
	lea	rdx, OFFSET FLAT:$SG4294959167
	lea	rcx, OFFSET FLAT:$SG4294959166
	call	QWORD PTR __imp__wassert
$LN29@kvz_encode:

; 112  :     assert(buf->pic_buffer[buf_idx] == NULL);

	movsxd	rbp, ebp
	cmp	QWORD PTR [rbx+rbp*8], 0
	je	SHORT $LN30@kvz_encode
	mov	r8d, 112				; 00000070H
	lea	rdx, OFFSET FLAT:$SG4294959165
	lea	rcx, OFFSET FLAT:$SG4294959164
	call	QWORD PTR __imp__wassert
$LN30@kvz_encode:

; 113  :     buf->pic_buffer[buf_idx] = kvz_image_copy_ref(img_in);

	mov	rcx, rsi
	call	kvz_image_copy_ref
	mov	QWORD PTR [rbx+rbp*8], rax

; 114  :     buf->pts_buffer[buf_idx] = img_in->pts;

	mov	rax, QWORD PTR [rsi+96]
	mov	QWORD PTR [rbx+rbp*8+768], rax

; 115  :     buf->num_in++;

	inc	QWORD PTR [rbx+1536]

; 116  : 
; 117  :     if (buf->num_in < cfg->gop_len + is_closed_gop ? 1 : 0) {

	movsx	ecx, BYTE PTR [rdi+300]
	movzx	eax, r14b
	add	eax, ecx
	cdqe
	cmp	QWORD PTR [rbx+1536], rax
	jb	$LN51@kvz_encode

; 118  :       // Not enough frames to start output.
; 119  :       return 0;
; 120  : 
; 121  :     } else if (buf->num_in == cfg->gop_len + is_closed_gop ? 1 : 0) {

	jne	SHORT $LN14@kvz_encode

; 122  :       // Now we known the PTSs that are needed to compute the delay.
; 123  :       buf->delay = buf->pts_buffer[gop_buf_size - 1] - img_in->pts;

	mov	rax, QWORD PTR [rbx+r15*8+760]
	sub	rax, QWORD PTR [rsi+96]
	mov	QWORD PTR [rbx+1552], rax
$LN14@kvz_encode:

; 124  :     }
; 125  :   }
; 126  : 
; 127  :   if (buf->num_out == buf->num_in) {

	mov	r10, QWORD PTR [rbx+1544]
	mov	rdx, QWORD PTR [rbx+1536]
	cmp	r10, rdx
	je	$LN51@kvz_encode

; 128  :     // All frames returned.
; 129  :     return NULL;
; 130  :   }
; 131  : 
; 132  :   if (img_in == NULL && buf->num_in < cfg->gop_len + is_closed_gop ? 1 : 0) {

	test	rsi, rsi
	jne	SHORT $LN48@kvz_encode
	movsx	ecx, BYTE PTR [rdi+300]
	movzx	eax, r14b
	add	eax, ecx
	cdqe
	cmp	rdx, rax
	jae	SHORT $LN48@kvz_encode

; 133  :     // End of the sequence but we have less than a single GOP of frames. Use
; 134  :     // the difference between the PTSs of the first and the last frame as the
; 135  :     // delay.
; 136  :     int first_pic_idx = gop_buf_size - 1;
; 137  :     int last_pic_idx  = (buf->num_in - 2 + gop_buf_size) % gop_buf_size;

	movsxd	rcx, r13d
	lea	rax, QWORD PTR [rdx-2]
	add	rax, rcx

; 138  :     buf->delay = buf->pts_buffer[first_pic_idx] - buf->pts_buffer[last_pic_idx];

	movsxd	r15, r13d
	xor	edx, edx
	div	rcx
	mov	rcx, QWORD PTR [rbx+r15*8+760]
	movsxd	rax, edx
	sub	rcx, QWORD PTR [rbx+rax*8+768]
	mov	QWORD PTR [rbx+1552], rcx
	jmp	SHORT $LN43@kvz_encode
$LN48@kvz_encode:

; 128  :     // All frames returned.
; 129  :     return NULL;
; 130  :   }
; 131  : 
; 132  :   if (img_in == NULL && buf->num_in < cfg->gop_len + is_closed_gop ? 1 : 0) {

	movsxd	r15, r13d
$LN43@kvz_encode:

; 139  :   }
; 140  : 
; 141  :   // Index of the next output picture, in range [-1, +inf). Values
; 142  :   // i and j refer to the same indices in buf->pic_buffer iff
; 143  :   // i === j (mod gop_buf_size).
; 144  :   int64_t idx_out;
; 145  : 
; 146  :   // DTS of the output picture.
; 147  :   int64_t dts_out;
; 148  : 
; 149  :   // Number of the next output picture in the GOP.
; 150  :   int gop_offset;
; 151  : 
; 152  :   if (buf->num_out == 0) {

	test	r10, r10
	jne	SHORT $LN17@kvz_encode

; 153  :     // Output the first frame.
; 154  :     idx_out = -1;
; 155  :     dts_out = buf->pts_buffer[gop_buf_size - 1] + buf->delay;

	mov	rdi, QWORD PTR [rbx+r15*8+760]
	lea	r8, QWORD PTR [r10-1]
	add	rdi, QWORD PTR [rbx+1552]

; 156  :     gop_offset = 0; // highest quality picture

	xor	esi, esi
	jmp	$LN26@kvz_encode
$LN17@kvz_encode:

; 157  : 
; 158  :   } else if(first_done) {

	test	r12d, r12d
	je	$LN51@kvz_encode

; 159  :     gop_offset = (buf->num_out - 1) % cfg->gop_len;

	movsx	r11, BYTE PTR [rdi+300]
	lea	rax, QWORD PTR [r10-1]

; 160  :     
; 161  :     // For closed gop, calculate the gop_offset again
; 162  :     if (!cfg->open_gop && cfg->intra_period > 0) {

	movzx	r8d, BYTE PTR [rdi+2464]
	xor	edx, edx
	div	r11
	mov	r9, r11
	mov	rsi, rdx
	test	r8b, r8b
	jne	SHORT $LN21@kvz_encode
	mov	eax, DWORD PTR [rdi+4]
	test	eax, eax
	jle	SHORT $LN21@kvz_encode

; 163  :       // Offset the GOP position for each extra I-frame added to the structure
; 164  :       // in closed gop case
; 165  :       int num_extra_frames = (buf->num_out - 1) / (cfg->intra_period + 1);

	inc	eax
	xor	edx, edx
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r10-1]
	div	rcx

; 166  :       gop_offset = (buf->num_out - 1 - num_extra_frames) % cfg->gop_len;

	xor	edx, edx
	movsxd	rcx, eax
	mov	rax, r10
	sub	rax, rcx
	dec	rax
	div	r9
	mov	esi, edx
$LN21@kvz_encode:

; 167  :     }
; 168  : 
; 169  :     // Index of the first picture in the GOP that is being output.
; 170  :     int gop_start_idx = buf->num_out - 1 - gop_offset;

	mov	ebp, r10d
	sub	ebp, esi

; 171  : 
; 172  :     // Skip pictures until we find an available one.
; 173  :     gop_offset += buf->gop_skipped;

	add	esi, DWORD PTR [rbx+1560]
	dec	ebp

; 174  : 
; 175  :     // Every closed-gop IRAP handled here
; 176  :     if (is_closed_gop && (!cfg->open_gop && ((buf->num_out - 1) % (cfg->intra_period + 1)) == cfg->intra_period)) {

	test	r14b, r14b
	je	SHORT $LN41@kvz_encode
	test	r8b, r8b
	jne	SHORT $LN41@kvz_encode
	movsxd	r9, DWORD PTR [rdi+4]
	lea	rax, QWORD PTR [r10-1]
	xor	edx, edx
	lea	ecx, DWORD PTR [r9+1]
	movsxd	r8, ecx
	div	r8
	cmp	rdx, r9
	jne	SHORT $LN41@kvz_encode

; 177  :       idx_out = gop_start_idx;

	movsxd	r8, ebp

; 178  :     } else {

	jmp	SHORT $LN39@kvz_encode
$LN41@kvz_encode:
	movzx	r14d, r14b
	npad	15
$LL2@kvz_encode:

; 179  :       for (;;) {
; 180  :         assert(gop_offset < cfg->gop_len + is_closed_gop ? 1 : 0);

	movsx	r11d, BYTE PTR [rdi+300]
	lea	eax, DWORD PTR [r14+r11]
	cmp	esi, eax
	jl	SHORT $LN49@kvz_encode
	mov	r8d, 180				; 000000b4H
	lea	rdx, OFFSET FLAT:$SG4294959163
	lea	rcx, OFFSET FLAT:$SG4294959162
	call	QWORD PTR __imp__wassert
	movzx	r11d, BYTE PTR [rdi+300]
$LN49@kvz_encode:

; 181  :         idx_out = gop_start_idx + cfg->gop[gop_offset].poc_offset - 1;

	movsxd	rax, esi
	shl	rax, 6
	movsx	ecx, BYTE PTR [rax+rdi+313]

; 182  :         if (idx_out < buf->num_in - 1) {

	mov	rax, QWORD PTR [rbx+1536]
	dec	ecx
	add	ecx, ebp
	dec	rax
	movsxd	r8, ecx
	cmp	r8, rax
	jb	SHORT $LN45@kvz_encode

; 183  :           // An available picture found.
; 184  :           break;
; 185  :         }
; 186  :         buf->gop_skipped++;

	inc	DWORD PTR [rbx+1560]

; 187  :         gop_offset++;

	inc	esi

; 188  :       }

	jmp	SHORT $LL2@kvz_encode
$LN45@kvz_encode:

; 138  :     buf->delay = buf->pts_buffer[first_pic_idx] - buf->pts_buffer[last_pic_idx];

	mov	r10, QWORD PTR [rbx+1544]
$LN39@kvz_encode:

; 189  :     }
; 190  : 
; 191  :     if (buf->num_out < cfg->gop_len - 1) {

	movsx	edx, r11b
	lea	eax, DWORD PTR [rdx-1]
	movsxd	rcx, eax
	cmp	r10, rcx
	jae	SHORT $LN25@kvz_encode

; 192  :       // This picture needs a DTS that is less than the PTS of the first
; 193  :       // frame so the delay must be applied.
; 194  :       int dts_idx = buf->num_out - 1;

	lea	eax, DWORD PTR [r10-1]

; 195  :       dts_out = buf->pts_buffer[dts_idx % gop_buf_size] + buf->delay;

	cdq
	idiv	r13d
	movsxd	rax, edx
	mov	rdi, QWORD PTR [rbx+rax*8+768]
	add	rdi, QWORD PTR [rbx+1552]

; 196  :     } else {

	jmp	SHORT $LN26@kvz_encode
$LN25@kvz_encode:

; 197  :       int dts_idx = buf->num_out - (cfg->gop_len - 1);
; 198  :       dts_out = buf->pts_buffer[dts_idx % gop_buf_size] - 1;

	sub	r10d, edx
	lea	eax, DWORD PTR [r10+1]
	cdq
	idiv	r13d
	movsxd	rax, edx
	mov	rdi, QWORD PTR [rbx+rax*8+768]
	dec	rdi
$LN26@kvz_encode:

; 199  :     }
; 200  :   }
; 201  :   else {
; 202  :     return NULL;
; 203  :   }
; 204  : 
; 205  :   // Index in buf->pic_buffer and buf->pts_buffer.
; 206  :   int buf_idx = (idx_out + gop_buf_size) % gop_buf_size;

	lea	rax, QWORD PTR [r15+r8]
	cdq
	idiv	r15

; 207  : 
; 208  :   kvz_picture* next_pic = buf->pic_buffer[buf_idx];

	movsxd	rax, edx
	mov	rbp, QWORD PTR [rbx+rax*8]
	lea	r14, QWORD PTR [rbx+rax*8]

; 209  :   assert(next_pic != NULL);

	test	rbp, rbp
	jne	SHORT $LN34@kvz_encode
	mov	r8d, 209				; 000000d1H
	lea	rdx, OFFSET FLAT:$SG4294959161
	lea	rcx, OFFSET FLAT:$SG4294959160
	call	QWORD PTR __imp__wassert
$LN34@kvz_encode:

; 210  :   next_pic->dts = dts_out;
; 211  :   buf->pic_buffer[buf_idx] = NULL;
; 212  :   state->frame->gop_offset = gop_offset;

	mov	rcx, QWORD PTR state$[rsp]

; 213  : 
; 214  :   buf->num_out++;
; 215  :   return next_pic;

	mov	rax, rbp
	mov	QWORD PTR [rbp+104], rdi
	mov	QWORD PTR [r14], 0
	mov	rcx, QWORD PTR [rcx+40]
	mov	BYTE PTR [rcx+16], sil
	inc	QWORD PTR [rbx+1544]
	jmp	$LN1@kvz_encode
$LN7@kvz_encode:

; 82   :     // No reordering of output pictures necessary.
; 83   : 
; 84   :     if (img_in == NULL) return NULL;

	test	rsi, rsi
	jne	SHORT $LN8@kvz_encode
$LN51@kvz_encode:
	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN8@kvz_encode:

; 85   : 
; 86   :     img_in->dts = img_in->pts;

	mov	rax, QWORD PTR [r8+96]
	mov	QWORD PTR [r8+104], rax

; 87   :     state->frame->gop_offset = 0;

	mov	rax, QWORD PTR [rdx+40]
	mov	BYTE PTR [rax+16], 0

; 88   :     if (cfg->gop_len > 0) {

	movsx	r8, BYTE PTR [rdi+300]
	test	r8b, r8b
	jle	SHORT $LN9@kvz_encode

; 89   :       // Using a low delay GOP structure.
; 90   :       uint64_t frame_num = buf->num_out;
; 91   :       if (cfg->intra_period) {

	movsxd	rcx, DWORD PTR [rdi+4]
	mov	rax, QWORD PTR [rbx+1544]
	test	ecx, ecx
	je	SHORT $LN10@kvz_encode

; 92   :         frame_num %= cfg->intra_period;

	xor	edx, edx
	div	rcx
	mov	rax, rdx
$LN10@kvz_encode:

; 93   :       }
; 94   :       state->frame->gop_offset = (frame_num + cfg->gop_len - 1) % cfg->gop_len;

	dec	rax
	xor	edx, edx
	add	rax, r8
	div	r8
	mov	rax, QWORD PTR [r9+40]
	mov	BYTE PTR [rax+16], dl
$LN9@kvz_encode:

; 95   :     }
; 96   :     buf->num_in++;

	inc	QWORD PTR [rbx+1536]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, 1
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c

; 97   :     buf->num_out++;

	inc	QWORD PTR [rbx+1544]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	lock xadd DWORD PTR [rsi+88], eax
	inc	eax

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	eax, 2
	jge	SHORT $LN37@kvz_encode
	mov	r8d, 150				; 00000096H
	lea	rdx, OFFSET FLAT:$SG4294955962
	lea	rcx, OFFSET FLAT:$SG4294955961
	call	QWORD PTR __imp__wassert
$LN37@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c

; 98   :     return kvz_image_copy_ref(img_in);

	mov	rax, rsi
$LN1@kvz_encode:

; 216  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_encoder_feed_frame ENDP
_TEXT	ENDS
END
