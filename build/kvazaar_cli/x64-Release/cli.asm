; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_strrchr:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_tolower:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_calloc:PROC
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
long_options DQ	FLAT:$SG4294967289
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	069H
	ORG $+4
	DQ	FLAT:$SG4294967288
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	06fH
	ORG $+4
	DQ	FLAT:$SG4294967287
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	064H
	ORG $+4
	DQ	FLAT:$SG4294967286
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	077H
	ORG $+4
	DQ	FLAT:$SG4294967285
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	068H
	ORG $+4
	DQ	FLAT:$SG4294967284
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	06eH
	ORG $+4
	DQ	FLAT:$SG4294967283
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	071H
	ORG $+4
	DQ	FLAT:$SG4294967282
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	070H
	ORG $+4
	DQ	FLAT:$SG4294967281
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	072H
	ORG $+4
	DQ	FLAT:$SG4294967280
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967279
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967278
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967277
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967276
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967275
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967274
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967273
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967272
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967271
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967270
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967269
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967268
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967267
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967266
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967265
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967264
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967263
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967262
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967261
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967260
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967259
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967258
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967257
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967256
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967255
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967254
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967253
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967252
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967251
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967250
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967249
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967248
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967247
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967246
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967245
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967244
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967243
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967242
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967241
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967240
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967239
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967238
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967237
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967236
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967235
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967234
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967233
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967232
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967231
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967230
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967229
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967228
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967227
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967226
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967225
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967224
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967223
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967222
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967221
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967220
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967219
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967218
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967217
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967216
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967215
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967214
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967213
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967212
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967211
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967210
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967209
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967208
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967207
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967206
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967205
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967204
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967203
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967202
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967201
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967200
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967199
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967198
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967197
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967196
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967195
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967194
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967193
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967192
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967191
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967190
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967189
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967188
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967187
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967186
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967185
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967184
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967183
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967182
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967181
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967180
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967179
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967178
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967177
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967176
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967175
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967174
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967173
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967172
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967171
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967170
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967169
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG4294967168
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
short_options DB 'i:o:d:w:h:n:q:p:r:', 00H
$SG4294967289 DB 'input', 00H
	ORG $+2
$SG4294967288 DB 'output', 00H
	ORG $+1
$SG4294967287 DB 'debug', 00H
	ORG $+2
$SG4294967286 DB 'width', 00H
	ORG $+2
$SG4294967285 DB 'height', 00H
	ORG $+1
$SG4294967284 DB 'frames', 00H
	ORG $+1
$SG4294967283 DB 'qp', 00H
	ORG $+1
$SG4294967282 DB 'period', 00H
	ORG $+1
$SG4294967281 DB 'ref', 00H
$SG4294967280 DB 'vps-period', 00H
	ORG $+1
$SG4294967275 DB 'sao', 00H
$SG4294967279 DB 'input-res', 00H
	ORG $+2
$SG4294967274 DB 'no-sao', 00H
	ORG $+1
$SG4294967269 DB 'smp', 00H
$SG4294967278 DB 'input-fps', 00H
	ORG $+2
$SG4294967268 DB 'no-smp', 00H
	ORG $+1
$SG4294967267 DB 'amp', 00H
$SG4294967277 DB 'deblock', 00H
$SG4294967276 DB 'no-deblock', 00H
	ORG $+1
$SG4294967273 DB 'rdoq', 00H
	ORG $+3
$SG4294967266 DB 'no-amp', 00H
	ORG $+1
$SG4294967265 DB 'rd', 00H
	ORG $+1
$SG4294967272 DB 'no-rdoq', 00H
$SG4294967271 DB 'signhide', 00H
	ORG $+3
$SG4294967259 DB 'me', 00H
	ORG $+1
$SG4294967270 DB 'no-signhide', 00H
$SG4294967256 DB 'sar', 00H
$SG4294967264 DB 'full-intra-search', 00H
	ORG $+2
$SG4294967248 DB 'aud', 00H
$SG4294967263 DB 'no-full-intra-search', 00H
	ORG $+3
$SG4294967262 DB 'transform-skip', 00H
	ORG $+1
$SG4294967261 DB 'no-transform-skip', 00H
	ORG $+2
$SG4294967247 DB 'no-aud', 00H
	ORG $+1
$SG4294967241 DB 'wpp', 00H
$SG4294967260 DB 'tr-depth-intra', 00H
	ORG $+1
$SG4294967258 DB 'subme', 00H
	ORG $+2
$SG4294967257 DB 'source-scan-type', 00H
	ORG $+3
$SG4294967253 DB 'range', 00H
	ORG $+2
$SG4294967240 DB 'no-wpp', 00H
	ORG $+1
$SG4294967239 DB 'owf', 00H
$SG4294967255 DB 'overscan', 00H
	ORG $+3
$SG4294967244 DB 'tiles', 00H
	ORG $+2
$SG4294967238 DB 'slices', 00H
	ORG $+1
$SG4294967230 DB 'gop', 00H
$SG4294967254 DB 'videoformat', 00H
$SG4294967214 DB 'key', 00H
$SG4294967252 DB 'colorprim', 00H
	ORG $+2
$SG4294967229 DB 'bipred', 00H
	ORG $+1
$SG4294967200 DB 'roi', 00H
$SG4294967251 DB 'transfer', 00H
	ORG $+3
$SG4294967236 DB 'cpuid', 00H
	ORG $+2
$SG4294967226 DB 'preset', 00H
	ORG $+1
$SG4294967189 DB 'vaq', 00H
$SG4294967250 DB 'colormatrix', 00H
$SG4294967249 DB 'chromaloc', 00H
	ORG $+2
$SG4294967225 DB 'mv-rdo', 00H
	ORG $+1
$SG4294967246 DB 'cqmfile', 00H
$SG4294967245 DB 'seek', 00H
	ORG $+3
$SG4294967243 DB 'tiles-width-split', 00H
	ORG $+2
$SG4294967215 DB 'crypto', 00H
$SG4294967242 DB 'tiles-height-split', 00H
$SG4294967237 DB 'threads', 00H
$SG4294967235 DB 'no-cpuid', 00H
	ORG $+3
$SG4294967197 DB 'level', 00H
	ORG $+2
$SG4294967188 DB 'no-vaq', 00H
$SG4294967234 DB 'pu-depth-inter', 00H
	ORG $+1
$SG4294967233 DB 'pu-depth-intra', 00H
	ORG $+1
$SG4294967232 DB 'info', 00H
	ORG $+3
$SG4294967231 DB 'no-info', 00H
$SG4294967228 DB 'no-bipred', 00H
$SG4294967227 DB 'bitrate', 00H
$SG4294967224 DB 'no-mv-rdo', 00H
	ORG $+2
$SG4294967223 DB 'psnr', 00H
$SG4294967222 DB 'no-psnr', 00H
$SG4294967221 DB 'version', 00H
$SG4294967220 DB 'help', 00H
	ORG $+3
$SG4294967219 DB 'loop-input', 00H
	ORG $+1
$SG4294967218 DB 'mv-constraint', 00H
	ORG $+2
$SG4294967217 DB 'hash', 00H
	ORG $+3
$SG4294967216 DB 'cu-split-termination', 00H
	ORG $+3
$SG4294967213 DB 'me-early-termination', 00H
	ORG $+3
$SG4294967212 DB 'intra-rdo-et', 00H
	ORG $+3
$SG4294967211 DB 'no-intra-rdo-et', 00H
$SG4294967210 DB 'lossless', 00H
	ORG $+1
$SG4294967209 DB 'no-lossless', 00H
$SG4294967208 DB 'tmvp', 00H
$SG4294967207 DB 'no-tmvp', 00H
$SG4294967206 DB 'rdoq-skip', 00H
$SG4294967205 DB 'no-rdoq-skip', 00H
	ORG $+3
$SG4294967204 DB 'input-bitdepth', 00H
	ORG $+1
$SG4294967203 DB 'input-format', 00H
	ORG $+3
$SG4294967202 DB 'implicit-rdpcm', 00H
	ORG $+1
$SG4294967201 DB 'no-implicit-rdpcm', 00H
$SG4294967199 DB 'erp-aqp', 00H
$SG4294967198 DB 'no-erp-aqp', 00H
$SG4294967196 DB 'force-level', 00H
$SG4294967195 DB 'high-tier', 00H
	ORG $+1
$SG4294967194 DB 'me-steps', 00H
$SG4294967193 DB 'fast-residual-cost', 00H
$SG4294967192 DB 'set-qp-in-cu', 00H
	ORG $+3
$SG4294967191 DB 'open-gop', 00H
	ORG $+1
$SG4294967190 DB 'no-open-gop', 00H
$SG4294967187 DB 'scaling-list', 00H
	ORG $+3
$SG4294967186 DB 'max-merge', 00H
$SG4294967185 DB 'early-skip', 00H
$SG4294967184 DB 'no-early-skip', 00H
	ORG $+2
$SG4294967183 DB 'ml-pu-depth-intra', 00H
$SG4294967182 DB 'partial-coding', 00H
	ORG $+1
$SG4294967181 DB 'zero-coeff-rdo', 00H
	ORG $+1
$SG4294967180 DB 'no-zero-coeff-rdo', 00H
$SG4294967179 DB 'intra-qp-offset', 00H
$SG4294967178 DB 'rc-algorithm', 00H
	ORG $+3
$SG4294967177 DB 'intra-bits', 00H
	ORG $+1
$SG4294967176 DB 'no-intra-bits', 00H
	ORG $+2
$SG4294967175 DB 'clip-neighbour', 00H
	ORG $+1
$SG4294967174 DB 'no-clip-neighbour', 00H
	ORG $+2
$SG4294967173 DB 'input-file-format', 00H
$SG4294967172 DB 'stats-file-prefix', 00H
$SG4294967171 DB 'fast-coeff-table', 00H
	ORG $+1
$SG4294967170 DB 'fastrd-sampling', 00H
$SG4294967169 DB 'fastrd-accuracy-check', 00H
	ORG $+2
$SG4294967168 DB 'fastrd-outdir', 00H
PUBLIC	print_frame_info
PUBLIC	print_help
PUBLIC	print_version
PUBLIC	print_usage
PUBLIC	cmdline_opts_free
PUBLIC	cmdline_opts_parse
PUBLIC	sscanf
PUBLIC	_vsscanf_l
PUBLIC	fprintf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_scanf_options
PUBLIC	__local_stdio_printf_options
PUBLIC	__isa_available_default
PUBLIC	__real@3a83126f
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e7ad7f29abcaf48
PUBLIC	__real@3eb0000000000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f70000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb0000000000000
PUBLIC	__real@3fb965fea53d6e3c
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc5555555555555
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fce78f9e000f9a2
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fdf5c28f5c28f5c
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe1dcc63f141206
PUBLIC	__real@3fe23d70a3d70a3d
PUBLIC	__real@3fe428a2f98d728b
PUBLIC	__real@3fe965fea53d6e3d
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3fee666666666666
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff406f694467382
PUBLIC	__real@3ff428a2f98d728b
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff965fea53d6e3c
PUBLIC	__real@3ffb333333333333
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40013086567287c5
PUBLIC	__real@40055f81d1b7e0a6
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@400d404e27d9a26e
PUBLIC	__real@4010000000000000
PUBLIC	__real@40106d77318fc505
PUBLIC	__real@4010cd4fdf3b645a
PUBLIC	__real@4013000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@401d762e3b99e27e
PUBLIC	__real@4020000000000000
PUBLIC	__real@40210dfa43fe5c92
PUBLIC	__real@4022000000000000
PUBLIC	__real@402233f7ced91687
PUBLIC	__real@4022d80346dc5d64
PUBLIC	__real@4024000000000000
PUBLIC	__real@402428a2f98d728b
PUBLIC	__real@4024c4dd2f1a9fbe
PUBLIC	__real@40281edfa43fe5c9
PUBLIC	__real@402856e2eb1c432d
PUBLIC	__real@402a0314e3dae3ef
PUBLIC	__real@402a941205bc01a3
PUBLIC	__real@402c71d14e3bcd36
PUBLIC	__real@403033c36113404e
PUBLIC	__real@4030edbf487fcb92
PUBLIC	__real@4033f7c1bda5119d
PUBLIC	__real@4034000000000000
PUBLIC	__real@4034df0068db8bac
PUBLIC	__real@4034e2a9930be0df
PUBLIC	__real@403751bda5119ce0
PUBLIC	__real@403a99c0ebedfa44
PUBLIC	__real@403ebc1bda5119ce
PUBLIC	__real@404326d916872b02
PUBLIC	__real@40437bcd35a85879
PUBLIC	__real@404390e560418937
PUBLIC	__real@4044000000000000
PUBLIC	__real@4046e8b780346dc6
PUBLIC	__real@40471e90ff972474
PUBLIC	__real@40476f765fd8adac
PUBLIC	__real@404eb5ed288ce704
PUBLIC	__real@404f61ce075f6fd2
PUBLIC	__real@4050ab318fc50481
PUBLIC	__real@40518e027525460b
PUBLIC	__real@40521ab851eb851f
PUBLIC	__real@40523ce703afb7e9
PUBLIC	__real@40527f8bac710cb3
PUBLIC	__real@405409844d013a93
PUBLIC	__real@4054edbf487fcb92
PUBLIC	__real@405659bf487fcb92
PUBLIC	__real@4058f7c6a7ef9db2
PUBLIC	__real@4059000000000000
PUBLIC	__real@40598f0068db8bac
PUBLIC	__real@405d1fc01a36e2eb
PUBLIC	__real@405ddd82a9930be1
PUBLIC	__real@40613ce8a71de69b
PUBLIC	__real@40618a0346dc5d64
PUBLIC	__real@4061c989374bc6a8
PUBLIC	__real@406258bfb15b573f
PUBLIC	__real@4063731de69ad42c
PUBLIC	__real@40638cd844d013a9
PUBLIC	__real@40686f80346dc5d6
PUBLIC	__real@4069000000000000
PUBLIC	__real@406969e00d1b7176
PUBLIC	__real@406bb180346dc5d6
PUBLIC	__real@406c72dfa43fe5c9
PUBLIC	__real@406dc7318fc50481
PUBLIC	__real@406e08dfa43fe5c9
PUBLIC	__real@406e882de00d1b71
PUBLIC	__real@406fed8e219652bd
PUBLIC	__real@40703b1f8a0902de
PUBLIC	__real@4070488ef34d6a16
PUBLIC	__real@40719f36e2eb1c43
PUBLIC	__real@4071a4e703afb7e9
PUBLIC	__real@4074a37c1bda511a
PUBLIC	__real@4075fd05532617c2
PUBLIC	__real@4077737ef9db22d1
PUBLIC	__real@4077c97bb2fec56d
PUBLIC	__real@4078a7be0ded288d
PUBLIC	__real@407944f0068db8bb
PUBLIC	__real@407ecd0ded288ce7
PUBLIC	__real@407ed95bc01a36e3
PUBLIC	__real@4081a163f141205c
PUBLIC	__real@4081cd3e0ded288d
PUBLIC	__real@4081d99a6b50b0f2
PUBLIC	__real@4081dc436113404f
PUBLIC	__real@4083ce87c84b5dcc
PUBLIC	__real@408436902de00d1b
PUBLIC	__real@4084c61652bd3c36
PUBLIC	__real@4084c7985f06f694
PUBLIC	__real@4085c19758e21965
PUBLIC	__real@408994236e2eb1c4
PUBLIC	__real@408ace70068db8bb
PUBLIC	__real@408cf72d77318fc5
PUBLIC	__real@408ed9ddcc63f141
PUBLIC	__real@408f3feb851eb852
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090d84154c985f0
PUBLIC	__real@4091cbca0902de01
PUBLIC	__real@409285e425aee632
PUBLIC	__real@409f172bd3c36113
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a44ae7e28240b8
PUBLIC	__real@40a9c8ce8a71de6a
PUBLIC	__real@40b6d17a30553261
PUBLIC	__real@40b8ed8353f7ced9
PUBLIC	__real@40bda107381d7dbf
PUBLIC	__real@40c3880000000000
PUBLIC	__real@40c3d04d0e560419
PUBLIC	__real@40c71c54ed916873
PUBLIC	__real@40c8e9648e8a71de
PUBLIC	__real@40d0f0d96a161e4f
PUBLIC	__real@40daa64d8c7e2824
PUBLIC	__real@40df0ed4bfb15b57
PUBLIC	__real@40e0000000000000
PUBLIC	__real@40e231a94467381d
PUBLIC	__real@40e23a89a858793e
PUBLIC	__real@40edb650aa64c2f8
PUBLIC	__real@40efc02000000000
PUBLIC	__real@40f04218e28240b8
PUBLIC	__real@40f801dd3f141206
PUBLIC	__real@4197d78400000000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__real@43800000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@7fee42d130773b76
PUBLIC	__real@bf50624dd2f1a9fc
PUBLIC	__real@bf8fd2e22cdec4ed
PUBLIC	__real@bfad8abad381f0fc
PUBLIC	__real@bfb5deeea9bfa22f
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfc0000000000000
PUBLIC	__real@bfc5555555555555
PUBLIC	__real@bfd5555555555555
PUBLIC	__real@bfd7db625709bd73
PUBLIC	__real@bfe5555555555555
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c000000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@c014000000000000
PUBLIC	__xmm@00000000000000040000000000000004
PUBLIC	__xmm@00000000000000080000000000000008
PUBLIC	__xmm@00000000ffffffffffffffffffffffff
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000005000000040000000100000000
PUBLIC	__xmm@00000005000000040000000300000002
PUBLIC	__xmm@00000008000000080000000600000006
PUBLIC	__xmm@00000008000000080000000700000007
PUBLIC	__xmm@00000020000000200000002000000020
PUBLIC	__xmm@0000fffffffefffdfffcfffbfffafff9
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@00010203000102030001020300010203
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00100010001000100010001000100010
PUBLIC	__xmm@01010101010101010101010101010101
PUBLIC	__xmm@01040104010401030103010301030102
PUBLIC	__xmm@01040104010401030104010401040103
PUBLIC	__xmm@02020202020202020202020202020202
PUBLIC	__xmm@030209080f0e070601000d0c05040b0a
PUBLIC	__xmm@04030201040302010403020104030201
PUBLIC	__xmm@04040404040404040404040404040404
PUBLIC	__xmm@07070707060606060505050504040404
PUBLIC	__xmm@08080808080808080000000000000000
PUBLIC	__xmm@0b0a03020f0e0706090801000d0c0504
PUBLIC	__xmm@0b0a090805040f0e0302010007060d0c
PUBLIC	__xmm@0b0a09080f0e0d0c0302010007060504
PUBLIC	__xmm@0c0804000c0804000c0804000c080400
PUBLIC	__xmm@0c0c0c0c080808080404040400000000
PUBLIC	__xmm@0f0e07060b0a03020d0c050409080100
PUBLIC	__xmm@0f0e07060d0c05040b0a030209080100
PUBLIC	__xmm@0f0e0d0c05040b0a0706030209080100
PUBLIC	__xmm@0f0e0d0c0b0a09080706050403020100
PUBLIC	__xmm@10101010101010101010101010101010
PUBLIC	__xmm@1f1e1d1c1b1a19181716151413121110
PUBLIC	__xmm@3fe00000000000003fe0000000000000
PUBLIC	__xmm@3ff00000000000003ff0000000000000
PUBLIC	__xmm@400921fb54442d18400921fb54442d18
PUBLIC	__xmm@41f000000000000041f0000000000000
PUBLIC	__xmm@7fee42d130773b767fee42d130773b76
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80808080808080018080808080808000
PUBLIC	__xmm@bff0000000000000bff0000000000000
PUBLIC	__xmm@ffffffff00000000ffff000000000000
PUBLIC	__xmm@ffffffff00000000ffffffff00000000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
PUBLIC	__ymm@0000000000000000000000000000000000000000ffffffffffffffffffffffff
PUBLIC	__ymm@000000000000000000000000000000ff000000000000000000000000000000ff
PUBLIC	__ymm@0000000000000000000000040300020100000000000000000000000403000201
PUBLIC	__ymm@0000000000000000ffffffffffffffffffffffff000000000000000000000000
PUBLIC	__ymm@0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff
PUBLIC	__ymm@0000000000000004000000000000000400000000000000040000000000000004
PUBLIC	__ymm@0000000000000008000000000000000800000000000000080000000000000008
PUBLIC	__ymm@0000000100000001ffffffffffffffffffffffffffffffff0000000100000001
PUBLIC	__ymm@0000000100000004000000070000000300000000000000060000000200000005
PUBLIC	__ymm@0000000500000001000000070000000300000004000000000000000600000002
PUBLIC	__ymm@0000000500000004000000020000000700000001000000000000000300000006
PUBLIC	__ymm@0000000500000004000000070000000600000001000000000000000300000002
PUBLIC	__ymm@0000000700000003000000050000000100000006000000020000000400000000
PUBLIC	__ymm@0000000700000005000000030000000100000006000000040000000200000000
PUBLIC	__ymm@0000000700000006000000020000000500000003000000010000000400000000
PUBLIC	__ymm@0000000700000006000000050000000400000003000000020000000100000000
PUBLIC	__ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
PUBLIC	__ymm@0000002000000020000000200000002000000020000000200000002000000020
PUBLIC	__ymm@0000004000000040000000400000004000000040000000400000004000000040
PUBLIC	__ymm@0000008000000080000000800000008000000080000000800000008000000080
PUBLIC	__ymm@000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff
PUBLIC	__ymm@0001000100010001000100010001000100010001000100010001000100010001
PUBLIC	__ymm@0002000200020002000200020002000200020002000200020002000200020002
PUBLIC	__ymm@0003000300030003000300030003000300030003000300030003000300030003
PUBLIC	__ymm@0008000800050005000800080004000400070006000300010007000600020000
PUBLIC	__ymm@0008000800070007000800080006000600050004000300020005000400010000
PUBLIC	__ymm@0008000800080005000800070005000400060007000400030006000100020000
PUBLIC	__ymm@000f000e000d000c000b000a0009000800070006000500040003000200010000
PUBLIC	__ymm@0010001000100010001000100010001000100010001000100010001000100010
PUBLIC	__ymm@0100010009080908090809080100010001000100090809080908090801000100
PUBLIC	__ymm@0101010101010101000000000000000001010101010101010000000000000000
PUBLIC	__ymm@0101010101010101010101010101010101010101010101010101010101010101
PUBLIC	__ymm@0103010301030103010301030103010301030103010301030103010301030102
PUBLIC	__ymm@0103010301030103010301030103010301030103010301030103010301030103
PUBLIC	__ymm@0104010401040104010401040104010301030103010301030103010301030102
PUBLIC	__ymm@0202020202020202020202020202020202020202020202020202020202020202
PUBLIC	__ymm@0303030303030303030303030303030303030303030303030303030303030303
PUBLIC	__ymm@0807070606050504040303020201010008070706060505040403030202010100
PUBLIC	__ymm@090801000b0a03020f0e07060d0c05040d0c05040f0e07060b0a030209080100
PUBLIC	__ymm@090801000d0c0504090801000d0c05040d0c0504090801000d0c050409080100
PUBLIC	__ymm@09080b0a0d0c0f0e01000302050407060f0e0d0c0b0a09080706050403020100
PUBLIC	__ymm@0a0909080807070606050504040303020a090908080707060605050404030302
PUBLIC	__ymm@0c0b0b0a0a09090804030302020101000c0b0b0a0a0909080403030202010100
PUBLIC	__ymm@0c0b0b0a0a09090808070706060505040c0b0b0a0a0909080807070606050504
PUBLIC	__ymm@0d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c0504
PUBLIC	__ymm@0e0d0d0c0c0b0b0a06050504040303020e0d0d0c0c0b0b0a0605050404030302
PUBLIC	__ymm@0e0d0d0c0c0b0b0a0a090908080707060e0d0d0c0c0b0b0a0a09090808070706
PUBLIC	__ymm@0f0e0b0a070603020f0e0b0a070603020f0e0b0a070603020f0e0b0a07060302
PUBLIC	__ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100
PUBLIC	__ymm@0f0e0d0c0b0a09080706050403020100800f0e0d0c0b0a090807060504030201
PUBLIC	__ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
PUBLIC	__ymm@1010101010101010101010101010101010101010101010101010101010101010
PUBLIC	__ymm@1d1c1f1e19181b1a15141716111013120f0e0d0c0b0a09080706050403020100
PUBLIC	__ymm@1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
PUBLIC	__ymm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f
PUBLIC	__ymm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f
PUBLIC	__ymm@7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff
PUBLIC	__ymm@8080808080808080808080808080800180808080808080808080808080808000
PUBLIC	__ymm@8080808080808080808080808080808080808080808080808080808080808080
PUBLIC	__ymm@ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00
PUBLIC	__ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01
PUBLIC	__ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001
PUBLIC	__ymm@ffffffffffffffff0000000000000000ffffffff000000000000000000000000
PUBLIC	__ymm@ffffffffffffffff0000000000000000ffffffffffffffff0000000000000000
PUBLIC	__ymm@ffffffffffffffffffffffffffffffff00000001000000010000000100000001
PUBLIC	__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__chkstk:PROC
EXTRN	__vdecl_cos2:PROC
EXTRN	__vdecl_pow2:PROC
EXTRN	cos:PROC
EXTRN	exp:PROC
EXTRN	log:PROC
EXTRN	log10:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	pow:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__isa_available:DWORD
EXTRN	_fltused:DWORD
;	COMDAT __isa_available_default
_BSS	SEGMENT
__isa_available_default DD 01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$print_frame_info DD imagerel $LN20
	DD	imagerel $LN20+472
	DD	imagerel $unwind$print_frame_info
$pdata$print_help DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$print_help
$pdata$print_version DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$print_version
$pdata$print_usage DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$print_usage
$pdata$cmdline_opts_free DD imagerel $LN5
	DD	imagerel $LN5+24
	DD	imagerel $unwind$cmdline_opts_free
$pdata$0$cmdline_opts_free DD imagerel $LN5+24
	DD	imagerel $LN5+84
	DD	imagerel $chain$0$cmdline_opts_free
$pdata$1$cmdline_opts_free DD imagerel $LN5+84
	DD	imagerel $LN5+104
	DD	imagerel $chain$1$cmdline_opts_free
$pdata$cmdline_opts_parse DD imagerel $LN146
	DD	imagerel $LN146+1544
	DD	imagerel $unwind$cmdline_opts_parse
$pdata$detect_file_format DD imagerel detect_file_format
	DD	imagerel detect_file_format+67
	DD	imagerel $unwind$detect_file_format
$pdata$1$detect_file_format DD imagerel detect_file_format+67
	DD	imagerel detect_file_format+163
	DD	imagerel $chain$1$detect_file_format
$pdata$2$detect_file_format DD imagerel detect_file_format+163
	DD	imagerel detect_file_format+221
	DD	imagerel $chain$2$detect_file_format
$pdata$select_input_res_auto DD imagerel select_input_res_auto
	DD	imagerel select_input_res_auto+233
	DD	imagerel $unwind$select_input_res_auto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN6
	DD	imagerel $LN6+69
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$_vfprintf_l
;	COMDAT __ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
CONST	SEGMENT
__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff DB 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ffffffffffffffffffffffffffffffff00000001000000010000000100000001
CONST	SEGMENT
__ymm@ffffffffffffffffffffffffffffffff00000001000000010000000100000001 DB 01H
	DB	00H, 00H, 00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ffffffffffffffff0000000000000000ffffffffffffffff0000000000000000
CONST	SEGMENT
__ymm@ffffffffffffffff0000000000000000ffffffffffffffff0000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ffffffffffffffff0000000000000000ffffffff000000000000000000000000
CONST	SEGMENT
__ymm@ffffffffffffffff0000000000000000ffffffff000000000000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 0ffH, 0ffH
	DB	0ffH, 0ffH, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001
CONST	SEGMENT
__ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001 DB 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01
CONST	SEGMENT
__ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01 DB 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH
CONST	ENDS
;	COMDAT __ymm@ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00
CONST	SEGMENT
__ymm@ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 DB 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH
CONST	ENDS
;	COMDAT __ymm@8080808080808080808080808080808080808080808080808080808080808080
CONST	SEGMENT
__ymm@8080808080808080808080808080808080808080808080808080808080808080 DB 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __ymm@8080808080808080808080808080800180808080808080808080808080808000
CONST	SEGMENT
__ymm@8080808080808080808080808080800180808080808080808080808080808000 DB 00H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 01H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __ymm@7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__ymm@7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff7fffffff DB 0ffH
	DB	0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
	DB	0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH
	DB	07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __ymm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f
CONST	SEGMENT
__ymm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f DB 07fH
	DB	07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH
	DB	07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH
	DB	07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH, 07fH
CONST	ENDS
;	COMDAT __ymm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f
CONST	SEGMENT
__ymm@1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f DB 01fH
	DB	01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH
	DB	01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH
	DB	01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH, 01fH
CONST	ENDS
;	COMDAT __ymm@1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__ymm@1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100 DB 00H
	DB	01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, 014H, 015H, 016H, 017H, 018H
	DB	019H, 01aH, 01bH, 01cH, 01dH, 01eH, 01fH
CONST	ENDS
;	COMDAT __ymm@1d1c1f1e19181b1a15141716111013120f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__ymm@1d1c1f1e19181b1a15141716111013120f0e0d0c0b0a09080706050403020100 DB 00H
	DB	01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 012H, 013H, 010H, 011H, 016H, 017H, 014H, 015H, 01aH
	DB	01bH, 018H, 019H, 01eH, 01fH, 01cH, 01dH
CONST	ENDS
;	COMDAT __ymm@1010101010101010101010101010101010101010101010101010101010101010
CONST	SEGMENT
__ymm@1010101010101010101010101010101010101010101010101010101010101010 DB 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
CONST	ENDS
;	COMDAT __ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
CONST	SEGMENT
__ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f DB 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH
CONST	ENDS
;	COMDAT __ymm@0f0e0d0c0b0a09080706050403020100800f0e0d0c0b0a090807060504030201
CONST	SEGMENT
__ymm@0f0e0d0c0b0a09080706050403020100800f0e0d0c0b0a090807060504030201 DB 01H
	DB	02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH
	DB	0fH, 080H, 00H, 01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH
	DB	0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100 DB 00H
	DB	01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 00H, 01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH
	DB	0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __ymm@0f0e0b0a070603020f0e0b0a070603020f0e0b0a070603020f0e0b0a07060302
CONST	SEGMENT
__ymm@0f0e0b0a070603020f0e0b0a070603020f0e0b0a070603020f0e0b0a07060302 DB 02H
	DB	03H, 06H, 07H, 0aH, 0bH, 0eH, 0fH, 02H, 03H, 06H, 07H, 0aH, 0bH
	DB	0eH, 0fH, 02H, 03H, 06H, 07H, 0aH, 0bH, 0eH, 0fH, 02H, 03H, 06H
	DB	07H, 0aH, 0bH, 0eH, 0fH
CONST	ENDS
;	COMDAT __ymm@0e0d0d0c0c0b0b0a0a090908080707060e0d0d0c0c0b0b0a0a09090808070706
CONST	SEGMENT
__ymm@0e0d0d0c0c0b0b0a0a090908080707060e0d0d0c0c0b0b0a0a09090808070706 DB 06H
	DB	07H, 07H, 08H, 08H, 09H, 09H, 0aH, 0aH, 0bH, 0bH, 0cH, 0cH, 0dH
	DB	0dH, 0eH, 06H, 07H, 07H, 08H, 08H, 09H, 09H, 0aH, 0aH, 0bH, 0bH
	DB	0cH, 0cH, 0dH, 0dH, 0eH
CONST	ENDS
;	COMDAT __ymm@0e0d0d0c0c0b0b0a06050504040303020e0d0d0c0c0b0b0a0605050404030302
CONST	SEGMENT
__ymm@0e0d0d0c0c0b0b0a06050504040303020e0d0d0c0c0b0b0a0605050404030302 DB 02H
	DB	03H, 03H, 04H, 04H, 05H, 05H, 06H, 0aH, 0bH, 0bH, 0cH, 0cH, 0dH
	DB	0dH, 0eH, 02H, 03H, 03H, 04H, 04H, 05H, 05H, 06H, 0aH, 0bH, 0bH
	DB	0cH, 0cH, 0dH, 0dH, 0eH
CONST	ENDS
;	COMDAT __ymm@0d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c0504
CONST	SEGMENT
__ymm@0d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c05040d0c0504 DB 04H
	DB	05H, 0cH, 0dH, 04H, 05H, 0cH, 0dH, 04H, 05H, 0cH, 0dH, 04H, 05H
	DB	0cH, 0dH, 04H, 05H, 0cH, 0dH, 04H, 05H, 0cH, 0dH, 04H, 05H, 0cH
	DB	0dH, 04H, 05H, 0cH, 0dH
CONST	ENDS
;	COMDAT __ymm@0c0b0b0a0a09090808070706060505040c0b0b0a0a0909080807070606050504
CONST	SEGMENT
__ymm@0c0b0b0a0a09090808070706060505040c0b0b0a0a0909080807070606050504 DB 04H
	DB	05H, 05H, 06H, 06H, 07H, 07H, 08H, 08H, 09H, 09H, 0aH, 0aH, 0bH
	DB	0bH, 0cH, 04H, 05H, 05H, 06H, 06H, 07H, 07H, 08H, 08H, 09H, 09H
	DB	0aH, 0aH, 0bH, 0bH, 0cH
CONST	ENDS
;	COMDAT __ymm@0c0b0b0a0a09090804030302020101000c0b0b0a0a0909080403030202010100
CONST	SEGMENT
__ymm@0c0b0b0a0a09090804030302020101000c0b0b0a0a0909080403030202010100 DB 00H
	DB	01H, 01H, 02H, 02H, 03H, 03H, 04H, 08H, 09H, 09H, 0aH, 0aH, 0bH
	DB	0bH, 0cH, 00H, 01H, 01H, 02H, 02H, 03H, 03H, 04H, 08H, 09H, 09H
	DB	0aH, 0aH, 0bH, 0bH, 0cH
CONST	ENDS
;	COMDAT __ymm@0a0909080807070606050504040303020a090908080707060605050404030302
CONST	SEGMENT
__ymm@0a0909080807070606050504040303020a090908080707060605050404030302 DB 02H
	DB	03H, 03H, 04H, 04H, 05H, 05H, 06H, 06H, 07H, 07H, 08H, 08H, 09H
	DB	09H, 0aH, 02H, 03H, 03H, 04H, 04H, 05H, 05H, 06H, 06H, 07H, 07H
	DB	08H, 08H, 09H, 09H, 0aH
CONST	ENDS
;	COMDAT __ymm@09080b0a0d0c0f0e01000302050407060f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__ymm@09080b0a0d0c0f0e01000302050407060f0e0d0c0b0a09080706050403020100 DB 00H
	DB	01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 06H, 07H, 04H, 05H, 02H, 03H, 00H, 01H, 0eH, 0fH, 0cH
	DB	0dH, 0aH, 0bH, 08H, 09H
CONST	ENDS
;	COMDAT __ymm@090801000d0c0504090801000d0c05040d0c0504090801000d0c050409080100
CONST	SEGMENT
__ymm@090801000d0c0504090801000d0c05040d0c0504090801000d0c050409080100 DB 00H
	DB	01H, 08H, 09H, 04H, 05H, 0cH, 0dH, 00H, 01H, 08H, 09H, 04H, 05H
	DB	0cH, 0dH, 04H, 05H, 0cH, 0dH, 00H, 01H, 08H, 09H, 04H, 05H, 0cH
	DB	0dH, 00H, 01H, 08H, 09H
CONST	ENDS
;	COMDAT __ymm@090801000b0a03020f0e07060d0c05040d0c05040f0e07060b0a030209080100
CONST	SEGMENT
__ymm@090801000b0a03020f0e07060d0c05040d0c05040f0e07060b0a030209080100 DB 00H
	DB	01H, 08H, 09H, 02H, 03H, 0aH, 0bH, 06H, 07H, 0eH, 0fH, 04H, 05H
	DB	0cH, 0dH, 04H, 05H, 0cH, 0dH, 06H, 07H, 0eH, 0fH, 02H, 03H, 0aH
	DB	0bH, 00H, 01H, 08H, 09H
CONST	ENDS
;	COMDAT __ymm@0807070606050504040303020201010008070706060505040403030202010100
CONST	SEGMENT
__ymm@0807070606050504040303020201010008070706060505040403030202010100 DB 00H
	DB	01H, 01H, 02H, 02H, 03H, 03H, 04H, 04H, 05H, 05H, 06H, 06H, 07H
	DB	07H, 08H, 00H, 01H, 01H, 02H, 02H, 03H, 03H, 04H, 04H, 05H, 05H
	DB	06H, 06H, 07H, 07H, 08H
CONST	ENDS
;	COMDAT __ymm@0303030303030303030303030303030303030303030303030303030303030303
CONST	SEGMENT
__ymm@0303030303030303030303030303030303030303030303030303030303030303 DB 03H
	DB	03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H
	DB	03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H
	DB	03H, 03H, 03H, 03H, 03H
CONST	ENDS
;	COMDAT __ymm@0202020202020202020202020202020202020202020202020202020202020202
CONST	SEGMENT
__ymm@0202020202020202020202020202020202020202020202020202020202020202 DB 02H
	DB	02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H
	DB	02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H
	DB	02H, 02H, 02H, 02H, 02H
CONST	ENDS
;	COMDAT __ymm@0104010401040104010401040104010301030103010301030103010301030102
CONST	SEGMENT
__ymm@0104010401040104010401040104010301030103010301030103010301030102 DB 02H
	DB	01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H
	DB	03H, 01H, 03H, 01H, 04H, 01H, 04H, 01H, 04H, 01H, 04H, 01H, 04H
	DB	01H, 04H, 01H, 04H, 01H
CONST	ENDS
;	COMDAT __ymm@0103010301030103010301030103010301030103010301030103010301030103
CONST	SEGMENT
__ymm@0103010301030103010301030103010301030103010301030103010301030103 DB 03H
	DB	01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H
	DB	03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H
	DB	01H, 03H, 01H, 03H, 01H
CONST	ENDS
;	COMDAT __ymm@0103010301030103010301030103010301030103010301030103010301030102
CONST	SEGMENT
__ymm@0103010301030103010301030103010301030103010301030103010301030102 DB 02H
	DB	01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H
	DB	03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H, 01H, 03H
	DB	01H, 03H, 01H, 03H, 01H
CONST	ENDS
;	COMDAT __ymm@0101010101010101010101010101010101010101010101010101010101010101
CONST	SEGMENT
__ymm@0101010101010101010101010101010101010101010101010101010101010101 DB 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H
CONST	ENDS
;	COMDAT __ymm@0101010101010101000000000000000001010101010101010000000000000000
CONST	SEGMENT
__ymm@0101010101010101000000000000000001010101010101010000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H
CONST	ENDS
;	COMDAT __ymm@0100010009080908090809080100010001000100090809080908090801000100
CONST	SEGMENT
__ymm@0100010009080908090809080100010001000100090809080908090801000100 DB 00H
	DB	01H, 00H, 01H, 08H, 09H, 08H, 09H, 08H, 09H, 08H, 09H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 08H, 09H, 08H, 09H, 08H, 09H, 08H
	DB	09H, 00H, 01H, 00H, 01H
CONST	ENDS
;	COMDAT __ymm@0010001000100010001000100010001000100010001000100010001000100010
CONST	SEGMENT
__ymm@0010001000100010001000100010001000100010001000100010001000100010 DB 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H
CONST	ENDS
;	COMDAT __ymm@000f000e000d000c000b000a0009000800070006000500040003000200010000
CONST	SEGMENT
__ymm@000f000e000d000c000b000a0009000800070006000500040003000200010000 DB 00H
	DB	00H, 01H, 00H, 02H, 00H, 03H, 00H, 04H, 00H, 05H, 00H, 06H, 00H
	DB	07H, 00H, 08H, 00H, 09H, 00H, 0aH, 00H, 0bH, 00H, 0cH, 00H, 0dH
	DB	00H, 0eH, 00H, 0fH, 00H
CONST	ENDS
;	COMDAT __ymm@0008000800080005000800070005000400060007000400030006000100020000
CONST	SEGMENT
__ymm@0008000800080005000800070005000400060007000400030006000100020000 DB 00H
	DB	00H, 02H, 00H, 01H, 00H, 06H, 00H, 03H, 00H, 04H, 00H, 07H, 00H
	DB	06H, 00H, 04H, 00H, 05H, 00H, 07H, 00H, 08H, 00H, 05H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0008000800070007000800080006000600050004000300020005000400010000
CONST	SEGMENT
__ymm@0008000800070007000800080006000600050004000300020005000400010000 DB 00H
	DB	00H, 01H, 00H, 04H, 00H, 05H, 00H, 02H, 00H, 03H, 00H, 04H, 00H
	DB	05H, 00H, 06H, 00H, 06H, 00H, 08H, 00H, 08H, 00H, 07H, 00H, 07H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0008000800050005000800080004000400070006000300010007000600020000
CONST	SEGMENT
__ymm@0008000800050005000800080004000400070006000300010007000600020000 DB 00H
	DB	00H, 02H, 00H, 06H, 00H, 07H, 00H, 01H, 00H, 03H, 00H, 06H, 00H
	DB	07H, 00H, 04H, 00H, 04H, 00H, 08H, 00H, 08H, 00H, 05H, 00H, 05H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0003000300030003000300030003000300030003000300030003000300030003
CONST	SEGMENT
__ymm@0003000300030003000300030003000300030003000300030003000300030003 DB 03H
	DB	00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H
	DB	03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H
	DB	00H, 03H, 00H, 03H, 00H
CONST	ENDS
;	COMDAT __ymm@0002000200020002000200020002000200020002000200020002000200020002
CONST	SEGMENT
__ymm@0002000200020002000200020002000200020002000200020002000200020002 DB 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
	DB	02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __ymm@0001000100010001000100010001000100010001000100010001000100010001
CONST	SEGMENT
__ymm@0001000100010001000100010001000100010001000100010001000100010001 DB 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
	DB	01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __ymm@000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff
CONST	SEGMENT
__ymm@000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff DB 0ffH
	DB	00H, 00H, 00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H
	DB	00H, 00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H
	DB	00H, 0ffH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000008000000080000000800000008000000080000000800000008000000080
CONST	SEGMENT
__ymm@0000008000000080000000800000008000000080000000800000008000000080 DB 080H
	DB	00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H
	DB	00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H, 00H, 00H
	DB	00H, 080H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000004000000040000000400000004000000040000000400000004000000040
CONST	SEGMENT
__ymm@0000004000000040000000400000004000000040000000400000004000000040 DB '@'
	DB	00H, 00H, 00H, '@', 00H, 00H, 00H, '@', 00H, 00H, 00H, '@', 00H
	DB	00H, 00H, '@', 00H, 00H, 00H, '@', 00H, 00H, 00H, '@', 00H, 00H
	DB	00H, '@', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000002000000020000000200000002000000020000000200000002000000020
CONST	SEGMENT
__ymm@0000002000000020000000200000002000000020000000200000002000000020 DB ' '
	DB	00H, 00H, 00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H, ' ', 00H
	DB	00H, 00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
CONST	SEGMENT
__ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003 DB 03H
	DB	00H, 00H, 00H, 07H, 00H, 00H, 00H, 0bH, 00H, 00H, 00H, 0fH, 00H
	DB	00H, 00H, 013H, 00H, 00H, 00H, 017H, 00H, 00H, 00H, 01bH, 00H, 00H
	DB	00H, 01fH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000700000006000000050000000400000003000000020000000100000000
CONST	SEGMENT
__ymm@0000000700000006000000050000000400000003000000020000000100000000 DB 00H
	DB	00H, 00H, 00H, 01H, 00H, 00H, 00H, 02H, 00H, 00H, 00H, 03H, 00H
	DB	00H, 00H, 04H, 00H, 00H, 00H, 05H, 00H, 00H, 00H, 06H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000700000006000000020000000500000003000000010000000400000000
CONST	SEGMENT
__ymm@0000000700000006000000020000000500000003000000010000000400000000 DB 00H
	DB	00H, 00H, 00H, 04H, 00H, 00H, 00H, 01H, 00H, 00H, 00H, 03H, 00H
	DB	00H, 00H, 05H, 00H, 00H, 00H, 02H, 00H, 00H, 00H, 06H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000700000005000000030000000100000006000000040000000200000000
CONST	SEGMENT
__ymm@0000000700000005000000030000000100000006000000040000000200000000 DB 00H
	DB	00H, 00H, 00H, 02H, 00H, 00H, 00H, 04H, 00H, 00H, 00H, 06H, 00H
	DB	00H, 00H, 01H, 00H, 00H, 00H, 03H, 00H, 00H, 00H, 05H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000700000003000000050000000100000006000000020000000400000000
CONST	SEGMENT
__ymm@0000000700000003000000050000000100000006000000020000000400000000 DB 00H
	DB	00H, 00H, 00H, 04H, 00H, 00H, 00H, 02H, 00H, 00H, 00H, 06H, 00H
	DB	00H, 00H, 01H, 00H, 00H, 00H, 05H, 00H, 00H, 00H, 03H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000500000004000000070000000600000001000000000000000300000002
CONST	SEGMENT
__ymm@0000000500000004000000070000000600000001000000000000000300000002 DB 02H
	DB	00H, 00H, 00H, 03H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 00H, 06H, 00H, 00H, 00H, 07H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000500000004000000020000000700000001000000000000000300000006
CONST	SEGMENT
__ymm@0000000500000004000000020000000700000001000000000000000300000006 DB 06H
	DB	00H, 00H, 00H, 03H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 00H
	DB	00H, 00H, 07H, 00H, 00H, 00H, 02H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000500000001000000070000000300000004000000000000000600000002
CONST	SEGMENT
__ymm@0000000500000001000000070000000300000004000000000000000600000002 DB 02H
	DB	00H, 00H, 00H, 06H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 04H, 00H
	DB	00H, 00H, 03H, 00H, 00H, 00H, 07H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000100000004000000070000000300000000000000060000000200000005
CONST	SEGMENT
__ymm@0000000100000004000000070000000300000000000000060000000200000005 DB 05H
	DB	00H, 00H, 00H, 02H, 00H, 00H, 00H, 06H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 03H, 00H, 00H, 00H, 07H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000100000001ffffffffffffffffffffffffffffffff0000000100000001
CONST	SEGMENT
__ymm@0000000100000001ffffffffffffffffffffffffffffffff0000000100000001 DB 01H
	DB	00H, 00H, 00H, 01H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000008000000000000000800000000000000080000000000000008
CONST	SEGMENT
__ymm@0000000000000008000000000000000800000000000000080000000000000008 DB 08H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 08H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 08H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 08H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000004000000000000000400000000000000040000000000000004
CONST	SEGMENT
__ymm@0000000000000004000000000000000400000000000000040000000000000004 DB 04H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 04H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 04H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff
CONST	SEGMENT
__ymm@0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffff DB 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000ffffffffffffffffffffffff000000000000000000000000
CONST	SEGMENT
__ymm@0000000000000000ffffffffffffffffffffffff000000000000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000000000040300020100000000000000000000000403000201
CONST	SEGMENT
__ymm@0000000000000000000000040300020100000000000000000000000403000201 DB 01H
	DB	02H, 00H, 03H, 04H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 01H, 02H, 00H, 03H, 04H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@000000000000000000000000000000ff000000000000000000000000000000ff
CONST	SEGMENT
__ymm@000000000000000000000000000000ff000000000000000000000000000000ff DB 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 0ffH, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000000000000000000000000000ffffffffffffffffffffffff
CONST	SEGMENT
__ymm@0000000000000000000000000000000000000000ffffffffffffffffffffffff DB 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@ffffffff00000000ffffffff00000000
CONST	SEGMENT
__xmm@ffffffff00000000ffffffff00000000 DB 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH
	DB	0ffH, 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@ffffffff00000000ffff000000000000
CONST	SEGMENT
__xmm@ffffffff00000000ffff000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0ffH
	DB	0ffH, 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@bff0000000000000bff0000000000000
CONST	SEGMENT
__xmm@bff0000000000000bff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	0bfH, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 0bfH
CONST	ENDS
;	COMDAT __xmm@80808080808080018080808080808000
CONST	SEGMENT
__xmm@80808080808080018080808080808000 DB 00H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 01H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@7fee42d130773b767fee42d130773b76
CONST	SEGMENT
__xmm@7fee42d130773b767fee42d130773b76 DB 'v;w0', 0d1H, 'B', 0eeH, 07fH, 'v'
	DB	';w0', 0d1H, 'B', 0eeH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f000000000000041f0000000000000
CONST	SEGMENT
__xmm@41f000000000000041f0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'A', 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@400921fb54442d18400921fb54442d18
CONST	SEGMENT
__xmm@400921fb54442d18400921fb54442d18 DB 018H, '-DT', 0fbH, '!', 09H, '@'
	DB	018H, '-DT', 0fbH, '!', 09H, '@'
CONST	ENDS
;	COMDAT __xmm@3ff00000000000003ff0000000000000
CONST	SEGMENT
__xmm@3ff00000000000003ff0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0f0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, '?'
CONST	ENDS
;	COMDAT __xmm@3fe00000000000003fe0000000000000
CONST	SEGMENT
__xmm@3fe00000000000003fe0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0e0H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 0e0H, '?'
CONST	ENDS
;	COMDAT __xmm@1f1e1d1c1b1a19181716151413121110
CONST	SEGMENT
__xmm@1f1e1d1c1b1a19181716151413121110 DB 010H, 011H, 012H, 013H, 014H, 015H
	DB	016H, 017H, 018H, 019H, 01aH, 01bH, 01cH, 01dH, 01eH, 01fH
CONST	ENDS
;	COMDAT __xmm@10101010101010101010101010101010
CONST	SEGMENT
__xmm@10101010101010101010101010101010 DB 010H, 010H, 010H, 010H, 010H, 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
CONST	ENDS
;	COMDAT __xmm@0f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__xmm@0f0e0d0c0b0a09080706050403020100 DB 00H, 01H, 02H, 03H, 04H, 05H, 06H
	DB	07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0f0e0d0c05040b0a0706030209080100
CONST	SEGMENT
__xmm@0f0e0d0c05040b0a0706030209080100 DB 00H, 01H, 08H, 09H, 02H, 03H, 06H
	DB	07H, 0aH, 0bH, 04H, 05H, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0f0e07060d0c05040b0a030209080100
CONST	SEGMENT
__xmm@0f0e07060d0c05040b0a030209080100 DB 00H, 01H, 08H, 09H, 02H, 03H, 0aH
	DB	0bH, 04H, 05H, 0cH, 0dH, 06H, 07H, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0f0e07060b0a03020d0c050409080100
CONST	SEGMENT
__xmm@0f0e07060b0a03020d0c050409080100 DB 00H, 01H, 08H, 09H, 04H, 05H, 0cH
	DB	0dH, 02H, 03H, 0aH, 0bH, 06H, 07H, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0c0c0c0c080808080404040400000000
CONST	SEGMENT
__xmm@0c0c0c0c080808080404040400000000 DB 00H, 00H, 00H, 00H, 04H, 04H, 04H
	DB	04H, 08H, 08H, 08H, 08H, 0cH, 0cH, 0cH, 0cH
CONST	ENDS
;	COMDAT __xmm@0c0804000c0804000c0804000c080400
CONST	SEGMENT
__xmm@0c0804000c0804000c0804000c080400 DB 00H, 04H, 08H, 0cH, 00H, 04H, 08H
	DB	0cH, 00H, 04H, 08H, 0cH, 00H, 04H, 08H, 0cH
CONST	ENDS
;	COMDAT __xmm@0b0a09080f0e0d0c0302010007060504
CONST	SEGMENT
__xmm@0b0a09080f0e0d0c0302010007060504 DB 04H, 05H, 06H, 07H, 00H, 01H, 02H
	DB	03H, 0cH, 0dH, 0eH, 0fH, 08H, 09H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@0b0a090805040f0e0302010007060d0c
CONST	SEGMENT
__xmm@0b0a090805040f0e0302010007060d0c DB 0cH, 0dH, 06H, 07H, 00H, 01H, 02H
	DB	03H, 0eH, 0fH, 04H, 05H, 08H, 09H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@0b0a03020f0e0706090801000d0c0504
CONST	SEGMENT
__xmm@0b0a03020f0e0706090801000d0c0504 DB 04H, 05H, 0cH, 0dH, 00H, 01H, 08H
	DB	09H, 06H, 07H, 0eH, 0fH, 02H, 03H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@08080808080808080000000000000000
CONST	SEGMENT
__xmm@08080808080808080000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 08H, 08H, 08H, 08H, 08H, 08H, 08H, 08H
CONST	ENDS
;	COMDAT __xmm@07070707060606060505050504040404
CONST	SEGMENT
__xmm@07070707060606060505050504040404 DB 04H, 04H, 04H, 04H, 05H, 05H, 05H
	DB	05H, 06H, 06H, 06H, 06H, 07H, 07H, 07H, 07H
CONST	ENDS
;	COMDAT __xmm@04040404040404040404040404040404
CONST	SEGMENT
__xmm@04040404040404040404040404040404 DB 04H, 04H, 04H, 04H, 04H, 04H, 04H
	DB	04H, 04H, 04H, 04H, 04H, 04H, 04H, 04H, 04H
CONST	ENDS
;	COMDAT __xmm@04030201040302010403020104030201
CONST	SEGMENT
__xmm@04030201040302010403020104030201 DB 01H, 02H, 03H, 04H, 01H, 02H, 03H
	DB	04H, 01H, 02H, 03H, 04H, 01H, 02H, 03H, 04H
CONST	ENDS
;	COMDAT __xmm@030209080f0e070601000d0c05040b0a
CONST	SEGMENT
__xmm@030209080f0e070601000d0c05040b0a DB 0aH, 0bH, 04H, 05H, 0cH, 0dH, 00H
	DB	01H, 06H, 07H, 0eH, 0fH, 08H, 09H, 02H, 03H
CONST	ENDS
;	COMDAT __xmm@02020202020202020202020202020202
CONST	SEGMENT
__xmm@02020202020202020202020202020202 DB 02H, 02H, 02H, 02H, 02H, 02H, 02H
	DB	02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H
CONST	ENDS
;	COMDAT __xmm@01040104010401030104010401040103
CONST	SEGMENT
__xmm@01040104010401030104010401040103 DB 03H, 01H, 04H, 01H, 04H, 01H, 04H
	DB	01H, 03H, 01H, 04H, 01H, 04H, 01H, 04H, 01H
CONST	ENDS
;	COMDAT __xmm@01040104010401030103010301030102
CONST	SEGMENT
__xmm@01040104010401030103010301030102 DB 02H, 01H, 03H, 01H, 03H, 01H, 03H
	DB	01H, 03H, 01H, 04H, 01H, 04H, 01H, 04H, 01H
CONST	ENDS
;	COMDAT __xmm@01010101010101010101010101010101
CONST	SEGMENT
__xmm@01010101010101010101010101010101 DB 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00100010001000100010001000100010
CONST	SEGMENT
__xmm@00100010001000100010001000100010 DB 010H, 00H, 010H, 00H, 010H, 00H
	DB	010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00010203000102030001020300010203
CONST	SEGMENT
__xmm@00010203000102030001020300010203 DB 03H, 02H, 01H, 00H, 03H, 02H, 01H
	DB	00H, 03H, 02H, 01H, 00H, 03H, 02H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@0000fffffffefffdfffcfffbfffafff9
CONST	SEGMENT
__xmm@0000fffffffefffdfffcfffbfffafff9 DB 0f9H, 0ffH, 0faH, 0ffH, 0fbH, 0ffH
	DB	0fcH, 0ffH, 0fdH, 0ffH, 0feH, 0ffH, 0ffH, 0ffH, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000020000000200000002000000020
CONST	SEGMENT
__xmm@00000020000000200000002000000020 DB ' ', 00H, 00H, 00H, ' ', 00H, 00H
	DB	00H, ' ', 00H, 00H, 00H, ' ', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000080000000700000007
CONST	SEGMENT
__xmm@00000008000000080000000700000007 DB 07H, 00H, 00H, 00H, 07H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000008000000080000000600000006
CONST	SEGMENT
__xmm@00000008000000080000000600000006 DB 06H, 00H, 00H, 00H, 06H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 08H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000005000000040000000300000002
CONST	SEGMENT
__xmm@00000005000000040000000300000002 DB 02H, 00H, 00H, 00H, 03H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000005000000040000000100000000
CONST	SEGMENT
__xmm@00000005000000040000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000ffffffffffffffffffffffff
CONST	SEGMENT
__xmm@00000000ffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000080000000000000008
CONST	SEGMENT
__xmm@00000000000000080000000000000008 DB 08H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000040000000000000004
CONST	SEGMENT
__xmm@00000000000000040000000000000004 DB 04H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe5555555555555
CONST	SEGMENT
__real@bfe5555555555555 DQ 0bfe5555555555555r	; -0.666667
CONST	ENDS
;	COMDAT __real@bfd7db625709bd73
CONST	SEGMENT
__real@bfd7db625709bd73 DQ 0bfd7db625709bd73r	; -0.372765
CONST	ENDS
;	COMDAT __real@bfd5555555555555
CONST	SEGMENT
__real@bfd5555555555555 DQ 0bfd5555555555555r	; -0.333333
CONST	ENDS
;	COMDAT __real@bfc5555555555555
CONST	SEGMENT
__real@bfc5555555555555 DQ 0bfc5555555555555r	; -0.166667
CONST	ENDS
;	COMDAT __real@bfc0000000000000
CONST	SEGMENT
__real@bfc0000000000000 DQ 0bfc0000000000000r	; -0.125
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bfb5deeea9bfa22f
CONST	SEGMENT
__real@bfb5deeea9bfa22f DQ 0bfb5deeea9bfa22fr	; -0.0854329
CONST	ENDS
;	COMDAT __real@bfad8abad381f0fc
CONST	SEGMENT
__real@bfad8abad381f0fc DQ 0bfad8abad381f0fcr	; -0.057699
CONST	ENDS
;	COMDAT __real@bf8fd2e22cdec4ed
CONST	SEGMENT
__real@bf8fd2e22cdec4ed DQ 0bf8fd2e22cdec4edr	; -0.0155389
CONST	ENDS
;	COMDAT __real@bf50624dd2f1a9fc
CONST	SEGMENT
__real@bf50624dd2f1a9fc DQ 0bf50624dd2f1a9fcr	; -0.001
CONST	ENDS
;	COMDAT __real@7fee42d130773b76
CONST	SEGMENT
__real@7fee42d130773b76 DQ 07fee42d130773b76r	; 1.7e+308
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@4197d78400000000
CONST	SEGMENT
__real@4197d78400000000 DQ 04197d78400000000r	; 1e+08
CONST	ENDS
;	COMDAT __real@40f801dd3f141206
CONST	SEGMENT
__real@40f801dd3f141206 DQ 040f801dd3f141206r	; 98333.8
CONST	ENDS
;	COMDAT __real@40f04218e28240b8
CONST	SEGMENT
__real@40f04218e28240b8 DQ 040f04218e28240b8r	; 66593.6
CONST	ENDS
;	COMDAT __real@40efc02000000000
CONST	SEGMENT
__real@40efc02000000000 DQ 040efc02000000000r	; 65025
CONST	ENDS
;	COMDAT __real@40edb650aa64c2f8
CONST	SEGMENT
__real@40edb650aa64c2f8 DQ 040edb650aa64c2f8r	; 60850.5
CONST	ENDS
;	COMDAT __real@40e23a89a858793e
CONST	SEGMENT
__real@40e23a89a858793e DQ 040e23a89a858793er	; 37332.3
CONST	ENDS
;	COMDAT __real@40e231a94467381d
CONST	SEGMENT
__real@40e231a94467381d DQ 040e231a94467381dr	; 37261.3
CONST	ENDS
;	COMDAT __real@40e0000000000000
CONST	SEGMENT
__real@40e0000000000000 DQ 040e0000000000000r	; 32768
CONST	ENDS
;	COMDAT __real@40df0ed4bfb15b57
CONST	SEGMENT
__real@40df0ed4bfb15b57 DQ 040df0ed4bfb15b57r	; 31803.3
CONST	ENDS
;	COMDAT __real@40daa64d8c7e2824
CONST	SEGMENT
__real@40daa64d8c7e2824 DQ 040daa64d8c7e2824r	; 27289.2
CONST	ENDS
;	COMDAT __real@40d0f0d96a161e4f
CONST	SEGMENT
__real@40d0f0d96a161e4f DQ 040d0f0d96a161e4fr	; 17347.4
CONST	ENDS
;	COMDAT __real@40c8e9648e8a71de
CONST	SEGMENT
__real@40c8e9648e8a71de DQ 040c8e9648e8a71der	; 12754.8
CONST	ENDS
;	COMDAT __real@40c71c54ed916873
CONST	SEGMENT
__real@40c71c54ed916873 DQ 040c71c54ed916873r	; 11832.7
CONST	ENDS
;	COMDAT __real@40c3d04d0e560419
CONST	SEGMENT
__real@40c3d04d0e560419 DQ 040c3d04d0e560419r	; 10144.6
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@40bda107381d7dbf
CONST	SEGMENT
__real@40bda107381d7dbf DQ 040bda107381d7dbfr	; 7585.03
CONST	ENDS
;	COMDAT __real@40b8ed8353f7ced9
CONST	SEGMENT
__real@40b8ed8353f7ced9 DQ 040b8ed8353f7ced9r	; 6381.51
CONST	ENDS
;	COMDAT __real@40b6d17a30553261
CONST	SEGMENT
__real@40b6d17a30553261 DQ 040b6d17a30553261r	; 5841.48
CONST	ENDS
;	COMDAT __real@40a9c8ce8a71de6a
CONST	SEGMENT
__real@40a9c8ce8a71de6a DQ 040a9c8ce8a71de6ar	; 3300.4
CONST	ENDS
;	COMDAT __real@40a44ae7e28240b8
CONST	SEGMENT
__real@40a44ae7e28240b8 DQ 040a44ae7e28240b8r	; 2597.45
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@409f172bd3c36113
CONST	SEGMENT
__real@409f172bd3c36113 DQ 0409f172bd3c36113r	; 1989.79
CONST	ENDS
;	COMDAT __real@409285e425aee632
CONST	SEGMENT
__real@409285e425aee632 DQ 0409285e425aee632r	; 1185.47
CONST	ENDS
;	COMDAT __real@4091cbca0902de01
CONST	SEGMENT
__real@4091cbca0902de01 DQ 04091cbca0902de01r	; 1138.95
CONST	ENDS
;	COMDAT __real@4090d84154c985f0
CONST	SEGMENT
__real@4090d84154c985f0 DQ 04090d84154c985f0r	; 1078.06
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408f3feb851eb852
CONST	SEGMENT
__real@408f3feb851eb852 DQ 0408f3feb851eb852r	; 999.99
CONST	ENDS
;	COMDAT __real@408ed9ddcc63f141
CONST	SEGMENT
__real@408ed9ddcc63f141 DQ 0408ed9ddcc63f141r	; 987.233
CONST	ENDS
;	COMDAT __real@408cf72d77318fc5
CONST	SEGMENT
__real@408cf72d77318fc5 DQ 0408cf72d77318fc5r	; 926.897
CONST	ENDS
;	COMDAT __real@408ace70068db8bb
CONST	SEGMENT
__real@408ace70068db8bb DQ 0408ace70068db8bbr	; 857.805
CONST	ENDS
;	COMDAT __real@408994236e2eb1c4
CONST	SEGMENT
__real@408994236e2eb1c4 DQ 0408994236e2eb1c4r	; 818.517
CONST	ENDS
;	COMDAT __real@4085c19758e21965
CONST	SEGMENT
__real@4085c19758e21965 DQ 04085c19758e21965r	; 696.199
CONST	ENDS
;	COMDAT __real@4084c7985f06f694
CONST	SEGMENT
__real@4084c7985f06f694 DQ 04084c7985f06f694r	; 664.949
CONST	ENDS
;	COMDAT __real@4084c61652bd3c36
CONST	SEGMENT
__real@4084c61652bd3c36 DQ 04084c61652bd3c36r	; 664.761
CONST	ENDS
;	COMDAT __real@408436902de00d1b
CONST	SEGMENT
__real@408436902de00d1b DQ 0408436902de00d1br	; 646.82
CONST	ENDS
;	COMDAT __real@4083ce87c84b5dcc
CONST	SEGMENT
__real@4083ce87c84b5dcc DQ 04083ce87c84b5dccr	; 633.816
CONST	ENDS
;	COMDAT __real@4081dc436113404f
CONST	SEGMENT
__real@4081dc436113404f DQ 04081dc436113404fr	; 571.533
CONST	ENDS
;	COMDAT __real@4081d99a6b50b0f2
CONST	SEGMENT
__real@4081d99a6b50b0f2 DQ 04081d99a6b50b0f2r	; 571.2
CONST	ENDS
;	COMDAT __real@4081cd3e0ded288d
CONST	SEGMENT
__real@4081cd3e0ded288d DQ 04081cd3e0ded288dr	; 569.655
CONST	ENDS
;	COMDAT __real@4081a163f141205c
CONST	SEGMENT
__real@4081a163f141205c DQ 04081a163f141205cr	; 564.174
CONST	ENDS
;	COMDAT __real@407ed95bc01a36e3
CONST	SEGMENT
__real@407ed95bc01a36e3 DQ 0407ed95bc01a36e3r	; 493.585
CONST	ENDS
;	COMDAT __real@407ecd0ded288ce7
CONST	SEGMENT
__real@407ecd0ded288ce7 DQ 0407ecd0ded288ce7r	; 492.816
CONST	ENDS
;	COMDAT __real@407944f0068db8bb
CONST	SEGMENT
__real@407944f0068db8bb DQ 0407944f0068db8bbr	; 404.309
CONST	ENDS
;	COMDAT __real@4078a7be0ded288d
CONST	SEGMENT
__real@4078a7be0ded288d DQ 04078a7be0ded288dr	; 394.484
CONST	ENDS
;	COMDAT __real@4077c97bb2fec56d
CONST	SEGMENT
__real@4077c97bb2fec56d DQ 04077c97bb2fec56dr	; 380.593
CONST	ENDS
;	COMDAT __real@4077737ef9db22d1
CONST	SEGMENT
__real@4077737ef9db22d1 DQ 04077737ef9db22d1r	; 375.219
CONST	ENDS
;	COMDAT __real@4075fd05532617c2
CONST	SEGMENT
__real@4075fd05532617c2 DQ 04075fd05532617c2r	; 351.814
CONST	ENDS
;	COMDAT __real@4074a37c1bda511a
CONST	SEGMENT
__real@4074a37c1bda511a DQ 04074a37c1bda511ar	; 330.218
CONST	ENDS
;	COMDAT __real@4071a4e703afb7e9
CONST	SEGMENT
__real@4071a4e703afb7e9 DQ 04071a4e703afb7e9r	; 282.306
CONST	ENDS
;	COMDAT __real@40719f36e2eb1c43
CONST	SEGMENT
__real@40719f36e2eb1c43 DQ 040719f36e2eb1c43r	; 281.951
CONST	ENDS
;	COMDAT __real@4070488ef34d6a16
CONST	SEGMENT
__real@4070488ef34d6a16 DQ 04070488ef34d6a16r	; 260.535
CONST	ENDS
;	COMDAT __real@40703b1f8a0902de
CONST	SEGMENT
__real@40703b1f8a0902de DQ 040703b1f8a0902der	; 259.695
CONST	ENDS
;	COMDAT __real@406fed8e219652bd
CONST	SEGMENT
__real@406fed8e219652bd DQ 0406fed8e219652bdr	; 255.424
CONST	ENDS
;	COMDAT __real@406e882de00d1b71
CONST	SEGMENT
__real@406e882de00d1b71 DQ 0406e882de00d1b71r	; 244.256
CONST	ENDS
;	COMDAT __real@406e08dfa43fe5c9
CONST	SEGMENT
__real@406e08dfa43fe5c9 DQ 0406e08dfa43fe5c9r	; 240.277
CONST	ENDS
;	COMDAT __real@406dc7318fc50481
CONST	SEGMENT
__real@406dc7318fc50481 DQ 0406dc7318fc50481r	; 238.225
CONST	ENDS
;	COMDAT __real@406c72dfa43fe5c9
CONST	SEGMENT
__real@406c72dfa43fe5c9 DQ 0406c72dfa43fe5c9r	; 227.59
CONST	ENDS
;	COMDAT __real@406bb180346dc5d6
CONST	SEGMENT
__real@406bb180346dc5d6 DQ 0406bb180346dc5d6r	; 221.547
CONST	ENDS
;	COMDAT __real@406969e00d1b7176
CONST	SEGMENT
__real@406969e00d1b7176 DQ 0406969e00d1b7176r	; 203.309
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@40686f80346dc5d6
CONST	SEGMENT
__real@40686f80346dc5d6 DQ 040686f80346dc5d6r	; 195.484
CONST	ENDS
;	COMDAT __real@40638cd844d013a9
CONST	SEGMENT
__real@40638cd844d013a9 DQ 040638cd844d013a9r	; 156.401
CONST	ENDS
;	COMDAT __real@4063731de69ad42c
CONST	SEGMENT
__real@4063731de69ad42c DQ 04063731de69ad42cr	; 155.597
CONST	ENDS
;	COMDAT __real@406258bfb15b573f
CONST	SEGMENT
__real@406258bfb15b573f DQ 0406258bfb15b573fr	; 146.773
CONST	ENDS
;	COMDAT __real@4061c989374bc6a8
CONST	SEGMENT
__real@4061c989374bc6a8 DQ 04061c989374bc6a8r	; 142.298
CONST	ENDS
;	COMDAT __real@40618a0346dc5d64
CONST	SEGMENT
__real@40618a0346dc5d64 DQ 040618a0346dc5d64r	; 140.313
CONST	ENDS
;	COMDAT __real@40613ce8a71de69b
CONST	SEGMENT
__real@40613ce8a71de69b DQ 040613ce8a71de69br	; 137.903
CONST	ENDS
;	COMDAT __real@405ddd82a9930be1
CONST	SEGMENT
__real@405ddd82a9930be1 DQ 0405ddd82a9930be1r	; 119.461
CONST	ENDS
;	COMDAT __real@405d1fc01a36e2eb
CONST	SEGMENT
__real@405d1fc01a36e2eb DQ 0405d1fc01a36e2ebr	; 116.496
CONST	ENDS
;	COMDAT __real@40598f0068db8bac
CONST	SEGMENT
__real@40598f0068db8bac DQ 040598f0068db8bacr	; 102.234
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4058f7c6a7ef9db2
CONST	SEGMENT
__real@4058f7c6a7ef9db2 DQ 04058f7c6a7ef9db2r	; 99.8715
CONST	ENDS
;	COMDAT __real@405659bf487fcb92
CONST	SEGMENT
__real@405659bf487fcb92 DQ 0405659bf487fcb92r	; 89.4023
CONST	ENDS
;	COMDAT __real@4054edbf487fcb92
CONST	SEGMENT
__real@4054edbf487fcb92 DQ 04054edbf487fcb92r	; 83.7148
CONST	ENDS
;	COMDAT __real@405409844d013a93
CONST	SEGMENT
__real@405409844d013a93 DQ 0405409844d013a93r	; 80.1487
CONST	ENDS
;	COMDAT __real@40527f8bac710cb3
CONST	SEGMENT
__real@40527f8bac710cb3 DQ 040527f8bac710cb3r	; 73.9929
CONST	ENDS
;	COMDAT __real@40523ce703afb7e9
CONST	SEGMENT
__real@40523ce703afb7e9 DQ 040523ce703afb7e9r	; 72.9516
CONST	ENDS
;	COMDAT __real@40521ab851eb851f
CONST	SEGMENT
__real@40521ab851eb851f DQ 040521ab851eb851fr	; 72.4175
CONST	ENDS
;	COMDAT __real@40518e027525460b
CONST	SEGMENT
__real@40518e027525460b DQ 040518e027525460br	; 70.2189
CONST	ENDS
;	COMDAT __real@4050ab318fc50481
CONST	SEGMENT
__real@4050ab318fc50481 DQ 04050ab318fc50481r	; 66.6749
CONST	ENDS
;	COMDAT __real@404f61ce075f6fd2
CONST	SEGMENT
__real@404f61ce075f6fd2 DQ 0404f61ce075f6fd2r	; 62.7641
CONST	ENDS
;	COMDAT __real@404eb5ed288ce704
CONST	SEGMENT
__real@404eb5ed288ce704 DQ 0404eb5ed288ce704r	; 61.4213
CONST	ENDS
;	COMDAT __real@40476f765fd8adac
CONST	SEGMENT
__real@40476f765fd8adac DQ 040476f765fd8adacr	; 46.8708
CONST	ENDS
;	COMDAT __real@40471e90ff972474
CONST	SEGMENT
__real@40471e90ff972474 DQ 040471e90ff972474r	; 46.2388
CONST	ENDS
;	COMDAT __real@4046e8b780346dc6
CONST	SEGMENT
__real@4046e8b780346dc6 DQ 04046e8b780346dc6r	; 45.8181
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@404390e560418937
CONST	SEGMENT
__real@404390e560418937 DQ 0404390e560418937r	; 39.132
CONST	ENDS
;	COMDAT __real@40437bcd35a85879
CONST	SEGMENT
__real@40437bcd35a85879 DQ 040437bcd35a85879r	; 38.9672
CONST	ENDS
;	COMDAT __real@404326d916872b02
CONST	SEGMENT
__real@404326d916872b02 DQ 0404326d916872b02r	; 38.3035
CONST	ENDS
;	COMDAT __real@403ebc1bda5119ce
CONST	SEGMENT
__real@403ebc1bda5119ce DQ 0403ebc1bda5119cer	; 30.7348
CONST	ENDS
;	COMDAT __real@403a99c0ebedfa44
CONST	SEGMENT
__real@403a99c0ebedfa44 DQ 0403a99c0ebedfa44r	; 26.6006
CONST	ENDS
;	COMDAT __real@403751bda5119ce0
CONST	SEGMENT
__real@403751bda5119ce0 DQ 0403751bda5119ce0r	; 23.3193
CONST	ENDS
;	COMDAT __real@4034e2a9930be0df
CONST	SEGMENT
__real@4034e2a9930be0df DQ 04034e2a9930be0dfr	; 20.8854
CONST	ENDS
;	COMDAT __real@4034df0068db8bac
CONST	SEGMENT
__real@4034df0068db8bac DQ 04034df0068db8bacr	; 20.8711
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@4033f7c1bda5119d
CONST	SEGMENT
__real@4033f7c1bda5119d DQ 04033f7c1bda5119dr	; 19.9678
CONST	ENDS
;	COMDAT __real@4030edbf487fcb92
CONST	SEGMENT
__real@4030edbf487fcb92 DQ 04030edbf487fcb92r	; 16.9287
CONST	ENDS
;	COMDAT __real@403033c36113404e
CONST	SEGMENT
__real@403033c36113404e DQ 0403033c36113404er	; 16.2022
CONST	ENDS
;	COMDAT __real@402c71d14e3bcd36
CONST	SEGMENT
__real@402c71d14e3bcd36 DQ 0402c71d14e3bcd36r	; 14.2223
CONST	ENDS
;	COMDAT __real@402a941205bc01a3
CONST	SEGMENT
__real@402a941205bc01a3 DQ 0402a941205bc01a3r	; 13.2892
CONST	ENDS
;	COMDAT __real@402a0314e3dae3ef
CONST	SEGMENT
__real@402a0314e3dae3ef DQ 0402a0314e3dae3efr	; 13.006
CONST	ENDS
;	COMDAT __real@402856e2eb1c432d
CONST	SEGMENT
__real@402856e2eb1c432d DQ 0402856e2eb1c432dr	; 12.1697
CONST	ENDS
;	COMDAT __real@40281edfa43fe5c9
CONST	SEGMENT
__real@40281edfa43fe5c9 DQ 040281edfa43fe5c9r	; 12.0603
CONST	ENDS
;	COMDAT __real@4024c4dd2f1a9fbe
CONST	SEGMENT
__real@4024c4dd2f1a9fbe DQ 04024c4dd2f1a9fber	; 10.3845
CONST	ENDS
;	COMDAT __real@402428a2f98d728b
CONST	SEGMENT
__real@402428a2f98d728b DQ 0402428a2f98d728br	; 10.0794
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4022d80346dc5d64
CONST	SEGMENT
__real@4022d80346dc5d64 DQ 04022d80346dc5d64r	; 9.4219
CONST	ENDS
;	COMDAT __real@402233f7ced91687
CONST	SEGMENT
__real@402233f7ced91687 DQ 0402233f7ced91687r	; 9.1015
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@40210dfa43fe5c92
CONST	SEGMENT
__real@40210dfa43fe5c92 DQ 040210dfa43fe5c92r	; 8.5273
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@401d762e3b99e27e
CONST	SEGMENT
__real@401d762e3b99e27e DQ 0401d762e3b99e27er	; 7.36541
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4013000000000000
CONST	SEGMENT
__real@4013000000000000 DQ 04013000000000000r	; 4.75
CONST	ENDS
;	COMDAT __real@4010cd4fdf3b645a
CONST	SEGMENT
__real@4010cd4fdf3b645a DQ 04010cd4fdf3b645ar	; 4.2005
CONST	ENDS
;	COMDAT __real@40106d77318fc505
CONST	SEGMENT
__real@40106d77318fc505 DQ 040106d77318fc505r	; 4.1069
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d404e27d9a26e
CONST	SEGMENT
__real@400d404e27d9a26e DQ 0400d404e27d9a26er	; 3.6564
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@40055f81d1b7e0a6
CONST	SEGMENT
__real@40055f81d1b7e0a6 DQ 040055f81d1b7e0a6r	; 2.67163
CONST	ENDS
;	COMDAT __real@40013086567287c5
CONST	SEGMENT
__real@40013086567287c5 DQ 040013086567287c5r	; 2.14869
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ffb333333333333
CONST	SEGMENT
__real@3ffb333333333333 DQ 03ffb333333333333r	; 1.7
CONST	ENDS
;	COMDAT __real@3ff965fea53d6e3c
CONST	SEGMENT
__real@3ff965fea53d6e3c DQ 03ff965fea53d6e3cr	; 1.5874
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff428a2f98d728b
CONST	SEGMENT
__real@3ff428a2f98d728b DQ 03ff428a2f98d728br	; 1.25992
CONST	ENDS
;	COMDAT __real@3ff406f694467382
CONST	SEGMENT
__real@3ff406f694467382 DQ 03ff406f694467382r	; 1.2517
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fee666666666666
CONST	SEGMENT
__real@3fee666666666666 DQ 03fee666666666666r	; 0.95
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe965fea53d6e3d
CONST	SEGMENT
__real@3fe965fea53d6e3d DQ 03fe965fea53d6e3dr	; 0.793701
CONST	ENDS
;	COMDAT __real@3fe428a2f98d728b
CONST	SEGMENT
__real@3fe428a2f98d728b DQ 03fe428a2f98d728br	; 0.629961
CONST	ENDS
;	COMDAT __real@3fe23d70a3d70a3d
CONST	SEGMENT
__real@3fe23d70a3d70a3d DQ 03fe23d70a3d70a3dr	; 0.57
CONST	ENDS
;	COMDAT __real@3fe1dcc63f141206
CONST	SEGMENT
__real@3fe1dcc63f141206 DQ 03fe1dcc63f141206r	; 0.5582
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdf5c28f5c28f5c
CONST	SEGMENT
__real@3fdf5c28f5c28f5c DQ 03fdf5c28f5c28f5cr	; 0.49
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fce78f9e000f9a2
CONST	SEGMENT
__real@3fce78f9e000f9a2 DQ 03fce78f9e000f9a2r	; 0.238067
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb965fea53d6e3c
CONST	SEGMENT
__real@3fb965fea53d6e3c DQ 03fb965fea53d6e3cr	; 0.0992126
CONST	ENDS
;	COMDAT __real@3fb0000000000000
CONST	SEGMENT
__real@3fb0000000000000 DQ 03fb0000000000000r	; 0.0625
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f70000000000000
CONST	SEGMENT
__real@3f70000000000000 DQ 03f70000000000000r	; 0.00390625
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb0000000000000
CONST	SEGMENT
__real@3eb0000000000000 DQ 03eb0000000000000r	; 9.53674e-07
CONST	ENDS
;	COMDAT __real@3e7ad7f29abcaf48
CONST	SEGMENT
__real@3e7ad7f29abcaf48 DQ 03e7ad7f29abcaf48r	; 1e-07
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
	ORG $+3
$SG4294967139 DB 0aH, 00H
	ORG $+2
$SG4294967140 DB ']', 00H
	ORG $+2
$SG4294967141 DB '%d ', 00H
$SG4294967142 DB '] [L1 ', 00H
	ORG $+1
$SG4294967143 DB '%d ', 00H
$SG4294967144 DB ' [L0 ', 00H
	ORG $+2
$SG4294967147 DB 'BPI', 00H
$SG4294967145 DB ' PSNR Y %2.4f U %2.4f V %2.4f', 00H
	ORG $+2
$SG4294967146 DB 'POC %4d QP %2d AVG QP %.1f (%c-frame) %10d bits', 00H
$SG4294967148 DB 'Usage:', 0aH, 'kvazaar -i <input> --input-res <width>x<'
	DB	'height> -o <output>', 0aH, 0aH, 'Required:', 0aH, '  -i, --in'
	DB	'put <filename>     : Input file', 0aH, '      --input-res <re'
	DB	's>      : Input resolution [auto]', 0aH, '                   '
	DB	'                - auto: Detect from file name.', 0aH, '      '
	DB	'                             - <int>x<int>: width times heigh'
	DB	't', 0aH, '  -o, --output <filename>    : Output file', 0aH, 0aH
	DB	'Presets:', 0aH, '      --preset <preset>      : Set options t'
	DB	'o a preset [medium]', 0aH, '                                 '
	DB	'  - ultrafast, superfast, veryfast, faster,', 0aH, '         '
	DB	'                            fast, medium, slow, slower, verys'
	DB	'low', 0aH, '                                     placebo', 0aH
	DB	0aH, 'Input:', 0aH, '  -n, --frames <integer>     : Number of '
	DB	'frames to code [all]', 0aH, '      --seek <integer>       : F'
	DB	'irst frame to code [0]', 0aH, '      --input-fps <num>[/<deno'
	DB	'm>] : Frame rate of the input video [25]', 0aH, '      --sour'
	DB	'ce-scan-type <string> : Source scan type [progressive]', 0aH, ' '
	DB	'                                  - progressive: Progressive '
	DB	'scan', 0aH, '                                   - tff: Top fi'
	DB	'eld first', 0aH, '                                   - bff: B'
	DB	'ottom field first', 0aH, '      --input-format <string> : P42'
	DB	'0 or P400 [P420]', 0aH, '      --input-bitdepth <int> : 8-16 '
	DB	'[8]', 0aH, '      --loop-input           : Re-read input file'
	DB	' forever.', 0aH, '      --input-file-format <string> : Input '
	DB	'file format [auto]', 0aH, '                                  '
	DB	'  - auto: Check the file ending for format', 0aH, '          '
	DB	'                          - y4m (skips frame headers)', 0aH, ' '
	DB	'                                   - yuv', 0aH, 0aH, 'Options'
	DB	':', 0aH, '      --help                 : Print this help mess'
	DB	'age and exit.', 0aH, '      --version              : Print ve'
	DB	'rsion information and exit.', 0aH, '      --(no-)aud         '
	DB	'    : Use access unit delimiters. [disabled]', 0aH, '      --'
	DB	'debug <filename>     : Output internal reconstruction.', 0aH, ' '
	DB	'     --(no-)cpuid           : Enable runtime CPU optimization'
	DB	's. [enabled]', 0aH, '      --hash <string>        : Decoded p'
	DB	'icture hash [checksum]', 0aH, '                              '
	DB	'     - none: 0 bytes', 0aH, '                                '
	DB	'   - checksum: 18 bytes', 0aH, '                             '
	DB	'      - md5: 56 bytes', 0aH, '      --(no-)psnr            : '
	DB	'Calculate PSNR for frames. [enabled]', 0aH, '      --(no-)inf'
	DB	'o            : Add encoder info SEI. [enabled]', 0aH, '      '
	DB	'--crypto <string>      : Selective encryption. Crypto support'
	DB	' must be', 0aH, '                               enabled at co'
	DB	'mpile-time. Can be ''on'' or ''off'' or', 0aH, '             '
	DB	'                  a list of features separated with a ''+''. '
	DB	'[off]', 0aH, '                                   - on: Enable'
	DB	' all encryption features.', 0aH, '                           '
	DB	'        - off: Disable selective encryption.', 0aH, '        '
	DB	'                           - mvs: Motion vector magnitudes.', 0aH
	DB	'                                   - mv_signs: Motion vector '
	DB	'signs.', 0aH, '                                   - trans_coe'
	DB	'ffs: Coefficient magnitudes.', 0aH, '                        '
	DB	'           - trans_coeff_signs: Coefficient signs.', 0aH, '  '
	DB	'                                 - intra_pred_modes: Intra pr'
	DB	'ediction modes.', 0aH, '      --key <string>         : Encryp'
	DB	'tion key [16,213,27,56,255,127,242,112,', 0aH, '             '
	DB	'                                  97,126,197,204,25,59,38,30]'
	DB	0aH, '      --stats-file-prefix    : A prefix used for stats f'
	DB	'iles that include', 0aH, '                               bits'
	DB	', lambda, distortion, and qp for each ctu.', 0aH, '          '
	DB	'                     These are meant for debugging and are no'
	DB	't', 0aH, '                               written unless the p'
	DB	'refix is defined.', 0aH, 0aH, 'Video structure:', 0aH, '  -q,'
	DB	' --qp <integer>         : Quantization parameter [22]', 0aH, ' '
	DB	' -p, --period <integer>     : Period of intra pictures [64]', 0aH
	DB	'                                   - 0: Only first picture is'
	DB	' intra.', 0aH, '                                   - 1: All p'
	DB	'ictures are intra.', 0aH, '                                  '
	DB	' - N: Every Nth picture is intra.', 0aH, '      --vps-period '
	DB	'<integer> : How often the video parameter set is re-sent [0]', 0aH
	DB	'                                   - 0: Only send VPS with th'
	DB	'e first frame.', 0aH, '                                   - N'
	DB	': Send VPS with every Nth intra frame.', 0aH, '  -r, --ref <i'
	DB	'nteger>        : Number of reference frames, in range 1..15 ['
	DB	'4]', 0aH, '      --gop <string>         : GOP structure [lp-g'
	DB	'4d3t1]', 0aH, '                                   -  0: Disab'
	DB	'led', 0aH, '                                   -  8: B-frame '
	DB	'pyramid of length 8', 0aH, '                                 '
	DB	'  - 16: B-frame pyramid of length 16', 0aH, '                '
	DB	'                   - lp-<string>: Low-delay P/B-frame GOP', 0aH
	DB	'                                     (e.g. lp-g8d4t2, see REA'
	DB	'DME)', 0aH, '      --intra-qp-offset <int>: QP offset for int'
	DB	'ra frames [-51..51] [auto]', 0aH, '                          '
	DB	'         - N: Set QP offset to N.', 0aH, '                   '
	DB	'                - auto: Select offset automatically based', 0aH
	DB	'                                     on GOP length.', 0aH, ' '
	DB	'     --(no-)open-gop        : Use open GOP configuration. [en'
	DB	'abled]', 0aH, '      --cqmfile <filename>   : Read custom qua'
	DB	'ntization matrices from a file.', 0aH, '      --scaling-list '
	DB	'<string>: Set scaling list mode. [off]', 0aH, '              '
	DB	'                     - off: Disable scaling lists.', 0aH, '  '
	DB	'                                 - custom: use custom list (w'
	DB	'ith --cqmfile).', 0aH, '                                   - '
	DB	'default: Use default lists.', 0aH, '      --bitrate <integer>'
	DB	'    : Target bitrate [0]', 0aH, '                            '
	DB	'       - 0: Disable rate control.', 0aH, '                   '
	DB	'                - N: Target N bits per second.', 0aH, '      '
	DB	'--rc-algorithm <string>: Select used rc-algorithm. [lambda]', 0aH
	DB	'                                   - lambda: rate control fro'
	DB	'm:', 0aH, '                                     DOI: 10.1109/'
	DB	'TIP.2014.2336550 ', 0aH, '                                   '
	DB	'- oba: DOI: 10.1109/TCSVT.2016.2589878', 0aH, '      --(no-)i'
	DB	'ntra-bits      : Use Hadamard cost based allocation for intra'
	DB	0aH, '                               frames. Default on for go'
	DB	'p 8 and off for lp-gop', 0aH, '      --(no-)clip-neighbour  :'
	DB	' On oba based rate control whether to clip ', 0aH, '         '
	DB	'                      lambda values to same frame''s ctus or '
	DB	'previous''.', 0aH, '                               Default on'
	DB	' for RA GOPS and disabled for LP.', 0aH, '      --(no-)lossle'
	DB	'ss        : Use lossless coding. [disabled]', 0aH, '      --m'
	DB	'v-constraint <string> : Constrain movement vectors. [none]', 0aH
	DB	'                                   - none: No constraint', 0aH
	DB	'                                   - frametile: Constrain wit'
	DB	'hin the tile.', 0aH, '                                   - fr'
	DB	'ametilemargin: Constrain even more.', 0aH, '      --roi <file'
	DB	'name>       : Use a delta QP map for region of interest.', 0aH
	DB	'                               Reads an array of delta QP val'
	DB	'ues from a text', 0aH, '                               file. '
	DB	'The file format is: width and height of', 0aH, '             '
	DB	'                  the QP delta map followed by width*height d'
	DB	'elta', 0aH, '                               QP values in rast'
	DB	'er order. The map can be of any', 0aH, '                     '
	DB	'          size and will be scaled to the video size.', 0aH, ' '
	DB	'     --set-qp-in-cu         : Set QP at CU level keeping pic_'
	DB	'init_qp_minus26.', 0aH, '                               in PP'
	DB	'S and slice_qp_delta in slize header zero.', 0aH, '      --(n'
	DB	'o-)erp-aqp         : Use adaptive QP for 360 degree video wit'
	DB	'h', 0aH, '                               equirectangular proj'
	DB	'ection. [disabled]', 0aH, '      --level <number>       : Use'
	DB	' the given HEVC level in the output and give', 0aH, '        '
	DB	'                       an error if level limits are exceeded.'
	DB	' [6.2]', 0aH, '                                   - 1, 2, 2.1'
	DB	', 3, 3.1, 4, 4.1, 5, 5.1, 5.2, 6,', 0aH, '                   '
	DB	'                  6.1, 6.2', 0aH, '      --force-level <numbe'
	DB	'r> : Same as --level but warnings instead of errors.', 0aH, ' '
	DB	'     --high-tier            : Used with --level. Use high tie'
	DB	'r bitrate limits', 0aH, '                               inste'
	DB	'ad of the main tier limits during encoding.', 0aH, '         '
	DB	'                      High tier requires level 4 or higher.', 0aH
	DB	'      --(no-)vaq <integer>   : Enable variance adaptive quant'
	DB	'ization with given', 0aH, '                               str'
	DB	'ength, in range 1..20. Recommended: 5.', 0aH, '              '
	DB	'                 [disabled]', 0aH, 0aH, 'Compression tools:', 0aH
	DB	'      --(no-)deblock <beta:tc> : Deblocking filter. [0:0]', 0aH
	DB	'                                   - beta: Between -6 and 6', 0aH
	DB	'                                   - tc: Between -6 and 6', 0aH
	DB	'      --sao <string>         : Sample Adaptive Offset [full]', 0aH
	DB	'                                   - off: SAO disabled', 0aH, ' '
	DB	'                                  - band: Band offset only', 0aH
	DB	'                                   - edge: Edge offset only', 0aH
	DB	'                                   - full: Full SAO', 0aH, ' '
	DB	'     --(no-)rdoq            : Rate-distortion optimized quant'
	DB	'ization [enabled]', 0aH, '      --(no-)rdoq-skip       : Skip'
	DB	' RDOQ for 4x4 blocks. [disabled]', 0aH, '      --(no-)signhid'
	DB	'e        : Sign hiding [disabled]', 0aH, '      --(no-)smp   '
	DB	'          : Symmetric motion partition [disabled]', 0aH, '   '
	DB	'   --(no-)amp             : Asymmetric motion partition [disa'
	DB	'bled]', 0aH, '      --rd <integer>         : Intra mode searc'
	DB	'h complexity [0]', 0aH, '                                   -'
	DB	' 0: Skip intra if inter is good enough.', 0aH, '             '
	DB	'                      - 1: Rough intra mode search with SATD.'
	DB	0aH, '                                   - 2: Refine intra mod'
	DB	'e search with SSE.', 0aH, '                                  '
	DB	' - 3: Try all intra modes and enable intra', 0aH, '          '
	DB	'                              chroma mode search.', 0aH, '   '
	DB	'   --(no-)mv-rdo          : Rate-distortion optimized motion '
	DB	'vector costs', 0aH, '                               [disabled'
	DB	']', 0aH, '      --(no-)zero-coeff-rdo  : If a CU is set inter'
	DB	', check if forcing zero', 0aH, '                             '
	DB	'  residual improves the RD cost. [enabled]', 0aH, '      --(n'
	DB	'o-)full-intra-search : Try all intra modes during rough searc'
	DB	'h.', 0aH, '                               [disabled]', 0aH, ' '
	DB	'     --(no-)transform-skip  : Try transform skip [disabled]', 0aH
	DB	'      --me <string>          : Integer motion estimation algo'
	DB	'rithm [hexbs]', 0aH, '                                   - he'
	DB	'xbs: Hexagon Based Search', 0aH, '                           '
	DB	'        - tz:    Test Zone Search', 0aH, '                   '
	DB	'                - full:  Full Search', 0aH, '                '
	DB	'                   - full8, full16, full32, full64', 0aH, '  '
	DB	'                                 - dia:   Diamond Search', 0aH
	DB	'      --me-steps <integer>   : Motion estimation search step '
	DB	'limit. Only', 0aH, '                               affects '''
	DB	'hexbs'' and ''dia''. [-1]', 0aH, '      --subme <integer>    '
	DB	'  : Fractional pixel motion estimation level [4]', 0aH, '    '
	DB	'                               - 0: Integer motion estimation'
	DB	' only', 0aH, '                                   - 1: + 1/2-p'
	DB	'ixel horizontal and vertical', 0aH, '                        '
	DB	'           - 2: + 1/2-pixel diagonal', 0aH, '                '
	DB	'                   - 3: + 1/4-pixel horizontal and vertical', 0aH
	DB	'                                   - 4: + 1/4-pixel diagonal', 0aH
	DB	'      --pu-depth-inter <int>-<int> : Inter prediction units s'
	DB	'izes [0-3]', 0aH, '                                   - 0, 1,'
	DB	' 2, 3: from 64x64 to 8x8', 0aH, '                            '
	DB	'       - Accepts a list of values separated by '',''', 0aH, ' '
	DB	'                                    for setting separate dept'
	DB	'hs per GOP layer', 0aH, '                                    '
	DB	' (values can be omitted to use the first', 0aH, '            '
	DB	'                         value for the respective layer).', 0aH
	DB	'      --pu-depth-intra <int>-<int> : Intra prediction units s'
	DB	'izes [1-4]', 0aH, '                                   - 0, 1,'
	DB	' 2, 3, 4: from 64x64 to 4x4', 0aH, '                         '
	DB	'          - Accepts a list of values separated by '',''', 0aH
	DB	'                                     for setting separate dep'
	DB	'ths per GOP layer', 0aH, '                                   '
	DB	'  (values can be omitted to use the first', 0aH, '           '
	DB	'                          value for the respective layer).', 0aH
	DB	'      --ml-pu-depth-intra    : Predict the pu-depth-intra usi'
	DB	'ng machine', 0aH, '                                learning t'
	DB	'rees, overrides the', 0aH, '                                -'
	DB	'-pu-depth-intra parameter. [disabled]', 0aH, '      --tr-dept'
	DB	'h-intra <int> : Transform split depth for intra blocks [0]', 0aH
	DB	'      --(no-)bipred          : Bi-prediction [disabled]', 0aH
	DB	'      --cu-split-termination <string> : CU split search termi'
	DB	'nation [zero]', 0aH, '                                   - of'
	DB	'f: Don''t terminate early.', 0aH, '                          '
	DB	'         - zero: Terminate when residual is zero.', 0aH, '   '
	DB	'   --me-early-termination <string> : Motion estimation termin'
	DB	'ation [on]', 0aH, '                                   - off: '
	DB	'Don''t terminate early.', 0aH, '                             '
	DB	'      - on: Terminate early.', 0aH, '                        '
	DB	'           - sensitive: Terminate even earlier.', 0aH, '     '
	DB	' --fast-residual-cost <int> : Skip CABAC cost for residual co'
	DB	'efficients', 0aH, '                                   when QP'
	DB	' is below the limit. [0]', 0aH, '      --fast-coeff-table <st'
	DB	'ring> : Read custom weights for residual', 0aH, '            '
	DB	'                        coefficients from a file instead of u'
	DB	'sing', 0aH, '                                    defaults [de'
	DB	'fault]', 0aH, '      --fast-rd-sampling : Enable learning dat'
	DB	'a sampling for fast coefficient', 0aH, '                     '
	DB	'      table generation', 0aH, '      --fastrd-accuracy-check '
	DB	': Evaluate the accuracy of fast coefficient', 0aH, '         '
	DB	'                       prediction', 0aH, '      --fastrd-outd'
	DB	'ir : Directory to which to output sampled data or accuracy', 0aH
	DB	'                        data, into <fastrd-outdir>/0.txt to 5'
	DB	'0.txt, one file', 0aH, '                        for each QP t'
	DB	'hat blocks were estimated on', 0aH, '      --(no-)intra-rdo-e'
	DB	't    : Check intra modes in rdo stage only until', 0aH, '    '
	DB	'                           a zero coefficient CU is found. [d'
	DB	'isabled]', 0aH, '      --(no-)early-skip      : Try to find s'
	DB	'kip cu from merge candidates.', 0aH, '                       '
	DB	'        Perform no further search if skip is found.', 0aH, ' '
	DB	'                              For rd=0..1: Try the first cand'
	DB	'idate.', 0aH, '                               For rd=2.. : Tr'
	DB	'y the best candidate based', 0aH, '                          '
	DB	'                  on luma satd cost. [enabled]', 0aH, '      '
	DB	'--max-merge <integer>  : Maximum number of merge candidates, '
	DB	'1..5 [5]', 0aH, '      --(no-)implicit-rdpcm  : Implicit resi'
	DB	'dual DPCM. Currently only supported', 0aH, '                 '
	DB	'              with lossless coding. [disabled]', 0aH, '      '
	DB	'--(no-)tmvp            : Temporal motion vector prediction [e'
	DB	'nabled]', 0aH, 0aH, 'Parallel processing:', 0aH, '      --thr'
	DB	'eads <integer>    : Number of threads to use [auto]', 0aH, ' '
	DB	'                                  - 0: Process everything wit'
	DB	'h main thread.', 0aH, '                                   - N'
	DB	': Use N threads for encoding.', 0aH, '                       '
	DB	'            - auto: Select automatically.', 0aH, '      --owf'
	DB	' <integer>        : Frame-level parallelism [auto]', 0aH, '  '
	DB	'                                 - N: Process N+1 frames at a'
	DB	' time.', 0aH, '                                   - auto: Sel'
	DB	'ect automatically.', 0aH, '      --(no-)wpp             : Wav'
	DB	'efront parallel processing. [enabled]', 0aH, '               '
	DB	'                Enabling tiles automatically disables WPP.', 0aH
	DB	'                               To enable WPP with tiles, re-e'
	DB	'nable it after', 0aH, '                               enablin'
	DB	'g tiles. Enabling wpp with tiles is,', 0aH, '                '
	DB	'               however, an experimental feature since it is', 0aH
	DB	'                               not supported in any HEVC prof'
	DB	'ile.', 0aH, '      --tiles <int>x<int>    : Split picture int'
	DB	'o width x height uniform tiles.', 0aH, '      --tiles-width-s'
	DB	'plit <string>|u<int> :', 0aH, '                              '
	DB	'     - <string>: A comma-separated list of tile', 0aH, '     '
	DB	'                                          column pixel coordi'
	DB	'nates.', 0aH, '                                   - u<int>: N'
	DB	'umber of tile columns of uniform', 0aH, '                    '
	DB	'                         width.', 0aH, '      --tiles-height-'
	DB	'split <string>|u<int> :', 0aH, '                             '
	DB	'      - <string>: A comma-separated list of tile row', 0aH, ' '
	DB	'                                              column pixel co'
	DB	'ordinates.', 0aH, '                                   - u<int'
	DB	'>: Number of tile rows of uniform', 0aH, '                   '
	DB	'                          height.', 0aH, '      --slices <str'
	DB	'ing>      : Control how slices are used.', 0aH, '            '
	DB	'                       - tiles: Put tiles in independent slic'
	DB	'es.', 0aH, '                                   - wpp: Put row'
	DB	's in dependent slices.', 0aH, '                              '
	DB	'     - tiles+wpp: Do both.', 0aH, '      --partial-coding <x-'
	DB	'offset>!<y-offset>!<slice-width>!<slice-height>', 0aH, '     '
	DB	'                        : Encode partial frame.', 0aH, '     '
	DB	'                          Parts must be merged to form a vali'
	DB	'd bitstream.', 0aH, '                               X and Y a'
	DB	're CTU offsets.', 0aH, '                               Slice '
	DB	'width and height must be divisible by CTU', 0aH, '           '
	DB	'                    in pixels unless it is the last CTU row/c'
	DB	'olumn.', 0aH, '                               This parameter '
	DB	'is used by kvaShare.', 0aH, 0aH, 'Video Usability Information'
	DB	':', 0aH, '      --sar <width:height>   : Specify sample aspec'
	DB	't ratio', 0aH, '      --overscan <string>    : Specify crop o'
	DB	'verscan setting [undef]', 0aH, '                             '
	DB	'      - undef, show, crop', 0aH, '      --videoformat <string'
	DB	'> : Specify video format [undef]', 0aH, '                    '
	DB	'               - undef, component, pal, ntsc, secam, mac', 0aH
	DB	'      --range <string>       : Specify color range [tv]', 0aH
	DB	'                                   - tv, pc', 0aH, '      --c'
	DB	'olorprim <string>   : Specify color primaries [undef]', 0aH, ' '
	DB	'                                  - undef, bt709, bt470m, bt4'
	DB	'70bg,', 0aH, '                                     smpte170m,'
	DB	' smpte240m, film, bt2020', 0aH, '      --transfer <string>   '
	DB	' : Specify transfer characteristics [undef]', 0aH, '         '
	DB	'                          - undef, bt709, bt470m, bt470bg,', 0aH
	DB	'                                     smpte170m, smpte240m, li'
	DB	'near, log100,', 0aH, '                                     lo'
	DB	'g316, iec61966-2-4, bt1361e,', 0aH, '                        '
	DB	'             iec61966-2-1, bt2020-10, bt2020-12', 0aH, '     '
	DB	' --colormatrix <string> : Specify color matrix setting [undef'
	DB	']', 0aH, '                                   - undef, bt709, '
	DB	'fcc, bt470bg, smpte170m,', 0aH, '                            '
	DB	'         smpte240m, GBR, YCgCo, bt2020nc, bt2020c', 0aH, '   '
	DB	'   --chromaloc <integer>  : Specify chroma sample location (0'
	DB	' to 5) [0]', 0aH, 0aH, 'Deprecated parameters: (might be remo'
	DB	'ved at some point)', 0aH, '  -w, --width <integer>       : Us'
	DB	'e --input-res.', 0aH, '  -h, --height <integer>      : Use --'
	DB	'input-res.', 0aH, 00H
$SG4294967149 DB 'Kvazaar 2.1.0', 0aH, 'Kvazaar license: 3-clause BSD', 0aH
	DB	00H
	ORG $+3
$SG4294967150 DB 'Kvazaar usage: -i and --input-res to set input, -o to s'
	DB	'et output', 0aH, '               --help for more information', 0aH
	DB	00H
	ORG $+3
$SG4294967151 DB 'Input error: vps_period must be non-negative', 0aH, 00H
	ORG $+2
$SG4294967152 DB 'Input error: Extra argument found: "%s"', 0aH, 00H
	ORG $+3
$SG4294967157 DB 'frames', 00H
	ORG $+2
$SG4294967153 DB 'invalid argument: %s=%s', 0aH, 00H
	ORG $+3
$SG4294967160 DB 'debug', 00H
	ORG $+2
$SG4294967162 DB 'output', 00H
	ORG $+1
$SG4294967154 DB 'loop-input', 00H
	ORG $+1
$SG4294967155 DB 'help', 00H
	ORG $+3
$SG4294967164 DB 'input', 00H
	ORG $+1
$SG4294967156 DB 'version', 00H
$SG4294967158 DB 'seek', 00H
	ORG $+3
$SG4294967159 DB 'Input error: More than one debug output file given.', 0aH
	DB	00H
	ORG $+3
$SG4294967161 DB 'Input error: More than one output file given.', 0aH, 00H
	ORG $+1
$SG4294967163 DB 'Input error: More than one input file given.', 0aH, 00H
	ORG $+2
$SG4294967165 DB '.yuv', 00H
	ORG $+3
$SG4294967166 DB '.y4m', 00H
	ORG $+3
$SG4294967167 DB '%dx%d%*s', 00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
xdata	SEGMENT
$unwind$print_frame_info DD 0a1801H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0f0147218H
	DD	07010e012H
$unwind$print_help DD 010401H
	DD	04204H
$unwind$print_version DD 010401H
	DD	04204H
$unwind$print_usage DD 010401H
	DD	04204H
$unwind$cmdline_opts_free DD 040a01H
	DD	07340aH
	DD	07006320aH
$chain$0$cmdline_opts_free DD 020521H
	DD	066405H
	DD	imagerel $LN5
	DD	imagerel $LN5+24
	DD	imagerel $unwind$cmdline_opts_free
$chain$1$cmdline_opts_free DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+24
	DD	imagerel $unwind$cmdline_opts_free
$unwind$cmdline_opts_parse DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
$unwind$detect_file_format DD 020601H
	DD	060023206H
$chain$1$detect_file_format DD 040f21H
	DD	08740fH
	DD	073405H
	DD	imagerel detect_file_format
	DD	imagerel detect_file_format+67
	DD	imagerel $unwind$detect_file_format
$chain$2$detect_file_format DD 021H
	DD	imagerel detect_file_format
	DD	imagerel detect_file_format+67
	DD	imagerel $unwind$detect_file_format
$unwind$select_input_res_auto DD 083901H
	DD	063439H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Stream$ = 80
_Format$ = 88
fprintf	PROC						; COMDAT

; 835  :     {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rbx, rcx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 840  :         __crt_va_end(_ArgList);
; 841  :         return _Result;
; 842  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2175 :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 2176 :         return __stdio_common_vsscanf(

	call	__local_stdio_scanf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, -1
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf

; 2177 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2178 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2179 :     }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Buffer$ = 80
_Format$ = 88
sscanf	PROC						; COMDAT

; 2270 :     {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 2271 :         int _Result;
; 2272 :         va_list _ArgList;
; 2273 :         __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rdi, rcx

; 2176 :         return __stdio_common_vsscanf(

	call	__local_stdio_scanf_options
	mov	QWORD PTR [rsp+40], rsi
	mov	r9, rbx
	mov	r8, -1
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf

; 2274 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2275 :         __crt_va_end(_ArgList);
; 2276 :         return _Result;
; 2277 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
file_name$ = 48
out_width$ = 56
out_height$ = 64
select_input_res_auto PROC

; 182  : {

	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rbp, rdx
	mov	rdi, rcx

; 183  :   if (!file_name) return 0;

	test	rcx, rcx
	jne	SHORT $LN8@select_inp
	xor	eax, eax

; 203  : }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@select_inp:

; 184  : 
; 185  :   // Find the last delimiter char ( / or \ ). Hope the other kind is not used in the name.
; 186  :   // If delim is not found, set pointer to the beginning.
; 187  :   unsigned char* sub_str = (unsigned char*)MAX(strrchr(file_name, '/'), strrchr(file_name, '\\'));

	mov	edx, 92					; 0000005cH
	mov	QWORD PTR [rsp+48], rbx
	call	QWORD PTR __imp_strrchr
	mov	edx, 47					; 0000002fH
	mov	rcx, rdi
	mov	rbx, rax
	call	QWORD PTR __imp_strrchr
	mov	rcx, rdi
	mov	edx, 47					; 0000002fH
	cmp	rax, rbx
	ja	SHORT $LN37@select_inp
	mov	edx, 92					; 0000005cH
$LN37@select_inp:

; 188  :   if (!sub_str) sub_str = (unsigned char*)file_name;

	call	QWORD PTR __imp_strrchr
	test	rax, rax
	mov	rbx, rax
	cmove	rbx, rdi
	npad	14
$LL4@select_inp:

; 189  : 
; 190  :   int success = 0;
; 191  :   // Try if the substring starts with "<int>x<int>" without either of them being 0
; 192  :   do {
; 193  :     success = (sscanf((char*)sub_str, "%dx%d%*s", out_width, out_height) == 2);

	mov	r9, rsi
	lea	rdx, OFFSET FLAT:$SG4294967167
	mov	r8, rbp
	mov	rcx, rbx
	call	sscanf
	xor	edi, edi
	cmp	eax, 2
	sete	dil

; 194  :     success &= (*out_width > 0 && *out_height > 0);

	cmp	DWORD PTR [rbp], 0
	jle	SHORT $LN15@select_inp
	cmp	DWORD PTR [rsi], 0
	jg	SHORT $LL7@select_inp
$LN15@select_inp:
	xor	edi, edi
	npad	5
$LL7@select_inp:

; 195  :     // Move to the next char until a digit is found or the string ends
; 196  :     do{
; 197  :       ++sub_str;
; 198  :     } while (*sub_str != 0 && !isdigit(*sub_str));

	movzx	eax, BYTE PTR [rbx+1]
	inc	rbx
	test	al, al
	je	SHORT $LN11@select_inp
	mov	ecx, eax
	call	QWORD PTR __imp_isdigit
	test	eax, eax
	je	SHORT $LL7@select_inp
	movzx	eax, BYTE PTR [rbx]

; 199  :     // Continue until "<int>x<int>" is found or the string ends
; 200  :   } while (*sub_str != 0 && !success);

	test	al, al
	je	SHORT $LN11@select_inp
	test	edi, edi
	je	SHORT $LL4@select_inp
$LN11@select_inp:

; 201  : 
; 202  :   return success;

	mov	rbx, QWORD PTR [rsp+48]
	mov	eax, edi

; 203  : }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
select_input_res_auto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
ending_lower_case$ = 48
file_name$ = 48
detect_file_format PROC

; 211  : static int detect_file_format(const char *file_name) {

	push	rsi
	sub	rsp, 32					; 00000020H

; 212  :   if (!file_name) return 0;

	test	rcx, rcx
	je	$LN10@detect_fil

; 213  : 
; 214  :   // Find the last dot in the file name.
; 215  :   // If delim is not found, return 0
; 216  :   char* sub_str = (char*)strrchr(file_name, '.');

	mov	edx, 46					; 0000002eH
	call	QWORD PTR __imp_strrchr
	mov	rsi, rax

; 217  :   if (!sub_str) return 0;

	test	rax, rax
	je	$LN10@detect_fil

; 218  :   if (strlen(sub_str) != 4) return 0;

	mov	rcx, -1
	npad	3
$LL16@detect_fil:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL16@detect_fil
	cmp	rcx, 4
	jne	$LN10@detect_fil
	mov	QWORD PTR [rsp+56], rbx
	lea	rax, QWORD PTR ending_lower_case$[rsp]
	mov	QWORD PTR [rsp+64], rdi
	xor	edi, edi
	sub	rsi, rax
	npad	9
$LL4@detect_fil:

; 219  :   char ending_lower_case[4];
; 220  :   for(int i = 0; i < 4; i++){
; 221  :     ending_lower_case[i] = tolower(sub_str[i]);

	lea	rbx, QWORD PTR ending_lower_case$[rsp]
	add	rbx, rdi
	movsx	ecx, BYTE PTR [rsi+rbx]
	call	QWORD PTR __imp_tolower
	inc	rdi
	mov	BYTE PTR [rbx], al
	cmp	rdi, 4
	jl	SHORT $LL4@detect_fil

; 222  :   }
; 223  : 
; 224  :   // KVZ_FILE_FORMAT
; 225  :   if (strncmp(ending_lower_case, ".y4m", 4) == 0) return 1;

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG4294967166
	lea	rcx, QWORD PTR ending_lower_case$[rsp]
	call	QWORD PTR __imp_strncmp
	mov	rdi, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+56]
	test	eax, eax
	jne	SHORT $LN8@detect_fil
	mov	eax, 1

; 229  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN8@detect_fil:

; 226  :   else if (strncmp(ending_lower_case, ".yuv", 4) == 0) return 2;

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG4294967165
	lea	rcx, QWORD PTR ending_lower_case$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN10@detect_fil
	mov	eax, 2

; 229  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN10@detect_fil:

; 227  : 
; 228  :   return 0;

	xor	eax, eax

; 229  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
detect_file_format ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
api$ = 96
argc$ = 104
argv$ = 112
ending_lower_case$1 = 120
long_options_index$2 = 120
cmdline_opts_parse PROC

; 238  : {

$LN146:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	esi, edx
	mov	r12, rcx

; 239  :   int ok = 1;
; 240  :   cmdline_opts_t *opts = calloc(1, sizeof(cmdline_opts_t));

	mov	edx, 48					; 00000030H
	mov	r14, r8
	lea	ecx, QWORD PTR [rdx-47]
	call	QWORD PTR __imp_calloc
	mov	r15, rax

; 241  :   if (!opts) {

	test	rax, rax
	je	$LN72@cmdline_op

; 242  :     ok = 0;
; 243  :     goto done;
; 244  :   }
; 245  : 
; 246  :   opts->config = api->config_alloc();

	call	QWORD PTR [r12]
	mov	QWORD PTR [r15+32], rax
	mov	r13, rax

; 247  :   if (!opts->config || !api->config_init(opts->config)) {

	test	rax, rax
	je	$LN106@cmdline_op
	mov	rcx, rax
	call	QWORD PTR [r12+16]
	test	eax, eax
	je	$LN106@cmdline_op

; 248  :     ok = 0;
; 249  :     goto done;
; 250  :   }
; 251  : 
; 252  :   // Parse command line options
; 253  :   for (optind = 0;;) {
; 254  :     int long_options_index = -1;
; 255  : 
; 256  :     int c = getopt_long(argc, argv, short_options, long_options, &long_options_index);

	lea	rax, QWORD PTR long_options_index$2[rsp]
	mov	DWORD PTR optind, 0
	mov	rdi, -1
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, r14
	mov	DWORD PTR long_options_index$2[rsp], edi
	mov	ecx, esi
	call	getopt_long
	mov	r8d, eax

; 257  :     if (c == -1)

	cmp	eax, edi
	je	$LN80@cmdline_op
	lea	rbp, OFFSET FLAT:long_options
	npad	3
$LL2@cmdline_op:

; 258  :       break;
; 259  : 
; 260  :     if (long_options_index < 0) {

	mov	r9d, DWORD PTR long_options_index$2[rsp]
	test	r9d, r9d
	jns	SHORT $LN14@cmdline_op

; 261  :       int i;
; 262  :       for (i = 0; long_options[i].name; i++)

	xor	edx, edx
	xor	ecx, ecx
	cmp	QWORD PTR long_options, rcx
	je	SHORT $LN6@cmdline_op
	xor	eax, eax
	npad	7
$LL7@cmdline_op:

; 263  :         if (long_options[i].val == c) {

	cmp	DWORD PTR [rax+rbp+24], r8d
	je	SHORT $LN79@cmdline_op

; 261  :       int i;
; 262  :       for (i = 0; long_options[i].name; i++)

	inc	rcx
	inc	edx
	mov	rax, rcx
	shl	rax, 5
	cmp	QWORD PTR [rax+rbp], 0
	jne	SHORT $LL7@cmdline_op

; 308  :     } else if (!api->config_parse(opts->config, name, optarg)) {

	jmp	SHORT $LN6@cmdline_op
$LN79@cmdline_op:

; 264  :             long_options_index = i;

	mov	r9d, edx
$LN6@cmdline_op:

; 265  :             break;
; 266  :         }
; 267  :       if (long_options_index < 0) {

	test	r9d, r9d
	js	$LN106@cmdline_op
$LN14@cmdline_op:

; 268  :         // getopt_long already printed an error message
; 269  :         ok = 0;
; 270  :         goto done;
; 271  :       }
; 272  :     }
; 273  : 
; 274  :     const char* name = long_options[long_options_index].name;

	movsxd	rax, r9d

; 275  :     if (!strcmp(name, "input")) {

	lea	r8, OFFSET FLAT:$SG4294967164
	shl	rax, 5
	mov	rbx, QWORD PTR [rax+rbp]
	mov	rax, rbx
	sub	r8, rbx
$LL133@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN134@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL133@cmdline_op
$LN134@cmdline_op:
	test	edx, edx
	jne	SHORT $LN15@cmdline_op

; 276  :       if (opts->input) {

	cmp	QWORD PTR [r15], 0
	jne	$LN82@cmdline_op

; 278  :         ok = 0;
; 279  :         goto done;
; 280  :       }
; 281  :       opts->input = strdup(optarg);

	mov	rcx, QWORD PTR optarg
	call	QWORD PTR __imp_strdup
	mov	QWORD PTR [r15], rax
	jmp	$LN34@cmdline_op
$LN15@cmdline_op:

; 282  :     } else if (!strcmp(name, "output")) {

	lea	r8, OFFSET FLAT:$SG4294967162
	mov	rax, rbx
	sub	r8, rbx
$LL131@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN132@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL131@cmdline_op
$LN132@cmdline_op:
	test	edx, edx
	jne	SHORT $LN18@cmdline_op

; 283  :       if (opts->output) {

	cmp	QWORD PTR [r15+8], 0
	jne	$LN83@cmdline_op

; 287  :       }
; 288  :       opts->output = strdup(optarg);

	mov	rcx, QWORD PTR optarg
	call	QWORD PTR __imp_strdup
	mov	QWORD PTR [r15+8], rax
	jmp	$LN34@cmdline_op
$LN18@cmdline_op:

; 289  :     } else if (!strcmp(name, "debug")) {

	lea	r8, OFFSET FLAT:$SG4294967160
	mov	rax, rbx
	sub	r8, rbx
	npad	8
$LL129@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN130@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL129@cmdline_op
$LN130@cmdline_op:
	test	edx, edx
	jne	SHORT $LN21@cmdline_op

; 290  :       if (opts->debug) {

	cmp	QWORD PTR [r15+16], 0
	jne	$LN84@cmdline_op

; 294  :       }
; 295  :       opts->debug = strdup(optarg);

	mov	rcx, QWORD PTR optarg
	call	QWORD PTR __imp_strdup
	mov	QWORD PTR [r15+16], rax
	jmp	$LN34@cmdline_op
$LN21@cmdline_op:

; 296  :     } else if (!strcmp(name, "seek")) {

	lea	r8, OFFSET FLAT:$SG4294967158
	mov	rax, rbx
	sub	r8, rbx
	npad	11
$LL127@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN128@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL127@cmdline_op
$LN128@cmdline_op:
	test	edx, edx
	jne	SHORT $LN24@cmdline_op

; 297  :       opts->seek = atoi(optarg);

	mov	rcx, QWORD PTR optarg
	call	QWORD PTR __imp_atoi
	mov	DWORD PTR [r15+24], eax
	jmp	$LN34@cmdline_op
$LN24@cmdline_op:

; 298  :     } else if (!strcmp(name, "frames")) {

	lea	r8, OFFSET FLAT:$SG4294967157
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL125@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN126@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL125@cmdline_op
$LN126@cmdline_op:
	test	edx, edx
	jne	SHORT $LN26@cmdline_op

; 299  :       opts->frames = atoi(optarg);

	mov	rcx, QWORD PTR optarg
	call	QWORD PTR __imp_atoi
	mov	DWORD PTR [r15+28], eax
	jmp	$LN34@cmdline_op
$LN26@cmdline_op:

; 300  :     } else if (!strcmp(name, "version")) {

	lea	r8, OFFSET FLAT:$SG4294967156
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL123@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN124@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL123@cmdline_op
$LN124@cmdline_op:
	test	edx, edx
	je	$LN85@cmdline_op

; 302  :       goto done;
; 303  :     } else if (!strcmp(name, "help")) {

	lea	r8, OFFSET FLAT:$SG4294967155
	mov	rax, rbx
	sub	r8, rbx
	npad	8
$LL121@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN122@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL121@cmdline_op
$LN122@cmdline_op:
	test	edx, edx
	je	$LN86@cmdline_op

; 305  :       goto done;
; 306  :     } else if (!strcmp(name, "loop-input")) {

	lea	r8, OFFSET FLAT:$SG4294967154
	mov	rax, rbx
	sub	r8, rbx
	npad	8
$LL119@cmdline_op:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN120@cmdline_op
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL119@cmdline_op
$LN120@cmdline_op:
	test	edx, edx
	jne	SHORT $LN32@cmdline_op

; 307  :       opts->loop_input = true;

	mov	BYTE PTR [r15+42], 1
	jmp	SHORT $LN34@cmdline_op
$LN32@cmdline_op:

; 308  :     } else if (!api->config_parse(opts->config, name, optarg)) {

	mov	r8, QWORD PTR optarg
	mov	rdx, rbx
	mov	rcx, r13
	call	QWORD PTR [r12+24]
	test	eax, eax
	je	$LN87@cmdline_op
$LN34@cmdline_op:

; 248  :     ok = 0;
; 249  :     goto done;
; 250  :   }
; 251  : 
; 252  :   // Parse command line options
; 253  :   for (optind = 0;;) {
; 254  :     int long_options_index = -1;
; 255  : 
; 256  :     int c = getopt_long(argc, argv, short_options, long_options, &long_options_index);

	lea	rax, QWORD PTR long_options_index$2[rsp]
	mov	DWORD PTR long_options_index$2[rsp], edi
	mov	rdx, r14
	mov	QWORD PTR [rsp+32], rax
	mov	ecx, esi
	call	getopt_long
	mov	r8d, eax

; 257  :     if (c == -1)

	cmp	eax, edi
	jne	$LL2@cmdline_op
$LN80@cmdline_op:

; 312  :     }
; 313  :   }
; 314  : 
; 315  :   // Check for extra arguments.
; 316  :   if (argc - optind > 0) {

	movsxd	rax, DWORD PTR optind
	sub	esi, eax
	test	esi, esi
	jle	$LN35@cmdline_op

; 317  :     fprintf(stderr, "Input error: Extra argument found: \"%s\"\n", argv[optind]);

	mov	ecx, 2
	mov	rbx, rax
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8, QWORD PTR [r14+rbx*8]
	lea	rdx, OFFSET FLAT:$SG4294967152
	mov	rcx, rax
	call	fprintf

; 318  :     ok = 0;
; 319  :     goto done;

	jmp	SHORT $LN106@cmdline_op
$LN82@cmdline_op:

; 277  :         fprintf(stderr, "Input error: More than one input file given.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967163
$LN144@cmdline_op:

; 364  :     FREE_POINTER(opts->input);

	call	fprintf
$LN106@cmdline_op:
	mov	rcx, QWORD PTR [r15]
	call	QWORD PTR __imp_free

; 365  :     FREE_POINTER(opts->output);

	mov	rcx, QWORD PTR [r15+8]
	mov	QWORD PTR [r15], 0
	call	QWORD PTR __imp_free

; 366  :     FREE_POINTER(opts->debug);

	mov	rcx, QWORD PTR [r15+16]
	mov	QWORD PTR [r15+8], 0
	call	QWORD PTR __imp_free

; 367  :     api->config_destroy(opts->config);

	mov	rcx, QWORD PTR [r15+32]
	mov	QWORD PTR [r15+16], 0
	call	QWORD PTR [r12+8]

; 368  :     opts->config = NULL;

	mov	QWORD PTR [r15+32], 0
$LN72@cmdline_op:

; 369  :   }
; 370  :   FREE_POINTER(opts);

	mov	rcx, r15
	call	QWORD PTR __imp_free

; 350  :     cmdline_opts_free(api, opts);
; 351  :     opts = NULL;
; 352  :   }
; 353  : 
; 354  :   return opts;

	xor	eax, eax
$LN42@cmdline_op:

; 355  : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN83@cmdline_op:

; 284  :         fprintf(stderr, "Input error: More than one output file given.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967161

; 285  :         ok = 0;
; 286  :         goto done;

	jmp	$LN144@cmdline_op
$LN84@cmdline_op:

; 291  :         fprintf(stderr, "Input error: More than one debug output file given.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967159

; 292  :         ok = 0;
; 293  :         goto done;

	jmp	$LN144@cmdline_op
$LN87@cmdline_op:

; 309  :       fprintf(stderr, "invalid argument: %s=%s\n", name, optarg);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR optarg
	lea	rdx, OFFSET FLAT:$SG4294967153
	mov	rcx, rax
	mov	r8, rbx
	call	fprintf

; 310  :       ok = 0;
; 311  :       goto done;

	jmp	$LN106@cmdline_op
$LN86@cmdline_op:

; 304  :       opts->help = true;

	mov	BYTE PTR [r15+40], 1

; 350  :     cmdline_opts_free(api, opts);
; 351  :     opts = NULL;
; 352  :   }
; 353  : 
; 354  :   return opts;

	mov	rax, r15
	jmp	$LN42@cmdline_op
$LN85@cmdline_op:

; 301  :       opts->version = true;

	mov	BYTE PTR [r15+41], 1
$LN136@cmdline_op:

; 355  : }

	mov	rax, r15
	jmp	$LN42@cmdline_op
$LN35@cmdline_op:

; 320  :   }
; 321  : 
; 322  :   // Check that the required files were defined
; 323  :   if (opts->input == NULL || opts->output == NULL) {

	mov	rbp, QWORD PTR [r15]
	test	rbp, rbp
	je	$LN106@cmdline_op
	cmp	QWORD PTR [r15+8], 0
	je	$LN106@cmdline_op

; 324  :     ok = 0;
; 325  :     goto done;
; 326  :   }
; 327  : 
; 328  :   if (opts->config->vps_period < 0) {

	cmp	DWORD PTR [r13+8], 0
	jge	SHORT $LN38@cmdline_op

; 329  :     // Disabling parameter sets is only possible when using Kvazaar as
; 330  :     // a library.
; 331  :     fprintf(stderr, "Input error: vps_period must be non-negative\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967151

; 332  :     ok = 0;
; 333  :     goto done;

	jmp	$LN144@cmdline_op
$LN38@cmdline_op:

; 334  :   }
; 335  : 
; 336  :   // Check the file name for format
; 337  :   if (opts->config->file_format == KVZ_FORMAT_AUTO) {

	mov	edx, DWORD PTR [r13+2488]
	test	edx, edx
	jne	$LN39@cmdline_op

; 216  :   char* sub_str = (char*)strrchr(file_name, '.');

	mov	edx, 46					; 0000002eH
	mov	rcx, rbp
	call	QWORD PTR __imp_strrchr
	mov	rsi, rax

; 217  :   if (!sub_str) return 0;

	test	rax, rax
	jne	SHORT $LL49@cmdline_op
	xor	edx, edx
	jmp	$LN53@cmdline_op
$LL49@cmdline_op:

; 218  :   if (strlen(sub_str) != 4) return 0;

	inc	rdi
	cmp	BYTE PTR [rax+rdi], 0
	jne	SHORT $LL49@cmdline_op
	cmp	rdi, 4
	je	SHORT $LN50@cmdline_op
	xor	edx, edx
	jmp	SHORT $LN53@cmdline_op
$LN50@cmdline_op:

; 219  :   char ending_lower_case[4];
; 220  :   for(int i = 0; i < 4; i++){

	xor	edi, edi
	lea	rax, QWORD PTR ending_lower_case$1[rsp]
	sub	rsi, rax
	npad	2
$LL47@cmdline_op:

; 221  :     ending_lower_case[i] = tolower(sub_str[i]);

	lea	rbx, QWORD PTR ending_lower_case$1[rsp]
	add	rbx, rdi
	movsx	ecx, BYTE PTR [rsi+rbx]
	call	QWORD PTR __imp_tolower
	inc	rdi
	mov	BYTE PTR [rbx], al
	cmp	rdi, 4
	jl	SHORT $LL47@cmdline_op

; 222  :   }
; 223  : 
; 224  :   // KVZ_FILE_FORMAT
; 225  :   if (strncmp(ending_lower_case, ".y4m", 4) == 0) return 1;

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG4294967166
	lea	rcx, QWORD PTR ending_lower_case$1[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN51@cmdline_op
	lea	edx, QWORD PTR [rax+1]
	jmp	SHORT $LN53@cmdline_op
$LN51@cmdline_op:

; 226  :   else if (strncmp(ending_lower_case, ".yuv", 4) == 0) return 2;

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG4294967165
	lea	rcx, QWORD PTR ending_lower_case$1[rsp]
	call	QWORD PTR __imp_strncmp
	xor	edx, edx
	mov	ecx, 2
	test	eax, eax
	cmove	edx, ecx
$LN53@cmdline_op:

; 338  :     opts->config->file_format = detect_file_format(opts->input);

	mov	DWORD PTR [r13+2488], edx
$LN39@cmdline_op:

; 339  :   }
; 340  : 
; 341  :   // Set resolution automatically if necessary
; 342  :   if ((opts->config->file_format == KVZ_FORMAT_AUTO || opts->config->file_format == KVZ_FORMAT_YUV)
; 343  :       && opts->config->width == 0 && opts->config->height == 0) {

	test	edx, -3					; fffffffdH
	jne	$LN136@cmdline_op
	cmp	DWORD PTR [r13+12], 0
	jne	$LN136@cmdline_op
	cmp	DWORD PTR [r13+16], 0
	jne	$LN136@cmdline_op

; 187  :   unsigned char* sub_str = (unsigned char*)MAX(strrchr(file_name, '/'), strrchr(file_name, '\\'));

	mov	edx, 92					; 0000005cH
	mov	rcx, rbp
	call	QWORD PTR __imp_strrchr
	mov	edx, 47					; 0000002fH
	mov	rcx, rbp
	mov	rbx, rax
	call	QWORD PTR __imp_strrchr
	mov	rcx, rbp
	mov	edx, 47					; 0000002fH
	cmp	rax, rbx
	ja	SHORT $LN143@cmdline_op
	mov	edx, 92					; 0000005cH
$LN143@cmdline_op:

; 188  :   if (!sub_str) sub_str = (unsigned char*)file_name;

	call	QWORD PTR __imp_strrchr
	test	rax, rax
	mov	rbx, rax
	cmove	rbx, rbp
	npad	4
$LL58@cmdline_op:

; 189  : 
; 190  :   int success = 0;
; 191  :   // Try if the substring starts with "<int>x<int>" without either of them being 0
; 192  :   do {
; 193  :     success = (sscanf((char*)sub_str, "%dx%d%*s", out_width, out_height) == 2);

	lea	r9, QWORD PTR [r13+16]
	mov	rcx, rbx
	lea	r8, QWORD PTR [r13+12]
	lea	rdx, OFFSET FLAT:$SG4294967167
	call	sscanf
	xor	edi, edi
	cmp	eax, 2
	sete	dil

; 194  :     success &= (*out_width > 0 && *out_height > 0);

	cmp	DWORD PTR [r13+12], 0
	jle	SHORT $LN69@cmdline_op
	cmp	DWORD PTR [r13+16], 0
	jg	SHORT $LL61@cmdline_op
$LN69@cmdline_op:
	xor	edi, edi
$LL61@cmdline_op:

; 195  :     // Move to the next char until a digit is found or the string ends
; 196  :     do{
; 197  :       ++sub_str;
; 198  :     } while (*sub_str != 0 && !isdigit(*sub_str));

	movzx	eax, BYTE PTR [rbx+1]
	inc	rbx
	test	al, al
	je	SHORT $done$147
	mov	ecx, eax
	call	QWORD PTR __imp_isdigit
	test	eax, eax
	je	SHORT $LL61@cmdline_op

; 199  :     // Continue until "<int>x<int>" is found or the string ends
; 200  :   } while (*sub_str != 0 && !success);

	cmp	BYTE PTR [rbx], 0
	je	SHORT $done$147
	test	edi, edi
	je	SHORT $LL58@cmdline_op

; 344  :     ok = select_input_res_auto(opts->input, &opts->config->width, &opts->config->height);
; 345  :     goto done;

	mov	rax, r15
	jmp	$LN42@cmdline_op
$done$147:

; 346  :   }
; 347  : 
; 348  : done:
; 349  :   if (!ok) {

	test	edi, edi
	je	$LN106@cmdline_op

; 350  :     cmdline_opts_free(api, opts);
; 351  :     opts = NULL;
; 352  :   }
; 353  : 
; 354  :   return opts;

	mov	rax, r15
	jmp	$LN42@cmdline_op
cmdline_opts_parse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
api$ = 48
opts$ = 56
cmdline_opts_free PROC

; 362  : {

$LN5:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 363  :   if (opts) {

	test	rdx, rdx
	je	SHORT $LN2@cmdline_op

; 364  :     FREE_POINTER(opts->input);

	mov	rcx, QWORD PTR [rdx]
	mov	QWORD PTR [rsp+48], rsi
	call	QWORD PTR __imp_free

; 365  :     FREE_POINTER(opts->output);

	mov	rcx, QWORD PTR [rbx+8]
	xor	esi, esi
	mov	QWORD PTR [rbx], rsi
	call	QWORD PTR __imp_free

; 366  :     FREE_POINTER(opts->debug);

	mov	rcx, QWORD PTR [rbx+16]
	mov	QWORD PTR [rbx+8], rsi
	call	QWORD PTR __imp_free

; 367  :     api->config_destroy(opts->config);

	mov	rcx, QWORD PTR [rbx+32]
	mov	QWORD PTR [rbx+16], rsi
	call	QWORD PTR [rdi+8]

; 368  :     opts->config = NULL;

	mov	QWORD PTR [rbx+32], rsi
	mov	rsi, QWORD PTR [rsp+48]
$LN2@cmdline_op:

; 369  :   }
; 370  :   FREE_POINTER(opts);

	mov	rcx, rbx

; 371  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 369  :   }
; 370  :   FREE_POINTER(opts);

	rex_jmp	QWORD PTR __imp_free
cmdline_opts_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
print_usage PROC

; 375  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 376  :   fprintf(stdout,

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967150

; 377  :     "Kvazaar usage: -i and --input-res to set input, -o to set output\n"
; 378  :     "               --help for more information\n");
; 379  : }

	add	rsp, 40					; 00000028H

; 376  :   fprintf(stdout,

	jmp	fprintf
print_usage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
print_version PROC

; 383  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 384  :   fprintf(stdout,

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967149

; 385  :     "Kvazaar " VERSION_STRING "\n"
; 386  :     "Kvazaar license: 3-clause BSD\n");
; 387  : }

	add	rsp, 40					; 00000028H

; 384  :   fprintf(stdout,

	jmp	fprintf
print_version ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
print_help PROC

; 391  : {

$LN4:
	sub	rsp, 40					; 00000028H

; 392  :   fprintf(stdout,

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967148

; 393  :     "Usage:\n"
; 394  :     "kvazaar -i <input> --input-res <width>x<height> -o <output>\n"
; 395  :     "\n"
; 396  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 397  :     "Required:\n"
; 398  :     "  -i, --input <filename>     : Input file\n"
; 399  :     "      --input-res <res>      : Input resolution [auto]\n"
; 400  :     "                                   - auto: Detect from file name.\n"
; 401  :     "                                   - <int>x<int>: width times height\n"
; 402  :     "  -o, --output <filename>    : Output file\n"
; 403  :     "\n"
; 404  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 405  :     "Presets:\n"
; 406  :     "      --preset <preset>      : Set options to a preset [medium]\n"
; 407  :     "                                   - ultrafast, superfast, veryfast, faster,\n"
; 408  :     "                                     fast, medium, slow, slower, veryslow\n"
; 409  :     "                                     placebo\n"
; 410  :     "\n"
; 411  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 412  :     "Input:\n"
; 413  :     "  -n, --frames <integer>     : Number of frames to code [all]\n"
; 414  :     "      --seek <integer>       : First frame to code [0]\n"
; 415  :     "      --input-fps <num>[/<denom>] : Frame rate of the input video [25]\n"
; 416  :     "      --source-scan-type <string> : Source scan type [progressive]\n"
; 417  :     "                                   - progressive: Progressive scan\n"
; 418  :     "                                   - tff: Top field first\n"
; 419  :     "                                   - bff: Bottom field first\n"
; 420  :     "      --input-format <string> : P420 or P400 [P420]\n"
; 421  :     "      --input-bitdepth <int> : 8-16 [8]\n"
; 422  :     "      --loop-input           : Re-read input file forever.\n"
; 423  :     "      --input-file-format <string> : Input file format [auto]\n"
; 424  :     "                                    - auto: Check the file ending for format\n"
; 425  :     "                                    - y4m (skips frame headers)\n"
; 426  :     "                                    - yuv\n"
; 427  :     "\n"
; 428  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 429  :     "Options:\n"
; 430  :     "      --help                 : Print this help message and exit.\n"
; 431  :     "      --version              : Print version information and exit.\n"
; 432  :     "      --(no-)aud             : Use access unit delimiters. [disabled]\n"
; 433  :     "      --debug <filename>     : Output internal reconstruction.\n"
; 434  :     "      --(no-)cpuid           : Enable runtime CPU optimizations. [enabled]\n"
; 435  :     "      --hash <string>        : Decoded picture hash [checksum]\n"
; 436  :     "                                   - none: 0 bytes\n"
; 437  :     "                                   - checksum: 18 bytes\n"
; 438  :     "                                   - md5: 56 bytes\n"
; 439  :     "      --(no-)psnr            : Calculate PSNR for frames. [enabled]\n"
; 440  :     "      --(no-)info            : Add encoder info SEI. [enabled]\n"
; 441  :     "      --crypto <string>      : Selective encryption. Crypto support must be\n"
; 442  :     "                               enabled at compile-time. Can be 'on' or 'off' or\n"
; 443  :     "                               a list of features separated with a '+'. [off]\n"
; 444  :     "                                   - on: Enable all encryption features.\n"
; 445  :     "                                   - off: Disable selective encryption.\n"
; 446  :     "                                   - mvs: Motion vector magnitudes.\n"
; 447  :     "                                   - mv_signs: Motion vector signs.\n"
; 448  :     "                                   - trans_coeffs: Coefficient magnitudes.\n"
; 449  :     "                                   - trans_coeff_signs: Coefficient signs.\n"
; 450  :     "                                   - intra_pred_modes: Intra prediction modes.\n"
; 451  :     "      --key <string>         : Encryption key [16,213,27,56,255,127,242,112,\n"
; 452  :     "                                               97,126,197,204,25,59,38,30]\n"
; 453  :     "      --stats-file-prefix    : A prefix used for stats files that include\n"
; 454  :     "                               bits, lambda, distortion, and qp for each ctu.\n"
; 455  :     "                               These are meant for debugging and are not\n"
; 456  :     "                               written unless the prefix is defined.\n"
; 457  :     "\n"
; 458  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 459  :     "Video structure:\n"
; 460  :     "  -q, --qp <integer>         : Quantization parameter [22]\n"
; 461  :     "  -p, --period <integer>     : Period of intra pictures [64]\n"
; 462  :     "                                   - 0: Only first picture is intra.\n"
; 463  :     "                                   - 1: All pictures are intra.\n"
; 464  :     "                                   - N: Every Nth picture is intra.\n"
; 465  :     "      --vps-period <integer> : How often the video parameter set is re-sent [0]\n"
; 466  :     "                                   - 0: Only send VPS with the first frame.\n"
; 467  :     "                                   - N: Send VPS with every Nth intra frame.\n"
; 468  :     "  -r, --ref <integer>        : Number of reference frames, in range 1..15 [4]\n"
; 469  :     "      --gop <string>         : GOP structure [lp-g4d3t1]\n"
; 470  :     "                                   -  0: Disabled\n"
; 471  :     "                                   -  8: B-frame pyramid of length 8\n"
; 472  :     "                                   - 16: B-frame pyramid of length 16\n"
; 473  :     "                                   - lp-<string>: Low-delay P/B-frame GOP\n"
; 474  :     "                                     (e.g. lp-g8d4t2, see README)\n"
; 475  :     "      --intra-qp-offset <int>: QP offset for intra frames [-51..51] [auto]\n"
; 476  :     "                                   - N: Set QP offset to N.\n"
; 477  :     "                                   - auto: Select offset automatically based\n"
; 478  :     "                                     on GOP length.\n"
; 479  :     "      --(no-)open-gop        : Use open GOP configuration. [enabled]\n"
; 480  :     "      --cqmfile <filename>   : Read custom quantization matrices from a file.\n"
; 481  :     "      --scaling-list <string>: Set scaling list mode. [off]\n"
; 482  :     "                                   - off: Disable scaling lists.\n"
; 483  :     "                                   - custom: use custom list (with --cqmfile).\n"
; 484  :     "                                   - default: Use default lists.\n"
; 485  :     "      --bitrate <integer>    : Target bitrate [0]\n"
; 486  :     "                                   - 0: Disable rate control.\n"
; 487  :     "                                   - N: Target N bits per second.\n"
; 488  :     "      --rc-algorithm <string>: Select used rc-algorithm. [lambda]\n"
; 489  :     "                                   - lambda: rate control from:\n"
; 490  :     "                                     DOI: 10.1109/TIP.2014.2336550 \n"
; 491  :     "                                   - oba: DOI: 10.1109/TCSVT.2016.2589878\n"
; 492  :     "      --(no-)intra-bits      : Use Hadamard cost based allocation for intra\n"
; 493  :     "                               frames. Default on for gop 8 and off for lp-gop\n"
; 494  :     "      --(no-)clip-neighbour  : On oba based rate control whether to clip \n"
; 495  :     "                               lambda values to same frame's ctus or previous'.\n"
; 496  :     "                               Default on for RA GOPS and disabled for LP.\n"
; 497  :     "      --(no-)lossless        : Use lossless coding. [disabled]\n"
; 498  :     "      --mv-constraint <string> : Constrain movement vectors. [none]\n"
; 499  :     "                                   - none: No constraint\n"
; 500  :     "                                   - frametile: Constrain within the tile.\n"
; 501  :     "                                   - frametilemargin: Constrain even more.\n"
; 502  :     "      --roi <filename>       : Use a delta QP map for region of interest.\n"
; 503  :     "                               Reads an array of delta QP values from a text\n"
; 504  :     "                               file. The file format is: width and height of\n"
; 505  :     "                               the QP delta map followed by width*height delta\n"
; 506  :     "                               QP values in raster order. The map can be of any\n"
; 507  :     "                               size and will be scaled to the video size.\n"
; 508  :     "      --set-qp-in-cu         : Set QP at CU level keeping pic_init_qp_minus26.\n"
; 509  :     "                               in PPS and slice_qp_delta in slize header zero.\n"
; 510  :     "      --(no-)erp-aqp         : Use adaptive QP for 360 degree video with\n"
; 511  :     "                               equirectangular projection. [disabled]\n"
; 512  :     "      --level <number>       : Use the given HEVC level in the output and give\n"
; 513  :     "                               an error if level limits are exceeded. [6.2]\n"
; 514  :     "                                   - 1, 2, 2.1, 3, 3.1, 4, 4.1, 5, 5.1, 5.2, 6,\n"
; 515  :     "                                     6.1, 6.2\n"
; 516  :     "      --force-level <number> : Same as --level but warnings instead of errors.\n"
; 517  :     "      --high-tier            : Used with --level. Use high tier bitrate limits\n"
; 518  :     "                               instead of the main tier limits during encoding.\n"
; 519  :     "                               High tier requires level 4 or higher.\n"
; 520  :     "      --(no-)vaq <integer>   : Enable variance adaptive quantization with given\n"
; 521  :     "                               strength, in range 1..20. Recommended: 5.\n"
; 522  :     "                               [disabled]\n"
; 523  :     "\n"
; 524  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 525  :     "Compression tools:\n"
; 526  :     "      --(no-)deblock <beta:tc> : Deblocking filter. [0:0]\n"
; 527  :     "                                   - beta: Between -6 and 6\n"
; 528  :     "                                   - tc: Between -6 and 6\n"
; 529  :     "      --sao <string>         : Sample Adaptive Offset [full]\n"
; 530  :     "                                   - off: SAO disabled\n"
; 531  :     "                                   - band: Band offset only\n"
; 532  :     "                                   - edge: Edge offset only\n"
; 533  :     "                                   - full: Full SAO\n"
; 534  :     "      --(no-)rdoq            : Rate-distortion optimized quantization [enabled]\n"
; 535  :     "      --(no-)rdoq-skip       : Skip RDOQ for 4x4 blocks. [disabled]\n"
; 536  :     "      --(no-)signhide        : Sign hiding [disabled]\n"
; 537  :     "      --(no-)smp             : Symmetric motion partition [disabled]\n"
; 538  :     "      --(no-)amp             : Asymmetric motion partition [disabled]\n"
; 539  :     "      --rd <integer>         : Intra mode search complexity [0]\n"
; 540  :     "                                   - 0: Skip intra if inter is good enough.\n"
; 541  :     "                                   - 1: Rough intra mode search with SATD.\n"
; 542  :     "                                   - 2: Refine intra mode search with SSE.\n"
; 543  :     "                                   - 3: Try all intra modes and enable intra\n"
; 544  :     "                                        chroma mode search.\n"
; 545  :     "      --(no-)mv-rdo          : Rate-distortion optimized motion vector costs\n"
; 546  :     "                               [disabled]\n"
; 547  :     "      --(no-)zero-coeff-rdo  : If a CU is set inter, check if forcing zero\n"
; 548  :     "                               residual improves the RD cost. [enabled]\n"
; 549  :     "      --(no-)full-intra-search : Try all intra modes during rough search.\n"
; 550  :     "                               [disabled]\n"
; 551  :     "      --(no-)transform-skip  : Try transform skip [disabled]\n"
; 552  :     "      --me <string>          : Integer motion estimation algorithm [hexbs]\n"
; 553  :     "                                   - hexbs: Hexagon Based Search\n"
; 554  :     "                                   - tz:    Test Zone Search\n"
; 555  :     "                                   - full:  Full Search\n"
; 556  :     "                                   - full8, full16, full32, full64\n"
; 557  :     "                                   - dia:   Diamond Search\n"
; 558  :     "      --me-steps <integer>   : Motion estimation search step limit. Only\n"
; 559  :     "                               affects 'hexbs' and 'dia'. [-1]\n"
; 560  :     "      --subme <integer>      : Fractional pixel motion estimation level [4]\n"
; 561  :     "                                   - 0: Integer motion estimation only\n"
; 562  :     "                                   - 1: + 1/2-pixel horizontal and vertical\n"
; 563  :     "                                   - 2: + 1/2-pixel diagonal\n"
; 564  :     "                                   - 3: + 1/4-pixel horizontal and vertical\n"
; 565  :     "                                   - 4: + 1/4-pixel diagonal\n"
; 566  :     "      --pu-depth-inter <int>-<int> : Inter prediction units sizes [0-3]\n"
; 567  :     "                                   - 0, 1, 2, 3: from 64x64 to 8x8\n"
; 568  :     "                                   - Accepts a list of values separated by ','\n"
; 569  :     "                                     for setting separate depths per GOP layer\n"
; 570  :     "                                     (values can be omitted to use the first\n"
; 571  :     "                                     value for the respective layer).\n"
; 572  :     "      --pu-depth-intra <int>-<int> : Intra prediction units sizes [1-4]\n"
; 573  :     "                                   - 0, 1, 2, 3, 4: from 64x64 to 4x4\n"
; 574  :     "                                   - Accepts a list of values separated by ','\n"
; 575  :     "                                     for setting separate depths per GOP layer\n"
; 576  :     "                                     (values can be omitted to use the first\n"
; 577  :     "                                     value for the respective layer).\n"
; 578  :     "      --ml-pu-depth-intra    : Predict the pu-depth-intra using machine\n"
; 579  :     "                                learning trees, overrides the\n"
; 580  :     "                                --pu-depth-intra parameter. [disabled]\n"
; 581  :     "      --tr-depth-intra <int> : Transform split depth for intra blocks [0]\n"
; 582  :     "      --(no-)bipred          : Bi-prediction [disabled]\n"
; 583  :     "      --cu-split-termination <string> : CU split search termination [zero]\n"
; 584  :     "                                   - off: Don't terminate early.\n"
; 585  :     "                                   - zero: Terminate when residual is zero.\n"
; 586  :     "      --me-early-termination <string> : Motion estimation termination [on]\n"
; 587  :     "                                   - off: Don't terminate early.\n"
; 588  :     "                                   - on: Terminate early.\n"
; 589  :     "                                   - sensitive: Terminate even earlier.\n"
; 590  :     "      --fast-residual-cost <int> : Skip CABAC cost for residual coefficients\n"
; 591  :     "                                   when QP is below the limit. [0]\n"
; 592  :     "      --fast-coeff-table <string> : Read custom weights for residual\n"
; 593  :     "                                    coefficients from a file instead of using\n"
; 594  :     "                                    defaults [default]\n"
; 595  :     "      --fast-rd-sampling : Enable learning data sampling for fast coefficient\n"
; 596  :     "                           table generation\n"
; 597  :     "      --fastrd-accuracy-check : Evaluate the accuracy of fast coefficient\n"
; 598  :     "                                prediction\n"
; 599  :     "      --fastrd-outdir : Directory to which to output sampled data or accuracy\n"
; 600  :     "                        data, into <fastrd-outdir>/0.txt to 50.txt, one file\n"
; 601  :     "                        for each QP that blocks were estimated on\n"
; 602  :     "      --(no-)intra-rdo-et    : Check intra modes in rdo stage only until\n"
; 603  :     "                               a zero coefficient CU is found. [disabled]\n"
; 604  :     "      --(no-)early-skip      : Try to find skip cu from merge candidates.\n"
; 605  :     "                               Perform no further search if skip is found.\n"
; 606  :     "                               For rd=0..1: Try the first candidate.\n"
; 607  :     "                               For rd=2.. : Try the best candidate based\n"
; 608  :     "                                            on luma satd cost. [enabled]\n"
; 609  :     "      --max-merge <integer>  : Maximum number of merge candidates, 1..5 [5]\n"
; 610  :     "      --(no-)implicit-rdpcm  : Implicit residual DPCM. Currently only supported\n"
; 611  :     "                               with lossless coding. [disabled]\n"
; 612  :     "      --(no-)tmvp            : Temporal motion vector prediction [enabled]\n"
; 613  :     "\n"
; 614  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 615  :     "Parallel processing:\n"
; 616  :     "      --threads <integer>    : Number of threads to use [auto]\n"
; 617  :     "                                   - 0: Process everything with main thread.\n"
; 618  :     "                                   - N: Use N threads for encoding.\n"
; 619  :     "                                   - auto: Select automatically.\n"
; 620  :     "      --owf <integer>        : Frame-level parallelism [auto]\n"
; 621  :     "                                   - N: Process N+1 frames at a time.\n"
; 622  :     "                                   - auto: Select automatically.\n"
; 623  :     "      --(no-)wpp             : Wavefront parallel processing. [enabled]\n"
; 624  :     "                               Enabling tiles automatically disables WPP.\n"
; 625  :     "                               To enable WPP with tiles, re-enable it after\n"
; 626  :     "                               enabling tiles. Enabling wpp with tiles is,\n"
; 627  :     "                               however, an experimental feature since it is\n"
; 628  :     "                               not supported in any HEVC profile.\n"
; 629  :     "      --tiles <int>x<int>    : Split picture into width x height uniform tiles.\n"
; 630  :     "      --tiles-width-split <string>|u<int> :\n"
; 631  :     "                                   - <string>: A comma-separated list of tile\n"
; 632  :     "                                               column pixel coordinates.\n"
; 633  :     "                                   - u<int>: Number of tile columns of uniform\n"
; 634  :     "                                             width.\n"
; 635  :     "      --tiles-height-split <string>|u<int> :\n"
; 636  :     "                                   - <string>: A comma-separated list of tile row\n"
; 637  :     "                                               column pixel coordinates.\n"
; 638  :     "                                   - u<int>: Number of tile rows of uniform\n"
; 639  :     "                                             height.\n"
; 640  :     "      --slices <string>      : Control how slices are used.\n"
; 641  :     "                                   - tiles: Put tiles in independent slices.\n"
; 642  :     "                                   - wpp: Put rows in dependent slices.\n"
; 643  :     "                                   - tiles+wpp: Do both.\n"
; 644  :     "      --partial-coding <x-offset>!<y-offset>!<slice-width>!<slice-height>\n"
; 645  :     "                             : Encode partial frame.\n" 
; 646  :     "                               Parts must be merged to form a valid bitstream.\n"
; 647  :     "                               X and Y are CTU offsets.\n"
; 648  :     "                               Slice width and height must be divisible by CTU\n"
; 649  :     "                               in pixels unless it is the last CTU row/column.\n"
; 650  :     "                               This parameter is used by kvaShare.\n"
; 651  :     "\n"
; 652  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 653  :     "Video Usability Information:\n"
; 654  :     "      --sar <width:height>   : Specify sample aspect ratio\n"
; 655  :     "      --overscan <string>    : Specify crop overscan setting [undef]\n"
; 656  :     "                                   - undef, show, crop\n"
; 657  :     "      --videoformat <string> : Specify video format [undef]\n"
; 658  :     "                                   - undef, component, pal, ntsc, secam, mac\n"
; 659  :     "      --range <string>       : Specify color range [tv]\n"
; 660  :     "                                   - tv, pc\n"
; 661  :     "      --colorprim <string>   : Specify color primaries [undef]\n"
; 662  :     "                                   - undef, bt709, bt470m, bt470bg,\n"
; 663  :     "                                     smpte170m, smpte240m, film, bt2020\n"
; 664  :     "      --transfer <string>    : Specify transfer characteristics [undef]\n"
; 665  :     "                                   - undef, bt709, bt470m, bt470bg,\n"
; 666  :     "                                     smpte170m, smpte240m, linear, log100,\n"
; 667  :     "                                     log316, iec61966-2-4, bt1361e,\n"
; 668  :     "                                     iec61966-2-1, bt2020-10, bt2020-12\n"
; 669  :     "      --colormatrix <string> : Specify color matrix setting [undef]\n"
; 670  :     "                                   - undef, bt709, fcc, bt470bg, smpte170m,\n"
; 671  :     "                                     smpte240m, GBR, YCgCo, bt2020nc, bt2020c\n"
; 672  :     "      --chromaloc <integer>  : Specify chroma sample location (0 to 5) [0]\n"
; 673  :     "\n"
; 674  :     /* Word wrap to this width to stay under 80 characters (including ") *************/
; 675  :     "Deprecated parameters: (might be removed at some point)\n"
; 676  :     "  -w, --width <integer>       : Use --input-res.\n"
; 677  :     "  -h, --height <integer>      : Use --input-res.\n");
; 678  : }

	add	rsp, 40					; 00000028H

; 392  :   fprintf(stdout,

	jmp	fprintf
print_help ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cli.c
_TEXT	SEGMENT
info$ = 96
frame_psnr$ = 104
bytes$ = 112
print_psnr$ = 120
avg_qp$ = 128
print_frame_info PROC

; 686  : {

$LN20:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
	mov	r14, rcx

; 687  :   fprintf(stderr, "POC %4d QP %2d AVG QP %.1f (%c-frame) %10d bits",

	lea	esi, DWORD PTR [r8*8]
	mov	r8d, DWORD PTR [rcx+12]
	mov	r15, rdx
	lea	rcx, OFFSET FLAT:$SG4294967147
	mov	eax, 1431655766				; 55555556H
	imul	r8d
	movsx	edi, BYTE PTR [r14+4]
	movzx	ebp, r9b
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	lea	eax, DWORD PTR [rdx+rdx*2]
	sub	r8d, eax
	movsxd	rax, r8d
	movsx	ebx, BYTE PTR [rax+rcx]
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	movsd	xmm0, QWORD PTR avg_qp$[rsp]
	lea	rdx, OFFSET FLAT:$SG4294967146
	mov	r8d, DWORD PTR [r14]
	mov	rcx, rax
	mov	DWORD PTR [rsp+48], esi
	mov	r9d, edi
	mov	DWORD PTR [rsp+40], ebx
	movsd	QWORD PTR [rsp+32], xmm0
	call	fprintf

; 688  :           info->poc,
; 689  :           info->qp,
; 690  :           avg_qp,
; 691  :           "BPI"[info->slice_type % 3],
; 692  :           bytes << 3);
; 693  : 
; 694  :   if (print_psnr) {

	test	bpl, bpl
	je	SHORT $LN8@print_fram

; 695  :     fprintf(stderr, " PSNR Y %2.4f U %2.4f V %2.4f",

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	movsd	xmm3, QWORD PTR [r15+8]
	lea	rdx, OFFSET FLAT:$SG4294967145
	movsd	xmm2, QWORD PTR [r15]
	movq	r9, xmm3
	movsd	xmm0, QWORD PTR [r15+16]
	movq	r8, xmm2
	mov	rcx, rax
	movsd	QWORD PTR [rsp+32], xmm0
	call	fprintf
$LN8@print_fram:

; 696  :             frame_psnr[0], frame_psnr[1], frame_psnr[2]);
; 697  :   }
; 698  : 
; 699  :   if (info->slice_type != KVZ_SLICE_I) {

	cmp	DWORD PTR [r14+12], 2
	je	$LN9@print_fram

; 700  :     // Print reference picture lists
; 701  :     fprintf(stderr, " [L0 ");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967144
	call	fprintf

; 702  :     for (int j = 0; j < info->ref_list_len[0]; j++) {

	xor	ebx, ebx
	mov	esi, ebx
	cmp	DWORD PTR [r14+144], ebx
	jle	SHORT $LN3@print_fram
	lea	rdi, QWORD PTR [r14+16]
$LL4@print_fram:

; 703  :       fprintf(stderr, "%d ", info->ref_list[0][j]);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR [rdi]
	lea	rdx, OFFSET FLAT:$SG4294967143
	mov	rcx, rax
	call	fprintf
	inc	esi
	lea	rdi, QWORD PTR [rdi+4]
	cmp	esi, DWORD PTR [r14+144]
	jl	SHORT $LL4@print_fram
$LN3@print_fram:

; 704  :     }
; 705  :     fprintf(stderr, "] [L1 ");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967142
	call	fprintf

; 706  :     for (int j = 0; j < info->ref_list_len[1]; j++) {

	cmp	DWORD PTR [r14+148], ebx
	jle	SHORT $LN6@print_fram
	lea	rdi, QWORD PTR [r14+80]
	npad	10
$LL7@print_fram:

; 707  :       fprintf(stderr, "%d ", info->ref_list[1][j]);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR [rdi]
	lea	rdx, OFFSET FLAT:$SG4294967141
	mov	rcx, rax
	call	fprintf
	inc	ebx
	lea	rdi, QWORD PTR [rdi+4]
	cmp	ebx, DWORD PTR [r14+148]
	jl	SHORT $LL7@print_fram
$LN6@print_fram:

; 708  :     }
; 709  :     fprintf(stderr, "]");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967140
	call	fprintf
$LN9@print_fram:

; 710  :   }
; 711  : 
; 712  :   fprintf(stderr, "\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294967139

; 713  : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi

; 710  :   }
; 711  : 
; 712  :   fprintf(stderr, "\n");

	jmp	fprintf
print_frame_info ENDP
_TEXT	ENDS
END
