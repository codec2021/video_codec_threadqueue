; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294959554
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294959553
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294959552
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294959551
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294959550
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294959549
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294959548
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294959547
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294959546
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294959545
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294959544
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294959543
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294959542
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294959541
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294959540
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294959539
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294959538
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294959537
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294959536
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294959535
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294959534
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294959533
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294959532
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294959531
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294959530
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294959529
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294959528
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294959527
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294959526
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294959525
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294959524
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294959523
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294959522
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294959521
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294959520
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294959519
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294959518
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294959517
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294959516
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294959515
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294959514
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294959513
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294959512
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294959511
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294959510
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294959509
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294959508
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294959507
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294959506
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294959505
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294959504
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294959503
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294959502
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294959501
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294959500
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294959499
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294959498
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294959497
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294959496
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294959495
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294959494
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294959493
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294959492
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
kvz_8bit_api DQ	FLAT:kvz_config_alloc
	DQ	FLAT:kvz_config_destroy
	DQ	FLAT:kvz_config_init
	DQ	FLAT:kvz_config_parse
	DQ	FLAT:kvz_image_alloc_420
	DQ	FLAT:kvz_image_free
	DQ	FLAT:kvz_bitstream_free_chunks
	DQ	FLAT:kvazaar_open
	DQ	FLAT:kvazaar_close
	DQ	FLAT:kvazaar_headers
	DQ	FLAT:kvazaar_field_encoding_adapter
	DQ	FLAT:kvz_image_alloc
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294959504 DB 'quant', 00H
	ORG $+2
$SG4294959554 DB 'array_checksum', 00H
	ORG $+1
$SG4294959553 DB 'array_md5', 00H
$SG4294959552 DB 'reg_sad', 00H
$SG4294959551 DB 'sad_4x4', 00H
$SG4294959550 DB 'sad_8x8', 00H
$SG4294959549 DB 'sad_16x16', 00H
	ORG $+2
$SG4294959548 DB 'sad_32x32', 00H
$SG4294959547 DB 'sad_64x64', 00H
	ORG $+2
$SG4294959546 DB 'satd_4x4', 00H
	ORG $+2
$SG4294959545 DB 'satd_8x8', 00H
$SG4294959544 DB 'satd_16x16', 00H
	ORG $+2
$SG4294959543 DB 'satd_32x32', 00H
	ORG $+2
$SG4294959542 DB 'satd_64x64', 00H
$SG4294959541 DB 'satd_any_size', 00H
	ORG $+2
$SG4294959540 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294959539 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294959538 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294959537 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294959536 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294959535 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294959534 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294959533 DB 'satd_16x16_dual', 00H
$SG4294959532 DB 'satd_32x32_dual', 00H
$SG4294959531 DB 'satd_64x64_dual', 00H
$SG4294959530 DB 'satd_any_size_quad', 00H
$SG4294959529 DB 'pixels_calc_ssd', 00H
$SG4294959528 DB 'bipred_average', 00H
	ORG $+1
$SG4294959527 DB 'get_optimized_sad', 00H
	ORG $+2
$SG4294959526 DB 'ver_sad', 00H
$SG4294959525 DB 'hor_sad', 00H
$SG4294959524 DB 'pixel_var', 00H
	ORG $+2
$SG4294959523 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294959522 DB 'dct_4x4', 00H
$SG4294959521 DB 'dct_8x8', 00H
$SG4294959520 DB 'dct_16x16', 00H
	ORG $+2
$SG4294959519 DB 'dct_32x32', 00H
	ORG $+2
$SG4294959518 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294959517 DB 'idct_4x4', 00H
	ORG $+2
$SG4294959516 DB 'idct_8x8', 00H
$SG4294959515 DB 'idct_16x16', 00H
	ORG $+2
$SG4294959514 DB 'idct_32x32', 00H
$SG4294959513 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294959512 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294959511 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294959510 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294959509 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294959508 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294959507 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+2
$SG4294959506 DB 'sample_octpel_chroma_hi', 00H
$SG4294959505 DB 'get_extended_block', 00H
	ORG $+2
$SG4294959503 DB 'quantize_residual', 00H
	ORG $+2
$SG4294959502 DB 'dequant', 00H
$SG4294959501 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294959500 DB 'fast_coeff_cost', 00H
$SG4294959499 DB 'angular_pred', 00H
	ORG $+3
$SG4294959498 DB 'intra_pred_planar', 00H
	ORG $+1
$SG4294959497 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294959496 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294959495 DB 'calc_sao_edge_dir', 00H
	ORG $+2
$SG4294959494 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294959493 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294959492 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_api_get
pdata	SEGMENT
$pdata$kvazaar_field_encoding_adapter DD imagerel kvazaar_field_encoding_adapter
	DD	imagerel kvazaar_field_encoding_adapter+784
	DD	imagerel $unwind$kvazaar_field_encoding_adapter
$pdata$kvazaar_encode DD imagerel kvazaar_encode
	DD	imagerel kvazaar_encode+1127
	DD	imagerel $unwind$kvazaar_encode
$pdata$yuv_io_extract_field DD imagerel yuv_io_extract_field
	DD	imagerel yuv_io_extract_field+38
	DD	imagerel $unwind$yuv_io_extract_field
$pdata$0$yuv_io_extract_field DD imagerel yuv_io_extract_field+38
	DD	imagerel yuv_io_extract_field+45
	DD	imagerel $chain$0$yuv_io_extract_field
$pdata$2$yuv_io_extract_field DD imagerel yuv_io_extract_field+45
	DD	imagerel yuv_io_extract_field+272
	DD	imagerel $chain$2$yuv_io_extract_field
$pdata$3$yuv_io_extract_field DD imagerel yuv_io_extract_field+272
	DD	imagerel yuv_io_extract_field+382
	DD	imagerel $chain$3$yuv_io_extract_field
$pdata$4$yuv_io_extract_field DD imagerel yuv_io_extract_field+382
	DD	imagerel yuv_io_extract_field+395
	DD	imagerel $chain$4$yuv_io_extract_field
$pdata$kvazaar_headers DD imagerel kvazaar_headers
	DD	imagerel kvazaar_headers+205
	DD	imagerel $unwind$kvazaar_headers
$pdata$set_frame_info DD imagerel set_frame_info
	DD	imagerel set_frame_info+275
	DD	imagerel $unwind$set_frame_info
$pdata$kvazaar_open DD imagerel kvazaar_open
	DD	imagerel kvazaar_open+458
	DD	imagerel $unwind$kvazaar_open
$pdata$kvazaar_close DD imagerel kvazaar_close
	DD	imagerel kvazaar_close+21
	DD	imagerel $unwind$kvazaar_close
$pdata$2$kvazaar_close DD imagerel kvazaar_close+21
	DD	imagerel kvazaar_close+685
	DD	imagerel $chain$2$kvazaar_close
$pdata$3$kvazaar_close DD imagerel kvazaar_close+685
	DD	imagerel kvazaar_close+700
	DD	imagerel $chain$3$kvazaar_close
xdata	SEGMENT
$unwind$kvazaar_field_encoding_adapter DD 0d5101H
	DD	0cf451H
	DD	014744cH
	DD	0136444H
	DD	012343cH
	DD	0e008c20cH
	DD	0c004d006H
	DD	05002H
$unwind$kvazaar_encode DD 0c2111H
	DD	0d6421H
	DD	0b5421H
	DD	0a3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$kvazaar_encode
$cppxdata$kvazaar_encode DB 028H
	DD	imagerel $stateUnwindMap$kvazaar_encode
	DD	imagerel $ip2state$kvazaar_encode
$stateUnwindMap$kvazaar_encode DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
$ip2state$kvazaar_encode DB 02H
	DB	0e8H
	DB	00H
	ORG $+2
$unwind$yuv_io_extract_field DD 040a01H
	DD	09340aH
	DD	07006320aH
$chain$0$yuv_io_extract_field DD 020521H
	DD	065405H
	DD	imagerel yuv_io_extract_field
	DD	imagerel yuv_io_extract_field+38
	DD	imagerel $unwind$yuv_io_extract_field
$chain$2$yuv_io_extract_field DD 040a21H
	DD	08e40aH
	DD	076405H
	DD	imagerel yuv_io_extract_field+38
	DD	imagerel yuv_io_extract_field+45
	DD	imagerel $chain$0$yuv_io_extract_field
$chain$3$yuv_io_extract_field DD 020021H
	DD	08e400H
	DD	imagerel yuv_io_extract_field+38
	DD	imagerel yuv_io_extract_field+45
	DD	imagerel $chain$0$yuv_io_extract_field
$chain$4$yuv_io_extract_field DD 021H
	DD	imagerel yuv_io_extract_field
	DD	imagerel yuv_io_extract_field+38
	DD	imagerel $unwind$yuv_io_extract_field
$unwind$kvazaar_headers DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
$unwind$set_frame_info DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$kvazaar_open DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
$unwind$kvazaar_close DD 020601H
	DD	070023206H
$chain$2$kvazaar_close DD 062621H
	DD	086426H
	DD	063421H
	DD	075405H
	DD	imagerel kvazaar_close
	DD	imagerel kvazaar_close+21
	DD	imagerel $unwind$kvazaar_close
$chain$3$kvazaar_close DD 021H
	DD	imagerel kvazaar_close
	DD	imagerel kvazaar_close+21
	DD	imagerel $unwind$kvazaar_close
$SG4294959489 DB 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG4294959491 DB 'Failed to initialize strategies.', 0aH, 00H
	ORG $+6
$SG4294959490 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H
	DB	'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
bit_depth$dead$ = 8
kvz_api_get PROC

; 423  :   return &kvz_8bit_api;

	lea	rax, OFFSET FLAT:kvz_8bit_api

; 424  : }

	ret	0
kvz_api_get ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
encoder$ = 48
kvazaar_close PROC

; 57   : {

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 58   :   if (encoder) {

	test	rcx, rcx
	je	$LN7@kvazaar_cl

; 59   :     // The threadqueue must be stopped before freeing states.
; 60   :     if (encoder->control) {

	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+56], rbp
	test	rcx, rcx
	je	SHORT $LN8@kvazaar_cl

; 61   :       kvz_threadqueue_stop(encoder->control->threadqueue);

	mov	rcx, QWORD PTR [rcx+6448]
	call	kvz_threadqueue_stop
$LN8@kvazaar_cl:

; 62   :     }
; 63   : 
; 64   :     if (encoder->states) {

	mov	rdx, QWORD PTR [rdi+8]
	xor	ebp, ebp
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+64], rsi
	test	rdx, rdx
	je	$LN5@kvazaar_cl

; 70   :                                            1)) != NULL) {

	lea	r9d, QWORD PTR [rbp+1]
	xor	r8d, r8d
	lea	rcx, QWORD PTR [rdi+32]
	call	kvz_encoder_feed_frame
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN3@kvazaar_cl
	npad	4
$LL2@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	ecx, -1
	lock xadd DWORD PTR [rbx+88], ecx
	sub	ecx, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN11@kvazaar_cl

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rbx+80]
	cmp	rcx, rbx
	je	SHORT $LN14@kvazaar_cl

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN15@kvazaar_cl
$LN14@kvazaar_cl:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rbx]
	call	QWORD PTR __imp_free
$LN15@kvazaar_cl:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;
; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+80], rbp
	mov	QWORD PTR [rbx], rbp
	mov	QWORD PTR [rbx+8], rbp
	mov	QWORD PTR [rbx+32], rbp
	mov	QWORD PTR [rbx+24], rbp
	mov	QWORD PTR [rbx+16], rbp
	mov	QWORD PTR [rbx+56], rbp
	mov	QWORD PTR [rbx+48], rbp
	mov	QWORD PTR [rbx+40], rbp
	call	QWORD PTR __imp_free
$LN11@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 70   :                                            1)) != NULL) {

	mov	rdx, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rdi+32]
	mov	r9d, 1
	xor	r8d, r8d
	call	kvz_encoder_feed_frame
	mov	rbx, rax
	test	rax, rax
	jne	SHORT $LL2@kvazaar_cl
$LN3@kvazaar_cl:

; 71   :         kvz_image_free(pic);
; 72   :         pic = NULL;
; 73   :       }
; 74   : 
; 75   :       for (unsigned i = 0; i < encoder->num_encoder_states; ++i) {

	mov	ebx, ebp
	cmp	DWORD PTR [rdi+16], ebx
	jbe	SHORT $LN5@kvazaar_cl
	npad	7
$LL6@kvazaar_cl:

; 76   :         kvz_encoder_state_finalize(&encoder->states[i]);

	mov	eax, ebx
	imul	rcx, rax, 424				; 000001a8H
	add	rcx, QWORD PTR [rdi+8]
	call	kvz_encoder_state_finalize
	inc	ebx
	cmp	ebx, DWORD PTR [rdi+16]
	jb	SHORT $LL6@kvazaar_cl
$LN5@kvazaar_cl:

; 79   :     FREE_POINTER(encoder->states);

	mov	rcx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_free
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 122  :   if (data == NULL) return;

	mov	rax, QWORD PTR data
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 79   :     FREE_POINTER(encoder->states);

	mov	QWORD PTR [rdi+8], rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 122  :   if (data == NULL) return;

	test	rax, rax
	je	$LN23@kvazaar_cl

; 123  : 
; 124  :   pthread_mutex_destroy(&data->ck_frame_lock);

	lea	rsi, QWORD PTR [rax+352]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rsi]
	test	rbx, rbx
	je	SHORT $LN41@kvazaar_cl
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN41@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rsi], rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 125  :   pthread_mutex_destroy(&data->lambda_lock);

	lea	rsi, QWORD PTR [rax+360]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rsi]
	test	rbx, rbx
	je	SHORT $LN53@kvazaar_cl
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN53@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rsi], rbp
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 126  :   pthread_mutex_destroy(&data->intra_lock);

	lea	rsi, QWORD PTR [rax+368]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 75   :     delete static_cast<std::mutex*>(*mutex);

	mov	rbx, QWORD PTR [rsi]
	test	rbx, rbx
	je	SHORT $LN65@kvazaar_cl
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	mov	rcx, rbx
	call	QWORD PTR __imp__Mtx_destroy_in_situ
	mov	edx, 80					; 00000050H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, QWORD PTR data
$LN65@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 76   :     *mutex = nullptr;

	mov	QWORD PTR [rsi], rbp
	mov	ebx, 304				; 00000130H
	npad	7
$LL26@kvazaar_cl:

; 105  :   delete static_cast<rw_lock_internal*>(*rwlock)->lock;

	mov	rcx, QWORD PTR [rbx+rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 128  :     pthread_rwlock_destroy(&data->ck_ctu_lock[i]);

	lea	rsi, QWORD PTR [rbx+rax]
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\pthread.cpp

; 105  :   delete static_cast<rw_lock_internal*>(*rwlock)->lock;

	mov	rax, QWORD PTR [rcx]
	test	rax, rax
	je	SHORT $LN95@kvazaar_cl
	mov	edx, 8
	mov	rcx, rax
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rcx, QWORD PTR [rsi]
$LN95@kvazaar_cl:

; 106  :   delete static_cast<rw_lock_internal*>(*rwlock);

	mov	edx, 16
	call	??3@YAXPEAX_K@Z				; operator delete
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c

; 127  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; ++i) {

	add	rbx, 8
	cmp	rbx, 352				; 00000160H
	jge	SHORT $LN100@kvazaar_cl
	mov	rax, QWORD PTR data
	jmp	SHORT $LL26@kvazaar_cl
$LN100@kvazaar_cl:

; 129  :   }
; 130  : 
; 131  :   if (data->intra_bpp) FREE_POINTER(data->intra_bpp);

	mov	rcx, QWORD PTR data
	mov	rax, QWORD PTR [rcx+256]
	test	rax, rax
	je	SHORT $LN31@kvazaar_cl
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rcx+256], rbp
$LN31@kvazaar_cl:

; 132  :   if (data->intra_dis) FREE_POINTER(data->intra_dis);

	mov	rax, QWORD PTR [rcx+264]
	test	rax, rax
	je	SHORT $LN32@kvazaar_cl
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rcx+264], rbp
$LN32@kvazaar_cl:
	mov	rbx, rbp
$LL29@kvazaar_cl:

; 134  :     if (data->c_para[i]) FREE_POINTER(data->c_para[i]);

	mov	rax, QWORD PTR [rbx+rcx]
	test	rax, rax
	je	SHORT $LN33@kvazaar_cl
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rbx+rcx], rbp
$LN33@kvazaar_cl:

; 135  :     if (data->k_para[i]) FREE_POINTER(data->k_para[i]);

	mov	rax, QWORD PTR [rbx+rcx+48]
	test	rax, rax
	je	SHORT $LN27@kvazaar_cl
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR data
	mov	QWORD PTR [rbx+rcx+48], rbp
$LN27@kvazaar_cl:

; 133  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; i++) {

	add	rbx, 8
	cmp	rbx, 48					; 00000030H
	jl	SHORT $LL29@kvazaar_cl

; 136  :   }
; 137  :   FREE_POINTER(data);

	call	QWORD PTR __imp_free
	mov	QWORD PTR data, rbp
$LN23@kvazaar_cl:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 83   :     kvz_encoder_control_free((void*) encoder->control);

	mov	rcx, QWORD PTR [rdi]
	call	kvz_encoder_control_free

; 84   :     encoder->control = NULL;

	mov	rsi, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi], rbp
	mov	rbp, QWORD PTR [rsp+56]
$LN7@kvazaar_cl:

; 85   :   }
; 86   :   FREE_POINTER(encoder);

	mov	rcx, rdi

; 87   : }

	add	rsp, 32					; 00000020H
	pop	rdi

; 85   :   }
; 86   :   FREE_POINTER(encoder);

	rex_jmp	QWORD PTR __imp_free
kvazaar_close ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
cfg$ = 48
kvazaar_open PROC

; 91   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rcx

; 92   :   kvz_encoder *encoder = NULL;

	xor	esi, esi

; 93   : 
; 94   :   //Initialize strategies
; 95   :   // TODO: Make strategies non-global
; 96   :   if (!kvz_strategyselector_init(cfg->cpuid, KVZ_BIT_DEPTH)) {

	mov	ecx, DWORD PTR [rcx+196]
	mov	ebx, esi
	call	kvz_strategyselector_init
	test	eax, eax
	jne	SHORT $LN8@kvazaar_op

; 97   :     fprintf(stderr, "Failed to initialize strategies.\n");

	lea	ecx, QWORD PTR [rsi+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294959491
	call	fprintf
$kvazaar_open_failure$30:

; 150  : 
; 151  : kvazaar_open_failure:
; 152  :   kvazaar_close(encoder);

	mov	rcx, rbx
	call	kvazaar_close

; 153  :   return NULL;

	xor	eax, eax
$LN1@kvazaar_op:

; 154  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
$LN8@kvazaar_op:

; 98   :     goto kvazaar_open_failure;
; 99   :   }
; 100  : 
; 101  :   encoder = calloc(1, sizeof(kvz_encoder));

	mov	edx, 1608				; 00000648H
	mov	ecx, 1
	call	QWORD PTR __imp_calloc
	mov	rbx, rax

; 102  :   if (!encoder) {

	test	rax, rax
	je	SHORT $kvazaar_open_failure$30

; 103  :     goto kvazaar_open_failure;
; 104  :   }
; 105  : 
; 106  :   encoder->control = kvz_encoder_control_init(cfg);

	mov	rcx, r15
	call	kvz_encoder_control_init
	mov	QWORD PTR [rbx], rax

; 107  :   if (!encoder->control) {

	test	rax, rax
	je	SHORT $kvazaar_open_failure$30

; 108  :     goto kvazaar_open_failure;
; 109  :   }
; 110  : 
; 111  :   encoder->num_encoder_states = encoder->control->cfg.owf + 1;

	mov	ecx, DWORD PTR [rax+172]
	inc	ecx

; 112  :   encoder->cur_state_num = 0;

	mov	QWORD PTR [rbx+20], rsi
	mov	DWORD PTR [rbx+16], ecx

; 113  :   encoder->out_state_num = 0;
; 114  :   encoder->frames_started = 0;
; 115  :   encoder->frames_done = 0;
; 116  : 
; 117  :   // Assure that the rc data allocation was successful
; 118  :   if(!kvz_get_rc_data(encoder->control)) {

	mov	rcx, rax
	mov	QWORD PTR [rbx+1600], rsi
	call	kvz_get_rc_data
	test	rax, rax
	je	SHORT $kvazaar_open_failure$30
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c

; 43   :   FILL(input_buffer->pts_buffer, 0);

	xor	edx, edx
	lea	rcx, QWORD PTR [rbx+32]
	mov	r8d, 1536				; 00000600H
	call	memset

; 44   :   input_buffer->num_in = 0;

	mov	QWORD PTR [rbx+1568], rsi
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 124  :   encoder->states = calloc(encoder->num_encoder_states, sizeof(encoder_state_t));

	mov	edx, 424				; 000001a8H
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c

; 45   :   input_buffer->num_out = 0;

	mov	QWORD PTR [rbx+1576], rsi

; 46   :   input_buffer->delay = 0;

	mov	QWORD PTR [rbx+1584], rsi

; 47   :   input_buffer->gop_skipped = 0;

	mov	DWORD PTR [rbx+1592], esi
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 124  :   encoder->states = calloc(encoder->num_encoder_states, sizeof(encoder_state_t));

	mov	ecx, DWORD PTR [rbx+16]
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR [rbx+8], rax

; 125  :   if (!encoder->states) {

	test	rax, rax
	je	$kvazaar_open_failure$30

; 126  :     goto kvazaar_open_failure;
; 127  :   }
; 128  : 
; 129  :   for (unsigned i = 0; i < encoder->num_encoder_states; ++i) {

	mov	ecx, DWORD PTR [rbx+16]
	mov	edi, esi
	test	ecx, ecx
	je	$LN6@kvazaar_op
	npad	4
$LL4@kvazaar_op:

; 130  :     encoder->states[i].encoder_control = encoder->control;

	mov	rcx, QWORD PTR [rbx+8]

; 131  :     if (!kvz_encoder_state_init(&encoder->states[i], NULL)) {

	xor	edx, edx
	mov	eax, edi
	imul	r14, rax, 424				; 000001a8H
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [r14+rcx], rax
	mov	rcx, QWORD PTR [rbx+8]
	add	rcx, r14
	call	kvz_encoder_state_init
	test	eax, eax
	je	$kvazaar_open_failure$30

; 132  :       goto kvazaar_open_failure;
; 133  :     }
; 134  : 
; 135  :     encoder->states[i].frame->QP = (int8_t)cfg->qp;

	mov	rax, QWORD PTR [rbx+8]
	inc	edi
	mov	rcx, QWORD PTR [rax+r14+40]
	movzx	eax, BYTE PTR [r15]
	mov	BYTE PTR [rcx+24], al
	mov	ecx, DWORD PTR [rbx+16]
	cmp	edi, ecx
	jb	SHORT $LL4@kvazaar_op

; 136  :   }
; 137  : 
; 138  :   for (int i = 0; i < encoder->num_encoder_states; ++i) {

	test	ecx, ecx
	je	SHORT $LN6@kvazaar_op
	mov	rdi, rsi
	npad	6
$LL7@kvazaar_op:

; 139  :     if (i == 0) {

	mov	r8, QWORD PTR [rbx+8]
	test	esi, esi
	jne	SHORT $LN14@kvazaar_op

; 140  :       encoder->states[i].previous_encoder_state = &encoder->states[encoder->num_encoder_states - 1];

	lea	edx, DWORD PTR [rcx-1]

; 141  :     } else {

	jmp	SHORT $LN15@kvazaar_op
$LN14@kvazaar_op:

; 142  :       encoder->states[i].previous_encoder_state = &encoder->states[(i - 1) % encoder->num_encoder_states];

	lea	eax, DWORD PTR [rsi-1]
	xor	edx, edx
	div	ecx
$LN15@kvazaar_op:

; 143  :     }
; 144  :     kvz_encoder_state_match_children_of_previous_frame(&encoder->states[i]);

	mov	eax, edx
	imul	rcx, rax, 424				; 000001a8H
	movsxd	rax, esi
	add	rcx, r8
	mov	QWORD PTR [rdi+r8+32], rcx
	imul	rcx, rax, 424				; 000001a8H
	add	rcx, QWORD PTR [rbx+8]
	call	kvz_encoder_state_match_children_of_previous_frame
	mov	ecx, DWORD PTR [rbx+16]
	inc	esi
	add	rdi, 424				; 000001a8H
	cmp	esi, ecx
	jb	SHORT $LL7@kvazaar_op
$LN6@kvazaar_op:

; 145  :   }
; 146  : 
; 147  :   encoder->states[encoder->cur_state_num].frame->num = -1;

	mov	eax, DWORD PTR [rbx+20]
	imul	rcx, rax, 424				; 000001a8H
	mov	rax, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rcx+rax+40]

; 148  : 
; 149  :   return encoder;

	mov	rax, rbx
	mov	DWORD PTR [rcx+8], -1
	jmp	$LN1@kvazaar_op
kvazaar_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
info$ = 8
state$ = 16
set_frame_info PROC

; 158  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 159  :   info->poc = state->frame->poc,

	mov	rax, QWORD PTR [rdx+40]

; 160  :   info->qp = state->frame->QP;
; 161  :   info->nal_unit_type = state->frame->pictype;
; 162  :   info->slice_type = state->frame->slicetype;
; 163  : 
; 164  :   memset(info->ref_list[0], 0, 16 * sizeof(int));

	lea	rbx, QWORD PTR [rcx+16]

; 165  :   memset(info->ref_list[1], 0, 16 * sizeof(int));

	lea	r11, QWORD PTR [rcx+80]
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1

; 166  : 
; 167  :   for (size_t i = 0; i < state->frame->ref_LX_size[0]; i++) {

	xor	r9d, r9d
	mov	rdi, rcx
	mov	r10d, r9d
	mov	r8d, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx], r8d
	mov	rax, QWORD PTR [rdx+40]
	movzx	r8d, BYTE PTR [rax+24]
	mov	BYTE PTR [rcx+4], r8b
	mov	rax, QWORD PTR [rdx+40]
	movzx	r8d, BYTE PTR [rax+84]
	mov	DWORD PTR [rcx+8], r8d
	mov	rax, QWORD PTR [rdx+40]
	mov	r8d, DWORD PTR [rax+88]
	mov	DWORD PTR [rcx+12], r8d
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm0
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	XMMWORD PTR [rbx+48], xmm0
	movups	XMMWORD PTR [r11], xmm1
	movups	XMMWORD PTR [r11+16], xmm1
	movups	XMMWORD PTR [r11+32], xmm1
	movups	XMMWORD PTR [r11+48], xmm1
	mov	r8, QWORD PTR [rdx+40]
	mov	rcx, r8
	cmp	BYTE PTR [r8+81], r9b
	jbe	SHORT $LN3@set_frame_
$LL4@set_frame_:

; 168  :     info->ref_list[0][i] = state->frame->ref->pocs[state->frame->ref_LX[0][i]];

	mov	rax, QWORD PTR [rdx+40]
	lea	rbx, QWORD PTR [rbx+4]
	movzx	r8d, BYTE PTR [rax+r10+49]
	inc	r10
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rcx+r8*4]
	mov	DWORD PTR [rbx-4], eax
	mov	r8, QWORD PTR [rdx+40]
	mov	rcx, r8
	movzx	eax, BYTE PTR [r8+81]
	cmp	r10, rax
	jb	SHORT $LL4@set_frame_
$LN3@set_frame_:

; 169  :   }
; 170  : 
; 171  :   for (size_t i = 0; i < state->frame->ref_LX_size[1]; i++) {

	cmp	BYTE PTR [r8+82], r9b
	jbe	SHORT $LL6@set_frame_
	npad	8
$LL7@set_frame_:

; 172  :     info->ref_list[1][i] = state->frame->ref->pocs[state->frame->ref_LX[1][i]];

	mov	rax, QWORD PTR [rdx+40]
	lea	r11, QWORD PTR [r11+4]
	movzx	r8d, BYTE PTR [rax+r9+65]
	inc	r9
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rcx+r8*4]
	mov	DWORD PTR [r11-4], eax
	mov	rcx, QWORD PTR [rdx+40]
	movzx	eax, BYTE PTR [rcx+82]
	cmp	r9, rax
	jb	SHORT $LL7@set_frame_
	npad	2
$LL6@set_frame_:

; 173  :   }
; 174  : 
; 175  :   info->ref_list_len[0] = state->frame->ref_LX_size[0];

	movzx	eax, BYTE PTR [rcx+81]

; 176  :   info->ref_list_len[1] = state->frame->ref_LX_size[1];
; 177  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	DWORD PTR [rdi+144], eax
	mov	rax, QWORD PTR [rdx+40]
	movzx	ecx, BYTE PTR [rax+82]
	mov	DWORD PTR [rdi+148], ecx
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
set_frame_info ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
stream$ = 32
enc$ = 80
data_out$ = 88
len_out$ = 96
kvazaar_headers PROC

; 183  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H

; 184  :   if (data_out) *data_out = NULL;

	xor	edi, edi
	mov	rsi, r8
	mov	rbx, rdx
	test	rdx, rdx
	je	SHORT $LN2@kvazaar_he
	mov	QWORD PTR [rdx], rdi
$LN2@kvazaar_he:

; 185  :   if (len_out) *len_out = 0;

	test	rsi, rsi
	je	SHORT $LN3@kvazaar_he
	mov	DWORD PTR [r8], edi
$LN3@kvazaar_he:

; 190  :   kvz_encoder_state_write_parameter_sets(&stream, &enc->states[enc->cur_state_num]);

	mov	eax, DWORD PTR [rcx+20]
	xorps	xmm0, xmm0
	imul	rdx, rax, 424				; 000001a8H
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 74   :   memset(stream, 0, sizeof(bitstream_t));

	movups	XMMWORD PTR stream$[rsp], xmm0
	movups	XMMWORD PTR stream$[rsp+16], xmm0
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 190  :   kvz_encoder_state_write_parameter_sets(&stream, &enc->states[enc->cur_state_num]);

	add	rdx, QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR stream$[rsp]
	call	kvz_encoder_state_write_parameter_sets

; 193  :   if (len_out) *len_out = kvz_bitstream_tell(&stream) / 8;

	movzx	r8d, BYTE PTR stream$[rsp+25]
	test	rsi, rsi
	je	SHORT $LN4@kvazaar_he
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	ecx, DWORD PTR stream$[rsp]

; 136  :   return position * 8 + stream->cur_bit;

	lea	rdx, QWORD PTR [r8+rcx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 193  :   if (len_out) *len_out = kvz_bitstream_tell(&stream) / 8;

	shr	rdx, 3
	mov	DWORD PTR [rsi], edx
$LN4@kvazaar_he:

; 194  :   if (data_out) *data_out = kvz_bitstream_take_chunks(&stream);

	test	rbx, rbx
	je	SHORT $LN29@kvazaar_he
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 86   :   assert(stream->cur_bit == 0);

	test	r8b, r8b
	je	SHORT $LN13@kvazaar_he
	mov	r8d, 86					; 00000056H
	lea	rdx, OFFSET FLAT:$SG4294953930
	lea	rcx, OFFSET FLAT:$SG4294953929
	call	QWORD PTR __imp__wassert
$LN13@kvazaar_he:

; 87   :   kvz_data_chunk *chunks = stream->first;

	mov	rax, QWORD PTR stream$[rsp+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 194  :   if (data_out) *data_out = kvz_bitstream_take_chunks(&stream);

	mov	QWORD PTR [rbx], rax
	jmp	SHORT $LN5@kvazaar_he
$LN29@kvazaar_he:
	mov	rdi, QWORD PTR stream$[rsp+8]
$LN5@kvazaar_he:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 202  :   kvz_bitstream_free_chunks(stream->first);

	test	rdi, rdi

; 113  :   while (chunk != NULL) {

	je	SHORT $LN28@kvazaar_he
	npad	3
$LL19@kvazaar_he:

; 114  :     kvz_data_chunk *next = chunk->next;

	mov	rbx, QWORD PTR [rdi+4104]

; 115  :     free(chunk);

	mov	rcx, rdi
	call	QWORD PTR __imp_free

; 116  :     chunk = next;

	mov	rdi, rbx
	test	rbx, rbx
	jne	SHORT $LL19@kvazaar_he
$LN28@kvazaar_he:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 198  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	eax, 1
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
kvazaar_headers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
frame_in$ = 48
source_scan_type$ = 56
field_parity$ = 64
field_out$ = 72
yuv_io_extract_field PROC

; 212  : {

	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 213  :   if ((source_scan_type != 1) && (source_scan_type != 2)) return 0;

	lea	eax, DWORD PTR [rdx-1]
	mov	rdi, r9
	mov	rbx, rcx
	cmp	eax, 1
	ja	$LN35@yuv_io_ext

; 214  :   if ((field_parity != 0)     && (field_parity != 1))     return 0;

	cmp	r8d, 2
	jae	$LN35@yuv_io_ext

; 215  : 
; 216  :   unsigned offset = 0;

	mov	QWORD PTR [rsp+48], rbp
	xor	ebp, ebp
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], r14
	mov	r14d, ebp

; 217  :   if (source_scan_type == 1) offset = field_parity ? 1 : 0;

	cmp	edx, 1
	jne	SHORT $LN13@yuv_io_ext
	test	r8d, r8d
	setne	r14b
	jmp	SHORT $LN15@yuv_io_ext
$LN13@yuv_io_ext:

; 218  :   else if (source_scan_type == 2) offset = field_parity ? 0 : 1;  

	cmp	edx, 2
	jne	SHORT $LN15@yuv_io_ext
	test	r8d, r8d
	sete	r14b
$LN15@yuv_io_ext:

; 219  : 
; 220  :   //Luma
; 221  :   for (int i = 0; i < field_out->height; ++i){

	mov	ecx, DWORD PTR [r9+68]
	mov	esi, ebp
	test	ecx, ecx
	jle	SHORT $LN3@yuv_io_ext
	npad	2
$LL4@yuv_io_ext:

; 222  :     kvz_pixel *row_in  = frame_in->y + MIN(frame_in->height - 1, 2 * i + offset) * frame_in->stride;

	mov	eax, DWORD PTR [rbx+68]
	lea	ecx, DWORD PTR [r14+rsi*2]

; 223  :     kvz_pixel *row_out = field_out->y + i * field_out->stride;
; 224  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width);

	movsxd	r8, DWORD PTR [rbx+64]
	dec	eax
	cmp	eax, ecx
	cmovae	eax, ecx
	imul	eax, DWORD PTR [rbx+72]
	mov	edx, eax
	mov	eax, DWORD PTR [rdi+72]
	add	rdx, QWORD PTR [rbx+16]
	imul	eax, esi
	movsxd	rcx, eax
	add	rcx, QWORD PTR [rdi+16]
	call	memcpy
	mov	ecx, DWORD PTR [rdi+68]
	inc	esi
	cmp	esi, ecx
	jl	SHORT $LL4@yuv_io_ext
$LN3@yuv_io_ext:

; 225  :   }
; 226  : 
; 227  :   //Chroma
; 228  :   for (int i = 0; i < field_out->height / 2; ++i){

	mov	eax, ecx
	mov	esi, ebp
	cdq
	sub	eax, edx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN6@yuv_io_ext
$LL7@yuv_io_ext:

; 229  :     kvz_pixel *row_in = frame_in->u + MIN(frame_in->height / 2 - 1, 2 * i + offset) * frame_in->stride / 2;

	mov	ecx, DWORD PTR [rbx+68]
	cmp	ecx, ebp
	jge	SHORT $LN39@yuv_io_ext
	inc	ecx
$LN39@yuv_io_ext:

; 230  :     kvz_pixel *row_out = field_out->u + i * field_out->stride / 2;
; 231  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width / 2);

	movsxd	r8, DWORD PTR [rbx+64]
	lea	eax, DWORD PTR [r14+rsi*2]
	sar	ecx, 1
	dec	ecx
	shr	r8, 1
	cmp	ecx, eax
	cmovae	ecx, eax
	mov	eax, DWORD PTR [rdi+72]
	imul	ecx, DWORD PTR [rbx+72]
	imul	eax, esi
	mov	r9d, ecx
	cdq
	shr	r9, 1
	add	r9, QWORD PTR [rbx+24]
	sub	eax, edx
	sar	eax, 1
	mov	rdx, r9
	movsxd	rcx, eax
	add	rcx, QWORD PTR [rdi+24]
	call	memcpy
	mov	ecx, DWORD PTR [rdi+68]
	inc	esi
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	esi, eax
	jl	SHORT $LL7@yuv_io_ext
$LN6@yuv_io_ext:

; 232  :   }
; 233  : 
; 234  :   for (int i = 0; i < field_out->height / 2; ++i){

	mov	rsi, QWORD PTR [rsp+56]
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	test	eax, eax
	jle	SHORT $LN9@yuv_io_ext
	npad	7
$LL10@yuv_io_ext:

; 235  :     kvz_pixel *row_in = frame_in->v + MIN(frame_in->height / 2 - 1, 2 * i + offset) * frame_in->stride / 2;

	mov	ecx, DWORD PTR [rbx+68]
	cmp	ecx, 0
	jge	SHORT $LN38@yuv_io_ext
	inc	ecx
$LN38@yuv_io_ext:

; 236  :     kvz_pixel *row_out = field_out->v + i * field_out->stride / 2;
; 237  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width / 2);

	movsxd	r8, DWORD PTR [rbx+64]
	lea	eax, DWORD PTR [r14+rbp*2]
	sar	ecx, 1
	dec	ecx
	shr	r8, 1
	cmp	ecx, eax
	cmovae	ecx, eax
	mov	eax, DWORD PTR [rdi+72]
	imul	ecx, DWORD PTR [rbx+72]
	imul	eax, ebp
	mov	r9d, ecx
	cdq
	shr	r9, 1
	add	r9, QWORD PTR [rbx+32]
	sub	eax, edx
	sar	eax, 1
	mov	rdx, r9
	movsxd	rcx, eax
	add	rcx, QWORD PTR [rdi+32]
	call	memcpy
	mov	eax, DWORD PTR [rdi+68]
	inc	ebp
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebp, eax
	jl	SHORT $LL10@yuv_io_ext
$LN9@yuv_io_ext:

; 238  :   }
; 239  : 
; 240  :   return 1;

	mov	r14, QWORD PTR [rsp+64]
	mov	eax, 1
	mov	rbp, QWORD PTR [rsp+48]

; 241  : }

	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN35@yuv_io_ext:
	mov	rbx, QWORD PTR [rsp+72]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
yuv_io_extract_field ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
enc$ = 80
pic_in$ = 88
data_out$ = 96
len_out$ = 104
pic_out$ = 112
src_out$ = 120
info_out$ = 128
kvazaar_encode PROC

; 251  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+24], r8
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, r9
	mov	rbp, rdx
	mov	r14, rcx

; 252  :   if (data_out) *data_out = NULL;

	xor	ebx, ebx
	test	r8, r8
	je	SHORT $LN2@kvazaar_en
	mov	QWORD PTR [r8], rbx
$LN2@kvazaar_en:

; 253  :   if (len_out) *len_out = 0;

	test	r15, r15
	je	SHORT $LN3@kvazaar_en
	mov	DWORD PTR [r9], ebx
$LN3@kvazaar_en:

; 254  :   if (pic_out) *pic_out = NULL;

	mov	r12, QWORD PTR pic_out$[rsp]
	test	r12, r12
	je	SHORT $LN4@kvazaar_en
	mov	QWORD PTR [r12], rbx
$LN4@kvazaar_en:

; 255  :   if (src_out) *src_out = NULL;

	mov	rax, QWORD PTR src_out$[rsp]
	test	rax, rax
	je	SHORT $LN5@kvazaar_en
	mov	QWORD PTR [rax], rbx
$LN5@kvazaar_en:

; 256  : 
; 257  :   encoder_state_t *state = &enc->states[enc->cur_state_num];

	mov	eax, DWORD PTR [rcx+20]
	imul	rdi, rax, 424				; 000001a8H
	add	rdi, QWORD PTR [rcx+8]

; 258  : 
; 259  :   if (!state->frame->prepared) {

	mov	rax, QWORD PTR [rdi+40]
	cmp	BYTE PTR [rax+152], bl
	jne	SHORT $LN6@kvazaar_en

; 260  :     kvz_encoder_prepare(state);

	mov	rcx, rdi
	call	kvz_encoder_prepare
$LN6@kvazaar_en:

; 261  :   }
; 262  : 
; 263  :   if (pic_in != NULL) {
; 264  :     // FIXME: The frame number printed here is wrong when GOP is enabled.
; 265  :     CHECKPOINT_MARK("read source frame: %d", state->frame->num + enc->control->cfg.seek);
; 266  :   }
; 267  : 
; 268  :   kvz_picture* frame = kvz_encoder_feed_frame(

	cmp	DWORD PTR [r14+1604], ebx
	jne	SHORT $LN124@kvazaar_en
	mov	rax, QWORD PTR [rdi]
	cmp	BYTE PTR [rax+2484], 2
	mov	r9d, ebx
	je	SHORT $LN21@kvazaar_en
$LN124@kvazaar_en:
	mov	r9d, 1
$LN21@kvazaar_en:
	lea	rcx, QWORD PTR [r14+32]
	mov	r8, rbp
	mov	rdx, rdi
	call	kvz_encoder_feed_frame
	mov	rsi, rax

; 269  :     &enc->input_buffer, state, pic_in,
; 270  :     enc->frames_done || state->encoder_control->cfg.rc_algorithm != KVZ_OBA
; 271  :   );
; 272  :   if (frame) {

	test	rax, rax
	mov	eax, DWORD PTR [r14+1600]
	je	$LN8@kvazaar_en

; 273  :     assert(state->frame->num == enc->frames_started);

	mov	rcx, QWORD PTR [rdi+40]
	cmp	DWORD PTR [rcx+8], eax
	je	SHORT $LN22@kvazaar_en
	mov	r8d, 273				; 00000111H
	lea	rdx, OFFSET FLAT:$SG4294959490
	lea	rcx, OFFSET FLAT:$SG4294959489
	call	QWORD PTR __imp__wassert
$LN22@kvazaar_en:
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c

; 1482 :   encoder_state_init_new_frame(state, frame);

	mov	rdx, rsi
	mov	rcx, rdi
	call	encoder_state_init_new_frame

; 1483 :   encoder_state_encode(state);

	mov	rcx, rdi
	call	encoder_state_encode

; 1484 : 
; 1485 :   threadqueue_job_t *job =

	mov	rdx, rdi
	lea	rcx, OFFSET FLAT:kvz_encoder_state_worker_write_bitstream
	call	kvz_threadqueue_job_create
	mov	rsi, rax

; 1486 :     kvz_threadqueue_job_create(kvz_encoder_state_worker_write_bitstream, state);
; 1487 : 
; 1488 :   _encode_one_frame_add_bitstream_deps(state, job);

	mov	rdx, rax
	mov	rcx, rdi
	call	_encode_one_frame_add_bitstream_deps

; 1489 :   if (state->previous_encoder_state != state && state->previous_encoder_state->tqj_bitstream_written) {

	mov	rdx, QWORD PTR [rdi+32]
	cmp	rdx, rdi
	je	SHORT $LN24@kvazaar_en
	mov	rdx, QWORD PTR [rdx+408]
	test	rdx, rdx
	je	SHORT $LN24@kvazaar_en

; 1490 :     //We need to depend on previous bitstream generation
; 1491 :     kvz_threadqueue_job_dep_add(job, state->previous_encoder_state->tqj_bitstream_written);

	mov	rcx, rsi
	call	kvz_threadqueue_job_dep_add
$LN24@kvazaar_en:

; 1492 :   }
; 1493 :   kvz_threadqueue_submit(state->encoder_control->threadqueue, job);

	mov	rcx, QWORD PTR [rdi]
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rcx+6448]
	call	kvz_threadqueue_submit

; 1494 :   assert(!state->tqj_bitstream_written);

	cmp	QWORD PTR [rdi+408], rbx
	je	SHORT $LN26@kvazaar_en
	mov	r8d, 1494				; 000005d6H
	lea	rdx, OFFSET FLAT:$SG4294952888
	lea	rcx, OFFSET FLAT:$SG4294952887
	call	QWORD PTR __imp__wassert
$LN26@kvazaar_en:

; 1495 :   state->tqj_bitstream_written = job;

	mov	QWORD PTR [rdi+408], rsi

; 1496 : 
; 1497 :   state->frame->done = 0;

	mov	rax, QWORD PTR [rdi+40]
	mov	BYTE PTR [rax+153], bl
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 276  :     enc->frames_started += 1;

	inc	DWORD PTR [r14+1600]
	mov	eax, DWORD PTR [r14+1600]
$LN8@kvazaar_en:

; 277  :   }
; 278  : 
; 279  :   // If we have finished encoding as many frames as we have started, we are done.
; 280  :   if (enc->frames_done == enc->frames_started) {

	cmp	DWORD PTR [r14+1604], eax
	je	$LN11@kvazaar_en

; 281  :     return 1;
; 282  :   }
; 283  : 
; 284  :   if (!state->frame->done) {

	mov	rax, QWORD PTR [rdi+40]
	cmp	BYTE PTR [rax+153], bl
	jne	SHORT $LN125@kvazaar_en

; 285  :     // We started encoding a frame; move to the next encoder state.
; 286  :     enc->cur_state_num = (enc->cur_state_num + 1) % (enc->num_encoder_states);

	mov	eax, DWORD PTR [r14+20]
	inc	eax
	xor	edx, edx
	div	DWORD PTR [r14+16]
	mov	DWORD PTR [r14+20], edx
$LN125@kvazaar_en:

; 287  :   }
; 288  : 
; 289  :   encoder_state_t *output_state = &enc->states[enc->out_state_num];

	mov	ecx, DWORD PTR [r14+24]
	imul	rsi, rcx, 424				; 000001a8H
	add	rsi, QWORD PTR [r14+8]

; 290  :   if ((!output_state->frame->done &&
; 291  :        (pic_in == NULL || enc->cur_state_num == enc->out_state_num)) ||

	mov	rax, QWORD PTR [rsi+40]
	cmp	BYTE PTR [rax+153], bl
	jne	SHORT $LN13@kvazaar_en
	test	rbp, rbp
	je	SHORT $LN12@kvazaar_en
	cmp	DWORD PTR [r14+20], ecx
	je	SHORT $LN12@kvazaar_en
$LN13@kvazaar_en:
	mov	rax, QWORD PTR [rdi+40]
	cmp	DWORD PTR [rax+8], ebx
	jne	$LN11@kvazaar_en
	mov	rax, QWORD PTR [rdi]
	cmp	BYTE PTR [rax+2484], 2
	jne	$LN11@kvazaar_en
$LN12@kvazaar_en:

; 292  :        (state->frame->num == 0  && state->encoder_control->cfg.rc_algorithm == KVZ_OBA)) {
; 293  : 
; 294  :     kvz_threadqueue_waitfor(enc->control->threadqueue, output_state->tqj_bitstream_written);

	mov	rdi, QWORD PTR [rsi+408]
	mov	rax, QWORD PTR [r14]
	mov	rbp, QWORD PTR [rax+6448]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, QWORD PTR [rdi]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN42@kvazaar_en

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN42@kvazaar_en:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c

; 572  :   while (job->state != THREADQUEUE_JOB_STATE_DONE) {

	cmp	DWORD PTR [rdi+8], 4
	je	SHORT $LN29@kvazaar_en
	npad	10
$LL28@kvazaar_en:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 598  :         _Check_C_return(_Cnd_wait(_Mycnd(), _Lck.mutex()->_Mymtx()));

	mov	rdx, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rbp+16]
	call	QWORD PTR __imp__Cnd_wait
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	jne	SHORT $LN100@kvazaar_en
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c

; 572  :   while (job->state != THREADQUEUE_JOB_STATE_DONE) {

	cmp	DWORD PTR [rdi+8], 4
	jne	SHORT $LL28@kvazaar_en
$LN29@kvazaar_en:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rdi]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN76@kvazaar_en

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN100@kvazaar_en:
	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN76@kvazaar_en:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 297  :     kvz_threadqueue_free_job(&output_state->tqj_bitstream_written);

	lea	rcx, QWORD PTR [rsi+408]
	call	kvz_threadqueue_free_job
	lea	rcx, QWORD PTR [rsi+96]

; 300  :     if (len_out) *len_out = kvz_bitstream_tell(&output_state->stream) / 8;

	test	r15, r15
	je	SHORT $LN119@kvazaar_en
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 135  :   uint64_t position = stream->len;

	mov	edx, DWORD PTR [rcx]

; 136  :   return position * 8 + stream->cur_bit;

	movzx	eax, BYTE PTR [rcx+25]
	lea	r8, QWORD PTR [rax+rdx*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 300  :     if (len_out) *len_out = kvz_bitstream_tell(&output_state->stream) / 8;

	shr	r8, 3
	mov	DWORD PTR [r15], r8d
$LN119@kvazaar_en:

; 301  :     if (data_out) *data_out = kvz_bitstream_take_chunks(&output_state->stream);

	mov	rdi, QWORD PTR data_out$[rsp]
	test	rdi, rdi
	je	SHORT $LN15@kvazaar_en
	call	kvz_bitstream_take_chunks
	mov	QWORD PTR [rdi], rax
$LN15@kvazaar_en:

; 302  :     if (pic_out) *pic_out = kvz_image_copy_ref(output_state->tile->frame->rec);

	test	r12, r12
	je	SHORT $LN16@kvazaar_en
	mov	rax, QWORD PTR [rsi+48]
	mov	rcx, QWORD PTR [rax]
	mov	rdi, QWORD PTR [rcx+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, 1
	lock xadd DWORD PTR [rdi+88], eax
	inc	eax

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	eax, 2
	jge	SHORT $LN85@kvazaar_en
	mov	r8d, 150				; 00000096H
	lea	rdx, OFFSET FLAT:$SG4294955962
	lea	rcx, OFFSET FLAT:$SG4294955961
	call	QWORD PTR __imp__wassert
$LN85@kvazaar_en:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 302  :     if (pic_out) *pic_out = kvz_image_copy_ref(output_state->tile->frame->rec);

	mov	QWORD PTR [r12], rdi
$LN16@kvazaar_en:

; 303  :     if (src_out) *src_out = kvz_image_copy_ref(output_state->tile->frame->source);

	mov	r15, QWORD PTR src_out$[rsp]
	test	r15, r15
	je	SHORT $LN17@kvazaar_en
	mov	rax, QWORD PTR [rsi+48]
	mov	r9, QWORD PTR [rax]
	mov	rdi, QWORD PTR [r9]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, 1
	lock xadd DWORD PTR [rdi+88], eax
	inc	eax

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	eax, 2
	jge	SHORT $LN88@kvazaar_en
	mov	r8d, 150				; 00000096H
	lea	rdx, OFFSET FLAT:$SG4294955962
	lea	rcx, OFFSET FLAT:$SG4294955961
	call	QWORD PTR __imp__wassert
$LN88@kvazaar_en:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 303  :     if (src_out) *src_out = kvz_image_copy_ref(output_state->tile->frame->source);

	mov	QWORD PTR [r15], rdi
$LN17@kvazaar_en:

; 304  :     if (info_out) set_frame_info(info_out, output_state);

	mov	rdi, QWORD PTR info_out$[rsp]
	test	rdi, rdi
	je	$LN106@kvazaar_en

; 159  :   info->poc = state->frame->poc,

	mov	rax, QWORD PTR [rsi+40]
	mov	ecx, DWORD PTR [rax+12]
	mov	DWORD PTR [rdi], ecx
	mov	rax, QWORD PTR [rsi+40]
	movzx	ecx, BYTE PTR [rax+24]
	mov	BYTE PTR [rdi+4], cl

; 160  :   info->qp = state->frame->QP;
; 161  :   info->nal_unit_type = state->frame->pictype;

	mov	rax, QWORD PTR [rsi+40]
	movzx	ecx, BYTE PTR [rax+84]
	mov	DWORD PTR [rdi+8], ecx

; 162  :   info->slice_type = state->frame->slicetype;

	mov	rax, QWORD PTR [rsi+40]
	mov	ecx, DWORD PTR [rax+88]
	mov	DWORD PTR [rdi+12], ecx

; 163  : 
; 164  :   memset(info->ref_list[0], 0, 16 * sizeof(int));

	lea	r11, QWORD PTR [rdi+16]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [r11], xmm0
	movups	XMMWORD PTR [r11+16], xmm0
	movups	XMMWORD PTR [r11+32], xmm0
	movups	XMMWORD PTR [r11+48], xmm0

; 165  :   memset(info->ref_list[1], 0, 16 * sizeof(int));

	lea	r10, QWORD PTR [rdi+80]
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [r10], xmm1
	movups	XMMWORD PTR [r10+16], xmm1
	movups	XMMWORD PTR [r10+32], xmm1
	movups	XMMWORD PTR [r10+48], xmm1

; 166  : 
; 167  :   for (size_t i = 0; i < state->frame->ref_LX_size[0]; i++) {

	mov	r9, rbx
	mov	r8, QWORD PTR [rsi+40]
	mov	rcx, r8
	cmp	BYTE PTR [r8+81], r9b
	jbe	SHORT $LN91@kvazaar_en
	npad	3
$LL92@kvazaar_en:

; 168  :     info->ref_list[0][i] = state->frame->ref->pocs[state->frame->ref_LX[0][i]];

	movzx	edx, BYTE PTR [r8+r9+49]
	mov	rax, QWORD PTR [r8+40]
	mov	rcx, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rcx+rdx*4]
	mov	DWORD PTR [r11], eax

; 166  : 
; 167  :   for (size_t i = 0; i < state->frame->ref_LX_size[0]; i++) {

	inc	r9
	lea	r11, QWORD PTR [r11+4]
	mov	r8, QWORD PTR [rsi+40]
	mov	rcx, r8
	movzx	eax, BYTE PTR [r8+81]
	cmp	r9, rax
	jb	SHORT $LL92@kvazaar_en
$LN91@kvazaar_en:

; 169  :   }
; 170  : 
; 171  :   for (size_t i = 0; i < state->frame->ref_LX_size[1]; i++) {

	cmp	BYTE PTR [r8+82], 0
	jbe	SHORT $LL94@kvazaar_en
	npad	13
$LL95@kvazaar_en:

; 172  :     info->ref_list[1][i] = state->frame->ref->pocs[state->frame->ref_LX[1][i]];

	movzx	edx, BYTE PTR [rcx+rbx+65]
	mov	rax, QWORD PTR [rcx+40]
	mov	rcx, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rcx+rdx*4]
	mov	DWORD PTR [r10], eax

; 169  :   }
; 170  : 
; 171  :   for (size_t i = 0; i < state->frame->ref_LX_size[1]; i++) {

	inc	rbx
	lea	r10, QWORD PTR [r10+4]
	mov	rcx, QWORD PTR [rsi+40]
	movzx	eax, BYTE PTR [rcx+82]
	cmp	rbx, rax
	jb	SHORT $LL95@kvazaar_en
	npad	9
$LL94@kvazaar_en:

; 173  :   }
; 174  : 
; 175  :   info->ref_list_len[0] = state->frame->ref_LX_size[0];

	movzx	eax, BYTE PTR [rcx+81]
	mov	DWORD PTR [rdi+144], eax
	mov	rax, QWORD PTR [rsi+40]
	movzx	ecx, BYTE PTR [rax+82]
	mov	DWORD PTR [rdi+148], ecx
$LN106@kvazaar_en:

; 305  : 
; 306  :     output_state->frame->done = 1;

	mov	rcx, QWORD PTR [rsi+40]
	mov	BYTE PTR [rcx+153], 1

; 307  :     output_state->frame->prepared = 0;

	mov	rcx, QWORD PTR [rsi+40]
	mov	BYTE PTR [rcx+152], 0

; 308  :     enc->frames_done += 1;

	inc	DWORD PTR [r14+1604]

; 309  : 
; 310  :     enc->out_state_num = (enc->out_state_num + 1) % (enc->num_encoder_states);

	mov	eax, DWORD PTR [r14+24]
	inc	eax
	xor	edx, edx
	div	DWORD PTR [r14+16]
	mov	DWORD PTR [r14+24], edx
$LN11@kvazaar_en:

; 311  :   }
; 312  : 
; 313  :   return 1;

	mov	eax, 1

; 314  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN126@kvazaar_en:
kvazaar_encode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
_TEXT	SEGMENT
first$ = 64
second$ = 80
enc$ = 144
pic_in$ = 152
data_out$ = 160
len_out$ = 168
pic_out$ = 176
src_out$ = 184
info_out$ = 192
kvazaar_field_encoding_adapter PROC

; 324  : {

	push	rbp
	push	r12
	push	r13
	push	r14
	sub	rsp, 104				; 00000068H

; 325  :   if (enc->control->cfg.source_scan_type == KVZ_INTERLACING_NONE) {

	mov	rax, QWORD PTR [rcx]
	mov	r13, r9
	mov	r12, r8
	mov	rbp, rdx
	mov	r14, rcx
	cmp	BYTE PTR [rax+88], 0
	jne	SHORT $LN4@kvazaar_fi

; 398  : }

	add	rsp, 104				; 00000068H
	pop	r14
	pop	r13
	pop	r12
	pop	rbp

; 326  :     // For progressive, simply call the normal encoding function.
; 327  :     return kvazaar_encode(enc, pic_in, data_out, len_out, pic_out, src_out, info_out);

	jmp	kvazaar_encode
$LN4@kvazaar_fi:

; 328  :   }
; 329  : 
; 330  :   // For interlaced, make two fields out of the input frame and call encode on them separately.
; 331  :   encoder_state_t *state = &enc->states[enc->cur_state_num];

	mov	eax, DWORD PTR [rcx+20]
	mov	QWORD PTR [rsp+144], rbx
	mov	QWORD PTR [rsp+152], rsi
	mov	QWORD PTR [rsp+160], rdi
	mov	QWORD PTR [rsp+96], r15
	imul	r15, rax, 424				; 000001a8H

; 332  :   kvz_picture *first_field = NULL, *second_field = NULL;

	xor	eax, eax
	add	r15, QWORD PTR [rcx+8]
	mov	edi, eax

; 333  :   struct {
; 334  :     kvz_data_chunk* data_out;
; 335  :     uint32_t len_out;
; 336  :   } first = { 0, 0 }, second = { 0, 0 };

	mov	QWORD PTR first$[rsp], rax
	mov	ebx, eax
	mov	DWORD PTR first$[rsp+8], eax
	mov	QWORD PTR second$[rsp], rax

; 337  : 
; 338  :   if (pic_in != NULL) {

	lea	esi, QWORD PTR [rax-1]
	mov	DWORD PTR second$[rsp+8], eax
	test	rbp, rbp
	je	$LN5@kvazaar_fi

; 339  :     first_field = kvz_image_alloc(state->encoder_control->chroma_format, state->encoder_control->in.width, state->encoder_control->in.height);

	mov	rax, QWORD PTR [r15]
	mov	r8d, DWORD PTR [rax+2532]
	mov	edx, DWORD PTR [rax+2528]
	mov	ecx, DWORD PTR [rax+2596]
	call	kvz_image_alloc
	mov	rdi, rax

; 340  :     if (first_field == NULL) {

	test	rax, rax
	je	$LN63@kvazaar_fi

; 341  :       goto kvazaar_field_encoding_adapter_failure;
; 342  :     }
; 343  :     second_field = kvz_image_alloc(state->encoder_control->chroma_format, state->encoder_control->in.width, state->encoder_control->in.height);

	mov	rcx, QWORD PTR [r15]
	mov	r8d, DWORD PTR [rcx+2532]
	mov	edx, DWORD PTR [rcx+2528]
	mov	ecx, DWORD PTR [rcx+2596]
	call	kvz_image_alloc
	mov	rbx, rax

; 344  :     if (second_field == NULL) {

	test	rax, rax
	je	$LN64@kvazaar_fi

; 345  :       goto kvazaar_field_encoding_adapter_failure;
; 346  :     }
; 347  : 
; 348  :     yuv_io_extract_field(pic_in, pic_in->interlacing, 0, first_field);

	mov	edx, DWORD PTR [rbp+112]
	mov	r9, rdi
	xor	r8d, r8d
	mov	rcx, rbp
	call	yuv_io_extract_field

; 349  :     yuv_io_extract_field(pic_in, pic_in->interlacing, 1, second_field);

	mov	edx, DWORD PTR [rbp+112]
	lea	r8d, QWORD PTR [rsi+2]
	mov	r9, rbx
	mov	rcx, rbp
	call	yuv_io_extract_field

; 350  :     
; 351  :     first_field->pts = pic_in->pts;

	mov	rax, QWORD PTR [rbp+96]
	mov	QWORD PTR [rdi+96], rax

; 352  :     first_field->dts = pic_in->dts;

	mov	rax, QWORD PTR [rbp+104]
	mov	QWORD PTR [rdi+104], rax

; 353  :     first_field->interlacing = pic_in->interlacing;

	mov	eax, DWORD PTR [rbp+112]
	mov	DWORD PTR [rdi+112], eax

; 354  : 
; 355  :     // Should the second field have higher pts and dts? It shouldn't affect anything.
; 356  :     second_field->pts = pic_in->pts;

	mov	rax, QWORD PTR [rbp+96]
	mov	QWORD PTR [rbx+96], rax

; 357  :     second_field->dts = pic_in->dts;

	mov	rax, QWORD PTR [rbp+104]
	mov	QWORD PTR [rbx+104], rax

; 358  :     second_field->interlacing = pic_in->interlacing;

	mov	eax, DWORD PTR [rbp+112]
	mov	DWORD PTR [rbx+112], eax
$LN5@kvazaar_fi:

; 359  :   }
; 360  : 
; 361  :   if (!kvazaar_encode(enc, first_field, &first.data_out, &first.len_out, pic_out, NULL, info_out)) {

	mov	rax, QWORD PTR info_out$[rsp]
	lea	r9, QWORD PTR first$[rsp+8]
	mov	QWORD PTR [rsp+48], rax
	lea	r8, QWORD PTR first$[rsp]
	mov	rax, QWORD PTR pic_out$[rsp]
	xor	ebp, ebp
	mov	QWORD PTR [rsp+40], rbp
	mov	rdx, rdi
	mov	rcx, r14
	mov	QWORD PTR [rsp+32], rax
	call	kvazaar_encode
	test	eax, eax
	je	$kvazaar_field_encoding_adapter_failure$70

; 362  :     goto kvazaar_field_encoding_adapter_failure;
; 363  :   }
; 364  :   if (!kvazaar_encode(enc, second_field, &second.data_out, &second.len_out, NULL, NULL, NULL)) {

	mov	QWORD PTR [rsp+48], rbp
	lea	r9, QWORD PTR second$[rsp+8]
	mov	QWORD PTR [rsp+40], rbp
	lea	r8, QWORD PTR second$[rsp]
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], rbp
	mov	rcx, r14
	call	kvazaar_encode
	test	eax, eax
	je	SHORT $kvazaar_field_encoding_adapter_failure$70

; 365  :     goto kvazaar_field_encoding_adapter_failure;
; 366  :   }
; 367  : 
; 368  :   kvz_image_free(first_field);

	mov	rcx, rdi
	call	kvz_image_free

; 369  :   kvz_image_free(second_field);

	mov	rcx, rbx
	call	kvz_image_free

; 370  : 
; 371  :   // Concatenate bitstreams.
; 372  :   if (len_out != NULL) {

	test	r13, r13
	je	SHORT $LN10@kvazaar_fi

; 373  :     *len_out = first.len_out + second.len_out;

	mov	ecx, DWORD PTR first$[rsp+8]
	add	ecx, DWORD PTR second$[rsp+8]
	mov	DWORD PTR [r13], ecx
$LN10@kvazaar_fi:

; 374  :   }
; 375  :   if (data_out != NULL) {

	test	r12, r12
	je	SHORT $LN12@kvazaar_fi

; 376  :     *data_out = first.data_out;

	mov	rax, QWORD PTR first$[rsp]
	mov	QWORD PTR [r12], rax

; 377  :     if (first.data_out != NULL) {

	test	rax, rax
	je	SHORT $LN12@kvazaar_fi

; 378  :       kvz_data_chunk *chunk = first.data_out;
; 379  :       while (chunk->next != NULL) {

	mov	rcx, QWORD PTR [rax+4104]
	test	rcx, rcx
	je	SHORT $LN3@kvazaar_fi
	npad	13
$LL2@kvazaar_fi:

; 380  :         chunk = chunk->next;

	mov	rax, rcx
	mov	rcx, QWORD PTR [rcx+4104]
	test	rcx, rcx
	jne	SHORT $LL2@kvazaar_fi
$LN3@kvazaar_fi:

; 381  :       }
; 382  :       chunk->next = second.data_out;

	mov	rcx, QWORD PTR second$[rsp]
	mov	QWORD PTR [rax+4104], rcx
$LN12@kvazaar_fi:

; 383  :     }
; 384  :   }
; 385  : 
; 386  :   if (src_out != NULL) {
; 387  :     // TODO: deinterlace the fields to one picture.
; 388  :   }
; 389  : 
; 390  :   return 1;

	mov	eax, 1
	jmp	$LN68@kvazaar_fi
$kvazaar_field_encoding_adapter_failure$70:
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 116  :   if (im == NULL) return;

	test	rdi, rdi
	je	SHORT $LN61@kvazaar_fi
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 344  :     if (second_field == NULL) {

	jmp	SHORT $LN59@kvazaar_fi
$LN64@kvazaar_fi:
	xor	ebp, ebp
$LN59@kvazaar_fi:
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	eax, esi
	lock xadd DWORD PTR [rdi+88], eax
	sub	eax, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN61@kvazaar_fi

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rdi+80]
	cmp	rcx, rdi
	je	SHORT $LN18@kvazaar_fi

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN19@kvazaar_fi
$LN18@kvazaar_fi:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rdi]
	call	QWORD PTR __imp_free
$LN19@kvazaar_fi:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;
; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rdi
	mov	QWORD PTR [rdi+80], rbp
	mov	QWORD PTR [rdi], rbp
	mov	QWORD PTR [rdi+8], rbp
	mov	QWORD PTR [rdi+32], rbp
	mov	QWORD PTR [rdi+24], rbp
	mov	QWORD PTR [rdi+16], rbp
	mov	QWORD PTR [rdi+56], rbp
	mov	QWORD PTR [rdi+48], rbp
	mov	QWORD PTR [rdi+40], rbp
	call	QWORD PTR __imp_free
$LN61@kvazaar_fi:

; 116  :   if (im == NULL) return;

	test	rbx, rbx
	je	SHORT $LN63@kvazaar_fi

; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	lock xadd DWORD PTR [rbx+88], esi
	sub	esi, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN63@kvazaar_fi

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rbx+80]
	cmp	rcx, rbx
	je	SHORT $LN30@kvazaar_fi

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN31@kvazaar_fi
$LN30@kvazaar_fi:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rbx]
	call	QWORD PTR __imp_free
$LN31@kvazaar_fi:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;
; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+80], rbp
	mov	QWORD PTR [rbx], rbp
	mov	QWORD PTR [rbx+8], rbp
	mov	QWORD PTR [rbx+32], rbp
	mov	QWORD PTR [rbx+24], rbp
	mov	QWORD PTR [rbx+16], rbp
	mov	QWORD PTR [rbx+56], rbp
	mov	QWORD PTR [rbx+48], rbp
	mov	QWORD PTR [rbx+40], rbp
	call	QWORD PTR __imp_free
$LN63@kvazaar_fi:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 395  :   kvz_bitstream_free_chunks(first.data_out);

	mov	rcx, QWORD PTR first$[rsp]
	test	rcx, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 113  :   while (chunk != NULL) {

	je	SHORT $LN41@kvazaar_fi
	npad	3
$LL40@kvazaar_fi:

; 114  :     kvz_data_chunk *next = chunk->next;

	mov	rbx, QWORD PTR [rcx+4104]

; 115  :     free(chunk);

	call	QWORD PTR __imp_free

; 116  :     chunk = next;

	mov	rcx, rbx
	test	rbx, rbx
	jne	SHORT $LL40@kvazaar_fi
$LN41@kvazaar_fi:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 396  :   kvz_bitstream_free_chunks(second.data_out);

	mov	rcx, QWORD PTR second$[rsp]
	test	rcx, rcx
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 113  :   while (chunk != NULL) {

	je	SHORT $LN45@kvazaar_fi
	npad	1
$LL44@kvazaar_fi:

; 114  :     kvz_data_chunk *next = chunk->next;

	mov	rbx, QWORD PTR [rcx+4104]

; 115  :     free(chunk);

	call	QWORD PTR __imp_free

; 116  :     chunk = next;

	mov	rcx, rbx
	test	rbx, rbx
	jne	SHORT $LL44@kvazaar_fi
$LN45@kvazaar_fi:
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c

; 397  :   return 0;

	xor	eax, eax
$LN68@kvazaar_fi:
	mov	rdi, QWORD PTR [rsp+160]
	mov	rsi, QWORD PTR [rsp+152]
	mov	rbx, QWORD PTR [rsp+144]
	mov	r15, QWORD PTR [rsp+96]

; 398  : }

	add	rsp, 104				; 00000068H
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
kvazaar_field_encoding_adapter ENDP
_TEXT	ENDS
END
