; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294950954
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294950953
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294950952
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294950951
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294950950
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294950949
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294950948
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294950947
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294950946
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294950945
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294950944
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294950943
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294950942
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294950941
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294950940
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294950939
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294950938
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294950937
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294950936
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294950935
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294950934
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294950933
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294950932
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294950931
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294950930
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294950929
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294950928
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294950927
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294950926
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294950925
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294950924
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294950923
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294950922
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294950921
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294950920
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294950919
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294950918
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294950917
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294950916
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294950915
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294950914
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294950913
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294950912
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294950911
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294950910
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294950909
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294950908
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294950907
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294950906
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294950905
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294950904
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294950903
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294950902
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294950901
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294950900
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294950899
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294950898
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294950897
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294950896
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294950895
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294950894
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294950893
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294950892
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294950904 DB 'quant', 00H
	ORG $+7
$SG4294950911 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294950910 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294950909 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294950908 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294950907 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294950906 DB 'sample_octpel_chroma_hi', 00H
$SG4294950905 DB 'get_extended_block', 00H
	ORG $+5
$SG4294950903 DB 'quantize_residual', 00H
	ORG $+6
$SG4294950902 DB 'dequant', 00H
$SG4294950901 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294950900 DB 'fast_coeff_cost', 00H
$SG4294950899 DB 'angular_pred', 00H
	ORG $+3
$SG4294950898 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294950897 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294950896 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294950895 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294950894 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294950893 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294950892 DB 'encode_coeff_nxn', 00H
	ORG $+7
$SG4294950954 DB 'array_checksum', 00H
	ORG $+1
$SG4294950953 DB 'array_md5', 00H
	ORG $+6
$SG4294950952 DB 'reg_sad', 00H
$SG4294950951 DB 'sad_4x4', 00H
$SG4294950950 DB 'sad_8x8', 00H
$SG4294950949 DB 'sad_16x16', 00H
	ORG $+6
$SG4294950948 DB 'sad_32x32', 00H
	ORG $+6
$SG4294950947 DB 'sad_64x64', 00H
	ORG $+6
$SG4294950946 DB 'satd_4x4', 00H
	ORG $+7
$SG4294950945 DB 'satd_8x8', 00H
	ORG $+7
$SG4294950944 DB 'satd_16x16', 00H
	ORG $+5
$SG4294950943 DB 'satd_32x32', 00H
	ORG $+5
$SG4294950942 DB 'satd_64x64', 00H
	ORG $+5
$SG4294950941 DB 'satd_any_size', 00H
	ORG $+2
$SG4294950940 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294950939 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294950938 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294950937 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294950936 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294950935 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294950934 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294950933 DB 'satd_16x16_dual', 00H
$SG4294950932 DB 'satd_32x32_dual', 00H
$SG4294950931 DB 'satd_64x64_dual', 00H
$SG4294950930 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294950929 DB 'pixels_calc_ssd', 00H
$SG4294950928 DB 'bipred_average', 00H
	ORG $+1
$SG4294950927 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294950926 DB 'ver_sad', 00H
$SG4294950925 DB 'hor_sad', 00H
$SG4294950924 DB 'pixel_var', 00H
	ORG $+6
$SG4294950923 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294950922 DB 'dct_4x4', 00H
$SG4294950921 DB 'dct_8x8', 00H
$SG4294950920 DB 'dct_16x16', 00H
	ORG $+6
$SG4294950919 DB 'dct_32x32', 00H
	ORG $+6
$SG4294950918 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294950917 DB 'idct_4x4', 00H
	ORG $+7
$SG4294950916 DB 'idct_8x8', 00H
	ORG $+7
$SG4294950915 DB 'idct_16x16', 00H
	ORG $+5
$SG4294950914 DB 'idct_32x32', 00H
	ORG $+5
$SG4294950913 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294950912 DB 'filter_hpel_blocks_diag_luma', 00H
PUBLIC	kvz_fast_clip_16bit_to_pixel
PUBLIC	kvz_satd_4x4_subblock_generic
PUBLIC	kvz_satd_4x4_subblock_quad_generic
PUBLIC	kvz_fast_clip_32bit_to_pixel
PUBLIC	kvz_strategy_register_picture_generic
pdata	SEGMENT
$pdata$pixel_var_generic DD imagerel pixel_var_generic
	DD	imagerel pixel_var_generic+283
	DD	imagerel $unwind$pixel_var_generic
$pdata$0$pixel_var_generic DD imagerel pixel_var_generic+283
	DD	imagerel pixel_var_generic+407
	DD	imagerel $chain$0$pixel_var_generic
$pdata$1$pixel_var_generic DD imagerel pixel_var_generic+407
	DD	imagerel pixel_var_generic+625
	DD	imagerel $chain$1$pixel_var_generic
$pdata$hor_sad_generic DD imagerel hor_sad_generic
	DD	imagerel hor_sad_generic+71
	DD	imagerel $unwind$hor_sad_generic
$pdata$0$hor_sad_generic DD imagerel hor_sad_generic+71
	DD	imagerel hor_sad_generic+144
	DD	imagerel $chain$0$hor_sad_generic
$pdata$1$hor_sad_generic DD imagerel hor_sad_generic+144
	DD	imagerel hor_sad_generic+273
	DD	imagerel $chain$1$hor_sad_generic
$pdata$hor_sad DD imagerel hor_sad
	DD	imagerel hor_sad+49
	DD	imagerel $unwind$hor_sad
$pdata$3$hor_sad DD imagerel hor_sad+49
	DD	imagerel hor_sad+425
	DD	imagerel $chain$3$hor_sad
$pdata$4$hor_sad DD imagerel hor_sad+425
	DD	imagerel hor_sad+440
	DD	imagerel $chain$4$hor_sad
$pdata$ver_sad_generic DD imagerel ver_sad_generic
	DD	imagerel ver_sad_generic+39
	DD	imagerel $unwind$ver_sad_generic
$pdata$2$ver_sad_generic DD imagerel ver_sad_generic+39
	DD	imagerel ver_sad_generic+375
	DD	imagerel $chain$2$ver_sad_generic
$pdata$3$ver_sad_generic DD imagerel ver_sad_generic+375
	DD	imagerel ver_sad_generic+386
	DD	imagerel $chain$3$ver_sad_generic
$pdata$bipred_average_generic DD imagerel bipred_average_generic
	DD	imagerel bipred_average_generic+647
	DD	imagerel $unwind$bipred_average_generic
$pdata$bipred_average_px_im DD imagerel bipred_average_px_im
	DD	imagerel bipred_average_px_im+147
	DD	imagerel $unwind$bipred_average_px_im
$pdata$bipred_average_im_im DD imagerel bipred_average_im_im
	DD	imagerel bipred_average_im_im+144
	DD	imagerel $unwind$bipred_average_im_im
$pdata$bipred_average_px_px DD imagerel bipred_average_px_px
	DD	imagerel bipred_average_px_px+150
	DD	imagerel $unwind$bipred_average_px_px
$pdata$pixels_calc_ssd_generic DD imagerel pixels_calc_ssd_generic
	DD	imagerel pixels_calc_ssd_generic+34
	DD	imagerel $unwind$pixels_calc_ssd_generic
$pdata$3$pixels_calc_ssd_generic DD imagerel pixels_calc_ssd_generic+34
	DD	imagerel pixels_calc_ssd_generic+496
	DD	imagerel $chain$3$pixels_calc_ssd_generic
$pdata$4$pixels_calc_ssd_generic DD imagerel pixels_calc_ssd_generic+496
	DD	imagerel pixels_calc_ssd_generic+510
	DD	imagerel $chain$4$pixels_calc_ssd_generic
$pdata$satd_any_size_quad_generic DD imagerel satd_any_size_quad_generic
	DD	imagerel satd_any_size_quad_generic+532
	DD	imagerel $unwind$satd_any_size_quad_generic
$pdata$1$satd_any_size_quad_generic DD imagerel satd_any_size_quad_generic+532
	DD	imagerel satd_any_size_quad_generic+993
	DD	imagerel $chain$1$satd_any_size_quad_generic
$pdata$2$satd_any_size_quad_generic DD imagerel satd_any_size_quad_generic+993
	DD	imagerel satd_any_size_quad_generic+1023
	DD	imagerel $chain$2$satd_any_size_quad_generic
$pdata$satd_64x64_dual_generic DD imagerel satd_64x64_dual_generic
	DD	imagerel satd_64x64_dual_generic+230
	DD	imagerel $unwind$satd_64x64_dual_generic
$pdata$satd_32x32_dual_generic DD imagerel satd_32x32_dual_generic
	DD	imagerel satd_32x32_dual_generic+230
	DD	imagerel $unwind$satd_32x32_dual_generic
$pdata$satd_16x16_dual_generic DD imagerel satd_16x16_dual_generic
	DD	imagerel satd_16x16_dual_generic+230
	DD	imagerel $unwind$satd_16x16_dual_generic
$pdata$satd_8x8_dual_generic DD imagerel satd_8x8_dual_generic
	DD	imagerel satd_8x8_dual_generic+86
	DD	imagerel $unwind$satd_8x8_dual_generic
$pdata$satd_4x4_dual_generic DD imagerel satd_4x4_dual_generic
	DD	imagerel satd_4x4_dual_generic+546
	DD	imagerel $unwind$satd_4x4_dual_generic
$pdata$satd_any_size_generic DD imagerel satd_any_size_generic
	DD	imagerel satd_any_size_generic+821
	DD	imagerel $unwind$satd_any_size_generic
$pdata$satd_64x64_generic DD imagerel satd_64x64_generic
	DD	imagerel satd_64x64_generic+134
	DD	imagerel $unwind$satd_64x64_generic
$pdata$satd_32x32_generic DD imagerel satd_32x32_generic
	DD	imagerel satd_32x32_generic+134
	DD	imagerel $unwind$satd_32x32_generic
$pdata$satd_16x16_generic DD imagerel satd_16x16_generic
	DD	imagerel satd_16x16_generic+118
	DD	imagerel $unwind$satd_16x16_generic
$pdata$satd_8x8_subblock_quad_generic DD imagerel satd_8x8_subblock_quad_generic
	DD	imagerel satd_8x8_subblock_quad_generic+147
	DD	imagerel $unwind$satd_8x8_subblock_quad_generic
$pdata$satd_8x8_subblock_generic DD imagerel satd_8x8_subblock_generic
	DD	imagerel satd_8x8_subblock_generic+828
	DD	imagerel $unwind$satd_8x8_subblock_generic
$pdata$satd_4x4_generic DD imagerel satd_4x4_generic
	DD	imagerel satd_4x4_generic+164
	DD	imagerel $unwind$satd_4x4_generic
$pdata$hadamard_4x4_generic DD imagerel hadamard_4x4_generic
	DD	imagerel hadamard_4x4_generic+666
	DD	imagerel $unwind$hadamard_4x4_generic
$pdata$reg_sad_generic DD imagerel reg_sad_generic
	DD	imagerel reg_sad_generic+45
	DD	imagerel $unwind$reg_sad_generic
$pdata$4$reg_sad_generic DD imagerel reg_sad_generic+45
	DD	imagerel reg_sad_generic+426
	DD	imagerel $chain$4$reg_sad_generic
$pdata$5$reg_sad_generic DD imagerel reg_sad_generic+426
	DD	imagerel reg_sad_generic+438
	DD	imagerel $chain$5$reg_sad_generic
$pdata$kvz_satd_4x4_subblock_generic DD imagerel $LN21
	DD	imagerel $LN21+122
	DD	imagerel $unwind$kvz_satd_4x4_subblock_generic
$pdata$kvz_satd_4x4_subblock_quad_generic DD imagerel $LN21
	DD	imagerel $LN21+438
	DD	imagerel $unwind$kvz_satd_4x4_subblock_quad_generic
$pdata$kvz_strategy_register_picture_generic DD imagerel $LN4
	DD	imagerel $LN4+1251
	DD	imagerel $unwind$kvz_strategy_register_picture_generic
xdata	SEGMENT
$unwind$pixel_var_generic DD 020601H
	DD	030021206H
$chain$0$pixel_var_generic DD 020421H
	DD	06804H
	DD	imagerel pixel_var_generic
	DD	imagerel pixel_var_generic+283
	DD	imagerel $unwind$pixel_var_generic
$chain$1$pixel_var_generic DD 021H
	DD	imagerel pixel_var_generic
	DD	imagerel pixel_var_generic+283
	DD	imagerel $unwind$pixel_var_generic
$unwind$hor_sad_generic DD 081901H
	DD	0f0155219H
	DD	0c011d013H
	DD	0600e700fH
	DD	0300c500dH
$chain$0$hor_sad_generic DD 020421H
	DD	010e404H
	DD	imagerel hor_sad_generic
	DD	imagerel hor_sad_generic+71
	DD	imagerel $unwind$hor_sad_generic
$chain$1$hor_sad_generic DD 021H
	DD	imagerel hor_sad_generic
	DD	imagerel hor_sad_generic+71
	DD	imagerel $unwind$hor_sad_generic
$unwind$hor_sad DD 051001H
	DD	0e00c0210H
	DD	0c008d00aH
	DD	05006H
$chain$3$hor_sad DD 081921H
	DD	0f419H
	DD	087415H
	DD	07640dH
	DD	063405H
	DD	imagerel hor_sad
	DD	imagerel hor_sad+49
	DD	imagerel $unwind$hor_sad
$chain$4$hor_sad DD 021H
	DD	imagerel hor_sad
	DD	imagerel hor_sad+49
	DD	imagerel $unwind$hor_sad
$unwind$ver_sad_generic DD 050c01H
	DD	0c00ae00cH
	DD	060077008H
	DD	05006H
$chain$2$ver_sad_generic DD 061521H
	DD	08f415H
	DD	07d40dH
	DD	063405H
	DD	imagerel ver_sad_generic
	DD	imagerel ver_sad_generic+39
	DD	imagerel $unwind$ver_sad_generic
$chain$3$ver_sad_generic DD 021H
	DD	imagerel ver_sad_generic
	DD	imagerel ver_sad_generic+39
	DD	imagerel $unwind$ver_sad_generic
$unwind$bipred_average_generic DD 0c2101H
	DD	0f6421H
	DD	0e5421H
	DD	0d3421H
	DD	0f01d5221H
	DD	0d019e01bH
	DD	07015c017H
$unwind$bipred_average_px_im DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
$unwind$bipred_average_im_im DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
$unwind$bipred_average_px_px DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
$unwind$pixels_calc_ssd_generic DD 050c01H
	DD	0f008420cH
	DD	0c004d006H
	DD	06002H
$chain$3$pixels_calc_ssd_generic DD 082a21H
	DD	04e42aH
	DD	0c7418H
	DD	0b5413H
	DD	0a3405H
	DD	imagerel pixels_calc_ssd_generic
	DD	imagerel pixels_calc_ssd_generic+34
	DD	imagerel $unwind$pixels_calc_ssd_generic
$chain$4$pixels_calc_ssd_generic DD 021H
	DD	imagerel pixels_calc_ssd_generic
	DD	imagerel pixels_calc_ssd_generic+34
	DD	imagerel $unwind$pixels_calc_ssd_generic
$unwind$satd_any_size_quad_generic DD 0c9901H
	DD	0193499H
	DD	07682cH
	DD	0110119H
	DD	0d010f012H
	DD	0700cc00eH
	DD	0500a600bH
$chain$1$satd_any_size_quad_generic DD 020821H
	DD	010e408H
	DD	imagerel satd_any_size_quad_generic
	DD	imagerel satd_any_size_quad_generic+532
	DD	imagerel $unwind$satd_any_size_quad_generic
$chain$2$satd_any_size_quad_generic DD 021H
	DD	imagerel satd_any_size_quad_generic
	DD	imagerel satd_any_size_quad_generic+532
	DD	imagerel $unwind$satd_any_size_quad_generic
$unwind$satd_64x64_dual_generic DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
$unwind$satd_32x32_dual_generic DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
$unwind$satd_16x16_dual_generic DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
$unwind$satd_8x8_dual_generic DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$satd_4x4_dual_generic DD 081701H
	DD	0107417H
	DD	0f6417H
	DD	0e3417H
	DD	05010b217H
$unwind$satd_any_size_generic DD 0e5f01H
	DD	010f45fH
	DD	011c457H
	DD	012644fH
	DD	01a3447H
	DD	013011aH
	DD	0d011e013H
	DD	0500e700fH
$unwind$satd_64x64_generic DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
$unwind$satd_32x32_generic DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
$unwind$satd_16x16_generic DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
$unwind$satd_8x8_subblock_quad_generic DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
$unwind$satd_8x8_subblock_generic DD 0d2701H
	DD	06a7427H
	DD	0696427H
	DD	0683427H
	DD	0620127H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
$unwind$satd_4x4_generic DD 010401H
	DD	0e204H
$unwind$hadamard_4x4_generic DD 0b2801H
	DD	056828H
	DD	0f00dc214H
	DD	0d009e00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
$unwind$reg_sad_generic DD 040e01H
	DD	0f00a120eH
	DD	05006c008H
$chain$4$reg_sad_generic DD 0a1e21H
	DD	0e41eH
	DD	01d41aH
	DD	087415H
	DD	07640dH
	DD	063405H
	DD	imagerel reg_sad_generic
	DD	imagerel reg_sad_generic+45
	DD	imagerel $unwind$reg_sad_generic
$chain$5$reg_sad_generic DD 021H
	DD	imagerel reg_sad_generic
	DD	imagerel reg_sad_generic+45
	DD	imagerel $unwind$reg_sad_generic
$unwind$kvz_satd_4x4_subblock_generic DD 020601H
	DD	03002b206H
$unwind$kvz_satd_4x4_subblock_quad_generic DD 0d1f01H
	DD	02e641fH
	DD	02d541fH
	DD	02c341fH
	DD	026011fH
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
$unwind$kvz_strategy_register_picture_generic DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
	ORG $+2
$SG4294950835 DB 'generic', 00H
	ORG $+2
$SG4294950836 DB 'hor_sad', 00H
	ORG $+2
$SG4294950837 DB 'generic', 00H
	ORG $+2
$SG4294950838 DB 'ver_sad', 00H
	ORG $+2
$SG4294950839 DB 'generic', 00H
	ORG $+2
$SG4294950840 DB 'get_optimized_sad', 00H
	ORG $+2
$SG4294950841 DB 'generic', 00H
	ORG $+2
$SG4294950842 DB 'bipred_average', 00H
	ORG $+1
$SG4294950843 DB 'generic', 00H
	ORG $+2
$SG4294950844 DB 'pixels_calc_ssd', 00H
$SG4294950845 DB 'generic', 00H
	ORG $+2
$SG4294950846 DB 'satd_any_size_quad', 00H
	ORG $+2
$SG4294950847 DB 'generic', 00H
	ORG $+2
$SG4294950849 DB 'generic', 00H
	ORG $+2
$SG4294950850 DB 'satd_64x64_dual', 00H
$SG4294950851 DB 'generic', 00H
	ORG $+2
$SG4294950852 DB 'satd_32x32_dual', 00H
$SG4294950853 DB 'generic', 00H
	ORG $+2
$SG4294950854 DB 'satd_16x16_dual', 00H
$SG4294950855 DB 'generic', 00H
	ORG $+2
$SG4294950857 DB 'generic', 00H
	ORG $+2
$SG4294950859 DB 'generic', 00H
	ORG $+2
$SG4294950834 DB 'pixel_var', 00H
	ORG $+6
$SG4294950848 DB 'satd_any_size', 00H
	ORG $+2
$SG4294950856 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294950858 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294950860 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294950861 DB 'generic', 00H
$SG4294950862 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294950863 DB 'generic', 00H
$SG4294950864 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294950865 DB 'generic', 00H
$SG4294950866 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294950867 DB 'generic', 00H
$SG4294950868 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294950869 DB 'generic', 00H
$SG4294950870 DB 'satd_64x64', 00H
	ORG $+5
$SG4294950871 DB 'generic', 00H
$SG4294950872 DB 'satd_32x32', 00H
	ORG $+5
$SG4294950873 DB 'generic', 00H
$SG4294950874 DB 'satd_16x16', 00H
	ORG $+5
$SG4294950875 DB 'generic', 00H
$SG4294950876 DB 'satd_8x8', 00H
	ORG $+7
$SG4294950877 DB 'generic', 00H
$SG4294950878 DB 'satd_4x4', 00H
	ORG $+7
$SG4294950879 DB 'generic', 00H
$SG4294950880 DB 'sad_64x64', 00H
	ORG $+6
$SG4294950881 DB 'generic', 00H
$SG4294950882 DB 'sad_32x32', 00H
	ORG $+6
$SG4294950883 DB 'generic', 00H
$SG4294950884 DB 'sad_16x16', 00H
	ORG $+6
$SG4294950885 DB 'generic', 00H
$SG4294950886 DB 'sad_8x8', 00H
$SG4294950887 DB 'generic', 00H
$SG4294950888 DB 'sad_4x4', 00H
$SG4294950889 DB 'generic', 00H
$SG4294950890 DB 'reg_sad', 00H
$SG4294950891 DB 'generic', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_picture_generic PROC

; 778  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 779  :   bool success = true;
; 780  : 
; 781  :   success &= kvz_strategyselector_register(opaque, "reg_sad", "generic", 0, &reg_sad_generic);

	lea	rax, OFFSET FLAT:reg_sad_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294950891
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294950890
	mov	rbp, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 782  : 
; 783  :   success &= kvz_strategyselector_register(opaque, "sad_4x4", "generic", 0, &sad_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294950889
	lea	rax, OFFSET FLAT:sad_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950888
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	edi, eax

; 784  :   success &= kvz_strategyselector_register(opaque, "sad_8x8", "generic", 0, &sad_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294950887
	lea	rax, OFFSET FLAT:sad_8x8_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294950886
	mov	rcx, rbp
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 785  :   success &= kvz_strategyselector_register(opaque, "sad_16x16", "generic", 0, &sad_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294950885
	lea	rax, OFFSET FLAT:sad_16x16_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950884
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 786  :   success &= kvz_strategyselector_register(opaque, "sad_32x32", "generic", 0, &sad_32x32_generic);

	lea	r8, OFFSET FLAT:$SG4294950883
	lea	rax, OFFSET FLAT:sad_32x32_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950882
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 787  :   success &= kvz_strategyselector_register(opaque, "sad_64x64", "generic", 0, &sad_64x64_generic);

	lea	r8, OFFSET FLAT:$SG4294950881
	lea	rax, OFFSET FLAT:sad_64x64_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950880
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 788  : 
; 789  :   success &= kvz_strategyselector_register(opaque, "satd_4x4", "generic", 0, &satd_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294950879
	lea	rax, OFFSET FLAT:satd_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950878
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 790  :   success &= kvz_strategyselector_register(opaque, "satd_8x8", "generic", 0, &satd_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294950877
	lea	rax, OFFSET FLAT:satd_8x8_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950876
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 791  :   success &= kvz_strategyselector_register(opaque, "satd_16x16", "generic", 0, &satd_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294950875
	lea	rax, OFFSET FLAT:satd_16x16_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950874
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax
	and	ebx, edi

; 792  :   success &= kvz_strategyselector_register(opaque, "satd_32x32", "generic", 0, &satd_32x32_generic);

	lea	rax, OFFSET FLAT:satd_32x32_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294950873
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294950872
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	edi, eax

; 793  :   success &= kvz_strategyselector_register(opaque, "satd_64x64", "generic", 0, &satd_64x64_generic);

	lea	r8, OFFSET FLAT:$SG4294950871
	xor	esi, esi
	lea	rax, OFFSET FLAT:satd_64x64_generic
	mov	ecx, esi
	mov	QWORD PTR [rsp+32], rax
	test	ebx, ebx
	lea	rdx, OFFSET FLAT:$SG4294950870
	setne	cl
	xor	r9d, r9d
	and	edi, ecx
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	ebx, eax

; 794  : 
; 795  :   success &= kvz_strategyselector_register(opaque, "sad_4x4_dual", "generic", 0, &sad_4x4_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950869
	lea	rax, OFFSET FLAT:sad_4x4_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950868
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 796  :   success &= kvz_strategyselector_register(opaque, "sad_8x8_dual", "generic", 0, &sad_8x8_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950867
	lea	rax, OFFSET FLAT:sad_8x8_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950866
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 797  :   success &= kvz_strategyselector_register(opaque, "sad_16x16_dual", "generic", 0, &sad_16x16_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950865
	lea	rax, OFFSET FLAT:sad_16x16_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950864
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 798  :   success &= kvz_strategyselector_register(opaque, "sad_32x32_dual", "generic", 0, &sad_32x32_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950863
	lea	rax, OFFSET FLAT:sad_32x32_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950862
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 799  :   success &= kvz_strategyselector_register(opaque, "sad_64x64_dual", "generic", 0, &sad_64x64_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950861
	lea	rax, OFFSET FLAT:sad_64x64_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950860
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 800  : 
; 801  :   success &= kvz_strategyselector_register(opaque, "satd_4x4_dual", "generic", 0, &satd_4x4_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950859
	lea	rax, OFFSET FLAT:satd_4x4_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950858
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 802  :   success &= kvz_strategyselector_register(opaque, "satd_8x8_dual", "generic", 0, &satd_8x8_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950857
	and	ebx, edi
	lea	rax, OFFSET FLAT:satd_8x8_dual_generic
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294950856
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	ecx, esi

; 803  :   success &= kvz_strategyselector_register(opaque, "satd_16x16_dual", "generic", 0, &satd_16x16_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950855
	mov	edi, eax
	lea	rdx, OFFSET FLAT:$SG4294950854
	lea	rax, OFFSET FLAT:satd_16x16_dual_generic
	test	ebx, ebx
	mov	QWORD PTR [rsp+32], rax
	setne	cl
	xor	r9d, r9d
	and	edi, ecx
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	ebx, eax

; 804  :   success &= kvz_strategyselector_register(opaque, "satd_32x32_dual", "generic", 0, &satd_32x32_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950853
	lea	rax, OFFSET FLAT:satd_32x32_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950852
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 805  :   success &= kvz_strategyselector_register(opaque, "satd_64x64_dual", "generic", 0, &satd_64x64_dual_generic);

	lea	r8, OFFSET FLAT:$SG4294950851
	lea	rax, OFFSET FLAT:satd_64x64_dual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950850
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 806  :   success &= kvz_strategyselector_register(opaque, "satd_any_size", "generic", 0, &satd_any_size_generic);

	lea	r8, OFFSET FLAT:$SG4294950849
	lea	rax, OFFSET FLAT:satd_any_size_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950848
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 807  :   success &= kvz_strategyselector_register(opaque, "satd_any_size_quad", "generic", 0, &satd_any_size_quad_generic);

	lea	r8, OFFSET FLAT:$SG4294950847
	lea	rax, OFFSET FLAT:satd_any_size_quad_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950846
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 808  : 
; 809  :   success &= kvz_strategyselector_register(opaque, "pixels_calc_ssd", "generic", 0, &pixels_calc_ssd_generic);

	lea	r8, OFFSET FLAT:$SG4294950845
	lea	rax, OFFSET FLAT:pixels_calc_ssd_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950844
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 810  :   success &= kvz_strategyselector_register(opaque, "bipred_average", "generic", 0, &bipred_average_generic);

	lea	r8, OFFSET FLAT:$SG4294950843
	lea	rax, OFFSET FLAT:bipred_average_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950842
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 811  : 
; 812  :   success &= kvz_strategyselector_register(opaque, "get_optimized_sad", "generic", 0, &get_optimized_sad_generic);

	lea	r8, OFFSET FLAT:$SG4294950841
	lea	rax, OFFSET FLAT:get_optimized_sad_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950840
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	test	ebx, ebx
	mov	edi, eax
	setne	sil
	and	edi, esi

; 813  :   success &= kvz_strategyselector_register(opaque, "ver_sad", "generic", 0, &ver_sad_generic);

	lea	rax, OFFSET FLAT:ver_sad_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294950839
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294950838
	mov	rcx, rbp
	call	kvz_strategyselector_register
	mov	ebx, eax

; 814  :   success &= kvz_strategyselector_register(opaque, "hor_sad", "generic", 0, &hor_sad_generic);

	lea	r8, OFFSET FLAT:$SG4294950837
	lea	rax, OFFSET FLAT:hor_sad_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950836
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 815  : 
; 816  :   success &= kvz_strategyselector_register(opaque, "pixel_var", "generic", 0, &pixel_var_generic);

	lea	r8, OFFSET FLAT:$SG4294950835
	lea	rax, OFFSET FLAT:pixel_var_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294950834
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rbp
	and	edi, ebx
	call	kvz_strategyselector_register

; 817  : 
; 818  :   return success;
; 819  : }

	mov	rbx, QWORD PTR [rsp+64]
	and	eax, edi
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_picture_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
value$ = 8
kvz_fast_clip_32bit_to_pixel PROC

; 66   :   // Ensure that compiler generates arithmetic shift from ">>" 
; 67   : #if defined(_MSC_VER) || defined(__GNUC__) || defined(__clang__)
; 68   : 
; 69   :   if (value & ~PIXEL_MAX) {

	test	ecx, -256				; ffffffffffffff00H
	je	SHORT $LN2@kvz_fast_c

; 70   :     int32_t temp = (-value) >> 31;

	neg	ecx
	sar	ecx, 31
$LN2@kvz_fast_c:

; 71   : #if KVZ_BIT_DEPTH == 10
; 72   :     temp &= PIXEL_MAX;
; 73   : #endif
; 74   :     return temp;
; 75   :   }
; 76   :   else {
; 77   :     return value;
; 78   :   }
; 79   : #else
; 80   :   return CLIP(PIXEL_MIN, PIXEL_MAX, value);
; 81   : #endif
; 82   : }

	movzx	eax, cl
	ret	0
kvz_fast_clip_32bit_to_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
tv3315 = 32
tv3312 = 40
diff$ = 48
preds$ = 352
stride$ = 360
orig$ = 368
orig_stride$ = 376
costs$ = 384
kvz_satd_4x4_subblock_quad_generic PROC

; 232  : {

$LN21:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 304				; 00000130H
	mov	r14, QWORD PTR [rcx]

; 237  :       diff[1][x + y * 4] = orig[x + y * orig_stride] - preds[1][x + y * stride];

	xor	r10d, r10d
	mov	r15, QWORD PTR [rcx+8]
	mov	r13, QWORD PTR [rcx+16]
	mov	r12, QWORD PTR [rcx+24]
	movsxd	rax, r9d
	lea	rbp, QWORD PTR [r14+2]
	mov	QWORD PTR tv3312[rsp], rax
	lea	rsi, QWORD PTR [r15+2]
	lea	rdi, QWORD PTR [r13+2]
	movsxd	r11, edx
	lea	rbx, QWORD PTR [r12+2]
	mov	QWORD PTR tv3315[rsp], 4
	lea	r9, QWORD PTR [r8+2]
	lea	rax, QWORD PTR diff$[rsp+68]
	npad	1
$LL4@kvz_satd_4:

; 233  :   int32_t diff[4][4 * 4];
; 234  :   for (int y = 0; y < 4; y++) {

	movzx	ecx, BYTE PTR [r10+r14]
	lea	rax, QWORD PTR [rax+16]

; 235  :     for (int x = 0; x < 4; x++) {
; 236  :       diff[0][x + y * 4] = orig[x + y * orig_stride] - preds[0][x + y * stride];

	movzx	r8d, BYTE PTR [r9-2]
	mov	edx, r8d
	sub	edx, ecx
	mov	DWORD PTR [rax-84], edx

; 237  :       diff[1][x + y * 4] = orig[x + y * orig_stride] - preds[1][x + y * stride];

	mov	edx, r8d
	movzx	ecx, BYTE PTR [r10+r15]
	sub	edx, ecx
	mov	DWORD PTR [rax-20], edx

; 238  :       diff[2][x + y * 4] = orig[x + y * orig_stride] - preds[2][x + y * stride];

	mov	edx, r8d
	movzx	ecx, BYTE PTR [r10+r13]
	sub	edx, ecx
	mov	DWORD PTR [rax+44], edx

; 239  :       diff[3][x + y * 4] = orig[x + y * orig_stride] - preds[3][x + y * stride];

	movzx	ecx, BYTE PTR [r10+r12]
	add	r10, r11
	sub	r8d, ecx
	mov	DWORD PTR [rax+108], r8d
	movzx	ecx, BYTE PTR [rbp-1]
	movzx	r8d, BYTE PTR [r9-1]
	mov	edx, r8d
	sub	edx, ecx
	mov	DWORD PTR [rax-80], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rsi-1]
	sub	edx, ecx
	mov	DWORD PTR [rax-16], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rdi-1]
	sub	edx, ecx
	mov	DWORD PTR [rax+48], edx
	movzx	ecx, BYTE PTR [rbx-1]
	sub	r8d, ecx
	mov	DWORD PTR [rax+112], r8d
	movzx	ecx, BYTE PTR [rbp]
	movzx	r8d, BYTE PTR [r9]
	mov	edx, r8d
	sub	edx, ecx
	mov	DWORD PTR [rax-76], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rsi]
	sub	edx, ecx
	mov	DWORD PTR [rax-12], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rdi]
	sub	edx, ecx
	mov	DWORD PTR [rax+52], edx
	movzx	ecx, BYTE PTR [rbx]
	sub	r8d, ecx
	mov	DWORD PTR [rax+116], r8d
	movzx	ecx, BYTE PTR [rbp+1]
	add	rbp, r11
	movzx	r8d, BYTE PTR [r9+1]
	add	r9, QWORD PTR tv3312[rsp]
	mov	edx, r8d
	sub	edx, ecx
	mov	DWORD PTR [rax-72], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rsi+1]
	add	rsi, r11
	sub	edx, ecx
	mov	DWORD PTR [rax-8], edx
	mov	edx, r8d
	movzx	ecx, BYTE PTR [rdi+1]
	add	rdi, r11
	sub	edx, ecx
	mov	DWORD PTR [rax+56], edx
	movzx	ecx, BYTE PTR [rbx+1]
	add	rbx, r11
	sub	r8d, ecx
	sub	QWORD PTR tv3315[rsp], 1
	mov	DWORD PTR [rax+120], r8d
	jne	$LL4@kvz_satd_4

; 240  :     }
; 241  :   }
; 242  : 
; 243  :   costs[0] = hadamard_4x4_generic(diff[0]);

	lea	rcx, QWORD PTR diff$[rsp]
	call	hadamard_4x4_generic
	mov	rbx, QWORD PTR costs$[rsp]

; 244  :   costs[1] = hadamard_4x4_generic(diff[1]);

	lea	rcx, QWORD PTR diff$[rsp+64]
	mov	DWORD PTR [rbx], eax
	call	hadamard_4x4_generic

; 245  :   costs[2] = hadamard_4x4_generic(diff[2]);

	lea	rcx, QWORD PTR diff$[rsp+128]
	mov	DWORD PTR [rbx+4], eax
	call	hadamard_4x4_generic

; 246  :   costs[3] = hadamard_4x4_generic(diff[3]);

	lea	rcx, QWORD PTR diff$[rsp+192]
	mov	DWORD PTR [rbx+8], eax
	call	hadamard_4x4_generic

; 247  : }

	lea	r11, QWORD PTR [rsp+304]
	mov	DWORD PTR [rbx+12], eax
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_satd_4x4_subblock_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
diff$ = 32
buf1$ = 112
stride1$ = 120
buf2$ = 128
stride2$ = 136
kvz_satd_4x4_subblock_generic PROC

; 217  : {

$LN21:
	push	rbx
	sub	rsp, 96					; 00000060H

; 218  :   int32_t diff[4 * 4];
; 219  :   for (int y = 0; y < 4; y++) {

	movsxd	rbx, r9d
	lea	rax, QWORD PTR [r8+2]
	lea	r9, QWORD PTR diff$[rsp+8]
	movsxd	r11, edx
	mov	r8d, 4
	lea	r10, QWORD PTR [rcx+2]
	npad	1
$LL4@kvz_satd_4:

; 220  :     for (int x = 0; x < 4; x++) {
; 221  :       diff[x + y * 4] = buf1[x + y * stride1] - buf2[x + y * stride2];

	movzx	ecx, BYTE PTR [rax-2]
	lea	r9, QWORD PTR [r9+16]
	movzx	edx, BYTE PTR [r10-2]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [rax-1]
	mov	DWORD PTR [r9-24], edx
	movzx	edx, BYTE PTR [r10-1]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [rax]
	mov	DWORD PTR [r9-20], edx
	movzx	edx, BYTE PTR [r10]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [rax+1]
	mov	DWORD PTR [r9-16], edx
	add	rax, rbx
	movzx	edx, BYTE PTR [r10+1]
	add	r10, r11
	sub	edx, ecx
	mov	DWORD PTR [r9-12], edx
	sub	r8, 1
	jne	SHORT $LL4@kvz_satd_4

; 222  :     }
; 223  :   }
; 224  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$[rsp]
	call	hadamard_4x4_generic

; 225  : }

	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
kvz_satd_4x4_subblock_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
value$ = 8
kvz_fast_clip_16bit_to_pixel PROC

; 44   :   // Ensure that compiler generates arithmetic shift from ">>" 
; 45   : #if defined(_MSC_VER) || defined(__GNUC__) || defined(__clang__)
; 46   : 
; 47   :   if (value & ~PIXEL_MAX) {

	mov	eax, -256				; ffffffffffffff00H
	test	cx, ax
	je	SHORT $LN2@kvz_fast_c

; 48   :     int16_t temp = (-value) >> 15;

	movsx	eax, cx
	neg	eax
	sar	eax, 15

; 56   :   }
; 57   : #else
; 58   :   return CLIP(PIXEL_MIN, PIXEL_MAX, value);
; 59   : #endif
; 60   : }

	ret	0
$LN2@kvz_fast_c:

; 49   : #if KVZ_BIT_DEPTH == 10
; 50   :     temp &= PIXEL_MAX;
; 51   : #endif
; 52   :     return temp;
; 53   :   }
; 54   :   else {
; 55   :     return value;

	movzx	eax, cl

; 56   :   }
; 57   : #else
; 58   :   return CLIP(PIXEL_MIN, PIXEL_MAX, value);
; 59   : #endif
; 60   : }

	ret	0
kvz_fast_clip_16bit_to_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
data1$ = 48
data2$ = 56
width$ = 64
height$ = 72
stride1$ = 80
stride2$ = 88
reg_sad_generic PROC

; 100  : {

	mov	DWORD PTR [rsp+32], r9d
	push	rbp
	push	r12
	push	r15
	sub	rsp, 16
	mov	eax, DWORD PTR stride2$[rsp]

; 101  :   int y, x;
; 102  :   unsigned sad = 0;

	xor	ebp, ebp
	xor	r11d, r11d
	mov	r15, rdx
	mov	edx, DWORD PTR stride1$[rsp]
	mov	r10d, r8d
	mov	r12, rcx

; 103  : 
; 104  :   for (y = 0; y < height; ++y) {

	test	r9d, r9d
	jle	$LN26@reg_sad_ge

; 101  :   int y, x;
; 102  :   unsigned sad = 0;

	mov	QWORD PTR [rsp+48], rbx
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+56], rsi
	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+64], rdi
	mov	QWORD PTR [rsp+8], r13
	mov	QWORD PTR [rsp], r14
	npad	5
$LL4@reg_sad_ge:

; 105  :     for (x = 0; x < width; ++x) {

	xor	ecx, ecx
	test	r10d, r10d
	jle	SHORT $LN14@reg_sad_ge
	cmp	r10d, 32				; 00000020H
	jb	SHORT $LN14@reg_sad_ge

; 106  :       sad += abs(data1[y * stride1 + x] - data2[y * stride2 + x]);

	mov	r9d, r11d
	mov	ebx, r11d
	imul	r9d, edx
	mov	edi, r10d
	imul	ebx, eax
	and	edi, -32				; ffffffffffffffe0H
$LL7@reg_sad_ge:
	lea	edx, DWORD PTR [r9+rcx]
	movdqu	xmm1, XMMWORD PTR [rdx+r12]
	lea	r8d, DWORD PTR [rbx+rcx]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [rdx+16]
	movdqu	xmm0, XMMWORD PTR [r8+r15]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax+r12]
	lea	eax, DWORD PTR [r8+16]
	movdqu	xmm0, XMMWORD PTR [rax+r15]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	cmp	ecx, edi
	jl	SHORT $LL7@reg_sad_ge
	mov	eax, DWORD PTR stride2$[rsp]
	mov	edx, DWORD PTR stride1$[rsp]
	mov	r9d, DWORD PTR height$[rsp]
$LN14@reg_sad_ge:
	xor	esi, esi
	xor	r14d, r14d

; 105  :     for (x = 0; x < width; ++x) {

	cmp	ecx, r10d
	jge	$LN2@reg_sad_ge
	mov	edi, r11d
	mov	ebx, edx
	imul	edi, eax
	mov	eax, r10d
	sub	eax, ecx
	imul	ebx, r11d
	cmp	eax, 2
	jl	SHORT $LC20@reg_sad_ge
	lea	r13d, DWORD PTR [r10-1]
	npad	5

; 106  :       sad += abs(data1[y * stride1 + x] - data2[y * stride2 + x]);

$LL22@reg_sad_ge:
	lea	r8d, DWORD PTR [rdi+rcx]
	movzx	edx, BYTE PTR [r8+r15]
	lea	r9d, DWORD PTR [rbx+rcx]
	movzx	eax, BYTE PTR [r9+r12]
	add	ecx, 2
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	esi, eax
	lea	eax, DWORD PTR [r8+1]
	movzx	r8d, BYTE PTR [rax+r15]
	lea	eax, DWORD PTR [r9+1]
	movzx	eax, BYTE PTR [rax+r12]
	sub	eax, r8d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r14d, eax
	cmp	ecx, r13d
	jl	SHORT $LL22@reg_sad_ge

; 105  :     for (x = 0; x < width; ++x) {

	cmp	ecx, r10d
	jge	SHORT $LN21@reg_sad_ge
$LC20@reg_sad_ge:

; 106  :       sad += abs(data1[y * stride1 + x] - data2[y * stride2 + x]);

	lea	eax, DWORD PTR [rbx+rcx]
	movzx	r8d, BYTE PTR [rax+r12]
	lea	eax, DWORD PTR [rdi+rcx]
	movzx	eax, BYTE PTR [rax+r15]
	sub	r8d, eax
	mov	eax, r8d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ebp, eax
$LN21@reg_sad_ge:
	mov	r9d, DWORD PTR height$[rsp]
	lea	eax, DWORD PTR [r14+rsi]
	add	ebp, eax
$LN2@reg_sad_ge:

; 103  : 
; 104  :   for (y = 0; y < height; ++y) {

	mov	eax, DWORD PTR stride2$[rsp]
	inc	r11d
	mov	edx, DWORD PTR stride1$[rsp]
	cmp	r11d, r9d
	jl	$LL4@reg_sad_ge

; 107  :     }
; 108  :   }
; 109  : 
; 110  :   return sad;

	mov	r14, QWORD PTR [rsp]
	paddd	xmm2, xmm3
	mov	r13, QWORD PTR [rsp+8]
	movdqa	xmm0, xmm2
	mov	rdi, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	add	eax, ebp

; 111  : }

	add	rsp, 16
	pop	r15
	pop	r12
	pop	rbp
	ret	0
$LN26@reg_sad_ge:

; 107  :     }
; 108  :   }
; 109  : 
; 110  :   return sad;

	mov	eax, ebp

; 111  : }

	add	rsp, 16
	pop	r15
	pop	r12
	pop	rbp
	ret	0
reg_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
d$ = 0
tv2518 = 176
diff$ = 176
d$4$ = 184
d$2$ = 192
d$6$ = 200
hadamard_4x4_generic PROC

; 118  : {

	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 104				; 00000068H

; 119  :   int32_t m[4 * 4];
; 120  :   m[0] = diff[0] + diff[12];

	movdqu	xmm2, XMMWORD PTR [rcx+48]

; 121  :   m[1] = diff[1] + diff[13];
; 122  :   m[2] = diff[2] + diff[14];
; 123  :   m[3] = diff[3] + diff[15];
; 124  :   m[4] = diff[4] + diff[8];

	movdqu	xmm0, XMMWORD PTR [rcx+32]
	movdqu	xmm3, XMMWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rsp+80], xmm6
	movdqu	xmm6, XMMWORD PTR [rcx]
	movdqa	xmm1, xmm3

; 125  :   m[5] = diff[5] + diff[9];
; 126  :   m[6] = diff[6] + diff[10];
; 127  :   m[7] = diff[7] + diff[11];
; 128  :   m[8] = diff[4] - diff[8];

	psubd	xmm3, xmm0
	paddd	xmm1, xmm0
	movdqa	xmm5, xmm6

; 129  :   m[9] = diff[5] - diff[9];
; 130  :   m[10] = diff[6] - diff[10];
; 131  :   m[11] = diff[7] - diff[11];
; 132  :   m[12] = diff[0] - diff[12];

	psubd	xmm6, xmm2
	paddd	xmm5, xmm2

; 133  :   m[13] = diff[1] - diff[13];
; 134  :   m[14] = diff[2] - diff[14];
; 135  :   m[15] = diff[3] - diff[15];
; 136  : 
; 137  :   int32_t d[4 * 4];
; 138  :   d[0] = m[0] + m[4];

	movdqa	xmm2, xmm5

; 139  :   d[1] = m[1] + m[5];
; 140  :   d[2] = m[2] + m[6];
; 141  :   d[3] = m[3] + m[7];
; 142  :   d[4] = m[8] + m[12];

	movdqa	xmm4, xmm3
	paddd	xmm2, xmm1

; 143  :   d[5] = m[9] + m[13];
; 144  :   d[6] = m[10] + m[14];
; 145  :   d[7] = m[11] + m[15];
; 146  :   d[8] = m[0] - m[4];

	psubd	xmm5, xmm1
	paddd	xmm4, xmm6

; 147  :   d[9] = m[1] - m[5];
; 148  :   d[10] = m[2] - m[6];
; 149  :   d[11] = m[3] - m[7];
; 150  :   d[12] = m[12] - m[8];
; 151  :   d[13] = m[13] - m[9];
; 152  :   d[14] = m[14] - m[10];
; 153  :   d[15] = m[15] - m[11];
; 154  : 
; 155  :   m[0] = d[0] + d[3];

	movd	r8d, xmm2
	psubd	xmm6, xmm3

; 156  :   m[1] = d[1] + d[2];
; 157  :   m[2] = d[1] - d[2];
; 158  :   m[3] = d[0] - d[3];
; 159  :   m[4] = d[4] + d[7];
; 160  :   m[5] = d[5] + d[6];
; 161  :   m[6] = d[5] - d[6];
; 162  :   m[7] = d[4] - d[7];
; 163  :   m[8] = d[8] + d[11];

	movd	r14d, xmm5
	movdqa	xmm0, xmm2
	movdqu	XMMWORD PTR d$[rbp-104], xmm2
	psrldq	xmm0, 12
	movdqa	xmm1, xmm2
	movd	ecx, xmm0
	movdqa	xmm0, xmm4
	psrldq	xmm1, 4
	movd	edx, xmm1
	movdqa	xmm1, xmm4
	psrldq	xmm0, 12
	psrldq	xmm1, 4
	movd	r13d, xmm1

; 164  :   m[9] = d[9] + d[10];

	movdqa	xmm1, xmm5
	lea	eax, DWORD PTR [r8+rcx]
	psrldq	xmm1, 4
	sub	r8d, ecx
	mov	DWORD PTR tv2518[rbp-104], eax
	movd	ecx, xmm0
	movdqa	xmm0, xmm5
	movd	esi, xmm1

; 165  :   m[10] = d[9] - d[10];
; 166  :   m[11] = d[8] - d[11];
; 167  :   m[12] = d[12] + d[15];
; 168  :   m[13] = d[13] + d[14];

	movdqa	xmm1, xmm6
	psrldq	xmm0, 12
	movd	r11d, xmm6
	psrldq	xmm2, 8
	movd	eax, xmm2
	movdqu	XMMWORD PTR d$[rbp-88], xmm4
	movdqu	XMMWORD PTR d$[rbp-72], xmm5
	psrldq	xmm5, 8
	movdqu	XMMWORD PTR d$[rbp-56], xmm6
	psrldq	xmm1, 4
	lea	r12d, DWORD PTR [rdx+rax]
	movd	r10d, xmm1
	sub	edx, eax
	mov	DWORD PTR d$2$[rbp-104], r8d
	mov	DWORD PTR d$4$[rbp-104], edx
	movd	edx, xmm4
	psrldq	xmm4, 8
	movd	eax, xmm4
	lea	r15d, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movd	ecx, xmm0
	movdqa	xmm0, xmm6
	lea	edi, DWORD PTR [rax+r13]
	psrldq	xmm0, 12
	sub	r13d, eax
	psrldq	xmm6, 8
	movd	eax, xmm5
	mov	DWORD PTR d$6$[rbp-104], edx
	lea	ebx, DWORD PTR [r14+rcx]
	sub	r14d, ecx
	movd	ecx, xmm0
	lea	r9d, DWORD PTR [rsi+rax]
	sub	esi, eax
	movd	eax, xmm6
	lea	r8d, DWORD PTR [r11+rcx]

; 169  :   m[14] = d[13] - d[14];
; 170  :   m[15] = d[12] - d[15];

	sub	r11d, ecx
	mov	ecx, DWORD PTR tv2518[rbp-104]
	lea	edx, DWORD PTR [r10+rax]
	sub	r10d, eax
	lea	eax, DWORD PTR [r12+rcx]

; 171  : 
; 172  :   d[0] = m[0] + m[1];

	sub	ecx, r12d
	mov	DWORD PTR d$[rbp-104], eax

; 173  :   d[1] = m[0] - m[1];

	mov	r12d, DWORD PTR d$2$[rbp-104]
	mov	DWORD PTR d$[rbp-100], ecx
	mov	ecx, DWORD PTR d$4$[rbp-104]
	lea	eax, DWORD PTR [r12+rcx]

; 174  :   d[2] = m[2] + m[3];

	sub	r12d, ecx

; 175  :   d[3] = m[3] - m[2];
; 176  :   d[4] = m[4] + m[5];
; 177  :   d[5] = m[4] - m[5];

	mov	ecx, DWORD PTR d$6$[rbp-104]
	mov	DWORD PTR d$[rbp-96], eax
	lea	eax, DWORD PTR [rdi+r15]
	mov	DWORD PTR d$[rbp-88], eax
	sub	r15d, edi
	mov	DWORD PTR d$[rbp-92], r12d
	lea	eax, DWORD PTR [rcx+r13]
	mov	DWORD PTR d$[rbp-84], r15d
	mov	DWORD PTR d$[rbp-80], eax

; 178  :   d[6] = m[6] + m[7];

	sub	ecx, r13d

; 179  :   d[7] = m[7] - m[6];

	lea	eax, DWORD PTR [r9+rbx]
	mov	DWORD PTR d$[rbp-76], ecx
	mov	DWORD PTR d$[rbp-72], eax

; 180  :   d[8] = m[8] + m[9];

	sub	ebx, r9d

; 181  :   d[9] = m[8] - m[9];

	lea	eax, DWORD PTR [r14+rsi]
	mov	DWORD PTR d$[rbp-68], ebx
	mov	DWORD PTR d$[rbp-64], eax

; 182  :   d[10] = m[10] + m[11];

	sub	r14d, esi

; 183  :   d[11] = m[11] - m[10];

	lea	eax, DWORD PTR [rdx+r8]
	mov	DWORD PTR d$[rbp-60], r14d

; 184  :   d[12] = m[12] + m[13];

	sub	r8d, edx
	mov	DWORD PTR d$[rbp-56], eax

; 185  :   d[13] = m[12] - m[13];

	lea	eax, DWORD PTR [r11+r10]
	mov	DWORD PTR d$[rbp-52], r8d

; 186  :   d[14] = m[14] + m[15];

	sub	r11d, r10d
	mov	DWORD PTR d$[rbp-48], eax

; 187  :   d[15] = m[15] - m[14];
; 188  : 
; 189  :   int32_t satd = 0;

	xor	ecx, ecx
	mov	DWORD PTR d$[rbp-44], r11d
	cmp	DWORD PTR __isa_available, 2
	jl	SHORT $LN50@hadamard_4
	xorps	xmm2, xmm2
	xorps	xmm3, xmm3
	npad	2
$LL4@hadamard_4:

; 191  :     satd += abs(d[i]);

	movdqu	xmm0, XMMWORD PTR d$[rbp+rcx*4-104]
	pabsd	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR d$[rbp+rcx*4-88]
	add	rcx, 8
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	pabsd	xmm1, xmm0
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	cmp	rcx, 16
	jl	SHORT $LL4@hadamard_4

; 147  :   d[9] = m[1] - m[5];
; 148  :   d[10] = m[2] - m[6];
; 149  :   d[11] = m[3] - m[7];
; 150  :   d[12] = m[12] - m[8];
; 151  :   d[13] = m[13] - m[9];
; 152  :   d[14] = m[14] - m[10];
; 153  :   d[15] = m[15] - m[11];
; 154  : 
; 155  :   m[0] = d[0] + d[3];

	paddd	xmm2, xmm1
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movdqa	xmm0, xmm2
	psrldq	xmm0, 4
	paddd	xmm2, xmm0
	movd	ecx, xmm2
	jmp	SHORT $LN70@hadamard_4
$LN50@hadamard_4:
	mov	r9d, ecx
	mov	r10d, ecx
	mov	r8, rcx
	npad	3

; 190  :   for (int i = 0; i < 16; i++) {

$LL73@hadamard_4:

; 191  :     satd += abs(d[i]);

	mov	eax, DWORD PTR d$[rbp+r8*4-104]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r9d, eax
	mov	eax, DWORD PTR d$[rbp+r8*4-100]
	cdq
	add	r8, 2
	xor	eax, edx
	sub	eax, edx
	add	r10d, eax
	mov	rax, r8
	cmp	r8, 15
	jl	SHORT $LL73@hadamard_4

; 190  :   for (int i = 0; i < 16; i++) {

	cmp	rax, 16
	jge	SHORT $LN72@hadamard_4

; 191  :     satd += abs(d[i]);

	mov	eax, DWORD PTR d$[rbp+r8*4-104]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ecx, eax
$LN72@hadamard_4:
	lea	eax, DWORD PTR [r9+r10]
	add	ecx, eax
$LN70@hadamard_4:

; 192  :   }
; 193  :   satd = ((satd + 1) >> 1);
; 194  : 
; 195  :   return satd;
; 196  : }

	movaps	xmm6, XMMWORD PTR [rsp+80]
	lea	eax, DWORD PTR [rcx+1]
	sar	eax, 1
	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
hadamard_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
diff$ = 32
piOrg$ = 128
piCur$ = 136
satd_4x4_generic PROC

; 202  : {

	sub	rsp, 120				; 00000078H

; 203  :   int32_t diff[4 * 4];
; 204  :   for (int i = 0; i < 4 * 4; i++) {
; 205  :     diff[i] = piOrg[i] - piCur[i];

	movd	xmm2, DWORD PTR [rcx]
	xorps	xmm0, xmm0
	movd	xmm3, DWORD PTR [rcx+4]
	movd	xmm1, DWORD PTR [rdx]
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	punpcklbw xmm2, xmm0
	punpcklbw xmm3, xmm0
	punpcklwd xmm2, xmm0
	psubd	xmm2, xmm1
	punpcklwd xmm3, xmm0
	movd	xmm1, DWORD PTR [rdx+4]
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	psubd	xmm3, xmm1
	movdqu	XMMWORD PTR diff$[rsp], xmm2
	movd	xmm2, DWORD PTR [rcx+8]
	movd	xmm1, DWORD PTR [rdx+8]
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	movdqu	XMMWORD PTR diff$[rsp+16], xmm3
	movd	xmm3, DWORD PTR [rcx+12]

; 206  :   }
; 207  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$[rsp]
	punpcklbw xmm2, xmm0
	punpcklbw xmm3, xmm0
	punpcklwd xmm2, xmm0
	psubd	xmm2, xmm1
	punpcklwd xmm3, xmm0
	movd	xmm1, DWORD PTR [rdx+12]
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	psubd	xmm3, xmm1
	movdqu	XMMWORD PTR diff$[rsp+32], xmm2
	movdqu	XMMWORD PTR diff$[rsp+48], xmm3
	call	hadamard_4x4_generic

; 208  : }

	add	rsp, 120				; 00000078H
	ret	0
satd_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
m3$ = 16
diff$ = 16
m2$ = 272
piOrg$ = 832
iStrideOrg$ = 840
piCur$ = 848
iStrideCur$ = 856
satd_8x8_subblock_generic PROC

; 254  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-528]
	sub	rsp, 784				; 00000310H

; 255  :   int32_t k, i, j, jj, sad = 0;

	xor	r12d, r12d
	movsxd	r11, r9d
	mov	r10d, r12d
	movsxd	r9, edx
	add	r8, 2
	lea	rax, QWORD PTR [rcx+2]
	npad	5
$LL4@satd_8x8_s:

; 256  :   int32_t diff[64], m1[8][8], m2[8][8], m3[8][8];
; 257  : 
; 258  :   for (k = 0; k < 64; k += 8) {
; 259  :     diff[k + 0] = piOrg[0] - piCur[0];

	movzx	ecx, BYTE PTR [r8-2]
	movzx	edx, BYTE PTR [rax-2]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8-1]
	mov	DWORD PTR diff$[rsp+r10*4], edx
	movzx	edx, BYTE PTR [rax-1]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8]
	mov	DWORD PTR diff$[rsp+r10*4+4], edx
	movzx	edx, BYTE PTR [rax]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8+1]
	mov	DWORD PTR diff$[rsp+r10*4+8], edx
	movzx	edx, BYTE PTR [rax+1]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8+2]
	mov	DWORD PTR diff$[rsp+r10*4+12], edx
	movzx	edx, BYTE PTR [rax+2]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8+3]
	mov	DWORD PTR diff$[rsp+r10*4+16], edx
	movzx	edx, BYTE PTR [rax+3]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8+4]
	mov	DWORD PTR diff$[rsp+r10*4+20], edx
	movzx	edx, BYTE PTR [rax+4]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [r8+5]
	mov	DWORD PTR diff$[rsp+r10*4+24], edx

; 260  :     diff[k + 1] = piOrg[1] - piCur[1];
; 261  :     diff[k + 2] = piOrg[2] - piCur[2];
; 262  :     diff[k + 3] = piOrg[3] - piCur[3];
; 263  :     diff[k + 4] = piOrg[4] - piCur[4];
; 264  :     diff[k + 5] = piOrg[5] - piCur[5];
; 265  :     diff[k + 6] = piOrg[6] - piCur[6];
; 266  :     diff[k + 7] = piOrg[7] - piCur[7];
; 267  : 
; 268  :     piCur += iStrideCur;

	add	r8, r11
	movzx	edx, BYTE PTR [rax+5]

; 269  :     piOrg += iStrideOrg;

	add	rax, r9
	sub	edx, ecx
	mov	DWORD PTR diff$[rsp+r10*4+28], edx
	add	r10, 8
	cmp	r10, 64					; 00000040H
	jl	$LL4@satd_8x8_s

; 270  :   }
; 271  : 
; 272  :   // horizontal
; 273  :   for (j = 0; j < 8; ++j) {

	mov	r13, r12
	npad	11
$LL7@satd_8x8_s:

; 274  :     jj = j << 3;

	lea	eax, DWORD PTR [r12*8]
	inc	r12d

; 275  :     m2[j][0] = diff[jj] + diff[jj + 4];

	movsxd	rcx, eax
	lea	r13, QWORD PTR [r13+32]
	mov	eax, DWORD PTR diff$[rsp+rcx*4+16]

; 276  :     m2[j][1] = diff[jj + 1] + diff[jj + 5];

	mov	edx, DWORD PTR diff$[rsp+rcx*4+20]

; 277  :     m2[j][2] = diff[jj + 2] + diff[jj + 6];

	mov	r8d, DWORD PTR diff$[rsp+rcx*4+24]
	mov	r15d, DWORD PTR diff$[rsp+rcx*4]
	mov	r14d, DWORD PTR diff$[rsp+rcx*4+4]
	mov	r11d, DWORD PTR diff$[rsp+rcx*4+8]

; 278  :     m2[j][3] = diff[jj + 3] + diff[jj + 7];

	mov	r9d, DWORD PTR diff$[rsp+rcx*4+28]
	mov	ebx, DWORD PTR diff$[rsp+rcx*4+12]
	lea	esi, DWORD PTR [r15+rax]

; 279  :     m2[j][4] = diff[jj] - diff[jj + 4];

	sub	r15d, eax
	lea	edi, DWORD PTR [r14+rdx]
	lea	r10d, DWORD PTR [r11+r8]

; 280  :     m2[j][5] = diff[jj + 1] - diff[jj + 5];

	sub	r14d, edx

; 281  :     m2[j][6] = diff[jj + 2] - diff[jj + 6];

	sub	r11d, r8d
	lea	ecx, DWORD PTR [rbx+r9]

; 282  :     m2[j][7] = diff[jj + 3] - diff[jj + 7];

	sub	ebx, r9d

; 283  : 
; 284  :     m1[j][0] = m2[j][0] + m2[j][2];

	lea	r9d, DWORD PTR [r10+rsi]

; 285  :     m1[j][1] = m2[j][1] + m2[j][3];
; 286  :     m1[j][2] = m2[j][0] - m2[j][2];

	sub	esi, r10d
	lea	edx, DWORD PTR [rcx+rdi]

; 287  :     m1[j][3] = m2[j][1] - m2[j][3];

	sub	edi, ecx

; 288  :     m1[j][4] = m2[j][4] + m2[j][6];

	lea	r8d, DWORD PTR [r11+r15]

; 289  :     m1[j][5] = m2[j][5] + m2[j][7];
; 290  :     m1[j][6] = m2[j][4] - m2[j][6];

	sub	r15d, r11d

; 291  :     m1[j][7] = m2[j][5] - m2[j][7];
; 292  : 
; 293  :     m2[j][0] = m1[j][0] + m1[j][1];

	lea	eax, DWORD PTR [rdx+r9]

; 294  :     m2[j][1] = m1[j][0] - m1[j][1];

	sub	r9d, edx
	mov	DWORD PTR m2$[rbp+r13-288], eax
	lea	ecx, DWORD PTR [rbx+r14]

; 295  :     m2[j][2] = m1[j][2] + m1[j][3];

	lea	eax, DWORD PTR [rdi+rsi]
	mov	DWORD PTR m2$[rbp+r13-284], r9d
	sub	r14d, ebx
	mov	DWORD PTR m2$[rbp+r13-280], eax

; 296  :     m2[j][3] = m1[j][2] - m1[j][3];
; 297  :     m2[j][4] = m1[j][4] + m1[j][5];

	lea	eax, DWORD PTR [rcx+r8]
	sub	esi, edi
	mov	DWORD PTR m2$[rbp+r13-272], eax

; 298  :     m2[j][5] = m1[j][4] - m1[j][5];

	sub	r8d, ecx
	mov	DWORD PTR m2$[rbp+r13-276], esi

; 299  :     m2[j][6] = m1[j][6] + m1[j][7];

	lea	eax, DWORD PTR [r14+r15]
	mov	DWORD PTR m2$[rbp+r13-268], r8d

; 300  :     m2[j][7] = m1[j][6] - m1[j][7];

	sub	r15d, r14d
	mov	DWORD PTR m2$[rbp+r13-264], eax
	mov	DWORD PTR m2$[rbp+r13-260], r15d
	cmp	r12d, 8
	jl	$LL7@satd_8x8_s

; 301  :   }
; 302  : 
; 303  :   // vertical
; 304  :   for (i = 0; i < 8; ++i) {

	xor	r12d, r12d
	mov	r14d, r12d
	lea	r15d, QWORD PTR [r12+8]
	npad	12
$LL10@satd_8x8_s:

; 305  :     m3[0][i] = m2[0][i] + m2[4][i];

	mov	ebx, DWORD PTR m2$[rbp+r14-128]
	mov	r10d, DWORD PTR m2$[rbp+r14-96]
	mov	r8d, DWORD PTR m2$[rbp+r14-64]
	mov	ecx, DWORD PTR m2$[rbp+r14-32]
	mov	r11d, DWORD PTR m2$[rbp+r14-256]
	mov	r9d, DWORD PTR m2$[rbp+r14-224]
	mov	edx, DWORD PTR m2$[rbp+r14-192]
	mov	esi, DWORD PTR m2$[rbp+r14-160]
	lea	r14, QWORD PTR [r14+4]
	lea	eax, DWORD PTR [r11+rbx]

; 306  :     m3[1][i] = m2[1][i] + m2[5][i];
; 307  :     m3[2][i] = m2[2][i] + m2[6][i];
; 308  :     m3[3][i] = m2[3][i] + m2[7][i];
; 309  :     m3[4][i] = m2[0][i] - m2[4][i];

	sub	r11d, ebx
	mov	DWORD PTR m3$[rsp+r14-4], eax
	lea	eax, DWORD PTR [r9+r10]
	mov	DWORD PTR m3$[rsp+r14+28], eax
	sub	r9d, r10d
	lea	eax, DWORD PTR [rdx+r8]
	sub	edx, r8d
	mov	DWORD PTR m3$[rsp+r14+60], eax
	lea	eax, DWORD PTR [rsi+rcx]
	mov	DWORD PTR m3$[rsp+r14+92], eax
	sub	esi, ecx
	mov	DWORD PTR m3$[rbp+r14-132], r11d
	mov	DWORD PTR m3$[rbp+r14-100], r9d
	mov	DWORD PTR m3$[rbp+r14-68], edx
	mov	DWORD PTR m3$[rbp+r14-36], esi

; 310  :     m3[5][i] = m2[1][i] - m2[5][i];
; 311  :     m3[6][i] = m2[2][i] - m2[6][i];
; 312  :     m3[7][i] = m2[3][i] - m2[7][i];
; 313  : 
; 314  :     m1[0][i] = m3[0][i] + m3[2][i];
; 315  :     m1[1][i] = m3[1][i] + m3[3][i];

	mov	eax, DWORD PTR m3$[rsp+r14+92]
	mov	ecx, DWORD PTR m3$[rsp+r14+60]
	mov	ebx, DWORD PTR m3$[rsp+r14+28]
	mov	edi, DWORD PTR m3$[rsp+r14-4]

; 316  :     m1[2][i] = m3[0][i] - m3[2][i];
; 317  :     m1[3][i] = m3[1][i] - m3[3][i];
; 318  :     m1[4][i] = m3[4][i] + m3[6][i];

	mov	r11d, DWORD PTR m3$[rbp+r14-132]

; 319  :     m1[5][i] = m3[5][i] + m3[7][i];

	mov	r9d, DWORD PTR m3$[rbp+r14-100]
	lea	r8d, DWORD PTR [rax+rbx]
	sub	ebx, eax
	mov	eax, DWORD PTR m3$[rbp+r14-68]
	lea	r10d, DWORD PTR [rcx+rdi]
	sub	edi, ecx
	lea	ecx, DWORD PTR [r9+rsi]

; 320  :     m1[6][i] = m3[4][i] - m3[6][i];
; 321  :     m1[7][i] = m3[5][i] - m3[7][i];

	sub	r9d, esi
	lea	edx, DWORD PTR [r11+rax]
	sub	r11d, eax

; 322  : 
; 323  :     m2[0][i] = m1[0][i] + m1[1][i];

	lea	eax, DWORD PTR [r10+r8]

; 324  :     m2[1][i] = m1[0][i] - m1[1][i];

	sub	r10d, r8d
	mov	DWORD PTR m2$[rbp+r14-260], eax

; 325  :     m2[2][i] = m1[2][i] + m1[3][i];

	lea	eax, DWORD PTR [rdi+rbx]
	mov	DWORD PTR m2$[rbp+r14-196], eax

; 326  :     m2[3][i] = m1[2][i] - m1[3][i];

	sub	edi, ebx

; 327  :     m2[4][i] = m1[4][i] + m1[5][i];

	lea	eax, DWORD PTR [rcx+rdx]
	mov	DWORD PTR m2$[rbp+r14-228], r10d
	mov	DWORD PTR m2$[rbp+r14-132], eax

; 328  :     m2[5][i] = m1[4][i] - m1[5][i];

	sub	edx, ecx

; 329  :     m2[6][i] = m1[6][i] + m1[7][i];

	lea	eax, DWORD PTR [r9+r11]
	mov	DWORD PTR m2$[rbp+r14-164], edi

; 330  :     m2[7][i] = m1[6][i] - m1[7][i];

	sub	r11d, r9d
	mov	DWORD PTR m2$[rbp+r14-100], edx
	mov	DWORD PTR m2$[rbp+r14-36], r11d
	mov	DWORD PTR m2$[rbp+r14-68], eax
	sub	r15, 1
	jne	$LL10@satd_8x8_s

; 331  :   }
; 332  : 
; 333  :   for (i = 0; i < 64; ++i) {

	mov	r8d, r12d
	mov	r9d, r12d
	mov	r10d, r12d
	mov	rcx, r12
	npad	7
$LL13@satd_8x8_s:

; 334  :     sad += abs(((int*)m2)[i]);

	mov	eax, DWORD PTR m2$[rbp+rcx*4-256]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r12d, eax
	mov	eax, DWORD PTR m2$[rbp+rcx*4-252]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r10d, eax
	mov	eax, DWORD PTR m2$[rbp+rcx*4-248]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r9d, eax
	mov	eax, DWORD PTR m2$[rbp+rcx*4-244]
	cdq
	add	rcx, 4
	xor	eax, edx
	sub	eax, edx
	add	r8d, eax
	cmp	rcx, 64					; 00000040H
	jl	SHORT $LL13@satd_8x8_s

; 335  :   }
; 336  : 
; 337  :   sad = (sad + 2) >> 2;
; 338  : 
; 339  :   return sad;
; 340  : }

	lea	r11, QWORD PTR [rsp+784]
	add	r12d, 2
	mov	rbx, QWORD PTR [r11+48]
	lea	eax, DWORD PTR [r8+r9]
	mov	rsi, QWORD PTR [r11+56]
	add	eax, r10d
	mov	rdi, QWORD PTR [r11+64]
	add	eax, r12d
	sar	eax, 2
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
satd_8x8_subblock_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 48
stride$ = 56
orig$ = 64
orig_stride$ = 72
costs$ = 80
satd_8x8_subblock_quad_generic PROC

; 347  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	ebp, r9d
	mov	r14, r8

; 348  :   costs[0] = satd_8x8_subblock_generic(orig, orig_stride, preds[0], stride);

	mov	r8, QWORD PTR [rcx]
	mov	r9d, edx
	mov	edi, edx
	mov	rsi, rcx
	mov	edx, ebp
	mov	rcx, r14
	call	satd_8x8_subblock_generic
	mov	rbx, QWORD PTR costs$[rsp]

; 349  :   costs[1] = satd_8x8_subblock_generic(orig, orig_stride, preds[1], stride);

	mov	r9d, edi
	mov	r8, QWORD PTR [rsi+8]
	mov	edx, ebp
	mov	rcx, r14
	mov	DWORD PTR [rbx], eax
	call	satd_8x8_subblock_generic

; 350  :   costs[2] = satd_8x8_subblock_generic(orig, orig_stride, preds[2], stride);

	mov	r8, QWORD PTR [rsi+16]
	mov	r9d, edi
	mov	edx, ebp
	mov	DWORD PTR [rbx+4], eax
	mov	rcx, r14
	call	satd_8x8_subblock_generic

; 351  :   costs[3] = satd_8x8_subblock_generic(orig, orig_stride, preds[3], stride);

	mov	r8, QWORD PTR [rsi+24]
	mov	r9d, edi
	mov	edx, ebp
	mov	DWORD PTR [rbx+8], eax
	mov	rcx, r14
	call	satd_8x8_subblock_generic

; 352  : }

	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	mov	DWORD PTR [rbx+12], eax
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
satd_8x8_subblock_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
satd_8x8_generic PROC

; 355  : SATD_NxN(generic,  8)

	mov	r9d, 8
	mov	r8, rdx
	mov	edx, r9d
	jmp	satd_8x8_subblock_generic
satd_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 64
block2$ = 72
satd_16x16_generic PROC

; 356  : SATD_NxN(generic, 16)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r14, rdx
	xor	esi, esi
	mov	r15, rcx
$LL4@satd_16x16:
	mov	edi, esi
	add	edi, edi
	xor	ebx, ebx
	npad	8
$LL7@satd_16x16:
	lea	eax, DWORD PTR [rbx+rdi*8]
	mov	edx, 16
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 16
	jb	SHORT $LL7@satd_16x16
	add	esi, 8
	cmp	esi, 16
	jb	SHORT $LL4@satd_16x16
	mov	rbx, QWORD PTR [rsp+64]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
satd_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 64
block2$ = 72
satd_32x32_generic PROC

; 357  : SATD_NxN(generic, 32)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r14, rdx
	xor	esi, esi
	mov	r15, rcx
	npad	14
$LL4@satd_32x32:
	mov	edi, esi
	shl	edi, 5
	xor	ebx, ebx
	npad	9
$LL7@satd_32x32:
	lea	eax, DWORD PTR [rbx+rdi]
	mov	edx, 32					; 00000020H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 32					; 00000020H
	jb	SHORT $LL7@satd_32x32
	add	esi, 8
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL4@satd_32x32
	mov	rbx, QWORD PTR [rsp+64]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
satd_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 64
block2$ = 72
satd_64x64_generic PROC

; 358  : SATD_NxN(generic, 64)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r14, rdx
	xor	esi, esi
	mov	r15, rcx
	npad	14
$LL4@satd_64x64:
	mov	edi, esi
	shl	edi, 6
	xor	ebx, ebx
	npad	9
$LL7@satd_64x64:
	lea	eax, DWORD PTR [rbx+rdi]
	mov	edx, 64					; 00000040H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 64					; 00000040H
	jb	SHORT $LL7@satd_64x64
	add	esi, 8
	cmp	esi, 64					; 00000040H
	jb	SHORT $LL4@satd_64x64
	mov	rbx, QWORD PTR [rsp+64]
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
satd_64x64_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
tv2865 = 32
tv2851 = 32
tv2876 = 40
tv2850 = 40
tv2877 = 48
tv2852 = 48
diff$1 = 64
diff$2 = 64
width$ = 192
height$ = 200
block1$ = 208
stride1$ = 216
block2$ = 224
stride2$ = 232
satd_any_size_generic PROC

; 359  : SATD_ANY_SIZE(generic)

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	push	r13
	push	r14
	sub	rsp, 152				; 00000098H
	xor	edi, edi
	movsxd	r14, r9d
	mov	eax, ecx
	mov	rbp, r8
	mov	r8d, edx
	mov	edx, ecx
	and	eax, -2147483641			; ffffffff80000007H
	jge	SHORT $LN72@satd_any_s
	dec	eax
	or	eax, -8
	inc	eax
$LN72@satd_any_s:
	movsxd	r13, DWORD PTR stride2$[rsp]
	mov	QWORD PTR [rsp+208], rbx
	mov	QWORD PTR [rsp+144], rsi
	mov	QWORD PTR [rsp+136], r12
	mov	QWORD PTR [rsp+128], r15
	mov	r15, QWORD PTR block2$[rsp]
	test	eax, eax
	je	$LN14@satd_any_s
	test	r8d, r8d
	jle	$LN3@satd_any_s
	lea	ecx, DWORD PTR [r8-1]
	mov	r11, r14
	shr	ecx, 2
	lea	eax, DWORD PTR [r14*4]
	cdqe
	lea	rbx, QWORD PTR [rbp+2]
	mov	QWORD PTR tv2877[rsp], rax
	lea	rsi, QWORD PTR [r15+2]
	lea	eax, DWORD PTR [r13*4]
	inc	ecx
	cdqe
	mov	QWORD PTR tv2876[rsp], rax
	mov	QWORD PTR tv2865[rsp], rcx
	npad	1
$LL4@satd_any_s:

; 219  :   for (int y = 0; y < 4; y++) {

	lea	rdx, QWORD PTR diff$2[rsp+8]
	mov	r8, rsi
	mov	r9, rbx
	mov	r10d, 4
	npad	15
$LL20@satd_any_s:

; 220  :     for (int x = 0; x < 4; x++) {
; 221  :       diff[x + y * 4] = buf1[x + y * stride1] - buf2[x + y * stride2];

	movzx	eax, BYTE PTR [r8-2]
	lea	rdx, QWORD PTR [rdx+16]
	movzx	ecx, BYTE PTR [r9-2]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r8-1]
	mov	DWORD PTR [rdx-24], ecx
	movzx	ecx, BYTE PTR [r9-1]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r8]
	mov	DWORD PTR [rdx-20], ecx
	movzx	ecx, BYTE PTR [r9]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r8+1]
	mov	DWORD PTR [rdx-16], ecx
	add	r8, r13
	movzx	ecx, BYTE PTR [r9+1]
	add	r9, r11
	sub	ecx, eax
	mov	DWORD PTR [rdx-12], ecx
	sub	r10, 1
	jne	SHORT $LL20@satd_any_s

; 222  :     }
; 223  :   }
; 224  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$2[rsp]
	call	hadamard_4x4_generic

; 359  : SATD_ANY_SIZE(generic)

	add	rbx, QWORD PTR tv2877[rsp]
	add	edi, eax
	add	rsi, QWORD PTR tv2876[rsp]
	mov	r11, r14
	sub	QWORD PTR tv2865[rsp], 1
	jne	$LL4@satd_any_s
	mov	edx, DWORD PTR width$[rsp]
	mov	r8d, DWORD PTR height$[rsp]
$LN3@satd_any_s:
	add	rbp, 4
	add	r15, 4
	sub	edx, 4
	mov	DWORD PTR width$[rsp], edx
$LN14@satd_any_s:
	mov	eax, r8d
	and	eax, -2147483641			; ffffffff80000007H
	jge	SHORT $LN71@satd_any_s
	dec	eax
	or	eax, -8
	inc	eax
$LN71@satd_any_s:
	test	eax, eax
	je	$LN15@satd_any_s
	movsxd	rsi, edx
	test	edx, edx
	jle	$LN6@satd_any_s
	mov	r12, r14
	lea	rbx, QWORD PTR [r15+2]
	mov	r14, rbp
	mov	r11, r13
	sub	r14, r15
	dec	rsi
	shr	rsi, 2
	inc	rsi
	npad	2
$LL7@satd_any_s:

; 219  :   for (int y = 0; y < 4; y++) {

	lea	rdx, QWORD PTR diff$1[rsp+8]
	mov	r9, rbx
	lea	r8, QWORD PTR [r14+rbx]
	mov	r10d, 4
	npad	14
$LL28@satd_any_s:

; 220  :     for (int x = 0; x < 4; x++) {
; 221  :       diff[x + y * 4] = buf1[x + y * stride1] - buf2[x + y * stride2];

	movzx	eax, BYTE PTR [r9-2]
	lea	rdx, QWORD PTR [rdx+16]
	movzx	ecx, BYTE PTR [r8-2]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r9-1]
	mov	DWORD PTR [rdx-24], ecx
	movzx	ecx, BYTE PTR [r8-1]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r9]
	mov	DWORD PTR [rdx-20], ecx
	movzx	ecx, BYTE PTR [r8]
	sub	ecx, eax
	movzx	eax, BYTE PTR [r9+1]
	mov	DWORD PTR [rdx-16], ecx
	add	r9, r11
	movzx	ecx, BYTE PTR [r8+1]
	add	r8, r12
	sub	ecx, eax
	mov	DWORD PTR [rdx-12], ecx
	sub	r10, 1
	jne	SHORT $LL28@satd_any_s

; 222  :     }
; 223  :   }
; 224  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$1[rsp]
	call	hadamard_4x4_generic

; 359  : SATD_ANY_SIZE(generic)

	add	edi, eax
	add	rbx, 4
	mov	r11, r13
	sub	rsi, 1
	jne	$LL7@satd_any_s
	mov	r14d, DWORD PTR stride1$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	mov	r8d, DWORD PTR height$[rsp]
$LN6@satd_any_s:
	lea	eax, DWORD PTR [r14*4]
	movsxd	rcx, eax
	lea	eax, DWORD PTR [r13*4]
	add	rbp, rcx
	movsxd	rcx, eax
	add	r15, rcx
	sub	r8d, 4
$LN15@satd_any_s:
	test	r8d, r8d
	jle	$LN73@satd_any_s
	lea	r12d, DWORD PTR [r8-1]
	shr	r12d, 3
	lea	eax, DWORD PTR [r13*8]
	cdqe
	inc	r12d
	mov	QWORD PTR tv2851[rsp], rax
	lea	eax, DWORD PTR [r14*8]
	cdqe
	mov	QWORD PTR tv2850[rsp], rax
	mov	rcx, QWORD PTR tv2850[rsp]
	mov	rax, QWORD PTR tv2851[rsp]
	mov	QWORD PTR tv2852[rsp], r12
	npad	1
$LL10@satd_any_s:
	test	edx, edx
	jle	SHORT $LN8@satd_any_s
	mov	r12d, DWORD PTR stride1$[rsp]
	lea	esi, DWORD PTR [rdx-1]
	mov	r14, r15
	shr	esi, 3
	sub	r14, rbp
	mov	rbx, rbp
	inc	esi
	npad	3
$LL13@satd_any_s:
	lea	r8, QWORD PTR [r14+rbx]
	mov	r9d, r13d
	mov	edx, r12d
	mov	rcx, rbx
	call	satd_8x8_subblock_generic
	add	edi, eax
	add	rbx, 8
	sub	rsi, 1
	jne	SHORT $LL13@satd_any_s
	mov	r12, QWORD PTR tv2852[rsp]
	mov	rax, QWORD PTR tv2851[rsp]
	mov	rcx, QWORD PTR tv2850[rsp]
	mov	edx, DWORD PTR width$[rsp]
$LN8@satd_any_s:
	add	rbp, rcx
	add	r15, rax
	sub	r12, 1
	mov	QWORD PTR tv2852[rsp], r12
	jne	SHORT $LL10@satd_any_s
$LN73@satd_any_s:
	mov	r15, QWORD PTR [rsp+128]
	mov	eax, edi
	mov	r12, QWORD PTR [rsp+136]
	mov	rsi, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [rsp+208]
	add	rsp, 152				; 00000098H
	pop	r14
	pop	r13
	pop	rdi
	pop	rbp
	ret	0
satd_any_size_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
diff$1 = 32
diff$2 = 32
preds$ = 112
orig$ = 120
num_modes$ = 128
costs_out$ = 136
satd_4x4_dual_generic PROC

; 394  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H

; 205  :     diff[i] = piOrg[i] - piCur[i];

	movzx	eax, BYTE PTR [rcx]

; 394  : {

	mov	rbx, rcx

; 205  :     diff[i] = piOrg[i] - piCur[i];

	movzx	r8d, BYTE PTR [rdx]

; 394  : {

	mov	rdi, rdx

; 205  :     diff[i] = piOrg[i] - piCur[i];

	sub	r8d, eax

; 394  : {

	mov	rsi, r9

; 205  :     diff[i] = piOrg[i] - piCur[i];

	movzx	eax, BYTE PTR [rcx+1]
	mov	DWORD PTR diff$2[rbp-96], r8d
	movzx	r8d, BYTE PTR [rdx+1]
	movzx	edx, BYTE PTR [rdx+2]
	sub	r8d, eax
	movzx	eax, BYTE PTR [rcx+2]
	sub	edx, eax
	mov	DWORD PTR diff$2[rbp-92], r8d
	movzx	eax, BYTE PTR [rcx+3]
	movzx	ecx, BYTE PTR [rdi+3]
	sub	ecx, eax
	mov	DWORD PTR diff$2[rbp-88], edx
	movzx	eax, BYTE PTR [rbx+4]
	mov	DWORD PTR diff$2[rbp-84], ecx
	movzx	ecx, BYTE PTR [rdi+4]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+5]
	mov	DWORD PTR diff$2[rbp-80], ecx
	movzx	ecx, BYTE PTR [rdi+5]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+6]
	mov	DWORD PTR diff$2[rbp-76], ecx
	movzx	ecx, BYTE PTR [rdi+6]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+7]
	mov	DWORD PTR diff$2[rbp-72], ecx
	movzx	ecx, BYTE PTR [rdi+7]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+8]
	mov	DWORD PTR diff$2[rbp-68], ecx
	movzx	ecx, BYTE PTR [rdi+8]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+9]
	mov	DWORD PTR diff$2[rbp-64], ecx
	movzx	ecx, BYTE PTR [rdi+9]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+10]
	mov	DWORD PTR diff$2[rbp-60], ecx
	movzx	ecx, BYTE PTR [rdi+10]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+11]
	mov	DWORD PTR diff$2[rbp-56], ecx
	movzx	ecx, BYTE PTR [rdi+11]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+12]
	mov	DWORD PTR diff$2[rbp-52], ecx
	movzx	ecx, BYTE PTR [rdi+12]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+13]
	mov	DWORD PTR diff$2[rbp-48], ecx
	movzx	ecx, BYTE PTR [rdi+13]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+14]
	mov	DWORD PTR diff$2[rbp-44], ecx
	movzx	ecx, BYTE PTR [rdi+14]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+15]
	mov	DWORD PTR diff$2[rbp-40], ecx
	movzx	ecx, BYTE PTR [rdi+15]
	sub	ecx, eax
	mov	DWORD PTR diff$2[rbp-36], ecx

; 206  :   }
; 207  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$2[rbp-96]
	call	hadamard_4x4_generic

; 395  :   costs_out[0] = satd_4x4_generic(orig, preds[0]);

	mov	DWORD PTR [rsi], eax

; 205  :     diff[i] = piOrg[i] - piCur[i];

	movzx	eax, BYTE PTR [rbx+1024]
	movzx	ecx, BYTE PTR [rdi]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1025]
	mov	DWORD PTR diff$1[rbp-96], ecx
	movzx	ecx, BYTE PTR [rdi+1]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1026]
	mov	DWORD PTR diff$1[rbp-92], ecx
	movzx	ecx, BYTE PTR [rdi+2]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1027]
	mov	DWORD PTR diff$1[rbp-88], ecx
	movzx	ecx, BYTE PTR [rdi+3]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1028]
	mov	DWORD PTR diff$1[rbp-84], ecx
	movzx	ecx, BYTE PTR [rdi+4]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1029]
	mov	DWORD PTR diff$1[rbp-80], ecx
	movzx	ecx, BYTE PTR [rdi+5]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1030]
	mov	DWORD PTR diff$1[rbp-76], ecx
	movzx	ecx, BYTE PTR [rdi+6]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1031]
	mov	DWORD PTR diff$1[rbp-72], ecx
	movzx	ecx, BYTE PTR [rdi+7]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1032]
	mov	DWORD PTR diff$1[rbp-68], ecx
	movzx	ecx, BYTE PTR [rdi+8]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1033]
	mov	DWORD PTR diff$1[rbp-64], ecx
	movzx	ecx, BYTE PTR [rdi+9]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1034]
	mov	DWORD PTR diff$1[rbp-60], ecx
	movzx	ecx, BYTE PTR [rdi+10]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1035]
	mov	DWORD PTR diff$1[rbp-56], ecx
	movzx	ecx, BYTE PTR [rdi+11]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1036]
	mov	DWORD PTR diff$1[rbp-52], ecx
	movzx	ecx, BYTE PTR [rdi+12]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1037]
	mov	DWORD PTR diff$1[rbp-48], ecx
	movzx	ecx, BYTE PTR [rdi+13]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1038]
	mov	DWORD PTR diff$1[rbp-44], ecx
	movzx	ecx, BYTE PTR [rdi+14]
	sub	ecx, eax
	movzx	eax, BYTE PTR [rbx+1039]
	mov	DWORD PTR diff$1[rbp-40], ecx
	movzx	ecx, BYTE PTR [rdi+15]
	sub	ecx, eax
	mov	DWORD PTR diff$1[rbp-36], ecx

; 206  :   }
; 207  :   return hadamard_4x4_generic(diff);

	lea	rcx, QWORD PTR diff$1[rbp-96]
	call	hadamard_4x4_generic

; 396  :   costs_out[1] = satd_4x4_generic(orig, preds[1]);
; 397  : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rdi, QWORD PTR [rsp+128]
	mov	DWORD PTR [rsi+4], eax
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 96					; 00000060H
	pop	rbp
	ret	0
satd_4x4_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 48
orig$ = 56
num_modes$ = 64
costs_out$ = 72
satd_8x8_dual_generic PROC

; 399  : SATD_DUAL_NXN(8, kvz_pixel)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	rdi, rdx
	mov	r9d, 8
	mov	r8, rdx
	mov	edx, r9d
	mov	rbx, rcx
	call	satd_8x8_subblock_generic
	mov	r9d, 8
	mov	DWORD PTR [rsi], eax
	mov	edx, r9d
	lea	rcx, QWORD PTR [rbx+1024]
	mov	r8, rdi
	call	satd_8x8_subblock_generic
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rsi+4], eax
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
satd_8x8_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 64
orig$ = 72
num_modes$ = 80
costs_out$ = 88
satd_16x16_dual_generic PROC

; 400  : SATD_DUAL_NXN(16, kvz_pixel)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r12, r9
	xor	esi, esi
	mov	r14, rdx
	mov	r15, rcx
	npad	5
$LL4@satd_16x16:
	mov	edi, esi
	add	edi, edi
	xor	ebx, ebx
	npad	10
$LL7@satd_16x16:
	lea	eax, DWORD PTR [rbx+rdi*8]
	mov	edx, 16
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 16
	jb	SHORT $LL7@satd_16x16
	add	esi, 8
	cmp	esi, 16
	jb	SHORT $LL4@satd_16x16
	mov	DWORD PTR [r12], ebp
	xor	ebp, ebp
	xor	esi, esi
	npad	13
$LL10@satd_16x16:
	mov	edi, esi
	add	edi, edi
	xor	ebx, ebx
	npad	10
$LL13@satd_16x16:
	lea	eax, DWORD PTR [rbx+rdi*8]
	mov	edx, 16
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, 1024				; 00000400H
	mov	r9d, edx
	add	rcx, r15
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 16
	jb	SHORT $LL13@satd_16x16
	add	esi, 8
	cmp	esi, 16
	jb	SHORT $LL10@satd_16x16
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	mov	DWORD PTR [r12+4], ebp
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
satd_16x16_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 64
orig$ = 72
num_modes$ = 80
costs_out$ = 88
satd_32x32_dual_generic PROC

; 401  : SATD_DUAL_NXN(32, kvz_pixel)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r12, r9
	xor	esi, esi
	mov	r14, rdx
	mov	r15, rcx
	npad	5
$LL4@satd_32x32:
	mov	edi, esi
	shl	edi, 5
	xor	ebx, ebx
	npad	9
$LL7@satd_32x32:
	lea	eax, DWORD PTR [rbx+rdi]
	mov	edx, 32					; 00000020H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 32					; 00000020H
	jb	SHORT $LL7@satd_32x32
	add	esi, 8
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL4@satd_32x32
	mov	DWORD PTR [r12], ebp
	xor	ebp, ebp
	xor	esi, esi
	npad	13
$LL10@satd_32x32:
	mov	edi, esi
	shl	edi, 5
	xor	ebx, ebx
	npad	9
$LL13@satd_32x32:
	lea	eax, DWORD PTR [rdi+rbx]
	mov	edx, 32					; 00000020H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, 1024				; 00000400H
	mov	r9d, edx
	add	rcx, r15
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 32					; 00000020H
	jb	SHORT $LL13@satd_32x32
	add	esi, 8
	cmp	esi, 32					; 00000020H
	jb	SHORT $LL10@satd_32x32
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	mov	DWORD PTR [r12+4], ebp
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
satd_32x32_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 64
orig$ = 72
num_modes$ = 80
costs_out$ = 88
satd_64x64_dual_generic PROC

; 402  : SATD_DUAL_NXN(64, kvz_pixel)

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	ebp, ebp
	mov	r12, r9
	xor	esi, esi
	mov	r14, rdx
	mov	r15, rcx
	npad	5
$LL4@satd_64x64:
	mov	edi, esi
	shl	edi, 6
	xor	ebx, ebx
	npad	9
$LL7@satd_64x64:
	lea	eax, DWORD PTR [rbx+rdi]
	mov	edx, 64					; 00000040H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, r15
	mov	r9d, edx
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 64					; 00000040H
	jb	SHORT $LL7@satd_64x64
	add	esi, 8
	cmp	esi, 64					; 00000040H
	jb	SHORT $LL4@satd_64x64
	mov	DWORD PTR [r12], ebp
	xor	ebp, ebp
	xor	esi, esi
	npad	13
$LL10@satd_64x64:
	mov	edi, esi
	shl	edi, 6
	xor	ebx, ebx
	npad	9
$LL13@satd_64x64:
	lea	eax, DWORD PTR [rdi+rbx]
	mov	edx, 64					; 00000040H
	mov	ecx, eax
	lea	r8, QWORD PTR [rax+r14]
	add	rcx, 1024				; 00000400H
	mov	r9d, edx
	add	rcx, r15
	call	satd_8x8_subblock_generic
	add	ebp, eax
	add	ebx, 8
	cmp	ebx, 64					; 00000040H
	jb	SHORT $LL13@satd_64x64
	add	esi, 8
	cmp	esi, 64					; 00000040H
	jb	SHORT $LL10@satd_64x64
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	mov	DWORD PTR [r12+4], ebp
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
satd_64x64_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
tv1580 = 48
tv1582 = 56
sums$ = 64
pred_ptrs$ = 80
width$ = 192
height$ = 200
preds$ = 208
stride$ = 216
orig$ = 224
orig_stride$ = 232
num_modes$ = 240
tv1581 = 248
costs_out$ = 248
valid$ = 256
satd_any_size_quad_generic PROC

; 468  : SATD_ANY_SIZE_MULTI_GENERIC(quad_generic, 4)

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 136				; 00000088H
	mov	r15, QWORD PTR costs_out$[rsp]
	mov	rdi, r8
	mov	r8d, ecx
	movaps	XMMWORD PTR [rsp+112], xmm6
	mov	rcx, QWORD PTR orig$[rsp]
	xorps	xmm0, xmm0
	movd	xmm6, r9d
	mov	r12d, r9d
	mov	rax, QWORD PTR [rdi]
	mov	esi, edx
	mov	QWORD PTR pred_ptrs$[rsp], rax
	mov	rbp, rcx
	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR pred_ptrs$[rsp+8], rax
	mov	rax, QWORD PTR [rdi+16]
	mov	QWORD PTR pred_ptrs$[rsp+16], rax
	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR pred_ptrs$[rsp+24], rax
	mov	eax, r8d
	pshufd	xmm6, xmm6, 0
	movups	XMMWORD PTR sums$[rsp], xmm0
	movups	XMMWORD PTR [r15], xmm0
	and	eax, -2147483641			; ffffffff80000007H
	jge	SHORT $LN123@satd_any_s
	dec	eax
	or	eax, -8
	inc	eax
$LN123@satd_any_s:
	mov	r13d, DWORD PTR orig_stride$[rsp]
	xor	r10d, r10d
	mov	QWORD PTR [rsp+200], rbx
	test	eax, eax
	je	$LN23@satd_any_s
	test	esi, esi
	jle	SHORT $LN3@satd_any_s
	lea	ebx, DWORD PTR [rdx-1]
	mov	r15, rcx
	shr	ebx, 2
	inc	ebx
$LL4@satd_any_s:
	lea	rax, QWORD PTR sums$[rsp]
	mov	r9d, r13d
	mov	r8, r15
	mov	QWORD PTR [rsp+32], rax
	mov	edx, r12d
	mov	rcx, rdi
	call	kvz_satd_4x4_subblock_quad_generic
	sub	rbx, 1
	jne	SHORT $LL4@satd_any_s
	mov	r15, QWORD PTR costs_out$[rsp]
	mov	rcx, rbp
	mov	r8d, DWORD PTR width$[rsp]
	xor	r10d, r10d
$LN3@satd_any_s:
	movdqa	xmm2, XMMWORD PTR __xmm@00000000000000040000000000000004
	lea	rbp, QWORD PTR [rcx+4]
	mov	rax, r10
	npad	10
$LL7@satd_any_s:
	movdqu	xmm0, XMMWORD PTR pred_ptrs$[rsp+rax*8]
	movdqa	xmm1, xmm2
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR pred_ptrs$[rsp+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL7@satd_any_s
	sub	r8d, 4
	mov	DWORD PTR width$[rsp], r8d
$LN23@satd_any_s:
	mov	eax, esi
	and	eax, -2147483641			; ffffffff80000007H
	jge	SHORT $LN122@satd_any_s
	dec	eax
	or	eax, -8
	inc	eax
$LN122@satd_any_s:
	mov	r9d, DWORD PTR __isa_available
	test	eax, eax
	je	$LN24@satd_any_s
	test	r8d, r8d
	jle	SHORT $LN9@satd_any_s
	lea	ebx, DWORD PTR [r8-1]
	shr	ebx, 2
	inc	ebx
	npad	9
$LL10@satd_any_s:
	lea	rax, QWORD PTR sums$[rsp]
	mov	r9d, r13d
	mov	r8, rbp
	mov	QWORD PTR [rsp+32], rax
	mov	edx, r12d
	lea	rcx, QWORD PTR pred_ptrs$[rsp]
	call	kvz_satd_4x4_subblock_quad_generic
	sub	rbx, 1
	jne	SHORT $LL10@satd_any_s
	mov	r8d, DWORD PTR width$[rsp]
	xor	r10d, r10d
	mov	r9d, DWORD PTR __isa_available
$LN9@satd_any_s:
	cmp	r9d, 2
	jl	SHORT $LN66@satd_any_s
	mov	ecx, 2
	mov	rax, r10
	movd	xmm3, ecx
	npad	9
$LL13@satd_any_s:
	movq	xmm0, xmm3
	movq	xmm1, xmm6
	pslld	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR pred_ptrs$[rsp+rax*8]
	pmovsxdq xmm2, xmm1
	paddq	xmm2, xmm0
	movdqu	XMMWORD PTR pred_ptrs$[rsp+rax*8], xmm2
	add	rax, rcx
	cmp	rax, 4
	jl	SHORT $LL13@satd_any_s
	jmp	SHORT $LN12@satd_any_s
$LN66@satd_any_s:
	mov	rcx, r10
	cmp	r10, 4
	jae	SHORT $LN12@satd_any_s
	lea	eax, DWORD PTR [r12*4]
	movsxd	rdx, eax
$LL65@satd_any_s:
	add	QWORD PTR pred_ptrs$[rsp+rcx*8], rdx
	inc	rcx
	cmp	rcx, 4
	jl	SHORT $LL65@satd_any_s
$LN12@satd_any_s:
	mov	rcx, QWORD PTR orig$[rsp]
	sub	esi, 4
$LN24@satd_any_s:
	test	esi, esi
	jle	$LN15@satd_any_s
	lea	edx, DWORD PTR [rsi-1]
	mov	QWORD PTR [rsp+128], r14
	shr	edx, 3
	lea	eax, DWORD PTR [r12*8]
	cdqe
	inc	edx
	mov	QWORD PTR tv1582[rsp], rax
	mov	ebp, r10d
	lea	eax, DWORD PTR [r13*8]
	mov	QWORD PTR tv1581[rsp], rdx
	cdqe
	mov	r14, r10
	mov	QWORD PTR tv1580[rsp], rax
	npad	3
$LL16@satd_any_s:
	mov	rsi, rcx
	mov	rdx, r10
	cmp	r9d, 2
	jl	SHORT $LL130@satd_any_s
	movd	xmm3, ebp
	mov	rax, r10
	pshufd	xmm3, xmm3, 0
	npad	8
$LL44@satd_any_s:
	movdqu	xmm1, XMMWORD PTR [rdi+rax*8]
	movq	xmm0, xmm3
	pmovsxdq xmm2, xmm0
	paddq	xmm2, xmm1
	movdqu	XMMWORD PTR pred_ptrs$[rsp+rax*8], xmm2
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL44@satd_any_s
	jmp	SHORT $LN45@satd_any_s
	npad	12
$LL130@satd_any_s:
	mov	rcx, QWORD PTR [rdi+rdx*8]
	add	rcx, r14
	mov	QWORD PTR pred_ptrs$[rsp+rdx*8], rcx
	inc	rdx
	cmp	rdx, 4
	jl	SHORT $LL130@satd_any_s
	mov	rcx, QWORD PTR orig$[rsp]
$LN45@satd_any_s:
	test	r8d, r8d
	jle	$LN14@satd_any_s
	movdqa	xmm6, XMMWORD PTR __xmm@00000000000000080000000000000008
	lea	ebx, DWORD PTR [r8-1]
	shr	ebx, 3
	inc	ebx
	xor	edi, edi
	npad	7
$LL19@satd_any_s:

; 348  :   costs[0] = satd_8x8_subblock_generic(orig, orig_stride, preds[0], stride);

	mov	r8, QWORD PTR pred_ptrs$[rsp]
	mov	r9d, r12d
	mov	edx, r13d
	mov	rcx, rsi
	call	satd_8x8_subblock_generic

; 349  :   costs[1] = satd_8x8_subblock_generic(orig, orig_stride, preds[1], stride);

	mov	r8, QWORD PTR pred_ptrs$[rsp+8]
	mov	r9d, r12d
	mov	edx, r13d
	mov	DWORD PTR sums$[rsp], eax
	mov	rcx, rsi
	call	satd_8x8_subblock_generic

; 350  :   costs[2] = satd_8x8_subblock_generic(orig, orig_stride, preds[2], stride);

	mov	r8, QWORD PTR pred_ptrs$[rsp+16]
	mov	r9d, r12d
	mov	edx, r13d
	mov	DWORD PTR sums$[rsp+4], eax
	mov	rcx, rsi
	call	satd_8x8_subblock_generic

; 351  :   costs[3] = satd_8x8_subblock_generic(orig, orig_stride, preds[3], stride);

	mov	r8, QWORD PTR pred_ptrs$[rsp+24]
	mov	r9d, r12d
	mov	edx, r13d
	mov	DWORD PTR sums$[rsp+8], eax
	mov	rcx, rsi
	call	satd_8x8_subblock_generic
	mov	DWORD PTR sums$[rsp+12], eax

; 468  : SATD_ANY_SIZE_MULTI_GENERIC(quad_generic, 4)

	add	rsi, 8

; 348  :   costs[0] = satd_8x8_subblock_generic(orig, orig_stride, preds[0], stride);

	mov	rax, rdi
	npad	13
$LL46@satd_any_s:

; 468  : SATD_ANY_SIZE_MULTI_GENERIC(quad_generic, 4)

	movdqu	xmm0, XMMWORD PTR pred_ptrs$[rsp+rax*8]
	movdqa	xmm1, xmm6
	paddq	xmm1, xmm0
	movdqu	XMMWORD PTR pred_ptrs$[rsp+rax*8], xmm1
	add	rax, 2
	cmp	rax, 4
	jl	SHORT $LL46@satd_any_s
	movdqu	xmm0, XMMWORD PTR [r15]
	movdqu	xmm1, XMMWORD PTR sums$[rsp]
	paddd	xmm1, xmm0
	movdqu	XMMWORD PTR [r15], xmm1
	sub	rbx, 1
	jne	$LL19@satd_any_s
	mov	rdi, QWORD PTR preds$[rsp]
	xor	r10d, r10d
	mov	rcx, QWORD PTR orig$[rsp]
	mov	r8d, DWORD PTR width$[rsp]
	mov	r9d, DWORD PTR __isa_available
$LN14@satd_any_s:
	add	rcx, QWORD PTR tv1580[rsp]
	lea	eax, DWORD PTR [r12*8]
	add	r14, QWORD PTR tv1582[rsp]
	add	ebp, eax
	sub	QWORD PTR tv1581[rsp], 1
	mov	QWORD PTR orig$[rsp], rcx
	jne	$LL16@satd_any_s
	mov	r14, QWORD PTR [rsp+128]
$LN15@satd_any_s:
	mov	rbx, QWORD PTR [rsp+200]
	movaps	xmm6, XMMWORD PTR [rsp+112]
	add	rsp, 136				; 00000088H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
satd_any_size_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
sad_4x4_generic PROC

; 494  : SAD_NXN(4, kvz_pixel)

	movdqu	xmm0, XMMWORD PTR [rdx]
	movdqu	xmm1, XMMWORD PTR [rcx]
	psadbw	xmm1, xmm0
	movdqa	xmm0, xmm1
	psrldq	xmm0, 8
	paddd	xmm1, xmm0
	movd	eax, xmm1
	ret	0
sad_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
sad_8x8_generic PROC

; 495  : SAD_NXN(8, kvz_pixel)

	lea	rax, QWORD PTR [rdx+16]
	sub	rcx, rdx
	mov	edx, 2
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	npad	14
$LL4@sad_8x8_ge:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rcx+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL4@sad_8x8_ge
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	ret	0
sad_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
sad_16x16_generic PROC

; 496  : SAD_NXN(16, kvz_pixel)

	lea	rax, QWORD PTR [rdx+16]
	sub	rcx, rdx
	mov	edx, 8
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	npad	14
$LL4@sad_16x16_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rcx+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL4@sad_16x16_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	ret	0
sad_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
sad_32x32_generic PROC

; 497  : SAD_NXN(32, kvz_pixel)

	lea	rax, QWORD PTR [rdx+16]
	sub	rcx, rdx
	mov	edx, 32					; 00000020H
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	npad	14
$LL4@sad_32x32_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rcx+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL4@sad_32x32_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	ret	0
sad_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
block1$ = 8
block2$ = 16
sad_64x64_generic PROC

; 498  : SAD_NXN(64, kvz_pixel)

	lea	rax, QWORD PTR [rdx+16]
	sub	rcx, rdx
	mov	edx, 128				; 00000080H
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	npad	14
$LL4@sad_64x64_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rcx+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL4@sad_64x64_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	ret	0
sad_64x64_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 8
orig$ = 16
num_modes$ = 24
costs_out$ = 32
sad_4x4_dual_generic PROC

; 527  : SAD_DUAL_NXN(4, kvz_pixel)

	movdqu	xmm0, XMMWORD PTR [rdx]
	movdqu	xmm1, XMMWORD PTR [rcx]
	psadbw	xmm1, xmm0
	movdqa	xmm0, xmm1
	psrldq	xmm0, 8
	paddd	xmm1, xmm0
	movd	DWORD PTR [r9], xmm1
	movdqu	xmm0, XMMWORD PTR [rdx]
	movdqu	xmm1, XMMWORD PTR [rcx+1024]
	psadbw	xmm1, xmm0
	movdqa	xmm0, xmm1
	psrldq	xmm0, 8
	paddd	xmm1, xmm0
	movd	DWORD PTR [r9+4], xmm1
	ret	0
sad_4x4_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 8
orig$ = 16
num_modes$ = 24
costs_out$ = 32
sad_8x8_dual_generic PROC

; 528  : SAD_DUAL_NXN(8, kvz_pixel)

	mov	r8, rcx
	lea	rax, QWORD PTR [rdx+16]
	mov	r10d, 2
	mov	r11, r9
	sub	r8, rdx
	mov	r9d, r10d
	xorps	xmm3, xmm3
	xorps	xmm4, xmm4
	xorps	xmm2, xmm2
	npad	1
$LL4@sad_8x8_du:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [r8+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm4
	movdqa	xmm4, xmm1
	movdqu	xmm1, XMMWORD PTR [r8+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r9, 1
	jne	SHORT $LL4@sad_8x8_du
	paddd	xmm2, xmm4
	lea	rax, QWORD PTR [rcx+1024]
	movdqa	xmm0, xmm2
	sub	rdx, rcx
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11], xmm2
	movdqa	xmm2, xmm3
	npad	2
$LL7@sad_8x8_du:
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1024]
	movdqu	xmm1, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1040]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax-16]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r10, 1
	jne	SHORT $LL7@sad_8x8_du
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11+4], xmm2
	ret	0
sad_8x8_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 8
orig$ = 16
num_modes$ = 24
costs_out$ = 32
sad_16x16_dual_generic PROC

; 529  : SAD_DUAL_NXN(16, kvz_pixel)

	mov	r8, rcx
	lea	rax, QWORD PTR [rdx+16]
	mov	r10d, 8
	mov	r11, r9
	sub	r8, rdx
	mov	r9d, r10d
	xorps	xmm3, xmm3
	xorps	xmm4, xmm4
	xorps	xmm2, xmm2
	npad	1
$LL4@sad_16x16_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [r8+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm4
	movdqa	xmm4, xmm1
	movdqu	xmm1, XMMWORD PTR [r8+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r9, 1
	jne	SHORT $LL4@sad_16x16_
	paddd	xmm2, xmm4
	lea	rax, QWORD PTR [rcx+1024]
	movdqa	xmm0, xmm2
	sub	rdx, rcx
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11], xmm2
	movdqa	xmm2, xmm3
	npad	2
$LL7@sad_16x16_:
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1024]
	movdqu	xmm1, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1040]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax-16]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r10, 1
	jne	SHORT $LL7@sad_16x16_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11+4], xmm2
	ret	0
sad_16x16_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 8
orig$ = 16
num_modes$ = 24
costs_out$ = 32
sad_32x32_dual_generic PROC

; 530  : SAD_DUAL_NXN(32, kvz_pixel)

	mov	r8, rcx
	lea	rax, QWORD PTR [rdx+16]
	mov	r10d, 32				; 00000020H
	mov	r11, r9
	sub	r8, rdx
	mov	r9d, r10d
	xorps	xmm3, xmm3
	xorps	xmm4, xmm4
	xorps	xmm2, xmm2
	npad	1
$LL4@sad_32x32_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [r8+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm4
	movdqa	xmm4, xmm1
	movdqu	xmm1, XMMWORD PTR [r8+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r9, 1
	jne	SHORT $LL4@sad_32x32_
	paddd	xmm2, xmm4
	lea	rax, QWORD PTR [rcx+1024]
	movdqa	xmm0, xmm2
	sub	rdx, rcx
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11], xmm2
	movdqa	xmm2, xmm3
	npad	2
$LL7@sad_32x32_:
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1024]
	movdqu	xmm1, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1040]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax-16]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r10, 1
	jne	SHORT $LL7@sad_32x32_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11+4], xmm2
	ret	0
sad_32x32_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
preds$ = 8
orig$ = 16
num_modes$ = 24
costs_out$ = 32
sad_64x64_dual_generic PROC

; 531  : SAD_DUAL_NXN(64, kvz_pixel)

	mov	r8, rcx
	lea	rax, QWORD PTR [rdx+16]
	mov	r10d, 128				; 00000080H
	mov	r11, r9
	sub	r8, rdx
	mov	r9d, r10d
	xorps	xmm3, xmm3
	xorps	xmm4, xmm4
	xorps	xmm2, xmm2
	npad	1
$LL4@sad_64x64_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [r8+rax-16]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	paddd	xmm1, xmm4
	movdqa	xmm4, xmm1
	movdqu	xmm1, XMMWORD PTR [r8+rax-32]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r9, 1
	jne	SHORT $LL4@sad_64x64_
	paddd	xmm2, xmm4
	lea	rax, QWORD PTR [rcx+1024]
	movdqa	xmm0, xmm2
	sub	rdx, rcx
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11], xmm2
	movdqa	xmm2, xmm3
	npad	2
$LL7@sad_64x64_:
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1024]
	movdqu	xmm1, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rax+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rdx+rax-1040]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax-16]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	sub	r10, 1
	jne	SHORT $LL7@sad_64x64_
	paddd	xmm2, xmm3
	movdqa	xmm0, xmm2
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	DWORD PTR [r11+4], xmm2
	ret	0
sad_64x64_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
tv1201 = 0
tv1195 = 8
tv1194 = 16
ref$ = 80
rec$ = 88
ref_stride$ = 96
rec_stride$ = 104
width$ = 112
pixels_calc_ssd_generic PROC

; 536  : {

	push	rsi
	push	r12
	push	r13
	push	r15
	sub	rsp, 40					; 00000028H
	movsxd	r12, DWORD PTR width$[rsp]

; 537  :   int ssd = 0;

	xor	esi, esi
	mov	r13, rdx
	mov	r15, rcx

; 538  :   int y, x;
; 539  : 
; 540  :   for (y = 0; y < width; ++y) {

	test	r12d, r12d
	jle	$LN26@pixels_cal

; 537  :   int ssd = 0;

	mov	QWORD PTR [rsp+80], rbx
	xorps	xmm4, xmm4
	movsxd	rax, r8d
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+88], rbp
	mov	QWORD PTR [rsp+96], rdi
	xor	edi, edi
	mov	QWORD PTR tv1195[rsp], rax
	movsxd	rax, r9d
	mov	ecx, r12d
	mov	QWORD PTR [rsp+32], r14
	xor	r14d, r14d
	mov	QWORD PTR tv1194[rsp], rax
	mov	QWORD PTR tv1201[rsp], rcx
	npad	8
$LL4@pixels_cal:

; 541  :     for (x = 0; x < width; ++x) {

	xor	eax, eax
	cmp	r12d, 8
	jb	$LN14@pixels_cal
	cmp	DWORD PTR __isa_available, 2
	jl	SHORT $LN14@pixels_cal
	mov	rcx, r12

; 542  :       int diff = ref[x + y * ref_stride] - rec[x + y * rec_stride];

	lea	rdx, QWORD PTR [r14+r13]
	and	rcx, -8
	lea	r8, QWORD PTR [rdi+r15]
	xor	r9d, r9d
	npad	9
$LL7@pixels_cal:
	movd	xmm0, DWORD PTR [r8]
	lea	r8, QWORD PTR [r8+8]
	movd	xmm1, DWORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+8]
	pmovzxbd xmm2, xmm0
	pmovzxbd xmm0, xmm1
	movd	xmm1, DWORD PTR [rdx-4]
	psubd	xmm2, xmm0
	movd	xmm0, DWORD PTR [r8-4]
	add	eax, 8

; 543  :       ssd += diff * diff;

	pmulld	xmm2, xmm2
	paddd	xmm2, xmm4
	add	r9, 8
	movdqa	xmm4, xmm2
	pmovzxbd xmm2, xmm0
	pmovzxbd xmm0, xmm1
	psubd	xmm2, xmm0
	pmulld	xmm2, xmm2
	paddd	xmm2, xmm3
	movdqa	xmm3, xmm2
	cmp	r9, rcx
	jl	SHORT $LL7@pixels_cal
	mov	rcx, QWORD PTR tv1201[rsp]
$LN14@pixels_cal:
	xor	r10d, r10d

; 541  :     for (x = 0; x < width; ++x) {

	movsxd	r9, eax
	xor	r11d, r11d
	cmp	r9, r12
	jge	$LN2@pixels_cal
	mov	rax, r12
	sub	rax, r9
	cmp	rax, 2
	jl	SHORT $LC20@pixels_cal

; 542  :       int diff = ref[x + y * ref_stride] - rec[x + y * rec_stride];

	mov	rbx, r14
	lea	rax, QWORD PTR [rdi+1]
	sub	rbx, rdi
	add	rax, r9
	sub	rbx, r15
	mov	r8, r12
	sub	r8, r9
	add	rbx, r13
	sub	r8, 2
	add	rax, r15
	shr	r8, 1
	inc	r8
	lea	r9, QWORD PTR [r9+r8*2]
	npad	6
$LL22@pixels_cal:
	movzx	ecx, BYTE PTR [rax+rbx-1]
	movzx	edx, BYTE PTR [rax-1]

; 543  :       ssd += diff * diff;

	lea	rax, QWORD PTR [rax+2]
	sub	edx, ecx
	movzx	ecx, BYTE PTR [rax+rbx-2]
	imul	edx, edx
	add	r10d, edx
	movzx	edx, BYTE PTR [rax-2]
	sub	edx, ecx
	imul	edx, edx
	add	r11d, edx
	sub	r8, 1
	jne	SHORT $LL22@pixels_cal

; 541  :     for (x = 0; x < width; ++x) {

	cmp	r9, r12
	jge	SHORT $LN21@pixels_cal
$LC20@pixels_cal:

; 542  :       int diff = ref[x + y * ref_stride] - rec[x + y * rec_stride];

	lea	rax, QWORD PTR [rdi+r9]
	movzx	edx, BYTE PTR [rax+r15]
	lea	rax, QWORD PTR [r14+r9]
	movzx	ecx, BYTE PTR [rax+r13]
	sub	edx, ecx

; 543  :       ssd += diff * diff;

	imul	edx, edx
	add	esi, edx
$LN21@pixels_cal:
	mov	rcx, QWORD PTR tv1201[rsp]
	lea	eax, DWORD PTR [r11+r10]
	add	esi, eax
$LN2@pixels_cal:

; 538  :   int y, x;
; 539  : 
; 540  :   for (y = 0; y < width; ++y) {

	add	rdi, QWORD PTR tv1195[rsp]
	add	r14, QWORD PTR tv1194[rsp]
	sub	rcx, 1
	mov	QWORD PTR tv1201[rsp], rcx
	jne	$LL4@pixels_cal

; 544  :     }
; 545  :   }
; 546  : 
; 547  :   return ssd >> (2*(KVZ_BIT_DEPTH-8));

	mov	r14, QWORD PTR [rsp+32]
	paddd	xmm3, xmm4
	mov	rdi, QWORD PTR [rsp+96]
	movdqa	xmm0, xmm3
	mov	rbp, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	psrldq	xmm0, 8
	paddd	xmm3, xmm0
	movdqa	xmm0, xmm3
	psrldq	xmm0, 4
	paddd	xmm3, xmm0
	movd	eax, xmm3
	add	eax, esi

; 548  : }

	add	rsp, 40					; 00000028H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	ret	0
$LN26@pixels_cal:

; 544  :     }
; 545  :   }
; 546  : 
; 547  :   return ssd >> (2*(KVZ_BIT_DEPTH-8));

	mov	eax, esi

; 548  : }

	add	rsp, 40					; 00000028H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	ret	0
pixels_calc_ssd_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
dst$ = 8
px_L0$ = 16
px_L1$ = 24
pu_w$ = 32
pu_h$ = 40
dst_stride$ = 48
bipred_average_px_px PROC

; 556  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 557  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines
; 558  :   int32_t offset = 1 << (shift - 1);
; 559  : 
; 560  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	ebx, r9d
	xor	r10d, r10d
	imul	ebx, DWORD PTR pu_h$[rsp]
	mov	ebp, r9d
	mov	r11, r8
	mov	rdi, rdx
	mov	rsi, rcx
	test	ebx, ebx
	je	SHORT $LN3@bipred_ave
	mov	r9d, DWORD PTR dst_stride$[rsp]
	sub	rdi, r8
	npad	9
$LL4@bipred_ave:

; 561  :   {
; 562  :     int y = i / pu_w;
; 563  :     int x = i % pu_w;
; 564  :     int16_t sample_L0 = px_L0[i] << (14 - KVZ_BIT_DEPTH);
; 565  :     int16_t sample_L1 = px_L1[i] << (14 - KVZ_BIT_DEPTH);
; 566  :     int32_t rounded = (sample_L0 + sample_L1 + offset) >> shift;

	movzx	ecx, BYTE PTR [r11]
	xor	edx, edx
	movzx	r8d, BYTE PTR [rdi+r11]
	mov	eax, r10d
	shl	ecx, 6
	add	ecx, 64					; 00000040H
	shl	r8d, 6
	add	ecx, r8d
	shr	ecx, 7
	div	ebp

; 69   :   if (value & ~PIXEL_MAX) {

	test	ecx, -256				; ffffff00H
	je	SHORT $LN7@bipred_ave

; 70   :     int32_t temp = (-value) >> 31;

	neg	ecx
	sar	ecx, 31
$LN7@bipred_ave:

; 567  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	imul	eax, r9d
	inc	r10d
	inc	r11
	add	eax, edx
	mov	BYTE PTR [rax+rsi], cl
	cmp	r10d, ebx
	jb	SHORT $LL4@bipred_ave
$LN3@bipred_ave:

; 568  :   }
; 569  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
bipred_average_px_px ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
dst$ = 8
im_L0$ = 16
im_L1$ = 24
pu_w$ = 32
pu_h$ = 40
dst_stride$ = 48
bipred_average_im_im PROC

; 577  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 578  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines
; 579  :   int32_t offset = 1 << (shift - 1);
; 580  : 
; 581  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	ebx, r9d
	xor	r10d, r10d
	imul	ebx, DWORD PTR pu_h$[rsp]
	mov	ebp, r9d
	mov	r11, r8
	mov	rdi, rdx
	mov	rsi, rcx
	test	ebx, ebx
	je	SHORT $LN3@bipred_ave
	mov	r9d, DWORD PTR dst_stride$[rsp]
	sub	rdi, r8
	npad	9
$LL4@bipred_ave:

; 582  :   {
; 583  :     int y = i / pu_w;
; 584  :     int x = i % pu_w;
; 585  :     int16_t sample_L0 = im_L0[i];
; 586  :     int16_t sample_L1 = im_L1[i];
; 587  :     int32_t rounded = (sample_L0 + sample_L1 + offset) >> shift;

	movsx	ecx, WORD PTR [r11]
	xor	edx, edx
	movsx	r8d, WORD PTR [rdi+r11]
	add	ecx, 64					; 00000040H
	add	ecx, r8d
	mov	eax, r10d
	sar	ecx, 7
	div	ebp

; 69   :   if (value & ~PIXEL_MAX) {

	test	ecx, -256				; ffffffffffffff00H
	je	SHORT $LN7@bipred_ave

; 70   :     int32_t temp = (-value) >> 31;

	neg	ecx
	sar	ecx, 31
$LN7@bipred_ave:

; 588  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	imul	eax, r9d
	inc	r10d
	add	r11, 2
	add	eax, edx
	mov	BYTE PTR [rax+rsi], cl
	cmp	r10d, ebx
	jb	SHORT $LL4@bipred_ave
$LN3@bipred_ave:

; 589  :   }
; 590  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
bipred_average_im_im ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
dst$ = 8
px$ = 16
im$ = 24
pu_w$ = 32
pu_h$ = 40
dst_stride$ = 48
bipred_average_px_im PROC

; 598  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 599  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines
; 600  :   int32_t offset = 1 << (shift - 1);
; 601  : 
; 602  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	edi, r9d
	xor	r10d, r10d
	imul	edi, DWORD PTR pu_h$[rsp]
	mov	ebp, r9d
	mov	r11, r8
	mov	rbx, rdx
	mov	rsi, rcx
	test	edi, edi
	je	SHORT $LN3@bipred_ave
	mov	r9d, DWORD PTR dst_stride$[rsp]
	npad	12
$LL4@bipred_ave:

; 603  :   {
; 604  :     int y = i / pu_w;
; 605  :     int x = i % pu_w;
; 606  :     int16_t sample_px = px[i] << (14 - KVZ_BIT_DEPTH);
; 607  :     int16_t sample_im = im[i];
; 608  :     int32_t rounded = (sample_px + sample_im + offset) >> shift;

	movzx	ecx, BYTE PTR [rbx]
	xor	edx, edx
	movsx	r8d, WORD PTR [r11]
	inc	ecx
	shl	ecx, 6
	mov	eax, r10d
	add	ecx, r8d
	sar	ecx, 7
	div	ebp

; 69   :   if (value & ~PIXEL_MAX) {

	test	ecx, -256				; ffffffffffffff00H
	je	SHORT $LN7@bipred_ave

; 70   :     int32_t temp = (-value) >> 31;

	neg	ecx
	sar	ecx, 31
$LN7@bipred_ave:

; 609  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	imul	eax, r9d
	inc	r10d
	inc	rbx
	add	r11, 2
	add	eax, edx
	mov	BYTE PTR [rax+rsi], cl
	cmp	r10d, edi
	jb	SHORT $LL4@bipred_ave
$LN3@bipred_ave:

; 610  :   }
; 611  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
bipred_average_px_im ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
lcu$ = 96
px_L0$ = 104
px_L1$ = 112
im_L0$ = 120
im_L1$ = 128
pu_x$ = 136
pu_y$ = 144
pu_w$ = 152
pu_h$ = 160
im_flags_L0$ = 168
im_flags_L1$ = 176
predict_luma$ = 184
predict_chroma$ = 192
bipred_average_generic PROC

; 625  :   const bool predict_chroma) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 626  : 
; 627  :   //After reconstruction, merge the predictors by taking an average of each pixel
; 628  :   if (predict_luma) {

	cmp	BYTE PTR predict_luma$[rsp], 0
	mov	r15, rdx
	mov	edx, DWORD PTR im_flags_L1$[rsp]
	mov	rbp, r9
	mov	r13, QWORD PTR im_L1$[rsp]
	mov	r14, r8
	mov	ebx, DWORD PTR im_flags_L0$[rsp]
	mov	esi, DWORD PTR pu_h$[rsp]
	mov	edi, DWORD PTR pu_w$[rsp]
	mov	r12d, DWORD PTR pu_y$[rsp]
	je	$LN6@bipred_ave

; 629  :     unsigned pb_offset = SUB_SCU(pu_y) * LCU_WIDTH + SUB_SCU(pu_x);

	mov	eax, DWORD PTR pu_x$[rsp]
	mov	r9d, r12d
	and	eax, 63					; 0000003fH
	and	r9d, 63					; 0000003fH
	shl	r9d, 6
	add	r9d, eax
	mov	eax, ebx
	or	eax, edx
	test	al, 1

; 630  : 
; 631  :     if (!(im_flags_L0 & 1) && !(im_flags_L1 & 1)) {

	jne	SHORT $LN3@bipred_ave

; 632  :       bipred_average_px_px(lcu->rec.y + pb_offset, px_L0->y, px_L1->y, pu_w, pu_h, LCU_WIDTH);

	mov	r8, QWORD PTR [r8+8]
	add	rcx, 6540				; 0000198cH
	mov	rdx, QWORD PTR [r15+8]
	mov	eax, r9d
	mov	r9d, edi
	add	rcx, rax
	mov	DWORD PTR [rsp+40], 64			; 00000040H
	mov	DWORD PTR [rsp+32], esi
	call	bipred_average_px_px
	jmp	SHORT $LN25@bipred_ave
$LN3@bipred_ave:
	mov	eax, ebx
	and	eax, edx
	test	al, 1

; 633  : 
; 634  :     } else if ((im_flags_L0 & 1) && (im_flags_L1 & 1)) {

	je	SHORT $LN5@bipred_ave

; 635  :       bipred_average_im_im(lcu->rec.y + pb_offset, im_L0->y, im_L1->y, pu_w, pu_h, LCU_WIDTH);

	mov	r8, QWORD PTR [r13+8]
	add	rcx, 6540				; 0000198cH
	mov	rdx, QWORD PTR [rbp+8]
	mov	eax, r9d
	mov	r9d, edi
	add	rcx, rax
	mov	DWORD PTR [rsp+40], 64			; 00000040H
	mov	DWORD PTR [rsp+32], esi
	call	bipred_average_im_im

; 636  : 
; 637  :     } else {

	jmp	SHORT $LN25@bipred_ave
$LN5@bipred_ave:

; 638  :       kvz_pixel    *src_px = (im_flags_L0 & 1) ? px_L1->y : px_L0->y;

	test	bl, 1
	je	SHORT $LN13@bipred_ave
	mov	rdx, QWORD PTR [r8+8]

; 639  :       kvz_pixel_im *src_im = (im_flags_L0 & 1) ? im_L0->y : im_L1->y;

	mov	r8, QWORD PTR [rbp+8]
	jmp	SHORT $LN16@bipred_ave
$LN13@bipred_ave:

; 638  :       kvz_pixel    *src_px = (im_flags_L0 & 1) ? px_L1->y : px_L0->y;

	mov	rdx, QWORD PTR [r15+8]

; 639  :       kvz_pixel_im *src_im = (im_flags_L0 & 1) ? im_L0->y : im_L1->y;

	mov	r8, QWORD PTR [r13+8]
$LN16@bipred_ave:

; 640  :       bipred_average_px_im(lcu->rec.y + pb_offset, src_px, src_im, pu_w, pu_h, LCU_WIDTH);

	mov	eax, r9d
	add	rcx, 6540				; 0000198cH
	add	rcx, rax
	mov	DWORD PTR [rsp+40], 64			; 00000040H
	mov	r9d, edi
	mov	DWORD PTR [rsp+32], esi
	call	bipred_average_px_im
$LN25@bipred_ave:

; 641  :     }
; 642  :   }
; 643  :   if (predict_chroma) {

	mov	rcx, QWORD PTR lcu$[rsp]
	mov	edx, DWORD PTR im_flags_L1$[rsp]
$LN6@bipred_ave:
	cmp	BYTE PTR predict_chroma$[rsp], 0
	je	$LN11@bipred_ave

; 644  :     unsigned pb_offset = SUB_SCU(pu_y) / 2 * LCU_WIDTH_C + SUB_SCU(pu_x) / 2;

	mov	eax, DWORD PTR pu_x$[rsp]
	shr	r12d, 1
	shr	eax, 1
	and	r12d, 31
	and	eax, 31
	shl	r12d, 5
	add	r12d, eax

; 645  :     unsigned pb_w = pu_w / 2;

	shr	edi, 1
	mov	eax, ebx

; 646  :     unsigned pb_h = pu_h / 2;

	shr	esi, 1
	or	eax, edx
	test	al, 2

; 647  : 
; 648  :     if (!(im_flags_L0 & 2) && !(im_flags_L1 & 2)) {

	jne	SHORT $LN8@bipred_ave

; 649  :       bipred_average_px_px(lcu->rec.u + pb_offset, px_L0->u, px_L1->u, pb_w, pb_h, LCU_WIDTH_C);

	mov	r8, QWORD PTR [r14+16]
	mov	r9d, edi
	mov	rdx, QWORD PTR [r15+16]
	mov	ebx, r12d
	add	rbx, rcx
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	DWORD PTR [rsp+32], esi
	lea	rcx, QWORD PTR [rbx+10636]
	call	bipred_average_px_px

; 650  :       bipred_average_px_px(lcu->rec.v + pb_offset, px_L0->v, px_L1->v, pb_w, pb_h, LCU_WIDTH_C);

	mov	r8, QWORD PTR [r14+24]
	lea	rcx, QWORD PTR [rbx+11660]
	mov	rdx, QWORD PTR [r15+24]
	mov	r9d, edi
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	DWORD PTR [rsp+32], esi
	call	bipred_average_px_px
	jmp	$LN11@bipred_ave
$LN8@bipred_ave:
	mov	eax, ebx
	and	eax, edx
	test	al, 2

; 651  : 
; 652  :     } else if ((im_flags_L0 & 2) && (im_flags_L1 & 2)) {

	je	SHORT $LN10@bipred_ave

; 653  :       bipred_average_im_im(lcu->rec.u + pb_offset, im_L0->u, im_L1->u, pb_w, pb_h, LCU_WIDTH_C);

	mov	r8, QWORD PTR [r13+16]
	mov	r9d, edi
	mov	rdx, QWORD PTR [rbp+16]
	mov	ebx, r12d
	add	rbx, rcx
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	DWORD PTR [rsp+32], esi
	lea	rcx, QWORD PTR [rbx+10636]
	call	bipred_average_im_im

; 654  :       bipred_average_im_im(lcu->rec.v + pb_offset, im_L0->v, im_L1->v, pb_w, pb_h, LCU_WIDTH_C);

	mov	r8, QWORD PTR [r13+24]
	lea	rcx, QWORD PTR [rbx+11660]
	mov	rdx, QWORD PTR [rbp+24]
	mov	r9d, edi
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	DWORD PTR [rsp+32], esi
	call	bipred_average_im_im

; 655  : 
; 656  :     } else {

	jmp	SHORT $LN11@bipred_ave
$LN10@bipred_ave:

; 657  :       kvz_pixel    *src_px_u = (im_flags_L0 & 2) ? px_L1->u : px_L0->u;

	test	bl, 2
	je	SHORT $LN17@bipred_ave
	mov	rdx, QWORD PTR [r14+16]

; 658  :       kvz_pixel_im *src_im_u = (im_flags_L0 & 2) ? im_L0->u : im_L1->u;

	mov	r8, QWORD PTR [rbp+16]

; 659  :       kvz_pixel    *src_px_v = (im_flags_L0 & 2) ? px_L1->v : px_L0->v;

	mov	r14, QWORD PTR [r14+24]

; 660  :       kvz_pixel_im *src_im_v = (im_flags_L0 & 2) ? im_L0->v : im_L1->v;

	mov	rbp, QWORD PTR [rbp+24]
	jmp	SHORT $LN24@bipred_ave
$LN17@bipred_ave:

; 657  :       kvz_pixel    *src_px_u = (im_flags_L0 & 2) ? px_L1->u : px_L0->u;

	mov	rdx, QWORD PTR [r15+16]

; 658  :       kvz_pixel_im *src_im_u = (im_flags_L0 & 2) ? im_L0->u : im_L1->u;

	mov	r8, QWORD PTR [r13+16]

; 659  :       kvz_pixel    *src_px_v = (im_flags_L0 & 2) ? px_L1->v : px_L0->v;

	mov	r14, QWORD PTR [r15+24]

; 660  :       kvz_pixel_im *src_im_v = (im_flags_L0 & 2) ? im_L0->v : im_L1->v;

	mov	rbp, QWORD PTR [r13+24]
$LN24@bipred_ave:

; 661  :       bipred_average_px_im(lcu->rec.u + pb_offset, src_px_u, src_im_u, pb_w, pb_h, LCU_WIDTH_C);

	mov	ebx, r12d
	mov	r9d, edi
	add	rbx, rcx
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	DWORD PTR [rsp+32], esi
	lea	rcx, QWORD PTR [rbx+10636]
	call	bipred_average_px_im

; 662  :       bipred_average_px_im(lcu->rec.v + pb_offset, src_px_v, src_im_v, pb_w, pb_h, LCU_WIDTH_C);

	lea	rcx, QWORD PTR [rbx+11660]
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	mov	r9d, edi
	mov	DWORD PTR [rsp+32], esi
	mov	r8, rbp
	mov	rdx, r14
	call	bipred_average_px_im
$LN11@bipred_ave:

; 663  :     }
; 664  :   }
; 665  : }

	mov	rbx, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
bipred_average_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
width$ = 8
get_optimized_sad_generic PROC

; 670  :   return NULL;

	xor	eax, eax

; 671  : }

	ret	0
get_optimized_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
pic_data$ = 48
ref_data$ = 56
block_width$ = 64
block_height$ = 72
pic_stride$ = 80
ver_sad_generic PROC

; 686  : {

	mov	DWORD PTR [rsp+32], r9d
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	mov	eax, DWORD PTR pic_stride$[rsp]

; 687  :   int x, y;
; 688  :   unsigned sad = 0;

	xor	r14d, r14d
	xor	edi, edi
	movsxd	r12, r8d
	mov	rsi, rdx
	mov	rbp, rcx

; 689  : 
; 690  :   for (y = 0; y < block_height; ++y) {

	test	r9d, r9d
	jle	$LN26@ver_sad_ge

; 687  :   int x, y;
; 688  :   unsigned sad = 0;

	mov	QWORD PTR [rsp+48], rbx
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+56], r13
	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+64], r15
	npad	4
$LL4@ver_sad_ge:

; 691  :     for (x = 0; x < block_width; ++x) {

	xor	r9d, r9d
	xor	ecx, ecx
	test	r12d, r12d
	jle	SHORT $LN14@ver_sad_ge
	cmp	r12d, 32				; 00000020H
	jb	SHORT $LN14@ver_sad_ge

; 692  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[x]);

	mov	r8d, edi
	mov	r10, r12
	imul	r8d, eax
	and	r10, -32				; ffffffffffffffe0H
	npad	2
$LL7@ver_sad_ge:
	movdqu	xmm0, XMMWORD PTR [rcx+rsi]
	lea	edx, DWORD PTR [r8+r9]
	add	r9d, 32					; 00000020H
	movdqu	xmm1, XMMWORD PTR [rdx+rbp]
	lea	eax, DWORD PTR [rdx+16]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx+rsi+16]
	add	rcx, 32					; 00000020H
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax+rbp]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	cmp	rcx, r10
	jl	SHORT $LL7@ver_sad_ge
	mov	eax, DWORD PTR pic_stride$[rsp]
$LN14@ver_sad_ge:
	xor	r11d, r11d
	xor	ebx, ebx

; 691  :     for (x = 0; x < block_width; ++x) {

	cmp	rcx, r12
	jge	$LN2@ver_sad_ge
	mov	r10d, eax
	mov	rax, r12
	sub	rax, rcx
	imul	r10d, edi
	cmp	rax, 2
	jl	SHORT $LC20@ver_sad_ge
	lea	r15, QWORD PTR [r12-1]
	npad	5

; 692  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[x]);

$LL22@ver_sad_ge:
	movzx	eax, BYTE PTR [rcx+rsi]
	lea	r8d, DWORD PTR [r10+r9]
	movzx	edx, BYTE PTR [r8+rbp]
	add	r9d, 2
	sub	edx, eax
	mov	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r11d, eax
	lea	eax, DWORD PTR [r8+1]
	movzx	r8d, BYTE PTR [rax+rbp]
	movzx	eax, BYTE PTR [rcx+rsi+1]
	add	rcx, 2
	sub	r8d, eax
	mov	eax, r8d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ebx, eax
	cmp	rcx, r15
	jl	SHORT $LL22@ver_sad_ge

; 691  :     for (x = 0; x < block_width; ++x) {

	cmp	rcx, r12
	jge	SHORT $LN21@ver_sad_ge
$LC20@ver_sad_ge:

; 692  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[x]);

	lea	eax, DWORD PTR [r10+r9]
	movzx	r8d, BYTE PTR [rax+rbp]
	movzx	eax, BYTE PTR [rcx+rsi]
	sub	r8d, eax
	mov	eax, r8d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r14d, eax
$LN21@ver_sad_ge:
	lea	eax, DWORD PTR [rbx+r11]
	add	r14d, eax
$LN2@ver_sad_ge:

; 689  : 
; 690  :   for (y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR pic_stride$[rsp]
	inc	edi
	cmp	edi, DWORD PTR block_height$[rsp]
	jl	$LL4@ver_sad_ge

; 693  :     }
; 694  :   }
; 695  : 
; 696  :   return sad;

	mov	r15, QWORD PTR [rsp+64]
	paddd	xmm2, xmm3
	mov	r13, QWORD PTR [rsp+56]
	movdqa	xmm0, xmm2
	mov	rbx, QWORD PTR [rsp+48]
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	add	eax, r14d

; 697  : }

	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN26@ver_sad_ge:

; 693  :     }
; 694  :   }
; 695  : 
; 696  :   return sad;

	mov	eax, r14d

; 697  : }

	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ver_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
pic_data$ = 48
ref_data$ = 56
block_width$ = 64
block_height$ = 72
pic_stride$ = 80
ref_stride$ = 88
hor_sad	PROC

; 712  : {

	mov	DWORD PTR [rsp+32], r9d
	push	rbp
	push	r12
	push	r13
	push	r14
	sub	rsp, 8
	mov	r13d, DWORD PTR ref_stride$[rsp]

; 713  :   int x, y;
; 714  :   unsigned sad = 0;

	xor	r14d, r14d
	mov	eax, DWORD PTR pic_stride$[rsp]
	xor	r11d, r11d
	mov	r10d, r8d
	mov	r12, rdx
	mov	rbp, rcx

; 715  : 
; 716  :   for (y = 0; y < block_height; ++y) {

	test	r9d, r9d
	jle	$LN28@hor_sad

; 713  :   int x, y;
; 714  :   unsigned sad = 0;

	mov	QWORD PTR [rsp+48], rbx
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+56], rsi
	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+64], rdi
	mov	QWORD PTR [rsp], r15
	npad	6
$LL4@hor_sad:

; 717  :     for (x = 0; x < block_width; ++x) {

	xor	ecx, ecx
	test	r10d, r10d
	jle	SHORT $LN14@hor_sad
	cmp	r10d, 32				; 00000020H
	jb	SHORT $LN14@hor_sad

; 718  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[y * ref_stride]);

	mov	r8d, r11d
	mov	r9d, r10d
	imul	r8d, eax
	mov	eax, r11d
	imul	eax, r13d
	and	r9d, -32				; ffffffffffffffe0H
	movsx	eax, BYTE PTR [rax+r12]
	movd	xmm1, eax
	punpcklbw xmm1, xmm1
	punpcklwd xmm1, xmm1
	pshufd	xmm1, xmm1, 0
	npad	8
$LL7@hor_sad:
	lea	edx, DWORD PTR [r8+rcx]
	add	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [rdx+16]
	movdqu	xmm0, XMMWORD PTR [rdx+rbp]
	psadbw	xmm0, xmm1
	paddd	xmm0, xmm3
	movdqa	xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR [rax+rbp]
	psadbw	xmm0, xmm1
	paddd	xmm0, xmm2
	movdqa	xmm2, xmm0
	cmp	ecx, r9d
	jl	SHORT $LL7@hor_sad
	mov	eax, DWORD PTR pic_stride$[rsp]
	mov	r9d, DWORD PTR block_height$[rsp]
$LN14@hor_sad:
	xor	edi, edi
	xor	esi, esi

; 717  :     for (x = 0; x < block_width; ++x) {

	cmp	ecx, r10d
	jge	$LN2@hor_sad
	mov	ebx, eax
	mov	edx, r13d
	mov	eax, r10d
	imul	ebx, r11d
	sub	eax, ecx
	imul	edx, r11d
	cmp	eax, 2
	jl	SHORT $LC20@hor_sad

; 718  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[y * ref_stride]);

	movzx	r9d, BYTE PTR [rdx+r12]
	lea	r15d, DWORD PTR [r10-1]
	npad	9
$LL22@hor_sad:
	lea	r8d, DWORD PTR [rbx+rcx]
	add	ecx, 2
	movzx	eax, BYTE PTR [r8+rbp]
	sub	eax, r9d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	edi, eax
	lea	eax, DWORD PTR [r8+1]
	movzx	eax, BYTE PTR [rax+rbp]
	sub	eax, r9d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	esi, eax
	cmp	ecx, r15d
	jl	SHORT $LL22@hor_sad

; 717  :     for (x = 0; x < block_width; ++x) {

	cmp	ecx, r10d
	jl	SHORT $LL27@hor_sad
	jmp	SHORT $LN21@hor_sad
$LC20@hor_sad:

; 718  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[y * ref_stride]);

	movzx	r9d, BYTE PTR [rdx+r12]
	npad	7
$LL27@hor_sad:
	lea	eax, DWORD PTR [rbx+rcx]
	movzx	edx, BYTE PTR [rax+rbp]
	movzx	eax, r9b
	sub	edx, eax
	mov	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r14d, eax
$LN21@hor_sad:
	mov	r9d, DWORD PTR block_height$[rsp]
	lea	eax, DWORD PTR [rsi+rdi]
	add	r14d, eax
$LN2@hor_sad:

; 715  : 
; 716  :   for (y = 0; y < block_height; ++y) {

	mov	eax, DWORD PTR pic_stride$[rsp]
	inc	r11d
	cmp	r11d, r9d
	jl	$LL4@hor_sad

; 719  :     }
; 720  :   }
; 721  : 
; 722  :   return sad;

	mov	r15, QWORD PTR [rsp]
	paddd	xmm2, xmm3
	mov	rdi, QWORD PTR [rsp+64]
	movdqa	xmm0, xmm2
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	add	eax, r14d

; 723  : }

	add	rsp, 8
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
$LN28@hor_sad:

; 719  :     }
; 720  :   }
; 721  : 
; 722  :   return sad;

	mov	eax, r14d

; 723  : }

	add	rsp, 8
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
hor_sad	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
pic_data$ = 112
ref_data$ = 120
width$ = 128
height$ = 136
pic_stride$ = 144
ref_stride$ = 152
left$ = 160
right$ = 168
hor_sad_generic PROC

; 729  : {

	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 48					; 00000030H

; 730  :   uint32_t result = 0;
; 731  :   if (left) {

	mov	r12d, DWORD PTR left$[rsp]
	mov	r13d, r9d
	movsxd	r15, r8d
	test	r12d, r12d
	je	SHORT $LN2@hor_sad_ge

; 732  :     result += hor_sad    (pic_data, ref_data + left, left,

	mov	esi, DWORD PTR ref_stride$[rsp]
	lea	rbp, QWORD PTR [r12+rdx]
	mov	ebx, DWORD PTR pic_stride$[rsp]
	mov	rdx, rbp
	mov	DWORD PTR [rax-64], esi
	mov	r8d, r12d
	mov	QWORD PTR [rax+24], r14
	mov	DWORD PTR [rax-72], ebx
	call	hor_sad

; 733  :                           height, pic_stride, ref_stride);
; 734  : 
; 735  :     result += kvz_reg_sad(pic_data + left, ref_data + left, width - left,

	mov	rcx, QWORD PTR pic_data$[rsp]
	sub	r15d, r12d
	add	rcx, r12
	mov	DWORD PTR [rsp+40], esi
	mov	r9d, r13d
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, r15d
	mov	rdx, rbp
	mov	edi, eax
	call	QWORD PTR kvz_reg_sad

; 746  :                           height, pic_stride, ref_stride);
; 747  :   }
; 748  :   return result;

	mov	r14, QWORD PTR [rsp+128]
	add	eax, edi

; 749  : }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN2@hor_sad_ge:

; 736  :                           height, pic_stride, ref_stride);
; 737  :   } else if (right) {

	mov	ebp, DWORD PTR right$[rsp]
	mov	r8d, r15d
	test	ebp, ebp
	je	SHORT $LN4@hor_sad_ge

; 738  :     result += kvz_reg_sad(pic_data, ref_data, width - right,

	mov	esi, DWORD PTR ref_stride$[rsp]
	sub	r8d, ebp
	mov	edi, DWORD PTR pic_stride$[rsp]
	mov	DWORD PTR [rsp+40], esi
	mov	DWORD PTR [rsp+32], edi
	call	QWORD PTR kvz_reg_sad

; 739  :                           height, pic_stride, ref_stride);
; 740  : 
; 741  :     result += hor_sad    (pic_data + width - right,

	mov	rdx, QWORD PTR ref_data$[rsp]
	mov	r9, r15
	mov	rcx, QWORD PTR pic_data$[rsp]
	sub	r9, rbp
	dec	rdx
	mov	DWORD PTR [rsp+40], esi
	add	rdx, r9
	mov	DWORD PTR [rsp+32], edi
	add	rcx, r9
	mov	r8d, ebp
	mov	r9d, r13d
	mov	ebx, eax
	call	hor_sad
	add	eax, ebx

; 749  : }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN4@hor_sad_ge:
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx

; 742  :                           ref_data + width - right - 1,
; 743  :                           right, height, pic_stride, ref_stride);
; 744  :   } else {
; 745  :     result += kvz_reg_sad(pic_data, ref_data, width,

	rex_jmp	QWORD PTR kvz_reg_sad
hor_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
_TEXT	SEGMENT
arr$ = 32
len$ = 40
pixel_var_generic PROC

; 753  : {

	push	rbx
	sub	rsp, 16

; 754  :   double var = 0;

	xor	r9d, r9d
	mov	r11, rcx
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	mov	r10d, r9d

; 755  :   double arr_mean = 0;
; 756  : 
; 757  :   // Calculate array mean
; 758  :   int i = 0;
; 759  :   double sum = 0;
; 760  : 
; 761  :   for (; i < len; ++i) {

	cmp	edx, 4
	jb	$LC20@pixel_var_
	lea	eax, DWORD PTR [rdx-4]
	shr	eax, 2
	lea	r8, QWORD PTR [rcx+2]
	inc	eax
	mov	ecx, eax
	lea	r10d, DWORD PTR [rax*4]
	lea	rbx, QWORD PTR [rax*4]
	npad	4
$LL21@pixel_var_:

; 762  :     sum += arr[i];

	movzx	eax, BYTE PTR [r8-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [r8-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [r8]
	addsd	xmm1, xmm2
	cvtdq2pd xmm0, xmm0
	movaps	xmm2, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [r8+1]
	addsd	xmm2, xmm0
	cvtdq2pd xmm1, xmm1
	add	r8, 4
	movd	xmm0, eax
	addsd	xmm2, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm2, xmm0
	sub	rcx, 1
	jne	SHORT $LL21@pixel_var_

; 755  :   double arr_mean = 0;
; 756  : 
; 757  :   // Calculate array mean
; 758  :   int i = 0;
; 759  :   double sum = 0;
; 760  : 
; 761  :   for (; i < len; ++i) {

	cmp	r10d, edx
	jb	SHORT $LN38@pixel_var_
	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	xorps	xmm0, xmm0
	mov	eax, edx
	cvtsi2sd xmm0, rax
	divsd	xmm4, xmm0
	mulsd	xmm2, xmm4
	movaps	xmm5, xmm2
	unpcklpd xmm5, xmm5
	jmp	SHORT $LN43@pixel_var_
$LC20@pixel_var_:
	test	edx, edx
	je	SHORT $LN19@pixel_var_
	mov	rbx, r9
$LN38@pixel_var_:
	mov	r8d, edx
	lea	rcx, QWORD PTR [rbx+r11]
	sub	r8d, r10d
$LC34@pixel_var_:

; 762  :     sum += arr[i];

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm2, xmm0
	sub	r8, 1
	jne	SHORT $LC34@pixel_var_
$LN19@pixel_var_:

; 763  :   }
; 764  :   arr_mean = sum / (double)len;

	movsd	xmm4, QWORD PTR __real@3ff0000000000000
	xorps	xmm0, xmm0
	mov	eax, edx
	cvtsi2sd xmm0, rax
	divsd	xmm4, xmm0
	movaps	xmm0, xmm4
	mulsd	xmm0, xmm2
	movaps	xmm5, xmm0
	movaps	xmm2, xmm0
	unpcklpd xmm5, xmm5

; 765  : 
; 766  :   // Calculate array variance
; 767  :   for (i = 0; i < len; ++i) {

	test	edx, edx
	je	$LN22@pixel_var_
	cmp	edx, 4
	jb	$LN14@pixel_var_
$LN43@pixel_var_:

; 763  :   }
; 764  :   arr_mean = sum / (double)len;

	mov	ecx, edx
	movaps	XMMWORD PTR [rsp], xmm6
	and	ecx, -4					; fffffffcH
	xorps	xmm3, xmm3
	xorps	xmm6, xmm6
	mov	r8, r11
	npad	5
$LL7@pixel_var_:

; 768  :     double tmp = (double)arr[i] - arr_mean;

	movzx	eax, WORD PTR [r8]
	xorps	xmm0, xmm0
	add	r9d, 4
	movd	xmm1, eax
	movzx	eax, WORD PTR [r8+2]
	add	r8, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm5

; 769  :     var += tmp*tmp;

	mulpd	xmm0, xmm0
	addpd	xmm3, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm5
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	cmp	r9d, ecx
	jb	SHORT $LL7@pixel_var_

; 763  :   }
; 764  :   arr_mean = sum / (double)len;

	addpd	xmm3, xmm6
	movaps	xmm6, XMMWORD PTR [rsp]
	movaps	xmm0, xmm3
	unpckhpd xmm0, xmm3
	addsd	xmm3, xmm0
$LN14@pixel_var_:

; 765  : 
; 766  :   // Calculate array variance
; 767  :   for (i = 0; i < len; ++i) {

	cmp	r9d, edx
	jae	$LN22@pixel_var_
	mov	eax, edx
	movsxd	r10, r9d
	sub	eax, r9d
	cmp	eax, 4
	jb	$LC23@pixel_var_
	mov	eax, edx
	lea	rcx, QWORD PTR [r11+2]
	sub	eax, r9d
	add	rcx, r10
	sub	eax, 4
	shr	eax, 2
	inc	eax
	mov	r8d, eax
	lea	r9d, DWORD PTR [r9+rax*4]
	lea	r10, QWORD PTR [r10+rax*4]
$LL24@pixel_var_:

; 768  :     double tmp = (double)arr[i] - arr_mean;

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm0, xmm2
	subsd	xmm1, xmm2

; 769  :     var += tmp*tmp;

	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	addsd	xmm3, xmm0
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	addsd	xmm3, xmm1
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, eax
	subsd	xmm0, xmm2
	subsd	xmm1, xmm2
	mulsd	xmm0, xmm0
	mulsd	xmm1, xmm1
	addsd	xmm3, xmm0
	addsd	xmm3, xmm1
	sub	r8, 1
	jne	SHORT $LL24@pixel_var_

; 765  : 
; 766  :   // Calculate array variance
; 767  :   for (i = 0; i < len; ++i) {

	cmp	r9d, edx
	jae	SHORT $LN22@pixel_var_
$LC23@pixel_var_:
	sub	edx, r9d
	lea	rcx, QWORD PTR [r10+r11]
	mov	r8d, edx
$LC37@pixel_var_:

; 768  :     double tmp = (double)arr[i] - arr_mean;

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm1, eax
	cvtdq2pd xmm1, xmm1
	subsd	xmm1, xmm2

; 769  :     var += tmp*tmp;

	mulsd	xmm1, xmm1
	addsd	xmm3, xmm1
	sub	r8, 1
	jne	SHORT $LC37@pixel_var_
$LN22@pixel_var_:

; 770  :   }
; 771  : 
; 772  :   var /= len;

	mulsd	xmm4, xmm3

; 773  : 
; 774  :   return var;

	movaps	xmm0, xmm4

; 775  : }

	add	rsp, 16
	pop	rbx
	ret	0
pixel_var_generic ENDP
_TEXT	ENDS
END
