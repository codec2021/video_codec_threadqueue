; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	kvz_g_auc_renorm_table
PUBLIC	kvz_g_auc_next_state_lps
PUBLIC	kvz_g_auc_lpst_table
PUBLIC	kvz_g_auc_next_state_mps
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
kvz_g_auc_renorm_table DB 06H
	DB	05H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
kvz_g_auc_next_state_lps DB 01H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	04H
	DB	05H
	DB	08H
	DB	09H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	012H
	DB	013H
	DB	016H
	DB	017H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01aH
	DB	01bH
	DB	01eH
	DB	01fH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	020H
	DB	021H
	DB	024H
	DB	025H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	026H
	DB	027H
	DB	02aH
	DB	02bH
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03cH
	DB	03dH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	042H
	DB	043H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	046H
	DB	047H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	048H
	DB	049H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04aH
	DB	04bH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04cH
	DB	04dH
	DB	07eH
	DB	07fH
kvz_g_auc_lpst_table DB 080H
	DB	0b0H
	DB	0d0H
	DB	0f0H
	DB	080H
	DB	0a7H
	DB	0c5H
	DB	0e3H
	DB	080H
	DB	09eH
	DB	0bbH
	DB	0d8H
	DB	07bH
	DB	096H
	DB	0b2H
	DB	0cdH
	DB	074H
	DB	08eH
	DB	0a9H
	DB	0c3H
	DB	06fH
	DB	087H
	DB	0a0H
	DB	0b9H
	DB	069H
	DB	080H
	DB	098H
	DB	0afH
	DB	064H
	DB	07aH
	DB	090H
	DB	0a6H
	DB	05fH
	DB	074H
	DB	089H
	DB	09eH
	DB	05aH
	DB	06eH
	DB	082H
	DB	096H
	DB	055H
	DB	068H
	DB	07bH
	DB	08eH
	DB	051H
	DB	063H
	DB	075H
	DB	087H
	DB	04dH
	DB	05eH
	DB	06fH
	DB	080H
	DB	049H
	DB	059H
	DB	069H
	DB	07aH
	DB	045H
	DB	055H
	DB	064H
	DB	074H
	DB	042H
	DB	050H
	DB	05fH
	DB	06eH
	DB	03eH
	DB	04cH
	DB	05aH
	DB	068H
	DB	03bH
	DB	048H
	DB	056H
	DB	063H
	DB	038H
	DB	045H
	DB	051H
	DB	05eH
	DB	035H
	DB	041H
	DB	04dH
	DB	059H
	DB	033H
	DB	03eH
	DB	049H
	DB	055H
	DB	030H
	DB	03bH
	DB	045H
	DB	050H
	DB	02eH
	DB	038H
	DB	042H
	DB	04cH
	DB	02bH
	DB	035H
	DB	03fH
	DB	048H
	DB	029H
	DB	032H
	DB	03bH
	DB	045H
	DB	027H
	DB	030H
	DB	038H
	DB	041H
	DB	025H
	DB	02dH
	DB	036H
	DB	03eH
	DB	023H
	DB	02bH
	DB	033H
	DB	03bH
	DB	021H
	DB	029H
	DB	030H
	DB	038H
	DB	020H
	DB	027H
	DB	02eH
	DB	035H
	DB	01eH
	DB	025H
	DB	02bH
	DB	032H
	DB	01dH
	DB	023H
	DB	029H
	DB	030H
	DB	01bH
	DB	021H
	DB	027H
	DB	02dH
	DB	01aH
	DB	01fH
	DB	025H
	DB	02bH
	DB	018H
	DB	01eH
	DB	023H
	DB	029H
	DB	017H
	DB	01cH
	DB	021H
	DB	027H
	DB	016H
	DB	01bH
	DB	020H
	DB	025H
	DB	015H
	DB	01aH
	DB	01eH
	DB	023H
	DB	014H
	DB	018H
	DB	01dH
	DB	021H
	DB	013H
	DB	017H
	DB	01bH
	DB	01fH
	DB	012H
	DB	016H
	DB	01aH
	DB	01eH
	DB	011H
	DB	015H
	DB	019H
	DB	01cH
	DB	010H
	DB	014H
	DB	017H
	DB	01bH
	DB	0fH
	DB	013H
	DB	016H
	DB	019H
	DB	0eH
	DB	012H
	DB	015H
	DB	018H
	DB	0eH
	DB	011H
	DB	014H
	DB	017H
	DB	0dH
	DB	010H
	DB	013H
	DB	016H
	DB	0cH
	DB	0fH
	DB	012H
	DB	015H
	DB	0cH
	DB	0eH
	DB	011H
	DB	014H
	DB	0bH
	DB	0eH
	DB	010H
	DB	013H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	012H
	DB	0aH
	DB	0cH
	DB	0fH
	DB	011H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	010H
	DB	09H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	09H
	DB	0bH
	DB	0cH
	DB	0eH
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	08H
	DB	09H
	DB	0bH
	DB	0dH
	DB	07H
	DB	09H
	DB	0bH
	DB	0cH
	DB	07H
	DB	09H
	DB	0aH
	DB	0cH
	DB	07H
	DB	08H
	DB	0aH
	DB	0bH
	DB	06H
	DB	08H
	DB	09H
	DB	0bH
	DB	06H
	DB	07H
	DB	09H
	DB	0aH
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
kvz_g_auc_next_state_mps DB 02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_cabac_write
PUBLIC	kvz_cabac_write_ep_ex_golomb
PUBLIC	kvz_cabac_write_coeff_remain
PUBLIC	kvz_cabac_write_coeff_remain_encry
PUBLIC	kvz_cabac_write_unary_max_symbol
PUBLIC	kvz_cabac_encode_bin_trm
PUBLIC	kvz_cabac_finish
PUBLIC	kvz_cabac_start
PUBLIC	kvz_cabac_encode_bins_ep
PUBLIC	kvz_cabac_write_unary_max_symbol_ep
PUBLIC	kvz_cabac_encode_bin
PUBLIC	kvz_cabac_encode_bin_ep
pdata	SEGMENT
$pdata$kvz_cabac_write DD imagerel $LN24
	DD	imagerel $LN24+86
	DD	imagerel $unwind$kvz_cabac_write
$pdata$1$kvz_cabac_write DD imagerel $LN24+86
	DD	imagerel $LN24+128
	DD	imagerel $chain$1$kvz_cabac_write
$pdata$2$kvz_cabac_write DD imagerel $LN24+128
	DD	imagerel $LN24+244
	DD	imagerel $chain$2$kvz_cabac_write
$pdata$3$kvz_cabac_write DD imagerel $LN24+244
	DD	imagerel $LN24+260
	DD	imagerel $chain$3$kvz_cabac_write
$pdata$4$kvz_cabac_write DD imagerel $LN24+260
	DD	imagerel $LN24+277
	DD	imagerel $chain$4$kvz_cabac_write
$pdata$kvz_cabac_write_ep_ex_golomb DD imagerel $LN12
	DD	imagerel $LN12+158
	DD	imagerel $unwind$kvz_cabac_write_ep_ex_golomb
$pdata$kvz_cabac_write_coeff_remain DD imagerel $LN13
	DD	imagerel $LN13+160
	DD	imagerel $unwind$kvz_cabac_write_coeff_remain
$pdata$kvz_cabac_write_coeff_remain_encry DD imagerel $LN344
	DD	imagerel $LN344+1095
	DD	imagerel $unwind$kvz_cabac_write_coeff_remain_encry
$pdata$0$kvz_cabac_write_coeff_remain_encry DD imagerel $LN344+1095
	DD	imagerel $LN344+1198
	DD	imagerel $chain$0$kvz_cabac_write_coeff_remain_encry
$pdata$1$kvz_cabac_write_coeff_remain_encry DD imagerel $LN344+1198
	DD	imagerel $LN344+1223
	DD	imagerel $chain$1$kvz_cabac_write_coeff_remain_encry
$pdata$kvz_cabac_write_unary_max_symbol DD imagerel $LN20
	DD	imagerel $LN20+88
	DD	imagerel $unwind$kvz_cabac_write_unary_max_symbol
$pdata$1$kvz_cabac_write_unary_max_symbol DD imagerel $LN20+88
	DD	imagerel $LN20+276
	DD	imagerel $chain$1$kvz_cabac_write_unary_max_symbol
$pdata$2$kvz_cabac_write_unary_max_symbol DD imagerel $LN20+276
	DD	imagerel $LN20+314
	DD	imagerel $chain$2$kvz_cabac_write_unary_max_symbol
$pdata$kvz_cabac_finish DD imagerel $LN56
	DD	imagerel $LN56+420
	DD	imagerel $unwind$kvz_cabac_finish
$pdata$0$kvz_cabac_finish DD imagerel $LN56+420
	DD	imagerel $LN56+534
	DD	imagerel $chain$0$kvz_cabac_finish
$pdata$1$kvz_cabac_finish DD imagerel $LN56+534
	DD	imagerel $LN56+554
	DD	imagerel $chain$1$kvz_cabac_finish
$pdata$kvz_cabac_encode_bins_ep DD imagerel $LN30
	DD	imagerel $LN30+6
	DD	imagerel $unwind$kvz_cabac_encode_bins_ep
$pdata$1$kvz_cabac_encode_bins_ep DD imagerel $LN30+6
	DD	imagerel $LN30+35
	DD	imagerel $chain$1$kvz_cabac_encode_bins_ep
$pdata$4$kvz_cabac_encode_bins_ep DD imagerel $LN30+35
	DD	imagerel $LN30+373
	DD	imagerel $chain$4$kvz_cabac_encode_bins_ep
$pdata$5$kvz_cabac_encode_bins_ep DD imagerel $LN30+373
	DD	imagerel $LN30+411
	DD	imagerel $chain$5$kvz_cabac_encode_bins_ep
$pdata$6$kvz_cabac_encode_bins_ep DD imagerel $LN30+411
	DD	imagerel $LN30+430
	DD	imagerel $chain$6$kvz_cabac_encode_bins_ep
$pdata$kvz_cabac_write_unary_max_symbol_ep DD imagerel $LN27
	DD	imagerel $LN27+208
	DD	imagerel $unwind$kvz_cabac_write_unary_max_symbol_ep
$pdata$kvz_cabac_encode_bin DD imagerel $LN9
	DD	imagerel $LN9+204
	DD	imagerel $unwind$kvz_cabac_encode_bin
xdata	SEGMENT
$unwind$kvz_cabac_write DD 020601H
	DD	070023206H
$chain$1$kvz_cabac_write DD 041621H
	DD	086416H
	DD	063405H
	DD	imagerel $LN24
	DD	imagerel $LN24+86
	DD	imagerel $unwind$kvz_cabac_write
$chain$2$kvz_cabac_write DD 020521H
	DD	075405H
	DD	imagerel $LN24+86
	DD	imagerel $LN24+128
	DD	imagerel $chain$1$kvz_cabac_write
$chain$3$kvz_cabac_write DD 021H
	DD	imagerel $LN24+86
	DD	imagerel $LN24+128
	DD	imagerel $chain$1$kvz_cabac_write
$chain$4$kvz_cabac_write DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+86
	DD	imagerel $unwind$kvz_cabac_write
$unwind$kvz_cabac_write_ep_ex_golomb DD 050b01H
	DD	03640bH
	DD	02340bH
	DD	0700bH
$unwind$kvz_cabac_write_coeff_remain DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$kvz_cabac_write_coeff_remain_encry DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0f0143218H
	DD	07010c012H
$chain$0$kvz_cabac_write_coeff_remain_encry DD 020521H
	DD	08e405H
	DD	imagerel $LN344
	DD	imagerel $LN344+1095
	DD	imagerel $unwind$kvz_cabac_write_coeff_remain_encry
$chain$1$kvz_cabac_write_coeff_remain_encry DD 021H
	DD	imagerel $LN344
	DD	imagerel $LN344+1095
	DD	imagerel $unwind$kvz_cabac_write_coeff_remain_encry
$unwind$kvz_cabac_write_unary_max_symbol DD 060d01H
	DD	0a340dH
	DD	0f009320dH
	DD	050067007H
$chain$1$kvz_cabac_write_unary_max_symbol DD 040e21H
	DD	09c40eH
	DD	086405H
	DD	imagerel $LN20
	DD	imagerel $LN20+88
	DD	imagerel $unwind$kvz_cabac_write_unary_max_symbol
$chain$2$kvz_cabac_write_unary_max_symbol DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+88
	DD	imagerel $unwind$kvz_cabac_write_unary_max_symbol
$unwind$kvz_cabac_finish DD 081301H
	DD	0a6413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
$chain$0$kvz_cabac_finish DD 020521H
	DD	085405H
	DD	imagerel $LN56
	DD	imagerel $LN56+420
	DD	imagerel $unwind$kvz_cabac_finish
$chain$1$kvz_cabac_finish DD 021H
	DD	imagerel $LN56
	DD	imagerel $LN56+420
	DD	imagerel $unwind$kvz_cabac_finish
$unwind$kvz_cabac_encode_bins_ep DD 020601H
	DD	070025206H
$chain$1$kvz_cabac_encode_bins_ep DD 040d21H
	DD	05e40dH
	DD	095405H
	DD	imagerel $LN30
	DD	imagerel $LN30+6
	DD	imagerel $unwind$kvz_cabac_encode_bins_ep
$chain$4$kvz_cabac_encode_bins_ep DD 060f21H
	DD	04f40fH
	DD	0a640aH
	DD	083405H
	DD	imagerel $LN30+6
	DD	imagerel $LN30+35
	DD	imagerel $chain$1$kvz_cabac_encode_bins_ep
$chain$5$kvz_cabac_encode_bins_ep DD 021H
	DD	imagerel $LN30+6
	DD	imagerel $LN30+35
	DD	imagerel $chain$1$kvz_cabac_encode_bins_ep
$chain$6$kvz_cabac_encode_bins_ep DD 021H
	DD	imagerel $LN30
	DD	imagerel $LN30+6
	DD	imagerel $unwind$kvz_cabac_encode_bins_ep
$unwind$kvz_cabac_write_unary_max_symbol_ep DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$kvz_cabac_encode_bin DD 040a01H
	DD	06340aH
	DD	07006320aH
	ORG $+6
$SG4294944610 DB 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'l', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, '_', 00H, 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+14
$SG4294944611 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'a', 00H, 'b', 00H, 'a', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294944612 DB 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'l', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, '_', 00H, 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H
	DB	'l', 00H, 00H, 00H
	ORG $+14
$SG4294944613 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'a', 00H, 'b', 00H, 'a', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
$SG4294944614 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'l', 00H, 'e'
	DB	00H, 'f', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+12
$SG4294944615 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H
	DB	'a', 00H, 'b', 00H, 'a', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 8
bin_value$ = 16
kvz_cabac_encode_bin_ep PROC

; 230  :   data->low <<= 1;

	mov	eax, DWORD PTR [rcx+8]
	lea	r8d, DWORD PTR [rax+rax]
	mov	DWORD PTR [rcx+8], r8d

; 231  :   if (bin_value) {

	test	edx, edx
	je	SHORT $LN2@kvz_cabac_

; 232  :     data->low += data->range;

	mov	edx, DWORD PTR [rcx+12]
	add	edx, r8d
	mov	DWORD PTR [rcx+8], edx
$LN2@kvz_cabac_:

; 233  :   }
; 234  :   data->bits_left--;

	dec	DWORD PTR [rcx+24]

; 235  : 
; 236  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rcx+24], 12
	jl	kvz_cabac_write
$LN3@kvz_cabac_:

; 237  :     kvz_cabac_write(data);
; 238  :   }
; 239  : }

	ret	0
kvz_cabac_encode_bin_ep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 48
bin_value$ = 56
kvz_cabac_encode_bin PROC

; 104  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 105  :   uint32_t lps;
; 106  : 
; 107  : 
; 108  :   lps = kvz_g_auc_lpst_table[CTX_STATE(data->cur_ctx)][(data->range >> 6) & 3];

	mov	r11d, DWORD PTR [rcx+12]
	lea	rdi, OFFSET FLAT:__ImageBase
	mov	r10, QWORD PTR [rcx]
	mov	eax, r11d
	shr	rax, 6
	mov	r9, rcx
	and	eax, 3
	movzx	r8d, BYTE PTR [r10]
	shr	r8, 1
	lea	r8, QWORD PTR [rax+r8*4]

; 109  :   data->range -= lps;
; 110  : 
; 111  :   // Not the Most Probable Symbol?
; 112  :   if ((bin_value ? 1 : 0) != CTX_MPS(data->cur_ctx)) {

	xor	eax, eax
	movzx	ebx, BYTE PTR kvz_g_auc_lpst_table[r8+rdi]
	sub	r11d, ebx
	mov	DWORD PTR [rcx+12], r11d
	movzx	r8d, BYTE PTR [r10]
	mov	ecx, r8d
	and	ecx, 1
	test	edx, edx
	setne	al
	cmp	eax, ecx
	je	SHORT $LN2@kvz_cabac_

; 113  :     int num_bits = kvz_g_auc_renorm_table[lps >> 3];

	mov	eax, ebx
	shr	rax, 3
	movzx	ecx, BYTE PTR kvz_g_auc_renorm_table[rax+rdi]

; 114  :     data->low = (data->low + data->range) << num_bits;

	mov	eax, DWORD PTR [r9+8]
	add	eax, r11d

; 115  :     data->range = lps << num_bits;

	shl	ebx, cl
	shl	eax, cl
	mov	DWORD PTR [r9+8], eax
	mov	DWORD PTR [r9+12], ebx

; 116  : 
; 117  :     CTX_UPDATE_LPS(data->cur_ctx);

	movzx	eax, BYTE PTR [r10]
	movzx	eax, BYTE PTR kvz_g_auc_next_state_lps[rax+rdi]
	mov	BYTE PTR [r10], al

; 118  : 
; 119  :     data->bits_left -= num_bits;

	sub	DWORD PTR [r9+24], ecx

; 120  :   } else {

	jmp	SHORT $LN7@kvz_cabac_
$LN2@kvz_cabac_:

; 121  :     CTX_UPDATE_MPS(data->cur_ctx);

	movzx	eax, BYTE PTR kvz_g_auc_next_state_mps[r8+rdi]
	mov	BYTE PTR [r10], al

; 122  :     if (data->range >= 256) return;

	mov	eax, DWORD PTR [r9+12]
	cmp	eax, 256				; 00000100H
	jae	SHORT $LN5@kvz_cabac_

; 123  : 
; 124  :     data->low <<= 1;

	shl	DWORD PTR [r9+8], 1

; 125  :     data->range <<= 1;

	add	eax, eax

; 126  :     data->bits_left--;

	dec	DWORD PTR [r9+24]
	mov	DWORD PTR [r9+12], eax
$LN7@kvz_cabac_:

; 127  :   }
; 128  : 
; 129  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR [r9+24]
	cmp	eax, 12
	jge	SHORT $LN5@kvz_cabac_

; 130  :     kvz_cabac_write(data);

	mov	rcx, r9
	call	kvz_cabac_write
$LN5@kvz_cabac_:

; 131  :   }
; 132  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_cabac_encode_bin ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 48
symbol$ = 56
max_symbol$dead$ = 64
kvz_cabac_write_unary_max_symbol_ep PROC

; 518  : {

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, edx
	mov	rbx, rcx
	mov	ebp, edx

; 519  :   /*if (symbol == 0) {
; 520  :     CABAC_BIN_EP(data, 0, "ums_ep");
; 521  :   } else {
; 522  :     // Make a bit-string of (symbol) times 1 and a single 0, except when
; 523  :     // symbol == max_symbol.
; 524  :     unsigned bins = ((1 << symbol) - 1) << (symbol < max_symbol);
; 525  :     CABAC_BINS_EP(data, bins, symbol + (symbol < max_symbol), "ums_ep");
; 526  :   }*/
; 527  : 
; 528  :   int8_t code_last = max_symbol > symbol;
; 529  : 
; 530  :   assert(symbol <= max_symbol);

	cmp	edx, 7
	jbe	SHORT $LN7@kvz_cabac_
	mov	r8d, 530				; 00000212H
	lea	rdx, OFFSET FLAT:$SG4294944611
	lea	rcx, OFFSET FLAT:$SG4294944610
	call	QWORD PTR __imp__wassert
	mov	ecx, DWORD PTR [rbx+8]
	add	ecx, ecx
	mov	DWORD PTR [rbx+8], ecx

; 232  :     data->low += data->range;

	jmp	SHORT $LN25@kvz_cabac_
$LN7@kvz_cabac_:

; 230  :   data->low <<= 1;

	mov	eax, DWORD PTR [rcx+8]
	lea	ecx, DWORD PTR [rax+rax]
	mov	DWORD PTR [rbx+8], ecx

; 531  : 
; 532  :   CABAC_BIN_EP(data, symbol ? 1 : 0, "ums_ep");

	test	esi, esi

; 231  :   if (bin_value) {

	je	SHORT $LN24@kvz_cabac_
$LN25@kvz_cabac_:

; 232  :     data->low += data->range;

	add	ecx, DWORD PTR [rbx+12]
	mov	DWORD PTR [rbx+8], ecx
$LN24@kvz_cabac_:

; 233  :   }
; 234  :   data->bits_left--;

	dec	DWORD PTR [rbx+24]

; 235  : 
; 236  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rbx+24], 12
	jge	SHORT $LN10@kvz_cabac_

; 237  :     kvz_cabac_write(data);

	mov	rcx, rbx
	call	kvz_cabac_write
$LN10@kvz_cabac_:

; 533  : 
; 534  :   if (!symbol) return;

	test	esi, esi
	je	SHORT $LN18@kvz_cabac_

; 535  : 
; 536  :   while (--symbol) {

	add	esi, -1					; ffffffffH
	je	SHORT $LN3@kvz_cabac_
	npad	15
$LL2@kvz_cabac_:

; 230  :   data->low <<= 1;

	mov	ecx, DWORD PTR [rbx+8]

; 232  :     data->low += data->range;

	mov	eax, DWORD PTR [rbx+12]

; 233  :   }
; 234  :   data->bits_left--;

	dec	DWORD PTR [rbx+24]

; 235  : 
; 236  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rbx+24], 12
	lea	ecx, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR [rbx+8], ecx
	jge	SHORT $LN14@kvz_cabac_

; 237  :     kvz_cabac_write(data);

	mov	rcx, rbx
	call	kvz_cabac_write
$LN14@kvz_cabac_:

; 535  : 
; 536  :   while (--symbol) {

	add	esi, -1					; ffffffffH
	jne	SHORT $LL2@kvz_cabac_
$LN3@kvz_cabac_:

; 537  :     CABAC_BIN_EP(data, 1, "ums_ep");
; 538  :   }
; 539  :   if (code_last) {

	cmp	ebp, 7
	jae	SHORT $LN18@kvz_cabac_

; 230  :   data->low <<= 1;

	shl	DWORD PTR [rbx+8], 1

; 233  :   }
; 234  :   data->bits_left--;

	dec	DWORD PTR [rbx+24]

; 235  : 
; 236  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rbx+24], 12
	jge	SHORT $LN18@kvz_cabac_

; 237  :     kvz_cabac_write(data);

	mov	rcx, rbx
	call	kvz_cabac_write
$LN18@kvz_cabac_:

; 540  :     CABAC_BIN_EP(data, 0, "ums_ep");
; 541  :   }
; 542  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_cabac_write_unary_max_symbol_ep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 64
bin_values$ = 72
num_bins$ = 80
kvz_cabac_encode_bins_ep PROC

; 245  : {

$LN30:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR [rsp+72], rbp
	mov	ebp, r8d
	mov	QWORD PTR [rsp+40], r14
	mov	r14d, edx
	mov	rdi, rcx

; 246  :   uint32_t pattern;
; 247  : 
; 248  :   while (num_bins > 8) {

	cmp	r8d, 8
	jle	$LN3@kvz_cabac_
	mov	QWORD PTR [rsp+64], rbx
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+32], r15
	xor	r15d, r15d
	npad	11
$LL2@kvz_cabac_:

; 249  :     num_bins -= 8;
; 250  :     pattern = bin_values >> num_bins;
; 251  :     data->low <<= 8;
; 252  :     data->low += data->range * pattern;
; 253  :     bin_values -= pattern << num_bins;
; 254  :     data->bits_left -= 8;

	mov	r10d, DWORD PTR [rdi+24]
	sub	ebp, 8
	mov	eax, DWORD PTR [rdi+8]
	mov	ecx, ebp
	mov	r9d, DWORD PTR [rdi+12]
	mov	edx, r14d
	shr	edx, cl
	imul	r9d, edx
	shl	edx, cl
	shl	eax, 8
	sub	r14d, edx
	lea	edx, DWORD PTR [r10-8]
	mov	DWORD PTR [rdi+24], edx
	add	r9d, eax
	mov	DWORD PTR [rdi+8], r9d

; 255  : 
; 256  :     if(data->bits_left < 12) {

	cmp	edx, 12
	jge	$LN14@kvz_cabac_

; 139  :   uint32_t lead_byte = data->low >> (24 - data->bits_left);

	mov	ecx, 24

; 140  :   data->bits_left += 8;

	mov	DWORD PTR [rdi+24], r10d
	sub	ecx, edx
	mov	r8d, r9d
	shr	r8d, cl

; 141  :   data->low &= 0xffffffffu >> data->bits_left;

	mov	eax, -1					; ffffffffH
	mov	ecx, r10d
	shr	eax, cl
	and	eax, r9d
	mov	DWORD PTR [rdi+8], eax

; 142  : 
; 143  :   // Binary counter mode
; 144  :   if(data->only_count) {

	mov	eax, DWORD PTR [rdi+20]
	cmp	BYTE PTR [rdi+28], r15b
	je	SHORT $LN10@kvz_cabac_

; 145  :     data->num_buffered_bytes++;

	inc	eax
	mov	DWORD PTR [rdi+20], eax

; 146  :     return;

	jmp	$LN14@kvz_cabac_
$LN10@kvz_cabac_:

; 147  :   }
; 148  : 
; 149  :   if (lead_byte == 0xff) {

	cmp	r8d, 255				; 000000ffH
	jne	SHORT $LN11@kvz_cabac_

; 150  :     data->num_buffered_bytes++;

	inc	eax
	mov	DWORD PTR [rdi+20], eax

; 151  :   } else {

	jmp	$LN14@kvz_cabac_
$LN11@kvz_cabac_:

; 152  :     if (data->num_buffered_bytes > 0) {

	test	eax, eax
	jle	$LN13@kvz_cabac_

; 153  :       uint32_t carry = lead_byte >> 8;
; 154  :       uint32_t byte = data->buffered_byte + carry;

	mov	edx, DWORD PTR [rdi+16]
	mov	ebx, r8d

; 155  :       data->buffered_byte = lead_byte & 0xff;
; 156  :       kvz_bitstream_put_byte(data->stream, byte);

	mov	rcx, QWORD PTR [rdi+32]
	movzx	eax, r8b
	shr	ebx, 8
	add	edx, ebx
	mov	DWORD PTR [rdi+16], eax
	call	kvz_bitstream_put_byte

; 157  : 
; 158  :       byte = (0xff + carry) & 0xff;
; 159  :       while (data->num_buffered_bytes > 1) {

	cmp	DWORD PTR [rdi+20], 1
	lea	eax, DWORD PTR [rbx-1]
	movzx	esi, al
	jle	SHORT $LN14@kvz_cabac_
	npad	2
$LL8@kvz_cabac_:

; 160  :         kvz_bitstream_put_byte(data->stream, byte);

	mov	rbx, QWORD PTR [rdi+32]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 213  :   assert(stream->cur_bit == 0);

	cmp	BYTE PTR [rbx+25], r15b
	je	SHORT $LN19@kvz_cabac_
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294953920
	lea	rcx, OFFSET FLAT:$SG4294953919
	call	QWORD PTR __imp__wassert
$LN19@kvz_cabac_:

; 214  :   const uint8_t emulation_prevention_three_byte = 0x03;
; 215  : 
; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]
	cmp	al, 2
	jne	SHORT $LN17@kvz_cabac_
	cmp	esi, 4
	jae	SHORT $LN17@kvz_cabac_

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN17@kvz_cabac_:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	mov	rcx, rbx
	movzx	edx, al
	test	esi, esi
	cmovne	edx, r15d
	mov	BYTE PTR [rbx+26], dl
	movzx	edx, sil
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 161  :         data->num_buffered_bytes--;

	dec	DWORD PTR [rdi+20]
	cmp	DWORD PTR [rdi+20], 1
	jg	SHORT $LL8@kvz_cabac_

; 162  :       }
; 163  :     } else {

	jmp	SHORT $LN14@kvz_cabac_
$LN13@kvz_cabac_:

; 164  :       data->num_buffered_bytes = 1;

	mov	DWORD PTR [rdi+20], 1

; 165  :       data->buffered_byte = lead_byte;

	mov	DWORD PTR [rdi+16], r8d
$LN14@kvz_cabac_:

; 246  :   uint32_t pattern;
; 247  : 
; 248  :   while (num_bins > 8) {

	cmp	ebp, 8
	jg	$LL2@kvz_cabac_
	mov	r15, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+64]
$LN3@kvz_cabac_:

; 257  :       kvz_cabac_write(data);
; 258  :     }
; 259  :   }
; 260  : 
; 261  :   data->low <<= num_bins;

	mov	eax, DWORD PTR [rdi+8]
	mov	ecx, ebp

; 262  :   data->low += data->range * bin_values;
; 263  :   data->bits_left -= num_bins;

	sub	DWORD PTR [rdi+24], ebp
	mov	edx, DWORD PTR [rdi+12]
	mov	rbp, QWORD PTR [rsp+72]
	imul	edx, r14d
	mov	r14, QWORD PTR [rsp+40]
	shl	eax, cl
	add	edx, eax

; 264  : 
; 265  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rdi+24], 12
	mov	DWORD PTR [rdi+8], edx
	jge	SHORT $LN5@kvz_cabac_

; 266  :     kvz_cabac_write(data);

	mov	rcx, rdi

; 267  :   }
; 268  : }

	add	rsp, 48					; 00000030H
	pop	rdi

; 266  :     kvz_cabac_write(data);

	jmp	kvz_cabac_write
$LN5@kvz_cabac_:

; 267  :   }
; 268  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_cabac_encode_bins_ep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 8
kvz_cabac_start PROC

; 92   :   data->low = 0;

	xor	eax, eax

; 93   :   data->range = 510;

	mov	DWORD PTR [rcx+12], 510			; 000001feH
	mov	DWORD PTR [rcx+8], eax

; 94   :   data->bits_left = 23;
; 95   :   data->num_buffered_bytes = 0;
; 96   :   data->buffered_byte = 0xff;
; 97   :   data->only_count = 0; // By default, write bits out

	mov	BYTE PTR [rcx+28], al
	mov	DWORD PTR [rcx+24], 23
	mov	QWORD PTR [rcx+16], 255			; 000000ffH

; 98   : }

	ret	0
kvz_cabac_start ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 64
kvz_cabac_finish PROC

; 174  : {

$LN56:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 175  :   assert(data->bits_left <= 32);

	mov	ecx, DWORD PTR [rcx+24]
	cmp	ecx, 32					; 00000020H
	jle	SHORT $LN10@kvz_cabac_
	mov	r8d, 175				; 000000afH
	lea	rdx, OFFSET FLAT:$SG4294944615
	lea	rcx, OFFSET FLAT:$SG4294944614
	call	QWORD PTR __imp__wassert
	mov	ecx, DWORD PTR [rbx+24]
$LN10@kvz_cabac_:

; 176  : 
; 177  :   if (data->low >> (32 - data->bits_left)) {

	mov	edx, DWORD PTR [rbx+8]
	mov	esi, 32					; 00000020H
	mov	eax, esi
	xor	r15d, r15d
	sub	eax, ecx
	movzx	ecx, al
	shr	edx, cl
	test	edx, edx
	je	$LN6@kvz_cabac_

; 178  :     kvz_bitstream_put_byte(data->stream, data->buffered_byte + 1);

	mov	edx, DWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rbx+32]
	inc	edx
	call	kvz_bitstream_put_byte

; 179  :     while (data->num_buffered_bytes > 1) {

	cmp	DWORD PTR [rbx+20], 1
	jle	SHORT $LN3@kvz_cabac_
	npad	5
$LL2@kvz_cabac_:

; 180  :       kvz_bitstream_put_byte(data->stream, 0);

	mov	rdi, QWORD PTR [rbx+32]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 213  :   assert(stream->cur_bit == 0);

	cmp	BYTE PTR [rdi+25], r15b
	je	SHORT $LN14@kvz_cabac_
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294953920
	lea	rcx, OFFSET FLAT:$SG4294953919
	call	QWORD PTR __imp__wassert
$LN14@kvz_cabac_:

; 214  :   const uint8_t emulation_prevention_three_byte = 0x03;
; 215  : 
; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+26]
	cmp	al, 2
	jne	SHORT $LN50@kvz_cabac_

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN50@kvz_cabac_:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	xor	edx, edx
	mov	rcx, rdi
	mov	BYTE PTR [rdi+26], al
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 181  :       data->num_buffered_bytes--;

	dec	DWORD PTR [rbx+20]
	cmp	DWORD PTR [rbx+20], 1
	jg	SHORT $LL2@kvz_cabac_
$LN3@kvz_cabac_:

; 182  :     }
; 183  :     data->low -= 1 << (32 - data->bits_left);

	sub	esi, DWORD PTR [rbx+24]
	mov	eax, -1
	movzx	ecx, sil
	shl	eax, cl
	add	DWORD PTR [rbx+8], eax

; 184  :   } else {

	jmp	$LN5@kvz_cabac_
$LN6@kvz_cabac_:

; 185  :     if (data->num_buffered_bytes > 0) {

	cmp	DWORD PTR [rbx+20], r15d
	jle	SHORT $LN42@kvz_cabac_

; 186  :       kvz_bitstream_put_byte(data->stream, data->buffered_byte);

	mov	rdi, QWORD PTR [rbx+32]
	mov	esi, DWORD PTR [rbx+16]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 213  :   assert(stream->cur_bit == 0);

	cmp	BYTE PTR [rdi+25], r15b
	je	SHORT $LN20@kvz_cabac_
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294953920
	lea	rcx, OFFSET FLAT:$SG4294953919
	call	QWORD PTR __imp__wassert
$LN20@kvz_cabac_:

; 214  :   const uint8_t emulation_prevention_three_byte = 0x03;
; 215  : 
; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+26]
	cmp	al, 2
	jne	SHORT $LN18@kvz_cabac_
	cmp	esi, 4
	jae	SHORT $LN18@kvz_cabac_

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN18@kvz_cabac_:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	test	esi, esi
	movzx	eax, al
	mov	rcx, rdi
	cmovne	eax, r15d
	mov	BYTE PTR [rdi+26], al
	call	kvz_bitstream_writebyte
$LN42@kvz_cabac_:
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 188  :     while (data->num_buffered_bytes > 1) {

	cmp	DWORD PTR [rbx+20], 1
	jle	SHORT $LN5@kvz_cabac_
	npad	4
$LL4@kvz_cabac_:

; 189  :       kvz_bitstream_put_byte(data->stream, 0xff);

	mov	rdi, QWORD PTR [rbx+32]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 213  :   assert(stream->cur_bit == 0);

	cmp	BYTE PTR [rdi+25], r15b
	je	SHORT $LN26@kvz_cabac_
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294953920
	lea	rcx, OFFSET FLAT:$SG4294953919
	call	QWORD PTR __imp__wassert
$LN26@kvz_cabac_:

; 221  :   kvz_bitstream_writebyte(stream, data);

	mov	dl, 255					; 000000ffH
	mov	BYTE PTR [rdi+26], r15b
	mov	rcx, rdi
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 190  :       data->num_buffered_bytes--;

	dec	DWORD PTR [rbx+20]
	cmp	DWORD PTR [rbx+20], 1
	jg	SHORT $LL4@kvz_cabac_
$LN5@kvz_cabac_:

; 196  :     kvz_bitstream_put(data->stream, data->low >> 8, bits);

	mov	r14d, DWORD PTR [rbx+8]
	mov	esi, 24
	sub	sil, BYTE PTR [rbx+24]
	mov	rdi, QWORD PTR [rbx+32]
	shr	r14d, 8
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 233  :   while (bits--) {

	test	sil, sil
	je	$LN46@kvz_cabac_
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 195  :     uint8_t bits = (uint8_t)(24 - data->bits_left);

	movzx	eax, sil
	lea	rcx, OFFSET FLAT:kvz_bit_set_mask
	mov	QWORD PTR [rsp+64], rbp
	lea	rbp, QWORD PTR [rcx+rax*4]
	npad	3
$LL30@kvz_cabac_:
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 234  :     stream->data <<= 1;

	movzx	ebx, BYTE PTR [rdi+24]
	lea	rbp, QWORD PTR [rbp-4]
	add	bl, bl
	add	sil, 255				; 000000ffH
	mov	BYTE PTR [rdi+24], bl

; 235  : 
; 236  :     if (data & kvz_bit_set_mask[bits]) {

	test	DWORD PTR [rbp], r14d
	je	SHORT $LN51@kvz_cabac_

; 237  :       stream->data |= 1;

	or	bl, 1
	mov	BYTE PTR [rdi+24], bl
$LN51@kvz_cabac_:

; 238  :     }
; 239  :     stream->cur_bit++;

	inc	BYTE PTR [rdi+25]

; 240  : 
; 241  :     // write byte to output
; 242  :     if (stream->cur_bit == 8) {

	cmp	BYTE PTR [rdi+25], 8
	jne	SHORT $LN35@kvz_cabac_

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rdi+26]

; 243  :       stream->cur_bit = 0;

	mov	BYTE PTR [rdi+25], r15b

; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	cmp	al, 2
	jne	SHORT $LN36@kvz_cabac_
	cmp	bl, 4
	jae	SHORT $LN36@kvz_cabac_

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rdi
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN36@kvz_cabac_:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, bl
	test	bl, bl
	movzx	eax, al
	mov	rcx, rdi
	cmovne	eax, r15d
	mov	BYTE PTR [rdi+26], al
	call	kvz_bitstream_writebyte
$LN35@kvz_cabac_:

; 233  :   while (bits--) {

	test	sil, sil
	jne	SHORT $LL30@kvz_cabac_
	mov	rbp, QWORD PTR [rsp+64]
$LN46@kvz_cabac_:
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 198  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
kvz_cabac_finish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 8
bin_value$ = 16
kvz_cabac_encode_bin_trm PROC

; 206  :   data->range -= 2;

	mov	r8d, DWORD PTR [rcx+12]
	add	r8d, -2					; fffffffeH
	mov	DWORD PTR [rcx+12], r8d

; 207  :   if(bin_value) {

	test	dl, dl
	je	SHORT $LN2@kvz_cabac_

; 208  :     data->low += data->range;
; 209  :     data->low <<= 7;

	mov	eax, DWORD PTR [rcx+8]
	add	eax, r8d
	shl	eax, 7

; 210  :     data->range = 2 << 7;
; 211  :     data->bits_left -= 7;

	add	DWORD PTR [rcx+24], -7
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 256				; 00000100H
	jmp	SHORT $LN8@kvz_cabac_
$LN2@kvz_cabac_:

; 212  :   } else if (data->range >= 256) {

	mov	eax, 256				; 00000100H
	cmp	r8d, eax
	jae	SHORT $LN6@kvz_cabac_

; 213  :     return;
; 214  :   } else {
; 215  :     data->low <<= 1;

	shl	DWORD PTR [rcx+8], 1

; 216  :     data->range <<= 1;

	lea	eax, DWORD PTR [r8+r8]

; 217  :     data->bits_left--;

	dec	DWORD PTR [rcx+24]
$LN8@kvz_cabac_:

; 218  :   }
; 219  : 
; 220  :   if (data->bits_left < 12) {

	mov	edx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rcx+12], eax
	cmp	edx, 12
	jl	kvz_cabac_write
$LN6@kvz_cabac_:

; 221  :     kvz_cabac_write(data);
; 222  :   }
; 223  : }

	ret	0
kvz_cabac_encode_bin_trm ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 64
ctx$ = 72
symbol$ = 80
offset$dead$ = 88
max_symbol$ = 96
kvz_cabac_write_unary_max_symbol PROC

; 492  : {

$LN20:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rdi
	push	r15
	sub	rsp, 32					; 00000020H
	mov	edi, r8d
	mov	rbp, rdx
	mov	rbx, rcx
	mov	r15d, r8d

; 493  :   int8_t code_last = max_symbol > symbol;
; 494  : 
; 495  :   assert(symbol <= max_symbol);

	cmp	r8d, DWORD PTR max_symbol$[rsp]
	jbe	SHORT $LN8@kvz_cabac_
	mov	r8d, 495				; 000001efH
	lea	rdx, OFFSET FLAT:$SG4294944613
	lea	rcx, OFFSET FLAT:$SG4294944612
	call	QWORD PTR __imp__wassert
$LN8@kvz_cabac_:

; 496  : 
; 497  :   if (!max_symbol) return;
; 498  : 
; 499  :   data->cur_ctx = &ctx[0];
; 500  :   CABAC_BIN(data, symbol, "ums");

	mov	edx, edi
	mov	QWORD PTR [rbx], rbp
	mov	rcx, rbx
	call	kvz_cabac_encode_bin

; 501  : 
; 502  :   if (!symbol) return;

	test	edi, edi
	je	$LN6@kvz_cabac_

; 503  : 
; 504  :   while (--symbol) {

	add	edi, -1					; ffffffffH
	je	$LN3@kvz_cabac_
	mov	QWORD PTR [rsp+64], rsi
	lea	rsi, QWORD PTR [rbp+1]
	mov	QWORD PTR [rsp+72], r12
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL2@kvz_cabac_:

; 108  :   lps = kvz_g_auc_lpst_table[CTX_STATE(data->cur_ctx)][(data->range >> 6) & 3];

	mov	edx, DWORD PTR [rbx+12]
	mov	eax, edx
	shr	rax, 6
	and	eax, 3

; 505  :     data->cur_ctx = &ctx[offset];

	mov	QWORD PTR [rbx], rsi

; 108  :   lps = kvz_g_auc_lpst_table[CTX_STATE(data->cur_ctx)][(data->range >> 6) & 3];

	movzx	ecx, BYTE PTR [rsi]
	shr	rcx, 1
	lea	rax, QWORD PTR [rax+rcx*4]
	movzx	r8d, BYTE PTR kvz_g_auc_lpst_table[rax+r12]

; 109  :   data->range -= lps;

	sub	edx, r8d
	mov	DWORD PTR [rbx+12], edx

; 110  : 
; 111  :   // Not the Most Probable Symbol?
; 112  :   if ((bin_value ? 1 : 0) != CTX_MPS(data->cur_ctx)) {

	movzx	eax, BYTE PTR [rsi]
	test	al, 1
	jne	SHORT $LN10@kvz_cabac_

; 113  :     int num_bits = kvz_g_auc_renorm_table[lps >> 3];
; 114  :     data->low = (data->low + data->range) << num_bits;

	add	edx, DWORD PTR [rbx+8]
	mov	eax, r8d
	shr	rax, 3
	movzx	ecx, BYTE PTR kvz_g_auc_renorm_table[rax+r12]
	shl	edx, cl

; 115  :     data->range = lps << num_bits;

	shl	r8d, cl
	mov	DWORD PTR [rbx+8], edx
	mov	DWORD PTR [rbx+12], r8d

; 116  : 
; 117  :     CTX_UPDATE_LPS(data->cur_ctx);

	movzx	eax, BYTE PTR [rsi]
	movzx	eax, BYTE PTR kvz_g_auc_next_state_lps[rax+r12]
	mov	BYTE PTR [rsi], al

; 118  : 
; 119  :     data->bits_left -= num_bits;

	sub	DWORD PTR [rbx+24], ecx

; 120  :   } else {

	jmp	SHORT $LN18@kvz_cabac_
$LN10@kvz_cabac_:

; 121  :     CTX_UPDATE_MPS(data->cur_ctx);

	movzx	eax, BYTE PTR kvz_g_auc_next_state_mps[rax+r12]
	mov	BYTE PTR [rsi], al

; 122  :     if (data->range >= 256) return;

	mov	eax, DWORD PTR [rbx+12]
	cmp	eax, 256				; 00000100H
	jae	SHORT $LN13@kvz_cabac_

; 123  : 
; 124  :     data->low <<= 1;

	shl	DWORD PTR [rbx+8], 1

; 125  :     data->range <<= 1;

	add	eax, eax

; 126  :     data->bits_left--;

	dec	DWORD PTR [rbx+24]
	mov	DWORD PTR [rbx+12], eax
$LN18@kvz_cabac_:

; 127  :   }
; 128  : 
; 129  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR [rbx+24]
	cmp	eax, 12
	jge	SHORT $LN13@kvz_cabac_

; 130  :     kvz_cabac_write(data);

	mov	rcx, rbx
	call	kvz_cabac_write
$LN13@kvz_cabac_:

; 503  : 
; 504  :   while (--symbol) {

	add	edi, -1					; ffffffffH
	jne	$LL2@kvz_cabac_
	mov	r12, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+64]
$LN3@kvz_cabac_:

; 506  :     CABAC_BIN(data, 1, "ums");
; 507  :   }
; 508  :   if (code_last) {

	cmp	DWORD PTR max_symbol$[rsp], r15d
	jbe	SHORT $LN6@kvz_cabac_

; 509  :     data->cur_ctx = &ctx[offset];

	lea	rax, QWORD PTR [rbp+1]

; 510  :     CABAC_BIN(data, 0, "ums");

	xor	edx, edx
	mov	rcx, rbx
	mov	QWORD PTR [rbx], rax
	call	kvz_cabac_encode_bin
$LN6@kvz_cabac_:

; 511  :   }
; 512  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	rdi
	pop	rbp
	ret	0
kvz_cabac_write_unary_max_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
state$ = 64
cabac$ = 72
symbol$ = 80
r_param$ = 88
base_level$ = 96
kvz_cabac_write_coeff_remain_encry PROC

; 297  : {

$LN344:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r15
	sub	rsp, 32					; 00000020H

; 298  :  int32_t codeNumber  = (int32_t)symbol;
; 299  :  uint32_t length;
; 300  : 
; 301  :  if (codeNumber < (3 << r_param)) {

	mov	r15d, 1
	mov	rdi, rcx
	mov	ecx, r9d
	mov	esi, r15d
	mov	eax, 3
	shl	esi, cl
	shl	eax, cl
	mov	r12d, r9d
	mov	ebp, r8d
	mov	rbx, rdx
	cmp	r8d, eax
	jge	$LN4@kvz_cabac_

; 302  :    length = codeNumber>>r_param;

	mov	eax, r8d
	sar	eax, cl

; 303  :    CABAC_BINS_EP(cabac, (1 << (length + 1)) - 2 , length + 1, "coeff_abs_level_remaining");

	lea	ecx, DWORD PTR [rax+1]
	shl	r15d, cl
	mov	r8d, ecx
	mov	rcx, rbx
	lea	edx, DWORD PTR [r15-2]
	call	kvz_cabac_encode_bins_ep

; 304  :    //m_pcBinIf->encodeBinsEP( (1<<(length+1))-2 , length+1);
; 305  :    uint32_t Suffix = (codeNumber%(1<<r_param));

	mov	eax, ebp
	cdq
	idiv	esi
	mov	esi, edx

; 306  : 
; 307  :    if(!r_param)

	test	r12d, r12d
	jne	SHORT $LN6@kvz_cabac_

; 308  :     CABAC_BINS_EP(cabac, Suffix, r_param, "coeff_abs_level_remaining");

	xor	r8d, r8d
	mov	rcx, rbx
	call	kvz_cabac_encode_bins_ep

; 309  :     //m_pcBinIf->encodeBinsEP(Suffix, r_param);
; 310  :    if(r_param==1) {

	jmp	$LN5@kvz_cabac_
$LN6@kvz_cabac_:
	cmp	r12d, 1
	jne	SHORT $LN7@kvz_cabac_

; 311  :      if(!(( base_level ==2 )&& (codeNumber==4 || codeNumber==5) ) ) {

	cmp	DWORD PTR base_level$[rsp], 2
	jne	SHORT $LN11@kvz_cabac_
	lea	eax, DWORD PTR [rbp-4]
	cmp	eax, r12d
	ja	SHORT $LN11@kvz_cabac_

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	imul	ecx, esi

; 266  :     kvz_cabac_write(data);

	dec	DWORD PTR [rbx+24]
	lea	ecx, DWORD PTR [rcx+rax*2]

; 314  :        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 1, "coeff_abs_level_remaining");
; 315  :        //m_pcBinIf->encodeBinsEP(m_prev_pos, 1);
; 316  :      } else {
; 317  :        CABAC_BINS_EP(cabac, Suffix, 1, "coeff_abs_level_remaining");
; 318  :        //m_pcBinIf->encodeBinsEP(Suffix, 1);
; 319  :      }
; 320  :    }

	jmp	$LN341@kvz_cabac_
$LN11@kvz_cabac_:

; 312  :        uint32_t key = kvz_crypto_get_key(state->crypto_hdl, 1);
; 313  :        state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 1;

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 1
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]
	dec	DWORD PTR [rbx+24]
	lea	ecx, DWORD PTR [rcx+rax*2]

; 314  :        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 1, "coeff_abs_level_remaining");
; 315  :        //m_pcBinIf->encodeBinsEP(m_prev_pos, 1);
; 316  :      } else {
; 317  :        CABAC_BINS_EP(cabac, Suffix, 1, "coeff_abs_level_remaining");
; 318  :        //m_pcBinIf->encodeBinsEP(Suffix, 1);
; 319  :      }
; 320  :    }

	jmp	$LN341@kvz_cabac_
$LN7@kvz_cabac_:

; 321  :    else
; 322  :     if(r_param==2) {

	cmp	r12d, 2
	jne	$LN12@kvz_cabac_

; 323  :        if( base_level ==1) {

	mov	eax, DWORD PTR base_level$[rsp]
	cmp	eax, 1
	jne	SHORT $LN14@kvz_cabac_

; 324  :          uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 325  :          state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 3
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax
	mov	eax, DWORD PTR [rbx+8]

; 263  :   data->bits_left -= num_bins;

	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 326  :          CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 327  :          //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 328  :        } else

	jmp	$LN341@kvz_cabac_
$LN14@kvz_cabac_:

; 329  :          if( base_level ==2) {

	lea	ecx, DWORD PTR [rbp-8]
	cmp	eax, 2
	jne	SHORT $LN16@kvz_cabac_

; 330  :            if(codeNumber<=7 || codeNumber>=12) {

	cmp	ecx, 3
	ja	SHORT $LN20@kvz_cabac_

; 333  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 334  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 335  :            }
; 336  :            else
; 337  :              if(codeNumber<10) {

	cmp	ebp, 10
	jge	SHORT $LN21@kvz_cabac_

; 338  :                 uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 339  :                 state->crypto_prev_pos  = (( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	ecx, DWORD PTR [rdi+360]
	add	ecx, esi
	and	ecx, 1
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]
	mov	eax, DWORD PTR [rbx+8]

; 263  :   data->bits_left -= num_bins;

	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 340  :                 CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 341  :                 //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 342  :              } else

	jmp	$LN341@kvz_cabac_
$LN21@kvz_cabac_:

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	imul	ecx, esi

; 266  :     kvz_cabac_write(data);

	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 343  :                CABAC_BINS_EP(cabac, Suffix, 2, "coeff_abs_level_remaining");
; 344  :                //m_pcBinIf->encodeBinsEP(Suffix, 2);
; 345  :          } else { //base_level=3

	jmp	$LN341@kvz_cabac_
$LN20@kvz_cabac_:

; 331  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 332  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	mov	ecx, DWORD PTR [rdi+360]
	add	ecx, esi
	and	ecx, 3
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]
	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 343  :                CABAC_BINS_EP(cabac, Suffix, 2, "coeff_abs_level_remaining");
; 344  :                //m_pcBinIf->encodeBinsEP(Suffix, 2);
; 345  :          } else { //base_level=3

	jmp	$LN341@kvz_cabac_
$LN16@kvz_cabac_:

; 346  :            if(codeNumber<=7 || codeNumber>11) {

	mov	eax, DWORD PTR [rdi+360]
	cmp	ecx, 3
	ja	SHORT $LN25@kvz_cabac_

; 349  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 350  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 351  :            } else {
; 352  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 353  :              state->crypto_prev_pos  = ((Suffix&2))+(( (Suffix&1) + ( state->crypto_prev_pos^key)) & 1);

	lea	edx, DWORD PTR [rsi+rax]
	and	esi, 2
	and	edx, 1
	add	edx, esi
	mov	DWORD PTR [rdi+360], edx

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	imul	ecx, edx

; 266  :     kvz_cabac_write(data);

	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 354  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 355  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 356  :            }
; 357  :          }
; 358  :      } else

	jmp	$LN341@kvz_cabac_
$LN25@kvz_cabac_:

; 347  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 348  :              state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	add	eax, esi
	and	eax, 3
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR [rbx+8]
	add	DWORD PTR [rbx+24], -2
	lea	ecx, DWORD PTR [rcx+rax*4]

; 354  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");
; 355  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 356  :            }
; 357  :          }
; 358  :      } else

	jmp	$LN341@kvz_cabac_
$LN12@kvz_cabac_:

; 359  :        if(r_param==3) {

	cmp	r12d, 3
	jne	$LN26@kvz_cabac_

; 360  :          if( base_level ==1) {

	mov	eax, DWORD PTR base_level$[rsp]
	cmp	eax, 1
	jne	SHORT $LN28@kvz_cabac_

; 361  :            uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);
; 362  :            state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 7;

	mov	ecx, DWORD PTR [rdi+360]
	add	ecx, esi
	and	ecx, 7
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]
	mov	eax, DWORD PTR [rbx+8]

; 263  :   data->bits_left -= num_bins;

	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]

; 363  :            CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 364  :            //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 365  :          }

	jmp	$LN341@kvz_cabac_
$LN28@kvz_cabac_:

; 366  :          else if( base_level ==2) {

	cmp	eax, 2
	jne	$LN30@kvz_cabac_

; 367  :            if(codeNumber<=15 || codeNumber>23) {

	lea	eax, DWORD PTR [rbp-16]
	cmp	eax, 7
	ja	SHORT $LN34@kvz_cabac_

; 370  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 371  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 372  :            } else
; 373  :              if(codeNumber<=19){

	cmp	ebp, 19
	jg	SHORT $LN35@kvz_cabac_

; 374  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 375  :                state->crypto_prev_pos  = ((Suffix&4))+(( (Suffix&3) + (state->crypto_prev_pos^key )) & 3);

	mov	ecx, DWORD PTR [rdi+360]
	add	ecx, esi
	and	esi, 4
	and	ecx, 3
	add	ecx, esi
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]
	mov	eax, DWORD PTR [rbx+8]

; 263  :   data->bits_left -= num_bins;

	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]

; 376  :                CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 377  :                //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 378  :              } else

	jmp	$LN341@kvz_cabac_
$LN35@kvz_cabac_:

; 379  :                if(codeNumber<=21){

	cmp	ebp, 21
	jg	SHORT $LN37@kvz_cabac_

; 380  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 381  :                  state->crypto_prev_pos  = 4+(( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 1
	add	eax, 4
$LN342@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	DWORD PTR [rdi+360], eax
	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax
	mov	eax, DWORD PTR [rbx+8]
	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]
	jmp	$LN341@kvz_cabac_
$LN37@kvz_cabac_:

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	imul	ecx, esi

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]
	jmp	$LN341@kvz_cabac_
$LN34@kvz_cabac_:

; 368  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);
; 369  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 7;

	mov	eax, DWORD PTR [rdi+360]
$LN41@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	add	eax, esi
	and	eax, 7
	mov	DWORD PTR [rdi+360], eax
	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax
	mov	eax, DWORD PTR [rbx+8]
	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]
	jmp	$LN341@kvz_cabac_
$LN30@kvz_cabac_:

; 261  :   data->low <<= num_bins;

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 263  :   data->bits_left -= num_bins;

	add	DWORD PTR [rbx+24], -3
	imul	ecx, esi

; 264  : 
; 265  :   if (data->bits_left < 12) {

	cmp	DWORD PTR [rbx+24], 12
	lea	ecx, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [rbx+8], ecx
	jge	SHORT $LN150@kvz_cabac_

; 266  :     kvz_cabac_write(data);

	mov	rcx, rbx
	call	kvz_cabac_write
$LN150@kvz_cabac_:

; 382  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 383  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 384  :                } else
; 385  :                  CABAC_BINS_EP(cabac, Suffix, 3, "coeff_abs_level_remaining");
; 386  :            // m_pcBinIf->encodeBinsEP(Suffix, 3);
; 387  :          } else {//base_level=3
; 388  :            CABAC_BINS_EP(cabac, Suffix, 3, "coeff_abs_level_remaining");
; 389  :            //m_pcBinIf->encodeBinsEP(Suffix, 3);
; 390  :            if(codeNumber<=15 || codeNumber>23) {

	lea	eax, DWORD PTR [rbp-16]
	cmp	eax, 7
	mov	eax, DWORD PTR [rdi+360]
	ja	SHORT $LN41@kvz_cabac_

; 391  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);
; 392  :              state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 7;
; 393  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 394  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 395  :            } else
; 396  :              if(codeNumber<=19) {

	cmp	ebp, 19
	jg	SHORT $LN42@kvz_cabac_

; 397  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 398  :                state->crypto_prev_pos  = (( (Suffix&3) + ( state->crypto_prev_pos^key )) &3);

	add	eax, esi
	and	eax, 3

; 399  :                CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 400  :                //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 401  :              } else

	jmp	$LN342@kvz_cabac_
$LN42@kvz_cabac_:

; 402  :                if(codeNumber<=23) {
; 403  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 404  :                  state->crypto_prev_pos  = (Suffix&6)+(( (Suffix&1) + (state->crypto_prev_pos^key )) & 1);

	lea	edx, DWORD PTR [rsi+rax]
	and	esi, 6
	and	edx, 1
	add	edx, esi
	mov	DWORD PTR [rdi+360], edx

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	eax, DWORD PTR [rbx+8]

; 262  :   data->low += data->range * bin_values;

	imul	ecx, edx

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	add	DWORD PTR [rbx+24], -3
	lea	ecx, DWORD PTR [rcx+rax*8]
	jmp	$LN341@kvz_cabac_
$LN26@kvz_cabac_:

; 405  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");
; 406  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 407  :                }
; 408  :          }
; 409  :        } else
; 410  :          if(r_param==4) {

	cmp	r12d, 4
	jne	$LN5@kvz_cabac_

; 411  :            if( base_level ==1) {

	mov	ecx, DWORD PTR base_level$[rsp]
	cmp	ecx, 1
	jne	SHORT $LN46@kvz_cabac_

; 412  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);
; 413  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 15;

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 15
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 414  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 415  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 416  :            } else

	jmp	SHORT $LN338@kvz_cabac_
$LN46@kvz_cabac_:

; 417  :              if( base_level ==2) {

	lea	eax, DWORD PTR [rbp-32]
	cmp	ecx, 2
	jne	$LN48@kvz_cabac_

; 418  :                if(codeNumber<=31 || codeNumber>47) {

	cmp	eax, 15
	ja	$LN61@kvz_cabac_

; 419  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);
; 420  :                  state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 15;
; 421  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, r_param, "coeff_abs_level_remaining");
; 422  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, r_param);
; 423  :                } else
; 424  :                  if(codeNumber<=39) {

	cmp	ebp, 39					; 00000027H
	jg	SHORT $LN53@kvz_cabac_

; 425  :                    uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);
; 426  :                    state->crypto_prev_pos  = (( (Suffix&7) + ( state->crypto_prev_pos^key )) & 7);

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 7
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 427  :                    CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 428  :                    //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 429  :                  } else

	jmp	SHORT $LN338@kvz_cabac_
$LN53@kvz_cabac_:

; 430  :                    if(codeNumber<=43) {

	cmp	ebp, 43					; 0000002bH
	jg	SHORT $LN55@kvz_cabac_

; 431  :                      uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 432  :                      state->crypto_prev_pos  = 8+(( (Suffix&3) + ( state->crypto_prev_pos^key )) & 3);

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 3
	add	eax, 8
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 433  :                      CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 434  :                      //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 435  :                    } else

	jmp	SHORT $LN338@kvz_cabac_
$LN55@kvz_cabac_:

; 436  :                      if(codeNumber<=45){

	cmp	ebp, 45					; 0000002dH
	jg	SHORT $LN57@kvz_cabac_

; 437  :                        uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 438  :                        state->crypto_prev_pos  = 12+(( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR [rdi+360]
	add	eax, esi
	and	eax, 1
	add	eax, 12
	mov	DWORD PTR [rdi+360], eax

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, eax

; 439  :                        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 440  :                        //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 441  :                      } else

	jmp	SHORT $LN338@kvz_cabac_
$LN57@kvz_cabac_:

; 262  :   data->low += data->range * bin_values;

	mov	ecx, DWORD PTR [rbx+12]
	imul	ecx, esi
$LN338@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	eax, DWORD PTR [rbx+8]
	shl	eax, 4
	add	ecx, eax
	add	DWORD PTR [rbx+24], -4
$LN341@kvz_cabac_:
	cmp	DWORD PTR [rbx+24], 12
	mov	DWORD PTR [rbx+8], ecx
	jge	$LN5@kvz_cabac_
	mov	rcx, rbx
	call	kvz_cabac_write
	jmp	$LN5@kvz_cabac_
$LN48@kvz_cabac_:

; 442  :                        CABAC_BINS_EP(cabac, Suffix, 4, "coeff_abs_level_remaining");
; 443  :                        //m_pcBinIf->encodeBinsEP(Suffix, 4);
; 444  :              } else {//base_level=3
; 445  :                if(codeNumber<=31 || codeNumber>47) {

	cmp	eax, 15
	ja	SHORT $LN61@kvz_cabac_

; 446  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);
; 447  :                  state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 15;
; 448  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, r_param, "coeff_abs_level_remaining");
; 449  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, r_param);
; 450  :                } else
; 451  :                  if(codeNumber<=39) {

	cmp	ebp, 39					; 00000027H
	jg	SHORT $LN62@kvz_cabac_

; 452  :                    uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);
; 453  :                    state->crypto_prev_pos  = (( (Suffix&7) + ( state->crypto_prev_pos^key )) & 7);

	mov	ecx, DWORD PTR [rdi+360]
	add	ecx, esi
	and	ecx, 7
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]

; 454  :                    CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 455  :                    //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 456  :                  } else

	jmp	SHORT $LN338@kvz_cabac_
$LN62@kvz_cabac_:

; 457  :                    if(codeNumber<=43) {

	mov	eax, DWORD PTR [rdi+360]
	lea	ecx, DWORD PTR [rsi+rax]
	cmp	ebp, 43					; 0000002bH
	jg	SHORT $LN64@kvz_cabac_

; 458  :                      uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);
; 459  :                      state->crypto_prev_pos  = 8+(( (Suffix&3) + ( state->crypto_prev_pos^key )) & 3);

	and	ecx, 3
	add	ecx, 8
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]

; 460  :                      CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 461  :                      //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 462  :                    } else

	jmp	SHORT $LN338@kvz_cabac_
$LN64@kvz_cabac_:

; 463  :                      if(codeNumber<=47) {
; 464  :                        uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);
; 465  :                        state->crypto_prev_pos  = (Suffix&14)+(( (Suffix&1) + (state->crypto_prev_pos^key )) & 1);

	and	ecx, 1
	and	esi, 14
	add	ecx, esi
	mov	DWORD PTR [rdi+360], ecx

; 262  :   data->low += data->range * bin_values;

	imul	ecx, DWORD PTR [rbx+12]

; 266  :     kvz_cabac_write(data);

	jmp	SHORT $LN338@kvz_cabac_
$LN61@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	edx, DWORD PTR [rdi+360]
	mov	r8d, 4
	add	edx, esi
	mov	rcx, rbx
	and	edx, 15
	mov	DWORD PTR [rdi+360], edx
	call	kvz_cabac_encode_bins_ep
	jmp	SHORT $LN5@kvz_cabac_
$LN4@kvz_cabac_:

; 466  :                        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");
; 467  :                        //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 468  :                      }
; 469  :              }
; 470  :        }
; 471  :   } else {
; 472  :     length = r_param;
; 473  :     codeNumber  = codeNumber - ( 3 << r_param);

	sub	ebp, eax
	mov	QWORD PTR [rsp+64], r14
	mov	r14d, r12d

; 474  :     while (codeNumber >= (1<<length)) {

	cmp	ebp, esi
	jl	SHORT $LN3@kvz_cabac_
$LL2@kvz_cabac_:

; 475  :       codeNumber -=  (1<<(length));

	sub	ebp, esi

; 476  :       ++length;

	inc	r14d
	mov	ecx, r14d
	mov	esi, r15d
	shl	esi, cl
	cmp	ebp, esi
	jge	SHORT $LL2@kvz_cabac_
$LN3@kvz_cabac_:

; 477  :     }
; 478  :     CABAC_BINS_EP(cabac, (1 << (3 + length + 1 - r_param)) - 2, 3 + length + 1 - r_param, "coeff_abs_level_remaining");

	mov	ecx, r14d
	mov	edx, r15d
	sub	ecx, r12d
	add	ecx, 4
	shl	edx, cl
	mov	r8d, ecx
	sub	edx, 2
	mov	rcx, rbx
	call	kvz_cabac_encode_bins_ep

; 479  :     //m_pcBinIf->encodeBinsEP((1<<(COEF_REMAIN_BIN_REDUCTION+length+1-r_param))-2,COEF_REMAIN_BIN_REDUCTION+length+1-r_param);
; 480  :     uint32_t Suffix = codeNumber;
; 481  :     uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, length);
; 482  :     uint32_t mask   = ( (1<<length ) -1 );
; 483  :     state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & mask;

	mov	eax, DWORD PTR [rdi+360]
	mov	ecx, r14d
	shl	r15d, cl
	add	eax, ebp
	dec	r15d

; 484  :     CABAC_BINS_EP(cabac, state->crypto_prev_pos, length, "coeff_abs_level_remaining");

	mov	r8d, r14d
	and	r15d, eax
	mov	rcx, rbx
	mov	edx, r15d
	mov	DWORD PTR [rdi+360], r15d
	call	kvz_cabac_encode_bins_ep
	mov	r14, QWORD PTR [rsp+64]
$LN5@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r12
	pop	rdi
	ret	0
kvz_cabac_write_coeff_remain_encry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
cabac$ = 48
symbol$ = 56
r_param$ = 64
kvz_cabac_write_coeff_remain PROC

; 276  : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, r8d
	mov	rsi, rcx

; 277  :   int32_t code_number = symbol;
; 278  :   uint32_t length;
; 279  : 
; 280  :   if (code_number < (3 << r_param)) {

	mov	ecx, r8d
	mov	r9d, 1
	mov	r8d, r9d
	mov	eax, 3
	shl	r8d, cl
	mov	ebx, edx
	shl	eax, cl
	cmp	edx, eax
	jge	SHORT $LN4@kvz_cabac_

; 281  :     length = code_number >> r_param;

	mov	r10d, edx

; 282  :     CABAC_BINS_EP(cabac, (1 << (length + 1)) - 2 , length + 1, "coeff_abs_level_remaining");
; 283  :     CABAC_BINS_EP(cabac, (code_number % (1 << r_param)), r_param, "coeff_abs_level_remaining");

	mov	eax, edx
	sar	r10d, cl
	cdq
	inc	r10d
	idiv	r8d
	mov	ebx, edx

; 284  :   } else {

	jmp	SHORT $LN11@kvz_cabac_
$LN4@kvz_cabac_:

; 285  :     length = r_param;
; 286  :     code_number = code_number - (3 << r_param);

	sub	ebx, eax

; 287  :     while (code_number >= (1 << length)) {

	cmp	ebx, r8d
	jl	SHORT $LN3@kvz_cabac_
	npad	5
$LL2@kvz_cabac_:

; 288  :       code_number -= 1 << length;

	sub	ebx, r8d

; 289  :       ++length;

	inc	ecx
	mov	r8d, r9d
	shl	r8d, cl
	cmp	ebx, r8d
	jge	SHORT $LL2@kvz_cabac_
$LN3@kvz_cabac_:

; 290  :     }
; 291  :     CABAC_BINS_EP(cabac, (1 << (3 + length + 1 - r_param)) - 2, 3 + length + 1 - r_param, "coeff_abs_level_remaining");

	mov	r10d, ecx
	sub	r10d, edi

; 292  :     CABAC_BINS_EP(cabac, code_number, length, "coeff_abs_level_remaining");

	mov	edi, ecx
	add	r10d, 4
$LN11@kvz_cabac_:

; 293  :   }
; 294  : }

	mov	ecx, r10d
	mov	r8d, r10d
	shl	r9d, cl
	mov	rcx, rsi
	sub	r9d, 2
	mov	edx, r9d
	call	kvz_cabac_encode_bins_ep
	mov	r8d, edi
	mov	edx, ebx
	mov	rcx, rsi
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	kvz_cabac_encode_bins_ep
kvz_cabac_write_coeff_remain ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
state$ = 16
data$ = 24
symbol$ = 32
count$ = 40
kvz_cabac_write_ep_ex_golomb PROC

; 551  : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi

; 552  :   uint32_t bins = 0;

	xor	r10d, r10d

; 553  :   int32_t num_bins = 0;
; 554  : 
; 555  :   while (symbol >= (uint32_t)(1 << count)) {

	mov	ebx, 1
	mov	rsi, rcx
	mov	eax, ebx
	mov	ecx, r9d
	mov	rdi, rdx
	shl	eax, cl
	mov	r11d, r10d
	cmp	r8d, eax
	jb	SHORT $LN3@kvz_cabac_
	mov	eax, ebx
	rol	eax, cl
	npad	4
$LL2@kvz_cabac_:

; 556  :     bins = 2 * bins + 1;
; 557  :     ++num_bins;
; 558  :     symbol -= 1 << count;

	sub	r8d, eax
	lea	r10d, DWORD PTR [r10*2+1]

; 559  :     ++count;

	rol	eax, 1
	inc	r11d
	inc	r9d
	cmp	r8d, eax
	jae	SHORT $LL2@kvz_cabac_
$LN3@kvz_cabac_:

; 560  :   }
; 561  :   bins = 2 * bins;

	lea	edx, DWORD PTR [r10+r10]

; 562  :   ++num_bins;
; 563  : 
; 564  :   bins      = (bins << count) | symbol;

	mov	ecx, r9d
	shl	edx, cl
	or	edx, r8d

; 565  :   num_bins += count;

	lea	r8d, DWORD PTR [r9+1]
	add	r8d, r11d

; 566  :   if (!data->only_count) {

	cmp	BYTE PTR [rdi+28], 0
	jne	SHORT $LN5@kvz_cabac_

; 567  :     if (state->encoder_control->cfg.crypto_features & KVZ_CRYPTO_MVs) {

	mov	rax, QWORD PTR [rsi]
	test	BYTE PTR [rax+2372], bl
	je	SHORT $LN5@kvz_cabac_

; 568  :       uint32_t key, mask;
; 569  :       key                      = kvz_crypto_get_key(state->crypto_hdl, num_bins>>1);
; 570  :       mask                     = ( (1<<(num_bins >>1) ) -1 );
; 571  :       state->crypto_prev_pos  = ( bins + ( state->crypto_prev_pos^key ) ) & mask;

	mov	eax, DWORD PTR [rsi+360]
	mov	ecx, r8d
	sar	ecx, 1
	add	eax, edx
	shl	ebx, cl
	dec	ebx

; 572  :       bins                     = ( (bins >> (num_bins >>1) ) << (num_bins >>1) ) | state->crypto_prev_pos;

	shr	edx, cl
	and	ebx, eax
	shl	edx, cl
	mov	DWORD PTR [rsi+360], ebx
	or	edx, ebx
$LN5@kvz_cabac_:

; 573  :     }
; 574  :   }
; 575  :   kvz_cabac_encode_bins_ep(data, bins, num_bins);

	mov	rcx, rdi

; 576  : }

	mov	rbx, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	pop	rdi

; 573  :     }
; 574  :   }
; 575  :   kvz_cabac_encode_bins_ep(data, bins, num_bins);

	jmp	kvz_cabac_encode_bins_ep
kvz_cabac_write_ep_ex_golomb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
_TEXT	SEGMENT
hdl$dead$ = 8
num_bits$dead$ = 16
kvz_crypto_get_key PROC

; 66   :   return 0;

	xor	eax, eax

; 67   : }

	ret	0
kvz_crypto_get_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
_TEXT	SEGMENT
data$ = 48
kvz_cabac_write PROC

; 138  : {

$LN24:
	push	rdi
	sub	rsp, 32					; 00000020H

; 139  :   uint32_t lead_byte = data->low >> (24 - data->bits_left);

	mov	edx, DWORD PTR [rcx+24]
	mov	rdi, rcx
	mov	ecx, 24

; 140  :   data->bits_left += 8;
; 141  :   data->low &= 0xffffffffu >> data->bits_left;

	mov	eax, -1					; ffffffffH
	sub	ecx, edx
	mov	r9d, DWORD PTR [rdi+8]
	shr	r9d, cl
	lea	ecx, DWORD PTR [rdx+8]
	shr	eax, cl
	and	DWORD PTR [rdi+8], eax

; 142  : 
; 143  :   // Binary counter mode
; 144  :   if(data->only_count) {

	cmp	BYTE PTR [rdi+28], 0
	mov	eax, DWORD PTR [rdi+20]
	mov	DWORD PTR [rdi+24], ecx
	jne	SHORT $LN22@kvz_cabac_

; 145  :     data->num_buffered_bytes++;
; 146  :     return;
; 147  :   }
; 148  : 
; 149  :   if (lead_byte == 0xff) {

	cmp	r9d, 255				; 000000ffH
	jne	SHORT $LN5@kvz_cabac_
$LN22@kvz_cabac_:

; 166  :     }
; 167  :   }
; 168  : }

	inc	eax
	mov	DWORD PTR [rdi+20], eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@kvz_cabac_:

; 150  :     data->num_buffered_bytes++;
; 151  :   } else {
; 152  :     if (data->num_buffered_bytes > 0) {

	test	eax, eax
	jle	$LN7@kvz_cabac_

; 153  :       uint32_t carry = lead_byte >> 8;
; 154  :       uint32_t byte = data->buffered_byte + carry;

	mov	edx, DWORD PTR [rdi+16]

; 155  :       data->buffered_byte = lead_byte & 0xff;
; 156  :       kvz_bitstream_put_byte(data->stream, byte);

	mov	rcx, QWORD PTR [rdi+32]
	mov	QWORD PTR [rsp+48], rbx
	mov	ebx, r9d
	movzx	eax, r9b
	shr	ebx, 8
	add	edx, ebx
	mov	QWORD PTR [rsp+64], rsi
	mov	DWORD PTR [rdi+16], eax
	call	kvz_bitstream_put_byte

; 157  : 
; 158  :       byte = (0xff + carry) & 0xff;
; 159  :       while (data->num_buffered_bytes > 1) {

	cmp	DWORD PTR [rdi+20], 1
	lea	eax, DWORD PTR [rbx-1]
	movzx	esi, al
	jle	SHORT $LN21@kvz_cabac_
	mov	QWORD PTR [rsp+56], rbp
	xor	ebp, ebp
	npad	9
$LL2@kvz_cabac_:

; 160  :         kvz_bitstream_put_byte(data->stream, byte);

	mov	rbx, QWORD PTR [rdi+32]
; File F:\open_codec_learn_2021\kvazaar-master\src\bitstream.c

; 213  :   assert(stream->cur_bit == 0);

	cmp	BYTE PTR [rbx+25], bpl
	je	SHORT $LN13@kvz_cabac_
	mov	r8d, 213				; 000000d5H
	lea	rdx, OFFSET FLAT:$SG4294953920
	lea	rcx, OFFSET FLAT:$SG4294953919
	call	QWORD PTR __imp__wassert
$LN13@kvz_cabac_:

; 214  :   const uint8_t emulation_prevention_three_byte = 0x03;
; 215  : 
; 216  :   if ((stream->zerocount == 2) && (data < 4)) {

	movzx	eax, BYTE PTR [rbx+26]
	cmp	al, 2
	jne	SHORT $LN11@kvz_cabac_
	cmp	esi, 4
	jae	SHORT $LN11@kvz_cabac_

; 217  :     kvz_bitstream_writebyte(stream, emulation_prevention_three_byte);

	mov	dl, 3
	mov	rcx, rbx
	call	kvz_bitstream_writebyte

; 218  :     stream->zerocount = 0;

	xor	al, al
$LN11@kvz_cabac_:

; 219  :   }
; 220  :   stream->zerocount = data == 0 ? stream->zerocount + 1 : 0;

	inc	al

; 221  :   kvz_bitstream_writebyte(stream, data);

	movzx	edx, sil
	movzx	eax, al
	test	esi, esi
	mov	rcx, rbx
	cmovne	eax, ebp
	mov	BYTE PTR [rbx+26], al
	call	kvz_bitstream_writebyte
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c

; 161  :         data->num_buffered_bytes--;

	dec	DWORD PTR [rdi+20]
	cmp	DWORD PTR [rdi+20], 1
	jg	SHORT $LL2@kvz_cabac_

; 162  :       }
; 163  :     } else {

	mov	rbp, QWORD PTR [rsp+56]
$LN21@kvz_cabac_:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]

; 166  :     }
; 167  :   }
; 168  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@kvz_cabac_:

; 164  :       data->num_buffered_bytes = 1;

	mov	DWORD PTR [rdi+20], 1

; 165  :       data->buffered_byte = lead_byte;

	mov	DWORD PTR [rdi+16], r9d

; 166  :     }
; 167  :   }
; 168  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_cabac_write ENDP
_TEXT	ENDS
END
