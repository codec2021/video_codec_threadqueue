; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
PUBLIC	kvz_image_list_resize
PUBLIC	kvz_image_list_rem
PUBLIC	kvz_image_list_add
PUBLIC	kvz_image_list_copy_contents
PUBLIC	kvz_image_list_destroy
PUBLIC	kvz_image_list_alloc
pdata	SEGMENT
$pdata$kvz_image_list_resize DD imagerel $LN7
	DD	imagerel $LN7+170
	DD	imagerel $unwind$kvz_image_list_resize
$pdata$kvz_image_list_rem DD imagerel $LN85
	DD	imagerel $LN85+980
	DD	imagerel $unwind$kvz_image_list_rem
$pdata$kvz_image_list_add DD imagerel $LN66
	DD	imagerel $LN66+212
	DD	imagerel $unwind$kvz_image_list_add
$pdata$1$kvz_image_list_add DD imagerel $LN66+212
	DD	imagerel $LN66+331
	DD	imagerel $chain$1$kvz_image_list_add
$pdata$2$kvz_image_list_add DD imagerel $LN66+331
	DD	imagerel $LN66+941
	DD	imagerel $chain$2$kvz_image_list_add
$pdata$kvz_image_list_copy_contents DD imagerel $LN18
	DD	imagerel $LN18+46
	DD	imagerel $unwind$kvz_image_list_copy_contents
$pdata$2$kvz_image_list_copy_contents DD imagerel $LN18+46
	DD	imagerel $LN18+171
	DD	imagerel $chain$2$kvz_image_list_copy_contents
$pdata$3$kvz_image_list_copy_contents DD imagerel $LN18+171
	DD	imagerel $LN18+185
	DD	imagerel $chain$3$kvz_image_list_copy_contents
$pdata$kvz_image_list_destroy DD imagerel $LN55
	DD	imagerel $LN55+24
	DD	imagerel $unwind$kvz_image_list_destroy
$pdata$2$kvz_image_list_destroy DD imagerel $LN55+24
	DD	imagerel $LN55+361
	DD	imagerel $chain$2$kvz_image_list_destroy
$pdata$3$kvz_image_list_destroy DD imagerel $LN55+361
	DD	imagerel $LN55+445
	DD	imagerel $chain$3$kvz_image_list_destroy
$pdata$kvz_image_list_alloc DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$kvz_image_list_alloc
xdata	SEGMENT
$unwind$kvz_image_list_resize DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
$unwind$kvz_image_list_rem DD 0a3601H
	DD	08e436H
	DD	076431H
	DD	06342aH
	DD	09540aH
	DD	07006320aH
$unwind$kvz_image_list_add DD 060e01H
	DD	0a340eH
	DD	0f00a320eH
	DD	05006e008H
$chain$1$kvz_image_list_add DD 040d21H
	DD	09740dH
	DD	086405H
	DD	imagerel $LN66
	DD	imagerel $LN66+212
	DD	imagerel $unwind$kvz_image_list_add
$chain$2$kvz_image_list_add DD 021H
	DD	imagerel $LN66
	DD	imagerel $LN66+212
	DD	imagerel $unwind$kvz_image_list_add
$unwind$kvz_image_list_copy_contents DD 040901H
	DD	0e0055209H
	DD	030027003H
$chain$2$kvz_image_list_copy_contents DD 061221H
	DD	0cf412H
	DD	0b640aH
	DD	0a5405H
	DD	imagerel $LN18
	DD	imagerel $LN18+46
	DD	imagerel $unwind$kvz_image_list_copy_contents
$chain$3$kvz_image_list_copy_contents DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+46
	DD	imagerel $unwind$kvz_image_list_copy_contents
$unwind$kvz_image_list_destroy DD 040a01H
	DD	09540aH
	DD	07006320aH
$chain$2$kvz_image_list_destroy DD 061121H
	DD	08e411H
	DD	07640aH
	DD	063405H
	DD	imagerel $LN55
	DD	imagerel $LN55+24
	DD	imagerel $unwind$kvz_image_list_destroy
$chain$3$kvz_image_list_destroy DD 021H
	DD	imagerel $LN55
	DD	imagerel $LN55+24
	DD	imagerel $unwind$kvz_image_list_destroy
$unwind$kvz_image_list_alloc DD 020601H
	DD	030023206H
	ORG $+1
$SG4294945706 DB '0', 00H, 00H, 00H
	ORG $+1
$SG4294945709 DB '0', 00H, 00H, 00H
	ORG $+5
$SG4294945708 DB 'Tried to add an unreferenced cu_array. This is a bug!', 0aH
	DB	00H
	ORG $+2
$SG4294945711 DB 'Tried to add an unreferenced picture. This is a bug!', 0aH
	DB	00H
	ORG $+12
$SG4294945707 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG4294945710 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
size$dead$ = 48
kvz_image_list_alloc PROC

; 48   : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 49   :   image_list_t *list = (image_list_t *)malloc(sizeof(image_list_t));

	mov	ecx, 40					; 00000028H
	call	QWORD PTR __imp_malloc

; 50   :   list->size      = size;
; 51   :   list->images    = malloc(sizeof(kvz_picture*)  * size);

	mov	ecx, 128				; 00000080H
	mov	rbx, rax
	mov	DWORD PTR [rax+32], 16
	call	QWORD PTR __imp_malloc

; 52   :   list->cu_arrays = malloc(sizeof(cu_array_t*)   * size);

	mov	ecx, 128				; 00000080H
	mov	QWORD PTR [rbx], rax
	call	QWORD PTR __imp_malloc

; 53   :   list->pocs      = malloc(sizeof(int32_t)       * size);

	mov	ecx, 64					; 00000040H
	mov	QWORD PTR [rbx+8], rax
	call	QWORD PTR __imp_malloc

; 54   :   list->ref_LXs   = malloc(sizeof(*list->ref_LXs) * size);

	mov	ecx, 512				; 00000200H
	mov	QWORD PTR [rbx+16], rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rbx+24], rax

; 55   :   list->used_size = 0;
; 56   : 
; 57   :   return list;

	mov	rax, rbx
	mov	DWORD PTR [rbx+36], 0

; 58   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_image_list_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
list$ = 48
kvz_image_list_destroy PROC

; 82   : {

$LN55:
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	sub	rsp, 32					; 00000020H

; 83   :   unsigned int i;
; 84   :   if (list->used_size > 0) {

	xor	ebp, ebp
	mov	rdi, rcx
	cmp	DWORD PTR [rcx+36], ebp
	jbe	$LN3@kvz_image_

; 85   :     for (i = 0; i < list->used_size; ++i) {

	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rsi
	mov	esi, ebp
	mov	QWORD PTR [rsp+64], r14
	npad	7
$LL4@kvz_image_:

; 86   :       kvz_image_free(list->images[i]);

	mov	rbx, QWORD PTR [rdi]
	mov	r14d, esi
	mov	rbx, QWORD PTR [rbx+r14*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 116  :   if (im == NULL) return;

	test	rbx, rbx
	je	SHORT $LN11@kvz_image_

; 117  : 
; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	eax, -1
	lock xadd DWORD PTR [rbx+88], eax
	sub	eax, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN11@kvz_image_

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rbx+80]
	cmp	rcx, rbx
	je	SHORT $LN14@kvz_image_

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN15@kvz_image_
$LN14@kvz_image_:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rbx]
	call	QWORD PTR __imp_free
$LN15@kvz_image_:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;
; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+80], rbp
	mov	QWORD PTR [rbx], rbp
	mov	QWORD PTR [rbx+8], rbp
	mov	QWORD PTR [rbx+32], rbp
	mov	QWORD PTR [rbx+24], rbp
	mov	QWORD PTR [rbx+16], rbp
	mov	QWORD PTR [rbx+56], rbp
	mov	QWORD PTR [rbx+48], rbp
	mov	QWORD PTR [rbx+40], rbp
	call	QWORD PTR __imp_free
$LN11@kvz_image_:
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c

; 87   :       list->images[i] = NULL;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+r14*8], rbp

; 88   :       kvz_cu_array_free(&list->cu_arrays[i]);

	mov	rax, QWORD PTR [rdi+8]
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c

; 169  :   cu_array_t *cua = *cua_ptr;

	mov	rbx, QWORD PTR [rax+r14*8]

; 170  :   if (cua == NULL) return;

	test	rbx, rbx
	je	SHORT $LN23@kvz_image_

; 171  :   *cua_ptr = NULL;

	mov	QWORD PTR [rax+r14*8], rbp

; 172  : 
; 173  :   int new_refcount = KVZ_ATOMIC_DEC(&cua->refcount);

	mov	eax, -1
	lock xadd DWORD PTR [rbx+28], eax
	sub	eax, 1

; 174  :   if (new_refcount > 0) {

	jg	SHORT $LN23@kvz_image_

; 175  :     // Still we have some references, do nothing.
; 176  :     return;
; 177  :   }
; 178  : 
; 179  :   assert(new_refcount == 0);

	test	eax, eax
	je	SHORT $LN29@kvz_image_
	mov	r8d, 179				; 000000b3H
	lea	rdx, OFFSET FLAT:$SG4294944400
	lea	rcx, OFFSET FLAT:$SG4294944399
	call	QWORD PTR __imp__wassert
$LN29@kvz_image_:

; 180  : 
; 181  :   if (!cua->base) {

	cmp	QWORD PTR [rbx], rbp
	jne	SHORT $LN26@kvz_image_

; 182  :     FREE_POINTER(cua->data);

	mov	rcx, QWORD PTR [rbx+8]
	call	QWORD PTR __imp_free

; 183  :   } else {

	jmp	SHORT $LN27@kvz_image_
$LN26@kvz_image_:

; 184  :     kvz_cu_array_free(&cua->base);

	mov	rcx, rbx
	call	kvz_cu_array_free
$LN27@kvz_image_:

; 185  :     cua->data = NULL;
; 186  :   }
; 187  : 
; 188  :   FREE_POINTER(cua);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+8], rbp
	call	QWORD PTR __imp_free
$LN23@kvz_image_:
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c

; 89   :       list->cu_arrays[i] = NULL;

	mov	rax, QWORD PTR [rdi+8]
	mov	rdx, rbp
	mov	QWORD PTR [rax+r14*8], rbp

; 90   :       list->pocs[i] = 0;

	mov	rax, QWORD PTR [rdi+16]
	mov	DWORD PTR [rax+r14*4], ebp
	lea	rax, QWORD PTR [r14+r14]
	mov	r8, rax
	lea	r9, QWORD PTR [rax+1]
	shl	r8, 4
	shl	r9, 4
	npad	12
$LL7@kvz_image_:

; 91   :       for (int j = 0; j < 16; j++) {
; 92   :         list->ref_LXs[i][0][j] = 0;

	mov	rcx, QWORD PTR [rdi+24]
	add	rcx, r8
	mov	BYTE PTR [rcx+rdx], bpl
	mov	rcx, QWORD PTR [rdi+24]
	add	rcx, r9
	mov	BYTE PTR [rcx+rdx], bpl
	inc	rdx
	cmp	rdx, 16
	jl	SHORT $LL7@kvz_image_

; 85   :     for (i = 0; i < list->used_size; ++i) {

	inc	esi
	cmp	esi, DWORD PTR [rdi+36]
	jb	$LL4@kvz_image_
	mov	r14, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN3@kvz_image_:

; 93   :         list->ref_LXs[i][1][j] = 0;
; 94   :       }
; 95   :     }
; 96   :   }
; 97   : 
; 98   :   if (list->size > 0) {

	cmp	DWORD PTR [rdi+32], ebp
	jbe	SHORT $LN9@kvz_image_

; 99   :     free(list->images);

	mov	rcx, QWORD PTR [rdi]
	call	QWORD PTR __imp_free

; 100  :     free(list->cu_arrays);

	mov	rcx, QWORD PTR [rdi+8]
	call	QWORD PTR __imp_free

; 101  :     free(list->pocs);

	mov	rcx, QWORD PTR [rdi+16]
	call	QWORD PTR __imp_free

; 102  :     free(list->ref_LXs);

	mov	rcx, QWORD PTR [rdi+24]
	call	QWORD PTR __imp_free
$LN9@kvz_image_:

; 103  :   }
; 104  :   list->images = NULL;
; 105  :   list->cu_arrays = NULL;
; 106  :   list->pocs = NULL;
; 107  :   list->ref_LXs = NULL;
; 108  :   free(list);

	mov	rcx, rdi
	mov	QWORD PTR [rdi], rbp
	mov	QWORD PTR [rdi+8], rbp
	mov	QWORD PTR [rdi+16], rbp
	mov	QWORD PTR [rdi+24], rbp
	call	QWORD PTR __imp_free

; 109  :   return 1;
; 110  : }

	mov	rbp, QWORD PTR [rsp+72]
	mov	eax, 1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_image_list_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
target$ = 80
source$ = 88
kvz_image_list_copy_contents PROC

; 213  : int kvz_image_list_copy_contents(image_list_t *target, image_list_t *source) {

$LN18:
	push	rbx
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 214  :   int i;
; 215  :   while (target->used_size > 0) {

	cmp	DWORD PTR [rcx+36], 0
	mov	r14, rdx
	mov	rbx, rcx
	jbe	SHORT $LN3@kvz_image_
$LL2@kvz_image_:

; 216  :     kvz_image_list_rem(target, 0);

	xor	edx, edx
	mov	rcx, rbx
	call	kvz_image_list_rem
	cmp	DWORD PTR [rbx+36], 0
	ja	SHORT $LL2@kvz_image_
$LN3@kvz_image_:

; 217  :   }
; 218  :   
; 219  :   for (i = source->used_size - 1; i >= 0; --i) {

	mov	edi, DWORD PTR [r14+36]
	sub	edi, 1
	js	SHORT $LN16@kvz_image_
	mov	QWORD PTR [rsp+80], rbp
	mov	QWORD PTR [rsp+88], rsi
	movsxd	rsi, edi
	mov	QWORD PTR [rsp+96], r15
	lea	r15, QWORD PTR [rsi*8]
	lea	rbp, QWORD PTR [rsi*4]
	shl	rsi, 5
	npad	12
$LL6@kvz_image_:

; 220  :     kvz_image_list_add(target, source->images[i], source->cu_arrays[i], source->pocs[i], source->ref_LXs[i]);

	mov	rcx, QWORD PTR [r14+24]
	mov	rax, QWORD PTR [r14+16]
	add	rcx, rsi
	mov	r8, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR [r14]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, rbx
	mov	r9d, DWORD PTR [rax+rbp]
	mov	r8, QWORD PTR [r15+r8]
	mov	rdx, QWORD PTR [r15+rdx]
	call	kvz_image_list_add
	add	rsi, -32				; ffffffffffffffe0H
	lea	rbp, QWORD PTR [rbp-4]
	sub	edi, 1
	lea	r15, QWORD PTR [r15-8]
	jns	SHORT $LL6@kvz_image_

; 221  :   }
; 222  :   return 1;

	mov	r15, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+80]
$LN16@kvz_image_:

; 223  : }

	mov	eax, 1
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rbx
	ret	0
kvz_image_list_copy_contents ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
list$ = 64
im$ = 72
cua$ = 80
poc$ = 88
ref_LX$ = 96
kvz_image_list_add PROC

; 119  : {

$LN66:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15d, r9d
	mov	rbp, r8
	mov	r14, rdx
	mov	rbx, rcx

; 120  :   int i = 0;
; 121  :   if (KVZ_ATOMIC_INC(&(im->refcount)) == 1) {

	mov	eax, 1
	lock xadd DWORD PTR [rdx+88], eax
	inc	eax
	cmp	eax, 1
	jne	SHORT $LN11@kvz_image_

; 122  :     fprintf(stderr, "Tried to add an unreferenced picture. This is a bug!\n");

	lea	ecx, QWORD PTR [rax+1]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294945711
	call	fprintf

; 123  :     assert(0); //Stop for debugging

	mov	r8d, 123				; 0000007bH
	lea	rdx, OFFSET FLAT:$SG4294945710
	lea	rcx, OFFSET FLAT:$SG4294945709
	call	QWORD PTR __imp__wassert
$LN63@kvz_image_:

; 158  : }

	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN11@kvz_image_:

; 124  :     return 0;
; 125  :   }
; 126  :   
; 127  :   if (KVZ_ATOMIC_INC(&(cua->refcount)) == 1) {

	mov	eax, 1
	lock xadd DWORD PTR [r8+28], eax
	inc	eax
	cmp	eax, 1
	jne	SHORT $LN12@kvz_image_

; 128  :     fprintf(stderr, "Tried to add an unreferenced cu_array. This is a bug!\n");

	lea	ecx, QWORD PTR [rax+1]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294945708
	call	fprintf

; 129  :     assert(0); //Stop for debugging

	mov	r8d, 129				; 00000081H
	lea	rdx, OFFSET FLAT:$SG4294945707
	lea	rcx, OFFSET FLAT:$SG4294945706
	call	QWORD PTR __imp__wassert

; 130  :     return 0;

	xor	eax, eax

; 158  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN12@kvz_image_:

; 131  :   }
; 132  : 
; 133  :   if (list->size == list->used_size) {

	mov	edx, DWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rcx+36]
	cmp	edx, eax
	jne	$LN57@kvz_image_

; 134  :     unsigned new_size = MAX(list->size + 1, list->size * 2);

	lea	ecx, DWORD PTR [rdx+rdx]
	mov	QWORD PTR [rsp+64], rsi
	lea	eax, DWORD PTR [rdx+1]
	mov	QWORD PTR [rsp+72], rdi

; 68   :   list->images = (kvz_picture**)realloc(list->images, sizeof(kvz_picture*) * size);

	cmp	eax, ecx
	cmovbe	eax, ecx
	mov	rcx, QWORD PTR [rbx]
	mov	esi, eax
	lea	rdi, QWORD PTR [rax*8]
	mov	rdx, rdi
	call	QWORD PTR __imp_realloc

; 69   :   list->cu_arrays = (cu_array_t**)realloc(list->cu_arrays, sizeof(cu_array_t*) * size);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, rdi
	mov	QWORD PTR [rbx], rax
	call	QWORD PTR __imp_realloc

; 70   :   list->pocs = realloc(list->pocs, sizeof(int32_t) * size);

	mov	rcx, QWORD PTR [rbx+16]
	lea	rdx, QWORD PTR [rsi*4]
	mov	QWORD PTR [rbx+8], rax
	call	QWORD PTR __imp_realloc

; 71   :   list->ref_LXs = realloc(list->ref_LXs, sizeof(*list->ref_LXs) * size);

	mov	rcx, QWORD PTR [rbx+24]
	mov	edx, esi
	shl	rdx, 5
	mov	QWORD PTR [rbx+16], rax
	call	QWORD PTR __imp_realloc

; 72   :   list->size = size;

	mov	rdi, QWORD PTR [rsp+72]

; 73   :   return size == 0 || (list->images && list->cu_arrays && list->pocs);

	test	esi, esi
	mov	DWORD PTR [rbx+32], esi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rbx+24], rax
	je	SHORT $LN64@kvz_image_
	cmp	QWORD PTR [rbx], 0
	je	$LN63@kvz_image_
	cmp	QWORD PTR [rbx+8], 0
	je	$LN63@kvz_image_
	cmp	QWORD PTR [rbx+16], 0
	je	$LN63@kvz_image_
$LN64@kvz_image_:

; 135  :     if (!kvz_image_list_resize(list, new_size)) return 0;

	mov	eax, DWORD PTR [rbx+36]
$LN57@kvz_image_:

; 136  :   }
; 137  :   
; 138  :   for (i = list->used_size; i > 0; i--) {

	movsxd	r8, eax
	test	eax, eax
	jle	$LN3@kvz_image_
	mov	rdx, r8
	shl	rdx, 5
$LL4@kvz_image_:

; 139  :     list->images[i] = list->images[i - 1];

	mov	rcx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rcx+r8*8-8]
	mov	QWORD PTR [rcx+r8*8], rax

; 140  :     list->cu_arrays[i] = list->cu_arrays[i - 1];

	mov	rcx, QWORD PTR [rbx+8]
	mov	rax, QWORD PTR [rcx+r8*8-8]
	mov	QWORD PTR [rcx+r8*8], rax

; 141  :     list->pocs[i] = list->pocs[i - 1];

	mov	rcx, QWORD PTR [rbx+16]
	mov	eax, DWORD PTR [rcx+r8*4-4]
	mov	DWORD PTR [rcx+r8*4], eax

; 142  :     for (int j = 0; j < 16; j++) {
; 143  :       list->ref_LXs[i][0][j] = list->ref_LXs[i - 1][0][j];

	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-32]
	mov	BYTE PTR [rdx+rcx], al

; 144  :       list->ref_LXs[i][1][j] = list->ref_LXs[i - 1][1][j];

	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-16]
	mov	BYTE PTR [rdx+rcx+16], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-31]
	mov	BYTE PTR [rdx+rcx+1], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-15]
	mov	BYTE PTR [rdx+rcx+17], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-30]
	mov	BYTE PTR [rdx+rcx+2], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-14]
	mov	BYTE PTR [rdx+rcx+18], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-29]
	mov	BYTE PTR [rdx+rcx+3], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-13]
	mov	BYTE PTR [rdx+rcx+19], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-28]
	mov	BYTE PTR [rdx+rcx+4], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-12]
	mov	BYTE PTR [rdx+rcx+20], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-27]
	mov	BYTE PTR [rdx+rcx+5], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-11]
	mov	BYTE PTR [rdx+rcx+21], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-26]
	mov	BYTE PTR [rdx+rcx+6], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-10]
	mov	BYTE PTR [rdx+rcx+22], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-25]
	mov	BYTE PTR [rdx+rcx+7], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-9]
	mov	BYTE PTR [rdx+rcx+23], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-24]
	mov	BYTE PTR [rdx+rcx+8], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-8]
	mov	BYTE PTR [rdx+rcx+24], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-23]
	mov	BYTE PTR [rdx+rcx+9], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-7]
	mov	BYTE PTR [rdx+rcx+25], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-22]
	mov	BYTE PTR [rdx+rcx+10], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-6]
	mov	BYTE PTR [rdx+rcx+26], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-21]
	mov	BYTE PTR [rdx+rcx+11], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx-5]
	mov	BYTE PTR [rdx+rcx+27], al

; 136  :   }
; 137  :   
; 138  :   for (i = list->used_size; i > 0; i--) {

	mov	rcx, QWORD PTR [rbx+24]
	lea	rdx, QWORD PTR [rdx-32]
	dec	r8

; 142  :     for (int j = 0; j < 16; j++) {
; 143  :       list->ref_LXs[i][0][j] = list->ref_LXs[i - 1][0][j];

	movzx	eax, BYTE PTR [rdx+rcx+12]
	mov	BYTE PTR [rdx+rcx+44], al

; 144  :       list->ref_LXs[i][1][j] = list->ref_LXs[i - 1][1][j];

	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+28]
	mov	BYTE PTR [rdx+rcx+60], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+13]
	mov	BYTE PTR [rdx+rcx+45], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+29]
	mov	BYTE PTR [rdx+rcx+61], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+14]
	mov	BYTE PTR [rdx+rcx+46], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+30]
	mov	BYTE PTR [rdx+rcx+62], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+15]
	mov	BYTE PTR [rdx+rcx+47], al
	mov	rcx, QWORD PTR [rbx+24]
	movzx	eax, BYTE PTR [rdx+rcx+31]
	mov	BYTE PTR [rdx+rcx+63], al
	test	r8, r8
	jg	$LL4@kvz_image_
$LN3@kvz_image_:

; 145  :     }
; 146  :   }
; 147  : 
; 148  :   list->images[0] = im;

	mov	rax, QWORD PTR [rbx]
	xor	r8d, r8d

; 149  :   list->cu_arrays[0] = cua;
; 150  :   list->pocs[0] = poc;

	mov	r9, QWORD PTR ref_LX$[rsp]
	mov	QWORD PTR [rax], r14
	mov	rax, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax], rbp
	mov	rax, QWORD PTR [rbx+16]
	mov	DWORD PTR [rax], r15d
$LL10@kvz_image_:

; 151  :   for (int j = 0; j < 16; j++) {
; 152  :     list->ref_LXs[0][0][j] = ref_LX[0][j];

	movzx	ecx, BYTE PTR [r8+r9]
	mov	rdx, QWORD PTR [rbx+24]
	mov	BYTE PTR [r8+rdx], cl
	movzx	ecx, BYTE PTR [r8+r9+16]
	mov	rdx, QWORD PTR [rbx+24]
	mov	BYTE PTR [rdx+r8+16], cl
	inc	r8
	cmp	r8, 16
	jl	SHORT $LL10@kvz_image_

; 153  :     list->ref_LXs[0][1][j] = ref_LX[1][j];
; 154  :   }
; 155  :   
; 156  :   list->used_size++;

	inc	DWORD PTR [rbx+36]

; 157  :   return 1;

	mov	eax, 1

; 158  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
kvz_image_list_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
list$ = 48
n$ = 56
kvz_image_list_rem PROC

; 167  : {

$LN85:
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rbp, edx
	mov	rdi, rcx

; 168  :   // Must be within list boundaries
; 169  :   if (n >= list->used_size)

	cmp	ebp, DWORD PTR [rcx+36]
	jb	SHORT $LN14@kvz_image_

; 170  :   {
; 171  :     return 0;

	xor	eax, eax

; 211  : }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@kvz_image_:

; 174  :   kvz_image_free(list->images[n]);

	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rbx
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 116  :   if (im == NULL) return;

	xor	ebx, ebx
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], r14
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c

; 174  :   kvz_image_free(list->images[n]);

	mov	r14d, ebp
	mov	rsi, QWORD PTR [rax+r14*8]
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c

; 116  :   if (im == NULL) return;

	test	rsi, rsi
	je	SHORT $LN18@kvz_image_

; 117  : 
; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	eax, -1
	lock xadd DWORD PTR [rsi+88], eax
	sub	eax, 1

; 119  :   if (new_refcount > 0) {

	jg	SHORT $LN18@kvz_image_

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;
; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	rcx, QWORD PTR [rsi+80]
	cmp	rcx, rsi
	je	SHORT $LN21@kvz_image_

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	call	kvz_image_free

; 127  :   } else {

	jmp	SHORT $LN22@kvz_image_
$LN21@kvz_image_:

; 128  :     free(im->fulldata_buf);

	mov	rcx, QWORD PTR [rsi]
	call	QWORD PTR __imp_free
$LN22@kvz_image_:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;
; 133  :   im->fulldata_buf = NULL;
; 134  :   im->fulldata = NULL;
; 135  :   im->y = im->u = im->v = NULL;
; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;
; 137  :   free(im);

	mov	rcx, rsi
	mov	QWORD PTR [rsi+80], rbx
	mov	QWORD PTR [rsi], rbx
	mov	QWORD PTR [rsi+8], rbx
	mov	QWORD PTR [rsi+32], rbx
	mov	QWORD PTR [rsi+24], rbx
	mov	QWORD PTR [rsi+16], rbx
	mov	QWORD PTR [rsi+56], rbx
	mov	QWORD PTR [rsi+48], rbx
	mov	QWORD PTR [rsi+40], rbx
	call	QWORD PTR __imp_free
$LN18@kvz_image_:
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c

; 176  :   kvz_cu_array_free(&list->cu_arrays[n]);

	mov	rax, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+r14*8]
	call	kvz_cu_array_free

; 177  : 
; 178  :   // The last item is easy to remove
; 179  :   if (n == list->used_size - 1) {

	mov	ecx, DWORD PTR [rdi+36]
	lea	eax, DWORD PTR [rcx-1]
	cmp	ebp, eax
	jne	SHORT $LN15@kvz_image_

; 180  :     list->images[n] = NULL;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rax+r14*8], rbx

; 181  :     list->cu_arrays[n] = NULL;

	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rax+r14*8], rbx

; 182  :     list->pocs[n] = 0;

	mov	rax, QWORD PTR [rdi+16]
	mov	DWORD PTR [rax+r14*4], ebx
	lea	rax, QWORD PTR [r14+r14]
	mov	rdx, rax
	lea	r8, QWORD PTR [rax+1]
	add	rdx, rdx
	add	r8, r8
	npad	11
$LL4@kvz_image_:

; 183  :     for (int j = 0; j < 16; j++) {
; 184  :       list->ref_LXs[n][0][j] = 0;

	mov	rax, QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [rbx+rdx*8]
	mov	BYTE PTR [rcx+rax], 0
	lea	rcx, QWORD PTR [rbx+r8*8]
	mov	rax, QWORD PTR [rdi+24]
	inc	rbx
	mov	BYTE PTR [rcx+rax], 0
	cmp	rbx, 16
	jl	SHORT $LL4@kvz_image_

; 185  :       list->ref_LXs[n][1][j] = 0;
; 186  :     }
; 187  :     list->used_size--;
; 188  :   } else {

	jmp	$LN83@kvz_image_
$LN15@kvz_image_:

; 189  :     int i = n;
; 190  :     // Shift all following pics one backward in the list
; 191  :     for (i = n; i < list->used_size - 1; ++i) {

	jae	$LN6@kvz_image_
	mov	r10, rbp
	lea	rsi, QWORD PTR [rbp*4]
	shl	r10, 5
	lea	r11, QWORD PTR [rbp*8]
	npad	13
$LL7@kvz_image_:

; 192  :       list->images[i] = list->images[i + 1];

	mov	rcx, QWORD PTR [rdi]
	mov	rax, QWORD PTR [r11+rcx+8]
	mov	QWORD PTR [rcx+r11], rax

; 193  :       list->cu_arrays[i] = list->cu_arrays[i + 1];

	mov	rcx, QWORD PTR [rdi+8]
	mov	rax, QWORD PTR [r11+rcx+8]
	mov	QWORD PTR [rcx+r11], rax

; 194  :       list->pocs[i] = list->pocs[i + 1];

	mov	rcx, QWORD PTR [rdi+16]
	mov	eax, DWORD PTR [rsi+rcx+4]
	mov	DWORD PTR [rcx+rsi], eax

; 195  :       for (int j = 0; j < 16; j++) {
; 196  :         list->ref_LXs[i][0][j] = list->ref_LXs[i + 1][0][j];

	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+32]
	mov	BYTE PTR [rcx+r10], al

; 197  :         list->ref_LXs[i][1][j] = list->ref_LXs[i + 1][1][j];

	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+48]
	mov	BYTE PTR [rcx+r10+16], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+33]
	mov	BYTE PTR [rcx+r10+1], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+49]
	mov	BYTE PTR [rcx+r10+17], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+34]
	mov	BYTE PTR [rcx+r10+2], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+50]
	mov	BYTE PTR [rcx+r10+18], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+35]
	mov	BYTE PTR [rcx+r10+3], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+51]
	mov	BYTE PTR [rcx+r10+19], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+36]
	mov	BYTE PTR [rcx+r10+4], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+52]
	mov	BYTE PTR [rcx+r10+20], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+37]
	mov	BYTE PTR [rcx+r10+5], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+53]
	mov	BYTE PTR [rcx+r10+21], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+38]
	mov	BYTE PTR [rcx+r10+6], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+54]
	mov	BYTE PTR [rcx+r10+22], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+39]
	mov	BYTE PTR [rcx+r10+7], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+55]
	mov	BYTE PTR [rcx+r10+23], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+40]
	mov	BYTE PTR [rcx+r10+8], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+56]
	mov	BYTE PTR [rcx+r10+24], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+41]
	mov	BYTE PTR [rcx+r10+9], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+57]
	mov	BYTE PTR [rcx+r10+25], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+42]
	mov	BYTE PTR [rcx+r10+10], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+58]
	mov	BYTE PTR [rcx+r10+26], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+43]
	mov	BYTE PTR [rcx+r10+11], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+59]
	mov	BYTE PTR [rcx+r10+27], al

; 189  :     int i = n;
; 190  :     // Shift all following pics one backward in the list
; 191  :     for (i = n; i < list->used_size - 1; ++i) {

	mov	rcx, QWORD PTR [rdi+24]
	lea	r11, QWORD PTR [r11+8]
	inc	ebp
	lea	rsi, QWORD PTR [rsi+4]
	lea	r10, QWORD PTR [r10+32]

; 195  :       for (int j = 0; j < 16; j++) {
; 196  :         list->ref_LXs[i][0][j] = list->ref_LXs[i + 1][0][j];

	movzx	eax, BYTE PTR [r10+rcx+12]
	mov	BYTE PTR [rcx+r10-20], al

; 197  :         list->ref_LXs[i][1][j] = list->ref_LXs[i + 1][1][j];

	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+28]
	mov	BYTE PTR [rcx+r10-4], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+13]
	mov	BYTE PTR [rcx+r10-19], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+29]
	mov	BYTE PTR [rcx+r10-3], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+14]
	mov	BYTE PTR [rcx+r10-18], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+30]
	mov	BYTE PTR [rcx+r10-2], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+15]
	mov	BYTE PTR [rcx+r10-17], al
	mov	rcx, QWORD PTR [rdi+24]
	movzx	eax, BYTE PTR [r10+rcx+31]
	mov	BYTE PTR [rcx+r10-1], al
	mov	ecx, DWORD PTR [rdi+36]
	lea	eax, DWORD PTR [rcx-1]
	cmp	ebp, eax
	jb	$LL7@kvz_image_
$LN6@kvz_image_:

; 198  :       }
; 199  :     }
; 200  :     list->images[list->used_size - 1] = NULL;

	mov	rax, QWORD PTR [rdi]
	lea	ecx, DWORD PTR [rcx-1]
	mov	QWORD PTR [rax+rcx*8], rbx

; 201  :     list->cu_arrays[list->used_size - 1] = NULL;

	mov	ecx, DWORD PTR [rdi+36]
	mov	rax, QWORD PTR [rdi+8]
	dec	ecx
	mov	QWORD PTR [rax+rcx*8], rbx

; 202  :     list->pocs[list->used_size - 1] = 0;

	mov	ecx, DWORD PTR [rdi+36]
	mov	rax, QWORD PTR [rdi+16]
	dec	ecx
	mov	DWORD PTR [rax+rcx*4], ebx
	npad	14
$LL13@kvz_image_:

; 203  :     for (int j = 0; j < 16; j++) {
; 204  :       list->ref_LXs[list->used_size - 1][0][j] = 0;

	mov	ecx, DWORD PTR [rdi+36]
	mov	rax, QWORD PTR [rdi+24]
	dec	ecx
	shl	rcx, 5
	add	rcx, rbx
	mov	BYTE PTR [rcx+rax], 0
	mov	ecx, DWORD PTR [rdi+36]
	mov	rax, QWORD PTR [rdi+24]
	dec	ecx
	shl	rcx, 5
	add	rcx, rbx
	inc	rbx
	mov	BYTE PTR [rcx+rax+16], 0
	cmp	rbx, 16
	jl	SHORT $LL13@kvz_image_
$LN83@kvz_image_:

; 205  :       list->ref_LXs[list->used_size - 1][1][j] = 0;
; 206  :     }
; 207  :     list->used_size--;
; 208  :   }
; 209  : 
; 210  :   return 1;

	dec	DWORD PTR [rdi+36]
	mov	eax, 1
	mov	r14, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]

; 211  : }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_image_list_rem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\imagelist.c
_TEXT	SEGMENT
list$ = 48
size$ = 56
kvz_image_list_resize PROC

; 67   : {

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	esi, edx
	mov	r14, rcx

; 68   :   list->images = (kvz_picture**)realloc(list->images, sizeof(kvz_picture*) * size);

	mov	rcx, QWORD PTR [rcx]
	mov	edi, edx
	lea	rbx, QWORD PTR [rsi*8]
	mov	rdx, rbx
	call	QWORD PTR __imp_realloc

; 69   :   list->cu_arrays = (cu_array_t**)realloc(list->cu_arrays, sizeof(cu_array_t*) * size);

	mov	rcx, QWORD PTR [r14+8]
	mov	rdx, rbx
	mov	QWORD PTR [r14], rax
	call	QWORD PTR __imp_realloc

; 70   :   list->pocs = realloc(list->pocs, sizeof(int32_t) * size);

	mov	rcx, QWORD PTR [r14+16]
	lea	rdx, QWORD PTR [rsi*4]
	mov	QWORD PTR [r14+8], rax
	call	QWORD PTR __imp_realloc

; 71   :   list->ref_LXs = realloc(list->ref_LXs, sizeof(*list->ref_LXs) * size);

	mov	rcx, QWORD PTR [r14+24]
	shl	rdi, 5
	mov	rdx, rdi
	mov	QWORD PTR [r14+16], rax
	call	QWORD PTR __imp_realloc

; 72   :   list->size = size;

	mov	DWORD PTR [r14+32], esi
	mov	QWORD PTR [r14+24], rax

; 73   :   return size == 0 || (list->images && list->cu_arrays && list->pocs);

	test	esi, esi
	je	SHORT $LN4@kvz_image_
	cmp	QWORD PTR [r14], 0
	je	SHORT $LN3@kvz_image_
	cmp	QWORD PTR [r14+8], 0
	je	SHORT $LN3@kvz_image_
	cmp	QWORD PTR [r14+16], 0
	jne	SHORT $LN4@kvz_image_
$LN3@kvz_image_:
	xor	eax, eax
	jmp	SHORT $LN5@kvz_image_
$LN4@kvz_image_:
	mov	eax, 1
$LN5@kvz_image_:

; 74   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
kvz_image_list_resize ENDP
_TEXT	ENDS
END
