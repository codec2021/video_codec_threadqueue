; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294947004
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294947003
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294947002
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294947001
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294947000
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294946999
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294946998
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294946997
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294946996
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294946995
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294946994
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294946993
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294946992
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294946991
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294946990
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294946989
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294946988
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294946987
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294946986
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294946985
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294946984
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294946983
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294946982
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294946981
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294946980
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294946979
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294946978
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294946977
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294946976
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294946975
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294946974
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294946973
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294946972
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294946971
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294946970
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294946969
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294946968
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294946967
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294946966
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294946965
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294946964
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294946963
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294946962
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294946961
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294946960
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294946959
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294946958
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294946957
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294946956
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294946955
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294946954
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294946953
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294946952
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294946951
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294946950
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294946949
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294946948
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294946947
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294946946
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294946945
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294946944
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294946943
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294946942
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294946954 DB 'quant', 00H
	ORG $+7
$SG4294947004 DB 'array_checksum', 00H
	ORG $+1
$SG4294947003 DB 'array_md5', 00H
	ORG $+6
$SG4294947002 DB 'reg_sad', 00H
$SG4294947001 DB 'sad_4x4', 00H
$SG4294947000 DB 'sad_8x8', 00H
$SG4294946999 DB 'sad_16x16', 00H
	ORG $+6
$SG4294946998 DB 'sad_32x32', 00H
	ORG $+6
$SG4294946997 DB 'sad_64x64', 00H
	ORG $+6
$SG4294946996 DB 'satd_4x4', 00H
	ORG $+7
$SG4294946995 DB 'satd_8x8', 00H
	ORG $+7
$SG4294946994 DB 'satd_16x16', 00H
	ORG $+5
$SG4294946993 DB 'satd_32x32', 00H
	ORG $+5
$SG4294946992 DB 'satd_64x64', 00H
	ORG $+5
$SG4294946991 DB 'satd_any_size', 00H
	ORG $+2
$SG4294946990 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294946989 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294946988 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294946987 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294946986 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294946985 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294946984 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294946983 DB 'satd_16x16_dual', 00H
$SG4294946982 DB 'satd_32x32_dual', 00H
$SG4294946981 DB 'satd_64x64_dual', 00H
$SG4294946980 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294946979 DB 'pixels_calc_ssd', 00H
$SG4294946978 DB 'bipred_average', 00H
	ORG $+1
$SG4294946977 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294946976 DB 'ver_sad', 00H
$SG4294946975 DB 'hor_sad', 00H
$SG4294946974 DB 'pixel_var', 00H
	ORG $+6
$SG4294946973 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294946972 DB 'dct_4x4', 00H
$SG4294946971 DB 'dct_8x8', 00H
$SG4294946970 DB 'dct_16x16', 00H
	ORG $+6
$SG4294946969 DB 'dct_32x32', 00H
	ORG $+6
$SG4294946968 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294946967 DB 'idct_4x4', 00H
	ORG $+7
$SG4294946966 DB 'idct_8x8', 00H
	ORG $+7
$SG4294946965 DB 'idct_16x16', 00H
	ORG $+5
$SG4294946964 DB 'idct_32x32', 00H
	ORG $+5
$SG4294946963 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294946962 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294946961 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294946960 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294946959 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294946958 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294946957 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294946956 DB 'sample_octpel_chroma_hi', 00H
$SG4294946955 DB 'get_extended_block', 00H
	ORG $+5
$SG4294946953 DB 'quantize_residual', 00H
	ORG $+6
$SG4294946952 DB 'dequant', 00H
$SG4294946951 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294946950 DB 'fast_coeff_cost', 00H
$SG4294946949 DB 'angular_pred', 00H
	ORG $+3
$SG4294946948 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294946947 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294946946 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294946945 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294946944 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294946943 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294946942 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_encode_coeff_nxn_generic
PUBLIC	kvz_strategy_register_encode_generic
pdata	SEGMENT
$pdata$kvz_encode_coeff_nxn_generic DD imagerel $LN137
	DD	imagerel $LN137+2031
	DD	imagerel $unwind$kvz_encode_coeff_nxn_generic
$pdata$kvz_strategy_register_encode_generic DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$kvz_strategy_register_encode_generic
xdata	SEGMENT
$unwind$kvz_encode_coeff_nxn_generic DD 0a2201H
	DD	03f0122H
	DD	0e019f01bH
	DD	0c015d017H
	DD	060127013H
	DD	030105011H
$unwind$kvz_strategy_register_encode_generic DD 010401H
	DD	06204H
	ORG $+6
$SG4294946938 DB 'encode_coeff_nxn', 00H
	ORG $+6
$SG4294946939 DB 'generic', 00H
	ORG $+6
$SG4294946940 DB 's', 00H, 'i', 00H, 'g', 00H, '_', 00H, 'c', 00H, 'g', 00H
	DB	'_', 00H, 'c', 00H, 'n', 00H, 't', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+4
$SG4294946941 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_encode_generic PROC

; 285  : {

$LN4:
	sub	rsp, 56					; 00000038H

; 286  :   bool success = true;
; 287  : 
; 288  :   success &= kvz_strategyselector_register(opaque, "encode_coeff_nxn", "generic", 0, &kvz_encode_coeff_nxn_generic);

	lea	rax, OFFSET FLAT:kvz_encode_coeff_nxn_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294946939
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294946938
	call	kvz_strategyselector_register
	and	eax, 1

; 289  : 
; 290  :   return success;
; 291  : }

	add	rsp, 56					; 00000038H
	ret	0
kvz_strategy_register_encode_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
_TEXT	SEGMENT
hdl$dead$ = 8
num_bits$dead$ = 16
kvz_crypto_get_key PROC

; 66   :   return 0;

	xor	eax, eax

; 67   : }

	ret	0
kvz_crypto_get_key ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
_TEXT	SEGMENT
num_non_zero$1$ = 64
c1$1$ = 68
go_rice_param$1$ = 72
scan_pos_sig$1$ = 76
$T1 = 80
first_nz_pos_in_cg$1$ = 84
tv1930 = 84
i$1$ = 88
scan_pos_last$1$ = 92
scan_cg_last$1$ = 96
log2_block_size$1$ = 100
pos_last$1$ = 104
tv1928 = 108
num_blk_side$1$ = 112
encoder$1$ = 120
$T2 = 128
scan_cg$1$ = 136
scan$1$ = 144
tv1922 = 152
tv1911 = 160
abs_coeff$3 = 176
sig_coeffgroup_flag$ = 240
state$ = 576
cabac$ = 584
coeff$ = 592
be_valid$1$ = 600
width$ = 600
type$ = 608
scan_mode$ = 616
tr_skip$ = 624
kvz_encode_coeff_nxn_generic PROC

; 47   : {

$LN137:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 504				; 000001f8H

; 48   :   const encoder_control_t * const encoder = state->encoder_control;

	mov	rbx, QWORD PTR [rcx]
	mov	r12, r8
	mov	r14, rdx
	mov	QWORD PTR encoder$1$[rsp], rbx

; 49   :   int c1 = 1;
; 50   :   uint8_t last_coeff_x = 0;
; 51   :   uint8_t last_coeff_y = 0;
; 52   :   int32_t i;
; 53   :   uint32_t sig_coeffgroup_flag[8 * 8] = { 0 };

	xor	edx, edx
	movzx	esi, r9b
	mov	r8d, 256				; 00000100H
	mov	DWORD PTR c1$1$[rsp], 1
	lea	rcx, QWORD PTR sig_coeffgroup_flag$[rsp]
	call	memset

; 54   : 
; 55   :   int8_t be_valid = encoder->cfg.signhide_enable;
; 56   :   int32_t scan_pos_sig;
; 57   :   uint32_t go_rice_param = 0;
; 58   :   uint32_t blk_pos, pos_y, pos_x, sig, ctx_sig;
; 59   : 
; 60   :   // CONSTANTS
; 61   :   const uint32_t num_blk_side    = width >> TR_MIN_LOG2_SIZE;
; 62   :   const uint32_t log2_block_size = kvz_g_convert_to_bit[width] + 2;
; 63   :   const uint32_t *scan           =

	movsx	rdx, BYTE PTR scan_mode$[rsp]
	lea	r8, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR [rbx+52]
	mov	r13d, esi
	movsx	ebp, BYTE PTR kvz_g_convert_to_bit[rsi+r8]
	mov	r15d, esi
	mov	BYTE PTR be_valid$1$[rsp], al
	add	ebp, 2
	lea	rax, QWORD PTR [rdx+rdx*4]
	shr	r13d, 2
	mov	DWORD PTR tv1928[rsp], esi
	mov	DWORD PTR num_blk_side$1$[rsp], r13d
	lea	ecx, DWORD PTR [rbp-1]
	mov	DWORD PTR log2_block_size$1$[rsp], ebp
	add	rcx, rax
	mov	rax, QWORD PTR kvz_g_sig_last_scan[r8+rcx*8]
	mov	QWORD PTR scan$1$[rsp], rax

; 64   :     kvz_g_sig_last_scan[scan_mode][log2_block_size - 1];
; 65   :   const uint32_t *scan_cg = g_sig_last_scan_cg[log2_block_size - 2][scan_mode];

	lea	eax, DWORD PTR [rbp-2]
	mov	ecx, eax
	lea	rax, QWORD PTR [rdx+rax*2]

; 66   : 
; 67   :   // Init base contexts according to block type
; 68   :   cabac_ctx_t *base_coeff_group_ctx = &(cabac->ctx.cu_sig_coeff_group_model[type]);
; 69   :   cabac_ctx_t *baseCtx           = (type == 0) ? &(cabac->ctx.cu_sig_model_luma[0]) :
; 70   :                                  &(cabac->ctx.cu_sig_model_chroma[0]);
; 71   : 
; 72   :   // Scan all coeff groups to find out which of them have coeffs.
; 73   :   // Populate sig_coeffgroup_flag with that info.
; 74   : 
; 75   :   unsigned sig_cg_cnt = 0;

	mov	edx, 103				; 00000067H
	add	rcx, rax
	mov	rax, QWORD PTR g_sig_last_scan_cg[r8+rcx*8]
	movzx	ecx, BYTE PTR type$[rsp]
	mov	QWORD PTR scan_cg$1$[rsp], rax
	test	cl, cl
	lea	rax, QWORD PTR [r14+rcx]
	mov	QWORD PTR tv1922[rsp], rax
	mov	eax, 76					; 0000004cH
	cmovne	eax, edx
	xor	r11d, r11d
	add	rax, r14
	xor	ebx, ebx
	mov	QWORD PTR tv1911[rsp], rax

; 76   :   for (int cg_y = 0; cg_y < width / 4; ++cg_y) {

	test	r13d, r13d
	je	SHORT $LN129@kvz_encode
	mov	edi, r13d
$LL4@kvz_encode:

; 77   :     for (int cg_x = 0; cg_x < width / 4; ++cg_x) {

	mov	r9d, esi
	mov	r10, rdi
	imul	r9d, ebx
	npad	6
$LL7@kvz_encode:

; 78   :       unsigned cg_pos = cg_y * width * 4 + cg_x * 4;

	lea	r8d, DWORD PTR [r9*4]

; 79   :       for (int coeff_row = 0; coeff_row < 4; ++coeff_row) {

	xor	eax, eax
	npad	6
$LL10@kvz_encode:

; 80   :         // Load four 16-bit coeffs and see if any of them are non-zero.
; 81   :         unsigned coeff_pos = cg_pos + coeff_row * width;

	mov	ecx, esi
	imul	ecx, eax
	add	ecx, r8d

; 82   :         uint64_t four_coeffs = *(uint64_t*)(&coeff[coeff_pos]);
; 83   :         if (four_coeffs) {

	cmp	QWORD PTR [r12+rcx*2], 0
	jne	SHORT $LN100@kvz_encode

; 79   :       for (int coeff_row = 0; coeff_row < 4; ++coeff_row) {

	inc	eax
	cmp	eax, 4
	jl	SHORT $LL10@kvz_encode

; 82   :         uint64_t four_coeffs = *(uint64_t*)(&coeff[coeff_pos]);
; 83   :         if (four_coeffs) {

	jmp	SHORT $LN5@kvz_encode
$LN100@kvz_encode:

; 84   :           ++sig_cg_cnt;
; 85   :           unsigned cg_pos_y = (cg_pos >> log2_block_size) >> TR_MIN_LOG2_SIZE;
; 86   :           unsigned cg_pos_x = (cg_pos & (width - 1)) >> TR_MIN_LOG2_SIZE;

	mov	eax, r8d
	lea	edx, DWORD PTR [rsi-1]
	shr	edx, 2
	mov	ecx, ebp
	shr	r8d, cl
	inc	r11d
	shr	r8d, 2
	shr	eax, 2
	and	edx, eax

; 87   :           sig_coeffgroup_flag[cg_pos_x + cg_pos_y * num_blk_side] = 1;

	imul	r8d, r13d
	add	edx, r8d
	mov	DWORD PTR sig_coeffgroup_flag$[rsp+rdx*4], 1
$LN5@kvz_encode:

; 77   :     for (int cg_x = 0; cg_x < width / 4; ++cg_x) {

	inc	r9d
	sub	r10, 1
	jne	SHORT $LL7@kvz_encode

; 76   :   for (int cg_y = 0; cg_y < width / 4; ++cg_y) {

	inc	ebx
	cmp	ebx, r13d
	jl	SHORT $LL4@kvz_encode

; 88   :           break;
; 89   :         }
; 90   :       }
; 91   :     }
; 92   :   }
; 93   : 
; 94   :   // Rest of the code assumes at least one non-zero coeff.
; 95   :   assert(sig_cg_cnt > 0);

	test	r11d, r11d
	jne	SHORT $LN65@kvz_encode
$LN129@kvz_encode:
	mov	r8d, 95					; 0000005fH
	lea	rdx, OFFSET FLAT:$SG4294946941
	lea	rcx, OFFSET FLAT:$SG4294946940
	call	QWORD PTR __imp__wassert
$LN65@kvz_encode:

; 96   : 
; 97   :   // Find the last coeff group by going backwards in scan order.
; 98   :   unsigned scan_cg_last = num_blk_side * num_blk_side - 1;
; 99   :   while (!sig_coeffgroup_flag[scan_cg[scan_cg_last]]) {

	mov	rdx, QWORD PTR scan_cg$1$[rsp]
	mov	ebx, r13d
	imul	ebx, r13d
	dec	ebx
	mov	DWORD PTR scan_cg_last$1$[rsp], ebx
	mov	ecx, DWORD PTR [rdx+rbx*4]
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rcx*4], 0
	jne	SHORT $LN12@kvz_encode
	npad	11
$LL11@kvz_encode:

; 100  :     --scan_cg_last;

	dec	ebx
	mov	ecx, DWORD PTR [rdx+rbx*4]
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rcx*4], 0
	je	SHORT $LL11@kvz_encode
	mov	DWORD PTR scan_cg_last$1$[rsp], ebx
$LN12@kvz_encode:

; 101  :   }
; 102  : 
; 103  :   // Find the last coeff by going backwards in scan order.
; 104  :   unsigned scan_pos_last = scan_cg_last * 16 + 15;
; 105  :   while (!coeff[scan[scan_pos_last]]) {

	mov	rdx, QWORD PTR scan$1$[rsp]
	mov	edi, ebx
	shl	edi, 4
	add	edi, 15
	mov	DWORD PTR scan_pos_last$1$[rsp], edi
	mov	ecx, DWORD PTR [rdx+rdi*4]
	cmp	WORD PTR [r12+rcx*2], 0
	jne	SHORT $LN14@kvz_encode
$LL13@kvz_encode:

; 106  :     --scan_pos_last;

	dec	edi
	mov	ecx, DWORD PTR [rdx+rdi*4]
	cmp	WORD PTR [r12+rcx*2], 0
	je	SHORT $LL13@kvz_encode
	mov	DWORD PTR scan_pos_last$1$[rsp], edi
$LN14@kvz_encode:

; 107  :   }
; 108  : 
; 109  :   int pos_last = scan[scan_pos_last];

	mov	r12d, DWORD PTR [rdx+rdi*4]
	mov	DWORD PTR pos_last$1$[rsp], r12d

; 110  : 
; 111  :   // transform skip flag
; 112  :   if(width == 4 && encoder->cfg.trskip_enable) {

	cmp	sil, 4
	jne	SHORT $LN28@kvz_encode
	mov	rax, QWORD PTR encoder$1$[rsp]
	cmp	DWORD PTR [rax+72], 0
	je	SHORT $LN28@kvz_encode

; 113  :     cabac->cur_ctx = (type == 0) ? &(cabac->ctx.transform_skip_model_luma) : &(cabac->ctx.transform_skip_model_chroma);
; 114  :     CABAC_BIN(cabac, tr_skip, "transform_skip_flag");

	movsx	edx, BYTE PTR tr_skip$[rsp]
	xor	eax, eax
	cmp	BYTE PTR type$[rsp], al
	mov	rcx, r14
	setne	al
	add	rax, 222				; 000000deH
	add	rax, r14
	mov	QWORD PTR [r14], rax
	call	kvz_cabac_encode_bin
$LN28@kvz_encode:

; 115  :   }
; 116  : 
; 117  :   last_coeff_x = pos_last & (width - 1);
; 118  :   last_coeff_y = (uint8_t)(pos_last >> log2_block_size);

	mov	ecx, ebp
	lea	edx, DWORD PTR [rsi-1]
	mov	r8d, r12d
	and	dl, r12b
	sar	r8d, cl

; 119  : 
; 120  :   // Code last_coeff_x and last_coeff_y
; 121  :   kvz_encode_last_significant_xy(cabac,

	movzx	r9d, sil
	movzx	ecx, BYTE PTR scan_mode$[rsp]
	mov	BYTE PTR [rsp+48], cl
	movzx	ecx, BYTE PTR type$[rsp]
	mov	BYTE PTR [rsp+40], cl
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], sil
	call	kvz_encode_last_significant_xy

; 122  :                                  last_coeff_x,
; 123  :                                  last_coeff_y,
; 124  :                                  width,
; 125  :                                  width,
; 126  :                                  type,
; 127  :                                  scan_mode);
; 128  : 
; 129  :   scan_pos_sig  = scan_pos_last;

	mov	DWORD PTR scan_pos_sig$1$[rsp], edi
	mov	r11d, edi

; 130  : 
; 131  :   // significant_coeff_flag
; 132  :   for (i = scan_cg_last; i >= 0; i--) {

	mov	DWORD PTR i$1$[rsp], ebx
	mov	r9d, ebx
	test	ebx, ebx
	js	$LN16@kvz_encode
	movsxd	rax, ebx
	mov	QWORD PTR $T2[rsp], rax
	npad	3
$LL17@kvz_encode:

; 133  :     int32_t sub_pos        = i << 4; // LOG2_SCAN_SET_SIZE;
; 134  :     int32_t abs_coeff[16];
; 135  :     int32_t cg_blk_pos     = scan_cg[i];

	mov	rcx, QWORD PTR scan_cg$1$[rsp]

; 136  :     int32_t cg_pos_y       = cg_blk_pos / num_blk_side;

	xor	edx, edx
	mov	ebp, r9d

; 137  :     int32_t cg_pos_x       = cg_blk_pos - (cg_pos_y * num_blk_side);
; 138  : 
; 139  :     uint32_t coeff_signs   = 0;

	mov	DWORD PTR $T1[rsp], 0
	shl	ebp, 4

; 140  :     int32_t last_nz_pos_in_cg = -1;
; 141  :     int32_t first_nz_pos_in_cg = 16;
; 142  :     int32_t num_non_zero = 0;

	xor	r12d, r12d
	mov	r14d, 16
	movsxd	r8, DWORD PTR [rcx+rax*4]
	mov	eax, r8d
	mov	DWORD PTR first_nz_pos_in_cg$1$[rsp], r14d
	div	r13d
	mov	ebx, r8d
	mov	ecx, eax
	mov	edi, eax
	imul	ecx, r13d
	xor	eax, eax
	mov	r13d, -1
	mov	DWORD PTR num_non_zero$1$[rsp], eax

; 143  :     go_rice_param = 0;

	mov	DWORD PTR go_rice_param$1$[rsp], eax
	sub	ebx, ecx

; 144  : 
; 145  :     if (scan_pos_sig == scan_pos_last) {

	cmp	r11d, DWORD PTR scan_pos_last$1$[rsp]
	jne	SHORT $LN29@kvz_encode

; 146  :       abs_coeff[0] = abs(coeff[pos_last]);

	movsxd	rax, DWORD PTR pos_last$1$[rsp]

; 147  :       coeff_signs  = (coeff[pos_last] < 0);
; 148  :       num_non_zero = 1;

	lea	r12d, QWORD PTR [r13+2]
	mov	rcx, QWORD PTR coeff$[rsp]

; 149  :       last_nz_pos_in_cg  = scan_pos_sig;

	mov	r13d, r11d

; 150  :       first_nz_pos_in_cg = scan_pos_sig;

	mov	r14d, r11d
	mov	DWORD PTR first_nz_pos_in_cg$1$[rsp], r11d
	mov	DWORD PTR num_non_zero$1$[rsp], 1
	movzx	ecx, WORD PTR [rcx+rax*2]
	movsx	eax, cx
	cdq
	shr	ecx, 15
	xor	eax, edx
	mov	DWORD PTR $T1[rsp], ecx
	sub	eax, edx

; 151  :       scan_pos_sig--;

	dec	r11d
	mov	DWORD PTR abs_coeff$3[rsp], eax
	mov	DWORD PTR scan_pos_sig$1$[rsp], r11d
$LN29@kvz_encode:

; 152  :     }
; 153  : 
; 154  :     if (i == scan_cg_last || i == 0) {

	cmp	r9d, DWORD PTR scan_cg_last$1$[rsp]
	je	$LN32@kvz_encode
	test	r9d, r9d
	je	$LN32@kvz_encode

; 157  :       uint32_t sig_coeff_group   = (sig_coeffgroup_flag[cg_blk_pos] != 0);

	mov	esi, DWORD PTR sig_coeffgroup_flag$[rsp+r8*4]
	xor	r11d, r11d
	test	esi, esi
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c

; 322  :   width >>= 2;

	mov	edx, r15d
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c

; 157  :       uint32_t sig_coeff_group   = (sig_coeffgroup_flag[cg_blk_pos] != 0);

	setne	r11b
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c

; 322  :   width >>= 2;

	shr	edx, 2
	xor	r8d, r8d
	xor	r9d, r9d

; 323  :   if (pos_x < (uint32_t)width - 1) uiRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	lea	r10d, DWORD PTR [rdx-1]
	cmp	ebx, r10d
	jae	SHORT $LN81@kvz_encode
	mov	eax, edx
	imul	eax, edi
	inc	eax
	add	eax, ebx
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rax*4], r8d
	setne	r8b
$LN81@kvz_encode:

; 324  :   if (pos_y < (uint32_t)width - 1) uiLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	cmp	edi, r10d
	jae	SHORT $LN82@kvz_encode
	lea	eax, DWORD PTR [rdi+1]
	imul	eax, edx
	add	eax, ebx
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rax*4], r9d
	setne	r9b
$LN82@kvz_encode:

; 325  : 
; 326  :   return uiRight || uiLower;

	test	r8d, r8d
	jne	SHORT $LN84@kvz_encode
	lea	eax, QWORD PTR [r8+72]
	test	r9d, r9d
	je	SHORT $LN85@kvz_encode
$LN84@kvz_encode:
	mov	eax, 73					; 00000049H
$LN85@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c

; 160  :       cabac->cur_ctx = &base_coeff_group_ctx[ctx_sig];

	mov	rcx, QWORD PTR cabac$[rsp]

; 161  :       CABAC_BIN(cabac, sig_coeff_group, "coded_sub_block_flag");

	mov	edx, r11d
	add	rax, QWORD PTR tv1922[rsp]
	mov	QWORD PTR [rcx], rax
	call	kvz_cabac_encode_bin

; 162  :     }
; 163  : 
; 164  :     if (sig_coeffgroup_flag[cg_blk_pos]) {

	test	esi, esi
	jne	SHORT $LN134@kvz_encode

; 191  :         }
; 192  :       }
; 193  :     } else {
; 194  :       scan_pos_sig = sub_pos - 1;

	dec	ebp
	mov	DWORD PTR scan_pos_sig$1$[rsp], ebp
	jmp	$LN34@kvz_encode
$LN32@kvz_encode:

; 155  :       sig_coeffgroup_flag[cg_blk_pos] = 1;

	mov	DWORD PTR sig_coeffgroup_flag$[rsp+r8*4], 1

; 162  :     }
; 163  : 
; 164  :     if (sig_coeffgroup_flag[cg_blk_pos]) {

	jmp	SHORT $LN130@kvz_encode
$LN134@kvz_encode:
	mov	r11d, DWORD PTR scan_pos_sig$1$[rsp]
$LN130@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c

; 341  :   uint32_t sigRight = 0;

	xor	r9d, r9d

; 342  :   uint32_t sigLower = 0;

	xor	r8d, r8d

; 343  : 
; 344  :   if (width == 4) return -1;

	cmp	r15d, 4
	jne	SHORT $LN87@kvz_encode
	lea	r15d, QWORD PTR [r9-1]
	jmp	SHORT $LN86@kvz_encode
$LN87@kvz_encode:

; 345  : 
; 346  :   width >>= 2;

	mov	edx, r15d
	shr	edx, 2

; 347  :   if (pos_x < (uint32_t)width - 1) sigRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	lea	r10d, DWORD PTR [rdx-1]
	cmp	ebx, r10d
	jae	SHORT $LN88@kvz_encode
	mov	eax, edx
	imul	eax, edi
	inc	eax
	add	eax, ebx
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rax*4], r8d
	setne	r9b
$LN88@kvz_encode:

; 348  :   if (pos_y < (uint32_t)width - 1) sigLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	cmp	edi, r10d
	jae	SHORT $LN89@kvz_encode
	lea	eax, DWORD PTR [rdi+1]
	imul	eax, edx
	add	eax, ebx
	cmp	DWORD PTR sig_coeffgroup_flag$[rsp+rax*4], r8d
	setne	r8b
$LN89@kvz_encode:

; 349  : 
; 350  :   return sigRight + (sigLower<<1);

	lea	r15d, DWORD PTR [r9+r8*2]
$LN86@kvz_encode:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c

; 168  :       for (; scan_pos_sig >= sub_pos; scan_pos_sig--) {

	movsxd	rbx, r11d
	movsxd	rbp, ebp
	cmp	rbx, rbp
	jl	$LN34@kvz_encode
	mov	r10d, DWORD PTR log2_block_size$1$[rsp]
	npad	7
$LL20@kvz_encode:

; 169  :         blk_pos = scan[scan_pos_sig];

	mov	rax, QWORD PTR scan$1$[rsp]

; 170  :         pos_y   = blk_pos >> log2_block_size;

	mov	ecx, r10d

; 171  :         pos_x   = blk_pos - (pos_y << log2_block_size);
; 172  :         sig    = (coeff[blk_pos] != 0) ? 1 : 0;

	xor	esi, esi
	mov	edx, DWORD PTR [rax+rbx*4]
	mov	r9d, edx
	mov	r8d, edx
	shr	r9d, cl
	mov	eax, r9d
	shl	eax, cl
	mov	rcx, QWORD PTR coeff$[rsp]
	sub	r8d, eax
	movzx	edi, WORD PTR [rcx+rdx*2]
	lea	r14, QWORD PTR [rcx+rdx*2]
	test	di, di
	setne	sil

; 173  : 
; 174  :         if (scan_pos_sig > sub_pos || i == 0 || num_non_zero) {

	cmp	rbx, rbp
	jg	SHORT $LN36@kvz_encode
	cmp	QWORD PTR $T2[rsp], 0
	je	SHORT $LN36@kvz_encode
	test	r12, r12
	je	SHORT $LN35@kvz_encode
$LN36@kvz_encode:

; 175  :           ctx_sig  = kvz_context_get_sig_ctx_inc(pattern_sig_ctx, scan_mode, pos_x, pos_y,

	movzx	eax, BYTE PTR type$[rsp]
	mov	ecx, r15d
	movsx	edx, BYTE PTR scan_mode$[rsp]
	mov	BYTE PTR [rsp+40], al
	mov	DWORD PTR [rsp+32], r10d
	call	kvz_context_get_sig_ctx_inc

; 176  :                                              log2_block_size, type);
; 177  :           cabac->cur_ctx = &baseCtx[ctx_sig];

	mov	rcx, QWORD PTR cabac$[rsp]

; 178  :           CABAC_BIN(cabac, sig, "sig_coeff_flag");

	mov	edx, esi
	mov	eax, eax
	add	rax, QWORD PTR tv1911[rsp]
	mov	QWORD PTR [rcx], rax
	call	kvz_cabac_encode_bin
	mov	r11d, DWORD PTR scan_pos_sig$1$[rsp]
	mov	r10d, DWORD PTR log2_block_size$1$[rsp]
$LN35@kvz_encode:

; 179  :         }
; 180  : 
; 181  :         if (sig) {

	test	di, di
	je	SHORT $LN18@kvz_encode

; 182  :           abs_coeff[num_non_zero] = abs(coeff[blk_pos]);

	movzx	ecx, WORD PTR [r14]

; 183  :           coeff_signs              = 2 * coeff_signs + (coeff[blk_pos] < 0);
; 184  :           num_non_zero++;

	inc	DWORD PTR num_non_zero$1$[rsp]
	movsx	eax, cx
	cdq
	shr	ecx, 15
	xor	eax, edx

; 185  : 
; 186  :           if (last_nz_pos_in_cg == -1) {
; 187  :             last_nz_pos_in_cg = scan_pos_sig;
; 188  :           }
; 189  : 
; 190  :           first_nz_pos_in_cg  = scan_pos_sig;

	mov	DWORD PTR first_nz_pos_in_cg$1$[rsp], r11d
	sub	eax, edx
	mov	DWORD PTR abs_coeff$3[rsp+r12*4], eax
	inc	r12
	mov	eax, DWORD PTR $T1[rsp]
	cmp	r13d, -1
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR $T1[rsp], eax
	mov	eax, r11d
	cmovne	eax, r13d
	mov	r13d, eax
$LN18@kvz_encode:

; 168  :       for (; scan_pos_sig >= sub_pos; scan_pos_sig--) {

	dec	r11d
	dec	rbx
	mov	DWORD PTR scan_pos_sig$1$[rsp], r11d
	cmp	rbx, rbp
	jge	$LL20@kvz_encode
	mov	r14d, DWORD PTR first_nz_pos_in_cg$1$[rsp]
$LN34@kvz_encode:

; 195  :     }
; 196  : 
; 197  :     if (num_non_zero > 0) {

	mov	ebx, DWORD PTR num_non_zero$1$[rsp]
	test	ebx, ebx
	jle	$LN15@kvz_encode

; 198  :       bool sign_hidden = last_nz_pos_in_cg - first_nz_pos_in_cg >= 4 /* SBH_THRESHOLD */

	sub	r13d, r14d
	cmp	r13d, 4
	jl	SHORT $LN68@kvz_encode
	mov	rax, QWORD PTR encoder$1$[rsp]
	cmp	DWORD PTR [rax+2392], 0
	jne	SHORT $LN68@kvz_encode
	mov	r12b, 1
	jmp	SHORT $LN69@kvz_encode
$LN68@kvz_encode:
	xor	r12b, r12b
$LN69@kvz_encode:

; 199  :                          && !encoder->cfg.lossless;
; 200  :       uint32_t ctx_set  = (i > 0 && type == 0) ? 2 : 0;

	cmp	DWORD PTR i$1$[rsp], 0
	movzx	r8d, BYTE PTR type$[rsp]
	jbe	SHORT $LN70@kvz_encode
	test	r8b, r8b
	jne	SHORT $LN70@kvz_encode
	mov	eax, 2
	jmp	SHORT $LN71@kvz_encode
$LN70@kvz_encode:
	xor	eax, eax
$LN71@kvz_encode:

; 201  :       cabac_ctx_t *base_ctx_mod;
; 202  :       int32_t num_c1_flag, first_c2_flag_idx, idx, first_coeff2;
; 203  : 
; 204  :       if (c1 == 0) {
; 205  :         ctx_set++;
; 206  :       }
; 207  : 
; 208  :       c1 = 1;

	cmp	DWORD PTR c1$1$[rsp], 0
	lea	r15d, DWORD PTR [rax+1]

; 209  : 
; 210  :       base_ctx_mod     = (type == 0) ? &(cabac->ctx.cu_one_model_luma[4 * ctx_set]) :
; 211  :                          &(cabac->ctx.cu_one_model_chroma[4 * ctx_set]);
; 212  :       num_c1_flag      = MIN(num_non_zero, C1FLAG_NUMBER);

	mov	r13, QWORD PTR cabac$[rsp]
	mov	r14d, 178				; 000000b2H
	cmovne	r15d, eax
	mov	DWORD PTR c1$1$[rsp], 1
	test	r8b, r8b
	mov	DWORD PTR tv1930[rsp], r15d
	mov	eax, 194				; 000000c2H

; 213  :       first_c2_flag_idx = -1;

	mov	rsi, -1
	cmovne	r14d, eax
	xor	edi, edi
	lea	ecx, DWORD PTR [r15*4]
	lea	rax, QWORD PTR [rcx+r13]
	add	r14, rax
	mov	eax, 8
	cmp	ebx, eax
	cmovl	eax, ebx

; 214  : 
; 215  :       for (idx = 0; idx < num_c1_flag; idx++) {

	movsxd	rbp, eax
	test	eax, eax
	jle	$LN46@kvz_encode
	mov	r15d, DWORD PTR c1$1$[rsp]
	npad	3
$LL23@kvz_encode:

; 216  :         uint32_t symbol = (abs_coeff[idx] > 1) ? 1 : 0;

	mov	ebx, DWORD PTR abs_coeff$3[rsp+rdi*4]
	xor	edx, edx

; 217  :         cabac->cur_ctx = &base_ctx_mod[c1];

	movsxd	rax, r15d

; 218  :         CABAC_BIN(cabac, symbol, "coeff_abs_level_greater1_flag");

	mov	rcx, r13
	add	rax, r14
	cmp	ebx, 1
	mov	QWORD PTR [r13], rax
	setg	dl
	call	kvz_cabac_encode_bin

; 219  : 
; 220  :         if (symbol) {

	cmp	ebx, 1
	jle	SHORT $LN41@kvz_encode

; 221  :           c1 = 0;

	xor	r15d, r15d

; 222  : 
; 223  :           if (first_c2_flag_idx == -1) {
; 224  :             first_c2_flag_idx = idx;
; 225  :           }

	mov	rax, rdi
	cmp	rsi, -1
	cmovne	rax, rsi
	mov	rsi, rax
	jmp	SHORT $LN21@kvz_encode
$LN41@kvz_encode:

; 226  :         } else if ((c1 < 3) && (c1 > 0)) {

	lea	eax, DWORD PTR [r15-1]
	cmp	eax, 1
	ja	SHORT $LN21@kvz_encode

; 227  :           c1++;

	inc	r15d
$LN21@kvz_encode:

; 214  : 
; 215  :       for (idx = 0; idx < num_c1_flag; idx++) {

	inc	rdi
	cmp	rdi, rbp
	jl	SHORT $LL23@kvz_encode

; 228  :         }
; 229  :       }
; 230  : 
; 231  :       if (c1 == 0) {

	mov	DWORD PTR c1$1$[rsp], r15d
	test	r15d, r15d
	mov	r15d, DWORD PTR tv1930[rsp]
	jne	SHORT $LN133@kvz_encode

; 232  :         base_ctx_mod = (type == 0) ? &(cabac->ctx.cu_abs_model_luma[ctx_set]) :
; 233  :                        &(cabac->ctx.cu_abs_model_chroma[ctx_set]);
; 234  : 
; 235  :         if (first_c2_flag_idx != -1) {

	cmp	rsi, -1
	je	SHORT $LN133@kvz_encode
	cmp	BYTE PTR type$[rsp], 0
	mov	ecx, 206				; 000000ceH
	mov	eax, 202				; 000000caH
	cmovne	eax, ecx

; 236  :           uint8_t symbol = (abs_coeff[first_c2_flag_idx] > 2) ? 1 : 0;

	xor	edx, edx
	lea	rcx, QWORD PTR [rax+r13]
	add	rcx, r15
	cmp	DWORD PTR abs_coeff$3[rsp+rsi*4], 2

; 237  :           cabac->cur_ctx      = &base_ctx_mod[0];

	mov	QWORD PTR [r13], rcx

; 238  :           CABAC_BIN(cabac, symbol, "coeff_abs_level_greater2_flag");

	mov	rcx, r13
	setg	dl
	call	kvz_cabac_encode_bin
$LN133@kvz_encode:

; 239  :         }
; 240  :       }
; 241  :       if (be_valid && sign_hidden) {

	mov	ebx, DWORD PTR num_non_zero$1$[rsp]
$LN46@kvz_encode:
	cmp	BYTE PTR be_valid$1$[rsp], 0
	je	SHORT $LN47@kvz_encode
	test	r12b, r12b
	je	SHORT $LN47@kvz_encode

; 242  :         coeff_signs = coeff_signs >> 1;

	mov	eax, DWORD PTR $T1[rsp]

; 243  :         if (!cabac->only_count)
; 244  :           if (encoder->cfg.crypto_features & KVZ_CRYPTO_TRANSF_COEFF_SIGNS) {
; 245  :             coeff_signs = coeff_signs ^ kvz_crypto_get_key(state->crypto_hdl, num_non_zero-1);
; 246  :           }
; 247  :         CABAC_BINS_EP(cabac, coeff_signs , (num_non_zero - 1), "coeff_sign_flag");

	lea	r8d, DWORD PTR [rbx-1]
	shr	eax, 1

; 248  :       } else {

	jmp	SHORT $LN48@kvz_encode
$LN47@kvz_encode:

; 249  :         if (!cabac->only_count)
; 250  :           if (encoder->cfg.crypto_features & KVZ_CRYPTO_TRANSF_COEFF_SIGNS)
; 251  :             coeff_signs = coeff_signs ^ kvz_crypto_get_key(state->crypto_hdl, num_non_zero);
; 252  :         CABAC_BINS_EP(cabac, coeff_signs, num_non_zero, "coeff_sign_flag");

	mov	eax, DWORD PTR $T1[rsp]
	mov	r8d, ebx
$LN48@kvz_encode:

; 253  :       }
; 254  : 
; 255  :       if (c1 == 0 || num_non_zero > C1FLAG_NUMBER) {

	mov	r12, QWORD PTR cabac$[rsp]
	mov	edx, eax
	mov	rcx, r12
	call	kvz_cabac_encode_bins_ep
	cmp	DWORD PTR c1$1$[rsp], 0
	je	SHORT $LN54@kvz_encode
	cmp	ebx, 8
	jle	$LN15@kvz_encode
$LN54@kvz_encode:

; 256  :         first_coeff2 = 1;

	xor	ebp, ebp

; 257  : 
; 258  :         for (idx = 0; idx < num_non_zero; idx++) {

	movsxd	r15, ebx
	xor	esi, esi
	lea	r14d, QWORD PTR [rbp+1]
	test	ebx, ebx
	jle	$LN15@kvz_encode

; 185  : 
; 186  :           if (last_nz_pos_in_cg == -1) {
; 187  :             last_nz_pos_in_cg = scan_pos_sig;
; 188  :           }
; 189  : 
; 190  :           first_nz_pos_in_cg  = scan_pos_sig;

	mov	ebx, r14d
	mov	r13d, esi
	npad	8
$LL26@kvz_encode:

; 259  :           int32_t base_level  = (idx < C1FLAG_NUMBER) ? (2 + first_coeff2) : 1;

	lea	eax, DWORD PTR [r14+2]
	cmp	ebp, 8
	jb	SHORT $LN77@kvz_encode
	mov	eax, 1
$LN77@kvz_encode:

; 260  : 
; 261  :           if (abs_coeff[idx] >= base_level) {

	mov	edi, DWORD PTR abs_coeff$3[rsp+rsi*4]
	cmp	edi, eax
	jl	SHORT $LN24@kvz_encode

; 262  :             if (!cabac->only_count) {

	mov	edx, edi
	sub	edx, eax
	cmp	BYTE PTR [r12+28], 0
	jne	SHORT $LN56@kvz_encode

; 263  :               if (encoder->cfg.crypto_features & KVZ_CRYPTO_TRANSF_COEFFS)

	mov	rcx, QWORD PTR encoder$1$[rsp]
	test	BYTE PTR [rcx+2372], 4
	je	SHORT $LN56@kvz_encode

; 264  :                 kvz_cabac_write_coeff_remain_encry(state, cabac, abs_coeff[idx] - base_level, go_rice_param, base_level);

	mov	rcx, QWORD PTR state$[rsp]
	mov	r8d, edx
	mov	rdx, r12
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, r13d
	call	kvz_cabac_write_coeff_remain_encry
	jmp	SHORT $LN57@kvz_encode
$LN56@kvz_encode:

; 265  :               else
; 266  :                 kvz_cabac_write_coeff_remain(cabac, abs_coeff[idx] - base_level, go_rice_param);
; 267  :             } else
; 268  :               kvz_cabac_write_coeff_remain(cabac, abs_coeff[idx] - base_level, go_rice_param);
; 269  : 
; 270  :             if (abs_coeff[idx] > 3 * (1 << go_rice_param)) {

	mov	r8d, r13d
	mov	rcx, r12
	call	kvz_cabac_write_coeff_remain
$LN57@kvz_encode:
	lea	eax, DWORD PTR [rbx+rbx*2]
	cmp	edi, eax
	jle	SHORT $LN24@kvz_encode

; 271  :               go_rice_param = MIN(go_rice_param + 1, 4);

	mov	ecx, DWORD PTR go_rice_param$1$[rsp]
	inc	ecx
	mov	DWORD PTR go_rice_param$1$[rsp], ecx
	cmp	ecx, 4
	jae	SHORT $LN78@kvz_encode
	rol	ebx, 1
	mov	r13d, ecx
	jmp	SHORT $LN24@kvz_encode
$LN78@kvz_encode:
	mov	DWORD PTR go_rice_param$1$[rsp], 4
	mov	ebx, 16
	mov	r13d, DWORD PTR go_rice_param$1$[rsp]
$LN24@kvz_encode:

; 257  : 
; 258  :         for (idx = 0; idx < num_non_zero; idx++) {

	xor	eax, eax
	inc	ebp
	inc	rsi
	cmp	edi, 2
	cmovl	eax, r14d
	mov	r14d, eax
	cmp	rsi, r15
	jl	$LL26@kvz_encode
$LN15@kvz_encode:

; 130  : 
; 131  :   // significant_coeff_flag
; 132  :   for (i = scan_cg_last; i >= 0; i--) {

	mov	r9d, DWORD PTR i$1$[rsp]
	mov	rax, QWORD PTR $T2[rsp]
	dec	r9d
	mov	r15d, DWORD PTR tv1928[rsp]
	dec	rax
	mov	r11d, DWORD PTR scan_pos_sig$1$[rsp]
	mov	r13d, DWORD PTR num_blk_side$1$[rsp]
	mov	DWORD PTR i$1$[rsp], r9d
	mov	QWORD PTR $T2[rsp], rax
	test	r9d, r9d
	jns	$LL17@kvz_encode
$LN16@kvz_encode:

; 272  :             }
; 273  :           }
; 274  : 
; 275  :           if (abs_coeff[idx] >= 2) {
; 276  :             first_coeff2 = 0;
; 277  :           }
; 278  :         }
; 279  :       }
; 280  :     }
; 281  :   }
; 282  : }

	add	rsp, 504				; 000001f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_encode_coeff_nxn_generic ENDP
_TEXT	ENDS
END
