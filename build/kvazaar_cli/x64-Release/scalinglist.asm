; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	kvz_g_inv_quant_scales
PUBLIC	kvz_g_quant_scales
PUBLIC	kvz_g_scaling_list_num
PUBLIC	kvz_g_scaling_list_size
EXTRN	__imp_strstr:PROC
EXTRN	__imp_fgets:PROC
	ORG $+2
g_scaling_list_size_x DB 04H
	DB	08H
	DB	010H
	DB	020H
	ORG $+2
kvz_g_scaling_list_num DB 06H
	DB	06H
	DB	06H
	DB	02H
kvz_g_scaling_list_size DW 010H
	DW	040H
	DW	0100H
	DW	0400H
kvz_g_inv_quant_scales DW 028H
	DW	02dH
	DW	033H
	DW	039H
	DW	040H
	DW	048H
	ORG $+1
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
?matrix_type_dc@?1??kvz_scalinglist_parse@@9@9 DB 'INTRA16X16_LUMA_DC', 00H ; `kvz_scalinglist_parse'::`2'::matrix_type_dc
	ORG $+3
	DB	'INTRA16X16_CHROMAU_DC', 00H
	DB	'INTRA16X16_CHROMAV_DC', 00H
	DB	'INTER16X16_LUMA_DC', 00H
	ORG $+3
	DB	'INTER16X16_CHROMAU_DC', 00H
	DB	'INTER16X16_CHROMAV_DC', 00H
	DB	'INTRA32X32_LUMA_DC', 00H
	ORG $+3
	DB	'INTER32X32_LUMA_DC', 00H
	ORG $+3
	ORG $+88
	ORG $+2
g_quant_default_4x4 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
?matrix_type@?1??kvz_scalinglist_parse@@9@9 DB 'INTRA4X4_LUMA', 00H ; `kvz_scalinglist_parse'::`2'::matrix_type
	ORG $+6
	DB	'INTRA4X4_CHROMAU', 00H
	ORG $+3
	DB	'INTRA4X4_CHROMAV', 00H
	ORG $+3
	DB	'INTER4X4_LUMA', 00H
	ORG $+6
	DB	'INTER4X4_CHROMAU', 00H
	ORG $+3
	DB	'INTER4X4_CHROMAV', 00H
	ORG $+3
	DB	'INTRA8X8_LUMA', 00H
	ORG $+6
	DB	'INTRA8X8_CHROMAU', 00H
	ORG $+3
	DB	'INTRA8X8_CHROMAV', 00H
	ORG $+3
	DB	'INTER8X8_LUMA', 00H
	ORG $+6
	DB	'INTER8X8_CHROMAU', 00H
	ORG $+3
	DB	'INTER8X8_CHROMAV', 00H
	ORG $+3
	DB	'INTRA16X16_LUMA', 00H
	ORG $+4
	DB	'INTRA16X16_CHROMAU', 00H
	ORG $+1
	DB	'INTRA16X16_CHROMAV', 00H
	ORG $+1
	DB	'INTER16X16_LUMA', 00H
	ORG $+4
	DB	'INTER16X16_CHROMAU', 00H
	ORG $+1
	DB	'INTER16X16_CHROMAV', 00H
	ORG $+1
	DB	'INTRA32X32_LUMA', 00H
	ORG $+4
	DB	'INTER32X32_LUMA', 00H
	ORG $+4
	ORG $+80
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_quant_intra_default_8x8 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	015H
	DD	018H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	013H
	DD	016H
	DD	019H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	016H
	DD	019H
	DD	01dH
	DD	010H
	DD	010H
	DD	012H
	DD	015H
	DD	018H
	DD	01bH
	DD	01fH
	DD	024H
	DD	011H
	DD	011H
	DD	014H
	DD	018H
	DD	01eH
	DD	023H
	DD	029H
	DD	02fH
	DD	012H
	DD	013H
	DD	016H
	DD	01bH
	DD	023H
	DD	02cH
	DD	036H
	DD	041H
	DD	015H
	DD	016H
	DD	019H
	DD	01fH
	DD	029H
	DD	036H
	DD	046H
	DD	058H
	DD	018H
	DD	019H
	DD	01dH
	DD	024H
	DD	02fH
	DD	041H
	DD	058H
	DD	073H
g_quant_inter_default_8x8 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	047H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	047H
	DD	05bH
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
kvz_g_quant_scales DW 06666H
	DW	05b06H
	DW	05050H
	DW	047dcH
	DW	04000H
	DW	038e4H
	ORG $+1
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
PUBLIC	kvz_scalinglist_set
PUBLIC	kvz_scalinglist_process_enc
PUBLIC	kvz_scalinglist_get_default
PUBLIC	kvz_scalinglist_process
PUBLIC	kvz_scalinglist_init
PUBLIC	kvz_scalinglist_parse
PUBLIC	kvz_scalinglist_destroy
pdata	SEGMENT
$pdata$kvz_scalinglist_set DD imagerel $LN87
	DD	imagerel $LN87+696
	DD	imagerel $unwind$kvz_scalinglist_set
$pdata$scalinglist_set_err_scale DD imagerel scalinglist_set_err_scale
	DD	imagerel scalinglist_set_err_scale+765
	DD	imagerel $unwind$scalinglist_set_err_scale
$pdata$kvz_scalinglist_process_enc DD imagerel $LN38
	DD	imagerel $LN38+181
	DD	imagerel $unwind$kvz_scalinglist_process_enc
$pdata$0$kvz_scalinglist_process_enc DD imagerel $LN38+181
	DD	imagerel $LN38+198
	DD	imagerel $chain$0$kvz_scalinglist_process_enc
$pdata$2$kvz_scalinglist_process_enc DD imagerel $LN38+198
	DD	imagerel $LN38+310
	DD	imagerel $chain$2$kvz_scalinglist_process_enc
$pdata$3$kvz_scalinglist_process_enc DD imagerel $LN38+310
	DD	imagerel $LN38+320
	DD	imagerel $chain$3$kvz_scalinglist_process_enc
$pdata$4$kvz_scalinglist_process_enc DD imagerel $LN38+320
	DD	imagerel $LN38+344
	DD	imagerel $chain$4$kvz_scalinglist_process_enc
$pdata$scalinglist_process_dec DD imagerel scalinglist_process_dec
	DD	imagerel scalinglist_process_dec+144
	DD	imagerel $unwind$scalinglist_process_dec
$pdata$0$scalinglist_process_dec DD imagerel scalinglist_process_dec+144
	DD	imagerel scalinglist_process_dec+164
	DD	imagerel $chain$0$scalinglist_process_dec
$pdata$4$scalinglist_process_dec DD imagerel scalinglist_process_dec+164
	DD	imagerel scalinglist_process_dec+285
	DD	imagerel $chain$4$scalinglist_process_dec
$pdata$5$scalinglist_process_dec DD imagerel scalinglist_process_dec+285
	DD	imagerel scalinglist_process_dec+295
	DD	imagerel $chain$5$scalinglist_process_dec
$pdata$6$scalinglist_process_dec DD imagerel scalinglist_process_dec+295
	DD	imagerel scalinglist_process_dec+313
	DD	imagerel $chain$6$scalinglist_process_dec
$pdata$kvz_scalinglist_process DD imagerel $LN36
	DD	imagerel $LN36+339
	DD	imagerel $unwind$kvz_scalinglist_process
$pdata$kvz_scalinglist_init DD imagerel $LN64
	DD	imagerel $LN64+618
	DD	imagerel $unwind$kvz_scalinglist_init
$pdata$kvz_scalinglist_parse DD imagerel $LN79
	DD	imagerel $LN79+784
	DD	imagerel $unwind$kvz_scalinglist_parse
$pdata$kvz_scalinglist_destroy DD imagerel $LN31
	DD	imagerel $LN31+289
	DD	imagerel $unwind$kvz_scalinglist_destroy
xdata	SEGMENT
$unwind$kvz_scalinglist_set DD 0a1901H
	DD	0b3419H
	DD	0f0151219H
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b600cH
$unwind$scalinglist_set_err_scale DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$kvz_scalinglist_process_enc DD 060c01H
	DD	08340cH
	DD	0d00af00cH
	DD	07006c008H
$chain$0$kvz_scalinglist_process_enc DD 020521H
	DD	055405H
	DD	imagerel $LN38
	DD	imagerel $LN38+181
	DD	imagerel $unwind$kvz_scalinglist_process_enc
$chain$2$kvz_scalinglist_process_enc DD 040a21H
	DD	07e40aH
	DD	066405H
	DD	imagerel $LN38+181
	DD	imagerel $LN38+198
	DD	imagerel $chain$0$kvz_scalinglist_process_enc
$chain$3$kvz_scalinglist_process_enc DD 021H
	DD	imagerel $LN38+181
	DD	imagerel $LN38+198
	DD	imagerel $chain$0$kvz_scalinglist_process_enc
$chain$4$kvz_scalinglist_process_enc DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+181
	DD	imagerel $unwind$kvz_scalinglist_process_enc
$unwind$scalinglist_process_dec DD 040901H
	DD	0c0051209H
	DD	030027003H
$chain$0$scalinglist_process_dec DD 020421H
	DD	0f404H
	DD	imagerel scalinglist_process_dec
	DD	imagerel scalinglist_process_dec+144
	DD	imagerel $unwind$scalinglist_process_dec
$chain$4$scalinglist_process_dec DD 081d21H
	DD	01e41dH
	DD	08d413H
	DD	07640aH
	DD	065405H
	DD	imagerel scalinglist_process_dec+144
	DD	imagerel scalinglist_process_dec+164
	DD	imagerel $chain$0$scalinglist_process_dec
$chain$5$scalinglist_process_dec DD 021H
	DD	imagerel scalinglist_process_dec+144
	DD	imagerel scalinglist_process_dec+164
	DD	imagerel $chain$0$scalinglist_process_dec
$chain$6$scalinglist_process_dec DD 021H
	DD	imagerel scalinglist_process_dec
	DD	imagerel scalinglist_process_dec+144
	DD	imagerel $unwind$scalinglist_process_dec
$unwind$kvz_scalinglist_process DD 0a1401H
	DD	0e3414H
	DD	0f0105214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
$unwind$kvz_scalinglist_init DD 0a1401H
	DD	0e3414H
	DD	0f0103214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
$unwind$kvz_scalinglist_parse DD 0b1c01H
	DD	093341cH
	DD	08a011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$kvz_scalinglist_destroy DD 0c1c01H
	DD	0d641cH
	DD	0c541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
	ORG $+2
$SG4294949731 DB '%d', 00H
	ORG $+1
$SG4294949732 DB '%d', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
scaling_list$ = 80
tv450 = 88
kvz_scalinglist_destroy PROC

; 125  : {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 126  :   uint32_t sizeId,listId,qp;
; 127  : 
; 128  :   for (sizeId = 0; sizeId < 4; sizeId++) {

	xor	r15d, r15d
	lea	rax, OFFSET FLAT:kvz_g_scaling_list_num
	mov	QWORD PTR tv450[rsp], rax
	xor	r13d, r13d
	mov	r12, rcx
$LL4@kvz_scalin:

; 129  :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	xor	ebx, ebx
	cmp	BYTE PTR [rax], bl
	jbe	$LN2@kvz_scalin
	npad	5
$LL7@kvz_scalin:
	xor	esi, esi

; 130  :       for (qp = 0; qp < 6; qp++) {

	lea	r14d, QWORD PTR [rsi+6]
$LL10@kvz_scalin:

; 131  :         if (!(sizeId == 3 && listId == 3)) {

	cmp	r15d, 3
	jne	SHORT $LN12@kvz_scalin
	cmp	ebx, r15d
	jne	SHORT $LN12@kvz_scalin

; 134  :           FREE_POINTER(scaling_list->error_scale[sizeId][listId][qp]);

	mov	ebp, ebx
	jmp	SHORT $LN8@kvz_scalin
$LN12@kvz_scalin:

; 132  :           FREE_POINTER(scaling_list->quant_coeff[sizeId][listId][qp]);

	mov	eax, ebx
	add	rax, r13
	mov	ebp, ebx
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rdi, QWORD PTR [rsi+rcx*2]
	mov	rcx, QWORD PTR [r12+rdi*8+296]
	call	QWORD PTR __imp_free

; 133  :           FREE_POINTER(scaling_list->de_quant_coeff[sizeId][listId][qp]);

	mov	rcx, QWORD PTR [r12+rdi*8+1448]
	mov	QWORD PTR [r12+rdi*8+296], 0
	call	QWORD PTR __imp_free

; 134  :           FREE_POINTER(scaling_list->error_scale[sizeId][listId][qp]);

	mov	rcx, QWORD PTR [r12+rdi*8+2600]
	mov	QWORD PTR [r12+rdi*8+1448], 0
	call	QWORD PTR __imp_free
	mov	QWORD PTR [r12+rdi*8+2600], 0
$LN8@kvz_scalin:

; 130  :       for (qp = 0; qp < 6; qp++) {

	inc	rsi
	sub	r14, 1
	jne	SHORT $LL10@kvz_scalin

; 135  :         }
; 136  :       }
; 137  :       FREE_POINTER(scaling_list->scaling_list_coeff[sizeId][listId]);

	mov	rax, rbp
	add	rax, r13
	mov	rcx, QWORD PTR [r12+rax*8+104]
	lea	rdi, QWORD PTR [r12+rax*8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR tv450[rsp]
	inc	ebx
	mov	QWORD PTR [rdi+104], r14
	movzx	eax, BYTE PTR [rax]
	cmp	ebx, eax
	jb	$LL7@kvz_scalin
	mov	rax, QWORD PTR tv450[rsp]
$LN2@kvz_scalin:

; 126  :   uint32_t sizeId,listId,qp;
; 127  : 
; 128  :   for (sizeId = 0; sizeId < 4; sizeId++) {

	inc	rax
	inc	r15d
	add	r13, 6
	mov	QWORD PTR tv450[rsp], rax
	cmp	r15d, 4
	jb	$LL4@kvz_scalin

; 138  :     }
; 139  :   }
; 140  : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_scalinglist_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
tv569 = 32
tv571 = 40
tv572 = 48
line$1 = 64
scaling_list$ = 1168
fp$ = 1176
data$2 = 1184
tv570 = 1192
kvz_scalinglist_parse PROC

; 143  : {

$LN79:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 1104				; 00000450H

; 144  :   #define LINE_BUFSIZE 1024
; 145  :   static const char matrix_type[4][6][20] =
; 146  :   {
; 147  :     {
; 148  :       "INTRA4X4_LUMA",
; 149  :       "INTRA4X4_CHROMAU",
; 150  :       "INTRA4X4_CHROMAV",
; 151  :       "INTER4X4_LUMA",
; 152  :       "INTER4X4_CHROMAU",
; 153  :       "INTER4X4_CHROMAV"
; 154  :     },
; 155  :     {
; 156  :       "INTRA8X8_LUMA",
; 157  :       "INTRA8X8_CHROMAU",
; 158  :       "INTRA8X8_CHROMAV",
; 159  :       "INTER8X8_LUMA",
; 160  :       "INTER8X8_CHROMAU",
; 161  :       "INTER8X8_CHROMAV"
; 162  :     },
; 163  :     {
; 164  :       "INTRA16X16_LUMA",
; 165  :       "INTRA16X16_CHROMAU",
; 166  :       "INTRA16X16_CHROMAV",
; 167  :       "INTER16X16_LUMA",
; 168  :       "INTER16X16_CHROMAU",
; 169  :       "INTER16X16_CHROMAV"
; 170  :     },
; 171  :     {
; 172  :       "INTRA32X32_LUMA",
; 173  :       "INTER32X32_LUMA",
; 174  :     },
; 175  :   };
; 176  :   static const char matrix_type_dc[2][6][22] =
; 177  :   {
; 178  :     {
; 179  :       "INTRA16X16_LUMA_DC",
; 180  :       "INTRA16X16_CHROMAU_DC",
; 181  :       "INTRA16X16_CHROMAV_DC",
; 182  :       "INTER16X16_LUMA_DC",
; 183  :       "INTER16X16_CHROMAU_DC",
; 184  :       "INTER16X16_CHROMAV_DC"
; 185  :     },
; 186  :     {
; 187  :       "INTRA32X32_LUMA_DC",
; 188  :       "INTER32X32_LUMA_DC",
; 189  :     },
; 190  :   };
; 191  : 
; 192  :   uint32_t size_id;
; 193  :   for (size_id = 0; size_id < SCALING_LIST_SIZE_NUM; size_id++) {

	xor	r13d, r13d
	lea	rbx, OFFSET FLAT:kvz_g_scaling_list_num
	mov	r14, rdx
	mov	QWORD PTR tv572[rsp], rbx
	xor	edx, edx
	lea	rax, OFFSET FLAT:kvz_g_scaling_list_size
	mov	QWORD PTR tv571[rsp], rdx
	lea	rdi, OFFSET FLAT:?matrix_type@?1??kvz_scalinglist_parse@@9@9
	mov	QWORD PTR tv569[rsp], rax
	mov	r9d, 64					; 00000040H
	npad	2
$LL4@kvz_scalin:

; 194  :     uint32_t list_id;
; 195  :     uint32_t size = MIN(MAX_MATRIX_COEF_NUM, (int32_t)kvz_g_scaling_list_size[size_id]);

	movzx	eax, WORD PTR [rax]
	mov	ebp, r9d
	cmp	r9w, ax
	jb	SHORT $LN40@kvz_scalin
	mov	ebp, eax
$LN40@kvz_scalin:

; 196  :     //const uint32_t * const scan = (size_id == 0) ? kvz_g_sig_last_scan[SCAN_DIAG][1] : g_sig_last_scan_32x32;
; 197  : 
; 198  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	xor	r12d, r12d
	cmp	BYTE PTR [rbx], r12b
	jbe	$LN2@kvz_scalin
	npad	6
$LL7@kvz_scalin:

; 199  :       int found;
; 200  :       uint32_t i;
; 201  :       int32_t data;
; 202  :       //This IS valid (our pointer is dynamically allocated in kvz_scalinglist_init)
; 203  :       int32_t *coeff = (int32_t*) scaling_list->scaling_list_coeff[size_id][list_id];

	lea	rax, QWORD PTR [rdx+r12]

; 204  :       char line[LINE_BUFSIZE + 1] = { 0 }; // +1 for null-terminator

	mov	r8d, 1025				; 00000401H
	mov	rsi, QWORD PTR [rcx+rax*8+104]
	xor	edx, edx
	lea	rcx, QWORD PTR line$1[rsp]
	mov	QWORD PTR tv570[rsp], rax
	call	memset

; 205  : 
; 206  :       // Go back for each matrix.
; 207  :       fseek(fp, 0, SEEK_SET);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, r14
	call	QWORD PTR __imp_fseek
$LL10@kvz_scalin:

; 208  : 
; 209  :       do {
; 210  :         if (!fgets(line, LINE_BUFSIZE, fp) ||

	mov	r8, r14
	lea	rcx, QWORD PTR line$1[rsp]
	mov	edx, 1024				; 00000400H
	call	QWORD PTR __imp_fgets
	test	rax, rax
	je	$LN23@kvz_scalin
	lea	rcx, QWORD PTR [r13*2]
	add	rcx, r13
	lea	rax, QWORD PTR [r12+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rdx, QWORD PTR [rdi+rcx*4]
	lea	rcx, QWORD PTR line$1[rsp]
	call	QWORD PTR __imp_strstr
	xor	ebx, ebx
	test	rax, rax
	setne	bl
	test	rax, rax
	jne	SHORT $LN8@kvz_scalin
	mov	rcx, r14
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	$LN23@kvz_scalin
$LN8@kvz_scalin:

; 213  :       } while (!found);

	test	ebx, ebx
	je	SHORT $LL10@kvz_scalin

; 214  : 
; 215  :       for (i = 0; i < size;) {

	xor	edi, edi
	test	ebp, ebp
	je	$LN12@kvz_scalin
	npad	5
$LL11@kvz_scalin:

; 216  :         char *p;
; 217  :         if (!fgets(line, LINE_BUFSIZE, fp))

	mov	r8, r14
	lea	rcx, QWORD PTR line$1[rsp]
	mov	edx, 1024				; 00000400H
	call	QWORD PTR __imp_fgets
	test	rax, rax
	je	$LN23@kvz_scalin

; 218  :           return 0;
; 219  :         p = line;

	lea	rbx, QWORD PTR line$1[rsp]
$LL16@kvz_scalin:

; 220  : 
; 221  :         // Read coefficients per line.
; 222  :         // The comma (,) character is used as a separator.
; 223  :         // The coefficients are stored in up-right diagonal order.
; 224  :         do {
; 225  :           int ret = sscanf(p, "%d", &data);

	lea	r8, QWORD PTR data$2[rsp]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG4294949732
	call	sscanf

; 226  :           if (ret != 1)

	cmp	eax, 1
	jne	SHORT $LN15@kvz_scalin

; 227  :             break;
; 228  :           else if (data < 1 || data > 255)

	mov	ecx, DWORD PTR data$2[rsp]
	lea	eax, DWORD PTR [rcx-1]
	cmp	eax, 254				; 000000feH
	ja	$LN23@kvz_scalin

; 229  :             return 0;
; 230  : 
; 231  :           coeff[i++] = data;

	mov	DWORD PTR [rsi+rdi*4], ecx
	inc	edi

; 232  :           if (i == size)

	cmp	edi, ebp
	je	SHORT $LN12@kvz_scalin

; 233  :             break;
; 234  : 
; 235  :           // Seek to the next newline, null-terminator or comma.
; 236  :           while (*p != '\n' && *p != '\0' && *p != ',')

	movzx	eax, BYTE PTR [rbx]
	cmp	al, 10
	je	SHORT $LN77@kvz_scalin

; 196  :     //const uint32_t * const scan = (size_id == 0) ? kvz_g_sig_last_scan[SCAN_DIAG][1] : g_sig_last_scan_32x32;
; 197  : 
; 198  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	movzx	ecx, al
$LL17@kvz_scalin:

; 233  :             break;
; 234  : 
; 235  :           // Seek to the next newline, null-terminator or comma.
; 236  :           while (*p != '\n' && *p != '\0' && *p != ',')

	movzx	eax, cl
	test	cl, cl
	je	SHORT $LN77@kvz_scalin
	cmp	cl, 44					; 0000002cH
	je	SHORT $LN77@kvz_scalin
	movzx	eax, BYTE PTR [rbx+1]

; 237  :             ++p;

	inc	rbx
	movzx	ecx, al
	cmp	al, 10
	jne	SHORT $LL17@kvz_scalin
$LN77@kvz_scalin:

; 238  :           if (*p == ',')

	mov	rdx, rbx
	movzx	ecx, al
	cmp	al, 44					; 0000002cH
	jne	SHORT $LN14@kvz_scalin

; 239  :             ++p;

	movzx	ecx, BYTE PTR [rbx+1]
$LN14@kvz_scalin:

; 240  :         } while (*p != '\n' && *p != '\0');

	inc	rbx
	cmp	al, 44					; 0000002cH
	cmovne	rbx, rdx
	cmp	cl, 10
	je	SHORT $LN15@kvz_scalin
	test	cl, cl
	jne	SHORT $LL16@kvz_scalin
$LN15@kvz_scalin:

; 214  : 
; 215  :       for (i = 0; i < size;) {

	cmp	edi, ebp
	jb	$LL11@kvz_scalin
$LN12@kvz_scalin:

; 241  :       }
; 242  : 
; 243  :       // Set DC value.
; 244  :       if (size_id >= SCALING_LIST_16x16) {

	cmp	r13d, 2
	jb	$LN32@kvz_scalin

; 245  :         fseek(fp, 0, SEEK_SET);

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, r14
	call	QWORD PTR __imp_fseek
	npad	1
$LL21@kvz_scalin:

; 246  : 
; 247  :         do {
; 248  :           if (!fgets(line, LINE_BUFSIZE, fp) ||

	mov	r8, r14
	lea	rcx, QWORD PTR line$1[rsp]
	mov	edx, 1024				; 00000400H
	call	QWORD PTR __imp_fgets
	test	rax, rax
	je	$LN23@kvz_scalin
	lea	eax, DWORD PTR [r13-2]
	lea	rax, QWORD PTR [rax+rax*2]
	lea	rcx, QWORD PTR [r12+rax*2]
	imul	rdx, rcx, 22
	lea	rax, OFFSET FLAT:?matrix_type_dc@?1??kvz_scalinglist_parse@@9@9
	add	rdx, rax
	lea	rcx, QWORD PTR line$1[rsp]
	call	QWORD PTR __imp_strstr
	xor	ebx, ebx
	test	rax, rax
	setne	bl
	test	rax, rax
	jne	SHORT $LN19@kvz_scalin
	mov	rcx, r14
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	$LN23@kvz_scalin
$LN19@kvz_scalin:

; 249  :               ((found = !!strstr(line, matrix_type_dc[size_id - SCALING_LIST_16x16][list_id])) == 0 && feof(fp)))
; 250  :             return 0;
; 251  :         } while (!found);

	test	ebx, ebx
	je	SHORT $LL21@kvz_scalin

; 252  :         if (1 != fscanf(fp, "%d", &data) || data < 1 || data > 255)

	lea	r8, QWORD PTR data$2[rsp]
	mov	rcx, r14
	lea	rdx, OFFSET FLAT:$SG4294949731
	call	fscanf
	cmp	eax, 1
	jne	$LN23@kvz_scalin
	mov	ecx, DWORD PTR data$2[rsp]
	lea	eax, DWORD PTR [rcx-1]
	cmp	eax, 254				; 000000feH
	ja	$LN23@kvz_scalin

; 253  :           return 0;
; 254  : 
; 255  :         scaling_list->scaling_list_dc[size_id][list_id] = data;

	mov	rax, QWORD PTR scaling_list$[rsp]
	mov	rdx, QWORD PTR tv570[rsp]
	mov	DWORD PTR [rax+rdx*4+4], ecx

; 256  :       } else

	mov	rcx, rax
	jmp	SHORT $LN5@kvz_scalin
$LN32@kvz_scalin:

; 257  :         scaling_list->scaling_list_dc[size_id][list_id] = coeff[0];

	mov	rdx, QWORD PTR tv570[rsp]
	mov	rcx, QWORD PTR scaling_list$[rsp]
	mov	eax, DWORD PTR [rsi]
	mov	DWORD PTR [rcx+rdx*4+4], eax
$LN5@kvz_scalin:

; 196  :     //const uint32_t * const scan = (size_id == 0) ? kvz_g_sig_last_scan[SCAN_DIAG][1] : g_sig_last_scan_32x32;
; 197  : 
; 198  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	mov	rbx, QWORD PTR tv572[rsp]
	lea	rdi, OFFSET FLAT:?matrix_type@?1??kvz_scalinglist_parse@@9@9
	mov	rdx, QWORD PTR tv571[rsp]
	inc	r12d
	movzx	eax, BYTE PTR [rbx]
	cmp	r12d, eax
	jb	$LL7@kvz_scalin
	mov	r9d, 64					; 00000040H
$LN2@kvz_scalin:

; 144  :   #define LINE_BUFSIZE 1024
; 145  :   static const char matrix_type[4][6][20] =
; 146  :   {
; 147  :     {
; 148  :       "INTRA4X4_LUMA",
; 149  :       "INTRA4X4_CHROMAU",
; 150  :       "INTRA4X4_CHROMAV",
; 151  :       "INTER4X4_LUMA",
; 152  :       "INTER4X4_CHROMAU",
; 153  :       "INTER4X4_CHROMAV"
; 154  :     },
; 155  :     {
; 156  :       "INTRA8X8_LUMA",
; 157  :       "INTRA8X8_CHROMAU",
; 158  :       "INTRA8X8_CHROMAV",
; 159  :       "INTER8X8_LUMA",
; 160  :       "INTER8X8_CHROMAU",
; 161  :       "INTER8X8_CHROMAV"
; 162  :     },
; 163  :     {
; 164  :       "INTRA16X16_LUMA",
; 165  :       "INTRA16X16_CHROMAU",
; 166  :       "INTRA16X16_CHROMAV",
; 167  :       "INTER16X16_LUMA",
; 168  :       "INTER16X16_CHROMAU",
; 169  :       "INTER16X16_CHROMAV"
; 170  :     },
; 171  :     {
; 172  :       "INTRA32X32_LUMA",
; 173  :       "INTER32X32_LUMA",
; 174  :     },
; 175  :   };
; 176  :   static const char matrix_type_dc[2][6][22] =
; 177  :   {
; 178  :     {
; 179  :       "INTRA16X16_LUMA_DC",
; 180  :       "INTRA16X16_CHROMAU_DC",
; 181  :       "INTRA16X16_CHROMAV_DC",
; 182  :       "INTER16X16_LUMA_DC",
; 183  :       "INTER16X16_CHROMAU_DC",
; 184  :       "INTER16X16_CHROMAV_DC"
; 185  :     },
; 186  :     {
; 187  :       "INTRA32X32_LUMA_DC",
; 188  :       "INTER32X32_LUMA_DC",
; 189  :     },
; 190  :   };
; 191  : 
; 192  :   uint32_t size_id;
; 193  :   for (size_id = 0; size_id < SCALING_LIST_SIZE_NUM; size_id++) {

	mov	rax, QWORD PTR tv569[rsp]
	add	rdx, 6
	add	rax, 2
	mov	QWORD PTR tv571[rsp], rdx
	inc	rbx
	mov	QWORD PTR tv569[rsp], rax
	inc	r13d
	mov	QWORD PTR tv572[rsp], rbx
	cmp	r13d, 4
	jb	$LL4@kvz_scalin

; 258  :     }
; 259  :   }
; 260  : 
; 261  :   scaling_list->enable = 1;

	mov	BYTE PTR [rcx], 1

; 262  :   return 1;

	mov	eax, 1
$LN1@kvz_scalin:

; 263  :   #undef LINE_BUFSIZE
; 264  : }

	mov	rbx, QWORD PTR [rsp+1176]
	add	rsp, 1104				; 00000450H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN23@kvz_scalin:

; 211  :             ((found = !!strstr(line, matrix_type[size_id][list_id])) == 0 && feof(fp)))
; 212  :           return 0;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_scalin
kvz_scalinglist_parse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
tv2017 = 96
scaling_list$ = 96
tv2016 = 104
kvz_scalinglist_init PROC

; 87   : {

$LN64:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rcx

; 88   :   uint32_t sizeId,listId,qp;
; 89   : 
; 90   :   for (sizeId = 0; sizeId < 4; sizeId++) {

	lea	rax, OFFSET FLAT:kvz_g_scaling_list_num
	xor	ecx, ecx
	mov	QWORD PTR tv2017[rsp], rax
	mov	r12d, ecx
	mov	QWORD PTR tv2016[rsp], rcx
	mov	edi, ecx
	lea	r13, OFFSET FLAT:kvz_g_scaling_list_size
	lea	edx, QWORD PTR [rcx+4]
	npad	7
$LL4@kvz_scalin:

; 91   :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	cmp	BYTE PTR [rax], 0
	mov	ebx, ecx
	jbe	$LN2@kvz_scalin
	npad	5
$LL7@kvz_scalin:
	mov	rsi, rcx

; 92   :       for (qp = 0; qp < 6; qp++) {

	mov	ebp, 6
$LL10@kvz_scalin:

; 93   :         if (!(sizeId == 3 && listId == 3)) {

	cmp	r12d, 3
	jne	SHORT $LN21@kvz_scalin
	cmp	ebx, r12d
	jne	SHORT $LN21@kvz_scalin

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	mov	r14d, ebx
	jmp	SHORT $LN8@kvz_scalin
$LN21@kvz_scalin:

; 94   :           scaling_list->quant_coeff[sizeId][listId][qp]    = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	mov	r14d, ebx
	lea	rax, QWORD PTR [r14+rdi]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rdi, QWORD PTR [rsi+rcx*2]
	movzx	ecx, WORD PTR [r13]
	call	QWORD PTR __imp_calloc

; 95   :           scaling_list->de_quant_coeff[sizeId][listId][qp] = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	movzx	ecx, WORD PTR [r13]
	mov	edx, 4
	mov	QWORD PTR [r15+rdi*8+296], rax
	call	QWORD PTR __imp_calloc

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	movzx	ecx, WORD PTR [r13]
	mov	edx, 8
	mov	QWORD PTR [r15+rdi*8+1448], rax
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR [r15+rdi*8+2600], rax
	mov	edx, 4
	mov	rdi, QWORD PTR tv2016[rsp]
$LN8@kvz_scalin:

; 92   :       for (qp = 0; qp < 6; qp++) {

	inc	rsi
	sub	rbp, 1
	jne	SHORT $LL10@kvz_scalin

; 97   :         }
; 98   :       }
; 99   :       scaling_list->scaling_list_coeff[sizeId][listId] = (int32_t*)calloc(MIN(MAX_MATRIX_COEF_NUM, kvz_g_scaling_list_size[sizeId]), sizeof(int32_t));

	movzx	eax, WORD PTR [r13]
	mov	esi, 64					; 00000040H
	mov	ecx, esi
	cmp	si, ax
	jb	SHORT $LN24@kvz_scalin
	mov	ecx, eax
$LN24@kvz_scalin:
	call	QWORD PTR __imp_calloc
	lea	rcx, QWORD PTR [rdi+r14]
	mov	edx, 4
	mov	QWORD PTR [r15+rcx*8+104], rax
	inc	ebx
	mov	rax, QWORD PTR tv2017[rsp]
	lea	ecx, QWORD PTR [rdx-4]
	movzx	eax, BYTE PTR [rax]
	cmp	ebx, eax
	jb	$LL7@kvz_scalin
	mov	rax, QWORD PTR tv2017[rsp]
$LN2@kvz_scalin:

; 88   :   uint32_t sizeId,listId,qp;
; 89   : 
; 90   :   for (sizeId = 0; sizeId < 4; sizeId++) {

	add	rdi, 6
	inc	rax
	inc	r12d
	mov	QWORD PTR tv2016[rsp], rdi
	add	r13, 2
	mov	QWORD PTR tv2017[rsp], rax
	cmp	r12d, 4
	jb	$LL4@kvz_scalin

; 100  :     }
; 101  :   }
; 102  :   // alias, assign pointer to an existing array
; 103  :   for (qp = 0; qp < 6; qp++) {
; 104  :     scaling_list->quant_coeff[3][3][qp]    = scaling_list->quant_coeff[3][1][qp];

	mov	rax, QWORD PTR [r15+1208]
	mov	QWORD PTR [r15+1304], rax

; 105  :     scaling_list->de_quant_coeff[3][3][qp] = scaling_list->de_quant_coeff[3][1][qp];

	mov	rax, QWORD PTR [r15+2360]
	mov	QWORD PTR [r15+2456], rax

; 106  :     scaling_list->error_scale[3][3][qp]    = scaling_list->error_scale[3][1][qp];

	mov	rax, QWORD PTR [r15+3512]
	mov	QWORD PTR [r15+3608], rax
	mov	rax, QWORD PTR [r15+1216]
	mov	QWORD PTR [r15+1312], rax
	mov	rax, QWORD PTR [r15+2368]
	mov	QWORD PTR [r15+2464], rax
	mov	rax, QWORD PTR [r15+3520]
	mov	QWORD PTR [r15+3616], rax
	mov	rax, QWORD PTR [r15+1224]
	mov	QWORD PTR [r15+1320], rax
	mov	rax, QWORD PTR [r15+2376]
	mov	QWORD PTR [r15+2472], rax
	mov	rax, QWORD PTR [r15+3528]
	mov	QWORD PTR [r15+3624], rax
	mov	rax, QWORD PTR [r15+1232]
	mov	QWORD PTR [r15+1328], rax
	mov	rax, QWORD PTR [r15+2384]
	mov	QWORD PTR [r15+2480], rax
	mov	rax, QWORD PTR [r15+3536]
	mov	QWORD PTR [r15+3632], rax
	mov	rax, QWORD PTR [r15+1240]
	mov	QWORD PTR [r15+1336], rax
	mov	rax, QWORD PTR [r15+2392]
	mov	QWORD PTR [r15+2488], rax
	mov	rax, QWORD PTR [r15+3544]
	mov	QWORD PTR [r15+3640], rax
	mov	rax, QWORD PTR [r15+1248]
	mov	QWORD PTR [r15+1344], rax
	mov	rax, QWORD PTR [r15+2400]
	mov	QWORD PTR [r15+2496], rax
	mov	rax, QWORD PTR [r15+3552]
	mov	QWORD PTR [r15+3648], rax
	lea	rax, QWORD PTR [r15+12]
$LL16@kvz_scalin:

; 107  :   }
; 108  :   
; 109  :   //Initialize dc (otherwise we switch on undef in kvz_scalinglist_set)
; 110  :   for (sizeId = 0; sizeId < SCALING_LIST_SIZE_NUM; ++sizeId) {
; 111  :     for (listId = 0; listId < SCALING_LIST_NUM; ++listId) {
; 112  :       scaling_list->scaling_list_dc[sizeId][listId] = 0;

	mov	QWORD PTR [rax-8], 0
	mov	QWORD PTR [rax], 0
	mov	QWORD PTR [rax+8], 0
	lea	rax, QWORD PTR [rax+24]
	sub	rdx, 1
	jne	SHORT $LL16@kvz_scalin

; 113  :     }
; 114  :   }
; 115  :   
; 116  :   scaling_list->enable = 0;
; 117  :   scaling_list->use_default_list = 0;
; 118  : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	WORD PTR [r15], dx
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_scalinglist_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
scaling_list$ = 112
bitdepth$ = 120
tv284 = 128
tv283 = 136
kvz_scalinglist_process PROC

; 408  : {

$LN36:
	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 409  :   uint32_t size,list,qp;
; 410  : 
; 411  :   for (size = 0; size < SCALING_LIST_SIZE_NUM; size++) {

	xor	ebp, ebp
	lea	r8, OFFSET FLAT:g_quant_intra_default_8x8
	mov	r14, rcx
	xor	eax, eax
	lea	rcx, OFFSET FLAT:kvz_g_scaling_list_num
	mov	QWORD PTR tv284[rsp], rax
	movzx	r12d, dl
	mov	QWORD PTR tv283[rsp], rcx
	lea	rdx, OFFSET FLAT:g_quant_inter_default_8x8
	npad	12
$LL4@kvz_scalin:

; 412  :     for (list = 0; list < kvz_g_scaling_list_num[size]; list++) {

	movzx	r13d, BYTE PTR [rcx]
	xor	esi, esi
	test	r13d, r13d
	je	$LN2@kvz_scalin
	xor	r15d, r15d
$LL7@kvz_scalin:

; 413  :       const int32_t * const list_ptr = scaling_list->use_default_list ?

	cmp	BYTE PTR [r14+1], 0
	je	SHORT $LN12@kvz_scalin

; 268  :   const int32_t *list_ptr = g_quant_intra_default_8x8; // Default to "8x8" intra

	mov	rdi, r8

; 269  :   switch(size_id) {

	test	ebp, ebp
	je	SHORT $LN17@kvz_scalin
	cmp	ebp, 2
	jbe	SHORT $LN18@kvz_scalin
	cmp	ebp, 3
	jne	SHORT $LN13@kvz_scalin

; 277  :     case SCALING_LIST_32x32:
; 278  :       if (list_id > 0) list_ptr = g_quant_inter_default_8x8;

	test	esi, esi
	je	SHORT $LN13@kvz_scalin
	mov	rdi, rdx
	jmp	SHORT $LN13@kvz_scalin
$LN18@kvz_scalin:

; 272  :       break;
; 273  :     case SCALING_LIST_8x8:
; 274  :     case SCALING_LIST_16x16:
; 275  :       if (list_id > 2) list_ptr = g_quant_inter_default_8x8;
; 276  :       break;

	cmp	esi, 2
	mov	rdi, rdx
	cmovbe	rdi, r8
	jmp	SHORT $LN13@kvz_scalin
$LN17@kvz_scalin:

; 270  :     case SCALING_LIST_4x4:
; 271  :       list_ptr = g_quant_default_4x4;

	lea	rdi, OFFSET FLAT:g_quant_default_4x4

; 413  :       const int32_t * const list_ptr = scaling_list->use_default_list ?

	jmp	SHORT $LN13@kvz_scalin
$LN12@kvz_scalin:
	add	rax, r15
	mov	rdi, QWORD PTR [r14+rax*8+104]
$LN13@kvz_scalin:

; 414  :                                        kvz_scalinglist_get_default(size, list) :
; 415  :                                        scaling_list->scaling_list_coeff[size][list];
; 416  : 
; 417  :       for (qp = 0; qp < SCALING_LIST_REM_NUM; qp++) {

	xor	ebx, ebx
	npad	14
$LL10@kvz_scalin:

; 418  :         kvz_scalinglist_set(scaling_list, list_ptr, list, size, qp);

	mov	r9d, ebp
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, r14
	call	kvz_scalinglist_set

; 419  :         scalinglist_set_err_scale(bitdepth, scaling_list, list, size, qp);

	mov	r9d, ebp
	mov	DWORD PTR [rsp+32], ebx
	mov	r8d, esi
	mov	rdx, r14
	movzx	ecx, r12b
	call	scalinglist_set_err_scale
	inc	ebx
	cmp	ebx, 6
	jb	SHORT $LL10@kvz_scalin

; 412  :     for (list = 0; list < kvz_g_scaling_list_num[size]; list++) {

	mov	rax, QWORD PTR tv284[rsp]
	lea	rdx, OFFSET FLAT:g_quant_inter_default_8x8
	inc	esi
	lea	r8, OFFSET FLAT:g_quant_intra_default_8x8
	inc	r15
	cmp	esi, r13d
	jb	$LL7@kvz_scalin
	mov	rcx, QWORD PTR tv283[rsp]
	lea	rdx, OFFSET FLAT:g_quant_inter_default_8x8
	lea	r8, OFFSET FLAT:g_quant_intra_default_8x8
$LN2@kvz_scalin:

; 409  :   uint32_t size,list,qp;
; 410  : 
; 411  :   for (size = 0; size < SCALING_LIST_SIZE_NUM; size++) {

	inc	rcx
	add	rax, 6
	inc	ebp
	mov	QWORD PTR tv283[rsp], rcx
	mov	QWORD PTR tv284[rsp], rax
	cmp	ebp, 4
	jb	$LL4@kvz_scalin

; 420  :       }
; 421  :     }
; 422  :   }
; 423  : }

	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_scalinglist_process ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
size_id$ = 8
list_id$ = 16
kvz_scalinglist_get_default PROC

; 268  :   const int32_t *list_ptr = g_quant_intra_default_8x8; // Default to "8x8" intra

	lea	r8, OFFSET FLAT:g_quant_intra_default_8x8

; 269  :   switch(size_id) {

	test	ecx, ecx
	je	SHORT $LN4@kvz_scalin
	cmp	ecx, 2
	jbe	SHORT $LN5@kvz_scalin
	cmp	ecx, 3
	jne	SHORT $LN10@kvz_scalin

; 277  :     case SCALING_LIST_32x32:
; 278  :       if (list_id > 0) list_ptr = g_quant_inter_default_8x8;

	test	edx, edx
	je	SHORT $LN10@kvz_scalin
	lea	rax, OFFSET FLAT:g_quant_inter_default_8x8

; 282  : }

	ret	0
$LN10@kvz_scalin:
	mov	rax, r8
	ret	0
$LN5@kvz_scalin:

; 270  :     case SCALING_LIST_4x4:
; 271  :       list_ptr = g_quant_default_4x4;
; 272  :       break;
; 273  :     case SCALING_LIST_8x8:
; 274  :     case SCALING_LIST_16x16:
; 275  :       if (list_id > 2) list_ptr = g_quant_inter_default_8x8;
; 276  :       break;

	cmp	edx, 2
	lea	rax, OFFSET FLAT:g_quant_inter_default_8x8
	cmovbe	rax, r8

; 282  : }

	ret	0
$LN4@kvz_scalin:

; 279  :       break;
; 280  :   }
; 281  :   return list_ptr;

	lea	rax, OFFSET FLAT:g_quant_default_4x4

; 282  : }

	ret	0
kvz_scalinglist_get_default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
coeff$ = 48
dequantcoeff$ = 56
inv_quant_scales$ = 64
height$ = 72
width$ = 80
ratio$ = 88
size_num$ = 96
dc$ = 104
flat$ = 112
scalinglist_process_dec PROC

; 294  : {

	push	rbx
	push	rdi
	push	r12
	sub	rsp, 16
	mov	ebx, r9d

; 295  :   uint32_t j,i;
; 296  : 
; 297  :   // Flat scaling list
; 298  :   if (flat) {
; 299  :     for (j = 0; j < height * width; j++) {

	movd	xmm1, r8d
	xor	r9d, r9d
	pshufd	xmm1, xmm1, 0
	mov	r11d, r8d
	mov	rdi, rdx
	mov	r12, rcx
	cmp	BYTE PTR flat$[rsp], r9b
	je	SHORT $LN11@scalinglis
	imul	ebx, DWORD PTR width$[rsp]
	test	ebx, ebx
	je	$LN13@scalinglis
	cmp	ebx, 16
	jb	SHORT $LN34@scalinglis
	mov	ecx, 4
	mov	eax, ebx
	and	eax, -16				; fffffff0H
	movd	xmm0, ecx
	pslld	xmm1, xmm0
	npad	3
$LL4@scalinglis:

; 300  :       *dequantcoeff++ = inv_quant_scales<<4;

	movdqu	XMMWORD PTR [rdi], xmm1
	add	r9d, 16
	movdqu	XMMWORD PTR [rdi+16], xmm1
	movdqu	XMMWORD PTR [rdi+32], xmm1
	movdqu	XMMWORD PTR [rdi+48], xmm1
	add	rdi, 64					; 00000040H
	cmp	r9d, eax
	jb	SHORT $LL4@scalinglis

; 295  :   uint32_t j,i;
; 296  : 
; 297  :   // Flat scaling list
; 298  :   if (flat) {
; 299  :     for (j = 0; j < height * width; j++) {

	cmp	r9d, ebx
	jae	$LN13@scalinglis
$LN34@scalinglis:
	sub	ebx, r9d
	shl	r11d, 4
	movsxd	rax, r11d
	mov	ecx, ebx
	rep stosd

; 310  :     }
; 311  :   }
; 312  : }

	add	rsp, 16
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
$LN11@scalinglis:
	mov	QWORD PTR [rsp], r15

; 301  :     }
; 302  :   } else {
; 303  :     for (j = 0; j < height; j++) {

	mov	r10d, r9d
	mov	r15d, DWORD PTR ratio$[rsp]
	test	ebx, ebx
	je	$LN6@scalinglis
	mov	QWORD PTR [rsp+48], rbp
	mov	QWORD PTR [rsp+56], rsi
	mov	esi, DWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+64], r13
	mov	r13d, DWORD PTR size_num$[rsp]
	mov	QWORD PTR [rsp+8], r14
$LL7@scalinglis:

; 304  :       for (i = 0; i < width; i++) {

	mov	r8d, r9d
	test	esi, esi
	je	SHORT $LN5@scalinglis

; 305  :         dequantcoeff[j*width + i] = inv_quant_scales * coeff[size_num * (j / ratio) + i / ratio];

	xor	edx, edx
	mov	eax, r10d
	div	r15d
	mov	r14d, r10d
	mov	ebp, eax
	imul	r14d, esi
	imul	ebp, r13d
	npad	3
$LL10@scalinglis:
	xor	edx, edx
	lea	ecx, DWORD PTR [r14+r8]
	mov	eax, r8d
	inc	r8d
	div	r15d
	add	eax, ebp
	mov	edx, DWORD PTR [r12+rax*4]
	imul	edx, r11d
	mov	DWORD PTR [rdi+rcx*4], edx
	cmp	r8d, esi
	jb	SHORT $LL10@scalinglis
$LN5@scalinglis:

; 301  :     }
; 302  :   } else {
; 303  :     for (j = 0; j < height; j++) {

	inc	r10d
	cmp	r10d, ebx
	jb	SHORT $LL7@scalinglis
	mov	r14, QWORD PTR [rsp+8]
	mov	r13, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+48]
$LN6@scalinglis:

; 306  :       }
; 307  :     }
; 308  :     if (ratio > 1) {

	cmp	r15d, 1
	mov	r15, QWORD PTR [rsp]
	jbe	SHORT $LN13@scalinglis

; 309  :       dequantcoeff[0] = inv_quant_scales * dc;

	imul	r11d, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rdi], r11d
$LN13@scalinglis:

; 310  :     }
; 311  :   }
; 312  : }

	add	rsp, 16
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
scalinglist_process_dec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
coeff$ = 40
quantcoeff$ = 48
quant_scales$ = 56
height$ = 64
nsqth$1$ = 72
width$ = 72
ratio$ = 80
size_num$ = 88
dc$ = 96
flat$ = 104
kvz_scalinglist_process_enc PROC

; 321  : {

$LN38:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	push	r12
	push	r13
	push	r15

; 322  :   uint32_t j,i;
; 323  :   int32_t nsqth = (height < width) ? 4: 1; //!< height ratio for NSQT

	mov	ebx, DWORD PTR width$[rsp]
	mov	r12, rcx
	cmp	r9d, ebx

; 324  :   int32_t nsqtw = (width < height) ? 4: 1; //!< width ratio for NSQT
; 325  : 
; 326  :   // Flat scaling list
; 327  :   if (flat) {
; 328  :     for (j = 0; j < height * width; j++) {

	movd	xmm1, r8d
	mov	rdi, rdx
	pshufd	xmm1, xmm1, 0
	mov	edx, 4
	mov	ecx, 1
	cmovb	ecx, edx
	mov	r13d, 1
	cmova	r13d, edx
	mov	DWORD PTR nsqth$1$[rsp], ecx
	mov	r11d, r9d
	mov	r15d, r8d
	xor	r9d, r9d
	cmp	BYTE PTR flat$[rsp], r9b
	je	SHORT $LN11@kvz_scalin
	imul	r11d, ebx
	test	r11d, r11d
	je	$LN13@kvz_scalin
	cmp	r11d, 16
	jb	SHORT $LN36@kvz_scalin
	mov	eax, r11d
	movd	xmm0, edx
	and	eax, -16				; fffffff0H
	psrad	xmm1, xmm0
	npad	1
$LL4@kvz_scalin:

; 329  :       *quantcoeff++ = quant_scales>>4;

	movdqu	XMMWORD PTR [rdi], xmm1
	add	r9d, 16
	movdqu	XMMWORD PTR [rdi+16], xmm1
	movdqu	XMMWORD PTR [rdi+32], xmm1
	movdqu	XMMWORD PTR [rdi+48], xmm1
	add	rdi, 64					; 00000040H
	cmp	r9d, eax
	jb	SHORT $LL4@kvz_scalin

; 324  :   int32_t nsqtw = (width < height) ? 4: 1; //!< width ratio for NSQT
; 325  : 
; 326  :   // Flat scaling list
; 327  :   if (flat) {
; 328  :     for (j = 0; j < height * width; j++) {

	cmp	r9d, r11d
	jae	$LN13@kvz_scalin
$LN36@kvz_scalin:
	sub	r11d, r9d
	sar	r15d, 4
	movsxd	rax, r15d
	mov	ecx, r11d
	rep stosd

; 340  :     }
; 341  :   }
; 342  : }

	mov	rbx, QWORD PTR [rsp+64]
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN11@kvz_scalin:
	mov	QWORD PTR [rsp+40], rbp

; 330  :     }
; 331  :   } else {
; 332  :     for (j = 0; j < height; j++) {

	mov	r10d, r9d
	mov	ebp, DWORD PTR ratio$[rsp]
	test	r11d, r11d
	je	SHORT $LN6@kvz_scalin
	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+56], r14
$LL7@kvz_scalin:

; 333  :       for (i = 0; i < width; i++) {

	mov	r8d, r9d
	test	ebx, ebx
	je	SHORT $LN5@kvz_scalin

; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);

	xor	edx, edx
	mov	eax, r10d
	imul	eax, ecx
	mov	r14d, r10d
	imul	r14d, ebx
	div	ebp
	mov	esi, eax
	imul	esi, DWORD PTR size_num$[rsp]
	npad	1
$LL10@kvz_scalin:

; 334  :         uint32_t coeffpos  = size_num * (j * nsqth / ratio) + i * nsqtw / ratio;

	xor	edx, edx
	mov	eax, r8d
	imul	eax, r13d

; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);

	mov	ecx, 1
	div	ebp
	add	eax, esi
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN16@kvz_scalin
	mov	ecx, DWORD PTR [r12+rax*4]
$LN16@kvz_scalin:
	mov	eax, r15d
	cdq
	idiv	ecx
	lea	ecx, DWORD PTR [r14+r8]
	inc	r8d
	mov	DWORD PTR [rdi+rcx*4], eax
	cmp	r8d, ebx
	jb	SHORT $LL10@kvz_scalin
	mov	ecx, DWORD PTR nsqth$1$[rsp]
$LN5@kvz_scalin:

; 330  :     }
; 331  :   } else {
; 332  :     for (j = 0; j < height; j++) {

	inc	r10d
	cmp	r10d, r11d
	jb	SHORT $LL7@kvz_scalin
	mov	r14, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+48]
$LN6@kvz_scalin:

; 336  :       }
; 337  :     }
; 338  :     if (ratio > 1) {

	cmp	ebp, 1
	mov	rbp, QWORD PTR [rsp+40]
	jbe	SHORT $LN13@kvz_scalin

; 339  :       quantcoeff[0] = quant_scales / dc;

	xor	edx, edx
	mov	eax, r15d
	div	DWORD PTR dc$[rsp]
	mov	DWORD PTR [rdi], eax
$LN13@kvz_scalin:

; 340  :     }
; 341  :   }
; 342  : }

	mov	rbx, QWORD PTR [rsp+64]
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	ret	0
kvz_scalinglist_process_enc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
bitdepth$ = 48
scaling_list$ = 56
list$ = 64
size$ = 72
qp$ = 80
scalinglist_set_err_scale PROC

; 352  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 357  :   const int32_t *quantcoeff = scaling_list->quant_coeff[size][list][qp];
; 358  :   //This cast is allowed, since error_scale is a malloc'd pointer in kvz_scalinglist_init
; 359  :   double *err_scale         = (double *) scaling_list->error_scale[size][list][qp];
; 360  : 
; 361  :   // Compensate for scaling of bitcount in Lagrange cost function
; 362  :   double scale = CTX_FRAC_ONE_BIT;
; 363  :   // Compensate for scaling through forward transform
; 364  :   scale = scale*pow(2.0,-2.0*transform_shift);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	lea	r11, OFFSET FLAT:__ImageBase
	mov	r10d, r9d
	mov	eax, r8d
	movzx	ebp, cl
	mov	ecx, 13
	movzx	ebx, WORD PTR kvz_g_scaling_list_size[r11+r10*2]
	lea	r9, QWORD PTR [r10+r10*2]
	lea	r8, QWORD PTR [rax+r9*2]
	mov	eax, DWORD PTR qp$[rsp]
	lea	r9, QWORD PTR [r8+r8*2]
	lea	r8, QWORD PTR [rax+r9*2]
	movzx	eax, BYTE PTR g_scaling_list_size_x[r10+r11]
	mov	rdi, QWORD PTR [rdx+r8*8+296]
	mov	rsi, QWORD PTR [rdx+r8*8+2600]
	movsx	eax, BYTE PTR kvz_g_convert_to_bit[rax+r11]
	sub	ecx, eax
	sub	ecx, ebp
	movd	xmm1, ecx
	cvtdq2pd xmm1, xmm1
	mulsd	xmm1, QWORD PTR __real@c000000000000000
	call	pow
	movaps	xmm4, xmm0
	xor	r8d, r8d
	mulsd	xmm4, QWORD PTR __real@40e0000000000000
	movaps	xmm3, xmm4
	unpcklpd xmm3, xmm3

; 365  :   for(i=0;i<max_num_coeff;i++) {

	test	ebx, ebx
	je	$LN16@scalinglis
	cmp	ebx, 8
	jb	$LN9@scalinglis

; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));

	lea	eax, DWORD PTR [rbp*2-16]
	movd	xmm0, eax
	lea	eax, DWORD PTR [rbx-1]
	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rax, QWORD PTR [rdi+rax*4]
	cmp	rsi, rax
	ja	SHORT $LN10@scalinglis

; 353  :   uint32_t log2_tr_size   = kvz_g_convert_to_bit[ g_scaling_list_size_x[size] ] + 2;
; 354  :   int32_t transform_shift = MAX_TR_DYNAMIC_RANGE - bitdepth - log2_tr_size;  // Represents scaling through forward transform
; 355  : 
; 356  :   uint32_t i,max_num_coeff  = kvz_g_scaling_list_size[size];

	cmp	rdx, rdi
	jae	$LN9@scalinglis
$LN10@scalinglis:
	mov	edx, ebx
	and	edx, -8					; fffffff8H
	movdqa	xmm1, XMMWORD PTR __xmm@00000001000000010000000100000001
	mov	r9d, 4
	pslld	xmm1, xmm0
	cvtdq2pd xmm5, xmm1
	npad	2
$LL4@scalinglis:

; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));

	movq	xmm0, QWORD PTR [rdi+r8*4]
	lea	eax, DWORD PTR [r9-2]
	cvtdq2pd xmm1, xmm0
	movq	xmm0, QWORD PTR [rdi+rax*4]
	movaps	xmm2, xmm3
	divpd	xmm2, xmm1
	divpd	xmm2, xmm1
	cvtdq2pd xmm1, xmm0
	divpd	xmm2, xmm5
	movups	XMMWORD PTR [rsi+r8*8], xmm2
	add	r8d, 8
	movaps	xmm2, xmm3
	divpd	xmm2, xmm1
	divpd	xmm2, xmm1
	divpd	xmm2, xmm5
	movups	XMMWORD PTR [rsi+rax*8], xmm2
	mov	eax, r9d
	movaps	xmm2, xmm3
	movq	xmm0, QWORD PTR [rdi+rax*4]
	cvtdq2pd xmm1, xmm0
	divpd	xmm2, xmm1
	divpd	xmm2, xmm1
	divpd	xmm2, xmm5
	movups	XMMWORD PTR [rsi+rax*8], xmm2
	lea	eax, DWORD PTR [r9+2]
	add	r9d, 8
	movq	xmm0, QWORD PTR [rdi+rax*4]
	movaps	xmm2, xmm3
	cvtdq2pd xmm1, xmm0
	divpd	xmm2, xmm1
	divpd	xmm2, xmm1
	divpd	xmm2, xmm5
	movups	XMMWORD PTR [rsi+rax*8], xmm2
	cmp	r8d, edx
	jb	$LL4@scalinglis
$LN9@scalinglis:

; 365  :   for(i=0;i<max_num_coeff;i++) {

	cmp	r8d, ebx
	jae	$LN16@scalinglis
	movsd	xmm3, QWORD PTR __real@3ff0000000000000
	lea	ebp, DWORD PTR [rbp*2-16]
	mov	eax, ebx
	mov	r10d, r8d
	sub	eax, r8d
	mov	r11d, 1
	cmp	eax, 4
	jb	$LN20@scalinglis

; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));

	mov	ecx, ebp
	lea	rdx, QWORD PTR [rdi+8]
	mov	eax, r11d
	lea	rdx, QWORD PTR [rdx+r8*4]
	shl	eax, cl
	movaps	xmm5, xmm3
	lea	rcx, QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rcx+r8*8]
	movd	xmm0, eax
	mov	eax, ebx
	sub	eax, r8d
	sub	eax, 4
	shr	eax, 2
	inc	eax
	cvtdq2pd xmm0, xmm0
	mov	r9d, eax
	lea	r8d, DWORD PTR [r8+rax*4]
	lea	r10, QWORD PTR [r10+rax*4]
	divsd	xmm5, xmm0
	npad	5
$LL18@scalinglis:
	lea	rcx, QWORD PTR [rcx+32]
	xorps	xmm0, xmm0
	cvtsi2sd xmm0, DWORD PTR [rdx-8]
	lea	rdx, QWORD PTR [rdx+16]
	movaps	xmm2, xmm3
	divsd	xmm2, xmm0
	xorps	xmm0, xmm0
	movaps	xmm1, xmm2
	mulsd	xmm2, xmm4
	mulsd	xmm1, xmm5
	mulsd	xmm1, xmm2
	movaps	xmm2, xmm3
	movsd	QWORD PTR [rcx-48], xmm1
	cvtsi2sd xmm0, DWORD PTR [rdx-20]
	divsd	xmm2, xmm0
	xorps	xmm0, xmm0
	movaps	xmm1, xmm2
	mulsd	xmm2, xmm4
	mulsd	xmm1, xmm5
	mulsd	xmm1, xmm2
	movaps	xmm2, xmm3
	movsd	QWORD PTR [rcx-40], xmm1
	cvtsi2sd xmm0, DWORD PTR [rdx-16]
	divsd	xmm2, xmm0
	xorps	xmm0, xmm0
	movaps	xmm1, xmm2
	mulsd	xmm2, xmm4
	mulsd	xmm1, xmm5
	mulsd	xmm1, xmm2
	movaps	xmm2, xmm3
	movsd	QWORD PTR [rcx-32], xmm1
	movaps	xmm1, xmm5
	cvtsi2sd xmm0, DWORD PTR [rdx-12]
	divsd	xmm2, xmm0
	movaps	xmm0, xmm4
	mulsd	xmm1, xmm2
	mulsd	xmm0, xmm2
	mulsd	xmm1, xmm0
	movsd	QWORD PTR [rcx-24], xmm1
	sub	r9, r11
	jne	$LL18@scalinglis

; 365  :   for(i=0;i<max_num_coeff;i++) {

	cmp	r8d, ebx
	jae	SHORT $LN16@scalinglis
$LN20@scalinglis:
	mov	ecx, ebp
	lea	rax, QWORD PTR [rsi+r10*8]
	shl	r11d, cl
	movaps	xmm5, xmm3
	sub	ebx, r8d
	lea	rcx, QWORD PTR [rdi+r10*4]
	mov	edx, ebx
	movd	xmm0, r11d
	cvtdq2pd xmm0, xmm0
	divsd	xmm5, xmm0
$LC24@scalinglis:
	movd	xmm0, DWORD PTR [rcx]

; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));

	movaps	xmm2, xmm3
	lea	rax, QWORD PTR [rax+8]
	movaps	xmm1, xmm5
	lea	rcx, QWORD PTR [rcx+4]
	cvtdq2pd xmm0, xmm0
	divsd	xmm2, xmm0
	mulsd	xmm1, xmm2
	mulsd	xmm2, xmm4
	mulsd	xmm1, xmm2
	movsd	QWORD PTR [rax-8], xmm1
	sub	rdx, 1
	jne	SHORT $LC24@scalinglis
$LN16@scalinglis:

; 367  :   }
; 368  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
scalinglist_set_err_scale ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
_TEXT	SEGMENT
tv930 = 0
scaling_list$ = 80
coeff$ = 88
dc$1$ = 96
listId$ = 96
sizeId$ = 104
qp$ = 112
kvz_scalinglist_set PROC

; 376  : {

$LN87:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 16

; 377  :   const uint32_t width  = g_scaling_list_size_x[sizeId];
; 378  :   const uint32_t height = g_scaling_list_size_x[sizeId];
; 379  :   const uint32_t ratio  = g_scaling_list_size_x[sizeId] / MIN(8, g_scaling_list_size_x[sizeId]);

	mov	esi, 8
	mov	r10d, r9d
	mov	r15, rdx
	lea	rbp, OFFSET FLAT:__ImageBase
	mov	rbx, rcx

; 380  :   const uint32_t dc = scaling_list->scaling_list_dc[sizeId][listId] != 0 ? scaling_list->scaling_list_dc[sizeId][listId] : 16;

	mov	ecx, r8d
	movzx	r9d, BYTE PTR g_scaling_list_size_x[r10+rbp]
	cmp	r9b, sil
	mov	edi, r9d
	mov	eax, r9d

; 384  : 
; 385  :   // Encoder list
; 386  :   kvz_scalinglist_process_enc(coeff, quantcoeff, kvz_g_quant_scales[qp]<<4, height, width, ratio,

	mov	r13d, r9d
	cmova	edi, esi
	xor	edx, edx
	div	edi
	mov	edi, DWORD PTR qp$[rsp]
	lea	rdx, QWORD PTR [r10+r10*2]
	lea	rdx, QWORD PTR [rcx+rdx*2]
	mov	r11d, eax
	mov	ecx, DWORD PTR [rbx+rdx*4+4]
	mov	eax, 16
	test	ecx, ecx
	cmovne	eax, ecx
	cmp	r9b, sil
	lea	rcx, QWORD PTR [rdx+rdx*2]
	mov	DWORD PTR dc$1$[rsp], eax
	cmova	r13d, esi
	lea	rdx, QWORD PTR [rdi+rcx*2]
	mov	r10, QWORD PTR [rbx+rdx*8+296]
	lea	rsi, QWORD PTR [rdi+rdi]
	movsx	r12d, WORD PTR kvz_g_quant_scales[rsi+rbp]

; 327  :   if (flat) {

	xor	r14d, r14d

; 381  :   //These cast are allowed, since these are pointer's to malloc'd area in kvz_scalinglist_init
; 382  :   int32_t *quantcoeff   = (int32_t*) scaling_list->quant_coeff[sizeId][listId][qp];
; 383  :   int32_t *dequantcoeff = (int32_t*) scaling_list->de_quant_coeff[sizeId][listId][qp];

	mov	r8, QWORD PTR [rbx+rdx*8+1448]

; 384  : 
; 385  :   // Encoder list
; 386  :   kvz_scalinglist_process_enc(coeff, quantcoeff, kvz_g_quant_scales[qp]<<4, height, width, ratio,

	mov	ebp, 4
	shl	r12d, 4
	mov	QWORD PTR tv930[rsp], rsi

; 328  :     for (j = 0; j < height * width; j++) {

	movd	xmm1, r12d
	pshufd	xmm1, xmm1, 0

; 384  : 
; 385  :   // Encoder list
; 386  :   kvz_scalinglist_process_enc(coeff, quantcoeff, kvz_g_quant_scales[qp]<<4, height, width, ratio,

	cmp	BYTE PTR [rbx], r14b

; 327  :   if (flat) {

	jne	$LN21@kvz_scalin

; 328  :     for (j = 0; j < height * width; j++) {

	mov	ecx, r9d
	mov	eax, r14d
	imul	ecx, r9d
	test	ecx, ecx
	je	SHORT $LN84@kvz_scalin
	cmp	ecx, 16
	jb	SHORT $LN80@kvz_scalin
	mov	edx, ecx
	movd	xmm0, ebp
	and	edx, -16				; fffffff0H
	psrad	xmm1, xmm0
	npad	3
$LL14@kvz_scalin:

; 329  :       *quantcoeff++ = quant_scales>>4;

	movdqu	XMMWORD PTR [r10], xmm1
	add	eax, 16
	movdqu	XMMWORD PTR [r10+16], xmm1
	movdqu	XMMWORD PTR [r10+32], xmm1
	movdqu	XMMWORD PTR [r10+48], xmm1
	add	r10, 64					; 00000040H
	cmp	eax, edx
	jb	SHORT $LL14@kvz_scalin

; 328  :     for (j = 0; j < height * width; j++) {

	cmp	eax, ecx
	jae	SHORT $LN84@kvz_scalin
$LN80@kvz_scalin:
	sub	ecx, eax
	mov	rdi, r10
	sar	r12d, 4
	movsxd	rax, r12d
	rep stosd
$LN84@kvz_scalin:

; 387  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 388  :   // Decoder list
; 389  :   scalinglist_process_dec(coeff, dequantcoeff, kvz_g_inv_quant_scales[qp], height, width, ratio,

	mov	r13d, DWORD PTR dc$1$[rsp]
$LN23@kvz_scalin:
	cmp	r9b, 8
	mov	eax, 8
	mov	r12d, r9d
	cmova	r12d, eax
	cmp	BYTE PTR [rbx], 0
	lea	rax, OFFSET FLAT:__ImageBase
	movsx	esi, WORD PTR kvz_g_inv_quant_scales[rsi+rax]

; 299  :     for (j = 0; j < height * width; j++) {

	movd	xmm1, esi
	pshufd	xmm1, xmm1, 0
	jne	$LN37@kvz_scalin
	imul	r9d, r9d
	test	r9d, r9d
	je	$LN39@kvz_scalin
	cmp	r9d, 16
	jb	SHORT $LN79@kvz_scalin
	mov	eax, r9d
	movd	xmm0, ebp
	and	eax, -16				; fffffff0H
	pslld	xmm1, xmm0
	npad	5
$LL30@kvz_scalin:

; 300  :       *dequantcoeff++ = inv_quant_scales<<4;

	movdqu	XMMWORD PTR [r8], xmm1
	add	r14d, 16
	movdqu	XMMWORD PTR [r8+16], xmm1
	movdqu	XMMWORD PTR [r8+32], xmm1
	movdqu	XMMWORD PTR [r8+48], xmm1
	add	r8, 64					; 00000040H
	cmp	r14d, eax
	jb	SHORT $LL30@kvz_scalin

; 299  :     for (j = 0; j < height * width; j++) {

	cmp	r14d, r9d
	jae	$LN39@kvz_scalin
$LN79@kvz_scalin:
	sub	r9d, r14d
	mov	rdi, r8
	shl	esi, 4
	movsxd	rax, esi
	mov	ecx, r9d
	rep stosd

; 301  :     }
; 302  :   } else {

	jmp	$LN39@kvz_scalin
$LN21@kvz_scalin:

; 332  :     for (j = 0; j < height; j++) {

	mov	ebp, r14d
	test	r9d, r9d
	je	SHORT $LN16@kvz_scalin
	npad	5
$LL17@kvz_scalin:
	xor	edx, edx
	mov	eax, ebp
	div	r11d

; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);

	mov	esi, ebp
	mov	edi, r14d
	mov	ebx, eax
	imul	esi, r9d
	imul	ebx, r13d
	npad	10
$LL20@kvz_scalin:

; 333  :       for (i = 0; i < width; i++) {
; 334  :         uint32_t coeffpos  = size_num * (j * nsqth / ratio) + i * nsqtw / ratio;

	xor	edx, edx
	mov	eax, edi
	div	r11d

; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);

	mov	ecx, 1
	add	eax, ebx
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN26@kvz_scalin
	mov	ecx, DWORD PTR [r15+rax*4]
$LN26@kvz_scalin:
	mov	eax, r12d
	cdq
	idiv	ecx
	lea	ecx, DWORD PTR [rsi+rdi]
	inc	edi
	mov	DWORD PTR [r10+rcx*4], eax
	cmp	edi, r9d
	jb	SHORT $LL20@kvz_scalin

; 330  :     }
; 331  :   } else {
; 332  :     for (j = 0; j < height; j++) {

	inc	ebp
	cmp	ebp, r9d
	jb	SHORT $LL17@kvz_scalin
	mov	rbx, QWORD PTR scaling_list$[rsp]
	mov	rsi, QWORD PTR tv930[rsp]
$LN16@kvz_scalin:

; 336  :       }
; 337  :     }
; 338  :     if (ratio > 1) {

	mov	ebp, 4
	cmp	r11d, 1
	jbe	$LN84@kvz_scalin

; 339  :       quantcoeff[0] = quant_scales / dc;

	mov	r13d, DWORD PTR dc$1$[rsp]
	xor	edx, edx
	mov	eax, r12d
	div	r13d
	mov	DWORD PTR [r10], eax
	jmp	$LN23@kvz_scalin
$LN37@kvz_scalin:

; 303  :     for (j = 0; j < height; j++) {

	mov	ebp, r14d
	test	r9d, r9d
	je	SHORT $LN32@kvz_scalin
	npad	9
$LL33@kvz_scalin:
	xor	edx, edx
	mov	eax, ebp
	div	r11d

; 304  :       for (i = 0; i < width; i++) {
; 305  :         dequantcoeff[j*width + i] = inv_quant_scales * coeff[size_num * (j / ratio) + i / ratio];

	mov	r10d, ebp
	mov	ecx, r14d
	mov	ebx, eax
	imul	r10d, r9d
	imul	ebx, r12d
	npad	9
$LL36@kvz_scalin:
	xor	edx, edx
	mov	eax, ecx
	div	r11d
	lea	edx, DWORD PTR [r10+rcx]
	inc	ecx
	add	eax, ebx
	mov	edi, DWORD PTR [r15+rax*4]
	imul	edi, esi
	mov	DWORD PTR [r8+rdx*4], edi
	cmp	ecx, r9d
	jb	SHORT $LL36@kvz_scalin

; 303  :     for (j = 0; j < height; j++) {

	inc	ebp
	cmp	ebp, r9d
	jb	SHORT $LL33@kvz_scalin
$LN32@kvz_scalin:

; 306  :       }
; 307  :     }
; 308  :     if (ratio > 1) {

	cmp	r11d, 1
	jbe	SHORT $LN39@kvz_scalin

; 309  :       dequantcoeff[0] = inv_quant_scales * dc;

	imul	esi, r13d
	mov	DWORD PTR [r8], esi
$LN39@kvz_scalin:

; 390  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 391  : 
; 392  : 
; 393  :   // TODO: support NSQT
; 394  :   // if(sizeId == /*SCALING_LIST_32x32*/3 || sizeId == /*SCALING_LIST_16x16*/2) { //for NSQT
; 395  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_VER*/1];
; 396  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height,width>>2,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 397  : 
; 398  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_HOR*/2];
; 399  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height>>2,width,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 400  :   // }
; 401  : }

	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 16
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_scalinglist_set ENDP
_TEXT	ENDS
END
