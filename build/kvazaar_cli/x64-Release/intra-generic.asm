; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

?modedisp2invsampledisp@?1??kvz_angular_pred_generic@@9@9 DW 00H ; `kvz_angular_pred_generic'::`2'::modedisp2invsampledisp
	DW	01000H
	DW	0666H
	DW	038eH
	DW	0276H
	DW	01e2H
	DW	0186H
	DW	013bH
	DW	0100H
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+1
?modedisp2sampledisp@?1??kvz_angular_pred_generic@@9@9 DB 00H ; `kvz_angular_pred_generic'::`2'::modedisp2sampledisp
	DB	02H
	DB	05H
	DB	09H
	DB	0dH
	DB	011H
	DB	015H
	DB	01aH
	DB	020H
	ORG $+7
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294947570
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294947569
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294947568
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294947567
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294947566
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294947565
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294947564
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294947563
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294947562
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294947561
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294947560
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294947559
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294947558
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294947557
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294947556
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294947555
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294947554
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294947553
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294947552
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294947551
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294947550
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294947549
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294947548
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294947547
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294947546
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294947545
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294947544
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294947543
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294947542
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294947541
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294947540
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294947539
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294947538
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294947537
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294947536
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294947535
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294947534
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294947533
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294947532
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294947531
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294947530
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294947529
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294947528
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294947527
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294947526
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294947525
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294947524
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294947523
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294947522
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294947521
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294947520
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294947519
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294947518
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294947517
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294947516
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294947515
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294947514
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294947513
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294947512
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294947511
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294947510
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294947509
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294947508
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294947520 DB 'quant', 00H
	ORG $+7
$SG4294947570 DB 'array_checksum', 00H
	ORG $+1
$SG4294947569 DB 'array_md5', 00H
	ORG $+6
$SG4294947568 DB 'reg_sad', 00H
$SG4294947567 DB 'sad_4x4', 00H
$SG4294947566 DB 'sad_8x8', 00H
$SG4294947565 DB 'sad_16x16', 00H
	ORG $+6
$SG4294947564 DB 'sad_32x32', 00H
	ORG $+6
$SG4294947563 DB 'sad_64x64', 00H
	ORG $+6
$SG4294947562 DB 'satd_4x4', 00H
	ORG $+7
$SG4294947561 DB 'satd_8x8', 00H
	ORG $+7
$SG4294947560 DB 'satd_16x16', 00H
	ORG $+5
$SG4294947559 DB 'satd_32x32', 00H
	ORG $+5
$SG4294947558 DB 'satd_64x64', 00H
	ORG $+5
$SG4294947557 DB 'satd_any_size', 00H
	ORG $+2
$SG4294947556 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294947555 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294947554 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294947553 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294947552 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294947551 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294947550 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294947549 DB 'satd_16x16_dual', 00H
$SG4294947548 DB 'satd_32x32_dual', 00H
$SG4294947547 DB 'satd_64x64_dual', 00H
$SG4294947546 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294947545 DB 'pixels_calc_ssd', 00H
$SG4294947544 DB 'bipred_average', 00H
	ORG $+1
$SG4294947543 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294947542 DB 'ver_sad', 00H
$SG4294947541 DB 'hor_sad', 00H
$SG4294947540 DB 'pixel_var', 00H
	ORG $+6
$SG4294947539 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294947538 DB 'dct_4x4', 00H
$SG4294947537 DB 'dct_8x8', 00H
$SG4294947536 DB 'dct_16x16', 00H
	ORG $+6
$SG4294947535 DB 'dct_32x32', 00H
	ORG $+6
$SG4294947534 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294947533 DB 'idct_4x4', 00H
	ORG $+7
$SG4294947532 DB 'idct_8x8', 00H
	ORG $+7
$SG4294947531 DB 'idct_16x16', 00H
	ORG $+5
$SG4294947530 DB 'idct_32x32', 00H
	ORG $+5
$SG4294947529 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294947528 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294947527 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294947526 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294947525 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294947524 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294947523 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294947522 DB 'sample_octpel_chroma_hi', 00H
$SG4294947521 DB 'get_extended_block', 00H
	ORG $+5
$SG4294947519 DB 'quantize_residual', 00H
	ORG $+6
$SG4294947518 DB 'dequant', 00H
$SG4294947517 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294947516 DB 'fast_coeff_cost', 00H
$SG4294947515 DB 'angular_pred', 00H
	ORG $+3
$SG4294947514 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294947513 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294947512 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294947511 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294947510 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294947509 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294947508 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategy_register_intra_generic
pdata	SEGMENT
$pdata$kvz_intra_pred_filtered_dc_generic DD imagerel kvz_intra_pred_filtered_dc_generic
	DD	imagerel kvz_intra_pred_filtered_dc_generic+327
	DD	imagerel $unwind$kvz_intra_pred_filtered_dc_generic
$pdata$kvz_intra_pred_planar_generic DD imagerel kvz_intra_pred_planar_generic
	DD	imagerel kvz_intra_pred_planar_generic+375
	DD	imagerel $unwind$kvz_intra_pred_planar_generic
$pdata$1$kvz_intra_pred_planar_generic DD imagerel kvz_intra_pred_planar_generic+375
	DD	imagerel kvz_intra_pred_planar_generic+567
	DD	imagerel $chain$1$kvz_intra_pred_planar_generic
$pdata$2$kvz_intra_pred_planar_generic DD imagerel kvz_intra_pred_planar_generic+567
	DD	imagerel kvz_intra_pred_planar_generic+585
	DD	imagerel $chain$2$kvz_intra_pred_planar_generic
$pdata$kvz_angular_pred_generic DD imagerel kvz_angular_pred_generic
	DD	imagerel kvz_angular_pred_generic+20
	DD	imagerel $unwind$kvz_angular_pred_generic
$pdata$1$kvz_angular_pred_generic DD imagerel kvz_angular_pred_generic+20
	DD	imagerel kvz_angular_pred_generic+756
	DD	imagerel $chain$1$kvz_angular_pred_generic
$pdata$2$kvz_angular_pred_generic DD imagerel kvz_angular_pred_generic+756
	DD	imagerel kvz_angular_pred_generic+879
	DD	imagerel $chain$2$kvz_angular_pred_generic
$pdata$kvz_strategy_register_intra_generic DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$kvz_strategy_register_intra_generic
xdata	SEGMENT
$unwind$kvz_intra_pred_filtered_dc_generic DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
$unwind$kvz_intra_pred_planar_generic DD 081601H
	DD	0170116H
	DD	0e00df00fH
	DD	0c009d00bH
	DD	030067007H
$chain$1$kvz_intra_pred_planar_generic DD 041521H
	DD	0166415H
	DD	0215408H
	DD	imagerel kvz_intra_pred_planar_generic
	DD	imagerel kvz_intra_pred_planar_generic+375
	DD	imagerel $unwind$kvz_intra_pred_planar_generic
$chain$2$kvz_intra_pred_planar_generic DD 021H
	DD	imagerel kvz_intra_pred_planar_generic
	DD	imagerel kvz_intra_pred_planar_generic+375
	DD	imagerel $unwind$kvz_intra_pred_planar_generic
$unwind$kvz_angular_pred_generic DD 071101H
	DD	0f00de211H
	DD	0d009e00bH
	DD	060067007H
	DD	03005H
$chain$1$kvz_angular_pred_generic DD 047421H
	DD	0185474H
	DD	0ec405H
	DD	imagerel kvz_angular_pred_generic
	DD	imagerel kvz_angular_pred_generic+20
	DD	imagerel $unwind$kvz_angular_pred_generic
$chain$2$kvz_angular_pred_generic DD 020021H
	DD	0185400H
	DD	imagerel kvz_angular_pred_generic
	DD	imagerel kvz_angular_pred_generic+20
	DD	imagerel $unwind$kvz_angular_pred_generic
$unwind$kvz_strategy_register_intra_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
$SG4294947494 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294947495 DB 'generic', 00H
$SG4294947496 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294947497 DB 'generic', 00H
$SG4294947498 DB 'angular_pred', 00H
	ORG $+3
$SG4294947499 DB 'generic', 00H
	ORG $+1
$SG4294947500 DB 'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '5', 00H, 00H, 00H
	ORG $+3
$SG4294947501 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294947502 DB 'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '5', 00H, 00H, 00H
	ORG $+6
$SG4294947503 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294947504 DB 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a', 00H, '_', 00H
	DB	'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a', 00H, '_', 00H, 'm'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '3', 00H, '4', 00H, 00H, 00H
	ORG $+3
$SG4294947505 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294947506 DB 'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'l', 00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '5', 00H, 00H, 00H
	ORG $+3
$SG4294947507 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, '-', 00H, 'g', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_intra_generic PROC

; 245  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 246  :   bool success = true;
; 247  : 
; 248  :   success &= kvz_strategyselector_register(opaque, "angular_pred", "generic", 0, &kvz_angular_pred_generic);

	lea	rax, OFFSET FLAT:kvz_angular_pred_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294947499
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947498
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 249  :   success &= kvz_strategyselector_register(opaque, "intra_pred_planar", "generic", 0, &kvz_intra_pred_planar_generic);

	lea	r8, OFFSET FLAT:$SG4294947497
	lea	rax, OFFSET FLAT:kvz_intra_pred_planar_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947496
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 250  :   success &= kvz_strategyselector_register(opaque, "intra_pred_filtered_dc", "generic", 0, &kvz_intra_pred_filtered_dc_generic);

	lea	r8, OFFSET FLAT:$SG4294947495
	lea	rax, OFFSET FLAT:kvz_intra_pred_filtered_dc_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947494
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register

; 251  : 
; 252  :   return success;
; 253  : }

	mov	rbx, QWORD PTR [rsp+64]
	and	eax, edi
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_intra_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
_TEXT	SEGMENT
$T1 = 32
delta_pos$1$ = 36
tv1537 = 40
tmp_ref$ = 48
y$1$ = 176
log2_width$ = 176
intra_mode$ = 184
in_ref_above$ = 192
in_ref_left$ = 200
dst$ = 208
kvz_angular_pred_generic PROC

; 55   : {

	mov	BYTE PTR [rsp+16], dl
	push	rbx
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 120				; 00000078H
	movzx	esi, cl
	mov	QWORD PTR [rsp+112], r12
	mov	rbx, r9
	mov	rdi, r8
	movzx	r13d, dl

; 56   :   assert(log2_width >= 2 && log2_width <= 5);

	lea	eax, DWORD PTR [rsi-2]
	cmp	al, 3
	jbe	SHORT $LN38@kvz_angula
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG4294947507
	lea	rcx, OFFSET FLAT:$SG4294947506
	call	QWORD PTR __imp__wassert
$LN38@kvz_angula:

; 57   :   assert(intra_mode >= 2 && intra_mode <= 34);

	lea	eax, DWORD PTR [r13-2]
	cmp	al, 32					; 00000020H
	jbe	SHORT $LN40@kvz_angula
	mov	r8d, 57					; 00000039H
	lea	rdx, OFFSET FLAT:$SG4294947505
	lea	rcx, OFFSET FLAT:$SG4294947504
	call	QWORD PTR __imp__wassert
$LN40@kvz_angula:

; 58   : 
; 59   :   static const int8_t modedisp2sampledisp[9] = { 0, 2, 5, 9, 13, 17, 21, 26, 32 };
; 60   :   static const int16_t modedisp2invsampledisp[9] = { 0, 4096, 1638, 910, 630, 482, 390, 315, 256 }; // (256 * 32) / sampledisp
; 61   : 
; 62   :                                                     // Temporary buffer for modes 11-25.
; 63   :                                                     // It only needs to be big enough to hold indices from -width to width-1.
; 64   :   kvz_pixel tmp_ref[2 * 32];
; 65   :   const int_fast8_t width = 1 << log2_width;
; 66   : 
; 67   :   // Whether to swap references to always project on the left reference row.
; 68   :   const bool vertical_mode = intra_mode >= 18;
; 69   :   // Modes distance to horizontal or vertical mode.
; 70   :   const int_fast8_t mode_disp = vertical_mode ? intra_mode - 26 : 10 - intra_mode;
; 71   :   // Sample displacement per column in fractions of 32.
; 72   :   const int_fast8_t sample_disp = (mode_disp < 0 ? -1 : 1) * modedisp2sampledisp[abs(mode_disp)];
; 73   : 
; 74   :   // Pointer for the reference we are interpolating from.
; 75   :   const kvz_pixel *ref_main;
; 76   :   // Pointer for the other reference.
; 77   :   const kvz_pixel *ref_side;
; 78   : 
; 79   :   // Set ref_main and ref_side such that, when indexed with 0, they point to
; 80   :   // index 0 in block coordinates.
; 81   :   if (sample_disp < 0) {

	mov	r11, QWORD PTR dst$[rsp]
	lea	eax, DWORD PTR [r13-26]
	movzx	r9d, al
	movzx	ecx, sil
	mov	r8d, 1
	mov	QWORD PTR [rsp+192], rbp
	shl	r8b, cl
	mov	ecx, 10
	sub	cl, r13b
	movsx	esi, r8b
	movzx	eax, cl
	cmp	r13b, 18
	cmovl	r9d, eax
	xor	r15d, r15d
	movsx	eax, r9b
	cdq
	sar	r9b, 7
	xor	eax, edx
	and	r9b, -2
	sub	eax, edx
	inc	r9b
	movsxd	r14, eax
	lea	rax, OFFSET FLAT:__ImageBase
	movsx	r12d, r9b
	movsx	eax, BYTE PTR ?modedisp2sampledisp@?1??kvz_angular_pred_generic@@9@9[r14+rax]
	imul	r12d, eax
	test	r12b, r12b
	jns	$LN29@kvz_angula

; 82   :     // Negative sample_disp means, we need to use both references.
; 83   : 
; 84   :     ref_side = (vertical_mode ? in_ref_left : in_ref_above) + 1;

	cmp	r13b, 18
	mov	rbp, rdi

; 85   :     ref_main = (vertical_mode ? in_ref_above : in_ref_left) + 1;
; 86   : 
; 87   :     // Move the reference pixels to start from the middle to the later half of
; 88   :     // the tmp_ref, so there is room for negative indices.
; 89   :     for (int_fast8_t x = -1; x < width; ++x) {

	mov	dl, -1
	cmovge	rbp, rbx
	cmovge	rbx, rdi
	cmp	r8b, dl
	jle	SHORT $LN70@kvz_angula
	npad	13
$LL4@kvz_angula:

; 90   :       tmp_ref[x + width] = ref_main[x];

	movsx	eax, dl
	lea	rbx, QWORD PTR [rbx+1]
	add	eax, esi
	inc	dl
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rbx-1]
	mov	BYTE PTR tmp_ref$[rsp+rcx], al
	cmp	dl, r8b
	jl	SHORT $LL4@kvz_angula
$LN70@kvz_angula:

; 91   :     }
; 92   :     // Get a pointer to block index 0 in tmp_ref.
; 93   :     ref_main = &tmp_ref[width];

	movsx	rax, r8b
	lea	rbx, QWORD PTR tmp_ref$[rsp]
	add	rbx, rax

; 94   : 
; 95   :     // Extend the side reference to the negative indices of main reference.
; 96   :     int_fast32_t col_sample_disp = 128; // rounding for the ">> 8"
; 97   :     int_fast16_t inv_abs_sample_disp = modedisp2invsampledisp[abs(mode_disp)];
; 98   :     int_fast8_t most_negative_index = (width * sample_disp) >> 5;

	movsx	edi, r12b
	imul	edi, esi
	lea	rax, OFFSET FLAT:__ImageBase
	movsx	r14d, WORD PTR ?modedisp2invsampledisp@?1??kvz_angular_pred_generic@@9@9[rax+r14*2]

; 99   :     for (int_fast8_t x = -2; x >= most_negative_index; --x) {

	mov	r9b, -2
	mov	r13d, esi
	mov	DWORD PTR $T1[rsp], esi
	mov	r10d, 128				; 00000080H
	sar	edi, 5
	cmp	dil, r9b
	jg	SHORT $LN81@kvz_angula
	npad	10
$LL7@kvz_angula:

; 100  :       col_sample_disp += inv_abs_sample_disp;

	add	r10d, r14d

; 101  :       int_fast8_t side_index = col_sample_disp >> 8;

	mov	eax, r10d
	sar	eax, 8

; 102  :       tmp_ref[x + width] = ref_side[side_index - 1];

	movsx	rdx, al
	movsx	eax, r9b
	dec	r9b
	add	eax, esi
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rdx+rbp]
	mov	BYTE PTR tmp_ref$[rsp+rcx], al
	cmp	r9b, dil
	jge	SHORT $LL7@kvz_angula

; 103  :     }
; 104  :   }

	movsx	r13d, r8b
	mov	DWORD PTR $T1[rsp], r13d
	jmp	SHORT $LN81@kvz_angula
$LN29@kvz_angula:

; 105  :   else {
; 106  :     // sample_disp >= 0 means we don't need to refer to negative indices,
; 107  :     // which means we can just use the references as is.
; 108  :     ref_main = (vertical_mode ? in_ref_above : in_ref_left) + 1;

	cmp	r13b, 18

; 109  :     ref_side = (vertical_mode ? in_ref_left : in_ref_above) + 1;
; 110  :   }
; 111  : 
; 112  :   if (sample_disp != 0) {

	mov	DWORD PTR $T1[rsp], esi
	mov	r13d, esi
	cmovge	rbx, rdi
	inc	rbx
	test	r12b, r12b
	je	$LN31@kvz_angula
$LN81@kvz_angula:

; 113  :     // The mode is not horizontal or vertical, we have to do interpolation.
; 114  : 
; 115  :     int_fast16_t delta_pos = 0;
; 116  :     for (int_fast8_t y = 0; y < width; ++y) {

	xor	cl, cl
	mov	DWORD PTR delta_pos$1$[rsp], r15d
	mov	BYTE PTR y$1$[rsp], cl
	test	r8b, r8b
	jle	$LN18@kvz_angula
	movsx	eax, r12b
	mov	DWORD PTR tv1537[rsp], eax
	movsx	r13d, r8b
	npad	1
$LL10@kvz_angula:

; 117  :       delta_pos += sample_disp;

	add	r15d, eax

; 118  :       int_fast8_t delta_int = delta_pos >> 5;
; 119  :       int_fast8_t delta_fract = delta_pos & (32 - 1);

	movzx	esi, cl
	mov	eax, r15d
	sar	eax, 5
	movsx	r14d, al
	test	r15b, 31

; 120  : 
; 121  :       if (delta_fract) {

	je	SHORT $LN33@kvz_angula

; 122  :         // Do linear filtering
; 123  :         for (int_fast8_t x = 0; x < width; ++x) {

	mov	ebp, r15d
	mov	r12d, 32				; 00000020H
	and	ebp, 31
	xor	dil, dil
	sub	r12d, ebp
	imul	esi, r13d
	npad	4
$LL13@kvz_angula:

; 124  :           kvz_pixel ref1 = ref_main[x + delta_int];

	movzx	r10d, dil
	inc	dil
	lea	eax, DWORD PTR [r14+r10]
	movsxd	rcx, eax

; 125  :           kvz_pixel ref2 = ref_main[x + delta_int + 1];
; 126  :           dst[y * width + x] = ((32 - delta_fract) * ref1 + delta_fract * ref2 + 16) >> 5;

	lea	eax, DWORD PTR [rsi+r10]
	movzx	r9d, BYTE PTR [rcx+rbx]
	movzx	edx, BYTE PTR [rcx+rbx+1]
	imul	r9d, r12d
	imul	edx, ebp
	movsxd	rcx, eax
	add	r9d, 16
	add	r9d, edx
	sar	r9d, 5
	mov	BYTE PTR [rcx+r11], r9b
	cmp	dil, r8b
	jl	SHORT $LL13@kvz_angula

; 127  :         }
; 128  :       }

	jmp	SHORT $LN8@kvz_angula
$LN33@kvz_angula:

; 129  :       else {
; 130  :         // Just copy the integer samples
; 131  :         for (int_fast8_t x = 0; x < width; x++) {

	xor	r9b, r9b
	imul	esi, r13d
	npad	13
$LL16@kvz_angula:

; 132  :           dst[y * width + x] = ref_main[x + delta_int];

	movsx	ecx, r9b
	inc	r9b
	lea	eax, DWORD PTR [rcx+r14]
	movsxd	rdx, eax
	lea	eax, DWORD PTR [rcx+rsi]
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [rdx+rbx]
	mov	BYTE PTR [rcx+r11], al
	cmp	r9b, r8b
	jl	SHORT $LL16@kvz_angula
$LN8@kvz_angula:

; 113  :     // The mode is not horizontal or vertical, we have to do interpolation.
; 114  : 
; 115  :     int_fast16_t delta_pos = 0;
; 116  :     for (int_fast8_t y = 0; y < width; ++y) {

	movzx	ecx, BYTE PTR y$1$[rsp]
	mov	eax, DWORD PTR tv1537[rsp]
	inc	cl
	mov	BYTE PTR y$1$[rsp], cl
	cmp	cl, r8b
	jl	$LL10@kvz_angula

; 133  :         }
; 134  :       }
; 135  :     }
; 136  :   }

	mov	r13d, DWORD PTR $T1[rsp]
	xor	r15d, r15d
	jmp	SHORT $LN18@kvz_angula
$LN31@kvz_angula:

; 137  :   else {
; 138  :     // Mode is horizontal or vertical, just copy the pixels.
; 139  : 
; 140  :     for (int_fast8_t y = 0; y < width; ++y) {

	xor	dil, dil
	test	r8b, r8b
	jle	SHORT $LN18@kvz_angula
	npad	15
$LL19@kvz_angula:

; 141  :       for (int_fast8_t x = 0; x < width; ++x) {

	xor	dl, dl
	movzx	r10d, dil
	imul	r10d, esi
	mov	r9, rbx
	npad	3
$LL22@kvz_angula:

; 142  :         dst[y * width + x] = ref_main[x];

	movsx	eax, dl
	lea	r9, QWORD PTR [r9+1]
	add	eax, r10d
	inc	dl
	movsxd	rcx, eax
	movzx	eax, BYTE PTR [r9-1]
	mov	BYTE PTR [rcx+r11], al
	cmp	dl, r8b
	jl	SHORT $LL22@kvz_angula

; 137  :   else {
; 138  :     // Mode is horizontal or vertical, just copy the pixels.
; 139  : 
; 140  :     for (int_fast8_t y = 0; y < width; ++y) {

	inc	dil
	cmp	dil, r8b
	jl	SHORT $LL19@kvz_angula
$LN18@kvz_angula:

; 143  :       }
; 144  :     }
; 145  :   }
; 146  : 
; 147  :   // Flip the block if this is was a horizontal mode.
; 148  :   if (!vertical_mode) {

	cmp	BYTE PTR intra_mode$[rsp], 18
	mov	r12, QWORD PTR [rsp+112]
	jge	SHORT $LN24@kvz_angula

; 149  :     for (int_fast8_t y = 0; y < width - 1; ++y) {

	lea	r14d, DWORD PTR [r13-1]
	test	r14d, r14d
	jle	SHORT $LN24@kvz_angula
	mov	sil, 1
$LL25@kvz_angula:

; 150  :       for (int_fast8_t x = y + 1; x < width; ++x) {

	movsx	ebp, sil
	movzx	ebx, sil
	cmp	sil, r8b
	jge	SHORT $LN23@kvz_angula
	mov	edi, r15d
	imul	edi, r13d
	npad	12
$LL28@kvz_angula:

; 151  :         SWAP(dst[y * width + x], dst[x * width + y], kvz_pixel);

	movsx	r10d, bl
	inc	bl
	lea	eax, DWORD PTR [r10+rdi]
	imul	r10d, r13d
	movsxd	rdx, eax
	movzx	r9d, BYTE PTR [rdx+r11]
	add	r10d, r15d
	movsxd	rcx, r10d
	movzx	eax, BYTE PTR [rcx+r11]
	mov	BYTE PTR [rdx+r11], al
	mov	BYTE PTR [rcx+r11], r9b
	cmp	bl, r8b
	jl	SHORT $LL28@kvz_angula
$LN23@kvz_angula:

; 149  :     for (int_fast8_t y = 0; y < width - 1; ++y) {

	inc	sil
	mov	r15d, ebp
	cmp	ebp, r14d
	jl	SHORT $LL25@kvz_angula
$LN24@kvz_angula:
	mov	rbp, QWORD PTR [rsp+192]

; 152  :       }
; 153  :     }
; 154  :   }
; 155  : }

	add	rsp, 120				; 00000078H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
kvz_angular_pred_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
_TEXT	SEGMENT
tv1218 = 32
top$ = 48
top_right$1$ = 240
log2_width$ = 240
ref_top$ = 248
bottom_left$1$ = 256
ref_left$ = 256
dst$ = 264
kvz_intra_pred_planar_generic PROC

; 170  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 184				; 000000b8H
	movsx	ebx, cl
	mov	r14, r9
	mov	rdi, r8
	mov	r9, rdx

; 171  :   assert(log2_width >= 2 && log2_width <= 5);

	lea	eax, DWORD PTR [rbx-2]
	cmp	al, 3
	jbe	SHORT $LN13@kvz_intra_
	mov	r8d, 171				; 000000abH
	lea	rdx, OFFSET FLAT:$SG4294947503
	lea	rcx, OFFSET FLAT:$SG4294947502
	call	QWORD PTR __imp__wassert
	mov	r9, QWORD PTR ref_top$[rsp]
$LN13@kvz_intra_:

; 172  : 
; 173  :   const int_fast8_t width = 1 << log2_width;

	mov	ecx, ebx
	mov	eax, 1
	shl	al, cl
	xor	edx, edx

; 174  :   const kvz_pixel top_right = ref_top[width + 1];

	movsx	r12, al
	mov	r15d, ebx
	movzx	r10d, BYTE PTR [r9+r12+1]

; 175  :   const kvz_pixel bottom_left = ref_left[width + 1];

	movzx	r11d, BYTE PTR [rdi+r12+1]
	mov	BYTE PTR top_right$1$[rsp], r10b
	mov	BYTE PTR bottom_left$1$[rsp], r11b

; 176  : 
; 177  : #if 0
; 178  :   // Unoptimized version for reference.
; 179  :   for (int y = 0; y < width; ++y) {
; 180  :     for (int x = 0; x < width; ++x) {
; 181  :       int_fast16_t hor = (width - 1 - x) * ref_left[y + 1] + (x + 1) * top_right;
; 182  :       int_fast16_t ver = (width - 1 - y) * ref_top[x + 1] + (y + 1) * bottom_left;
; 183  :       dst[y * width + x] = (ver + hor + width) >> (log2_width + 1);
; 184  :     }
; 185  :   }
; 186  : #else
; 187  :   int_fast16_t top[32];
; 188  :   for (int i = 0; i < width; ++i) {

	test	al, al
	jle	$LN21@kvz_intra_
	cmp	r12d, 16
	jb	$LN21@kvz_intra_

; 172  : 
; 173  :   const int_fast8_t width = 1 << log2_width;

	mov	ecx, r12d
	movd	xmm3, ebx
	and	ecx, -2147483633			; ffffffff8000000fH
	jge	SHORT $LN34@kvz_intra_
	dec	ecx
	or	ecx, -16
	inc	ecx
$LN34@kvz_intra_:
	mov	eax, r12d
	lea	r8, QWORD PTR [r9+5]
	sub	eax, ecx
	lea	r10, QWORD PTR top$[rsp+32]
	mov	rcx, -5

; 176  : 
; 177  : #if 0
; 178  :   // Unoptimized version for reference.
; 179  :   for (int y = 0; y < width; ++y) {
; 180  :     for (int x = 0; x < width; ++x) {
; 181  :       int_fast16_t hor = (width - 1 - x) * ref_left[y + 1] + (x + 1) * top_right;
; 182  :       int_fast16_t ver = (width - 1 - y) * ref_top[x + 1] + (y + 1) * bottom_left;
; 183  :       dst[y * width + x] = (ver + hor + width) >> (log2_width + 1);
; 184  :     }
; 185  :   }
; 186  : #else
; 187  :   int_fast16_t top[32];
; 188  :   for (int i = 0; i < width; ++i) {

	movsxd	rbx, eax
	sub	rcx, r9
	npad	4
$LL4@kvz_intra_:

; 189  :     top[i] = ref_top[i + 1] << log2_width;

	movd	xmm1, DWORD PTR [r8-4]
	xorps	xmm0, xmm0
	movd	xmm2, DWORD PTR [r8]
	lea	r8, QWORD PTR [r8+16]
	punpcklbw xmm1, xmm0
	lea	rax, QWORD PTR [rcx+r8]
	punpcklbw xmm2, xmm0
	lea	r10, QWORD PTR [r10+64]
	punpcklwd xmm1, xmm0
	add	edx, 16
	punpcklwd xmm2, xmm0
	pslld	xmm1, xmm3
	pslld	xmm2, xmm3
	movdqu	XMMWORD PTR [r10-96], xmm1
	movd	xmm1, DWORD PTR [r8-12]
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	movdqu	XMMWORD PTR [r10-80], xmm2
	movd	xmm2, DWORD PTR [r8-8]
	punpcklbw xmm2, xmm0
	punpcklwd xmm2, xmm0
	pslld	xmm1, xmm3
	pslld	xmm2, xmm3
	movdqu	XMMWORD PTR [r10-64], xmm1
	movdqu	XMMWORD PTR [r10-48], xmm2
	cmp	rax, rbx
	jl	SHORT $LL4@kvz_intra_
	movzx	r10d, BYTE PTR top_right$1$[rsp]
$LN21@kvz_intra_:

; 172  : 
; 173  :   const int_fast8_t width = 1 << log2_width;

	movsxd	rdx, edx

; 176  : 
; 177  : #if 0
; 178  :   // Unoptimized version for reference.
; 179  :   for (int y = 0; y < width; ++y) {
; 180  :     for (int x = 0; x < width; ++x) {
; 181  :       int_fast16_t hor = (width - 1 - x) * ref_left[y + 1] + (x + 1) * top_right;
; 182  :       int_fast16_t ver = (width - 1 - y) * ref_top[x + 1] + (y + 1) * bottom_left;
; 183  :       dst[y * width + x] = (ver + hor + width) >> (log2_width + 1);
; 184  :     }
; 185  :   }
; 186  : #else
; 187  :   int_fast16_t top[32];
; 188  :   for (int i = 0; i < width; ++i) {

	cmp	rdx, r12
	jge	SHORT $LN3@kvz_intra_
	npad	9
$LL20@kvz_intra_:

; 189  :     top[i] = ref_top[i + 1] << log2_width;

	movzx	eax, BYTE PTR [rdx+r9+1]
	mov	ecx, r15d
	shl	eax, cl
	mov	DWORD PTR top$[rsp+rdx*4], eax
	inc	rdx
	cmp	rdx, r12
	jl	SHORT $LL20@kvz_intra_
$LN3@kvz_intra_:

; 190  :   }
; 191  : 
; 192  :   for (int y = 0; y < width; ++y) {

	test	r12d, r12d
	jle	$LN6@kvz_intra_

; 193  :     int_fast16_t hor = (ref_left[y + 1] << log2_width) + width;

	mov	edx, r12d
	lea	rbx, QWORD PTR [rdi+1]

; 197  :       dst[y * width + x] = (hor + top[x]) >> (log2_width + 1);

	mov	QWORD PTR [rsp+264], rbp
	mov	QWORD PTR tv1218[rsp], rdx
	mov	QWORD PTR [rsp+176], rsi
	npad	4
$LL7@kvz_intra_:

; 193  :     int_fast16_t hor = (ref_left[y + 1] << log2_width) + width;

	movzx	r8d, BYTE PTR [rbx]
	lea	rax, QWORD PTR top$[rsp]
	mov	ecx, r15d
	movzx	edi, r10b
	shl	r8d, cl
	mov	r10, r14
	add	r8d, r12d
	movzx	esi, r11b
	inc	r9
	mov	r11, rdx
	npad	13
$LL10@kvz_intra_:

; 194  :     for (int x = 0; x < width; ++x) {
; 195  :       hor += top_right - ref_left[y + 1];

	movzx	ecx, BYTE PTR [rbx]
	lea	r10, QWORD PTR [r10+1]
	mov	edx, edi
	lea	r9, QWORD PTR [r9+1]
	sub	edx, ecx
	lea	rax, QWORD PTR [rax+4]

; 196  :       top[x] += bottom_left - ref_top[x + 1];

	movzx	ecx, BYTE PTR [r9-1]
	add	r8d, edx
	mov	edx, esi
	sub	edx, ecx

; 197  :       dst[y * width + x] = (hor + top[x]) >> (log2_width + 1);

	lea	ecx, DWORD PTR [r15+1]
	add	DWORD PTR [rax-4], edx
	mov	edx, DWORD PTR [rax-4]
	add	edx, r8d
	sar	edx, cl
	mov	BYTE PTR [r10-1], dl
	sub	r11, 1
	jne	SHORT $LL10@kvz_intra_

; 190  :   }
; 191  : 
; 192  :   for (int y = 0; y < width; ++y) {

	mov	r9, QWORD PTR ref_top$[rsp]
	add	r14, r12
	movzx	r10d, BYTE PTR top_right$1$[rsp]
	inc	rbx
	sub	QWORD PTR tv1218[rsp], 1
	movzx	r11d, BYTE PTR bottom_left$1$[rsp]
	mov	edx, r12d
	jne	$LL7@kvz_intra_
	mov	rsi, QWORD PTR [rsp+176]
	mov	rbp, QWORD PTR [rsp+264]
$LN6@kvz_intra_:

; 198  :     }
; 199  :   }
; 200  : #endif
; 201  : }

	add	rsp, 184				; 000000b8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
kvz_intra_pred_planar_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
_TEXT	SEGMENT
log2_width$ = 48
ref_top$ = 56
ref_left$ = 64
out_block$ = 72
kvz_intra_pred_filtered_dc_generic PROC

; 215  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	movsx	edi, cl
	mov	rbx, r9
	mov	rbp, r8
	mov	rsi, rdx

; 216  :   assert(log2_width >= 2 && log2_width <= 5);

	lea	eax, DWORD PTR [rdi-2]
	cmp	al, 3
	jbe	SHORT $LN16@kvz_intra_
	mov	r8d, 216				; 000000d8H
	lea	rdx, OFFSET FLAT:$SG4294947501
	lea	rcx, OFFSET FLAT:$SG4294947500
	call	QWORD PTR __imp__wassert
$LN16@kvz_intra_:

; 217  : 
; 218  :   const int_fast8_t width = 1 << log2_width;

	mov	ecx, edi
	mov	r8d, 1
	shl	r8b, cl

; 219  : 
; 220  :   int_fast16_t sum = 0;

	xor	r10d, r10d

; 221  :   for (int_fast8_t i = 0; i < width; ++i) {

	test	r8b, r8b
	jle	SHORT $LN3@kvz_intra_

; 217  : 
; 218  :   const int_fast8_t width = 1 << log2_width;

	mov	r11, rsi
	movzx	r9d, r8b
	sub	r11, rbp
	lea	rdx, QWORD PTR [rbp+1]
	npad	8
$LL4@kvz_intra_:

; 222  :     sum += ref_top[i + 1];
; 223  :     sum += ref_left[i + 1];

	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, BYTE PTR [r11+rdx]
	lea	rdx, QWORD PTR [rdx+1]
	add	r10d, eax
	add	r10d, ecx
	sub	r9, 1
	jne	SHORT $LL4@kvz_intra_
$LN3@kvz_intra_:

; 224  :   }
; 225  : 
; 226  :   const kvz_pixel dc_val = (sum + width) >> (log2_width + 1);
; 227  : 
; 228  :   // Filter top-left with ([1 2 1] / 4)
; 229  :   out_block[0] = (ref_left[1] + 2 * dc_val + ref_top[1] + 2) / 4;

	movzx	eax, BYTE PTR [rbp+1]
	lea	ecx, DWORD PTR [rdi+1]
	movsx	r14d, r8b
	lea	r11d, DWORD PTR [r14+r10]
	sar	r11d, cl
	movzx	ecx, BYTE PTR [rsi+1]
	add	ecx, 2
	movzx	r10d, r11b
	lea	ecx, DWORD PTR [rcx+r10*2]
	add	ecx, eax
	shr	ecx, 2
	mov	BYTE PTR [rbx], cl

; 230  : 
; 231  :   // Filter rest of the boundary with ([1 3] / 4)
; 232  :   for (int_fast8_t x = 1; x < width; ++x) {

	cmp	r8b, 1
	jle	SHORT $LN9@kvz_intra_

; 233  :     out_block[x] = (ref_top[x + 1] + 3 * dc_val + 2) / 4;

	lea	edi, DWORD PTR [r10+1]
	sub	rsi, rbx
	lea	eax, DWORD PTR [r8-1]
	lea	edi, DWORD PTR [r10+rdi*2]
	movzx	r9d, al
	lea	rdx, QWORD PTR [rbx+1]
	npad	3
$LL7@kvz_intra_:
	movzx	ecx, BYTE PTR [rsi+rdx+1]
	lea	rdx, QWORD PTR [rdx+1]
	add	ecx, edi
	shr	ecx, 2
	mov	BYTE PTR [rdx-1], cl
	sub	r9, 1
	jne	SHORT $LL7@kvz_intra_
	lea	edi, DWORD PTR [r10+r10*2]
	mov	r10b, 1
	npad	2
$LL10@kvz_intra_:

; 236  :     out_block[y * width] = (ref_left[y + 1] + 3 * dc_val + 2) / 4;

	movzx	eax, r10b
	lea	edx, DWORD PTR [rdi+2]
	mov	r9d, eax
	imul	r9d, r14d
	movzx	ecx, BYTE PTR [rax+rbp+1]
	add	edx, ecx
	shr	edx, 2
	movsxd	rax, r9d
	mov	BYTE PTR [rax+rbx], dl

; 237  :     for (int_fast8_t x = 1; x < width; ++x) {

	mov	al, 1
$LL13@kvz_intra_:

; 238  :       out_block[y * width + x] = dc_val;

	movsx	ecx, al
	inc	al
	add	ecx, r9d
	movsxd	rcx, ecx
	mov	BYTE PTR [rcx+rbx], r11b
	cmp	al, r8b
	jl	SHORT $LL13@kvz_intra_

; 234  :   }
; 235  :   for (int_fast8_t y = 1; y < width; ++y) {

	inc	r10b
	cmp	r10b, r8b
	jl	SHORT $LL10@kvz_intra_
$LN9@kvz_intra_:

; 239  :     }
; 240  :   }
; 241  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
kvz_intra_pred_filtered_dc_generic ENDP
_TEXT	ENDS
END
