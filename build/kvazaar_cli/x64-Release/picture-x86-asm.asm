; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	kvz_sad_16x16_stride_avx:PROC
EXTRN	kvz_satd_16x16_avx:PROC
EXTRN	kvz_sad_16x16_avx:PROC
EXTRN	kvz_sad_32x32_stride_avx:PROC
EXTRN	kvz_sad_8x8_avx:PROC
EXTRN	kvz_sad_8x8_stride_avx:PROC
EXTRN	kvz_satd_8x8_avx:PROC
EXTRN	kvz_sad_4x4_avx:PROC
EXTRN	kvz_sad_64x64_stride_avx:PROC
EXTRN	kvz_satd_32x32_avx:PROC
EXTRN	kvz_satd_64x64_avx:PROC
EXTRN	kvz_satd_4x4_avx:PROC
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294951686
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294951685
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294951684
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294951683
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294951682
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294951681
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294951680
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294951679
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294951678
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294951677
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294951676
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294951675
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294951674
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294951673
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294951672
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294951671
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294951670
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294951669
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294951668
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294951667
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294951666
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294951665
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294951664
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294951663
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294951662
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294951661
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294951660
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294951659
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294951658
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294951657
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294951656
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294951655
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294951654
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294951653
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294951652
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294951651
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294951650
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294951649
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294951648
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294951647
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294951646
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294951645
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294951644
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294951643
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294951642
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294951641
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294951640
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294951639
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294951638
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294951637
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294951636
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294951635
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294951634
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294951633
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294951632
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294951631
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294951630
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294951629
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294951628
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294951627
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294951626
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294951625
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294951624
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294951636 DB 'quant', 00H
	ORG $+7
$SG4294951686 DB 'array_checksum', 00H
	ORG $+1
$SG4294951685 DB 'array_md5', 00H
	ORG $+6
$SG4294951684 DB 'reg_sad', 00H
$SG4294951683 DB 'sad_4x4', 00H
$SG4294951682 DB 'sad_8x8', 00H
$SG4294951681 DB 'sad_16x16', 00H
	ORG $+6
$SG4294951680 DB 'sad_32x32', 00H
	ORG $+6
$SG4294951679 DB 'sad_64x64', 00H
	ORG $+6
$SG4294951678 DB 'satd_4x4', 00H
	ORG $+7
$SG4294951677 DB 'satd_8x8', 00H
	ORG $+7
$SG4294951676 DB 'satd_16x16', 00H
	ORG $+5
$SG4294951675 DB 'satd_32x32', 00H
	ORG $+5
$SG4294951674 DB 'satd_64x64', 00H
	ORG $+5
$SG4294951673 DB 'satd_any_size', 00H
	ORG $+2
$SG4294951672 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294951671 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294951670 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294951669 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294951668 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294951667 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294951666 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294951665 DB 'satd_16x16_dual', 00H
$SG4294951664 DB 'satd_32x32_dual', 00H
$SG4294951663 DB 'satd_64x64_dual', 00H
$SG4294951662 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294951661 DB 'pixels_calc_ssd', 00H
$SG4294951660 DB 'bipred_average', 00H
	ORG $+1
$SG4294951659 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294951658 DB 'ver_sad', 00H
$SG4294951657 DB 'hor_sad', 00H
$SG4294951656 DB 'pixel_var', 00H
	ORG $+6
$SG4294951655 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294951654 DB 'dct_4x4', 00H
$SG4294951653 DB 'dct_8x8', 00H
$SG4294951652 DB 'dct_16x16', 00H
	ORG $+6
$SG4294951651 DB 'dct_32x32', 00H
	ORG $+6
$SG4294951650 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294951649 DB 'idct_4x4', 00H
	ORG $+7
$SG4294951648 DB 'idct_8x8', 00H
	ORG $+7
$SG4294951647 DB 'idct_16x16', 00H
	ORG $+5
$SG4294951646 DB 'idct_32x32', 00H
	ORG $+5
$SG4294951645 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294951644 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294951643 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294951642 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294951641 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294951640 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294951639 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294951638 DB 'sample_octpel_chroma_hi', 00H
$SG4294951637 DB 'get_extended_block', 00H
	ORG $+5
$SG4294951635 DB 'quantize_residual', 00H
	ORG $+6
$SG4294951634 DB 'dequant', 00H
$SG4294951633 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294951632 DB 'fast_coeff_cost', 00H
$SG4294951631 DB 'angular_pred', 00H
	ORG $+3
$SG4294951630 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294951629 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294951628 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294951627 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294951626 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294951625 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294951624 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategy_register_picture_x86_asm_avx
pdata	SEGMENT
$pdata$kvz_sad_other_avx DD imagerel kvz_sad_other_avx
	DD	imagerel kvz_sad_other_avx+43
	DD	imagerel $unwind$kvz_sad_other_avx
$pdata$2$kvz_sad_other_avx DD imagerel kvz_sad_other_avx+43
	DD	imagerel kvz_sad_other_avx+379
	DD	imagerel $chain$2$kvz_sad_other_avx
$pdata$3$kvz_sad_other_avx DD imagerel kvz_sad_other_avx+379
	DD	imagerel kvz_sad_other_avx+390
	DD	imagerel $chain$3$kvz_sad_other_avx
$pdata$kvz_sad_64x64_avx DD imagerel kvz_sad_64x64_avx
	DD	imagerel kvz_sad_64x64_avx+405
	DD	imagerel $unwind$kvz_sad_64x64_avx
$pdata$kvz_sad_32x32_avx DD imagerel kvz_sad_32x32_avx
	DD	imagerel kvz_sad_32x32_avx+107
	DD	imagerel $unwind$kvz_sad_32x32_avx
$pdata$kvz_strategy_register_picture_x86_asm_avx DD imagerel $LN5
	DD	imagerel $LN5+521
	DD	imagerel $unwind$kvz_strategy_register_picture_x86_asm_avx
xdata	SEGMENT
$unwind$kvz_sad_other_avx DD 050c01H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
$chain$2$kvz_sad_other_avx DD 061521H
	DD	07e415H
	DD	08f40dH
	DD	063405H
	DD	imagerel kvz_sad_other_avx
	DD	imagerel kvz_sad_other_avx+43
	DD	imagerel $unwind$kvz_sad_other_avx
$chain$3$kvz_sad_other_avx DD 021H
	DD	imagerel kvz_sad_other_avx
	DD	imagerel kvz_sad_other_avx+43
	DD	imagerel $unwind$kvz_sad_other_avx
$unwind$kvz_sad_64x64_avx DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
$unwind$kvz_sad_32x32_avx DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$kvz_strategy_register_picture_x86_asm_avx DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+2
$SG4294951602 DB 'satd_64x64', 00H
	ORG $+5
$SG4294951603 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951604 DB 'satd_32x32', 00H
	ORG $+5
$SG4294951605 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951606 DB 'satd_16x16', 00H
	ORG $+5
$SG4294951607 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951608 DB 'satd_8x8', 00H
	ORG $+7
$SG4294951609 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951610 DB 'satd_4x4', 00H
	ORG $+7
$SG4294951611 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951612 DB 'sad_64x64', 00H
	ORG $+6
$SG4294951613 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951614 DB 'sad_32x32', 00H
	ORG $+6
$SG4294951615 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951616 DB 'sad_16x16', 00H
	ORG $+6
$SG4294951617 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951618 DB 'sad_8x8', 00H
$SG4294951619 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951620 DB 'sad_4x4', 00H
$SG4294951621 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294951622 DB 'reg_sad', 00H
$SG4294951623 DB 'x86_asm_avx', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\x86_asm\picture-x86-asm.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_picture_x86_asm_avx PROC

; 110  : {

$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 111  :   bool success = true;
; 112  : #if defined(KVZ_COMPILE_ASM)
; 113  : #if KVZ_BIT_DEPTH == 8
; 114  :   if (bitdepth == 8){
; 115  :     success &= kvz_strategyselector_register(opaque, "reg_sad", "x86_asm_avx", 30, &reg_sad_x86_asm);

	lea	rax, OFFSET FLAT:reg_sad_x86_asm
	mov	r9d, 30
	lea	r8, OFFSET FLAT:$SG4294951623
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294951622
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 116  : 
; 117  :     success &= kvz_strategyselector_register(opaque, "sad_4x4", "x86_asm_avx", 30, &kvz_sad_4x4_avx);

	lea	r8, OFFSET FLAT:$SG4294951621
	lea	rax, OFFSET FLAT:kvz_sad_4x4_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951620
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, 1
	call	kvz_strategyselector_register
	mov	edi, eax

; 118  :     success &= kvz_strategyselector_register(opaque, "sad_8x8", "x86_asm_avx", 30, &kvz_sad_8x8_avx);

	lea	r8, OFFSET FLAT:$SG4294951619
	lea	rax, OFFSET FLAT:kvz_sad_8x8_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951618
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 119  :     success &= kvz_strategyselector_register(opaque, "sad_16x16", "x86_asm_avx", 30, &kvz_sad_16x16_avx);

	lea	r8, OFFSET FLAT:$SG4294951617
	lea	rax, OFFSET FLAT:kvz_sad_16x16_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951616
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 120  :     success &= kvz_strategyselector_register(opaque, "sad_32x32", "x86_asm_avx", 30, &kvz_sad_32x32_avx);

	lea	r8, OFFSET FLAT:$SG4294951615
	lea	rax, OFFSET FLAT:kvz_sad_32x32_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951614
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 121  :     success &= kvz_strategyselector_register(opaque, "sad_64x64", "x86_asm_avx", 30, &kvz_sad_64x64_avx);

	lea	r8, OFFSET FLAT:$SG4294951613
	lea	rax, OFFSET FLAT:kvz_sad_64x64_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951612
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 122  : 
; 123  :     success &= kvz_strategyselector_register(opaque, "satd_4x4", "x86_asm_avx", 30, &kvz_satd_4x4_avx);

	lea	r8, OFFSET FLAT:$SG4294951611
	lea	rax, OFFSET FLAT:kvz_satd_4x4_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951610
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 124  :     success &= kvz_strategyselector_register(opaque, "satd_8x8", "x86_asm_avx", 30, &kvz_satd_8x8_avx);

	lea	r8, OFFSET FLAT:$SG4294951609
	lea	rax, OFFSET FLAT:kvz_satd_8x8_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951608
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 125  :     success &= kvz_strategyselector_register(opaque, "satd_16x16", "x86_asm_avx", 30, &kvz_satd_16x16_avx);

	lea	r8, OFFSET FLAT:$SG4294951607
	lea	rax, OFFSET FLAT:kvz_satd_16x16_avx
	mov	r9d, 30
	lea	rdx, OFFSET FLAT:$SG4294951606
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax
	and	ebx, edi

; 126  :     success &= kvz_strategyselector_register(opaque, "satd_32x32", "x86_asm_avx", 30, &kvz_satd_32x32_avx);

	lea	rax, OFFSET FLAT:kvz_satd_32x32_avx
	mov	r9d, 30
	lea	r8, OFFSET FLAT:$SG4294951605
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294951604
	mov	rcx, rsi
	call	kvz_strategyselector_register
	xor	ecx, ecx

; 127  :     success &= kvz_strategyselector_register(opaque, "satd_64x64", "x86_asm_avx", 30, &kvz_satd_64x64_avx);

	lea	r8, OFFSET FLAT:$SG4294951603
	mov	edi, eax
	lea	rdx, OFFSET FLAT:$SG4294951602
	lea	rax, OFFSET FLAT:kvz_satd_64x64_avx
	test	ebx, ebx
	mov	r9d, 30
	mov	QWORD PTR [rsp+32], rax
	setne	cl
	and	edi, ecx
	mov	rcx, rsi
	call	kvz_strategyselector_register

; 128  :   }
; 129  : #endif // KVZ_BIT_DEPTH == 8
; 130  : #endif //!defined(KVZ_COMPILE_ASM)
; 131  :   return success;
; 132  : }

	mov	rbx, QWORD PTR [rsp+64]
	and	eax, edi
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_picture_x86_asm_avx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\x86_asm\picture-x86-asm.c
_TEXT	SEGMENT
data1$ = 48
data2$ = 56
kvz_sad_32x32_avx PROC

; 47   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rsi, rcx

; 48   :   unsigned sad = 0;
; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	call	kvz_sad_16x16_avx

; 50   :   sad += kvz_sad_16x16_avx(data1 + 8 * 32, data2 + 8 * 32);

	lea	rdx, QWORD PTR [rdi+256]
	mov	ebx, eax
	lea	rcx, QWORD PTR [rsi+256]
	call	kvz_sad_16x16_avx

; 51   :   sad += kvz_sad_16x16_avx(data1 + 16 * 32, data2 + 16 * 32);

	lea	rdx, QWORD PTR [rdi+512]
	add	ebx, eax
	lea	rcx, QWORD PTR [rsi+512]
	call	kvz_sad_16x16_avx

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	lea	rdx, QWORD PTR [rdi+768]
	add	ebx, eax
	lea	rcx, QWORD PTR [rsi+768]
	call	kvz_sad_16x16_avx

; 53   :   return sad;
; 54   : }

	mov	rsi, QWORD PTR [rsp+56]
	add	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_sad_32x32_avx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\x86_asm\picture-x86-asm.c
_TEXT	SEGMENT
data1$ = 64
data2$ = 72
kvz_sad_64x64_avx PROC

; 57   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
	mov	r15, rcx

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	call	kvz_sad_16x16_avx

; 50   :   sad += kvz_sad_16x16_avx(data1 + 8 * 32, data2 + 8 * 32);

	lea	rdx, QWORD PTR [rsi+256]
	mov	r12d, eax
	lea	rcx, QWORD PTR [r15+256]
	call	kvz_sad_16x16_avx

; 51   :   sad += kvz_sad_16x16_avx(data1 + 16 * 32, data2 + 16 * 32);

	lea	rdx, QWORD PTR [rsi+512]
	add	r12d, eax
	lea	rcx, QWORD PTR [r15+512]
	call	kvz_sad_16x16_avx

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	lea	rdx, QWORD PTR [rsi+768]
	add	r12d, eax
	lea	rcx, QWORD PTR [r15+768]
	call	kvz_sad_16x16_avx

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rdx, QWORD PTR [rsi+1024]

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	add	r12d, eax

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rcx, QWORD PTR [r15+1024]
	call	kvz_sad_16x16_avx

; 50   :   sad += kvz_sad_16x16_avx(data1 + 8 * 32, data2 + 8 * 32);

	lea	rdx, QWORD PTR [rsi+1280]
	mov	r14d, eax
	lea	rcx, QWORD PTR [r15+1280]
	call	kvz_sad_16x16_avx

; 51   :   sad += kvz_sad_16x16_avx(data1 + 16 * 32, data2 + 16 * 32);

	lea	rdx, QWORD PTR [rsi+1536]
	add	r14d, eax
	lea	rcx, QWORD PTR [r15+1536]
	call	kvz_sad_16x16_avx

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	lea	rdx, QWORD PTR [rsi+1792]
	add	r14d, eax
	lea	rcx, QWORD PTR [r15+1792]
	call	kvz_sad_16x16_avx

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rdx, QWORD PTR [rsi+2048]

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	add	r14d, eax

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rcx, QWORD PTR [r15+2048]
	call	kvz_sad_16x16_avx

; 50   :   sad += kvz_sad_16x16_avx(data1 + 8 * 32, data2 + 8 * 32);

	lea	rdx, QWORD PTR [rsi+2304]
	mov	ebp, eax
	lea	rcx, QWORD PTR [r15+2304]
	call	kvz_sad_16x16_avx

; 51   :   sad += kvz_sad_16x16_avx(data1 + 16 * 32, data2 + 16 * 32);

	lea	rdx, QWORD PTR [rsi+2560]
	add	ebp, eax
	lea	rcx, QWORD PTR [r15+2560]
	call	kvz_sad_16x16_avx

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	lea	rdx, QWORD PTR [rsi+2816]
	add	ebp, eax
	lea	rcx, QWORD PTR [r15+2816]
	call	kvz_sad_16x16_avx

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rdx, QWORD PTR [rsi+3072]

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	add	ebp, eax

; 49   :   sad += kvz_sad_16x16_avx(data1, data2);

	lea	rcx, QWORD PTR [r15+3072]
	call	kvz_sad_16x16_avx

; 50   :   sad += kvz_sad_16x16_avx(data1 + 8 * 32, data2 + 8 * 32);

	lea	rdx, QWORD PTR [rsi+3328]
	mov	ebx, eax
	lea	rcx, QWORD PTR [r15+3328]
	call	kvz_sad_16x16_avx

; 51   :   sad += kvz_sad_16x16_avx(data1 + 16 * 32, data2 + 16 * 32);

	lea	rdx, QWORD PTR [rsi+3584]
	add	ebx, eax
	lea	rcx, QWORD PTR [r15+3584]
	call	kvz_sad_16x16_avx

; 52   :   sad += kvz_sad_16x16_avx(data1 + 24 * 32, data2 + 24 * 32);

	lea	rdx, QWORD PTR [rsi+3840]
	add	ebx, eax
	lea	rcx, QWORD PTR [r15+3840]
	call	kvz_sad_16x16_avx

; 58   :   unsigned sad = 0;
; 59   :   sad += kvz_sad_32x32_avx(data1, data2);
; 60   :   sad += kvz_sad_32x32_avx(data1 + 16 * 64, data2 + 16 * 64);
; 61   :   sad += kvz_sad_32x32_avx(data1 + 32 * 64, data2 + 32 * 64);
; 62   :   sad += kvz_sad_32x32_avx(data1 + 48 * 64, data2 + 48 * 64);
; 63   :   return sad;
; 64   : }

	mov	rsi, QWORD PTR [rsp+80]
	add	eax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	eax, ebp
	mov	rbp, QWORD PTR [rsp+72]
	add	eax, r14d
	mov	rdi, QWORD PTR [rsp+88]
	add	eax, r12d
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
kvz_sad_64x64_avx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\x86_asm\picture-x86-asm.c
_TEXT	SEGMENT
data1$ = 48
data2$ = 56
width$ = 64
height$ = 72
stride$ = 80
kvz_sad_other_avx PROC

; 69   : {

	mov	DWORD PTR [rsp+32], r9d
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	mov	r13d, DWORD PTR stride$[rsp]

; 70   :   unsigned sad = 0;

	xor	r12d, r12d
	xor	edi, edi
	mov	eax, r9d
	mov	r10d, r8d
	mov	rsi, rdx
	mov	rbp, rcx

; 71   : 
; 72   :   for (int y = 0; y < height; ++y) {

	test	r9d, r9d
	jle	$LN26@kvz_sad_ot

; 70   :   unsigned sad = 0;

	mov	QWORD PTR [rsp+48], rbx
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+64], r15
	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+56], r14
$LL4@kvz_sad_ot:

; 73   :     for (int x = 0; x < width; ++x) {

	xor	ecx, ecx
	test	r10d, r10d
	jle	SHORT $LN14@kvz_sad_ot
	cmp	r10d, 32				; 00000020H
	jb	SHORT $LN14@kvz_sad_ot

; 74   :       sad += abs(data1[y * stride + x] - data2[y * stride + x]);

	mov	r8d, edi
	mov	r9d, r10d
	imul	r8d, r13d
	and	r9d, -32				; ffffffffffffffe0H
	npad	5
$LL7@kvz_sad_ot:
	movdqu	xmm0, XMMWORD PTR [r8+rsi]
	lea	eax, DWORD PTR [r8+16]
	add	ecx, 32					; 00000020H
	movdqu	xmm1, XMMWORD PTR [r8+rbp]
	lea	r8d, DWORD PTR [r8+32]
	psadbw	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax+rsi]
	paddd	xmm1, xmm3
	movdqa	xmm3, xmm1
	movdqu	xmm1, XMMWORD PTR [rax+rbp]
	psadbw	xmm1, xmm0
	paddd	xmm1, xmm2
	movdqa	xmm2, xmm1
	cmp	ecx, r9d
	jl	SHORT $LL7@kvz_sad_ot
	mov	eax, DWORD PTR height$[rsp]
$LN14@kvz_sad_ot:
	xor	r11d, r11d
	xor	ebx, ebx

; 73   :     for (int x = 0; x < width; ++x) {

	cmp	ecx, r10d
	jge	$LN2@kvz_sad_ot
	mov	r14d, r13d
	mov	eax, r10d
	imul	r14d, edi
	sub	eax, ecx
	cmp	eax, 2
	jl	SHORT $LC20@kvz_sad_ot

; 74   :       sad += abs(data1[y * stride + x] - data2[y * stride + x]);

	mov	eax, r10d
	lea	r9d, DWORD PTR [r14+rcx]
	sub	eax, ecx
	sub	eax, 2
	shr	eax, 1
	inc	eax
	mov	r15d, eax
	lea	ecx, DWORD PTR [rcx+rax*2]
	npad	9
$LL22@kvz_sad_ot:
	movzx	eax, BYTE PTR [r9+rsi]
	movzx	edx, BYTE PTR [r9+rbp]
	sub	edx, eax
	mov	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r11d, eax
	lea	eax, DWORD PTR [r9+1]
	lea	r9d, DWORD PTR [r9+2]
	movzx	r8d, BYTE PTR [rax+rbp]
	movzx	eax, BYTE PTR [rax+rsi]
	sub	r8d, eax
	mov	eax, r8d
	cdq
	xor	eax, edx
	sub	eax, edx
	add	ebx, eax
	sub	r15, 1
	jne	SHORT $LL22@kvz_sad_ot

; 73   :     for (int x = 0; x < width; ++x) {

	cmp	ecx, r10d
	jge	SHORT $LN21@kvz_sad_ot
$LC20@kvz_sad_ot:

; 74   :       sad += abs(data1[y * stride + x] - data2[y * stride + x]);

	lea	eax, DWORD PTR [r14+rcx]
	movzx	edx, BYTE PTR [rax+rbp]
	movzx	eax, BYTE PTR [rax+rsi]
	sub	edx, eax
	mov	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	add	r12d, eax
$LN21@kvz_sad_ot:
	lea	eax, DWORD PTR [rbx+r11]
	add	r12d, eax
	mov	eax, DWORD PTR height$[rsp]
$LN2@kvz_sad_ot:

; 71   : 
; 72   :   for (int y = 0; y < height; ++y) {

	inc	edi
	cmp	edi, eax
	jl	$LL4@kvz_sad_ot

; 75   :     }
; 76   :   }
; 77   : 
; 78   :   return sad;

	mov	r15, QWORD PTR [rsp+64]
	paddd	xmm2, xmm3
	mov	r14, QWORD PTR [rsp+56]
	movdqa	xmm0, xmm2
	mov	rbx, QWORD PTR [rsp+48]
	psrldq	xmm0, 8
	paddd	xmm2, xmm0
	movd	eax, xmm2
	add	eax, r12d

; 79   : }

	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN26@kvz_sad_ot:

; 75   :     }
; 76   :   }
; 77   : 
; 78   :   return sad;

	mov	eax, r12d

; 79   : }

	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_sad_other_avx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\x86_asm\picture-x86-asm.c
_TEXT	SEGMENT
data1$ = 8
data2$ = 16
width$ = 24
height$ = 32
stride1$ = 40
stride2$ = 48
reg_sad_x86_asm PROC

; 85   :   if (width == height) {

	cmp	r8d, r9d
	jne	SHORT $LN9@reg_sad_x8

; 86   :     if (width == 8) {

	cmp	r8d, 8
	jne	SHORT $LN3@reg_sad_x8

; 87   :       return kvz_sad_8x8_stride_avx(data1, data2, stride1);

	mov	r8d, DWORD PTR stride1$[rsp]
	jmp	kvz_sad_8x8_stride_avx
$LN3@reg_sad_x8:

; 88   :     } else if (width == 16) {

	cmp	r8d, 16
	jne	SHORT $LN5@reg_sad_x8

; 89   :       return kvz_sad_16x16_stride_avx(data1, data2, stride1);

	mov	r8d, DWORD PTR stride1$[rsp]
	jmp	kvz_sad_16x16_stride_avx
$LN5@reg_sad_x8:

; 90   :     } else if (width == 32) {

	cmp	r8d, 32					; 00000020H
	jne	SHORT $LN7@reg_sad_x8

; 91   :       return kvz_sad_32x32_stride_avx(data1, data2, stride1);

	mov	r8d, DWORD PTR stride1$[rsp]
	jmp	kvz_sad_32x32_stride_avx
$LN7@reg_sad_x8:

; 92   :     } else if (width == 64) {

	cmp	r8d, 64					; 00000040H
	jne	SHORT $LN9@reg_sad_x8

; 93   :       return kvz_sad_64x64_stride_avx(data1, data2, stride1);

	mov	r8d, DWORD PTR stride1$[rsp]
	jmp	kvz_sad_64x64_stride_avx
$LN9@reg_sad_x8:

; 94   :     }
; 95   :   }
; 96   : 
; 97   :   if (width * height >= 16) {

	mov	eax, r8d
	imul	eax, r9d
	cmp	eax, 16
	jge	kvz_reg_sad_sse41
$LN10@reg_sad_x8:

; 98   :     // Call the vectorized general SAD SSE41 function when the block
; 99   :     // is big enough to make it worth it.
; 100  :     return kvz_reg_sad_sse41(data1, data2, width, height, stride1, stride2);
; 101  :   } else {
; 102  :     return kvz_sad_other_avx(data1, data2, width, height, stride1);

	jmp	kvz_sad_other_avx
reg_sad_x86_asm ENDP
_TEXT	ENDS
END
