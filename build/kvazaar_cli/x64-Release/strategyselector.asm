; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_GetSystemInfo:PROC
COMM	kvz_g_hardware_flags:BYTE:038H
COMM	kvz_g_strategies_in_use:BYTE:038H
COMM	kvz_g_strategies_available:BYTE:038H
_DATA	ENDS
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294954466
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294954465
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294954464
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294954463
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294954462
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294954461
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294954460
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294954459
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294954458
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294954457
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294954456
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294954455
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294954454
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294954453
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294954452
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294954451
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294954450
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294954449
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294954448
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294954447
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294954446
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294954445
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294954444
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294954443
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294954442
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294954441
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294954440
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294954439
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294954438
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294954437
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294954436
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294954435
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294954434
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294954433
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294954432
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294954431
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294954430
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294954429
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294954428
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294954427
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294954426
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294954425
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294954424
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294954423
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294954422
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294954421
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294954420
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294954419
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294954418
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294954417
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294954416
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294954415
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294954414
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294954413
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294954412
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294954411
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294954410
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294954409
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294954408
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294954407
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294954406
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294954405
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294954404
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294954416 DB 'quant', 00H
	ORG $+6
$SG4294954466 DB 'array_checksum', 00H
	ORG $+1
$SG4294954465 DB 'array_md5', 00H
	ORG $+6
$SG4294954464 DB 'reg_sad', 00H
$SG4294954463 DB 'sad_4x4', 00H
$SG4294954462 DB 'sad_8x8', 00H
$SG4294954461 DB 'sad_16x16', 00H
	ORG $+6
$SG4294954460 DB 'sad_32x32', 00H
	ORG $+6
$SG4294954459 DB 'sad_64x64', 00H
	ORG $+6
$SG4294954458 DB 'satd_4x4', 00H
	ORG $+6
$SG4294954457 DB 'satd_8x8', 00H
	ORG $+6
$SG4294954456 DB 'satd_16x16', 00H
	ORG $+5
$SG4294954455 DB 'satd_32x32', 00H
	ORG $+5
$SG4294954454 DB 'satd_64x64', 00H
	ORG $+5
$SG4294954453 DB 'satd_any_size', 00H
	ORG $+2
$SG4294954452 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294954451 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294954450 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294954449 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294954448 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294954447 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294954446 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294954445 DB 'satd_16x16_dual', 00H
$SG4294954444 DB 'satd_32x32_dual', 00H
$SG4294954443 DB 'satd_64x64_dual', 00H
$SG4294954442 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294954441 DB 'pixels_calc_ssd', 00H
$SG4294954440 DB 'bipred_average', 00H
	ORG $+1
$SG4294954439 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294954438 DB 'ver_sad', 00H
$SG4294954437 DB 'hor_sad', 00H
$SG4294954436 DB 'pixel_var', 00H
	ORG $+6
$SG4294954435 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294954434 DB 'dct_4x4', 00H
$SG4294954433 DB 'dct_8x8', 00H
$SG4294954432 DB 'dct_16x16', 00H
	ORG $+6
$SG4294954431 DB 'dct_32x32', 00H
	ORG $+6
$SG4294954430 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294954429 DB 'idct_4x4', 00H
	ORG $+6
$SG4294954428 DB 'idct_8x8', 00H
	ORG $+6
$SG4294954427 DB 'idct_16x16', 00H
	ORG $+5
$SG4294954426 DB 'idct_32x32', 00H
	ORG $+5
$SG4294954425 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294954424 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294954423 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294954422 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294954421 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294954420 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294954419 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294954418 DB 'sample_octpel_chroma_hi', 00H
$SG4294954417 DB 'get_extended_block', 00H
	ORG $+5
$SG4294954415 DB 'quantize_residual', 00H
	ORG $+6
$SG4294954414 DB 'dequant', 00H
$SG4294954413 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294954412 DB 'fast_coeff_cost', 00H
$SG4294954411 DB 'angular_pred', 00H
	ORG $+3
$SG4294954410 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294954409 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294954408 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294954407 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294954406 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294954405 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294954404 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategyselector_register
PUBLIC	kvz_strategyselector_init
pdata	SEGMENT
$pdata$set_hardware_flags DD imagerel set_hardware_flags
	DD	imagerel set_hardware_flags+48
	DD	imagerel $unwind$set_hardware_flags
$pdata$1$set_hardware_flags DD imagerel set_hardware_flags+48
	DD	imagerel set_hardware_flags+63
	DD	imagerel $chain$1$set_hardware_flags
$pdata$4$set_hardware_flags DD imagerel set_hardware_flags+63
	DD	imagerel set_hardware_flags+310
	DD	imagerel $chain$4$set_hardware_flags
$pdata$5$set_hardware_flags DD imagerel set_hardware_flags+310
	DD	imagerel set_hardware_flags+430
	DD	imagerel $chain$5$set_hardware_flags
$pdata$6$set_hardware_flags DD imagerel set_hardware_flags+430
	DD	imagerel set_hardware_flags+983
	DD	imagerel $chain$6$set_hardware_flags
$pdata$get_cpuid DD imagerel get_cpuid
	DD	imagerel get_cpuid+68
	DD	imagerel $unwind$get_cpuid
$pdata$strategyselector_choose_for DD imagerel strategyselector_choose_for
	DD	imagerel strategyselector_choose_for+1009
	DD	imagerel $unwind$strategyselector_choose_for
$pdata$kvz_strategyselector_register DD imagerel $LN45
	DD	imagerel $LN45+758
	DD	imagerel $unwind$kvz_strategyselector_register
$pdata$kvz_strategyselector_init DD imagerel $LN98
	DD	imagerel $LN98+3281
	DD	imagerel $unwind$kvz_strategyselector_init
xdata	SEGMENT
$unwind$set_hardware_flags DD 010701H
	DD	0c207H
$chain$1$set_hardware_flags DD 040a21H
	DD	0f540aH
	DD	0e3404H
	DD	imagerel set_hardware_flags
	DD	imagerel set_hardware_flags+48
	DD	imagerel $unwind$set_hardware_flags
$chain$4$set_hardware_flags DD 060e21H
	DD	0ce40eH
	DD	0117408H
	DD	0106404H
	DD	imagerel set_hardware_flags+48
	DD	imagerel set_hardware_flags+63
	DD	imagerel $chain$1$set_hardware_flags
$chain$5$set_hardware_flags DD 040021H
	DD	0ce400H
	DD	0117400H
	DD	imagerel set_hardware_flags+48
	DD	imagerel set_hardware_flags+63
	DD	imagerel $chain$1$set_hardware_flags
$chain$6$set_hardware_flags DD 021H
	DD	imagerel set_hardware_flags
	DD	imagerel set_hardware_flags+48
	DD	imagerel $unwind$set_hardware_flags
$unwind$get_cpuid DD 020601H
	DD	030021206H
$unwind$strategyselector_choose_for DD 0b5d01H
	DD	02af45dH
	DD	02c5415H
	DD	02b3415H
	DD	0260115H
	DD	0700ce00eH
	DD	0600bH
$unwind$kvz_strategyselector_register DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$kvz_strategyselector_init DD 087501H
	DD	0b7475H
	DD	0a3461H
	DD	0c640dH
	DD	05006720dH
	ORG $+2
$SG4294954319 DB 0aH, 00H
	ORG $+2
$SG4294954322 DB ' SSE42', 00H
	ORG $+1
$SG4294954344 DB 'sse', 00H
	ORG $+2
$SG4294954323 DB ' SSE41', 00H
	ORG $+1
$SG4294954345 DB 'mmx', 00H
	ORG $+2
$SG4294954324 DB ' SSSE3', 00H
	ORG $+1
$SG4294954348 DB 'avx', 00H
$SG4294954361 DB 'sse', 00H
	ORG $+2
$SG4294954330 DB ' SSE42', 00H
	ORG $+1
$SG4294954362 DB 'mmx', 00H
	ORG $+2
$SG4294954331 DB ' SSE41', 00H
	ORG $+1
$SG4294954365 DB 'avx', 00H
	ORG $+2
$SG4294954332 DB ' SSSE3', 00H
	ORG $+1
$SG4294954367 DB 0aH, 00H
	ORG $+2
$SG4294954381 DB 0aH, 00H
	ORG $+3
$SG4294954320 DB ' AVX2', 00H
	ORG $+3
$SG4294954325 DB ' SSE3', 00H
	ORG $+3
$SG4294954326 DB ' SSE2', 00H
	ORG $+3
$SG4294954333 DB ' SSE2', 00H
$SG4294954321 DB ' AVX', 00H
$SG4294954327 DB ' SSE', 00H
$SG4294954328 DB ' MMX', 00H
$SG4294954334 DB ' SSE', 00H
$SG4294954335 DB ' MMX', 00H
$SG4294954337 DB 'neon', 00H
$SG4294954339 DB 'ssse3', 00H
$SG4294954340 DB 'sse42', 00H
$SG4294954341 DB 'sse41', 00H
$SG4294954342 DB 'sse3', 00H
$SG4294954336 DB 'Compiled: INTEL, flags:', 00H
$SG4294954338 DB 'altivec', 00H
$SG4294954343 DB 'sse2', 00H
$SG4294954346 DB 'avx2', 00H
$SG4294954350 DB '%s environment variable present, choosing %s:%s', 0aH, 00H
$SG4294954351 DB 'KVAZAAR_OVERRIDE_%s', 00H
$SG4294954354 DB 'neon', 00H
	ORG $+3
$SG4294954355 DB 'altivec', 00H
	ORG $+5
$SG4294954329 DB 0aH, 'Detected: INTEL, flags:', 00H
	ORG $+7
$SG4294954347 DB 'x86_asm_avx', 00H
$SG4294954356 DB 'ssse3', 00H
	ORG $+6
$SG4294954349 DB '%s environment variable present, but no strategy %s was'
	DB	' found!', 0aH, 00H
$SG4294954352 DB 's', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'(', 00H, 's', 00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'g', 00H, 'y', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5'
	DB	00H, '6', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '"', 00H, 'K'
	DB	00H, 'V', 00H, 'A', 00H, 'Z', 00H, 'A', 00H, 'A', 00H, 'R', 00H
	DB	'_', 00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'I'
	DB	00H, 'D', 00H, 'E', 00H, '_', 00H, '"', 00H, ')', 00H, 00H, 00H
$SG4294954357 DB 'sse42', 00H
	ORG $+6
$SG4294954353 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'y'
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG4294954358 DB 'sse41', 00H
	ORG $+2
$SG4294954359 DB 'sse3', 00H
	ORG $+3
$SG4294954360 DB 'sse2', 00H
	ORG $+3
$SG4294954363 DB 'avx2', 00H
	ORG $+3
$SG4294954364 DB 'x86_asm_avx', 00H
	ORG $+4
$SG4294954366 DB 'Could not increase strategies list size!', 0aH, 00H
	ORG $+6
$SG4294954368 DB 'no SIMD optimizations', 00H
	ORG $+2
$SG4294954369 DB 'altivec(%d) ', 00H
	ORG $+3
$SG4294954370 DB 'neon(%d) ', 00H
	ORG $+6
$SG4294954371 DB 'ssse3(%d) ', 00H
	ORG $+5
$SG4294954372 DB 'sse42(%d) ', 00H
	ORG $+5
$SG4294954373 DB 'sse41(%d) ', 00H
	ORG $+5
$SG4294954374 DB 'sse3(%d) ', 00H
	ORG $+6
$SG4294954375 DB 'sse2(%d) ', 00H
	ORG $+6
$SG4294954376 DB 'sse(%d) ', 00H
	ORG $+7
$SG4294954377 DB 'mmx(%d) ', 00H
	ORG $+7
$SG4294954378 DB 'avx2(%d) ', 00H
	ORG $+6
$SG4294954379 DB 'avx(%d) ', 00H
	ORG $+7
$SG4294954380 DB 'In use: ', 00H
	ORG $+7
$SG4294954382 DB 'no SIMD optimizations', 00H
	ORG $+2
$SG4294954383 DB 'altivec(%d) ', 00H
	ORG $+3
$SG4294954384 DB 'neon(%d) ', 00H
	ORG $+6
$SG4294954385 DB 'ssse3(%d) ', 00H
	ORG $+5
$SG4294954386 DB 'sse42(%d) ', 00H
	ORG $+5
$SG4294954387 DB 'sse41(%d) ', 00H
	ORG $+5
$SG4294954388 DB 'sse3(%d) ', 00H
	ORG $+6
$SG4294954389 DB 'sse2(%d) ', 00H
	ORG $+6
$SG4294954390 DB 'sse(%d) ', 00H
	ORG $+7
$SG4294954391 DB 'mmx(%d) ', 00H
	ORG $+7
$SG4294954392 DB 'avx2(%d) ', 00H
	ORG $+6
$SG4294954393 DB 'avx(%d) ', 00H
	ORG $+7
$SG4294954394 DB 'Available: ', 00H
	ORG $+4
$SG4294954395 DB 'Could not find a strategy for %s!', 0aH, 00H
	ORG $+5
$SG4294954396 DB 'kvz_strategy_register_encode failed!', 0aH, 00H
	ORG $+2
$SG4294954397 DB 'kvz_strategy_register_sao failed!', 0aH, 00H
	ORG $+5
$SG4294954398 DB 'kvz_strategy_register_intra failed!', 0aH, 00H
	ORG $+3
$SG4294954399 DB 'kvz_strategy_register_quant failed!', 0aH, 00H
	ORG $+3
$SG4294954400 DB 'kvz_strategy_register_ipol failed!', 0aH, 00H
	ORG $+4
$SG4294954401 DB 'kvz_strategy_register_dct failed!', 0aH, 00H
	ORG $+5
$SG4294954402 DB 'kvz_strategy_register_nal failed!', 0aH, 00H
	ORG $+5
$SG4294954403 DB 'kvz_strategy_register_picture failed!', 0aH, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-ipol.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-quant.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-intra.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-sao.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-encode.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
_TEXT	SEGMENT
strategies$ = 48
cpuid$ = 80
bitdepth$dead$ = 88
kvz_strategyselector_init PROC

; 55   : int kvz_strategyselector_init(int32_t cpuid, uint8_t bitdepth) {

$LN98:
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H

; 56   :   const strategy_to_select_t *cur_strategy_to_select = strategies_to_select;
; 57   :   strategy_list_t strategies;
; 58   :   
; 59   :   strategies.allocated = 0;

	xor	eax, eax
	lea	rsi, OFFSET FLAT:strategies_to_select

; 60   :   strategies.count = 0;

	mov	QWORD PTR strategies$[rbp-64], rax

; 61   :   strategies.strategies = NULL;

	mov	QWORD PTR strategies$[rbp-56], rax

; 62   :   
; 63   :   set_hardware_flags(cpuid);

	call	set_hardware_flags

; 64   :   
; 65   :   //Add new register function here
; 66   :   if (!kvz_strategy_register_picture(&strategies, bitdepth)) {

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_picture
	test	eax, eax
	jne	SHORT $LN4@kvz_strate

; 67   :     fprintf(stderr, "kvz_strategy_register_picture failed!\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954403
	call	fprintf

; 68   :     return 0;

	xor	eax, eax

; 230  : }

	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
$LN4@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\nal-generic.c

; 182  :   success &= kvz_strategyselector_register(opaque, "array_md5", "generic", 0, &array_md5_generic);

	lea	rax, OFFSET FLAT:array_md5_generic
	mov	QWORD PTR [rsp+80], rbx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	r8, OFFSET FLAT:$SG4294948934
	mov	QWORD PTR [rsp+88], rdi
	lea	rdx, OFFSET FLAT:$SG4294948933
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 183  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic", 0, &array_checksum_generic);

	lea	r8, OFFSET FLAT:$SG4294948932
	lea	rax, OFFSET FLAT:array_checksum_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948931
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 184  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic4", 1, &array_checksum_generic4);

	lea	r8, OFFSET FLAT:$SG4294948930
	lea	rax, OFFSET FLAT:array_checksum_generic4
	and	edi, ebx
	mov	r9d, 1
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948929
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 185  :   success &= kvz_strategyselector_register(opaque, "array_checksum", "generic8", 2, &array_checksum_generic8);

	lea	r8, OFFSET FLAT:$SG4294948928
	lea	rax, OFFSET FLAT:array_checksum_generic8
	mov	r9d, 2
	lea	rdx, OFFSET FLAT:$SG4294948927
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	test	al, bl
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 71   :   if (!kvz_strategy_register_nal(&strategies, bitdepth)) {

	jne	SHORT $LN5@kvz_strate

; 72   :     fprintf(stderr, "kvz_strategy_register_nal failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954402
	call	fprintf

; 73   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN5@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c

; 635  :   success &= kvz_strategyselector_register(opaque, "fast_forward_dst_4x4", "generic", 0, &fast_forward_dst_4x4_generic);

	lea	rax, OFFSET FLAT:fast_forward_dst_4x4_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294952555
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952554
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 636  :   
; 637  :   success &= kvz_strategyselector_register(opaque, "dct_4x4", "generic", 0, &dct_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952553
	lea	rax, OFFSET FLAT:dct_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952552
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 638  :   success &= kvz_strategyselector_register(opaque, "dct_8x8", "generic", 0, &dct_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294952551
	lea	rax, OFFSET FLAT:dct_8x8_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952550
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 639  :   success &= kvz_strategyselector_register(opaque, "dct_16x16", "generic", 0, &dct_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294952549
	lea	rax, OFFSET FLAT:dct_16x16_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952548
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 640  :   success &= kvz_strategyselector_register(opaque, "dct_32x32", "generic", 0, &dct_32x32_generic);

	lea	r8, OFFSET FLAT:$SG4294952547
	lea	rax, OFFSET FLAT:dct_32x32_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952546
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 641  : 
; 642  :   success &= kvz_strategyselector_register(opaque, "fast_inverse_dst_4x4", "generic", 0, &fast_inverse_dst_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952545
	lea	rax, OFFSET FLAT:fast_inverse_dst_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952544
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 643  : 
; 644  :   success &= kvz_strategyselector_register(opaque, "idct_4x4", "generic", 0, &idct_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952543
	lea	rax, OFFSET FLAT:idct_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952542
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 645  :   success &= kvz_strategyselector_register(opaque, "idct_8x8", "generic", 0, &idct_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294952541
	lea	rax, OFFSET FLAT:idct_8x8_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952540
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 646  :   success &= kvz_strategyselector_register(opaque, "idct_16x16", "generic", 0, &idct_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294952539
	lea	rax, OFFSET FLAT:idct_16x16_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952538
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax
	and	ebx, edi

; 647  :   success &= kvz_strategyselector_register(opaque, "idct_32x32", "generic", 0, &idct_32x32_generic);

	lea	rax, OFFSET FLAT:idct_32x32_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294952537
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952536
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	test	ebx, ebx
	mov	edi, eax
	setne	cl
	and	dil, cl
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-dct.c

; 61   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN44@kvz_strate

; 62   :     success &= kvz_strategy_register_dct_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_dct_avx2
	and	dil, al
$LN44@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 76   :   if (!kvz_strategy_register_dct(&strategies, bitdepth)) {

	test	dil, dil
	jne	SHORT $LN6@kvz_strate

; 77   :     fprintf(stderr, "kvz_strategy_register_dct failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954401
	call	fprintf

; 78   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN6@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 816  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_hpel_blocks_hor_ver_luma_generic);

	lea	rax, OFFSET FLAT:kvz_filter_hpel_blocks_hor_ver_luma_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294948364
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948363
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 817  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_diag_luma", "generic", 0, &kvz_filter_hpel_blocks_diag_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948362
	lea	rax, OFFSET FLAT:kvz_filter_hpel_blocks_diag_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948361
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 818  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_qpel_blocks_hor_ver_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948360
	lea	rax, OFFSET FLAT:kvz_filter_qpel_blocks_hor_ver_luma_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948359
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 819  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_diag_luma", "generic", 0, &kvz_filter_qpel_blocks_diag_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948358
	lea	rax, OFFSET FLAT:kvz_filter_qpel_blocks_diag_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948357
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 820  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma", "generic", 0, &kvz_sample_quarterpel_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948356
	lea	rax, OFFSET FLAT:kvz_sample_quarterpel_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948355
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 821  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma", "generic", 0, &kvz_sample_octpel_chroma_generic);

	lea	r8, OFFSET FLAT:$SG4294948354
	lea	rax, OFFSET FLAT:kvz_sample_octpel_chroma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948353
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 822  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma_hi", "generic", 0, &kvz_sample_quarterpel_luma_hi_generic);

	lea	r8, OFFSET FLAT:$SG4294948352
	lea	rax, OFFSET FLAT:kvz_sample_quarterpel_luma_hi_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948351
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 823  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma_hi", "generic", 0, &kvz_sample_octpel_chroma_hi_generic);

	lea	r8, OFFSET FLAT:$SG4294948350
	lea	rax, OFFSET FLAT:kvz_sample_octpel_chroma_hi_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948349
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 824  :   success &= kvz_strategyselector_register(opaque, "get_extended_block", "generic", 0, &kvz_get_extended_block_generic);

	lea	r8, OFFSET FLAT:$SG4294948348
	lea	rax, OFFSET FLAT:kvz_get_extended_block_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948347
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	test	eax, edi
	setne	bl
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-ipol.c

; 57   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN52@kvz_strate

; 58   :     success &= kvz_strategy_register_ipol_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_ipol_avx2
	and	bl, al
$LN52@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 81   :   if (!kvz_strategy_register_ipol(&strategies, bitdepth)) {

	test	bl, bl
	jne	SHORT $LN7@kvz_strate

; 82   :     fprintf(stderr, "kvz_strategy_register_ipol failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954400
	call	fprintf

; 83   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN7@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c

; 381  :   success &= kvz_strategyselector_register(opaque, "quant", "generic", 0, &kvz_quant_generic);

	lea	rax, OFFSET FLAT:kvz_quant_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294949948
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294949947
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 382  :   success &= kvz_strategyselector_register(opaque, "quantize_residual", "generic", 0, &kvz_quantize_residual_generic);

	lea	r8, OFFSET FLAT:$SG4294949946
	lea	rax, OFFSET FLAT:kvz_quantize_residual_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949945
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 383  :   success &= kvz_strategyselector_register(opaque, "dequant", "generic", 0, &kvz_dequant_generic);

	lea	r8, OFFSET FLAT:$SG4294949944
	lea	rax, OFFSET FLAT:kvz_dequant_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294949943
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 384  :   success &= kvz_strategyselector_register(opaque, "coeff_abs_sum", "generic", 0, &coeff_abs_sum_generic);

	lea	r8, OFFSET FLAT:$SG4294949942
	lea	rax, OFFSET FLAT:coeff_abs_sum_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949941
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 385  :   success &= kvz_strategyselector_register(opaque, "fast_coeff_cost", "generic", 0, &fast_coeff_cost_generic);

	lea	r8, OFFSET FLAT:$SG4294949940
	lea	rax, OFFSET FLAT:fast_coeff_cost_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294949939
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax
	and	bl, dil
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-quant.c

; 53   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN60@kvz_strate

; 54   :     success &= kvz_strategy_register_quant_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_quant_avx2
	and	bl, al
$LN60@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 86   :   if (!kvz_strategy_register_quant(&strategies, bitdepth)) {

	test	bl, bl
	jne	SHORT $LN8@kvz_strate

; 87   :     fprintf(stderr, "kvz_strategy_register_quant failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954399
	call	fprintf

; 88   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN8@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c

; 248  :   success &= kvz_strategyselector_register(opaque, "angular_pred", "generic", 0, &kvz_angular_pred_generic);

	lea	rax, OFFSET FLAT:kvz_angular_pred_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294947499
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947498
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 249  :   success &= kvz_strategyselector_register(opaque, "intra_pred_planar", "generic", 0, &kvz_intra_pred_planar_generic);

	lea	r8, OFFSET FLAT:$SG4294947497
	lea	rax, OFFSET FLAT:kvz_intra_pred_planar_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947496
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 250  :   success &= kvz_strategyselector_register(opaque, "intra_pred_filtered_dc", "generic", 0, &kvz_intra_pred_filtered_dc_generic);

	lea	r8, OFFSET FLAT:$SG4294947495
	lea	rax, OFFSET FLAT:kvz_intra_pred_filtered_dc_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947494
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax
	and	bl, dil
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-intra.c

; 50   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN68@kvz_strate

; 51   :     success &= kvz_strategy_register_intra_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_intra_avx2
	and	bl, al
$LN68@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 91   :   if (!kvz_strategy_register_intra(&strategies, bitdepth)) {

	test	bl, bl
	jne	SHORT $LN9@kvz_strate

; 92   :     fprintf(stderr, "kvz_strategy_register_intra failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954398
	call	fprintf

; 93   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN9@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao-generic.c

; 131  :   success &= kvz_strategyselector_register(opaque, "sao_edge_ddistortion", "generic", 0, &sao_edge_ddistortion_generic);

	lea	rax, OFFSET FLAT:sao_edge_ddistortion_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294947779
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947778
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 132  :   success &= kvz_strategyselector_register(opaque, "calc_sao_edge_dir", "generic", 0, &calc_sao_edge_dir_generic);

	lea	r8, OFFSET FLAT:$SG4294947777
	lea	rax, OFFSET FLAT:calc_sao_edge_dir_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947776
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	edi, eax

; 133  :   success &= kvz_strategyselector_register(opaque, "sao_reconstruct_color", "generic", 0, &sao_reconstruct_color_generic);

	lea	r8, OFFSET FLAT:$SG4294947775
	lea	rax, OFFSET FLAT:sao_reconstruct_color_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294947774
	and	edi, 1
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax

; 134  :   success &= kvz_strategyselector_register(opaque, "sao_band_ddistortion", "generic", 0, &sao_band_ddistortion_generic);

	lea	r8, OFFSET FLAT:$SG4294947773
	lea	rax, OFFSET FLAT:sao_band_ddistortion_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294947772
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, QWORD PTR strategies$[rbp-64]
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax
	and	dil, bl
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-sao.c

; 51   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN76@kvz_strate

; 52   :     success &= kvz_strategy_register_sao_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_sao_avx2
	and	dil, al
$LN76@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 96   :   if (!kvz_strategy_register_sao(&strategies, bitdepth)) {

	test	dil, dil
	jne	SHORT $LN10@kvz_strate

; 97   :     fprintf(stderr, "kvz_strategy_register_sao failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954397
	call	fprintf

; 98   :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN10@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\encode_coding_tree-generic.c

; 288  :   success &= kvz_strategyselector_register(opaque, "encode_coeff_nxn", "generic", 0, &kvz_encode_coeff_nxn_generic);

	lea	rax, OFFSET FLAT:kvz_encode_coeff_nxn_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294946939
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294946938
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategyselector_register
	mov	ebx, eax
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-encode.c

; 47   :   success &= kvz_strategy_register_encode_generic(opaque, bitdepth);

	and	bl, 1

; 48   : 
; 49   :   if (kvz_g_hardware_flags.intel_flags.avx2) {

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN84@kvz_strate

; 50   :     success &= kvz_strategy_register_encode_avx2(opaque, bitdepth);

	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	kvz_strategy_register_encode_avx2
	and	bl, al
$LN84@kvz_strate:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c

; 101  :   if (!kvz_strategy_register_encode(&strategies, bitdepth)) {

	test	bl, bl
	jne	SHORT $LN90@kvz_strate

; 102  :     fprintf(stderr, "kvz_strategy_register_encode failed!\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954396
	call	fprintf

; 103  :     return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN90@kvz_strate:

; 104  :   }
; 105  :   
; 106  :   while(cur_strategy_to_select->fptr) {

	cmp	QWORD PTR strategies_to_select+8, 0
	je	SHORT $LN3@kvz_strate
$LL2@kvz_strate:

; 107  :     *(cur_strategy_to_select->fptr) = strategyselector_choose_for(&strategies, cur_strategy_to_select->strategy_type);

	mov	rdx, QWORD PTR [rsi]
	lea	rcx, QWORD PTR strategies$[rbp-64]
	call	strategyselector_choose_for
	mov	rcx, QWORD PTR [rsi+8]
	mov	QWORD PTR [rcx], rax

; 108  :     
; 109  :     if (!(*(cur_strategy_to_select->fptr))) {

	mov	rax, QWORD PTR [rsi+8]
	cmp	QWORD PTR [rax], 0
	je	$LN91@kvz_strate

; 112  :     }
; 113  :     ++cur_strategy_to_select;

	add	rsi, 16
	cmp	QWORD PTR [rsi+8], 0
	jne	SHORT $LL2@kvz_strate
$LN3@kvz_strate:

; 114  :   }
; 115  : 
; 116  :   //We can free the structure now, as all strategies are statically set to pointers
; 117  :   if (strategies.allocated) {

	cmp	DWORD PTR strategies$[rbp-60], 0
	je	$LN13@kvz_strate

; 118  :     //Also check what optimizations are available and what are in use
; 119  :     //SIMD optimizations available
; 120  :     bool strategies_available = false;
; 121  :     fprintf(stderr, "Available: ");

	mov	ecx, 2
	xor	bl, bl
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954394
	call	fprintf

; 122  :     if (kvz_g_strategies_available.intel_flags.avx != 0){

	cmp	DWORD PTR kvz_g_strategies_available+28, 0
	je	SHORT $LN14@kvz_strate

; 123  :       fprintf(stderr, "avx(%d) ", kvz_g_strategies_available.intel_flags.avx);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+28
	lea	rdx, OFFSET FLAT:$SG4294954393
	mov	rcx, rax
	call	fprintf

; 124  :       strategies_available = true;

	mov	bl, 1
$LN14@kvz_strate:

; 125  :     }
; 126  :     if (kvz_g_strategies_available.intel_flags.avx2 != 0){

	cmp	DWORD PTR kvz_g_strategies_available+32, 0
	je	SHORT $LN15@kvz_strate

; 127  :       fprintf(stderr, "avx2(%d) ", kvz_g_strategies_available.intel_flags.avx2);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+32
	lea	rdx, OFFSET FLAT:$SG4294954392
	mov	rcx, rax
	call	fprintf

; 128  :       strategies_available = true;

	mov	bl, 1
$LN15@kvz_strate:

; 129  :     }
; 130  :     if (kvz_g_strategies_available.intel_flags.mmx != 0) {

	cmp	DWORD PTR kvz_g_strategies_available, 0
	je	SHORT $LN16@kvz_strate

; 131  :       fprintf(stderr, "mmx(%d) ", kvz_g_strategies_available.intel_flags.mmx);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available
	lea	rdx, OFFSET FLAT:$SG4294954391
	mov	rcx, rax
	call	fprintf

; 132  :       strategies_available = true;

	mov	bl, 1
$LN16@kvz_strate:

; 133  :     }
; 134  :     if (kvz_g_strategies_available.intel_flags.sse != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+4, 0
	je	SHORT $LN17@kvz_strate

; 135  :       fprintf(stderr, "sse(%d) ", kvz_g_strategies_available.intel_flags.sse);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+4
	lea	rdx, OFFSET FLAT:$SG4294954390
	mov	rcx, rax
	call	fprintf

; 136  :       strategies_available = true;

	mov	bl, 1
$LN17@kvz_strate:

; 137  :     }
; 138  :     if (kvz_g_strategies_available.intel_flags.sse2 != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+8, 0
	je	SHORT $LN18@kvz_strate

; 139  :       fprintf(stderr, "sse2(%d) ", kvz_g_strategies_available.intel_flags.sse2);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+8
	lea	rdx, OFFSET FLAT:$SG4294954389
	mov	rcx, rax
	call	fprintf

; 140  :       strategies_available = true;

	mov	bl, 1
$LN18@kvz_strate:

; 141  :     }
; 142  :     if (kvz_g_strategies_available.intel_flags.sse3 != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+12, 0
	je	SHORT $LN19@kvz_strate

; 143  :       fprintf(stderr, "sse3(%d) ", kvz_g_strategies_available.intel_flags.sse3);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+12
	lea	rdx, OFFSET FLAT:$SG4294954388
	mov	rcx, rax
	call	fprintf

; 144  :       strategies_available = true;

	mov	bl, 1
$LN19@kvz_strate:

; 145  :     }
; 146  :     if (kvz_g_strategies_available.intel_flags.sse41 != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+20, 0
	je	SHORT $LN20@kvz_strate

; 147  :       fprintf(stderr, "sse41(%d) ", kvz_g_strategies_available.intel_flags.sse41);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+20
	lea	rdx, OFFSET FLAT:$SG4294954387
	mov	rcx, rax
	call	fprintf

; 148  :       strategies_available = true;

	mov	bl, 1
$LN20@kvz_strate:

; 149  :     }
; 150  :     if (kvz_g_strategies_available.intel_flags.sse42 != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+24, 0
	je	SHORT $LN21@kvz_strate

; 151  :       fprintf(stderr, "sse42(%d) ", kvz_g_strategies_available.intel_flags.sse42);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+24
	lea	rdx, OFFSET FLAT:$SG4294954386
	mov	rcx, rax
	call	fprintf

; 152  :       strategies_available = true;

	mov	bl, 1
$LN21@kvz_strate:

; 153  :     }
; 154  :     if (kvz_g_strategies_available.intel_flags.ssse3 != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+16, 0
	je	SHORT $LN22@kvz_strate

; 155  :       fprintf(stderr, "ssse3(%d) ", kvz_g_strategies_available.intel_flags.ssse3);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+16
	lea	rdx, OFFSET FLAT:$SG4294954385
	mov	rcx, rax
	call	fprintf

; 156  :       strategies_available = true;

	mov	bl, 1
$LN22@kvz_strate:

; 157  :     }
; 158  :     if (kvz_g_strategies_available.arm_flags.neon != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+44, 0
	je	SHORT $LN23@kvz_strate

; 159  :       fprintf(stderr, "neon(%d) ", kvz_g_strategies_available.arm_flags.neon);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+44
	lea	rdx, OFFSET FLAT:$SG4294954384
	mov	rcx, rax
	call	fprintf

; 160  :       strategies_available = true;

	mov	bl, 1
$LN23@kvz_strate:

; 161  :     }
; 162  :     if (kvz_g_strategies_available.powerpc_flags.altivec != 0) {

	cmp	DWORD PTR kvz_g_strategies_available+40, 0
	je	SHORT $LN24@kvz_strate

; 163  :       fprintf(stderr, "altivec(%d) ", kvz_g_strategies_available.powerpc_flags.altivec);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_available+40
	lea	rdx, OFFSET FLAT:$SG4294954383
	mov	rcx, rax
	call	fprintf

; 164  :       strategies_available = true;
; 165  :     }
; 166  :     //If there is no strategies available
; 167  :     if (!strategies_available){

	jmp	SHORT $LN25@kvz_strate
$LN91@kvz_strate:

; 110  :       fprintf(stderr, "Could not find a strategy for %s!\n", cur_strategy_to_select->strategy_type);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8, QWORD PTR [rsi]
	lea	rdx, OFFSET FLAT:$SG4294954395
	mov	rcx, rax
	call	fprintf

; 111  :       return 0;

	xor	eax, eax
	jmp	$LN96@kvz_strate
$LN24@kvz_strate:

; 164  :       strategies_available = true;
; 165  :     }
; 166  :     //If there is no strategies available
; 167  :     if (!strategies_available){

	test	bl, bl
	jne	SHORT $LN25@kvz_strate

; 168  :       fprintf(stderr, "no SIMD optimizations");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954382
	call	fprintf
$LN25@kvz_strate:

; 169  :     }
; 170  :     fprintf(stderr, "\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954381
	call	fprintf

; 171  : 
; 172  :     //SIMD optimizations in use
; 173  :     bool strategies_in_use = false;
; 174  :     fprintf(stderr, "In use: ");

	mov	ecx, 2
	xor	bl, bl
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954380
	call	fprintf

; 175  :     if (kvz_g_strategies_in_use.intel_flags.avx != 0){

	cmp	DWORD PTR kvz_g_strategies_in_use+28, 0
	je	SHORT $LN26@kvz_strate

; 176  :       fprintf(stderr, "avx(%d) ", kvz_g_strategies_in_use.intel_flags.avx);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+28
	lea	rdx, OFFSET FLAT:$SG4294954379
	mov	rcx, rax
	call	fprintf

; 177  :       strategies_in_use = true;

	mov	bl, 1
$LN26@kvz_strate:

; 178  :     }
; 179  :     if (kvz_g_strategies_in_use.intel_flags.avx2 != 0){ 

	cmp	DWORD PTR kvz_g_strategies_in_use+32, 0
	je	SHORT $LN27@kvz_strate

; 180  :       fprintf(stderr, "avx2(%d) ", kvz_g_strategies_in_use.intel_flags.avx2);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+32
	lea	rdx, OFFSET FLAT:$SG4294954378
	mov	rcx, rax
	call	fprintf

; 181  :       strategies_in_use = true;

	mov	bl, 1
$LN27@kvz_strate:

; 182  :     }
; 183  :     if (kvz_g_strategies_in_use.intel_flags.mmx != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use, 0
	je	SHORT $LN28@kvz_strate

; 184  :       fprintf(stderr, "mmx(%d) ", kvz_g_strategies_in_use.intel_flags.mmx);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use
	lea	rdx, OFFSET FLAT:$SG4294954377
	mov	rcx, rax
	call	fprintf

; 185  :       strategies_in_use = true;

	mov	bl, 1
$LN28@kvz_strate:

; 186  :     }
; 187  :     if (kvz_g_strategies_in_use.intel_flags.sse != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+4, 0
	je	SHORT $LN29@kvz_strate

; 188  :       fprintf(stderr, "sse(%d) ", kvz_g_strategies_in_use.intel_flags.sse);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+4
	lea	rdx, OFFSET FLAT:$SG4294954376
	mov	rcx, rax
	call	fprintf

; 189  :       strategies_in_use = true;

	mov	bl, 1
$LN29@kvz_strate:

; 190  :     }
; 191  :     if (kvz_g_strategies_in_use.intel_flags.sse2 != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+8, 0
	je	SHORT $LN30@kvz_strate

; 192  :       fprintf(stderr, "sse2(%d) ", kvz_g_strategies_in_use.intel_flags.sse2);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+8
	lea	rdx, OFFSET FLAT:$SG4294954375
	mov	rcx, rax
	call	fprintf

; 193  :       strategies_in_use = true;

	mov	bl, 1
$LN30@kvz_strate:

; 194  :     }
; 195  :     if (kvz_g_strategies_in_use.intel_flags.sse3 != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+12, 0
	je	SHORT $LN31@kvz_strate

; 196  :       fprintf(stderr, "sse3(%d) ", kvz_g_strategies_in_use.intel_flags.sse3);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+12
	lea	rdx, OFFSET FLAT:$SG4294954374
	mov	rcx, rax
	call	fprintf

; 197  :       strategies_in_use = true;

	mov	bl, 1
$LN31@kvz_strate:

; 198  :     }
; 199  :     if (kvz_g_strategies_in_use.intel_flags.sse41 != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+20, 0
	je	SHORT $LN32@kvz_strate

; 200  :       fprintf(stderr, "sse41(%d) ", kvz_g_strategies_in_use.intel_flags.sse41);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+20
	lea	rdx, OFFSET FLAT:$SG4294954373
	mov	rcx, rax
	call	fprintf

; 201  :       strategies_in_use = true;

	mov	bl, 1
$LN32@kvz_strate:

; 202  :     }
; 203  :     if (kvz_g_strategies_in_use.intel_flags.sse42 != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+24, 0
	je	SHORT $LN33@kvz_strate

; 204  :       fprintf(stderr, "sse42(%d) ", kvz_g_strategies_in_use.intel_flags.sse42);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+24
	lea	rdx, OFFSET FLAT:$SG4294954372
	mov	rcx, rax
	call	fprintf

; 205  :       strategies_in_use = true;

	mov	bl, 1
$LN33@kvz_strate:

; 206  :     }
; 207  :     if (kvz_g_strategies_in_use.intel_flags.ssse3 != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+16, 0
	je	SHORT $LN34@kvz_strate

; 208  :       fprintf(stderr, "ssse3(%d) ", kvz_g_strategies_in_use.intel_flags.ssse3);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+16
	lea	rdx, OFFSET FLAT:$SG4294954371
	mov	rcx, rax
	call	fprintf

; 209  :       strategies_in_use = true;

	mov	bl, 1
$LN34@kvz_strate:

; 210  :     }
; 211  :     if (kvz_g_strategies_in_use.arm_flags.neon != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+44, 0
	je	SHORT $LN35@kvz_strate

; 212  :       fprintf(stderr, "neon(%d) ", kvz_g_strategies_in_use.arm_flags.neon);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+44
	lea	rdx, OFFSET FLAT:$SG4294954370
	mov	rcx, rax
	call	fprintf

; 213  :       strategies_in_use = true;

	mov	bl, 1
$LN35@kvz_strate:

; 214  :     }
; 215  :     if (kvz_g_strategies_in_use.powerpc_flags.altivec != 0) {

	cmp	DWORD PTR kvz_g_strategies_in_use+40, 0
	je	SHORT $LN36@kvz_strate

; 216  :       fprintf(stderr, "altivec(%d) ", kvz_g_strategies_in_use.powerpc_flags.altivec);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8d, DWORD PTR kvz_g_strategies_in_use+40
	lea	rdx, OFFSET FLAT:$SG4294954369
	mov	rcx, rax
	call	fprintf

; 217  :       strategies_in_use = true;
; 218  :     }
; 219  :     //If there is no strategies in use
; 220  :     if (!strategies_in_use){

	jmp	SHORT $LN37@kvz_strate
$LN36@kvz_strate:
	test	bl, bl
	jne	SHORT $LN37@kvz_strate

; 221  :       fprintf(stderr, "no SIMD optimizations");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954368
	call	fprintf
$LN37@kvz_strate:

; 222  :     }
; 223  :     fprintf(stderr, "\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954367
	call	fprintf

; 224  : 
; 225  :     //Free memory
; 226  :     free(strategies.strategies);

	mov	rcx, QWORD PTR strategies$[rbp-56]
	call	QWORD PTR __imp_free
$LN13@kvz_strate:

; 227  :   }
; 228  : 
; 229  :   return 1;

	mov	eax, 1
$LN96@kvz_strate:
	mov	rbx, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]

; 230  : }

	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
kvz_strategyselector_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
_TEXT	SEGMENT
opaque$ = 48
type$ = 56
strategy_name$ = 64
priority$ = 72
fptr$ = 80
kvz_strategyselector_register PROC

; 233  : int kvz_strategyselector_register(void * const opaque, const char * const type, const char * const strategy_name, int priority, void * const fptr) {

$LN45:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	esi, r9d

; 234  :   strategy_list_t * const strategies = opaque;
; 235  :   
; 236  :   if (strategies->allocated == strategies->count) {

	mov	ecx, DWORD PTR [rcx+4]
	mov	rbx, r8
	mov	rbp, rdx
	mov	eax, DWORD PTR [rdi]
	cmp	ecx, eax
	jne	SHORT $LN18@kvz_strate

; 237  :     strategy_t* new_strategies = realloc(strategies->strategies, sizeof(strategy_t) * (strategies->allocated + STRATEGY_LIST_ALLOC_SIZE));

	lea	edx, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR [rdi+8]
	shl	rdx, 5
	call	QWORD PTR __imp_realloc

; 238  :     if (!new_strategies) {

	test	rax, rax
	jne	SHORT $LN3@kvz_strate

; 239  :       fprintf(stderr, "Could not increase strategies list size!\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954366
	call	fprintf

; 240  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN3@kvz_strate:

; 241  :     }
; 242  :     strategies->strategies = new_strategies;
; 243  :     strategies->allocated += STRATEGY_LIST_ALLOC_SIZE;

	add	DWORD PTR [rdi+4], 16
	mov	QWORD PTR [rdi+8], rax
	mov	eax, DWORD PTR [rdi]
$LN18@kvz_strate:

; 244  :   }
; 245  :   
; 246  :   {
; 247  :     strategy_t *new_strategy = &strategies->strategies[strategies->count++];

	mov	ecx, eax

; 248  :     new_strategy->type = type;
; 249  :     new_strategy->strategy_name = strategy_name;
; 250  :     new_strategy->priority = priority;
; 251  :     new_strategy->fptr = fptr;
; 252  :   }
; 253  : 
; 254  :   //Check what strategies are available when they are registered
; 255  :   if (strcmp(strategy_name, "avx") == 0) kvz_g_strategies_available.intel_flags.avx++;

	lea	r8, OFFSET FLAT:$SG4294954365
	shl	rcx, 5
	add	rcx, QWORD PTR [rdi+8]
	inc	eax
	mov	DWORD PTR [rdi], eax
	sub	r8, rbx
	mov	rax, QWORD PTR fptr$[rsp]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, rbx
	mov	QWORD PTR [rcx], rbp
	mov	QWORD PTR [rcx+8], rbx
	mov	DWORD PTR [rcx+16], esi
	npad	10
$LL41@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN42@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL41@kvz_strate
$LN42@kvz_strate:
	mov	r8d, DWORD PTR kvz_g_strategies_available+28
	test	edx, edx
	jne	SHORT $LN4@kvz_strate
	inc	r8d
	mov	DWORD PTR kvz_g_strategies_available+28, r8d
$LN4@kvz_strate:

; 256  :   if (strcmp(strategy_name, "x86_asm_avx") == 0) kvz_g_strategies_available.intel_flags.avx++;

	lea	r9, OFFSET FLAT:$SG4294954364
	mov	rax, rbx
	sub	r9, rbx
	npad	11
$LL39@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r9]
	sub	edx, ecx
	jne	SHORT $LN40@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL39@kvz_strate
$LN40@kvz_strate:
	test	edx, edx
	jne	SHORT $LN5@kvz_strate
	inc	r8d
	mov	DWORD PTR kvz_g_strategies_available+28, r8d
$LN5@kvz_strate:

; 257  :   if (strcmp(strategy_name, "avx2") == 0) kvz_g_strategies_available.intel_flags.avx2++;

	lea	r8, OFFSET FLAT:$SG4294954363
	mov	rax, rbx
	sub	r8, rbx
	npad	2
$LL37@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN38@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL37@kvz_strate
$LN38@kvz_strate:
	test	edx, edx
	jne	SHORT $LN6@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+32
$LN6@kvz_strate:

; 258  :   if (strcmp(strategy_name, "mmx") == 0) kvz_g_strategies_available.intel_flags.mmx++;

	lea	r8, OFFSET FLAT:$SG4294954362
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL35@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN36@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL35@kvz_strate
$LN36@kvz_strate:
	test	edx, edx
	jne	SHORT $LN7@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available
$LN7@kvz_strate:

; 259  :   if (strcmp(strategy_name, "sse") == 0) kvz_g_strategies_available.intel_flags.sse++;

	lea	r8, OFFSET FLAT:$SG4294954361
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL33@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN34@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL33@kvz_strate
$LN34@kvz_strate:
	test	edx, edx
	jne	SHORT $LN8@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+4
$LN8@kvz_strate:

; 260  :   if (strcmp(strategy_name, "sse2") == 0) kvz_g_strategies_available.intel_flags.sse2++;

	lea	r8, OFFSET FLAT:$SG4294954360
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL31@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN32@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL31@kvz_strate
$LN32@kvz_strate:
	test	edx, edx
	jne	SHORT $LN9@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+8
$LN9@kvz_strate:

; 261  :   if (strcmp(strategy_name, "sse3") == 0) kvz_g_strategies_available.intel_flags.sse3++;

	lea	r8, OFFSET FLAT:$SG4294954359
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL29@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN30@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL29@kvz_strate
$LN30@kvz_strate:
	test	edx, edx
	jne	SHORT $LN10@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+12
$LN10@kvz_strate:

; 262  :   if (strcmp(strategy_name, "sse41") == 0) kvz_g_strategies_available.intel_flags.sse41++;

	lea	r8, OFFSET FLAT:$SG4294954358
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL27@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN28@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL27@kvz_strate
$LN28@kvz_strate:
	test	edx, edx
	jne	SHORT $LN11@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+20
$LN11@kvz_strate:

; 263  :   if (strcmp(strategy_name, "sse42") == 0) kvz_g_strategies_available.intel_flags.sse42++;

	lea	r8, OFFSET FLAT:$SG4294954357
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL25@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN26@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL25@kvz_strate
$LN26@kvz_strate:
	test	edx, edx
	jne	SHORT $LN12@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+24
$LN12@kvz_strate:

; 264  :   if (strcmp(strategy_name, "ssse3") == 0) kvz_g_strategies_available.intel_flags.ssse3++;

	lea	r8, OFFSET FLAT:$SG4294954356
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL23@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN24@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL23@kvz_strate
$LN24@kvz_strate:
	test	edx, edx
	jne	SHORT $LN13@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+16
$LN13@kvz_strate:

; 265  :   if (strcmp(strategy_name, "altivec") == 0) kvz_g_strategies_available.powerpc_flags.altivec++;

	lea	r8, OFFSET FLAT:$SG4294954355
	mov	rax, rbx
	sub	r8, rbx
	npad	6
$LL21@kvz_strate:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN22@kvz_strate
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL21@kvz_strate
$LN22@kvz_strate:
	test	edx, edx
	jne	SHORT $LN14@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+40
$LN14@kvz_strate:

; 266  :   if (strcmp(strategy_name, "neon") == 0) kvz_g_strategies_available.arm_flags.neon++;

	lea	rdx, OFFSET FLAT:$SG4294954354
	sub	rdx, rbx
	npad	9
$LL19@kvz_strate:
	movzx	ecx, BYTE PTR [rbx]
	movzx	eax, BYTE PTR [rbx+rdx]
	sub	ecx, eax
	jne	SHORT $LN20@kvz_strate
	inc	rbx
	test	eax, eax
	jne	SHORT $LL19@kvz_strate
$LN20@kvz_strate:
	test	ecx, ecx
	jne	SHORT $LN15@kvz_strate
	inc	DWORD PTR kvz_g_strategies_available+44
$LN15@kvz_strate:

; 267  : 
; 268  : #ifdef DEBUG_STRATEGYSELECTOR
; 269  :   fprintf(stderr, "Registered strategy %s:%s with priority %d (%p)\n", type, strategy_name, priority, fptr);
; 270  : #endif //DEBUG_STRATEGYSELECTOR
; 271  :   
; 272  :   return 1;

	mov	eax, 1
$LN1@kvz_strate:

; 273  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
kvz_strategyselector_register ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
_TEXT	SEGMENT
buffer$ = 48
strategies$ = 336
strategy_type$ = 344
strategyselector_choose_for PROC

; 275  : static void* strategyselector_choose_for(const strategy_list_t * const strategies, const char * const strategy_type) {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 304				; 00000130H

; 276  :   unsigned int max_priority = 0;
; 277  :   int max_priority_i = -1;

	mov	rbp, -1
	mov	rdi, rdx

; 278  :   char buffer[256];
; 279  :   char *override = NULL;
; 280  :   int i = 0;
; 281  :   
; 282  :   // Because VS doesn't support snprintf, let's assert that there is
; 283  :   // enough room in the buffer. Max length for strategy type is
; 284  :   // buffersize (256) - prefix including terminating zero.
; 285  :   assert(strlen(strategy_type) < 256 - sizeof("KVAZAAR_OVERRIDE_") );

	mov	rax, rbp
	mov	r14, rcx
	xor	esi, esi
$LL58@strategyse:
	inc	rax
	cmp	BYTE PTR [rdx+rax], sil
	jne	SHORT $LL58@strategyse
	cmp	rax, 238				; 000000eeH
	jb	SHORT $LN23@strategyse
	mov	r8d, 285				; 0000011dH
	lea	rdx, OFFSET FLAT:$SG4294954353
	lea	rcx, OFFSET FLAT:$SG4294954352
	call	QWORD PTR __imp__wassert
$LN23@strategyse:

; 286  :   sprintf(buffer, "KVAZAAR_OVERRIDE_%s", strategy_type);

	mov	r8, rdi
	mov	QWORD PTR [rsp+336], r15
	lea	rdx, OFFSET FLAT:$SG4294954351
	lea	rcx, QWORD PTR buffer$[rsp]
	call	sprintf

; 287  : 
; 288  :   override = getenv(buffer);

	lea	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_getenv

; 289  :   
; 290  :   for (i=0; i < strategies->count; ++i) {

	mov	r11d, DWORD PTR [r14]
	mov	r10d, esi
	mov	rbx, rax
	test	r11d, r11d
	je	SHORT $LN29@strategyse

; 291  :     if (strcmp(strategies->strategies[i].type, strategy_type) == 0) {

	mov	r15, QWORD PTR [r14+8]
	lea	r9, QWORD PTR [r15+16]
	npad	1
$LL4@strategyse:
	mov	rcx, QWORD PTR [r9-16]
	mov	r8, rdi
	sub	r8, rcx
	npad	6
$LL56@strategyse:
	movzx	edx, BYTE PTR [rcx]
	movzx	eax, BYTE PTR [rcx+r8]
	sub	edx, eax
	jne	SHORT $LN57@strategyse
	inc	rcx
	test	eax, eax
	jne	SHORT $LL56@strategyse
$LN57@strategyse:
	test	edx, edx
	jne	SHORT $LN2@strategyse

; 292  :       if (override && strcmp(strategies->strategies[i].strategy_name, override) == 0) {

	test	rbx, rbx
	je	SHORT $LN6@strategyse
	mov	rax, QWORD PTR [r9-8]
	mov	r8, rbx
	sub	r8, rax
	npad	10
$LL54@strategyse:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN55@strategyse
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL54@strategyse
$LN55@strategyse:
	test	edx, edx
	je	SHORT $LN25@strategyse
$LN6@strategyse:

; 295  :       }
; 296  :       if (strategies->strategies[i].priority >= max_priority) {

	mov	eax, DWORD PTR [r9]
	cmp	eax, esi
	jb	SHORT $LN2@strategyse

; 297  :         max_priority_i = i;

	mov	ebp, r10d

; 298  :         max_priority = strategies->strategies[i].priority;

	mov	esi, eax
$LN2@strategyse:

; 289  :   
; 290  :   for (i=0; i < strategies->count; ++i) {

	inc	r10d
	add	r9, 32					; 00000020H
	cmp	r10d, r11d
	jb	SHORT $LL4@strategyse
$LN29@strategyse:

; 299  :       }
; 300  :     }
; 301  :   }
; 302  :   
; 303  :   if (override) {

	test	rbx, rbx
	je	SHORT $LN8@strategyse

; 304  :     fprintf(stderr, "%s environment variable present, but no strategy %s was found!\n", buffer, override);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, rbx
	lea	r8, QWORD PTR buffer$[rsp]
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954349
	call	fprintf
$LN60@strategyse:

; 341  : }

	xor	eax, eax
	jmp	$LN1@strategyse
$LN25@strategyse:

; 293  :         fprintf(stderr, "%s environment variable present, choosing %s:%s\n", buffer, strategy_type, strategies->strategies[i].strategy_name);

	movsxd	rbx, r10d
	mov	ecx, 2
	shl	rbx, 5
	call	QWORD PTR __imp___acrt_iob_func
	mov	rdx, QWORD PTR [rbx+r15+8]
	lea	r8, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954350
	mov	r9, rdi
	call	fprintf

; 294  :         return strategies->strategies[i].fptr;

	mov	rax, QWORD PTR [r14+8]
	mov	rax, QWORD PTR [rbx+rax+24]
	jmp	$LN1@strategyse
$LN8@strategyse:

; 305  :     return NULL;
; 306  :   }
; 307  : 
; 308  : #ifdef DEBUG_STRATEGYSELECTOR
; 309  :   fprintf(stderr, "Choosing strategy for %s:\n", strategy_type);
; 310  :   for (i=0; i < strategies->count; ++i) {
; 311  :     if (strcmp(strategies->strategies[i].type, strategy_type) == 0) {
; 312  :       if (i != max_priority_i) {
; 313  :         fprintf(stderr, "- %s (%d, %p)\n", strategies->strategies[i].strategy_name, strategies->strategies[i].priority, strategies->strategies[i].fptr);
; 314  :       } else {
; 315  :         fprintf(stderr, "> %s (%d, %p)\n", strategies->strategies[i].strategy_name, strategies->strategies[i].priority, strategies->strategies[i].fptr);
; 316  :       }
; 317  :     }
; 318  :   }
; 319  : #endif //DEBUG_STRATEGYSELECTOR
; 320  :   
; 321  :   
; 322  :   if (max_priority_i == -1) {

	cmp	ebp, -1
	je	SHORT $LN60@strategyse

; 323  :     return NULL;
; 324  :   }
; 325  : 
; 326  :   //Check what strategy we are going to use
; 327  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "avx") == 0) kvz_g_strategies_in_use.intel_flags.avx++;

	movsxd	r11, ebp
	lea	r9, OFFSET FLAT:$SG4294954348
	shl	r11, 5
	add	r11, QWORD PTR [r14+8]
	mov	rax, QWORD PTR [r11+8]
	mov	rcx, rax
	sub	r9, rax
	npad	1
$LL52@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN53@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL52@strategyse
$LN53@strategyse:
	mov	r9d, DWORD PTR kvz_g_strategies_in_use+28
	test	r8d, r8d
	jne	SHORT $LN10@strategyse
	inc	r9d
	mov	DWORD PTR kvz_g_strategies_in_use+28, r9d
$LN10@strategyse:

; 328  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "x86_asm_avx") == 0) kvz_g_strategies_in_use.intel_flags.avx++;

	lea	r10, OFFSET FLAT:$SG4294954347
	mov	rcx, rax
	sub	r10, rax
	npad	8
$LL50@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r10]
	sub	r8d, edx
	jne	SHORT $LN51@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL50@strategyse
$LN51@strategyse:
	test	r8d, r8d
	jne	SHORT $LN11@strategyse
	inc	r9d
	mov	DWORD PTR kvz_g_strategies_in_use+28, r9d
$LN11@strategyse:

; 329  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "avx2") == 0) kvz_g_strategies_in_use.intel_flags.avx2++;

	lea	r9, OFFSET FLAT:$SG4294954346
	mov	rcx, rax
	sub	r9, rax
$LL48@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN49@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL48@strategyse
$LN49@strategyse:
	test	r8d, r8d
	jne	SHORT $LN12@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+32
$LN12@strategyse:

; 330  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "mmx") == 0) kvz_g_strategies_in_use.intel_flags.mmx++;

	lea	r9, OFFSET FLAT:$SG4294954345
	mov	rcx, rax
	sub	r9, rax
	npad	2
$LL46@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN47@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL46@strategyse
$LN47@strategyse:
	test	r8d, r8d
	jne	SHORT $LN13@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use
$LN13@strategyse:

; 331  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse") == 0) kvz_g_strategies_in_use.intel_flags.sse++;

	lea	r9, OFFSET FLAT:$SG4294954344
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL44@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN45@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL44@strategyse
$LN45@strategyse:
	test	r8d, r8d
	jne	SHORT $LN14@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+4
$LN14@strategyse:

; 332  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse2") == 0) kvz_g_strategies_in_use.intel_flags.sse2++;

	lea	r9, OFFSET FLAT:$SG4294954343
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL42@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN43@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL42@strategyse
$LN43@strategyse:
	test	r8d, r8d
	jne	SHORT $LN15@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+8
$LN15@strategyse:

; 333  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse3") == 0) kvz_g_strategies_in_use.intel_flags.sse3++;

	lea	r9, OFFSET FLAT:$SG4294954342
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL40@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN41@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL40@strategyse
$LN41@strategyse:
	test	r8d, r8d
	jne	SHORT $LN16@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+12
$LN16@strategyse:

; 334  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse41") == 0) kvz_g_strategies_in_use.intel_flags.sse41++;

	lea	r9, OFFSET FLAT:$SG4294954341
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL38@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN39@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL38@strategyse
$LN39@strategyse:
	test	r8d, r8d
	jne	SHORT $LN17@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+20
$LN17@strategyse:

; 335  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse42") == 0) kvz_g_strategies_in_use.intel_flags.sse42++;

	lea	r9, OFFSET FLAT:$SG4294954340
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL36@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN37@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL36@strategyse
$LN37@strategyse:
	test	r8d, r8d
	jne	SHORT $LN18@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+24
$LN18@strategyse:

; 336  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "ssse3") == 0) kvz_g_strategies_in_use.intel_flags.ssse3++;

	lea	r9, OFFSET FLAT:$SG4294954339
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL34@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN35@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL34@strategyse
$LN35@strategyse:
	test	r8d, r8d
	jne	SHORT $LN19@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+16
$LN19@strategyse:

; 337  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "altivec") == 0) kvz_g_strategies_in_use.powerpc_flags.altivec++;

	lea	r9, OFFSET FLAT:$SG4294954338
	mov	rcx, rax
	sub	r9, rax
	npad	3
$LL32@strategyse:
	movzx	r8d, BYTE PTR [rcx]
	movzx	edx, BYTE PTR [rcx+r9]
	sub	r8d, edx
	jne	SHORT $LN33@strategyse
	inc	rcx
	test	edx, edx
	jne	SHORT $LL32@strategyse
$LN33@strategyse:
	test	r8d, r8d
	jne	SHORT $LN20@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+40
$LN20@strategyse:

; 338  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "neon") == 0) kvz_g_strategies_in_use.arm_flags.neon++;

	lea	r8, OFFSET FLAT:$SG4294954337
	sub	r8, rax
	npad	6
$LL30@strategyse:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN31@strategyse
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL30@strategyse
$LN31@strategyse:
	test	edx, edx
	jne	SHORT $LN21@strategyse
	inc	DWORD PTR kvz_g_strategies_in_use+44
$LN21@strategyse:

; 339  :   
; 340  :   return strategies->strategies[max_priority_i].fptr;

	mov	rax, QWORD PTR [r11+24]
$LN1@strategyse:
	mov	r15, QWORD PTR [rsp+336]

; 341  : }

	lea	r11, QWORD PTR [rsp+304]
	mov	rbx, QWORD PTR [r11+40]
	mov	rbp, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
strategyselector_choose_for ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
_TEXT	SEGMENT
vendor_info$ = 0
level$ = 32
sublevel$dead$ = 40
cpu_info$ = 48
get_cpuid PROC

; 364  : static INLINE int get_cpuid(unsigned level, unsigned sublevel, cpuid_t *cpu_info) {

	push	rbx
	sub	rsp, 16
	mov	r9d, ecx

; 365  :   int vendor_info[4] = { 0, 0, 0, 0 };

	mov	DWORD PTR vendor_info$[rsp], 0

; 366  :   __cpuidex(vendor_info, 0, 0);

	xor	ecx, ecx
	xor	eax, eax
	cpuid

; 367  : 
; 368  :   // Check highest supported function.
; 369  :   if (level > vendor_info[0]) return 0;

	cmp	r9d, eax
	jbe	SHORT $LN2@get_cpuid
	xor	eax, eax

; 379  : }

	add	rsp, 16
	pop	rbx
	ret	0
$LN2@get_cpuid:

; 370  :   
; 371  :   int ms_cpu_info[4] = { cpu_info->eax, cpu_info->ebx, cpu_info->ecx, cpu_info->edx };
; 372  :   __cpuidex(ms_cpu_info, level, sublevel);

	mov	eax, r9d
	xor	ecx, ecx
	cpuid

; 373  :   cpu_info->eax = ms_cpu_info[0];

	mov	DWORD PTR [r8], eax

; 374  :   cpu_info->ebx = ms_cpu_info[1];
; 375  :   cpu_info->ecx = ms_cpu_info[2];
; 376  :   cpu_info->edx = ms_cpu_info[3];
; 377  : 
; 378  :   return 1;

	mov	eax, 1
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 379  : }

	add	rsp, 16
	pop	rbx
	ret	0
get_cpuid ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
_TEXT	SEGMENT
ms_cpu_info$3 = 32
vendor_info$4 = 32
ms_cpu_info$5 = 32
vendor_info$6 = 32
systeminfo$7 = 48
cpuid$ = 112
set_hardware_flags PROC

; 452  : static void set_hardware_flags(int32_t cpuid) {

	mov	r11, rsp
	sub	rsp, 104				; 00000068H
	xorps	xmm0, xmm0

; 453  :   FILL(kvz_g_hardware_flags, 0);

	xor	eax, eax
	mov	QWORD PTR kvz_g_hardware_flags+48, rax
	movups	XMMWORD PTR kvz_g_hardware_flags, xmm0
	movups	XMMWORD PTR kvz_g_hardware_flags+16, xmm0
	movups	XMMWORD PTR kvz_g_hardware_flags+32, xmm0

; 454  : 
; 455  : #if COMPILE_INTEL
; 456  :   if (cpuid) {

	test	ecx, ecx
	je	$LN14@set_hardwa

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	QWORD PTR [r11+8], rbx

; 366  :   __cpuidex(vendor_info, 0, 0);

	xor	ecx, ecx

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	QWORD PTR [r11+16], rbp

; 369  :   if (level > vendor_info[0]) return 0;

	mov	ebp, 1

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	QWORD PTR [r11+24], rsi
	mov	QWORD PTR [r11+32], rdi

; 366  :   __cpuidex(vendor_info, 0, 0);

	cpuid

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	QWORD PTR [r11-8], r14
	xor	r14d, r14d

; 366  :   __cpuidex(vendor_info, 0, 0);

	mov	DWORD PTR vendor_info$6[rsp+4], ebx

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	edi, r14d
	mov	esi, r14d

; 369  :   if (level > vendor_info[0]) return 0;

	cmp	eax, ebp
	jb	SHORT $LN31@set_hardwa

; 370  :   
; 371  :   int ms_cpu_info[4] = { cpu_info->eax, cpu_info->ebx, cpu_info->ecx, cpu_info->edx };
; 372  :   __cpuidex(ms_cpu_info, level, sublevel);

	mov	eax, ebp
	xor	ecx, ecx
	cpuid
	mov	esi, edx
	mov	DWORD PTR ms_cpu_info$5[rsp+4], ebx
	mov	edi, ecx
$LN31@set_hardwa:

; 458  :     /* CPU feature bits */
; 459  :     enum {
; 460  :       CPUID1_EDX_MMX = 1 << 23,
; 461  :       CPUID1_EDX_SSE = 1 << 25,
; 462  :       CPUID1_EDX_SSE2 = 1 << 26,
; 463  :       CPUID1_EDX_HYPER_THREADING = 1 << 28,
; 464  :     };
; 465  :     enum {
; 466  :       CPUID1_ECX_SSE3 = 1 << 0,
; 467  :       CPUID1_ECX_SSSE3 = 1 << 9,
; 468  :       CPUID1_ECX_SSE41 = 1 << 19,
; 469  :       CPUID1_ECX_SSE42 = 1 << 20,
; 470  :       CPUID1_ECX_XSAVE = 1 << 26,
; 471  :       CPUID1_ECX_OSXSAVE = 1 << 27,
; 472  :       CPUID1_ECX_AVX = 1 << 28,
; 473  :     };
; 474  :     enum {
; 475  :       CPUID7_EBX_AVX2 = 1 << 5,
; 476  :     };
; 477  :     enum {
; 478  :       XGETBV_XCR0_XMM = 1 << 1,
; 479  :       XGETBV_XCR0_YMM = 1 << 2,
; 480  :     };
; 481  : 
; 482  :     // Dig CPU features with cpuid
; 483  :     get_cpuid(1, 0, &cpuid1);
; 484  : 
; 485  : #ifdef _WIN32
; 486  :     SYSTEM_INFO systeminfo;
; 487  :     GetSystemInfo(&systeminfo);

	lea	rcx, QWORD PTR systeminfo$7[rsp]
	call	QWORD PTR __imp_GetSystemInfo

; 488  : 
; 489  :     kvz_g_hardware_flags.logical_cpu_count = systeminfo.dwNumberOfProcessors;

	mov	eax, DWORD PTR systeminfo$7[rsp+32]

; 490  : #else
; 491  :     kvz_g_hardware_flags.logical_cpu_count = sysconf(_SC_NPROCESSORS_ONLN);
; 492  : #endif
; 493  : 
; 494  :     kvz_g_hardware_flags.physical_cpu_count = kvz_g_hardware_flags.logical_cpu_count;
; 495  :     kvz_g_hardware_flags.intel_flags.hyper_threading = cpuid1.edx & CPUID1_EDX_HYPER_THREADING;

	mov	ecx, esi
	shr	ecx, 28
	and	cl, bpl
	mov	DWORD PTR kvz_g_hardware_flags+48, eax
	mov	BYTE PTR kvz_g_hardware_flags+36, cl
	mov	DWORD PTR kvz_g_hardware_flags+52, eax

; 496  :     if (kvz_g_hardware_flags.intel_flags.hyper_threading) {

	je	SHORT $LN3@set_hardwa

; 497  :       kvz_g_hardware_flags.physical_cpu_count /= 2;

	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR kvz_g_hardware_flags+52, eax
$LN3@set_hardwa:

; 498  :     }
; 499  :     
; 500  :     // EDX
; 501  :     if (cpuid1.edx & CPUID1_EDX_MMX)   kvz_g_hardware_flags.intel_flags.mmx = 1;

	mov	eax, DWORD PTR kvz_g_hardware_flags
	bt	esi, 23
	cmovb	eax, ebp

; 502  :     if (cpuid1.edx & CPUID1_EDX_SSE)   kvz_g_hardware_flags.intel_flags.sse = 1;

	bt	esi, 25
	mov	DWORD PTR kvz_g_hardware_flags, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+4
	cmovb	eax, ebp

; 503  :     if (cpuid1.edx & CPUID1_EDX_SSE2)  kvz_g_hardware_flags.intel_flags.sse2 = 1;

	bt	esi, 26

; 504  :     // ECX
; 505  :     if (cpuid1.ecx & CPUID1_ECX_SSE3)  kvz_g_hardware_flags.intel_flags.sse3 = 1;;
; 506  :     if (cpuid1.ecx & CPUID1_ECX_SSSE3) kvz_g_hardware_flags.intel_flags.ssse3 = 1;
; 507  :     if (cpuid1.ecx & CPUID1_ECX_SSE41) kvz_g_hardware_flags.intel_flags.sse41 = 1;
; 508  :     if (cpuid1.ecx & CPUID1_ECX_SSE42) kvz_g_hardware_flags.intel_flags.sse42 = 1;

	mov	rsi, QWORD PTR [rsp+128]
	mov	DWORD PTR kvz_g_hardware_flags+4, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+8
	cmovb	eax, ebp
	test	dil, bpl
	mov	DWORD PTR kvz_g_hardware_flags+8, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+12
	cmovne	eax, ebp
	bt	edi, 9
	mov	DWORD PTR kvz_g_hardware_flags+12, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+16
	cmovb	eax, ebp
	bt	edi, 19
	mov	DWORD PTR kvz_g_hardware_flags+16, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+20
	cmovb	eax, ebp
	bt	edi, 20
	mov	DWORD PTR kvz_g_hardware_flags+20, eax
	mov	eax, DWORD PTR kvz_g_hardware_flags+24
	cmovb	eax, ebp
	mov	DWORD PTR kvz_g_hardware_flags+24, eax

; 509  :     
; 510  :     // Check hardware and OS support for xsave and xgetbv.
; 511  :     if (cpuid1.ecx & (CPUID1_ECX_XSAVE | CPUID1_ECX_OSXSAVE)) {

	test	edi, 201326592				; 0c000000H
	je	SHORT $LN57@set_hardwa

; 512  :       uint64_t xcr0 = 0;
; 513  :       // Use _XCR_XFEATURE_ENABLED_MASK to check if _xgetbv intrinsic is
; 514  :       // supported by the compiler.
; 515  : #ifdef _XCR_XFEATURE_ENABLED_MASK
; 516  :       xcr0 = _xgetbv(_XCR_XFEATURE_ENABLED_MASK);

	xor	ecx, ecx
	xgetbv
	shl	rdx, 32					; 00000020H
	or	rdx, rax

; 517  : #elif defined(__GNUC__)
; 518  :       unsigned eax = 0, edx = 0;
; 519  :       asm("xgetbv" : "=a"(eax), "=d"(edx) : "c" (0));
; 520  :       xcr0 = (uint64_t)edx << 32 | eax;
; 521  : #endif
; 522  :       bool avx_support = cpuid1.ecx & CPUID1_ECX_AVX || false;
; 523  :       bool xmm_support = xcr0 & XGETBV_XCR0_XMM || false;

	mov	rax, rdx

; 524  :       bool ymm_support = xcr0 & XGETBV_XCR0_YMM || false;

	and	edx, 4
	and	eax, 2
	bt	edi, 28

; 525  : 
; 526  :       if (avx_support && xmm_support && ymm_support) {

	jae	SHORT $LN12@set_hardwa
	test	rax, rax
	je	SHORT $LN12@set_hardwa
	test	rdx, rdx
	je	SHORT $LN12@set_hardwa

; 527  :         kvz_g_hardware_flags.intel_flags.avx = 1;

	mov	DWORD PTR kvz_g_hardware_flags+28, ebp

; 528  :       }
; 529  : 
; 530  :       if (kvz_g_hardware_flags.intel_flags.avx) {

	jmp	SHORT $LN53@set_hardwa
$LN12@set_hardwa:
	cmp	DWORD PTR kvz_g_hardware_flags+28, ecx
	je	SHORT $LN57@set_hardwa
$LN53@set_hardwa:

; 366  :   __cpuidex(vendor_info, 0, 0);

	xor	eax, eax
	cpuid
	mov	DWORD PTR vendor_info$4[rsp+4], ebx

; 367  : 
; 368  :   // Check highest supported function.
; 369  :   if (level > vendor_info[0]) return 0;

	cmp	eax, 7
	jb	SHORT $LN57@set_hardwa

; 370  :   
; 371  :   int ms_cpu_info[4] = { cpu_info->eax, cpu_info->ebx, cpu_info->ecx, cpu_info->edx };
; 372  :   __cpuidex(ms_cpu_info, level, sublevel);

	xor	ecx, ecx
	mov	eax, 7
	cpuid

; 531  :         cpuid_t cpuid7 = { 0, 0, 0, 0 };
; 532  :         get_cpuid(7, 0, &cpuid7);
; 533  :         if (cpuid7.ebx & CPUID7_EBX_AVX2)  kvz_g_hardware_flags.intel_flags.avx2 = 1;

	mov	eax, DWORD PTR kvz_g_hardware_flags+32
	test	bl, 32					; 00000020H

; 372  :   __cpuidex(ms_cpu_info, level, sublevel);

	mov	DWORD PTR ms_cpu_info$3[rsp+4], ebx

; 531  :         cpuid_t cpuid7 = { 0, 0, 0, 0 };
; 532  :         get_cpuid(7, 0, &cpuid7);
; 533  :         if (cpuid7.ebx & CPUID7_EBX_AVX2)  kvz_g_hardware_flags.intel_flags.avx2 = 1;

	cmovne	eax, ebp
	mov	DWORD PTR kvz_g_hardware_flags+32, eax
$LN57@set_hardwa:
	mov	rdi, QWORD PTR [rsp+136]
	mov	rbp, QWORD PTR [rsp+120]
	mov	rbx, QWORD PTR [rsp+112]
	mov	r14, QWORD PTR [rsp+96]
$LN14@set_hardwa:

; 534  :       }
; 535  :     }
; 536  :   }
; 537  : 
; 538  :   fprintf(stderr, "Compiled: INTEL, flags:");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954336
	call	fprintf

; 539  : #if COMPILE_INTEL_MMX
; 540  :   fprintf(stderr, " MMX");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954335
	call	fprintf

; 541  : #endif
; 542  : #if COMPILE_INTEL_SSE
; 543  :   fprintf(stderr, " SSE");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954334
	call	fprintf

; 544  : #endif
; 545  : #if COMPILE_INTEL_SSE2
; 546  :   fprintf(stderr, " SSE2");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954333
	call	fprintf

; 547  : #endif
; 548  : #if COMPILE_INTEL_SSE3
; 549  :   fprintf(stderr, " SSE3");
; 550  : #endif
; 551  : #if COMPILE_INTEL_SSSE3
; 552  :   fprintf(stderr, " SSSE3");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954332
	call	fprintf

; 553  : #endif
; 554  : #if COMPILE_INTEL_SSE41
; 555  :   fprintf(stderr, " SSE41");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954331
	call	fprintf

; 556  : #endif
; 557  : #if COMPILE_INTEL_SSE42
; 558  :   fprintf(stderr, " SSE42");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954330
	call	fprintf

; 559  : #endif
; 560  : #if COMPILE_INTEL_AVX
; 561  :   fprintf(stderr, " AVX");
; 562  : #endif
; 563  : #if COMPILE_INTEL_AVX2
; 564  :   fprintf(stderr, " AVX2");
; 565  : #endif
; 566  :   fprintf(stderr, "\nDetected: INTEL, flags:");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954329
	call	fprintf

; 567  :   if (kvz_g_hardware_flags.intel_flags.mmx) fprintf(stderr, " MMX");

	cmp	DWORD PTR kvz_g_hardware_flags, 0
	je	SHORT $LN15@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954328
	call	fprintf
$LN15@set_hardwa:

; 568  :   if (kvz_g_hardware_flags.intel_flags.sse) fprintf(stderr, " SSE");

	cmp	DWORD PTR kvz_g_hardware_flags+4, 0
	je	SHORT $LN16@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954327
	call	fprintf
$LN16@set_hardwa:

; 569  :   if (kvz_g_hardware_flags.intel_flags.sse2) fprintf(stderr, " SSE2");

	cmp	DWORD PTR kvz_g_hardware_flags+8, 0
	je	SHORT $LN17@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954326
	call	fprintf
$LN17@set_hardwa:

; 570  :   if (kvz_g_hardware_flags.intel_flags.sse3) fprintf(stderr, " SSE3");

	cmp	DWORD PTR kvz_g_hardware_flags+12, 0
	je	SHORT $LN18@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954325
	call	fprintf
$LN18@set_hardwa:

; 571  :   if (kvz_g_hardware_flags.intel_flags.ssse3) fprintf(stderr, " SSSE3");

	cmp	DWORD PTR kvz_g_hardware_flags+16, 0
	je	SHORT $LN19@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954324
	call	fprintf
$LN19@set_hardwa:

; 572  :   if (kvz_g_hardware_flags.intel_flags.sse41) fprintf(stderr, " SSE41");

	cmp	DWORD PTR kvz_g_hardware_flags+20, 0
	je	SHORT $LN20@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954323
	call	fprintf
$LN20@set_hardwa:

; 573  :   if (kvz_g_hardware_flags.intel_flags.sse42) fprintf(stderr, " SSE42");

	cmp	DWORD PTR kvz_g_hardware_flags+24, 0
	je	SHORT $LN21@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954322
	call	fprintf
$LN21@set_hardwa:

; 574  :   if (kvz_g_hardware_flags.intel_flags.avx) fprintf(stderr, " AVX");

	cmp	DWORD PTR kvz_g_hardware_flags+28, 0
	je	SHORT $LN22@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954321
	call	fprintf
$LN22@set_hardwa:

; 575  :   if (kvz_g_hardware_flags.intel_flags.avx2) fprintf(stderr, " AVX2");

	cmp	DWORD PTR kvz_g_hardware_flags+32, 0
	je	SHORT $LN23@set_hardwa
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954320
	call	fprintf
$LN23@set_hardwa:

; 576  :   fprintf(stderr, "\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294954319

; 577  : #endif //COMPILE_INTEL
; 578  : 
; 579  : #if COMPILE_POWERPC
; 580  :   if (cpuid) {
; 581  :     kvz_g_hardware_flags.powerpc_flags.altivec = altivec_available();
; 582  :   }
; 583  :   
; 584  :   fprintf(stderr, "Compiled: PowerPC, flags:");
; 585  : #if COMPILE_POWERPC_ALTIVEC
; 586  :   fprintf(stderr, " AltiVec");
; 587  : #endif
; 588  :   fprintf(stderr, "\nDetected: PowerPC, flags:");
; 589  :   if (kvz_g_hardware_flags.powerpc_flags.altivec) fprintf(stderr, " AltiVec");
; 590  :   fprintf(stderr, "\n");
; 591  : #endif
; 592  :   
; 593  : }

	add	rsp, 104				; 00000068H

; 576  :   fprintf(stderr, "\n");

	jmp	fprintf
set_hardware_flags ENDP
_TEXT	ENDS
END
