; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	kvz_g_dct_8
PUBLIC	kvz_g_dst_4
PUBLIC	kvz_g_dct_4_t
PUBLIC	kvz_g_dct_32
PUBLIC	kvz_g_dct_4
PUBLIC	kvz_g_dct_16
PUBLIC	kvz_g_dct_16_t
PUBLIC	kvz_g_dst_4_t
PUBLIC	kvz_g_dct_32_t
PUBLIC	kvz_g_dct_8_t
cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+22
kvz_g_dct_8 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
kvz_g_dst_4 DW	01dH
	DW	037H
	DW	04aH
	DW	054H
	DW	04aH
	DW	04aH
	DW	00H
	DW	0ffb6H
	DW	054H
	DW	0ffe3H
	DW	0ffb6H
	DW	037H
	DW	037H
	DW	0ffacH
	DW	04aH
	DW	0ffe3H
kvz_g_dct_4_t DW 040H
	DW	053H
	DW	040H
	DW	024H
	DW	040H
	DW	024H
	DW	0ffc0H
	DW	0ffadH
	DW	040H
	DW	0ffdcH
	DW	0ffc0H
	DW	053H
	DW	040H
	DW	0ffadH
	DW	040H
	DW	0ffdcH
kvz_g_dct_32 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	05aH
	DW	05aH
	DW	058H
	DW	055H
	DW	052H
	DW	04eH
	DW	049H
	DW	043H
	DW	03dH
	DW	036H
	DW	02eH
	DW	026H
	DW	01fH
	DW	016H
	DW	0dH
	DW	04H
	DW	0fffcH
	DW	0fff3H
	DW	0ffeaH
	DW	0ffe1H
	DW	0ffdaH
	DW	0ffd2H
	DW	0ffcaH
	DW	0ffc3H
	DW	0ffbdH
	DW	0ffb7H
	DW	0ffb2H
	DW	0ffaeH
	DW	0ffabH
	DW	0ffa8H
	DW	0ffa6H
	DW	0ffa6H
	DW	05aH
	DW	057H
	DW	050H
	DW	046H
	DW	039H
	DW	02bH
	DW	019H
	DW	09H
	DW	0fff7H
	DW	0ffe7H
	DW	0ffd5H
	DW	0ffc7H
	DW	0ffbaH
	DW	0ffb0H
	DW	0ffa9H
	DW	0ffa6H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb0H
	DW	0ffbaH
	DW	0ffc7H
	DW	0ffd5H
	DW	0ffe7H
	DW	0fff7H
	DW	09H
	DW	019H
	DW	02bH
	DW	039H
	DW	046H
	DW	050H
	DW	057H
	DW	05aH
	DW	05aH
	DW	052H
	DW	043H
	DW	02eH
	DW	016H
	DW	0fffcH
	DW	0ffe1H
	DW	0ffcaH
	DW	0ffb7H
	DW	0ffabH
	DW	0ffa6H
	DW	0ffa8H
	DW	0ffb2H
	DW	0ffc3H
	DW	0ffdaH
	DW	0fff3H
	DW	0dH
	DW	026H
	DW	03dH
	DW	04eH
	DW	058H
	DW	05aH
	DW	055H
	DW	049H
	DW	036H
	DW	01fH
	DW	04H
	DW	0ffeaH
	DW	0ffd2H
	DW	0ffbdH
	DW	0ffaeH
	DW	0ffa6H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	058H
	DW	043H
	DW	01fH
	DW	0fff3H
	DW	0ffcaH
	DW	0ffaeH
	DW	0ffa6H
	DW	0ffb2H
	DW	0ffd2H
	DW	0fffcH
	DW	026H
	DW	049H
	DW	05aH
	DW	055H
	DW	03dH
	DW	016H
	DW	0ffeaH
	DW	0ffc3H
	DW	0ffabH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffdaH
	DW	04H
	DW	02eH
	DW	04eH
	DW	05aH
	DW	052H
	DW	036H
	DW	0dH
	DW	0ffe1H
	DW	0ffbdH
	DW	0ffa8H
	DW	057H
	DW	039H
	DW	09H
	DW	0ffd5H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffe7H
	DW	019H
	DW	046H
	DW	05aH
	DW	050H
	DW	02bH
	DW	0fff7H
	DW	0ffc7H
	DW	0ffa9H
	DW	0ffa9H
	DW	0ffc7H
	DW	0fff7H
	DW	02bH
	DW	050H
	DW	05aH
	DW	046H
	DW	019H
	DW	0ffe7H
	DW	0ffbaH
	DW	0ffa6H
	DW	0ffb0H
	DW	0ffd5H
	DW	09H
	DW	039H
	DW	057H
	DW	055H
	DW	02eH
	DW	0fff3H
	DW	0ffbdH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffeaH
	DW	026H
	DW	052H
	DW	058H
	DW	036H
	DW	0fffcH
	DW	0ffc3H
	DW	0ffa6H
	DW	0ffb2H
	DW	0ffe1H
	DW	01fH
	DW	04eH
	DW	05aH
	DW	03dH
	DW	04H
	DW	0ffcaH
	DW	0ffa8H
	DW	0ffaeH
	DW	0ffdaH
	DW	016H
	DW	049H
	DW	05aH
	DW	043H
	DW	0dH
	DW	0ffd2H
	DW	0ffabH
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	052H
	DW	016H
	DW	0ffcaH
	DW	0ffa6H
	DW	0ffc3H
	DW	0dH
	DW	04eH
	DW	055H
	DW	01fH
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffbdH
	DW	04H
	DW	049H
	DW	058H
	DW	026H
	DW	0ffdaH
	DW	0ffa8H
	DW	0ffb7H
	DW	0fffcH
	DW	043H
	DW	05aH
	DW	02eH
	DW	0ffe1H
	DW	0ffabH
	DW	0ffb2H
	DW	0fff3H
	DW	03dH
	DW	05aH
	DW	036H
	DW	0ffeaH
	DW	0ffaeH
	DW	050H
	DW	09H
	DW	0ffbaH
	DW	0ffa9H
	DW	0ffe7H
	DW	039H
	DW	05aH
	DW	02bH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffc7H
	DW	019H
	DW	057H
	DW	046H
	DW	0fff7H
	DW	0ffb0H
	DW	0ffb0H
	DW	0fff7H
	DW	046H
	DW	057H
	DW	019H
	DW	0ffc7H
	DW	0ffa6H
	DW	0ffd5H
	DW	02bH
	DW	05aH
	DW	039H
	DW	0ffe7H
	DW	0ffa9H
	DW	0ffbaH
	DW	09H
	DW	050H
	DW	04eH
	DW	0fffcH
	DW	0ffaeH
	DW	0ffb7H
	DW	0dH
	DW	055H
	DW	043H
	DW	0ffeaH
	DW	0ffa8H
	DW	0ffc3H
	DW	01fH
	DW	05aH
	DW	036H
	DW	0ffdaH
	DW	0ffa6H
	DW	0ffd2H
	DW	02eH
	DW	05aH
	DW	026H
	DW	0ffcaH
	DW	0ffa6H
	DW	0ffe1H
	DW	03dH
	DW	058H
	DW	016H
	DW	0ffbdH
	DW	0ffabH
	DW	0fff3H
	DW	049H
	DW	052H
	DW	04H
	DW	0ffb2H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	049H
	DW	0ffe1H
	DW	0ffa6H
	DW	0ffeaH
	DW	04eH
	DW	043H
	DW	0ffdaH
	DW	0ffa6H
	DW	0fff3H
	DW	052H
	DW	03dH
	DW	0ffd2H
	DW	0ffa8H
	DW	0fffcH
	DW	055H
	DW	036H
	DW	0ffcaH
	DW	0ffabH
	DW	04H
	DW	058H
	DW	02eH
	DW	0ffc3H
	DW	0ffaeH
	DW	0dH
	DW	05aH
	DW	026H
	DW	0ffbdH
	DW	0ffb2H
	DW	016H
	DW	05aH
	DW	01fH
	DW	0ffb7H
	DW	046H
	DW	0ffd5H
	DW	0ffa9H
	DW	09H
	DW	05aH
	DW	019H
	DW	0ffb0H
	DW	0ffc7H
	DW	039H
	DW	050H
	DW	0ffe7H
	DW	0ffa6H
	DW	0fff7H
	DW	057H
	DW	02bH
	DW	0ffbaH
	DW	0ffbaH
	DW	02bH
	DW	057H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffe7H
	DW	050H
	DW	039H
	DW	0ffc7H
	DW	0ffb0H
	DW	019H
	DW	05aH
	DW	09H
	DW	0ffa9H
	DW	0ffd5H
	DW	046H
	DW	043H
	DW	0ffcaH
	DW	0ffb2H
	DW	026H
	DW	055H
	DW	0ffeaH
	DW	0ffa6H
	DW	04H
	DW	05aH
	DW	0dH
	DW	0ffa8H
	DW	0ffe1H
	DW	052H
	DW	02eH
	DW	0ffb7H
	DW	0ffc3H
	DW	03dH
	DW	049H
	DW	0ffd2H
	DW	0ffaeH
	DW	01fH
	DW	058H
	DW	0fff3H
	DW	0ffa6H
	DW	0fffcH
	DW	05aH
	DW	016H
	DW	0ffabH
	DW	0ffdaH
	DW	04eH
	DW	036H
	DW	0ffbdH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	03dH
	DW	0ffb7H
	DW	0ffd2H
	DW	052H
	DW	01fH
	DW	0ffa8H
	DW	0fff3H
	DW	05aH
	DW	0fffcH
	DW	0ffa6H
	DW	016H
	DW	055H
	DW	0ffdaH
	DW	0ffb2H
	DW	036H
	DW	043H
	DW	0ffbdH
	DW	0ffcaH
	DW	04eH
	DW	026H
	DW	0ffabH
	DW	0ffeaH
	DW	05aH
	DW	04H
	DW	0ffa6H
	DW	0dH
	DW	058H
	DW	0ffe1H
	DW	0ffaeH
	DW	02eH
	DW	049H
	DW	0ffc3H
	DW	039H
	DW	0ffb0H
	DW	0ffe7H
	DW	05aH
	DW	0fff7H
	DW	0ffa9H
	DW	02bH
	DW	046H
	DW	0ffbaH
	DW	0ffd5H
	DW	057H
	DW	09H
	DW	0ffa6H
	DW	019H
	DW	050H
	DW	0ffc7H
	DW	0ffc7H
	DW	050H
	DW	019H
	DW	0ffa6H
	DW	09H
	DW	057H
	DW	0ffd5H
	DW	0ffbaH
	DW	046H
	DW	02bH
	DW	0ffa9H
	DW	0fff7H
	DW	05aH
	DW	0ffe7H
	DW	0ffb0H
	DW	039H
	DW	036H
	DW	0ffabH
	DW	0fffcH
	DW	058H
	DW	0ffd2H
	DW	0ffc3H
	DW	052H
	DW	0dH
	DW	0ffa6H
	DW	026H
	DW	043H
	DW	0ffb2H
	DW	0ffeaH
	DW	05aH
	DW	0ffe1H
	DW	0ffb7H
	DW	049H
	DW	01fH
	DW	0ffa6H
	DW	016H
	DW	04eH
	DW	0ffbdH
	DW	0ffdaH
	DW	05aH
	DW	0fff3H
	DW	0ffaeH
	DW	03dH
	DW	02eH
	DW	0ffa8H
	DW	04H
	DW	055H
	DW	0ffcaH
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	02eH
	DW	0ffa6H
	DW	026H
	DW	036H
	DW	0ffa6H
	DW	01fH
	DW	03dH
	DW	0ffa8H
	DW	016H
	DW	043H
	DW	0ffabH
	DW	0dH
	DW	049H
	DW	0ffaeH
	DW	04H
	DW	04eH
	DW	0ffb2H
	DW	0fffcH
	DW	052H
	DW	0ffb7H
	DW	0fff3H
	DW	055H
	DW	0ffbdH
	DW	0ffeaH
	DW	058H
	DW	0ffc3H
	DW	0ffe1H
	DW	05aH
	DW	0ffcaH
	DW	0ffdaH
	DW	05aH
	DW	0ffd2H
	DW	02bH
	DW	0ffa6H
	DW	039H
	DW	019H
	DW	0ffa9H
	DW	046H
	DW	09H
	DW	0ffb0H
	DW	050H
	DW	0fff7H
	DW	0ffbaH
	DW	057H
	DW	0ffe7H
	DW	0ffc7H
	DW	05aH
	DW	0ffd5H
	DW	0ffd5H
	DW	05aH
	DW	0ffc7H
	DW	0ffe7H
	DW	057H
	DW	0ffbaH
	DW	0fff7H
	DW	050H
	DW	0ffb0H
	DW	09H
	DW	046H
	DW	0ffa9H
	DW	019H
	DW	039H
	DW	0ffa6H
	DW	02bH
	DW	026H
	DW	0ffa8H
	DW	049H
	DW	0fffcH
	DW	0ffbdH
	DW	05aH
	DW	0ffd2H
	DW	0ffe1H
	DW	055H
	DW	0ffb2H
	DW	0dH
	DW	03dH
	DW	0ffa6H
	DW	036H
	DW	016H
	DW	0ffaeH
	DW	052H
	DW	0ffeaH
	DW	0ffcaH
	DW	05aH
	DW	0ffc3H
	DW	0fff3H
	DW	04eH
	DW	0ffabH
	DW	01fH
	DW	02eH
	DW	0ffa6H
	DW	043H
	DW	04H
	DW	0ffb7H
	DW	058H
	DW	0ffdaH
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	01fH
	DW	0ffb2H
	DW	05aH
	DW	0ffc3H
	DW	04H
	DW	036H
	DW	0ffa8H
	DW	052H
	DW	0ffdaH
	DW	0ffeaH
	DW	049H
	DW	0ffa6H
	DW	043H
	DW	0fff3H
	DW	0ffd2H
	DW	055H
	DW	0ffabH
	DW	02eH
	DW	0dH
	DW	0ffbdH
	DW	05aH
	DW	0ffb7H
	DW	016H
	DW	026H
	DW	0ffaeH
	DW	058H
	DW	0ffcaH
	DW	0fffcH
	DW	03dH
	DW	0ffa6H
	DW	04eH
	DW	0ffe1H
	DW	019H
	DW	0ffbaH
	DW	05aH
	DW	0ffb0H
	DW	02bH
	DW	09H
	DW	0ffc7H
	DW	057H
	DW	0ffa9H
	DW	039H
	DW	0fff7H
	DW	0ffd5H
	DW	050H
	DW	0ffa6H
	DW	046H
	DW	0ffe7H
	DW	0ffe7H
	DW	046H
	DW	0ffa6H
	DW	050H
	DW	0ffd5H
	DW	0fff7H
	DW	039H
	DW	0ffa9H
	DW	057H
	DW	0ffc7H
	DW	09H
	DW	02bH
	DW	0ffb0H
	DW	05aH
	DW	0ffbaH
	DW	019H
	DW	016H
	DW	0ffc3H
	DW	055H
	DW	0ffa6H
	DW	049H
	DW	0ffdaH
	DW	0fffcH
	DW	02eH
	DW	0ffb2H
	DW	05aH
	DW	0ffaeH
	DW	036H
	DW	0fff3H
	DW	0ffe1H
	DW	043H
	DW	0ffa8H
	DW	058H
	DW	0ffbdH
	DW	01fH
	DW	0dH
	DW	0ffcaH
	DW	052H
	DW	0ffa6H
	DW	04eH
	DW	0ffd2H
	DW	04H
	DW	026H
	DW	0ffb7H
	DW	05aH
	DW	0ffabH
	DW	03dH
	DW	0ffeaH
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	0dH
	DW	0ffdaH
	DW	03dH
	DW	0ffb2H
	DW	058H
	DW	0ffa6H
	DW	055H
	DW	0ffb7H
	DW	036H
	DW	0ffe1H
	DW	04H
	DW	016H
	DW	0ffd2H
	DW	043H
	DW	0ffaeH
	DW	05aH
	DW	0ffa6H
	DW	052H
	DW	0ffbdH
	DW	02eH
	DW	0ffeaH
	DW	0fffcH
	DW	01fH
	DW	0ffcaH
	DW	049H
	DW	0ffabH
	DW	05aH
	DW	0ffa8H
	DW	04eH
	DW	0ffc3H
	DW	026H
	DW	0fff3H
	DW	09H
	DW	0ffe7H
	DW	02bH
	DW	0ffc7H
	DW	046H
	DW	0ffb0H
	DW	057H
	DW	0ffa6H
	DW	05aH
	DW	0ffa9H
	DW	050H
	DW	0ffbaH
	DW	039H
	DW	0ffd5H
	DW	019H
	DW	0fff7H
	DW	0fff7H
	DW	019H
	DW	0ffd5H
	DW	039H
	DW	0ffbaH
	DW	050H
	DW	0ffa9H
	DW	05aH
	DW	0ffa6H
	DW	057H
	DW	0ffb0H
	DW	046H
	DW	0ffc7H
	DW	02bH
	DW	0ffe7H
	DW	09H
	DW	04H
	DW	0fff3H
	DW	016H
	DW	0ffe1H
	DW	026H
	DW	0ffd2H
	DW	036H
	DW	0ffc3H
	DW	043H
	DW	0ffb7H
	DW	04eH
	DW	0ffaeH
	DW	055H
	DW	0ffa8H
	DW	05aH
	DW	0ffa6H
	DW	05aH
	DW	0ffa6H
	DW	058H
	DW	0ffabH
	DW	052H
	DW	0ffb2H
	DW	049H
	DW	0ffbdH
	DW	03dH
	DW	0ffcaH
	DW	02eH
	DW	0ffdaH
	DW	01fH
	DW	0ffeaH
	DW	0dH
	DW	0fffcH
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294952618
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294952617
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294952616
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294952615
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294952614
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294952613
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294952612
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294952611
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294952610
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294952609
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294952608
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294952607
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294952606
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294952605
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294952604
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294952603
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294952602
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294952601
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294952600
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294952599
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294952598
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294952597
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294952596
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294952595
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294952594
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294952593
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294952592
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294952591
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294952590
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294952589
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294952588
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294952587
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294952586
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294952585
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294952584
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294952583
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294952582
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294952581
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294952580
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294952579
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294952578
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294952577
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294952576
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294952575
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294952574
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294952573
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294952572
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294952571
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294952570
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294952569
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294952568
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294952567
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294952566
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294952565
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294952564
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294952563
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294952562
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294952561
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294952560
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294952559
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294952558
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294952557
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294952556
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
kvz_g_dct_4 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+54
kvz_g_dct_16 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	05aH
	DW	057H
	DW	050H
	DW	046H
	DW	039H
	DW	02bH
	DW	019H
	DW	09H
	DW	0fff7H
	DW	0ffe7H
	DW	0ffd5H
	DW	0ffc7H
	DW	0ffbaH
	DW	0ffb0H
	DW	0ffa9H
	DW	0ffa6H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	057H
	DW	039H
	DW	09H
	DW	0ffd5H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffe7H
	DW	019H
	DW	046H
	DW	05aH
	DW	050H
	DW	02bH
	DW	0fff7H
	DW	0ffc7H
	DW	0ffa9H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	050H
	DW	09H
	DW	0ffbaH
	DW	0ffa9H
	DW	0ffe7H
	DW	039H
	DW	05aH
	DW	02bH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffc7H
	DW	019H
	DW	057H
	DW	046H
	DW	0fff7H
	DW	0ffb0H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	046H
	DW	0ffd5H
	DW	0ffa9H
	DW	09H
	DW	05aH
	DW	019H
	DW	0ffb0H
	DW	0ffc7H
	DW	039H
	DW	050H
	DW	0ffe7H
	DW	0ffa6H
	DW	0fff7H
	DW	057H
	DW	02bH
	DW	0ffbaH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	039H
	DW	0ffb0H
	DW	0ffe7H
	DW	05aH
	DW	0fff7H
	DW	0ffa9H
	DW	02bH
	DW	046H
	DW	0ffbaH
	DW	0ffd5H
	DW	057H
	DW	09H
	DW	0ffa6H
	DW	019H
	DW	050H
	DW	0ffc7H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	02bH
	DW	0ffa6H
	DW	039H
	DW	019H
	DW	0ffa9H
	DW	046H
	DW	09H
	DW	0ffb0H
	DW	050H
	DW	0fff7H
	DW	0ffbaH
	DW	057H
	DW	0ffe7H
	DW	0ffc7H
	DW	05aH
	DW	0ffd5H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	019H
	DW	0ffbaH
	DW	05aH
	DW	0ffb0H
	DW	02bH
	DW	09H
	DW	0ffc7H
	DW	057H
	DW	0ffa9H
	DW	039H
	DW	0fff7H
	DW	0ffd5H
	DW	050H
	DW	0ffa6H
	DW	046H
	DW	0ffe7H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	09H
	DW	0ffe7H
	DW	02bH
	DW	0ffc7H
	DW	046H
	DW	0ffb0H
	DW	057H
	DW	0ffa6H
	DW	05aH
	DW	0ffa9H
	DW	050H
	DW	0ffbaH
	DW	039H
	DW	0ffd5H
	DW	019H
	DW	0fff7H
kvz_g_dct_16_t DW 040H
	DW	05aH
	DW	059H
	DW	057H
	DW	053H
	DW	050H
	DW	04bH
	DW	046H
	DW	040H
	DW	039H
	DW	032H
	DW	02bH
	DW	024H
	DW	019H
	DW	012H
	DW	09H
	DW	040H
	DW	057H
	DW	04bH
	DW	039H
	DW	024H
	DW	09H
	DW	0ffeeH
	DW	0ffd5H
	DW	0ffc0H
	DW	0ffb0H
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffadH
	DW	0ffbaH
	DW	0ffceH
	DW	0ffe7H
	DW	040H
	DW	050H
	DW	032H
	DW	09H
	DW	0ffdcH
	DW	0ffbaH
	DW	0ffa7H
	DW	0ffa9H
	DW	0ffc0H
	DW	0ffe7H
	DW	012H
	DW	039H
	DW	053H
	DW	05aH
	DW	04bH
	DW	02bH
	DW	040H
	DW	046H
	DW	012H
	DW	0ffd5H
	DW	0ffadH
	DW	0ffa9H
	DW	0ffceH
	DW	09H
	DW	040H
	DW	05aH
	DW	04bH
	DW	019H
	DW	0ffdcH
	DW	0ffb0H
	DW	0ffa7H
	DW	0ffc7H
	DW	040H
	DW	039H
	DW	0ffeeH
	DW	0ffb0H
	DW	0ffadH
	DW	0ffe7H
	DW	032H
	DW	05aH
	DW	040H
	DW	0fff7H
	DW	0ffb5H
	DW	0ffa9H
	DW	0ffdcH
	DW	02bH
	DW	059H
	DW	046H
	DW	040H
	DW	02bH
	DW	0ffceH
	DW	0ffa6H
	DW	0ffdcH
	DW	039H
	DW	059H
	DW	019H
	DW	0ffc0H
	DW	0ffa9H
	DW	0ffeeH
	DW	046H
	DW	053H
	DW	09H
	DW	0ffb5H
	DW	0ffb0H
	DW	040H
	DW	019H
	DW	0ffb5H
	DW	0ffbaH
	DW	024H
	DW	05aH
	DW	012H
	DW	0ffb0H
	DW	0ffc0H
	DW	02bH
	DW	059H
	DW	09H
	DW	0ffadH
	DW	0ffc7H
	DW	032H
	DW	057H
	DW	040H
	DW	09H
	DW	0ffa7H
	DW	0ffe7H
	DW	053H
	DW	02bH
	DW	0ffb5H
	DW	0ffc7H
	DW	040H
	DW	046H
	DW	0ffceH
	DW	0ffb0H
	DW	024H
	DW	057H
	DW	0ffeeH
	DW	0ffa6H
	DW	040H
	DW	0fff7H
	DW	0ffa7H
	DW	019H
	DW	053H
	DW	0ffd5H
	DW	0ffb5H
	DW	039H
	DW	040H
	DW	0ffbaH
	DW	0ffceH
	DW	050H
	DW	024H
	DW	0ffa9H
	DW	0ffeeH
	DW	05aH
	DW	040H
	DW	0ffe7H
	DW	0ffb5H
	DW	046H
	DW	024H
	DW	0ffa6H
	DW	012H
	DW	050H
	DW	0ffc0H
	DW	0ffd5H
	DW	059H
	DW	0fff7H
	DW	0ffadH
	DW	039H
	DW	032H
	DW	0ffa9H
	DW	040H
	DW	0ffd5H
	DW	0ffceH
	DW	05aH
	DW	0ffdcH
	DW	0ffc7H
	DW	059H
	DW	0ffe7H
	DW	0ffc0H
	DW	057H
	DW	0ffeeH
	DW	0ffbaH
	DW	053H
	DW	0fff7H
	DW	0ffb5H
	DW	050H
	DW	040H
	DW	0ffc7H
	DW	0ffeeH
	DW	050H
	DW	0ffadH
	DW	019H
	DW	032H
	DW	0ffa6H
	DW	040H
	DW	09H
	DW	0ffb5H
	DW	057H
	DW	0ffdcH
	DW	0ffd5H
	DW	059H
	DW	0ffbaH
	DW	040H
	DW	0ffbaH
	DW	012H
	DW	02bH
	DW	0ffadH
	DW	057H
	DW	0ffceH
	DW	0fff7H
	DW	040H
	DW	0ffa6H
	DW	04bH
	DW	0ffe7H
	DW	0ffdcH
	DW	050H
	DW	0ffa7H
	DW	039H
	DW	040H
	DW	0ffb0H
	DW	032H
	DW	0fff7H
	DW	0ffdcH
	DW	046H
	DW	0ffa7H
	DW	057H
	DW	0ffc0H
	DW	019H
	DW	012H
	DW	0ffc7H
	DW	053H
	DW	0ffa6H
	DW	04bH
	DW	0ffd5H
	DW	040H
	DW	0ffa9H
	DW	04bH
	DW	0ffc7H
	DW	024H
	DW	0fff7H
	DW	0ffeeH
	DW	02bH
	DW	0ffc0H
	DW	050H
	DW	0ffa7H
	DW	05aH
	DW	0ffadH
	DW	046H
	DW	0ffceH
	DW	019H
	DW	040H
	DW	0ffa6H
	DW	059H
	DW	0ffa9H
	DW	053H
	DW	0ffb0H
	DW	04bH
	DW	0ffbaH
	DW	040H
	DW	0ffc7H
	DW	032H
	DW	0ffd5H
	DW	024H
	DW	0ffe7H
	DW	012H
	DW	0fff7H
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
kvz_g_dst_4_t DW 01dH
	DW	04aH
	DW	054H
	DW	037H
	DW	037H
	DW	04aH
	DW	0ffe3H
	DW	0ffacH
	DW	04aH
	DW	00H
	DW	0ffb6H
	DW	04aH
	DW	054H
	DW	0ffb6H
	DW	037H
	DW	0ffe3H
kvz_g_dct_32_t DW 040H
	DW	05aH
	DW	05aH
	DW	05aH
	DW	059H
	DW	058H
	DW	057H
	DW	055H
	DW	053H
	DW	052H
	DW	050H
	DW	04eH
	DW	04bH
	DW	049H
	DW	046H
	DW	043H
	DW	040H
	DW	03dH
	DW	039H
	DW	036H
	DW	032H
	DW	02eH
	DW	02bH
	DW	026H
	DW	024H
	DW	01fH
	DW	019H
	DW	016H
	DW	012H
	DW	0dH
	DW	09H
	DW	04H
	DW	040H
	DW	05aH
	DW	057H
	DW	052H
	DW	04bH
	DW	043H
	DW	039H
	DW	02eH
	DW	024H
	DW	016H
	DW	09H
	DW	0fffcH
	DW	0ffeeH
	DW	0ffe1H
	DW	0ffd5H
	DW	0ffcaH
	DW	0ffc0H
	DW	0ffb7H
	DW	0ffb0H
	DW	0ffabH
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffa6H
	DW	0ffa8H
	DW	0ffadH
	DW	0ffb2H
	DW	0ffbaH
	DW	0ffc3H
	DW	0ffceH
	DW	0ffdaH
	DW	0ffe7H
	DW	0fff3H
	DW	040H
	DW	058H
	DW	050H
	DW	043H
	DW	032H
	DW	01fH
	DW	09H
	DW	0fff3H
	DW	0ffdcH
	DW	0ffcaH
	DW	0ffbaH
	DW	0ffaeH
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb2H
	DW	0ffc0H
	DW	0ffd2H
	DW	0ffe7H
	DW	0fffcH
	DW	012H
	DW	026H
	DW	039H
	DW	049H
	DW	053H
	DW	05aH
	DW	05aH
	DW	055H
	DW	04bH
	DW	03dH
	DW	02bH
	DW	016H
	DW	040H
	DW	055H
	DW	046H
	DW	02eH
	DW	012H
	DW	0fff3H
	DW	0ffd5H
	DW	0ffbdH
	DW	0ffadH
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb7H
	DW	0ffceH
	DW	0ffeaH
	DW	09H
	DW	026H
	DW	040H
	DW	052H
	DW	05aH
	DW	058H
	DW	04bH
	DW	036H
	DW	019H
	DW	0fffcH
	DW	0ffdcH
	DW	0ffc3H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffa7H
	DW	0ffb2H
	DW	0ffc7H
	DW	0ffe1H
	DW	040H
	DW	052H
	DW	039H
	DW	016H
	DW	0ffeeH
	DW	0ffcaH
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffadH
	DW	0ffc3H
	DW	0ffe7H
	DW	0dH
	DW	032H
	DW	04eH
	DW	05aH
	DW	055H
	DW	040H
	DW	01fH
	DW	0fff7H
	DW	0ffd2H
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffbdH
	DW	0ffdcH
	DW	04H
	DW	02bH
	DW	049H
	DW	059H
	DW	058H
	DW	046H
	DW	026H
	DW	040H
	DW	04eH
	DW	02bH
	DW	0fffcH
	DW	0ffceH
	DW	0ffaeH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffdcH
	DW	0dH
	DW	039H
	DW	055H
	DW	059H
	DW	043H
	DW	019H
	DW	0ffeaH
	DW	0ffc0H
	DW	0ffa8H
	DW	0ffa9H
	DW	0ffc3H
	DW	0ffeeH
	DW	01fH
	DW	046H
	DW	05aH
	DW	053H
	DW	036H
	DW	09H
	DW	0ffdaH
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffb0H
	DW	0ffd2H
	DW	040H
	DW	049H
	DW	019H
	DW	0ffe1H
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffeaH
	DW	024H
	DW	04eH
	DW	05aH
	DW	043H
	DW	012H
	DW	0ffdaH
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffc0H
	DW	0fff3H
	DW	02bH
	DW	052H
	DW	059H
	DW	03dH
	DW	09H
	DW	0ffd2H
	DW	0ffadH
	DW	0ffa8H
	DW	0ffc7H
	DW	0fffcH
	DW	032H
	DW	055H
	DW	057H
	DW	036H
	DW	040H
	DW	043H
	DW	09H
	DW	0ffcaH
	DW	0ffa7H
	DW	0ffb2H
	DW	0ffe7H
	DW	026H
	DW	053H
	DW	055H
	DW	02bH
	DW	0ffeaH
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffc7H
	DW	04H
	DW	040H
	DW	05aH
	DW	046H
	DW	0dH
	DW	0ffceH
	DW	0ffa8H
	DW	0ffb0H
	DW	0ffe1H
	DW	024H
	DW	052H
	DW	057H
	DW	02eH
	DW	0ffeeH
	DW	0ffb7H
	DW	0ffa6H
	DW	0ffc3H
	DW	040H
	DW	03dH
	DW	0fff7H
	DW	0ffb7H
	DW	0ffa7H
	DW	0ffd2H
	DW	019H
	DW	052H
	DW	053H
	DW	01fH
	DW	0ffd5H
	DW	0ffa8H
	DW	0ffb5H
	DW	0fff3H
	DW	039H
	DW	05aH
	DW	040H
	DW	0fffcH
	DW	0ffbaH
	DW	0ffa6H
	DW	0ffceH
	DW	016H
	DW	050H
	DW	055H
	DW	024H
	DW	0ffdaH
	DW	0ffa9H
	DW	0ffb2H
	DW	0ffeeH
	DW	036H
	DW	05aH
	DW	043H
	DW	040H
	DW	036H
	DW	0ffe7H
	DW	0ffabH
	DW	0ffb5H
	DW	0fffcH
	DW	046H
	DW	058H
	DW	024H
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffc3H
	DW	012H
	DW	052H
	DW	050H
	DW	0dH
	DW	0ffc0H
	DW	0ffa6H
	DW	0ffd5H
	DW	026H
	DW	059H
	DW	043H
	DW	0fff7H
	DW	0ffb2H
	DW	0ffadH
	DW	0ffeaH
	DW	039H
	DW	05aH
	DW	032H
	DW	0ffe1H
	DW	0ffa9H
	DW	0ffb7H
	DW	040H
	DW	02eH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffceH
	DW	026H
	DW	05aH
	DW	036H
	DW	0ffdcH
	DW	0ffa6H
	DW	0ffc7H
	DW	01fH
	DW	059H
	DW	03dH
	DW	0ffe7H
	DW	0ffa8H
	DW	0ffc0H
	DW	016H
	DW	057H
	DW	043H
	DW	0ffeeH
	DW	0ffabH
	DW	0ffbaH
	DW	0dH
	DW	053H
	DW	049H
	DW	0fff7H
	DW	0ffaeH
	DW	0ffb5H
	DW	04H
	DW	050H
	DW	04eH
	DW	040H
	DW	026H
	DW	0ffc7H
	DW	0ffa8H
	DW	0ffeeH
	DW	049H
	DW	050H
	DW	0fffcH
	DW	0ffadH
	DW	0ffbdH
	DW	019H
	DW	05aH
	DW	032H
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffe1H
	DW	040H
	DW	055H
	DW	09H
	DW	0ffb2H
	DW	0ffb5H
	DW	0dH
	DW	057H
	DW	03dH
	DW	0ffdcH
	DW	0ffa6H
	DW	0ffd5H
	DW	036H
	DW	059H
	DW	016H
	DW	0ffbaH
	DW	0ffaeH
	DW	040H
	DW	01fH
	DW	0ffbaH
	DW	0ffb2H
	DW	012H
	DW	05aH
	DW	02bH
	DW	0ffc3H
	DW	0ffadH
	DW	04H
	DW	057H
	DW	036H
	DW	0ffceH
	DW	0ffa8H
	DW	0fff7H
	DW	052H
	DW	040H
	DW	0ffdaH
	DW	0ffa6H
	DW	0ffeaH
	DW	04bH
	DW	049H
	DW	0ffe7H
	DW	0ffa6H
	DW	0ffdcH
	DW	043H
	DW	050H
	DW	0fff3H
	DW	0ffa7H
	DW	0ffd2H
	DW	039H
	DW	055H
	DW	040H
	DW	016H
	DW	0ffb0H
	DW	0ffc3H
	DW	032H
	DW	055H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffdcH
	DW	049H
	DW	046H
	DW	0ffdaH
	DW	0ffa7H
	DW	0fffcH
	DW	057H
	DW	02eH
	DW	0ffc0H
	DW	0ffb2H
	DW	019H
	DW	05aH
	DW	012H
	DW	0ffaeH
	DW	0ffc7H
	DW	036H
	DW	053H
	DW	0fff3H
	DW	0ffa6H
	DW	0ffe1H
	DW	04bH
	DW	043H
	DW	0ffd5H
	DW	0ffa8H
	DW	040H
	DW	0dH
	DW	0ffa9H
	DW	0ffdaH
	DW	04bH
	DW	03dH
	DW	0ffc7H
	DW	0ffb2H
	DW	024H
	DW	058H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffeeH
	DW	055H
	DW	02bH
	DW	0ffb7H
	DW	0ffc0H
	DW	036H
	DW	050H
	DW	0ffe1H
	DW	0ffa7H
	DW	04H
	DW	05aH
	DW	016H
	DW	0ffadH
	DW	0ffd2H
	DW	046H
	DW	043H
	DW	0ffceH
	DW	0ffaeH
	DW	019H
	DW	05aH
	DW	040H
	DW	04H
	DW	0ffa6H
	DW	0fff3H
	DW	059H
	DW	016H
	DW	0ffa9H
	DW	0ffe1H
	DW	053H
	DW	026H
	DW	0ffb0H
	DW	0ffd2H
	DW	04bH
	DW	036H
	DW	0ffbaH
	DW	0ffc3H
	DW	040H
	DW	043H
	DW	0ffc7H
	DW	0ffb7H
	DW	032H
	DW	04eH
	DW	0ffd5H
	DW	0ffaeH
	DW	024H
	DW	055H
	DW	0ffe7H
	DW	0ffa8H
	DW	012H
	DW	05aH
	DW	0fff7H
	DW	0ffa6H
	DW	040H
	DW	0fffcH
	DW	0ffa6H
	DW	0dH
	DW	059H
	DW	0ffeaH
	DW	0ffa9H
	DW	01fH
	DW	053H
	DW	0ffdaH
	DW	0ffb0H
	DW	02eH
	DW	04bH
	DW	0ffcaH
	DW	0ffbaH
	DW	03dH
	DW	040H
	DW	0ffbdH
	DW	0ffc7H
	DW	049H
	DW	032H
	DW	0ffb2H
	DW	0ffd5H
	DW	052H
	DW	024H
	DW	0ffabH
	DW	0ffe7H
	DW	058H
	DW	012H
	DW	0ffa6H
	DW	0fff7H
	DW	05aH
	DW	040H
	DW	0fff3H
	DW	0ffa9H
	DW	026H
	DW	04bH
	DW	0ffc3H
	DW	0ffc7H
	DW	04eH
	DW	024H
	DW	0ffa8H
	DW	0fff7H
	DW	05aH
	DW	0ffeeH
	DW	0ffabH
	DW	02bH
	DW	049H
	DW	0ffc0H
	DW	0ffcaH
	DW	050H
	DW	01fH
	DW	0ffa7H
	DW	0fffcH
	DW	05aH
	DW	0ffeaH
	DW	0ffadH
	DW	02eH
	DW	046H
	DW	0ffbdH
	DW	0ffceH
	DW	052H
	DW	019H
	DW	0ffa6H
	DW	040H
	DW	0ffeaH
	DW	0ffb0H
	DW	03dH
	DW	032H
	DW	0ffabH
	DW	0fff7H
	DW	05aH
	DW	0ffdcH
	DW	0ffb7H
	DW	046H
	DW	026H
	DW	0ffa7H
	DW	04H
	DW	057H
	DW	0ffd2H
	DW	0ffc0H
	DW	04eH
	DW	019H
	DW	0ffa6H
	DW	012H
	DW	052H
	DW	0ffc7H
	DW	0ffcaH
	DW	053H
	DW	0dH
	DW	0ffa6H
	DW	01fH
	DW	04bH
	DW	0ffbdH
	DW	0ffd5H
	DW	058H
	DW	040H
	DW	0ffe1H
	DW	0ffbaH
	DW	04eH
	DW	012H
	DW	0ffa6H
	DW	02bH
	DW	03dH
	DW	0ffadH
	DW	0fffcH
	DW	057H
	DW	0ffcaH
	DW	0ffceH
	DW	058H
	DW	0fff7H
	DW	0ffaeH
	DW	040H
	DW	026H
	DW	0ffa6H
	DW	016H
	DW	04bH
	DW	0ffb7H
	DW	0ffe7H
	DW	05aH
	DW	0ffdcH
	DW	0ffbdH
	DW	050H
	DW	0dH
	DW	0ffa7H
	DW	02eH
	DW	039H
	DW	0ffabH
	DW	040H
	DW	0ffdaH
	DW	0ffc7H
	DW	058H
	DW	0ffeeH
	DW	0ffb7H
	DW	050H
	DW	04H
	DW	0ffadH
	DW	043H
	DW	019H
	DW	0ffa6H
	DW	032H
	DW	02eH
	DW	0ffa6H
	DW	01fH
	DW	040H
	DW	0ffabH
	DW	09H
	DW	04eH
	DW	0ffb5H
	DW	0fff3H
	DW	057H
	DW	0ffc3H
	DW	0ffdcH
	DW	05aH
	DW	0ffd5H
	DW	0ffcaH
	DW	059H
	DW	0ffeaH
	DW	0ffbaH
	DW	052H
	DW	040H
	DW	0ffd2H
	DW	0ffd5H
	DW	05aH
	DW	0ffceH
	DW	0ffdaH
	DW	05aH
	DW	0ffcaH
	DW	0ffdcH
	DW	05aH
	DW	0ffc7H
	DW	0ffe1H
	DW	059H
	DW	0ffc3H
	DW	0ffe7H
	DW	058H
	DW	0ffc0H
	DW	0ffeaH
	DW	057H
	DW	0ffbdH
	DW	0ffeeH
	DW	055H
	DW	0ffbaH
	DW	0fff3H
	DW	053H
	DW	0ffb7H
	DW	0fff7H
	DW	052H
	DW	0ffb5H
	DW	0fffcH
	DW	050H
	DW	0ffb2H
	DW	040H
	DW	0ffcaH
	DW	0ffe7H
	DW	055H
	DW	0ffb5H
	DW	04H
	DW	046H
	DW	0ffa8H
	DW	024H
	DW	02eH
	DW	0ffa6H
	DW	03dH
	DW	012H
	DW	0ffaeH
	DW	050H
	DW	0fff3H
	DW	0ffc0H
	DW	05aH
	DW	0ffd5H
	DW	0ffdaH
	DW	059H
	DW	0ffbdH
	DW	0fff7H
	DW	04eH
	DW	0ffadH
	DW	016H
	DW	039H
	DW	0ffa6H
	DW	032H
	DW	01fH
	DW	0ffa9H
	DW	049H
	DW	040H
	DW	0ffc3H
	DW	0fff7H
	DW	049H
	DW	0ffa7H
	DW	02eH
	DW	019H
	DW	0ffaeH
	DW	053H
	DW	0ffe1H
	DW	0ffd5H
	DW	058H
	DW	0ffb5H
	DW	0dH
	DW	039H
	DW	0ffa6H
	DW	040H
	DW	04H
	DW	0ffbaH
	DW	05aH
	DW	0ffceH
	DW	0ffeaH
	DW	050H
	DW	0ffabH
	DW	024H
	DW	026H
	DW	0ffa9H
	DW	04eH
	DW	0ffeeH
	DW	0ffcaH
	DW	05aH
	DW	0ffbdH
	DW	040H
	DW	0ffbdH
	DW	09H
	DW	036H
	DW	0ffa7H
	DW	04eH
	DW	0ffe7H
	DW	0ffdaH
	DW	053H
	DW	0ffabH
	DW	02bH
	DW	016H
	DW	0ffb5H
	DW	05aH
	DW	0ffc7H
	DW	0fffcH
	DW	040H
	DW	0ffa6H
	DW	046H
	DW	0fff3H
	DW	0ffceH
	DW	058H
	DW	0ffb0H
	DW	01fH
	DW	024H
	DW	0ffaeH
	DW	057H
	DW	0ffd2H
	DW	0ffeeH
	DW	049H
	DW	0ffa6H
	DW	03dH
	DW	040H
	DW	0ffb7H
	DW	019H
	DW	01fH
	DW	0ffb5H
	DW	05aH
	DW	0ffbaH
	DW	016H
	DW	024H
	DW	0ffb2H
	DW	05aH
	DW	0ffbdH
	DW	012H
	DW	026H
	DW	0ffb0H
	DW	05aH
	DW	0ffc0H
	DW	0dH
	DW	02bH
	DW	0ffaeH
	DW	059H
	DW	0ffc3H
	DW	09H
	DW	02eH
	DW	0ffadH
	DW	058H
	DW	0ffc7H
	DW	04H
	DW	032H
	DW	0ffabH
	DW	057H
	DW	0ffcaH
	DW	040H
	DW	0ffb2H
	DW	02bH
	DW	04H
	DW	0ffceH
	DW	052H
	DW	0ffa6H
	DW	049H
	DW	0ffdcH
	DW	0fff3H
	DW	039H
	DW	0ffabH
	DW	059H
	DW	0ffbdH
	DW	019H
	DW	016H
	DW	0ffc0H
	DW	058H
	DW	0ffa9H
	DW	03dH
	DW	0ffeeH
	DW	0ffe1H
	DW	046H
	DW	0ffa6H
	DW	053H
	DW	0ffcaH
	DW	09H
	DW	026H
	DW	0ffb5H
	DW	05aH
	DW	0ffb0H
	DW	02eH
	DW	040H
	DW	0ffaeH
	DW	039H
	DW	0ffeaH
	DW	0ffeeH
	DW	036H
	DW	0ffb0H
	DW	05aH
	DW	0ffadH
	DW	03dH
	DW	0ffe7H
	DW	0fff3H
	DW	032H
	DW	0ffb2H
	DW	05aH
	DW	0ffabH
	DW	040H
	DW	0ffe1H
	DW	0fff7H
	DW	02eH
	DW	0ffb5H
	DW	05aH
	DW	0ffa9H
	DW	043H
	DW	0ffdcH
	DW	0fffcH
	DW	02bH
	DW	0ffb7H
	DW	059H
	DW	0ffa8H
	DW	046H
	DW	0ffdaH
	DW	040H
	DW	0ffabH
	DW	046H
	DW	0ffd2H
	DW	012H
	DW	0dH
	DW	0ffd5H
	DW	043H
	DW	0ffadH
	DW	05aH
	DW	0ffa9H
	DW	049H
	DW	0ffceH
	DW	016H
	DW	09H
	DW	0ffdaH
	DW	040H
	DW	0ffaeH
	DW	05aH
	DW	0ffa8H
	DW	04bH
	DW	0ffcaH
	DW	019H
	DW	04H
	DW	0ffdcH
	DW	03dH
	DW	0ffb0H
	DW	05aH
	DW	0ffa7H
	DW	04eH
	DW	0ffc7H
	DW	01fH
	DW	040H
	DW	0ffa8H
	DW	050H
	DW	0ffbdH
	DW	032H
	DW	0ffe1H
	DW	09H
	DW	0dH
	DW	0ffdcH
	DW	036H
	DW	0ffbaH
	DW	052H
	DW	0ffa7H
	DW	05aH
	DW	0ffa9H
	DW	04eH
	DW	0ffc0H
	DW	02eH
	DW	0ffe7H
	DW	04H
	DW	012H
	DW	0ffdaH
	DW	039H
	DW	0ffb7H
	DW	053H
	DW	0ffa6H
	DW	05aH
	DW	0ffabH
	DW	04bH
	DW	0ffc3H
	DW	02bH
	DW	0ffeaH
	DW	040H
	DW	0ffa6H
	DW	057H
	DW	0ffaeH
	DW	04bH
	DW	0ffbdH
	DW	039H
	DW	0ffd2H
	DW	024H
	DW	0ffeaH
	DW	09H
	DW	04H
	DW	0ffeeH
	DW	01fH
	DW	0ffd5H
	DW	036H
	DW	0ffc0H
	DW	049H
	DW	0ffb0H
	DW	055H
	DW	0ffa7H
	DW	05aH
	DW	0ffa6H
	DW	058H
	DW	0ffadH
	DW	04eH
	DW	0ffbaH
	DW	03dH
	DW	0ffceH
	DW	026H
	DW	0ffe7H
	DW	0dH
	DW	040H
	DW	0ffa6H
	DW	05aH
	DW	0ffa6H
	DW	059H
	DW	0ffa8H
	DW	057H
	DW	0ffabH
	DW	053H
	DW	0ffaeH
	DW	050H
	DW	0ffb2H
	DW	04bH
	DW	0ffb7H
	DW	046H
	DW	0ffbdH
	DW	040H
	DW	0ffc3H
	DW	039H
	DW	0ffcaH
	DW	032H
	DW	0ffd2H
	DW	02bH
	DW	0ffdaH
	DW	024H
	DW	0ffe1H
	DW	019H
	DW	0ffeaH
	DW	012H
	DW	0fff3H
	DW	09H
	DW	0fffcH
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+22
kvz_g_dct_8_t DW 040H
	DW	059H
	DW	053H
	DW	04bH
	DW	040H
	DW	032H
	DW	024H
	DW	012H
	DW	040H
	DW	04bH
	DW	024H
	DW	0ffeeH
	DW	0ffc0H
	DW	0ffa7H
	DW	0ffadH
	DW	0ffceH
	DW	040H
	DW	032H
	DW	0ffdcH
	DW	0ffa7H
	DW	0ffc0H
	DW	012H
	DW	053H
	DW	04bH
	DW	040H
	DW	012H
	DW	0ffadH
	DW	0ffceH
	DW	040H
	DW	04bH
	DW	0ffdcH
	DW	0ffa7H
	DW	040H
	DW	0ffeeH
	DW	0ffadH
	DW	032H
	DW	040H
	DW	0ffb5H
	DW	0ffdcH
	DW	059H
	DW	040H
	DW	0ffceH
	DW	0ffdcH
	DW	059H
	DW	0ffc0H
	DW	0ffeeH
	DW	053H
	DW	0ffb5H
	DW	040H
	DW	0ffb5H
	DW	024H
	DW	012H
	DW	0ffc0H
	DW	059H
	DW	0ffadH
	DW	032H
	DW	040H
	DW	0ffa7H
	DW	053H
	DW	0ffb5H
	DW	040H
	DW	0ffceH
	DW	024H
	DW	0ffeeH
	ORG $+3
$SG4294952568 DB 'quant', 00H
	ORG $+6
$SG4294952618 DB 'array_checksum', 00H
	ORG $+1
$SG4294952617 DB 'array_md5', 00H
	ORG $+6
$SG4294952616 DB 'reg_sad', 00H
$SG4294952615 DB 'sad_4x4', 00H
$SG4294952614 DB 'sad_8x8', 00H
$SG4294952613 DB 'sad_16x16', 00H
	ORG $+6
$SG4294952612 DB 'sad_32x32', 00H
	ORG $+6
$SG4294952611 DB 'sad_64x64', 00H
	ORG $+6
$SG4294952610 DB 'satd_4x4', 00H
	ORG $+7
$SG4294952609 DB 'satd_8x8', 00H
	ORG $+7
$SG4294952608 DB 'satd_16x16', 00H
	ORG $+5
$SG4294952607 DB 'satd_32x32', 00H
	ORG $+5
$SG4294952606 DB 'satd_64x64', 00H
	ORG $+5
$SG4294952605 DB 'satd_any_size', 00H
	ORG $+2
$SG4294952604 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294952603 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294952602 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294952601 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294952600 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294952599 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294952598 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294952597 DB 'satd_16x16_dual', 00H
$SG4294952596 DB 'satd_32x32_dual', 00H
$SG4294952595 DB 'satd_64x64_dual', 00H
$SG4294952594 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294952593 DB 'pixels_calc_ssd', 00H
$SG4294952592 DB 'bipred_average', 00H
	ORG $+1
$SG4294952591 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294952590 DB 'ver_sad', 00H
$SG4294952589 DB 'hor_sad', 00H
$SG4294952588 DB 'pixel_var', 00H
	ORG $+6
$SG4294952587 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294952586 DB 'dct_4x4', 00H
$SG4294952585 DB 'dct_8x8', 00H
$SG4294952584 DB 'dct_16x16', 00H
	ORG $+6
$SG4294952583 DB 'dct_32x32', 00H
	ORG $+6
$SG4294952582 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294952581 DB 'idct_4x4', 00H
	ORG $+7
$SG4294952580 DB 'idct_8x8', 00H
	ORG $+7
$SG4294952579 DB 'idct_16x16', 00H
	ORG $+5
$SG4294952578 DB 'idct_32x32', 00H
	ORG $+5
$SG4294952577 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294952576 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294952575 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294952574 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294952573 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294952572 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294952571 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294952570 DB 'sample_octpel_chroma_hi', 00H
$SG4294952569 DB 'get_extended_block', 00H
	ORG $+5
$SG4294952567 DB 'quantize_residual', 00H
	ORG $+6
$SG4294952566 DB 'dequant', 00H
$SG4294952565 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294952564 DB 'fast_coeff_cost', 00H
$SG4294952563 DB 'angular_pred', 00H
	ORG $+3
$SG4294952562 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294952561 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294952560 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294952559 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294952558 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294952557 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294952556 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_strategy_register_dct_generic
pdata	SEGMENT
$pdata$fast_inverse_dst_4x4_generic DD imagerel fast_inverse_dst_4x4_generic
	DD	imagerel fast_inverse_dst_4x4_generic+71
	DD	imagerel $unwind$fast_inverse_dst_4x4_generic
$pdata$fast_forward_dst_4x4_generic DD imagerel fast_forward_dst_4x4_generic
	DD	imagerel fast_forward_dst_4x4_generic+58
	DD	imagerel $unwind$fast_forward_dst_4x4_generic
$pdata$idct_32x32_generic DD imagerel idct_32x32_generic
	DD	imagerel idct_32x32_generic+80
	DD	imagerel $unwind$idct_32x32_generic
$pdata$idct_16x16_generic DD imagerel idct_16x16_generic
	DD	imagerel idct_16x16_generic+80
	DD	imagerel $unwind$idct_16x16_generic
$pdata$idct_8x8_generic DD imagerel idct_8x8_generic
	DD	imagerel idct_8x8_generic+80
	DD	imagerel $unwind$idct_8x8_generic
$pdata$idct_4x4_generic DD imagerel idct_4x4_generic
	DD	imagerel idct_4x4_generic+71
	DD	imagerel $unwind$idct_4x4_generic
$pdata$dct_32x32_generic DD imagerel dct_32x32_generic
	DD	imagerel dct_32x32_generic+64
	DD	imagerel $unwind$dct_32x32_generic
$pdata$dct_16x16_generic DD imagerel dct_16x16_generic
	DD	imagerel dct_16x16_generic+64
	DD	imagerel $unwind$dct_16x16_generic
$pdata$dct_8x8_generic DD imagerel dct_8x8_generic
	DD	imagerel dct_8x8_generic+64
	DD	imagerel $unwind$dct_8x8_generic
$pdata$dct_4x4_generic DD imagerel dct_4x4_generic
	DD	imagerel dct_4x4_generic+58
	DD	imagerel $unwind$dct_4x4_generic
$pdata$partial_butterfly_inverse_32_generic DD imagerel partial_butterfly_inverse_32_generic
	DD	imagerel partial_butterfly_inverse_32_generic+3301
	DD	imagerel $unwind$partial_butterfly_inverse_32_generic
$pdata$partial_butterfly_32_generic DD imagerel partial_butterfly_32_generic
	DD	imagerel partial_butterfly_32_generic+2091
	DD	imagerel $unwind$partial_butterfly_32_generic
$pdata$partial_butterfly_inverse_16_generic DD imagerel partial_butterfly_inverse_16_generic
	DD	imagerel partial_butterfly_inverse_16_generic+1670
	DD	imagerel $unwind$partial_butterfly_inverse_16_generic
$pdata$partial_butterfly_16_generic DD imagerel partial_butterfly_16_generic
	DD	imagerel partial_butterfly_16_generic+780
	DD	imagerel $unwind$partial_butterfly_16_generic
$pdata$partial_butterfly_inverse_8_generic DD imagerel partial_butterfly_inverse_8_generic
	DD	imagerel partial_butterfly_inverse_8_generic+819
	DD	imagerel $unwind$partial_butterfly_inverse_8_generic
$pdata$partial_butterfly_8_generic DD imagerel partial_butterfly_8_generic
	DD	imagerel partial_butterfly_8_generic+422
	DD	imagerel $unwind$partial_butterfly_8_generic
$pdata$partial_butterfly_inverse_4_generic DD imagerel partial_butterfly_inverse_4_generic
	DD	imagerel partial_butterfly_inverse_4_generic+502
	DD	imagerel $unwind$partial_butterfly_inverse_4_generic
$pdata$partial_butterfly_4_generic DD imagerel partial_butterfly_4_generic
	DD	imagerel partial_butterfly_4_generic+487
	DD	imagerel $unwind$partial_butterfly_4_generic
$pdata$fast_inverse_dst_4_generic DD imagerel fast_inverse_dst_4_generic
	DD	imagerel fast_inverse_dst_4_generic+325
	DD	imagerel $unwind$fast_inverse_dst_4_generic
$pdata$fast_forward_dst_4_generic DD imagerel fast_forward_dst_4_generic
	DD	imagerel fast_forward_dst_4_generic+579
	DD	imagerel $unwind$fast_forward_dst_4_generic
$pdata$kvz_strategy_register_dct_generic DD imagerel $LN4
	DD	imagerel $LN4+445
	DD	imagerel $unwind$kvz_strategy_register_dct_generic
xdata	SEGMENT
$unwind$fast_inverse_dst_4x4_generic DD 040a01H
	DD	0a340aH
	DD	07006720aH
$unwind$fast_forward_dst_4x4_generic DD 020601H
	DD	030027206H
$unwind$idct_32x32_generic DD 050d01H
	DD	0106340dH
	DD	0104010dH
	DD	07006H
$unwind$idct_16x16_generic DD 050d01H
	DD	046340dH
	DD	044010dH
	DD	07006H
$unwind$idct_8x8_generic DD 050d01H
	DD	016340dH
	DD	014010dH
	DD	07006H
$unwind$idct_4x4_generic DD 040a01H
	DD	0a340aH
	DD	07006720aH
$unwind$dct_32x32_generic DD 030901H
	DD	01040109H
	DD	03002H
$unwind$dct_16x16_generic DD 030901H
	DD	0440109H
	DD	03002H
$unwind$dct_8x8_generic DD 030901H
	DD	0140109H
	DD	03002H
$unwind$dct_4x4_generic DD 020601H
	DD	030027206H
$unwind$partial_butterfly_inverse_32_generic DD 01f9901H
	DD	012f899H
	DD	013e88aH
	DD	014d87fH
	DD	015c877H
	DD	016b86cH
	DD	017a85eH
	DD	0189852H
	DD	0198849H
	DD	01a7841H
	DD	01b6836H
	DD	0403424H
	DD	0380124H
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0500cH
$unwind$partial_butterfly_32_generic DD 0b2101H
	DD	0223421H
	DD	01a0121H
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$partial_butterfly_inverse_16_generic DD 0156601H
	DD	07a866H
	DD	089851H
	DD	098843H
	DD	0a783aH
	DD	0b6833H
	DD	0203421H
	DD	0180121H
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0500cH
$unwind$partial_butterfly_16_generic DD 0a1401H
	DD	0143414H
	DD	0f010b214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
$unwind$partial_butterfly_inverse_8_generic DD 0c1c01H
	DD	0a641cH
	DD	09541cH
	DD	08341cH
	DD	0f018121cH
	DD	0d014e016H
	DD	07010c012H
$unwind$partial_butterfly_8_generic DD 0b1801H
	DD	086418H
	DD	075418H
	DD	063418H
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
$unwind$partial_butterfly_inverse_4_generic DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
$unwind$partial_butterfly_4_generic DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$fast_inverse_dst_4_generic DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
$unwind$fast_forward_dst_4_generic DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
$unwind$kvz_strategy_register_dct_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+2
$SG4294952537 DB 'generic', 00H
	ORG $+2
$SG4294952539 DB 'generic', 00H
	ORG $+2
$SG4294952541 DB 'generic', 00H
	ORG $+2
$SG4294952543 DB 'generic', 00H
	ORG $+2
$SG4294952544 DB 'fast_inverse_dst_4x4', 00H
	ORG $+2
$SG4294952545 DB 'generic', 00H
	ORG $+2
$SG4294952547 DB 'generic', 00H
	ORG $+2
$SG4294952549 DB 'generic', 00H
	ORG $+2
$SG4294952550 DB 'dct_8x8', 00H
	ORG $+2
$SG4294952551 DB 'generic', 00H
	ORG $+2
$SG4294952536 DB 'idct_32x32', 00H
	ORG $+5
$SG4294952538 DB 'idct_16x16', 00H
	ORG $+5
$SG4294952540 DB 'idct_8x8', 00H
	ORG $+7
$SG4294952542 DB 'idct_4x4', 00H
	ORG $+7
$SG4294952546 DB 'dct_32x32', 00H
	ORG $+6
$SG4294952548 DB 'dct_16x16', 00H
	ORG $+6
$SG4294952552 DB 'dct_4x4', 00H
$SG4294952553 DB 'generic', 00H
$SG4294952554 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294952555 DB 'generic', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_dct_generic PROC

; 632  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 633  :   bool success = true;
; 634  : 
; 635  :   success &= kvz_strategyselector_register(opaque, "fast_forward_dst_4x4", "generic", 0, &fast_forward_dst_4x4_generic);

	lea	rax, OFFSET FLAT:fast_forward_dst_4x4_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294952555
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952554
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 636  :   
; 637  :   success &= kvz_strategyselector_register(opaque, "dct_4x4", "generic", 0, &dct_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952553
	lea	rax, OFFSET FLAT:dct_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952552
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 638  :   success &= kvz_strategyselector_register(opaque, "dct_8x8", "generic", 0, &dct_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294952551
	lea	rax, OFFSET FLAT:dct_8x8_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952550
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 639  :   success &= kvz_strategyselector_register(opaque, "dct_16x16", "generic", 0, &dct_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294952549
	lea	rax, OFFSET FLAT:dct_16x16_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952548
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 640  :   success &= kvz_strategyselector_register(opaque, "dct_32x32", "generic", 0, &dct_32x32_generic);

	lea	r8, OFFSET FLAT:$SG4294952547
	lea	rax, OFFSET FLAT:dct_32x32_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952546
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 641  : 
; 642  :   success &= kvz_strategyselector_register(opaque, "fast_inverse_dst_4x4", "generic", 0, &fast_inverse_dst_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952545
	lea	rax, OFFSET FLAT:fast_inverse_dst_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952544
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 643  : 
; 644  :   success &= kvz_strategyselector_register(opaque, "idct_4x4", "generic", 0, &idct_4x4_generic);

	lea	r8, OFFSET FLAT:$SG4294952543
	lea	rax, OFFSET FLAT:idct_4x4_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952542
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 645  :   success &= kvz_strategyselector_register(opaque, "idct_8x8", "generic", 0, &idct_8x8_generic);

	lea	r8, OFFSET FLAT:$SG4294952541
	lea	rax, OFFSET FLAT:idct_8x8_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294952540
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 646  :   success &= kvz_strategyselector_register(opaque, "idct_16x16", "generic", 0, &idct_16x16_generic);

	lea	r8, OFFSET FLAT:$SG4294952539
	lea	rax, OFFSET FLAT:idct_16x16_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294952538
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	ebx, eax

; 647  :   success &= kvz_strategyselector_register(opaque, "idct_32x32", "generic", 0, &idct_32x32_generic);

	lea	rax, OFFSET FLAT:idct_32x32_generic
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	r8, OFFSET FLAT:$SG4294952537
	mov	rcx, rsi
	lea	rdx, OFFSET FLAT:$SG4294952536
	call	kvz_strategyselector_register

; 648  :   return success;
; 649  : }

	mov	rsi, QWORD PTR [rsp+72]
	xor	ecx, ecx
	and	ebx, edi
	mov	rbx, QWORD PTR [rsp+64]
	setne	cl
	and	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_dct_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
block$ = 16
coeff$ = 24
shift$ = 32
fast_forward_dst_4_generic PROC

; 219  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	mov	r14, rdx
	mov	rdi, rcx
	mov	ebp, r8d

; 220  :   int32_t i, c[4];
; 221  :   int32_t rnd_factor = 1 << (shift - 1);

	lea	ecx, DWORD PTR [r8-1]
	mov	esi, 1
	shl	esi, cl

; 222  :   for (i = 0; i < 4; i++) {
; 223  :     // int32_termediate Variables
; 224  :     c[0] = block[4 * i + 0] + block[4 * i + 3];
; 225  :     c[1] = block[4 * i + 1] + block[4 * i + 3];
; 226  :     c[2] = block[4 * i + 0] - block[4 * i + 1];
; 227  :     c[3] = 74 * block[4 * i + 2];
; 228  : 
; 229  :     coeff[i] = (short)((29 * c[0] + 55 * c[1] + c[3] + rnd_factor) >> shift);

	mov	ecx, ebp
	movsx	r9d, WORD PTR [rdi+6]
	movsx	eax, WORD PTR [rdi+2]
	movsx	ebx, WORD PTR [rdi]
	lea	r11d, DWORD PTR [rax+r9]
	lea	r10d, DWORD PTR [rbx+r9]
	sub	ebx, eax
	movsx	eax, WORD PTR [rdi+4]
	imul	r8d, eax, 74				; 0000004aH
	imul	eax, r11d, 55				; 00000037H
	imul	edx, r10d, 29
	add	eax, r8d
	add	edx, eax
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14], dx

; 230  :     coeff[4 + i] = (short)((74 * (block[4 * i + 0] + block[4 * i + 1] - block[4 * i + 3]) + rnd_factor) >> shift);

	movsx	eax, WORD PTR [rdi+6]
	movsx	ecx, WORD PTR [rdi]
	sub	ecx, eax
	imul	edx, ebx, 29
	movsx	eax, WORD PTR [rdi+2]
	add	ecx, eax
	imul	eax, ecx, 74				; 0000004aH
	mov	ecx, ebp
	add	eax, esi
	sar	eax, cl
	mov	WORD PTR [r14+8], ax

; 231  :     coeff[8 + i] = (short)((29 * c[2] + 55 * c[0] - c[3] + rnd_factor) >> shift);

	imul	eax, r10d, 55				; 00000037H
	add	edx, eax

; 232  :     coeff[12 + i] = (short)((55 * c[2] - 29 * c[1] + c[3] + rnd_factor) >> shift);

	imul	eax, r11d, 29
	sub	edx, r8d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+16], dx
	imul	edx, ebx, 55				; 00000037H
	sub	edx, eax
	add	edx, r8d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+24], dx
	movsx	ecx, WORD PTR [rdi+14]
	movsx	eax, WORD PTR [rdi+10]
	movsx	r11d, WORD PTR [rdi+8]
	lea	r10d, DWORD PTR [rax+rcx]
	lea	r8d, DWORD PTR [r11+rcx]
	sub	r11d, eax
	movsx	eax, WORD PTR [rdi+12]
	mov	ecx, ebp
	imul	r9d, eax, 74				; 0000004aH
	imul	eax, r10d, 55				; 00000037H
	imul	edx, r8d, 29
	add	eax, r9d
	add	edx, eax
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+2], dx
	movsx	eax, WORD PTR [rdi+14]
	movsx	ecx, WORD PTR [rdi+8]
	sub	ecx, eax
	imul	edx, r11d, 29
	movsx	eax, WORD PTR [rdi+10]
	add	ecx, eax
	imul	eax, ecx, 74				; 0000004aH
	mov	ecx, ebp
	add	eax, esi
	sar	eax, cl
	mov	WORD PTR [r14+10], ax
	imul	eax, r8d, 55				; 00000037H
	add	edx, eax
	sub	edx, r9d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+18], dx
	imul	edx, r11d, 55				; 00000037H
	imul	eax, r10d, 29
	sub	edx, eax
	add	edx, r9d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+26], dx
	movsx	ecx, WORD PTR [rdi+22]
	movsx	eax, WORD PTR [rdi+18]
	movsx	r11d, WORD PTR [rdi+16]
	lea	r10d, DWORD PTR [rax+rcx]
	lea	r8d, DWORD PTR [r11+rcx]
	sub	r11d, eax
	movsx	eax, WORD PTR [rdi+20]
	mov	ecx, ebp
	imul	r9d, eax, 74				; 0000004aH
	imul	eax, r10d, 55				; 00000037H
	imul	edx, r8d, 29
	add	eax, r9d
	add	edx, eax
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+4], dx
	movsx	eax, WORD PTR [rdi+22]
	movsx	ecx, WORD PTR [rdi+18]
	sub	ecx, eax
	imul	edx, r11d, 29
	movsx	eax, WORD PTR [rdi+16]
	add	ecx, eax
	imul	eax, ecx, 74				; 0000004aH
	mov	ecx, ebp
	add	eax, esi
	sar	eax, cl
	mov	WORD PTR [r14+12], ax
	imul	eax, r8d, 55				; 00000037H
	add	edx, eax
	imul	eax, r10d, 29
	sub	edx, r9d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+20], dx
	imul	edx, r11d, 55				; 00000037H
	sub	edx, eax
	add	edx, r9d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+28], dx
	movsx	ecx, WORD PTR [rdi+30]
	movsx	eax, WORD PTR [rdi+26]
	movsx	r11d, WORD PTR [rdi+24]
	lea	r10d, DWORD PTR [rax+rcx]
	lea	r8d, DWORD PTR [r11+rcx]
	sub	r11d, eax
	movsx	eax, WORD PTR [rdi+28]
	mov	ecx, ebp
	imul	r9d, eax, 74				; 0000004aH
	imul	eax, r10d, 55				; 00000037H
	imul	edx, r8d, 29
	add	eax, r9d
	add	edx, eax
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+6], dx
	movsx	eax, WORD PTR [rdi+30]
	movsx	ecx, WORD PTR [rdi+26]
	sub	ecx, eax
	imul	edx, r11d, 29
	movsx	eax, WORD PTR [rdi+24]
	add	ecx, eax
	imul	eax, ecx, 74				; 0000004aH
	mov	ecx, ebp
	add	eax, esi
	sar	eax, cl
	mov	WORD PTR [r14+14], ax
	imul	eax, r8d, 55				; 00000037H
	add	edx, eax
	imul	eax, r10d, 29
	sub	edx, r9d
	add	edx, esi
	sar	edx, cl
	mov	WORD PTR [r14+22], dx
	imul	edx, r11d, 55				; 00000037H
	sub	edx, eax

; 233  :   }
; 234  : }

	mov	rbx, QWORD PTR [rsp+16]
	add	edx, r9d
	mov	rbp, QWORD PTR [rsp+24]
	add	edx, esi
	mov	rsi, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	sar	edx, cl
	mov	WORD PTR [r14+30], dx
	pop	r14
	ret	0
fast_forward_dst_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 24
block$ = 32
shift$ = 40
fast_inverse_dst_4_generic PROC

; 237  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15
	mov	r10, rcx

; 238  :   int i, c[4];
; 239  :   int rnd_factor = 1 << (shift - 1);

	lea	r9, QWORD PTR [rdx+4]
	lea	ecx, DWORD PTR [r8-1]
	mov	r11d, 1
	shl	r11d, cl
	mov	ebx, 4
	add	r10, 24
	mov	r15d, -32768				; ffffffffffff8000H
	npad	5
$LL4@fast_inver:

; 240  :   for (i = 0; i < 4; i++) {
; 241  :     // Intermediate Variables
; 242  :     c[0] = tmp[i] + tmp[8 + i];

	movsx	ecx, WORD PTR [r10-8]

; 243  :     c[1] = tmp[8 + i] + tmp[12 + i];

	movsx	eax, WORD PTR [r10]
	movsx	edi, WORD PTR [r10-24]
	lea	ebp, DWORD PTR [rcx+rax]
	lea	r14d, DWORD PTR [rdi+rcx]

; 244  :     c[2] = tmp[i] - tmp[12 + i];

	sub	edi, eax

; 245  :     c[3] = 74 * tmp[4 + i];

	movsx	eax, WORD PTR [r10-16]

; 246  : 
; 247  :     block[4 * i + 0] = (short)CLIP(-32768, 32767, (29 * c[0] + 55 * c[1] + c[3] + rnd_factor) >> shift);

	mov	ecx, r8d
	imul	esi, eax, 74				; 0000004aH
	imul	eax, ebp, 55				; 00000037H
	imul	edx, r14d, 29
	add	eax, esi
	add	edx, eax
	add	edx, r11d
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN6@fast_inver
	mov	edx, 32767				; 00007fffH
	jmp	SHORT $LN8@fast_inver
$LN6@fast_inver:
	cmp	edx, r15d
	cmovl	edx, r15d
$LN8@fast_inver:
	mov	WORD PTR [r9-4], dx
	imul	edx, edi, 55				; 00000037H

; 248  :     block[4 * i + 1] = (short)CLIP(-32768, 32767, (55 * c[2] - 29 * c[1] + c[3] + rnd_factor) >> shift);

	imul	eax, ebp, 29
	sub	edx, eax
	add	edx, esi
	add	edx, r11d
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN12@fast_inver
	mov	edx, 32767				; 00007fffH
	jmp	SHORT $LN14@fast_inver
$LN12@fast_inver:
	cmp	edx, r15d
	cmovl	edx, r15d
$LN14@fast_inver:
	mov	WORD PTR [r9-2], dx

; 249  :     block[4 * i + 2] = (short)CLIP(-32768, 32767, (74 * (tmp[i] - tmp[8 + i] + tmp[12 + i]) + rnd_factor) >> shift);

	movsx	eax, WORD PTR [r10-8]
	movsx	ecx, WORD PTR [r10-24]
	sub	ecx, eax
	movsx	eax, WORD PTR [r10]
	add	ecx, eax
	imul	eax, ecx, 74				; 0000004aH
	mov	ecx, r8d
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN34@fast_inver
	cmp	eax, r15d
	cmovl	eax, r15d
	jmp	SHORT $LN21@fast_inver
$LN34@fast_inver:
	mov	eax, 32767				; 00007fffH
$LN21@fast_inver:
	mov	WORD PTR [r9], ax

; 250  :     block[4 * i + 3] = (short)CLIP(-32768, 32767, (55 * c[0] + 29 * c[2] - c[3] + rnd_factor) >> shift);

	imul	ecx, r14d, 55				; 00000037H
	imul	eax, edi, 29
	add	eax, ecx
	mov	ecx, r8d
	sub	eax, esi
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN24@fast_inver
	mov	eax, 32767				; 00007fffH
	jmp	SHORT $LN26@fast_inver
$LN24@fast_inver:
	cmp	eax, r15d
	cmovl	eax, r15d
$LN26@fast_inver:
	mov	WORD PTR [r9+2], ax
	add	r10, 2
	add	r9, 8
	sub	rbx, 1
	jne	$LL4@fast_inver

; 251  :   }
; 252  : }

	mov	rbx, QWORD PTR [rsp+24]
	mov	rbp, QWORD PTR [rsp+32]
	mov	rsi, QWORD PTR [rsp+40]
	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
fast_inverse_dst_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
src$ = 8
dst$ = 16
shift$ = 24
partial_butterfly_4_generic PROC

; 257  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	rsi, rdx
	mov	r11, rcx
	mov	edi, r8d

; 258  :   int32_t j;
; 259  :   int32_t e[2], o[2];
; 260  :   int32_t add = 1 << (shift - 1);

	lea	ecx, DWORD PTR [r8-1]
	mov	ebx, 1
	shl	ebx, cl

; 261  :   const int32_t line = 4;
; 262  : 
; 263  :   for (j = 0; j < line; j++) {
; 264  :     // E and O
; 265  :     e[0] = src[0] + src[3];
; 266  :     o[0] = src[0] - src[3];
; 267  :     e[1] = src[1] + src[2];
; 268  :     o[1] = src[1] - src[2];
; 269  : 
; 270  :     dst[0] = (short)((kvz_g_dct_4[0][0] * e[0] + kvz_g_dct_4[0][1] * e[1] + add) >> shift);

	mov	ecx, edi
	movsx	eax, WORD PTR [r11+6]
	movsx	r10d, WORD PTR [r11]
	movsx	r8d, WORD PTR [r11+2]
	lea	r9d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movsx	eax, WORD PTR [r11+4]
	lea	edx, DWORD PTR [r8+rax]
	sub	r8d, eax
	lea	eax, DWORD PTR [rdx+r9]

; 271  :     dst[2 * line] = (short)((kvz_g_dct_4[2][0] * e[0] + kvz_g_dct_4[2][1] * e[1] + add) >> shift);

	sub	r9d, edx
	shl	eax, 6
	add	eax, ebx
	shl	r9d, 6
	sar	eax, cl

; 272  :     dst[line] = (short)((kvz_g_dct_4[1][0] * o[0] + kvz_g_dct_4[1][1] * o[1] + add) >> shift);

	lea	edx, DWORD PTR [r8+r8*8]
	mov	WORD PTR [rsi], ax
	add	r9d, ebx
	sar	r9d, cl
	mov	WORD PTR [rsi+16], r9w
	imul	ecx, r10d, 83				; 00000053H
	add	ecx, ebx
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, edi
	sar	eax, cl

; 273  :     dst[3 * line] = (short)((kvz_g_dct_4[3][0] * o[0] + kvz_g_dct_4[3][1] * o[1] + add) >> shift);

	lea	edx, DWORD PTR [r10+r10*8]
	mov	WORD PTR [rsi+8], ax
	shl	edx, 2
	imul	eax, r8d, 83				; 00000053H
	sub	edx, eax
	add	edx, ebx
	sar	edx, cl
	mov	WORD PTR [rsi+24], dx
	movsx	eax, WORD PTR [r11+14]
	movsx	r10d, WORD PTR [r11+8]
	movsx	r9d, WORD PTR [r11+10]
	lea	r8d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movsx	eax, WORD PTR [r11+12]
	lea	edx, DWORD PTR [r9+rax]
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx+r8]
	sub	r8d, edx
	shl	eax, 6
	add	eax, ebx
	shl	r8d, 6
	sar	eax, cl
	lea	edx, DWORD PTR [r9+r9*8]
	mov	WORD PTR [rsi+2], ax
	add	r8d, ebx
	sar	r8d, cl
	mov	WORD PTR [rsi+18], r8w
	imul	ecx, r10d, 83				; 00000053H
	add	ecx, ebx
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, edi
	sar	eax, cl
	lea	edx, DWORD PTR [r10+r10*8]
	mov	WORD PTR [rsi+10], ax
	imul	eax, r9d, 83				; 00000053H
	shl	edx, 2
	sub	edx, eax
	add	edx, ebx
	sar	edx, cl
	mov	WORD PTR [rsi+26], dx
	movsx	eax, WORD PTR [r11+22]
	movsx	r10d, WORD PTR [r11+16]
	movsx	r9d, WORD PTR [r11+18]
	lea	r8d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movsx	eax, WORD PTR [r11+20]
	lea	edx, DWORD PTR [r9+rax]
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx+r8]
	shl	eax, 6

; 261  :   const int32_t line = 4;
; 262  : 
; 263  :   for (j = 0; j < line; j++) {
; 264  :     // E and O
; 265  :     e[0] = src[0] + src[3];
; 266  :     o[0] = src[0] - src[3];
; 267  :     e[1] = src[1] + src[2];
; 268  :     o[1] = src[1] - src[2];
; 269  : 
; 270  :     dst[0] = (short)((kvz_g_dct_4[0][0] * e[0] + kvz_g_dct_4[0][1] * e[1] + add) >> shift);

	sub	r8d, edx
	add	eax, ebx
	sar	eax, cl

; 272  :     dst[line] = (short)((kvz_g_dct_4[1][0] * o[0] + kvz_g_dct_4[1][1] * o[1] + add) >> shift);

	lea	edx, DWORD PTR [r9+r9*8]
	mov	WORD PTR [rsi+4], ax
	shl	r8d, 6
	add	r8d, ebx
	sar	r8d, cl
	mov	WORD PTR [rsi+20], r8w
	imul	ecx, r10d, 83				; 00000053H
	add	ecx, ebx
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, edi
	sar	eax, cl

; 273  :     dst[3 * line] = (short)((kvz_g_dct_4[3][0] * o[0] + kvz_g_dct_4[3][1] * o[1] + add) >> shift);

	lea	edx, DWORD PTR [r10+r10*8]
	mov	WORD PTR [rsi+12], ax
	shl	edx, 2
	imul	eax, r9d, 83				; 00000053H
	sub	edx, eax
	add	edx, ebx
	sar	edx, cl
	mov	WORD PTR [rsi+28], dx
	movsx	eax, WORD PTR [r11+30]
	movsx	r10d, WORD PTR [r11+24]
	movsx	r9d, WORD PTR [r11+26]
	lea	r8d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movsx	eax, WORD PTR [r11+28]
	lea	edx, DWORD PTR [r9+rax]
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx+r8]
	sub	r8d, edx
	shl	eax, 6
	add	eax, ebx
	shl	r8d, 6
	sar	eax, cl
	lea	edx, DWORD PTR [r9+r9*8]
	mov	WORD PTR [rsi+6], ax
	add	r8d, ebx
	sar	r8d, cl
	mov	WORD PTR [rsi+22], r8w
	imul	ecx, r10d, 83				; 00000053H
	add	ecx, ebx
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, edi

; 274  : 
; 275  :     src += 4;
; 276  :     dst++;
; 277  :   }
; 278  : }

	mov	rdi, QWORD PTR [rsp+24]
	lea	edx, DWORD PTR [r10+r10*8]
	shl	edx, 2
	sar	eax, cl
	mov	WORD PTR [rsi+14], ax
	imul	eax, r9d, 83				; 00000053H
	sub	edx, eax
	add	edx, ebx
	mov	rbx, QWORD PTR [rsp+8]
	sar	edx, cl
	mov	WORD PTR [rsi+30], dx
	mov	rsi, QWORD PTR [rsp+16]
	ret	0
partial_butterfly_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
src$ = 16
dst$ = 24
shift$ = 32
partial_butterfly_inverse_4_generic PROC

; 283  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	mov	rbx, rcx

; 284  :   int j;
; 285  :   int e[2], o[2];
; 286  :   int add = 1 << (shift - 1);

	lea	r9, QWORD PTR [rdx+4]
	lea	ecx, DWORD PTR [r8-1]
	mov	r10d, 1
	shl	r10d, cl
	mov	r11d, r8d
	add	rbx, 8
	mov	esi, 2
	mov	ebp, -32768				; ffffffffffff8000H
	npad	5
$LL4@partial_bu:

; 287  :   const int32_t line = 4;
; 288  : 
; 289  :   for (j = 0; j < line; j++) {
; 290  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 291  :     o[0] = kvz_g_dct_4[1][0] * src[line] + kvz_g_dct_4[3][0] * src[3 * line];

	movsx	r8d, WORD PTR [rbx]
	movsx	edx, WORD PTR [rbx+16]
	imul	eax, r8d, 83				; 00000053H

; 292  :     o[1] = kvz_g_dct_4[1][1] * src[line] + kvz_g_dct_4[3][1] * src[3 * line];

	lea	edi, DWORD PTR [r8+r8*8]
	lea	ecx, DWORD PTR [rdx+rdx*8]
	shl	edi, 2
	lea	r14d, DWORD PTR [rax+rcx*4]

; 293  :     e[0] = kvz_g_dct_4[0][0] * src[0] + kvz_g_dct_4[2][0] * src[2 * line];

	movsx	ecx, WORD PTR [rbx+8]
	imul	eax, edx, 83				; 00000053H
	mov	edx, ecx

; 294  :     e[1] = kvz_g_dct_4[0][1] * src[0] + kvz_g_dct_4[2][1] * src[2 * line];

	shl	ecx, 6
	shl	edx, 6
	sub	edi, eax
	movsx	eax, WORD PTR [rbx-8]
	shl	eax, 6
	add	edx, eax
	sub	eax, ecx

; 295  : 
; 296  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 297  :     dst[0] = (short)CLIP(-32768, 32767, (e[0] + o[0] + add) >> shift);

	mov	ecx, r11d
	lea	r8d, DWORD PTR [r14+rdx]
	add	r8d, r10d
	sar	r8d, cl
	cmp	r8d, 32767				; 00007fffH
	jle	SHORT $LN6@partial_bu
	mov	r8d, 32767				; 00007fffH
	jmp	SHORT $LN8@partial_bu
$LN6@partial_bu:
	cmp	r8d, ebp
	cmovl	r8d, ebp
$LN8@partial_bu:
	mov	WORD PTR [r9-4], r8w

; 298  :     dst[1] = (short)CLIP(-32768, 32767, (e[1] + o[1] + add) >> shift);

	lea	r8d, DWORD PTR [rax+rdi]
	add	r8d, r10d
	sar	r8d, cl
	cmp	r8d, 32767				; 00007fffH
	jle	SHORT $LN12@partial_bu
	mov	r8d, 32767				; 00007fffH
	jmp	SHORT $LN14@partial_bu
$LN12@partial_bu:
	cmp	r8d, ebp
	cmovl	r8d, ebp
$LN14@partial_bu:

; 299  :     dst[2] = (short)CLIP(-32768, 32767, (e[1] - o[1] + add) >> shift);

	sub	eax, edi
	mov	WORD PTR [r9-2], r8w
	add	eax, r10d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN18@partial_bu
	mov	eax, 32767				; 00007fffH
	jmp	SHORT $LN20@partial_bu
$LN18@partial_bu:
	cmp	eax, ebp
	cmovl	eax, ebp
$LN20@partial_bu:

; 300  :     dst[3] = (short)CLIP(-32768, 32767, (e[0] - o[0] + add) >> shift);

	sub	edx, r14d
	mov	WORD PTR [r9], ax
	add	edx, r10d
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN24@partial_bu
	mov	edx, 32767				; 00007fffH
	jmp	SHORT $LN26@partial_bu
$LN24@partial_bu:
	cmp	edx, ebp
	cmovl	edx, ebp
$LN26@partial_bu:
	mov	WORD PTR [r9+2], dx
	movsx	edx, WORD PTR [rbx+2]
	movsx	r8d, WORD PTR [rbx+18]
	imul	ecx, edx, 83				; 00000053H
	lea	edi, DWORD PTR [rdx+rdx*8]
	lea	eax, DWORD PTR [r8+r8*8]
	shl	edi, 2
	lea	r14d, DWORD PTR [rcx+rax*4]
	imul	eax, r8d, 83				; 00000053H
	movsx	r8d, WORD PTR [rbx-6]
	mov	ecx, r11d
	shl	r8d, 6
	sub	edi, eax
	movsx	eax, WORD PTR [rbx+10]
	mov	edx, eax
	shl	eax, 6
	shl	edx, 6
	add	edx, r8d
	sub	r8d, eax
	lea	eax, DWORD PTR [r14+rdx]
	add	eax, r10d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN33@partial_bu

; 295  : 
; 296  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 297  :     dst[0] = (short)CLIP(-32768, 32767, (e[0] + o[0] + add) >> shift);

	mov	eax, 32767				; 00007fffH
	jmp	SHORT $LN36@partial_bu
$LN33@partial_bu:
	cmp	eax, ebp
	cmovl	eax, ebp
$LN36@partial_bu:
	mov	WORD PTR [r9+4], ax

; 298  :     dst[1] = (short)CLIP(-32768, 32767, (e[1] + o[1] + add) >> shift);

	lea	eax, DWORD PTR [r8+rdi]
	add	eax, r10d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN39@partial_bu
	mov	eax, 32767				; 00007fffH
	jmp	SHORT $LN42@partial_bu
$LN39@partial_bu:
	cmp	eax, ebp
	cmovl	eax, ebp
$LN42@partial_bu:

; 299  :     dst[2] = (short)CLIP(-32768, 32767, (e[1] - o[1] + add) >> shift);

	sub	r8d, edi
	mov	WORD PTR [r9+6], ax
	add	r8d, r10d
	sar	r8d, cl
	cmp	r8d, 32767				; 00007fffH
	jle	SHORT $LN45@partial_bu
	mov	r8d, 32767				; 00007fffH
	jmp	SHORT $LN48@partial_bu
$LN45@partial_bu:
	cmp	r8d, ebp
	cmovl	r8d, ebp
$LN48@partial_bu:

; 300  :     dst[3] = (short)CLIP(-32768, 32767, (e[0] - o[0] + add) >> shift);

	sub	edx, r14d
	mov	WORD PTR [r9+8], r8w
	add	edx, r10d
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN51@partial_bu
	mov	edx, 32767				; 00007fffH
	jmp	SHORT $LN54@partial_bu
$LN51@partial_bu:
	cmp	edx, ebp
	cmovl	edx, ebp
$LN54@partial_bu:
	mov	WORD PTR [r9+10], dx
	add	rbx, 4
	add	r9, 16
	sub	rsi, 1
	jne	$LL4@partial_bu

; 301  : 
; 302  :     src++;
; 303  :     dst += 4;
; 304  :   }
; 305  : }

	mov	rbx, QWORD PTR [rsp+16]
	mov	rbp, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	pop	r14
	ret	0
partial_butterfly_inverse_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
src$ = 48
dst$ = 56
shift$ = 64
tv1518 = 72
partial_butterfly_8_generic PROC

; 310  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	r13, rcx

; 311  :   int32_t j, k;
; 312  :   int32_t e[4], o[4];
; 313  :   int32_t ee[2], eo[2];
; 314  :   int32_t add = 1 << (shift - 1);

	mov	QWORD PTR tv1518[rsp], 8
	lea	ecx, DWORD PTR [r8-1]
	mov	eax, 1
	shl	eax, cl
	lea	r12, QWORD PTR [rdx+32]
	add	r13, 12
	mov	ebp, r8d
	npad	6
$LL4@partial_bu:

; 315  :   const int32_t line = 8;
; 316  : 
; 317  :   for (j = 0; j < line; j++) {
; 318  :     // E and O
; 319  :     for (k = 0; k < 4; k++) {
; 320  :       e[k] = src[k] + src[7 - k];

	movsx	ecx, WORD PTR [r13+2]
	movsx	r15d, WORD PTR [r13-12]
	movsx	r14d, WORD PTR [r13-10]
	movsx	esi, WORD PTR [r13-8]
	movsx	edi, WORD PTR [r13-6]
	lea	ebx, DWORD PTR [r15+rcx]

; 321  :       o[k] = src[k] - src[7 - k];

	sub	r15d, ecx
	movsx	ecx, WORD PTR [r13]
	lea	r11d, DWORD PTR [r14+rcx]
	sub	r14d, ecx
	movsx	ecx, WORD PTR [r13-2]
	lea	r9d, DWORD PTR [rsi+rcx]
	sub	esi, ecx
	movsx	ecx, WORD PTR [r13-4]

; 322  :     }
; 323  :     // EE and EO
; 324  :     ee[0] = e[0] + e[3];
; 325  :     eo[0] = e[0] - e[3];

	lea	r8d, DWORD PTR [r9+r11]

; 326  :     ee[1] = e[1] + e[2];

	sub	r11d, r9d
	lea	edx, DWORD PTR [rdi+rcx]
	sub	edi, ecx
	lea	r10d, DWORD PTR [rbx+rdx]

; 327  :     eo[1] = e[1] - e[2];
; 328  : 
; 329  :     dst[0] = (short)((kvz_g_dct_8[0][0] * ee[0] + kvz_g_dct_8[0][1] * ee[1] + add) >> shift);

	mov	ecx, ebp
	sub	ebx, edx
	lea	edx, DWORD PTR [r8+r10]
	shl	edx, 6

; 330  :     dst[4 * line] = (short)((kvz_g_dct_8[4][0] * ee[0] + kvz_g_dct_8[4][1] * ee[1] + add) >> shift);

	sub	r10d, r8d
	add	edx, eax
	shl	r10d, 6
	sar	edx, cl

; 331  :     dst[2 * line] = (short)((kvz_g_dct_8[2][0] * eo[0] + kvz_g_dct_8[2][1] * eo[1] + add) >> shift);

	lea	r8d, DWORD PTR [r11+r11*8]
	mov	WORD PTR [r12-32], dx
	add	r10d, eax
	sar	r10d, cl
	mov	WORD PTR [r12+32], r10w
	imul	edx, ebx, 83				; 00000053H
	add	edx, eax
	lea	r9d, DWORD PTR [rdx+r8*4]
	sar	r9d, cl

; 332  :     dst[6 * line] = (short)((kvz_g_dct_8[6][0] * eo[0] + kvz_g_dct_8[6][1] * eo[1] + add) >> shift);

	lea	edx, DWORD PTR [rbx+rbx*8]
	shl	edx, 2
	mov	WORD PTR [r12], r9w
	imul	ecx, r11d, 83				; 00000053H
	sub	edx, ecx
	mov	ecx, ebp
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r12+64], dx

; 333  : 
; 334  :     dst[line] = (short)((kvz_g_dct_8[1][0] * o[0] + kvz_g_dct_8[1][1] * o[1] + kvz_g_dct_8[1][2] * o[2] + kvz_g_dct_8[1][3] * o[3] + add) >> shift);

	lea	edx, DWORD PTR [rdi+rdi*8]
	imul	ecx, esi, 50				; 00000032H
	lea	r8d, DWORD PTR [rcx+rdx*2]
	imul	ecx, r14d, 75				; 0000004bH
	imul	edx, r15d, 89				; 00000059H
	add	ecx, eax
	add	ecx, r8d

; 335  :     dst[3 * line] = (short)((kvz_g_dct_8[3][0] * o[0] + kvz_g_dct_8[3][1] * o[1] + kvz_g_dct_8[3][2] * o[2] + kvz_g_dct_8[3][3] * o[3] + add) >> shift);

	imul	r8d, esi, -89				; ffffffffffffffa7H
	add	edx, ecx
	mov	ecx, ebp
	sar	edx, cl
	mov	WORD PTR [r12-16], dx
	imul	ecx, edi, 50				; 00000032H
	imul	edx, r15d, 75				; 0000004bH
	sub	r8d, ecx
	lea	ecx, DWORD PTR [r14+r14*8]
	add	ecx, ecx
	sub	r8d, ecx
	lea	ecx, DWORD PTR [rax+r8]
	add	edx, ecx
	mov	ecx, ebp
	sar	edx, cl

; 336  :     dst[5 * line] = (short)((kvz_g_dct_8[5][0] * o[0] + kvz_g_dct_8[5][1] * o[1] + kvz_g_dct_8[5][2] * o[2] + kvz_g_dct_8[5][3] * o[3] + add) >> shift);

	lea	ecx, DWORD PTR [rsi+rsi*8]
	mov	WORD PTR [r12+16], dx
	imul	edx, edi, 75				; 0000004bH
	lea	r8d, DWORD PTR [rdx+rcx*2]
	imul	ecx, r14d, 89				; 00000059H
	imul	edx, r15d, 50				; 00000032H
	sub	r8d, ecx
	lea	ecx, DWORD PTR [rax+r8]
	add	edx, ecx
	mov	ecx, ebp
	sar	edx, cl

; 337  :     dst[7 * line] = (short)((kvz_g_dct_8[7][0] * o[0] + kvz_g_dct_8[7][1] * o[1] + kvz_g_dct_8[7][2] * o[2] + kvz_g_dct_8[7][3] * o[3] + add) >> shift);

	imul	ecx, edi, 89				; 00000059H
	imul	r8d, esi, 75				; 0000004bH
	mov	WORD PTR [r12+48], dx

; 336  :     dst[5 * line] = (short)((kvz_g_dct_8[5][0] * o[0] + kvz_g_dct_8[5][1] * o[1] + kvz_g_dct_8[5][2] * o[2] + kvz_g_dct_8[5][3] * o[3] + add) >> shift);

	sub	r8d, ecx
	lea	edx, DWORD PTR [r15+r15*8]

; 337  :     dst[7 * line] = (short)((kvz_g_dct_8[7][0] * o[0] + kvz_g_dct_8[7][1] * o[1] + kvz_g_dct_8[7][2] * o[2] + kvz_g_dct_8[7][3] * o[3] + add) >> shift);

	imul	ecx, r14d, 50				; 00000032H

; 338  : 
; 339  :     src += 8;
; 340  :     dst++;

	lea	r12, QWORD PTR [r12+2]
	lea	r13, QWORD PTR [r13+16]
	sub	r8d, ecx
	lea	ecx, DWORD PTR [rax+r8]
	lea	r8d, DWORD PTR [rcx+rdx*2]
	mov	ecx, ebp
	sar	r8d, cl
	sub	QWORD PTR tv1518[rsp], 1
	mov	WORD PTR [r12+78], r8w
	jne	$LL4@partial_bu

; 341  :   }
; 342  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
partial_butterfly_8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
o$ = 0
src$ = 64
dst$ = 72
shift$ = 80
partial_butterfly_inverse_8_generic PROC

; 347  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 16

; 348  :   int32_t j, k;
; 349  :   int32_t e[4], o[4];
; 350  :   int32_t ee[2], eo[2];
; 351  :   int32_t add = 1 << (shift - 1);

	mov	r9d, DWORD PTR __isa_available
	lea	r10, QWORD PTR [rdx+2]
	mov	r11, rcx
	lea	r15, OFFSET FLAT:kvz_g_dct_8+88
	lea	ecx, DWORD PTR [r8-1]
	mov	ebx, 1
	shl	ebx, cl
	mov	edi, r8d
	add	r11, 80					; 00000050H
	mov	r13d, 8
	mov	r14d, -32768				; ffffffffffff8000H
	npad	1
$LL4@partial_bu:

; 352  :   const int32_t line = 8;
; 353  : 
; 354  :   for (j = 0; j < line; j++) {
; 355  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 356  :     for (k = 0; k < 4; k++) {

	movsx	ecx, WORD PTR [r11+32]
	movsx	eax, WORD PTR [r11]
	movsx	edx, WORD PTR [r11-32]
	movsx	r8d, WORD PTR [r11-64]
	cmp	r9d, 2
	jl	$LN79@partial_bu
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0

; 357  :       o[k] = kvz_g_dct_8[1][k] * src[line] + kvz_g_dct_8[3][k] * src[3 * line] + kvz_g_dct_8[5][k] * src[5 * line] + kvz_g_dct_8[7][k] * src[7 * line];

	movq	xmm0, QWORD PTR kvz_g_dct_8+80
	pmovsxwd xmm3, xmm0
	pmulld	xmm3, xmm1
	movd	xmm0, ecx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_8+112
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm3, xmm2
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_8+48
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm3, xmm2
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_8+16
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm3, xmm2
	movdqu	XMMWORD PTR o$[rsp], xmm3
	jmp	SHORT $LN6@partial_bu
$LN79@partial_bu:
	mov	esi, eax
	mov	r14d, r8d
	lea	r8, QWORD PTR o$[rsp]
	mov	r9d, ecx
	lea	rax, OFFSET FLAT:kvz_g_dct_8+80
	mov	ebp, edx
	npad	10
$LL30@partial_bu:
	movsx	edx, WORD PTR [rax-64]
	lea	r8, QWORD PTR [r8+4]
	movsx	ecx, WORD PTR [rax-32]
	imul	ecx, ebp
	imul	edx, r14d
	add	edx, ecx
	movsx	ecx, WORD PTR [rax+32]
	imul	ecx, r9d
	add	edx, ecx
	movsx	ecx, WORD PTR [rax]
	imul	ecx, esi
	add	rax, 2
	add	edx, ecx
	mov	DWORD PTR [r8-4], edx
	cmp	rax, r15
	jl	SHORT $LL30@partial_bu
	mov	r14d, -32768				; ffffffffffff8000H
$LN6@partial_bu:

; 358  :     }
; 359  : 
; 360  :     eo[0] = kvz_g_dct_8[2][0] * src[2 * line] + kvz_g_dct_8[6][0] * src[6 * line];

	movsx	r8d, WORD PTR [r11-48]
	movsx	edx, WORD PTR [r11+16]

; 361  :     eo[1] = kvz_g_dct_8[2][1] * src[2 * line] + kvz_g_dct_8[6][1] * src[6 * line];
; 362  :     ee[0] = kvz_g_dct_8[0][0] * src[0] + kvz_g_dct_8[4][0] * src[4 * line];

	movsx	esi, WORD PTR [r11-80]

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	ebp, DWORD PTR o$[rsp]
	imul	eax, r8d, 83				; 00000053H
	lea	ecx, DWORD PTR [rdx+rdx*8]
	shl	esi, 6
	lea	r9d, DWORD PTR [rax+rcx*4]
	movsx	ecx, WORD PTR [r11-16]
	imul	eax, edx, 83				; 00000053H
	mov	r15d, ecx
	shl	r15d, 6
	lea	edx, DWORD PTR [r8+r8*8]
	shl	edx, 2
	add	r15d, esi
	shl	ecx, 6
	sub	esi, ecx
	mov	ecx, edi
	sub	edx, eax
	lea	eax, DWORD PTR [r15+r9]
	sub	r15d, r9d
	lea	r8d, DWORD PTR [rsi+rdx]
	sub	esi, edx
	lea	edx, DWORD PTR [rax+rbp]
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN80@partial_bu
	cmp	edx, r14d
	cmovl	edx, r14d
	jmp	SHORT $LN15@partial_bu
$LN80@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN15@partial_bu:

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	mov	r12d, DWORD PTR o$[rsp+12]
	mov	WORD PTR [r10-2], dx
	mov	edx, r15d
	sub	edx, r12d
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN81@partial_bu
	cmp	edx, r14d
	cmovl	edx, r14d
	jmp	SHORT $LN21@partial_bu
$LN81@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN21@partial_bu:

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	r14d, DWORD PTR o$[rsp+4]

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	mov	WORD PTR [r10+6], dx
	lea	edx, DWORD PTR [r14+r8]
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN82@partial_bu

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	ecx, -32768				; ffffffffffff8000H
	cmp	edx, ecx
	cmovl	edx, ecx
	jmp	SHORT $LN37@partial_bu
$LN82@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN37@partial_bu:

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	mov	r9d, DWORD PTR o$[rsp+8]
	mov	ecx, edi
	mov	WORD PTR [r10], dx
	mov	edx, esi
	sub	edx, r9d
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN83@partial_bu
	mov	ecx, -32768				; ffffffffffff8000H
	cmp	edx, ecx
	cmovl	edx, ecx
	jmp	SHORT $LN43@partial_bu
$LN83@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN43@partial_bu:
	mov	WORD PTR [r10+8], dx
	mov	ecx, edi
	lea	edx, DWORD PTR [r9+rsi]
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN84@partial_bu

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	ecx, -32768				; ffffffffffff8000H
	cmp	edx, ecx
	cmovl	edx, ecx
	jmp	SHORT $LN50@partial_bu
$LN84@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN50@partial_bu:

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	sub	r8d, r14d
	mov	WORD PTR [r10+2], dx
	add	r8d, ebx
	mov	ecx, edi
	sar	r8d, cl
	mov	r14d, -32768				; ffffffffffff8000H
	cmp	r8d, 32767				; 00007fffH
	jg	SHORT $LN85@partial_bu
	cmp	r8d, r14d
	cmovl	r8d, r14d
	jmp	SHORT $LN56@partial_bu
$LN85@partial_bu:
	mov	r8d, 32767				; 00007fffH
$LN56@partial_bu:

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	lea	edx, DWORD PTR [r12+r15]

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	mov	WORD PTR [r10+10], r8w
	add	edx, ebx
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jg	SHORT $LN86@partial_bu

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];
; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];
; 367  :     e[3] = ee[0] - eo[0];
; 368  :     e[1] = ee[1] + eo[1];
; 369  :     e[2] = ee[1] - eo[1];
; 370  :     for (k = 0; k < 4; k++) {
; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	edx, r14d
	cmovl	edx, r14d
	jmp	SHORT $LN63@partial_bu
$LN86@partial_bu:
	mov	edx, 32767				; 00007fffH
$LN63@partial_bu:

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	sub	eax, ebp
	mov	WORD PTR [r10+4], dx
	add	eax, ebx
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN87@partial_bu
	cmp	eax, r14d
	cmovl	eax, r14d
	jmp	SHORT $LN69@partial_bu
$LN87@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN69@partial_bu:
	mov	WORD PTR [r10+12], ax
	lea	r15, OFFSET FLAT:kvz_g_dct_8+88
	mov	r9d, DWORD PTR __isa_available

; 373  :     }
; 374  :     src++;
; 375  :     dst += 8;

	add	r10, 16
	add	r11, 2
	sub	r13, 1
	jne	$LL4@partial_bu

; 376  :   }
; 377  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 16
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
partial_butterfly_inverse_8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
o$4$ = 0
o$3$ = 4
o$2$ = 8
o$1$ = 12
tv3484 = 16
tv3485 = 24
tv3482 = 32
eo$ = 40
e$ = 56
src$ = 160
dst$ = 168
o$6$ = 176
shift$ = 176
o$5$ = 184
partial_butterfly_16_generic PROC

; 382  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H
	mov	rbp, rcx

; 383  :   int32_t j, k;
; 384  :   int32_t e[8], o[8];
; 385  :   int32_t ee[4], eo[4];
; 386  :   int32_t eee[2], eeo[2];
; 387  :   int32_t add = 1 << (shift - 1);

	mov	QWORD PTR tv3482[rsp], 16
	lea	ecx, DWORD PTR [r8-1]
	mov	edi, 1
	shl	edi, cl
	lea	r15, QWORD PTR [rdx+128]
	add	rbp, 28
	mov	QWORD PTR tv3485[rsp], r15
	mov	QWORD PTR tv3484[rsp], rbp
	mov	esi, r8d
	npad	13
$LL4@partial_bu:

; 388  :   const int32_t line = 16;
; 389  : 
; 390  :   for (j = 0; j < line; j++) {
; 391  :     // E and O
; 392  :     for (k = 0; k < 8; k++) {
; 393  :       e[k] = src[k] + src[15 - k];

	movsx	ecx, WORD PTR [rbp+2]
	movsx	r12d, WORD PTR [rbp-28]
	movsx	r13d, WORD PTR [rbp-26]
	movsx	edx, WORD PTR [rbp-24]
	movsx	r10d, WORD PTR [rbp-10]
	movsx	ebx, WORD PTR [rbp-6]
	lea	eax, DWORD PTR [r12+rcx]
	movsx	r11d, WORD PTR [rbp-8]

; 394  :       o[k] = src[k] - src[15 - k];

	sub	r12d, ecx
	movsx	ecx, WORD PTR [rbp]
	movsx	r9d, WORD PTR [rbp-12]
	mov	DWORD PTR e$[rsp], eax
	lea	eax, DWORD PTR [rcx+r13]
	sub	r13d, ecx
	movsx	ecx, WORD PTR [rbp-2]
	mov	DWORD PTR e$[rsp+4], eax
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [rbp-4]
	mov	DWORD PTR e$[rsp+8], eax
	mov	DWORD PTR o$6$[rsp], edx
	movsx	edx, WORD PTR [rbp-22]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	mov	DWORD PTR e$[rsp+12], eax
	movsx	eax, WORD PTR [rbp-20]
	mov	ecx, eax
	mov	DWORD PTR o$5$[rsp], edx
	add	eax, ebx
	sub	ecx, ebx
	mov	DWORD PTR o$4$[rsp], ecx
	movsx	ecx, WORD PTR [rbp-18]
	mov	edx, ecx
	add	ecx, r11d

; 395  :     }
; 396  :     // EE and EO
; 397  :     for (k = 0; k < 4; k++) {
; 398  :       ee[k] = e[k] + e[7 - k];

	movd	xmm1, eax
	sub	edx, r11d
	mov	DWORD PTR o$3$[rsp], edx
	movsx	edx, WORD PTR [rbp-16]
	mov	r8d, edx
	movd	xmm2, ecx
	sub	r8d, r10d
	punpckldq xmm2, xmm1
	mov	DWORD PTR o$2$[rsp], r8d
	add	edx, r10d
	movsx	r8d, WORD PTR [rbp-14]

; 399  :       eo[k] = e[k] - e[7 - k];
; 400  :     }
; 401  :     // EEE and EEO
; 402  :     eee[0] = ee[0] + ee[3];
; 403  :     eeo[0] = ee[0] - ee[3];
; 404  :     eee[1] = ee[1] + ee[2];
; 405  :     eeo[1] = ee[1] - ee[2];
; 406  : 
; 407  :     dst[0] = (short)((kvz_g_dct_16[0][0] * eee[0] + kvz_g_dct_16[0][1] * eee[1] + add) >> shift);

	mov	ecx, esi
	mov	ebp, r8d
	add	r8d, r9d
	sub	ebp, r9d
	movd	xmm0, edx
	mov	DWORD PTR o$1$[rsp], ebp
	movd	xmm3, r8d
	punpckldq xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR e$[rsp]
	punpcklqdq xmm3, xmm2
	movdqa	xmm1, xmm3
	paddd	xmm1, xmm0
	psubd	xmm0, xmm3
	movdqu	XMMWORD PTR eo$[rsp], xmm0
	movd	r10d, xmm1
	movdqa	xmm0, xmm1
	psrldq	xmm0, 12
	movd	eax, xmm0
	movdqa	xmm0, xmm1
	psrldq	xmm0, 4
	movd	r9d, xmm0
	psrldq	xmm1, 8
	lea	r8d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movd	eax, xmm1
	lea	edx, DWORD PTR [r9+rax]
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx+r8]

; 408  :     dst[8 * line] = (short)((kvz_g_dct_16[8][0] * eee[0] + kvz_g_dct_16[8][1] * eee[1] + add) >> shift);

	sub	r8d, edx
	shl	eax, 6
	add	eax, edi
	shl	r8d, 6
	sar	eax, cl
	add	r8d, edi
	mov	WORD PTR [r15-128], ax
	sar	r8d, cl

; 409  :     dst[4 * line] = (short)((kvz_g_dct_16[4][0] * eeo[0] + kvz_g_dct_16[4][1] * eeo[1] + add) >> shift);

	mov	r11d, DWORD PTR eo$[rsp+12]
	lea	edx, DWORD PTR [r9+r9*8]
	mov	rbx, QWORD PTR eo$[rsp+8]
	mov	rbp, QWORD PTR eo$[rsp+4]
	mov	r14d, DWORD PTR eo$[rsp]
	imul	ecx, r10d, 83				; 00000053H
	mov	WORD PTR [r15+128], r8w
	lea	r8, OFFSET FLAT:kvz_g_dct_16+68
	add	ecx, edi
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, esi
	sar	eax, cl

; 410  :     dst[12 * line] = (short)((kvz_g_dct_16[12][0] * eeo[0] + kvz_g_dct_16[12][1] * eeo[1] + add) >> shift);

	lea	edx, DWORD PTR [r10+r10*8]
	shl	edx, 2
	mov	r10d, 4
	mov	WORD PTR [r15], ax
	imul	eax, r9d, 83				; 00000053H
	lea	r9, QWORD PTR [r15-64]
	sub	edx, eax
	add	edx, edi
	sar	edx, cl
	mov	WORD PTR [r15+256], dx
$LL13@partial_bu:

; 411  : 
; 412  :     for (k = 2; k < 16; k += 4) {
; 413  :       dst[k*line] = (short)((kvz_g_dct_16[k][0] * eo[0] + kvz_g_dct_16[k][1] * eo[1] + kvz_g_dct_16[k][2] * eo[2] + kvz_g_dct_16[k][3] * eo[3] + add) >> shift);

	movsx	ecx, WORD PTR [r8-4]
	lea	r9, QWORD PTR [r9+128]
	movsx	eax, WORD PTR [r8-2]
	movsx	edx, WORD PTR [r8]
	lea	r8, QWORD PTR [r8+128]
	imul	eax, ebp
	imul	ecx, r14d
	imul	edx, ebx
	add	ecx, eax
	movsx	eax, WORD PTR [r8-126]
	imul	eax, r11d
	add	eax, edi
	add	eax, ecx
	mov	ecx, esi
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9-128], dx
	sub	r10, 1
	jne	SHORT $LL13@partial_bu

; 414  :     }
; 415  : 
; 416  :     for (k = 1; k < 16; k += 2) {

	mov	r11d, DWORD PTR o$6$[rsp]
	lea	r9, QWORD PTR [r15-96]
	mov	r15d, DWORD PTR o$2$[rsp]
	lea	rax, OFFSET FLAT:kvz_g_dct_16+36
	mov	ebx, DWORD PTR o$5$[rsp]
	mov	r10d, 8
	mov	ebp, DWORD PTR o$4$[rsp]
	mov	r14d, DWORD PTR o$3$[rsp]
	npad	11
$LL16@partial_bu:

; 417  :       dst[k*line] = (short)((kvz_g_dct_16[k][0] * o[0] + kvz_g_dct_16[k][1] * o[1] + kvz_g_dct_16[k][2] * o[2] + kvz_g_dct_16[k][3] * o[3] +

	movsx	r8d, WORD PTR [rax-4]
	lea	r9, QWORD PTR [r9+64]
	movsx	ecx, WORD PTR [rax-2]
	movsx	edx, WORD PTR [rax]
	lea	rax, QWORD PTR [rax+64]
	imul	ecx, r13d
	imul	r8d, r12d
	imul	edx, r11d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-62]
	imul	ecx, ebx
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-60]
	imul	ecx, ebp
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-58]
	imul	ecx, r14d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-56]
	imul	ecx, r15d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-54]
	imul	ecx, DWORD PTR o$1$[rsp]
	add	ecx, edi
	add	ecx, r8d
	add	edx, ecx
	mov	ecx, esi
	sar	edx, cl
	mov	WORD PTR [r9-64], dx
	sub	r10, 1
	jne	SHORT $LL16@partial_bu

; 418  :         kvz_g_dct_16[k][4] * o[4] + kvz_g_dct_16[k][5] * o[5] + kvz_g_dct_16[k][6] * o[6] + kvz_g_dct_16[k][7] * o[7] + add) >> shift);
; 419  :     }
; 420  : 
; 421  :     src += 16;

	mov	rbp, QWORD PTR tv3484[rsp]

; 422  :     dst++;

	mov	r15, QWORD PTR tv3485[rsp]
	add	rbp, 32					; 00000020H
	add	r15, 2
	mov	QWORD PTR tv3484[rsp], rbp
	sub	QWORD PTR tv3482[rsp], 1
	mov	QWORD PTR tv3485[rsp], r15
	jne	$LL4@partial_bu

; 423  :   }
; 424  : }

	mov	rbx, QWORD PTR [rsp+160]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
partial_butterfly_16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tv5718 = 0
tv5715 = 8
ee$ = 16
eo$ = 32
e$ = 48
o$ = 80
src$ = 256
dst$ = 264
shift$ = 272
add$1$ = 280
partial_butterfly_inverse_16_generic PROC

; 429  : {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 192				; 000000c0H

; 430  :   int32_t j, k;
; 431  :   int32_t e[8], o[8];
; 432  :   int32_t ee[4], eo[4];
; 433  :   int32_t eee[2], eeo[2];
; 434  :   int32_t add = 1 << (shift - 1);

	mov	r9d, DWORD PTR __isa_available
	lea	r10, OFFSET FLAT:kvz_g_dct_16+432
	movaps	XMMWORD PTR [rax-72], xmm6
	mov	r14, rcx
	movaps	XMMWORD PTR [rax-88], xmm7
	lea	ecx, DWORD PTR [r8-1]
	movaps	XMMWORD PTR [rax-104], xmm8
	add	rdx, 2
	mov	edi, 1
	movaps	XMMWORD PTR [rax-120], xmm9
	shl	edi, cl
	mov	esi, r8d
	mov	DWORD PTR add$1$[rbp-153], edi
	add	r14, 416				; 000001a0H
	movaps	XMMWORD PTR [rsp+112], xmm10
	mov	QWORD PTR tv5718[rsp], rdx
	mov	QWORD PTR tv5715[rsp], 16
	npad	13
$LL4@partial_bu:

; 435  :   const int32_t line = 16;
; 436  : 
; 437  :   for (j = 0; j < line; j++) {
; 438  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 439  :     for (k = 0; k < 8; k++)  {

	movsx	eax, WORD PTR [r14+64]
	movsx	ecx, WORD PTR [r14]
	movsx	edx, WORD PTR [r14-64]
	movsx	r8d, WORD PTR [r14-128]
	movsx	r15d, WORD PTR [r14-192]
	movsx	r12d, WORD PTR [r14-256]
	movsx	r13d, WORD PTR [r14-320]
	cmp	r9d, 2
	jl	$LN109@partial_bu
	movd	xmm0, eax
	movsx	eax, WORD PTR [r14-384]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm3, xmm0
	movd	xmm0, ecx

; 440  :       o[k] = kvz_g_dct_16[1][k] * src[line] + kvz_g_dct_16[3][k] * src[3 * line] + kvz_g_dct_16[5][k] * src[5 * line] + kvz_g_dct_16[7][k] * src[7 * line] +

	lea	rcx, QWORD PTR o$[rbp-153]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm4, xmm0
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm5, xmm0
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm6, xmm0
	movd	xmm0, r15d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm7, xmm0
	movd	xmm0, r12d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm8, xmm0
	movd	xmm0, r13d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm9, xmm0
	movd	xmm0, eax
	lea	rax, OFFSET FLAT:kvz_g_dct_16+416
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm10, xmm0
	npad	1
$LL7@partial_bu:
	movq	xmm0, QWORD PTR [rax+64]
	lea	rcx, QWORD PTR [rcx+16]
	pmovsxwd xmm2, xmm0
	movq	xmm0, QWORD PTR [rax]
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-64]
	pmulld	xmm1, xmm4
	pmulld	xmm2, xmm3
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-128]
	pmulld	xmm1, xmm5
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-192]
	pmulld	xmm1, xmm6
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-256]
	pmulld	xmm1, xmm7
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-320]
	pmulld	xmm1, xmm8
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-384]
	add	rax, 8
	pmulld	xmm1, xmm9
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, xmm10
	paddd	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx-16], xmm2
	cmp	rax, r10
	jl	$LL7@partial_bu
	jmp	$LN6@partial_bu
$LN109@partial_bu:
	movsx	esi, WORD PTR [r14-384]
	lea	rdi, OFFSET FLAT:kvz_g_dct_16+432
	mov	r11d, edx
	mov	ebx, r8d
	lea	r8, QWORD PTR o$[rbp-153]
	mov	r9d, eax
	lea	rdx, OFFSET FLAT:kvz_g_dct_16+416
	mov	r10d, ecx
$LL45@partial_bu:
	movsx	ecx, WORD PTR [rdx-384]
	lea	r8, QWORD PTR [r8+4]
	movsx	eax, WORD PTR [rdx-320]
	imul	eax, r13d
	imul	ecx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-256]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-192]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-128]
	imul	eax, ebx
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-64]
	imul	eax, r11d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx+64]
	imul	eax, r9d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx]
	imul	eax, r10d
	add	rdx, 2
	add	ecx, eax
	mov	DWORD PTR [r8-4], ecx
	cmp	rdx, rdi
	jl	SHORT $LL45@partial_bu
	mov	edi, DWORD PTR add$1$[rbp-153]
	mov	esi, DWORD PTR shift$[rbp-153]
	mov	r9d, DWORD PTR __isa_available
$LN6@partial_bu:

; 441  :         kvz_g_dct_16[9][k] * src[9 * line] + kvz_g_dct_16[11][k] * src[11 * line] + kvz_g_dct_16[13][k] * src[13 * line] + kvz_g_dct_16[15][k] * src[15 * line];
; 442  :     }
; 443  :     for (k = 0; k < 4; k++) {

	movsx	ecx, WORD PTR [r14+32]
	movsx	eax, WORD PTR [r14-96]
	movsx	edx, WORD PTR [r14-224]
	movsx	r8d, WORD PTR [r14-352]
	cmp	r9d, 2
	jl	$LN110@partial_bu
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0

; 444  :       eo[k] = kvz_g_dct_16[2][k] * src[2 * line] + kvz_g_dct_16[6][k] * src[6 * line] + kvz_g_dct_16[10][k] * src[10 * line] + kvz_g_dct_16[14][k] * src[14 * line];

	movq	xmm0, QWORD PTR kvz_g_dct_16+320
	pmovsxwd xmm5, xmm0
	pmulld	xmm5, xmm1
	movd	xmm0, ecx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_16+448
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm5, xmm2
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_16+192
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm5, xmm2
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_16+64
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm5, xmm2
	movdqu	XMMWORD PTR eo$[rbp-153], xmm5
	jmp	SHORT $LN9@partial_bu
$LN110@partial_bu:
	mov	r11d, edx
	lea	rsi, OFFSET FLAT:kvz_g_dct_16+328
	mov	ebx, r8d
	lea	rdx, OFFSET FLAT:kvz_g_dct_16+320
	lea	r8, QWORD PTR eo$[rbp-153]
	mov	r9d, ecx
	mov	r10d, eax
	npad	2
$LL47@partial_bu:
	movsx	ecx, WORD PTR [rdx-256]
	lea	r8, QWORD PTR [r8+4]
	movsx	eax, WORD PTR [rdx-128]
	imul	eax, r11d
	imul	ecx, ebx
	add	ecx, eax
	movsx	eax, WORD PTR [rdx+128]
	imul	eax, r9d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx]
	imul	eax, r10d
	add	rdx, 2
	add	ecx, eax
	mov	DWORD PTR [r8-4], ecx
	cmp	rdx, rsi
	jl	SHORT $LL47@partial_bu
	movdqu	xmm5, XMMWORD PTR eo$[rbp-153]
	mov	esi, DWORD PTR shift$[rbp-153]
$LN9@partial_bu:

; 445  :     }
; 446  :     eeo[0] = kvz_g_dct_16[4][0] * src[4 * line] + kvz_g_dct_16[12][0] * src[12 * line];

	movsx	r8d, WORD PTR [r14-288]
	movsx	edx, WORD PTR [r14-32]

; 447  :     eee[0] = kvz_g_dct_16[0][0] * src[0] + kvz_g_dct_16[8][0] * src[8 * line];

	movsx	r9d, WORD PTR [r14-160]
	movsx	r10d, WORD PTR [r14-416]
	mov	ebx, r9d
	imul	eax, r8d, 83				; 00000053H
	lea	ecx, DWORD PTR [rdx+rdx*8]
	shl	r10d, 6
	shl	ebx, 6
	add	ebx, r10d

; 448  :     eeo[1] = kvz_g_dct_16[4][1] * src[4 * line] + kvz_g_dct_16[12][1] * src[12 * line];
; 449  :     eee[1] = kvz_g_dct_16[0][1] * src[0] + kvz_g_dct_16[8][1] * src[8 * line];

	shl	r9d, 6
	sub	r10d, r9d

; 450  : 
; 451  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 452  :     for (k = 0; k < 2; k++) {
; 453  :       ee[k] = eee[k] + eeo[k];
; 454  :       ee[k + 2] = eee[1 - k] - eeo[1 - k];
; 455  :     }
; 456  :     for (k = 0; k < 4; k++) {
; 457  :       e[k] = ee[k] + eo[k];
; 458  :       e[k + 4] = ee[3 - k] - eo[3 - k];
; 459  :     }
; 460  :     for (k = 0; k < 8; k++) {

	xor	r9d, r9d
	lea	r11d, DWORD PTR [rax+rcx*4]
	imul	eax, edx, 83				; 00000053H
	lea	edx, DWORD PTR [r11+rbx]
	sub	ebx, r11d
	lea	ecx, DWORD PTR [r8+r8*8]
	movd	xmm1, edx
	mov	r8d, r10d
	shl	ecx, 2
	mov	DWORD PTR ee$[rsp], edx
	mov	r11d, -32768				; ffffffffffff8000H
	mov	rdx, QWORD PTR tv5718[rsp]
	sub	ecx, eax
	sub	r8d, ecx
	mov	DWORD PTR ee$[rbp-141], ebx
	mov	DWORD PTR ee$[rsp+8], r8d
	movd	xmm4, ebx
	lea	eax, DWORD PTR [rcx+r10]
	mov	DWORD PTR ee$[rsp+4], eax
	lea	r10d, QWORD PTR [r9+2]
	movdqu	xmm0, XMMWORD PTR ee$[rsp]
	movd	xmm2, eax
	punpckldq xmm2, xmm1
	paddd	xmm0, xmm5
	movdqu	XMMWORD PTR e$[rbp-153], xmm0
	movd	eax, xmm5
	movdqa	xmm1, xmm5
	psrldq	xmm1, 8
	movd	xmm0, r8d
	xor	r8d, r8d
	punpckldq xmm4, xmm0
	movdqa	xmm0, xmm5
	punpcklqdq xmm4, xmm2
	psrldq	xmm0, 4
	movd	xmm3, eax
	movd	eax, xmm0
	psrldq	xmm5, 12
	movd	xmm2, eax
	movd	eax, xmm1
	punpckldq xmm2, xmm3
	movd	xmm0, eax
	movd	eax, xmm5
	movd	xmm1, eax
	punpckldq xmm1, xmm0
	punpcklqdq xmm1, xmm2
	psubd	xmm4, xmm1
	movdqu	XMMWORD PTR e$[rbp-137], xmm4
	npad	8
$LL19@partial_bu:

; 461  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r8-153]
	mov	ecx, esi
	add	eax, DWORD PTR o$[rbp+r8-153]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN111@partial_bu
	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN24@partial_bu
$LN111@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN24@partial_bu:
	mov	WORD PTR [rdx-2], ax

; 462  :       dst[k + 8] = (short)MAX(-32768, MIN(32767, (e[7 - k] - o[7 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-125]
	sub	eax, DWORD PTR o$[rbp+r9-125]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN112@partial_bu
	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN30@partial_bu
$LN112@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN30@partial_bu:
	mov	WORD PTR [rdx+14], ax
	mov	eax, DWORD PTR e$[rbp+r8-149]
	add	eax, DWORD PTR o$[rbp+r8-149]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN113@partial_bu

; 461  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN57@partial_bu
$LN113@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN57@partial_bu:
	mov	WORD PTR [rdx], ax

; 462  :       dst[k + 8] = (short)MAX(-32768, MIN(32767, (e[7 - k] - o[7 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-129]
	sub	eax, DWORD PTR o$[rbp+r9-129]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN114@partial_bu
	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN63@partial_bu
$LN114@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN63@partial_bu:
	mov	WORD PTR [rdx+16], ax
	mov	eax, DWORD PTR e$[rbp+r8-145]
	add	eax, DWORD PTR o$[rbp+r8-145]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN115@partial_bu

; 461  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN70@partial_bu
$LN115@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN70@partial_bu:
	mov	WORD PTR [rdx+2], ax

; 462  :       dst[k + 8] = (short)MAX(-32768, MIN(32767, (e[7 - k] - o[7 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-133]
	sub	eax, DWORD PTR o$[rbp+r9-133]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN116@partial_bu
	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN76@partial_bu
$LN116@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN76@partial_bu:
	mov	WORD PTR [rdx+18], ax
	mov	eax, DWORD PTR e$[rbp+r8-141]
	add	eax, DWORD PTR o$[rbp+r8-141]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN117@partial_bu

; 461  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN83@partial_bu
$LN117@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN83@partial_bu:
	mov	WORD PTR [rdx+4], ax

; 462  :       dst[k + 8] = (short)MAX(-32768, MIN(32767, (e[7 - k] - o[7 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-137]
	sub	eax, DWORD PTR o$[rbp+r9-137]
	add	eax, edi
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN118@partial_bu
	cmp	eax, r11d
	cmovl	eax, r11d
	jmp	SHORT $LN89@partial_bu
$LN118@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN89@partial_bu:
	mov	WORD PTR [rdx+20], ax
	add	r8, 16
	add	rdx, 8
	sub	r9, 16
	sub	r10, 1
	jne	$LL19@partial_bu

; 463  :     }
; 464  :     src++;
; 465  :     dst += 16;

	add	QWORD PTR tv5718[rsp], 32		; 00000020H
	lea	r10, OFFSET FLAT:kvz_g_dct_16+432
	mov	r9d, DWORD PTR __isa_available
	add	r14, 2
	sub	QWORD PTR tv5715[rsp], 1
	jne	$LL4@partial_bu

; 466  :   }
; 467  : }

	lea	r11, QWORD PTR [rsp+192]
	mov	rbx, QWORD PTR [r11+64]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
partial_butterfly_inverse_16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
o$10$ = 0
o$9$ = 4
o$8$ = 8
o$7$ = 12
o$6$ = 16
o$5$ = 20
o$4$ = 24
o$3$ = 28
o$2$ = 32
tv10658 = 40
add$1$ = 48
o$16$ = 52
o$15$ = 56
o$14$ = 60
o$13$ = 64
o$12$ = 68
o$11$ = 72
tv10657 = 80
tv10652 = 88
eeo$ = 96
eo$ = 112
e$ = 144
src$ = 272
dst$ = 280
shift$ = 288
o$1$ = 296
partial_butterfly_32_generic PROC

; 472  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	DWORD PTR [rsp+24], r8d
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-39]
	sub	rsp, 208				; 000000d0H
	mov	rax, rcx

; 473  :   int32_t j, k;
; 474  :   int32_t e[16], o[16];
; 475  :   int32_t ee[8], eo[8];
; 476  :   int32_t eee[4], eeo[4];
; 477  :   int32_t eeee[2], eeeo[2];
; 478  :   int32_t add = 1 << (shift - 1);

	mov	QWORD PTR tv10652[rbp-169], 32		; 00000020H
	lea	ecx, DWORD PTR [r8-1]
	mov	r9d, 1
	shl	r9d, cl
	lea	r10, QWORD PTR [rdx+512]
	mov	DWORD PTR add$1$[rbp-169], r9d
	lea	r8, QWORD PTR [rax+60]
	mov	QWORD PTR tv10658[rsp], r10
	mov	QWORD PTR tv10657[rbp-169], r8
$LL4@partial_bu:

; 479  :   const int32_t line = 32;
; 480  : 
; 481  :   for (j = 0; j < line; j++) {
; 482  :     // E and O
; 483  :     for (k = 0; k < 16; k++) {
; 484  :       e[k] = src[k] + src[31 - k];

	movsx	ecx, WORD PTR [r8+2]
	movsx	edx, WORD PTR [r8-60]
	movsx	r12d, WORD PTR [r8-42]
	movsx	r13d, WORD PTR [r8-16]
	movsx	r14d, WORD PTR [r8-40]
	lea	eax, DWORD PTR [rdx+rcx]
	movsx	r15d, WORD PTR [r8-18]
	movsx	edi, WORD PTR [r8-38]

; 485  :       o[k] = src[k] - src[31 - k];

	sub	edx, ecx
	movsx	ecx, WORD PTR [r8]
	movsx	esi, WORD PTR [r8-20]
	movsx	ebx, WORD PTR [r8-22]
	movsx	r11d, WORD PTR [r8-24]
	movsx	r10d, WORD PTR [r8-26]
	mov	DWORD PTR o$16$[rbp-169], edx
	movsx	edx, WORD PTR [r8-58]
	mov	DWORD PTR e$[rbp-169], eax
	lea	eax, DWORD PTR [rcx+rdx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-2]
	mov	DWORD PTR o$15$[rbp-169], edx
	movsx	edx, WORD PTR [r8-56]
	mov	DWORD PTR e$[rbp-165], eax
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-4]
	mov	DWORD PTR e$[rbp-161], eax
	mov	DWORD PTR o$14$[rbp-169], edx
	movsx	edx, WORD PTR [r8-54]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-6]
	mov	DWORD PTR e$[rbp-157], eax
	mov	DWORD PTR o$13$[rbp-169], edx
	movsx	edx, WORD PTR [r8-52]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-8]
	mov	DWORD PTR e$[rbp-153], eax
	mov	DWORD PTR o$12$[rbp-169], edx
	movsx	edx, WORD PTR [r8-50]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-10]
	mov	DWORD PTR e$[rbp-149], eax
	mov	DWORD PTR o$11$[rbp-169], edx
	movsx	edx, WORD PTR [r8-48]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-12]
	mov	DWORD PTR e$[rbp-145], eax
	mov	DWORD PTR o$10$[rsp], edx
	movsx	edx, WORD PTR [r8-46]
	lea	eax, DWORD PTR [rdx+rcx]
	sub	edx, ecx
	movsx	ecx, WORD PTR [r8-14]
	mov	DWORD PTR e$[rbp-141], eax
	movsx	eax, WORD PTR [r8-44]
	sub	eax, ecx
	mov	DWORD PTR o$9$[rsp], edx
	mov	DWORD PTR o$8$[rsp], eax
	mov	eax, r12d
	sub	eax, r13d
	mov	DWORD PTR o$7$[rsp], eax
	mov	eax, r14d
	sub	eax, r15d
	mov	DWORD PTR o$6$[rsp], eax
	mov	eax, edi
	sub	eax, esi
	mov	DWORD PTR o$5$[rsp], eax
	movsx	eax, WORD PTR [r8-36]
	mov	ecx, eax
	sub	ecx, ebx
	mov	DWORD PTR o$4$[rsp], ecx
	movsx	ecx, WORD PTR [r8-34]
	mov	edx, ecx
	sub	edx, r11d
	mov	DWORD PTR o$3$[rsp], edx
	movsx	edx, WORD PTR [r8-32]
	mov	r9d, edx
	sub	r9d, r10d
	add	eax, ebx
	mov	DWORD PTR o$2$[rsp], r9d
	movsx	r9d, WORD PTR [r8-28]
	add	edx, r10d
	movsx	r8d, WORD PTR [r8-30]
	add	ecx, r11d

; 486  :     }
; 487  :     // EE and EO
; 488  :     for (k = 0; k < 8; k++) {
; 489  :       ee[k] = e[k] + e[15 - k];
; 490  :       eo[k] = e[k] - e[15 - k];
; 491  :     }
; 492  :     // EEE and EEO
; 493  :     for (k = 0; k < 4; k++) {
; 494  :       eee[k] = ee[k] + ee[7 - k];
; 495  :       eeo[k] = ee[k] - ee[7 - k];
; 496  :     }
; 497  :     // EEEE and EEEO
; 498  :     eeee[0] = eee[0] + eee[3];
; 499  :     eeeo[0] = eee[0] - eee[3];
; 500  :     eeee[1] = eee[1] + eee[2];
; 501  :     eeeo[1] = eee[1] - eee[2];
; 502  : 
; 503  :     dst[0] = (short)((kvz_g_dct_32[0][0] * eeee[0] + kvz_g_dct_32[0][1] * eeee[1] + add) >> shift);

	mov	r11d, DWORD PTR add$1$[rbp-169]
	mov	ebx, DWORD PTR shift$[rbp-169]
	movd	xmm1, eax
	movd	xmm0, edx
	mov	rdx, QWORD PTR tv10657[rbp-169]
	mov	DWORD PTR o$1$[rbp-169], r8d
	add	r8d, r9d
	sub	DWORD PTR o$1$[rbp-169], r9d
	movd	xmm2, ecx
	movsx	ecx, WORD PTR [rdx-14]
	movsx	eax, WORD PTR [rdx-44]
	lea	edx, DWORD PTR [r14+r15]
	punpckldq xmm2, xmm1
	add	eax, ecx
	movd	xmm3, r8d
	lea	ecx, DWORD PTR [r12+r13]
	mov	r12, QWORD PTR tv10658[rsp]
	lea	r8d, DWORD PTR [rdi+rsi]
	punpckldq xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR e$[rbp-169]
	punpcklqdq xmm3, xmm2
	movdqa	xmm5, xmm0
	psubd	xmm0, xmm3
	movd	xmm1, eax
	movdqu	XMMWORD PTR eo$[rbp-169], xmm0
	paddd	xmm5, xmm3
	movd	xmm0, edx
	movd	xmm3, r8d
	punpckldq xmm3, xmm0
	movdqu	xmm0, XMMWORD PTR e$[rbp-153]
	movdqa	xmm4, xmm0
	movd	xmm2, ecx
	punpckldq xmm2, xmm1
	mov	ecx, ebx
	punpcklqdq xmm3, xmm2
	psubd	xmm0, xmm3
	paddd	xmm4, xmm3
	movdqu	XMMWORD PTR eo$[rbp-153], xmm0
	movd	eax, xmm4
	movdqa	xmm0, xmm4
	psrldq	xmm0, 4
	movdqa	xmm1, xmm4
	psrldq	xmm1, 8
	psrldq	xmm4, 12
	movd	xmm3, eax
	movd	eax, xmm0
	movd	xmm2, eax
	movd	eax, xmm1
	punpckldq xmm2, xmm3
	movd	xmm0, eax
	movd	eax, xmm4
	movd	xmm1, eax
	punpckldq xmm1, xmm0
	punpcklqdq xmm1, xmm2
	movdqa	xmm2, xmm5
	paddd	xmm2, xmm1
	psubd	xmm5, xmm1
	movd	r10d, xmm2
	movdqa	xmm0, xmm2
	psrldq	xmm0, 12
	movd	eax, xmm0
	movdqa	xmm0, xmm2
	psrldq	xmm0, 4
	movd	r9d, xmm0
	psrldq	xmm2, 8
	movdqu	XMMWORD PTR eeo$[rbp-169], xmm5
	lea	r8d, DWORD PTR [r10+rax]
	sub	r10d, eax
	movd	eax, xmm2
	lea	edx, DWORD PTR [r9+rax]
	sub	r9d, eax
	lea	eax, DWORD PTR [rdx+r8]
	shl	eax, 6
	add	eax, r11d
	sar	eax, cl

; 504  :     dst[16 * line] = (short)((kvz_g_dct_32[16][0] * eeee[0] + kvz_g_dct_32[16][1] * eeee[1] + add) >> shift);

	mov	edi, DWORD PTR eeo$[rbp-157]
	sub	r8d, edx
	mov	rsi, QWORD PTR eeo$[rbp-161]

; 505  :     dst[8 * line] = (short)((kvz_g_dct_32[8][0] * eeeo[0] + kvz_g_dct_32[8][1] * eeeo[1] + add) >> shift);

	lea	edx, DWORD PTR [r9+r9*8]
	mov	r14, QWORD PTR eeo$[rbp-165]
	mov	r15d, DWORD PTR eeo$[rbp-169]
	mov	WORD PTR [r12-512], ax
	shl	r8d, 6
	add	r8d, r11d
	sar	r8d, cl
	imul	ecx, r10d, 83				; 00000053H
	mov	WORD PTR [r12+512], r8w
	lea	r8, OFFSET FLAT:kvz_g_dct_32+260
	add	ecx, r11d
	lea	eax, DWORD PTR [rcx+rdx*4]
	mov	ecx, ebx
	sar	eax, cl

; 506  :     dst[24 * line] = (short)((kvz_g_dct_32[24][0] * eeeo[0] + kvz_g_dct_32[24][1] * eeeo[1] + add) >> shift);

	lea	edx, DWORD PTR [r10+r10*8]
	shl	edx, 2
	mov	r10d, 4
	mov	WORD PTR [r12], ax
	imul	eax, r9d, 83				; 00000053H
	lea	r9, QWORD PTR [r12-256]
	sub	edx, eax
	add	edx, r11d
	sar	edx, cl
	mov	WORD PTR [r12+1024], dx
$LL16@partial_bu:

; 507  :     for (k = 4; k < 32; k += 8) {
; 508  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * eeo[0] + kvz_g_dct_32[k][1] * eeo[1] + kvz_g_dct_32[k][2] * eeo[2] + kvz_g_dct_32[k][3] * eeo[3] + add) >> shift);

	movsx	ecx, WORD PTR [r8-4]
	lea	r9, QWORD PTR [r9+512]
	movsx	eax, WORD PTR [r8-2]
	movsx	edx, WORD PTR [r8]
	lea	r8, QWORD PTR [r8+512]
	imul	eax, r14d
	imul	ecx, r15d
	imul	edx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [r8-510]
	imul	eax, edi
	add	eax, r11d
	add	eax, ecx
	mov	ecx, ebx
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9-512], dx
	sub	r10, 1
	jne	SHORT $LL16@partial_bu

; 509  :     }
; 510  :     for (k = 2; k < 32; k += 4) {

	mov	edi, DWORD PTR eo$[rbp-141]
	lea	r9, QWORD PTR [r12-384]
	mov	r12, QWORD PTR eo$[rbp-157]
	lea	rax, OFFSET FLAT:kvz_g_dct_32+140
	mov	rsi, QWORD PTR eo$[rbp-145]
	mov	r10d, 8
	mov	r14, QWORD PTR eo$[rbp-149]
	mov	r15, QWORD PTR eo$[rbp-153]
	mov	r13, QWORD PTR eo$[rbp-161]
	npad	3
$LL19@partial_bu:

; 511  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * eo[0] + kvz_g_dct_32[k][1] * eo[1] + kvz_g_dct_32[k][2] * eo[2] + kvz_g_dct_32[k][3] * eo[3] +

	movsx	r8d, WORD PTR [rax-12]
	lea	r9, QWORD PTR [r9+256]
	imul	r8d, DWORD PTR eo$[rbp-169]
	movsx	ecx, WORD PTR [rax-10]
	imul	ecx, DWORD PTR eo$[rbp-165]
	movsx	edx, WORD PTR [rax]
	lea	rax, QWORD PTR [rax+256]
	imul	edx, esi
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-264]
	imul	ecx, r13d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-262]
	imul	ecx, r12d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-260]
	imul	ecx, r15d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-258]
	imul	ecx, r14d
	add	r8d, ecx
	movsx	ecx, WORD PTR [rax-254]
	imul	ecx, edi
	add	ecx, r11d
	add	ecx, r8d
	add	edx, ecx
	mov	ecx, ebx
	sar	edx, cl
	mov	WORD PTR [r9-256], dx
	sub	r10, 1
	jne	$LL19@partial_bu

; 512  :         kvz_g_dct_32[k][4] * eo[4] + kvz_g_dct_32[k][5] * eo[5] + kvz_g_dct_32[k][6] * eo[6] + kvz_g_dct_32[k][7] * eo[7] + add) >> shift);
; 513  :     }
; 514  :     for (k = 1; k < 32; k += 2) {

	mov	r9, QWORD PTR tv10658[rsp]
	lea	edi, QWORD PTR [r10+4]
	mov	esi, DWORD PTR o$16$[rbp-169]
	lea	r8, OFFSET FLAT:kvz_g_dct_32+76
	mov	r14d, DWORD PTR o$15$[rbp-169]
	add	r9, -192				; ffffffffffffff40H
	mov	r15d, DWORD PTR o$14$[rbp-169]
	mov	r12d, DWORD PTR o$13$[rbp-169]
	mov	r13d, DWORD PTR o$12$[rbp-169]
	mov	r10d, DWORD PTR o$11$[rbp-169]
	npad	9
$LL22@partial_bu:

; 515  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * o[0] + kvz_g_dct_32[k][1] * o[1] + kvz_g_dct_32[k][2] * o[2] + kvz_g_dct_32[k][3] * o[3] +

	movsx	ecx, WORD PTR [r8-12]
	movsx	eax, WORD PTR [r8-10]
	imul	eax, r14d
	movsx	edx, WORD PTR [r8]
	imul	edx, DWORD PTR o$10$[rsp]
	imul	ecx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [r8-8]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-6]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-4]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-2]
	imul	eax, r10d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+2]
	imul	eax, DWORD PTR o$9$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+4]
	imul	eax, DWORD PTR o$8$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+6]
	imul	eax, DWORD PTR o$7$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+8]
	imul	eax, DWORD PTR o$6$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+10]
	imul	eax, DWORD PTR o$5$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+12]
	imul	eax, DWORD PTR o$4$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+14]
	imul	eax, DWORD PTR o$3$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+16]
	imul	eax, DWORD PTR o$2$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+18]
	imul	eax, DWORD PTR o$1$[rbp-169]
	add	eax, r11d
	add	eax, ecx
	mov	ecx, ebx
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9-256], dx
	movsx	ecx, WORD PTR [r8+116]
	movsx	eax, WORD PTR [r8+118]
	imul	eax, r14d
	imul	ecx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [r8+120]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+122]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+124]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+126]
	imul	eax, r10d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+128]
	imul	eax, DWORD PTR o$10$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+130]
	imul	eax, DWORD PTR o$9$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+132]
	imul	eax, DWORD PTR o$8$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+134]
	imul	eax, DWORD PTR o$7$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+136]
	imul	eax, DWORD PTR o$6$[rsp]
	movsx	edx, WORD PTR [r8+146]
	imul	edx, DWORD PTR o$1$[rbp-169]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+138]
	imul	eax, DWORD PTR o$5$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+140]
	imul	eax, DWORD PTR o$4$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+142]
	imul	eax, DWORD PTR o$3$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+144]
	imul	eax, DWORD PTR o$2$[rsp]
	add	eax, r11d
	add	eax, ecx
	mov	ecx, ebx
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9-128], dx
	movsx	ecx, WORD PTR [r8+244]
	movsx	eax, WORD PTR [r8+246]
	imul	eax, r14d
	movsx	edx, WORD PTR [r8+274]
	imul	edx, DWORD PTR o$1$[rbp-169]
	imul	ecx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [r8+248]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+250]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+252]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+254]
	imul	eax, r10d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+256]
	imul	eax, DWORD PTR o$10$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+258]
	imul	eax, DWORD PTR o$9$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+260]
	imul	eax, DWORD PTR o$8$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+262]
	imul	eax, DWORD PTR o$7$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+264]
	imul	eax, DWORD PTR o$6$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+266]
	imul	eax, DWORD PTR o$5$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+268]
	imul	eax, DWORD PTR o$4$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+270]
	imul	eax, DWORD PTR o$3$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8+272]
	imul	eax, DWORD PTR o$2$[rsp]
	add	eax, r11d
	add	eax, ecx
	mov	ecx, ebx
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9], dx
	movsx	ecx, WORD PTR [r8+372]
	movsx	eax, WORD PTR [r8+374]
	imul	eax, r14d
	imul	ecx, esi
	add	ecx, eax
	movsx	eax, WORD PTR [r8+376]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [r8+378]
	movsx	edx, WORD PTR [r8+402]
	lea	r9, QWORD PTR [r9+512]
	imul	edx, DWORD PTR o$1$[rbp-169]
	lea	r8, QWORD PTR [r8+512]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-132]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-130]
	imul	eax, r10d
	add	ecx, eax
	movsx	eax, WORD PTR [r8-128]
	imul	eax, DWORD PTR o$10$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-126]
	imul	eax, DWORD PTR o$9$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-124]
	imul	eax, DWORD PTR o$8$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-122]
	imul	eax, DWORD PTR o$7$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-120]
	imul	eax, DWORD PTR o$6$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-118]
	imul	eax, DWORD PTR o$5$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-116]
	imul	eax, DWORD PTR o$4$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-114]
	imul	eax, DWORD PTR o$3$[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [r8-112]
	imul	eax, DWORD PTR o$2$[rsp]
	add	eax, r11d
	add	eax, ecx
	mov	ecx, ebx
	add	edx, eax
	sar	edx, cl
	mov	WORD PTR [r9-384], dx
	sub	rdi, 1
	jne	$LL22@partial_bu

; 516  :         kvz_g_dct_32[k][4] * o[4] + kvz_g_dct_32[k][5] * o[5] + kvz_g_dct_32[k][6] * o[6] + kvz_g_dct_32[k][7] * o[7] +
; 517  :         kvz_g_dct_32[k][8] * o[8] + kvz_g_dct_32[k][9] * o[9] + kvz_g_dct_32[k][10] * o[10] + kvz_g_dct_32[k][11] * o[11] +
; 518  :         kvz_g_dct_32[k][12] * o[12] + kvz_g_dct_32[k][13] * o[13] + kvz_g_dct_32[k][14] * o[14] + kvz_g_dct_32[k][15] * o[15] + add) >> shift);
; 519  :     }
; 520  :     src += 32;

	mov	r8, QWORD PTR tv10657[rbp-169]

; 521  :     dst++;

	add	QWORD PTR tv10658[rsp], 2
	add	r8, 64					; 00000040H
	sub	QWORD PTR tv10652[rbp-169], 1
	mov	QWORD PTR tv10657[rbp-169], r8
	jne	$LL4@partial_bu

; 522  :   }
; 523  : }

	mov	rbx, QWORD PTR [rsp+272]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
partial_butterfly_32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tv9362 = 0
tv9363 = 4
tv9364 = 8
tv9365 = 12
tv9366 = 16
tv9367 = 20
tv9368 = 24
add$1$ = 28
tv9325 = 32
tv9322 = 40
eee$ = 48
eo$ = 64
eeo$ = 96
e$ = 112
o$ = 176
tv9309 = 240
tv9308 = 256
tv9307 = 272
src$ = 512
dst$ = 520
shift$ = 528
tv9370 = 536
tv9354 = 536
partial_butterfly_inverse_32_generic PROC

; 528  : {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	DWORD PTR [rax+24], r8d
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-248]
	sub	rsp, 448				; 000001c0H

; 529  :   int32_t j, k;
; 530  :   int32_t e[16], o[16];
; 531  :   int32_t ee[8], eo[8];
; 532  :   int32_t eee[4], eeo[4];
; 533  :   int32_t eeee[2], eeeo[2];
; 534  :   int32_t add = 1 << (shift - 1);

	mov	r9d, DWORD PTR __isa_available
	lea	rsi, OFFSET FLAT:kvz_g_dct_32+1888
	movaps	XMMWORD PTR [rax-72], xmm6
	lea	r10, OFFSET FLAT:kvz_g_dct_32+1680
	movaps	XMMWORD PTR [rax-88], xmm7
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-104], xmm8
	lea	ecx, DWORD PTR [r8-1]
	movaps	XMMWORD PTR [rax-120], xmm9
	add	rdx, 2
	movaps	XMMWORD PTR [rax-136], xmm10
	mov	r11d, 1
	movaps	XMMWORD PTR [rax-152], xmm11
	mov	ebx, r8d
	movaps	XMMWORD PTR [rax-168], xmm12
	movaps	XMMWORD PTR [rax-184], xmm13
	shl	r11d, cl
	movaps	XMMWORD PTR [rax-200], xmm14
	add	rdi, 1856				; 00000740H
	movaps	XMMWORD PTR [rax-216], xmm15
	mov	DWORD PTR add$1$[rsp], r11d
	mov	QWORD PTR tv9325[rsp], rdx
	mov	QWORD PTR tv9322[rsp], 32		; 00000020H
	npad	4
$LL4@partial_bu:

; 535  :   const int32_t line = 32;
; 536  : 
; 537  :   for (j = 0; j<line; j++) {
; 538  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 539  :     for (k = 0; k < 16; k++) {

	movsx	eax, WORD PTR [rdi+128]
	movsx	ecx, WORD PTR [rdi]
	movsx	edx, WORD PTR [rdi-128]
	movsx	r8d, WORD PTR [rdi-256]
	movsx	r15d, WORD PTR [rdi-384]
	movsx	r12d, WORD PTR [rdi-512]
	movsx	r13d, WORD PTR [rdi-640]
	cmp	r9d, 2
	jl	$LN124@partial_bu
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm3, xmm0
	movsx	eax, WORD PTR [rdi-768]
	movd	xmm0, ecx

; 540  :       o[k] = kvz_g_dct_32[1][k] * src[line] + kvz_g_dct_32[3][k] * src[3 * line] + kvz_g_dct_32[5][k] * src[5 * line] + kvz_g_dct_32[7][k] * src[7 * line] +

	lea	rcx, QWORD PTR o$[rbp-256]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm4, xmm0
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm5, xmm0
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm6, xmm0
	movd	xmm0, r15d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm7, xmm0
	movd	xmm0, r12d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm8, xmm0
	movd	xmm0, r13d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm9, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-896]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm10, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1024]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm11, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1152]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm12, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1280]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm13, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1408]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm14, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1536]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm15, xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1664]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm0, xmm0
	movdqa	XMMWORD PTR tv9309[rbp-256], xmm0
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1792]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm0, xmm0
	movdqa	XMMWORD PTR tv9308[rbp-256], xmm0
	movd	xmm0, eax
	lea	rax, OFFSET FLAT:kvz_g_dct_32+1856
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm0, xmm0
	movdqa	XMMWORD PTR tv9307[rbp-256], xmm0
	npad	3
$LL7@partial_bu:
	movq	xmm0, QWORD PTR [rax+128]
	lea	rcx, QWORD PTR [rcx+16]
	pmovsxwd xmm2, xmm0
	movq	xmm0, QWORD PTR [rax]
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-128]
	pmulld	xmm1, xmm4
	pmulld	xmm2, xmm3
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-256]
	pmulld	xmm1, xmm5
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-384]
	pmulld	xmm1, xmm6
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-512]
	pmulld	xmm1, xmm7
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-640]
	pmulld	xmm1, xmm8
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-768]
	pmulld	xmm1, xmm9
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-896]
	pmulld	xmm1, xmm10
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1024]
	pmulld	xmm1, xmm11
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1152]
	pmulld	xmm1, xmm12
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1280]
	pmulld	xmm1, xmm13
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1408]
	pmulld	xmm1, xmm14
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1536]
	pmulld	xmm1, xmm15
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, XMMWORD PTR tv9309[rbp-256]
	movq	xmm0, QWORD PTR [rax-1664]
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, XMMWORD PTR tv9308[rbp-256]
	movq	xmm0, QWORD PTR [rax-1792]
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, XMMWORD PTR tv9307[rbp-256]
	paddd	xmm2, xmm1
	add	rax, 8
	movdqu	XMMWORD PTR [rcx-16], xmm2
	cmp	rax, rsi
	jl	$LL7@partial_bu
	jmp	$LN6@partial_bu
$LN124@partial_bu:
	movsx	ebx, WORD PTR [rdi-896]
	lea	r11, OFFSET FLAT:kvz_g_dct_32+1888
	mov	r9d, eax
	mov	esi, edx
	movsx	eax, WORD PTR [rdi-768]
	lea	rdx, OFFSET FLAT:kvz_g_dct_32+1856
	mov	DWORD PTR tv9370[rbp-256], eax
	mov	r14d, r8d
	movsx	eax, WORD PTR [rdi-1024]
	lea	r8, QWORD PTR o$[rbp-256]
	mov	DWORD PTR tv9368[rsp], eax
	mov	r10d, ecx
	movsx	eax, WORD PTR [rdi-1152]
	mov	DWORD PTR tv9367[rsp], eax
	movsx	eax, WORD PTR [rdi-1280]
	mov	DWORD PTR tv9366[rsp], eax
	movsx	eax, WORD PTR [rdi-1408]
	mov	DWORD PTR tv9365[rsp], eax
	movsx	eax, WORD PTR [rdi-1536]
	mov	DWORD PTR tv9364[rsp], eax
	movsx	eax, WORD PTR [rdi-1664]
	mov	DWORD PTR tv9363[rsp], eax
	movsx	eax, WORD PTR [rdi-1792]
	mov	DWORD PTR tv9362[rsp], eax
	npad	8
$LL50@partial_bu:
	movsx	ecx, WORD PTR [rdx-896]
	lea	r8, QWORD PTR [r8+4]
	movsx	eax, WORD PTR [rdx-768]
	imul	eax, DWORD PTR tv9370[rbp-256]
	imul	ecx, ebx
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-640]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-512]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-384]
	imul	eax, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-256]
	imul	eax, r14d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-128]
	imul	eax, esi
	add	ecx, eax
	movsx	eax, WORD PTR [rdx+128]
	imul	eax, r9d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1792]
	imul	eax, DWORD PTR tv9362[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1664]
	imul	eax, DWORD PTR tv9363[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1536]
	imul	eax, DWORD PTR tv9364[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1408]
	imul	eax, DWORD PTR tv9365[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1280]
	imul	eax, DWORD PTR tv9366[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1152]
	imul	eax, DWORD PTR tv9367[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1024]
	imul	eax, DWORD PTR tv9368[rsp]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx]
	imul	eax, r10d
	add	rdx, 2
	add	ecx, eax
	mov	DWORD PTR [r8-4], ecx
	cmp	rdx, r11
	jl	$LL50@partial_bu
	mov	r11d, DWORD PTR add$1$[rsp]
	lea	r10, OFFSET FLAT:kvz_g_dct_32+1680
	mov	ebx, DWORD PTR shift$[rbp-256]
	mov	r9d, DWORD PTR __isa_available
$LN6@partial_bu:

; 541  :         kvz_g_dct_32[9][k] * src[9 * line] + kvz_g_dct_32[11][k] * src[11 * line] + kvz_g_dct_32[13][k] * src[13 * line] + kvz_g_dct_32[15][k] * src[15 * line] +
; 542  :         kvz_g_dct_32[17][k] * src[17 * line] + kvz_g_dct_32[19][k] * src[19 * line] + kvz_g_dct_32[21][k] * src[21 * line] + kvz_g_dct_32[23][k] * src[23 * line] +
; 543  :         kvz_g_dct_32[25][k] * src[25 * line] + kvz_g_dct_32[27][k] * src[27 * line] + kvz_g_dct_32[29][k] * src[29 * line] + kvz_g_dct_32[31][k] * src[31 * line];
; 544  :     }
; 545  :     for (k = 0; k < 8; k++) {

	movsx	eax, WORD PTR [rdi+64]
	movsx	ecx, WORD PTR [rdi-192]
	movsx	edx, WORD PTR [rdi-448]
	movsx	r8d, WORD PTR [rdi-704]
	movsx	r15d, WORD PTR [rdi-960]
	movsx	r12d, WORD PTR [rdi-1216]
	movsx	r13d, WORD PTR [rdi-1472]
	cmp	r9d, 2
	jl	$LN125@partial_bu
	movd	xmm0, eax
	movsx	eax, WORD PTR [rdi-1728]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm3, xmm0
	movd	xmm0, ecx

; 546  :       eo[k] = kvz_g_dct_32[2][k] * src[2 * line] + kvz_g_dct_32[6][k] * src[6 * line] + kvz_g_dct_32[10][k] * src[10 * line] + kvz_g_dct_32[14][k] * src[14 * line] +

	lea	rcx, QWORD PTR eo$[rsp]
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm4, xmm0
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm5, xmm0
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm6, xmm0
	movd	xmm0, r15d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm7, xmm0
	movd	xmm0, r12d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm8, xmm0
	movd	xmm0, r13d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm9, xmm0
	movd	xmm0, eax
	lea	rax, OFFSET FLAT:kvz_g_dct_32+1664
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm10, xmm0
$LL10@partial_bu:
	movq	xmm0, QWORD PTR [rax+256]
	lea	rcx, QWORD PTR [rcx+16]
	pmovsxwd xmm2, xmm0
	movq	xmm0, QWORD PTR [rax]
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-256]
	pmulld	xmm1, xmm4
	pmulld	xmm2, xmm3
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-512]
	pmulld	xmm1, xmm5
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-768]
	pmulld	xmm1, xmm6
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1024]
	pmulld	xmm1, xmm7
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1280]
	pmulld	xmm1, xmm8
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR [rax-1536]
	add	rax, 8
	pmulld	xmm1, xmm9
	paddd	xmm2, xmm1
	pmovsxwd xmm1, xmm0
	pmulld	xmm1, xmm10
	paddd	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx-16], xmm2
	cmp	rax, r10
	jl	$LL10@partial_bu
	jmp	$LN9@partial_bu
$LN125@partial_bu:
	mov	r9d, eax
	lea	rbx, OFFSET FLAT:kvz_g_dct_32+1680
	movsx	eax, WORD PTR [rdi-1728]
	mov	esi, edx
	mov	r14d, r8d
	mov	DWORD PTR tv9354[rbp-256], eax
	mov	r10d, ecx
	lea	r8, QWORD PTR eo$[rsp]
	lea	rdx, OFFSET FLAT:kvz_g_dct_32+1664
$LL52@partial_bu:
	movsx	ecx, WORD PTR [rdx-768]
	lea	r8, QWORD PTR [r8+4]
	movsx	eax, WORD PTR [rdx-512]
	imul	eax, r14d
	imul	ecx, r15d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-256]
	imul	eax, esi
	add	ecx, eax
	movsx	eax, WORD PTR [rdx+256]
	imul	eax, r9d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1536]
	imul	eax, DWORD PTR tv9354[rbp-256]
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1280]
	imul	eax, r13d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx-1024]
	imul	eax, r12d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx]
	imul	eax, r10d
	add	rdx, 2
	add	ecx, eax
	mov	DWORD PTR [r8-4], ecx
	cmp	rdx, rbx
	jl	SHORT $LL52@partial_bu
	mov	ebx, DWORD PTR shift$[rbp-256]
	mov	r9d, DWORD PTR __isa_available
$LN9@partial_bu:

; 547  :         kvz_g_dct_32[18][k] * src[18 * line] + kvz_g_dct_32[22][k] * src[22 * line] + kvz_g_dct_32[26][k] * src[26 * line] + kvz_g_dct_32[30][k] * src[30 * line];
; 548  :     }
; 549  :     for (k = 0; k < 4; k++) {

	movsx	ecx, WORD PTR [rdi-64]
	movsx	eax, WORD PTR [rdi-576]
	movsx	edx, WORD PTR [rdi-1088]
	movsx	r8d, WORD PTR [rdi-1600]
	cmp	r9d, 2
	jl	$LN126@partial_bu
	movd	xmm0, eax
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0

; 550  :       eeo[k] = kvz_g_dct_32[4][k] * src[4 * line] + kvz_g_dct_32[12][k] * src[12 * line] + kvz_g_dct_32[20][k] * src[20 * line] + kvz_g_dct_32[28][k] * src[28 * line];

	movq	xmm0, QWORD PTR kvz_g_dct_32+1280
	pmovsxwd xmm4, xmm0
	pmulld	xmm4, xmm1
	movd	xmm0, ecx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_32+1792
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm4, xmm2
	movd	xmm0, edx
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_32+768
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm4, xmm2
	movd	xmm0, r8d
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	pmovsxwd xmm1, xmm0
	movq	xmm0, QWORD PTR kvz_g_dct_32+256
	pmovsxwd xmm2, xmm0
	pmulld	xmm2, xmm1
	paddd	xmm4, xmm2
	movdqu	XMMWORD PTR eeo$[rsp], xmm4
	jmp	SHORT $LN12@partial_bu
$LN126@partial_bu:
	mov	esi, edx
	lea	rbx, OFFSET FLAT:kvz_g_dct_32+1288
	mov	r14d, r8d
	lea	rdx, OFFSET FLAT:kvz_g_dct_32+1280
	lea	r8, QWORD PTR eeo$[rsp]
	mov	r9d, ecx
	mov	r10d, eax
	npad	4
$LL54@partial_bu:
	movsx	ecx, WORD PTR [rdx-1024]
	lea	r8, QWORD PTR [r8+4]
	movsx	eax, WORD PTR [rdx-512]
	imul	eax, esi
	imul	ecx, r14d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx+512]
	imul	eax, r9d
	add	ecx, eax
	movsx	eax, WORD PTR [rdx]
	imul	eax, r10d
	add	rdx, 2
	add	ecx, eax
	mov	DWORD PTR [r8-4], ecx
	cmp	rdx, rbx
	jl	SHORT $LL54@partial_bu
	movdqu	xmm4, XMMWORD PTR eeo$[rsp]
	mov	ebx, DWORD PTR shift$[rbp-256]
$LN12@partial_bu:

; 551  :     }
; 552  :     eeeo[0] = kvz_g_dct_32[8][0] * src[8 * line] + kvz_g_dct_32[24][0] * src[24 * line];

	movsx	r8d, WORD PTR [rdi-1344]
	movsx	edx, WORD PTR [rdi-320]

; 553  :     eeeo[1] = kvz_g_dct_32[8][1] * src[8 * line] + kvz_g_dct_32[24][1] * src[24 * line];
; 554  :     eeee[0] = kvz_g_dct_32[0][0] * src[0] + kvz_g_dct_32[16][0] * src[16 * line];

	movsx	r10d, WORD PTR [rdi-1856]

; 555  :     eeee[1] = kvz_g_dct_32[0][1] * src[0] + kvz_g_dct_32[16][1] * src[16 * line];
; 556  : 
; 557  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 558  :     eee[0] = eeee[0] + eeeo[0];
; 559  :     eee[3] = eeee[0] - eeeo[0];
; 560  :     eee[1] = eeee[1] + eeeo[1];
; 561  :     eee[2] = eeee[1] - eeeo[1];
; 562  :     for (k = 0; k < 4; k++) {
; 563  :       ee[k] = eee[k] + eeo[k];
; 564  :       ee[k + 4] = eee[3 - k] - eeo[3 - k];
; 565  :     }
; 566  :     for (k = 0; k < 8; k++) {
; 567  :       e[k] = ee[k] + eo[k];

	movdqu	xmm7, XMMWORD PTR eo$[rsp]
	shl	r10d, 6
	imul	eax, r8d, 83				; 00000053H
	lea	ecx, DWORD PTR [rdx+rdx*8]
	lea	r9d, DWORD PTR [rax+rcx*4]
	movsx	ecx, WORD PTR [rdi-832]
	imul	eax, edx, 83				; 00000053H
	lea	edx, DWORD PTR [r8+r8*8]
	mov	r8d, ecx
	shl	edx, 2
	shl	r8d, 6
	add	r8d, r10d
	shl	ecx, 6
	sub	r10d, ecx
	sub	edx, eax
	lea	ecx, DWORD PTR [r8+r9]
	sub	r8d, r9d
	movd	xmm1, ecx
	lea	eax, DWORD PTR [r10+rdx]
	mov	DWORD PTR eee$[rsp], ecx
	mov	DWORD PTR eee$[rsp+4], eax
	sub	r10d, edx
	movd	xmm2, eax
	punpckldq xmm2, xmm1
	movdqa	xmm1, xmm4
	psrldq	xmm1, 8
	movd	eax, xmm4
	movd	xmm0, r10d
	movd	xmm6, r8d
	punpckldq xmm6, xmm0
	movdqa	xmm0, xmm4
	psrldq	xmm0, 4
	punpcklqdq xmm6, xmm2
	movd	xmm3, eax
	movd	eax, xmm0
	mov	DWORD PTR eee$[rsp+12], r8d
	mov	DWORD PTR eee$[rsp+8], r10d
	movdqu	xmm8, XMMWORD PTR eee$[rsp]
	movd	xmm2, eax
	paddd	xmm8, xmm4
	punpckldq xmm2, xmm3
	movd	eax, xmm1
	psrldq	xmm4, 12
	movd	xmm0, eax
	movd	eax, xmm4
	movd	xmm1, eax
	punpckldq xmm1, xmm0
	movdqa	xmm0, xmm8
	punpcklqdq xmm1, xmm2
	paddd	xmm0, xmm7
	psubd	xmm6, xmm1
	movdqu	XMMWORD PTR e$[rsp], xmm0

; 568  :       e[k + 8] = ee[7 - k] - eo[7 - k];

	movd	eax, xmm6
	movdqa	xmm0, xmm6
	psrldq	xmm0, 4
	movdqa	xmm1, xmm6
	psrldq	xmm1, 8
	movd	xmm4, eax
	movd	eax, xmm0
	movdqa	xmm0, xmm6
	psrldq	xmm0, 12
	movd	xmm3, eax
	punpckldq xmm3, xmm4
	movd	eax, xmm1
	movd	xmm1, DWORD PTR eo$[rsp+16]
	movd	xmm2, eax
	movd	eax, xmm0
	movd	xmm0, DWORD PTR eo$[rsp+24]
	movd	xmm5, eax
	punpckldq xmm5, xmm2
	movd	xmm2, DWORD PTR eo$[rsp+20]
	punpcklqdq xmm5, xmm3
	movd	xmm3, DWORD PTR eo$[rsp+28]
	punpckldq xmm3, xmm0
	punpckldq xmm2, xmm1
	punpcklqdq xmm3, xmm2
	psubd	xmm5, xmm3
	movdqu	XMMWORD PTR e$[rbp-224], xmm5

; 569  :     }
; 570  :     for (k = 0; k<16; k++) {

	movdqu	xmm0, XMMWORD PTR eo$[rsp+16]
	mov	rdx, QWORD PTR tv9325[rsp]
	xor	r9d, r9d
	movd	eax, xmm8
	movdqa	xmm1, xmm8
	paddd	xmm6, xmm0
	psrldq	xmm1, 8
	movdqa	xmm0, xmm8
	movdqu	XMMWORD PTR e$[rbp-240], xmm6
	psrldq	xmm0, 4
	lea	r10d, QWORD PTR [r9+4]
	psrldq	xmm8, 12
	xor	r8d, r8d
	mov	esi, -32768				; ffffffffffff8000H
	movd	xmm3, eax
	movd	eax, xmm0
	movd	xmm2, eax
	movd	eax, xmm1
	movdqa	xmm1, xmm7
	punpckldq xmm2, xmm3
	psrldq	xmm1, 8
	movd	xmm0, eax
	movd	eax, xmm8
	movd	xmm4, eax
	punpckldq xmm4, xmm0
	movdqa	xmm0, xmm7
	movd	eax, xmm7
	punpcklqdq xmm4, xmm2
	psrldq	xmm0, 4
	psrldq	xmm7, 12
	movd	xmm3, eax
	movd	eax, xmm0
	movd	xmm2, eax
	movd	eax, xmm1
	punpckldq xmm2, xmm3
	movd	xmm0, eax
	movd	eax, xmm7
	movd	xmm1, eax
	punpckldq xmm1, xmm0
	punpcklqdq xmm1, xmm2
	psubd	xmm4, xmm1
	movdqu	XMMWORD PTR e$[rbp-208], xmm4
	npad	12
$LL22@partial_bu:

; 571  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	eax, DWORD PTR e$[rsp+r8]
	mov	ecx, ebx
	add	eax, DWORD PTR o$[rbp+r8-256]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN127@partial_bu
	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN27@partial_bu
$LN127@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN27@partial_bu:
	mov	WORD PTR [rdx-2], ax

; 572  :       dst[k + 16] = (short)MAX(-32768, MIN(32767, (e[15 - k] - o[15 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-196]
	sub	eax, DWORD PTR o$[rbp+r9-196]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN128@partial_bu
	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN33@partial_bu
$LN128@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN33@partial_bu:
	mov	WORD PTR [rdx+30], ax
	mov	eax, DWORD PTR e$[rsp+r8+4]
	add	eax, DWORD PTR o$[rbp+r8-252]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN129@partial_bu

; 571  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN66@partial_bu
$LN129@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN66@partial_bu:
	mov	WORD PTR [rdx], ax

; 572  :       dst[k + 16] = (short)MAX(-32768, MIN(32767, (e[15 - k] - o[15 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-200]
	sub	eax, DWORD PTR o$[rbp+r9-200]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN130@partial_bu
	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN72@partial_bu
$LN130@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN72@partial_bu:
	mov	WORD PTR [rdx+32], ax
	mov	eax, DWORD PTR e$[rsp+r8+8]
	add	eax, DWORD PTR o$[rbp+r8-248]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN131@partial_bu

; 571  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN79@partial_bu
$LN131@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN79@partial_bu:
	mov	WORD PTR [rdx+2], ax

; 572  :       dst[k + 16] = (short)MAX(-32768, MIN(32767, (e[15 - k] - o[15 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-204]
	sub	eax, DWORD PTR o$[rbp+r9-204]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN132@partial_bu
	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN85@partial_bu
$LN132@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN85@partial_bu:
	mov	WORD PTR [rdx+34], ax
	mov	eax, DWORD PTR e$[rsp+r8+12]
	add	eax, DWORD PTR o$[rbp+r8-244]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN133@partial_bu

; 571  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN92@partial_bu
$LN133@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN92@partial_bu:
	mov	WORD PTR [rdx+4], ax

; 572  :       dst[k + 16] = (short)MAX(-32768, MIN(32767, (e[15 - k] - o[15 - k] + add) >> shift));

	mov	eax, DWORD PTR e$[rbp+r9-208]
	sub	eax, DWORD PTR o$[rbp+r9-208]
	add	eax, r11d
	sar	eax, cl
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN134@partial_bu
	cmp	eax, esi
	cmovl	eax, esi
	jmp	SHORT $LN98@partial_bu
$LN134@partial_bu:
	mov	eax, 32767				; 00007fffH
$LN98@partial_bu:
	mov	WORD PTR [rdx+36], ax
	add	r8, 16
	add	rdx, 8
	sub	r9, 16
	sub	r10, 1
	jne	$LL22@partial_bu

; 573  :     }
; 574  :     src++;
; 575  :     dst += 32;

	add	QWORD PTR tv9325[rsp], 64		; 00000040H
	lea	r10, OFFSET FLAT:kvz_g_dct_32+1680
	mov	r9d, DWORD PTR __isa_available
	lea	rsi, OFFSET FLAT:kvz_g_dct_32+1888
	add	rdi, 2
	sub	QWORD PTR tv9322[rsp], 1
	jne	$LL4@partial_bu

; 576  :   }
; 577  : }

	lea	r11, QWORD PTR [rsp+448]
	mov	rbx, QWORD PTR [r11+64]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	movaps	xmm12, XMMWORD PTR [r11-112]
	movaps	xmm13, XMMWORD PTR [r11-128]
	movaps	xmm14, XMMWORD PTR [r11-144]
	movaps	xmm15, XMMWORD PTR [r11-160]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
partial_butterfly_inverse_32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 80
input$ = 88
output$ = 96
dct_4x4_generic PROC

; 601  : DCT_NXN_GENERIC(4);

	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, r8
	mov	rax, rdx
	movsx	r8d, cl
	lea	rdx, QWORD PTR tmp$[rsp]
	sub	r8d, 7
	mov	rcx, rax
	call	partial_butterfly_4_generic
	mov	r8d, 8
	lea	rcx, QWORD PTR tmp$[rsp]
	mov	rdx, rbx
	call	partial_butterfly_4_generic
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
dct_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 176
input$ = 184
output$ = 192
dct_8x8_generic PROC

; 602  : DCT_NXN_GENERIC(8);

	push	rbx
	sub	rsp, 160				; 000000a0H
	mov	rbx, r8
	mov	rax, rdx
	movsx	r8d, cl
	lea	rdx, QWORD PTR tmp$[rsp]
	sub	r8d, 6
	mov	rcx, rax
	call	partial_butterfly_8_generic
	mov	r8d, 9
	lea	rcx, QWORD PTR tmp$[rsp]
	mov	rdx, rbx
	call	partial_butterfly_8_generic
	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
dct_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 560
input$ = 568
output$ = 576
dct_16x16_generic PROC

; 603  : DCT_NXN_GENERIC(16);

	push	rbx
	sub	rsp, 544				; 00000220H
	mov	rbx, r8
	mov	rax, rdx
	movsx	r8d, cl
	lea	rdx, QWORD PTR tmp$[rsp]
	sub	r8d, 5
	mov	rcx, rax
	call	partial_butterfly_16_generic
	mov	r8d, 10
	lea	rcx, QWORD PTR tmp$[rsp]
	mov	rdx, rbx
	call	partial_butterfly_16_generic
	add	rsp, 544				; 00000220H
	pop	rbx
	ret	0
dct_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 2096
input$ = 2104
output$ = 2112
dct_32x32_generic PROC

; 604  : DCT_NXN_GENERIC(32);

	push	rbx
	sub	rsp, 2080				; 00000820H
	mov	rbx, r8
	mov	rax, rdx
	movsx	r8d, cl
	lea	rdx, QWORD PTR tmp$[rsp]
	sub	r8d, 4
	mov	rcx, rax
	call	partial_butterfly_32_generic
	mov	r8d, 11
	lea	rcx, QWORD PTR tmp$[rsp]
	mov	rdx, rbx
	call	partial_butterfly_32_generic
	add	rsp, 2080				; 00000820H
	pop	rbx
	ret	0
dct_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 80
input$ = 88
output$ = 96
idct_4x4_generic PROC

; 606  : IDCT_NXN_GENERIC(4);

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, rdx
	movsx	ebx, cl
	mov	rdi, r8
	lea	rdx, QWORD PTR tmp$[rsp]
	mov	rcx, rax
	mov	r8d, 7
	call	partial_butterfly_inverse_4_generic
	mov	r8d, 20
	lea	rcx, QWORD PTR tmp$[rsp]
	sub	r8d, ebx
	mov	rdx, rdi
	call	partial_butterfly_inverse_4_generic
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
idct_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 176
input$ = 184
output$ = 192
idct_8x8_generic PROC

; 607  : IDCT_NXN_GENERIC(8);

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, rdx
	movsx	ebx, cl
	mov	rdi, r8
	lea	rdx, QWORD PTR tmp$[rsp]
	mov	rcx, rax
	mov	r8d, 7
	call	partial_butterfly_inverse_8_generic
	mov	r8d, 20
	lea	rcx, QWORD PTR tmp$[rsp]
	sub	r8d, ebx
	mov	rdx, rdi
	call	partial_butterfly_inverse_8_generic
	mov	rbx, QWORD PTR [rsp+176]
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
idct_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 560
input$ = 568
output$ = 576
idct_16x16_generic PROC

; 608  : IDCT_NXN_GENERIC(16);

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 544				; 00000220H
	mov	rax, rdx
	movsx	ebx, cl
	mov	rdi, r8
	lea	rdx, QWORD PTR tmp$[rsp]
	mov	rcx, rax
	mov	r8d, 7
	call	partial_butterfly_inverse_16_generic
	mov	r8d, 20
	lea	rcx, QWORD PTR tmp$[rsp]
	sub	r8d, ebx
	mov	rdx, rdi
	call	partial_butterfly_inverse_16_generic
	mov	rbx, QWORD PTR [rsp+560]
	add	rsp, 544				; 00000220H
	pop	rdi
	ret	0
idct_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 2096
input$ = 2104
output$ = 2112
idct_32x32_generic PROC

; 609  : IDCT_NXN_GENERIC(32);

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 2080				; 00000820H
	mov	rax, rdx
	movsx	ebx, cl
	mov	rdi, r8
	lea	rdx, QWORD PTR tmp$[rsp]
	mov	rcx, rax
	mov	r8d, 7
	call	partial_butterfly_inverse_32_generic
	mov	r8d, 20
	lea	rcx, QWORD PTR tmp$[rsp]
	sub	r8d, ebx
	mov	rdx, rdi
	call	partial_butterfly_inverse_32_generic
	mov	rbx, QWORD PTR [rsp+2096]
	add	rsp, 2080				; 00000820H
	pop	rdi
	ret	0
idct_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 80
input$ = 88
output$ = 96
fast_forward_dst_4x4_generic PROC

; 612  : {

	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, r8
	mov	rax, rdx

; 613  :   int16_t tmp[4*4]; 
; 614  :   int32_t shift_1st = kvz_g_convert_to_bit[4] + 1 + (bitdepth - 8);

	movsx	r8d, cl

; 615  :   int32_t shift_2nd = kvz_g_convert_to_bit[4] + 8;
; 616  : 
; 617  :   fast_forward_dst_4_generic(input, tmp, shift_1st); 

	lea	rdx, QWORD PTR tmp$[rsp]
	sub	r8d, 7
	mov	rcx, rax
	call	fast_forward_dst_4_generic

; 618  :   fast_forward_dst_4_generic(tmp, output, shift_2nd);

	mov	r8d, 8
	lea	rcx, QWORD PTR tmp$[rsp]
	mov	rdx, rbx
	call	fast_forward_dst_4_generic

; 619  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
fast_forward_dst_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
_TEXT	SEGMENT
tmp$ = 32
bitdepth$ = 80
input$ = 88
output$ = 96
fast_inverse_dst_4x4_generic PROC

; 622  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, rdx
	movsx	ebx, cl
	mov	rdi, r8

; 623  :   int16_t tmp[4 * 4];
; 624  :   int32_t shift_1st = 7;
; 625  :   int32_t shift_2nd = 12 - (bitdepth - 8);
; 626  : 
; 627  :   fast_inverse_dst_4_generic(input, tmp, shift_1st);

	lea	rdx, QWORD PTR tmp$[rsp]
	mov	rcx, rax
	mov	r8d, 7
	call	fast_inverse_dst_4_generic
	mov	r8d, 20

; 628  :   fast_inverse_dst_4_generic(tmp, output, shift_2nd);

	lea	rcx, QWORD PTR tmp$[rsp]
	sub	r8d, ebx
	mov	rdx, rdi
	call	fast_inverse_dst_4_generic

; 629  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
fast_inverse_dst_4x4_generic ENDP
_TEXT	ENDS
END
