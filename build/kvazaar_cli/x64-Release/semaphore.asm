; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp__Cnd_destroy_in_situ:PROC
EXTRN	__imp__Mtx_unlock:PROC
EXTRN	__imp___std_terminate:PROC
EXTRN	__imp__Cnd_wait:PROC
EXTRN	__imp__Mtx_init_in_situ:PROC
EXTRN	__imp__Mtx_lock:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__Mtx_destroy_in_situ:PROC
EXTRN	__imp_?_Throw_C_error@std@@YAXH@Z:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	__imp__Cnd_init_in_situ:PROC
EXTRN	__imp__Cnd_signal:PROC
EXTRN	__imp___CxxFrameHandler4:PROC
PUBLIC	??$addressof@Vmutex@std@@@std@@YAPEAVmutex@0@AEAV10@@Z ; std::addressof<std::mutex>
PUBLIC	??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z ; std::unique_lock<std::mutex>::unique_lock<std::mutex>
PUBLIC	??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ	; std::unique_lock<std::mutex>::~unique_lock<std::mutex>
PUBLIC	?mutex@?$unique_lock@Vmutex@std@@@std@@QEBAPEAV02@XZ ; std::unique_lock<std::mutex>::mutex
PUBLIC	??1Semaphore@@QEAA@XZ				; Semaphore::~Semaphore
PUBLIC	??_GSemaphore@@QEAAPEAXI@Z			; Semaphore::`scalar deleting destructor'
PUBLIC	?wait@Semaphore@@QEAAXXZ			; Semaphore::wait
PUBLIC	?post@Semaphore@@QEAAXXZ			; Semaphore::post
PUBLIC	??0Semaphore@@QEAA@H@Z				; Semaphore::Semaphore
PUBLIC	??1mutex@std@@QEAA@XZ				; std::mutex::~mutex
PUBLIC	?_Mycnd@condition_variable@std@@AEAAPEAU_Cnd_internal_imp_t@@XZ ; std::condition_variable::_Mycnd
PUBLIC	?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z ; std::condition_variable::wait
PUBLIC	?notify_one@condition_variable@std@@QEAAXXZ	; std::condition_variable::notify_one
PUBLIC	??1condition_variable@std@@QEAA@XZ		; std::condition_variable::~condition_variable
PUBLIC	??0condition_variable@std@@QEAA@XZ		; std::condition_variable::condition_variable
PUBLIC	??0mutex@std@@QEAA@XZ				; std::mutex::mutex
PUBLIC	?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
PUBLIC	?unlock@_Mutex_base@std@@QEAAXXZ		; std::_Mutex_base::unlock
PUBLIC	?lock@_Mutex_base@std@@QEAAXXZ			; std::_Mutex_base::lock
PUBLIC	??1_Mutex_base@std@@QEAA@XZ			; std::_Mutex_base::~_Mutex_base
PUBLIC	??0_Mutex_base@std@@QEAA@H@Z			; std::_Mutex_base::_Mutex_base
PUBLIC	?_Check_C_return@std@@YAHH@Z			; std::_Check_C_return
PUBLIC	sem_destroy
PUBLIC	sem_wait
PUBLIC	sem_init
PUBLIC	sem_post
EXTRN	__std_terminate:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z DD imagerel $LN12
	DD	imagerel $LN12+51
	DD	imagerel $unwind$??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+37
	DD	imagerel $unwind$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Semaphore@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+35
	DD	imagerel $unwind$??1Semaphore@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSemaphore@@QEAAPEAXI@Z DD imagerel $LN16
	DD	imagerel $LN16+51
	DD	imagerel $unwind$??_GSemaphore@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?wait@Semaphore@@QEAAXXZ DD imagerel $LN35
	DD	imagerel $LN35+118
	DD	imagerel $unwind$?wait@Semaphore@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?post@Semaphore@@QEAAXXZ DD imagerel $LN36
	DD	imagerel $LN36+100
	DD	imagerel $unwind$?post@Semaphore@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Semaphore@@QEAA@H@Z DD imagerel $LN12
	DD	imagerel $LN12+49
	DD	imagerel $unwind$??0Semaphore@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z DD imagerel $LN9
	DD	imagerel $LN9+31
	DD	imagerel $unwind$?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?notify_one@condition_variable@std@@QEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+28
	DD	imagerel $unwind$?notify_one@condition_variable@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0condition_variable@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+24
	DD	imagerel $unwind$??0condition_variable@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0mutex@std@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+29
	DD	imagerel $unwind$??0mutex@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unlock@_Mutex_base@std@@QEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+28
	DD	imagerel $unwind$?unlock@_Mutex_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lock@_Mutex_base@std@@QEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+28
	DD	imagerel $unwind$?lock@_Mutex_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Mutex_base@std@@QEAA@H@Z DD imagerel $LN5
	DD	imagerel $LN5+29
	DD	imagerel $unwind$??0_Mutex_base@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_C_return@std@@YAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+22
	DD	imagerel $unwind$?_Check_C_return@std@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$sem_destroy DD imagerel $LN22
	DD	imagerel $LN22+94
	DD	imagerel $unwind$sem_destroy
$pdata$sem_wait DD imagerel $LN37
	DD	imagerel $LN37+104
	DD	imagerel $unwind$sem_wait
$pdata$sem_init DD imagerel $LN16
	DD	imagerel $LN16+73
	DD	imagerel $unwind$sem_init
$pdata$sem_post DD imagerel $LN38
	DD	imagerel $LN38+102
	DD	imagerel $unwind$sem_post
xdata	SEGMENT
$unwind$sem_destroy DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$sem_wait DD 040a11H
	DD	06340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$sem_wait
$cppxdata$sem_wait DB 028H
	DD	imagerel $stateUnwindMap$sem_wait
	DD	imagerel $ip2state$sem_wait
$stateUnwindMap$sem_wait DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
$ip2state$sem_wait DB 06H
	DB	':'
	DB	00H
	DB	'N'
	DB	02H
	DB	'.'
	DB	00H
$cppxdata$sem_post DB 028H
	DD	imagerel $stateUnwindMap$sem_post
	DD	imagerel $ip2state$sem_post
	ORG $+1
$unwind$sem_init DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$sem_post DD 040a11H
	DD	06340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$sem_post
$stateUnwindMap$sem_post DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
$ip2state$sem_post DB 06H
	DB	':'
	DB	00H
	DB	'<'
	DB	02H
	DB	'<'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_C_return@std@@YAHH@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Mutex_base@std@@QEAA@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lock@_Mutex_base@std@@QEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unlock@_Mutex_base@std@@QEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0mutex@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0condition_variable@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?notify_one@condition_variable@std@@QEAAXXZ DB 02H
	DB	' '
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?notify_one@condition_variable@std@@QEAAXXZ DB 060H
	DD	imagerel $ip2state$?notify_one@condition_variable@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?notify_one@condition_variable@std@@QEAAXXZ DD 010419H
	DD	04204H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?notify_one@condition_variable@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Semaphore@@QEAA@H@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?post@Semaphore@@QEAAXXZ DB 06H
	DB	':'
	DB	00H
	DB	'<'
	DB	02H
	DB	'<'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?post@Semaphore@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?post@Semaphore@@QEAAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?post@Semaphore@@QEAAXXZ
	DD	imagerel $ip2state$?post@Semaphore@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?post@Semaphore@@QEAAXXZ DD 040a11H
	DD	06340aH
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?post@Semaphore@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?wait@Semaphore@@QEAAXXZ DB 06H
	DB	'T'
	DB	00H
	DB	'H'
	DB	02H
	DB	','
	DB	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?wait@Semaphore@@QEAAXXZ DB 04H
	DB	0aH
	DD	imagerel ??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ
	DB	040H
	DB	03eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?wait@Semaphore@@QEAAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?wait@Semaphore@@QEAAXXZ
	DD	imagerel $ip2state$?wait@Semaphore@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?wait@Semaphore@@QEAAXXZ DD 040a11H
	DD	08340aH
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?wait@Semaphore@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSemaphore@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Semaphore@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ DB 02H
	DB	'2'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ DD 010419H
	DD	04204H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
_TEXT	SEGMENT
sem$ = 48
sem_post PROC

; 64   : int sem_post(sem_t* sem) {

$LN38:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 65   :     static_cast<Semaphore*>(*sem)->post();

	mov	rbx, QWORD PTR [rcx]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	lea	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN11@sem_post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN11@sem_post:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 31   :         if (++val_ <= 0) {

	inc	DWORD PTR [rbx]
	cmp	DWORD PTR [rbx], 0
	jg	SHORT $LN17@sem_post

; 32   :             cvar_.notify_one();

	lea	rcx, QWORD PTR [rbx+8]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 589  :         _Check_C_return(_Cnd_signal(_Mycnd()));

	call	QWORD PTR __imp__Cnd_signal
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN20@sem_post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN20@sem_post:
$LN17@sem_post:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	lea	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN30@sem_post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN30@sem_post:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 66   :     return 0;

	xor	eax, eax

; 67   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN35@sem_post:
sem_post ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
_TEXT	SEGMENT
sem$ = 48
__formal$dead$ = 56
value$dead$ = 64
sem_init PROC

; 59   : int sem_init(sem_t* sem, int, unsigned int value) {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 60   :     *sem = new Semaphore(value);

	mov	ecx, 160				; 000000a0H
	call	??2@YAPEAX_K@Z				; operator new
	mov	rbx, rax

; 26   :         val_(value) {

	lea	rcx, QWORD PTR [rax+8]
	mov	DWORD PTR [rax], 0
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 578  :         _Cnd_init_in_situ(_Mycnd());

	call	QWORD PTR __imp__Cnd_init_in_situ
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 26   :         val_(value) {

	lea	rcx, QWORD PTR [rbx+80]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	mov	edx, 2
	call	QWORD PTR __imp__Mtx_init_in_situ
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 60   :     *sem = new Semaphore(value);

	mov	QWORD PTR [rdi], rbx

; 61   :     return 0;

	xor	eax, eax

; 62   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
sem_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
_TEXT	SEGMENT
sem$ = 48
sem_wait PROC

; 69   : int sem_wait(sem_t* sem) {

$LN37:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 70   :     static_cast<Semaphore*>(*sem)->wait();

	mov	rbx, QWORD PTR [rcx]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	lea	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN11@sem_wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN11@sem_wait:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 38   :         if (--val_ < 0) {

	sub	DWORD PTR [rbx], 1
	jns	SHORT $LN19@sem_wait

; 39   :             cvar_.wait(lck);

	lea	rcx, QWORD PTR [rbx+8]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 598  :         _Check_C_return(_Cnd_wait(_Mycnd(), _Lck.mutex()->_Mymtx()));

	lea	rdx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Cnd_wait
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN19@sem_wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN19@sem_wait:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	lea	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN29@sem_wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN29@sem_wait:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 71   :     return 0;

	xor	eax, eax

; 72   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN34@sem_wait:
sem_wait ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
_TEXT	SEGMENT
sem$ = 48
sem_destroy PROC

; 53   : int sem_destroy(sem_t* sem) {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 54   :     delete static_cast<Semaphore*>(*sem);

	mov	rdi, QWORD PTR [rcx]
	mov	rbx, rcx
	test	rdi, rdi
	je	SHORT $LN18@sem_destro
	lea	rcx, QWORD PTR [rdi+80]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	call	QWORD PTR __imp__Mtx_destroy_in_situ
	lea	rcx, QWORD PTR [rdi+8]

; 582  :         _Cnd_destroy_in_situ(_Mycnd());

	call	QWORD PTR __imp__Cnd_destroy_in_situ
	mov	edx, 160				; 000000a0H
	mov	rcx, rdi
	call	??3@YAXPEAX_K@Z				; operator delete
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 57   : }

	xor	eax, eax
	mov	QWORD PTR [rbx], 0
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN18@sem_destro:
	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	QWORD PTR [rcx], 0
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
sem_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
;	COMDAT ?_Check_C_return@std@@YAHH@Z
_TEXT	SEGMENT
_Res$ = 48
?_Check_C_return@std@@YAHH@Z PROC			; std::_Check_C_return, COMDAT

; 129  : inline int _Check_C_return(int _Res) { // throw exception on failure

$LN6:
	sub	rsp, 40					; 00000028H

; 130  :     if (_Res != _Thrd_success) {

	test	ecx, ecx
	je	SHORT $LN2@Check_C_re

; 131  :         _Throw_C_error(_Res);

	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN2@Check_C_re:

; 132  :     }
; 133  : 
; 134  :     return _Res;

	xor	eax, eax

; 135  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@Check_C_re:
?_Check_C_return@std@@YAHH@Z ENDP			; std::_Check_C_return
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??0_Mutex_base@std@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 48
_Flags$dead$ = 56
??0_Mutex_base@std@@QEAA@H@Z PROC			; std::_Mutex_base::_Mutex_base, COMDAT

; 39   :     _Mutex_base(int _Flags = 0) noexcept {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	mov	edx, 2
	mov	rbx, rcx
	call	QWORD PTR __imp__Mtx_init_in_situ

; 41   :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0_Mutex_base@std@@QEAA@H@Z ENDP			; std::_Mutex_base::_Mutex_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??1_Mutex_base@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Mutex_base@std@@QEAA@XZ PROC			; std::_Mutex_base::~_Mutex_base, COMDAT

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	rex_jmp	QWORD PTR __imp__Mtx_destroy_in_situ
??1_Mutex_base@std@@QEAA@XZ ENDP			; std::_Mutex_base::~_Mutex_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?lock@_Mutex_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?lock@_Mutex_base@std@@QEAAXXZ PROC			; std::_Mutex_base::lock, COMDAT

; 50   :     void lock() {

$LN9:
	sub	rsp, 40					; 00000028H

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN4@lock

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN4@lock:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 52   :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@lock:
?lock@_Mutex_base@std@@QEAAXXZ ENDP			; std::_Mutex_base::lock
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?unlock@_Mutex_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?unlock@_Mutex_base@std@@QEAAXXZ PROC			; std::_Mutex_base::unlock, COMDAT

; 66   :     void unlock() {

$LN9:
	sub	rsp, 40					; 00000028H

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN4@unlock

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN4@unlock:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 68   :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@unlock:
?unlock@_Mutex_base@std@@QEAAXXZ ENDP			; std::_Mutex_base::unlock
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ
_TEXT	SEGMENT
this$ = 8
?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ PROC ; std::_Mutex_base::_Mymtx, COMDAT

; 83   :         return reinterpret_cast<_Mtx_t>(&_Mtx_storage);

	mov	rax, rcx

; 84   :     }

	ret	0
?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ENDP ; std::_Mutex_base::_Mymtx
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??0mutex@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0mutex@std@@QEAA@XZ PROC				; std::mutex::mutex, COMDAT

; 89   :     /* constexpr */ mutex() noexcept // TRANSITION, ABI

$LN7:
	push	rbx
	sub	rsp, 32					; 00000020H

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	mov	edx, 2

; 89   :     /* constexpr */ mutex() noexcept // TRANSITION, ABI

	mov	rbx, rcx

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	call	QWORD PTR __imp__Mtx_init_in_situ

; 90   :         : _Mutex_base() {}

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0mutex@std@@QEAA@XZ ENDP				; std::mutex::mutex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??0condition_variable@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0condition_variable@std@@QEAA@XZ PROC			; std::condition_variable::condition_variable, COMDAT

; 577  :     condition_variable() {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 578  :         _Cnd_init_in_situ(_Mycnd());

	call	QWORD PTR __imp__Cnd_init_in_situ

; 579  :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0condition_variable@std@@QEAA@XZ ENDP			; std::condition_variable::condition_variable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??1condition_variable@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1condition_variable@std@@QEAA@XZ PROC			; std::condition_variable::~condition_variable, COMDAT

; 582  :         _Cnd_destroy_in_situ(_Mycnd());

	rex_jmp	QWORD PTR __imp__Cnd_destroy_in_situ
??1condition_variable@std@@QEAA@XZ ENDP			; std::condition_variable::~condition_variable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?notify_one@condition_variable@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?notify_one@condition_variable@std@@QEAAXXZ PROC	; std::condition_variable::notify_one, COMDAT

; 588  :     void notify_one() noexcept { // wake up one waiter

$LN10:
	sub	rsp, 40					; 00000028H

; 589  :         _Check_C_return(_Cnd_signal(_Mycnd()));

	call	QWORD PTR __imp__Cnd_signal
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN4@notify_one

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN4@notify_one:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 590  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@notify_one:
?notify_one@condition_variable@std@@QEAAXXZ ENDP	; std::condition_variable::notify_one
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Lck$ = 56
?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z PROC ; std::condition_variable::wait, COMDAT

; 596  :     void wait(unique_lock<mutex>& _Lck) { // wait for signal

$LN9:
	sub	rsp, 40					; 00000028H

; 597  :         // Nothing to do to comply with LWG-2135 because std::mutex lock/unlock are nothrow
; 598  :         _Check_C_return(_Cnd_wait(_Mycnd(), _Lck.mutex()->_Mymtx()));

	mov	rdx, QWORD PTR [rdx]
	call	QWORD PTR __imp__Cnd_wait
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN4@wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN4@wait:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 599  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@wait:
?wait@condition_variable@std@@QEAAXAEAV?$unique_lock@Vmutex@std@@@2@@Z ENDP ; std::condition_variable::wait
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?_Mycnd@condition_variable@std@@AEAAPEAU_Cnd_internal_imp_t@@XZ
_TEXT	SEGMENT
this$ = 8
?_Mycnd@condition_variable@std@@AEAAPEAU_Cnd_internal_imp_t@@XZ PROC ; std::condition_variable::_Mycnd, COMDAT

; 698  :         return reinterpret_cast<_Cnd_t>(&_Cnd_storage);

	mov	rax, rcx

; 699  :     }

	ret	0
?_Mycnd@condition_variable@std@@AEAAPEAU_Cnd_internal_imp_t@@XZ ENDP ; std::condition_variable::_Mycnd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??1mutex@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1mutex@std@@QEAA@XZ PROC				; std::mutex::~mutex, COMDAT

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	rex_jmp	QWORD PTR __imp__Mtx_destroy_in_situ
??1mutex@std@@QEAA@XZ ENDP				; std::mutex::~mutex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
;	COMDAT ??0Semaphore@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 48
value$dead$ = 56
??0Semaphore@@QEAA@H@Z PROC				; Semaphore::Semaphore, COMDAT

; 26   :         val_(value) {

$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	DWORD PTR [rcx], 0
	add	rcx, 8
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 578  :         _Cnd_init_in_situ(_Mycnd());

	call	QWORD PTR __imp__Cnd_init_in_situ
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 26   :         val_(value) {

	lea	rcx, QWORD PTR [rbx+80]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 40   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

	mov	edx, 2
	call	QWORD PTR __imp__Mtx_init_in_situ
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 27   :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0Semaphore@@QEAA@H@Z ENDP				; Semaphore::Semaphore
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
;	COMDAT ?post@Semaphore@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?post@Semaphore@@QEAAXXZ PROC				; Semaphore::post, COMDAT

; 29   :     void post() {

$LN36:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	add	rcx, 80					; 00000050H
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN10@post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN10@post:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 31   :         if (++val_ <= 0) {

	inc	DWORD PTR [rbx]
	cmp	DWORD PTR [rbx], 0
	jg	SHORT $LN16@post

; 32   :             cvar_.notify_one();

	lea	rcx, QWORD PTR [rbx+8]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 589  :         _Check_C_return(_Cnd_signal(_Mycnd()));

	call	QWORD PTR __imp__Cnd_signal
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN19@post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN19@post:
$LN16@post:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	lea	rcx, QWORD PTR [rbx+80]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN29@post

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN29@post:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 34   :     }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN33@post:
?post@Semaphore@@QEAAXXZ ENDP				; Semaphore::post
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp
;	COMDAT ?wait@Semaphore@@QEAAXXZ
_TEXT	SEGMENT
lck$ = 32
this$ = 64
?wait@Semaphore@@QEAAXXZ PROC				; Semaphore::wait, COMDAT

; 36   :     void wait() {

$LN35:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 37   :         std::unique_lock<std::mutex> lck(mtx_);

	lea	rdi, QWORD PTR [rcx+80]
	mov	QWORD PTR lck$[rsp], rdi
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 135  :     explicit unique_lock(_Mutex& _Mtx) : _Pmtx(_STD addressof(_Mtx)), _Owns(false) { // construct and lock

	mov	BYTE PTR lck$[rsp+8], 0

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, rdi
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN10@wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN10@wait:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 137  :         _Owns = true;

	mov	BYTE PTR lck$[rsp+8], 1
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 38   :         if (--val_ < 0) {

	sub	DWORD PTR [rbx], 1
	jns	SHORT $LN18@wait

; 39   :             cvar_.wait(lck);

	lea	rcx, QWORD PTR [rbx+8]
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 598  :         _Check_C_return(_Cnd_wait(_Mycnd(), _Lck.mutex()->_Mymtx()));

	mov	rdx, rdi
	call	QWORD PTR __imp__Cnd_wait
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN18@wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN18@wait:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, rdi
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN28@wait

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN28@wait:
; File F:\open_codec_learn_2021\kvazaar-master\src\threadwrapper\src\semaphore.cpp

; 41   :     }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN32@wait:
?wait@Semaphore@@QEAAXXZ ENDP				; Semaphore::wait
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
lck$ = 32
this$ = 64
?dtor$0@?0??wait@Semaphore@@QEAAXXZ@4HA PROC		; `Semaphore::wait'::`1'::dtor$0
	lea	rcx, QWORD PTR lck$[rdx]
	jmp	??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ ; std::unique_lock<std::mutex>::~unique_lock<std::mutex>
?dtor$0@?0??wait@Semaphore@@QEAAXXZ@4HA ENDP		; `Semaphore::wait'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
lck$ = 32
this$ = 64
?dtor$0@?0??wait@Semaphore@@QEAAXXZ@4HA PROC		; `Semaphore::wait'::`1'::dtor$0
	lea	rcx, QWORD PTR lck$[rdx]
	jmp	??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ ; std::unique_lock<std::mutex>::~unique_lock<std::mutex>
?dtor$0@?0??wait@Semaphore@@QEAAXXZ@4HA ENDP		; `Semaphore::wait'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??_GSemaphore@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GSemaphore@@QEAAPEAXI@Z PROC				; Semaphore::`scalar deleting destructor', COMDAT
$LN16:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	add	rcx, 80					; 00000050H

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	call	QWORD PTR __imp__Mtx_destroy_in_situ
	lea	rcx, QWORD PTR [rbx+8]

; 582  :         _Cnd_destroy_in_situ(_Mycnd());

	call	QWORD PTR __imp__Cnd_destroy_in_situ
	mov	edx, 160				; 000000a0H
	mov	rcx, rbx
	call	??3@YAXPEAX_K@Z				; operator delete
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??_GSemaphore@@QEAAPEAXI@Z ENDP				; Semaphore::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??1Semaphore@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Semaphore@@QEAA@XZ PROC				; Semaphore::~Semaphore, COMDAT
$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	add	rcx, 80					; 00000050H

; 44   :         _Mtx_destroy_in_situ(_Mymtx());

	call	QWORD PTR __imp__Mtx_destroy_in_situ
	lea	rcx, QWORD PTR [rbx+8]
	add	rsp, 32					; 00000020H
	pop	rbx

; 582  :         _Cnd_destroy_in_situ(_Mycnd());

	rex_jmp	QWORD PTR __imp__Cnd_destroy_in_situ
??1Semaphore@@QEAA@XZ ENDP				; Semaphore::~Semaphore
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ?mutex@?$unique_lock@Vmutex@std@@@std@@QEBAPEAV02@XZ
_TEXT	SEGMENT
this$ = 8
?mutex@?$unique_lock@Vmutex@std@@@std@@QEBAPEAV02@XZ PROC ; std::unique_lock<std::mutex>::mutex, COMDAT

; 257  :         return _Pmtx;

	mov	rax, QWORD PTR [rcx]

; 258  :     }

	ret	0
?mutex@?$unique_lock@Vmutex@std@@@std@@QEBAPEAV02@XZ ENDP ; std::unique_lock<std::mutex>::mutex
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ PROC		; std::unique_lock<std::mutex>::~unique_lock<std::mutex>, COMDAT

; 186  :     ~unique_lock() noexcept {

$LN14:
	sub	rsp, 40					; 00000028H

; 187  :         if (_Owns) {

	cmp	BYTE PTR [rcx+8], 0
	je	SHORT $LN7@unique_loc

; 67   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR __imp__Mtx_unlock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN7@unique_loc

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	npad	1
$LN7@unique_loc:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 190  :     }

	add	rsp, 40					; 00000028H
	ret	0
$LN11@unique_loc:
??1?$unique_lock@Vmutex@std@@@std@@QEAA@XZ ENDP		; std::unique_lock<std::mutex>::~unique_lock<std::mutex>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex
;	COMDAT ??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z
_TEXT	SEGMENT
this$ = 48
_Mtx$ = 56
??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z PROC ; std::unique_lock<std::mutex>::unique_lock<std::mutex>, COMDAT

; 135  :     explicit unique_lock(_Mutex& _Mtx) : _Pmtx(_STD addressof(_Mtx)), _Owns(false) { // construct and lock

$LN12:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	QWORD PTR [rcx], rdx
	mov	BYTE PTR [rcx+8], 0

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

	mov	rcx, rdx
	call	QWORD PTR __imp__Mtx_lock
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xthreads.h

; 130  :     if (_Res != _Thrd_success) {

	test	eax, eax
	je	SHORT $LN6@unique_loc

; 131  :         _Throw_C_error(_Res);

	mov	ecx, eax
	call	QWORD PTR __imp_?_Throw_C_error@std@@YAXH@Z
	int	3
$LN6@unique_loc:
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\mutex

; 137  :         _Owns = true;

	mov	BYTE PTR [rbx+8], 1

; 138  :     }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN10@unique_loc:
??0?$unique_lock@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z ENDP ; std::unique_lock<std::mutex>::unique_lock<std::mutex>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\software_install\VS2019\VC\Tools\MSVC\14.26.28801\include\xstddef
;	COMDAT ??$addressof@Vmutex@std@@@std@@YAPEAVmutex@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@Vmutex@std@@@std@@YAPEAVmutex@0@AEAV10@@Z PROC ; std::addressof<std::mutex>, COMDAT

; 275  :     return __builtin_addressof(_Val);

	mov	rax, rcx

; 276  : }

	ret	0
??$addressof@Vmutex@std@@@std@@YAPEAVmutex@0@AEAV10@@Z ENDP ; std::addressof<std::mutex>
_TEXT	ENDS
END
