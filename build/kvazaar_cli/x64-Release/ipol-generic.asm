; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
strategies_to_select DQ FLAT:$SG4294948427
	DQ	FLAT:kvz_array_checksum
	DQ	FLAT:$SG4294948426
	DQ	FLAT:kvz_array_md5
	DQ	FLAT:$SG4294948425
	DQ	FLAT:kvz_reg_sad
	DQ	FLAT:$SG4294948424
	DQ	FLAT:kvz_sad_4x4
	DQ	FLAT:$SG4294948423
	DQ	FLAT:kvz_sad_8x8
	DQ	FLAT:$SG4294948422
	DQ	FLAT:kvz_sad_16x16
	DQ	FLAT:$SG4294948421
	DQ	FLAT:kvz_sad_32x32
	DQ	FLAT:$SG4294948420
	DQ	FLAT:kvz_sad_64x64
	DQ	FLAT:$SG4294948419
	DQ	FLAT:kvz_satd_4x4
	DQ	FLAT:$SG4294948418
	DQ	FLAT:kvz_satd_8x8
	DQ	FLAT:$SG4294948417
	DQ	FLAT:kvz_satd_16x16
	DQ	FLAT:$SG4294948416
	DQ	FLAT:kvz_satd_32x32
	DQ	FLAT:$SG4294948415
	DQ	FLAT:kvz_satd_64x64
	DQ	FLAT:$SG4294948414
	DQ	FLAT:kvz_satd_any_size
	DQ	FLAT:$SG4294948413
	DQ	FLAT:kvz_sad_4x4_dual
	DQ	FLAT:$SG4294948412
	DQ	FLAT:kvz_sad_8x8_dual
	DQ	FLAT:$SG4294948411
	DQ	FLAT:kvz_sad_16x16_dual
	DQ	FLAT:$SG4294948410
	DQ	FLAT:kvz_sad_32x32_dual
	DQ	FLAT:$SG4294948409
	DQ	FLAT:kvz_sad_64x64_dual
	DQ	FLAT:$SG4294948408
	DQ	FLAT:kvz_satd_4x4_dual
	DQ	FLAT:$SG4294948407
	DQ	FLAT:kvz_satd_8x8_dual
	DQ	FLAT:$SG4294948406
	DQ	FLAT:kvz_satd_16x16_dual
	DQ	FLAT:$SG4294948405
	DQ	FLAT:kvz_satd_32x32_dual
	DQ	FLAT:$SG4294948404
	DQ	FLAT:kvz_satd_64x64_dual
	DQ	FLAT:$SG4294948403
	DQ	FLAT:kvz_satd_any_size_quad
	DQ	FLAT:$SG4294948402
	DQ	FLAT:kvz_pixels_calc_ssd
	DQ	FLAT:$SG4294948401
	DQ	FLAT:kvz_bipred_average
	DQ	FLAT:$SG4294948400
	DQ	FLAT:kvz_get_optimized_sad
	DQ	FLAT:$SG4294948399
	DQ	FLAT:kvz_ver_sad
	DQ	FLAT:$SG4294948398
	DQ	FLAT:kvz_hor_sad
	DQ	FLAT:$SG4294948397
	DQ	FLAT:kvz_pixel_var
	DQ	FLAT:$SG4294948396
	DQ	FLAT:kvz_fast_forward_dst_4x4
	DQ	FLAT:$SG4294948395
	DQ	FLAT:kvz_dct_4x4
	DQ	FLAT:$SG4294948394
	DQ	FLAT:kvz_dct_8x8
	DQ	FLAT:$SG4294948393
	DQ	FLAT:kvz_dct_16x16
	DQ	FLAT:$SG4294948392
	DQ	FLAT:kvz_dct_32x32
	DQ	FLAT:$SG4294948391
	DQ	FLAT:kvz_fast_inverse_dst_4x4
	DQ	FLAT:$SG4294948390
	DQ	FLAT:kvz_idct_4x4
	DQ	FLAT:$SG4294948389
	DQ	FLAT:kvz_idct_8x8
	DQ	FLAT:$SG4294948388
	DQ	FLAT:kvz_idct_16x16
	DQ	FLAT:$SG4294948387
	DQ	FLAT:kvz_idct_32x32
	DQ	FLAT:$SG4294948386
	DQ	FLAT:kvz_filter_hpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294948385
	DQ	FLAT:kvz_filter_hpel_blocks_diag_luma
	DQ	FLAT:$SG4294948384
	DQ	FLAT:kvz_filter_qpel_blocks_hor_ver_luma
	DQ	FLAT:$SG4294948383
	DQ	FLAT:kvz_filter_qpel_blocks_diag_luma
	DQ	FLAT:$SG4294948382
	DQ	FLAT:kvz_sample_quarterpel_luma
	DQ	FLAT:$SG4294948381
	DQ	FLAT:kvz_sample_octpel_chroma
	DQ	FLAT:$SG4294948380
	DQ	FLAT:kvz_sample_quarterpel_luma_hi
	DQ	FLAT:$SG4294948379
	DQ	FLAT:kvz_sample_octpel_chroma_hi
	DQ	FLAT:$SG4294948378
	DQ	FLAT:kvz_get_extended_block
	DQ	FLAT:$SG4294948377
	DQ	FLAT:kvz_quant
	DQ	FLAT:$SG4294948376
	DQ	FLAT:kvz_quantize_residual
	DQ	FLAT:$SG4294948375
	DQ	FLAT:kvz_dequant
	DQ	FLAT:$SG4294948374
	DQ	FLAT:kvz_coeff_abs_sum
	DQ	FLAT:$SG4294948373
	DQ	FLAT:kvz_fast_coeff_cost
	DQ	FLAT:$SG4294948372
	DQ	FLAT:kvz_angular_pred
	DQ	FLAT:$SG4294948371
	DQ	FLAT:kvz_intra_pred_planar
	DQ	FLAT:$SG4294948370
	DQ	FLAT:kvz_intra_pred_filtered_dc
	DQ	FLAT:$SG4294948369
	DQ	FLAT:kvz_sao_edge_ddistortion
	DQ	FLAT:$SG4294948368
	DQ	FLAT:kvz_calc_sao_edge_dir
	DQ	FLAT:$SG4294948367
	DQ	FLAT:kvz_sao_reconstruct_color
	DQ	FLAT:$SG4294948366
	DQ	FLAT:kvz_sao_band_ddistortion
	DQ	FLAT:$SG4294948365
	DQ	FLAT:kvz_encode_coeff_nxn
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
g_sig_last_scan_cg DQ FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_8x8
	DQ	FLAT:g_sig_last_scan_8x8+16
	DQ	FLAT:g_sig_last_scan_8x8+32
	DQ	FLAT:g_sig_last_scan_16x16
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:g_sig_last_scan_32x32
	DQ	0000000000000000H
	DQ	0000000000000000H
g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+3
$SG4294948377 DB 'quant', 00H
	ORG $+7
$SG4294948427 DB 'array_checksum', 00H
	ORG $+1
$SG4294948426 DB 'array_md5', 00H
	ORG $+6
$SG4294948425 DB 'reg_sad', 00H
$SG4294948424 DB 'sad_4x4', 00H
$SG4294948423 DB 'sad_8x8', 00H
$SG4294948422 DB 'sad_16x16', 00H
	ORG $+6
$SG4294948421 DB 'sad_32x32', 00H
	ORG $+6
$SG4294948420 DB 'sad_64x64', 00H
	ORG $+6
$SG4294948419 DB 'satd_4x4', 00H
	ORG $+7
$SG4294948418 DB 'satd_8x8', 00H
	ORG $+7
$SG4294948417 DB 'satd_16x16', 00H
	ORG $+5
$SG4294948416 DB 'satd_32x32', 00H
	ORG $+5
$SG4294948415 DB 'satd_64x64', 00H
	ORG $+5
$SG4294948414 DB 'satd_any_size', 00H
	ORG $+2
$SG4294948413 DB 'sad_4x4_dual', 00H
	ORG $+3
$SG4294948412 DB 'sad_8x8_dual', 00H
	ORG $+3
$SG4294948411 DB 'sad_16x16_dual', 00H
	ORG $+1
$SG4294948410 DB 'sad_32x32_dual', 00H
	ORG $+1
$SG4294948409 DB 'sad_64x64_dual', 00H
	ORG $+1
$SG4294948408 DB 'satd_4x4_dual', 00H
	ORG $+2
$SG4294948407 DB 'satd_8x8_dual', 00H
	ORG $+2
$SG4294948406 DB 'satd_16x16_dual', 00H
$SG4294948405 DB 'satd_32x32_dual', 00H
$SG4294948404 DB 'satd_64x64_dual', 00H
$SG4294948403 DB 'satd_any_size_quad', 00H
	ORG $+5
$SG4294948402 DB 'pixels_calc_ssd', 00H
$SG4294948401 DB 'bipred_average', 00H
	ORG $+1
$SG4294948400 DB 'get_optimized_sad', 00H
	ORG $+6
$SG4294948399 DB 'ver_sad', 00H
$SG4294948398 DB 'hor_sad', 00H
$SG4294948397 DB 'pixel_var', 00H
	ORG $+6
$SG4294948396 DB 'fast_forward_dst_4x4', 00H
	ORG $+3
$SG4294948395 DB 'dct_4x4', 00H
$SG4294948394 DB 'dct_8x8', 00H
$SG4294948393 DB 'dct_16x16', 00H
	ORG $+6
$SG4294948392 DB 'dct_32x32', 00H
	ORG $+6
$SG4294948391 DB 'fast_inverse_dst_4x4', 00H
	ORG $+3
$SG4294948390 DB 'idct_4x4', 00H
	ORG $+7
$SG4294948389 DB 'idct_8x8', 00H
	ORG $+7
$SG4294948388 DB 'idct_16x16', 00H
	ORG $+5
$SG4294948387 DB 'idct_32x32', 00H
	ORG $+5
$SG4294948386 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294948385 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948384 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294948383 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948382 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294948381 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294948380 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294948379 DB 'sample_octpel_chroma_hi', 00H
$SG4294948378 DB 'get_extended_block', 00H
	ORG $+5
$SG4294948376 DB 'quantize_residual', 00H
	ORG $+6
$SG4294948375 DB 'dequant', 00H
$SG4294948374 DB 'coeff_abs_sum', 00H
	ORG $+2
$SG4294948373 DB 'fast_coeff_cost', 00H
$SG4294948372 DB 'angular_pred', 00H
	ORG $+3
$SG4294948371 DB 'intra_pred_planar', 00H
	ORG $+6
$SG4294948370 DB 'intra_pred_filtered_dc', 00H
	ORG $+1
$SG4294948369 DB 'sao_edge_ddistortion', 00H
	ORG $+3
$SG4294948368 DB 'calc_sao_edge_dir', 00H
	ORG $+6
$SG4294948367 DB 'sao_reconstruct_color', 00H
	ORG $+2
$SG4294948366 DB 'sao_band_ddistortion', 00H
	ORG $+3
$SG4294948365 DB 'encode_coeff_nxn', 00H
PUBLIC	kvz_get_extended_block_generic
PUBLIC	kvz_filter_qpel_blocks_diag_luma_generic
PUBLIC	kvz_filter_qpel_blocks_hor_ver_luma_generic
PUBLIC	kvz_filter_hpel_blocks_diag_luma_generic
PUBLIC	kvz_filter_hpel_blocks_hor_ver_luma_generic
PUBLIC	kvz_sample_quarterpel_luma_hi_generic
PUBLIC	kvz_sample_quarterpel_luma_generic
PUBLIC	kvz_four_tap_filter_ver_16bit_generic
PUBLIC	kvz_four_tap_filter_ver_generic
PUBLIC	kvz_four_tap_filter_hor_16bit_generic
PUBLIC	kvz_four_tap_filter_hor_generic
PUBLIC	kvz_eight_tap_filter_ver_16bit_generic
PUBLIC	kvz_eight_tap_filter_ver_generic
PUBLIC	kvz_eight_tap_filter_hor_16bit_generic
PUBLIC	kvz_eight_tap_filter_hor_generic
PUBLIC	kvz_sample_octpel_chroma_generic
PUBLIC	kvz_sample_octpel_chroma_hi_generic
PUBLIC	kvz_strategy_register_ipol_generic
pdata	SEGMENT
$pdata$kvz_get_extended_block_generic DD imagerel $LN77
	DD	imagerel $LN77+184
	DD	imagerel $unwind$kvz_get_extended_block_generic
$pdata$2$kvz_get_extended_block_generic DD imagerel $LN77+184
	DD	imagerel $LN77+362
	DD	imagerel $chain$2$kvz_get_extended_block_generic
$pdata$5$kvz_get_extended_block_generic DD imagerel $LN77+362
	DD	imagerel $LN77+623
	DD	imagerel $chain$5$kvz_get_extended_block_generic
$pdata$6$kvz_get_extended_block_generic DD imagerel $LN77+623
	DD	imagerel $LN77+640
	DD	imagerel $chain$6$kvz_get_extended_block_generic
$pdata$7$kvz_get_extended_block_generic DD imagerel $LN77+640
	DD	imagerel $LN77+692
	DD	imagerel $chain$7$kvz_get_extended_block_generic
$pdata$kvz_filter_qpel_blocks_diag_luma_generic DD imagerel $LN238
	DD	imagerel $LN238+194
	DD	imagerel $unwind$kvz_filter_qpel_blocks_diag_luma_generic
$pdata$4$kvz_filter_qpel_blocks_diag_luma_generic DD imagerel $LN238+194
	DD	imagerel $LN238+2404
	DD	imagerel $chain$4$kvz_filter_qpel_blocks_diag_luma_generic
$pdata$5$kvz_filter_qpel_blocks_diag_luma_generic DD imagerel $LN238+2404
	DD	imagerel $LN238+2412
	DD	imagerel $chain$5$kvz_filter_qpel_blocks_diag_luma_generic
$pdata$kvz_filter_qpel_blocks_hor_ver_luma_generic DD imagerel $LN346
	DD	imagerel $LN346+3367
	DD	imagerel $unwind$kvz_filter_qpel_blocks_hor_ver_luma_generic
$pdata$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179
	DD	imagerel $LN179+13
	DD	imagerel $unwind$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$2$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+13
	DD	imagerel $LN179+33
	DD	imagerel $chain$2$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$4$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+33
	DD	imagerel $LN179+53
	DD	imagerel $chain$4$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$5$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+53
	DD	imagerel $LN179+521
	DD	imagerel $chain$5$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$6$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+521
	DD	imagerel $LN179+761
	DD	imagerel $chain$6$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$7$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+761
	DD	imagerel $LN179+966
	DD	imagerel $chain$7$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$8$kvz_filter_hpel_blocks_diag_luma_generic DD imagerel $LN179+966
	DD	imagerel $LN179+996
	DD	imagerel $chain$8$kvz_filter_hpel_blocks_diag_luma_generic
$pdata$kvz_filter_hpel_blocks_hor_ver_luma_generic DD imagerel $LN223
	DD	imagerel $LN223+1473
	DD	imagerel $unwind$kvz_filter_hpel_blocks_hor_ver_luma_generic
$pdata$kvz_sample_quarterpel_luma_hi_generic DD imagerel $LN64
	DD	imagerel $LN64+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_hi_generic
$pdata$0$kvz_sample_quarterpel_luma_hi_generic DD imagerel $LN64+113
	DD	imagerel $LN64+389
	DD	imagerel $chain$0$kvz_sample_quarterpel_luma_hi_generic
$pdata$1$kvz_sample_quarterpel_luma_hi_generic DD imagerel $LN64+389
	DD	imagerel $LN64+658
	DD	imagerel $chain$1$kvz_sample_quarterpel_luma_hi_generic
$pdata$kvz_sample_quarterpel_luma_generic DD imagerel $LN68
	DD	imagerel $LN68+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_generic
$pdata$0$kvz_sample_quarterpel_luma_generic DD imagerel $LN68+113
	DD	imagerel $LN68+389
	DD	imagerel $chain$0$kvz_sample_quarterpel_luma_generic
$pdata$1$kvz_sample_quarterpel_luma_generic DD imagerel $LN68+389
	DD	imagerel $LN68+668
	DD	imagerel $chain$1$kvz_sample_quarterpel_luma_generic
$pdata$kvz_four_tap_filter_ver_generic DD imagerel $LN14
	DD	imagerel $LN14+98
	DD	imagerel $unwind$kvz_four_tap_filter_ver_generic
$pdata$kvz_eight_tap_filter_ver_generic DD imagerel $LN18
	DD	imagerel $LN18+184
	DD	imagerel $unwind$kvz_eight_tap_filter_ver_generic
$pdata$kvz_sample_octpel_chroma_generic DD imagerel $LN60
	DD	imagerel $LN60+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_generic
$pdata$0$kvz_sample_octpel_chroma_generic DD imagerel $LN60+54
	DD	imagerel $LN60+323
	DD	imagerel $chain$0$kvz_sample_octpel_chroma_generic
$pdata$1$kvz_sample_octpel_chroma_generic DD imagerel $LN60+323
	DD	imagerel $LN60+507
	DD	imagerel $chain$1$kvz_sample_octpel_chroma_generic
$pdata$kvz_sample_octpel_chroma_hi_generic DD imagerel $LN56
	DD	imagerel $LN56+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_hi_generic
$pdata$0$kvz_sample_octpel_chroma_hi_generic DD imagerel $LN56+54
	DD	imagerel $LN56+323
	DD	imagerel $chain$0$kvz_sample_octpel_chroma_hi_generic
$pdata$1$kvz_sample_octpel_chroma_hi_generic DD imagerel $LN56+323
	DD	imagerel $LN56+490
	DD	imagerel $chain$1$kvz_sample_octpel_chroma_hi_generic
$pdata$kvz_strategy_register_ipol_generic DD imagerel $LN4
	DD	imagerel $LN4+407
	DD	imagerel $unwind$kvz_strategy_register_ipol_generic
xdata	SEGMENT
$unwind$kvz_get_extended_block_generic DD 05b801H
	DD	0b64b8H
	DD	070036207H
	DD	03002H
$chain$2$kvz_get_extended_block_generic DD 041a21H
	DD	04f41aH
	DD	0cc405H
	DD	imagerel $LN77
	DD	imagerel $LN77+184
	DD	imagerel $unwind$kvz_get_extended_block_generic
$chain$5$kvz_get_extended_block_generic DD 061821H
	DD	05e418H
	DD	06d40dH
	DD	0a5405H
	DD	imagerel $LN77+184
	DD	imagerel $LN77+362
	DD	imagerel $chain$2$kvz_get_extended_block_generic
$chain$6$kvz_get_extended_block_generic DD 021H
	DD	imagerel $LN77+184
	DD	imagerel $LN77+362
	DD	imagerel $chain$2$kvz_get_extended_block_generic
$chain$7$kvz_get_extended_block_generic DD 021H
	DD	imagerel $LN77
	DD	imagerel $LN77+184
	DD	imagerel $unwind$kvz_get_extended_block_generic
$unwind$kvz_filter_qpel_blocks_diag_luma_generic DD 040c01H
	DD	07008920cH
	DD	030065007H
$chain$4$kvz_filter_qpel_blocks_diag_luma_generic DD 0a2e21H
	DD	08f42eH
	DD	09e425H
	DD	010d41dH
	DD	0fc412H
	DD	0e6405H
	DD	imagerel $LN238
	DD	imagerel $LN238+194
	DD	imagerel $unwind$kvz_filter_qpel_blocks_diag_luma_generic
$chain$5$kvz_filter_qpel_blocks_diag_luma_generic DD 021H
	DD	imagerel $LN238
	DD	imagerel $LN238+194
	DD	imagerel $unwind$kvz_filter_qpel_blocks_diag_luma_generic
$unwind$kvz_filter_qpel_blocks_hor_ver_luma_generic DD 0a1f01H
	DD	014341fH
	DD	0f01bb21fH
	DD	0d017e019H
	DD	07013c015H
	DD	050116012H
$unwind$kvz_filter_hpel_blocks_diag_luma_generic DD 030801H
	DD	0e0042208H
	DD	03002H
$chain$2$kvz_filter_hpel_blocks_diag_luma_generic DD 061421H
	DD	087414H
	DD	07640fH
	DD	065405H
	DD	imagerel $LN179
	DD	imagerel $LN179+13
	DD	imagerel $unwind$kvz_filter_hpel_blocks_diag_luma_generic
$chain$4$kvz_filter_hpel_blocks_diag_luma_generic DD 040f21H
	DD	01d40fH
	DD	02c405H
	DD	imagerel $LN179+13
	DD	imagerel $LN179+33
	DD	imagerel $chain$2$kvz_filter_hpel_blocks_diag_luma_generic
$chain$5$kvz_filter_hpel_blocks_diag_luma_generic DD 020421H
	DD	0f404H
	DD	imagerel $LN179+33
	DD	imagerel $LN179+53
	DD	imagerel $chain$4$kvz_filter_hpel_blocks_diag_luma_generic
$chain$6$kvz_filter_hpel_blocks_diag_luma_generic DD 021H
	DD	imagerel $LN179+33
	DD	imagerel $LN179+53
	DD	imagerel $chain$4$kvz_filter_hpel_blocks_diag_luma_generic
$chain$7$kvz_filter_hpel_blocks_diag_luma_generic DD 020021H
	DD	01d400H
	DD	imagerel $LN179+13
	DD	imagerel $LN179+33
	DD	imagerel $chain$2$kvz_filter_hpel_blocks_diag_luma_generic
$chain$8$kvz_filter_hpel_blocks_diag_luma_generic DD 021H
	DD	imagerel $LN179
	DD	imagerel $LN179+13
	DD	imagerel $unwind$kvz_filter_hpel_blocks_diag_luma_generic
$unwind$kvz_filter_hpel_blocks_hor_ver_luma_generic DD 0a2401H
	DD	0a3424H
	DD	0f0201224H
	DD	0d01ce01eH
	DD	07018c01aH
	DD	050166017H
$unwind$kvz_sample_quarterpel_luma_hi_generic DD 092201H
	DD	04700122H
	DD	0e013f015H
	DD	0700fc011H
	DD	0500d600eH
	DD	0300cH
$chain$0$kvz_sample_quarterpel_luma_hi_generic DD 020821H
	DD	0478d408H
	DD	imagerel $LN64
	DD	imagerel $LN64+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_hi_generic
$chain$1$kvz_sample_quarterpel_luma_hi_generic DD 021H
	DD	imagerel $LN64
	DD	imagerel $LN64+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_hi_generic
$unwind$kvz_sample_quarterpel_luma_generic DD 092201H
	DD	04700122H
	DD	0e013f015H
	DD	0700fc011H
	DD	0500d600eH
	DD	0300cH
$chain$0$kvz_sample_quarterpel_luma_generic DD 020821H
	DD	0478d408H
	DD	imagerel $LN68
	DD	imagerel $LN68+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_generic
$chain$1$kvz_sample_quarterpel_luma_generic DD 021H
	DD	imagerel $LN68
	DD	imagerel $LN68+113
	DD	imagerel $unwind$kvz_sample_quarterpel_luma_generic
$unwind$kvz_four_tap_filter_ver_generic DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$kvz_eight_tap_filter_ver_generic DD 020501H
	DD	013405H
$unwind$kvz_sample_octpel_chroma_generic DD 091c01H
	DD	0118011cH
	DD	0e013f015H
	DD	0700fd011H
	DD	0500d600eH
	DD	0300cH
$chain$0$kvz_sample_octpel_chroma_generic DD 020821H
	DD	0120c408H
	DD	imagerel $LN60
	DD	imagerel $LN60+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_generic
$chain$1$kvz_sample_octpel_chroma_generic DD 021H
	DD	imagerel $LN60
	DD	imagerel $LN60+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_generic
$unwind$kvz_sample_octpel_chroma_hi_generic DD 091c01H
	DD	0118011cH
	DD	0e013f015H
	DD	0700fd011H
	DD	0500d600eH
	DD	0300cH
$chain$0$kvz_sample_octpel_chroma_hi_generic DD 020821H
	DD	0120c408H
	DD	imagerel $LN56
	DD	imagerel $LN56+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_hi_generic
$chain$1$kvz_sample_octpel_chroma_hi_generic DD 021H
	DD	imagerel $LN56
	DD	imagerel $LN56+54
	DD	imagerel $unwind$kvz_sample_octpel_chroma_hi_generic
$unwind$kvz_strategy_register_ipol_generic DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
	ORG $+3
$SG4294948347 DB 'get_extended_block', 00H
	ORG $+5
$SG4294948348 DB 'generic', 00H
$SG4294948349 DB 'sample_octpel_chroma_hi', 00H
$SG4294948350 DB 'generic', 00H
$SG4294948351 DB 'sample_quarterpel_luma_hi', 00H
	ORG $+6
$SG4294948352 DB 'generic', 00H
$SG4294948353 DB 'sample_octpel_chroma', 00H
	ORG $+3
$SG4294948354 DB 'generic', 00H
$SG4294948355 DB 'sample_quarterpel_luma', 00H
	ORG $+1
$SG4294948356 DB 'generic', 00H
$SG4294948357 DB 'filter_qpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948358 DB 'generic', 00H
$SG4294948359 DB 'filter_qpel_blocks_hor_ver_luma', 00H
$SG4294948360 DB 'generic', 00H
$SG4294948361 DB 'filter_hpel_blocks_diag_luma', 00H
	ORG $+3
$SG4294948362 DB 'generic', 00H
$SG4294948363 DB 'filter_hpel_blocks_hor_ver_luma', 00H
$SG4294948364 DB 'generic', 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
opaque$ = 64
bitdepth$dead$ = 72
kvz_strategy_register_ipol_generic PROC

; 813  : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 814  :   bool success = true;
; 815  : 
; 816  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_hpel_blocks_hor_ver_luma_generic);

	lea	rax, OFFSET FLAT:kvz_filter_hpel_blocks_hor_ver_luma_generic
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG4294948364
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948363
	mov	rsi, rcx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 817  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_diag_luma", "generic", 0, &kvz_filter_hpel_blocks_diag_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948362
	lea	rax, OFFSET FLAT:kvz_filter_hpel_blocks_diag_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948361
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	call	kvz_strategyselector_register
	mov	edi, eax

; 818  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_qpel_blocks_hor_ver_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948360
	lea	rax, OFFSET FLAT:kvz_filter_qpel_blocks_hor_ver_luma_generic
	and	edi, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rax
	lea	rdx, OFFSET FLAT:$SG4294948359
	mov	rcx, rsi
	and	edi, 1
	call	kvz_strategyselector_register
	mov	ebx, eax

; 819  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_diag_luma", "generic", 0, &kvz_filter_qpel_blocks_diag_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948358
	lea	rax, OFFSET FLAT:kvz_filter_qpel_blocks_diag_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948357
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 820  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma", "generic", 0, &kvz_sample_quarterpel_luma_generic);

	lea	r8, OFFSET FLAT:$SG4294948356
	lea	rax, OFFSET FLAT:kvz_sample_quarterpel_luma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948355
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 821  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma", "generic", 0, &kvz_sample_octpel_chroma_generic);

	lea	r8, OFFSET FLAT:$SG4294948354
	lea	rax, OFFSET FLAT:kvz_sample_octpel_chroma_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948353
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 822  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma_hi", "generic", 0, &kvz_sample_quarterpel_luma_hi_generic);

	lea	r8, OFFSET FLAT:$SG4294948352
	lea	rax, OFFSET FLAT:kvz_sample_quarterpel_luma_hi_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948351
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	mov	ebx, eax

; 823  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma_hi", "generic", 0, &kvz_sample_octpel_chroma_hi_generic);

	lea	r8, OFFSET FLAT:$SG4294948350
	lea	rax, OFFSET FLAT:kvz_sample_octpel_chroma_hi_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948349
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	ebx, edi
	call	kvz_strategyselector_register
	mov	edi, eax

; 824  :   success &= kvz_strategyselector_register(opaque, "get_extended_block", "generic", 0, &kvz_get_extended_block_generic);

	lea	r8, OFFSET FLAT:$SG4294948348
	lea	rax, OFFSET FLAT:kvz_get_extended_block_generic
	xor	r9d, r9d
	lea	rdx, OFFSET FLAT:$SG4294948347
	mov	QWORD PTR [rsp+32], rax
	mov	rcx, rsi
	and	edi, ebx
	call	kvz_strategyselector_register
	test	eax, edi
	mov	eax, 0

; 825  : 
; 826  :   return success;
; 827  : }

	mov	rbx, QWORD PTR [rsp+64]
	setne	al
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
kvz_strategy_register_ipol_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
hor_filtered$ = 0
encoder$ = 2304
src$ = 2312
src_stride$ = 2320
width$ = 2328
height$ = 2336
dst$ = 2344
dst_stride$ = 2352
hor_flag$ = 2360
ver_flag$ = 2368
tv1603 = 2376
mv$ = 2376
kvz_sample_octpel_chroma_hi_generic PROC

; 728  : {

$LN56:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 2240				; 000008c0H

; 729  :   //TODO: horizontal and vertical only filtering
; 730  :   int32_t x, y;
; 731  : 
; 732  :   // Interpolation filter shifts
; 733  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 734  :   int32_t shift2 = 6;
; 735  : 
; 736  :   // Select filters according to the fractional part of the x and y mv components
; 737  :   int8_t *hor_filter = kvz_g_chroma_filter[mv[0] & 7];

	mov	rcx, QWORD PTR mv$[rsp]
	lea	r13, OFFSET FLAT:kvz_g_chroma_filter

; 738  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];
; 739  : 
; 740  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 741  :   int16_t hor_stride = LCU_WIDTH_C;
; 742  : 
; 743  :   // Filter horizontally
; 744  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	mov	r15d, DWORD PTR height$[rsp]
	xor	r11d, r11d
	mov	QWORD PTR [rsp+2304], r12
	movsxd	rdi, r9d
	movsx	rax, WORD PTR [rcx]
	and	eax, 7
	lea	r10, QWORD PTR [rax*4]
	movsx	rax, WORD PTR [rcx+2]
	and	eax, 7
	add	r10, r13
	lea	r14, QWORD PTR [rax*4]
	lea	eax, DWORD PTR [r15+3]
	mov	QWORD PTR tv1603[rsp], r14
	movsxd	r12, eax
	test	eax, eax
	jle	$LN3@kvz_sample

; 746  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 747  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 748  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	lea	ebx, QWORD PTR [r11-1]
	lea	rsi, QWORD PTR hor_filtered$[rsp]
$LL4@kvz_sample:

; 745  :     for (x = 0; x < width; ++x) {

	mov	ebp, r11d
	test	rdi, rdi
	jle	$LN2@kvz_sample
	mov	r11, QWORD PTR src$[rsp]
	mov	r14, rsi
	movsx	r13d, r8w
	mov	r15, rdi
$LL7@kvz_sample:

; 746  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 747  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 748  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [r10+2]
	lea	r14, QWORD PTR [r14+2]
	mov	eax, r13d
	imul	eax, ebx
	add	eax, ebp
	inc	ebp
	cdqe
	movzx	r9d, BYTE PTR [rax+r11]

; 95   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [r11+rax]

; 746  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 747  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 748  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, BYTE PTR [r10+1]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r14-2], r9w
	sub	r15, 1
	jne	SHORT $LL7@kvz_sample
	movzx	r8d, WORD PTR src_stride$[rsp]
	xor	r11d, r11d
$LN2@kvz_sample:

; 738  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];
; 739  : 
; 740  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 741  :   int16_t hor_stride = LCU_WIDTH_C;
; 742  : 
; 743  :   // Filter horizontally
; 744  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	inc	ebx
	add	rsi, 64					; 00000040H
	sub	r12, 1
	jne	$LL4@kvz_sample
	mov	r14, QWORD PTR tv1603[rsp]
	lea	r13, OFFSET FLAT:kvz_g_chroma_filter
	mov	r15d, DWORD PTR height$[rsp]
$LN3@kvz_sample:
	mov	r12, QWORD PTR [rsp+2304]

; 749  :     }
; 750  :   }
; 751  : 
; 752  :   // Filter vertically
; 753  :   for (y = 0; y < height; ++y) {

	test	r15d, r15d
	jle	$LN9@kvz_sample
	movsx	ebp, WORD PTR dst_stride$[rsp]
	lea	rbx, QWORD PTR hor_filtered$[rsp+192]
	mov	rsi, QWORD PTR dst$[rsp]
	npad	5
$LL10@kvz_sample:

; 754  :     for (x = 0; x < width; ++x) {

	test	rdi, rdi
	jle	SHORT $LN8@kvz_sample
	mov	r9d, ebp
	mov	rax, rbx
	imul	r9d, r11d
	mov	r10, rdi
$LL13@kvz_sample:

; 128  :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [r14+r13]
	movsx	r8d, WORD PTR [rax-192]
	movsx	edx, WORD PTR [rax-128]

; 754  :     for (x = 0; x < width; ++x) {

	lea	rax, QWORD PTR [rax+2]

; 128  :     temp += filter[i] * data[stride * i];

	imul	r8d, ecx
	movsx	ecx, BYTE PTR [r14+r13+1]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [r14+r13+2]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-66]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [r14+r13+3]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-2]
	imul	edx, ecx

; 755  :       dst[y * dst_stride + x] = kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	movsxd	rcx, r9d
	inc	r9d

; 128  :     temp += filter[i] * data[stride * i];

	add	r8d, edx

; 755  :       dst[y * dst_stride + x] = kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	sar	r8d, 6
	mov	WORD PTR [rsi+rcx*2], r8w
	sub	r10, 1
	jne	SHORT $LL13@kvz_sample
$LN8@kvz_sample:

; 749  :     }
; 750  :   }
; 751  : 
; 752  :   // Filter vertically
; 753  :   for (y = 0; y < height; ++y) {

	inc	r11d
	add	rbx, 64					; 00000040H
	cmp	r11d, r15d
	jl	SHORT $LL10@kvz_sample
$LN9@kvz_sample:

; 756  :     }
; 757  :   }
; 758  : }

	add	rsp, 2240				; 000008c0H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_sample_octpel_chroma_hi_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
hor_filtered$ = 0
encoder$ = 2304
src$ = 2312
src_stride$ = 2320
width$ = 2328
height$ = 2336
dst$ = 2344
dst_stride$ = 2352
hor_flag$ = 2360
ver_flag$ = 2368
tv1691 = 2376
mv$ = 2376
kvz_sample_octpel_chroma_generic PROC

; 691  : {

$LN60:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 2240				; 000008c0H

; 692  :   //TODO: horizontal and vertical only filtering
; 693  :   int32_t x, y;
; 694  : 
; 695  :   // Interpolation filter shifts
; 696  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 697  :   int32_t shift2 = 6;
; 698  : 
; 699  :   // Weighted prediction offset and shift
; 700  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 701  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 702  : 
; 703  :   // Select filters according to the fractional part of the x and y mv components
; 704  :   int8_t *hor_filter = kvz_g_chroma_filter[mv[0] & 7];

	mov	rcx, QWORD PTR mv$[rsp]
	lea	r13, OFFSET FLAT:kvz_g_chroma_filter

; 705  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];
; 706  : 
; 707  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 708  :   int16_t hor_stride = LCU_WIDTH_C;
; 709  : 
; 710  :   // Filter horizontally
; 711  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	mov	r15d, DWORD PTR height$[rsp]
	xor	r11d, r11d
	mov	QWORD PTR [rsp+2304], r12
	movsxd	rbp, r9d
	movsx	rax, WORD PTR [rcx]
	and	eax, 7
	lea	r10, QWORD PTR [rax*4]
	movsx	rax, WORD PTR [rcx+2]
	and	eax, 7
	add	r10, r13
	lea	r14, QWORD PTR [rax*4]
	lea	eax, DWORD PTR [r15+3]
	mov	QWORD PTR tv1691[rsp], r14
	movsxd	r12, eax
	test	eax, eax
	jle	$LN3@kvz_sample

; 713  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 714  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 715  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	lea	ebx, QWORD PTR [r11-1]
	lea	rdi, QWORD PTR hor_filtered$[rsp]
$LL4@kvz_sample:

; 712  :     for (x = 0; x < width; ++x) {

	mov	esi, r11d
	test	rbp, rbp
	jle	$LN2@kvz_sample
	mov	r11, QWORD PTR src$[rsp]
	mov	r14, rdi
	movsx	r13d, r8w
	mov	r15, rbp
$LL7@kvz_sample:

; 713  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 714  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 715  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [r10+2]
	lea	r14, QWORD PTR [r14+2]
	mov	eax, r13d
	imul	eax, ebx
	add	eax, esi
	inc	esi
	cdqe

; 95   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [r11+rax]

; 713  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;
; 714  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;
; 715  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movzx	r9d, BYTE PTR [rax+r11]
	movsx	eax, BYTE PTR [r10+1]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movzx	edx, BYTE PTR [r8-1]
	add	r9w, ax
	movsx	eax, BYTE PTR [r10]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r14-2], r9w
	sub	r15, 1
	jne	SHORT $LL7@kvz_sample
	movzx	r8d, WORD PTR src_stride$[rsp]
	xor	r11d, r11d
$LN2@kvz_sample:

; 705  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];
; 706  : 
; 707  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 708  :   int16_t hor_stride = LCU_WIDTH_C;
; 709  : 
; 710  :   // Filter horizontally
; 711  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	inc	ebx
	add	rdi, 64					; 00000040H
	sub	r12, 1
	jne	$LL4@kvz_sample
	mov	r14, QWORD PTR tv1691[rsp]
	lea	r13, OFFSET FLAT:kvz_g_chroma_filter
	mov	r15d, DWORD PTR height$[rsp]
$LN3@kvz_sample:
	mov	r12, QWORD PTR [rsp+2304]

; 716  :     }
; 717  :   }
; 718  : 
; 719  :   // Filter vertically
; 720  :   for (y = 0; y < height; ++y) {

	test	r15d, r15d
	jle	$LN9@kvz_sample
	movsx	esi, WORD PTR dst_stride$[rsp]
	lea	rdi, QWORD PTR hor_filtered$[rsp+192]
	mov	rbx, QWORD PTR dst$[rsp]
	npad	5
$LL10@kvz_sample:

; 721  :     for (x = 0; x < width; ++x) {

	test	rbp, rbp
	jle	SHORT $LN8@kvz_sample
	mov	r9d, esi
	mov	r8, rdi
	imul	r9d, r11d
	mov	r10, rbp
$LL13@kvz_sample:

; 128  :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [r14+r13]
	movsx	eax, WORD PTR [r8-192]
	movsx	edx, WORD PTR [r8-128]
	imul	eax, ecx
	movsx	ecx, BYTE PTR [r14+r13+1]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [r14+r13+2]
	add	eax, edx
	movsx	edx, WORD PTR [r8-64]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [r14+r13+3]
	add	eax, edx
	movsx	edx, WORD PTR [r8]
	imul	edx, ecx
	add	eax, edx

; 722  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	sar	eax, 6
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 69   :   if (value & ~PIXEL_MAX) {

	test	eax, -256				; ffffffffffffff00H
	je	SHORT $LN26@kvz_sample

; 70   :     int32_t temp = (-value) >> 31;

	neg	eax
	sar	eax, 31
$LN26@kvz_sample:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 722  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	movsxd	rcx, r9d
	add	r8, 2
	inc	r9d
	mov	BYTE PTR [rcx+rbx], al
	sub	r10, 1
	jne	SHORT $LL13@kvz_sample
$LN8@kvz_sample:

; 716  :     }
; 717  :   }
; 718  : 
; 719  :   // Filter vertically
; 720  :   for (y = 0; y < height; ++y) {

	inc	r11d
	add	rdi, 64					; 00000040H
	cmp	r11d, r15d
	jl	$LL10@kvz_sample
$LN9@kvz_sample:

; 723  :     }
; 724  :   }
; 725  : }

	add	rsp, 2240				; 000008c0H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_sample_octpel_chroma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
kvz_eight_tap_filter_hor_generic PROC

; 48   :   int32_t temp = 0;
; 49   :   for (int i = 0; i < 8; ++i)
; 50   :   {
; 51   :     temp += filter[i] * data[i];

	movzx	eax, BYTE PTR [rdx+7]
	mov	r9, rcx
	movsx	r11d, BYTE PTR [rcx+7]
	mov	r10, rdx
	movsx	r8d, BYTE PTR [rcx+6]
	imul	r11d, eax
	movzx	eax, BYTE PTR [rdx+6]
	imul	r8d, eax
	movzx	eax, BYTE PTR [rdx+5]
	add	r11d, r8d
	movsx	r8d, BYTE PTR [rcx+5]
	movsx	ecx, BYTE PTR [rcx+4]
	imul	r8d, eax
	movzx	eax, BYTE PTR [rdx+4]
	imul	ecx, eax
	movzx	eax, BYTE PTR [rdx+3]
	movsx	edx, BYTE PTR [r9+2]
	add	r11d, r8d
	add	r11d, ecx
	movsx	ecx, BYTE PTR [r9+3]
	imul	eax, ecx
	movzx	ecx, BYTE PTR [r10+2]
	imul	edx, ecx
	movzx	ecx, BYTE PTR [r10+1]
	add	eax, r11d
	add	eax, edx
	movsx	edx, BYTE PTR [r9+1]
	imul	edx, ecx
	movzx	ecx, BYTE PTR [r10]
	add	eax, edx
	movsx	edx, BYTE PTR [r9]
	imul	edx, ecx
	add	eax, edx

; 52   :   }
; 53   : 
; 54   :   return temp;
; 55   : }

	ret	0
kvz_eight_tap_filter_hor_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
kvz_eight_tap_filter_hor_16bit_generic PROC

; 59   :   int32_t temp = 0;
; 60   :   for (int i = 0; i < 8; ++i)
; 61   :   {
; 62   :     temp += filter[i] * data[i];

	movsx	eax, WORD PTR [rdx+14]
	mov	r9, rcx
	movsx	r11d, BYTE PTR [rcx+7]
	mov	r10, rdx
	movsx	r8d, BYTE PTR [rcx+6]
	imul	r11d, eax
	movsx	eax, WORD PTR [rdx+12]
	imul	r8d, eax
	movsx	eax, WORD PTR [rdx+10]
	add	r11d, r8d
	movsx	r8d, BYTE PTR [rcx+5]
	movsx	ecx, BYTE PTR [rcx+4]
	imul	r8d, eax
	movsx	eax, WORD PTR [rdx+8]
	imul	ecx, eax
	movsx	eax, WORD PTR [rdx+6]
	movsx	edx, BYTE PTR [r9+2]
	add	r11d, r8d
	add	r11d, ecx
	movsx	ecx, BYTE PTR [r9+3]
	imul	eax, ecx
	movsx	ecx, WORD PTR [r10+4]
	imul	edx, ecx
	movsx	ecx, WORD PTR [r10+2]
	add	eax, r11d
	add	eax, edx
	movsx	edx, BYTE PTR [r9+1]
	imul	edx, ecx
	movsx	ecx, WORD PTR [r10]
	add	eax, edx
	movsx	edx, BYTE PTR [r9]
	imul	edx, ecx
	add	eax, edx

; 63   :   }
; 64   : 
; 65   :   return temp;
; 66   : }

	ret	0
kvz_eight_tap_filter_hor_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
stride$ = 24
kvz_eight_tap_filter_ver_generic PROC

; 69   : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	rbx, rdx
	movsx	r9, r8w
	mov	r10, rcx

; 70   :   int32_t temp = 0;
; 71   :   for (int i = 0; i < 8; ++i)
; 72   :   {
; 73   :     temp += filter[i] * data[stride * i];

	imul	eax, r9d, 7
	movsxd	r8, eax
	movsx	eax, BYTE PTR [rcx+7]
	movzx	r11d, BYTE PTR [r8+rdx]
	imul	r11d, eax
	lea	eax, DWORD PTR [r9+r9*2]
	add	eax, eax
	cdqe
	movzx	r8d, BYTE PTR [rax+rdx]
	movsx	eax, BYTE PTR [rcx+6]
	imul	r8d, eax
	lea	eax, DWORD PTR [r9+r9*4]
	movsxd	rcx, eax
	movsx	eax, BYTE PTR [r10+5]
	movzx	edx, BYTE PTR [rcx+rdx]
	add	r11d, r8d
	imul	edx, eax
	lea	eax, DWORD PTR [r9*4]
	movsxd	rcx, eax
	movsx	eax, BYTE PTR [r10+4]
	add	r11d, edx
	movzx	edx, BYTE PTR [rcx+rbx]
	imul	edx, eax
	lea	eax, DWORD PTR [r9+r9*2]
	movsxd	rcx, eax
	movsx	eax, BYTE PTR [r10+3]
	add	r11d, edx
	movzx	edx, BYTE PTR [rcx+rbx]
	imul	edx, eax
	lea	eax, DWORD PTR [r9+r9]
	movsxd	rcx, eax
	movsx	eax, BYTE PTR [r10+2]
	add	r11d, edx
	movzx	edx, BYTE PTR [rcx+rbx]
	movsx	ecx, BYTE PTR [r10+1]
	imul	eax, edx
	movzx	edx, BYTE PTR [r9+rbx]
	imul	edx, ecx
	movzx	ecx, BYTE PTR [rbx]

; 74   :   }
; 75   : 
; 76   :   return temp;
; 77   : }

	mov	rbx, QWORD PTR [rsp+8]
	add	eax, r11d
	add	eax, edx
	movsx	edx, BYTE PTR [r10]
	imul	edx, ecx
	add	eax, edx
	ret	0
kvz_eight_tap_filter_ver_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
stride$dead$ = 24
kvz_eight_tap_filter_ver_16bit_generic PROC

; 81   :   int32_t temp = 0;
; 82   :   for (int i = 0; i < 8; ++i)
; 83   :   {
; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [rcx+7]
	mov	r9, rcx
	movsx	r11d, WORD PTR [rdx+896]
	mov	r10, rdx
	movsx	r8d, WORD PTR [rdx+768]
	imul	r11d, eax
	movsx	eax, BYTE PTR [rcx+6]
	imul	r8d, eax
	movsx	eax, BYTE PTR [rcx+5]
	movsx	ecx, WORD PTR [rdx+512]
	add	r11d, r8d
	movsx	r8d, WORD PTR [rdx+640]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r9+4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+3]
	add	r11d, r8d
	add	r11d, ecx
	movsx	ecx, WORD PTR [rdx+384]
	movsx	edx, WORD PTR [rdx+256]
	imul	eax, ecx
	movsx	ecx, BYTE PTR [r9+2]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [r9+1]
	add	eax, r11d
	add	eax, edx
	movsx	edx, WORD PTR [r10+128]
	imul	edx, ecx
	movsx	ecx, WORD PTR [r10]
	add	eax, edx
	movsx	edx, BYTE PTR [r9]
	imul	edx, ecx
	add	eax, edx

; 85   :   }
; 86   : 
; 87   :   return temp;
; 88   : }

	ret	0
kvz_eight_tap_filter_ver_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
kvz_four_tap_filter_hor_generic PROC

; 92   :   int32_t temp = 0;
; 93   :   for (int i = 0; i < 4; ++i)
; 94   :   {
; 95   :     temp += filter[i] * data[i];

	movzx	r8d, BYTE PTR [rdx+2]
	mov	r10, rdx
	movzx	eax, BYTE PTR [rdx+3]
	movsx	r11d, BYTE PTR [rcx+3]
	movsx	r9d, BYTE PTR [rcx+2]
	imul	r9d, r8d
	movzx	r8d, BYTE PTR [rdx+1]
	movsx	edx, BYTE PTR [rcx]
	imul	eax, r11d
	add	eax, r9d
	movsx	r9d, BYTE PTR [rcx+1]
	movzx	ecx, BYTE PTR [r10]
	imul	r9d, r8d
	imul	edx, ecx
	add	eax, r9d
	add	eax, edx

; 96   :   }
; 97   : 
; 98   :   return temp;
; 99   : }

	ret	0
kvz_four_tap_filter_hor_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
kvz_four_tap_filter_hor_16bit_generic PROC

; 103  :   int32_t temp = 0;
; 104  :   for (int i = 0; i < 4; ++i)
; 105  :   {
; 106  :     temp += filter[i] * data[i];

	movsx	r8d, WORD PTR [rdx+4]
	mov	r10, rdx
	movsx	eax, WORD PTR [rdx+6]
	movsx	r11d, BYTE PTR [rcx+3]
	movsx	r9d, BYTE PTR [rcx+2]
	imul	r9d, r8d
	movsx	r8d, WORD PTR [rdx+2]
	movsx	edx, BYTE PTR [rcx]
	imul	eax, r11d
	add	eax, r9d
	movsx	r9d, BYTE PTR [rcx+1]
	movsx	ecx, WORD PTR [r10]
	imul	r9d, r8d
	imul	edx, ecx
	add	eax, r9d
	add	eax, edx

; 107  :   }
; 108  : 
; 109  :   return temp;
; 110  : }

	ret	0
kvz_four_tap_filter_hor_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
stride$ = 24
kvz_four_tap_filter_ver_generic PROC

; 113  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rdx
	movsx	r10, r8w
	mov	r11, rcx

; 114  :   int32_t temp = 0;
; 115  :   for (int i = 0; i < 4; ++i)
; 116  :   {
; 117  :     temp += filter[i] * data[stride * i];

	lea	eax, DWORD PTR [r10+r10*2]
	movsxd	r8, eax
	movsx	eax, BYTE PTR [rcx+3]
	movzx	ebx, BYTE PTR [r8+rdx]
	imul	ebx, eax
	lea	eax, DWORD PTR [r10+r10]
	movsxd	r8, eax
	movsx	eax, BYTE PTR [rcx+2]
	movsx	ecx, BYTE PTR [rcx+1]
	movzx	r9d, BYTE PTR [r8+rdx]
	movzx	edx, BYTE PTR [r10+rdx]
	imul	edx, ecx
	movzx	ecx, BYTE PTR [rdi]

; 118  :   }
; 119  : 
; 120  :   return temp;
; 121  : }

	mov	rdi, QWORD PTR [rsp+16]
	imul	eax, r9d
	add	eax, ebx
	mov	rbx, QWORD PTR [rsp+8]
	add	eax, edx
	movsx	edx, BYTE PTR [r11]
	imul	edx, ecx
	add	eax, edx
	ret	0
kvz_four_tap_filter_ver_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
filter$ = 8
data$ = 16
stride$dead$ = 24
kvz_four_tap_filter_ver_16bit_generic PROC

; 125  :   int32_t temp = 0;
; 126  :   for (int i = 0; i < 4; ++i)
; 127  :   {
; 128  :     temp += filter[i] * data[stride * i];

	movsx	r11d, WORD PTR [rdx+192]
	mov	r10, rdx
	movsx	r9d, WORD PTR [rdx+128]
	movsx	r8d, BYTE PTR [rcx+2]
	movsx	eax, BYTE PTR [rcx+3]
	imul	r9d, r8d
	movsx	r8d, BYTE PTR [rcx+1]
	imul	eax, r11d
	add	eax, r9d
	movsx	r9d, WORD PTR [rdx+64]
	movsx	edx, BYTE PTR [rcx]
	movsx	ecx, WORD PTR [r10]
	imul	r9d, r8d
	imul	edx, ecx
	add	eax, r9d
	add	eax, edx

; 129  :   }
; 130  : 
; 131  :   return temp;
; 132  : }

	ret	0
kvz_four_tap_filter_ver_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
hor_filtered$ = 0
encoder$ = 9152
src$ = 9160
src_stride$ = 9168
width$ = 9176
height$ = 9184
dst$ = 9192
dst_stride$ = 9200
hor_flag$ = 9208
ver_flag$ = 9216
tv2893 = 9224
mv$ = 9224
kvz_sample_quarterpel_luma_generic PROC

; 144  : {

$LN68:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	mov	eax, 9088				; 00002380H
	call	__chkstk
	sub	rsp, rax

; 145  :   //TODO: horizontal and vertical only filtering
; 146  :   int32_t x, y;
; 147  : 
; 148  :   // Interpolation filter shifts
; 149  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 150  :   int32_t shift2 = 6;
; 151  : 
; 152  :   // Weighted prediction offset and shift
; 153  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 154  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 155  : 
; 156  :   // Select filters according to the fractional part of the x and y mv components
; 157  :   int8_t *hor_filter = kvz_g_luma_filter[mv[0] & 3];

	mov	rcx, QWORD PTR mv$[rsp]
	lea	r12, OFFSET FLAT:kvz_g_luma_filter

; 158  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];
; 159  : 
; 160  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 161  :   int16_t hor_stride = LCU_WIDTH;
; 162  : 
; 163  :   // Filter horizontally
; 164  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	mov	r15d, DWORD PTR height$[rsp]
	xor	r11d, r11d
	movsxd	rbp, r9d
	movsx	rax, WORD PTR [rcx]
	and	eax, 3
	lea	r10, QWORD PTR [r12+rax*8]
	movsx	rax, WORD PTR [rcx+2]
	and	eax, 3
	lea	rbx, QWORD PTR [rax*8]
	lea	eax, DWORD PTR [r15+7]
	mov	QWORD PTR tv2893[rsp], rbx
	movsxd	r14, eax
	test	eax, eax
	jle	$LN3@kvz_sample

; 166  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 167  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 168  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	mov	QWORD PTR [rsp+9152], r13
	lea	esi, QWORD PTR [r11-3]
	lea	rdi, QWORD PTR hor_filtered$[rsp]
$LL4@kvz_sample:

; 165  :     for (x = 0; x < width; ++x) {

	mov	r15d, r11d
	test	rbp, rbp
	jle	$LN2@kvz_sample
	mov	r11, QWORD PTR src$[rsp]
	mov	r12, rdi
	movsx	ebx, r8w
	mov	r13, rbp
	npad	1
$LL7@kvz_sample:

; 166  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 167  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 168  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [r10+2]
	lea	r12, QWORD PTR [r12+2]
	mov	eax, ebx
	imul	eax, esi
	add	eax, r15d
	inc	r15d
	cdqe
	movzx	r9d, BYTE PTR [rax+r11]

; 51   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [r11+rax]

; 166  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 167  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 168  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, BYTE PTR [r10+3]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+6]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+7]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+4]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+1]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-3]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r12-2], r9w
	sub	r13, 1
	jne	$LL7@kvz_sample
	movzx	r8d, WORD PTR src_stride$[rsp]
	xor	r11d, r11d
$LN2@kvz_sample:

; 158  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];
; 159  : 
; 160  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 161  :   int16_t hor_stride = LCU_WIDTH;
; 162  : 
; 163  :   // Filter horizontally
; 164  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	inc	esi
	sub	rdi, -128				; ffffffffffffff80H
	sub	r14, 1
	jne	$LL4@kvz_sample
	mov	rbx, QWORD PTR tv2893[rsp]
	lea	r12, OFFSET FLAT:kvz_g_luma_filter
	mov	r15d, DWORD PTR height$[rsp]
	mov	r13, QWORD PTR [rsp+9152]
$LN3@kvz_sample:

; 169  :     }
; 170  :   }
; 171  : 
; 172  :   // Filter vertically
; 173  :   for (y = 0; y < height; ++y) {

	test	r15d, r15d
	jle	$LN9@kvz_sample
	movsx	r14d, WORD PTR dst_stride$[rsp]
	lea	rsi, QWORD PTR hor_filtered$[rsp+896]
	mov	rdi, QWORD PTR dst$[rsp]
$LL10@kvz_sample:

; 174  :     for (x = 0; x < width; ++x) {

	test	rbp, rbp
	jle	$LN8@kvz_sample
	mov	r9d, r14d
	mov	r8, rsi
	imul	r9d, r11d
	mov	r10, rbp
	npad	3
$LL13@kvz_sample:

; 84   :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [rbx+r12]
	movsx	eax, WORD PTR [r8-896]
	movsx	edx, WORD PTR [r8-768]
	imul	eax, ecx
	movsx	ecx, BYTE PTR [rbx+r12+1]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+2]
	add	eax, edx
	movsx	edx, WORD PTR [r8-640]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+4]
	add	eax, edx
	movsx	edx, WORD PTR [r8-384]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+6]
	add	eax, edx
	movsx	edx, WORD PTR [r8-128]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+3]
	add	eax, edx
	movsx	edx, WORD PTR [r8-512]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+5]
	add	eax, edx
	movsx	edx, WORD PTR [r8-256]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+7]
	add	eax, edx
	movsx	edx, WORD PTR [r8]
	imul	edx, ecx
	add	eax, edx

; 175  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	sar	eax, 6
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 69   :   if (value & ~PIXEL_MAX) {

	test	eax, -256				; ffffffffffffff00H
	je	SHORT $LN26@kvz_sample

; 70   :     int32_t temp = (-value) >> 31;

	neg	eax
	sar	eax, 31
$LN26@kvz_sample:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 175  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	movsxd	rcx, r9d
	add	r8, 2
	inc	r9d
	mov	BYTE PTR [rcx+rdi], al
	sub	r10, 1
	jne	$LL13@kvz_sample
$LN8@kvz_sample:

; 169  :     }
; 170  :   }
; 171  : 
; 172  :   // Filter vertically
; 173  :   for (y = 0; y < height; ++y) {

	inc	r11d
	sub	rsi, -128				; ffffffffffffff80H
	cmp	r11d, r15d
	jl	$LL10@kvz_sample
$LN9@kvz_sample:

; 176  :     }
; 177  :   }
; 178  : }

	add	rsp, 9088				; 00002380H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_sample_quarterpel_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
hor_filtered$ = 0
encoder$ = 9152
src$ = 9160
src_stride$ = 9168
width$ = 9176
height$ = 9184
dst$ = 9192
dst_stride$ = 9200
hor_flag$ = 9208
ver_flag$ = 9216
tv2808 = 9224
mv$ = 9224
kvz_sample_quarterpel_luma_hi_generic PROC

; 181  : {

$LN64:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	mov	eax, 9088				; 00002380H
	call	__chkstk
	sub	rsp, rax

; 182  :   //TODO: horizontal and vertical only filtering
; 183  :   int32_t x, y;
; 184  : 
; 185  :   // Interpolation filter shifts
; 186  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 187  :   int32_t shift2 = 6;
; 188  : 
; 189  :   // Select filters according to the fractional part of the x and y mv components
; 190  :   int8_t *hor_filter = kvz_g_luma_filter[mv[0] & 3];

	mov	rcx, QWORD PTR mv$[rsp]
	lea	r12, OFFSET FLAT:kvz_g_luma_filter

; 191  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];
; 192  : 
; 193  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 194  :   int16_t hor_stride = LCU_WIDTH;
; 195  : 
; 196  :   // Filter horizontally
; 197  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	mov	r15d, DWORD PTR height$[rsp]
	xor	r11d, r11d
	movsxd	rsi, r9d
	movsx	rax, WORD PTR [rcx]
	and	eax, 3
	lea	r10, QWORD PTR [r12+rax*8]
	movsx	rax, WORD PTR [rcx+2]
	and	eax, 3
	lea	rbx, QWORD PTR [rax*8]
	lea	eax, DWORD PTR [r15+7]
	mov	QWORD PTR tv2808[rsp], rbx
	movsxd	r14, eax
	test	eax, eax
	jle	$LN3@kvz_sample

; 199  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 200  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 201  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	mov	QWORD PTR [rsp+9152], r13
	lea	ebp, QWORD PTR [r11-3]
	lea	rdi, QWORD PTR hor_filtered$[rsp]
$LL4@kvz_sample:

; 198  :     for (x = 0; x < width; ++x) {

	mov	r15d, r11d
	test	rsi, rsi
	jle	$LN2@kvz_sample
	mov	r11, QWORD PTR src$[rsp]
	mov	r12, rdi
	movsx	ebx, r8w
	mov	r13, rsi
	npad	1
$LL7@kvz_sample:

; 199  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 200  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 201  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [r10+1]
	lea	r12, QWORD PTR [r12+2]
	mov	eax, ebp
	imul	eax, ebx
	add	eax, r15d
	inc	r15d
	cdqe

; 51   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [rax+r11]

; 199  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 200  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 201  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movzx	r9d, BYTE PTR [rax+r11]
	movsx	eax, BYTE PTR [r10+3]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+2]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+6]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [r10+7]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+4]
	imul	eax, edx
	movzx	edx, BYTE PTR [r8-3]
	add	r9w, ax
	movsx	eax, BYTE PTR [r10]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r12-2], r9w
	sub	r13, 1
	jne	$LL7@kvz_sample
	movzx	r8d, WORD PTR src_stride$[rsp]
	xor	r11d, r11d
$LN2@kvz_sample:

; 191  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];
; 192  : 
; 193  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 194  :   int16_t hor_stride = LCU_WIDTH;
; 195  : 
; 196  :   // Filter horizontally
; 197  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	inc	ebp
	sub	rdi, -128				; ffffffffffffff80H
	sub	r14, 1
	jne	$LL4@kvz_sample
	mov	rbx, QWORD PTR tv2808[rsp]
	lea	r12, OFFSET FLAT:kvz_g_luma_filter
	mov	r15d, DWORD PTR height$[rsp]
	mov	r13, QWORD PTR [rsp+9152]
$LN3@kvz_sample:

; 202  :     }
; 203  :   }
; 204  : 
; 205  :   // Filter vertically
; 206  :   for (y = 0; y < height; ++y) {

	test	r15d, r15d
	jle	$LN9@kvz_sample
	movsx	ebp, WORD PTR dst_stride$[rsp]
	lea	rdi, QWORD PTR hor_filtered$[rsp+896]
	mov	r14, QWORD PTR dst$[rsp]
$LL10@kvz_sample:

; 207  :     for (x = 0; x < width; ++x) {

	test	rsi, rsi
	jle	$LN8@kvz_sample
	mov	r9d, ebp
	mov	rax, rdi
	imul	r9d, r11d
	mov	r10, rsi
	npad	4
$LL13@kvz_sample:

; 84   :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [rbx+r12+3]
	movsx	r8d, WORD PTR [rax-512]
	movsx	edx, WORD PTR [rax-256]

; 207  :     for (x = 0; x < width; ++x) {

	lea	rax, QWORD PTR [rax+2]

; 84   :     temp += filter[i] * data[stride * i];

	imul	r8d, ecx
	movsx	ecx, BYTE PTR [rbx+r12+5]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-898]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+1]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-770]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+2]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-642]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+4]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-386]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+6]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-130]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rbx+r12+7]
	add	r8d, edx
	movsx	edx, WORD PTR [rax-2]
	imul	edx, ecx

; 208  :       dst[y * dst_stride + x] = kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	movsxd	rcx, r9d
	inc	r9d

; 84   :     temp += filter[i] * data[stride * i];

	add	r8d, edx

; 208  :       dst[y * dst_stride + x] = kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	sar	r8d, 6
	mov	WORD PTR [r14+rcx*2], r8w
	sub	r10, 1
	jne	$LL13@kvz_sample
$LN8@kvz_sample:

; 202  :     }
; 203  :   }
; 204  : 
; 205  :   // Filter vertically
; 206  :   for (y = 0; y < height; ++y) {

	inc	r11d
	sub	rdi, -128				; ffffffffffffff80H
	cmp	r11d, r15d
	jl	$LL10@kvz_sample
$LN9@kvz_sample:

; 209  :     }
; 210  :   }
; 211  : }

	add	rsp, 9088				; 00002380H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
kvz_sample_quarterpel_luma_hi_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
tv10968 = 0
tv10967 = 8
encoder$ = 80
src$ = 88
src_stride$ = 96
width$ = 104
height$ = 112
filtered$ = 120
hor_intermediate$ = 128
tv10966 = 136
fme_level$ = 136
tv10965 = 144
col_pos2$1$ = 144
hor_first_cols$ = 144
hpel_off_x$ = 152
hpel_off_y$ = 160
kvz_filter_hpel_blocks_hor_ver_luma_generic PROC

; 223  : {

$LN223:
	mov	QWORD PTR [rsp+8], rbx
	mov	DWORD PTR [rsp+32], r9d
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 16

; 224  :   int x, y, first_y;
; 225  : 
; 226  :   // Interpolation filter shifts
; 227  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 228  : 
; 229  :   // Weighted prediction offset and shift
; 230  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 231  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 232  : 
; 233  :   int8_t *fir0 = kvz_g_luma_filter[0];
; 234  :   int8_t *fir2 = kvz_g_luma_filter[2];
; 235  : 
; 236  :   int16_t dst_stride = LCU_WIDTH;
; 237  :   int16_t hor_stride = LCU_WIDTH;
; 238  :   int32_t first_row_offset = (KVZ_LUMA_FILTER_OFFSET + 1) * hor_stride;
; 239  : 
; 240  :   int16_t *col_pos0 = hor_first_cols[0];
; 241  :   int16_t *col_pos2 = hor_first_cols[2];

	mov	rbx, QWORD PTR hor_first_cols$[rsp]

; 242  : 
; 243  :   // Horizontally filtered samples from the top row are
; 244  :   // not needed unless samples for diagonal positions are filtered later.
; 245  :   first_y = fme_level > 1 ? 0 : 1; 

	xor	ebp, ebp
	cmp	BYTE PTR fme_level$[rsp], 1
	mov	r13d, ebp

; 246  :                                              
; 247  :   // HORIZONTAL STEP
; 248  :   // Integer pixels
; 249  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	r14d, DWORD PTR height$[rsp]
	movzx	edi, r8w
	mov	r12, QWORD PTR hor_intermediate$[rsp]
	setle	r13b
	add	r14d, 8
	lea	rax, QWORD PTR [rbx+288]
	mov	QWORD PTR col_pos2$1$[rsp], rax
	mov	r11, rdx
	mov	esi, ebp
	test	r14d, r14d
	jle	SHORT $LN3@kvz_filter

; 224  :   int x, y, first_y;
; 225  : 
; 226  :   // Interpolation filter shifts
; 227  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 228  : 
; 229  :   // Weighted prediction offset and shift
; 230  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 231  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 232  : 
; 233  :   int8_t *fir0 = kvz_g_luma_filter[0];
; 234  :   int8_t *fir2 = kvz_g_luma_filter[2];
; 235  : 
; 236  :   int16_t dst_stride = LCU_WIDTH;
; 237  :   int16_t hor_stride = LCU_WIDTH;
; 238  :   int32_t first_row_offset = (KVZ_LUMA_FILTER_OFFSET + 1) * hor_stride;
; 239  : 
; 240  :   int16_t *col_pos0 = hor_first_cols[0];
; 241  :   int16_t *col_pos2 = hor_first_cols[2];

	mov	r10, r12
	movsx	r12d, WORD PTR src_stride$[rsp]
$LL4@kvz_filter:

; 250  :     for (x = 0; x < width; ++x) {

	mov	edx, ebp
	test	r9d, r9d
	jle	SHORT $LN2@kvz_filter
	mov	r8d, r12d
	mov	rdi, r10
$LL7@kvz_filter:
	lea	eax, DWORD PTR [rsi-3]
	imul	eax, r8d
	lea	rdi, QWORD PTR [rdi+2]
	add	eax, edx
	inc	edx
	cdqe

; 251  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 252  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 253  :       hor_intermediate[0][y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(fir0, &src[src_stride*ypos + xpos]) >> shift1;

	movzx	ecx, BYTE PTR [rax+r11+1]
	shl	cx, 6
	mov	WORD PTR [rdi-2], cx
	cmp	edx, r9d
	jl	SHORT $LL7@kvz_filter
$LN2@kvz_filter:

; 246  :                                              
; 247  :   // HORIZONTAL STEP
; 248  :   // Integer pixels
; 249  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	inc	esi
	sub	r10, -128				; ffffffffffffff80H
	cmp	esi, r14d
	jl	SHORT $LL4@kvz_filter
	mov	r12, QWORD PTR hor_intermediate$[rsp]
	movzx	edi, WORD PTR src_stride$[rsp]
$LN3@kvz_filter:

; 254  :     }
; 255  :   }
; 256  : 
; 257  :   // Write the first column in contiguous memory
; 258  :   x = 0;
; 259  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	movsxd	r15, r14d
	test	r14d, r14d
	jle	SHORT $LN9@kvz_filter

; 260  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 261  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 262  :     col_pos0[y] = kvz_eight_tap_filter_hor_generic(fir0, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	esi, di
	mov	rdx, rbp
	imul	edi, esi, -3
	npad	2
$LL10@kvz_filter:

; 254  :     }
; 255  :   }
; 256  : 
; 257  :   // Write the first column in contiguous memory
; 258  :   x = 0;
; 259  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	movsxd	rax, edi
	add	edi, esi

; 260  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 261  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 262  :     col_pos0[y] = kvz_eight_tap_filter_hor_generic(fir0, &src[src_stride*ypos + xpos]) >> shift1;

	movzx	ecx, BYTE PTR [rax+r11]
	shl	cx, 6
	mov	WORD PTR [rbx+rdx*2], cx
	inc	rdx
	cmp	rdx, r15
	jl	SHORT $LL10@kvz_filter
$LN9@kvz_filter:

; 263  :   }
; 264  : 
; 265  :   // Half pixels
; 266  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	r8d, r13d
	cmp	r13d, r14d
	jge	$LN12@kvz_filter
	mov	ebx, r13d
	shl	ebx, 6
	add	rbx, 4608				; 00001200H
	lea	rbx, QWORD PTR [r12+rbx*2]
	movsx	r12d, WORD PTR src_stride$[rsp]
	npad	3
$LL13@kvz_filter:

; 267  :     for (x = 0; x < width; ++x) {

	mov	esi, ebp
	test	r9d, r9d
	jle	SHORT $LN11@kvz_filter
	mov	ebp, r12d
	mov	r10, rbx
	npad	3
$LL16@kvz_filter:
	lea	eax, DWORD PTR [r8-3]
	imul	eax, ebp
	lea	r10, QWORD PTR [r10+2]
	add	eax, esi
	inc	esi
	movsxd	rcx, eax

; 268  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 269  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 270  :       hor_intermediate[1][y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movzx	eax, BYTE PTR [r11+rcx+1]

; 51   :     temp += filter[i] * data[i];

	lea	rdx, QWORD PTR [r11+rcx]

; 268  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 269  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 270  :       hor_intermediate[1][y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movzx	edi, BYTE PTR [rdx+2]
	add	di, ax
	movzx	ecx, BYTE PTR [rcx+r11]
	movzx	eax, di
	shl	ax, 2
	add	di, ax
	movzx	eax, BYTE PTR [rdx+4]
	add	di, di
	add	di, ax
	movzx	eax, BYTE PTR [rdx-1]
	add	di, ax
	movzx	eax, BYTE PTR [rdx+3]
	add	ax, cx
	shl	di, 2
	cwde
	imul	ecx, eax, 11
	movzx	eax, BYTE PTR [rdx+5]
	sub	di, cx
	sub	di, ax
	movzx	eax, BYTE PTR [rdx-2]
	sub	di, ax
	mov	WORD PTR [r10-2], di
	cmp	esi, r9d
	jl	SHORT $LL16@kvz_filter
	xor	ebp, ebp
$LN11@kvz_filter:

; 263  :   }
; 264  : 
; 265  :   // Half pixels
; 266  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	inc	r8d
	sub	rbx, -128				; ffffffffffffff80H
	cmp	r8d, r14d
	jl	$LL13@kvz_filter
	mov	r12, QWORD PTR hor_intermediate$[rsp]
$LN12@kvz_filter:

; 271  :     }
; 272  :   }
; 273  : 
; 274  :   // Write the first column in contiguous memory
; 275  :   x = 0;
; 276  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	rbx, QWORD PTR col_pos2$1$[rsp]
	mov	esi, r13d
	cmp	rsi, r15
	jge	SHORT $LN221@kvz_filter

; 277  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 278  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 279  :     col_pos2[y] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	r14d, WORD PTR src_stride$[rsp]
	lea	r8d, DWORD PTR [r13-3]
	imul	r8d, r14d
	npad	11
$LL19@kvz_filter:

; 271  :     }
; 272  :   }
; 273  : 
; 274  :   // Write the first column in contiguous memory
; 275  :   x = 0;
; 276  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	movsxd	rdx, r8d
	add	r8d, r14d
	add	rdx, r11

; 277  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 278  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 279  :     col_pos2[y] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, BYTE PTR [rdx+2]
	movzx	edi, BYTE PTR [rdx+1]
	add	di, ax
	movzx	eax, di
	shl	ax, 2
	add	di, ax
	movzx	eax, BYTE PTR [rdx+3]
	add	di, di
	add	di, ax
	movzx	eax, BYTE PTR [rdx-2]
	add	di, ax
	movzx	eax, BYTE PTR [rdx-1]
	add	ax, cx
	shl	di, 2
	cwde
	imul	ecx, eax, 11
	movzx	eax, BYTE PTR [rdx+4]
	sub	di, cx
	sub	di, ax
	movzx	eax, BYTE PTR [rdx-3]
	sub	di, ax
	mov	WORD PTR [rbx+rsi*2], di
	inc	rsi
	cmp	rsi, r15
	jl	SHORT $LL19@kvz_filter

; 271  :     }
; 272  :   }
; 273  : 
; 274  :   // Write the first column in contiguous memory
; 275  :   x = 0;
; 276  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	jmp	SHORT $LN18@kvz_filter
$LN221@kvz_filter:
	movzx	r14d, WORD PTR src_stride$[rsp]
$LN18@kvz_filter:

; 280  :   }
; 281  : 
; 282  :   // VERTICAL STEP
; 283  : 
; 284  :   // Right
; 285  :   // Only horizontal filter
; 286  :   for (y = 0; y < height; ++y) {

	mov	eax, DWORD PTR height$[rsp]
	mov	r13d, -256				; ffffffffffffff00H
	test	eax, eax
	jle	$LN33@kvz_filter
	mov	r15, QWORD PTR filtered$[rsp]
	lea	r8, QWORD PTR [r12+9728]
	mov	r14d, eax
	mov	QWORD PTR tv10965[rsp], rax
	mov	r10d, eax
	lea	rsi, QWORD PTR [r15+4096]
	npad	6
$LL22@kvz_filter:

; 287  :     for (x = 0; x < width; ++x) {

	test	r9d, r9d
	jle	SHORT $LN20@kvz_filter
	mov	rcx, rsi
	mov	edi, r9d
	mov	rdx, r8
	npad	2
$LL25@kvz_filter:

; 288  :       filtered[1][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((hor_intermediate[1][first_row_offset + y * hor_stride + x] + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR [rdx]
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r13w
	je	SHORT $LN69@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN69@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 288  :       filtered[1][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((hor_intermediate[1][first_row_offset + y * hor_stride + x] + wp_offset1) >> wp_shift1);

	mov	BYTE PTR [rcx], al
	add	rdx, 2
	inc	rcx
	sub	rdi, 1
	jne	SHORT $LL25@kvz_filter
$LN20@kvz_filter:

; 280  :   }
; 281  : 
; 282  :   // VERTICAL STEP
; 283  : 
; 284  :   // Right
; 285  :   // Only horizontal filter
; 286  :   for (y = 0; y < height; ++y) {

	sub	r8, -128				; ffffffffffffff80H
	add	rsi, 64					; 00000040H
	sub	r10, 1
	jne	SHORT $LL22@kvz_filter
	lea	r8, QWORD PTR [rbx+8]
	mov	r10, r14
	lea	rdx, QWORD PTR [r15+1]
	npad	3
$LL28@kvz_filter:

; 296  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR [r8]
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r13w
	je	SHORT $LN73@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN73@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 296  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	mov	BYTE PTR [rdx-1], al

; 297  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	cmp	r9d, 1
	jle	SHORT $LN26@kvz_filter

; 296  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	lea	ecx, DWORD PTR [r9-1]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rdx+4095]
	rep movsb
$LN26@kvz_filter:

; 289  :     }
; 290  :   }
; 291  : 
; 292  :   // Left
; 293  :   // Copy from the right filtered block and the extra column
; 294  :   for (y = 0; y < height; ++y) {

	add	rdx, 64					; 00000040H
	add	r8, 2
	sub	r10, 1
	jne	SHORT $LL28@kvz_filter

; 298  :   }
; 299  : 
; 300  :   // Top
; 301  :   // Only vertical filter
; 302  :   for (y = 0; y < height; ++y) {

	mov	ebx, -3
	mov	DWORD PTR tv10966[rsp], ebx
	npad	7
$LL34@kvz_filter:

; 304  :     for (x = 0; x < width; ++x) {

	test	r9d, r9d
	jle	$LN32@kvz_filter

; 303  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	movsx	rsi, WORD PTR src_stride$[rsp]
	lea	rdi, QWORD PTR [r11+1]
	mov	eax, esi
	mov	r8, rbp
	imul	eax, ebx
	mov	ebx, -256				; ffffffffffffff00H
	movsxd	rdx, eax
	lea	eax, DWORD PTR [rsi+rsi*2]
	add	eax, eax
	sub	r8, rdx
	movsxd	r10, eax
	sub	r8, r10
	sub	r8, r11
	lea	rax, QWORD PTR [rdx+r10]
	add	rdi, rax
	imul	eax, esi, 7
	movsxd	r14, eax
	lea	eax, DWORD PTR [rsi+rsi*4]
	movsxd	r15, eax
	sub	r14, r10
	lea	eax, DWORD PTR [rsi*4]
	sub	r15, r10
	movsxd	r12, eax
	lea	eax, DWORD PTR [rsi+rsi*2]
	movsxd	r13, eax
	sub	r12, r10
	lea	eax, DWORD PTR [rsi+rsi]
	sub	r13, r10
	cdqe
	sub	rax, r10
	mov	QWORD PTR tv10968[rsp], rax
	mov	rax, rsi
	mov	r11, QWORD PTR tv10968[rsp]
	sub	rax, r10
	add	r8, QWORD PTR filtered$[rsp]
	mov	esi, r9d
	mov	r9, rax
	npad	12
$LL37@kvz_filter:

; 305  :       int xpos = x;
; 306  :       int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*ypos + xpos + 1], src_stride) >> shift1;

	movzx	eax, BYTE PTR [rdi+r12]
	movzx	ecx, BYTE PTR [rdi+r15]
	movzx	edx, BYTE PTR [rdi+r13]
	add	dx, ax
	movzx	eax, dx
	shl	ax, 2
	add	dx, ax
	movzx	eax, BYTE PTR [rdi+r9]
	add	dx, dx
	add	dx, ax
	movzx	eax, BYTE PTR [rdi]
	add	dx, ax
	movzx	eax, BYTE PTR [rdi+r11]
	add	ax, cx
	shl	dx, 2
	cwde
	imul	ecx, eax, 11
	movzx	eax, BYTE PTR [rdi+r14]
	sub	dx, cx
	sub	dx, ax

; 73   :     temp += filter[i] * data[stride * i];

	mov	rax, rdi
	sub	rax, r10

; 305  :       int xpos = x;
; 306  :       int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*ypos + xpos + 1], src_stride) >> shift1;

	movzx	ecx, BYTE PTR [rax]
	sub	dx, cx

; 307  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, dx
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, bx
	je	SHORT $LN82@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN82@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 308  :       filtered[2][y * dst_stride + x] = sample;

	mov	BYTE PTR [rdi+r8+8191], al
	inc	rdi
	sub	rsi, 1
	jne	SHORT $LL37@kvz_filter
	mov	r9d, DWORD PTR width$[rsp]
	mov	r11, QWORD PTR src$[rsp]
	mov	ebx, DWORD PTR tv10966[rsp]
	mov	r14, QWORD PTR tv10965[rsp]
$LN32@kvz_filter:

; 298  :   }
; 299  : 
; 300  :   // Top
; 301  :   // Only vertical filter
; 302  :   for (y = 0; y < height; ++y) {

	inc	ebx
	add	rbp, 64					; 00000040H
	sub	r14, 1
	mov	DWORD PTR tv10966[rsp], ebx
	mov	QWORD PTR tv10965[rsp], r14
	jne	$LL34@kvz_filter
	movzx	r14d, WORD PTR src_stride$[rsp]
	mov	eax, DWORD PTR height$[rsp]
$LN33@kvz_filter:

; 309  :     }
; 310  :   }
; 311  : 
; 312  :   // Bottom
; 313  :   // Copy what can be copied from the top filtered values.
; 314  :   // Then filter the last row from horizontal intermediate buffer.
; 315  :   for (y = 0; y < height - 1; ++y) {

	dec	eax
	test	eax, eax
	jle	SHORT $LN220@kvz_filter
	mov	r11, QWORD PTR filtered$[rsp]
	mov	edi, 64					; 00000040H
	mov	esi, eax
	mov	r10d, eax
$LL40@kvz_filter:

; 316  :     for (x = 0; x < width; ++x) filtered[3][y * dst_stride + x] = filtered[2][(y + 1) * dst_stride + x];

	test	r9d, r9d
	jle	SHORT $LN38@kvz_filter
	lea	rcx, QWORD PTR [r11+12224]
	mov	edx, r9d
	add	rcx, rdi
$LL43@kvz_filter:
	movzx	eax, BYTE PTR [rcx-4032]
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	sub	rdx, 1
	jne	SHORT $LL43@kvz_filter
$LN38@kvz_filter:

; 309  :     }
; 310  :   }
; 311  : 
; 312  :   // Bottom
; 313  :   // Copy what can be copied from the top filtered values.
; 314  :   // Then filter the last row from horizontal intermediate buffer.
; 315  :   for (y = 0; y < height - 1; ++y) {

	add	rdi, 64					; 00000040H
	sub	rsi, 1
	jne	SHORT $LL40@kvz_filter
	mov	r11, QWORD PTR src$[rsp]
	jmp	SHORT $LN39@kvz_filter
$LN220@kvz_filter:
	xor	r10d, r10d
$LN39@kvz_filter:

; 320  :   for (x = 0; x < width; ++x) {

	test	r9d, r9d
	jle	$LN45@kvz_filter

; 317  :   }
; 318  : 
; 319  :   int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	movsx	ecx, r14w
	lea	eax, DWORD PTR [r10-2]
	imul	eax, ecx
	lea	rdi, QWORD PTR [r11+1]
	shl	r10d, 6
	movsxd	r10, r10d
	movsx	rbx, r14w
	mov	esi, r9d
	movsxd	rdx, eax
	imul	eax, ecx, 7
	movsxd	r8, eax
	sub	r10, r8
	sub	rbx, r8
	sub	r10, rdx
	sub	r10, r11
	lea	rax, QWORD PTR [r8+rdx]
	add	rdi, rax
	lea	eax, DWORD PTR [rcx+rcx*2]
	add	eax, eax
	movsxd	rbp, eax
	lea	eax, DWORD PTR [rcx+rcx*4]
	movsxd	r14, eax
	sub	rbp, r8
	lea	eax, DWORD PTR [rcx*4]
	sub	r14, r8
	movsxd	r15, eax
	lea	eax, DWORD PTR [rcx+rcx*2]
	movsxd	r12, eax
	sub	r15, r8
	lea	eax, DWORD PTR [rcx+rcx]
	sub	r12, r8
	movsxd	r13, eax
	sub	r13, r8
	add	r10, QWORD PTR filtered$[rsp]
	npad	13
$LL46@kvz_filter:

; 321  :     int xpos = x;
; 322  :     int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*(ypos + 1) + xpos + 1], src_stride) >> shift1;

	movzx	eax, BYTE PTR [rdi+r15]
	movzx	ecx, BYTE PTR [rdi+r13]
	movzx	edx, BYTE PTR [rdi+r12]
	add	dx, ax
	movzx	eax, dx
	shl	ax, 2
	add	dx, ax
	movzx	eax, BYTE PTR [rdi+rbp]
	add	dx, dx
	add	dx, ax
	movzx	eax, BYTE PTR [rdi+rbx]
	add	dx, ax
	movzx	eax, BYTE PTR [rdi+r14]
	add	ax, cx
	shl	dx, 2
	cwde
	imul	ecx, eax, 11

; 73   :     temp += filter[i] * data[stride * i];

	mov	rax, rdi
	sub	rax, r8

; 321  :     int xpos = x;
; 322  :     int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*(ypos + 1) + xpos + 1], src_stride) >> shift1;

	sub	dx, cx
	movzx	ecx, BYTE PTR [rax]
	movzx	eax, BYTE PTR [rdi]
	sub	dx, cx
	sub	dx, ax
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	ecx, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 323  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, dx
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, cx
	je	SHORT $LN91@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN91@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 324  :     filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [rdi+r10+12287], al
	inc	rdi
	sub	rsi, 1
	jne	SHORT $LL46@kvz_filter
$LN45@kvz_filter:

; 325  :   }
; 326  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 16
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_filter_hpel_blocks_hor_ver_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
encoder$ = 48
src$ = 56
src_stride$ = 64
width$ = 72
height$ = 80
filtered$ = 88
hor_intermediate$ = 96
fme_level$ = 104
hor_first_cols$ = 112
hpel_off_x$ = 120
hpel_off_y$ = 128
kvz_filter_hpel_blocks_diag_luma_generic PROC

; 338  : {

$LN179:
	push	rbx
	push	r14
	sub	rsp, 24

; 355  : 
; 356  :   // VERTICAL STEP
; 357  : 
; 358  :   // Top-right
; 359  :   for (y = 0; y < height; ++y) {

	mov	r14, QWORD PTR filtered$[rsp]
	mov	QWORD PTR [rsp+48], rbp
	mov	ebp, -256				; ffffffffffffff00H
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], rdi
	mov	QWORD PTR [rsp+16], r12
	mov	r12, QWORD PTR hor_intermediate$[rsp]
	mov	QWORD PTR [rsp+8], r13
	mov	r13, QWORD PTR hor_first_cols$[rsp]
	mov	QWORD PTR [rsp], r15
	add	r13, 288				; 00000120H
	mov	r15d, DWORD PTR height$[rsp]
	test	r15d, r15d
	jle	$LN15@kvz_filter

; 339  :   int x, y;
; 340  : 
; 341  :   // Interpolation filter shifts
; 342  :   int32_t shift2 = 6;
; 343  : 
; 344  :   // Weighted prediction offset and shift
; 345  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 346  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 347  : 
; 348  :   int8_t *fir2 = kvz_g_luma_filter[2];
; 349  : 
; 350  :   int16_t dst_stride = LCU_WIDTH;
; 351  :   int16_t hor_stride = LCU_WIDTH;
; 352  : 
; 353  :   // Horizontal positions
; 354  :   int16_t *col_pos2 = hor_first_cols[2];

	lea	r11, QWORD PTR [r12+9984]
	mov	ebp, r15d
	mov	r12d, -256				; ffffffffffffff00H
	lea	r10, QWORD PTR [r14+4096]
	mov	ebx, r15d
	npad	7
$LL4@kvz_filter:

; 360  :     for (x = 0; x < width; ++x) {

	test	r9d, r9d
	jle	SHORT $LN2@kvz_filter
	mov	rsi, r10
	mov	r8d, r9d
	mov	rdi, r11
	npad	2
$LL7@kvz_filter:

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, WORD PTR [rdi-256]
	movsx	ecx, WORD PTR [rdi-384]
	add	ecx, eax
	movsx	eax, WORD PTR [rdi-640]
	lea	ecx, DWORD PTR [rcx+rcx*4]
	lea	edx, DWORD PTR [rax+rcx*2]
	movsx	eax, WORD PTR [rdi]
	movsx	ecx, WORD PTR [rdi-512]
	add	edx, eax
	movsx	eax, WORD PTR [rdi-128]
	add	ecx, eax
	shl	edx, 2
	imul	eax, ecx, 11
	sub	edx, eax
	movsx	eax, WORD PTR [rdi-768]
	sub	edx, eax
	movsx	eax, WORD PTR [rdi+128]
	sub	edx, eax

; 361  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(fir2, &hor_intermediate[1][y * hor_stride + x], hor_stride) >> shift2;

	sar	edx, 6

; 362  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, dx
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r12w
	je	SHORT $LN45@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN45@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 363  :       filtered[1][y * dst_stride + x] = sample;

	mov	BYTE PTR [rsi], al
	add	rdi, 2
	inc	rsi
	sub	r8, 1
	jne	SHORT $LL7@kvz_filter
$LN2@kvz_filter:

; 355  : 
; 356  :   // VERTICAL STEP
; 357  : 
; 358  :   // Top-right
; 359  :   for (y = 0; y < height; ++y) {

	sub	r11, -128				; ffffffffffffff80H
	add	r10, 64					; 00000040H
	sub	rbx, 1
	jne	$LL4@kvz_filter
	mov	r12, QWORD PTR hor_intermediate$[rsp]
	lea	r8, QWORD PTR [r14+1]
	mov	rdx, r8
	lea	r10, QWORD PTR [r13+8]
	mov	r11, r15
	mov	esi, -256				; ffffffffffffff00H
	npad	6
$LL10@kvz_filter:

; 369  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR [r10]
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, si
	je	SHORT $LN49@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN49@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 369  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	mov	BYTE PTR [rdx-1], al

; 370  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	cmp	r9d, 1
	jle	SHORT $LN8@kvz_filter

; 369  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	lea	ecx, DWORD PTR [r9-1]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rdx+4095]
	rep movsb
	mov	esi, -256				; ffffffffffffff00H
$LN8@kvz_filter:

; 364  :     }
; 365  :   }
; 366  : 
; 367  :   for (y = 0; y < height; ++y) {

	add	rdx, 64					; 00000040H
	add	r10, 2
	sub	r11, 1
	jne	SHORT $LL10@kvz_filter
	lea	rdi, QWORD PTR [r13+12]
	npad	11
$LL16@kvz_filter:

; 62   :     temp += filter[i] * data[i];

	movsx	eax, WORD PTR [rdi-4]
	lea	r10, QWORD PTR [rdi+2]
	movsx	ecx, WORD PTR [rdi-6]
	add	ecx, eax
	movsx	eax, WORD PTR [rdi-10]
	lea	ecx, DWORD PTR [rcx+rcx*4]
	lea	edx, DWORD PTR [rax+rcx*2]
	movsx	eax, WORD PTR [rdi]
	movsx	ecx, WORD PTR [rdi-8]
	add	edx, eax
	movsx	eax, WORD PTR [rdi-2]
	add	ecx, eax
	shl	edx, 2
	imul	eax, ecx, 11
	sub	edx, eax
	movsx	eax, WORD PTR [rdi-12]
	sub	edx, eax
	movsx	eax, WORD PTR [r10]
	sub	edx, eax

; 376  :     x = 0;
; 377  :     int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[y]) >> shift2;

	sar	edx, 6

; 378  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, dx
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, si
	je	SHORT $LN58@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN58@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 379  :     filtered[0][y * dst_stride + x] = sample;

	mov	BYTE PTR [r8-1], al

; 380  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	cmp	r9d, 1
	jle	SHORT $LN14@kvz_filter

; 379  :     filtered[0][y * dst_stride + x] = sample;

	lea	ecx, DWORD PTR [r9-1]
	mov	rdi, r8
	lea	rsi, QWORD PTR [r8+4095]
	rep movsb
	mov	esi, -256				; ffffffffffffff00H
$LN14@kvz_filter:

; 371  :   }
; 372  : 
; 373  :   // Top-left
; 374  :   // Copy what can be copied from top-right filtered values. Filter the first column from the column array.
; 375  :   for (y = 0; y < height; ++y) {

	add	r8, 64					; 00000040H
	mov	rdi, r10
	sub	rbp, 1
	jne	SHORT $LL16@kvz_filter
	mov	ebp, -256				; ffffffffffffff00H
$LN15@kvz_filter:

; 381  :   }
; 382  : 
; 383  :   // Bottom-right
; 384  :   // Copy what can be copied from top-right filtered values. Filter the last row.
; 385  :   for (y = 0; y < height - 1; ++y) {

	xor	ebx, ebx
	lea	r11d, DWORD PTR [r15-1]
	mov	r15, QWORD PTR [rsp]
	mov	r10d, ebx
	lea	r8d, QWORD PTR [rbx+64]
	test	r11d, r11d
	jle	SHORT $LN21@kvz_filter
	mov	edi, r8d
	mov	esi, r11d
	mov	r10d, r11d
$LL22@kvz_filter:

; 386  :     for (x = 0; x < width; ++x) filtered[3][y* dst_stride + x] = filtered[1][(y + 1) * dst_stride + x];

	test	r9d, r9d
	jle	SHORT $LN20@kvz_filter
	lea	rcx, QWORD PTR [r14+12224]
	mov	edx, r9d
	add	rcx, rdi
	npad	12
$LL25@kvz_filter:
	movzx	eax, BYTE PTR [rcx-8128]
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	sub	rdx, 1
	jne	SHORT $LL25@kvz_filter
$LN20@kvz_filter:

; 381  :   }
; 382  : 
; 383  :   // Bottom-right
; 384  :   // Copy what can be copied from top-right filtered values. Filter the last row.
; 385  :   for (y = 0; y < height - 1; ++y) {

	add	rdi, r8
	sub	rsi, 1
	jne	SHORT $LL22@kvz_filter
$LN21@kvz_filter:

; 387  :   }
; 388  : 
; 389  :   for (x = 0; x < width; ++x) {

	test	r9d, r9d
	jle	$LN27@kvz_filter
	shl	r10d, 6
	lea	rsi, QWORD PTR [r14+12288]
	movsxd	rax, r10d
	movsxd	rdi, r10d
	add	rsi, rax
	add	rdi, 5120				; 00001400H
	mov	r10d, r9d
	lea	rdi, QWORD PTR [r12+rdi*2]
	npad	9
$LL28@kvz_filter:

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, WORD PTR [rdi-384]
	movsx	ecx, WORD PTR [rdi-512]
	add	ecx, eax
	movsx	eax, WORD PTR [rdi-768]
	lea	ecx, DWORD PTR [rcx+rcx*4]
	lea	edx, DWORD PTR [rax+rcx*2]
	movsx	eax, WORD PTR [rdi-128]
	movsx	ecx, WORD PTR [rdi-640]
	add	edx, eax
	movsx	eax, WORD PTR [rdi-256]
	add	ecx, eax
	shl	edx, 2
	imul	eax, ecx, 11
	sub	edx, eax
	movsx	eax, WORD PTR [rdi-896]
	sub	edx, eax
	movsx	eax, WORD PTR [rdi]
	sub	edx, eax

; 390  :     int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(fir2, &hor_intermediate[1][(y + 1) * hor_stride + x], hor_stride) >> shift2;

	sar	edx, 6

; 391  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, dx
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, bp
	je	SHORT $LN67@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN67@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 392  :     filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [rsi], al
	add	rdi, 2
	inc	rsi
	sub	r10, 1
	jne	SHORT $LL28@kvz_filter
$LN27@kvz_filter:
	mov	r12, QWORD PTR [rsp+16]

; 393  :   }
; 394  : 
; 395  :   // Bottom-left
; 396  :   // Copy what can be copied from the top-left filtered values.
; 397  :   // Copy what can be copied from the bottom-right filtered values.
; 398  :   // Finally filter the last pixel from the column array.
; 399  :   for (y = 0; y < height - 1; ++y) {

	test	r11d, r11d
	jle	SHORT $LN30@kvz_filter
	mov	edi, r11d
	mov	ebx, r11d
	npad	1
$LL31@kvz_filter:

; 400  :     for (x = 0; x < width; ++x) filtered[2][y * dst_stride + x] = filtered[0][(y + 1) * dst_stride + x];

	test	r9d, r9d
	jle	SHORT $LN29@kvz_filter
	lea	rcx, QWORD PTR [r8+r14]
	mov	edx, r9d
	npad	4
$LL34@kvz_filter:
	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rcx+8128], al
	lea	rcx, QWORD PTR [rcx+1]
	sub	rdx, 1
	jne	SHORT $LL34@kvz_filter
$LN29@kvz_filter:

; 393  :   }
; 394  : 
; 395  :   // Bottom-left
; 396  :   // Copy what can be copied from the top-left filtered values.
; 397  :   // Copy what can be copied from the bottom-right filtered values.
; 398  :   // Finally filter the last pixel from the column array.
; 399  :   for (y = 0; y < height - 1; ++y) {

	add	r8, 64					; 00000040H
	sub	rdi, 1
	jne	SHORT $LL31@kvz_filter
$LN30@kvz_filter:

; 401  :   }
; 402  :   for (x = 1; x < width; ++x) filtered[2][y * dst_stride + x] = filtered[3][y * dst_stride + x - 1];

	cmp	r9d, 1
	jle	SHORT $LN37@kvz_filter
	mov	eax, ebx
	lea	rdi, QWORD PTR [r14+8192]
	shl	eax, 6
	lea	rsi, QWORD PTR [r14+12287]
	inc	eax
	lea	ecx, DWORD PTR [r9-1]
	cdqe
	add	rdi, rax
	add	rsi, rax
	rep movsb
$LN37@kvz_filter:

; 403  :   x = 0;
; 404  :   int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[(y + 1)]) >> shift2;
; 405  :   sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	mov	rsi, QWORD PTR [rsp+56]
	movsxd	rdi, ebx

; 62   :     temp += filter[i] * data[i];

	movsx	eax, WORD PTR [r13+rdi*2+8]
	movsx	ecx, WORD PTR [r13+rdi*2+10]
	add	ecx, eax
	movsx	eax, WORD PTR [r13+rdi*2+14]
	lea	ecx, DWORD PTR [rcx+rcx*4]
	lea	edx, DWORD PTR [rax+rcx*2]
	movsx	eax, WORD PTR [r13+rdi*2+4]
	movsx	ecx, WORD PTR [r13+rdi*2+12]
	add	edx, eax
	movsx	eax, WORD PTR [r13+rdi*2+6]
	add	ecx, eax
	shl	edx, 2
	imul	eax, ecx, 11
	sub	edx, eax
	movsx	eax, WORD PTR [r13+rdi*2+16]
	sub	edx, eax
	movsx	eax, WORD PTR [r13+rdi*2+2]

; 403  :   x = 0;
; 404  :   int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[(y + 1)]) >> shift2;
; 405  :   sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	mov	r13, QWORD PTR [rsp+8]

; 62   :     temp += filter[i] * data[i];

	sub	edx, eax

; 403  :   x = 0;
; 404  :   int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[(y + 1)]) >> shift2;
; 405  :   sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	mov	rdi, QWORD PTR [rsp+64]
	sar	edx, 6
	movsx	ecx, dx
	add	ecx, 32					; 00000020H
	sar	ecx, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	cx, bp
	mov	rbp, QWORD PTR [rsp+48]
	je	SHORT $LN76@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	movsx	ecx, cx
	neg	ecx
	sar	ecx, 15
$LN76@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 406  :   filtered[2][y * dst_stride + x] = sample;

	shl	ebx, 6
	movsxd	rax, ebx
	mov	BYTE PTR [rax+r14+8192], cl

; 407  : }

	add	rsp, 24
	pop	r14
	pop	rbx
	ret	0
kvz_filter_hpel_blocks_diag_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
tv16776 = 0
tv14619 = 4
tv14543 = 4
sample_off_y$1$ = 8
ver_fir_b$1$ = 16
hor_pos_l$1$ = 16
tv14615 = 24
tv14614 = 24
tv14514 = 32
hor_pos_r$1$ = 32
col_pos_r$1$ = 40
tv14612 = 40
tv14617 = 48
tv14496 = 48
tv14613 = 56
col_pos_l$1$ = 64
tv14544 = 72
ver_fir_t$1$ = 80
tv14480 = 88
encoder$ = 160
src$ = 168
src_stride$ = 176
width$ = 184
height$ = 192
filtered$ = 200
hor_intermediate$ = 208
fme_level$ = 216
tv16779 = 224
hor_first_cols$ = 224
hpel_off_x$ = 232
hpel_off_y$ = 240
kvz_filter_qpel_blocks_hor_ver_luma_generic PROC

; 419  : {

$LN346:
	mov	QWORD PTR [rsp+8], rbx
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 420  :   int x, y;
; 421  : 
; 422  :   // Interpolation filter shifts
; 423  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 424  :   int32_t shift2 = 6;
; 425  : 
; 426  :   // Weighted prediction offset and shift
; 427  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 428  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 429  : 
; 430  :   int8_t *fir0 = kvz_g_luma_filter[0];
; 431  :   int8_t *fir2 = kvz_g_luma_filter[2];
; 432  :   int8_t *fir1 = kvz_g_luma_filter[1];
; 433  :   int8_t *fir3 = kvz_g_luma_filter[3];
; 434  : 
; 435  :   // Horiziontal positions. Positions 0 and 2 have already been calculated in filtered.
; 436  :   int16_t *hor_pos0 = hor_intermediate[0];
; 437  :   int16_t *hor_pos2 = hor_intermediate[1];

	mov	r10, QWORD PTR hor_intermediate$[rsp]

; 438  :   int16_t *hor_pos_l = hor_intermediate[3];
; 439  :   int16_t *hor_pos_r = hor_intermediate[4];
; 440  :   int8_t *hor_fir_l  = hpel_off_x != 0 ? fir1 : fir3;

	lea	rax, OFFSET FLAT:kvz_g_luma_filter+24
	mov	rdi, rax
	lea	rbx, OFFSET FLAT:kvz_g_luma_filter+8
	mov	r15, rdx
	mov	r13d, r9d
	movzx	r9d, BYTE PTR hpel_off_x$[rsp]

; 441  :   int8_t *hor_fir_r  = hpel_off_x != 0 ? fir3 : fir1;

	mov	rsi, rbx
	test	r9b, r9b
	lea	rcx, QWORD PTR [r10+9216]
	lea	rbp, QWORD PTR [r10+27648]
	cmovne	rsi, rax
	mov	QWORD PTR hor_pos_l$1$[rsp], rbp

; 442  :   int16_t *col_pos_l = hor_first_cols[1];

	mov	rax, QWORD PTR hor_first_cols$[rsp]
	lea	r14, QWORD PTR [r10+36864]

; 443  :   int16_t *col_pos_r = hor_first_cols[3];
; 444  : 
; 445  :   int16_t dst_stride = LCU_WIDTH;
; 446  :   int16_t hor_stride = LCU_WIDTH;
; 447  : 
; 448  :   int16_t *hor_hpel_pos = hpel_off_x != 0 ? hor_pos2 : hor_pos0;

	cmovne	r10, rcx
	mov	QWORD PTR hor_pos_r$1$[rsp], r14
	cmovne	rdi, rbx
	mov	QWORD PTR hor_intermediate$[rsp], r10
	lea	rdx, QWORD PTR [rax+144]

; 449  :   int16_t *col_pos_hor  = hpel_off_x != 0 ? hor_first_cols[2] : hor_first_cols[0];
; 450  : 
; 451  :   // Specify if integer pixels are filtered from left or/and top integer samples
; 452  :   int off_x_fir_l = hpel_off_x < 1 ? 0 : 1;

	lea	rcx, QWORD PTR [rax+288]
	mov	QWORD PTR col_pos_l$1$[rsp], rdx
	cmove	rcx, rax
	lea	rdx, QWORD PTR [rax+432]

; 453  :   int off_x_fir_r = hpel_off_x < 0 ? 0 : 1;

	movzx	eax, r9b
	mov	QWORD PTR col_pos_r$1$[rsp], rdx
	shr	al, 7
	xor	r11d, r11d
	mov	BYTE PTR tv16779[rsp], al
	xor	al, 1
	mov	BYTE PTR tv16776[rsp], al

; 454  :   int off_y_fir_t = hpel_off_y < 1 ? 0 : 1;
; 455  :   int off_y_fir_b = hpel_off_y < 0 ? 0 : 1;

	movzx	eax, BYTE PTR hpel_off_y$[rsp]
	not	al
	mov	QWORD PTR tv14480[rsp], rcx
	movzx	eax, al
	shr	eax, 7
	mov	DWORD PTR sample_off_y$1$[rsp], eax

; 456  :   
; 457  :   // HORIZONTAL STEP
; 458  :   // Left QPEL
; 459  :   int sample_off_y = hpel_off_y < 0 ? 0 : 1;
; 460  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	eax, DWORD PTR height$[rsp]
	add	eax, 8
	mov	DWORD PTR tv14619[rsp], eax
	test	eax, eax
	jle	$LN3@kvz_filter

; 420  :   int x, y;
; 421  : 
; 422  :   // Interpolation filter shifts
; 423  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;
; 424  :   int32_t shift2 = 6;
; 425  : 
; 426  :   // Weighted prediction offset and shift
; 427  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 428  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 429  : 
; 430  :   int8_t *fir0 = kvz_g_luma_filter[0];
; 431  :   int8_t *fir2 = kvz_g_luma_filter[2];
; 432  :   int8_t *fir1 = kvz_g_luma_filter[1];
; 433  :   int8_t *fir3 = kvz_g_luma_filter[3];
; 434  : 
; 435  :   // Horiziontal positions. Positions 0 and 2 have already been calculated in filtered.
; 436  :   int16_t *hor_pos0 = hor_intermediate[0];
; 437  :   int16_t *hor_pos2 = hor_intermediate[1];

	mov	rbx, QWORD PTR src$[rsp]
	mov	r15, rbp
	npad	5
$LL4@kvz_filter:

; 461  :     for (x = 0; x < width; ++x) {

	xor	r12d, r12d
	test	r13d, r13d
	jle	$LN2@kvz_filter
	movsx	ebp, r8w
	mov	r10, r15
	npad	13
$LL7@kvz_filter:

; 462  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 463  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 464  :       hor_pos_l[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_l, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [rdi+7]
	lea	eax, DWORD PTR [r11-3]
	imul	eax, ebp
	lea	r10, QWORD PTR [r10+2]
	add	eax, r12d
	inc	r12d
	cdqe
	movzx	r9d, BYTE PTR [rax+rbx]

; 51   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [rax+rbx]

; 462  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 463  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 464  :       hor_pos_l[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_l, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, BYTE PTR [rdi+2]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+5]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+6]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+4]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+1]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r10-2], r9w
	cmp	r12d, r13d
	jl	$LL7@kvz_filter
	mov	eax, DWORD PTR tv14619[rsp]
	movzx	r8d, WORD PTR src_stride$[rsp]
$LN2@kvz_filter:

; 456  :   
; 457  :   // HORIZONTAL STEP
; 458  :   // Left QPEL
; 459  :   int sample_off_y = hpel_off_y < 0 ? 0 : 1;
; 460  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	inc	r11d
	sub	r15, -128				; ffffffffffffff80H
	cmp	r11d, eax
	jl	$LL4@kvz_filter
	mov	rbp, QWORD PTR hor_pos_l$1$[rsp]
	lea	rbx, OFFSET FLAT:kvz_g_luma_filter+8
	mov	r15, QWORD PTR src$[rsp]
$LN3@kvz_filter:

; 465  :     }
; 466  :   }
; 467  : 
; 468  :   // Write the first column in contiguous memory
; 469  :   x = 0;
; 470  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	movsxd	rcx, eax
	test	eax, eax
	jle	$LN9@kvz_filter

; 471  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 472  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 473  :     col_pos_l[y] = kvz_eight_tap_filter_hor_generic(hor_fir_l, &src[src_stride*ypos + xpos]) >> shift1;

	mov	r10, QWORD PTR col_pos_l$1$[rsp]
	xor	r11d, r11d
	movsx	r12d, r8w
	mov	r14, rcx
	imul	ebp, r12d, -3
$LL10@kvz_filter:
	movsx	eax, BYTE PTR [rdi+7]
	movsx	edx, BYTE PTR [rdi+6]
	movsxd	r8, ebp
	add	ebp, r12d
	add	r8, r15
	movzx	r9d, BYTE PTR [r8+4]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+1]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi+2]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rdi]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-3]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r10+r11*2], r9w
	inc	r11
	cmp	r11, r14
	jl	$LL10@kvz_filter
	mov	r14, QWORD PTR hor_pos_r$1$[rsp]
	mov	rbp, QWORD PTR hor_pos_l$1$[rsp]
	mov	eax, DWORD PTR tv14619[rsp]
$LN9@kvz_filter:

; 474  :   }
; 475  : 
; 476  :   // Right QPEL
; 477  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	xor	r11d, r11d
	test	eax, eax
	jle	$LN12@kvz_filter
	mov	rbp, QWORD PTR src$[rsp]
	mov	rdi, r14
	movsx	r14d, WORD PTR src_stride$[rsp]
$LL13@kvz_filter:

; 478  :     for (x = 0; x < width; ++x) {

	xor	r15d, r15d
	test	r13d, r13d
	jle	$LN11@kvz_filter
	mov	r10d, r14d
	mov	r12, rdi
$LL16@kvz_filter:

; 479  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 480  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 481  :       hor_pos_r[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_r, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	edx, BYTE PTR [rsi+7]
	lea	eax, DWORD PTR [r11-3]
	imul	eax, r10d
	lea	r12, QWORD PTR [r12+2]
	add	eax, r15d
	inc	r15d
	cdqe
	movzx	r9d, BYTE PTR [rax+rbp]

; 51   :     temp += filter[i] * data[i];

	lea	r8, QWORD PTR [rax+rbp]

; 479  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 480  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;
; 481  :       hor_pos_r[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_r, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, BYTE PTR [rsi+2]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+5]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+6]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+4]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+1]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r12-2], r9w
	cmp	r15d, r13d
	jl	$LL16@kvz_filter
	mov	eax, DWORD PTR tv14619[rsp]
$LN11@kvz_filter:

; 474  :   }
; 475  : 
; 476  :   // Right QPEL
; 477  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	inc	r11d
	sub	rdi, -128				; ffffffffffffff80H
	cmp	r11d, eax
	jl	$LL13@kvz_filter
	mov	rbp, QWORD PTR hor_pos_l$1$[rsp]
	mov	r15, QWORD PTR src$[rsp]
$LN12@kvz_filter:

; 482  :     }
; 483  :   }
; 484  : 
; 485  :   // Write the first column in contiguous memory
; 486  :   x = 0;
; 487  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	cmp	rcx, 0
	jle	$LN18@kvz_filter

; 488  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;
; 489  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;
; 490  :     col_pos_r[y] = kvz_eight_tap_filter_hor_generic(hor_fir_r, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	r12d, WORD PTR src_stride$[rsp]
	xor	r11d, r11d
	mov	r10, QWORD PTR col_pos_r$1$[rsp]
	mov	rbp, rcx
	imul	edi, r12d, -3
	npad	5
$LL19@kvz_filter:
	movsx	eax, BYTE PTR [rsi+2]
	movsx	edx, BYTE PTR [rsi+7]
	movsxd	r8, edi
	add	edi, r12d
	add	r8, r15
	movzx	r9d, BYTE PTR [r8-1]
	imul	r9d, eax
	movzx	eax, BYTE PTR [r8+4]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+6]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+3]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+5]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+4]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8+1]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+3]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi+1]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-2]
	imul	eax, edx
	movsx	edx, BYTE PTR [rsi]
	add	r9w, ax
	movzx	eax, BYTE PTR [r8-3]
	imul	eax, edx
	add	r9w, ax
	mov	WORD PTR [r10+r11*2], r9w
	inc	r11
	cmp	r11, rbp
	jl	$LL19@kvz_filter
	mov	rbp, QWORD PTR hor_pos_l$1$[rsp]
$LN18@kvz_filter:

; 491  :   }
; 492  : 
; 493  :   // VERTICAL STEP
; 494  :   int8_t *ver_fir_l = hpel_off_y != 0 ? fir2 : fir0;

	movzx	ecx, BYTE PTR hpel_off_y$[rsp]
	lea	rdx, OFFSET FLAT:kvz_g_luma_filter+16

; 495  :   int8_t *ver_fir_r = hpel_off_y != 0 ? fir2 : fir0;
; 496  :   int8_t *ver_fir_t = hpel_off_y != 0 ? fir1 : fir3;
; 497  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;
; 498  : 
; 499  :   // Left QPEL (1/4 or 3/4 x positions) 
; 500  :   for (y = 0; y < height; ++y) {

	mov	esi, DWORD PTR height$[rsp]
	lea	rax, OFFSET FLAT:kvz_g_luma_filter
	test	cl, cl
	movsxd	rcx, DWORD PTR sample_off_y$1$[rsp]
	mov	r9, rcx
	mov	QWORD PTR tv14613[rsp], rcx
	cmovne	rax, rdx
	lea	rdx, OFFSET FLAT:kvz_g_luma_filter+24
	mov	r11, rdx
	cmovne	r11, rbx
	cmovne	rbx, rdx
	mov	QWORD PTR ver_fir_b$1$[rsp], rbx
	mov	QWORD PTR ver_fir_t$1$[rsp], r11
	test	esi, esi
	jle	$LN39@kvz_filter

; 501  :     if (!off_x_fir_l) {

	mov	r8, QWORD PTR filtered$[rsp]
	xor	ebx, ebx

; 506  :     }
; 507  :     for (x = !off_x_fir_l; x < width; ++x) {

	movzx	edx, BYTE PTR hpel_off_x$[rsp]
	xor	r14d, r14d
	cmp	dl, 1
	mov	QWORD PTR tv14544[rsp], r8
	mov	rdi, r8
	mov	r15d, -256				; ffffffffffffff00H
	setl	bl
	xor	r12d, r12d
	shl	ecx, 6
	mov	DWORD PTR tv14543[rsp], ecx
	mov	ecx, esi
	mov	QWORD PTR tv14617[rsp], rcx
	mov	QWORD PTR tv14615[rsp], rcx
	npad	3
$LL22@kvz_filter:

; 501  :     if (!off_x_fir_l) {

	cmp	dl, 1
	jge	$LN44@kvz_filter

; 62   :     temp += filter[i] * data[i];

	mov	rsi, QWORD PTR col_pos_l$1$[rsp]
	lea	r8, QWORD PTR [r14+r9]
	movsx	ecx, BYTE PTR [rax+7]
	movsx	r9d, WORD PTR [rsi+r8*2+14]
	movsx	edx, WORD PTR [rsi+r8*2+12]
	imul	r9d, ecx
	movsx	ecx, BYTE PTR [rax+6]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+5]
	add	r9d, edx
	movsx	edx, WORD PTR [rsi+r8*2+10]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+4]
	add	r9d, edx
	movsx	edx, WORD PTR [rsi+r8*2+8]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+3]
	add	r9d, edx
	movsx	edx, WORD PTR [rsi+r8*2+6]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+2]
	add	r9d, edx
	movsx	edx, WORD PTR [rsi+r8*2+4]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+1]
	add	r9d, edx
	movsx	edx, WORD PTR [rsi+r8*2+2]
	imul	edx, ecx
	movsx	ecx, WORD PTR [rsi+r8*2]
	add	r9d, edx
	movsx	edx, BYTE PTR [rax]
	imul	edx, ecx
	add	r9d, edx

; 502  :       x = 0;
; 503  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_l, &col_pos_l[y + sample_off_y]) >> shift2;

	sar	r9d, 6

; 504  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	ecx, r9w
	add	ecx, 32					; 00000020H
	sar	ecx, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	cx, r15w
	je	SHORT $LN77@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	movsx	ecx, cx
	neg	ecx
	sar	ecx, 15
$LN77@kvz_filter:
	mov	r8, QWORD PTR filtered$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 505  :       filtered[0][y * dst_stride + x] = sample;

	mov	BYTE PTR [rdi], cl
	mov	rcx, QWORD PTR tv14615[rsp]
$LN44@kvz_filter:

; 506  :     }
; 507  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	ebx, r13d
	jge	$LN20@kvz_filter
	mov	r10d, DWORD PTR tv14543[rsp]
	lea	ecx, DWORD PTR [r12+rbx]
	movsxd	rdi, ecx
	xor	esi, esi
	add	rdi, r8
	mov	r15d, r13d
	sub	r15d, ebx
	mov	r11d, -256				; ffffffffffffff00H
	npad	1
$LL25@kvz_filter:
	lea	ecx, DWORD PTR [r10+r12]
	add	ecx, esi
	movsxd	r8, ecx

; 84   :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [rax+6]
	movsx	r9d, WORD PTR [rbp+r8*2+768]
	movsx	edx, WORD PTR [rbp+r8*2+512]
	imul	r9d, ecx
	movsx	ecx, BYTE PTR [rax+4]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+2]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2+256]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+1]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2+128]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+7]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2+896]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+5]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2+640]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+3]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2+384]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax]
	add	r9d, edx
	movsx	edx, WORD PTR [rbp+r8*2]
	imul	edx, ecx
	add	r9d, edx

; 508  :       int ypos = y + sample_off_y;
; 509  :       int xpos = x - !off_x_fir_l;
; 510  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_l, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	r9d, 6

; 511  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	ecx, r9w
	add	ecx, 32					; 00000020H
	sar	ecx, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	cx, r11w
	je	SHORT $LN86@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	movsx	ecx, cx
	neg	ecx
	sar	ecx, 15
$LN86@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 512  :       filtered[0][y * dst_stride + x] = sample;

	mov	BYTE PTR [rdi], cl
	inc	esi
	inc	rdi
	sub	r15, 1
	jne	$LL25@kvz_filter
	mov	rdi, QWORD PTR tv14544[rsp]
	mov	r15d, r11d
	mov	rcx, QWORD PTR tv14615[rsp]
$LN20@kvz_filter:

; 495  :   int8_t *ver_fir_r = hpel_off_y != 0 ? fir2 : fir0;
; 496  :   int8_t *ver_fir_t = hpel_off_y != 0 ? fir1 : fir3;
; 497  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;
; 498  : 
; 499  :   // Left QPEL (1/4 or 3/4 x positions) 
; 500  :   for (y = 0; y < height; ++y) {

	movzx	edx, BYTE PTR hpel_off_x$[rsp]
	add	rdi, 64					; 00000040H
	mov	r8, QWORD PTR filtered$[rsp]
	add	r12d, 64				; 00000040H
	mov	r9, QWORD PTR tv14613[rsp]
	inc	r14
	sub	rcx, 1
	mov	QWORD PTR tv14544[rsp], rdi
	mov	QWORD PTR tv14615[rsp], rcx
	jne	$LL22@kvz_filter

; 518  :     if (!off_x_fir_r) {

	movzx	r10d, BYTE PTR tv16779[rsp]
	lea	r12, QWORD PTR [r8+4096]
	mov	r14, QWORD PTR hor_pos_r$1$[rsp]
	xor	r11d, r11d
	movzx	esi, BYTE PTR tv16776[rsp]
	xor	r15d, r15d
	npad	8
$LL28@kvz_filter:
	test	sil, sil
	jne	$LN45@kvz_filter

; 62   :     temp += filter[i] * data[i];

	mov	rdi, QWORD PTR col_pos_r$1$[rsp]
	movsx	ecx, BYTE PTR [rax+7]
	mov	r8, QWORD PTR tv14613[rsp]
	add	r8, r11
	movsx	r9d, WORD PTR [rdi+r8*2+14]
	movsx	edx, WORD PTR [rdi+r8*2+12]
	imul	r9d, ecx
	movsx	ecx, BYTE PTR [rax+6]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+5]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2+10]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+4]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2+8]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+3]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2+6]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+2]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2+4]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+1]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2+2]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax]
	add	r9d, edx
	movsx	edx, WORD PTR [rdi+r8*2]
	imul	edx, ecx
	add	r9d, edx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	edx, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 520  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_r, &col_pos_r[y + sample_off_y]) >> shift2;

	sar	r9d, 6

; 521  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	ecx, r9w
	add	ecx, 32					; 00000020H
	sar	ecx, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	cx, dx
	je	SHORT $LN95@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	movsx	ecx, cx
	neg	ecx
	sar	ecx, 15
$LN95@kvz_filter:
	mov	r8, QWORD PTR filtered$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 522  :       filtered[1][y * dst_stride + x] = sample;

	mov	BYTE PTR [r12], cl
$LN45@kvz_filter:

; 523  :     }
; 524  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	r10d, r13d
	jge	$LN26@kvz_filter
	mov	ebx, DWORD PTR tv14543[rsp]
	lea	ecx, DWORD PTR [r10+r15]
	movsxd	rdx, ecx
	lea	rdi, QWORD PTR [r8+4096]
	add	rdi, rdx
	xor	esi, esi
	mov	ebp, r13d
	sub	ebp, r10d
	mov	r10d, -256				; ffffffffffffff00H
	npad	6
$LL31@kvz_filter:
	lea	ecx, DWORD PTR [rsi+rbx]
	add	ecx, r15d
	movsxd	r8, ecx

; 84   :     temp += filter[i] * data[stride * i];

	movsx	ecx, BYTE PTR [rax+6]
	movsx	r9d, WORD PTR [r14+r8*2+768]
	movsx	edx, WORD PTR [r14+r8*2+512]
	imul	r9d, ecx
	movsx	ecx, BYTE PTR [rax+4]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+2]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2+256]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+7]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2+896]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+5]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2+640]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+3]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2+384]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax+1]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2+128]
	imul	edx, ecx
	movsx	ecx, BYTE PTR [rax]
	add	r9d, edx
	movsx	edx, WORD PTR [r14+r8*2]
	imul	edx, ecx
	add	r9d, edx

; 525  :       int ypos = y + sample_off_y;
; 526  :       int xpos = x - !off_x_fir_r;
; 527  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_r, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	r9d, 6

; 528  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	ecx, r9w
	add	ecx, 32					; 00000020H
	sar	ecx, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	cx, r10w
	je	SHORT $LN104@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	movsx	ecx, cx
	neg	ecx
	sar	ecx, 15
$LN104@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 529  :       filtered[1][y * dst_stride + x] = sample;

	mov	BYTE PTR [rdi], cl
	inc	esi
	inc	rdi
	sub	rbp, 1
	jne	$LL31@kvz_filter
	movzx	r10d, BYTE PTR tv16779[rsp]
	movzx	esi, BYTE PTR tv16776[rsp]
$LN26@kvz_filter:

; 513  :     }
; 514  :   }
; 515  : 
; 516  :   // Right QPEL (3/4 or 1/4 x positions)
; 517  :   for (y = 0; y < height; ++y) {

	mov	r8, QWORD PTR filtered$[rsp]
	add	r15d, 64				; 00000040H
	add	r12, 64					; 00000040H
	inc	r11
	sub	QWORD PTR tv14617[rsp], 1
	jne	$LL28@kvz_filter

; 541  :     }
; 542  :     for (x = !sample_off_x; x < width; ++x) {

	mov	r9, QWORD PTR filtered$[rsp]
	mov	eax, 14
	movzx	r15d, BYTE PTR tv16779[rsp]
	xor	r14d, r14d
	cmp	BYTE PTR hpel_off_y$[rsp], 1
	mov	ebp, 12
	mov	r10, QWORD PTR hor_intermediate$[rsp]
	mov	r11, QWORD PTR ver_fir_t$1$[rsp]
	lea	r12, QWORD PTR [r9+8192]
	cmovge	ebp, eax
	movzx	r8d, sil
	add	rbp, QWORD PTR tv14480[rsp]
	xor	ebx, ebx
	cmp	BYTE PTR hpel_off_y$[rsp], 1
	mov	eax, 64					; 00000040H
	mov	QWORD PTR tv14612[rsp], r8
	cmovge	ebx, eax
	mov	eax, DWORD PTR height$[rsp]
	mov	QWORD PTR tv14496[rsp], rax
	mov	QWORD PTR tv14514[rsp], rax
$LL34@kvz_filter:

; 536  :     if (!sample_off_x) {

	test	r8, r8
	jne	$LN46@kvz_filter

; 62   :     temp += filter[i] * data[i];

	movsx	eax, BYTE PTR [r11+7]
	movsx	edx, WORD PTR [rbp+2]
	movsx	ecx, WORD PTR [rbp-2]
	imul	edx, eax
	movsx	eax, BYTE PTR [r11+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+4]
	add	edx, ecx
	movsx	ecx, WORD PTR [rbp-4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	edx, ecx
	movsx	ecx, WORD PTR [rbp-6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	edx, ecx
	movsx	ecx, WORD PTR [rbp-8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	edx, ecx
	movsx	ecx, WORD PTR [rbp-10]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	edx, ecx
	movsx	ecx, WORD PTR [rbp-12]
	imul	ecx, eax
	movsx	eax, WORD PTR [rbp]
	add	edx, ecx
	movsx	ecx, BYTE PTR [r11+6]
	imul	eax, ecx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	ecx, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 62   :     temp += filter[i] * data[i];

	add	eax, edx

; 537  :       x = 0;
; 538  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_hor[y + off_y_fir_t]) >> shift2;

	sar	eax, 6

; 539  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, cx
	je	SHORT $LN113@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN113@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 540  :       filtered[2][y * dst_stride + x] = sample;

	mov	BYTE PTR [r12], al
	mov	rax, QWORD PTR tv14514[rsp]
$LN46@kvz_filter:

; 541  :     }
; 542  :     for (x = !sample_off_x; x < width; ++x) {

	cmp	r15d, r13d
	jge	$LN32@kvz_filter
	lea	eax, DWORD PTR [r14+r15]
	add	r9, 8192				; 00002000H
	movsxd	rcx, eax
	xor	edi, edi
	add	r9, rcx
	mov	esi, r13d
	sub	esi, r15d
	mov	r15d, -256				; ffffffffffffff00H
$LL37@kvz_filter:
	lea	eax, DWORD PTR [r14+rdi]
	add	eax, ebx
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [r11+7]
	movsx	r8d, WORD PTR [r10+rdx*2+896]
	movsx	ecx, WORD PTR [r10+rdx*2+640]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r11+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+6]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+768]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+512]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 543  :       int ypos = y + off_y_fir_t;
; 544  :       int xpos = x - !sample_off_x;
; 545  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_hpel_pos[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 546  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r15w
	je	SHORT $LN122@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN122@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 547  :       filtered[2][y * dst_stride + x] = sample;

	mov	BYTE PTR [r9], al
	inc	edi
	inc	r9
	sub	rsi, 1
	jne	$LL37@kvz_filter
	movzx	r15d, BYTE PTR tv16779[rsp]
	mov	rax, QWORD PTR tv14514[rsp]
	mov	r8, QWORD PTR tv14612[rsp]
	mov	r9, QWORD PTR filtered$[rsp]
$LN32@kvz_filter:

; 530  :     }
; 531  :   }
; 532  : 
; 533  :   // Top QPEL (1/4 or 3/4 y positions)
; 534  :   int sample_off_x = (hpel_off_x > -1 ? 1 : 0);
; 535  :   for (y = 0; y < height; ++y) {

	add	r14d, 64				; 00000040H
	add	r12, 64					; 00000040H
	add	rbp, 2
	sub	rax, 1
	mov	QWORD PTR tv14514[rsp], rax
	jne	$LL34@kvz_filter

; 558  :     }
; 559  :     for (x = !sample_off_x; x < width; ++x) {

	mov	rbx, QWORD PTR ver_fir_b$1$[rsp]
	lea	r14, QWORD PTR [r9+12288]
	xor	r12d, r12d
	xor	esi, esi
	shl	DWORD PTR sample_off_y$1$[rsp], 6
	npad	8
$LL40@kvz_filter:

; 553  :     if (!sample_off_x) {

	test	r8, r8
	jne	$LN344@kvz_filter

; 62   :     temp += filter[i] * data[i];

	mov	r11, QWORD PTR tv14480[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	ebp, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 62   :     temp += filter[i] * data[i];

	movsx	eax, BYTE PTR [rbx+7]
	mov	rdx, QWORD PTR tv14613[rsp]
	add	rdx, r12
	movsx	r8d, WORD PTR [r11+rdx*2+14]
	movsx	ecx, WORD PTR [r11+rdx*2+12]
	imul	r8d, eax
	movsx	eax, BYTE PTR [rbx+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+5]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+10]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+2]
	imul	ecx, eax
	movsx	eax, WORD PTR [r11+rdx*2]
	add	r8d, ecx
	movsx	ecx, BYTE PTR [rbx]
	imul	eax, ecx
	add	eax, r8d

; 554  :       x = 0;
; 555  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_hor[y + off_y_fir_b]) >> shift2;

	sar	eax, 6

; 556  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, bp
	je	SHORT $LN131@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN131@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 557  :       filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [r14], al
	jmp	SHORT $LN47@kvz_filter
$LN344@kvz_filter:

; 553  :     if (!sample_off_x) {

	mov	ebp, -256				; ffffffffffffff00H
$LN47@kvz_filter:

; 558  :     }
; 559  :     for (x = !sample_off_x; x < width; ++x) {

	cmp	r15d, r13d
	jge	$LN38@kvz_filter
	lea	eax, DWORD PTR [rsi+r15]
	add	r9, 12288				; 00003000H
	movsxd	rcx, eax
	xor	r11d, r11d
	add	r9, rcx
	mov	edi, r13d
	sub	edi, r15d
	mov	r15d, DWORD PTR sample_off_y$1$[rsp]
	npad	2
$LL43@kvz_filter:
	lea	eax, DWORD PTR [rsi+r11]
	add	eax, r15d
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [rbx+7]
	movsx	r8d, WORD PTR [r10+rdx*2+896]
	movsx	ecx, WORD PTR [r10+rdx*2+640]
	imul	r8d, eax
	movsx	eax, BYTE PTR [rbx+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+6]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+768]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+512]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [rbx]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 560  :       int ypos = y + off_y_fir_b;
; 561  :       int xpos = x - !sample_off_x;
; 562  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_hpel_pos[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 563  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, bp
	je	SHORT $LN140@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN140@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 564  :       filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [r9], al
	inc	r11d
	inc	r9
	sub	rdi, 1
	jne	$LL43@kvz_filter
	movzx	r15d, BYTE PTR tv16779[rsp]
	mov	r9, QWORD PTR filtered$[rsp]
$LN38@kvz_filter:

; 548  :     }
; 549  :   }
; 550  : 
; 551  :   // Bottom QPEL (3/4 or 1/4 y positions)
; 552  :   for (y = 0; y < height; ++y) {

	mov	r8, QWORD PTR tv14612[rsp]
	add	esi, 64					; 00000040H
	add	r14, 64					; 00000040H
	inc	r12
	sub	QWORD PTR tv14496[rsp], 1
	jne	$LL40@kvz_filter
$LN39@kvz_filter:

; 565  :     }
; 566  :   }
; 567  : }

	mov	rbx, QWORD PTR [rsp+160]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
kvz_filter_qpel_blocks_hor_ver_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
off_y_fir_b$1$ = 0
tv10334 = 0
tv10395 = 8
tv10361 = 8
tv10326 = 8
ver_fir_b$1$ = 16
hor_pos_r$1$ = 24
col_pos_r$1$ = 32
tv10401 = 40
tv10314 = 40
hor_pos_l$1$ = 48
col_pos_l$1$ = 56
encoder$ = 112
src$ = 120
src_stride$ = 128
width$ = 136
height$ = 144
filtered$ = 152
tv10320 = 160
hor_intermediate$ = 160
fme_level$ = 168
tv11799 = 176
hor_first_cols$ = 176
hpel_off_x$ = 184
x$2$ = 192
hpel_off_y$ = 192
kvz_filter_qpel_blocks_diag_luma_generic PROC

; 579  : {

$LN238:
	mov	DWORD PTR [rsp+32], r9d
	push	rbx
	push	rbp
	push	rdi
	sub	rsp, 80					; 00000050H

; 580  :   int x, y;
; 581  : 
; 582  :   // Interpolation filter shifts
; 583  :   int32_t shift2 = 6;
; 584  : 
; 585  :   // Weighted prediction offset and shift
; 586  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;
; 587  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);
; 588  : 
; 589  :   int8_t *fir1 = kvz_g_luma_filter[1];
; 590  :   int8_t *fir3 = kvz_g_luma_filter[3];
; 591  : 
; 592  :   // Horiziontal positions.
; 593  :   int16_t *hor_pos_l = hor_intermediate[3];

	mov	rax, QWORD PTR hor_intermediate$[rsp]
	mov	ebx, r9d
	movzx	ecx, BYTE PTR hpel_off_y$[rsp]

; 594  :   int16_t *hor_pos_r = hor_intermediate[4];
; 595  : 
; 596  :   int16_t *col_pos_l = hor_first_cols[1];
; 597  :   int16_t *col_pos_r = hor_first_cols[3];
; 598  : 
; 599  :   int16_t dst_stride = LCU_WIDTH;
; 600  :   int16_t hor_stride = LCU_WIDTH;
; 601  : 
; 602  :   // VERTICAL STEP
; 603  :   int8_t *ver_fir_t = hpel_off_y != 0 ? fir1 : fir3;

	lea	r9, OFFSET FLAT:kvz_g_luma_filter+8
	movzx	r10d, BYTE PTR hpel_off_x$[rsp]

; 604  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;
; 605  : 
; 606  :   // Specify if integer pixels are filtered from left or/and top integer samples
; 607  :   int off_x_fir_l = hpel_off_x < 1 ? 0 : 1;
; 608  :   int off_x_fir_r = hpel_off_x < 0 ? 0 : 1;
; 609  :   int off_y_fir_t = hpel_off_y < 1 ? 0 : 1;
; 610  :   int off_y_fir_b = hpel_off_y < 0 ? 0 : 1;
; 611  : 
; 612  :   // Top-left QPEL
; 613  :   for (y = 0; y < height; ++y) {

	mov	r8d, DWORD PTR height$[rsp]
	lea	rbp, QWORD PTR [rax+27648]
	lea	rdi, QWORD PTR [rax+36864]
	mov	QWORD PTR hor_pos_l$1$[rsp], rbp
	mov	rax, QWORD PTR hor_first_cols$[rsp]
	mov	QWORD PTR hor_pos_r$1$[rsp], rdi
	lea	rdx, QWORD PTR [rax+144]
	add	rax, 432				; 000001b0H
	mov	QWORD PTR col_pos_r$1$[rsp], rax
	test	cl, cl
	lea	rax, OFFSET FLAT:kvz_g_luma_filter+24
	mov	QWORD PTR col_pos_l$1$[rsp], rdx
	mov	r11, rax
	cmovne	r11, r9
	cmovne	r9, rax
	movzx	eax, r10b
	mov	QWORD PTR ver_fir_b$1$[rsp], r9
	shr	al, 7
	mov	BYTE PTR tv11799[rsp], al
	xor	al, 1
	mov	BYTE PTR tv10320[rsp], al
	movzx	eax, cl
	not	al
	movzx	eax, al
	shr	eax, 7
	mov	DWORD PTR off_y_fir_b$1$[rsp], eax
	xor	eax, eax
	cmp	cl, 1
	setge	al
	mov	QWORD PTR tv10314[rsp], rax
	test	r8d, r8d
	jle	$LN21@kvz_filter

; 619  :     }
; 620  :     for (x = !off_x_fir_l; x < width; ++x) {

	mov	QWORD PTR [rsp+112], rsi
	mov	rsi, QWORD PTR filtered$[rsp]
	mov	QWORD PTR [rsp+120], r12
	mov	r12, rsi
	mov	QWORD PTR [rsp+128], r13
	xor	r13d, r13d
	mov	QWORD PTR [rsp+72], r14
	cmp	r10b, 1
	mov	QWORD PTR [rsp+64], r15
	lea	r14, QWORD PTR [rdx+12]
	setl	r13b
	lea	r14, QWORD PTR [r14+rax*2]
	xor	edi, edi
	mov	eax, 64					; 00000040H
	xor	r15d, r15d
	cmp	cl, 1
	cmovge	edi, eax
	mov	eax, r8d
	mov	QWORD PTR tv10395[rsp], rax
	mov	r8d, -256				; ffffffffffffff00H
	npad	6
$LL4@kvz_filter:

; 614  :     if (!off_x_fir_l) {

	cmp	r10b, 1
	jge	$LN26@kvz_filter

; 62   :     temp += filter[i] * data[i];

	movsx	eax, BYTE PTR [r11+7]
	movsx	edx, WORD PTR [r14+2]
	movsx	ecx, WORD PTR [r14-2]
	imul	edx, eax
	movsx	eax, BYTE PTR [r11+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+4]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-10]
	imul	ecx, eax
	movsx	eax, WORD PTR [r14]
	add	edx, ecx
	movsx	ecx, BYTE PTR [r11+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-12]
	imul	eax, ecx
	add	eax, edx

; 615  :       x = 0;
; 616  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_l[y + off_y_fir_t]) >> shift2;

	sar	eax, 6

; 617  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r8w
	je	SHORT $LN37@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN37@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 618  :       filtered[0][y * dst_stride + x] = sample;

	mov	BYTE PTR [r12], al
	mov	rax, QWORD PTR tv10395[rsp]
$LN26@kvz_filter:

; 619  :     }
; 620  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	r13d, ebx
	jge	$LN2@kvz_filter
	lea	eax, DWORD PTR [r15+r13]
	xor	ebx, ebx
	movsxd	r10, eax
	mov	r9d, -256				; ffffffffffffff00H
	add	r10, rsi
	mov	esi, DWORD PTR width$[rsp]
	sub	esi, r13d
$LL7@kvz_filter:
	lea	eax, DWORD PTR [r15+rbx]
	add	eax, edi
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [r11+7]
	movsx	r8d, WORD PTR [rbp+rdx*2+896]
	movsx	ecx, WORD PTR [rbp+rdx*2+640]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r11+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+6]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+768]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+512]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 621  :       int ypos = y + off_y_fir_t;
; 622  :       int xpos = x - !off_x_fir_l;
; 623  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 624  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r9w
	je	SHORT $LN46@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN46@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 625  :       filtered[0][y * dst_stride + x] = sample;

	mov	BYTE PTR [r10], al
	inc	ebx
	inc	r10
	sub	rsi, 1
	jne	$LL7@kvz_filter
	mov	rax, QWORD PTR tv10395[rsp]
	mov	r8d, r9d
	mov	ebx, DWORD PTR width$[rsp]
	movzx	r10d, BYTE PTR hpel_off_x$[rsp]
	mov	rsi, QWORD PTR filtered$[rsp]
$LN2@kvz_filter:

; 604  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;
; 605  : 
; 606  :   // Specify if integer pixels are filtered from left or/and top integer samples
; 607  :   int off_x_fir_l = hpel_off_x < 1 ? 0 : 1;
; 608  :   int off_x_fir_r = hpel_off_x < 0 ? 0 : 1;
; 609  :   int off_y_fir_t = hpel_off_y < 1 ? 0 : 1;
; 610  :   int off_y_fir_b = hpel_off_y < 0 ? 0 : 1;
; 611  : 
; 612  :   // Top-left QPEL
; 613  :   for (y = 0; y < height; ++y) {

	add	r15d, 64				; 00000040H
	add	r12, 64					; 00000040H
	add	r14, 2
	sub	rax, 1
	mov	QWORD PTR tv10395[rsp], rax
	jne	$LL4@kvz_filter

; 636  :     }
; 637  :     for (x = !off_x_fir_r; x < width; ++x) {

	mov	r14, QWORD PTR tv10314[rsp]
	xor	r9d, r9d
	mov	r8, QWORD PTR filtered$[rsp]
	add	r14, 6
	mov	rcx, QWORD PTR col_pos_r$1$[rsp]
	mov	eax, 64					; 00000040H
	movzx	ebp, BYTE PTR tv10320[rsp]
	xor	r15d, r15d
	cmp	BYTE PTR hpel_off_y$[rsp], 1
	mov	r10d, -256				; ffffffffffffff00H
	movzx	r13d, BYTE PTR tv11799[rsp]
	lea	r12, QWORD PTR [r8+4096]
	mov	rdi, QWORD PTR hor_pos_r$1$[rsp]
	lea	r14, QWORD PTR [rcx+r14*2]
	cmovge	r9d, eax
	mov	eax, DWORD PTR height$[rsp]
	mov	QWORD PTR tv10361[rsp], rax
$LL10@kvz_filter:

; 631  :     if (!off_x_fir_r) {

	test	rbp, rbp
	jne	$LN27@kvz_filter

; 62   :     temp += filter[i] * data[i];

	movsx	eax, BYTE PTR [r11+7]
	movsx	edx, WORD PTR [r14+2]
	movsx	ecx, WORD PTR [r14-2]
	imul	edx, eax
	movsx	eax, BYTE PTR [r11+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+4]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-10]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	edx, ecx
	movsx	ecx, WORD PTR [r14-12]
	imul	ecx, eax
	movsx	eax, WORD PTR [r14]
	add	edx, ecx
	movsx	ecx, BYTE PTR [r11+6]
	imul	eax, ecx
	add	eax, edx

; 632  :       x = 0;
; 633  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_r[y + off_y_fir_t]) >> shift2;

	sar	eax, 6

; 634  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r10w
	je	SHORT $LN55@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN55@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 635  :       filtered[1][y * dst_stride + x] = sample;

	mov	BYTE PTR [r12], al
	mov	rax, QWORD PTR tv10361[rsp]
$LN27@kvz_filter:

; 636  :     }
; 637  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	r13d, ebx
	jge	$LN8@kvz_filter
	mov	esi, DWORD PTR width$[rsp]
	lea	eax, DWORD PTR [r15+r13]
	movsxd	rcx, eax
	lea	r10, QWORD PTR [r8+4096]
	add	r10, rcx
	xor	ebx, ebx
	sub	esi, r13d
	mov	ebp, -256				; ffffffffffffff00H
	npad	8
$LL13@kvz_filter:
	lea	eax, DWORD PTR [rbx+r9]
	add	eax, r15d
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [r11+6]
	movsx	r8d, WORD PTR [rdi+rdx*2+768]
	movsx	ecx, WORD PTR [rdi+rdx*2+512]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r11+4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+7]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+896]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+5]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+640]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r11]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 638  :       int ypos = y + off_y_fir_t;
; 639  :       int xpos = x - !off_x_fir_r;
; 640  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 641  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, bp
	je	SHORT $LN64@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN64@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 642  :       filtered[1][y * dst_stride + x] = sample;

	mov	BYTE PTR [r10], al
	inc	ebx
	inc	r10
	sub	rsi, 1
	jne	$LL13@kvz_filter
	mov	rax, QWORD PTR tv10361[rsp]
	mov	r10d, -256				; ffffffffffffff00H
	mov	ebx, DWORD PTR width$[rsp]
	movzx	ebp, BYTE PTR tv10320[rsp]
	mov	r8, QWORD PTR filtered$[rsp]
$LN8@kvz_filter:

; 626  :     }
; 627  :   }
; 628  : 
; 629  :   // Top-right QPEL
; 630  :   for (y = 0; y < height; ++y) {

	add	r15d, 64				; 00000040H
	add	r12, 64					; 00000040H
	add	r14, 2
	sub	rax, 1
	mov	QWORD PTR tv10361[rsp], rax
	jne	$LL10@kvz_filter

; 653  :     }
; 654  :     for (x = !off_x_fir_l; x < width; ++x) {

	movsxd	rax, DWORD PTR off_y_fir_b$1$[rsp]
	lea	r14, QWORD PTR [r8+8192]
	movzx	ecx, BYTE PTR hpel_off_x$[rsp]
	xor	r15d, r15d
	mov	r13d, DWORD PTR height$[rsp]
	xor	r12d, r12d
	mov	r9, QWORD PTR ver_fir_b$1$[rsp]
	cmp	cl, 1
	mov	rbp, QWORD PTR hor_pos_l$1$[rsp]
	mov	edi, eax
	setl	r15b
	mov	QWORD PTR tv10326[rsp], r13
	xor	esi, esi
	mov	DWORD PTR x$2$[rsp], r15d
	shl	edi, 6
	mov	r10, rax
	mov	DWORD PTR tv10334[rsp], edi
	mov	QWORD PTR tv10401[rsp], rax
$LL16@kvz_filter:

; 648  :     if (!off_x_fir_l) {

	cmp	cl, 1
	jge	$LN28@kvz_filter

; 62   :     temp += filter[i] * data[i];

	mov	r11, QWORD PTR col_pos_l$1$[rsp]
	lea	rdx, QWORD PTR [r10+r12]
	movsx	eax, BYTE PTR [r9+7]
	movsx	r8d, WORD PTR [r11+rdx*2+14]
	movsx	ecx, WORD PTR [r11+rdx*2+12]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r9+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+5]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+10]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2+2]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r11+rdx*2]
	imul	eax, ecx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	ecx, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 62   :     temp += filter[i] * data[i];

	add	eax, r8d

; 649  :       x = 0;
; 650  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_l[y + off_y_fir_b]) >> shift2;

	sar	eax, 6

; 651  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, cx
	je	SHORT $LN73@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN73@kvz_filter:
	mov	r8, QWORD PTR filtered$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 652  :       filtered[2][y * dst_stride + x] = sample;

	mov	BYTE PTR [r14], al
$LN28@kvz_filter:

; 653  :     }
; 654  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	r15d, ebx
	jge	$LN14@kvz_filter
	lea	eax, DWORD PTR [rsi+r15]
	xor	r11d, r11d
	movsxd	rcx, eax
	lea	r10, QWORD PTR [r8+8192]
	add	r10, rcx
	sub	ebx, r15d
	mov	r15d, -256				; ffffffffffffff00H
$LL19@kvz_filter:
	lea	eax, DWORD PTR [rsi+r11]
	add	eax, edi
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [r9+6]
	movsx	r8d, WORD PTR [rbp+rdx*2+768]
	movsx	ecx, WORD PTR [rbp+rdx*2+512]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r9+4]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+7]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+896]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+5]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+640]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rbp+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 655  :       int ypos = y + off_y_fir_b;
; 656  :       int xpos = x - !off_x_fir_l;
; 657  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 658  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r15w
	je	SHORT $LN82@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN82@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 659  :       filtered[2][y * dst_stride + x] = sample;

	mov	BYTE PTR [r10], al
	inc	r11d
	inc	r10
	sub	rbx, 1
	jne	$LL19@kvz_filter
	mov	r15d, DWORD PTR x$2$[rsp]
	mov	ebx, DWORD PTR width$[rsp]
	mov	r10, QWORD PTR tv10401[rsp]
$LN14@kvz_filter:

; 643  :     }
; 644  :   }
; 645  : 
; 646  :   // Bottom-left QPEL
; 647  :   for (y = 0; y < height; ++y) {

	movzx	ecx, BYTE PTR hpel_off_x$[rsp]
	add	esi, 64					; 00000040H
	mov	r8, QWORD PTR filtered$[rsp]
	add	r14, 64					; 00000040H
	inc	r12
	sub	r13, 1
	jne	$LL16@kvz_filter

; 670  :     }
; 671  :     for (x = !off_x_fir_r; x < width; ++x) {

	movzx	r15d, BYTE PTR tv11799[rsp]
	mov	rdx, r8
	mov	rdi, QWORD PTR hor_pos_r$1$[rsp]
	xor	ebp, ebp
	mov	r12d, DWORD PTR tv10334[rsp]
	xor	esi, esi
	movzx	r13d, BYTE PTR tv10320[rsp]
	lea	r14, QWORD PTR [rdx+12288]
	npad	8
$LL22@kvz_filter:

; 665  :     if (!off_x_fir_r) {

	test	r13, r13
	jne	$LN29@kvz_filter

; 62   :     temp += filter[i] * data[i];

	movsx	eax, BYTE PTR [r9+7]
	lea	rdx, QWORD PTR [r10+rbp]
	mov	r10, QWORD PTR col_pos_r$1$[rsp]
	movsx	r8d, WORD PTR [r10+rdx*2+14]
	movsx	ecx, WORD PTR [r10+rdx*2+12]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r9+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+5]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+10]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+8]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+6]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2+4]
	imul	ecx, eax
	movsx	eax, WORD PTR [r10+rdx*2+2]
	add	r8d, ecx
	movsx	ecx, BYTE PTR [r9+1]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9]
	add	r8d, ecx
	movsx	ecx, WORD PTR [r10+rdx*2]
	imul	eax, ecx
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	mov	ecx, -256				; ffffffffffffff00H
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 62   :     temp += filter[i] * data[i];

	add	eax, r8d

; 666  :       x = 0;
; 667  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_r[y + off_y_fir_b]) >> shift2;

	sar	eax, 6

; 668  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, cx
	je	SHORT $LN91@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN91@kvz_filter:
	mov	rdx, QWORD PTR filtered$[rsp]
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 669  :       filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [r14], al
$LN29@kvz_filter:

; 670  :     }
; 671  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	r15d, ebx
	jge	$LN20@kvz_filter
	lea	eax, DWORD PTR [r15+rsi]
	xor	r11d, r11d
	movsxd	rcx, eax
	lea	r10, QWORD PTR [rdx+12288]
	add	r10, rcx
	mov	r13d, -256				; ffffffffffffff00H
	sub	ebx, r15d
$LL25@kvz_filter:
	lea	eax, DWORD PTR [r11+r12]
	add	eax, esi
	movsxd	rdx, eax

; 84   :     temp += filter[i] * data[stride * i];

	movsx	eax, BYTE PTR [r9+7]
	movsx	r8d, WORD PTR [rdi+rdx*2+896]
	movsx	ecx, WORD PTR [rdi+rdx*2+640]
	imul	r8d, eax
	movsx	eax, BYTE PTR [r9+5]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+3]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+384]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+1]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+128]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+6]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+768]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+4]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+512]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9+2]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2+256]
	imul	ecx, eax
	movsx	eax, BYTE PTR [r9]
	add	r8d, ecx
	movsx	ecx, WORD PTR [rdi+rdx*2]
	imul	eax, ecx
	add	eax, r8d

; 672  :       int ypos = y + off_y_fir_b;
; 673  :       int xpos = x - !off_x_fir_r;
; 674  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	sar	eax, 6

; 675  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	cwde
	add	eax, 32					; 00000020H
	sar	eax, 6
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c

; 47   :   if (value & ~PIXEL_MAX) {

	test	ax, r13w
	je	SHORT $LN100@kvz_filter

; 48   :     int16_t temp = (-value) >> 15;

	cwde
	neg	eax
	sar	eax, 15
$LN100@kvz_filter:
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c

; 676  :       filtered[3][y * dst_stride + x] = sample;

	mov	BYTE PTR [r10], al
	inc	r11d
	inc	r10
	sub	rbx, 1
	jne	$LL25@kvz_filter
	mov	ebx, DWORD PTR width$[rsp]
	movzx	r13d, BYTE PTR tv10320[rsp]
$LN20@kvz_filter:

; 660  :     }
; 661  :   }
; 662  : 
; 663  :   // Bottom-right QPEL
; 664  :   for (y = 0; y < height; ++y) {

	mov	r10, QWORD PTR tv10401[rsp]
	add	esi, 64					; 00000040H
	mov	rdx, QWORD PTR filtered$[rsp]
	add	r14, 64					; 00000040H
	inc	rbp
	sub	QWORD PTR tv10326[rsp], 1
	jne	$LL22@kvz_filter
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	mov	r13, QWORD PTR [rsp+128]
	mov	r12, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+112]
$LN21@kvz_filter:

; 677  :     }
; 678  :   }
; 679  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
kvz_filter_qpel_blocks_diag_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
_TEXT	SEGMENT
args$ = 80
kvz_get_extended_block_generic PROC

; 761  : void kvz_get_extended_block_generic(kvz_epol_args *args) {

$LN77:
	push	rbx
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rbx, rcx

; 762  : 
; 763  :   int min_y = args->blk_y - args->pad_t;

	mov	ecx, DWORD PTR [rcx+24]
	mov	edx, ecx
	sub	edx, DWORD PTR [rbx+44]

; 764  :   int max_y = args->blk_y + args->blk_h + args->pad_b + args->pad_b_simd - 1;
; 765  :   bool out_of_bounds_y = (min_y < 0) || (max_y >= args->src_h);

	js	SHORT $LN21@kvz_get_ex
	mov	eax, DWORD PTR [rbx+52]
	dec	eax
	add	eax, DWORD PTR [rbx+48]
	add	eax, DWORD PTR [rbx+32]
	add	eax, ecx
	cmp	eax, DWORD PTR [rbx+12]
	jge	SHORT $LN21@kvz_get_ex
	xor	r9b, r9b
	jmp	SHORT $LN22@kvz_get_ex
$LN21@kvz_get_ex:
	mov	r9b, 1
$LN22@kvz_get_ex:

; 766  : 
; 767  :   int min_x = args->blk_x - args->pad_l;
; 768  :   int max_x = args->blk_x + args->blk_w + args->pad_r - 1;

	mov	ecx, DWORD PTR [rbx+40]

; 769  :   bool out_of_bounds_x = (min_x < 0) || (max_x >= args->src_w);

	xor	edi, edi
	add	ecx, DWORD PTR [rbx+20]
	mov	r8d, DWORD PTR [rbx+28]
	mov	r10d, DWORD PTR [rbx+20]
	dec	r8d
	sub	r10d, DWORD PTR [rbx+36]
	add	r8d, ecx
	test	r10d, r10d
	js	SHORT $LN74@kvz_get_ex
	mov	eax, edi
	cmp	r8d, DWORD PTR [rbx+8]
	jl	SHORT $LN24@kvz_get_ex
$LN74@kvz_get_ex:
	mov	eax, 1
$LN24@kvz_get_ex:

; 770  : 
; 771  :   if (out_of_bounds_y || out_of_bounds_x) {

	test	r9b, r9b
	jne	SHORT $LN73@kvz_get_ex
	test	eax, eax
	jne	SHORT $LN73@kvz_get_ex

; 802  :     }
; 803  : 
; 804  :   } else {
; 805  : 
; 806  :     *args->ext = args->src + (args->blk_y - args->pad_t) * args->src_s + (args->blk_x - args->pad_l);

	imul	edx, DWORD PTR [rbx+16]
	movsxd	rax, r10d
	movsxd	rcx, edx
	add	rcx, rax
	mov	rax, QWORD PTR [rbx+64]
	add	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 807  :     *args->ext_origin = args->src + args->blk_y * args->src_s + args->blk_x;

	mov	eax, DWORD PTR [rbx+16]
	imul	eax, DWORD PTR [rbx+24]
	movsxd	rcx, eax
	movsxd	rax, DWORD PTR [rbx+20]
	add	rcx, rax
	mov	rax, QWORD PTR [rbx+72]
	add	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax], rcx

; 808  :     *args->ext_s = args->src_s;

	mov	rcx, QWORD PTR [rbx+80]
	mov	eax, DWORD PTR [rbx+16]
	mov	DWORD PTR [rcx], eax

; 809  :   }
; 810  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rbx
	ret	0
$LN73@kvz_get_ex:

; 772  : 
; 773  :     *args->ext = args->buf;

	mov	rcx, QWORD PTR [rbx+64]

; 774  :     *args->ext_s = args->pad_l + args->blk_w + args->pad_r;
; 775  :     *args->ext_origin = args->buf + args->pad_t * (*args->ext_s) + args->pad_l;
; 776  : 
; 777  :     // Note that stride equals width here.
; 778  :     int cnt_l = CLIP(0, *args->ext_s, -min_x);

	mov	r9d, r10d
	mov	rax, QWORD PTR [rbx+56]
	neg	r9d
	mov	QWORD PTR [rsp+88], rsi
	mov	QWORD PTR [rsp+96], r12
	mov	QWORD PTR [rcx], rax
	mov	ecx, DWORD PTR [rbx+40]
	add	ecx, DWORD PTR [rbx+36]
	add	ecx, DWORD PTR [rbx+28]
	mov	rax, QWORD PTR [rbx+80]
	mov	QWORD PTR [rsp+32], r15
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR [rbx+80]
	mov	ecx, DWORD PTR [rax]
	imul	ecx, DWORD PTR [rbx+44]
	movsxd	rax, DWORD PTR [rbx+36]
	movsxd	rdx, ecx
	add	rdx, rax
	mov	rax, QWORD PTR [rbx+72]
	add	rdx, QWORD PTR [rbx+56]
	mov	QWORD PTR [rax], rdx
	mov	rax, QWORD PTR [rbx+80]
	mov	ecx, DWORD PTR [rax]
	cmp	ecx, r9d
	mov	eax, ecx
	cmovge	eax, r9d
	test	eax, eax
	jns	SHORT $LN29@kvz_get_ex
	mov	r9d, edi
	jmp	SHORT $LN27@kvz_get_ex
$LN29@kvz_get_ex:
	cmp	ecx, r9d
	cmovl	r9d, ecx
$LN27@kvz_get_ex:

; 779  :     int cnt_r = CLIP(0, *args->ext_s, max_x - (args->src_w - 1));

	sub	r8d, DWORD PTR [rbx+8]
	mov	eax, ecx
	inc	r8d
	cmp	ecx, r8d
	cmovge	eax, r8d
	test	eax, eax
	jns	SHORT $LN35@kvz_get_ex
	mov	r8d, edi
	jmp	SHORT $LN33@kvz_get_ex
$LN35@kvz_get_ex:
	cmp	ecx, r8d
	cmovl	r8d, ecx
$LN33@kvz_get_ex:

; 780  :     int cnt_m = CLIP(0, *args->ext_s, *args->ext_s - cnt_l - cnt_r);

	mov	edx, ecx
	mov	eax, ecx
	sub	edx, r8d
	sub	edx, r9d
	cmp	ecx, edx
	cmovge	eax, edx
	test	eax, eax
	jns	SHORT $LN41@kvz_get_ex
	mov	edx, edi
	jmp	SHORT $LN39@kvz_get_ex
$LN41@kvz_get_ex:
	cmp	ecx, edx
	cmovl	edx, ecx
$LN39@kvz_get_ex:

; 781  : 
; 782  :     // For each row including real padding.
; 783  :     // Don't read "don't care" values (SIMD padding). Zero them out.
; 784  :     int y;
; 785  :     for (y = -args->pad_t; y < args->blk_h + args->pad_b; ++y) {

	mov	esi, DWORD PTR [rbx+44]
	mov	eax, DWORD PTR [rbx+32]
	neg	esi
	add	eax, DWORD PTR [rbx+48]
	movsxd	r15, r9d
	movsxd	r12, edx

; 796  :       for (int i = 0; i < cnt_r; ++i) *(dst_r + i) = *sample_r;

	movsxd	r11, r8d
	cmp	esi, eax
	jge	$LN3@kvz_get_ex

; 790  :       kvz_pixel *src_m = args->src + clipped_y * args->src_s + MAX(min_x, 0);

	mov	QWORD PTR [rsp+80], rbp
	test	r10d, r10d
	mov	QWORD PTR [rsp+48], r13
	mov	eax, edi
	cmovg	eax, r10d
	mov	QWORD PTR [rsp+40], r14
	movsxd	r13, eax
	npad	11
$LL4@kvz_get_ex:

; 786  : 
; 787  :       int clipped_y = CLIP(0, args->src_h - 1, args->blk_y + y);

	mov	ecx, DWORD PTR [rbx+24]
	mov	edx, DWORD PTR [rbx+12]
	add	ecx, esi
	dec	edx
	cmp	edx, ecx
	mov	eax, edx
	cmovge	eax, ecx
	test	eax, eax
	jns	SHORT $LN47@kvz_get_ex
	mov	ecx, edi
	jmp	SHORT $LN45@kvz_get_ex
$LN47@kvz_get_ex:
	cmp	edx, ecx
	cmovl	ecx, edx
$LN45@kvz_get_ex:

; 788  :       kvz_pixel *sample_l = args->src + clipped_y * args->src_s;

	mov	eax, DWORD PTR [rbx+16]

; 789  :       kvz_pixel *sample_r = args->src + clipped_y * args->src_s + args->src_w - 1;

	movsxd	r14, DWORD PTR [rbx+8]
	imul	eax, ecx
	mov	rcx, QWORD PTR [rbx]
	add	r14, rcx
	movsxd	rdx, eax

; 790  :       kvz_pixel *src_m = args->src + clipped_y * args->src_s + MAX(min_x, 0);

	lea	r8, QWORD PTR [rcx+r13]

; 791  :       kvz_pixel *dst_l = args->buf + (y + args->pad_t) * (*args->ext_s);

	mov	rax, QWORD PTR [rbx+80]
	add	r14, rdx
	add	r8, rdx
	lea	r10, QWORD PTR [rcx+rdx]
	mov	ecx, DWORD PTR [rbx+44]
	add	ecx, esi
	mov	rdx, rdi
	imul	ecx, DWORD PTR [rax]
	movsxd	r9, ecx
	add	r9, QWORD PTR [rbx+56]

; 792  :       kvz_pixel *dst_m = dst_l + cnt_l;

	lea	rcx, QWORD PTR [r15+r9]

; 793  :       kvz_pixel *dst_r = dst_m + cnt_m;

	lea	rbp, QWORD PTR [r12+rcx]

; 794  :       for (int i = 0; i < cnt_l; ++i) *(dst_l + i) = *sample_l;

	test	r15, r15
	jle	SHORT $LN6@kvz_get_ex
	npad	14
$LL7@kvz_get_ex:
	movzx	eax, BYTE PTR [r10]
	mov	BYTE PTR [rdx+r9], al
	inc	rdx
	cmp	rdx, r15
	jl	SHORT $LL7@kvz_get_ex
$LN6@kvz_get_ex:

; 795  :       for (int i = 0; i < cnt_m; ++i) *(dst_m + i) = *(src_m + i);

	test	r12, r12
	jle	SHORT $LN9@kvz_get_ex
	sub	r8, rcx
	mov	rdx, r12
	npad	5
$LL10@kvz_get_ex:
	movzx	eax, BYTE PTR [r8+rcx]
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	sub	rdx, 1
	jne	SHORT $LL10@kvz_get_ex
$LN9@kvz_get_ex:

; 796  :       for (int i = 0; i < cnt_r; ++i) *(dst_r + i) = *sample_r;

	mov	rcx, rdi
	test	r11, r11
	jle	SHORT $LN2@kvz_get_ex
	npad	7
$LL13@kvz_get_ex:
	movzx	eax, BYTE PTR [r14-1]
	mov	BYTE PTR [rcx+rbp], al
	inc	rcx
	cmp	rcx, r11
	jl	SHORT $LL13@kvz_get_ex
$LN2@kvz_get_ex:

; 781  : 
; 782  :     // For each row including real padding.
; 783  :     // Don't read "don't care" values (SIMD padding). Zero them out.
; 784  :     int y;
; 785  :     for (y = -args->pad_t; y < args->blk_h + args->pad_b; ++y) {

	mov	eax, DWORD PTR [rbx+32]
	inc	esi
	add	eax, DWORD PTR [rbx+48]
	cmp	esi, eax
	jl	$LL4@kvz_get_ex
	mov	r14, QWORD PTR [rsp+40]
	mov	r13, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+80]
$LN3@kvz_get_ex:

; 797  :     }
; 798  : 
; 799  :     for (int y_simd = 0; y_simd < args->pad_b_simd; ++y_simd) {

	mov	r15, QWORD PTR [rsp+32]
	mov	r12, QWORD PTR [rsp+96]
	cmp	DWORD PTR [rbx+52], edi
	jle	SHORT $LN75@kvz_get_ex
	npad	2
$LL16@kvz_get_ex:

; 800  :       kvz_pixel *dst = args->buf + (y + args->pad_t + y_simd) * (*args->ext_s);
; 801  :       FILL_ARRAY(dst, 0, *args->ext_s);

	mov	rax, QWORD PTR [rbx+80]
	xor	edx, edx
	movsxd	rcx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rdi+rsi]
	add	eax, DWORD PTR [rbx+44]
	mov	r8, rcx
	imul	eax, ecx
	movsxd	rcx, eax
	add	rcx, QWORD PTR [rbx+56]
	call	memset
	inc	edi
	cmp	edi, DWORD PTR [rbx+52]
	jl	SHORT $LL16@kvz_get_ex
$LN75@kvz_get_ex:
	mov	rsi, QWORD PTR [rsp+88]

; 809  :   }
; 810  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rbx
	ret	0
kvz_get_extended_block_generic ENDP
_TEXT	ENDS
END
