; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	kvz_lcu_luma_depth_pred
PUBLIC	kvz_end_ml_intra_depth_const
PUBLIC	kvz_init_ml_intra_depth_const
pdata	SEGMENT
$pdata$generate_interval_from_os_pred DD imagerel generate_interval_from_os_pred
	DD	imagerel generate_interval_from_os_pred+166
	DD	imagerel $unwind$generate_interval_from_os_pred
$pdata$6$generate_interval_from_os_pred DD imagerel generate_interval_from_os_pred+166
	DD	imagerel generate_interval_from_os_pred+814
	DD	imagerel $chain$6$generate_interval_from_os_pred
$pdata$7$generate_interval_from_os_pred DD imagerel generate_interval_from_os_pred+814
	DD	imagerel generate_interval_from_os_pred+825
	DD	imagerel $chain$7$generate_interval_from_os_pred
$pdata$matrix_add_level_roi DD imagerel matrix_add_level_roi
	DD	imagerel matrix_add_level_roi+292
	DD	imagerel $unwind$matrix_add_level_roi
$pdata$matrix_mask DD imagerel matrix_mask
	DD	imagerel matrix_mask+185
	DD	imagerel $unwind$matrix_mask
$pdata$merge_matrix_64 DD imagerel merge_matrix_64
	DD	imagerel merge_matrix_64+327
	DD	imagerel $unwind$merge_matrix_64
$pdata$fill_matrix_with_depth DD imagerel fill_matrix_with_depth
	DD	imagerel fill_matrix_with_depth+56
	DD	imagerel $unwind$fill_matrix_with_depth
$pdata$1$fill_matrix_with_depth DD imagerel fill_matrix_with_depth+56
	DD	imagerel fill_matrix_with_depth+123
	DD	imagerel $chain$1$fill_matrix_with_depth
$pdata$2$fill_matrix_with_depth DD imagerel fill_matrix_with_depth+123
	DD	imagerel fill_matrix_with_depth+138
	DD	imagerel $chain$2$fill_matrix_with_depth
$pdata$os_luma_qt_pred DD imagerel os_luma_qt_pred
	DD	imagerel os_luma_qt_pred+542
	DD	imagerel $unwind$os_luma_qt_pred
$pdata$ml_os_qt_gen DD imagerel ml_os_qt_gen
	DD	imagerel ml_os_qt_gen+196
	DD	imagerel $unwind$ml_os_qt_gen
$pdata$2$ml_os_qt_gen DD imagerel ml_os_qt_gen+196
	DD	imagerel ml_os_qt_gen+1111
	DD	imagerel $chain$2$ml_os_qt_gen
$pdata$3$ml_os_qt_gen DD imagerel ml_os_qt_gen+1111
	DD	imagerel ml_os_qt_gen+1180
	DD	imagerel $chain$3$ml_os_qt_gen
$pdata$fill_depth_matrix_8 DD imagerel fill_depth_matrix_8
	DD	imagerel fill_depth_matrix_8+36
	DD	imagerel $unwind$fill_depth_matrix_8
$pdata$2$fill_depth_matrix_8 DD imagerel fill_depth_matrix_8+36
	DD	imagerel fill_depth_matrix_8+112
	DD	imagerel $chain$2$fill_depth_matrix_8
$pdata$3$fill_depth_matrix_8 DD imagerel fill_depth_matrix_8+112
	DD	imagerel fill_depth_matrix_8+122
	DD	imagerel $chain$3$fill_depth_matrix_8
$pdata$neighbor_constrain_bu DD imagerel neighbor_constrain_bu
	DD	imagerel neighbor_constrain_bu+150
	DD	imagerel $unwind$neighbor_constrain_bu
$pdata$features_compute_all DD imagerel features_compute_all
	DD	imagerel features_compute_all+4987
	DD	imagerel $unwind$features_compute_all
$pdata$features_var_of_sub_var DD imagerel features_var_of_sub_var
	DD	imagerel features_var_of_sub_var+34
	DD	imagerel $unwind$features_var_of_sub_var
$pdata$0$features_var_of_sub_var DD imagerel features_var_of_sub_var+34
	DD	imagerel features_var_of_sub_var+216
	DD	imagerel $chain$0$features_var_of_sub_var
$pdata$1$features_var_of_sub_var DD imagerel features_var_of_sub_var+216
	DD	imagerel features_var_of_sub_var+222
	DD	imagerel $chain$1$features_var_of_sub_var
$pdata$features_merge_var DD imagerel features_merge_var
	DD	imagerel features_merge_var+42
	DD	imagerel $unwind$features_merge_var
$pdata$3$features_merge_var DD imagerel features_merge_var+42
	DD	imagerel features_merge_var+279
	DD	imagerel $chain$3$features_merge_var
$pdata$4$features_merge_var DD imagerel features_merge_var+279
	DD	imagerel features_merge_var+285
	DD	imagerel $chain$4$features_merge_var
$pdata$features_sub_var DD imagerel features_sub_var
	DD	imagerel features_sub_var+39
	DD	imagerel $unwind$features_sub_var
$pdata$3$features_sub_var DD imagerel features_sub_var+39
	DD	imagerel features_sub_var+274
	DD	imagerel $chain$3$features_sub_var
$pdata$4$features_sub_var DD imagerel features_sub_var+274
	DD	imagerel features_sub_var+280
	DD	imagerel $chain$4$features_sub_var
$pdata$features_compute DD imagerel features_compute
	DD	imagerel features_compute+65
	DD	imagerel $unwind$features_compute
$pdata$9$features_compute DD imagerel features_compute+65
	DD	imagerel features_compute+1011
	DD	imagerel $chain$9$features_compute
$pdata$10$features_compute DD imagerel features_compute+1011
	DD	imagerel features_compute+1022
	DD	imagerel $chain$10$features_compute
$pdata$features_get_var_of_sub_mean DD imagerel features_get_var_of_sub_mean
	DD	imagerel features_get_var_of_sub_mean+136
	DD	imagerel $unwind$features_get_var_of_sub_mean
$pdata$features_combine_var DD imagerel features_combine_var
	DD	imagerel features_combine_var+287
	DD	imagerel $unwind$features_combine_var
$pdata$features_var_avg_blck DD imagerel features_var_avg_blck
	DD	imagerel features_var_avg_blck+257
	DD	imagerel $unwind$features_var_avg_blck
$pdata$3$features_var_avg_blck DD imagerel features_var_avg_blck+257
	DD	imagerel features_var_avg_blck+704
	DD	imagerel $chain$3$features_var_avg_blck
$pdata$5$features_var_avg_blck DD imagerel features_var_avg_blck+704
	DD	imagerel features_var_avg_blck+1109
	DD	imagerel $chain$5$features_var_avg_blck
$pdata$6$features_var_avg_blck DD imagerel features_var_avg_blck+1109
	DD	imagerel features_var_avg_blck+1172
	DD	imagerel $chain$6$features_var_avg_blck
$pdata$vect_variance_blck_int8 DD imagerel vect_variance_blck_int8
	DD	imagerel vect_variance_blck_int8+119
	DD	imagerel $unwind$vect_variance_blck_int8
$pdata$1$vect_variance_blck_int8 DD imagerel vect_variance_blck_int8+119
	DD	imagerel vect_variance_blck_int8+236
	DD	imagerel $chain$1$vect_variance_blck_int8
$pdata$4$vect_variance_blck_int8 DD imagerel vect_variance_blck_int8+236
	DD	imagerel vect_variance_blck_int8+650
	DD	imagerel $chain$4$vect_variance_blck_int8
$pdata$5$vect_variance_blck_int8 DD imagerel vect_variance_blck_int8+650
	DD	imagerel vect_variance_blck_int8+669
	DD	imagerel $chain$5$vect_variance_blck_int8
$pdata$6$vect_variance_blck_int8 DD imagerel vect_variance_blck_int8+669
	DD	imagerel vect_variance_blck_int8+689
	DD	imagerel $chain$6$vect_variance_blck_int8
$pdata$vect_average_blck_int8 DD imagerel vect_average_blck_int8
	DD	imagerel vect_average_blck_int8+202
	DD	imagerel $unwind$vect_average_blck_int8
$pdata$2$vect_average_blck_int8 DD imagerel vect_average_blck_int8+202
	DD	imagerel vect_average_blck_int8+409
	DD	imagerel $chain$2$vect_average_blck_int8
$pdata$3$vect_average_blck_int8 DD imagerel vect_average_blck_int8+409
	DD	imagerel vect_average_blck_int8+432
	DD	imagerel $chain$3$vect_average_blck_int8
$pdata$kvz_lcu_luma_depth_pred DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$kvz_lcu_luma_depth_pred
$pdata$kvz_end_ml_intra_depth_const DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$kvz_end_ml_intra_depth_const
$pdata$kvz_init_ml_intra_depth_const DD imagerel $LN11
	DD	imagerel $LN11+229
	DD	imagerel $unwind$kvz_init_ml_intra_depth_const
xdata	SEGMENT
$unwind$generate_interval_from_os_pred DD 040b01H
	DD	019010bH
	DD	05002e004H
$chain$6$generate_interval_from_os_pred DD 0e4721H
	DD	0a6847H
	DD	016f43cH
	DD	017d431H
	DD	018c429H
	DD	01f7421H
	DD	01e6415H
	DD	01d3408H
	DD	imagerel generate_interval_from_os_pred
	DD	imagerel generate_interval_from_os_pred+166
	DD	imagerel $unwind$generate_interval_from_os_pred
$chain$7$generate_interval_from_os_pred DD 021H
	DD	imagerel generate_interval_from_os_pred
	DD	imagerel generate_interval_from_os_pred+166
	DD	imagerel $unwind$generate_interval_from_os_pred
$unwind$matrix_add_level_roi DD 0c2101H
	DD	0d6421H
	DD	0c5421H
	DD	0b3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
$unwind$matrix_mask DD 010401H
	DD	04204H
$unwind$merge_matrix_64 DD 0a1801H
	DD	0126418H
	DD	0115418H
	DD	0103418H
	DD	0f014b218H
	DD	07010e012H
$unwind$fill_matrix_with_depth DD 060e01H
	DD	0a340eH
	DD	0f00a320eH
	DD	07006e008H
$chain$1$fill_matrix_with_depth DD 040a21H
	DD	09640aH
	DD	085405H
	DD	imagerel fill_matrix_with_depth
	DD	imagerel fill_matrix_with_depth+56
	DD	imagerel $unwind$fill_matrix_with_depth
$chain$2$fill_matrix_with_depth DD 021H
	DD	imagerel fill_matrix_with_depth
	DD	imagerel fill_matrix_with_depth+56
	DD	imagerel $unwind$fill_matrix_with_depth
$unwind$os_luma_qt_pred DD 051b01H
	DD	0100a341bH
	DD	01008011bH
	DD	05006H
$unwind$ml_os_qt_gen DD 072501H
	DD	0180125H
	DD	0c018f01aH
	DD	030157016H
	DD	05014H
$chain$2$ml_os_qt_gen DD 061221H
	DD	015e412H
	DD	016d40bH
	DD	0176404H
	DD	imagerel ml_os_qt_gen
	DD	imagerel ml_os_qt_gen+196
	DD	imagerel $unwind$ml_os_qt_gen
$chain$3$ml_os_qt_gen DD 021H
	DD	imagerel ml_os_qt_gen
	DD	imagerel ml_os_qt_gen+196
	DD	imagerel $unwind$ml_os_qt_gen
$unwind$fill_depth_matrix_8 DD 040a01H
	DD	0f006320aH
	DD	03002e004H
$chain$2$fill_depth_matrix_8 DD 061221H
	DD	0a7412H
	DD	09640dH
	DD	085405H
	DD	imagerel fill_depth_matrix_8
	DD	imagerel fill_depth_matrix_8+36
	DD	imagerel $unwind$fill_depth_matrix_8
$chain$3$fill_depth_matrix_8 DD 021H
	DD	imagerel fill_depth_matrix_8
	DD	imagerel fill_depth_matrix_8+36
	DD	imagerel $unwind$fill_depth_matrix_8
$unwind$neighbor_constrain_bu DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$features_compute_all DD 0176b01H
	DD	0106b86bH
	DD	0107a858H
	DD	0108984dH
	DD	0109883cH
	DD	010a7830H
	DD	010b6825H
	DD	0221341dH
	DD	0218011dH
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
$unwind$features_var_of_sub_var DD 020601H
	DD	030021206H
$chain$0$features_var_of_sub_var DD 020421H
	DD	06804H
	DD	imagerel features_var_of_sub_var
	DD	imagerel features_var_of_sub_var+34
	DD	imagerel $unwind$features_var_of_sub_var
$chain$1$features_var_of_sub_var DD 021H
	DD	imagerel features_var_of_sub_var
	DD	imagerel features_var_of_sub_var+34
	DD	imagerel $unwind$features_var_of_sub_var
$unwind$features_merge_var DD 040601H
	DD	07004d006H
	DD	050026003H
$chain$3$features_merge_var DD 081821H
	DD	08f418H
	DD	07e413H
	DD	06c40eH
	DD	053405H
	DD	imagerel features_merge_var
	DD	imagerel features_merge_var+42
	DD	imagerel $unwind$features_merge_var
$chain$4$features_merge_var DD 021H
	DD	imagerel features_merge_var
	DD	imagerel features_merge_var+42
	DD	imagerel $unwind$features_merge_var
$unwind$features_sub_var DD 040601H
	DD	07004d006H
	DD	050026003H
$chain$3$features_sub_var DD 081821H
	DD	08f418H
	DD	07e413H
	DD	06c40eH
	DD	053405H
	DD	imagerel features_sub_var
	DD	imagerel features_sub_var+39
	DD	imagerel $unwind$features_sub_var
$chain$4$features_sub_var DD 021H
	DD	imagerel features_sub_var
	DD	imagerel features_sub_var+39
	DD	imagerel $unwind$features_sub_var
$unwind$features_compute DD 041801H
	DD	0110118H
	DD	0300fd011H
$chain$9$features_compute DD 0146b21H
	DD	02986bH
	DD	038859H
	DD	047842H
	DD	05683dH
	DD	0cf435H
	DD	0de427H
	DD	0ec422H
	DD	0f741dH
	DD	0106415H
	DD	0145408H
	DD	imagerel features_compute
	DD	imagerel features_compute+65
	DD	imagerel $unwind$features_compute
$chain$10$features_compute DD 021H
	DD	imagerel features_compute
	DD	imagerel features_compute+65
	DD	imagerel $unwind$features_compute
$unwind$features_get_var_of_sub_mean DD 030801H
	DD	06808H
	DD	02204H
$unwind$features_combine_var DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$features_var_avg_blck DD 0afb01H
	DD	01174fbH
	DD	01064f0H
	DD	012340eH
	DD	0f00ab20eH
	DD	05006e008H
$chain$3$features_var_avg_blck DD 040f21H
	DD	02980fH
	DD	038806H
	DD	imagerel features_var_avg_blck
	DD	imagerel features_var_avg_blck+257
	DD	imagerel $unwind$features_var_avg_blck
$chain$5$features_var_avg_blck DD 040e21H
	DD	04780eH
	DD	056805H
	DD	imagerel features_var_avg_blck+257
	DD	imagerel features_var_avg_blck+704
	DD	imagerel $chain$3$features_var_avg_blck
$chain$6$features_var_avg_blck DD 021H
	DD	imagerel features_var_avg_blck+257
	DD	imagerel features_var_avg_blck+704
	DD	imagerel $chain$3$features_var_avg_blck
$unwind$vect_variance_blck_int8 DD 061c01H
	DD	03881cH
	DD	010640aH
	DD	07006b20aH
$chain$1$vect_variance_blck_int8 DD 041121H
	DD	029811H
	DD	0e3405H
	DD	imagerel vect_variance_blck_int8
	DD	imagerel vect_variance_blck_int8+119
	DD	imagerel $unwind$vect_variance_blck_int8
$chain$4$vect_variance_blck_int8 DD 061621H
	DD	047816H
	DD	05680eH
	DD	0fe405H
	DD	imagerel vect_variance_blck_int8+119
	DD	imagerel vect_variance_blck_int8+236
	DD	imagerel $chain$1$vect_variance_blck_int8
$chain$5$vect_variance_blck_int8 DD 021H
	DD	imagerel vect_variance_blck_int8+119
	DD	imagerel vect_variance_blck_int8+236
	DD	imagerel $chain$1$vect_variance_blck_int8
$chain$6$vect_variance_blck_int8 DD 021H
	DD	imagerel vect_variance_blck_int8
	DD	imagerel vect_variance_blck_int8+119
	DD	imagerel $unwind$vect_variance_blck_int8
$unwind$vect_average_blck_int8 DD 066901H
	DD	077469H
	DD	063461H
	DD	060023206H
$chain$2$vect_average_blck_int8 DD 020521H
	DD	08e405H
	DD	imagerel vect_average_blck_int8
	DD	imagerel vect_average_blck_int8+202
	DD	imagerel $unwind$vect_average_blck_int8
$chain$3$vect_average_blck_int8 DD 021H
	DD	imagerel vect_average_blck_int8
	DD	imagerel vect_average_blck_int8+202
	DD	imagerel $unwind$vect_average_blck_int8
$unwind$kvz_lcu_luma_depth_pred DD 020601H
	DD	030023206H
$unwind$kvz_end_ml_intra_depth_const DD 020601H
	DD	030023206H
$unwind$kvz_init_ml_intra_depth_const DD 020601H
	DD	030023206H
	ORG $+2
$SG4294943318 DB '0', 00H, 00H, 00H
$SG4294943321 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294943324 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294943327 DB '0', 00H, 00H, 00H
$SG4294943330 DB '0', 00H, 00H, 00H
	ORG $+2
$SG4294943333 DB '0', 00H, 00H, 00H
	ORG $+14
$SG4294943319 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943320 DB 'null pointer as parameter.', 00H
	ORG $+5
$SG4294943322 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943323 DB 'null pointer as parameter.', 00H
	ORG $+5
$SG4294943325 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943326 DB 'null pointer as parameter.', 00H
	ORG $+5
$SG4294943328 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943329 DB 'Memory allocation failed!', 0aH, 00H
	ORG $+5
$SG4294943331 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943332 DB 'Memory allocation failed!', 0aH, 00H
	ORG $+5
$SG4294943334 DB 'F', 00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H
	DB	'_', 00H, '2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k'
	DB	00H, 'v', 00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H
	DB	'l', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, '_', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG4294943335 DB 'Memory allocation failed!', 0aH, 00H
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
kvz_init_ml_intra_depth_const PROC

; 827  : ml_intra_ctu_pred_t* kvz_init_ml_intra_depth_const() {

$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H

; 828  : 	ml_intra_ctu_pred_t* ml_intra_depth_ctu = NULL;
; 829  : 	// Allocate the ml_intra_ctu_pred_t strucutre
; 830  : 	ml_intra_depth_ctu = MALLOC(ml_intra_ctu_pred_t, 1);

	mov	ecx, 24
	call	QWORD PTR __imp_malloc
	mov	rbx, rax

; 831  : 	if (!ml_intra_depth_ctu) {

	test	rax, rax
	jne	SHORT $LN6@kvz_init_m

; 832  : 		fprintf(stderr, "Memory allocation failed!\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943335
	call	fprintf

; 833  : 		assert(0);

	mov	r8d, 833				; 00000341H
	lea	rdx, OFFSET FLAT:$SG4294943334
	lea	rcx, OFFSET FLAT:$SG4294943333
	call	QWORD PTR __imp__wassert
$LN6@kvz_init_m:

; 834  : 	}
; 835  : 	// Set the number of number of deth add to 1 by default
; 836  : 	ml_intra_depth_ctu->i_nb_addDepth = 1;
; 837  : 	// Set the extra Upper Expansion in the upper_depth enabled by default 
; 838  : 	ml_intra_depth_ctu->b_extra_up_exp = true;
; 839  : 
; 840  : 	// Allocate the depth matrices 
; 841  : 	ml_intra_depth_ctu->_mat_lower_depth = MALLOC(uint8_t, LCU_DEPTH_MAT_SIZE);

	mov	ecx, 64					; 00000040H
	mov	WORD PTR [rbx], 257			; 00000101H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rbx+16], rax

; 842  : 	if (!ml_intra_depth_ctu->_mat_lower_depth) {

	test	rax, rax
	jne	SHORT $LN7@kvz_init_m

; 843  : 		fprintf(stderr, "Memory allocation failed!\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943332
	call	fprintf

; 844  : 		assert(0);

	mov	r8d, 844				; 0000034cH
	lea	rdx, OFFSET FLAT:$SG4294943331
	lea	rcx, OFFSET FLAT:$SG4294943330
	call	QWORD PTR __imp__wassert
$LN7@kvz_init_m:

; 845  : 	}
; 846  : 	ml_intra_depth_ctu->_mat_upper_depth = MALLOC(uint8_t, LCU_DEPTH_MAT_SIZE);

	mov	ecx, 64					; 00000040H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR [rbx+8], rax

; 847  : 	if (!ml_intra_depth_ctu->_mat_upper_depth) {

	test	rax, rax
	jne	SHORT $LN9@kvz_init_m

; 848  : 		fprintf(stderr, "Memory allocation failed!\n");

	lea	ecx, QWORD PTR [rax+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943329
	call	fprintf

; 849  : 		assert(0);

	mov	r8d, 849				; 00000351H
	lea	rdx, OFFSET FLAT:$SG4294943328
	lea	rcx, OFFSET FLAT:$SG4294943327
	call	QWORD PTR __imp__wassert
$LN9@kvz_init_m:

; 850  : 	}
; 851  : 
; 852  : 	return ml_intra_depth_ctu;
; 853  : };

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
kvz_init_ml_intra_depth_const ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
ml_intra_depth_ctu$ = 48
kvz_end_ml_intra_depth_const PROC

; 858  : void kvz_end_ml_intra_depth_const(ml_intra_ctu_pred_t* ml_intra_depth_ctu) {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 859  : 	FREE_POINTER(ml_intra_depth_ctu->_mat_lower_depth);

	mov	rcx, QWORD PTR [rcx+16]
	call	QWORD PTR __imp_free

; 860  : 	FREE_POINTER(ml_intra_depth_ctu->_mat_upper_depth);

	mov	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR [rbx+16], 0
	call	QWORD PTR __imp_free

; 861  : 
; 862  : 	FREE_POINTER(ml_intra_depth_ctu);

	mov	rcx, rbx
	mov	QWORD PTR [rbx+8], 0

; 863  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 861  : 
; 862  : 	FREE_POINTER(ml_intra_depth_ctu);

	rex_jmp	QWORD PTR __imp_free
kvz_end_ml_intra_depth_const ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
ml_intra_depth_ctu$ = 48
luma_px$ = 56
qp$ = 64
kvz_lcu_luma_depth_pred PROC

; 1746 : void kvz_lcu_luma_depth_pred(ml_intra_ctu_pred_t* ml_intra_depth_ctu, kvz_pixel* luma_px, int8_t qp) {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 1747 : 
; 1748 : 	// Compute the one-shot (OS) Quad-tree prediction (_mat_OS_pred)
; 1749 : 	os_luma_qt_pred(ml_intra_depth_ctu, luma_px, qp, ml_intra_depth_ctu->_mat_upper_depth);

	mov	r9, QWORD PTR [rcx+8]
	mov	rbx, rcx
	call	os_luma_qt_pred

; 1750 : 
; 1751 : 	// Generate the interval of QT predictions around the first one
; 1752 : 	generate_interval_from_os_pred(ml_intra_depth_ctu, ml_intra_depth_ctu->_mat_upper_depth);

	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, rbx
	call	generate_interval_from_os_pred

; 1753 : 
; 1754 : 	// Apply the extra Upper Expansion pass
; 1755 : 	merge_matrix_64(ml_intra_depth_ctu->_mat_upper_depth, ml_intra_depth_ctu->_mat_upper_depth);

	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, rcx

; 1756 : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 1753 : 
; 1754 : 	// Apply the extra Upper Expansion pass
; 1755 : 	merge_matrix_64(ml_intra_depth_ctu->_mat_upper_depth, ml_intra_depth_ctu->_mat_upper_depth);

	jmp	merge_matrix_64
kvz_lcu_luma_depth_pred ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_merge_depth_1 PROC

; 38   : 		if (p_features->merge_variance <= 140.3129)

	movsd	xmm1, QWORD PTR [rcx+8]
	comisd	xmm1, QWORD PTR __real@40618a0346dc5d64
	ja	$LN2@tree_predi

; 39   : 		{
; 40   : 				if (p_features->var_of_sub_var <= 569.6553)

	movsd	xmm0, QWORD PTR __real@4081cd3e0ded288d
	comisd	xmm0, QWORD PTR [rcx+88]
	jb	$LN4@tree_predi

; 41   : 				{
; 42   : 						if (p_features->merge_variance <= 20.8854)

	comisd	xmm1, QWORD PTR __real@4034e2a9930be0df
	ja	SHORT $LN6@tree_predi

; 43   : 						{
; 44   : 								*p_nb_iter = 19428.0;

	mov	rax, 4671069541931941888		; 40d2f90000000000H
	mov	QWORD PTR [rdx], rax

; 45   : 								*p_nb_bad = 1740.0;

	mov	rax, 4655367416375672832		; 409b300000000000H
	mov	QWORD PTR [r8], rax

; 46   : 								return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN6@tree_predi:

; 47   : 						}
; 48   : 						else if (p_features->sub_variance_0 <= 9.1015)

	movsd	xmm0, QWORD PTR __real@402233f7ced91687
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN8@tree_predi

; 49   : 						{
; 50   : 								if (p_features->merge_variance <= 39.132)

	comisd	xmm1, QWORD PTR __real@404390e560418937
	ja	SHORT $LN10@tree_predi

; 51   : 								{
; 52   : 										*p_nb_iter = 1166.0;

	mov	rax, 4652842937678299136		; 4092380000000000H
	mov	QWORD PTR [rdx], rax

; 53   : 										*p_nb_bad = 358.0;

	mov	rax, 4645005618795511808		; 4076600000000000H
	mov	QWORD PTR [r8], rax

; 54   : 										return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN10@tree_predi:

; 55   : 								}
; 56   : 								else {
; 57   : 										*p_nb_iter = 1049.0;

	mov	rax, 4652328366236499968		; 4090640000000000H
	mov	QWORD PTR [rdx], rax

; 58   : 										*p_nb_bad = 392.0;

	mov	rax, 4645603753121021952		; 4078800000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN8@tree_predi:

; 59   : 										return 1.0000;
; 60   : 								}
; 61   : 						}
; 62   : 						else {
; 63   : 								*p_nb_iter = 9371.0;

	mov	rax, 4666377376060407808		; 40c24d8000000000H
	mov	QWORD PTR [rdx], rax

; 64   : 								*p_nb_bad = 1805.0;

	mov	rax, 4655653289398894592		; 409c340000000000H
	mov	QWORD PTR [r8], rax

; 65   : 								return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN4@tree_predi:

; 66   : 						}
; 67   : 				}
; 68   : 				else if (p_features->sub_variance_2 <= 23.3193)

	movsd	xmm0, QWORD PTR __real@403751bda5119ce0
	comisd	xmm0, QWORD PTR [rcx+32]
	jb	SHORT $LN12@tree_predi

; 69   : 				{
; 70   : 						*p_nb_iter = 1059.0;

	mov	rax, 4652372346701611008		; 40908c0000000000H
	mov	QWORD PTR [rdx], rax

; 71   : 						*p_nb_bad = 329.0;

	mov	rax, 4644495445400223744		; 4074900000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN12@tree_predi:

; 72   : 						return 1.0000;
; 73   : 				}
; 74   : 				else if (p_features->sub_variance_1 <= 30.7348)

	movsd	xmm0, QWORD PTR __real@403ebc1bda5119ce
	comisd	xmm0, QWORD PTR [rcx+24]
	jb	SHORT $LN14@tree_predi

; 75   : 				{
; 76   : 						*p_nb_iter = 1042.0;

	mov	rax, 4652297579910922240		; 4090480000000000H
	mov	QWORD PTR [rdx], rax

; 77   : 						*p_nb_bad = 395.0;

	mov	rax, 4645656529679155200		; 4078b00000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN14@tree_predi:

; 78   : 						return 1.0000;
; 79   : 				}
; 80   : 				else {
; 81   : 						*p_nb_iter = 1756.0;

	mov	rax, 4655437785119850496		; 409b700000000000H
	mov	QWORD PTR [rdx], rax

; 82   : 						*p_nb_bad = 588.0;

	mov	rax, 4648383318516039680		; 4082600000000000H
	mov	QWORD PTR [r8], rax

; 83   : 						return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN2@tree_predi:

; 84   : 				}
; 85   : 		}
; 86   : 		else if (p_features->merge_variance <= 857.8047)

	comisd	xmm1, QWORD PTR __real@408ace70068db8bb
	ja	$LN16@tree_predi

; 87   : 		{
; 88   : 				if (p_features->var_of_sub_var <= 66593.5553)

	movsd	xmm2, QWORD PTR [rcx+88]
	comisd	xmm2, QWORD PTR __real@40f04218e28240b8
	ja	$LN18@tree_predi

; 89   : 				{
; 90   : 						if (p_features->sub_variance_0 <= 12.1697)

	movsd	xmm0, QWORD PTR __real@402856e2eb1c432d
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN20@tree_predi

; 91   : 						{
; 92   : 								*p_nb_iter = 2006.0;

	mov	rax, 4656537296747626496		; 409f580000000000H
	mov	QWORD PTR [rdx], rax

; 93   : 								*p_nb_bad = 374.0;

	mov	rax, 4645287093772222464		; 4077600000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN20@tree_predi:

; 94   : 								return 1.0000;
; 95   : 						}
; 96   : 						else if (p_features->neigh_variance_C <= 646.8204)

	movsd	xmm0, QWORD PTR __real@408436902de00d1b
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	$LN22@tree_predi

; 97   : 						{
; 98   : 								if (p_features->neigh_variance_A <= 664.7609)

	movsd	xmm1, QWORD PTR [rcx+48]
	comisd	xmm1, QWORD PTR __real@4084c61652bd3c36
	ja	$LN24@tree_predi

; 99   : 								{
; 100  : 										if (p_features->neigh_variance_B <= 571.2004)

	movsd	xmm0, QWORD PTR __real@4081d99a6b50b0f2
	comisd	xmm0, QWORD PTR [rcx+56]
	jb	$LN26@tree_predi

; 101  : 										{
; 102  : 												if (p_features->var_of_sub_mean <= 4.1069)

	movsd	xmm0, QWORD PTR __real@40106d77318fc505
	comisd	xmm0, QWORD PTR [rcx+72]
	jb	SHORT $LN28@tree_predi

; 103  : 												{
; 104  : 														*p_nb_iter = 1208.0;

	mov	rax, 4653027655631765504		; 4092e00000000000H
	mov	QWORD PTR [rdx], rax

; 105  : 														*p_nb_bad = 399.0;

	mov	rax, 4645726898423332864		; 4078f00000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN28@tree_predi:

; 106  : 														return 1.0000;
; 107  : 												}
; 108  : 												else if (p_features->var_of_sub_var <= 11832.6635)

	comisd	xmm2, QWORD PTR __real@40c71c54ed916873
	ja	SHORT $LN30@tree_predi

; 109  : 												{
; 110  : 														*p_nb_iter = 8701.0;

	mov	rax, 4666009039665102848		; 40c0fe8000000000H
	mov	QWORD PTR [rdx], rax

; 111  : 														*p_nb_bad = 3037.0;

	mov	rax, 4658896848700833792		; 40a7ba0000000000H
	mov	QWORD PTR [r8], rax

; 112  : 														return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN30@tree_predi:

; 113  : 												}
; 114  : 												else if (p_features->neigh_variance_A <= 142.298)

	comisd	xmm1, QWORD PTR __real@4061c989374bc6a8
	ja	SHORT $LN32@tree_predi

; 115  : 												{
; 116  : 														*p_nb_iter = 1025.0;

	mov	rax, 4652222813120233472		; 4090040000000000H
	mov	QWORD PTR [rdx], rax

; 117  : 														*p_nb_bad = 290.0;

	mov	rax, 4643809350144491520		; 4072200000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN32@tree_predi:

; 118  : 														return 1.0000;
; 119  : 												}
; 120  : 												else if (p_features->variance <= 394.4839)

	movsd	xmm0, QWORD PTR __real@4078a7be0ded288d
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN34@tree_predi

; 121  : 												{
; 122  : 														*p_nb_iter = 1156.0;

	mov	rax, 4652798957213188096		; 4092100000000000H
	mov	QWORD PTR [rdx], rax

; 123  : 														*p_nb_bad = 489.0;

	mov	rax, 4647310195167330304		; 407e900000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN34@tree_predi:

; 124  : 														return 1.0000;
; 125  : 												}
; 126  : 												else {
; 127  : 														*p_nb_iter = 1150.0;

	mov	rax, 4652772568934121472		; 4091f80000000000H
	mov	QWORD PTR [rdx], rax

; 128  : 														*p_nb_bad = 503.0;

	mov	rax, 4647556485771952128		; 407f700000000000H
	mov	QWORD PTR [r8], rax

; 129  : 														return -1.0000;

	mov	eax, -1

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	ret	0
$LN26@tree_predi:

; 130  : 												}
; 131  : 										}
; 132  : 										else {
; 133  : 												*p_nb_iter = 1777.0;

	mov	rax, 4655530144096583680		; 409bc40000000000H
	mov	QWORD PTR [rdx], rax

; 134  : 												*p_nb_bad = 558.0;

	mov	rax, 4648119435725373440		; 4081700000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN24@tree_predi:

; 135  : 												return 1.0000;
; 136  : 										}
; 137  : 								}
; 138  : 								else {
; 139  : 										*p_nb_iter = 1587.0;

	mov	rax, 4654694515259473920		; 4098cc0000000000H
	mov	QWORD PTR [rdx], rax

; 140  : 										*p_nb_bad = 411.0;

	mov	rax, 4645938004655865856		; 4079b00000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN22@tree_predi:

; 141  : 										return 1.0000;
; 142  : 								}
; 143  : 						}
; 144  : 						else {
; 145  : 								*p_nb_iter = 1980.0;

	mov	rax, 4656422947538337792		; 409ef00000000000H
	mov	QWORD PTR [rdx], rax

; 146  : 								*p_nb_bad = 474.0;

	mov	rax, 4647046312376664064		; 407da00000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN18@tree_predi:

; 147  : 								return 1.0000;
; 148  : 						}
; 149  : 				}
; 150  : 				else {
; 151  : 						*p_nb_iter = 3613.0;

	mov	rax, 4660163486096031744		; 40ac3a0000000000H
	mov	QWORD PTR [rdx], rax

; 152  : 						*p_nb_bad = 475.0;

	mov	rax, 4647063904562708480		; 407db00000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
$LN16@tree_predi:

; 153  : 						return 1.0000;
; 154  : 				}
; 155  : 		}
; 156  : 		else {
; 157  : 				*p_nb_iter = 20926.0;

	mov	rax, 4671481309036544000		; 40d46f8000000000H
	mov	QWORD PTR [rdx], rax

; 158  : 				*p_nb_bad = 1873.0;

	mov	rax, 4655952356561649664		; 409d440000000000H

; 159  : 				return 1.0000;
; 160  : 		}
; 161  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 1
	ret	0
tree_predict_merge_depth_1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_merge_depth_2 PROC

; 167  : 		if (p_features->merge_variance <= 119.4611)

	movsd	xmm0, QWORD PTR [rcx+8]
	comisd	xmm0, QWORD PTR __real@405ddd82a9930be1
	ja	$LN2@tree_predi

; 168  : 		{
; 169  : 				if (p_features->var_of_sub_var <= 1078.0638)

	movsd	xmm0, QWORD PTR [rcx+88]
	comisd	xmm0, QWORD PTR __real@4090d84154c985f0
	ja	SHORT $LN4@tree_predi

; 170  : 				{
; 171  : 						if (p_features->neigh_variance_B <= 70.2189)

	movsd	xmm0, QWORD PTR __real@40518e027525460b
	comisd	xmm0, QWORD PTR [rcx+56]
	jb	SHORT $LN6@tree_predi

; 172  : 						{
; 173  : 								*p_nb_iter = 29253.0;

	mov	rax, 4673770217367666688		; 40dc914000000000H
	mov	QWORD PTR [rdx], rax

; 174  : 								*p_nb_bad = 3837.0;

	mov	rax, 4660656067305275392		; 40adfa0000000000H
	mov	QWORD PTR [r8], rax

; 175  : 								return -1.0000;

	mov	eax, -1

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	ret	0
$LN6@tree_predi:

; 176  : 						}
; 177  : 						else if (p_features->variance <= 20.8711)

	movsd	xmm0, QWORD PTR __real@4034df0068db8bac
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN8@tree_predi

; 178  : 						{
; 179  : 								*p_nb_iter = 1292.0;

	mov	rax, 4653397091538698240		; 4094300000000000H
	mov	QWORD PTR [rdx], rax

; 180  : 								*p_nb_bad = 458.0;

	mov	rax, 4646764837399953408		; 407ca00000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN8@tree_predi:

; 181  : 								return 2.0000;
; 182  : 						}
; 183  : 						else {
; 184  : 								*p_nb_iter = 1707.0;

	mov	rax, 4655222280840806400		; 409aac0000000000H
	mov	QWORD PTR [rdx], rax

; 185  : 								*p_nb_bad = 399.0;

	mov	rax, 4645726898423332864		; 4078f00000000000H
	mov	QWORD PTR [r8], rax

; 186  : 								return -1.0000;

	mov	eax, -1

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	ret	0
$LN4@tree_predi:

; 187  : 						}
; 188  : 				}
; 189  : 				else if (p_features->var_of_sub_var <= 3300.4034)

	comisd	xmm0, QWORD PTR __real@40a9c8ce8a71de6a
	ja	SHORT $LN10@tree_predi

; 190  : 				{
; 191  : 						*p_nb_iter = 1554.0;

	mov	rax, 4654549379724607488		; 4098480000000000H
	mov	QWORD PTR [rdx], rax

; 192  : 						*p_nb_bad = 675.0;

	mov	rax, 4649148578608971776		; 4085180000000000H
	mov	QWORD PTR [r8], rax

; 193  : 						return -1.0000;

	mov	eax, -1

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	ret	0
$LN10@tree_predi:

; 194  : 				}
; 195  : 				else {
; 196  : 						*p_nb_iter = 1540.0;

	mov	rax, 4654487807073452032		; 4098100000000000H
	mov	QWORD PTR [rdx], rax

; 197  : 						*p_nb_bad = 429.0;

	mov	rax, 4646254664004665344		; 407ad00000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN2@tree_predi:

; 198  : 						return 2.0000;
; 199  : 				}
; 200  : 		}
; 201  : 		else if (p_features->merge_variance <= 696.1989)

	comisd	xmm0, QWORD PTR __real@4085c19758e21965
	ja	$LN12@tree_predi

; 202  : 		{
; 203  : 				if (p_features->var_of_sub_var <= 31803.3242)

	movsd	xmm0, QWORD PTR __real@40df0ed4bfb15b57
	comisd	xmm0, QWORD PTR [rcx+88]
	jb	$LN14@tree_predi

; 204  : 				{
; 205  : 						if (p_features->sub_variance_2 <= 10.3845)

	movsd	xmm0, QWORD PTR __real@4024c4dd2f1a9fbe
	comisd	xmm0, QWORD PTR [rcx+32]
	jb	SHORT $LN16@tree_predi

; 206  : 						{
; 207  : 								*p_nb_iter = 3473.0;

	mov	rax, 4659855622840254464		; 40ab220000000000H
	mov	QWORD PTR [rdx], rax

; 208  : 								*p_nb_bad = 768.0;

	mov	rax, 4649966615260037120		; 4088000000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN16@tree_predi:

; 209  : 								return 2.0000;
; 210  : 						}
; 211  : 						else if (p_features->neigh_variance_C <= 571.5329)

	movsd	xmm0, QWORD PTR __real@4081dc436113404f
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	$LN18@tree_predi

; 212  : 						{
; 213  : 								if (p_features->neigh_variance_B <= 492.8159)

	movsd	xmm0, QWORD PTR [rcx+56]
	comisd	xmm0, QWORD PTR __real@407ecd0ded288ce7
	ja	$LN20@tree_predi

; 214  : 								{
; 215  : 										if (p_features->neigh_variance_B <= 38.9672)

	comisd	xmm0, QWORD PTR __real@40437bcd35a85879
	ja	SHORT $LN22@tree_predi

; 216  : 										{
; 217  : 												*p_nb_iter = 1887.0;

	mov	rax, 4656013929212805120		; 409d7c0000000000H
	mov	QWORD PTR [rdx], rax

; 218  : 												*p_nb_bad = 588.0;

	mov	rax, 4648383318516039680		; 4082600000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN22@tree_predi:

; 219  : 												return 2.0000;
; 220  : 										}
; 221  : 										else if (p_features->neigh_variance_A <= 380.5927)

	movsd	xmm1, QWORD PTR [rcx+48]
	comisd	xmm1, QWORD PTR __real@4077c97bb2fec56d
	ja	SHORT $LN24@tree_predi

; 222  : 										{
; 223  : 												if (p_features->sub_variance_1 <= 19.9678)

	movsd	xmm0, QWORD PTR __real@4033f7c1bda5119d
	comisd	xmm0, QWORD PTR [rcx+24]
	jb	SHORT $LN26@tree_predi

; 224  : 												{
; 225  : 														*p_nb_iter = 1686.0;

	mov	rax, 4655129921864073216		; 409a580000000000H
	mov	QWORD PTR [rdx], rax

; 226  : 														*p_nb_bad = 721.0;

	mov	rax, 4649553198887993344		; 4086880000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN26@tree_predi:

; 227  : 														return 2.0000;
; 228  : 												}
; 229  : 												else if (p_features->neigh_variance_A <= 66.6749)

	comisd	xmm1, QWORD PTR __real@4050ab318fc50481
	ja	SHORT $LN28@tree_predi

; 230  : 												{
; 231  : 														*p_nb_iter = 1440.0;

	mov	rax, 4654048002422341632		; 4096800000000000H
	mov	QWORD PTR [rdx], rax

; 232  : 														*p_nb_bad = 631.0;

	mov	rax, 4648761550515994624		; 4083b80000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN28@tree_predi:

; 233  : 														return 2.0000;
; 234  : 												}
; 235  : 												else {
; 236  : 														*p_nb_iter = 5772.0;

	mov	rax, 4663068395816615936		; 40b68c0000000000H
	mov	QWORD PTR [rdx], rax

; 237  : 														*p_nb_bad = 2031.0;

	mov	rax, 4656647247910404096		; 409fbc0000000000H
	mov	QWORD PTR [r8], rax

; 238  : 														return -1.0000;

	mov	eax, -1

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	ret	0
$LN24@tree_predi:

; 239  : 												}
; 240  : 										}
; 241  : 										else {
; 242  : 												*p_nb_iter = 1791.0;

	mov	rax, 4655591716747739136		; 409bfc0000000000H
	mov	QWORD PTR [rdx], rax

; 243  : 												*p_nb_bad = 619.0;

	mov	rax, 4648655997399728128		; 4083580000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN20@tree_predi:

; 244  : 												return 2.0000;
; 245  : 										}
; 246  : 								}
; 247  : 								else {
; 248  : 										*p_nb_iter = 1624.0;

	mov	rax, 4654857242980384768		; 4099600000000000H
	mov	QWORD PTR [rdx], rax

; 249  : 										*p_nb_bad = 494.0;

	mov	rax, 4647398156097552384		; 407ee00000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN18@tree_predi:

; 250  : 										return 2.0000;
; 251  : 								}
; 252  : 						}
; 253  : 						else {
; 254  : 								*p_nb_iter = 1298.0;

	mov	rax, 4653423479817764864		; 4094480000000000H
	mov	QWORD PTR [rdx], rax

; 255  : 								*p_nb_bad = 312.0;

	mov	rax, 4644196378237468672		; 4073800000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN14@tree_predi:

; 256  : 								return 2.0000;
; 257  : 						}
; 258  : 				}
; 259  : 				else {
; 260  : 						*p_nb_iter = 4577.0;

	mov	rax, 4661754479421423616		; 40b1e10000000000H
	mov	QWORD PTR [rdx], rax

; 261  : 						*p_nb_bad = 892.0;

	mov	rax, 4651057330794790912		; 408be00000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
$LN12@tree_predi:

; 262  : 						return 2.0000;
; 263  : 				}
; 264  : 		}
; 265  : 		else {
; 266  : 				*p_nb_iter = 21106.0;

	mov	rax, 4671530787059793920		; 40d49c8000000000H
	mov	QWORD PTR [rdx], rax

; 267  : 				*p_nb_bad = 2744.0;

	mov	rax, 4658252534886957056		; 40a5700000000000H

; 268  : 				return 2.0000;
; 269  : 		}
; 270  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 2
	ret	0
tree_predict_merge_depth_2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_merge_depth_3 PROC

; 276  : 		if (p_features->merge_variance <= 80.1487)

	movsd	xmm0, QWORD PTR [rcx+8]
	comisd	xmm0, QWORD PTR __real@405409844d013a93
	ja	SHORT $LN2@tree_predi

; 277  : 		{
; 278  : 				if (p_features->neigh_variance_C <= 83.7148)

	movsd	xmm0, QWORD PTR __real@4054edbf487fcb92
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	SHORT $LN4@tree_predi

; 279  : 				{
; 280  : 						*p_nb_iter = 29806.0;

	mov	rax, 4673922224850206720		; 40dd1b8000000000H
	mov	QWORD PTR [rdx], rax

; 281  : 						*p_nb_bad = 3603.0;

	mov	rax, 4660141495863476224		; 40ac260000000000H
	mov	QWORD PTR [r8], rax

; 282  : 						return -1.0000;

	mov	eax, -1

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	ret	0
$LN4@tree_predi:

; 283  : 				}
; 284  : 				else {
; 285  : 						*p_nb_iter = 1003.0;

	mov	rax, 4652033697120256000		; 408f580000000000H
	mov	QWORD PTR [rdx], rax

; 286  : 						*p_nb_bad = 421.0;

	mov	rax, 4646113926516310016		; 407a500000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN2@tree_predi:

; 287  : 						return 3.0000;
; 288  : 				}
; 289  : 		}
; 290  : 		else if (p_features->merge_variance <= 351.8138)

	comisd	xmm0, QWORD PTR __real@4075fd05532617c2
	ja	$LN6@tree_predi

; 291  : 		{
; 292  : 				if (p_features->neigh_variance_C <= 255.4236)

	movsd	xmm0, QWORD PTR __real@406fed8e219652bd
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	$LN8@tree_predi

; 293  : 				{
; 294  : 						if (p_features->neigh_variance_B <= 260.5349)

	movsd	xmm1, QWORD PTR [rcx+56]
	comisd	xmm1, QWORD PTR __real@4070488ef34d6a16
	ja	$LN10@tree_predi

; 295  : 						{
; 296  : 								if (p_features->var_of_sub_var <= 6381.513)

	movsd	xmm0, QWORD PTR __real@40b8ed8353f7ced9
	comisd	xmm0, QWORD PTR [rcx+88]
	jb	$LN12@tree_predi

; 297  : 								{
; 298  : 										if (p_features->neigh_variance_A <= 244.2556)

	movsd	xmm0, QWORD PTR __real@406e882de00d1b71
	comisd	xmm0, QWORD PTR [rcx+48]
	jb	SHORT $LN14@tree_predi

; 299  : 										{
; 300  : 												if (p_features->sub_variance_0 <= 4.75)

	movsd	xmm0, QWORD PTR __real@4013000000000000
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN16@tree_predi

; 301  : 												{
; 302  : 														*p_nb_iter = 1290.0;

	mov	rax, 4653388295445676032		; 4094280000000000H
	mov	QWORD PTR [rdx], rax

; 303  : 														*p_nb_bad = 525.0;

	mov	rax, 4647829164655640576		; 4080680000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN16@tree_predi:

; 304  : 														return 3.0000;
; 305  : 												}
; 306  : 												else if (p_features->neigh_variance_B <= 16.9287)

	comisd	xmm1, QWORD PTR __real@4030edbf487fcb92
	ja	SHORT $LN18@tree_predi

; 307  : 												{
; 308  : 														*p_nb_iter = 1045.0;

	mov	rax, 4652310774050455552		; 4090540000000000H
	mov	QWORD PTR [rdx], rax

; 309  : 														*p_nb_bad = 499.0;

	mov	rax, 4647486117027774464		; 407f300000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN18@tree_predi:

; 310  : 														return 3.0000;
; 311  : 												}
; 312  : 												else {
; 313  : 														*p_nb_iter = 6901.0;

	mov	rax, 4664309744444375040		; 40baf50000000000H
	mov	QWORD PTR [rdx], rax

; 314  : 														*p_nb_bad = 2494.0;

	mov	rax, 4657702779073069056		; 40a37c0000000000H
	mov	QWORD PTR [r8], rax

; 315  : 														return -1.0000;

	mov	eax, -1

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	ret	0
$LN14@tree_predi:

; 316  : 												}
; 317  : 										}
; 318  : 										else {
; 319  : 												*p_nb_iter = 1332.0;

	mov	rax, 4653573013399142400		; 4094d00000000000H
	mov	QWORD PTR [rdx], rax

; 320  : 												*p_nb_bad = 408.0;

	mov	rax, 4645885228097732608		; 4079800000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN12@tree_predi:

; 321  : 												return 3.0000;
; 322  : 										}
; 323  : 								}
; 324  : 								else {
; 325  : 										*p_nb_iter = 2929.0;

	mov	rax, 4658659354189234176		; 40a6e20000000000H
	mov	QWORD PTR [rdx], rax

; 326  : 										*p_nb_bad = 842.0;

	mov	rax, 4650617526143680512		; 408a500000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN10@tree_predi:

; 327  : 										return 3.0000;
; 328  : 								}
; 329  : 						}
; 330  : 						else {
; 331  : 								*p_nb_iter = 2239.0;

	mov	rax, 4657142028142903296		; 40a17e0000000000H
	mov	QWORD PTR [rdx], rax

; 332  : 								*p_nb_bad = 572.0;

	mov	rax, 4648242581027684352		; 4081e00000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN8@tree_predi:

; 333  : 								return 3.0000;
; 334  : 						}
; 335  : 				}
; 336  : 				else {
; 337  : 						*p_nb_iter = 2777.0;

	mov	rax, 4658325102654390272		; 40a5b20000000000H
	mov	QWORD PTR [rdx], rax

; 338  : 						*p_nb_bad = 714.0;

	mov	rax, 4649491626236837888		; 4086500000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
$LN6@tree_predi:

; 339  : 						return 3.0000;
; 340  : 				}
; 341  : 		}
; 342  : 		else {
; 343  : 				*p_nb_iter = 30678.0;

	mov	rax, 4674161918385061888		; 40ddf58000000000H
	mov	QWORD PTR [rdx], rax

; 344  : 				*p_nb_bad = 5409.0;

	mov	rax, 4662669273095733248		; 40b5210000000000H

; 345  : 				return 3.0000;
; 346  : 		}
; 347  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 3
	ret	0
tree_predict_merge_depth_3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_merge_depth_4 PROC

; 353  : 		if (p_features->neigh_variance_C <= 240.2773)

	movsd	xmm2, QWORD PTR [rcx+64]
	comisd	xmm2, QWORD PTR __real@406e08dfa43fe5c9
	ja	$LN2@tree_predi

; 354  : 		{
; 355  : 				if (p_features->neigh_variance_B <= 227.5898)

	movsd	xmm1, QWORD PTR [rcx+56]
	comisd	xmm1, QWORD PTR __real@406c72dfa43fe5c9
	ja	$LN4@tree_predi

; 356  : 				{
; 357  : 						if (p_features->neigh_variance_A <= 195.4844)

	movsd	xmm0, QWORD PTR __real@40686f80346dc5d6
	comisd	xmm0, QWORD PTR [rcx+48]
	jb	$LN6@tree_predi

; 358  : 						{
; 359  : 								if (p_features->variance <= 203.3086)

	movsd	xmm0, QWORD PTR [rcx]
	comisd	xmm0, QWORD PTR __real@406969e00d1b7176
	ja	$LN8@tree_predi

; 360  : 								{
; 361  : 										if (p_features->qp <= 32)

	cmp	DWORD PTR [rcx+80], 32			; 00000020H
	jg	$LN10@tree_predi

; 362  : 										{
; 363  : 												if (p_features->neigh_variance_C <= 102.2344)

	comisd	xmm2, QWORD PTR __real@40598f0068db8bac
	ja	SHORT $LN12@tree_predi

; 364  : 												{
; 365  : 														if (p_features->neigh_variance_B <= 116.4961)

	comisd	xmm1, QWORD PTR __real@405d1fc01a36e2eb
	ja	SHORT $LN14@tree_predi

; 366  : 														{
; 367  : 																if (p_features->variance <= 89.4023)

	comisd	xmm0, QWORD PTR __real@405659bf487fcb92
	ja	SHORT $LN16@tree_predi

; 368  : 																{
; 369  : 																		*p_nb_iter = 27398.0;

	mov	rax, 4673260318850285568		; 40dac18000000000H
	mov	QWORD PTR [rdx], rax

; 370  : 																		*p_nb_bad = 4665.0;

	mov	rax, 4661851236444667904		; 40b2390000000000H
	mov	QWORD PTR [r8], rax

; 371  : 																		return -1.0000;

	mov	eax, -1

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	ret	0
$LN16@tree_predi:

; 372  : 																}
; 373  : 																else {
; 374  : 																		*p_nb_iter = 1676.0;

	mov	rax, 4655085941398962176		; 409a300000000000H
	mov	QWORD PTR [rdx], rax

; 375  : 																		*p_nb_bad = 795.0;

	mov	rax, 4650204109771636736		; 4088d80000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN14@tree_predi:

; 376  : 																		return 4.0000;
; 377  : 																}
; 378  : 														}
; 379  : 														else {
; 380  : 																*p_nb_iter = 1405.0;

	mov	rax, 4653894070794452992		; 4095f40000000000H
	mov	QWORD PTR [rdx], rax

; 381  : 																*p_nb_bad = 566.0;

	mov	rax, 4648189804469551104		; 4081b00000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN12@tree_predi:

; 382  : 																return 4.0000;
; 383  : 														}
; 384  : 												}
; 385  : 												else {
; 386  : 														*p_nb_iter = 2827.0;

	mov	rax, 4658435053817167872		; 40a6160000000000H
	mov	QWORD PTR [rdx], rax

; 387  : 														*p_nb_bad = 1173.0;

	mov	rax, 4652873724003876864		; 4092540000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN10@tree_predi:

; 388  : 														return 4.0000;
; 389  : 												}
; 390  : 										}
; 391  : 										else {
; 392  : 												*p_nb_iter = 8871.0;

	mov	rax, 4666102498153463808		; 40c1538000000000H
	mov	QWORD PTR [rdx], rax

; 393  : 												*p_nb_bad = 822.0;

	mov	rax, 4650441604283236352		; 4089b00000000000H
	mov	QWORD PTR [r8], rax

; 394  : 												return -1.0000;

	mov	eax, -1

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	ret	0
$LN8@tree_predi:

; 395  : 										}
; 396  : 								}
; 397  : 								else {
; 398  : 										*p_nb_iter = 3162.0;

	mov	rax, 4659171726607777792		; 40a8b40000000000H
	mov	QWORD PTR [rdx], rax

; 399  : 										*p_nb_bad = 718.0;

	mov	rax, 4649526810608926720		; 4086700000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN6@tree_predi:

; 400  : 										return 4.0000;
; 401  : 								}
; 402  : 						}
; 403  : 						else {
; 404  : 								*p_nb_iter = 6154.0;

	mov	rax, 4663488409258426368		; 40b80a0000000000H
	mov	QWORD PTR [rdx], rax

; 405  : 								*p_nb_bad = 1397.0;

	mov	rax, 4653858886422364160		; 4095d40000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN4@tree_predi:

; 406  : 								return 4.0000;
; 407  : 						}
; 408  : 				}
; 409  : 				else {
; 410  : 						*p_nb_iter = 9385.0;

	mov	rax, 4666385072641802240		; 40c2548000000000H
	mov	QWORD PTR [rdx], rax

; 411  : 						*p_nb_bad = 1609.0;

	mov	rax, 4654791272282718208		; 4099240000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
$LN2@tree_predi:

; 412  : 						return 4.0000;
; 413  : 				}
; 414  : 		}
; 415  : 		else {
; 416  : 				*p_nb_iter = 19122.0;

	mov	rax, 4670985429292417024		; 40d2ac8000000000H
	mov	QWORD PTR [rdx], rax

; 417  : 				*p_nb_bad = 2960.0;

	mov	rax, 4658727523910156288		; 40a7200000000000H

; 418  : 				return 4.0000;
; 419  : 		}
; 420  : }

	mov	QWORD PTR [r8], rax
	mov	eax, 4
	ret	0
tree_predict_merge_depth_4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_split_depth_0 PROC

; 426  : 		if (p_features->var_of_sub_var <= 12754.7856)

	movsd	xmm1, QWORD PTR [rcx+88]
	comisd	xmm1, QWORD PTR __real@40c8e9648e8a71de
	ja	$LN2@tree_predi

; 427  : 		{
; 428  : 				if (p_features->var_of_sub_var <= 137.9034)

	comisd	xmm1, QWORD PTR __real@40613ce8a71de69b
	ja	SHORT $LN4@tree_predi

; 429  : 				{
; 430  : 						*p_nb_iter = 25155.0;

	mov	rax, 4672643767705010176		; 40d890c000000000H
	mov	QWORD PTR [rdx], rax

; 431  : 						*p_nb_bad = 2959.0;

	mov	rax, 4658725324886900736		; 40a71e0000000000H
	mov	QWORD PTR [r8], rax

; 432  : 						return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN4@tree_predi:

; 433  : 				}
; 434  : 				else if (p_features->sub_variance_2 <= 13.2892)

	movsd	xmm0, QWORD PTR __real@402a941205bc01a3
	comisd	xmm0, QWORD PTR [rcx+32]
	jb	SHORT $LN6@tree_predi

; 435  : 				{
; 436  : 						*p_nb_iter = 1080.0;

	mov	rax, 4652464705678344192		; 4090e00000000000H
	mov	QWORD PTR [rdx], rax

; 437  : 						*p_nb_bad = 383.0;

	mov	rax, 4645445423446622208		; 4077f00000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN6@tree_predi:

; 438  : 						return -1.0000;
; 439  : 				}
; 440  : 				else if (p_features->variance <= 564.1738)

	movsd	xmm0, QWORD PTR __real@4081a163f141205c
	comisd	xmm0, QWORD PTR [rcx]
	jb	$LN8@tree_predi

; 441  : 				{
; 442  : 						if (p_features->var_of_sub_var <= 1185.4728)

	comisd	xmm1, QWORD PTR __real@409285e425aee632
	ja	SHORT $LN10@tree_predi

; 443  : 						{
; 444  : 								*p_nb_iter = 6067.0;

	mov	rax, 4663392751746809856		; 40b7b30000000000H
	mov	QWORD PTR [rdx], rax

; 445  : 								*p_nb_bad = 1699.0;

	mov	rax, 4655187096468717568		; 409a8c0000000000H
	mov	QWORD PTR [r8], rax

; 446  : 								return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN10@tree_predi:

; 447  : 						}
; 448  : 						else if (p_features->var_of_sub_mean <= 46.2388)

	movsd	xmm0, QWORD PTR __real@40471e90ff972474
	comisd	xmm0, QWORD PTR [rcx+72]
	jb	SHORT $LN12@tree_predi

; 449  : 						{
; 450  : 								if (p_features->sub_variance_0 <= 46.8708)

	movsd	xmm0, QWORD PTR __real@40476f765fd8adac
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN14@tree_predi

; 451  : 								{
; 452  : 										*p_nb_iter = 1088.0;

	mov	rax, 4652499890050433024		; 4091000000000000H
	mov	QWORD PTR [rdx], rax

; 453  : 										*p_nb_bad = 377.0;

	mov	rax, 4645339870330355712		; 4077900000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN14@tree_predi:

; 454  : 										return -1.0000;
; 455  : 								}
; 456  : 								else if (p_features->sub_variance_3 <= 61.4213)

	movsd	xmm0, QWORD PTR __real@404eb5ed288ce704
	comisd	xmm0, QWORD PTR [rcx+40]
	jb	SHORT $LN16@tree_predi

; 457  : 								{
; 458  : 										*p_nb_iter = 1183.0;

	mov	rax, 4652917704468987904		; 40927c0000000000H
	mov	QWORD PTR [rdx], rax

; 459  : 										*p_nb_bad = 498.0;

	mov	rax, 4647468524841730048		; 407f200000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN16@tree_predi:

; 460  : 										return -1.0000;
; 461  : 								}
; 462  : 								else {
; 463  : 										*p_nb_iter = 3416.0;

	mov	rax, 4659730278514688000		; 40aab00000000000H
	mov	QWORD PTR [rdx], rax

; 464  : 										*p_nb_bad = 1373.0;

	mov	rax, 4653753333306097664		; 4095740000000000H
	mov	QWORD PTR [r8], rax

; 465  : 										return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN12@tree_predi:

; 466  : 								}
; 467  : 						}
; 468  : 						else {
; 469  : 								*p_nb_iter = 3769.0;

	mov	rax, 4660506533723897856		; 40ad720000000000H
	mov	QWORD PTR [rdx], rax

; 470  : 								*p_nb_bad = 1093.0;

	mov	rax, 4652521880282988544		; 4091140000000000H
	mov	QWORD PTR [r8], rax

; 471  : 								return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN8@tree_predi:

; 472  : 						}
; 473  : 				}
; 474  : 				else {
; 475  : 						*p_nb_iter = 1036.0;

	mov	rax, 4652271191631855616		; 4090300000000000H
	mov	QWORD PTR [rdx], rax

; 476  : 						*p_nb_bad = 434.0;

	mov	rax, 4646342624934887424		; 407b200000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN2@tree_predi:

; 477  : 						return -1.0000;
; 478  : 				}
; 479  : 		}
; 480  : 		else if (p_features->var_of_sub_var <= 98333.8279)

	comisd	xmm1, QWORD PTR __real@40f801dd3f141206
	ja	$LN18@tree_predi

; 481  : 		{
; 482  : 				if (p_features->variance <= 987.2333)

	movsd	xmm0, QWORD PTR [rcx]
	comisd	xmm0, QWORD PTR __real@408ed9ddcc63f141
	ja	$LN20@tree_predi

; 483  : 				{
; 484  : 						if (p_features->var_of_sub_var <= 37261.2896)

	comisd	xmm1, QWORD PTR __real@40e231a94467381d
	ja	$LN22@tree_predi

; 485  : 						{
; 486  : 								if (p_features->variance <= 238.2248)

	comisd	xmm0, QWORD PTR __real@406dc7318fc50481
	ja	SHORT $LN24@tree_predi

; 487  : 								{
; 488  : 										*p_nb_iter = 1323.0;

	mov	rax, 4653533430980542464		; 4094ac0000000000H
	mov	QWORD PTR [rdx], rax

; 489  : 										*p_nb_bad = 301.0;

	mov	rax, 4644002864190980096		; 4072d00000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN24@tree_predi:

; 490  : 										return -1.0000;
; 491  : 								}
; 492  : 								else if (p_features->var_of_sub_var <= 17347.3971)

	comisd	xmm1, QWORD PTR __real@40d0f0d96a161e4f
	ja	SHORT $LN26@tree_predi

; 493  : 								{
; 494  : 										*p_nb_iter = 1215.0;

	mov	rax, 4653058441957343232		; 4092fc0000000000H
	mov	QWORD PTR [rdx], rax

; 495  : 										*p_nb_bad = 550.0;

	mov	rax, 4648049066981195776		; 4081300000000000H
	mov	QWORD PTR [r8], rax

; 496  : 										return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN26@tree_predi:

; 497  : 								}
; 498  : 								else if (p_features->qp <= 22)

	cmp	DWORD PTR [rcx+80], 22
	jg	SHORT $LN28@tree_predi

; 499  : 								{
; 500  : 										*p_nb_iter = 1000.0;

	mov	rax, 4652007308841189376		; 408f400000000000H
	mov	QWORD PTR [rdx], rax

; 501  : 										*p_nb_bad = 493.0;

	mov	rax, 4647380563911507968		; 407ed00000000000H
	mov	QWORD PTR [r8], rax

; 502  : 										return 0.0000;

	xor	eax, eax

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	ret	0
$LN28@tree_predi:

; 503  : 								}
; 504  : 								else {
; 505  : 										*p_nb_iter = 2640.0;

	mov	rax, 4658023836468379648		; 40a4a00000000000H
	mov	QWORD PTR [rdx], rax

; 506  : 										*p_nb_bad = 1121.0;

	mov	rax, 4652645025585299456		; 4091840000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN22@tree_predi:

; 507  : 										return -1.0000;
; 508  : 								}
; 509  : 						}
; 510  : 						else {
; 511  : 								*p_nb_iter = 5188.0;

	mov	rax, 4662426281025994752		; 40b4440000000000H
	mov	QWORD PTR [rdx], rax

; 512  : 								*p_nb_bad = 1248.0;

	mov	rax, 4653203577492209664		; 4093800000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN20@tree_predi:

; 513  : 								return -1.0000;
; 514  : 						}
; 515  : 				}
; 516  : 				else {
; 517  : 						*p_nb_iter = 2323.0;

	mov	rax, 4657326746096369664		; 40a2260000000000H
	mov	QWORD PTR [rdx], rax

; 518  : 						*p_nb_bad = 274.0;

	mov	rax, 4643527875167780864		; 4071200000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN18@tree_predi:

; 519  : 						return -1.0000;
; 520  : 				}
; 521  : 		}
; 522  : 		else {
; 523  : 				*p_nb_iter = 21357.0;

	mov	rax, 4671599781414436864		; 40d4db4000000000H
	mov	QWORD PTR [rdx], rax

; 524  : 				*p_nb_bad = 1829.0;

	mov	rax, 4655758842515161088		; 409c940000000000H

; 525  : 				return -1.0000;
; 526  : 		}
; 527  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
tree_predict_split_depth_0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_split_depth_1 PROC

; 532  : 		if (p_features->var_of_sub_var <= 1138.9473)

	movsd	xmm0, QWORD PTR [rcx+88]
	comisd	xmm0, QWORD PTR __real@4091cbca0902de01
	ja	SHORT $LN2@tree_predi

; 533  : 		{
; 534  : 				*p_nb_iter = 32445.0;

	mov	rax, 4674647627646631936		; 40dfaf4000000000H
	mov	QWORD PTR [rdx], rax

; 535  : 				*p_nb_bad = 4580.0;

	mov	rax, 4661757777956306944		; 40b1e40000000000H
	mov	QWORD PTR [r8], rax

; 536  : 				return 1.0000;

	mov	eax, 1

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	ret	0
$LN2@tree_predi:

; 537  : 		}
; 538  : 		else if (p_features->var_of_sub_var <= 27289.2117)

	comisd	xmm0, QWORD PTR __real@40daa64d8c7e2824
	ja	$LN4@tree_predi

; 539  : 		{
; 540  : 				if (p_features->sub_variance_1 <= 12.0603)

	movsd	xmm2, QWORD PTR [rcx+24]
	comisd	xmm2, QWORD PTR __real@40281edfa43fe5c9
	ja	SHORT $LN6@tree_predi

; 541  : 				{
; 542  : 						*p_nb_iter = 1900.0;

	mov	rax, 4656071103817449472		; 409db00000000000H
	mov	QWORD PTR [rdx], rax

; 543  : 						*p_nb_bad = 401.0;

	mov	rax, 4645762082795421696		; 4079100000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN6@tree_predi:

; 544  : 						return -1.0000;
; 545  : 				}
; 546  : 				else if (p_features->var_of_sub_var <= 5841.4773)

	comisd	xmm0, QWORD PTR __real@40b6d17a30553261
	ja	SHORT $LN8@tree_predi

; 547  : 				{
; 548  : 						if (p_features->variance <= 72.4175)

	movsd	xmm0, QWORD PTR __real@40521ab851eb851f
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN10@tree_predi

; 549  : 						{
; 550  : 								*p_nb_iter = 1000.0;

	mov	rax, 4652007308841189376		; 408f400000000000H
	mov	QWORD PTR [rdx], rax

; 551  : 								*p_nb_bad = 356.0;

	mov	rax, 4644970434423422976		; 4076400000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN10@tree_predi:

; 552  : 								return -1.0000;
; 553  : 						}
; 554  : 						else if (p_features->neigh_variance_A <= 633.8163)

	movsd	xmm0, QWORD PTR __real@4083ce87c84b5dcc
	comisd	xmm0, QWORD PTR [rcx+48]
	jb	SHORT $LN12@tree_predi

; 555  : 						{
; 556  : 								*p_nb_iter = 5279.0;

	mov	rax, 4662526336584122368		; 40b49f0000000000H
	mov	QWORD PTR [rdx], rax

; 557  : 								*p_nb_bad = 1961.0;

	mov	rax, 4656339384654626816		; 409ea40000000000H
	mov	QWORD PTR [r8], rax

; 558  : 								return 1.0000;

	mov	eax, 1

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	ret	0
$LN12@tree_predi:

; 559  : 						}
; 560  : 						else {
; 561  : 								*p_nb_iter = 1176.0;

	mov	rax, 4652886918143410176		; 4092600000000000H
	mov	QWORD PTR [rdx], rax

; 562  : 								*p_nb_bad = 527.0;

	mov	rax, 4647846756841684992		; 4080780000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN8@tree_predi:

; 563  : 								return -1.0000;
; 564  : 						}
; 565  : 				}
; 566  : 				else if (p_features->sub_variance_0 <= 38.3035)

	movsd	xmm1, QWORD PTR [rcx+16]
	comisd	xmm1, QWORD PTR __real@404326d916872b02
	ja	SHORT $LN14@tree_predi

; 567  : 				{
; 568  : 						*p_nb_iter = 1251.0;

	mov	rax, 4653216771631742976		; 40938c0000000000H
	mov	QWORD PTR [rdx], rax

; 569  : 						*p_nb_bad = 293.0;

	mov	rax, 4643862126702624768		; 4072500000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN14@tree_predi:

; 570  : 						return -1.0000;
; 571  : 				}
; 572  : 				else if (p_features->neigh_variance_B <= 664.9494)

	movsd	xmm0, QWORD PTR __real@4084c7985f06f694
	comisd	xmm0, QWORD PTR [rcx+56]
	jb	$LN16@tree_predi

; 573  : 				{
; 574  : 						if (p_features->sub_variance_3 <= 45.8181)

	movsd	xmm0, QWORD PTR [rcx+40]
	comisd	xmm0, QWORD PTR __real@4046e8b780346dc6
	ja	SHORT $LN18@tree_predi

; 575  : 						{
; 576  : 								*p_nb_iter = 1276.0;

	mov	rax, 4653326722794520576		; 4093f00000000000H
	mov	QWORD PTR [rdx], rax

; 577  : 								*p_nb_bad = 471.0;

	mov	rax, 4646993535818530816		; 407d700000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN18@tree_predi:

; 578  : 								return -1.0000;
; 579  : 						}
; 580  : 						else if (p_features->sub_variance_3 <= 404.3086)

	comisd	xmm0, QWORD PTR __real@407944f0068db8bb
	ja	SHORT $LN20@tree_predi

; 581  : 						{
; 582  : 								if (p_features->sub_variance_1 <= 99.8715)

	comisd	xmm2, QWORD PTR __real@4058f7c6a7ef9db2
	ja	SHORT $LN22@tree_predi

; 583  : 								{
; 584  : 										*p_nb_iter = 1005.0;

	mov	rax, 4652051289306300416		; 408f680000000000H
	mov	QWORD PTR [rdx], rax

; 585  : 										*p_nb_bad = 435.0;

	mov	rax, 4646360217120931840		; 407b300000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN22@tree_predi:

; 586  : 										return -1.0000;
; 587  : 								}
; 588  : 								else if (p_features->sub_variance_0 <= 282.3064)

	comisd	xmm1, QWORD PTR __real@4071a4e703afb7e9
	ja	SHORT $LN24@tree_predi

; 589  : 								{
; 590  : 										*p_nb_iter = 1370.0;

	mov	rax, 4653740139166564352		; 4095680000000000H
	mov	QWORD PTR [rdx], rax

; 591  : 										*p_nb_bad = 539.0;

	mov	rax, 4647952309957951488		; 4080d80000000000H
	mov	QWORD PTR [r8], rax

; 592  : 										return 1.0000;

	mov	eax, 1

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	ret	0
$LN24@tree_predi:

; 593  : 								}
; 594  : 								else {
; 595  : 										*p_nb_iter = 1013.0;

	mov	rax, 4652121658050478080		; 408fa80000000000H
	mov	QWORD PTR [rdx], rax

; 596  : 										*p_nb_bad = 495.0;

	mov	rax, 4647415748283596800		; 407ef00000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN20@tree_predi:

; 597  : 										return -1.0000;
; 598  : 								}
; 599  : 						}
; 600  : 						else {
; 601  : 								*p_nb_iter = 1000.0;

	mov	rax, 4652007308841189376		; 408f400000000000H
	mov	QWORD PTR [rdx], rax

; 602  : 								*p_nb_bad = 379.0;

	mov	rax, 4645375054702444544		; 4077b00000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN16@tree_predi:

; 603  : 								return -1.0000;
; 604  : 						}
; 605  : 				}
; 606  : 				else {
; 607  : 						*p_nb_iter = 2270.0;

	mov	rax, 4657210197863825408		; 40a1bc0000000000H
	mov	QWORD PTR [rdx], rax

; 608  : 						*p_nb_bad = 679.0;

	mov	rax, 4649183762981060608		; 4085380000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN4@tree_predi:

; 609  : 						return -1.0000;
; 610  : 				}
; 611  : 		}
; 612  : 		else {
; 613  : 				*p_nb_iter = 29015.0;

	mov	rax, 4673704796425814016		; 40dc55c000000000H
	mov	QWORD PTR [rdx], rax

; 614  : 				*p_nb_bad = 3950.0;

	mov	rax, 4660904556933152768		; 40aedc0000000000H

; 615  : 				return -1.0000;
; 616  : 		}
; 617  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
tree_predict_split_depth_1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_split_depth_2 PROC

; 622  : 		if (p_features->var_of_sub_var <= 2597.4529)

	movsd	xmm0, QWORD PTR [rcx+88]
	comisd	xmm0, QWORD PTR __real@40a44ae7e28240b8
	ja	$LN2@tree_predi

; 623  : 		{
; 624  : 				if (p_features->var_of_sub_var <= 146.7734)

	comisd	xmm0, QWORD PTR __real@406258bfb15b573f
	ja	SHORT $LN4@tree_predi

; 625  : 				{
; 626  : 						*p_nb_iter = 23216.0;

	mov	rax, 4672110779443445760		; 40d6ac0000000000H
	mov	QWORD PTR [rdx], rax

; 627  : 						*p_nb_bad = 1560.0;

	mov	rax, 4654575768003674112		; 4098600000000000H
	mov	QWORD PTR [r8], rax

; 628  : 						return 2.0000;

	mov	eax, 2

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	ret	0
$LN4@tree_predi:

; 629  : 				}
; 630  : 				else if (p_features->merge_variance <= 259.6952)

	movsd	xmm0, QWORD PTR __real@40703b1f8a0902de
	comisd	xmm0, QWORD PTR [rcx+8]
	jb	SHORT $LN6@tree_predi

; 631  : 				{
; 632  : 						*p_nb_iter = 7470.0;

	mov	rax, 4664935366560579584		; 40bd2e0000000000H
	mov	QWORD PTR [rdx], rax

; 633  : 						*p_nb_bad = 1902.0;

	mov	rax, 4656079899910471680		; 409db80000000000H
	mov	QWORD PTR [r8], rax

; 634  : 						return 2.0000;

	mov	eax, 2

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	ret	0
$LN6@tree_predi:

; 635  : 				}
; 636  : 				else if (p_features->qp <= 27)

	cmp	DWORD PTR [rcx+80], 27
	jg	SHORT $LN8@tree_predi

; 637  : 				{
; 638  : 						if (p_features->variance <= 73.9929)

	movsd	xmm0, QWORD PTR __real@40527f8bac710cb3
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN10@tree_predi

; 639  : 						{
; 640  : 								*p_nb_iter = 1138.0;

	mov	rax, 4652719792375988224		; 4091c80000000000H
	mov	QWORD PTR [rdx], rax

; 641  : 								*p_nb_bad = 486.0;

	mov	rax, 4647257418609197056		; 407e600000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN10@tree_predi:

; 642  : 								return -1.0000;
; 643  : 						}
; 644  : 						else {
; 645  : 								*p_nb_iter = 1619.0;

	mov	rax, 4654835252747829248		; 40994c0000000000H
	mov	QWORD PTR [rdx], rax

; 646  : 								*p_nb_bad = 716.0;

	mov	rax, 4649509218422882304		; 4086600000000000H
	mov	QWORD PTR [r8], rax

; 647  : 								return 2.0000;

	mov	eax, 2

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	ret	0
$LN8@tree_predi:

; 648  : 						}
; 649  : 				}
; 650  : 				else {
; 651  : 						*p_nb_iter = 2425.0;

	mov	rax, 4657551046468435968		; 40a2f20000000000H
	mov	QWORD PTR [rdx], rax

; 652  : 						*p_nb_bad = 861.0;

	mov	rax, 4650784651911102464		; 408ae80000000000H
	mov	QWORD PTR [r8], rax

; 653  : 						return 2.0000;

	mov	eax, 2

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	ret	0
$LN2@tree_predi:

; 654  : 				}
; 655  : 		}
; 656  : 		else if (p_features->var_of_sub_var <= 60850.5208)

	comisd	xmm0, QWORD PTR __real@40edb650aa64c2f8
	ja	$LN12@tree_predi

; 657  : 		{
; 658  : 				if (p_features->var_of_sub_var <= 10144.602)

	comisd	xmm0, QWORD PTR __real@40c3d04d0e560419
	ja	$LN14@tree_predi

; 659  : 				{
; 660  : 						if (p_features->neigh_variance_C <= 926.8972)

	movsd	xmm0, QWORD PTR __real@408cf72d77318fc5
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	$LN16@tree_predi

; 661  : 						{
; 662  : 								if (p_features->sub_variance_0 <= 26.6006)

	movsd	xmm0, QWORD PTR __real@403a99c0ebedfa44
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN18@tree_predi

; 663  : 								{
; 664  : 										*p_nb_iter = 1796.0;

	mov	rax, 4655613706980294656		; 409c100000000000H
	mov	QWORD PTR [rdx], rax

; 665  : 										*p_nb_bad = 586.0;

	mov	rax, 4648365726329995264		; 4082500000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN18@tree_predi:

; 666  : 										return -1.0000;
; 667  : 								}
; 668  : 								else if (p_features->neigh_variance_A <= 493.5849)

	movsd	xmm0, QWORD PTR [rcx+48]
	comisd	xmm0, QWORD PTR __real@407ed95bc01a36e3
	ja	SHORT $LN20@tree_predi

; 669  : 								{
; 670  : 										if (p_features->neigh_variance_A <= 72.9516)

	comisd	xmm0, QWORD PTR __real@40523ce703afb7e9
	ja	SHORT $LN22@tree_predi

; 671  : 										{
; 672  : 												*p_nb_iter = 1326.0;

	mov	rax, 4653546625120075776		; 4094b80000000000H
	mov	QWORD PTR [rdx], rax

; 673  : 												*p_nb_bad = 557.0;

	mov	rax, 4648110639632351232		; 4081680000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN22@tree_predi:

; 674  : 												return -1.0000;
; 675  : 										}
; 676  : 										else if (p_features->variance <= 156.4014)

	movsd	xmm0, QWORD PTR __real@40638cd844d013a9
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN24@tree_predi

; 677  : 										{
; 678  : 												*p_nb_iter = 1210.0;

	mov	rax, 4653036451724787712		; 4092e80000000000H
	mov	QWORD PTR [rdx], rax

; 679  : 												*p_nb_bad = 563.0;

	mov	rax, 4648163416190484480		; 4081980000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN24@tree_predi:

; 680  : 												return -1.0000;
; 681  : 										}
; 682  : 										else {
; 683  : 												*p_nb_iter = 1920.0;

	mov	rax, 4656159064747671552		; 409e000000000000H
	mov	QWORD PTR [rdx], rax

; 684  : 												*p_nb_bad = 817.0;

	mov	rax, 4650397623818125312		; 4089880000000000H
	mov	QWORD PTR [r8], rax

; 685  : 												return 2.0000;

	mov	eax, 2

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	ret	0
$LN20@tree_predi:

; 686  : 										}
; 687  : 								}
; 688  : 								else {
; 689  : 										*p_nb_iter = 1106.0;

	mov	rax, 4652579054887632896		; 4091480000000000H
	mov	QWORD PTR [rdx], rax

; 690  : 										*p_nb_bad = 437.0;

	mov	rax, 4646395401493020672		; 407b500000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN16@tree_predi:

; 691  : 										return -1.0000;
; 692  : 								}
; 693  : 						}
; 694  : 						else {
; 695  : 								*p_nb_iter = 1001.0;

	mov	rax, 4652016104934211584		; 408f480000000000H
	mov	QWORD PTR [rdx], rax

; 696  : 								*p_nb_bad = 278.0;

	mov	rax, 4643598243911958528		; 4071600000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN14@tree_predi:

; 697  : 								return -1.0000;
; 698  : 						}
; 699  : 				}
; 700  : 				else {
; 701  : 						*p_nb_iter = 13068.0;

	mov	rax, 4668409823304351744		; 40c9860000000000H
	mov	QWORD PTR [rdx], rax

; 702  : 						*p_nb_bad = 3612.0;

	mov	rax, 4660161287072776192		; 40ac380000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN12@tree_predi:

; 703  : 						return -1.0000;
; 704  : 				}
; 705  : 		}
; 706  : 		else {
; 707  : 				*p_nb_iter = 22705.0;

	mov	rax, 4671970316832997376		; 40d62c4000000000H
	mov	QWORD PTR [rdx], rax

; 708  : 				*p_nb_bad = 2687.0;

	mov	rax, 4658127190561390592		; 40a4fe0000000000H

; 709  : 				return -1.0000;
; 710  : 		}
; 711  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
tree_predict_split_depth_2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
p_features$ = 8
p_nb_iter$ = 16
p_nb_bad$ = 24
tree_predict_split_depth_3 PROC

; 717  : 		if (p_features->var_of_sub_var <= 818.5173)

	movsd	xmm1, QWORD PTR [rcx+88]
	comisd	xmm1, QWORD PTR __real@408994236e2eb1c4
	ja	$LN2@tree_predi

; 718  : 		{
; 719  : 				if (p_features->merge_variance <= 62.7641)

	movsd	xmm2, QWORD PTR [rcx+8]
	comisd	xmm2, QWORD PTR __real@404f61ce075f6fd2
	ja	SHORT $LN4@tree_predi

; 720  : 				{
; 721  : 						*p_nb_iter = 20568.0;

	mov	rax, 4671382902745858048		; 40d4160000000000H
	mov	QWORD PTR [rdx], rax

; 722  : 						*p_nb_bad = 767.0;

	mov	rax, 4649957819167014912		; 4087f80000000000H
	mov	QWORD PTR [r8], rax

; 723  : 						return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN4@tree_predi:

; 724  : 				}
; 725  : 				else if (p_features->qp <= 27)

	cmp	DWORD PTR [rcx+80], 27
	jg	SHORT $LN6@tree_predi

; 726  : 				{
; 727  : 						if (p_features->variance <= 9.4219)

	movsd	xmm0, QWORD PTR __real@4022d80346dc5d64
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN8@tree_predi

; 728  : 						{
; 729  : 								*p_nb_iter = 1255.0;

	mov	rax, 4653234363817787392		; 40939c0000000000H
	mov	QWORD PTR [rdx], rax

; 730  : 								*p_nb_bad = 206.0;

	mov	rax, 4641451997214539776		; 4069c00000000000H
	mov	QWORD PTR [r8], rax

; 731  : 								return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN8@tree_predi:

; 732  : 						}
; 733  : 						else if (p_features->merge_variance <= 375.2185)

	comisd	xmm2, QWORD PTR __real@4077737ef9db22d1
	ja	SHORT $LN10@tree_predi

; 734  : 						{
; 735  : 								*p_nb_iter = 3999.0;

	mov	rax, 4661012309072674816		; 40af3e0000000000H
	mov	QWORD PTR [rdx], rax

; 736  : 								*p_nb_bad = 1321.0;

	mov	rax, 4653524634887520256		; 4094a40000000000H
	mov	QWORD PTR [r8], rax

; 737  : 								return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN10@tree_predi:

; 738  : 						}
; 739  : 						else {
; 740  : 								*p_nb_iter = 1786.0;

	mov	rax, 4655569726515183616		; 409be80000000000H
	mov	QWORD PTR [rdx], rax

; 741  : 								*p_nb_bad = 817.0;

	mov	rax, 4650397623818125312		; 4089880000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN6@tree_predi:

; 742  : 								return -1.0000;
; 743  : 						}
; 744  : 				}
; 745  : 				else {
; 746  : 						*p_nb_iter = 5286.0;

	mov	rax, 4662534033165516800		; 40b4a60000000000H
	mov	QWORD PTR [rdx], rax

; 747  : 						*p_nb_bad = 737.0;

	mov	rax, 4649693936376348672		; 4087080000000000H
	mov	QWORD PTR [r8], rax

; 748  : 						return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN2@tree_predi:

; 749  : 				}
; 750  : 		}
; 751  : 		else if (p_features->var_of_sub_var <= 37332.3018)

	comisd	xmm1, QWORD PTR __real@40e23a89a858793e
	ja	$LN12@tree_predi

; 752  : 		{
; 753  : 				if (p_features->var_of_sub_var <= 7585.0282)

	comisd	xmm1, QWORD PTR __real@40bda107381d7dbf
	ja	$LN14@tree_predi

; 754  : 				{
; 755  : 						if (p_features->qp <= 32)

	cmp	DWORD PTR [rcx+80], 32			; 00000020H
	jg	$LN16@tree_predi

; 756  : 						{
; 757  : 								if (p_features->neigh_variance_C <= 330.2178)

	movsd	xmm0, QWORD PTR __real@4074a37c1bda511a
	comisd	xmm0, QWORD PTR [rcx+64]
	jb	$LN18@tree_predi

; 758  : 								{
; 759  : 										if (p_features->sub_variance_0 <= 8.5273)

	movsd	xmm0, QWORD PTR __real@40210dfa43fe5c92
	comisd	xmm0, QWORD PTR [rcx+16]
	jb	SHORT $LN20@tree_predi

; 760  : 										{
; 761  : 												*p_nb_iter = 1114.0;

	mov	rax, 4652614239259721728		; 4091680000000000H
	mov	QWORD PTR [rdx], rax

; 762  : 												*p_nb_bad = 346.0;

	mov	rax, 4644794512562978816		; 4075a00000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN20@tree_predi:

; 763  : 												return -1.0000;
; 764  : 										}
; 765  : 										else if (p_features->neigh_variance_B <= 221.5469)

	movsd	xmm0, QWORD PTR __real@406bb180346dc5d6
	comisd	xmm0, QWORD PTR [rcx+56]
	jb	SHORT $LN22@tree_predi

; 766  : 										{
; 767  : 												if (p_features->var_of_sub_var <= 1989.7928)

	comisd	xmm1, QWORD PTR __real@409f172bd3c36113
	ja	SHORT $LN24@tree_predi

; 768  : 												{
; 769  : 														*p_nb_iter = 1539.0;

	mov	rax, 4654483409026940928		; 40980c0000000000H
	mov	QWORD PTR [rdx], rax

; 770  : 														*p_nb_bad = 606.0;

	mov	rax, 4648541648190439424		; 4082f00000000000H
	mov	QWORD PTR [r8], rax

; 771  : 														return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN24@tree_predi:

; 772  : 												}
; 773  : 												else if (p_features->variance <= 155.5974)

	movsd	xmm0, QWORD PTR __real@4063731de69ad42c
	comisd	xmm0, QWORD PTR [rcx]
	jb	SHORT $LN26@tree_predi

; 774  : 												{
; 775  : 														*p_nb_iter = 1298.0;

	mov	rax, 4653423479817764864		; 4094480000000000H
	mov	QWORD PTR [rdx], rax

; 776  : 														*p_nb_bad = 634.0;

	mov	rax, 4648787938795061248		; 4083d00000000000H
	mov	QWORD PTR [r8], rax

; 777  : 														return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN26@tree_predi:

; 778  : 												}
; 779  : 												else {
; 780  : 														*p_nb_iter = 1076.0;

	mov	rax, 4652447113492299776		; 4090d00000000000H
	mov	QWORD PTR [rdx], rax

; 781  : 														*p_nb_bad = 456.0;

	mov	rax, 4646729653027864576		; 407c800000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN22@tree_predi:

; 782  : 														return -1.0000;
; 783  : 												}
; 784  : 										}
; 785  : 										else {
; 786  : 												*p_nb_iter = 1644.0;

	mov	rax, 4654945203910606848		; 4099b00000000000H
	mov	QWORD PTR [rdx], rax

; 787  : 												*p_nb_bad = 639.0;

	mov	rax, 4648831919260172288		; 4083f80000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN18@tree_predi:

; 788  : 												return -1.0000;
; 789  : 										}
; 790  : 								}
; 791  : 								else {
; 792  : 										*p_nb_iter = 2401.0;

	mov	rax, 4657498269910302720		; 40a2c20000000000H
	mov	QWORD PTR [rdx], rax

; 793  : 										*p_nb_bad = 713.0;

	mov	rax, 4649482830143815680		; 4086480000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN16@tree_predi:

; 794  : 										return -1.0000;
; 795  : 								}
; 796  : 						}
; 797  : 						else if (p_features->merge_variance <= 281.9509)

	movsd	xmm0, QWORD PTR __real@40719f36e2eb1c43
	comisd	xmm0, QWORD PTR [rcx+8]
	jb	SHORT $LN28@tree_predi

; 798  : 						{
; 799  : 								*p_nb_iter = 1020.0;

	mov	rax, 4652183230701633536		; 408fe00000000000H
	mov	QWORD PTR [rdx], rax

; 800  : 								*p_nb_bad = 262.0;

	mov	rax, 4643316768935247872		; 4070600000000000H
	mov	QWORD PTR [r8], rax

; 801  : 								return 3.0000;

	mov	eax, 3

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	ret	0
$LN28@tree_predi:

; 802  : 						}
; 803  : 						else {
; 804  : 								*p_nb_iter = 1278.0;

	mov	rax, 4653335518887542784		; 4093f80000000000H
	mov	QWORD PTR [rdx], rax

; 805  : 								*p_nb_bad = 594.0;

	mov	rax, 4648436095074172928		; 4082900000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN14@tree_predi:

; 806  : 								return -1.0000;
; 807  : 						}
; 808  : 				}
; 809  : 				else {
; 810  : 						*p_nb_iter = 10507.0;

	mov	rax, 4667001898664984576		; 40c4858000000000H
	mov	QWORD PTR [rdx], rax

; 811  : 						*p_nb_bad = 2943.0;

	mov	rax, 4658690140514811904		; 40a6fe0000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
$LN12@tree_predi:

; 812  : 						return -1.0000;
; 813  : 				}
; 814  : 		}
; 815  : 		else {
; 816  : 				*p_nb_iter = 25229.0;

	mov	rax, 4672664108670124032		; 40d8a34000000000H
	mov	QWORD PTR [rdx], rax

; 817  : 				*p_nb_bad = 3060.0;

	mov	rax, 4658947426235711488		; 40a7e80000000000H

; 818  : 				return -1.0000;
; 819  : 		}
; 820  : }

	mov	QWORD PTR [r8], rax
	mov	eax, -1
	ret	0
tree_predict_split_depth_3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 8
_size$ = 16
_qp$ = 24
features_init_array PROC

; 868  : 	int16_t i = 0;
; 869  : 	for (i = 0; i < _size; ++i)

	xor	r9d, r9d
	cmp	r9w, dx
	jge	SHORT $LN3@features_i
	lea	rax, QWORD PTR [rcx+24]
	movzx	ecx, dx
$LL4@features_i:

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	mov	QWORD PTR [rax-24], r9

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	mov	QWORD PTR [rax-8], r9

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	mov	QWORD PTR [rax], r9

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	mov	QWORD PTR [rax+8], r9

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	mov	QWORD PTR [rax+16], r9

; 876  : 		arr_features[i].merge_variance = 0.0;

	mov	QWORD PTR [rax-16], r9

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	mov	QWORD PTR [rax+24], r9

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	mov	QWORD PTR [rax+32], r9

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	mov	QWORD PTR [rax+40], r9

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	mov	QWORD PTR [rax+48], r9

; 881  : 		arr_features[i].qp = _qp;

	mov	DWORD PTR [rax+56], r8d
	lea	rax, QWORD PTR [rax+96]
	sub	rcx, 1
	jne	SHORT $LL4@features_i
$LN3@features_i:

; 882  : 		//arr_features[i].NB_pixels = _NB_pixels;
; 883  : 	}
; 884  : }

	ret	0
features_init_array ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
_mat_src$ = 48
_x$ = 56
_x_end$ = 64
_y$ = 72
_y_end$ = 80
_width$dead$ = 88
vect_average_blck_int8 PROC

; 898  : {

	push	rsi
	sub	rsp, 32					; 00000020H
	mov	r11, r8
	mov	r10, rdx
	mov	rsi, rcx

; 899  : 	if (_mat_src == NULL)

	test	rcx, rcx
	jne	SHORT $LN8@vect_avera

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [rsi+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 903  : 		return -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000

; 917  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN8@vect_avera:

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rdx, QWORD PTR _y_end$[rsp]
	xorps	xmm3, xmm3
	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, rdx
	mov	QWORD PTR [rsp+56], rdi
	mov	rdi, r11
	sub	rdi, r10
	sub	rbx, r9
	js	SHORT $LN26@vect_avera
	cvtsi2sd xmm3, rbx
	jmp	SHORT $LN27@vect_avera
$LN26@vect_avera:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm3, rcx
	addsd	xmm3, xmm3
$LN27@vect_avera:
	xorps	xmm0, xmm0
	test	rdi, rdi
	js	SHORT $LN24@vect_avera
	cvtsi2sd xmm0, rdi
	jmp	SHORT $LN25@vect_avera
$LN24@vect_avera:
	mov	rax, rdi
	mov	rcx, rdi
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN25@vect_avera:
	mulsd	xmm3, xmm0
	xorps	xmm2, xmm2

; 906  : 	double   avg_vect = 0.0;
; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	r9, rdx
	jae	$LN3@vect_avera

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	QWORD PTR [rsp+64], r14
	lea	r14, QWORD PTR [r10+2]
	shl	r9, 6
	add	r14, rsi
	npad	6
$LL4@vect_avera:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r10
	cmp	r10, r11
	jae	$LN2@vect_avera
	cmp	rdi, 4
	jb	SHORT $LN23@vect_avera
	mov	rcx, r11
	lea	rdx, QWORD PTR [r14+r9]
	sub	rcx, r10
	sub	rcx, 4
	shr	rcx, 2
	inc	rcx
	lea	r8, QWORD PTR [r10+rcx*4]
	npad	5
$LL19@vect_avera:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rdx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rdx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rdx]
	addsd	xmm1, xmm2
	cvtdq2pd xmm0, xmm0
	movaps	xmm2, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rdx+1]
	addsd	xmm2, xmm0
	cvtdq2pd xmm1, xmm1
	add	rdx, 4
	movd	xmm0, eax
	addsd	xmm2, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm2, xmm0
	sub	rcx, 1
	jne	SHORT $LL19@vect_avera

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r11
	jae	SHORT $LN2@vect_avera
$LN23@vect_avera:
	lea	rcx, QWORD PTR [r9+r8]
	mov	rdx, r11
	add	rcx, rsi
	sub	rdx, r8
$LC7@vect_avera:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm2, xmm0
	sub	rdx, 1
	jne	SHORT $LC7@vect_avera
$LN2@vect_avera:

; 906  : 	double   avg_vect = 0.0;
; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r9, 64					; 00000040H
	sub	rbx, 1
	jne	$LL4@vect_avera
	mov	r14, QWORD PTR [rsp+64]
$LN3@vect_avera:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	mov	rdi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2

; 917  : }

	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
vect_average_blck_int8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
_mat_src$ = 112
_x$ = 120
_x_end$ = 128
_y$ = 136
_y_end$ = 144
_avg_blck$ = 152
_width$dead$ = 160
vect_variance_blck_int8 PROC

; 932  : {

	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 96					; 00000060H

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	movsd	xmm5, QWORD PTR _avg_blck$[rsp]
	mov	r10, r8
	movaps	XMMWORD PTR [rsp+48], xmm8
	movaps	xmm8, xmm5
	unpcklpd xmm8, xmm8
	mov	rdi, rdx
	mov	rsi, rcx
	test	rcx, rcx
	jne	SHORT $LN8@vect_varia

; 933  : 	if (_mat_src == NULL)
; 934  : 	{
; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [rsi+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 937  : 		return -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	jmp	$LN1@vect_varia
$LN8@vect_varia:

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rdx, QWORD PTR _y_end$[rsp]
	mov	QWORD PTR [rsp+112], rbx
	mov	r11, rdx
	mov	rbx, r10
	movaps	XMMWORD PTR [rsp+32], xmm9
	sub	rbx, rdi
	xorps	xmm9, xmm9
	sub	r11, r9
	js	SHORT $LN32@vect_varia
	cvtsi2sd xmm9, r11
	jmp	SHORT $LN33@vect_varia
$LN32@vect_varia:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN33@vect_varia:
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN30@vect_varia
	cvtsi2sd xmm0, rbx
	jmp	SHORT $LN31@vect_varia
$LN30@vect_varia:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN31@vect_varia:
	mulsd	xmm9, xmm0
	xorps	xmm4, xmm4

; 940  : 	double   variance = 0.0;
; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	r9, rdx
	jae	$LN3@vect_varia

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	QWORD PTR [rsp+120], r14
	lea	r14, QWORD PTR [rsi+rdi]
	movaps	XMMWORD PTR [rsp+80], xmm6
	xorps	xmm6, xmm6
	movaps	XMMWORD PTR [rsp+64], xmm7
	xorps	xmm7, xmm7
	shl	r9, 6
	npad	7
$LL4@vect_varia:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, rdi
	cmp	rdi, r10
	jae	$LN2@vect_varia
	cmp	rbx, 4
	jb	SHORT $LN29@vect_varia

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, rbx
	lea	rdx, QWORD PTR [r14+r9]
	and	eax, 3
	mov	rcx, r10
	sub	rcx, rax
$LL7@vect_varia:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rdx]
	xorps	xmm0, xmm0
	add	r8, 4
	movd	xmm1, eax
	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rcx
	jb	SHORT $LL7@vect_varia

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r10
	jae	$LN2@vect_varia
$LN29@vect_varia:
	mov	rax, r10
	sub	rax, r8
	cmp	rax, 4
	jb	$LN28@vect_varia
	lea	rax, QWORD PTR [r9+r8]
	mov	rdx, r10
	sub	rdx, r8
	lea	rcx, QWORD PTR [rsi+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL23@vect_varia:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm5
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm5
	subsd	xmm1, xmm5
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm4
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm5
	movaps	xmm4, xmm3
	addsd	xmm4, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm4, xmm1
	addsd	xmm4, xmm2
	sub	rdx, 1
	jne	SHORT $LL23@vect_varia

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r10
	jae	SHORT $LN2@vect_varia
$LN28@vect_varia:
	lea	rcx, QWORD PTR [r9+r8]
	mov	rdx, r10
	add	rcx, rsi
	sub	rdx, r8
$LC15@vect_varia:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm5
	mulsd	xmm0, xmm0
	addsd	xmm4, xmm0
	sub	rdx, 1
	jne	SHORT $LC15@vect_varia
$LN2@vect_varia:

; 940  : 	double   variance = 0.0;
; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r9, 64					; 00000040H
	sub	r11, 1
	jne	$LL4@vect_varia

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	mov	r14, QWORD PTR [rsp+120]
	addpd	xmm6, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+64]
	movaps	xmm1, xmm6
	unpckhpd xmm1, xmm6
	addsd	xmm6, xmm1
	addsd	xmm4, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+80]
$LN3@vect_varia:

; 947  : 		}
; 948  : 	}
; 949  : 	return variance / (double)(block_size);

	mov	rbx, QWORD PTR [rsp+112]
	divsd	xmm4, xmm9
	movaps	xmm9, XMMWORD PTR [rsp+32]
	movaps	xmm0, xmm4
$LN1@vect_varia:

; 950  : }

	mov	rsi, QWORD PTR [rsp+128]
	movaps	xmm8, XMMWORD PTR [rsp+48]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
vect_variance_blck_int8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_luma_px$ = 128
i_xLcu$dead$ = 136
i_yLcu$dead$ = 144
i_xBlck$ = 152
i_yBlck$ = 160
i_blockSize$dead$ = 168
i_width$dead$ = 176
i_height$dead$ = 184
p_average$ = 192
p_variance$ = 200
features_var_avg_blck PROC

; 971  : {

	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);
; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	mov	edx, DWORD PTR i_yBlck$[rsp]
	lea	eax, DWORD PTR [r9+4]
	mov	r15, QWORD PTR p_average$[rsp]
	mov	r8d, 64					; 00000040H
	cmp	eax, r8d

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	mov	r10d, r9d
	mov	r11d, r8d
	mov	r14, rcx
	cmovb	r11d, eax
	mov	ebx, edx
	lea	eax, DWORD PTR [rdx+4]
	cmp	eax, r8d
	cmovb	r8d, eax
	mov	ebp, r8d

; 899  : 	if (_mat_src == NULL)

	test	rcx, rcx
	jne	$LN14@features_v

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r14+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 903  : 		return -1.0;

	mov	rax, -4616189618054758400		; bff0000000000000H

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r14+2]

; 903  : 		return -1.0;

	mov	QWORD PTR [r15], rax

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	mov	rax, QWORD PTR p_variance$[rsp]

; 937  : 		return -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movsd	QWORD PTR [rax], xmm0

; 976  : }

	mov	rbx, QWORD PTR [rsp+144]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN14@features_v:
	mov	QWORD PTR [rsp+128], rsi

; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	xorps	xmm2, xmm2
	mov	QWORD PTR [rsp+136], rdi
	mov	rsi, r11
	sub	rsi, r10
	movaps	XMMWORD PTR [rsp+48], xmm8
	mov	rdi, rbp
	movaps	XMMWORD PTR [rsp+32], xmm9
	sub	rdi, rbx
	js	SHORT $LN76@features_v
	cvtsi2sd xmm2, rdi
	jmp	SHORT $LN77@features_v
$LN76@features_v:
	mov	rax, rdi
	mov	rcx, rdi
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
$LN77@features_v:
	xorps	xmm0, xmm0
	test	rsi, rsi
	js	SHORT $LN74@features_v
	cvtsi2sd xmm0, rsi
	jmp	SHORT $LN75@features_v
$LN74@features_v:
	mov	rax, rsi
	mov	rcx, rsi
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN75@features_v:
	mulsd	xmm2, xmm0
	xorps	xmm5, xmm5
	xorps	xmm4, xmm4

; 906  : 	double   avg_vect = 0.0;
; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rbx, rbp
	jae	$LN9@features_v

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r9, rbx
	shl	r9, 6
	add	r9, r14
	npad	8
$LL10@features_v:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	rcx, r10
	cmp	r10, r11
	jae	$LN8@features_v
	cmp	rsi, 4
	jb	$LL88@features_v
	mov	r8, r11
	lea	rdx, QWORD PTR [r10+2]
	sub	r8, r10
	add	rdx, r9
	sub	r8, 4
	shr	r8, 2
	inc	r8
	lea	rcx, QWORD PTR [r10+r8*4]
	npad	14
$LL45@features_v:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rdx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rdx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rdx]
	addsd	xmm1, xmm4
	cvtdq2pd xmm0, xmm0
	movaps	xmm4, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rdx+1]
	addsd	xmm4, xmm0
	cvtdq2pd xmm1, xmm1
	add	rdx, 4
	movd	xmm0, eax
	addsd	xmm4, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	sub	r8, 1
	jne	SHORT $LL45@features_v

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	rcx, r11
	jae	SHORT $LN8@features_v
	npad	15
$LL88@features_v:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [r9+rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	cmp	rcx, r11
	jb	SHORT $LL88@features_v
$LN8@features_v:

; 906  : 	double   avg_vect = 0.0;
; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r9, 64					; 00000040H
	sub	rdi, 1
	jne	$LL10@features_v
$LN9@features_v:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	divsd	xmm4, xmm2

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r9, r11
	mov	rdi, rbp
	sub	r9, r10
	sub	rdi, rbx
	xorps	xmm9, xmm9

; 916  : 	return avg_vect / (double)(block_size);

	movaps	xmm8, xmm4
	movsd	QWORD PTR [r15], xmm4
	unpcklpd xmm8, xmm8

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	js	SHORT $LN72@features_v
	cvtsi2sd xmm9, rdi
	jmp	SHORT $LN73@features_v
$LN72@features_v:
	mov	rax, rdi
	mov	rcx, rdi
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN73@features_v:
	xorps	xmm0, xmm0
	test	r9, r9
	js	SHORT $LN70@features_v
	cvtsi2sd xmm0, r9
	jmp	SHORT $LN71@features_v
$LN70@features_v:
	mov	rax, r9
	mov	rcx, r9
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN71@features_v:
	mulsd	xmm9, xmm0

; 940  : 	double   variance = 0.0;
; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rbx, rbp
	jae	$LN19@features_v

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	movaps	XMMWORD PTR [rsp+80], xmm6
	lea	rsi, QWORD PTR [r10+r14]
	movaps	XMMWORD PTR [rsp+64], xmm7
	xorps	xmm6, xmm6
	xorps	xmm7, xmm7
	shl	rbx, 6
	npad	8
$LL20@features_v:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r10
	cmp	r10, r11
	jae	$LN18@features_v
	cmp	r9, 4
	jb	SHORT $LN57@features_v

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, r9
	lea	rdx, QWORD PTR [rsi+rbx]
	and	eax, 3
	mov	rcx, r11
	sub	rcx, rax
$LL23@features_v:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rdx]
	xorps	xmm0, xmm0

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	add	r8, 4

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movd	xmm1, eax
	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rcx
	jb	SHORT $LL23@features_v

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r11
	jae	$LN18@features_v
$LN57@features_v:
	mov	rax, r11
	sub	rax, r8
	cmp	rax, 4
	jb	$LN56@features_v
	lea	rax, QWORD PTR [rbx+r8]
	mov	rdx, r11
	sub	rdx, r8
	lea	rcx, QWORD PTR [r14+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL48@features_v:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm4
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm4
	subsd	xmm1, xmm4
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm5
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm4
	movaps	xmm5, xmm3
	addsd	xmm5, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm5, xmm1
	addsd	xmm5, xmm2
	sub	rdx, 1
	jne	SHORT $LL48@features_v

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r11
	jae	SHORT $LN18@features_v
$LN56@features_v:
	lea	rcx, QWORD PTR [rbx+r8]
	mov	rdx, r11
	add	rcx, r14
	sub	rdx, r8
$LC35@features_v:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm4
	mulsd	xmm0, xmm0
	addsd	xmm5, xmm0
	sub	rdx, 1
	jne	SHORT $LC35@features_v
$LN18@features_v:

; 940  : 	double   variance = 0.0;
; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	rbx, 64					; 00000040H
	sub	rdi, 1
	jne	$LL20@features_v

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	addpd	xmm6, xmm7
	movaps	xmm7, XMMWORD PTR [rsp+64]
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0
	addsd	xmm5, xmm6
	movaps	xmm6, XMMWORD PTR [rsp+80]
$LN19@features_v:

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	mov	rax, QWORD PTR p_variance$[rsp]
	movaps	xmm8, XMMWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+136]
	mov	rsi, QWORD PTR [rsp+128]

; 976  : }

	mov	rbx, QWORD PTR [rsp+144]

; 949  : 	return variance / (double)(block_size);

	divsd	xmm5, xmm9

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movaps	xmm9, XMMWORD PTR [rsp+32]
	movsd	QWORD PTR [rax], xmm5

; 976  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
features_var_avg_blck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_var$ = 8
arr_avgLuma$ = 16
i_x$ = 24
i_y$ = 32
i_depth$ = 40
p_varianceC$ = 48
p_avgLumaC$ = 56
features_combine_var PROC

; 992  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	rbx, rdx
	mov	rdi, rcx
	mov	r11d, r9d

; 993  : 	double d_var_temp_1 = 0.0;
; 994  : 	double d_var_temp_2 = 0.0;
; 995  : 	double d_avg_temp_1 = 0.0;
; 996  : 	double d_avg_temp_2 = 0.0;
; 997  : 
; 998  : 	int16_t i_subCU = (i_x + (i_y << 4)) << (4 - i_depth);

	mov	ecx, 4
	sub	ecx, DWORD PTR i_depth$[rsp]

; 999  : 	int16_t i_rows = (16 << (3 - i_depth));
; 1000 : 
; 1001 : 	int16_t i_sb0 = i_subCU; 									/*!< Top left sub block index */
; 1002 : 	int16_t i_sb1 = i_subCU + (1 << (3 - i_depth));			/*!< Top right sub block index */

	mov	edx, 1
	shl	r11w, 4
	add	r11w, r8w
	mov	r8d, 16
	shl	r11w, cl
	mov	ecx, 3
	sub	ecx, DWORD PTR i_depth$[rsp]
	shl	dx, cl
	shl	r8w, cl

; 1003 : 	int16_t i_sb2 = i_subCU + i_rows;							/*!< Bottom left sub block index */
; 1004 : 	int16_t i_sb3 = i_subCU + i_rows + (1 << (3 - i_depth)); 	/*!< Bottom right sub block index */
; 1005 : 
; 1006 : 	d_avg_temp_1 = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1]) / 2.0;

	movsx	rcx, r11w
	lea	eax, DWORD PTR [r11+rdx]
	add	dx, r8w
	movsx	r10, ax
	add	dx, r11w
	movsd	xmm5, QWORD PTR [rbx+rcx*8]
	lea	eax, DWORD PTR [r11+r8]

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;
; 1008 : 
; 1009 : 	d_var_temp_1 = (2.0 * (arr_var[i_sb0] + arr_var[i_sb1]) + pow2((arr_avgLuma[i_sb0] - arr_avgLuma[i_sb1]))) / 4.0;

	movsd	xmm0, QWORD PTR [rdi+rcx*8]
	movaps	xmm2, xmm5
	movsx	rax, ax
	addsd	xmm0, QWORD PTR [rdi+r10*8]
	subsd	xmm5, QWORD PTR [rbx+r10*8]
	addsd	xmm2, QWORD PTR [rbx+r10*8]
	movsd	xmm3, QWORD PTR [rbx+rax*8]
	movaps	xmm4, xmm3
	movsx	r9, dx
	addsd	xmm0, xmm0
	mulsd	xmm5, xmm5

; 1010 : 	d_var_temp_2 = (2.0 * (arr_var[i_sb2] + arr_var[i_sb3]) + pow2((arr_avgLuma[i_sb2] - arr_avgLuma[i_sb3]))) / 4.0;

	subsd	xmm3, QWORD PTR [rbx+r9*8]
	addsd	xmm4, QWORD PTR [rbx+r9*8]
	mulsd	xmm2, QWORD PTR __real@3fe0000000000000
	addsd	xmm5, xmm0
	movsd	xmm0, QWORD PTR [rdi+rax*8]
	addsd	xmm0, QWORD PTR [rdi+r9*8]

; 1011 : 
; 1012 : 	if (p_avgLumaC)

	mov	rax, QWORD PTR p_avgLumaC$[rsp]
	mulsd	xmm4, QWORD PTR __real@3fe0000000000000
	mulsd	xmm3, xmm3
	addsd	xmm0, xmm0
	addsd	xmm3, xmm0
	test	rax, rax
	je	SHORT $LN2@features_c

; 1013 : 	{
; 1014 : 		*p_avgLumaC = (d_avg_temp_1 + d_avg_temp_2) / 2.0;

	movaps	xmm0, xmm4
	addsd	xmm0, xmm2
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [rax], xmm0
$LN2@features_c:

; 1015 : 	}
; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	mov	rax, QWORD PTR p_varianceC$[rsp]
	subsd	xmm2, xmm4

; 1017 : }

	mov	rbx, QWORD PTR [rsp+8]
	addsd	xmm3, xmm5
	mov	rdi, QWORD PTR [rsp+16]
	mulsd	xmm2, xmm2
	mulsd	xmm3, QWORD PTR __real@3fd0000000000000
	addsd	xmm3, xmm3
	addsd	xmm2, xmm3
	mulsd	xmm2, QWORD PTR __real@3fd0000000000000
	movsd	QWORD PTR [rax], xmm2
	ret	0
features_combine_var ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_avgLuma$ = 32
i_sb0$ = 40
i_sb1$ = 48
i_sb2$ = 56
i_sb3$ = 64
features_get_var_of_sub_mean PROC

; 1031 : {

	sub	rsp, 24
	movaps	XMMWORD PTR [rsp], xmm6

; 1032 : 	double d_var = 0.0;
; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsx	rax, dx
	movsd	xmm6, QWORD PTR [rcx+rax*8]
	movsx	rax, r8w
	movsd	xmm3, QWORD PTR [rcx+rax*8]
	movaps	xmm0, xmm3
	movsx	rax, r9w
	addsd	xmm0, xmm6
	movsd	xmm4, QWORD PTR [rcx+rax*8]
	movsx	rax, WORD PTR i_sb3$[rsp]
	movsd	xmm5, QWORD PTR [rcx+rax*8]
	movaps	xmm1, xmm5
	addsd	xmm1, xmm4
	addsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR __real@3fd0000000000000

; 1034 : 	d_var = pow2(arr_avgLuma[i_sb0] - d_avg);

	subsd	xmm6, xmm1

; 1035 : 	d_var = pow2(arr_avgLuma[i_sb1] - d_avg) + d_var;

	subsd	xmm3, xmm1

; 1036 : 	d_var = pow2(arr_avgLuma[i_sb2] - d_avg) + d_var;

	subsd	xmm4, xmm1

; 1037 : 	d_var = pow2(arr_avgLuma[i_sb3] - d_avg) + d_var;

	subsd	xmm5, xmm1
	mulsd	xmm6, xmm6
	mulsd	xmm3, xmm3
	mulsd	xmm4, xmm4
	mulsd	xmm5, xmm5
	addsd	xmm6, xmm3
	addsd	xmm6, xmm4
	addsd	xmm6, xmm5

; 1038 : 	return d_var / 4.0;

	mulsd	xmm6, QWORD PTR __real@3fd0000000000000
	movaps	xmm0, xmm6

; 1039 : }

	movaps	xmm6, XMMWORD PTR [rsp]
	add	rsp, 24
	ret	0
features_get_var_of_sub_mean ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 8
_x$ = 16
_y$ = 24
_depth$ = 32
features_var_neighbor PROC

; 1051 : {

	mov	r11, rcx

; 1052 : 	int16_t i_cu0 = (_x - 1) + ((_y - 1) << _depth);

	lea	eax, DWORD PTR [r8-1]
	movsx	ecx, r9w
	shl	ax, cl

; 1053 : 	int16_t i_cu1 = (_x)+((_y - 1) << _depth);

	add	ax, dx

; 1054 : 	int16_t i_cu2 = (_x - 1) + (_y << _depth);

	shl	r8w, cl

; 1055 : 	int16_t i_cu3 = _x + (_y << _depth);
; 1056 : 
; 1057 : 	arr_features[i_cu0].neigh_variance_A = arr_features[i_cu1].variance;

	movsx	rax, ax
	add	r8w, dx

; 1058 : 	arr_features[i_cu0].neigh_variance_B = arr_features[i_cu2].variance;

	movsx	rcx, r8w
	lea	r10, QWORD PTR [rax+rax*2]
	lea	r9, QWORD PTR [rax+rax*2]
	shl	r10, 5
	shl	r9, 5
	lea	r8, QWORD PTR [rcx+rcx*2]
	shl	r8, 5

; 1059 : 	arr_features[i_cu0].neigh_variance_C = arr_features[i_cu3].variance;

	lea	rdx, QWORD PTR [rcx+rcx*2]
	shl	rdx, 5
	mov	rax, QWORD PTR [r10+r11]
	mov	QWORD PTR [r9+r11-48], rax
	mov	rax, QWORD PTR [r8+r11-96]
	mov	QWORD PTR [r9+r11-40], rax
	mov	rax, QWORD PTR [rdx+r11]
	mov	QWORD PTR [r9+r11-32], rax

; 1060 : 
; 1061 : 
; 1062 : 	arr_features[i_cu1].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+r11-96]
	mov	QWORD PTR [r10+r11+48], rax

; 1063 : 	arr_features[i_cu1].neigh_variance_B = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [r8+r11-96]
	mov	QWORD PTR [r10+r11+56], rax

; 1064 : 	arr_features[i_cu1].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rdx+r11]
	mov	QWORD PTR [r10+r11+64], rax

; 1065 : 
; 1066 : 
; 1067 : 	arr_features[i_cu2].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+r11-96]
	mov	QWORD PTR [r8+r11-48], rax

; 1068 : 	arr_features[i_cu2].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r10+r11]
	mov	QWORD PTR [r8+r11-40], rax

; 1069 : 	arr_features[i_cu2].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rdx+r11]
	mov	QWORD PTR [r8+r11-32], rax

; 1070 : 
; 1071 : 
; 1072 : 	arr_features[i_cu3].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+r11-96]
	mov	QWORD PTR [rdx+r11+48], rax

; 1073 : 	arr_features[i_cu3].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r10+r11]
	mov	QWORD PTR [rdx+r11+56], rax

; 1074 : 	arr_features[i_cu3].neigh_variance_C = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [r8+r11-96]
	mov	QWORD PTR [rdx+r11+64], rax

; 1075 : }

	ret	0
features_var_neighbor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
y$1$ = 0
tv1886 = 4
tv1885 = 8
tv1884 = 12
tv1913 = 16
arr_features$ = 160
i_depth$ = 168
arr_var$ = 176
arr_avg$ = 184
features_compute PROC

; 1088 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	push	rbx
	push	r13
	sub	rsp, 136				; 00000088H

; 1089 : 	double d_avgLumaC;
; 1090 : 
; 1091 : 	int8_t i_nbBlock = (1 << i_depth);

	mov	r10d, 1
	movzx	r13d, dl

; 1092 : 
; 1093 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	xor	al, al
	mov	rbx, rcx
	mov	ecx, r13d
	mov	BYTE PTR y$1$[rsp], al
	shl	r10b, cl
	mov	r11, r8
	mov	DWORD PTR tv1913[rsp], r10d
	test	r10b, r10b
	jle	$LN3@features_c

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	mov	QWORD PTR [rsp+160], rbp
	mov	ecx, 4
	mov	QWORD PTR [rsp+128], rsi
	sub	ecx, r13d
	mov	QWORD PTR [rsp+120], rdi
	mov	QWORD PTR [rsp+112], r12
	mov	QWORD PTR [rsp+104], r14
	mov	DWORD PTR tv1886[rsp], ecx
	mov	ecx, 8
	mov	QWORD PTR [rsp+96], r15
	sub	ecx, r13d
	movaps	XMMWORD PTR [rsp+80], xmm6
	movaps	XMMWORD PTR [rsp+64], xmm7

; 1106 : 				int16_t i_rows = (16 << (3 - i_depth));

	movsd	xmm7, QWORD PTR __real@3fe0000000000000
	mov	DWORD PTR tv1885[rsp], ecx
	mov	ecx, 3
	movaps	XMMWORD PTR [rsp+48], xmm8
	sub	ecx, r13d
	movsd	xmm8, QWORD PTR __real@3fd0000000000000
	movaps	XMMWORD PTR [rsp+32], xmm9
	movsd	xmm9, QWORD PTR __real@3fc0000000000000
	mov	DWORD PTR tv1884[rsp], ecx
	npad	7
$LL4@features_c:

; 1094 : 	{
; 1095 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	movzx	r15d, al
	xor	bpl, bpl
	movzx	r12d, r15w
	mov	ecx, r13d
	shl	r12w, cl
	npad	14
$LL7@features_c:

; 1096 : 		{
; 1097 : 			int16_t i_cu = x + (y << i_depth);

	movsx	r14d, bpl
	lea	eax, DWORD PTR [r12+r14]
	movsx	rdi, ax
	lea	rsi, QWORD PTR [rdi+rdi*2]
	shl	rsi, 5
	add	rsi, rbx

; 1098 : 			if (i_depth == 4)

	cmp	dl, 4
	jne	SHORT $LN8@features_c

; 1099 : 			{
; 1100 : 				arr_features[i_cu].variance = arr_var[i_cu];

	mov	rax, QWORD PTR [r11+rdi*8]
	mov	QWORD PTR [rsi], rax

; 1101 : 			}

	jmp	$LN9@features_c
$LN8@features_c:

; 998  : 	int16_t i_subCU = (i_x + (i_y << 4)) << (4 - i_depth);

	movzx	r9d, r15w

; 999  : 	int16_t i_rows = (16 << (3 - i_depth));

	mov	r8d, 16
	shl	r9w, 4

; 1000 : 
; 1001 : 	int16_t i_sb0 = i_subCU; 									/*!< Top left sub block index */
; 1002 : 	int16_t i_sb1 = i_subCU + (1 << (3 - i_depth));			/*!< Top right sub block index */

	mov	edx, 1
	add	r9w, r14w
	mov	ecx, 4
	sub	ecx, r13d
	shl	r9w, cl
	mov	ecx, 3
	sub	ecx, r13d

; 1003 : 	int16_t i_sb2 = i_subCU + i_rows;							/*!< Bottom left sub block index */
; 1004 : 	int16_t i_sb3 = i_subCU + i_rows + (1 << (3 - i_depth)); 	/*!< Bottom right sub block index */
; 1005 : 
; 1006 : 	d_avg_temp_1 = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1]) / 2.0;

	movsx	r10, r9w
	shl	dx, cl
	shl	r8w, cl
	lea	eax, DWORD PTR [r9+rdx]
	add	dx, r8w
	movsx	r11, ax
	add	dx, r9w
	mov	rax, QWORD PTR arr_avg$[rsp]

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;

	movsx	rcx, dx

; 1008 : 
; 1009 : 	d_var_temp_1 = (2.0 * (arr_var[i_sb0] + arr_var[i_sb1]) + pow2((arr_avgLuma[i_sb0] - arr_avgLuma[i_sb1]))) / 4.0;

	mov	rdx, QWORD PTR arr_var$[rsp]
	movsd	xmm4, QWORD PTR [rax+r10*8]
	movsd	xmm0, QWORD PTR [rax+rcx*8]
	movaps	xmm5, xmm4
	movsd	xmm2, QWORD PTR [rax+r11*8]
	lea	eax, DWORD PTR [r9+r8]
	mov	r9, QWORD PTR arr_avg$[rsp]
	addsd	xmm5, xmm2
	movsx	rax, ax
	subsd	xmm4, xmm2

; 1106 : 				int16_t i_rows = (16 << (3 - i_depth));

	mov	r8d, 16

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;

	movsd	xmm3, QWORD PTR [r9+rax*8]

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	movzx	r9d, r14w

; 1006 : 	d_avg_temp_1 = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1]) / 2.0;

	mulsd	xmm5, xmm7

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;

	movaps	xmm1, xmm3
	addsd	xmm1, xmm0

; 1008 : 
; 1009 : 	d_var_temp_1 = (2.0 * (arr_var[i_sb0] + arr_var[i_sb1]) + pow2((arr_avgLuma[i_sb0] - arr_avgLuma[i_sb1]))) / 4.0;

	mulsd	xmm4, xmm4

; 1010 : 	d_var_temp_2 = (2.0 * (arr_var[i_sb2] + arr_var[i_sb3]) + pow2((arr_avgLuma[i_sb2] - arr_avgLuma[i_sb3]))) / 4.0;

	subsd	xmm3, xmm0
	movsd	xmm0, QWORD PTR [rdx+r10*8]
	addsd	xmm0, QWORD PTR [rdx+r11*8]

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	mov	r10, QWORD PTR arr_avg$[rsp]

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;

	mulsd	xmm1, xmm7

; 1010 : 	d_var_temp_2 = (2.0 * (arr_var[i_sb2] + arr_var[i_sb3]) + pow2((arr_avgLuma[i_sb2] - arr_avgLuma[i_sb3]))) / 4.0;

	mulsd	xmm3, xmm3

; 1011 : 
; 1012 : 	if (p_avgLumaC)
; 1013 : 	{
; 1014 : 		*p_avgLumaC = (d_avg_temp_1 + d_avg_temp_2) / 2.0;

	movaps	xmm6, xmm1
	addsd	xmm6, xmm5

; 1015 : 	}
; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	subsd	xmm5, xmm1
	addsd	xmm3, xmm4
	mulsd	xmm6, xmm7
	mulsd	xmm5, xmm5
	mulsd	xmm3, xmm9
	addsd	xmm5, QWORD PTR [rdx+rax*8]

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	movzx	eax, r15w

; 1009 : 	d_var_temp_1 = (2.0 * (arr_var[i_sb0] + arr_var[i_sb1]) + pow2((arr_avgLuma[i_sb0] - arr_avgLuma[i_sb1]))) / 4.0;

	addsd	xmm5, QWORD PTR [rdx+rcx*8]

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	mov	ecx, DWORD PTR tv1886[rsp]

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	mov	edx, 1
	shl	r9w, cl
	mov	ecx, DWORD PTR tv1885[rsp]
	shl	ax, cl
	mov	ecx, DWORD PTR tv1884[rsp]

; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	addsd	xmm5, xmm0

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	add	r9w, ax

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	shl	dx, cl
	shl	r8w, cl

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsx	rcx, r9w

; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	mulsd	xmm5, xmm8

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	lea	eax, DWORD PTR [r9+rdx]

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsx	rax, ax

; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	addsd	xmm5, xmm3
	movsd	QWORD PTR [rsi], xmm5

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsd	xmm5, QWORD PTR [r10+rax*8]

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	lea	eax, DWORD PTR [r9+r8]

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsd	xmm4, QWORD PTR [r10+rcx*8]
	movsx	rax, ax
	movaps	xmm0, xmm4
	addsd	xmm0, xmm5
	movsd	xmm2, QWORD PTR [r10+rax*8]

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	lea	eax, DWORD PTR [r8+rdx]
	add	ax, r9w

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsx	rax, ax
	movsd	xmm3, QWORD PTR [r10+rax*8]
	movaps	xmm1, xmm3
	addsd	xmm1, xmm2

; 1113 : 				arr_var[i_CU_4] = arr_features[i_cu].variance;

	mov	r11, QWORD PTR arr_var$[rsp]

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	addsd	xmm1, xmm0
	mulsd	xmm1, xmm8

; 1034 : 	d_var = pow2(arr_avgLuma[i_sb0] - d_avg);
; 1035 : 	d_var = pow2(arr_avgLuma[i_sb1] - d_avg) + d_var;
; 1036 : 	d_var = pow2(arr_avgLuma[i_sb2] - d_avg) + d_var;
; 1037 : 	d_var = pow2(arr_avgLuma[i_sb3] - d_avg) + d_var;

	subsd	xmm3, xmm1
	subsd	xmm4, xmm1
	subsd	xmm5, xmm1
	subsd	xmm2, xmm1
	mulsd	xmm3, xmm3
	mulsd	xmm4, xmm4
	mulsd	xmm2, xmm2
	mulsd	xmm5, xmm5
	addsd	xmm3, xmm2
	addsd	xmm4, xmm5

; 1038 : 	return d_var / 4.0;

	addsd	xmm3, xmm4
	mulsd	xmm3, xmm8

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	movsd	QWORD PTR [rsi+72], xmm3

; 1108 : 					i_CU_4,
; 1109 : 					i_CU_4 + (1 << (3 - i_depth)),
; 1110 : 					i_CU_4 + i_rows,
; 1111 : 					i_CU_4 + i_rows + (1 << (3 - i_depth)));
; 1112 : 				arr_avg[i_CU_4] = d_avgLumaC;

	movsd	QWORD PTR [r10+rcx*8], xmm6

; 1113 : 				arr_var[i_CU_4] = arr_features[i_cu].variance;

	mov	rax, QWORD PTR [rsi]
	mov	r10d, DWORD PTR tv1913[rsp]
	mov	QWORD PTR [r11+rcx*8], rax
$LN9@features_c:

; 1114 : 			}
; 1115 : 			if (x % 2 == 1 &&

	movsx	eax, bpl
	and	eax, -2147483647			; ffffffff80000001H
	jge	SHORT $LN27@features_c
	dec	eax
	or	eax, -2
	inc	eax
$LN27@features_c:
	cmp	eax, 1
	jne	$LN5@features_c
	test	r15b, al
	je	$LN5@features_c

; 1052 : 	int16_t i_cu0 = (_x - 1) + ((_y - 1) << _depth);

	lea	eax, DWORD PTR [r15-1]
	mov	ecx, r13d
	shl	ax, cl

; 1053 : 	int16_t i_cu1 = (_x)+((_y - 1) << _depth);
; 1054 : 	int16_t i_cu2 = (_x - 1) + (_y << _depth);
; 1055 : 	int16_t i_cu3 = _x + (_y << _depth);
; 1056 : 
; 1057 : 	arr_features[i_cu0].neigh_variance_A = arr_features[i_cu1].variance;
; 1058 : 	arr_features[i_cu0].neigh_variance_B = arr_features[i_cu2].variance;

	lea	rdx, QWORD PTR [rdi+rdi*2]
	add	ax, r14w
	shl	rdx, 5
	movsx	rax, ax

; 1059 : 	arr_features[i_cu0].neigh_variance_C = arr_features[i_cu3].variance;

	lea	rcx, QWORD PTR [rdi+rdi*2]
	lea	r9, QWORD PTR [rax+rax*2]
	lea	r8, QWORD PTR [rax+rax*2]
	shl	r9, 5
	shl	r8, 5
	shl	rcx, 5
	mov	rax, QWORD PTR [r9+rbx]
	mov	QWORD PTR [r8+rbx-48], rax
	mov	rax, QWORD PTR [rdx+rbx-96]
	mov	QWORD PTR [r8+rbx-40], rax
	mov	rax, QWORD PTR [rcx+rbx]
	mov	QWORD PTR [r8+rbx-32], rax

; 1060 : 
; 1061 : 
; 1062 : 	arr_features[i_cu1].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r8+rbx-96]
	mov	QWORD PTR [r9+rbx+48], rax

; 1063 : 	arr_features[i_cu1].neigh_variance_B = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [rdx+rbx-96]
	mov	QWORD PTR [r9+rbx+56], rax

; 1064 : 	arr_features[i_cu1].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rcx+rbx]
	mov	QWORD PTR [r9+rbx+64], rax

; 1065 : 
; 1066 : 
; 1067 : 	arr_features[i_cu2].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r8+rbx-96]
	mov	QWORD PTR [rdx+rbx-48], rax

; 1068 : 	arr_features[i_cu2].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r9+rbx]
	mov	QWORD PTR [rdx+rbx-40], rax

; 1069 : 	arr_features[i_cu2].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rcx+rbx]
	mov	QWORD PTR [rdx+rbx-32], rax

; 1070 : 
; 1071 : 
; 1072 : 	arr_features[i_cu3].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r8+rbx-96]
	mov	QWORD PTR [rcx+rbx+48], rax

; 1073 : 	arr_features[i_cu3].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r9+rbx]
	mov	QWORD PTR [rcx+rbx+56], rax

; 1074 : 	arr_features[i_cu3].neigh_variance_C = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [rdx+rbx-96]
	mov	QWORD PTR [rcx+rbx+64], rax
$LN5@features_c:

; 1094 : 	{
; 1095 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	movzx	edx, BYTE PTR i_depth$[rsp]
	inc	bpl
	cmp	bpl, r10b
	jl	$LL7@features_c

; 1092 : 
; 1093 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	movzx	eax, BYTE PTR y$1$[rsp]
	inc	al
	mov	BYTE PTR y$1$[rsp], al
	cmp	al, r10b
	jl	$LL4@features_c
	movaps	xmm9, XMMWORD PTR [rsp+32]
	movaps	xmm8, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+64]
	movaps	xmm6, XMMWORD PTR [rsp+80]
	mov	r15, QWORD PTR [rsp+96]
	mov	r14, QWORD PTR [rsp+104]
	mov	r12, QWORD PTR [rsp+112]
	mov	rdi, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+128]
	mov	rbp, QWORD PTR [rsp+160]
$LN3@features_c:

; 1116 : 				y % 2 == 1)
; 1117 : 			{
; 1118 : 				features_var_neighbor(arr_features, x, y, i_depth);
; 1119 : 			}
; 1120 : 
; 1121 : 		}
; 1122 : 	}
; 1123 : }

	add	rsp, 136				; 00000088H
	pop	r13
	pop	rbx
	ret	0
features_compute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 40
arr_sub_features$ = 48
i_depth$ = 56
features_sub_var PROC

; 1137 : {

	push	rbp
	push	rsi
	push	rdi
	push	r13

; 1138 : 	int8_t i_nbBlock = (1 << i_depth);

	movzx	r13d, r8b
	mov	rbp, rcx
	mov	ecx, r13d
	mov	edi, 1
	shl	dil, cl

; 1139 : 
; 1140 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	xor	r11b, r11b
	mov	rsi, rdx
	test	dil, dil
	jle	$LN3@features_s
	mov	QWORD PTR [rsp+40], rbx
	lea	eax, DWORD PTR [r13+1]
	mov	QWORD PTR [rsp+48], r12
	mov	QWORD PTR [rsp+56], r14
	mov	QWORD PTR [rsp+64], r15
	npad	1
$LL4@features_s:

; 1141 : 	{
; 1142 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	movzx	r10d, r11b
	lea	ecx, DWORD PTR [r13+2]
	movzx	r14d, r10w
	movzx	r15d, r10w
	shl	r14w, cl
	add	r10w, r10w
	mov	ecx, r13d
	xor	bl, bl
	shl	r15w, cl
	inc	r10w
	mov	ecx, eax
	shl	r10w, cl
	npad	5
$LL7@features_s:

; 1143 : 		{
; 1144 : 			int16_t i_cu = x + (y << i_depth);

	movsx	ecx, bl
	inc	bl

; 1145 : 			int16_t i_sb0 = (x << 1) + (y << (2 + i_depth)); 					/*!< Top left sub block index */

	movzx	r8d, cx
	add	r8w, r8w
	lea	eax, DWORD PTR [r14+r8]

; 1146 : 			int16_t i_sb1 = (x << 1) + 1 + (y << (2 + i_depth)); 		    	/*!< Top right sub block index */
; 1147 : 			int16_t i_sb2 = (x << 1) + (((y << 1) + 1) << (1 + i_depth)); 		/*!< Bottom left sub block index */
; 1148 : 			int16_t i_sb3 = (x << 1) + 1 + (((y << 1) + 1) << (1 + i_depth));  /*!< Bottom right sub block index */
; 1149 : 
; 1150 : 
; 1151 : 			arr_features[i_cu].sub_variance_0 = arr_sub_features[i_sb0].variance;

	movsx	rdx, ax
	lea	eax, DWORD PTR [rcx+r15]
	movsx	rax, ax
	lea	r9, QWORD PTR [rax+rax*2]
	shl	r9, 5
	lea	rax, QWORD PTR [rdx+rdx*2]
	shl	rax, 5
	mov	rax, QWORD PTR [rax+rsi]
	mov	QWORD PTR [r9+rbp+16], rax

; 1152 : 			arr_features[i_cu].sub_variance_1 = arr_sub_features[i_sb1].variance;

	lea	rax, QWORD PTR [rdx+1]
	lea	rax, QWORD PTR [rax+rax*2]
	shl	rax, 5
	mov	rax, QWORD PTR [rax+rsi]
	mov	QWORD PTR [r9+rbp+24], rax
	lea	eax, DWORD PTR [r8+r10]

; 1153 : 			arr_features[i_cu].sub_variance_2 = arr_sub_features[i_sb2].variance;

	movsx	rcx, ax
	lea	rax, QWORD PTR [rcx+rcx*2]
	shl	rax, 5
	mov	rax, QWORD PTR [rax+rsi]
	mov	QWORD PTR [r9+rbp+32], rax

; 1154 : 			arr_features[i_cu].sub_variance_3 = arr_sub_features[i_sb3].variance;

	lea	rax, QWORD PTR [rcx+1]
	lea	rax, QWORD PTR [rax+rax*2]
	shl	rax, 5
	mov	rax, QWORD PTR [rax+rsi]
	mov	QWORD PTR [r9+rbp+40], rax
	cmp	bl, dil
	jl	SHORT $LL7@features_s

; 1139 : 
; 1140 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	inc	r11b
	lea	eax, DWORD PTR [r13+1]
	cmp	r11b, dil
	jl	$LL4@features_s
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+48]
	mov	rbx, QWORD PTR [rsp+40]
$LN3@features_s:

; 1155 : 
; 1156 : 		}
; 1157 : 	}
; 1158 : }

	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
features_sub_var ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 40
arr_up_features$ = 48
i_rdepth$ = 56
features_merge_var PROC

; 1171 : {

	push	rbp
	push	rsi
	push	rdi
	push	r13

; 1172 : 	uint8_t i_depth = i_rdepth - 1;

	dec	r8b
	mov	rsi, rcx

; 1173 : 	int8_t 	i_nbBlock = (1 << i_depth);

	movzx	r13d, r8b
	mov	ebp, 1
	mov	ecx, r13d

; 1174 : 
; 1175 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	xor	r11b, r11b
	shl	bpl, cl
	mov	rdi, rdx
	test	bpl, bpl
	jle	$LN3@features_m
	mov	QWORD PTR [rsp+40], rbx
	lea	eax, DWORD PTR [r13+1]
	mov	QWORD PTR [rsp+48], r12
	mov	QWORD PTR [rsp+56], r14
	mov	QWORD PTR [rsp+64], r15
	npad	14
$LL4@features_m:

; 1176 : 	{
; 1177 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	movzx	r10d, r11b
	mov	ecx, r13d
	movzx	r14d, r10w
	movzx	r15d, r10w
	shl	r14w, cl
	add	r10w, r10w
	lea	ecx, DWORD PTR [r13+2]
	xor	bl, bl
	shl	r15w, cl
	inc	r10w
	mov	ecx, eax
	shl	r10w, cl
	npad	5
$LL7@features_m:

; 1178 : 		{
; 1179 : 			int16_t i_cu = x + (y << i_depth);

	movsx	r8d, bl
	inc	bl
	lea	eax, DWORD PTR [r8+r14]

; 1180 : 			int16_t i_sb0 = (x << 1) + (y << (2 + i_depth)); 					/*!< Top left sub block index */

	add	r8w, r8w

; 1181 : 			int16_t i_sb1 = (x << 1) + 1 + (y << (2 + i_depth)); 		    	/*!< Top right sub block index */
; 1182 : 			int16_t i_sb2 = (x << 1) + (((y << 1) + 1) << (1 + i_depth)); 		/*!< Bottom left sub block index */
; 1183 : 			int16_t i_sb3 = (x << 1) + 1 + (((y << 1) + 1) << (1 + i_depth));  /*!< Bottom right sub block index */
; 1184 : 
; 1185 : 			arr_features[i_sb0].merge_variance = arr_up_features[i_cu].variance;

	movsx	rax, ax
	lea	r9, QWORD PTR [rax+rax*2]
	shl	r9, 5
	lea	eax, DWORD PTR [r15+r8]
	movsx	rdx, ax
	mov	rax, QWORD PTR [r9+rdi]
	lea	rcx, QWORD PTR [rdx+rdx*2]
	shl	rcx, 5
	mov	QWORD PTR [rcx+rsi+8], rax

; 1186 : 			arr_features[i_sb1].merge_variance = arr_up_features[i_cu].variance;

	lea	rcx, QWORD PTR [rdx+rdx*2]
	mov	rax, QWORD PTR [r9+rdi]
	shl	rcx, 5
	mov	QWORD PTR [rcx+rsi+104], rax
	lea	eax, DWORD PTR [r8+r10]

; 1187 : 			arr_features[i_sb2].merge_variance = arr_up_features[i_cu].variance;

	movsx	rdx, ax
	mov	rax, QWORD PTR [r9+rdi]
	lea	rcx, QWORD PTR [rdx+rdx*2]
	shl	rcx, 5
	mov	QWORD PTR [rcx+rsi+8], rax

; 1188 : 			arr_features[i_sb3].merge_variance = arr_up_features[i_cu].variance;

	lea	rcx, QWORD PTR [rdx+rdx*2]
	mov	rax, QWORD PTR [r9+rdi]
	shl	rcx, 5
	mov	QWORD PTR [rcx+rsi+104], rax
	cmp	bl, bpl
	jl	SHORT $LL7@features_m

; 1174 : 
; 1175 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	inc	r11b
	lea	eax, DWORD PTR [r13+1]
	cmp	r11b, bpl
	jl	$LL4@features_m
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+56]
	mov	r12, QWORD PTR [rsp+48]
	mov	rbx, QWORD PTR [rsp+40]
$LN3@features_m:

; 1189 : 
; 1190 : 		}
; 1191 : 	}
; 1192 : }

	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
features_merge_var ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 32
i_depth$ = 40
features_var_of_sub_var PROC

; 1204 : {

	push	rbx
	sub	rsp, 16

; 1205 : 	int8_t i_nbBlock = (1 << i_depth);

	movzx	ebx, dl
	mov	r10, rcx
	mov	ecx, ebx
	mov	r11d, 1
	shl	r11b, cl

; 1206 : 
; 1207 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	xor	dl, dl
	test	r11b, r11b
	jle	$LN3@features_v
	movaps	XMMWORD PTR [rsp], xmm6
	movsd	xmm6, QWORD PTR __real@3fd0000000000000
	npad	2
$LL4@features_v:

; 1208 : 	{
; 1209 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	xor	r9b, r9b
	movzx	r8d, dl
	mov	ecx, ebx
	shl	r8w, cl
	npad	3
$LL7@features_v:

; 1210 : 		{
; 1211 : 			int16_t i_cu = x + (y << i_depth);

	movsx	eax, r9b
	inc	r9b
	add	ax, r8w

; 1212 : 			double d_var = 0.0;
; 1213 : 			double d_avg = (arr_features[i_cu].sub_variance_0 + arr_features[i_cu].sub_variance_1 + arr_features[i_cu].sub_variance_2 + arr_features[i_cu].sub_variance_3) / 4.0;

	movsx	rax, ax
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 5
	movsd	xmm4, QWORD PTR [rcx+r10+16]
	movsd	xmm5, QWORD PTR [rcx+r10+40]
	movaps	xmm0, xmm4
	movsd	xmm3, QWORD PTR [rcx+r10+24]
	movaps	xmm1, xmm5
	movsd	xmm2, QWORD PTR [rcx+r10+32]
	addsd	xmm0, xmm3
	addsd	xmm1, xmm2
	addsd	xmm1, xmm0
	mulsd	xmm1, xmm6

; 1214 : 
; 1215 : 			d_var = pow2(arr_features[i_cu].sub_variance_0 - d_avg);
; 1216 : 			d_var = pow2(arr_features[i_cu].sub_variance_1 - d_avg) + d_var;
; 1217 : 			d_var = pow2(arr_features[i_cu].sub_variance_2 - d_avg) + d_var;
; 1218 : 			d_var = pow2(arr_features[i_cu].sub_variance_3 - d_avg) + d_var;

	subsd	xmm5, xmm1
	subsd	xmm4, xmm1
	subsd	xmm3, xmm1
	subsd	xmm2, xmm1
	mulsd	xmm5, xmm5
	mulsd	xmm4, xmm4
	mulsd	xmm2, xmm2
	mulsd	xmm3, xmm3
	addsd	xmm5, xmm2
	addsd	xmm4, xmm3

; 1219 : 			arr_features[i_cu].var_of_sub_var = d_var / 4.0;

	addsd	xmm5, xmm4
	mulsd	xmm5, xmm6
	movsd	QWORD PTR [rcx+r10+88], xmm5
	cmp	r9b, r11b
	jl	$LL7@features_v

; 1206 : 
; 1207 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	inc	dl
	cmp	dl, r11b
	jl	$LL4@features_v
	movaps	xmm6, XMMWORD PTR [rsp]
$LN3@features_v:

; 1220 : 		}
; 1221 : 	}
; 1222 : }

	add	rsp, 16
	pop	rbx
	ret	0
features_var_of_sub_var ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
tv9621 = 32
tv10208 = 40
tv9623 = 44
tv9624 = 48
arr_features_4$1$ = 56
arr_features_8$1$ = 64
arr_features_16$1$ = 72
arr_features_32$1$ = 80
p_features64$1$ = 88
avg_luma$ = 96
variance$ = 2144
x$1$ = 4352
arr_features$ = 4352
luma_px$ = 4360
y$1$ = 4368
i_yBlck$1$ = 4376
features_compute_all PROC

; 1238 : {

	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	eax, 4288				; 000010c0H
	call	__chkstk
	sub	rsp, rax
	movaps	XMMWORD PTR [rsp+4272], xmm6
	mov	r13, rdx
	movaps	XMMWORD PTR [rsp+4256], xmm7
	mov	rbx, rcx
	movaps	XMMWORD PTR [rsp+4240], xmm8

; 1239 : 
; 1240 : 	uint32_t x_px = 0; /*!< Top left X of the lcu */
; 1241 : 	uint32_t y_px = 0; /*!< Top left Y of the lcu */
; 1242 : 	double variance[256] = { 0.0 };

	lea	rcx, QWORD PTR variance$[rsp+8]
	movaps	XMMWORD PTR [rsp+4224], xmm9
	xor	edx, edx
	movaps	XMMWORD PTR [rsp+4208], xmm10
	mov	r8d, 2040				; 000007f8H
	xorps	xmm10, xmm10
	movaps	XMMWORD PTR [rsp+4192], xmm11
	movsd	QWORD PTR variance$[rsp], xmm10
	call	memset

; 1243 : 	double avg_luma[256] = { 0.0 };

	xor	edx, edx
	movsd	QWORD PTR avg_luma$[rsp], xmm10
	mov	r8d, 2040				; 000007f8H
	lea	rcx, QWORD PTR avg_luma$[rsp+8]
	call	memset

; 1244 : 
; 1245 : 
; 1246 : 	features_s* arr_features_4 = arr_features[4];

	mov	rax, QWORD PTR [rbx+32]

; 1247 : 	features_s* arr_features_8 = arr_features[3];

	mov	rcx, QWORD PTR [rbx+24]

; 1248 : 	features_s* arr_features_16 = arr_features[2];
; 1249 : 	features_s* arr_features_32 = arr_features[1];
; 1250 : 	features_s* p_features64 = arr_features[0];
; 1251 : 
; 1252 : 	/*!< Compute the variance for all 4*4 blocs */
; 1253 : 	for (int8_t y = 0; y < 8; ++y)

	movsd	xmm11, QWORD PTR __real@bff0000000000000
	mov	QWORD PTR arr_features_4$1$[rsp], rax
	mov	rax, QWORD PTR [rbx+16]
	mov	QWORD PTR arr_features_8$1$[rsp], rcx
	mov	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR arr_features_16$1$[rsp], rax
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR arr_features_32$1$[rsp], rcx
	xor	cl, cl
	mov	QWORD PTR p_features64$1$[rsp], rax
	mov	BYTE PTR y$1$[rsp], cl
$LL4@features_c:

; 1254 : 	{
; 1255 : 		for (int8_t x = 0; x < 8; ++x)

	movzx	edx, cl
	xor	al, al
	mov	BYTE PTR x$1$[rsp], al
	lea	r8d, DWORD PTR [rdx*8]

; 1256 : 		{
; 1257 : 			int16_t x_blck = (x << 1);
; 1258 : 			int16_t y_blck = (y << 1);
; 1259 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,

	shl	edx, 5
	lea	r14d, DWORD PTR [r8+4]
	mov	DWORD PTR tv9624[rsp], r8d
	lea	ecx, DWORD PTR [r14+4]
	mov	DWORD PTR i_yBlck$1$[rsp], r14d
	mov	DWORD PTR tv10208[rsp], ecx
	mov	DWORD PTR tv9623[rsp], edx
	npad	11
$LL7@features_c:

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	mov	r9d, 64					; 00000040H

; 1256 : 		{
; 1257 : 			int16_t x_blck = (x << 1);
; 1258 : 			int16_t y_blck = (y << 1);
; 1259 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,

	movzx	eax, al

; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	mov	edi, 64					; 00000040H

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	mov	esi, r8d

; 1256 : 		{
; 1257 : 			int16_t x_blck = (x << 1);
; 1258 : 			int16_t y_blck = (y << 1);
; 1259 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,

	lea	ecx, DWORD PTR [rax+rax]
	lea	ebx, DWORD PTR [rcx+rdx]
	lea	edx, DWORD PTR [rcx*4]
	mov	QWORD PTR tv9621[rsp], rbx

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	lea	ebp, DWORD PTR [rdx+4]

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	mov	r15d, edx
	cmp	ebp, r9d
	cmovb	r9d, ebp
	cmp	r14d, edi
	cmovb	edi, r14d

; 899  : 	if (_mat_src == NULL)

	test	r13, r13
	jne	SHORT $LN22@features_c

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 903  : 		return -1.0;

	mov	rax, -4616189618054758400		; bff0000000000000H

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]

; 903  : 		return -1.0;

	mov	QWORD PTR avg_luma$[rsp+rbx*8], rax

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 937  : 		return -1.0;

	movaps	xmm5, xmm11
	jmp	$LN25@features_c
$LN22@features_c:

; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rbx, r9
	mov	r11, rdi
	sub	rbx, r15
	xorps	xmm2, xmm2
	sub	r11, rsi
	js	SHORT $LN365@features_c
	cvtsi2sd xmm2, r11
	jmp	SHORT $LN366@features_c
$LN365@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
$LN366@features_c:
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN363@features_c
	cvtsi2sd xmm0, rbx
	jmp	SHORT $LN364@features_c
$LN363@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN364@features_c:
	mulsd	xmm2, xmm0

; 906  : 	double   avg_vect = 0.0;

	movaps	xmm4, xmm10

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN17@features_c

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	shl	r10, 6
	add	r10, r13
	npad	4
$LL18@features_c:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	rdx, r15
	cmp	r15, r9
	jae	$LN16@features_c
	cmp	rbx, 4
	jb	SHORT $LL423@features_c
	mov	r8, r9
	lea	rcx, QWORD PTR [r10+2]
	sub	r8, r15
	add	rcx, r15
	sub	r8, 4
	shr	r8, 2
	inc	r8
	lea	rdx, QWORD PTR [r15+r8*4]
	npad	2
$LL209@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rcx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	addsd	xmm1, xmm4
	cvtdq2pd xmm0, xmm0
	movaps	xmm4, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	addsd	xmm4, xmm0
	cvtdq2pd xmm1, xmm1
	add	rcx, 4
	movd	xmm0, eax
	addsd	xmm4, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	sub	r8, 1
	jne	SHORT $LL209@features_c

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	rdx, r9
	jae	SHORT $LN16@features_c
	npad	15
$LL423@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [r10+rdx]
	inc	rdx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	cmp	rdx, r9
	jb	SHORT $LL423@features_c
$LN16@features_c:

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	r11, 1
	jne	$LL18@features_c
$LN17@features_c:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	mov	rax, QWORD PTR tv9621[rsp]

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r11, r9

; 916  : 	return avg_vect / (double)(block_size);

	divsd	xmm4, xmm2

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	sub	r11, r15
	mov	rbx, rdi
	sub	rbx, rsi
	xorps	xmm9, xmm9

; 916  : 	return avg_vect / (double)(block_size);

	movaps	xmm8, xmm4
	movsd	QWORD PTR avg_luma$[rsp+rax*8], xmm4
	unpcklpd xmm8, xmm8

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	js	SHORT $LN361@features_c
	cvtsi2sd xmm9, rbx
	jmp	SHORT $LN362@features_c
$LN361@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN362@features_c:
	xorps	xmm0, xmm0
	test	r11, r11
	js	SHORT $LN359@features_c
	cvtsi2sd xmm0, r11
	jmp	SHORT $LN360@features_c
$LN359@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN360@features_c:
	mulsd	xmm9, xmm0

; 940  : 	double   variance = 0.0;

	movaps	xmm5, xmm10

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN27@features_c

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	lea	rdi, QWORD PTR [r15+r13]
	shl	r10, 6
	xorps	xmm6, xmm6
	xorps	xmm7, xmm7
	npad	5
$LL28@features_c:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r15
	cmp	r15, r9
	jae	$LN26@features_c
	cmp	r11, 4
	jb	SHORT $LN276@features_c

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, r11
	lea	rdx, QWORD PTR [rdi+r10]
	and	eax, 3
	mov	rcx, r9
	sub	rcx, rax
$LL31@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rdx]
	xorps	xmm0, xmm0

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	add	r8, 4

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movd	xmm1, eax
	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rcx
	jb	SHORT $LL31@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	$LN26@features_c
$LN276@features_c:
	mov	rax, r9
	sub	rax, r8
	cmp	rax, 4
	jb	$LN275@features_c
	lea	rax, QWORD PTR [r10+r8]
	mov	rdx, r9
	sub	rdx, r8
	lea	rcx, QWORD PTR [r13+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL212@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm4
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm4
	subsd	xmm1, xmm4
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm5
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm4
	movaps	xmm5, xmm3
	addsd	xmm5, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm5, xmm1
	addsd	xmm5, xmm2
	sub	rdx, 1
	jne	SHORT $LL212@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	SHORT $LN26@features_c
$LN275@features_c:
	lea	rcx, QWORD PTR [r10+r8]
	mov	rdx, r9
	add	rcx, r13
	sub	rdx, r8
$LC171@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm4
	mulsd	xmm0, xmm0
	addsd	xmm5, xmm0
	sub	rdx, 1
	jne	SHORT $LC171@features_c
$LN26@features_c:

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	rbx, 1
	jne	$LL28@features_c

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	addpd	xmm6, xmm7
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	addsd	xmm5, xmm6
$LN27@features_c:
	mov	rbx, QWORD PTR tv9621[rsp]

; 947  : 		}
; 948  : 	}
; 949  : 	return variance / (double)(block_size);

	divsd	xmm5, xmm9
$LN25@features_c:

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	lea	r12d, DWORD PTR [rbp+4]

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movsd	QWORD PTR variance$[rsp+rbx*8], xmm5

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	mov	r9d, 64					; 00000040H

; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	mov	edi, 64					; 00000040H
	cmp	r12d, r9d
	cmovb	r9d, r12d
	cmp	r14d, edi
	cmovb	edi, r14d

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	mov	r14d, ebp

; 899  : 	if (_mat_src == NULL)

	test	r13, r13
	jne	SHORT $LN48@features_c

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 903  : 		return -1.0;

	mov	rax, -4616189618054758400		; bff0000000000000H

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]

; 903  : 		return -1.0;

	mov	QWORD PTR avg_luma$[rsp+rbx*8+8], rax

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 937  : 		return -1.0;

	movaps	xmm5, xmm11
	jmp	$LN51@features_c
$LN48@features_c:

; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rbx, r9
	mov	r11, rdi
	sub	rbx, r14
	xorps	xmm2, xmm2
	sub	r11, rsi
	js	SHORT $LN357@features_c
	cvtsi2sd xmm2, r11
	jmp	SHORT $LN358@features_c
$LN357@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
$LN358@features_c:
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN355@features_c
	cvtsi2sd xmm0, rbx
	jmp	SHORT $LN356@features_c
$LN355@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN356@features_c:
	mulsd	xmm2, xmm0

; 906  : 	double   avg_vect = 0.0;

	movaps	xmm4, xmm10

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN43@features_c

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	shl	r10, 6
	add	r10, r13
$LL44@features_c:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	rdx, r14
	cmp	r14, r9
	jae	$LN42@features_c
	cmp	rbx, 4
	jb	$LL430@features_c
	mov	r8, r9
	lea	rcx, QWORD PTR [r10+2]
	sub	r8, r14
	add	rcx, r14
	sub	r8, 4
	shr	r8, 2
	inc	r8
	lea	rdx, QWORD PTR [r8*4]
	add	rdx, rbp
	npad	4
$LL215@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rcx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	addsd	xmm1, xmm4
	cvtdq2pd xmm0, xmm0
	movaps	xmm4, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	addsd	xmm4, xmm0
	cvtdq2pd xmm1, xmm1
	add	rcx, 4
	movd	xmm0, eax
	addsd	xmm4, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	sub	r8, 1
	jne	SHORT $LL215@features_c

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	rdx, r9
	jae	SHORT $LN42@features_c
	npad	15
$LL430@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [r10+rdx]
	inc	rdx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	cmp	rdx, r9
	jb	SHORT $LL430@features_c
$LN42@features_c:

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	r11, 1
	jne	$LL44@features_c
$LN43@features_c:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	mov	rbx, QWORD PTR tv9621[rsp]

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, r9

; 916  : 	return avg_vect / (double)(block_size);

	divsd	xmm4, xmm2

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	sub	r10, r14
	mov	r11, rdi
	sub	r11, rsi
	xorps	xmm9, xmm9

; 916  : 	return avg_vect / (double)(block_size);

	movaps	xmm8, xmm4
	movsd	QWORD PTR avg_luma$[rsp+rbx*8+8], xmm4
	unpcklpd xmm8, xmm8

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	js	SHORT $LN353@features_c
	cvtsi2sd xmm9, r11
	jmp	SHORT $LN354@features_c
$LN353@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN354@features_c:
	xorps	xmm0, xmm0
	test	r10, r10
	js	SHORT $LN351@features_c
	cvtsi2sd xmm0, r10
	jmp	SHORT $LN352@features_c
$LN351@features_c:
	mov	rax, r10
	mov	rcx, r10
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN352@features_c:
	mulsd	xmm9, xmm0

; 940  : 	double   variance = 0.0;

	movaps	xmm5, xmm10

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN53@features_c

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	shl	rsi, 6
	mov	rbx, rbp
	add	rbx, r13
	xorps	xmm6, xmm6
	xorps	xmm7, xmm7
	npad	6
$LL54@features_c:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r14
	cmp	r14, r9
	jae	$LN52@features_c
	cmp	r10, 4
	jb	SHORT $LN272@features_c

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, r10
	lea	rdx, QWORD PTR [rbx+rsi]
	and	eax, 3
	mov	rcx, r9
	sub	rcx, rax
$LL57@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rdx]
	xorps	xmm0, xmm0

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	add	r8, 4

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movd	xmm1, eax
	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rcx
	jb	SHORT $LL57@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	$LN52@features_c
$LN272@features_c:
	mov	rax, r9
	sub	rax, r8
	cmp	rax, 4
	jb	$LN271@features_c
	lea	rax, QWORD PTR [rsi+r8]
	mov	rdx, r9
	sub	rdx, r8
	lea	rcx, QWORD PTR [r13+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL218@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm4
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm4
	subsd	xmm1, xmm4
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm5
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm4
	movaps	xmm5, xmm3
	addsd	xmm5, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm5, xmm1
	addsd	xmm5, xmm2
	sub	rdx, 1
	jne	SHORT $LL218@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	SHORT $LN52@features_c
$LN271@features_c:
	lea	rcx, QWORD PTR [rsi+r8]
	mov	rdx, r9
	add	rcx, r13
	sub	rdx, r8
$LC173@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm4
	mulsd	xmm0, xmm0
	addsd	xmm5, xmm0
	sub	rdx, 1
	jne	SHORT $LC173@features_c
$LN52@features_c:

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	rsi, 64					; 00000040H
	sub	r11, 1
	jne	$LL54@features_c
	mov	rbx, QWORD PTR tv9621[rsp]

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	addpd	xmm6, xmm7
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	addsd	xmm5, xmm6
$LN53@features_c:

; 947  : 		}
; 948  : 	}
; 949  : 	return variance / (double)(block_size);

	divsd	xmm5, xmm9
$LN51@features_c:

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	mov	esi, DWORD PTR i_yBlck$1$[rsp]
	mov	r9d, 64					; 00000040H
	cmp	ebp, r9d

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movsd	QWORD PTR variance$[rsp+rbx*8+8], xmm5

; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	mov	edi, 64					; 00000040H
	cmovb	r9d, ebp
	mov	ebp, DWORD PTR tv10208[rsp]
	cmp	ebp, edi
	cmovb	edi, ebp

; 899  : 	if (_mat_src == NULL)

	test	r13, r13
	jne	$LN74@features_c

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 903  : 		return -1.0;

	mov	r15, -4616189618054758400		; bff0000000000000H

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]

; 903  : 		return -1.0;

	mov	QWORD PTR avg_luma$[rsp+rbx*8+128], r15

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 937  : 		return -1.0;

	movaps	xmm5, xmm11
	jmp	$LN77@features_c
$LN74@features_c:

; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rbx, r9
	mov	r11, rdi
	sub	rbx, r15
	xorps	xmm2, xmm2
	sub	r11, rsi
	js	SHORT $LN349@features_c
	cvtsi2sd xmm2, r11
	jmp	SHORT $LN350@features_c
$LN349@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
$LN350@features_c:
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN347@features_c
	cvtsi2sd xmm0, rbx
	jmp	SHORT $LN348@features_c
$LN347@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN348@features_c:
	mulsd	xmm2, xmm0

; 906  : 	double   avg_vect = 0.0;

	movaps	xmm4, xmm10

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN69@features_c

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	shl	r10, 6
	add	r10, r13
	npad	4
$LL70@features_c:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	rdx, r15
	cmp	r15, r9
	jae	$LN68@features_c
	cmp	rbx, 4
	jb	$LL437@features_c
	mov	r8, r9
	lea	rcx, QWORD PTR [r10+2]
	sub	r8, r15
	add	rcx, r15
	sub	r8, 4
	shr	r8, 2
	inc	r8
	lea	rdx, QWORD PTR [r15+r8*4]
	npad	14
$LL221@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rcx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	addsd	xmm1, xmm4
	cvtdq2pd xmm0, xmm0
	movaps	xmm4, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	addsd	xmm4, xmm0
	cvtdq2pd xmm1, xmm1
	add	rcx, 4
	movd	xmm0, eax
	addsd	xmm4, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	sub	r8, 1
	jne	SHORT $LL221@features_c

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	rdx, r9
	jae	SHORT $LN68@features_c
	npad	15
$LL437@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [r10+rdx]
	inc	rdx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	cmp	rdx, r9
	jb	SHORT $LL437@features_c
$LN68@features_c:

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	r11, 1
	jne	$LL70@features_c
$LN69@features_c:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	mov	rax, QWORD PTR tv9621[rsp]

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r11, r9

; 916  : 	return avg_vect / (double)(block_size);

	divsd	xmm4, xmm2

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	sub	r11, r15
	mov	rbx, rdi
	sub	rbx, rsi
	xorps	xmm9, xmm9

; 916  : 	return avg_vect / (double)(block_size);

	movaps	xmm8, xmm4
	movsd	QWORD PTR avg_luma$[rsp+rax*8+128], xmm4
	unpcklpd xmm8, xmm8

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	js	SHORT $LN345@features_c
	cvtsi2sd xmm9, rbx
	jmp	SHORT $LN346@features_c
$LN345@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN346@features_c:
	xorps	xmm0, xmm0
	test	r11, r11
	js	SHORT $LN343@features_c
	cvtsi2sd xmm0, r11
	jmp	SHORT $LN344@features_c
$LN343@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN344@features_c:
	mulsd	xmm9, xmm0

; 940  : 	double   variance = 0.0;

	movaps	xmm5, xmm10

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN79@features_c

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	lea	rdi, QWORD PTR [r15+r13]
	shl	r10, 6
	xorps	xmm6, xmm6
	xorps	xmm7, xmm7
	npad	2
$LL80@features_c:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r15
	cmp	r15, r9
	jae	$LN78@features_c
	cmp	r11, 4
	jb	SHORT $LN268@features_c

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, r11
	lea	rdx, QWORD PTR [rdi+r10]
	and	eax, 3
	mov	rcx, r9
	sub	rcx, rax
$LL83@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rdx]
	xorps	xmm0, xmm0

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	add	r8, 4

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movd	xmm1, eax
	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rcx
	jb	SHORT $LL83@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	$LN78@features_c
$LN268@features_c:
	mov	rax, r9
	sub	rax, r8
	cmp	rax, 4
	jb	$LN267@features_c
	lea	rax, QWORD PTR [r10+r8]
	mov	rdx, r9
	sub	rdx, r8
	lea	rcx, QWORD PTR [r13+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL224@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm4
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm4
	subsd	xmm1, xmm4
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm5
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm4
	movaps	xmm5, xmm3
	addsd	xmm5, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm5, xmm1
	addsd	xmm5, xmm2
	sub	rdx, 1
	jne	SHORT $LL224@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	SHORT $LN78@features_c
$LN267@features_c:
	lea	rcx, QWORD PTR [r10+r8]
	mov	rdx, r9
	add	rcx, r13
	sub	rdx, r8
$LC175@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm4
	mulsd	xmm0, xmm0
	addsd	xmm5, xmm0
	sub	rdx, 1
	jne	SHORT $LC175@features_c
$LN78@features_c:

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	rbx, 1
	jne	$LL80@features_c

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	addpd	xmm6, xmm7
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	addsd	xmm5, xmm6
$LN79@features_c:
	mov	rbx, QWORD PTR tv9621[rsp]

; 947  : 		}
; 948  : 	}
; 949  : 	return variance / (double)(block_size);

	mov	r15, -4616189618054758400		; bff0000000000000H
	divsd	xmm5, xmm9
$LN77@features_c:

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	mov	r9d, 64					; 00000040H

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movsd	QWORD PTR variance$[rsp+rbx*8+128], xmm5

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	cmp	r12d, r9d

; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	mov	edi, 64					; 00000040H
	cmovb	r9d, r12d
	cmp	ebp, edi
	cmovb	edi, ebp

; 899  : 	if (_mat_src == NULL)

	test	r13, r13
	jne	SHORT $LN100@features_c

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943326
	call	fprintf

; 902  : 		assert(0);

	mov	r8d, 902				; 00000386H
	lea	rdx, OFFSET FLAT:$SG4294943325
	lea	rcx, OFFSET FLAT:$SG4294943324
	call	QWORD PTR __imp__wassert

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	lea	ecx, QWORD PTR [r13+2]

; 903  : 		return -1.0;

	mov	QWORD PTR avg_luma$[rsp+rbx*8+136], r15

; 935  : 		fprintf(stderr, "null pointer as parameter.");

	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943323
	call	fprintf

; 936  : 		assert(0);

	mov	r8d, 936				; 000003a8H
	lea	rdx, OFFSET FLAT:$SG4294943322
	lea	rcx, OFFSET FLAT:$SG4294943321
	call	QWORD PTR __imp__wassert

; 937  : 		return -1.0;

	movaps	xmm5, xmm11
	jmp	$LN103@features_c
$LN100@features_c:

; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	rbx, r9
	mov	r11, rdi
	sub	rbx, r14
	xorps	xmm2, xmm2
	sub	r11, rsi
	js	SHORT $LN341@features_c
	cvtsi2sd xmm2, r11
	jmp	SHORT $LN342@features_c
$LN341@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
$LN342@features_c:
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN339@features_c
	cvtsi2sd xmm0, rbx
	jmp	SHORT $LN340@features_c
$LN339@features_c:
	mov	rax, rbx
	mov	rcx, rbx
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN340@features_c:
	mulsd	xmm2, xmm0

; 906  : 	double   avg_vect = 0.0;

	movaps	xmm4, xmm10

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN95@features_c

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, rsi
	shl	r10, 6
	add	r10, r13
	npad	3
$LL96@features_c:

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	rdx, r14
	cmp	r14, r9
	jae	$LN94@features_c
	cmp	rbx, 4
	jb	SHORT $LL444@features_c
	mov	r8, r9
	lea	rcx, QWORD PTR [r10+2]
	sub	r8, r14
	add	rcx, r14
	sub	r8, 4
	shr	r8, 2
	inc	r8
	lea	rdx, QWORD PTR [r14+r8*4]
	npad	2
$LL227@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rcx-2]
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtdq2pd xmm1, xmm1
	movd	xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	addsd	xmm1, xmm4
	cvtdq2pd xmm0, xmm0
	movaps	xmm4, xmm1
	movd	xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	addsd	xmm4, xmm0
	cvtdq2pd xmm1, xmm1
	add	rcx, 4
	movd	xmm0, eax
	addsd	xmm4, xmm1
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	sub	r8, 1
	jne	SHORT $LL227@features_c

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;
; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	rdx, r9
	jae	SHORT $LN94@features_c
	npad	15
$LL444@features_c:

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	movzx	eax, BYTE PTR [rdx+r10]
	inc	rdx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	addsd	xmm4, xmm0
	cmp	rdx, r9
	jb	SHORT $LL444@features_c
$LN94@features_c:

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	r10, 64					; 00000040H
	sub	r11, 1
	jne	$LL96@features_c
$LN95@features_c:

; 914  : 		}
; 915  : 	}
; 916  : 	return avg_vect / (double)(block_size);

	mov	rbx, QWORD PTR tv9621[rsp]

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	r10, r9

; 916  : 	return avg_vect / (double)(block_size);

	divsd	xmm4, xmm2

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	sub	r10, r14
	mov	r11, rdi
	sub	r11, rsi
	xorps	xmm9, xmm9

; 916  : 	return avg_vect / (double)(block_size);

	movaps	xmm8, xmm4
	movsd	QWORD PTR avg_luma$[rsp+rbx*8+136], xmm4
	unpcklpd xmm8, xmm8

; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	js	SHORT $LN337@features_c
	cvtsi2sd xmm9, r11
	jmp	SHORT $LN338@features_c
$LN337@features_c:
	mov	rax, r11
	mov	rcx, r11
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm9, rcx
	addsd	xmm9, xmm9
$LN338@features_c:
	xorps	xmm0, xmm0
	test	r10, r10
	js	SHORT $LN335@features_c
	cvtsi2sd xmm0, r10
	jmp	SHORT $LN336@features_c
$LN335@features_c:
	mov	rax, r10
	mov	rcx, r10
	shr	rcx, 1
	and	eax, 1
	or	rcx, rax
	cvtsi2sd xmm0, rcx
	addsd	xmm0, xmm0
$LN336@features_c:
	mulsd	xmm9, xmm0

; 940  : 	double   variance = 0.0;

	movaps	xmm5, xmm10

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	cmp	rsi, rdi
	jae	$LN105@features_c
	xorps	xmm6, xmm6

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	shl	rsi, 6
	xorps	xmm7, xmm7
	lea	rbx, QWORD PTR [r14+r13]
	npad	5
$LL106@features_c:

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	r8, r14
	cmp	r14, r9
	jae	$LN104@features_c
	cmp	r10, 4
	jb	SHORT $LN264@features_c

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	rax, r10
	lea	rcx, QWORD PTR [rbx+rsi]
	and	eax, 3
	mov	rdx, r9
	sub	rdx, rax
$LL109@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, WORD PTR [rcx]
	xorps	xmm0, xmm0

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	add	r8, 4

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movd	xmm1, eax
	movzx	eax, WORD PTR [rcx+2]
	add	rcx, 4
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	movd	xmm1, eax
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm6, xmm0
	xorps	xmm0, xmm0
	punpcklbw xmm1, xmm0
	punpcklwd xmm1, xmm0
	cvtdq2pd xmm0, xmm1
	subpd	xmm0, xmm8
	mulpd	xmm0, xmm0
	addpd	xmm7, xmm0
	cmp	r8, rdx
	jb	SHORT $LL109@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	$LN104@features_c
$LN264@features_c:
	mov	rax, r9
	sub	rax, r8
	cmp	rax, 4
	jb	$LN263@features_c
	lea	rax, QWORD PTR [rsi+r8]
	mov	rdx, r9
	sub	rdx, r8
	lea	rcx, QWORD PTR [r13+2]
	sub	rdx, 4
	add	rcx, rax
	shr	rdx, 2
	inc	rdx
	lea	r8, QWORD PTR [r8+rdx*4]
	npad	1
$LL230@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx-2]
	xorps	xmm3, xmm3
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	xorps	xmm2, xmm2
	cvtsi2sd xmm3, eax
	movzx	eax, BYTE PTR [rcx-1]
	cvtsi2sd xmm0, eax
	movzx	eax, BYTE PTR [rcx]
	subsd	xmm3, xmm4
	cvtsi2sd xmm1, eax
	movzx	eax, BYTE PTR [rcx+1]
	add	rcx, 4
	mulsd	xmm3, xmm3
	subsd	xmm0, xmm4
	subsd	xmm1, xmm4
	cvtsi2sd xmm2, eax
	mulsd	xmm0, xmm0
	addsd	xmm3, xmm5
	mulsd	xmm1, xmm1
	subsd	xmm2, xmm4
	movaps	xmm5, xmm3
	addsd	xmm5, xmm0
	mulsd	xmm2, xmm2
	addsd	xmm5, xmm1
	addsd	xmm5, xmm2
	sub	rdx, 1
	jne	SHORT $LL230@features_c

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	cmp	r8, r9
	jae	SHORT $LN104@features_c
$LN263@features_c:
	lea	rcx, QWORD PTR [rsi+r8]
	mov	rdx, r9
	add	rcx, r13
	sub	rdx, r8
$LC177@features_c:

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	subsd	xmm0, xmm4
	mulsd	xmm0, xmm0
	addsd	xmm5, xmm0
	sub	rdx, 1
	jne	SHORT $LC177@features_c
$LN104@features_c:

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	add	rsi, 64					; 00000040H
	sub	r11, 1
	jne	$LL106@features_c
	mov	rbx, QWORD PTR tv9621[rsp]

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	addpd	xmm6, xmm7
	movaps	xmm0, xmm6
	unpckhpd xmm0, xmm6
	addsd	xmm6, xmm0

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	addsd	xmm5, xmm6
$LN105@features_c:

; 947  : 		}
; 948  : 	}
; 949  : 	return variance / (double)(block_size);

	divsd	xmm5, xmm9
$LN103@features_c:

; 1254 : 	{
; 1255 : 		for (int8_t x = 0; x < 8; ++x)

	movzx	eax, BYTE PTR x$1$[rsp]
	mov	r14d, DWORD PTR i_yBlck$1$[rsp]
	inc	al
	mov	edx, DWORD PTR tv9623[rsp]
	mov	r8d, DWORD PTR tv9624[rsp]

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	movsd	QWORD PTR variance$[rsp+rbx*8+136], xmm5

; 1254 : 	{
; 1255 : 		for (int8_t x = 0; x < 8; ++x)

	mov	BYTE PTR x$1$[rsp], al
	cmp	al, 8
	jl	$LL7@features_c

; 1248 : 	features_s* arr_features_16 = arr_features[2];
; 1249 : 	features_s* arr_features_32 = arr_features[1];
; 1250 : 	features_s* p_features64 = arr_features[0];
; 1251 : 
; 1252 : 	/*!< Compute the variance for all 4*4 blocs */
; 1253 : 	for (int8_t y = 0; y < 8; ++y)

	movzx	ecx, BYTE PTR y$1$[rsp]
	inc	cl
	mov	BYTE PTR y$1$[rsp], cl
	cmp	cl, 8
	jl	$LL4@features_c
	mov	rbp, QWORD PTR arr_features_4$1$[rsp]

; 1093 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	xor	sil, sil
	npad	6
$LL116@features_c:

; 1094 : 	{
; 1095 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	movzx	ebx, sil
	xor	r11b, r11b
	movzx	edi, bx
	shl	di, 4
	npad	2
$LL119@features_c:

; 1096 : 		{
; 1097 : 			int16_t i_cu = x + (y << i_depth);

	movzx	edx, r11b
	lea	eax, DWORD PTR [rdx+rdi]

; 1098 : 			if (i_depth == 4)
; 1099 : 			{
; 1100 : 				arr_features[i_cu].variance = arr_var[i_cu];

	movzx	eax, ax
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR variance$[rsp+rax*8]
	shl	rcx, 5
	mov	QWORD PTR [rcx+rbp], rax

; 1101 : 			}
; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);
; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));
; 1106 : 				int16_t i_rows = (16 << (3 - i_depth));
; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,
; 1108 : 					i_CU_4,
; 1109 : 					i_CU_4 + (1 << (3 - i_depth)),
; 1110 : 					i_CU_4 + i_rows,
; 1111 : 					i_CU_4 + i_rows + (1 << (3 - i_depth)));
; 1112 : 				arr_avg[i_CU_4] = d_avgLumaC;
; 1113 : 				arr_var[i_CU_4] = arr_features[i_cu].variance;
; 1114 : 			}
; 1115 : 			if (x % 2 == 1 &&

	test	dl, 1
	je	$LN117@features_c
	test	bl, 1
	je	$LN117@features_c

; 1052 : 	int16_t i_cu0 = (_x - 1) + ((_y - 1) << _depth);

	movzx	eax, bx
	shl	ax, 4
	sub	ax, 16
	add	ax, dx

; 1053 : 	int16_t i_cu1 = (_x)+((_y - 1) << _depth);
; 1054 : 	int16_t i_cu2 = (_x - 1) + (_y << _depth);
; 1055 : 	int16_t i_cu3 = _x + (_y << _depth);
; 1056 : 
; 1057 : 	arr_features[i_cu0].neigh_variance_A = arr_features[i_cu1].variance;

	movsx	rax, ax
	lea	r10, QWORD PTR [rax+rax*2]
	lea	r9, QWORD PTR [rax+rax*2]
	shl	r10, 5
	shl	r9, 5
	mov	rax, QWORD PTR [r10+rbp]
	mov	QWORD PTR [r9+rbp-48], rax
	movzx	eax, bx
	shl	ax, 4
	add	ax, dx

; 1058 : 	arr_features[i_cu0].neigh_variance_B = arr_features[i_cu2].variance;

	movzx	ecx, ax
	lea	r8, QWORD PTR [rcx+rcx*2]
	shl	r8, 5

; 1059 : 	arr_features[i_cu0].neigh_variance_C = arr_features[i_cu3].variance;

	lea	rdx, QWORD PTR [rcx+rcx*2]
	shl	rdx, 5
	mov	rax, QWORD PTR [r8+rbp-96]
	mov	QWORD PTR [r9+rbp-40], rax
	mov	rax, QWORD PTR [rdx+rbp]
	mov	QWORD PTR [r9+rbp-32], rax

; 1060 : 
; 1061 : 
; 1062 : 	arr_features[i_cu1].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+rbp-96]
	mov	QWORD PTR [r10+rbp+48], rax

; 1063 : 	arr_features[i_cu1].neigh_variance_B = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [r8+rbp-96]
	mov	QWORD PTR [r10+rbp+56], rax

; 1064 : 	arr_features[i_cu1].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rdx+rbp]
	mov	QWORD PTR [r10+rbp+64], rax

; 1065 : 
; 1066 : 
; 1067 : 	arr_features[i_cu2].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+rbp-96]
	mov	QWORD PTR [r8+rbp-48], rax

; 1068 : 	arr_features[i_cu2].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r10+rbp]
	mov	QWORD PTR [r8+rbp-40], rax

; 1069 : 	arr_features[i_cu2].neigh_variance_C = arr_features[i_cu3].variance;

	mov	rax, QWORD PTR [rdx+rbp]
	mov	QWORD PTR [r8+rbp-32], rax

; 1070 : 
; 1071 : 
; 1072 : 	arr_features[i_cu3].neigh_variance_A = arr_features[i_cu0].variance;

	mov	rax, QWORD PTR [r9+rbp-96]
	mov	QWORD PTR [rdx+rbp+48], rax

; 1073 : 	arr_features[i_cu3].neigh_variance_B = arr_features[i_cu1].variance;

	mov	rax, QWORD PTR [r10+rbp]
	mov	QWORD PTR [rdx+rbp+56], rax

; 1074 : 	arr_features[i_cu3].neigh_variance_C = arr_features[i_cu2].variance;

	mov	rax, QWORD PTR [r8+rbp-96]
	mov	QWORD PTR [rdx+rbp+64], rax
$LN117@features_c:

; 1095 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	inc	r11b
	cmp	r11b, 16
	jl	$LL119@features_c

; 1075 : }
; 1076 : 
; 1077 : 
; 1078 : /*!
; 1079 : * \brief Extract the features from the pixels for a given different depth.
; 1080 : *
; 1081 : * \param arr_features 		Array of features to be retrieved for the current depth.
; 1082 : * \param i_depth 			Depth to be evaluated.
; 1083 : * \param arr_var 			Array of 16*16 variances.
; 1084 : * \param arr_avg 			Array of 16*16 average lumas.
; 1085 : * \return None.
; 1086 : */
; 1087 : static void features_compute(features_s* arr_features, uint8_t i_depth, double* arr_var, double* arr_avg)
; 1088 : {
; 1089 : 	double d_avgLumaC;
; 1090 : 
; 1091 : 	int8_t i_nbBlock = (1 << i_depth);
; 1092 : 
; 1093 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	inc	sil
	cmp	sil, 16
	jl	$LL116@features_c

; 1260 : 				&avg_luma[CR_GET_CU_D4(x_blck, y_blck, 4)],
; 1261 : 				&variance[CR_GET_CU_D4(x_blck, y_blck, 4)]);
; 1262 : 
; 1263 : 			features_var_avg_blck(luma_px, x_px, y_px, (x_blck + 1) << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,
; 1264 : 				&avg_luma[CR_GET_CU_D4(x_blck + 1, y_blck, 4)],
; 1265 : 				&variance[CR_GET_CU_D4(x_blck + 1, y_blck, 4)]);
; 1266 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, (y_blck + 1) << 2, 4, LCU_WIDTH, LCU_WIDTH,
; 1267 : 				&avg_luma[CR_GET_CU_D4(x_blck, y_blck + 1, 4)],
; 1268 : 				&variance[CR_GET_CU_D4(x_blck, y_blck + 1, 4)]);
; 1269 : 			features_var_avg_blck(luma_px, x_px, y_px, (x_blck + 1) << 2, (y_blck + 1) << 2, 4, LCU_WIDTH, LCU_WIDTH,
; 1270 : 				&avg_luma[CR_GET_CU_D4(x_blck + 1, y_blck + 1, 4)],
; 1271 : 				&variance[CR_GET_CU_D4(x_blck + 1, y_blck + 1, 4)]);
; 1272 : 
; 1273 : 		}
; 1274 : 	}
; 1275 : 
; 1276 : 	/* Compute the generic features of the all depth */
; 1277 : 	features_compute(arr_features_4, 4, variance, avg_luma);
; 1278 : 	features_compute(arr_features_8, 3, variance, avg_luma);

	mov	rbx, QWORD PTR arr_features_8$1$[rsp]
	lea	r9, QWORD PTR avg_luma$[rsp]
	mov	rcx, rbx
	lea	r8, QWORD PTR variance$[rsp]
	mov	dl, 3
	call	features_compute

; 1279 : 	features_compute(arr_features_16, 2, variance, avg_luma);

	mov	rdi, QWORD PTR arr_features_16$1$[rsp]
	lea	r9, QWORD PTR avg_luma$[rsp]
	mov	rcx, rdi
	lea	r8, QWORD PTR variance$[rsp]
	mov	dl, 2
	call	features_compute

; 1280 : 	features_compute(arr_features_32, 1, variance, avg_luma);

	mov	rsi, QWORD PTR arr_features_32$1$[rsp]
	lea	r9, QWORD PTR avg_luma$[rsp]
	mov	rcx, rsi
	lea	r8, QWORD PTR variance$[rsp]
	mov	dl, 1
	call	features_compute

; 1281 : 	features_compute(p_features64, 0, variance, avg_luma);

	mov	r14, QWORD PTR p_features64$1$[rsp]
	lea	r9, QWORD PTR avg_luma$[rsp]
	mov	rcx, r14
	lea	r8, QWORD PTR variance$[rsp]
	xor	edx, edx
	call	features_compute

; 1282 : 
; 1283 : 	/* Set the Sub_var features for the depth 3, 2, 1, 0*/
; 1284 : 	features_sub_var(arr_features_8, arr_features_4, 3);

	mov	r8b, 3
	mov	rdx, rbp
	mov	rcx, rbx
	call	features_sub_var

; 1285 : 	features_sub_var(arr_features_16, arr_features_8, 2);

	mov	r8b, 2
	mov	rdx, rbx
	mov	rcx, rdi
	call	features_sub_var

; 1286 : 	features_sub_var(arr_features_32, arr_features_16, 1);

	mov	r8b, 1
	mov	rdx, rdi
	mov	rcx, rsi
	call	features_sub_var

; 1287 : 	features_sub_var(p_features64, arr_features_32, 0);

	xor	r8d, r8d
	mov	rdx, rsi
	mov	rcx, r14
	call	features_sub_var

; 1288 : 
; 1289 : 	/* Set the Merge_var features for the depth 4, 3, 2, 1*/
; 1290 : 	features_merge_var(arr_features_4, arr_features_8, 4);

	mov	r8b, 4
	mov	rdx, rbx
	mov	rcx, rbp
	call	features_merge_var

; 1291 : 	features_merge_var(arr_features_8, arr_features_16, 3);

	mov	r8b, 3
	mov	rdx, rdi
	mov	rcx, rbx
	call	features_merge_var

; 1292 : 	features_merge_var(arr_features_16, arr_features_32, 2);

	mov	r8b, 2
	mov	rdx, rsi
	mov	rcx, rdi
	call	features_merge_var

; 1293 : 	features_merge_var(arr_features_32, p_features64, 1);

	mov	r8b, 1
	mov	rdx, r14
	mov	rcx, rsi
	call	features_merge_var

; 1294 : 
; 1295 : 	/* Compute the Var_of_sub_var for the depth 3, 2, 1, 0*/
; 1296 : 	features_var_of_sub_var(arr_features_8, 3);

	mov	dl, 3
	mov	rcx, rbx
	call	features_var_of_sub_var

; 1297 : 	features_var_of_sub_var(arr_features_16, 2);

	mov	dl, 2
	mov	rcx, rdi
	call	features_var_of_sub_var

; 1298 : 	features_var_of_sub_var(arr_features_32, 1);

	mov	dl, 1
	mov	rcx, rsi
	call	features_var_of_sub_var

; 1299 : 	features_var_of_sub_var(p_features64, 0);

	xor	edx, edx
	mov	rcx, r14

; 1300 : 
; 1301 : }

	lea	r11, QWORD PTR [rsp+4288]
	mov	rbx, QWORD PTR [r11+72]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp

; 1299 : 	features_var_of_sub_var(p_features64, 0);

	jmp	features_var_of_sub_var
features_compute_all ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_depthMap$ = 8
_x$ = 16
_y$ = 24
_depth$ = 32
_level$dead$ = 40
neighbor_constrain_bu PROC

; 1315 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	rsi, rcx

; 1316 : 	int nb_block = (8 >> (_depth)) << 1;
; 1317 : 	for (int y = _y; y < _y + nb_block; ++y)

	movsxd	r10, r8d
	mov	ecx, r9d
	mov	eax, 8
	sar	eax, cl
	lea	edi, DWORD PTR [rax+rax]
	lea	eax, DWORD PTR [rdi+r8]
	movsxd	rbx, eax
	cmp	r10, rbx
	jge	SHORT $LN19@neighbor_c
	lea	eax, DWORD PTR [rdi+rdx]
	movsxd	r11, edx
	movsxd	r8, eax
	lea	rdx, QWORD PTR [rsi+r10*8]
	npad	5
$LL4@neighbor_c:

; 1318 : 	{
; 1319 : 		for (int x = _x; x < _x + nb_block; ++x)

	mov	rax, r11
	cmp	r11, r8
	jge	SHORT $LN2@neighbor_c
	npad	8
$LL7@neighbor_c:

; 1320 : 		{
; 1321 : 			if (arr_depthMap[x + (y << 3)] - _level >= _depth)

	movzx	ecx, BYTE PTR [rdx+rax]
	dec	ecx
	cmp	ecx, r9d
	jge	SHORT $LN12@neighbor_c

; 1318 : 	{
; 1319 : 		for (int x = _x; x < _x + nb_block; ++x)

	inc	rax
	cmp	rax, r8
	jl	SHORT $LL7@neighbor_c
$LN2@neighbor_c:

; 1316 : 	int nb_block = (8 >> (_depth)) << 1;
; 1317 : 	for (int y = _y; y < _y + nb_block; ++y)

	inc	r10
	add	rdx, 8
	cmp	r10, rbx
	jl	SHORT $LL4@neighbor_c
$LN19@neighbor_c:

; 1322 : 				return 0;
; 1323 : 		}
; 1324 : 	}
; 1325 : 	return 1;

	mov	eax, 1

; 1326 : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
$LN12@neighbor_c:
	mov	rbx, QWORD PTR [rsp+8]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
neighbor_constrain_bu ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
merge_prediction$ = 8
split_prediction$ = 16
test_id$ = 24
depth$ = 32
combined_tree_function PROC

; 1332 : 	int8_t prediction;
; 1333 : 	int8_t pred_merge_tmp = 0; // NUmber of sub-blocks non merge (=d)

	xor	r10b, r10b
	mov	r11d, 4
	npad	7
$LL4@combined_t:

; 1334 : 	for (int8_t i = 0; i < 4; i++) {
; 1335 : 		pred_merge_tmp += (merge_prediction[i] > 0) ? 1 : 0;

	cmp	BYTE PTR [rcx], 0
	lea	rcx, QWORD PTR [rcx+1]
	setg	al
	add	r10b, al
	sub	r11, 1
	jne	SHORT $LL4@combined_t

; 1336 : 	}
; 1337 : 	switch (test_id) {// We don't merge (-1) if :

	movzx	eax, r8b
	cmp	eax, 12
	ja	$LN20@combined_t
	lea	r8, OFFSET FLAT:__ImageBase
	mov	ecx, DWORD PTR $LN52@combined_t[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN7@combined_t:

; 1338 : 	case 0: // At least one sub block non merge
; 1339 : 		prediction = (pred_merge_tmp >= 1) ? depth : -1;
; 1340 : 		break;

	cmp	r10b, 1
	movzx	eax, r9b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
$LN8@combined_t:

; 1341 : 	case 1: // At least two sub blocks non merge
; 1342 : 		prediction = (pred_merge_tmp >= 2) ? depth : -1;
; 1343 : 		break;

	cmp	r10b, 2
	movzx	eax, r9b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
$LN9@combined_t:

; 1344 : 	case 2: // At least three sub blocks non merge
; 1345 : 		prediction = (pred_merge_tmp >= 3) ? depth : -1;
; 1346 : 		break;

	cmp	r10b, 3
	movzx	eax, r9b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
$LN10@combined_t:

; 1347 : 	case 3: // All sub blocks non merge
; 1348 : 		prediction = (pred_merge_tmp >= 4) ? depth : -1;
; 1349 : 		break;

	cmp	r10b, 4
	movzx	eax, r9b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
$LN11@combined_t:

; 1350 : 	case 4: // Up bock non merge ( = split)
; 1351 : 		prediction = (split_prediction == -1) ? depth : -1;
; 1352 : 		break;

	cmp	dl, -1
	movzx	eax, r9b
	mov	ecx, -1					; ffffffffH
	cmovne	eax, ecx

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
$LN12@combined_t:

; 1353 : 	case 5: // (At least one sub block non merge) & Up block non merge
; 1354 : 		prediction = ((pred_merge_tmp >= 1) && (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 1
	jl	SHORT $LN32@combined_t
$LN55@combined_t:

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	cmp	dl, -1
	je	SHORT $LN40@combined_t
$LN32@combined_t:
	mov	al, -1
	ret	0
$LN13@combined_t:

; 1355 : 		break;
; 1356 : 	case 6: // (At least two sub blocks non merge) & Up block non merge
; 1357 : 		prediction = ((pred_merge_tmp >= 2) && (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 2
$LN53@combined_t:

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	jl	SHORT $LN32@combined_t
	cmp	dl, -1
	jne	SHORT $LN32@combined_t
$LN40@combined_t:
	movzx	eax, r9b
	ret	0
$LN14@combined_t:

; 1358 : 		break;
; 1359 : 	case 7: // (At least three sub blocks non merge) & Up block non merge
; 1360 : 		prediction = ((pred_merge_tmp >= 3) && (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 3
	jmp	SHORT $LN53@combined_t
$LN15@combined_t:

; 1361 : 		break;
; 1362 : 	case 8: // (All sub blocks non merge) & Up block non merge
; 1363 : 		prediction = ((pred_merge_tmp >= 4) && (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 4
	jmp	SHORT $LN53@combined_t
$LN16@combined_t:

; 1364 : 		break;
; 1365 : 	case 9: // (At least one sub block non merge) | Up block non merge
; 1366 : 		prediction = ((pred_merge_tmp >= 1) || (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 1
	jge	SHORT $LN40@combined_t
	jmp	SHORT $LN55@combined_t
$LN17@combined_t:

; 1367 : 		break;
; 1368 : 	case 10: // (At least two sub blocks non merge) | Up block non merge
; 1369 : 		prediction = ((pred_merge_tmp >= 2) || (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 2
	jge	SHORT $LN40@combined_t
	jmp	SHORT $LN55@combined_t
$LN18@combined_t:

; 1370 : 		break;
; 1371 : 	case 11: // (At least three sub blocks non merge) | Up block non merge
; 1372 : 		prediction = ((pred_merge_tmp >= 3) || (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 3
	jge	SHORT $LN40@combined_t
	jmp	SHORT $LN55@combined_t
$LN19@combined_t:

; 1373 : 		break;
; 1374 : 	case 12: // (All sub blocks non merge) | Up block non merge
; 1375 : 		prediction = ((pred_merge_tmp >= 4) || (split_prediction == -1)) ? depth : -1;

	cmp	r10b, 4
	jge	SHORT $LN40@combined_t
	jmp	SHORT $LN55@combined_t
$LN20@combined_t:

; 1376 : 		break;
; 1377 : 	default:
; 1378 : 		prediction = 0;

	xor	al, al

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;
; 1382 : }

	ret	0
	npad	3
$LN52@combined_t:
	DD	$LN7@combined_t
	DD	$LN8@combined_t
	DD	$LN9@combined_t
	DD	$LN10@combined_t
	DD	$LN11@combined_t
	DD	$LN12@combined_t
	DD	$LN13@combined_t
	DD	$LN14@combined_t
	DD	$LN15@combined_t
	DD	$LN16@combined_t
	DD	$LN17@combined_t
	DD	$LN18@combined_t
	DD	$LN19@combined_t
combined_tree_function ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
matrix$ = 64
cu$ = 72
curr_depth$ = 80
val$ = 88
fill_depth_matrix_8 PROC

; 1386 : {

	push	rbx
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 1387 : 	//convert cu coordinate
; 1388 : 	int32_t x = cu->x;
; 1389 : 	int32_t y = cu->y;

	mov	ebx, DWORD PTR [rdx+4]
	mov	r15, rcx

; 1390 : 	int i = 0;
; 1391 : 	int32_t block = (8 >> curr_depth); //nb blocks in 8*8 block

	movzx	ecx, r8b
	mov	eax, 8
	sar	eax, cl

; 1392 : 	for (i = y; i < y + block; ++i)

	lea	r14d, DWORD PTR [rax+rbx]
	cmp	ebx, r14d
	jge	SHORT $LN3@fill_depth
	mov	QWORD PTR [rsp+64], rbp
	movsxd	rbp, DWORD PTR [rdx]
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+80], rdi
	movsxd	rdi, eax
	movsx	esi, r9b
	npad	3
$LL4@fill_depth:

; 1393 : 	{
; 1394 : 		memset(matrix + x + (i << 3), val, block);

	lea	eax, DWORD PTR [rbx*8]
	mov	r8, rdi
	movsxd	rcx, eax
	mov	edx, esi
	add	rcx, rbp
	add	rcx, r15
	call	memset
	inc	ebx
	cmp	ebx, r14d
	jl	SHORT $LL4@fill_depth

; 1392 : 	for (i = y; i < y + block; ++i)

	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]
$LN3@fill_depth:

; 1395 : 	}
; 1396 : }

	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rbx
	ret	0
fill_depth_matrix_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
tv1611 = 32
tv1602 = 36
prediction_function_merge$1$ = 40
d_nb_bad$ = 48
d_nb_iter$ = 56
tv1593 = 64
tv1592 = 68
tv1610 = 72
tv1643 = 76
prediction_function_split$1$ = 80
predict_func_merge$ = 88
predict_func_split$ = 120
arr_depthMap$ = 240
arr_features_cur$ = 248
arr_features_up$ = 256
i_depth$ = 264
_level$dead$ = 272
merge_prediction$1 = 272
y$1$ = 280
limited_flag$dead$ = 280
ml_os_qt_gen PROC

; 1414 : {

	mov	r11, rsp
	mov	BYTE PTR [r11+32], r9b
	mov	QWORD PTR [r11+24], r8
	mov	QWORD PTR [r11+16], rdx
	mov	QWORD PTR [r11+8], rcx
	push	rbp
	push	rbx
	push	rdi
	push	r12
	push	r15
	lea	rbp, QWORD PTR [r11-79]
	sub	rsp, 192				; 000000c0H
	movzx	r12d, r9b

; 1415 : 	
; 1416 : 
; 1417 : 		tree_predict predict_func_merge[4] = {

	lea	rax, OFFSET FLAT:tree_predict_merge_depth_1
	mov	QWORD PTR predict_func_merge$[rbp-153], rax

; 1418 : 				tree_predict_merge_depth_1,
; 1419 : 				tree_predict_merge_depth_2,
; 1420 : 				tree_predict_merge_depth_3,
; 1421 : 				tree_predict_merge_depth_4
; 1422 : 		};
; 1423 : 
; 1424 : 		tree_predict predict_func_split[4] = {
; 1425 : 				tree_predict_split_depth_0,
; 1426 : 				tree_predict_split_depth_1,
; 1427 : 				tree_predict_split_depth_2,
; 1428 : 				tree_predict_split_depth_3
; 1429 : 		};
; 1430 : 	
; 1431 : 	tree_predict prediction_function_merge = predict_func_merge[i_depth - 1];
; 1432 : 	tree_predict prediction_function_split = predict_func_split[i_depth - 1];
; 1433 : 
; 1434 : 	double d_nb_iter;
; 1435 : 	double d_nb_bad;
; 1436 : 
; 1437 : 	uint8_t i_rdepth = i_depth < 4 ? i_depth : 3;
; 1438 : 
; 1439 : 	int16_t i_nbBlocks = 2 << (i_depth - 1);
; 1440 : 
; 1441 : 	int inc = 2;
; 1442 : 	for (int16_t y = 0; y < i_nbBlocks; y += inc)

	xor	r8d, r8d
	lea	rax, OFFSET FLAT:tree_predict_merge_depth_2
	mov	WORD PTR y$1$[rbp-153], r8w
	mov	QWORD PTR predict_func_merge$[rbp-145], rax
	mov	rbx, rcx
	lea	rax, OFFSET FLAT:tree_predict_merge_depth_3
	mov	edx, 2
	mov	QWORD PTR predict_func_merge$[rbp-137], rax
	mov	edi, r12d
	lea	rax, OFFSET FLAT:tree_predict_merge_depth_4
	movzx	r15d, r8w
	mov	QWORD PTR predict_func_merge$[rbp-129], rax
	lea	rax, OFFSET FLAT:tree_predict_split_depth_0
	mov	rcx, QWORD PTR predict_func_merge$[rbp+r12*8-161]
	mov	QWORD PTR predict_func_split$[rbp-153], rax
	lea	rax, OFFSET FLAT:tree_predict_split_depth_1
	mov	QWORD PTR predict_func_split$[rbp-145], rax
	lea	rax, OFFSET FLAT:tree_predict_split_depth_2
	mov	QWORD PTR predict_func_split$[rbp-137], rax
	lea	rax, OFFSET FLAT:tree_predict_split_depth_3
	mov	QWORD PTR prediction_function_merge$1$[rbp-153], rcx
	lea	ecx, DWORD PTR [r12-1]
	shl	dx, cl
	mov	QWORD PTR predict_func_split$[rbp-129], rax
	mov	rax, QWORD PTR predict_func_split$[rbp+r12*8-161]
	mov	QWORD PTR prediction_function_split$1$[rbp-153], rax
	mov	DWORD PTR tv1643[rbp-153], edx
	cmp	r8w, dx
	jge	$LN3@ml_os_qt_g

; 1449 : 			{
; 1450 : 				check_flag = neighbor_constrain_bu(arr_depthMap, x << (3 - i_depth), y << (3 - i_depth), i_depth, _level);

	mov	edx, 3
	mov	QWORD PTR [r11-48], rsi
	mov	r9d, edx
	mov	QWORD PTR [r11-56], r13
	sub	r9d, r12d
	mov	QWORD PTR [r11-64], r14
	cmp	r12b, 4
	mov	DWORD PTR tv1602[rbp-153], r9d
	mov	eax, r12d
	cmovae	eax, edx

; 1476 : 				{
; 1477 : 					int16_t i_subCU = CR_GET_CU_D3((i_depth < 4 ? x : x / 2), (i_depth < 4 ? y : y / 2), i_rdepth);

	movzx	ecx, al
	mov	eax, 6
	sub	edx, ecx
	sub	eax, ecx
	mov	DWORD PTR tv1593[rbp-153], edx
	mov	DWORD PTR tv1592[rbp-153], eax

; 1480 : 					tmp.y = i_subCU / 8;
; 1481 : 					fill_depth_matrix_8(arr_depthMap, &tmp, i_depth - 1, i_depth - 1);

	lea	eax, DWORD PTR [r12-1]

; 1391 : 	int32_t block = (8 >> curr_depth); //nb blocks in 8*8 block

	movsx	r14d, al
	mov	DWORD PTR tv1611[rbp-153], r14d
	npad	13
$LL4@ml_os_qt_g:
	movsx	esi, r15w

; 1443 : 	{
; 1444 : 		for (int16_t x = 0; x < i_nbBlocks; x += inc)

	movzx	r13d, r8w
	mov	DWORD PTR tv1610[rbp-153], esi
	npad	5
$LL7@ml_os_qt_g:

; 1445 : 		{
; 1446 : 			uint8_t check_flag = 1;
; 1447 : 			/*!< Check if neighboring blocks are of the same size */
; 1448 : 			if ((limited_flag == 1) && (i_depth != 4))

	cmp	r12b, 4
	je	SHORT $LN20@ml_os_qt_g

; 1449 : 			{
; 1450 : 				check_flag = neighbor_constrain_bu(arr_depthMap, x << (3 - i_depth), y << (3 - i_depth), i_depth, _level);

	mov	ecx, r9d
	movsx	r8d, r13w
	shl	r8d, cl
	mov	edx, esi
	shl	edx, cl

; 1316 : 	int nb_block = (8 >> (_depth)) << 1;

	mov	eax, 8
	mov	ecx, edi

; 1317 : 	for (int y = _y; y < _y + nb_block; ++y)

	movsxd	r9, edx
	sar	eax, cl
	lea	ecx, DWORD PTR [rax+rax]
	lea	eax, DWORD PTR [rcx+rdx]
	movsxd	r11, eax
	cmp	r9, r11
	jge	SHORT $LN20@ml_os_qt_g
	lea	eax, DWORD PTR [rcx+r8]
	movsxd	r10, r8d
	movsxd	r8, eax
	lea	rdx, QWORD PTR [rbx+r9*8]
	npad	4
$LL21@ml_os_qt_g:

; 1318 : 	{
; 1319 : 		for (int x = _x; x < _x + nb_block; ++x)

	mov	rax, r10
	cmp	r10, r8
	jge	SHORT $LN19@ml_os_qt_g
	npad	8
$LL24@ml_os_qt_g:

; 1320 : 		{
; 1321 : 			if (arr_depthMap[x + (y << 3)] - _level >= _depth)

	movzx	ecx, BYTE PTR [rax+rdx]
	dec	ecx
	cmp	ecx, edi
	jge	$LN5@ml_os_qt_g

; 1318 : 	{
; 1319 : 		for (int x = _x; x < _x + nb_block; ++x)

	inc	rax
	cmp	rax, r8
	jl	SHORT $LL24@ml_os_qt_g
$LN19@ml_os_qt_g:

; 1317 : 	for (int y = _y; y < _y + nb_block; ++y)

	inc	r9
	add	rdx, 8
	cmp	r9, r11
	jl	SHORT $LL21@ml_os_qt_g
$LN20@ml_os_qt_g:

; 1451 : 			}
; 1452 : 
; 1453 : 			if (check_flag)
; 1454 : 			{
; 1455 : 				int16_t i_cu_0 = x + (y << i_depth);

	mov	ecx, edi

; 1456 : 				int16_t i_cu_1 = x + 1 + (y << i_depth);
; 1457 : 				int16_t i_cu_2 = x + ((y + 1) << i_depth);
; 1458 : 				int16_t i_cu_3 = x + 1 + ((y + 1) << i_depth);
; 1459 : 				int16_t i_cu_up = x / 2 + (y / 2 << (i_depth - 1));
; 1460 : 
; 1461 : 
; 1462 : 				int8_t merge_prediction[4];
; 1463 : 				int8_t split_prediction;
; 1464 : 
; 1465 : 
; 1466 : 				merge_prediction[0] = prediction_function_merge(&arr_features_cur[i_cu_0], &d_nb_iter, &d_nb_bad);

	lea	r8, QWORD PTR d_nb_bad$[rbp-153]
	movzx	ebx, r15w
	lea	rdx, QWORD PTR d_nb_iter$[rbp-153]
	shl	bx, cl
	add	bx, r13w
	movsx	rax, bx
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 5
	add	rcx, QWORD PTR arr_features_cur$[rbp-153]
	call	QWORD PTR prediction_function_merge$1$[rbp-153]
	mov	BYTE PTR merge_prediction$1[rbp-153], al

; 1467 : 				merge_prediction[1] = prediction_function_merge(&arr_features_cur[i_cu_1], &d_nb_iter, &d_nb_bad);

	lea	r8, QWORD PTR d_nb_bad$[rbp-153]
	lea	eax, DWORD PTR [rbx+1]
	movsx	rax, ax
	lea	rdx, QWORD PTR d_nb_iter$[rbp-153]
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 5
	add	rcx, QWORD PTR arr_features_cur$[rbp-153]
	call	QWORD PTR prediction_function_merge$1$[rbp-153]
	mov	ecx, edi
	mov	BYTE PTR merge_prediction$1[rbp-152], al
	lea	ebx, DWORD PTR [r15+1]
	shl	bx, cl

; 1468 : 				merge_prediction[2] = prediction_function_merge(&arr_features_cur[i_cu_2], &d_nb_iter, &d_nb_bad);

	lea	r8, QWORD PTR d_nb_bad$[rbp-153]
	add	bx, r13w
	lea	rdx, QWORD PTR d_nb_iter$[rbp-153]
	movsx	rax, bx
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 5
	add	rcx, QWORD PTR arr_features_cur$[rbp-153]
	call	QWORD PTR prediction_function_merge$1$[rbp-153]
	mov	BYTE PTR merge_prediction$1[rbp-151], al

; 1469 : 				merge_prediction[3] = prediction_function_merge(&arr_features_cur[i_cu_3], &d_nb_iter, &d_nb_bad);

	lea	r8, QWORD PTR d_nb_bad$[rbp-153]
	lea	eax, DWORD PTR [rbx+1]
	movsx	rax, ax
	lea	rdx, QWORD PTR d_nb_iter$[rbp-153]
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 5
	add	rcx, QWORD PTR arr_features_cur$[rbp-153]
	call	QWORD PTR prediction_function_merge$1$[rbp-153]
	mov	BYTE PTR merge_prediction$1[rbp-150], al
	lea	ecx, DWORD PTR [rdi-1]
	mov	eax, esi

; 1470 : 				split_prediction = prediction_function_split(&arr_features_up[i_cu_up], &d_nb_iter, &d_nb_bad);

	lea	r8, QWORD PTR d_nb_bad$[rbp-153]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ebx, eax
	movsx	eax, r13w
	cdq
	sub	eax, edx
	movzx	edx, bx
	shl	dx, cl
	sar	eax, 1
	add	dx, ax
	mov	esi, eax
	movsx	rcx, dx
	lea	rdx, QWORD PTR d_nb_iter$[rbp-153]
	lea	rcx, QWORD PTR [rcx+rcx*2]
	shl	rcx, 5
	add	rcx, QWORD PTR arr_features_up$[rbp-153]
	call	QWORD PTR prediction_function_split$1$[rbp-153]

; 1333 : 	int8_t pred_merge_tmp = 0; // NUmber of sub-blocks non merge (=d)

	xor	r8b, r8b

; 1456 : 				int16_t i_cu_1 = x + 1 + (y << i_depth);
; 1457 : 				int16_t i_cu_2 = x + ((y + 1) << i_depth);
; 1458 : 				int16_t i_cu_3 = x + 1 + ((y + 1) << i_depth);
; 1459 : 				int16_t i_cu_up = x / 2 + (y / 2 << (i_depth - 1));
; 1460 : 
; 1461 : 
; 1462 : 				int8_t merge_prediction[4];
; 1463 : 				int8_t split_prediction;
; 1464 : 
; 1465 : 
; 1466 : 				merge_prediction[0] = prediction_function_merge(&arr_features_cur[i_cu_0], &d_nb_iter, &d_nb_bad);

	lea	rdx, QWORD PTR merge_prediction$1[rbp-153]

; 1470 : 				split_prediction = prediction_function_split(&arr_features_up[i_cu_up], &d_nb_iter, &d_nb_bad);

	mov	r10d, eax
	mov	r9d, 4
	npad	11
$LL30@ml_os_qt_g:

; 1335 : 		pred_merge_tmp += (merge_prediction[i] > 0) ? 1 : 0;

	cmp	BYTE PTR [rdx], 0
	lea	rdx, QWORD PTR [rdx+1]
	setg	cl
	add	r8b, cl
	sub	r9, 1
	jne	SHORT $LL30@ml_os_qt_g

; 1471 : 
; 1472 : 				int8_t pred = combined_tree_function(merge_prediction, split_prediction, (i_depth >= 4) ? 8 : 9, i_depth);

	xor	eax, eax

; 1337 : 	switch (test_id) {// We don't merge (-1) if :

	lea	r11, OFFSET FLAT:__ImageBase

; 1471 : 
; 1472 : 				int8_t pred = combined_tree_function(merge_prediction, split_prediction, (i_depth >= 4) ? 8 : 9, i_depth);

	cmp	r12b, 4
	setb	al
	add	eax, 8

; 1337 : 	switch (test_id) {// We don't merge (-1) if :

	cdqe
	mov	ecx, DWORD PTR $LN106@ml_os_qt_g[r11+rax*4]
	add	rcx, r11
	jmp	rcx
$LN33@ml_os_qt_g:

; 1338 : 	case 0: // At least one sub block non merge
; 1339 : 		prediction = (pred_merge_tmp >= 1) ? depth : -1;
; 1340 : 		break;

	cmp	r8b, 1
	movzx	eax, r12b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx
	jmp	$LN31@ml_os_qt_g
$LN34@ml_os_qt_g:

; 1341 : 	case 1: // At least two sub blocks non merge
; 1342 : 		prediction = (pred_merge_tmp >= 2) ? depth : -1;
; 1343 : 		break;

	cmp	r8b, 2
	movzx	eax, r12b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx
	jmp	SHORT $LN31@ml_os_qt_g
$LN35@ml_os_qt_g:

; 1344 : 	case 2: // At least three sub blocks non merge
; 1345 : 		prediction = (pred_merge_tmp >= 3) ? depth : -1;
; 1346 : 		break;

	cmp	r8b, 3
	movzx	eax, r12b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx
	jmp	SHORT $LN31@ml_os_qt_g
$LN36@ml_os_qt_g:

; 1347 : 	case 3: // All sub blocks non merge
; 1348 : 		prediction = (pred_merge_tmp >= 4) ? depth : -1;
; 1349 : 		break;

	cmp	r8b, 4
	movzx	eax, r12b
	mov	ecx, -1					; ffffffffH
	cmovl	eax, ecx
	jmp	SHORT $LN31@ml_os_qt_g
$LN37@ml_os_qt_g:

; 1350 : 	case 4: // Up bock non merge ( = split)
; 1351 : 		prediction = (split_prediction == -1) ? depth : -1;
; 1352 : 		break;

	cmp	r10b, -1
	movzx	eax, r12b
	mov	ecx, -1					; ffffffffH
	cmovne	eax, ecx
	jmp	SHORT $LN31@ml_os_qt_g
$LN38@ml_os_qt_g:

; 1353 : 	case 5: // (At least one sub block non merge) & Up block non merge
; 1354 : 		prediction = ((pred_merge_tmp >= 1) && (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 1
	jl	SHORT $LN105@ml_os_qt_g
	jmp	SHORT $LN111@ml_os_qt_g
$LN39@ml_os_qt_g:

; 1355 : 		break;
; 1356 : 	case 6: // (At least two sub blocks non merge) & Up block non merge
; 1357 : 		prediction = ((pred_merge_tmp >= 2) && (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 2
	jl	SHORT $LN105@ml_os_qt_g
	jmp	SHORT $LN111@ml_os_qt_g
$LN40@ml_os_qt_g:

; 1358 : 		break;
; 1359 : 	case 7: // (At least three sub blocks non merge) & Up block non merge
; 1360 : 		prediction = ((pred_merge_tmp >= 3) && (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 3
	jl	SHORT $LN105@ml_os_qt_g
	jmp	SHORT $LN111@ml_os_qt_g
$LN41@ml_os_qt_g:

; 1361 : 		break;
; 1362 : 	case 8: // (All sub blocks non merge) & Up block non merge
; 1363 : 		prediction = ((pred_merge_tmp >= 4) && (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 4
	jl	SHORT $LN105@ml_os_qt_g
	jmp	SHORT $LN111@ml_os_qt_g
$LN42@ml_os_qt_g:

; 1364 : 		break;
; 1365 : 	case 9: // (At least one sub block non merge) | Up block non merge
; 1366 : 		prediction = ((pred_merge_tmp >= 1) || (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 1

; 1367 : 		break;

	jmp	SHORT $LN112@ml_os_qt_g
$LN43@ml_os_qt_g:

; 1368 : 	case 10: // (At least two sub blocks non merge) | Up block non merge
; 1369 : 		prediction = ((pred_merge_tmp >= 2) || (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 2

; 1370 : 		break;

	jmp	SHORT $LN112@ml_os_qt_g
$LN44@ml_os_qt_g:

; 1371 : 	case 11: // (At least three sub blocks non merge) | Up block non merge
; 1372 : 		prediction = ((pred_merge_tmp >= 3) || (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 3

; 1373 : 		break;

	jmp	SHORT $LN112@ml_os_qt_g
$LN45@ml_os_qt_g:

; 1374 : 	case 12: // (All sub blocks non merge) | Up block non merge
; 1375 : 		prediction = ((pred_merge_tmp >= 4) || (split_prediction == -1)) ? depth : -1;

	cmp	r8b, 4
$LN112@ml_os_qt_g:

; 1473 : 				int condition = (pred < 0) ? 1 : 0;

	jge	SHORT $LN72@ml_os_qt_g
$LN111@ml_os_qt_g:
	cmp	r10b, -1
	jne	SHORT $LN105@ml_os_qt_g
$LN72@ml_os_qt_g:
	movzx	eax, r12b
$LN31@ml_os_qt_g:
	test	al, al

; 1474 : 
; 1475 : 				if (condition)

	jns	$LN109@ml_os_qt_g
$LN105@ml_os_qt_g:

; 1476 : 				{
; 1477 : 					int16_t i_subCU = CR_GET_CU_D3((i_depth < 4 ? x : x / 2), (i_depth < 4 ? y : y / 2), i_rdepth);

	mov	ecx, DWORD PTR tv1593[rbp-153]
	cmp	r12b, 4
	movzx	edx, r13w
	mov	eax, 1
	cmovae	dx, si
	shl	ax, cl
	movsx	ecx, ax
	movzx	eax, r15w
	movsx	r8d, dx
	imul	r8d, ecx
	mov	ecx, DWORD PTR tv1592[rbp-153]
	cmp	r12b, 4
	cmovae	ax, bx
	shl	ax, cl

; 1391 : 	int32_t block = (8 >> curr_depth); //nb blocks in 8*8 block

	mov	ecx, r14d

; 1476 : 				{
; 1477 : 					int16_t i_subCU = CR_GET_CU_D3((i_depth < 4 ? x : x / 2), (i_depth < 4 ? y : y / 2), i_rdepth);

	add	ax, r8w

; 1478 : 					vect_2D tmp;
; 1479 : 					tmp.x = i_subCU % 8;

	cwde
	cdq
	and	edx, 7
	add	eax, edx
	mov	ebx, eax
	and	eax, 7
	sub	eax, edx
	sar	ebx, 3

; 1391 : 	int32_t block = (8 >> curr_depth); //nb blocks in 8*8 block

	mov	edx, 8
	sar	edx, cl

; 1392 : 	for (i = y; i < y + block; ++i)

	lea	esi, DWORD PTR [rbx+rdx]
	cmp	ebx, esi
	jge	SHORT $LN109@ml_os_qt_g
	mov	rdi, QWORD PTR arr_depthMap$[rbp-153]
	mov	r12d, DWORD PTR tv1611[rbp-153]
	movsxd	r14, edx
	movsxd	r15, eax
	npad	12
$LL77@ml_os_qt_g:

; 1393 : 	{
; 1394 : 		memset(matrix + x + (i << 3), val, block);

	lea	eax, DWORD PTR [rbx*8]
	mov	r8, r14
	movsxd	rcx, eax
	mov	edx, r12d
	add	rcx, r15
	add	rcx, rdi
	call	memset
	inc	ebx
	cmp	ebx, esi
	jl	SHORT $LL77@ml_os_qt_g
	movzx	r12d, BYTE PTR i_depth$[rbp-153]

; 1337 : 	switch (test_id) {// We don't merge (-1) if :

	mov	r14d, DWORD PTR tv1611[rbp-153]
	mov	edi, r12d
	movzx	r15d, WORD PTR y$1$[rbp-153]
	mov	esi, DWORD PTR tv1610[rbp-153]
	jmp	SHORT $LN113@ml_os_qt_g
$LN109@ml_os_qt_g:

; 1443 : 	{
; 1444 : 		for (int16_t x = 0; x < i_nbBlocks; x += inc)

	movsx	esi, r15w
$LN113@ml_os_qt_g:
	mov	rbx, QWORD PTR arr_depthMap$[rbp-153]
$LN5@ml_os_qt_g:
	mov	edx, DWORD PTR tv1643[rbp-153]
	add	r13w, 2
	mov	r9d, DWORD PTR tv1602[rbp-153]
	cmp	r13w, dx
	jl	$LL7@ml_os_qt_g

; 1418 : 				tree_predict_merge_depth_1,
; 1419 : 				tree_predict_merge_depth_2,
; 1420 : 				tree_predict_merge_depth_3,
; 1421 : 				tree_predict_merge_depth_4
; 1422 : 		};
; 1423 : 
; 1424 : 		tree_predict predict_func_split[4] = {
; 1425 : 				tree_predict_split_depth_0,
; 1426 : 				tree_predict_split_depth_1,
; 1427 : 				tree_predict_split_depth_2,
; 1428 : 				tree_predict_split_depth_3
; 1429 : 		};
; 1430 : 	
; 1431 : 	tree_predict prediction_function_merge = predict_func_merge[i_depth - 1];
; 1432 : 	tree_predict prediction_function_split = predict_func_split[i_depth - 1];
; 1433 : 
; 1434 : 	double d_nb_iter;
; 1435 : 	double d_nb_bad;
; 1436 : 
; 1437 : 	uint8_t i_rdepth = i_depth < 4 ? i_depth : 3;
; 1438 : 
; 1439 : 	int16_t i_nbBlocks = 2 << (i_depth - 1);
; 1440 : 
; 1441 : 	int inc = 2;
; 1442 : 	for (int16_t y = 0; y < i_nbBlocks; y += inc)

	add	r15w, 2
	mov	r8d, 0
	mov	WORD PTR y$1$[rbp-153], r15w
	cmp	r15w, dx
	jl	$LL4@ml_os_qt_g
	mov	r14, QWORD PTR [rsp+168]
	mov	r13, QWORD PTR [rsp+176]
	mov	rsi, QWORD PTR [rsp+184]
$LN3@ml_os_qt_g:

; 1482 : 				}
; 1483 : 			}
; 1484 : 		}
; 1485 : 	}
; 1486 : }

	add	rsp, 192				; 000000c0H
	pop	r15
	pop	r12
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
	npad	2
$LN106@ml_os_qt_g:
	DD	$LN33@ml_os_qt_g
	DD	$LN34@ml_os_qt_g
	DD	$LN35@ml_os_qt_g
	DD	$LN36@ml_os_qt_g
	DD	$LN37@ml_os_qt_g
	DD	$LN38@ml_os_qt_g
	DD	$LN39@ml_os_qt_g
	DD	$LN40@ml_os_qt_g
	DD	$LN41@ml_os_qt_g
	DD	$LN42@ml_os_qt_g
	DD	$LN43@ml_os_qt_g
	DD	$LN44@ml_os_qt_g
	DD	$LN45@ml_os_qt_g
ml_os_qt_gen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
arr_features$ = 48
features64$ = 96
arr_features_32$ = 192
arr_features_16$ = 576
arr_features_8$ = 2112
arr_features_4$ = 8256
ml_intra_depth_ctu$dead$ = 32848
luma_px$ = 32856
qp$ = 32864
arr_CDM$ = 32872
os_luma_qt_pred PROC

; 1491 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	lea	rbp, QWORD PTR [rsp-32576]
	mov	eax, 32832				; 00008040H
	call	__chkstk
	sub	rsp, rax
	mov	rbx, r9
	movsx	ecx, r8b
	mov	r9, rdx

; 869  : 	for (i = 0; i < _size; ++i)

	lea	rax, QWORD PTR arr_features_4$[rbp-240]
	mov	r8d, 256				; 00000100H
	xor	r10d, r10d
	npad	11
$LL6@os_luma_qt:

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	mov	QWORD PTR [rax-16], r10

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	mov	QWORD PTR [rax], r10

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	mov	QWORD PTR [rax+8], r10

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	mov	QWORD PTR [rax+16], r10

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	mov	QWORD PTR [rax+24], r10

; 876  : 		arr_features[i].merge_variance = 0.0;

	mov	QWORD PTR [rax-8], r10

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	mov	QWORD PTR [rax+32], r10

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	mov	QWORD PTR [rax+40], r10

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	mov	QWORD PTR [rax+48], r10

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	mov	QWORD PTR [rax+56], r10

; 881  : 		arr_features[i].qp = _qp;

	mov	DWORD PTR [rax+64], ecx
	lea	rax, QWORD PTR [rax+96]
	sub	r8, 1
	jne	SHORT $LL6@os_luma_qt

; 869  : 	for (i = 0; i < _size; ++i)

	lea	rax, QWORD PTR arr_features_8$[rbp-240]
	lea	edx, QWORD PTR [r8+64]
	npad	1
$LL11@os_luma_qt:

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	mov	QWORD PTR [rax-16], r10

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	mov	QWORD PTR [rax], r10

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	mov	QWORD PTR [rax+8], r10

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	mov	QWORD PTR [rax+16], r10

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	mov	QWORD PTR [rax+24], r10

; 876  : 		arr_features[i].merge_variance = 0.0;

	mov	QWORD PTR [rax-8], r10

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	mov	QWORD PTR [rax+32], r10

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	mov	QWORD PTR [rax+40], r10

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	mov	QWORD PTR [rax+48], r10

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	mov	QWORD PTR [rax+56], r10

; 881  : 		arr_features[i].qp = _qp;

	mov	DWORD PTR [rax+64], ecx
	lea	rax, QWORD PTR [rax+96]
	sub	rdx, 1
	jne	SHORT $LL11@os_luma_qt

; 869  : 	for (i = 0; i < _size; ++i)

	lea	rax, QWORD PTR arr_features_16$[rbp-240]
	mov	edx, 16
$LL16@os_luma_qt:

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	mov	QWORD PTR [rax-16], r10

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	mov	QWORD PTR [rax], r10

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	mov	QWORD PTR [rax+8], r10

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	mov	QWORD PTR [rax+16], r10

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	mov	QWORD PTR [rax+24], r10

; 876  : 		arr_features[i].merge_variance = 0.0;

	mov	QWORD PTR [rax-8], r10

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	mov	QWORD PTR [rax+32], r10

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	mov	QWORD PTR [rax+40], r10

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	mov	QWORD PTR [rax+48], r10

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	mov	QWORD PTR [rax+56], r10

; 881  : 		arr_features[i].qp = _qp;

	mov	DWORD PTR [rax+64], ecx
	lea	rax, QWORD PTR [rax+96]
	sub	rdx, 1
	jne	SHORT $LL16@os_luma_qt

; 869  : 	for (i = 0; i < _size; ++i)

	lea	rax, QWORD PTR arr_features_32$[rbp-240]
	mov	edx, 4
	npad	3
$LL21@os_luma_qt:

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	mov	QWORD PTR [rax-16], r10

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	mov	QWORD PTR [rax], r10

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	mov	QWORD PTR [rax+8], r10

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	mov	QWORD PTR [rax+16], r10

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	mov	QWORD PTR [rax+24], r10

; 876  : 		arr_features[i].merge_variance = 0.0;

	mov	QWORD PTR [rax-8], r10

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	mov	QWORD PTR [rax+32], r10

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	mov	QWORD PTR [rax+40], r10

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	mov	QWORD PTR [rax+48], r10

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	mov	QWORD PTR [rax+56], r10

; 881  : 		arr_features[i].qp = _qp;

	mov	DWORD PTR [rax+64], ecx
	lea	rax, QWORD PTR [rax+96]
	sub	rdx, 1
	jne	SHORT $LL21@os_luma_qt
	xorps	xmm0, xmm0
	mov	DWORD PTR features64$[rbp-176], ecx
	xorps	xmm1, xmm1

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	movaps	XMMWORD PTR features64$[rsp+16], xmm0

; 1492 : 	// Features array per depth
; 1493 : 	features_s arr_features_4[256];
; 1494 : 	features_s arr_features_8[64];
; 1495 : 	features_s arr_features_16[16];
; 1496 : 	features_s arr_features_32[4];
; 1497 : 	features_s features64;
; 1498 : 
; 1499 : 	// Initialize to 0 all the features
; 1500 : 	features_init_array(arr_features_4, 256, qp);
; 1501 : 	features_init_array(arr_features_8, 64, qp);
; 1502 : 	features_init_array(arr_features_16, 16, qp);
; 1503 : 	features_init_array(arr_features_32, 4, qp);
; 1504 : 	features_init_array(&features64, 1, qp);
; 1505 : 
; 1506 : 	// Commpute the features for the current CTU for all depth
; 1507 : 	features_s* arr_features[5];
; 1508 : 	arr_features[0] = &features64;

	lea	rax, QWORD PTR features64$[rsp]

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	movaps	XMMWORD PTR features64$[rbp-224], xmm1

; 1492 : 	// Features array per depth
; 1493 : 	features_s arr_features_4[256];
; 1494 : 	features_s arr_features_8[64];
; 1495 : 	features_s arr_features_16[16];
; 1496 : 	features_s arr_features_32[4];
; 1497 : 	features_s features64;
; 1498 : 
; 1499 : 	// Initialize to 0 all the features
; 1500 : 	features_init_array(arr_features_4, 256, qp);
; 1501 : 	features_init_array(arr_features_8, 64, qp);
; 1502 : 	features_init_array(arr_features_16, 16, qp);
; 1503 : 	features_init_array(arr_features_32, 4, qp);
; 1504 : 	features_init_array(&features64, 1, qp);
; 1505 : 
; 1506 : 	// Commpute the features for the current CTU for all depth
; 1507 : 	features_s* arr_features[5];
; 1508 : 	arr_features[0] = &features64;

	mov	QWORD PTR arr_features$[rsp], rax

; 1513 : 
; 1514 : 
; 1515 : 	features_compute_all(arr_features, luma_px);

	lea	rcx, QWORD PTR arr_features$[rsp]
	lea	rax, QWORD PTR arr_features_32$[rbp-256]

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	movaps	XMMWORD PTR features64$[rbp-208], xmm0

; 1509 : 	arr_features[1] = arr_features_32;

	mov	QWORD PTR arr_features$[rsp+8], rax
	xorps	xmm2, xmm2

; 1510 : 	arr_features[2] = arr_features_16; 

	lea	rax, QWORD PTR arr_features_16$[rbp-256]

; 871  : 		arr_features[i].variance = 0.0;

	movaps	XMMWORD PTR features64$[rsp], xmm2

; 1510 : 	arr_features[2] = arr_features_16; 

	mov	QWORD PTR arr_features$[rsp+16], rax

; 1513 : 
; 1514 : 
; 1515 : 	features_compute_all(arr_features, luma_px);

	mov	rdx, r9
	lea	rax, QWORD PTR arr_features_8$[rbp-256]

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	movaps	XMMWORD PTR features64$[rbp-192], xmm1

; 1511 : 	arr_features[3] = arr_features_8;

	mov	QWORD PTR arr_features$[rsp+24], rax

; 1512 : 	arr_features[4] = arr_features_4;

	lea	rax, QWORD PTR arr_features_4$[rbp-256]
	mov	QWORD PTR arr_features$[rsp+32], rax

; 1513 : 
; 1514 : 
; 1515 : 	features_compute_all(arr_features, luma_px);

	call	features_compute_all

; 1516 : 
; 1517 : 	// Generate the CDM for the current CTU
; 1518 : 	
; 1519 : 	/*!< Set the depth map to 4 by default */
; 1520 : 	memset(arr_CDM, 4, 64);

	movdqa	xmm0, XMMWORD PTR __xmm@04040404040404040404040404040404

; 1521 : 	ml_os_qt_gen(arr_CDM, arr_features_4, arr_features_8, 4, 1, RESTRAINED_FLAG);

	lea	r8, QWORD PTR arr_features_8$[rbp-256]
	movups	XMMWORD PTR [rbx], xmm0
	mov	r9b, 4
	lea	rdx, QWORD PTR arr_features_4$[rbp-256]
	movups	XMMWORD PTR [rbx+16], xmm0
	mov	rcx, rbx
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	XMMWORD PTR [rbx+48], xmm0
	call	ml_os_qt_gen

; 1522 : 	
; 1523 : 
; 1524 : 	ml_os_qt_gen(arr_CDM, arr_features_8, arr_features_16, 3, 1, RESTRAINED_FLAG);

	mov	r9b, 3
	lea	r8, QWORD PTR arr_features_16$[rbp-256]
	lea	rdx, QWORD PTR arr_features_8$[rbp-256]
	mov	rcx, rbx
	call	ml_os_qt_gen

; 1525 : 	ml_os_qt_gen(arr_CDM, arr_features_16, arr_features_32, 2, 1, RESTRAINED_FLAG);

	mov	r9b, 2
	lea	r8, QWORD PTR arr_features_32$[rbp-256]
	lea	rdx, QWORD PTR arr_features_16$[rbp-256]
	mov	rcx, rbx
	call	ml_os_qt_gen

; 1526 : 	ml_os_qt_gen(arr_CDM, arr_features_32, &features64, 1, 1, RESTRAINED_FLAG);

	mov	r9b, 1
	lea	r8, QWORD PTR features64$[rsp]
	lea	rdx, QWORD PTR arr_features_32$[rbp-256]
	mov	rcx, rbx
	call	ml_os_qt_gen

; 1527 : 
; 1528 : 
; 1529 : 
; 1530 : }

	mov	rbx, QWORD PTR [rsp+32848]
	add	rsp, 32832				; 00008040H
	pop	rbp
	ret	0
os_luma_qt_pred ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
matrix$ = 64
x$ = 72
y$ = 80
depth$ = 88
fill_matrix_with_depth PROC

; 1533 : {

	mov	QWORD PTR [rsp+24], rbx
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	r15, rcx

; 1534 : 	int i = 0;
; 1535 : 	int32_t block = depth < 4 ? (8 >> depth) : 1; //nb blocks in 8*8 block

	cmp	r9b, 4
	jge	SHORT $LN6@fill_matri
	movzx	ecx, r9b
	mov	eax, 8
	sar	eax, cl
	jmp	SHORT $LN7@fill_matri
$LN6@fill_matri:
	mov	eax, 1
$LN7@fill_matri:

; 1536 : 	for (i = y; i < y + block; ++i)

	lea	edi, DWORD PTR [rax+r8]
	movsx	r14d, r9b
	cmp	ebx, edi
	jge	SHORT $LN3@fill_matri
	mov	QWORD PTR [rsp+64], rbp
	mov	QWORD PTR [rsp+72], rsi
	movsxd	rsi, eax
	movsxd	rbp, edx
	npad	8
$LL4@fill_matri:

; 1537 : 	{
; 1538 : 		memset(matrix + x + (i << 3), depth, block);

	lea	eax, DWORD PTR [rbx*8]
	mov	r8, rsi
	movsxd	rcx, eax
	mov	edx, r14d
	add	rcx, rbp
	add	rcx, r15
	call	memset
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL4@fill_matri

; 1536 : 	for (i = y; i < y + block; ++i)

	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]
$LN3@fill_matri:

; 1539 : 	}
; 1540 : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
fill_matrix_with_depth ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
mat_tmp$ = 32
_mat_seed$ = 128
_mat_dst$ = 136
merge_matrix_64 PROC

; 1551 : {

	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 1552 : 	uint8_t i_depth = 0;
; 1553 : 	uint32_t nb_block = 0;
; 1554 : 	uint8_t retval = 0;
; 1555 : 	uint8_t mat_tmp[64];
; 1556 : 	memcpy(mat_tmp, _mat_seed, 64);

	movups	xmm0, XMMWORD PTR [rcx]
	xor	bpl, bpl
	mov	rsi, rdx
	movups	xmm1, XMMWORD PTR [rcx+16]

; 1557 : 	for (uint_fast8_t i_y = 0; i_y < 8; ++i_y)

	xor	r14b, r14b
	movaps	XMMWORD PTR [rax-88], xmm0
	movups	xmm0, XMMWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rax-72], xmm1
	movups	xmm1, XMMWORD PTR [rcx+48]
	movaps	XMMWORD PTR [rax-56], xmm0
	movaps	XMMWORD PTR [rax-40], xmm1
$LL4@merge_matr:

; 1558 : 	{
; 1559 : 		for (uint_fast8_t i_x = 0; i_x < 8; ++i_x)

	movzx	edi, r14b
	xor	bl, bl
	lea	r15d, DWORD PTR [rdi*8]
	npad	2
$LL7@merge_matr:

; 1560 : 		{
; 1561 : 			i_depth = mat_tmp[i_x + (i_y << 3)];

	movzx	r10d, bl
	lea	eax, DWORD PTR [r15+r10]
	movzx	r9d, BYTE PTR mat_tmp$[rsp+rax]

; 1562 : 
; 1563 : 			if (i_depth == 4)

	cmp	r9b, 4
	jne	SHORT $LN8@merge_matr

; 1564 : 			{
; 1565 : 				_mat_dst[i_x + (i_y << 3)] = 3;/*!< All depth 4 blocks are merged by default to depth 3 */

	mov	BYTE PTR [rax+rsi], 3

; 1566 : 				retval = 1;

	mov	bpl, 1

; 1567 : 				continue; /*!< Skip the modulo operations and conditional tests */

	jmp	$LN5@merge_matr
$LN8@merge_matr:

; 1568 : 			}
; 1569 : 
; 1570 : 			if (i_depth == 0) /*!< Skip all the loop process, since 0 depth means there will be no other depths tested */

	test	r9b, r9b
	je	$LN15@merge_matr

; 1574 : 				goto exit_64;
; 1575 : 			}
; 1576 : 
; 1577 : 			nb_block = (16 >> i_depth); /*!< Offset to go check the three other blocks */

	mov	ecx, r9d

; 1578 : 										/*!< Check if we are on the fourth block of a depth*/
; 1579 : 			if ((i_x % nb_block == (8 >> i_depth)) &&

	xor	edx, edx
	mov	r8d, 16
	mov	eax, r10d
	sar	r8d, cl
	mov	r11d, 8
	div	r8d
	sar	r11d, cl
	cmp	edx, r11d
	jne	SHORT $LN5@merge_matr
	xor	edx, edx
	mov	eax, edi
	div	r8d
	cmp	edx, r11d
	jne	SHORT $LN5@merge_matr

; 1580 : 				(i_y % nb_block == (8 >> i_depth)))
; 1581 : 			{
; 1582 : 				retval = 1;
; 1583 : 				nb_block = (8 >> i_depth); /*!< Generate the real offset for the array */
; 1584 : 										   /*
; 1585 : 										   *   x 0 1 2 3 4 5 6 7
; 1586 : 										   * y
; 1587 : 										   * 0   3 3 2 2 1 1 1 1
; 1588 : 										   * 1   3 3 2 2 1 1 1 1
; 1589 : 										   * 2   2 2 2 2 1 1 1 1
; 1590 : 										   * 3   2 2 2 2 1 1 1 1
; 1591 : 										   * 4   1 1 1 1 2 2 2 2
; 1592 : 										   * 5   1 1 1 1 2 2 2 2
; 1593 : 										   * 6   1 1 1 1 2 2 2 2
; 1594 : 										   * 7   1 1 1 1 2 2 2 2
; 1595 : 										   *
; 1596 : 										   * exemple for the first fourth block of depth 2 :
; 1597 : 										   * 8 >> 2 = 2
; 1598 : 										   * nb_block = 4 -> x % 4 == 2 -> x = 2
; 1599 : 										   *              -> y % 4 == 2 -> y = 2
; 1600 : 										   * nb_block = 2 -> check blocs[(0,2),(2,0),(0,0)]
; 1601 : 										   * all informations are available
; 1602 : 										   */
; 1603 : 				if (mat_tmp[i_x - nb_block + (i_y << 3)] == i_depth &&
; 1604 : 					mat_tmp[i_x + ((i_y - nb_block) << 3)] == i_depth &&

	lea	eax, DWORD PTR [rdi*8]
	mov	bpl, 1
	sub	eax, r11d
	add	eax, r10d
	cmp	BYTE PTR mat_tmp$[rsp+rax], r9b
	jne	SHORT $LN5@merge_matr
	mov	eax, edi
	sub	eax, r11d
	lea	edx, DWORD PTR [rax*8]
	lea	eax, DWORD PTR [rdx+r10]
	cmp	BYTE PTR mat_tmp$[rsp+rax], r9b
	jne	SHORT $LN5@merge_matr
	sub	edx, r11d
	add	edx, r10d
	cmp	BYTE PTR mat_tmp$[rsp+rdx], r9b
	jne	SHORT $LN5@merge_matr

; 1605 : 					mat_tmp[i_x - nb_block + ((i_y - nb_block) << 3)] == i_depth)
; 1606 : 				{
; 1607 : 					fill_matrix_with_depth(_mat_dst, i_x - nb_block, i_y - nb_block, i_depth - 1);

	mov	r8d, edi
	sub	r10d, r11d
	sub	r8d, r11d
	mov	edx, r10d
	dec	r9b
	mov	rcx, rsi
	call	fill_matrix_with_depth
$LN5@merge_matr:

; 1558 : 	{
; 1559 : 		for (uint_fast8_t i_x = 0; i_x < 8; ++i_x)

	inc	bl
	cmp	bl, 8
	jb	$LL7@merge_matr

; 1557 : 	for (uint_fast8_t i_y = 0; i_y < 8; ++i_y)

	inc	r14b
	cmp	r14b, 8
	jb	$LL4@merge_matr

; 1568 : 			}
; 1569 : 
; 1570 : 			if (i_depth == 0) /*!< Skip all the loop process, since 0 depth means there will be no other depths tested */

	jmp	SHORT $LN22@merge_matr
$LN15@merge_matr:
	xorps	xmm0, xmm0

; 1571 : 			{
; 1572 : 				_mat_dst[i_x + (i_y << 3)] = i_depth;

	mov	BYTE PTR [rax+rsi], 0

; 1573 : 				memset(_mat_dst, 0, 64);

	movups	XMMWORD PTR [rsi], xmm0
	movups	XMMWORD PTR [rsi+16], xmm0
	movups	XMMWORD PTR [rsi+32], xmm0
	movups	XMMWORD PTR [rsi+48], xmm0
$LN22@merge_matr:

; 1608 : 				}
; 1609 : 			}
; 1610 : 		}
; 1611 : 	}
; 1612 : exit_64:
; 1613 : 	return retval;
; 1614 : }

	movzx	eax, bpl
$exit_64$24:
	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+32]
	mov	rbp, QWORD PTR [r11+40]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rdi
	ret	0
merge_matrix_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
_mat_mask$ = 48
_mat_src$ = 56
_size_w$dead$ = 64
_size_h$dead$ = 72
matrix_mask PROC

; 1628 : {

	sub	rsp, 40					; 00000028H

; 1629 : 	if (_mat_mask == NULL || _mat_src == NULL)

	test	rcx, rcx
	je	SHORT $LL11@matrix_mas
	test	rdx, rdx
	je	SHORT $LL11@matrix_mas

; 1633 : 		return;
; 1634 : 	}
; 1635 : 	size_t i_size = _size_h * _size_w;

	movdqa	xmm4, XMMWORD PTR __xmm@01010101010101010101010101010101
	lea	rax, QWORD PTR [rcx+16]
	movdqa	xmm5, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	sub	rdx, rcx
	mov	ecx, 2
	xorps	xmm3, xmm3
	npad	3
$LL4@matrix_mas:

; 1636 : 	for (size_t i = 0; i < i_size; ++i)
; 1637 : 	{
; 1638 : 		_mat_mask[i] = (_mat_mask[i] ^ _mat_src[i]) != 0 ? 1 : 0;

	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rdx+rax-16]
	movdqu	xmm2, XMMWORD PTR [rdx+rax]
	lea	rax, QWORD PTR [rax+32]
	pxor	xmm1, xmm0
	pcmpeqb	xmm1, xmm3
	pandn	xmm1, xmm5
	pand	xmm1, xmm4
	movdqu	XMMWORD PTR [rax-48], xmm1
	movdqu	xmm0, XMMWORD PTR [rax-32]
	pxor	xmm2, xmm0
	pcmpeqb	xmm2, xmm3
	pandn	xmm2, xmm5
	pand	xmm2, xmm4
	movdqu	XMMWORD PTR [rax-32], xmm2
	sub	rcx, 1
	jne	SHORT $LL4@matrix_mas

; 1639 : 	}
; 1640 : }

	add	rsp, 40					; 00000028H
	ret	0
	npad	2
$LL11@matrix_mas:

; 1630 : 	{
; 1631 : 		fprintf(stderr, "null pointer as parameter.");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:$SG4294943320
	call	fprintf

; 1632 : 		assert(0);

	mov	r8d, 1632				; 00000660H
	lea	rdx, OFFSET FLAT:$SG4294943319
	lea	rcx, OFFSET FLAT:$SG4294943318

; 1639 : 	}
; 1640 : }

	add	rsp, 40					; 00000028H

; 1632 : 		assert(0);

	rex_jmp	QWORD PTR __imp__wassert
matrix_mask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
_mat_sup$ = 80
_mat_inf$ = 88
_mat_sup_dst$ = 96
_nb_level$dead$ = 104
_mat_roi$ = 112
matrix_add_level_roi PROC

; 1655 : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 1656 : 	int8_t x = 0, y = 0;
; 1657 : 	int8_t i_depth = 0;
; 1658 : 	for (y = 0; y < 8; ++y)

	mov	r13, QWORD PTR _mat_roi$[rsp]
	mov	r14, rdx
	mov	rdx, rcx
	mov	rbp, r8
	xor	r15b, r15b
$LL4@matrix_add:

; 1659 : 	{
; 1660 : 		for (x = 0; x < 8; ++x)

	movzx	esi, r15b
	xor	bl, bl
	lea	r12d, DWORD PTR [rsi*8]
$LL7@matrix_add:

; 1661 : 		{
; 1662 : 			if ((!_mat_roi[x + (y << 3)]) == 1)

	movsx	r10d, bl
	lea	eax, DWORD PTR [r10+r12]
	movsxd	rcx, eax
	cmp	BYTE PTR [rcx+r13], 0
	jne	$LN5@matrix_add

; 1663 : 			{
; 1664 : 				i_depth = _mat_sup[x + (y << 3)];

	movsx	edi, BYTE PTR [rcx+rdx]
	lea	rax, QWORD PTR [r14+rcx]

; 1665 : 				if (i_depth == 4)

	cmp	dil, 4
	jne	SHORT $LN9@matrix_add

; 1666 : 				{
; 1667 : 					int8_t i_depth_sup = _mat_sup_dst[x + (y << 3)];

	movsx	r9d, BYTE PTR [rcx+rbp]

; 1668 : 					_mat_inf[x + (y << 3)] = 4;

	mov	BYTE PTR [rax], dil

; 1669 : 					if (i_depth_sup == 4)

	cmp	r9b, dil
	jne	SHORT $LN11@matrix_add

; 1670 : 					{
; 1671 : 						_mat_sup_dst[x + (y << 3)] = 3;

	mov	BYTE PTR [rcx+rbp], 3

; 1672 : 					}

	jmp	SHORT $LN5@matrix_add
$LN11@matrix_add:

; 1673 : 					else if (i_depth_sup > 0 && abs(i_depth_sup - 4) < _nb_level)

	test	r9b, r9b
	jle	SHORT $LN5@matrix_add
	lea	eax, DWORD PTR [r9-4]
	mov	ecx, r9d
	cdq
	xor	eax, edx
	sub	eax, edx
	cmp	eax, 1
	jge	SHORT $LN26@matrix_add

; 1674 : 					{
; 1675 : 						fill_matrix_with_depth(_mat_sup_dst, (x & (~(8 >> (i_depth_sup)))), (y & (~(8 >> (i_depth_sup)))), i_depth_sup - 1);

	mov	edx, 8
	mov	r8d, esi
	sar	edx, cl
	dec	r9b
	not	edx
	mov	rcx, rbp
	and	r8d, edx
	and	edx, r10d
	call	fill_matrix_with_depth

; 1676 : 					}
; 1677 : 					continue;

	jmp	SHORT $LN26@matrix_add
$LN9@matrix_add:

; 1678 : 				}
; 1679 : 				else if (i_depth == 3)

	cmp	dil, 3
	jne	SHORT $LN14@matrix_add

; 1680 : 				{
; 1681 : 					_mat_inf[x + (y << 3)] = 4;

	mov	BYTE PTR [rax], 4

; 1682 : 					continue;

	jmp	SHORT $LN5@matrix_add
$LN14@matrix_add:

; 1683 : 				}
; 1684 : 				else if (abs(_mat_inf[x + (y << 3)] - _mat_sup[x + (y << 3)]) != _nb_level)

	movzx	eax, BYTE PTR [rax]
	movzx	ecx, dil
	sub	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	cmp	eax, 1
	je	SHORT $LN16@matrix_add

; 1685 : 				{
; 1686 : 					fill_matrix_with_depth(_mat_inf, x, y, i_depth + 1);

	lea	r9d, DWORD PTR [rdi+1]
	mov	r8d, esi
	mov	edx, r10d
	mov	rcx, r14
	call	fill_matrix_with_depth
$LN16@matrix_add:

; 1687 : 				}
; 1688 : 				x += (8 >> (i_depth + 1)) - 1;

	lea	ecx, DWORD PTR [rdi+1]
	mov	edx, 8
	sar	edx, cl
	dec	dl
	add	bl, dl
$LN26@matrix_add:

; 1659 : 	{
; 1660 : 		for (x = 0; x < 8; ++x)

	mov	rdx, QWORD PTR _mat_sup$[rsp]
$LN5@matrix_add:
	inc	bl
	cmp	bl, 8
	jl	$LL7@matrix_add

; 1656 : 	int8_t x = 0, y = 0;
; 1657 : 	int8_t i_depth = 0;
; 1658 : 	for (y = 0; y < 8; ++y)

	inc	r15b
	cmp	r15b, 8
	jl	$LL4@matrix_add

; 1689 : 			}
; 1690 : 		}
; 1691 : 	}
; 1692 : }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
matrix_add_level_roi ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
_TEXT	SEGMENT
mat_mask$ = 32
mat_max$ = 96
tv1015 = 224
ml_intra_depth_ctu$ = 224
_mat_depth_MEP$ = 232
generate_interval_from_os_pred PROC

; 1703 : {

	push	rbp
	push	r14
	sub	rsp, 200				; 000000c8H

; 1704 : 	uint8_t* _mat_depth_min = ml_intra_depth_ctu->_mat_upper_depth;
; 1705 : 	uint8_t* _mat_depth_max = ml_intra_depth_ctu->_mat_lower_depth;
; 1706 : 	int8_t _nb_level = ml_intra_depth_ctu->i_nb_addDepth;
; 1707 : 
; 1708 : 	memcpy(_mat_depth_min, _mat_depth_MEP, 64 * sizeof(uint8_t));

	movups	xmm0, XMMWORD PTR [rdx]
	movsx	eax, BYTE PTR [rcx]
	mov	rbp, QWORD PTR [rcx+8]
	mov	r14, QWORD PTR [rcx+16]
	movups	XMMWORD PTR [rbp], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rbp+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rbp+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rbp+48], xmm1

; 1709 : 	memcpy(_mat_depth_max, _mat_depth_MEP, 64 * sizeof(uint8_t));

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [r14], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [r14+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [r14+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [r14+48], xmm1

; 1710 : 	if (_nb_level <= 0)

	test	al, al
	jle	$LN3@generate_i

; 1711 : 	{
; 1712 : 		return;
; 1713 : 	}
; 1714 : 	else if (_nb_level >= 4)

	cmp	al, 4
	jl	SHORT $LN7@generate_i

; 1715 : 	{
; 1716 : 		memset(_mat_depth_min, 0, 64 * sizeof(uint8_t));
; 1717 : 		memset(_mat_depth_max, 4, 64 * sizeof(uint8_t));

	movdqa	xmm1, XMMWORD PTR __xmm@04040404040404040404040404040404
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rbp], xmm0
	movups	XMMWORD PTR [rbp+16], xmm0
	movups	XMMWORD PTR [rbp+32], xmm0
	movups	XMMWORD PTR [rbp+48], xmm0
	movups	XMMWORD PTR [r14], xmm1
	movups	XMMWORD PTR [r14+16], xmm1
	movups	XMMWORD PTR [r14+32], xmm1
	movups	XMMWORD PTR [r14+48], xmm1

; 1733 : 
; 1734 : 		/*!< Extract the mask */
; 1735 : 		matrix_mask(mat_mask, _mat_depth_min, 8, 8);
; 1736 : 
; 1737 : 		/*!< Add a level only on the masked area */
; 1738 : 		matrix_add_level_roi(mat_max, _mat_depth_max, _mat_depth_min, 1, mat_mask);
; 1739 : 		
; 1740 : 	}
; 1741 : }

	add	rsp, 200				; 000000c8H
	pop	r14
	pop	rbp
	ret	0
$LN7@generate_i:

; 1718 : 		return;
; 1719 : 	}
; 1720 : 	uint8_t mat_ref[64];	/*!< Matrix used to store the ref map */
; 1721 : 	uint8_t mat_mask[64]; 	/*!< Matrix used as mask */
; 1722 : 	uint8_t mat_max[64];	/*!< Matrix used to store current depth map max */
; 1723 : 
; 1724 : 	for (int j = 0; j < _nb_level; ++j)

	mov	ecx, eax
	test	al, al
	jle	$LN3@generate_i
	mov	QWORD PTR [rsp+232], rbx
	lea	rax, QWORD PTR mat_mask$[rsp]
	mov	QWORD PTR [rsp+240], rsi
	lea	rbx, QWORD PTR [rbp+63]
	mov	QWORD PTR [rsp+248], rdi
	mov	QWORD PTR [rsp+192], r12
	mov	QWORD PTR [rsp+184], r13
	mov	r13, rbp
	mov	QWORD PTR [rsp+176], r15
	sub	r13, rax
	movaps	XMMWORD PTR [rsp+160], xmm6
	movdqa	xmm6, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
	mov	QWORD PTR tv1015[rsp], rcx
	npad	3
$LL4@generate_i:

; 1725 : 	{
; 1726 : 		/*!< Copy the original map seed */
; 1727 : 		memcpy(mat_ref, _mat_depth_min, 64 * sizeof(uint8_t));
; 1728 : 		memcpy(mat_mask, _mat_depth_min, 64 * sizeof(uint8_t));

	movups	xmm0, XMMWORD PTR [rbp]

; 1729 : 		memcpy(mat_max, _mat_depth_max, 64 * sizeof(uint8_t));
; 1730 : 
; 1731 : 		/*!< Apply the RCDM on the upper map */
; 1732 : 		merge_matrix_64(_mat_depth_min, _mat_depth_min);

	mov	rdx, rbp
	mov	rcx, rbp
	movups	xmm1, XMMWORD PTR [rbp+16]
	movups	XMMWORD PTR mat_mask$[rsp], xmm0
	movups	xmm0, XMMWORD PTR [rbp+32]
	movups	XMMWORD PTR mat_mask$[rsp+16], xmm1
	movups	xmm1, XMMWORD PTR [rbp+48]
	movups	XMMWORD PTR mat_mask$[rsp+32], xmm0
	movups	xmm0, XMMWORD PTR [r14]
	movups	XMMWORD PTR mat_mask$[rsp+48], xmm1
	movups	xmm1, XMMWORD PTR [r14+16]
	movups	XMMWORD PTR mat_max$[rsp], xmm0
	movups	xmm0, XMMWORD PTR [r14+32]
	movups	XMMWORD PTR mat_max$[rsp+16], xmm1
	movups	xmm1, XMMWORD PTR [r14+48]
	movups	XMMWORD PTR mat_max$[rsp+32], xmm0
	movups	XMMWORD PTR mat_max$[rsp+48], xmm1
	call	merge_matrix_64

; 1635 : 	size_t i_size = _size_h * _size_w;

	xor	edx, edx
	lea	rax, QWORD PTR mat_mask$[rsp]
	cmp	rax, rbx
	ja	SHORT $LN47@generate_i
	lea	rax, QWORD PTR mat_mask$[rsp+63]
	cmp	rax, rbp
	jb	SHORT $LN47@generate_i
	npad	14
$LL63@generate_i:

; 1637 : 	{
; 1638 : 		_mat_mask[i] = (_mat_mask[i] ^ _mat_src[i]) != 0 ? 1 : 0;

	lea	rcx, QWORD PTR mat_mask$[rsp]
	add	rcx, rdx
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rcx+r13], al
	setne	al
	inc	rdx
	mov	BYTE PTR [rcx], al
	cmp	rdx, 64					; 00000040H
	jb	SHORT $LL63@generate_i

; 1636 : 	for (size_t i = 0; i < i_size; ++i)

	jmp	SHORT $LN11@generate_i
$LN47@generate_i:
	movdqa	xmm3, XMMWORD PTR __xmm@01010101010101010101010101010101
	xorps	xmm2, xmm2
	npad	6
$LL12@generate_i:

; 1637 : 	{
; 1638 : 		_mat_mask[i] = (_mat_mask[i] ^ _mat_src[i]) != 0 ? 1 : 0;

	lea	rax, QWORD PTR mat_mask$[rsp]
	add	rax, rdx
	add	rdx, 32					; 00000020H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqu	xmm1, XMMWORD PTR [rax+r13]
	pxor	xmm1, xmm0
	pcmpeqb	xmm1, xmm2
	pandn	xmm1, xmm6
	pand	xmm1, xmm3
	movdqu	XMMWORD PTR [rax], xmm1
	movdqu	xmm0, XMMWORD PTR [rax+16]
	movdqu	xmm1, XMMWORD PTR [rax+r13+16]
	pxor	xmm1, xmm0
	pcmpeqb	xmm1, xmm2
	pandn	xmm1, xmm6
	pand	xmm1, xmm3
	movdqu	XMMWORD PTR [rax+16], xmm1
	cmp	rdx, 64					; 00000040H
	jb	SHORT $LL12@generate_i
$LN11@generate_i:

; 1658 : 	for (y = 0; y < 8; ++y)

	xor	r12b, r12b
	npad	12
$LL20@generate_i:

; 1659 : 	{
; 1660 : 		for (x = 0; x < 8; ++x)

	movzx	esi, r12b
	xor	bl, bl
	lea	r15d, DWORD PTR [rsi*8]
	npad	2
$LL23@generate_i:

; 1661 : 		{
; 1662 : 			if ((!_mat_roi[x + (y << 3)]) == 1)

	movsx	r10d, bl
	lea	eax, DWORD PTR [r10+r15]
	movsxd	rcx, eax
	cmp	BYTE PTR mat_mask$[rsp+rcx], 0
	jne	$LN21@generate_i

; 1663 : 			{
; 1664 : 				i_depth = _mat_sup[x + (y << 3)];

	movsx	edi, BYTE PTR mat_max$[rsp+rcx]
	lea	rax, QWORD PTR [r14+rcx]

; 1665 : 				if (i_depth == 4)

	cmp	dil, 4
	jne	SHORT $LN25@generate_i

; 1666 : 				{
; 1667 : 					int8_t i_depth_sup = _mat_sup_dst[x + (y << 3)];

	movsx	r9d, BYTE PTR [rcx+rbp]

; 1668 : 					_mat_inf[x + (y << 3)] = 4;

	mov	BYTE PTR [rax], dil

; 1669 : 					if (i_depth_sup == 4)

	cmp	r9b, dil
	jne	SHORT $LN27@generate_i

; 1670 : 					{
; 1671 : 						_mat_sup_dst[x + (y << 3)] = 3;

	mov	BYTE PTR [rcx+rbp], 3

; 1672 : 					}

	jmp	SHORT $LN21@generate_i
$LN27@generate_i:

; 1673 : 					else if (i_depth_sup > 0 && abs(i_depth_sup - 4) < _nb_level)

	test	r9b, r9b
	jle	SHORT $LN21@generate_i
	lea	eax, DWORD PTR [r9-4]
	mov	ecx, r9d
	cdq
	xor	eax, edx
	sub	eax, edx
	cmp	eax, 1
	jge	SHORT $LN21@generate_i

; 1674 : 					{
; 1675 : 						fill_matrix_with_depth(_mat_sup_dst, (x & (~(8 >> (i_depth_sup)))), (y & (~(8 >> (i_depth_sup)))), i_depth_sup - 1);

	mov	edx, 8
	dec	r9b
	sar	edx, cl
	mov	rcx, rbp
	not	edx
	mov	r8d, edx
	and	edx, r10d
	and	r8d, esi
	call	fill_matrix_with_depth

; 1676 : 					}
; 1677 : 					continue;

	jmp	SHORT $LN21@generate_i
$LN25@generate_i:

; 1678 : 				}
; 1679 : 				else if (i_depth == 3)

	cmp	dil, 3
	jne	SHORT $LN30@generate_i

; 1680 : 				{
; 1681 : 					_mat_inf[x + (y << 3)] = 4;

	mov	BYTE PTR [rax], 4

; 1682 : 					continue;

	jmp	SHORT $LN21@generate_i
$LN30@generate_i:

; 1683 : 				}
; 1684 : 				else if (abs(_mat_inf[x + (y << 3)] - _mat_sup[x + (y << 3)]) != _nb_level)

	movzx	eax, BYTE PTR [rax]
	movzx	ecx, dil
	sub	eax, ecx
	cdq
	xor	eax, edx
	sub	eax, edx
	cmp	eax, 1
	je	SHORT $LN32@generate_i

; 1685 : 				{
; 1686 : 					fill_matrix_with_depth(_mat_inf, x, y, i_depth + 1);

	lea	r9d, DWORD PTR [rdi+1]
	mov	r8d, esi
	mov	edx, r10d
	mov	rcx, r14
	call	fill_matrix_with_depth
$LN32@generate_i:

; 1687 : 				}
; 1688 : 				x += (8 >> (i_depth + 1)) - 1;

	lea	ecx, DWORD PTR [rdi+1]
	mov	edx, 8
	sar	edx, cl
	dec	dl
	add	bl, dl
$LN21@generate_i:

; 1659 : 	{
; 1660 : 		for (x = 0; x < 8; ++x)

	inc	bl
	cmp	bl, 8
	jl	$LL23@generate_i

; 1639 : 	}
; 1640 : }
; 1641 : 
; 1642 : 
; 1643 : /*!
; 1644 : * \brief Add 1 depth level to the depth map. If d + 1 > 4 then d - 1 is done.
; 1645 : *        This function use a mask to add level only on selected roi.
; 1646 : *
; 1647 : * \param _mat_sup    	Original upper depth map .
; 1648 : * \param _mat_inf    	Lower depth map.
; 1649 : * \param _mat_sup_dst   Final upper depth map (WARNING: must be a different array as _mat_sup as it can be modified).
; 1650 : * \param _nb_level      The number of level there should be between inf and sup_dst.
; 1651 : * \param _mat_roi   	Mask used to determine which area should be modified on the _mat_inf (convention is 0 for changed area and 1 else).
; 1652 : * \return None.
; 1653 : */
; 1654 : static void matrix_add_level_roi(const uint8_t* _mat_sup, uint8_t* _mat_inf, uint8_t* _mat_sup_dst, int8_t _nb_level, const uint8_t* _mat_roi)
; 1655 : {
; 1656 : 	int8_t x = 0, y = 0;
; 1657 : 	int8_t i_depth = 0;
; 1658 : 	for (y = 0; y < 8; ++y)

	inc	r12b
	cmp	r12b, 8
	jl	$LL20@generate_i

; 1718 : 		return;
; 1719 : 	}
; 1720 : 	uint8_t mat_ref[64];	/*!< Matrix used to store the ref map */
; 1721 : 	uint8_t mat_mask[64]; 	/*!< Matrix used as mask */
; 1722 : 	uint8_t mat_max[64];	/*!< Matrix used to store current depth map max */
; 1723 : 
; 1724 : 	for (int j = 0; j < _nb_level; ++j)

	sub	QWORD PTR tv1015[rsp], 1
	lea	rbx, QWORD PTR [rbp+63]
	jne	$LL4@generate_i
	movaps	xmm6, XMMWORD PTR [rsp+160]
	mov	r15, QWORD PTR [rsp+176]
	mov	r13, QWORD PTR [rsp+184]
	mov	r12, QWORD PTR [rsp+192]
	mov	rdi, QWORD PTR [rsp+248]
	mov	rsi, QWORD PTR [rsp+240]
	mov	rbx, QWORD PTR [rsp+232]
$LN3@generate_i:

; 1733 : 
; 1734 : 		/*!< Extract the mask */
; 1735 : 		matrix_mask(mat_mask, _mat_depth_min, 8, 8);
; 1736 : 
; 1737 : 		/*!< Add a level only on the masked area */
; 1738 : 		matrix_add_level_roi(mat_max, _mat_depth_max, _mat_depth_min, 1, mat_mask);
; 1739 : 		
; 1740 : 	}
; 1741 : }

	add	rsp, 200				; 000000c8H
	pop	r14
	pop	rbp
	ret	0
generate_interval_from_os_pred ENDP
_TEXT	ENDS
END
