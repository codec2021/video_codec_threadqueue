; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__8DC84CAD_corecrt_wtime@h DB 01H
__CF01F9AA_time@h DB 01H
__40DF0D2D_ctype@h DB 01H
__C5A167BB_basetsd@h DB 01H
__D24F4925_winnt@h DB 01H
__7D439CBC_winerror@h DB 01H
__08182E14_stralign@h DB 01H
__8FD04514_threads@h DB 01H
__AEB83EC0_encmain@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_MAX_PSNR DQ	0408f3feb851eb852r		; 999.99
_MAX_SQUARED_ERROR DQ 040efc02000000000r	; 65025
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_output_recon_pictures
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_sem_init@@9@9		; `kvz_sem_init'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@MPFPOIAC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1BG@FFFFMINI@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	?__LINE__Var@?0??compute_psnr@@9@9		; `compute_psnr'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1DC@EAEJPBFD@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr@ ; `string'
PUBLIC	??_C@_1DG@KLILNEBB@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_04KJMIOICK@?$AA?$AB?$AC?$AD@		; `string'
PUBLIC	??_C@_0BL@BCDOINDE@Failed?5to?5allocate?5image?4?6@ ; `string'
PUBLIC	??_C@_0CO@JHOPPFEH@Could?5not?5re?9open?5input?5file?0?5s@ ; `string'
PUBLIC	??_C@_0BL@DLFAEBD@Failed?5to?5read?5a?5frame?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CI@BLHFEFHL@Failed?5to?5write?5reconstructed?5p@ ; `string'
PUBLIC	??_C@_0L@MFJADLGK@YUV4MPEG2?5@			; `string'
PUBLIC	??_C@_05DALLBAN@FRAME@				; `string'
PUBLIC	??_C@_0CM@IHKMIGBF@Unknown?5header?5argument?5startin@ ; `string'
PUBLIC	??_C@_0GO@JNDNEJHH@Failed?5to?5read?5necessary?5info?5f@ ; `string'
PUBLIC	?__LINE__Var@?0??main@@9@9			; `main'::`1'::__LINE__Var
PUBLIC	??_C@_0CL@DHMCONBL@Could?5not?5open?5input?5file?0?5shut@ ; `string'
PUBLIC	??_C@_0CM@KFAFMCPA@Could?5not?5open?5output?5file?0?5shu@ ; `string'
PUBLIC	??_C@_0DJ@OKBHGHGM@Could?5not?5open?5reconstruction?5f@ ; `string'
PUBLIC	??_C@_0BJ@IOHCDNMK@Failed?5to?5open?5encoder?4?6@ ; `string'
PUBLIC	??_C@_0BH@NPMFLGFL@Input?3?5?$CFs?0?5output?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0CD@FINFDLMN@?5?5Video?5size?3?5?$CFdx?$CFd?5?$CIinput?$DN?$CFdx?$CF@ ; `string'
PUBLIC	??_C@_0BL@LFDIMNDN@Failed?5to?5seek?5?$CFd?5frames?4?6@ ; `string'
PUBLIC	??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_0BJ@OOEJKIGO@Failed?5to?5encode?5image?4?6@ ; `string'
PUBLIC	??_C@_1EA@BEKCCMOJ@?$AAw?$AAr?$AAi?$AAt?$AAt?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AAc?$AAh?$AAu?$AAn?$AAk@ ; `string'
PUBLIC	??_C@_0BP@FPGOBLLI@Failed?5to?5write?5data?5to?5file?4?6@ ; `string'
PUBLIC	??_C@_04DGANLAON@high@				; `string'
PUBLIC	??_C@_04GHJNJNPO@main@				; `string'
PUBLIC	??_C@_06BJCFNGJP@second@			; `string'
PUBLIC	??_C@_05MIJNFGED@frame@				; `string'
PUBLIC	??_C@_0GM@OPNHHGBF@Level?5warning?3?5This?5?$CFs?8s?5bitrat@ ; `string'
PUBLIC	??_C@_1BA@EHFDMACK@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1EO@BJGPFBKA@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_1CO@ENJONJIF@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_0CC@HJFCBCIK@?5Processed?5?$CFd?5frames?0?5?$CF10llu?5bi@ ; `string'
PUBLIC	??_C@_0CC@CODDMJAP@?5AVG?5PSNR?5Y?5?$CF2?44f?5U?5?$CF2?44f?5V?5?$CF2?4@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BK@PDFIMOAL@?5Total?5CPU?5time?3?5?$CF?43f?5s?4?6@ ; `string'
PUBLIC	??_C@_0BJ@HJHGMOFC@?5Encoding?5time?3?5?$CF?43f?5s?4?6@ ; `string'
PUBLIC	??_C@_0BO@BMNNAIMJ@?5Encoding?5wall?5time?3?5?$CF?43f?5s?4?6@ ; `string'
PUBLIC	??_C@_0BN@MNABABFE@?5Encoding?5CPU?5usage?3?5?$CF?42f?$CF?$CF?6@ ; `string'
PUBLIC	??_C@_0M@EOJKNGME@?5FPS?3?5?$CF?42f?6@		; `string'
PUBLIC	??_C@_0BF@NIGLBOIA@?5Bitrate?3?5?$CF?43f?5Mbps?6@ ; `string'
PUBLIC	??_C@_0P@DPNBPCBA@?5AVG?5QP?3?5?$CF?41f?6@	; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41200000
PUBLIC	__real@4130000000000000
PUBLIC	__real@416312d000000000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___wassert:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__atoi:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp___setmode:PROC
EXTRN	__imp__setmode:PROC
EXTRN	_log10:PROC
EXTRN	_pthread_create:PROC
EXTRN	_pthread_exit:PROC
EXTRN	_pthread_join:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp___fileno:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__getc:PROC
EXTRN	__imp__ungetc:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__clock:PROC
EXTRN	_kvz_api_get:PROC
EXTRN	_cmdline_opts_parse:PROC
EXTRN	_cmdline_opts_free:PROC
EXTRN	_print_usage:PROC
EXTRN	_print_version:PROC
EXTRN	_print_help:PROC
EXTRN	_print_frame_info:PROC
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
EXTRN	_sem_destroy:PROC
EXTRN	_sem_init:PROC
EXTRN	_sem_post:PROC
EXTRN	_sem_wait:PROC
EXTRN	_yuv_io_read:PROC
EXTRN	_yuv_io_seek:PROC
EXTRN	_yuv_io_write:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allmul:PROC
EXTRN	__allshl:PROC
EXTRN	__dtoul3:PROC
EXTRN	__ultod3:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@416312d000000000
CONST	SEGMENT
__real@416312d000000000 DQ 0416312d000000000r	; 1e+07
CONST	ENDS
;	COMDAT __real@4130000000000000
CONST	SEGMENT
__real@4130000000000000 DQ 04130000000000000r	; 1.04858e+06
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0P@DPNBPCBA@?5AVG?5QP?3?5?$CF?41f?6@
CONST	SEGMENT
??_C@_0P@DPNBPCBA@?5AVG?5QP?3?5?$CF?41f?6@ DB ' AVG QP: %.1f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NIGLBOIA@?5Bitrate?3?5?$CF?43f?5Mbps?6@
CONST	SEGMENT
??_C@_0BF@NIGLBOIA@?5Bitrate?3?5?$CF?43f?5Mbps?6@ DB ' Bitrate: %.3f Mbps'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EOJKNGME@?5FPS?3?5?$CF?42f?6@
CONST	SEGMENT
??_C@_0M@EOJKNGME@?5FPS?3?5?$CF?42f?6@ DB ' FPS: %.2f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNABABFE@?5Encoding?5CPU?5usage?3?5?$CF?42f?$CF?$CF?6@
CONST	SEGMENT
??_C@_0BN@MNABABFE@?5Encoding?5CPU?5usage?3?5?$CF?42f?$CF?$CF?6@ DB ' Enc'
	DB	'oding CPU usage: %.2f%%', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMNNAIMJ@?5Encoding?5wall?5time?3?5?$CF?43f?5s?4?6@
CONST	SEGMENT
??_C@_0BO@BMNNAIMJ@?5Encoding?5wall?5time?3?5?$CF?43f?5s?4?6@ DB ' Encodi'
	DB	'ng wall time: %.3f s.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJHGMOFC@?5Encoding?5time?3?5?$CF?43f?5s?4?6@
CONST	SEGMENT
??_C@_0BJ@HJHGMOFC@?5Encoding?5time?3?5?$CF?43f?5s?4?6@ DB ' Encoding tim'
	DB	'e: %.3f s.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PDFIMOAL@?5Total?5CPU?5time?3?5?$CF?43f?5s?4?6@
CONST	SEGMENT
??_C@_0BK@PDFIMOAL@?5Total?5CPU?5time?3?5?$CF?43f?5s?4?6@ DB ' Total CPU '
	DB	'time: %.3f s.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CODDMJAP@?5AVG?5PSNR?5Y?5?$CF2?44f?5U?5?$CF2?44f?5V?5?$CF2?4@
CONST	SEGMENT
??_C@_0CC@CODDMJAP@?5AVG?5PSNR?5Y?5?$CF2?44f?5U?5?$CF2?44f?5V?5?$CF2?4@ DB ' '
	DB	'AVG PSNR Y %2.4f U %2.4f V %2.4f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HJFCBCIK@?5Processed?5?$CFd?5frames?0?5?$CF10llu?5bi@
CONST	SEGMENT
??_C@_0CC@HJFCBCIK@?5Processed?5?$CFd?5frames?0?5?$CF10llu?5bi@ DB ' Proc'
	DB	'essed %d frames, %10llu bits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@ENJONJIF@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@
CONST	SEGMENT
??_C@_1CO@ENJONJIF@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, '_', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@BJGPFBKA@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@
CONST	SEGMENT
??_C@_1EO@BJGPFBKA@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, '_', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'K', 00H, 'V', 00H, 'Z', 00H, '_', 00H, 'M', 00H, 'A', 00H, 'X'
	DB	00H, '_', 00H, 'G', 00H, 'O', 00H, 'P', 00H, '_', 00H, 'L', 00H
	DB	'E', 00H, 'N', 00H, 'G', 00H, 'T', 00H, 'H', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@EHFDMACK@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAe?$AAc@
CONST	SEGMENT
??_C@_1BA@EHFDMACK@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAe?$AAc@ DB 'i', 00H, 'm', 00H
	DB	'g', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@OPNHHGBF@Level?5warning?3?5This?5?$CFs?8s?5bitrat@
CONST	SEGMENT
??_C@_0GM@OPNHHGBF@Level?5warning?3?5This?5?$CFs?8s?5bitrat@ DB 'Level wa'
	DB	'rning: This %s''s bitrate (%llu bits/s) reached the maximum b'
	DB	'itrate (%u bits/s) of %s tier level %g.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame@
CONST	SEGMENT
??_C@_05MIJNFGED@frame@ DB 'frame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJCFNGJP@second@
CONST	SEGMENT
??_C@_06BJCFNGJP@second@ DB 'second', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main@
CONST	SEGMENT
??_C@_04GHJNJNPO@main@ DB 'main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGANLAON@high@
CONST	SEGMENT
??_C@_04DGANLAON@high@ DB 'high', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FPGOBLLI@Failed?5to?5write?5data?5to?5file?4?6@
CONST	SEGMENT
??_C@_0BP@FPGOBLLI@Failed?5to?5write?5data?5to?5file?4?6@ DB 'Failed to w'
	DB	'rite data to file.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@BEKCCMOJ@?$AAw?$AAr?$AAi?$AAt?$AAt?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AAc?$AAh?$AAu?$AAn?$AAk@
CONST	SEGMENT
??_C@_1EA@BEKCCMOJ@?$AAw?$AAr?$AAi?$AAt?$AAt?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AAc?$AAh?$AAu?$AAn?$AAk@ DB 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 't', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'u', 00H, 'n'
	DB	00H, 'k', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, '_', 00H, 'o', 00H, 'u', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OOEJKIGO@Failed?5to?5encode?5image?4?6@
CONST	SEGMENT
??_C@_0BJ@OOEJKIGO@Failed?5to?5encode?5image?4?6@ DB 'Failed to encode im'
	DB	'age.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@ DB 'pthread_create faile'
	DB	'd!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LFDIMNDN@Failed?5to?5seek?5?$CFd?5frames?4?6@
CONST	SEGMENT
??_C@_0BL@LFDIMNDN@Failed?5to?5seek?5?$CFd?5frames?4?6@ DB 'Failed to see'
	DB	'k %d frames.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FINFDLMN@?5?5Video?5size?3?5?$CFdx?$CFd?5?$CIinput?$DN?$CFdx?$CF@
CONST	SEGMENT
??_C@_0CD@FINFDLMN@?5?5Video?5size?3?5?$CFdx?$CFd?5?$CIinput?$DN?$CFdx?$CF@ DB ' '
	DB	' Video size: %dx%d (input=%dx%d)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NPMFLGFL@Input?3?5?$CFs?0?5output?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@NPMFLGFL@Input?3?5?$CFs?0?5output?3?5?$CFs?6@ DB 'Input: %s, ou'
	DB	'tput: %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IOHCDNMK@Failed?5to?5open?5encoder?4?6@
CONST	SEGMENT
??_C@_0BJ@IOHCDNMK@Failed?5to?5open?5encoder?4?6@ DB 'Failed to open enco'
	DB	'der.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKBHGHGM@Could?5not?5open?5reconstruction?5f@
CONST	SEGMENT
??_C@_0DJ@OKBHGHGM@Could?5not?5open?5reconstruction?5f@ DB 'Could not ope'
	DB	'n reconstruction file (%s), shutting down!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KFAFMCPA@Could?5not?5open?5output?5file?0?5shu@
CONST	SEGMENT
??_C@_0CM@KFAFMCPA@Could?5not?5open?5output?5file?0?5shu@ DB 'Could not o'
	DB	'pen output file, shutting down!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DHMCONBL@Could?5not?5open?5input?5file?0?5shut@
CONST	SEGMENT
??_C@_0CL@DHMCONBL@Could?5not?5open?5input?5file?0?5shut@ DB 'Could not o'
	DB	'pen input file, shutting down!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??main@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??main@@9@9 DD 01a6H			; `main'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GO@JNDNEJHH@Failed?5to?5read?5necessary?5info?5f@
CONST	SEGMENT
??_C@_0GO@JNDNEJHH@Failed?5to?5read?5necessary?5info?5f@ DB 'Failed to re'
	DB	'ad necessary info from y4m headers. Width, height and frame r'
	DB	'ate must be present in the headers.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IHKMIGBF@Unknown?5header?5argument?5startin@
CONST	SEGMENT
??_C@_0CM@IHKMIGBF@Unknown?5header?5argument?5startin@ DB 'Unknown header'
	DB	' argument starting with ''%i''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DALLBAN@FRAME@
CONST	SEGMENT
??_C@_05DALLBAN@FRAME@ DB 'FRAME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFJADLGK@YUV4MPEG2?5@
CONST	SEGMENT
??_C@_0L@MFJADLGK@YUV4MPEG2?5@ DB 'YUV4MPEG2 ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BLHFEFHL@Failed?5to?5write?5reconstructed?5p@
CONST	SEGMENT
??_C@_0CI@BLHFEFHL@Failed?5to?5write?5reconstructed?5p@ DB 'Failed to wri'
	DB	'te reconstructed picture!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DLFAEBD@Failed?5to?5read?5a?5frame?5?$CFd?6@
CONST	SEGMENT
??_C@_0BL@DLFAEBD@Failed?5to?5read?5a?5frame?5?$CFd?6@ DB 'Failed to read'
	DB	' a frame %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JHOPPFEH@Could?5not?5re?9open?5input?5file?0?5s@
CONST	SEGMENT
??_C@_0CO@JHOPPFEH@Could?5not?5re?9open?5input?5file?0?5s@ DB 'Could not '
	DB	're-open input file, shutting down!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BCDOINDE@Failed?5to?5allocate?5image?4?6@
CONST	SEGMENT
??_C@_0BL@BCDOINDE@Failed?5to?5allocate?5image?4?6@ DB 'Failed to allocat'
	DB	'e image.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJMIOICK@?$AA?$AB?$AC?$AD@
CONST	SEGMENT
??_C@_04KJMIOICK@?$AA?$AB?$AC?$AD@ DB 00H, 01H, 02H, 03H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@KLILNEBB@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1DG@KLILNEBB@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@EAEJPBFD@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1DC@EAEJPBFD@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '-', 00H, '>', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, '-', 00H, '>', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n', 00H
	DB	'c', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??compute_psnr@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??compute_psnr@@9@9 DD 074H		; `compute_psnr'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FFFFMINI@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@FFFFMINI@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@MPFPOIAC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GM@MPFPOIAC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 't', 00H, 'h', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 's', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_sem_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_sem_init@@9@9 DD 07aH		; `kvz_sem_init'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _main
_TEXT	SEGMENT
tv940 = -1648						; size = 8
tv1216 = -1644						; size = 4
tv990 = -1644						; size = 8
tv1373 = -1640						; size = 8
tv1209 = -1640						; size = 4
tv1023 = -1640						; size = 8
tv1000 = -1640						; size = 4
tv937 = -1640						; size = 8
tv432 = -1640						; size = 4
tv1301 = -1636						; size = 4
tv1277 = -1636						; size = 4
tv1202 = -1636						; size = 4
tv995 = -1636						; size = 4
tv986 = -1636						; size = 4
tv508 = -1636						; size = 4
tv426 = -1636						; size = 4
_avg_qp$1 = -1052					; size = 8
_bitrate_mbps$2 = -1036					; size = 8
_bitrate_bps$3 = -1020					; size = 8
_sequence_t$4 = -1004					; size = 8
_sequence_fps$5 = -988					; size = 8
_sf_den$6 = -972					; size = 8
_sf_num$7 = -956					; size = 8
_n_bits$8 = -940					; size = 8
_encoding_fps$9 = -924					; size = 8
_encoding_cpu$10 = -908					; size = 8
_wall_time$11 = -892					; size = 8
_encoding_time$12 = -876				; size = 8
_mega$13 = -860						; size = 8
_frame_psnr$14 = -844					; size = 24
_leftover_bits$15 = -812				; size = 8
_chunk$16 = -796					; size = 4
_written$17 = -784					; size = 8
_info_out$18 = -768					; size = 152
_len_out$19 = -608					; size = 4
_img_src$20 = -596					; size = 4
_img_rec$21 = -584					; size = 4
_chunks_out$22 = -572					; size = 4
_cur_in_img$23 = -560					; size = 4
_in_args$24 = -548					; size = 36
_input_thread$25 = -504					; size = 4
_padding_y$26 = -489					; size = 1
_padding_x$27 = -477					; size = 1
_framerate$28 = -468					; size = 4
_frames_this_second$29 = -456				; size = 4
_bits_this_second$30 = -444				; size = 8
_qp_sum$31 = -428					; size = 8
_psnr_sum$32 = -412					; size = 24
_frames_done$33 = -380					; size = 4
_bitstream_length$34 = -368				; size = 8
_encoder$ = -352					; size = 4
_api$ = -340						; size = 4
_filled_input_slots$ = -328				; size = 4
_available_input_slots$ = -316				; size = 4
_recon_buffer_size$ = -304				; size = 4
_recon_buffer$ = -292					; size = 128
_next_recon_pts$ = -156					; size = 8
_encoding_end_real_time$ = -140				; size = 8
_encoding_end_cpu_time$ = -124				; size = 4
_encoding_start_real_time$ = -112			; size = 8
_encoding_start_cpu_time$ = -96				; size = 4
_start_time$ = -84					; size = 4
_recout$ = -72						; size = 4
_output$ = -60						; size = 4
_input$ = -48						; size = 4
_enc$ = -36						; size = 4
_opts$ = -24						; size = 4
_retval$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1648				; 00000670H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1648]
	mov	ecx, 412				; 0000019cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 423  :   int retval = EXIT_SUCCESS;

	mov	DWORD PTR _retval$[ebp], 0

; 424  : 
; 425  :   cmdline_opts_t *opts = NULL; //!< Command line options

	mov	DWORD PTR _opts$[ebp], 0

; 426  :   kvz_encoder* enc = NULL;

	mov	DWORD PTR _enc$[ebp], 0

; 427  :   FILE *input  = NULL; //!< input file (YUV)

	mov	DWORD PTR _input$[ebp], 0

; 428  :   FILE *output = NULL; //!< output file (HEVC NAL stream)

	mov	DWORD PTR _output$[ebp], 0

; 429  :   FILE *recout = NULL; //!< reconstructed YUV output, --debug

	mov	DWORD PTR _recout$[ebp], 0

; 430  :   clock_t start_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start_time$[ebp], eax

; 431  :   clock_t encoding_start_cpu_time;
; 432  :   KVZ_CLOCK_T encoding_start_real_time;
; 433  : 
; 434  :   clock_t encoding_end_cpu_time;
; 435  :   KVZ_CLOCK_T encoding_end_real_time;
; 436  : 
; 437  :   // PTS of the reconstructed picture that should be output next.
; 438  :   // Only used with --debug.
; 439  :   uint64_t next_recon_pts = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _next_recon_pts$[ebp], xmm0

; 440  :   // Buffer for storing reconstructed pictures that are not to be output
; 441  :   // yet (i.e. in wrong order because GOP is used).
; 442  :   // Only used with --debug.
; 443  :   kvz_picture *recon_buffer[KVZ_MAX_GOP_LENGTH] = { NULL };

	mov	DWORD PTR _recon_buffer$[ebp], 0
	push	124					; 0000007cH
	push	0
	lea	eax, DWORD PTR _recon_buffer$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 444  :   int recon_buffer_size = 0;

	mov	DWORD PTR _recon_buffer_size$[ebp], 0

; 445  : 
; 446  :   // Semaphores for synchronizing the input reader thread and the main
; 447  :   // thread.
; 448  :   //
; 449  :   // available_input_slots tells whether the main thread is currently using
; 450  :   // input_handler_args.img_in. (0 = in use, 1 = not in use)
; 451  :   //
; 452  :   // filled_input_slots tells whether there is a new input picture (or NULL
; 453  :   // if the input has ended) in input_handler_args.img_in placed by the
; 454  :   // input reader thread. (0 = no new image, 1 = one new image)
; 455  :   //
; 456  :   kvz_sem_t *available_input_slots = NULL;

	mov	DWORD PTR _available_input_slots$[ebp], 0

; 457  :   kvz_sem_t *filled_input_slots = NULL;

	mov	DWORD PTR _filled_input_slots$[ebp], 0

; 458  : 
; 459  : #ifdef _WIN32
; 460  :   // Stderr needs to be text mode to convert \n to \r\n in Windows.
; 461  :   setmode( _fileno( stderr ), _O_TEXT );

	mov	esi, esp
	push	16384					; 00004000H
	mov	edi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	edi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__setmode
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : #endif
; 463  : 
; 464  :   CHECKPOINTS_INIT();
; 465  : 
; 466  :   const kvz_api * const api = kvz_api_get(8);

	push	8
	call	_kvz_api_get
	add	esp, 4
	mov	DWORD PTR _api$[ebp], eax

; 467  : 
; 468  :   opts = cmdline_opts_parse(api, argc, argv);

	mov	eax, DWORD PTR _argv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _argc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _api$[ebp]
	push	edx
	call	_cmdline_opts_parse
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _opts$[ebp], eax

; 469  :   // If problem with command line options, print banner and shutdown.
; 470  :   if (!opts) {

	cmp	DWORD PTR _opts$[ebp], 0
	jne	SHORT $LN8@main

; 471  :     print_usage();

	call	_print_usage

; 472  : 
; 473  :     goto exit_failure;

	jmp	$exit_failure$75
$LN8@main:

; 474  :   }
; 475  :   if (opts->version) {

	mov	eax, DWORD PTR _opts$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	test	ecx, ecx
	je	SHORT $LN9@main

; 476  :     print_version();

	call	_print_version

; 477  :     goto done;

	jmp	$done$76
$LN9@main:

; 478  :   }
; 479  :   if (opts->help) {

	mov	eax, DWORD PTR _opts$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN10@main

; 480  :     print_help();

	call	_print_help

; 481  :     goto done;

	jmp	$done$76
$LN10@main:

; 482  :   }
; 483  : 
; 484  :   input = open_input_file(opts->input);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_open_input_file
	add	esp, 4
	mov	DWORD PTR _input$[ebp], eax

; 485  :   if (input == NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN11@main

; 486  :     fprintf(stderr, "Could not open input file, shutting down!\n");

	push	OFFSET ??_C@_0CL@DHMCONBL@Could?5not?5open?5input?5file?0?5shut@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 487  :     goto exit_failure;

	jmp	$exit_failure$75
$LN11@main:

; 488  :   }
; 489  : 
; 490  :   output = open_output_file(opts->output);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_open_output_file
	add	esp, 4
	mov	DWORD PTR _output$[ebp], eax

; 491  :   if (output == NULL) {

	cmp	DWORD PTR _output$[ebp], 0
	jne	SHORT $LN12@main

; 492  :     fprintf(stderr, "Could not open output file, shutting down!\n");

	push	OFFSET ??_C@_0CM@KFAFMCPA@Could?5not?5open?5output?5file?0?5shu@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 493  :     goto exit_failure;

	jmp	$exit_failure$75
$LN12@main:

; 494  :   }
; 495  : 
; 496  : #ifdef _WIN32
; 497  :   // Set stdin and stdout to binary for pipes.
; 498  :   if (input == stdin) {

	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _input$[ebp], eax
	jne	SHORT $LN13@main

; 499  :     _setmode(_fileno(stdin), _O_BINARY);

	mov	esi, esp
	push	32768					; 00008000H
	mov	edi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	edi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp___setmode
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@main:

; 500  :   }
; 501  :   if (output == stdout) {

	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _output$[ebp], eax
	jne	SHORT $LN14@main

; 502  :     _setmode(_fileno(stdout), _O_BINARY);

	mov	esi, esp
	push	32768					; 00008000H
	mov	edi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	edi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp___setmode
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@main:

; 503  :   }
; 504  : #endif
; 505  : 
; 506  :   if (opts->debug != NULL) {

	mov	eax, DWORD PTR _opts$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN16@main

; 507  :     recout = open_output_file(opts->debug);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_open_output_file
	add	esp, 4
	mov	DWORD PTR _recout$[ebp], eax

; 508  :     if (recout == NULL) {

	cmp	DWORD PTR _recout$[ebp], 0
	jne	SHORT $LN16@main

; 509  :       fprintf(stderr, "Could not open reconstruction file (%s), shutting down!\n", opts->debug);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DJ@OKBHGHGM@Could?5not?5open?5reconstruction?5f@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 510  :       goto exit_failure;

	jmp	$exit_failure$75
$LN16@main:

; 511  :     }
; 512  :   }
; 513  : 
; 514  :   // Parse headers if input data is in y4m container
; 515  :   if (opts->config->file_format == KVZ_FORMAT_Y4M) {

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+2456], 1
	jne	SHORT $LN18@main

; 516  :     if (!read_header(input, opts->config)) {

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_read_header
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@main

; 517  :       goto exit_failure;

	jmp	$exit_failure$75
$LN18@main:

; 518  :     }
; 519  :   }
; 520  : 
; 521  :   enc = api->encoder_open(opts->config);

	mov	esi, esp
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _api$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _enc$[ebp], eax

; 522  :   if (!enc) {

	cmp	DWORD PTR _enc$[ebp], 0
	jne	SHORT $LN19@main

; 523  :     fprintf(stderr, "Failed to open encoder.\n");

	push	OFFSET ??_C@_0BJ@IOHCDNMK@Failed?5to?5open?5encoder?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 524  :     goto exit_failure;

	jmp	$exit_failure$75
$LN19@main:

; 525  :   }
; 526  : 
; 527  :   const encoder_control_t *encoder = enc->control;

	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 528  : 
; 529  :   fprintf(stderr, "Input: %s, output: %s\n", opts->input, opts->output);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _opts$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0BH@NPMFLGFL@Input?3?5?$CFs?0?5output?3?5?$CFs?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 530  :   fprintf(stderr, "  Video size: %dx%d (input=%dx%d)\n",

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2500]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2496]
	push	eax
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+2484]
	push	edx
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2480]
	push	ecx
	push	OFFSET ??_C@_0CD@FINFDLMN@?5?5Video?5size?3?5?$CFdx?$CFd?5?$CIinput?$DN?$CFdx?$CF@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H

; 531  :          encoder->in.width, encoder->in.height,
; 532  :          encoder->in.real_width, encoder->in.real_height);
; 533  : 
; 534  :   if (opts->seek > 0 && !yuv_io_seek(input, opts->seek, opts->config->width, opts->config->height, opts->config->file_format)) {

	mov	eax, DWORD PTR _opts$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN20@main
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+2456]
	push	edx
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_yuv_io_seek
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN20@main

; 535  :     fprintf(stderr, "Failed to seek %d frames.\n", opts->seek);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET ??_C@_0BL@LFDIMNDN@Failed?5to?5seek?5?$CFd?5frames?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 536  :     goto exit_failure;

	jmp	$exit_failure$75
$LN20@main:

; 537  :   }
; 538  : 
; 539  :   //Now, do the real stuff
; 540  :   {
; 541  : 
; 542  :     KVZ_GET_TIME(&encoding_start_real_time);

	mov	esi, esp
	lea	eax, DWORD PTR _encoding_start_real_time$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemTimeAsFileTime@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 543  :     encoding_start_cpu_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _encoding_start_cpu_time$[ebp], eax

; 544  : 
; 545  :     uint64_t bitstream_length = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _bitstream_length$34[ebp], xmm0

; 546  :     uint32_t frames_done = 0;

	mov	DWORD PTR _frames_done$33[ebp], 0

; 547  :     double psnr_sum[3] = { 0.0, 0.0, 0.0 };

	xorps	xmm0, xmm0
	movsd	QWORD PTR _psnr_sum$32[ebp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _psnr_sum$32[ebp+8], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _psnr_sum$32[ebp+16], xmm0

; 548  :     uint64_t qp_sum = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _qp_sum$31[ebp], xmm0

; 549  : 
; 550  :     // how many bits have been written this second? used for checking if framerate exceeds level's limits
; 551  :     uint64_t bits_this_second = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _bits_this_second$30[ebp], xmm0

; 552  :     // the amount of frames have been encoded in this second of video. can be non-integer value if framerate is non-integer value
; 553  :     unsigned frames_this_second = 0;

	mov	DWORD PTR _frames_this_second$29[ebp], 0

; 554  :     const float framerate = ((float)encoder->cfg.framerate_num) / ((float)encoder->cfg.framerate_denom);

	mov	eax, DWORD PTR _encoder$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _encoder$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+36]
	divss	xmm0, xmm1
	movss	DWORD PTR _framerate$28[ebp], xmm0

; 555  : 
; 556  :     uint8_t padding_x = get_padding(opts->config->width);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_get_padding
	add	esp, 4
	mov	BYTE PTR _padding_x$27[ebp], al

; 557  :     uint8_t padding_y = get_padding(opts->config->height);

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_get_padding
	add	esp, 4
	mov	BYTE PTR _padding_y$26[ebp], al

; 558  : 
; 559  :     pthread_t input_thread;
; 560  : 
; 561  :     available_input_slots = calloc(1, sizeof(kvz_sem_t));

	mov	esi, esp
	push	4
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _available_input_slots$[ebp], eax

; 562  :     filled_input_slots    = calloc(1, sizeof(kvz_sem_t));

	mov	esi, esp
	push	4
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _filled_input_slots$[ebp], eax

; 563  :     kvz_sem_init(available_input_slots, 0);

	push	0
	mov	eax, DWORD PTR _available_input_slots$[ebp]
	push	eax
	call	_kvz_sem_init
	add	esp, 8

; 564  :     kvz_sem_init(filled_input_slots,    0);

	push	0
	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	push	eax
	call	_kvz_sem_init
	add	esp, 8

; 565  : 
; 566  :     // Give arguments via struct to the input thread
; 567  :     input_handler_args in_args = {

	mov	eax, DWORD PTR _available_input_slots$[ebp]
	mov	DWORD PTR _in_args$24[ebp], eax
	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	mov	DWORD PTR _in_args$24[ebp+4], eax
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR _in_args$24[ebp+8], eax
	mov	eax, DWORD PTR _api$[ebp]
	mov	DWORD PTR _in_args$24[ebp+12], eax
	mov	eax, DWORD PTR _opts$[ebp]
	mov	DWORD PTR _in_args$24[ebp+16], eax
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR _in_args$24[ebp+20], eax
	mov	al, BYTE PTR _padding_x$27[ebp]
	mov	BYTE PTR _in_args$24[ebp+24], al
	mov	al, BYTE PTR _padding_y$26[ebp]
	mov	BYTE PTR _in_args$24[ebp+25], al
	mov	DWORD PTR _in_args$24[ebp+28], 0
	mov	DWORD PTR _in_args$24[ebp+32], 0

; 568  :       .available_input_slots = available_input_slots,
; 569  :       .filled_input_slots    = filled_input_slots,
; 570  : 
; 571  :       .input = input,
; 572  :       .api = api,
; 573  :       .opts = opts,
; 574  :       .encoder = encoder,
; 575  :       .padding_x = padding_x,
; 576  :       .padding_y = padding_y,
; 577  : 
; 578  :       .img_in = NULL,
; 579  :       .retval = RETVAL_RUNNING,
; 580  :     };
; 581  :     in_args.available_input_slots = available_input_slots;

	mov	eax, DWORD PTR _available_input_slots$[ebp]
	mov	DWORD PTR _in_args$24[ebp], eax

; 582  :     in_args.filled_input_slots    = filled_input_slots;

	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	mov	DWORD PTR _in_args$24[ebp+4], eax

; 583  : 
; 584  :     if (pthread_create(&input_thread, NULL, input_read_thread, (void*)&in_args) != 0) {

	lea	eax, DWORD PTR _in_args$24[ebp]
	push	eax
	push	OFFSET _input_read_thread
	push	0
	lea	ecx, DWORD PTR _input_thread$25[ebp]
	push	ecx
	call	_pthread_create
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@main

; 585  :       fprintf(stderr, "pthread_create failed!\n");

	push	OFFSET ??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 586  :       assert(0);

	xor	eax, eax
	jne	SHORT $LN46@main
	mov	ecx, DWORD PTR ?__LINE__Var@?0??main@@9@9
	add	ecx, 164				; 000000a4H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@main:

; 587  :       return 0;

	xor	eax, eax
	jmp	$LN1@main
$LN21@main:
$LN2@main:

; 588  :     }
; 589  :     kvz_picture *cur_in_img;
; 590  :     for (;;) {
; 591  : 
; 592  :       // Skip mutex locking if the input thread does not exist.
; 593  :       if (in_args.retval == RETVAL_RUNNING) {

	cmp	DWORD PTR _in_args$24[ebp+32], 0
	jne	SHORT $LN22@main

; 594  :         // Increase available_input_slots so that the input thread can
; 595  :         // write the new img_in and retval to in_args.
; 596  :         kvz_sem_post(available_input_slots);

	mov	eax, DWORD PTR _available_input_slots$[ebp]
	push	eax
	call	_kvz_sem_post
	add	esp, 4

; 597  :         // Wait until the input thread has updated in_args and then
; 598  :         // decrease filled_input_slots.
; 599  :         kvz_sem_wait(filled_input_slots);

	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	push	eax
	call	_kvz_sem_wait
	add	esp, 4

; 600  : 
; 601  :         cur_in_img = in_args.img_in;

	mov	eax, DWORD PTR _in_args$24[ebp+28]
	mov	DWORD PTR _cur_in_img$23[ebp], eax

; 602  :         in_args.img_in = NULL;

	mov	DWORD PTR _in_args$24[ebp+28], 0

; 603  : 
; 604  :       } else {

	jmp	SHORT $LN23@main
$LN22@main:

; 605  :         cur_in_img = NULL;

	mov	DWORD PTR _cur_in_img$23[ebp], 0
$LN23@main:

; 606  :       }
; 607  : 
; 608  :       if (in_args.retval == EXIT_FAILURE) {

	cmp	DWORD PTR _in_args$24[ebp+32], 1
	jne	SHORT $LN24@main

; 609  :         goto exit_failure;

	jmp	$exit_failure$75
$LN24@main:

; 610  :       }
; 611  : 
; 612  :       kvz_data_chunk* chunks_out = NULL;

	mov	DWORD PTR _chunks_out$22[ebp], 0

; 613  :       kvz_picture *img_rec = NULL;

	mov	DWORD PTR _img_rec$21[ebp], 0

; 614  :       kvz_picture *img_src = NULL;

	mov	DWORD PTR _img_src$20[ebp], 0

; 615  :       uint32_t len_out = 0;

	mov	DWORD PTR _len_out$19[ebp], 0

; 616  :       kvz_frame_info info_out;
; 617  :       if (!api->encoder_encode(enc,

	mov	esi, esp
	lea	eax, DWORD PTR _info_out$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _img_src$20[ebp]
	push	ecx
	lea	edx, DWORD PTR _img_rec$21[ebp]
	push	edx
	lea	eax, DWORD PTR _len_out$19[ebp]
	push	eax
	lea	ecx, DWORD PTR _chunks_out$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_in_img$23[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN25@main

; 618  :                                cur_in_img,
; 619  :                                &chunks_out,
; 620  :                                &len_out,
; 621  :                                &img_rec,
; 622  :                                &img_src,
; 623  :                                &info_out)) {
; 624  :         fprintf(stderr, "Failed to encode image.\n");

	push	OFFSET ??_C@_0BJ@OOEJKIGO@Failed?5to?5encode?5image?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 625  :         api->picture_free(cur_in_img);

	mov	esi, esp
	mov	eax, DWORD PTR _cur_in_img$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 626  :         goto exit_failure;

	jmp	$exit_failure$75
$LN25@main:

; 627  :       }
; 628  : 
; 629  :       if (chunks_out == NULL && cur_in_img == NULL) {

	cmp	DWORD PTR _chunks_out$22[ebp], 0
	jne	SHORT $LN26@main
	cmp	DWORD PTR _cur_in_img$23[ebp], 0
	jne	SHORT $LN26@main

; 630  :         // We are done since there is no more input and output left.
; 631  :         break;

	jmp	$LN3@main
$LN26@main:

; 632  :       }
; 633  : 
; 634  :       if (chunks_out != NULL) {

	cmp	DWORD PTR _chunks_out$22[ebp], 0
	je	$LN27@main

; 635  :         uint64_t written = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _written$17[ebp], xmm0

; 636  :         // Write data into the output file.
; 637  :         for (kvz_data_chunk *chunk = chunks_out;

	mov	eax, DWORD PTR _chunks_out$22[ebp]
	mov	DWORD PTR _chunk$16[ebp], eax
	jmp	SHORT $LN7@main
$LN5@main:

; 639  :              chunk = chunk->next) {

	mov	eax, DWORD PTR _chunk$16[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	mov	DWORD PTR _chunk$16[ebp], ecx
$LN7@main:

; 638  :              chunk != NULL;

	cmp	DWORD PTR _chunk$16[ebp], 0
	je	$LN6@main

; 640  :           assert(written + chunk->len <= len_out);

	mov	eax, DWORD PTR _chunk$16[ebp]
	mov	ecx, DWORD PTR [eax+4096]
	xor	edx, edx
	add	ecx, DWORD PTR _written$17[ebp]
	adc	edx, DWORD PTR _written$17[ebp+4]
	mov	eax, DWORD PTR _len_out$19[ebp]
	xor	esi, esi
	mov	DWORD PTR tv937[ebp], ecx
	mov	DWORD PTR tv937[ebp+4], edx
	mov	DWORD PTR tv940[ebp], eax
	mov	DWORD PTR tv940[ebp+4], esi
	mov	ecx, DWORD PTR tv937[ebp+4]
	cmp	ecx, DWORD PTR tv940[ebp+4]
	jb	SHORT $LN47@main
	ja	SHORT $LN57@main
	mov	edx, DWORD PTR tv937[ebp]
	cmp	edx, DWORD PTR tv940[ebp]
	jbe	SHORT $LN47@main
$LN57@main:
	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@9
	add	eax, 218				; 000000daH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EA@BEKCCMOJ@?$AAw?$AAr?$AAi?$AAt?$AAt?$AAe?$AAn?$AA?5?$AA?$CL?$AA?5?$AAc?$AAh?$AAu?$AAn?$AAk@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN47@main:

; 641  :           if (fwrite(chunk->data, sizeof(uint8_t), chunk->len, output) != chunk->len) {

	mov	esi, esp
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _chunk$16[ebp]
	mov	edx, DWORD PTR [ecx+4096]
	push	edx
	push	1
	mov	eax, DWORD PTR _chunk$16[ebp]
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _chunk$16[ebp]
	cmp	eax, DWORD PTR [ecx+4096]
	je	SHORT $LN28@main

; 642  :             fprintf(stderr, "Failed to write data to file.\n");

	push	OFFSET ??_C@_0BP@FPGOBLLI@Failed?5to?5write?5data?5to?5file?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 643  :             api->picture_free(cur_in_img);

	mov	esi, esp
	mov	eax, DWORD PTR _cur_in_img$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :             api->chunk_free(chunks_out);

	mov	esi, esp
	mov	eax, DWORD PTR _chunks_out$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 645  :             goto exit_failure;

	jmp	$exit_failure$75
$LN28@main:

; 646  :           }
; 647  :           written += chunk->len;

	mov	eax, DWORD PTR _chunk$16[ebp]
	mov	ecx, DWORD PTR [eax+4096]
	xor	edx, edx
	add	ecx, DWORD PTR _written$17[ebp]
	adc	edx, DWORD PTR _written$17[ebp+4]
	mov	DWORD PTR _written$17[ebp], ecx
	mov	DWORD PTR _written$17[ebp+4], edx

; 648  :         }

	jmp	$LN5@main
$LN6@main:

; 649  :         fflush(output);

	mov	esi, esp
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 650  : 
; 651  :         bitstream_length += len_out;

	mov	eax, DWORD PTR _len_out$19[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _bitstream_length$34[ebp]
	adc	ecx, DWORD PTR _bitstream_length$34[ebp+4]
	mov	DWORD PTR _bitstream_length$34[ebp], eax
	mov	DWORD PTR _bitstream_length$34[ebp+4], ecx

; 652  :         
; 653  :         // the level's bitrate check
; 654  :         frames_this_second += 1;

	mov	eax, DWORD PTR _frames_this_second$29[ebp]
	add	eax, 1
	mov	DWORD PTR _frames_this_second$29[ebp], eax

; 655  : 
; 656  :         if ((float)frames_this_second >= framerate) {

	mov	eax, DWORD PTR _frames_this_second$29[ebp]
	mov	DWORD PTR tv986[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv986[ebp]
	mov	ecx, DWORD PTR tv986[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv990[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv990[ebp]
	comiss	xmm0, DWORD PTR _framerate$28[ebp]
	jb	$LN29@main

; 657  :           // if framerate <= 1 then we go here always
; 658  : 
; 659  :           // how much of the bits of the last frame belonged to the next second
; 660  :           uint64_t leftover_bits = (uint64_t)((double)len_out * ((double)frames_this_second - framerate));

	mov	eax, DWORD PTR _len_out$19[ebp]
	mov	DWORD PTR tv995[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv995[ebp]
	mov	ecx, DWORD PTR tv995[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mov	edx, DWORD PTR _frames_this_second$29[ebp]
	mov	DWORD PTR tv1000[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv1000[ebp]
	mov	eax, DWORD PTR tv1000[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtss2sd xmm2, DWORD PTR _framerate$28[ebp]
	subsd	xmm1, xmm2
	mulsd	xmm0, xmm1
	call	__dtoul3
	mov	DWORD PTR _leftover_bits$15[ebp], eax
	mov	DWORD PTR _leftover_bits$15[ebp+4], edx

; 661  : 
; 662  :           // the latest frame is counted for the amount that it contributed to this current second
; 663  :           bits_this_second += len_out - leftover_bits;

	mov	eax, DWORD PTR _len_out$19[ebp]
	xor	ecx, ecx
	sub	eax, DWORD PTR _leftover_bits$15[ebp]
	sbb	ecx, DWORD PTR _leftover_bits$15[ebp+4]
	add	eax, DWORD PTR _bits_this_second$30[ebp]
	adc	ecx, DWORD PTR _bits_this_second$30[ebp+4]
	mov	DWORD PTR _bits_this_second$30[ebp], eax
	mov	DWORD PTR _bits_this_second$30[ebp+4], ecx

; 664  : 
; 665  :           if (bits_this_second > encoder->cfg.max_bitrate) {

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2420]
	xor	edx, edx
	mov	DWORD PTR tv1023[ebp], ecx
	mov	DWORD PTR tv1023[ebp+4], edx
	mov	eax, DWORD PTR _bits_this_second$30[ebp+4]
	cmp	eax, DWORD PTR tv1023[ebp+4]
	jb	$LN31@main
	ja	SHORT $LN58@main
	mov	ecx, DWORD PTR _bits_this_second$30[ebp]
	cmp	ecx, DWORD PTR tv1023[ebp]
	jbe	$LN31@main
$LN58@main:

; 666  :             fprintf(stderr, "Level warning: This %s's bitrate (%llu bits/s) reached the maximum bitrate (%u bits/s) of %s tier level %g.",

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2418]
	test	ecx, ecx
	je	SHORT $LN48@main
	mov	DWORD PTR tv426[ebp], OFFSET ??_C@_04DGANLAON@high@
	jmp	SHORT $LN49@main
$LN48@main:
	mov	DWORD PTR tv426[ebp], OFFSET ??_C@_04GHJNJNPO@main@
$LN49@main:
	movss	xmm0, DWORD PTR _framerate$28[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN50@main
	mov	DWORD PTR tv432[ebp], OFFSET ??_C@_06BJCFNGJP@second@
	jmp	SHORT $LN51@main
$LN50@main:
	mov	DWORD PTR tv432[ebp], OFFSET ??_C@_05MIJNFGED@frame@
$LN51@main:
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	eax, BYTE PTR [edx+2416]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@41200000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv426[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2420]
	push	eax
	mov	ecx, DWORD PTR _bits_this_second$30[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _bits_this_second$30[ebp]
	push	edx
	mov	eax, DWORD PTR tv432[ebp]
	push	eax
	push	OFFSET ??_C@_0GM@OPNHHGBF@Level?5warning?3?5This?5?$CFs?8s?5bitrat@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 36					; 00000024H
$LN31@main:

; 667  :               framerate >= 1.0f ? "second" : "frame",
; 668  :               (unsigned long long) bits_this_second,
; 669  :               encoder->cfg.max_bitrate,
; 670  :               encoder->cfg.high_tier ? "high" : "main",
; 671  :               (float)encoder->cfg.level / 10.0f );
; 672  :           }
; 673  : 
; 674  :           if (framerate > 1.0f) {

	movss	xmm0, DWORD PTR _framerate$28[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN32@main

; 675  :             // leftovers for the next second
; 676  :             bits_this_second = leftover_bits;

	mov	eax, DWORD PTR _leftover_bits$15[ebp]
	mov	DWORD PTR _bits_this_second$30[ebp], eax
	mov	ecx, DWORD PTR _leftover_bits$15[ebp+4]
	mov	DWORD PTR _bits_this_second$30[ebp+4], ecx

; 677  :           } else {

	jmp	SHORT $LN33@main
$LN32@main:

; 678  :             // one or more next seconds are from this frame and their bitrate is the same or less as this frame's
; 679  :             bits_this_second = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _bits_this_second$30[ebp], xmm0
$LN33@main:

; 680  :           }
; 681  :           frames_this_second = 0;

	mov	DWORD PTR _frames_this_second$29[ebp], 0

; 682  :         } else {

	jmp	SHORT $LN30@main
$LN29@main:

; 683  :           bits_this_second += len_out;

	mov	eax, DWORD PTR _len_out$19[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _bits_this_second$30[ebp]
	adc	ecx, DWORD PTR _bits_this_second$30[ebp+4]
	mov	DWORD PTR _bits_this_second$30[ebp], eax
	mov	DWORD PTR _bits_this_second$30[ebp+4], ecx
$LN30@main:

; 684  :         }
; 685  : 
; 686  :         // Compute and print stats.
; 687  : 
; 688  :         double frame_psnr[3] = { 0.0, 0.0, 0.0 };

	xorps	xmm0, xmm0
	movsd	QWORD PTR _frame_psnr$14[ebp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _frame_psnr$14[ebp+8], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _frame_psnr$14[ebp+16], xmm0

; 689  :         if (encoder->cfg.calc_psnr && encoder->cfg.source_scan_type == KVZ_INTERLACING_NONE) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2333]
	test	ecx, ecx
	je	SHORT $LN34@main
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	jne	SHORT $LN34@main

; 690  :           // Do not compute PSNR for interlaced frames, because img_rec does not contain
; 691  :           // the deinterlaced frame yet.
; 692  :           compute_psnr(img_src, img_rec, frame_psnr);

	lea	eax, DWORD PTR _frame_psnr$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _img_rec$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _img_src$20[ebp]
	push	edx
	call	_compute_psnr
	add	esp, 12					; 0000000cH
$LN34@main:

; 693  :         }
; 694  : 
; 695  :         if (recout) {

	cmp	DWORD PTR _recout$[ebp], 0
	je	$LN35@main

; 696  :           // Since chunks_out was not NULL, img_rec should have been set.
; 697  :           assert(img_rec);

	cmp	DWORD PTR _img_rec$21[ebp], 0
	jne	SHORT $LN52@main
	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@9
	add	eax, 275				; 00000113H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BA@EHFDMACK@?$AAi?$AAm?$AAg?$AA_?$AAr?$AAe?$AAc@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN52@main:

; 698  : 
; 699  :           // Move img_rec to the recon buffer.
; 700  :           assert(recon_buffer_size < KVZ_MAX_GOP_LENGTH);

	cmp	DWORD PTR _recon_buffer_size$[ebp], 32	; 00000020H
	jl	SHORT $LN53@main
	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@9
	add	eax, 278				; 00000116H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EO@BJGPFBKA@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN53@main:

; 701  :           recon_buffer[recon_buffer_size++] = img_rec;

	mov	eax, DWORD PTR _recon_buffer_size$[ebp]
	mov	ecx, DWORD PTR _img_rec$21[ebp]
	mov	DWORD PTR _recon_buffer$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _recon_buffer_size$[ebp]
	add	edx, 1
	mov	DWORD PTR _recon_buffer_size$[ebp], edx

; 702  :           img_rec = NULL;

	mov	DWORD PTR _img_rec$21[ebp], 0

; 703  : 
; 704  :           // Try to output some reconstructed pictures.
; 705  :           output_recon_pictures(api,

	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _opts$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	lea	eax, DWORD PTR _next_recon_pts$[ebp]
	push	eax
	lea	ecx, DWORD PTR _recon_buffer_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _recon_buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	push	ecx
	call	_output_recon_pictures
	add	esp, 28					; 0000001cH
$LN35@main:

; 706  :                                 recout,
; 707  :                                 recon_buffer,
; 708  :                                 &recon_buffer_size,
; 709  :                                 &next_recon_pts,
; 710  :                                 opts->config->width,
; 711  :                                 opts->config->height);
; 712  :         }
; 713  : 
; 714  :         qp_sum      += info_out.qp;

	movsx	eax, BYTE PTR _info_out$18[ebp+4]
	cdq
	add	eax, DWORD PTR _qp_sum$31[ebp]
	adc	edx, DWORD PTR _qp_sum$31[ebp+4]
	mov	DWORD PTR _qp_sum$31[ebp], eax
	mov	DWORD PTR _qp_sum$31[ebp+4], edx

; 715  :         frames_done += 1;

	mov	eax, DWORD PTR _frames_done$33[ebp]
	add	eax, 1
	mov	DWORD PTR _frames_done$33[ebp], eax

; 716  : 
; 717  :         psnr_sum[0] += frame_psnr[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	imul	eax, edx, 0
	movsd	xmm0, QWORD PTR _psnr_sum$32[ebp+ecx]
	addsd	xmm0, QWORD PTR _frame_psnr$14[ebp+eax]
	mov	ecx, 8
	imul	edx, ecx, 0
	movsd	QWORD PTR _psnr_sum$32[ebp+edx], xmm0

; 718  :         psnr_sum[1] += frame_psnr[1];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 8
	shl	ecx, 0
	movsd	xmm0, QWORD PTR _psnr_sum$32[ebp+eax]
	addsd	xmm0, QWORD PTR _frame_psnr$14[ebp+ecx]
	mov	edx, 8
	shl	edx, 0
	movsd	QWORD PTR _psnr_sum$32[ebp+edx], xmm0

; 719  :         psnr_sum[2] += frame_psnr[2];

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 8
	shl	ecx, 1
	movsd	xmm0, QWORD PTR _psnr_sum$32[ebp+eax]
	addsd	xmm0, QWORD PTR _frame_psnr$14[ebp+ecx]
	mov	edx, 8
	shl	edx, 1
	movsd	QWORD PTR _psnr_sum$32[ebp+edx], xmm0

; 720  : 
; 721  :         print_frame_info(&info_out, frame_psnr, len_out, encoder->cfg.calc_psnr,

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2333]
	test	ecx, ecx
	jne	SHORT $LN54@main
	mov	DWORD PTR tv508[ebp], 0
	jmp	SHORT $LN55@main
$LN54@main:
	mov	DWORD PTR tv508[ebp], 1
$LN55@main:
	mov	edx, DWORD PTR _frames_done$33[ebp]
	push	edx
	mov	eax, DWORD PTR _qp_sum$31[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _qp_sum$31[ebp]
	push	ecx
	call	_calc_avg_qp
	add	esp, 4
	fstp	QWORD PTR [esp]
	movzx	edx, BYTE PTR tv508[ebp]
	push	edx
	mov	eax, DWORD PTR _len_out$19[ebp]
	push	eax
	lea	ecx, DWORD PTR _frame_psnr$14[ebp]
	push	ecx
	lea	edx, DWORD PTR _info_out$18[ebp]
	push	edx
	call	_print_frame_info
	add	esp, 24					; 00000018H
$LN27@main:

; 722  :                          calc_avg_qp(qp_sum, frames_done));
; 723  :       }
; 724  : 
; 725  :       api->picture_free(cur_in_img);

	mov	esi, esp
	mov	eax, DWORD PTR _cur_in_img$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 726  :       api->chunk_free(chunks_out);

	mov	esi, esp
	mov	eax, DWORD PTR _chunks_out$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 727  :       api->picture_free(img_rec);

	mov	esi, esp
	mov	eax, DWORD PTR _img_rec$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 728  :       api->picture_free(img_src);

	mov	esi, esp
	mov	eax, DWORD PTR _img_src$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 729  :     }

	jmp	$LN2@main
$LN3@main:

; 730  : 
; 731  :     KVZ_GET_TIME(&encoding_end_real_time);

	mov	esi, esp
	lea	eax, DWORD PTR _encoding_end_real_time$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemTimeAsFileTime@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 732  :     encoding_end_cpu_time = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _encoding_end_cpu_time$[ebp], eax

; 733  :     // Coding finished
; 734  : 
; 735  :     // All reconstructed pictures should have been output.
; 736  :     assert(recon_buffer_size == 0);

	cmp	DWORD PTR _recon_buffer_size$[ebp], 0
	je	SHORT $LN56@main
	mov	eax, DWORD PTR ?__LINE__Var@?0??main@@9@9
	add	eax, 314				; 0000013aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CO@ENJONJIF@?$AAr?$AAe?$AAc?$AAo?$AAn?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN56@main:

; 737  : 
; 738  :     // Print statistics of the coding
; 739  :     fprintf(stderr, " Processed %d frames, %10llu bits",

	push	0
	push	8
	mov	eax, DWORD PTR _bitstream_length$34[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _bitstream_length$34[ebp]
	push	ecx
	call	__allmul
	push	edx
	push	eax
	mov	edx, DWORD PTR _frames_done$33[ebp]
	push	edx
	push	OFFSET ??_C@_0CC@HJFCBCIK@?5Processed?5?$CFd?5frames?0?5?$CF10llu?5bi@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 20					; 00000014H

; 740  :             frames_done,
; 741  :             (long long unsigned int)bitstream_length * 8);
; 742  :     if (encoder->cfg.calc_psnr && frames_done > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2333]
	test	ecx, ecx
	je	$LN36@main
	cmp	DWORD PTR _frames_done$33[ebp], 0
	jbe	$LN36@main

; 743  :       fprintf(stderr, " AVG PSNR Y %2.4f U %2.4f V %2.4f",

	mov	eax, 8
	shl	eax, 1
	mov	ecx, DWORD PTR _frames_done$33[ebp]
	mov	DWORD PTR tv1202[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv1202[ebp]
	mov	edx, DWORD PTR tv1202[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	xmm1, QWORD PTR _psnr_sum$32[ebp+eax]
	divsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _frames_done$33[ebp]
	mov	DWORD PTR tv1209[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv1209[ebp]
	mov	edx, DWORD PTR tv1209[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	xmm1, QWORD PTR _psnr_sum$32[ebp+eax]
	divsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _frames_done$33[ebp]
	mov	DWORD PTR tv1216[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1216[ebp]
	mov	eax, DWORD PTR tv1216[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	xmm1, QWORD PTR _psnr_sum$32[ebp+ecx]
	divsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	push	OFFSET ??_C@_0CC@CODDMJAP@?5AVG?5PSNR?5Y?5?$CF2?44f?5U?5?$CF2?44f?5V?5?$CF2?4@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 32					; 00000020H
$LN36@main:

; 744  :               psnr_sum[0] / frames_done,
; 745  :               psnr_sum[1] / frames_done,
; 746  :               psnr_sum[2] / frames_done);
; 747  :     }
; 748  :     fprintf(stderr, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 749  :     fprintf(stderr, " Total CPU time: %.3f s.\n", ((float)(clock() - start_time)) / CLOCKS_PER_SEC);

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _start_time$[ebp]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@447a0000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BK@PDFIMOAL@?5Total?5CPU?5time?3?5?$CF?43f?5s?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 750  : 
; 751  :     {
; 752  :       const double mega = (double)(1 << 20);

	movsd	xmm0, QWORD PTR __real@4130000000000000
	movsd	QWORD PTR _mega$13[ebp], xmm0

; 753  : 
; 754  :       double encoding_time = ( (double)(encoding_end_cpu_time - encoding_start_cpu_time) ) / (double) CLOCKS_PER_SEC;

	mov	eax, DWORD PTR _encoding_end_cpu_time$[ebp]
	sub	eax, DWORD PTR _encoding_start_cpu_time$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR _encoding_time$12[ebp], xmm0

; 755  :       double wall_time = KVZ_CLOCK_T_AS_DOUBLE(encoding_end_real_time) - KVZ_CLOCK_T_AS_DOUBLE(encoding_start_real_time);

	xor	edx, edx
	mov	eax, DWORD PTR _encoding_end_real_time$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _encoding_end_real_time$[ebp]
	or	edx, ecx
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@416312d000000000
	xor	edx, edx
	mov	eax, DWORD PTR _encoding_start_real_time$[ebp+4]
	mov	cl, 32					; 00000020H
	movsd	QWORD PTR tv1373[ebp], xmm0
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _encoding_start_real_time$[ebp]
	or	edx, ecx
	mov	ecx, eax
	call	__ultod3
	divsd	xmm0, QWORD PTR __real@416312d000000000
	movsd	xmm1, QWORD PTR tv1373[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _wall_time$11[ebp], xmm1

; 756  : 
; 757  :       double encoding_cpu = 100.0 * encoding_time / wall_time;

	movsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR _encoding_time$12[ebp]
	divsd	xmm0, QWORD PTR _wall_time$11[ebp]
	movsd	QWORD PTR _encoding_cpu$10[ebp], xmm0

; 758  :       double encoding_fps = (double)frames_done   / wall_time;

	mov	eax, DWORD PTR _frames_done$33[ebp]
	mov	DWORD PTR tv1277[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1277[ebp]
	mov	ecx, DWORD PTR tv1277[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, QWORD PTR _wall_time$11[ebp]
	movsd	QWORD PTR _encoding_fps$9[ebp], xmm0

; 759  : 
; 760  :       double n_bits       = (double)(bitstream_length * 8);

	push	0
	push	8
	mov	eax, DWORD PTR _bitstream_length$34[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _bitstream_length$34[ebp]
	push	ecx
	call	__allmul
	mov	ecx, eax
	call	__ultod3
	movsd	QWORD PTR _n_bits$8[ebp], xmm0

; 761  :       double sf_num       = (double)encoder->cfg.framerate_num;

	mov	eax, DWORD PTR _encoder$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+32]
	movsd	QWORD PTR _sf_num$7[ebp], xmm0

; 762  :       double sf_den       = (double)encoder->cfg.framerate_denom;

	mov	eax, DWORD PTR _encoder$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+36]
	movsd	QWORD PTR _sf_den$6[ebp], xmm0

; 763  :       double sequence_fps =         sf_num / sf_den;

	movsd	xmm0, QWORD PTR _sf_num$7[ebp]
	divsd	xmm0, QWORD PTR _sf_den$6[ebp]
	movsd	QWORD PTR _sequence_fps$5[ebp], xmm0

; 764  : 
; 765  :       double sequence_t   = (double)frames_done / sequence_fps;

	mov	eax, DWORD PTR _frames_done$33[ebp]
	mov	DWORD PTR tv1301[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1301[ebp]
	mov	ecx, DWORD PTR tv1301[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, QWORD PTR _sequence_fps$5[ebp]
	movsd	QWORD PTR _sequence_t$4[ebp], xmm0

; 766  :       double bitrate_bps  = (double)n_bits      / sequence_t;

	movsd	xmm0, QWORD PTR _n_bits$8[ebp]
	divsd	xmm0, QWORD PTR _sequence_t$4[ebp]
	movsd	QWORD PTR _bitrate_bps$3[ebp], xmm0

; 767  :       double bitrate_mbps =         bitrate_bps / mega;

	movsd	xmm0, QWORD PTR _bitrate_bps$3[ebp]
	divsd	xmm0, QWORD PTR _mega$13[ebp]
	movsd	QWORD PTR _bitrate_mbps$2[ebp], xmm0

; 768  : 
; 769  :       double avg_qp       = calc_avg_qp(qp_sum, frames_done);

	mov	eax, DWORD PTR _frames_done$33[ebp]
	push	eax
	mov	ecx, DWORD PTR _qp_sum$31[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _qp_sum$31[ebp]
	push	edx
	call	_calc_avg_qp
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _avg_qp$1[ebp]

; 770  : 
; 771  : #ifdef _WIN32
; 772  :       if (encoding_cpu > 100.0) {

	movsd	xmm0, QWORD PTR _encoding_cpu$10[ebp]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jbe	SHORT $LN37@main

; 773  :         encoding_cpu = 100.0;

	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR _encoding_cpu$10[ebp], xmm0
$LN37@main:

; 774  :       }
; 775  : #endif
; 776  :       fprintf(stderr, " Encoding time: %.3f s.\n",      encoding_time);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _encoding_time$12[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BJ@HJHGMOFC@?5Encoding?5time?3?5?$CF?43f?5s?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 777  :       fprintf(stderr, " Encoding wall time: %.3f s.\n", wall_time);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _wall_time$11[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BO@BMNNAIMJ@?5Encoding?5wall?5time?3?5?$CF?43f?5s?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 778  : 
; 779  :       fprintf(stderr, " Encoding CPU usage: %.2f%%\n",  encoding_cpu);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _encoding_cpu$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BN@MNABABFE@?5Encoding?5CPU?5usage?3?5?$CF?42f?$CF?$CF?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 780  :       fprintf(stderr, " FPS: %.2f\n",                   encoding_fps);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _encoding_fps$9[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@EOJKNGME@?5FPS?3?5?$CF?42f?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 781  : 
; 782  :       fprintf(stderr, " Bitrate: %.3f Mbps\n",          bitrate_mbps);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _bitrate_mbps$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BF@NIGLBOIA@?5Bitrate?3?5?$CF?43f?5Mbps?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 783  :       fprintf(stderr, " AVG QP: %.1f\n",                avg_qp);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _avg_qp$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0P@DPNBPCBA@?5AVG?5QP?3?5?$CF?41f?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 784  :     }
; 785  :     pthread_join(input_thread, NULL);

	push	0
	mov	eax, DWORD PTR _input_thread$25[ebp]
	push	eax
	call	_pthread_join
	add	esp, 8

; 786  :   }
; 787  : 
; 788  :   goto done;

	jmp	SHORT $done$76
$exit_failure$75:

; 789  : 
; 790  : exit_failure:
; 791  :   retval = EXIT_FAILURE;

	mov	DWORD PTR _retval$[ebp], 1
$done$76:

; 792  : 
; 793  : done:
; 794  :   // destroy semaphores
; 795  :   if (available_input_slots) kvz_sem_destroy(available_input_slots);

	cmp	DWORD PTR _available_input_slots$[ebp], 0
	je	SHORT $LN38@main
	mov	eax, DWORD PTR _available_input_slots$[ebp]
	push	eax
	call	_kvz_sem_destroy
	add	esp, 4
$LN38@main:

; 796  :   if (filled_input_slots)    kvz_sem_destroy(filled_input_slots);

	cmp	DWORD PTR _filled_input_slots$[ebp], 0
	je	SHORT $LN39@main
	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	push	eax
	call	_kvz_sem_destroy
	add	esp, 4
$LN39@main:

; 797  :   FREE_POINTER(available_input_slots);

	mov	esi, esp
	mov	eax, DWORD PTR _available_input_slots$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _available_input_slots$[ebp], 0

; 798  :   FREE_POINTER(filled_input_slots);

	mov	esi, esp
	mov	eax, DWORD PTR _filled_input_slots$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _filled_input_slots$[ebp], 0

; 799  : 
; 800  :   // deallocate structures
; 801  :   if (enc) api->encoder_close(enc);

	cmp	DWORD PTR _enc$[ebp], 0
	je	SHORT $LN40@main
	mov	esi, esp
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@main:

; 802  :   if (opts) cmdline_opts_free(api, opts);

	cmp	DWORD PTR _opts$[ebp], 0
	je	SHORT $LN41@main
	mov	eax, DWORD PTR _opts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	push	ecx
	call	_cmdline_opts_free
	add	esp, 8
$LN41@main:

; 803  : 
; 804  :   // close files
; 805  :   if (input)  fclose(input);

	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN42@main
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN42@main:

; 806  :   if (output) fclose(output);

	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN43@main
	mov	esi, esp
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@main:

; 807  :   if (recout) fclose(recout);

	cmp	DWORD PTR _recout$[ebp], 0
	je	SHORT $LN44@main
	mov	esi, esp
	mov	eax, DWORD PTR _recout$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN44@main:

; 808  : 
; 809  :   CHECKPOINTS_FINALIZE();
; 810  : 
; 811  :   return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN1@main:

; 812  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN74@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1648				; 00000670H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN74@main:
	DD	14					; 0000000eH
	DD	$LN73@main
$LN73@main:
	DD	-112					; ffffff90H
	DD	8
	DD	$LN59@main
	DD	-140					; ffffff74H
	DD	8
	DD	$LN60@main
	DD	-156					; ffffff64H
	DD	8
	DD	$LN61@main
	DD	-292					; fffffedcH
	DD	128					; 00000080H
	DD	$LN62@main
	DD	-304					; fffffed0H
	DD	4
	DD	$LN63@main
	DD	-412					; fffffe64H
	DD	24					; 00000018H
	DD	$LN64@main
	DD	-504					; fffffe08H
	DD	4
	DD	$LN65@main
	DD	-548					; fffffddcH
	DD	36					; 00000024H
	DD	$LN66@main
	DD	-572					; fffffdc4H
	DD	4
	DD	$LN67@main
	DD	-584					; fffffdb8H
	DD	4
	DD	$LN68@main
	DD	-596					; fffffdacH
	DD	4
	DD	$LN69@main
	DD	-608					; fffffda0H
	DD	4
	DD	$LN70@main
	DD	-768					; fffffd00H
	DD	152					; 00000098H
	DD	$LN71@main
	DD	-844					; fffffcb4H
	DD	24					; 00000018H
	DD	$LN72@main
$LN72@main:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN71@main:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN70@main:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN69@main:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN68@main:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN67@main:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN66@main:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN65@main:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN64@main:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN63@main:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN62@main:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN61@main:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN60@main:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN59@main:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _read_header
_TEXT	SEGMENT
tv129 = -500						; size = 4
_j$1 = -300						; size = 4
_i$2 = -288						; size = 4
_end_of_header$ = -273					; size = 1
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_config$ = 12						; size = 4
_read_header PROC					; COMDAT

; 335  : static bool read_header(FILE* input, kvz_config* config) {

	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 336  :   char buffer[256];
; 337  :   bool end_of_header = false;

	mov	BYTE PTR _end_of_header$[ebp], 0
$LN2@read_heade:

; 338  : 
; 339  :   while(!end_of_header) {

	movzx	eax, BYTE PTR _end_of_header$[ebp]
	test	eax, eax
	jne	$LN3@read_heade

; 340  :     for (int i = 0; i < 256; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@read_heade
$LN4@read_heade:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@read_heade:
	cmp	DWORD PTR _i$2[ebp], 256		; 00000100H
	jge	$LN5@read_heade

; 341  :       buffer[i] = getc(input);

	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	DWORD PTR __imp__getc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR _buffer$[ebp+ecx], al

; 342  :       // Start code of frame data
; 343  :       if (buffer[i] == 0x0A) {

	mov	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR _buffer$[ebp+eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN18@read_heade

; 344  :         for (; i > 0; i--) {

	jmp	SHORT $LN9@read_heade
$LN7@read_heade:
	mov	eax, DWORD PTR _i$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@read_heade:
	cmp	DWORD PTR _i$2[ebp], 0
	jle	SHORT $LN8@read_heade

; 345  :           ungetc(buffer[i], input);

	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	push	edx
	call	DWORD PTR __imp__ungetc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 346  :         }

	jmp	SHORT $LN7@read_heade
$LN8@read_heade:

; 347  :         end_of_header = true;

	mov	BYTE PTR _end_of_header$[ebp], 1

; 348  :         break;

	jmp	$LN5@read_heade
$LN18@read_heade:

; 349  :       }
; 350  :       // Header sections are separated by space (ascii 0x20)
; 351  :       if (buffer[i] == 0x20) {

	mov	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR _buffer$[ebp+eax]
	cmp	ecx, 32					; 00000020H
	jne	$LN19@read_heade

; 352  :         // Header start sequence does not hold any addition information, so it can be skipped
; 353  :         if ((i == 9) && strncmp(buffer, "YUV4MPEG2 ", 10) == 0) {

	cmp	DWORD PTR _i$2[ebp], 9
	jne	SHORT $LN20@read_heade
	mov	esi, esp
	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@MFJADLGK@YUV4MPEG2?5@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN20@read_heade

; 354  :           break;

	jmp	$LN5@read_heade
$LN20@read_heade:

; 355  :         }
; 356  :         switch (buffer[0]) {

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR tv129[ebp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 23		; 00000017H
	ja	$LN31@read_heade
	mov	ecx, DWORD PTR tv129[ebp]
	movzx	edx, BYTE PTR $LN35@read_heade[ecx]
	jmp	DWORD PTR $LN36@read_heade[edx*4]
$LN21@read_heade:

; 357  :         // Width
; 358  :         case 'W':
; 359  :           // Exclude starting 'W' and the space at the end with substr
; 360  :           config->width = atoi(&buffer[1]);

	mov	eax, 1
	shl	eax, 0
	lea	ecx, DWORD PTR _buffer$[ebp+eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _config$[ebp]
	mov	DWORD PTR [edx+12], eax

; 361  :           break;

	jmp	$LN10@read_heade
$LN22@read_heade:

; 362  :         // Height
; 363  :         case 'H':
; 364  :           // Exclude starting 'H' and the space at the end with substr
; 365  :           config->height = atoi(&buffer[1]);

	mov	eax, 1
	shl	eax, 0
	lea	ecx, DWORD PTR _buffer$[ebp+eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _config$[ebp]
	mov	DWORD PTR [edx+16], eax

; 366  :           break;

	jmp	$LN10@read_heade
$LN23@read_heade:

; 367  :         // Framerate (or start code of frame)
; 368  :         case 'F':
; 369  :           // The header has no ending signature other than the start code of a frame
; 370  :           if (i > 5 && strncmp(buffer, "FRAME", 5) == 0) {

	cmp	DWORD PTR _i$2[ebp], 5
	jle	SHORT $LN24@read_heade
	mov	esi, esp
	push	5
	push	OFFSET ??_C@_05DALLBAN@FRAME@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN24@read_heade

; 371  :             for (; i > 0; i--) {

	jmp	SHORT $LN14@read_heade
$LN12@read_heade:
	mov	eax, DWORD PTR _i$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN14@read_heade:
	cmp	DWORD PTR _i$2[ebp], 0
	jle	SHORT $LN13@read_heade

; 372  :               ungetc(buffer[i], input);

	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	push	edx
	call	DWORD PTR __imp__ungetc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 373  :             }

	jmp	SHORT $LN12@read_heade
$LN13@read_heade:

; 374  :             end_of_header = true;

	mov	BYTE PTR _end_of_header$[ebp], 1

; 375  :             break;

	jmp	$LN10@read_heade

; 376  :           }

	jmp	$LN27@read_heade
$LN24@read_heade:

; 377  :           else {
; 378  :             config->framerate_num = atoi(&buffer[1]);

	mov	eax, 1
	shl	eax, 0
	lea	ecx, DWORD PTR _buffer$[ebp+eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _config$[ebp]
	mov	DWORD PTR [edx+32], eax

; 379  :             for (int j = 0; j < i; j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN17@read_heade
$LN15@read_heade:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN17@read_heade:
	mov	eax, DWORD PTR _j$1[ebp]
	cmp	eax, DWORD PTR _i$2[ebp]
	jge	SHORT $LN16@read_heade

; 380  :               if (buffer[j] == ':') {

	mov	eax, DWORD PTR _j$1[ebp]
	movsx	ecx, BYTE PTR _buffer$[ebp+eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN26@read_heade

; 381  :                 config->framerate_denom = atoi(&buffer[j + 1]);

	mov	eax, DWORD PTR _j$1[ebp]
	lea	ecx, DWORD PTR _buffer$[ebp+eax+1]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _config$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN26@read_heade:

; 382  :               }
; 383  :             }

	jmp	SHORT $LN15@read_heade
$LN16@read_heade:

; 384  :             break;

	jmp	SHORT $LN10@read_heade
$LN27@read_heade:

; 385  :           }
; 386  :         // Interlacing
; 387  :         case 'I':
; 388  :           break;

	jmp	SHORT $LN10@read_heade
$LN28@read_heade:

; 389  :         // Aspect ratio
; 390  :         case 'A':
; 391  :           break;

	jmp	SHORT $LN10@read_heade
$LN29@read_heade:

; 392  :         // Colour space
; 393  :         case 'C':
; 394  :           break;

	jmp	SHORT $LN10@read_heade
$LN30@read_heade:

; 395  :         // Comment
; 396  :         case 'X':
; 397  :           break;

	jmp	SHORT $LN10@read_heade
$LN31@read_heade:

; 398  :         default:
; 399  :           fprintf(stderr, "Unknown header argument starting with '%i'\n", buffer[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _buffer$[ebp+ecx]
	push	edx
	push	OFFSET ??_C@_0CM@IHKMIGBF@Unknown?5header?5argument?5startin@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN10@read_heade:

; 400  :           break;
; 401  :         }
; 402  :         break;

	jmp	SHORT $LN5@read_heade
$LN19@read_heade:

; 403  :       }
; 404  :     }

	jmp	$LN4@read_heade
$LN5@read_heade:

; 405  :   }

	jmp	$LN2@read_heade
$LN3@read_heade:

; 406  : 
; 407  :   if (config->width == 0 || config->height == 0 || config->framerate_num == 0 || config->framerate_denom == 0) {

	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN33@read_heade
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN33@read_heade
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN33@read_heade
	mov	eax, DWORD PTR _config$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN32@read_heade
$LN33@read_heade:

; 408  :     fprintf(stderr, "Failed to read necessary info from y4m headers. Width, height and frame rate must be present in the headers.\n");

	push	OFFSET ??_C@_0GO@JNDNEJHH@Failed?5to?5read?5necessary?5info?5f@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 409  :     return false;

	xor	al, al
	jmp	SHORT $LN1@read_heade
$LN32@read_heade:

; 410  :   }
; 411  : 
; 412  :   return true;

	mov	al, 1
$LN1@read_heade:

; 413  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@read_heade
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN39@read_heade:
	DD	1
	DD	$LN38@read_heade
$LN38@read_heade:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN37@read_heade
$LN37@read_heade:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN36@read_heade:
	DD	$LN28@read_heade
	DD	$LN29@read_heade
	DD	$LN23@read_heade
	DD	$LN22@read_heade
	DD	$LN27@read_heade
	DD	$LN21@read_heade
	DD	$LN30@read_heade
	DD	$LN31@read_heade
$LN35@read_heade:
	DB	0
	DB	7
	DB	1
	DB	7
	DB	7
	DB	2
	DB	7
	DB	3
	DB	4
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	6
_read_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _calc_avg_qp
_TEXT	SEGMENT
tv77 = -204						; size = 8
tv72 = -196						; size = 4
_qp_sum$ = 8						; size = 8
_frames_done$ = 16					; size = 4
_calc_avg_qp PROC					; COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 326  :   return (double)qp_sum / (double)frames_done;

	mov	edx, DWORD PTR _qp_sum$[ebp+4]
	mov	ecx, DWORD PTR _qp_sum$[ebp]
	call	__ultod3
	mov	eax, DWORD PTR _frames_done$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR tv72[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]

; 327  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_calc_avg_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _output_recon_pictures
_TEXT	SEGMENT
tv139 = -236						; size = 4
tv138 = -232						; size = 4
_pic$1 = -32						; size = 4
_i$2 = -20						; size = 4
_picture_written$ = -5					; size = 1
_api$ = 8						; size = 4
_recout$ = 12						; size = 4
_buffer$ = 16						; size = 4
_buffer_size$ = 20					; size = 4
_next_pts$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_output_recon_pictures PROC				; COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@output_rec:

; 298  :   bool picture_written;
; 299  :   do {
; 300  :     picture_written = false;

	mov	BYTE PTR _picture_written$[ebp], 0

; 301  :     for (int i = 0; i < *buffer_size; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@output_rec
$LN5@output_rec:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@output_rec:
	mov	eax, DWORD PTR _buffer_size$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN2@output_rec

; 302  : 
; 303  :       kvz_picture *pic = buffer[i];

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pic$1[ebp], edx

; 304  :       if (pic->pts == *next_pts) {

	mov	eax, DWORD PTR _pic$1[ebp]
	mov	ecx, DWORD PTR _next_pts$[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	DWORD PTR tv139[ebp], ecx
	mov	edx, DWORD PTR tv138[ebp]
	mov	eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR [edx+56]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN11@output_rec
	mov	edx, DWORD PTR tv138[ebp]
	mov	eax, DWORD PTR tv139[ebp]
	mov	ecx, DWORD PTR [edx+60]
	cmp	ecx, DWORD PTR [eax+4]
	jne	$LN11@output_rec

; 305  :         // Output the picture and remove it.
; 306  :         if (!yuv_io_write(recout, pic, width, height)) {

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$1[ebp]
	push	edx
	mov	eax, DWORD PTR _recout$[ebp]
	push	eax
	call	_yuv_io_write
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@output_rec

; 307  :           fprintf(stderr, "Failed to write reconstructed picture!\n");

	push	OFFSET ??_C@_0CI@BLHFEFHL@Failed?5to?5write?5reconstructed?5p@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN12@output_rec:

; 308  :         }
; 309  :         api->picture_free(pic);

	mov	esi, esp
	mov	eax, DWORD PTR _pic$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _api$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 310  :         picture_written = true;

	mov	BYTE PTR _picture_written$[ebp], 1

; 311  :         (*next_pts)++;

	mov	eax, DWORD PTR _next_pts$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	adc	edx, 0
	mov	eax, DWORD PTR _next_pts$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 312  : 
; 313  :         // Move rest of the pictures one position backward.
; 314  :         for (i++; i < *buffer_size; i++) {

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN10@output_rec
$LN8@output_rec:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@output_rec:
	mov	eax, DWORD PTR _buffer_size$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN9@output_rec

; 315  :           buffer[i - 1] = buffer[i];

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4-4], edx

; 316  :           buffer[i] = NULL;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 317  :         }

	jmp	SHORT $LN8@output_rec
$LN9@output_rec:

; 318  :         (*buffer_size)--;

	mov	eax, DWORD PTR _buffer_size$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _buffer_size$[ebp]
	mov	DWORD PTR [edx], ecx
$LN11@output_rec:

; 319  :       }
; 320  :     }

	jmp	$LN5@output_rec
$LN2@output_rec:

; 321  :   } while (picture_written);

	movzx	eax, BYTE PTR _picture_written$[ebp]
	test	eax, eax
	jne	$LN4@output_rec

; 322  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_output_recon_pictures ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _input_read_thread
_TEXT	SEGMENT
tv219 = -292						; size = 4
tv165 = -292						; size = 4
tv70 = -292						; size = 4
_read_success$1 = -89					; size = 1
_read_success$2 = -77					; size = 1
_csp$3 = -68						; size = 4
_input_empty$4 = -53					; size = 1
_frames_read$ = -44					; size = 4
_retval$ = -32						; size = 4
_frame_in$ = -20					; size = 4
_args$ = -8						; size = 4
_in_args$ = 8						; size = 4
_input_read_thread PROC					; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 172  : 
; 173  :   // Reading a frame works as follows:
; 174  :   // - read full frame
; 175  :   // if progressive: set read frame as output
; 176  :   // if interlaced:
; 177  :   // - allocate two fields and fill them according to field order
; 178  :   // - deallocate the initial full frame
; 179  : 
; 180  :   input_handler_args* args = (input_handler_args*)in_args;

	mov	eax, DWORD PTR _in_args$[ebp]
	mov	DWORD PTR _args$[ebp], eax

; 181  :   kvz_picture *frame_in = NULL;

	mov	DWORD PTR _frame_in$[ebp], 0

; 182  :   int retval = RETVAL_RUNNING;

	mov	DWORD PTR _retval$[ebp], 0

; 183  :   int frames_read = 0;

	mov	DWORD PTR _frames_read$[ebp], 0
$LN4@input_read:

; 184  : 
; 185  :   for (;;) {
; 186  :     // Each iteration of this loop puts either a single frame or a field into
; 187  :     // args->img_in for main thread to process.
; 188  : 
; 189  :     bool input_empty = !(args->opts->frames == 0 // number of frames to read is unknown

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN17@input_read
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _frames_read$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jl	SHORT $LN17@input_read
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN18@input_read
$LN17@input_read:
	mov	DWORD PTR tv70[ebp], 0
$LN18@input_read:
	mov	dl, BYTE PTR tv70[ebp]
	mov	BYTE PTR _input_empty$4[ebp], dl

; 190  :                          || frames_read < args->opts->frames); // not all frames have been read
; 191  :     if (feof(args->input) || input_empty) {

	mov	esi, esp
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@input_read
	movzx	eax, BYTE PTR _input_empty$4[ebp]
	test	eax, eax
	je	SHORT $LN5@input_read
$LN6@input_read:

; 192  :       retval = RETVAL_EOF;

	mov	DWORD PTR _retval$[ebp], 2

; 193  :       goto done;

	jmp	$done$23
$LN5@input_read:

; 194  :     }
; 195  : 
; 196  :     enum kvz_chroma_format csp = KVZ_FORMAT2CSP(args->opts->config->input_format);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+2376]
	movsx	ecx, BYTE PTR ??_C@_04KJMIOICK@?$AA?$AB?$AC?$AD@[eax]
	mov	DWORD PTR _csp$3[ebp], ecx

; 197  :     frame_in = args->api->picture_alloc_csp(csp,

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _args$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	add	ecx, DWORD PTR [edx+16]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _args$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	add	eax, DWORD PTR [ecx+12]
	push	eax
	mov	ecx, DWORD PTR _csp$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _frame_in$[ebp], eax

; 198  :                                             args->opts->config->width  + args->padding_x,
; 199  :                                             args->opts->config->height + args->padding_y);
; 200  : 
; 201  :     if (!frame_in) {

	cmp	DWORD PTR _frame_in$[ebp], 0
	jne	SHORT $LN7@input_read

; 202  :       fprintf(stderr, "Failed to allocate image.\n");

	push	OFFSET ??_C@_0BL@BCDOINDE@Failed?5to?5allocate?5image?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 203  :       retval = RETVAL_FAILURE;

	mov	DWORD PTR _retval$[ebp], 1

; 204  :       goto done;

	jmp	$done$23
$LN7@input_read:

; 205  :     }
; 206  : 
; 207  :     // Set PTS to make sure we pass it on correctly.
; 208  :     frame_in->pts = frames_read;

	mov	eax, DWORD PTR _frames_read$[ebp]
	cdq
	mov	ecx, DWORD PTR _frame_in$[ebp]
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], edx

; 209  : 
; 210  :     bool read_success = yuv_io_read(args->input,

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+2456]
	push	eax
	mov	ecx, DWORD PTR _frame_in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+2532]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+2380]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_yuv_io_read
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN19@input_read
	mov	DWORD PTR tv165[ebp], 0
	jmp	SHORT $LN20@input_read
$LN19@input_read:
	mov	DWORD PTR tv165[ebp], 1
$LN20@input_read:
	mov	al, BYTE PTR tv165[ebp]
	mov	BYTE PTR _read_success$2[ebp], al

; 211  :                                     args->opts->config->width,
; 212  :                                     args->opts->config->height,
; 213  :                                     args->encoder->cfg.input_bitdepth,
; 214  :                                     args->encoder->bitdepth,
; 215  :                                     frame_in, args->opts->config->file_format);
; 216  :     if (!read_success) {

	movzx	eax, BYTE PTR _read_success$2[ebp]
	test	eax, eax
	jne	$LN8@input_read

; 217  :       // reading failed
; 218  :       if (feof(args->input)) {

	mov	esi, esp
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN9@input_read

; 219  :         // When looping input, re-open the file and re-read data.
; 220  :         if (args->opts->loop_input && args->input != stdin) {

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movzx	edx, BYTE PTR [ecx+26]
	test	edx, edx
	je	$LN11@input_read
	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	je	$LN11@input_read

; 221  :           fclose(args->input);

	mov	esi, esp
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  :           args->input = fopen(args->opts->input, "rb");

	mov	esi, esp
	push	OFFSET ??_C@_02JDPG@rb@
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _args$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 223  :           if (args->input == NULL)

	mov	eax, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN13@input_read

; 224  :           {
; 225  :             fprintf(stderr, "Could not re-open input file, shutting down!\n");

	push	OFFSET ??_C@_0CO@JHOPPFEH@Could?5not?5re?9open?5input?5file?0?5s@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 226  :             retval = RETVAL_FAILURE;

	mov	DWORD PTR _retval$[ebp], 1

; 227  :             goto done;

	jmp	$done$23
$LN13@input_read:

; 228  :           }
; 229  :           bool read_success = yuv_io_read(args->input,

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+2456]
	push	eax
	mov	ecx, DWORD PTR _frame_in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+2532]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+2380]
	push	ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_yuv_io_read
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN21@input_read
	mov	DWORD PTR tv219[ebp], 0
	jmp	SHORT $LN22@input_read
$LN21@input_read:
	mov	DWORD PTR tv219[ebp], 1
$LN22@input_read:
	mov	al, BYTE PTR tv219[ebp]
	mov	BYTE PTR _read_success$1[ebp], al

; 230  :                                           args->opts->config->width,
; 231  :                                           args->opts->config->height,
; 232  :                                           args->encoder->cfg.input_bitdepth,
; 233  :                                           args->encoder->bitdepth,
; 234  :                                           frame_in, args->opts->config->file_format);
; 235  :           if (!read_success) {

	movzx	eax, BYTE PTR _read_success$1[ebp]
	test	eax, eax
	jne	SHORT $LN14@input_read

; 236  :             fprintf(stderr, "Could not re-open input file, shutting down!\n");

	push	OFFSET ??_C@_0CO@JHOPPFEH@Could?5not?5re?9open?5input?5file?0?5s@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 237  :             retval = RETVAL_FAILURE;

	mov	DWORD PTR _retval$[ebp], 1

; 238  :             goto done;

	jmp	$done$23
$LN14@input_read:

; 239  :           }
; 240  :         } else {

	jmp	SHORT $LN12@input_read
$LN11@input_read:

; 241  :           retval = RETVAL_EOF;

	mov	DWORD PTR _retval$[ebp], 2

; 242  :           goto done;

	jmp	$done$23
$LN12@input_read:

; 243  :         }
; 244  :       } else {

	jmp	SHORT $LN8@input_read
$LN9@input_read:

; 245  :         fprintf(stderr, "Failed to read a frame %d\n", frames_read);

	mov	eax, DWORD PTR _frames_read$[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@DLFAEBD@Failed?5to?5read?5a?5frame?5?$CFd?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 246  :         retval = RETVAL_FAILURE;

	mov	DWORD PTR _retval$[ebp], 1

; 247  :         goto done;

	jmp	SHORT $done$23
$LN8@input_read:

; 248  :       }
; 249  :     }
; 250  : 
; 251  :     frames_read++;

	mov	eax, DWORD PTR _frames_read$[ebp]
	add	eax, 1
	mov	DWORD PTR _frames_read$[ebp], eax

; 252  : 
; 253  :     if (args->encoder->cfg.source_scan_type != 0) {

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+88]
	test	edx, edx
	je	SHORT $LN15@input_read

; 254  :       // Set source scan type for frame, so that it will be turned into fields.
; 255  :       frame_in->interlacing = args->encoder->cfg.source_scan_type;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+88]
	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	DWORD PTR [eax+72], edx
$LN15@input_read:

; 256  :     }
; 257  : 
; 258  :     // Wait until main thread is ready to receive the next frame.
; 259  :     kvz_sem_wait(args->available_input_slots);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_sem_wait
	add	esp, 4

; 260  :     args->img_in = frame_in;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _frame_in$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 261  :     args->retval = retval;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _retval$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 262  :     // Unlock main_thread_mutex to notify main thread that the new img_in
; 263  :     // and retval have been placed to args.
; 264  :     kvz_sem_post(args->filled_input_slots);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_kvz_sem_post
	add	esp, 4

; 265  : 
; 266  :     frame_in = NULL;

	mov	DWORD PTR _frame_in$[ebp], 0

; 267  :   }

	jmp	$LN4@input_read
$done$23:

; 268  : 
; 269  : done:
; 270  :   // Wait until main thread is ready to receive the next frame.
; 271  :   kvz_sem_wait(args->available_input_slots);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_sem_wait
	add	esp, 4

; 272  :   args->img_in = NULL;

	mov	eax, DWORD PTR _args$[ebp]
	mov	DWORD PTR [eax+28], 0

; 273  :   args->retval = retval;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _retval$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 274  :   // Unlock main_thread_mutex to notify main thread that the new img_in
; 275  :   // and retval have been placed to args.
; 276  :   kvz_sem_post(args->filled_input_slots);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_kvz_sem_post
	add	esp, 4

; 277  : 
; 278  :   // Do some cleaning up.
; 279  :   args->api->picture_free(frame_in);

	mov	esi, esp
	mov	eax, DWORD PTR _frame_in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 280  : 
; 281  :   // This thread exit call causes problems with media auto-build suite
; 282  :   // The environment compiles with MINGW using a different pthreads lib
; 283  :   #if !defined(__MINGW32__) && !defined(__MINGW64__)
; 284  :   pthread_exit(NULL);

	push	0
	call	_pthread_exit
	add	esp, 4

; 285  :   #endif
; 286  :   return NULL;

	xor	eax, eax

; 287  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_input_read_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _compute_psnr
_TEXT	SEGMENT
tv217 = -308						; size = 8
tv85 = -304						; size = 4
_error$1 = -104						; size = 4
_i$2 = -92						; size = 4
_num_pixels$3 = -80					; size = 4
_c$4 = -68						; size = 4
_sse$ = -56						; size = 24
_colors$ = -24						; size = 4
_pixels$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_rec$ = 12						; size = 4
_psnr$ = 16						; size = 4
_compute_psnr PROC					; COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 117  :   assert(src->width  == rec->width);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+32]
	je	SHORT $LN12@compute_ps
	mov	eax, DWORD PTR ?__LINE__Var@?0??compute_psnr@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@EAEJPBFD@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@compute_ps:

; 118  :   assert(src->height == rec->height);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	je	SHORT $LN13@compute_ps
	mov	eax, DWORD PTR ?__LINE__Var@?0??compute_psnr@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@PKNFFNJG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DG@KLILNEBB@?$AAs?$AAr?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@compute_ps:

; 119  : 
; 120  :   int32_t pixels = src->width * src->height;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [eax+32]
	imul	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pixels$[ebp], edx

; 121  :   int colors = rec->chroma_format == KVZ_CSP_400 ? 1 : 3;

	mov	eax, DWORD PTR _rec$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN14@compute_ps
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN15@compute_ps
$LN14@compute_ps:
	mov	DWORD PTR tv85[ebp], 3
$LN15@compute_ps:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _colors$[ebp], ecx

; 122  :   double sse[3] = { 0.0 };

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sse$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _sse$[ebp+8], eax
	mov	DWORD PTR _sse$[ebp+12], eax
	mov	DWORD PTR _sse$[ebp+16], eax
	mov	DWORD PTR _sse$[ebp+20], eax

; 123  : 
; 124  :   for (int32_t c = 0; c < colors; ++c) {

	mov	DWORD PTR _c$4[ebp], 0
	jmp	SHORT $LN4@compute_ps
$LN2@compute_ps:
	mov	eax, DWORD PTR _c$4[ebp]
	add	eax, 1
	mov	DWORD PTR _c$4[ebp], eax
$LN4@compute_ps:
	mov	eax, DWORD PTR _c$4[ebp]
	cmp	eax, DWORD PTR _colors$[ebp]
	jge	$LN3@compute_ps

; 125  :     int32_t num_pixels = pixels;

	mov	eax, DWORD PTR _pixels$[ebp]
	mov	DWORD PTR _num_pixels$3[ebp], eax

; 126  :     if (c != COLOR_Y) {

	cmp	DWORD PTR _c$4[ebp], 0
	je	SHORT $LN8@compute_ps

; 127  :       num_pixels >>= 2;

	mov	eax, DWORD PTR _num_pixels$3[ebp]
	sar	eax, 2
	mov	DWORD PTR _num_pixels$3[ebp], eax
$LN8@compute_ps:

; 128  :     }
; 129  :     for (int32_t i = 0; i < num_pixels; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@compute_ps
$LN5@compute_ps:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@compute_ps:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _num_pixels$3[ebp]
	jge	SHORT $LN6@compute_ps

; 130  :       const int32_t error = src->data[c][i] - rec->data[c][i];

	mov	eax, DWORD PTR _c$4[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, DWORD PTR _c$4[ebp]
	mov	eax, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+20]
	mov	eax, DWORD PTR _i$2[ebp]
	movzx	edx, BYTE PTR [edx+eax]
	sub	ecx, edx
	mov	DWORD PTR _error$1[ebp], ecx

; 131  :       sse[c] += error * error;

	mov	eax, DWORD PTR _error$1[ebp]
	imul	eax, DWORD PTR _error$1[ebp]
	cvtsi2sd xmm0, eax
	mov	ecx, DWORD PTR _c$4[ebp]
	addsd	xmm0, QWORD PTR _sse$[ebp+ecx*8]
	mov	edx, DWORD PTR _c$4[ebp]
	movsd	QWORD PTR _sse$[ebp+edx*8], xmm0

; 132  :     }

	jmp	SHORT $LN5@compute_ps
$LN6@compute_ps:

; 133  : 
; 134  :     // Avoid division by zero
; 135  :     if (sse[c] == 0.0) {

	mov	eax, DWORD PTR _c$4[ebp]
	movsd	xmm0, QWORD PTR _sse$[ebp+eax*8]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@compute_ps

; 136  :       psnr[c] = MAX_PSNR;

	mov	eax, DWORD PTR _c$4[ebp]
	mov	ecx, DWORD PTR _psnr$[ebp]
	movsd	xmm0, QWORD PTR _MAX_PSNR
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 137  :     } else {

	jmp	SHORT $LN10@compute_ps
$LN9@compute_ps:

; 138  :       psnr[c] = 10.0 * log10(num_pixels * MAX_SQUARED_ERROR / sse[c]);

	cvtsi2sd xmm0, DWORD PTR _num_pixels$3[ebp]
	mulsd	xmm0, QWORD PTR _MAX_SQUARED_ERROR
	mov	eax, DWORD PTR _c$4[ebp]
	divsd	xmm0, QWORD PTR _sse$[ebp+eax*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log10
	add	esp, 8
	fstp	QWORD PTR tv217[ebp]
	movsd	xmm0, QWORD PTR tv217[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	mov	ecx, DWORD PTR _c$4[ebp]
	mov	edx, DWORD PTR _psnr$[ebp]
	movsd	QWORD PTR [edx+ecx*8], xmm0
$LN10@compute_ps:

; 139  :     }
; 140  :   }

	jmp	$LN2@compute_ps
$LN3@compute_ps:

; 141  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@compute_ps
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@compute_ps:
	DD	1
	DD	$LN17@compute_ps
$LN17@compute_ps:
	DD	-56					; ffffffc8H
	DD	24					; 00000018H
	DD	$LN16@compute_ps
$LN16@compute_ps:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
_compute_psnr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _get_padding
_TEXT	SEGMENT
_width_or_height$ = 8					; size = 4
_get_padding PROC					; COMDAT

; 92   : static unsigned get_padding(unsigned width_or_height){

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   :   if (width_or_height % CU_MIN_SIZE_PIXELS){

	mov	eax, DWORD PTR _width_or_height$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	test	edx, edx
	je	SHORT $LN2@get_paddin

; 94   :     return CU_MIN_SIZE_PIXELS - (width_or_height % CU_MIN_SIZE_PIXELS);

	mov	eax, DWORD PTR _width_or_height$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	eax, 8
	sub	eax, edx
	jmp	SHORT $LN1@get_paddin

; 95   :   }else{

	jmp	SHORT $LN1@get_paddin
$LN2@get_paddin:

; 96   :     return 0;

	xor	eax, eax
$LN1@get_paddin:

; 97   :   }
; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_padding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _open_output_file
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_open_output_file PROC					; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 88   :   if (!strcmp(filename, "-")) return stdout;

	push	OFFSET ??_C@_01JOAMLHOP@?9@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@open_outpu
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN1@open_outpu
$LN2@open_outpu:

; 89   :   return fopen(filename, "wb");

	mov	esi, esp
	push	OFFSET ??_C@_02GMLFBBN@wb@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@open_outpu:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_open_output_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encmain.c
;	COMDAT _open_input_file
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_open_input_file PROC					; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AEB83EC0_encmain@c
	call	@__CheckForDebuggerJustMyCode@4

; 74   :   if (!strcmp(filename, "-")) return stdin;

	push	OFFSET ??_C@_01JOAMLHOP@?9@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@open_input
	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN1@open_input
$LN2@open_input:

; 75   :   return fopen(filename, "rb");

	mov	esi, esp
	push	OFFSET ??_C@_02JDPG@rb@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@open_input:

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_open_input_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threads.h
;	COMDAT _kvz_sem_destroy
_TEXT	SEGMENT
_sem$ = 8						; size = 4
_kvz_sem_destroy PROC					; COMDAT

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8FD04514_threads@h
	call	@__CheckForDebuggerJustMyCode@4

; 142  :     sem_destroy(sem);

	mov	eax, DWORD PTR _sem$[ebp]
	push	eax
	call	_sem_destroy
	add	esp, 4

; 143  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sem_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threads.h
;	COMDAT _kvz_sem_post
_TEXT	SEGMENT
_sem$ = 8						; size = 4
_kvz_sem_post PROC					; COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8FD04514_threads@h
	call	@__CheckForDebuggerJustMyCode@4

; 137  :     sem_post(sem);

	mov	eax, DWORD PTR _sem$[ebp]
	push	eax
	call	_sem_post
	add	esp, 4

; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sem_post ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threads.h
;	COMDAT _kvz_sem_wait
_TEXT	SEGMENT
_sem$ = 8						; size = 4
_kvz_sem_wait PROC					; COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8FD04514_threads@h
	call	@__CheckForDebuggerJustMyCode@4

; 132  :     sem_wait(sem);

	mov	eax, DWORD PTR _sem$[ebp]
	push	eax
	call	_sem_wait
	add	esp, 4

; 133  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sem_wait ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threads.h
;	COMDAT _kvz_sem_init
_TEXT	SEGMENT
_pshared$ = -8						; size = 4
_sem$ = 8						; size = 4
_value$ = 12						; size = 4
_kvz_sem_init PROC					; COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8FD04514_threads@h
	call	@__CheckForDebuggerJustMyCode@4

; 123  :     assert(value >= 0);

	cmp	DWORD PTR _value$[ebp], 0
	jge	SHORT $LN3@kvz_sem_in
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_sem_init@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GM@MPFPOIAC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BG@FFFFMINI@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_sem_in:

; 124  :     // Pthreads-w32 does not support process-shared semaphores, so pshared
; 125  :     // must always be zero.
; 126  :     int pshared = 0;

	mov	DWORD PTR _pshared$[ebp], 0

; 127  :     sem_init(sem, pshared, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pshared$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sem$[ebp]
	push	edx
	call	_sem_init
	add	esp, 12					; 0000000cH

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sem_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
