; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__8DC84CAD_corecrt_wtime@h DB 01H
__CF01F9AA_time@h DB 01H
__63FF1D47_encmain@c DB 01H
msvcjmc	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	task_test
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_09ODDHDIAH@task_test@			; `string'
PUBLIC	??_C@_0CE@HPLHDE@input?5number?5is?5?$CFd?5in?5fuction?5?$DM@ ; `string'
PUBLIC	??_C@_0CJ@FBFDIKAB@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@ ; `string'
PUBLIC	??_C@_0CD@COALBNAK@Could?5not?5initialize?5threadqueu@ ; `string'
PUBLIC	??_C@_0CH@NJBIIOEN@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@ ; `string'
EXTRN	__imp_malloc:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	kvz_threadqueue_init:PROC
EXTRN	kvz_threadqueue_job_create:PROC
EXTRN	kvz_threadqueue_submit:PROC
EXTRN	kvz_threadqueue_waitfor:PROC
EXTRN	kvz_threadqueue_free:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+157
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$task_test DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$task_test
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN13
	DD	imagerel $LN13+512
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CH@NJBIIOEN@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@
CONST	SEGMENT
??_C@_0CH@NJBIIOEN@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@ DB '@'
	DB	'@@@@@@@@@@@@@@ theradqueue test end!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@COALBNAK@Could?5not?5initialize?5threadqueu@
CONST	SEGMENT
??_C@_0CD@COALBNAK@Could?5not?5initialize?5threadqueu@ DB 'Could not init'
	DB	'ialize threadqueue.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FBFDIKAB@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@
CONST	SEGMENT
??_C@_0CJ@FBFDIKAB@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@ DB '@'
	DB	'@@@@@@@@@@@@@@ theradqueue test start!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HPLHDE@input?5number?5is?5?$CFd?5in?5fuction?5?$DM@
CONST	SEGMENT
??_C@_0CE@HPLHDE@input?5number?5is?5?$CFd?5in?5fuction?5?$DM@ DB 'input n'
	DB	'umber is %d in fuction <%s>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODDHDIAH@task_test@
CONST	SEGMENT
??_C@_09ODDHDIAH@task_test@ DB 'task_test', 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025053e19H
	DD	01122317H
	DD	0700b004bH
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0248H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+10
main$rtcVarDesc DD 0d0H
	DD	050H
	DQ	FLAT:main$rtcName$0
	ORG $+48
main$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$task_test DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
fprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
fprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:fprintf$rtcName$0
	ORG $+48
fprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:fprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\encmain.c
;	COMDAT main
_TEXT	SEGMENT
threads_cnt$ = 4
threadqueue$ = 40
num_jobs$ = 68
test_jobs$ = 104
i$4 = 132
input$ = 176
i$5 = 276
i$6 = 308
arg$7 = 344
__$ArrayPad$ = 552
argc$ = 592
argv$ = 600
main	PROC						; COMDAT

; 40   : {

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+632]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__63FF1D47_encmain@c
	call	__CheckForDebuggerJustMyCode

; 41   : 	printf("@@@@@@@@@@@@@@@ theradqueue test start!\n");

	lea	rcx, OFFSET FLAT:??_C@_0CJ@FBFDIKAB@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@
	call	printf

; 42   : 	int threads_cnt = 4;//设置线程个数

	mov	DWORD PTR threads_cnt$[rbp], 4

; 43   : 
; 44   : 	//初始化线程队列
; 45   : 	threadqueue_queue_t* threadqueue = kvz_threadqueue_init(threads_cnt);

	mov	ecx, DWORD PTR threads_cnt$[rbp]
	call	kvz_threadqueue_init
	mov	QWORD PTR threadqueue$[rbp], rax

; 46   : 	if (!threadqueue)

	cmp	QWORD PTR threadqueue$[rbp], 0
	jne	SHORT $LN11@main

; 47   : 	{
; 48   : 		fprintf(stderr, "Could not initialize threadqueue.\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	lea	rdx, OFFSET FLAT:??_C@_0CD@COALBNAK@Could?5not?5initialize?5threadqueu@
	mov	rcx, rax
	call	fprintf

; 49   : 		return -1;

	mov	eax, -1
	jmp	$LN1@main
$LN11@main:

; 50   : 	}
; 51   : 
; 52   : 	int num_jobs = 10;//设置job个数

	mov	DWORD PTR num_jobs$[rbp], 10

; 53   : 	threadqueue_job_t** test_jobs = MALLOC(threadqueue_job_t*, num_jobs);

	movsxd	rax, DWORD PTR num_jobs$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR test_jobs$[rbp], rax

; 54   : 	for (int i = 0; i < num_jobs; ++i) 

	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN4@main:
	mov	eax, DWORD PTR num_jobs$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jge	SHORT $LN3@main

; 55   : 	{
; 56   : 		test_jobs[i] = NULL;

	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR test_jobs$[rbp]
	mov	QWORD PTR [rcx+rax*8], 0

; 57   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 58   : 
; 59   : 	int input[20];
; 60   : 	for (int i = 0;i < 20;i++)

	mov	DWORD PTR i$5[rbp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN7@main:
	cmp	DWORD PTR i$5[rbp], 20
	jge	SHORT $LN6@main

; 61   : 	{
; 62   : 		input[i] = i;

	movsxd	rax, DWORD PTR i$5[rbp]
	mov	ecx, DWORD PTR i$5[rbp]
	mov	DWORD PTR input$[rbp+rax*4], ecx

; 63   : 	}

	jmp	SHORT $LN5@main
$LN6@main:

; 64   : 
; 65   : 	for (int i = 0;i < num_jobs;i++)

	mov	DWORD PTR i$6[rbp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN10@main:
	mov	eax, DWORD PTR num_jobs$[rbp]
	cmp	DWORD PTR i$6[rbp], eax
	jge	SHORT $LN9@main

; 66   : 	{
; 67   : 		int* arg = &input[i];

	movsxd	rax, DWORD PTR i$6[rbp]
	lea	rax, QWORD PTR input$[rbp+rax*4]
	mov	QWORD PTR arg$7[rbp], rax

; 68   : 		test_jobs[i] = kvz_threadqueue_job_create(task_test, (void*)arg);//创建job

	mov	rdx, QWORD PTR arg$7[rbp]
	lea	rcx, OFFSET FLAT:task_test
	call	kvz_threadqueue_job_create
	movsxd	rcx, DWORD PTR i$6[rbp]
	mov	rdx, QWORD PTR test_jobs$[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 69   : 
; 70   : 		//添加job之间的依赖关系
; 71   : 		//if (i > 0) 
; 72   : 		//{
; 73   : 		//	kvz_threadqueue_job_dep_add(test_jobs[i], test_jobs[i - 1]);
; 74   : 		//}	
; 75   : 
; 76   : 		//提交job去执行
; 77   : 		kvz_threadqueue_submit(threadqueue, test_jobs[i]);

	movsxd	rax, DWORD PTR i$6[rbp]
	mov	rcx, QWORD PTR test_jobs$[rbp]
	mov	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR threadqueue$[rbp]
	call	kvz_threadqueue_submit

; 78   : 	}

	jmp	SHORT $LN8@main
$LN9@main:

; 79   : 
; 80   : 	//等待最后一个job执行完成
; 81   : 	kvz_threadqueue_waitfor(threadqueue, test_jobs[num_jobs - 1]);

	mov	eax, DWORD PTR num_jobs$[rbp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR test_jobs$[rbp]
	mov	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR threadqueue$[rbp]
	call	kvz_threadqueue_waitfor

; 82   : 
; 83   : 
; 84   : 	//销毁线程队列，释放资源
; 85   : 	kvz_threadqueue_free(threadqueue);

	mov	rcx, QWORD PTR threadqueue$[rbp]
	call	kvz_threadqueue_free

; 86   : 	threadqueue = NULL;

	mov	QWORD PTR threadqueue$[rbp], 0

; 87   : 
; 88   : 	printf("@@@@@@@@@@@@@@@ theradqueue test end!\n");

	lea	rcx, OFFSET FLAT:??_C@_0CH@NJBIIOEN@?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?$EA?5theradqueue?5tes@
	call	printf

; 89   : 	return 0;

	xor	eax, eax
$LN1@main:

; 90   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+568]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\encmain.c
;	COMDAT task_test
_TEXT	SEGMENT
input$ = 8
arg$ = 256
task_test PROC						; COMDAT

; 25   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__63FF1D47_encmain@c
	call	__CheckForDebuggerJustMyCode

; 26   : 	int* input = (int*)arg;

	mov	rax, QWORD PTR arg$[rbp]
	mov	QWORD PTR input$[rbp], rax

; 27   : 
; 28   : 	printf("input number is %d in fuction <%s>\n", *input, __FUNCTION__);

	lea	r8, OFFSET FLAT:??_C@_09ODDHDIAH@task_test@
	mov	rax, QWORD PTR input$[rbp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:??_C@_0CE@HPLHDE@input?5number?5is?5?$CFd?5in?5fuction?5?$DM@
	call	printf

; 29   : 	return;
; 30   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
task_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Format$ = 288
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 961  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Stream$ = 288
_Format$ = 296
fprintf	PROC						; COMDAT

; 835  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, QWORD PTR _Stream$[rbp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 842  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:fprintf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__1850469A_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
