; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	optarg
PUBLIC	optind
PUBLIC	opterr
PUBLIC	optopt
PUBLIC	optreset
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
_BSS	SEGMENT
optarg	DQ	01H DUP (?)
optopt	DD	01H DUP (?)
optreset DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__3ED25CA6_getopt@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
recargchar DB	'option requires an argument -- %c', 00H
	ORG $+6
recargstring DB	'option requires an argument -- %s', 00H
	ORG $+6
ambig	DB	'ambiguous option -- %.*s', 00H
	ORG $+7
noarg	DB	'option doesn''t take an argument -- %.*s', 00H
illoptchar DB	'illegal option -- %c', 00H
	ORG $+3
illoptstring DB	'illegal option -- %s', 00H
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
optind	DD	01H
opterr	DD	01H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	vfprintf
PUBLIC	fprintf
PUBLIC	getopt_long
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04PFAOODAA@?$CFs?3?5@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BA@DMNGMDNL@POSIXLY_CORRECT@		; `string'
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_getenv:PROC
EXTRN	strchr:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
progname DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vfprintf DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$vfprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getopt_long DD imagerel $LN43
	DD	imagerel $LN43+1511
	DD	imagerel $unwind$getopt_long
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getopt_internal DD imagerel getopt_internal
	DD	imagerel getopt_internal+1674
	DD	imagerel $unwind$getopt_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gcd DD	imagerel gcd
	DD	imagerel gcd+137
	DD	imagerel $unwind$gcd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$permute_args DD imagerel permute_args
	DD	imagerel permute_args+405
	DD	imagerel $unwind$permute_args
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xwarnx DD imagerel xwarnx
	DD	imagerel xwarnx+223
	DD	imagerel $unwind$xwarnx
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BA@DMNGMDNL@POSIXLY_CORRECT@
CONST	SEGMENT
??_C@_0BA@DMNGMDNL@POSIXLY_CORRECT@ DB 'POSIXLY_CORRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFAOODAA@?$CFs?3?5@
CONST	SEGMENT
??_C@_04PFAOODAA@?$CFs?3?5@ DB '%s: ', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
place	DQ	FLAT:??_C@_00CNPNBAHC@@
nonopt_start DD	0ffffffffH
nonopt_end DD	0ffffffffH
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xwarnx DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
xwarnx$rtcName$0 DB 061H
	DB	070H
	DB	00H
	ORG $+13
xwarnx$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:xwarnx$rtcName$0
	ORG $+48
xwarnx$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:xwarnx$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$permute_args DD 025053601H
	DD	011b2320H
	DD	070140041H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gcd DD	025052c01H
	DD	01112316H
	DD	0700a0021H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getopt_internal DD 025053201H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getopt_long DD 025053701H
	DD	011c2321H
	DD	070150035H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
fprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
fprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:fprintf$rtcName$0
	ORG $+48
fprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:fprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vfprintf DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\extras\getopt.c
;	COMDAT xwarnx
_TEXT	SEGMENT
ap$ = 8
fmt$ = 256
xwarnx	PROC						; COMDAT

; 94   : static void xwarnx(const char *fmt, ...) {

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__3ED25CA6_getopt@c
	call	__CheckForDebuggerJustMyCode

; 95   : 	va_list ap;
; 96   : 
; 97   : 	va_start(ap, fmt);

	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR ap$[rbp], rax

; 98   : 	if (progname)

	cmp	QWORD PTR progname, 0
	je	SHORT $LN2@xwarnx

; 99   : 		(void) fprintf(stderr, "%s: ", progname);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8, QWORD PTR progname
	lea	rdx, OFFSET FLAT:??_C@_04PFAOODAA@?$CFs?3?5@
	mov	rcx, rax
	call	fprintf
$LN2@xwarnx:

; 100  : 	if (fmt)

	cmp	QWORD PTR fmt$[rbp], 0
	je	SHORT $LN3@xwarnx

; 101  : 		(void) vfprintf(stderr, fmt, ap);

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8, QWORD PTR ap$[rbp]
	mov	rdx, QWORD PTR fmt$[rbp]
	mov	rcx, rax
	call	vfprintf
$LN3@xwarnx:

; 102  : 	(void) fprintf(stderr, "\n");

	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	mov	rcx, rax
	call	fprintf

; 103  : 	va_end(ap);

	mov	QWORD PTR ap$[rbp], 0

; 104  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:xwarnx$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
xwarnx	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\extras\getopt.c
;	COMDAT permute_args
_TEXT	SEGMENT
cstart$ = 4
cyclelen$ = 36
i$ = 68
j$ = 100
ncycle$ = 132
nnonopts$ = 164
nopts$ = 196
pos$ = 228
swap$ = 264
nonopt_start$ = 512
nonopt_end$ = 520
opt_end$ = 528
nargv$ = 536
permute_args PROC					; COMDAT

; 137  : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+552]
	lea	rcx, OFFSET FLAT:__3ED25CA6_getopt@c
	call	__CheckForDebuggerJustMyCode

; 138  : 	int cstart, cyclelen, i, j, ncycle, nnonopts, nopts, pos;
; 139  : 	char *swap;
; 140  : 
; 141  : 	/*
; 142  : 	 * compute lengths of blocks and number and size of cycles
; 143  : 	 */
; 144  : 	nnonopts = nonopt_end - nonopt_start;

	mov	eax, DWORD PTR nonopt_start$[rbp]
	mov	ecx, DWORD PTR nonopt_end$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nnonopts$[rbp], eax

; 145  : 	nopts = opt_end - nonopt_end;

	mov	eax, DWORD PTR nonopt_end$[rbp]
	mov	ecx, DWORD PTR opt_end$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nopts$[rbp], eax

; 146  : 	ncycle = gcd(nnonopts, nopts);

	mov	edx, DWORD PTR nopts$[rbp]
	mov	ecx, DWORD PTR nnonopts$[rbp]
	call	gcd
	mov	DWORD PTR ncycle$[rbp], eax

; 147  : 	cyclelen = (opt_end - nonopt_start) / ncycle;

	mov	eax, DWORD PTR nonopt_start$[rbp]
	mov	ecx, DWORD PTR opt_end$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	idiv	DWORD PTR ncycle$[rbp]
	mov	DWORD PTR cyclelen$[rbp], eax

; 148  : 
; 149  : 	for (i = 0; i < ncycle; i++) {

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@permute_ar
$LN2@permute_ar:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@permute_ar:
	mov	eax, DWORD PTR ncycle$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@permute_ar

; 150  : 		cstart = nonopt_end+i;

	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR nonopt_end$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR cstart$[rbp], eax

; 151  : 		pos = cstart;

	mov	eax, DWORD PTR cstart$[rbp]
	mov	DWORD PTR pos$[rbp], eax

; 152  : 		for (j = 0; j < cyclelen; j++) {

	mov	DWORD PTR j$[rbp], 0
	jmp	SHORT $LN7@permute_ar
$LN5@permute_ar:
	mov	eax, DWORD PTR j$[rbp]
	inc	eax
	mov	DWORD PTR j$[rbp], eax
$LN7@permute_ar:
	mov	eax, DWORD PTR cyclelen$[rbp]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN6@permute_ar

; 153  : 			if (pos >= nonopt_end)

	mov	eax, DWORD PTR nonopt_end$[rbp]
	cmp	DWORD PTR pos$[rbp], eax
	jl	SHORT $LN8@permute_ar

; 154  : 				pos -= nnonopts;

	mov	eax, DWORD PTR nnonopts$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pos$[rbp], eax
	jmp	SHORT $LN9@permute_ar
$LN8@permute_ar:

; 155  : 			else
; 156  : 				pos += nopts;

	mov	eax, DWORD PTR nopts$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pos$[rbp], eax
$LN9@permute_ar:

; 157  : 			swap = nargv[pos];

	movsxd	rax, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR swap$[rbp], rax

; 158  : 			/* LINTED const cast */
; 159  : 			((char **) nargv)[pos] = nargv[cstart];

	movsxd	rax, DWORD PTR cstart$[rbp]
	movsxd	rcx, DWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR nargv$[rbp]
	mov	r8, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax

; 160  : 			/* LINTED const cast */
; 161  : 			((char **)nargv)[cstart] = swap;

	movsxd	rax, DWORD PTR cstart$[rbp]
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rdx, QWORD PTR swap$[rbp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 162  : 		}

	jmp	$LN5@permute_ar
$LN6@permute_ar:

; 163  : 	}

	jmp	$LN2@permute_ar
$LN3@permute_ar:

; 164  : }

	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
permute_args ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\extras\getopt.c
;	COMDAT gcd
_TEXT	SEGMENT
c$ = 4
a$ = 256
b$ = 264
gcd	PROC						; COMDAT

; 113  : {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__3ED25CA6_getopt@c
	call	__CheckForDebuggerJustMyCode

; 114  : 	int c;
; 115  : 
; 116  : 	c = a % b;

	mov	eax, DWORD PTR a$[rbp]
	cdq
	idiv	DWORD PTR b$[rbp]
	mov	eax, edx
	mov	DWORD PTR c$[rbp], eax
$LN2@gcd:

; 117  : 	while (c != 0) {

	cmp	DWORD PTR c$[rbp], 0
	je	SHORT $LN3@gcd

; 118  : 		a = b;

	mov	eax, DWORD PTR b$[rbp]
	mov	DWORD PTR a$[rbp], eax

; 119  : 		b = c;

	mov	eax, DWORD PTR c$[rbp]
	mov	DWORD PTR b$[rbp], eax

; 120  : 		c = a % b;

	mov	eax, DWORD PTR a$[rbp]
	cdq
	idiv	DWORD PTR b$[rbp]
	mov	eax, edx
	mov	DWORD PTR c$[rbp], eax

; 121  : 	}

	jmp	SHORT $LN2@gcd
$LN3@gcd:

; 122  : 	   
; 123  : 	return b;

	mov	eax, DWORD PTR b$[rbp]

; 124  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
gcd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\extras\getopt.c
;	COMDAT getopt_internal
_TEXT	SEGMENT
oli$ = 8
optchar$ = 36
tv162 = 244
tv153 = 244
tv154 = 248
nargc$ = 288
nargv$ = 296
options$ = 304
getopt_internal PROC					; COMDAT

; 176  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__3ED25CA6_getopt@c
	call	__CheckForDebuggerJustMyCode

; 177  : 	char *oli;				/* option letter list index */
; 178  : 	int optchar;
; 179  : 
; 180  : 	_DIAGASSERT(nargv != NULL);
; 181  : 	_DIAGASSERT(options != NULL);
; 182  : 
; 183  : 	optarg = NULL;

	mov	QWORD PTR optarg, 0

; 184  : 
; 185  : 	/*
; 186  : 	 * XXX Some programs (like rsyncd) expect to be able to
; 187  : 	 * XXX re-initialize optind to 0 and have getopt_long(3)
; 188  : 	 * XXX properly function again.  Work around this braindamage.
; 189  : 	 */
; 190  : 	if (optind == 0)

	cmp	DWORD PTR optind, 0
	jne	SHORT $LN2@getopt_int

; 191  : 		optind = 1;

	mov	DWORD PTR optind, 1
$LN2@getopt_int:

; 192  : 
; 193  : 	if (optreset)

	cmp	DWORD PTR optreset, 0
	je	SHORT $LN3@getopt_int

; 194  : 		nonopt_start = nonopt_end = -1;

	mov	DWORD PTR nonopt_end, -1
	mov	eax, DWORD PTR nonopt_end
	mov	DWORD PTR nonopt_start, eax
$LN3@getopt_int:
$start$49:

; 195  : start:
; 196  : 	if (optreset || !*place) {		/* update scanning pointer */

	cmp	DWORD PTR optreset, 0
	jne	SHORT $LN5@getopt_int
	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	$LN4@getopt_int
$LN5@getopt_int:

; 197  : 		optreset = 0;

	mov	DWORD PTR optreset, 0

; 198  : 		if (optind >= nargc) {          /* end of argument vector */

	mov	eax, DWORD PTR nargc$[rbp]
	cmp	DWORD PTR optind, eax
	jl	$LN6@getopt_int

; 199  : 			place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 200  : 			if (nonopt_end != -1) {

	cmp	DWORD PTR nonopt_end, -1
	je	SHORT $LN7@getopt_int

; 201  : 				/* do permutation, if we have to */
; 202  : 				permute_args(nonopt_start, nonopt_end,

	mov	r9, QWORD PTR nargv$[rbp]
	mov	r8d, DWORD PTR optind
	mov	edx, DWORD PTR nonopt_end
	mov	ecx, DWORD PTR nonopt_start
	call	permute_args

; 203  : 				    optind, nargv);
; 204  : 				optind -= nonopt_end - nonopt_start;

	mov	eax, DWORD PTR nonopt_start
	mov	ecx, DWORD PTR nonopt_end
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR optind
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR optind, eax

; 205  : 			}

	jmp	SHORT $LN8@getopt_int
$LN7@getopt_int:

; 206  : 			else if (nonopt_start != -1) {

	cmp	DWORD PTR nonopt_start, -1
	je	SHORT $LN9@getopt_int

; 207  : 				/*
; 208  : 				 * If we skipped non-options, set optind
; 209  : 				 * to the first of them.
; 210  : 				 */
; 211  : 				optind = nonopt_start;

	mov	eax, DWORD PTR nonopt_start
	mov	DWORD PTR optind, eax
$LN9@getopt_int:
$LN8@getopt_int:

; 212  : 			}
; 213  : 			nonopt_start = nonopt_end = -1;

	mov	DWORD PTR nonopt_end, -1
	mov	eax, DWORD PTR nonopt_end
	mov	DWORD PTR nonopt_start, eax

; 214  : 			return -1;

	mov	eax, -1
	jmp	$LN1@getopt_int
$LN6@getopt_int:

; 215  : 		}
; 216  : 		if (*(place = nargv[optind]) != '-') {  /* found non-option */

	movsxd	rax, DWORD PTR optind
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR place, rax
	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	$LN10@getopt_int

; 217  : 			place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 218  : 			if (IN_ORDER) {

	lea	rcx, OFFSET FLAT:??_C@_0BA@DMNGMDNL@POSIXLY_CORRECT@
	call	QWORD PTR __imp_getenv
	test	rax, rax
	jne	SHORT $LN11@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN11@getopt_int

; 219  : 				/*
; 220  : 				 * GNU extension: 
; 221  : 				 * return non-option as argument to option 1
; 222  : 				 */
; 223  : 				optarg = nargv[optind++];

	movsxd	rax, DWORD PTR optind
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR optarg, rax
	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax

; 224  : 				return INORDER;

	mov	eax, 1
	jmp	$LN1@getopt_int
$LN11@getopt_int:

; 225  : 			}
; 226  : 			if (!PERMUTE) {

	lea	rcx, OFFSET FLAT:??_C@_0BA@DMNGMDNL@POSIXLY_CORRECT@
	call	QWORD PTR __imp_getenv
	test	rax, rax
	jne	SHORT $LN13@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN14@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN12@getopt_int
$LN14@getopt_int:
$LN13@getopt_int:

; 227  : 				/*
; 228  : 				 * if no permutation wanted, stop parsing
; 229  : 				 * at first non-option
; 230  : 				 */
; 231  : 				return -1;

	mov	eax, -1
	jmp	$LN1@getopt_int
$LN12@getopt_int:

; 232  : 			}
; 233  : 			/* do permutation */
; 234  : 			if (nonopt_start == -1)

	cmp	DWORD PTR nonopt_start, -1
	jne	SHORT $LN15@getopt_int

; 235  : 				nonopt_start = optind;

	mov	eax, DWORD PTR optind
	mov	DWORD PTR nonopt_start, eax
	jmp	SHORT $LN16@getopt_int
$LN15@getopt_int:

; 236  : 			else if (nonopt_end != -1) {

	cmp	DWORD PTR nonopt_end, -1
	je	SHORT $LN17@getopt_int

; 237  : 				permute_args(nonopt_start, nonopt_end,

	mov	r9, QWORD PTR nargv$[rbp]
	mov	r8d, DWORD PTR optind
	mov	edx, DWORD PTR nonopt_end
	mov	ecx, DWORD PTR nonopt_start
	call	permute_args

; 238  : 				    optind, nargv);
; 239  : 				nonopt_start = optind -

	mov	eax, DWORD PTR nonopt_start
	mov	ecx, DWORD PTR nonopt_end
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR optind
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nonopt_start, eax

; 240  : 				    (nonopt_end - nonopt_start);
; 241  : 				nonopt_end = -1;

	mov	DWORD PTR nonopt_end, -1
$LN17@getopt_int:
$LN16@getopt_int:

; 242  : 			}
; 243  : 			optind++;

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax

; 244  : 			/* process next argument */
; 245  : 			goto start;

	jmp	$start$49
$LN10@getopt_int:

; 246  : 		}
; 247  : 		if (nonopt_start != -1 && nonopt_end == -1)

	cmp	DWORD PTR nonopt_start, -1
	je	SHORT $LN18@getopt_int
	cmp	DWORD PTR nonopt_end, -1
	jne	SHORT $LN18@getopt_int

; 248  : 			nonopt_end = optind;

	mov	eax, DWORD PTR optind
	mov	DWORD PTR nonopt_end, eax
$LN18@getopt_int:

; 249  : 		if (place[1] && *++place == '-') {	/* found "--" */

	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR place
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN19@getopt_int
	mov	rax, QWORD PTR place
	inc	rax
	mov	QWORD PTR place, rax
	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN19@getopt_int

; 250  : 			place++;

	mov	rax, QWORD PTR place
	inc	rax
	mov	QWORD PTR place, rax

; 251  : 			return -2;

	mov	eax, -2
	jmp	$LN1@getopt_int
$LN19@getopt_int:
$LN4@getopt_int:

; 252  : 		}
; 253  : 	}
; 254  : 	if ((optchar = (int)*place++) == (int)':' ||

	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR optchar$[rbp], eax
	mov	eax, DWORD PTR optchar$[rbp]
	mov	DWORD PTR tv153[rbp], eax
	mov	rax, QWORD PTR place
	inc	rax
	mov	QWORD PTR place, rax
	cmp	DWORD PTR tv153[rbp], 58		; 0000003aH
	jne	SHORT $LN45@getopt_int
	mov	DWORD PTR tv154[rbp], 1
	jmp	SHORT $LN46@getopt_int
$LN45@getopt_int:
	mov	DWORD PTR tv154[rbp], 0
$LN46@getopt_int:
	cmp	DWORD PTR tv154[rbp], 0
	jne	SHORT $LN21@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN47@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN47@getopt_int
	mov	DWORD PTR tv162[rbp], 0
	jmp	SHORT $LN48@getopt_int
$LN47@getopt_int:
	mov	DWORD PTR tv162[rbp], 1
$LN48@getopt_int:
	movsxd	rax, DWORD PTR tv162[rbp]
	mov	rcx, QWORD PTR options$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR optchar$[rbp]
	mov	rcx, rax
	call	strchr
	mov	QWORD PTR oli$[rbp], rax
	cmp	QWORD PTR oli$[rbp], 0
	jne	$LN20@getopt_int
$LN21@getopt_int:

; 255  : 	    (oli = strchr(options + (IGNORE_FIRST ? 1 : 0), optchar)) == NULL) {
; 256  : 		/* option letter unknown or ':' */
; 257  : 		if (!*place)

	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN22@getopt_int

; 258  : 			++optind;

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
$LN22@getopt_int:

; 259  : 		if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN23@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN24@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN25@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN23@getopt_int
$LN25@getopt_int:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN23@getopt_int
$LN24@getopt_int:

; 260  : 			xwarnx(illoptchar, optchar);

	mov	edx, DWORD PTR optchar$[rbp]
	lea	rcx, OFFSET FLAT:illoptchar
	call	xwarnx
$LN23@getopt_int:

; 261  : 		optopt = optchar;

	mov	eax, DWORD PTR optchar$[rbp]
	mov	DWORD PTR optopt, eax

; 262  : 		return BADCH;

	mov	eax, 63					; 0000003fH
	jmp	$LN1@getopt_int
$LN20@getopt_int:

; 263  : 	}
; 264  : 	if (optchar == 'W' && oli[1] == ';') {		/* -W long-option */

	cmp	DWORD PTR optchar$[rbp], 87		; 00000057H
	jne	$LN26@getopt_int
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR oli$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 59					; 0000003bH
	jne	$LN26@getopt_int

; 265  : 		/* XXX: what if no long options provided (called by getopt)? */
; 266  : 		if (*place) 

	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN27@getopt_int

; 267  : 			return -2;

	mov	eax, -2
	jmp	$LN1@getopt_int
$LN27@getopt_int:

; 268  : 
; 269  : 		if (++optind >= nargc) {	/* no arg */

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
	mov	eax, DWORD PTR nargc$[rbp]
	cmp	DWORD PTR optind, eax
	jl	$LN28@getopt_int

; 270  : 			place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 271  : 			if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN30@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN31@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN32@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN30@getopt_int
$LN32@getopt_int:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN30@getopt_int
$LN31@getopt_int:

; 272  : 				xwarnx(recargchar, optchar);

	mov	edx, DWORD PTR optchar$[rbp]
	lea	rcx, OFFSET FLAT:recargchar
	call	xwarnx
$LN30@getopt_int:

; 273  : 			optopt = optchar;

	mov	eax, DWORD PTR optchar$[rbp]
	mov	DWORD PTR optopt, eax

; 274  : 			/* XXX: GNU returns '?' if options[0] != ':' */
; 275  : 			return BADARG;

	mov	eax, 58					; 0000003aH
	jmp	$LN1@getopt_int

; 276  : 		} else				/* white space */

	jmp	SHORT $LN29@getopt_int
$LN28@getopt_int:

; 277  : 			place = nargv[optind];

	movsxd	rax, DWORD PTR optind
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR place, rax
$LN29@getopt_int:

; 278  : 		/*
; 279  : 		 * Handle -W arg the same as --arg (which causes getopt to
; 280  : 		 * stop parsing).
; 281  : 		 */
; 282  : 		return -2;

	mov	eax, -2
	jmp	$LN1@getopt_int
$LN26@getopt_int:

; 283  : 	}
; 284  : 	if (*++oli != ':') {			/* doesn't take argument */

	mov	rax, QWORD PTR oli$[rbp]
	inc	rax
	mov	QWORD PTR oli$[rbp], rax
	mov	rax, QWORD PTR oli$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN33@getopt_int

; 285  : 		if (!*place)

	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN35@getopt_int

; 286  : 			++optind;

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
$LN35@getopt_int:

; 287  : 	} else {				/* takes (optional) argument */

	jmp	$LN34@getopt_int
$LN33@getopt_int:

; 288  : 		optarg = NULL;

	mov	QWORD PTR optarg, 0

; 289  : 		if (*place)			/* no white space */

	mov	rax, QWORD PTR place
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN36@getopt_int

; 290  : 			optarg = place;

	mov	rax, QWORD PTR place
	mov	QWORD PTR optarg, rax
	jmp	$LN37@getopt_int
$LN36@getopt_int:

; 291  : 		/* XXX: disable test for :: if PC? (GNU doesn't) */
; 292  : 		else if (oli[1] != ':') {	/* arg not optional */

	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR oli$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	$LN38@getopt_int

; 293  : 			if (++optind >= nargc) {	/* no arg */

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
	mov	eax, DWORD PTR nargc$[rbp]
	cmp	DWORD PTR optind, eax
	jl	SHORT $LN39@getopt_int

; 294  : 				place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 295  : 				if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN41@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN42@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN43@getopt_int
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN41@getopt_int
$LN43@getopt_int:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN41@getopt_int
$LN42@getopt_int:

; 296  : 					xwarnx(recargchar, optchar);

	mov	edx, DWORD PTR optchar$[rbp]
	lea	rcx, OFFSET FLAT:recargchar
	call	xwarnx
$LN41@getopt_int:

; 297  : 				optopt = optchar;

	mov	eax, DWORD PTR optchar$[rbp]
	mov	DWORD PTR optopt, eax

; 298  : 				/* XXX: GNU returns '?' if options[0] != ':' */
; 299  : 				return BADARG;

	mov	eax, 58					; 0000003aH
	jmp	SHORT $LN1@getopt_int

; 300  : 			} else

	jmp	SHORT $LN40@getopt_int
$LN39@getopt_int:

; 301  : 				optarg = nargv[optind];

	movsxd	rax, DWORD PTR optind
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR optarg, rax
$LN40@getopt_int:
$LN38@getopt_int:
$LN37@getopt_int:

; 302  : 		}
; 303  : 		place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 304  : 		++optind;

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
$LN34@getopt_int:

; 305  : 	}
; 306  : 	/* dump back option letter */
; 307  : 	return optchar;

	mov	eax, DWORD PTR optchar$[rbp]
$LN1@getopt_int:

; 308  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
getopt_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\84038\Desktop\video_codec_thread_test\src\extras\getopt.c
;	COMDAT getopt_long
_TEXT	SEGMENT
retval$ = 4
current_argv$1 = 40
has_equal$2 = 72
current_argv_len$3 = 104
i$4 = 132
match$5 = 164
nargc$ = 416
nargv$ = 424
options$ = 432
long_options$ = 440
idx$ = 448
getopt_long PROC					; COMDAT

; 356  : {

$LN43:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__3ED25CA6_getopt@c
	call	__CheckForDebuggerJustMyCode

; 357  : 	int retval;
; 358  : 
; 359  : 	_DIAGASSERT(nargv != NULL);
; 360  : 	_DIAGASSERT(options != NULL);
; 361  : 	_DIAGASSERT(long_options != NULL);
; 362  : 	/* idx may be NULL */
; 363  : 
; 364  : 	progname = nargv[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR progname, rax

; 365  : 
; 366  : 	if ((retval = getopt_internal(nargc, nargv, options)) == -2) {

	mov	r8, QWORD PTR options$[rbp]
	mov	rdx, QWORD PTR nargv$[rbp]
	mov	ecx, DWORD PTR nargc$[rbp]
	call	getopt_internal
	mov	DWORD PTR retval$[rbp], eax
	cmp	DWORD PTR retval$[rbp], -2
	jne	$LN5@getopt_lon

; 367  : 		char *current_argv, *has_equal;
; 368  : 		size_t current_argv_len;
; 369  : 		int i, match;
; 370  : 
; 371  : 		current_argv = place;

	mov	rax, QWORD PTR place
	mov	QWORD PTR current_argv$1[rbp], rax

; 372  : 		match = -1;

	mov	DWORD PTR match$5[rbp], -1

; 373  : 
; 374  : 		optind++;

	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax

; 375  : 		place = EMSG;

	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR place, rax

; 376  : 
; 377  : 		if (*current_argv == '\0') {		/* found "--" */

	mov	rax, QWORD PTR current_argv$1[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN6@getopt_lon

; 378  : 			/*
; 379  : 			 * We found an option (--), so if we skipped
; 380  : 			 * non-options, we have to permute.
; 381  : 			 */
; 382  : 			if (nonopt_end != -1) {

	cmp	DWORD PTR nonopt_end, -1
	je	SHORT $LN7@getopt_lon

; 383  : 				permute_args(nonopt_start, nonopt_end,

	mov	r9, QWORD PTR nargv$[rbp]
	mov	r8d, DWORD PTR optind
	mov	edx, DWORD PTR nonopt_end
	mov	ecx, DWORD PTR nonopt_start
	call	permute_args

; 384  : 				    optind, nargv);
; 385  : 				optind -= nonopt_end - nonopt_start;

	mov	eax, DWORD PTR nonopt_start
	mov	ecx, DWORD PTR nonopt_end
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR optind
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR optind, eax
$LN7@getopt_lon:

; 386  : 			}
; 387  : 			nonopt_start = nonopt_end = -1;

	mov	DWORD PTR nonopt_end, -1
	mov	eax, DWORD PTR nonopt_end
	mov	DWORD PTR nonopt_start, eax

; 388  : 			return -1;

	mov	eax, -1
	jmp	$LN1@getopt_lon
$LN6@getopt_lon:

; 389  : 		}
; 390  : 		if ((has_equal = strchr(current_argv, '=')) != NULL) {

	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR current_argv$1[rbp]
	call	strchr
	mov	QWORD PTR has_equal$2[rbp], rax
	cmp	QWORD PTR has_equal$2[rbp], 0
	je	SHORT $LN8@getopt_lon

; 391  : 			/* argument found (--option=arg) */
; 392  : 			current_argv_len = has_equal - current_argv;

	mov	rax, QWORD PTR current_argv$1[rbp]
	mov	rcx, QWORD PTR has_equal$2[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR current_argv_len$3[rbp], rax

; 393  : 			has_equal++;

	mov	rax, QWORD PTR has_equal$2[rbp]
	inc	rax
	mov	QWORD PTR has_equal$2[rbp], rax

; 394  : 		} else

	jmp	SHORT $LN9@getopt_lon
$LN8@getopt_lon:

; 395  : 			current_argv_len = strlen(current_argv);

	mov	rcx, QWORD PTR current_argv$1[rbp]
	call	strlen
	mov	QWORD PTR current_argv_len$3[rbp], rax
$LN9@getopt_lon:

; 396  : 	    
; 397  : 		for (i = 0; long_options[i].name; i++) {

	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN4@getopt_lon
$LN2@getopt_lon:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN4@getopt_lon:
	movsxd	rax, DWORD PTR i$4[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN3@getopt_lon

; 398  : 			/* find matching long option */
; 399  : 			if (strncmp(current_argv, long_options[i].name,

	movsxd	rax, DWORD PTR i$4[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	r8, QWORD PTR current_argv_len$3[rbp]
	mov	rcx, QWORD PTR long_options$[rbp]
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR current_argv$1[rbp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN10@getopt_lon

; 400  : 			    current_argv_len))
; 401  : 				continue;

	jmp	SHORT $LN2@getopt_lon
$LN10@getopt_lon:

; 402  : 
; 403  : 			if (strlen(long_options[i].name) ==

	movsxd	rax, DWORD PTR i$4[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	mov	ecx, DWORD PTR current_argv_len$3[rbp]
	cmp	rax, rcx
	jne	SHORT $LN11@getopt_lon

; 404  : 			    (unsigned)current_argv_len) {
; 405  : 				/* exact match */
; 406  : 				match = i;

	mov	eax, DWORD PTR i$4[rbp]
	mov	DWORD PTR match$5[rbp], eax

; 407  : 				break;

	jmp	$LN3@getopt_lon
$LN11@getopt_lon:

; 408  : 			}
; 409  : 			if (match == -1)		/* partial match */

	cmp	DWORD PTR match$5[rbp], -1
	jne	SHORT $LN12@getopt_lon

; 410  : 				match = i;

	mov	eax, DWORD PTR i$4[rbp]
	mov	DWORD PTR match$5[rbp], eax
	jmp	SHORT $LN13@getopt_lon
$LN12@getopt_lon:

; 411  : 			else {
; 412  : 				/* ambiguous abbreviation */
; 413  : 				if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN14@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN15@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN16@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN14@getopt_lon
$LN16@getopt_lon:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN14@getopt_lon
$LN15@getopt_lon:

; 414  : 					xwarnx(ambig, (int)current_argv_len,

	mov	r8, QWORD PTR current_argv$1[rbp]
	mov	edx, DWORD PTR current_argv_len$3[rbp]
	lea	rcx, OFFSET FLAT:ambig
	call	xwarnx
$LN14@getopt_lon:

; 415  : 					     current_argv);
; 416  : 				optopt = 0;

	mov	DWORD PTR optopt, 0

; 417  : 				return BADCH;

	mov	eax, 63					; 0000003fH
	jmp	$LN1@getopt_lon
$LN13@getopt_lon:

; 418  : 			}
; 419  : 		}

	jmp	$LN2@getopt_lon
$LN3@getopt_lon:

; 420  : 		if (match != -1) {			/* option found */

	cmp	DWORD PTR match$5[rbp], -1
	je	$LN17@getopt_lon

; 421  : 		        if (long_options[match].has_arg == no_argument
; 422  : 			    && has_equal) {

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	$LN19@getopt_lon
	cmp	QWORD PTR has_equal$2[rbp], 0
	je	$LN19@getopt_lon

; 423  : 				if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN20@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN21@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN22@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN20@getopt_lon
$LN22@getopt_lon:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN20@getopt_lon
$LN21@getopt_lon:

; 424  : 					xwarnx(noarg, (int)current_argv_len,

	mov	r8, QWORD PTR current_argv$1[rbp]
	mov	edx, DWORD PTR current_argv_len$3[rbp]
	lea	rcx, OFFSET FLAT:noarg
	call	xwarnx
$LN20@getopt_lon:

; 425  : 					     current_argv);
; 426  : 				/*
; 427  : 				 * XXX: GNU sets optopt to val regardless of
; 428  : 				 * flag
; 429  : 				 */
; 430  : 				if (long_options[match].flag == NULL)

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	QWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN23@getopt_lon

; 431  : 					optopt = long_options[match].val;

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	mov	eax, DWORD PTR [rcx+rax+24]
	mov	DWORD PTR optopt, eax
	jmp	SHORT $LN24@getopt_lon
$LN23@getopt_lon:

; 432  : 				else
; 433  : 					optopt = 0;

	mov	DWORD PTR optopt, 0
$LN24@getopt_lon:

; 434  : 				/* XXX: GNU returns '?' if options[0] != ':' */
; 435  : 				return BADARG;

	mov	eax, 58					; 0000003aH
	jmp	$LN1@getopt_lon
$LN19@getopt_lon:

; 436  : 			}
; 437  : 			if (long_options[match].has_arg == required_argument ||

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	DWORD PTR [rcx+rax+8], 1
	je	SHORT $LN26@getopt_lon
	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	DWORD PTR [rcx+rax+8], 2
	jne	SHORT $LN25@getopt_lon
$LN26@getopt_lon:

; 438  : 			    long_options[match].has_arg == optional_argument) {
; 439  : 				if (has_equal)

	cmp	QWORD PTR has_equal$2[rbp], 0
	je	SHORT $LN27@getopt_lon

; 440  : 					optarg = has_equal;

	mov	rax, QWORD PTR has_equal$2[rbp]
	mov	QWORD PTR optarg, rax
	jmp	SHORT $LN28@getopt_lon
$LN27@getopt_lon:

; 441  : 				else if (long_options[match].has_arg ==

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	DWORD PTR [rcx+rax+8], 1
	jne	SHORT $LN29@getopt_lon

; 442  : 				    required_argument) {
; 443  : 					/*
; 444  : 					 * optional argument doesn't use
; 445  : 					 * next nargv
; 446  : 					 */
; 447  : 					optarg = nargv[optind++];

	movsxd	rax, DWORD PTR optind
	mov	rcx, QWORD PTR nargv$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR optarg, rax
	mov	eax, DWORD PTR optind
	inc	eax
	mov	DWORD PTR optind, eax
$LN29@getopt_lon:
$LN28@getopt_lon:
$LN25@getopt_lon:

; 448  : 				}
; 449  : 			}
; 450  : 			if ((long_options[match].has_arg == required_argument)
; 451  : 			    && (optarg == NULL)) {

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	DWORD PTR [rcx+rax+8], 1
	jne	$LN30@getopt_lon
	cmp	QWORD PTR optarg, 0
	jne	$LN30@getopt_lon

; 452  : 				/*
; 453  : 				 * Missing argument; leading ':'
; 454  : 				 * indicates no error should be generated
; 455  : 				 */
; 456  : 				if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN31@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN32@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN33@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN31@getopt_lon
$LN33@getopt_lon:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN31@getopt_lon
$LN32@getopt_lon:

; 457  : 					xwarnx(recargstring, current_argv);

	mov	rdx, QWORD PTR current_argv$1[rbp]
	lea	rcx, OFFSET FLAT:recargstring
	call	xwarnx
$LN31@getopt_lon:

; 458  : 				/*
; 459  : 				 * XXX: GNU sets optopt to val regardless
; 460  : 				 * of flag
; 461  : 				 */
; 462  : 				if (long_options[match].flag == NULL)

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	QWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN34@getopt_lon

; 463  : 					optopt = long_options[match].val;

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	mov	eax, DWORD PTR [rcx+rax+24]
	mov	DWORD PTR optopt, eax
	jmp	SHORT $LN35@getopt_lon
$LN34@getopt_lon:

; 464  : 				else
; 465  : 					optopt = 0;

	mov	DWORD PTR optopt, 0
$LN35@getopt_lon:

; 466  : 				/* XXX: GNU returns '?' if options[0] != ':' */
; 467  : 				--optind;

	mov	eax, DWORD PTR optind
	dec	eax
	mov	DWORD PTR optind, eax

; 468  : 				return BADARG;

	mov	eax, 58					; 0000003aH
	jmp	$LN1@getopt_lon
$LN30@getopt_lon:

; 469  : 			}
; 470  : 		} else {			/* unknown option */

	jmp	SHORT $LN18@getopt_lon
$LN17@getopt_lon:

; 471  : 			if (PRINT_ERROR)

	cmp	DWORD PTR opterr, 0
	je	SHORT $LN36@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN37@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN38@getopt_lon
	mov	rax, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN36@getopt_lon
$LN38@getopt_lon:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR options$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN36@getopt_lon
$LN37@getopt_lon:

; 472  : 				xwarnx(illoptstring, current_argv);

	mov	rdx, QWORD PTR current_argv$1[rbp]
	lea	rcx, OFFSET FLAT:illoptstring
	call	xwarnx
$LN36@getopt_lon:

; 473  : 			optopt = 0;

	mov	DWORD PTR optopt, 0

; 474  : 			return BADCH;

	mov	eax, 63					; 0000003fH
	jmp	$LN1@getopt_lon
$LN18@getopt_lon:

; 475  : 		}
; 476  : 		if (long_options[match].flag) {

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN39@getopt_lon

; 477  : 			*long_options[match].flag = long_options[match].val;

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR match$5[rbp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR long_options$[rbp]
	mov	rcx, QWORD PTR [rdx+rcx+16]
	mov	rdx, QWORD PTR long_options$[rbp]
	mov	eax, DWORD PTR [rdx+rax+24]
	mov	DWORD PTR [rcx], eax

; 478  : 			retval = 0;

	mov	DWORD PTR retval$[rbp], 0

; 479  : 		} else 

	jmp	SHORT $LN40@getopt_lon
$LN39@getopt_lon:

; 480  : 			retval = long_options[match].val;

	movsxd	rax, DWORD PTR match$5[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR long_options$[rbp]
	mov	eax, DWORD PTR [rcx+rax+24]
	mov	DWORD PTR retval$[rbp], eax
$LN40@getopt_lon:

; 481  : 		if (idx)

	cmp	QWORD PTR idx$[rbp], 0
	je	SHORT $LN41@getopt_lon

; 482  : 			*idx = match;

	mov	rax, QWORD PTR idx$[rbp]
	mov	ecx, DWORD PTR match$5[rbp]
	mov	DWORD PTR [rax], ecx
$LN41@getopt_lon:
$LN5@getopt_lon:

; 483  : 	}
; 484  : 	return retval;

	mov	eax, DWORD PTR retval$[rbp]
$LN1@getopt_lon:

; 485  : }

	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
getopt_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Stream$ = 288
_Format$ = 296
fprintf	PROC						; COMDAT

; 835  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, QWORD PTR _Stream$[rbp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 842  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:fprintf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT vfprintf
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_ArgList$ = 240
vfprintf PROC						; COMDAT

; 656  :     {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 657  :         return _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, QWORD PTR _Stream$[rbp]
	call	_vfprintf_l

; 658  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__9FF75F13_stdio@h
	call	__CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__1850469A_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
