; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\intra.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__C4AC213E_kvz_math@h DB 01H
__8EDBB6ED_intra@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_num_ref_pixels_top DB 040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	020H
	DB	01cH
	DB	018H
	DB	014H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	020H
	DB	01cH
	DB	018H
	DB	014H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	040H
	DB	03cH
	DB	038H
	DB	034H
	DB	030H
	DB	02cH
	DB	028H
	DB	024H
	DB	020H
	DB	01cH
	DB	018H
	DB	014H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	020H
	DB	01cH
	DB	018H
	DB	014H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	020H
	DB	01cH
	DB	018H
	DB	014H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	010H
	DB	0cH
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
_num_ref_pixels_left DB 040H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	020H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	03cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	01cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	038H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	018H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	034H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	014H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	030H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	02cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	028H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	024H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	020H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	020H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	01cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	01cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	018H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	018H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	014H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	014H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	010H
	DB	04H
	DB	08H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	08H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
?kvz_intra_hor_ver_dist_thres@?4??kvz_intra_predict@@9@9 DD 00H ; `kvz_intra_predict'::`5'::kvz_intra_hor_ver_dist_thres
	DD	07H
	DD	01H
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_intra_get_dir_luma_predictor
PUBLIC	_kvz_intra_build_reference
PUBLIC	_kvz_intra_predict
PUBLIC	_kvz_intra_recon_cu
PUBLIC	_kvz_intra_build_reference_any
PUBLIC	_kvz_intra_build_reference_inner
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_math_floor_log2@@9@9	; `kvz_math_floor_log2'::`1'::__LINE__Var
PUBLIC	??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_intra_build_reference_any@@9@9 ; `kvz_intra_build_reference_any'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@JODNLOPI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_intra_build_reference_inner@@9@9 ; `kvz_intra_build_reference_inner'::`1'::__LINE__Var
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_quantize_lcu_residual:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_intra_build_reference_inner@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_intra_build_reference_inner@@9@9 DD 01b4H ; `kvz_intra_build_reference_inner'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
CONST	SEGMENT
??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ DB 'l'
	DB	00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'5', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@JODNLOPI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GI@JODNLOPI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_intra_build_reference_any@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_intra_build_reference_any@@9@9 DD 0138H ; `kvz_intra_build_reference_any'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H, 'v', 00H
	DB	'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_math_floor_log2@@9@9 DD 02cH	; `kvz_math_floor_log2'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _intra_recon_tb_leaf
_TEXT	SEGMENT
tv129 = -2036						; size = 4
tv139 = -2032						; size = 4
tv95 = -2032						; size = 4
tv67 = -2032						; size = 4
_block$ = -1448						; size = 4
_index$ = -1436						; size = 4
_filter_boundary$ = -1421				; size = 1
_pred$ = -1412						; size = 1024
_refs$ = -380						; size = 261
_lcu_px$ = -108						; size = 8
_pic_px$ = -92						; size = 8
_luma_px$ = -76						; size = 8
_lcu_width$ = -60					; size = 4
_width$ = -48						; size = 4
_log2width$ = -36					; size = 4
_shift$ = -24						; size = 4
_cfg$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_intra_mode$ = 24					; size = 1
_lcu$ = 28						; size = 4
_color$ = 32						; size = 4
_intra_recon_tb_leaf PROC				; COMDAT

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2036				; 000007f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2036]
	mov	ecx, 509				; 000001fdH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 570  :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 571  :   const int shift = color == COLOR_Y ? 0 : 1;

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN9@intra_reco
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN10@intra_reco
$LN9@intra_reco:
	mov	DWORD PTR tv67[ebp], 1
$LN10@intra_reco:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _shift$[ebp], eax

; 572  : 
; 573  :   int log2width = LOG2_LCU_WIDTH - depth;

	mov	eax, 6
	sub	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR _log2width$[ebp], eax

; 574  :   if (color != COLOR_Y && depth < MAX_PU_DEPTH) {

	cmp	DWORD PTR _color$[ebp], 0
	je	SHORT $LN4@intra_reco
	cmp	DWORD PTR _depth$[ebp], 4
	jge	SHORT $LN4@intra_reco

; 575  :     // Chroma width is half of luma width, when not at maximum depth.
; 576  :     log2width -= 1;

	mov	eax, DWORD PTR _log2width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _log2width$[ebp], eax
$LN4@intra_reco:

; 577  :   }
; 578  :   const int width = 1 << log2width;

	mov	eax, 1
	mov	ecx, DWORD PTR _log2width$[ebp]
	shl	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 579  :   const int lcu_width = LCU_WIDTH >> shift;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_width$[ebp], eax

; 580  : 
; 581  :   const vector2d_t luma_px = { x, y };

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _luma_px$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _luma_px$[ebp+4], eax

; 582  :   const vector2d_t pic_px = {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pic_px$[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _pic_px$[ebp+4], eax

; 583  :     state->tile->frame->width,
; 584  :     state->tile->frame->height,
; 585  :   };
; 586  :   const vector2d_t lcu_px = { SUB_SCU(x) >> shift, SUB_SCU(y) >> shift};

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 587  : 
; 588  :   kvz_intra_references refs;
; 589  :   kvz_intra_build_reference(log2width, color, &luma_px, &pic_px, lcu, &refs);

	lea	eax, DWORD PTR _refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pic_px$[ebp]
	push	edx
	lea	eax, DWORD PTR _luma_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _log2width$[ebp]
	push	edx
	call	_kvz_intra_build_reference
	add	esp, 24					; 00000018H

; 590  : 
; 591  :   kvz_pixel pred[32 * 32];
; 592  :   const bool filter_boundary = color == COLOR_Y && !(cfg->lossless && cfg->implicit_rdpcm);

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN12@intra_reco
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	je	SHORT $LN11@intra_reco
	mov	ecx, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [ecx+2392], 0
	jne	SHORT $LN12@intra_reco
$LN11@intra_reco:
	mov	DWORD PTR tv95[ebp], 1
	jmp	SHORT $LN13@intra_reco
$LN12@intra_reco:
	mov	DWORD PTR tv95[ebp], 0
$LN13@intra_reco:
	cmp	DWORD PTR tv95[ebp], 0
	jne	SHORT $LN14@intra_reco
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN15@intra_reco
$LN14@intra_reco:
	mov	DWORD PTR tv129[ebp], 1
$LN15@intra_reco:
	mov	dl, BYTE PTR tv129[ebp]
	mov	BYTE PTR _filter_boundary$[ebp], dl

; 593  :   kvz_intra_predict(&refs, log2width, intra_mode, color, pred, filter_boundary);

	movzx	eax, BYTE PTR _filter_boundary$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	movzx	eax, BYTE PTR _intra_mode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _log2width$[ebp]
	push	ecx
	lea	edx, DWORD PTR _refs$[ebp]
	push	edx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H

; 594  : 
; 595  :   const int index = lcu_px.x + lcu_px.y * lcu_width;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	imul	eax, DWORD PTR _lcu_width$[ebp]
	add	eax, DWORD PTR _lcu_px$[ebp]
	mov	DWORD PTR _index$[ebp], eax

; 596  :   kvz_pixel *block = NULL;

	mov	DWORD PTR _block$[ebp], 0

; 597  :   switch (color) {

	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR tv139[ebp], eax
	cmp	DWORD PTR tv139[ebp], 0
	je	SHORT $LN5@intra_reco
	cmp	DWORD PTR tv139[ebp], 1
	je	SHORT $LN6@intra_reco
	cmp	DWORD PTR tv139[ebp], 2
	je	SHORT $LN7@intra_reco
	jmp	SHORT $LN2@intra_reco
$LN5@intra_reco:

; 598  :     case COLOR_Y:
; 599  :       block = &lcu->rec.y[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6540]
	mov	DWORD PTR _block$[ebp], edx

; 600  :       break;

	jmp	SHORT $LN2@intra_reco
$LN6@intra_reco:

; 601  :     case COLOR_U:
; 602  :       block = &lcu->rec.u[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	mov	DWORD PTR _block$[ebp], edx

; 603  :       break;

	jmp	SHORT $LN2@intra_reco
$LN7@intra_reco:

; 604  :     case COLOR_V:
; 605  :       block = &lcu->rec.v[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	mov	DWORD PTR _block$[ebp], edx
$LN2@intra_reco:

; 606  :       break;
; 607  :   }
; 608  :   kvz_pixels_blit(pred, block , width, width, width, lcu_width);

	mov	eax, DWORD PTR _lcu_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pred$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 609  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@intra_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2036				; 000007f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@intra_reco:
	DD	5
	DD	$LN21@intra_reco
$LN21@intra_reco:
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN16@intra_reco
	DD	-92					; ffffffa4H
	DD	8
	DD	$LN17@intra_reco
	DD	-108					; ffffff94H
	DD	8
	DD	$LN18@intra_reco
	DD	-380					; fffffe84H
	DD	261					; 00000105H
	DD	$LN19@intra_reco
	DD	-1412					; fffffa7cH
	DD	1024					; 00000400H
	DD	$LN20@intra_reco
$LN20@intra_reco:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN19@intra_reco:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN18@intra_reco:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN17@intra_reco:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN16@intra_reco:
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_intra_recon_tb_leaf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_build_reference_inner
_TEXT	SEGMENT
tv159 = -404						; size = 4
tv150 = -404						; size = 4
tv135 = -404						; size = 4
tv161 = -400						; size = 4
tv152 = -400						; size = 4
tv137 = -400						; size = 4
tv294 = -396						; size = 4
tv284 = -396						; size = 4
tv222 = -396						; size = 4
tv212 = -396						; size = 4
tv154 = -396						; size = 4
tv139 = -396						; size = 4
tv92 = -396						; size = 4
tv81 = -396						; size = 4
_px_available_top$ = -196				; size = 4
_nearest_pixel$ = -181					; size = 1
_i$ = -172						; size = 4
_px_available_left$ = -160				; size = 4
_left_stride$ = -148					; size = 4
_left_border$ = -136					; size = 4
_top_border$ = -124					; size = 4
_rec_ref$ = -112					; size = 4
_top_ref$ = -100					; size = 4
_left_ref$ = -88					; size = 4
_px$ = -76						; size = 8
_lcu_px$ = -60						; size = 8
_width$ = -41						; size = 1
_is_chroma$ = -32					; size = 4
_out_top_ref$ = -20					; size = 4
_out_left_ref$ = -8					; size = 4
_log2_width$ = 8					; size = 1
_color$ = 12						; size = 4
_luma_px$ = 16						; size = 4
_pic_px$ = 20						; size = 4
_lcu$ = 24						; size = 4
_refs$ = 28						; size = 4
_kvz_intra_build_reference_inner PROC			; COMDAT

; 436  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 437  :   assert(log2_width >= 2 && log2_width <= 5);

	movsx	eax, BYTE PTR _log2_width$[ebp]
	cmp	eax, 2
	jl	SHORT $LN19@kvz_intra_
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	cmp	ecx, 5
	jle	SHORT $LN20@kvz_intra_
$LN19@kvz_intra_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_intra_build_reference_inner@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@JODNLOPI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@kvz_intra_:

; 438  : 
; 439  :   refs->filtered_initialized = false;

	mov	eax, DWORD PTR _refs$[ebp]
	mov	BYTE PTR [eax+260], 0

; 440  :   kvz_pixel * __restrict out_left_ref = &refs->ref.left[0];

	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _refs$[ebp]
	mov	DWORD PTR _out_left_ref$[ebp], ecx

; 441  :   kvz_pixel * __restrict out_top_ref = &refs->ref.top[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _refs$[ebp]
	lea	eax, DWORD PTR [edx+ecx+65]
	mov	DWORD PTR _out_top_ref$[ebp], eax

; 442  : 
; 443  :   const int is_chroma = color != COLOR_Y ? 1 : 0;

	cmp	DWORD PTR _color$[ebp], 0
	je	SHORT $LN21@kvz_intra_
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN22@kvz_intra_
$LN21@kvz_intra_:
	mov	DWORD PTR tv81[ebp], 0
$LN22@kvz_intra_:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _is_chroma$[ebp], eax

; 444  :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 445  : 
; 446  :   // Convert luma coordinates to chroma coordinates for chroma.
; 447  :   const vector2d_t lcu_px = {

	mov	eax, DWORD PTR _luma_px$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN53@kvz_intra_
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN53@kvz_intra_:
	mov	DWORD PTR _lcu_px$[ebp], ecx
	mov	eax, DWORD PTR _luma_px$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN54@kvz_intra_
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN54@kvz_intra_:
	mov	DWORD PTR _lcu_px$[ebp+4], ecx

; 448  :     luma_px->x % LCU_WIDTH,
; 449  :     luma_px->y % LCU_WIDTH
; 450  :   };
; 451  :   const vector2d_t px = {

	mov	eax, DWORD PTR _lcu_px$[ebp]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _px$[ebp], eax
	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _px$[ebp+4], eax

; 452  :     lcu_px.x >> is_chroma,
; 453  :     lcu_px.y >> is_chroma,
; 454  :   };
; 455  : 
; 456  :   // Init pointers to LCUs reconstruction buffers, such that index 0 refers to block coordinate 0.
; 457  :   const kvz_pixel * __restrict left_ref = !color ? &lcu->left_ref.y[1] : (color == 1) ? &lcu->left_ref.u[1] : &lcu->left_ref.v[1];

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN23@kvz_intra_
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN24@kvz_intra_
$LN23@kvz_intra_:
	mov	DWORD PTR tv92[ebp], 0
$LN24@kvz_intra_:
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN27@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+195]
	mov	DWORD PTR tv137[ebp], edx
	jmp	SHORT $LN28@kvz_intra_
$LN27@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN25@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+292]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN26@kvz_intra_
$LN25@kvz_intra_:
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+341]
	mov	DWORD PTR tv135[ebp], edx
$LN26@kvz_intra_:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv137[ebp], eax
$LN28@kvz_intra_:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _left_ref$[ebp], ecx

; 458  :   const kvz_pixel * __restrict top_ref = !color ? &lcu->top_ref.y[1] : (color == 1) ? &lcu->top_ref.u[1] : &lcu->top_ref.v[1];

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN29@kvz_intra_
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN30@kvz_intra_
$LN29@kvz_intra_:
	mov	DWORD PTR tv139[ebp], 0
$LN30@kvz_intra_:
	cmp	DWORD PTR tv139[ebp], 0
	je	SHORT $LN33@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	add	eax, DWORD PTR _lcu$[ebp]
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN34@kvz_intra_
$LN33@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN31@kvz_intra_
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+97]
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN32@kvz_intra_
$LN31@kvz_intra_:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+146]
	mov	DWORD PTR tv150[ebp], eax
$LN32@kvz_intra_:
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv152[ebp], ecx
$LN34@kvz_intra_:
	mov	edx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _top_ref$[ebp], edx

; 459  :   const kvz_pixel * __restrict rec_ref = !color ? lcu->rec.y : (color == 1) ? lcu->rec.u : lcu->rec.v;

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN35@kvz_intra_
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN36@kvz_intra_
$LN35@kvz_intra_:
	mov	DWORD PTR tv154[ebp], 0
$LN36@kvz_intra_:
	cmp	DWORD PTR tv154[ebp], 0
	je	SHORT $LN39@kvz_intra_
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 6540				; 0000198cH
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN40@kvz_intra_
$LN39@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN37@kvz_intra_
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 10636				; 0000298cH
	mov	DWORD PTR tv159[ebp], ecx
	jmp	SHORT $LN38@kvz_intra_
$LN37@kvz_intra_:
	mov	edx, DWORD PTR _lcu$[ebp]
	add	edx, 11660				; 00002d8cH
	mov	DWORD PTR tv159[ebp], edx
$LN38@kvz_intra_:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv161[ebp], eax
$LN40@kvz_intra_:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR _rec_ref$[ebp], ecx

; 460  : 
; 461  :   // Init top borders pointer to point to the correct place in the correct reference array.
; 462  :   const kvz_pixel * __restrict top_border;
; 463  :   if (px.y) {

	cmp	DWORD PTR _px$[ebp+4], 0
	je	SHORT $LN14@kvz_intra_

; 464  :     top_border = &rec_ref[px.x + (px.y - 1) * (LCU_WIDTH >> is_chroma)];

	mov	eax, DWORD PTR _px$[ebp+4]
	sub	eax, 1
	mov	edx, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	imul	eax, edx
	add	eax, DWORD PTR _px$[ebp]
	add	eax, DWORD PTR _rec_ref$[ebp]
	mov	DWORD PTR _top_border$[ebp], eax

; 465  :   } else {

	jmp	SHORT $LN15@kvz_intra_
$LN14@kvz_intra_:

; 466  :     top_border = &top_ref[px.x];

	mov	eax, DWORD PTR _top_ref$[ebp]
	add	eax, DWORD PTR _px$[ebp]
	mov	DWORD PTR _top_border$[ebp], eax
$LN15@kvz_intra_:

; 467  : 
; 468  :   }
; 469  : 
; 470  :   // Init left borders pointer to point to the correct place in the correct reference array.
; 471  :   const kvz_pixel * __restrict left_border;
; 472  :   int left_stride; // Distance between reference samples.
; 473  : 
; 474  :   // Generate top-left reference.
; 475  :   // If the block is at an LCU border, the top-left must be copied from
; 476  :   // the border that points to the LCUs 1D reference buffer.
; 477  :   if (px.x) {

	cmp	DWORD PTR _px$[ebp], 0
	je	SHORT $LN16@kvz_intra_

; 478  :     left_border = &rec_ref[px.x - 1 + px.y * (LCU_WIDTH >> is_chroma)];

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	imul	eax, DWORD PTR _px$[ebp+4]
	add	eax, DWORD PTR _rec_ref$[ebp]
	mov	ecx, DWORD PTR _px$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _left_border$[ebp], edx

; 479  :     left_stride = LCU_WIDTH >> is_chroma;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _left_stride$[ebp], eax

; 480  :     out_left_ref[0] = top_border[-1];

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out_left_ref$[ebp]
	mov	esi, DWORD PTR _top_border$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl

; 481  :     out_top_ref[0] = top_border[-1];

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out_top_ref$[ebp]
	mov	esi, DWORD PTR _top_border$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl

; 482  :   } else {

	jmp	SHORT $LN17@kvz_intra_
$LN16@kvz_intra_:

; 483  :     left_border = &left_ref[px.y];

	mov	eax, DWORD PTR _left_ref$[ebp]
	add	eax, DWORD PTR _px$[ebp+4]
	mov	DWORD PTR _left_border$[ebp], eax

; 484  :     left_stride = 1;

	mov	DWORD PTR _left_stride$[ebp], 1

; 485  :     out_left_ref[0] = left_border[-1 * left_stride];

	imul	eax, DWORD PTR _left_stride$[ebp], -1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	mov	esi, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al

; 486  :     out_top_ref[0] = left_border[-1 * left_stride];

	imul	eax, DWORD PTR _left_stride$[ebp], -1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_top_ref$[ebp]
	mov	esi, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al
$LN17@kvz_intra_:

; 487  :   }
; 488  : 
; 489  :   // Generate left reference.
; 490  : 
; 491  :   // Get the number of reference pixels based on the PU coordinate within the LCU.
; 492  :   int px_available_left = num_ref_pixels_left[lcu_px.y / 4][lcu_px.x / 4] >> is_chroma;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	cdq
	and	edx, 3
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 2
	shl	ecx, 4
	mov	eax, DWORD PTR _lcu_px$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	edx, BYTE PTR _num_ref_pixels_left[ecx+eax]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	mov	DWORD PTR _px_available_left$[ebp], edx

; 493  : 
; 494  :   // Limit the number of available pixels based on block size and dimensions
; 495  :   // of the picture.
; 496  :   px_available_left = MIN(px_available_left, width * 2);

	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _px_available_left$[ebp], eax
	jge	SHORT $LN41@kvz_intra_
	mov	ecx, DWORD PTR _px_available_left$[ebp]
	mov	DWORD PTR tv212[ebp], ecx
	jmp	SHORT $LN42@kvz_intra_
$LN41@kvz_intra_:
	movsx	edx, BYTE PTR _width$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv212[ebp], edx
$LN42@kvz_intra_:
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR _px_available_left$[ebp], eax

; 497  :   px_available_left = MIN(px_available_left, (pic_px->y - luma_px->y) >> is_chroma);

	mov	eax, DWORD PTR _pic_px$[ebp]
	mov	ecx, DWORD PTR _luma_px$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	cmp	DWORD PTR _px_available_left$[ebp], edx
	jge	SHORT $LN43@kvz_intra_
	mov	eax, DWORD PTR _px_available_left$[ebp]
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN44@kvz_intra_
$LN43@kvz_intra_:
	mov	ecx, DWORD PTR _pic_px$[ebp]
	mov	edx, DWORD PTR _luma_px$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv222[ebp], eax
$LN44@kvz_intra_:
	mov	ecx, DWORD PTR tv222[ebp]
	mov	DWORD PTR _px_available_left$[ebp], ecx

; 498  : 
; 499  :   // Copy pixels from coded CUs.
; 500  :   int i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN4@kvz_intra_:

; 501  :   do {
; 502  :     out_left_ref[i + 1] = left_border[(i + 0) * left_stride];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _left_stride$[ebp]
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+1], al

; 503  :     out_left_ref[i + 2] = left_border[(i + 1) * left_stride];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _left_stride$[ebp]
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+2], al

; 504  :     out_left_ref[i + 3] = left_border[(i + 2) * left_stride];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _left_stride$[ebp]
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+3], al

; 505  :     out_left_ref[i + 4] = left_border[(i + 3) * left_stride];

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _left_stride$[ebp]
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+4], al

; 506  :     i += 4;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax

; 507  :   } while (i < px_available_left);

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _px_available_left$[ebp]
	jl	$LN4@kvz_intra_

; 508  : 
; 509  :   // Extend the last pixel for the rest of the reference values.
; 510  :   kvz_pixel nearest_pixel = out_left_ref[i];

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _nearest_pixel$[ebp], cl

; 511  :   for (; i < width * 2; i += 4) {

	jmp	SHORT $LN7@kvz_intra_
$LN5@kvz_intra_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN7@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN6@kvz_intra_

; 512  :     out_left_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+1], cl

; 513  :     out_left_ref[i + 2] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+2], cl

; 514  :     out_left_ref[i + 3] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+3], cl

; 515  :     out_left_ref[i + 4] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+4], cl

; 516  :   }

	jmp	SHORT $LN5@kvz_intra_
$LN6@kvz_intra_:

; 517  : 
; 518  :   // Generate top reference.
; 519  : 
; 520  :   // Get the number of reference pixels based on the PU coordinate within the LCU.
; 521  :   int px_available_top = num_ref_pixels_top[lcu_px.y / 4][lcu_px.x / 4] >> is_chroma;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	cdq
	and	edx, 3
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 2
	shl	ecx, 4
	mov	eax, DWORD PTR _lcu_px$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	edx, BYTE PTR _num_ref_pixels_top[ecx+eax]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	mov	DWORD PTR _px_available_top$[ebp], edx

; 522  : 
; 523  :   // Limit the number of available pixels based on block size and dimensions
; 524  :   // of the picture.
; 525  :   px_available_top = MIN(px_available_top, width * 2);

	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _px_available_top$[ebp], eax
	jge	SHORT $LN45@kvz_intra_
	mov	ecx, DWORD PTR _px_available_top$[ebp]
	mov	DWORD PTR tv284[ebp], ecx
	jmp	SHORT $LN46@kvz_intra_
$LN45@kvz_intra_:
	movsx	edx, BYTE PTR _width$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv284[ebp], edx
$LN46@kvz_intra_:
	mov	eax, DWORD PTR tv284[ebp]
	mov	DWORD PTR _px_available_top$[ebp], eax

; 526  :   px_available_top = MIN(px_available_top, (pic_px->x - luma_px->x) >> is_chroma);

	mov	eax, DWORD PTR _pic_px$[ebp]
	mov	ecx, DWORD PTR _luma_px$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	cmp	DWORD PTR _px_available_top$[ebp], edx
	jge	SHORT $LN47@kvz_intra_
	mov	eax, DWORD PTR _px_available_top$[ebp]
	mov	DWORD PTR tv294[ebp], eax
	jmp	SHORT $LN48@kvz_intra_
$LN47@kvz_intra_:
	mov	ecx, DWORD PTR _pic_px$[ebp]
	mov	edx, DWORD PTR _luma_px$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv294[ebp], eax
$LN48@kvz_intra_:
	mov	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR _px_available_top$[ebp], ecx

; 527  : 
; 528  :   // Copy all the pixels we can.
; 529  :   i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN10@kvz_intra_:

; 530  :   do {
; 531  :     memcpy(out_top_ref + i + 1, top_border + i, 4 * sizeof(kvz_pixel));

	push	4
	mov	eax, DWORD PTR _top_border$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _out_top_ref$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 532  :     i += 4;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax

; 533  :   } while (i < px_available_top);

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _px_available_top$[ebp]
	jl	SHORT $LN10@kvz_intra_

; 534  : 
; 535  :   // Extend the last pixel for the rest of the reference values.
; 536  :   nearest_pixel = out_top_ref[i];

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _nearest_pixel$[ebp], cl

; 537  :   for (; i < width * 2; i += 4) {

	jmp	SHORT $LN13@kvz_intra_
$LN11@kvz_intra_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN13@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@kvz_intra_

; 538  :     out_top_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+1], cl

; 539  :     out_top_ref[i + 2] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+2], cl

; 540  :     out_top_ref[i + 3] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+3], cl

; 541  :     out_top_ref[i + 4] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _nearest_pixel$[ebp]
	mov	BYTE PTR [eax+4], cl

; 542  :   }

	jmp	SHORT $LN11@kvz_intra_
$LN1@kvz_intra_:

; 543  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@kvz_intra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN52@kvz_intra_:
	DD	2
	DD	$LN51@kvz_intra_
$LN51@kvz_intra_:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN49@kvz_intra_
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN50@kvz_intra_
$LN50@kvz_intra_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN49@kvz_intra_:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_intra_build_reference_inner ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_build_reference_any
_TEXT	SEGMENT
tv159 = -512						; size = 4
tv150 = -512						; size = 4
tv135 = -512						; size = 4
tv161 = -508						; size = 4
tv152 = -508						; size = 4
tv137 = -508						; size = 4
tv351 = -504						; size = 4
tv327 = -504						; size = 4
tv285 = -504						; size = 4
tv230 = -504						; size = 4
tv206 = -504						; size = 4
tv196 = -504						; size = 4
tv154 = -504						; size = 4
tv139 = -504						; size = 4
tv92 = -504						; size = 4
tv81 = -504						; size = 4
_i$1 = -304						; size = 4
_nearest_pixel$2 = -289					; size = 1
_i$3 = -280						; size = 4
_nearest_pixel$4 = -265					; size = 1
_i$5 = -256						; size = 4
_px_available_top$6 = -244				; size = 4
_i$7 = -232						; size = 4
_nearest_pixel$8 = -217					; size = 1
_i$9 = -208						; size = 4
_nearest_pixel$10 = -193				; size = 1
_i$11 = -184						; size = 4
_px_available_left$12 = -172				; size = 4
_left_stride$ = -160					; size = 4
_left_border$ = -148					; size = 4
_top_border$ = -136					; size = 4
_rec_ref$ = -124					; size = 4
_top_ref$ = -112					; size = 4
_left_ref$ = -100					; size = 4
_px$ = -88						; size = 8
_lcu_px$ = -72						; size = 8
_width$ = -53						; size = 1
_is_chroma$ = -44					; size = 4
_dc_val$ = -29						; size = 1
_out_top_ref$ = -20					; size = 4
_out_left_ref$ = -8					; size = 4
_log2_width$ = 8					; size = 1
_color$ = 12						; size = 4
_luma_px$ = 16						; size = 4
_pic_px$ = 20						; size = 4
_lcu$ = 24						; size = 4
_refs$ = 28						; size = 4
_kvz_intra_build_reference_any PROC			; COMDAT

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 313  :   assert(log2_width >= 2 && log2_width <= 5);

	movsx	eax, BYTE PTR _log2_width$[ebp]
	cmp	eax, 2
	jl	SHORT $LN33@kvz_intra_
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	cmp	ecx, 5
	jle	SHORT $LN34@kvz_intra_
$LN33@kvz_intra_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_intra_build_reference_any@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@JODNLOPI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@kvz_intra_:

; 314  : 
; 315  :   refs->filtered_initialized = false;

	mov	eax, DWORD PTR _refs$[ebp]
	mov	BYTE PTR [eax+260], 0

; 316  :   kvz_pixel *out_left_ref = &refs->ref.left[0];

	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _refs$[ebp]
	mov	DWORD PTR _out_left_ref$[ebp], ecx

; 317  :   kvz_pixel *out_top_ref = &refs->ref.top[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _refs$[ebp]
	lea	eax, DWORD PTR [edx+ecx+65]
	mov	DWORD PTR _out_top_ref$[ebp], eax

; 318  : 
; 319  :   const kvz_pixel dc_val = 1 << (KVZ_BIT_DEPTH - 1);

	mov	BYTE PTR _dc_val$[ebp], 128		; 00000080H

; 320  :   const int is_chroma = color != COLOR_Y ? 1 : 0;

	cmp	DWORD PTR _color$[ebp], 0
	je	SHORT $LN35@kvz_intra_
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN36@kvz_intra_
$LN35@kvz_intra_:
	mov	DWORD PTR tv81[ebp], 0
$LN36@kvz_intra_:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _is_chroma$[ebp], eax

; 321  :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 322  : 
; 323  :   // Convert luma coordinates to chroma coordinates for chroma.
; 324  :   const vector2d_t lcu_px = {

	mov	eax, DWORD PTR _luma_px$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN71@kvz_intra_
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN71@kvz_intra_:
	mov	DWORD PTR _lcu_px$[ebp], ecx
	mov	eax, DWORD PTR _luma_px$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN72@kvz_intra_
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN72@kvz_intra_:
	mov	DWORD PTR _lcu_px$[ebp+4], ecx

; 325  :     luma_px->x % LCU_WIDTH,
; 326  :     luma_px->y % LCU_WIDTH
; 327  :   };
; 328  :   const vector2d_t px = {

	mov	eax, DWORD PTR _lcu_px$[ebp]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _px$[ebp], eax
	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _px$[ebp+4], eax

; 329  :     lcu_px.x >> is_chroma,
; 330  :     lcu_px.y >> is_chroma,
; 331  :   };
; 332  : 
; 333  :   // Init pointers to LCUs reconstruction buffers, such that index 0 refers to block coordinate 0.
; 334  :   const kvz_pixel *left_ref = !color ? &lcu->left_ref.y[1] : (color == 1) ? &lcu->left_ref.u[1] : &lcu->left_ref.v[1];

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN37@kvz_intra_
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN38@kvz_intra_
$LN37@kvz_intra_:
	mov	DWORD PTR tv92[ebp], 0
$LN38@kvz_intra_:
	cmp	DWORD PTR tv92[ebp], 0
	je	SHORT $LN41@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+195]
	mov	DWORD PTR tv137[ebp], edx
	jmp	SHORT $LN42@kvz_intra_
$LN41@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN39@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+292]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN40@kvz_intra_
$LN39@kvz_intra_:
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+341]
	mov	DWORD PTR tv135[ebp], edx
$LN40@kvz_intra_:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv137[ebp], eax
$LN42@kvz_intra_:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _left_ref$[ebp], ecx

; 335  :   const kvz_pixel *top_ref = !color ? &lcu->top_ref.y[1] : (color == 1) ? &lcu->top_ref.u[1] : &lcu->top_ref.v[1];

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN43@kvz_intra_
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN44@kvz_intra_
$LN43@kvz_intra_:
	mov	DWORD PTR tv139[ebp], 0
$LN44@kvz_intra_:
	cmp	DWORD PTR tv139[ebp], 0
	je	SHORT $LN47@kvz_intra_
	mov	eax, 1
	shl	eax, 0
	add	eax, DWORD PTR _lcu$[ebp]
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN48@kvz_intra_
$LN47@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN45@kvz_intra_
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+97]
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN46@kvz_intra_
$LN45@kvz_intra_:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+146]
	mov	DWORD PTR tv150[ebp], eax
$LN46@kvz_intra_:
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv152[ebp], ecx
$LN48@kvz_intra_:
	mov	edx, DWORD PTR tv152[ebp]
	mov	DWORD PTR _top_ref$[ebp], edx

; 336  :   const kvz_pixel *rec_ref = !color ? lcu->rec.y : (color == 1) ? lcu->rec.u : lcu->rec.v;

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN49@kvz_intra_
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN50@kvz_intra_
$LN49@kvz_intra_:
	mov	DWORD PTR tv154[ebp], 0
$LN50@kvz_intra_:
	cmp	DWORD PTR tv154[ebp], 0
	je	SHORT $LN53@kvz_intra_
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 6540				; 0000198cH
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN54@kvz_intra_
$LN53@kvz_intra_:
	cmp	DWORD PTR _color$[ebp], 1
	jne	SHORT $LN51@kvz_intra_
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 10636				; 0000298cH
	mov	DWORD PTR tv159[ebp], ecx
	jmp	SHORT $LN52@kvz_intra_
$LN51@kvz_intra_:
	mov	edx, DWORD PTR _lcu$[ebp]
	add	edx, 11660				; 00002d8cH
	mov	DWORD PTR tv159[ebp], edx
$LN52@kvz_intra_:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv161[ebp], eax
$LN54@kvz_intra_:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR _rec_ref$[ebp], ecx

; 337  : 
; 338  :   // Init top borders pointer to point to the correct place in the correct reference array.
; 339  :   const kvz_pixel *top_border;
; 340  :   if (px.y) {

	cmp	DWORD PTR _px$[ebp+4], 0
	je	SHORT $LN20@kvz_intra_

; 341  :     top_border = &rec_ref[px.x + (px.y - 1) * (LCU_WIDTH >> is_chroma)];

	mov	eax, DWORD PTR _px$[ebp+4]
	sub	eax, 1
	mov	edx, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	imul	eax, edx
	add	eax, DWORD PTR _px$[ebp]
	add	eax, DWORD PTR _rec_ref$[ebp]
	mov	DWORD PTR _top_border$[ebp], eax

; 342  :   } else {

	jmp	SHORT $LN21@kvz_intra_
$LN20@kvz_intra_:

; 343  :     top_border = &top_ref[px.x];

	mov	eax, DWORD PTR _top_ref$[ebp]
	add	eax, DWORD PTR _px$[ebp]
	mov	DWORD PTR _top_border$[ebp], eax
$LN21@kvz_intra_:

; 344  :   }
; 345  : 
; 346  :   // Init left borders pointer to point to the correct place in the correct reference array.
; 347  :   const kvz_pixel *left_border;
; 348  :   int left_stride; // Distance between reference samples.
; 349  :   if (px.x) {

	cmp	DWORD PTR _px$[ebp], 0
	je	SHORT $LN22@kvz_intra_

; 350  :     left_border = &rec_ref[px.x - 1 + px.y * (LCU_WIDTH >> is_chroma)];

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	imul	eax, DWORD PTR _px$[ebp+4]
	add	eax, DWORD PTR _rec_ref$[ebp]
	mov	ecx, DWORD PTR _px$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	mov	DWORD PTR _left_border$[ebp], edx

; 351  :     left_stride = LCU_WIDTH >> is_chroma;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR _left_stride$[ebp], eax

; 352  :   } else {

	jmp	SHORT $LN23@kvz_intra_
$LN22@kvz_intra_:

; 353  :     left_border = &left_ref[px.y];

	mov	eax, DWORD PTR _left_ref$[ebp]
	add	eax, DWORD PTR _px$[ebp+4]
	mov	DWORD PTR _left_border$[ebp], eax

; 354  :     left_stride = 1;

	mov	DWORD PTR _left_stride$[ebp], 1
$LN23@kvz_intra_:

; 355  :   }
; 356  : 
; 357  :   // Generate left reference.
; 358  :   if (luma_px->x > 0) {

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN24@kvz_intra_

; 359  :     // Get the number of reference pixels based on the PU coordinate within the LCU.
; 360  :     int px_available_left = num_ref_pixels_left[lcu_px.y / 4][lcu_px.x / 4] >> is_chroma;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	cdq
	and	edx, 3
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 2
	shl	ecx, 4
	mov	eax, DWORD PTR _lcu_px$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	edx, BYTE PTR _num_ref_pixels_left[ecx+eax]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	mov	DWORD PTR _px_available_left$12[ebp], edx

; 361  : 
; 362  :     // Limit the number of available pixels based on block size and dimensions
; 363  :     // of the picture.
; 364  :     px_available_left = MIN(px_available_left, width * 2);

	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _px_available_left$12[ebp], eax
	jge	SHORT $LN55@kvz_intra_
	mov	ecx, DWORD PTR _px_available_left$12[ebp]
	mov	DWORD PTR tv196[ebp], ecx
	jmp	SHORT $LN56@kvz_intra_
$LN55@kvz_intra_:
	movsx	edx, BYTE PTR _width$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv196[ebp], edx
$LN56@kvz_intra_:
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR _px_available_left$12[ebp], eax

; 365  :     px_available_left = MIN(px_available_left, (pic_px->y - luma_px->y) >> is_chroma);

	mov	eax, DWORD PTR _pic_px$[ebp]
	mov	ecx, DWORD PTR _luma_px$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	cmp	DWORD PTR _px_available_left$12[ebp], edx
	jge	SHORT $LN57@kvz_intra_
	mov	eax, DWORD PTR _px_available_left$12[ebp]
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN58@kvz_intra_
$LN57@kvz_intra_:
	mov	ecx, DWORD PTR _pic_px$[ebp]
	mov	edx, DWORD PTR _luma_px$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv206[ebp], eax
$LN58@kvz_intra_:
	mov	ecx, DWORD PTR tv206[ebp]
	mov	DWORD PTR _px_available_left$12[ebp], ecx

; 366  : 
; 367  :     // Copy pixels from coded CUs.
; 368  :     for (int i = 0; i < px_available_left; ++i) {

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN4@kvz_intra_
$LN2@kvz_intra_:
	mov	eax, DWORD PTR _i$11[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11[ebp], eax
$LN4@kvz_intra_:
	mov	eax, DWORD PTR _i$11[ebp]
	cmp	eax, DWORD PTR _px_available_left$12[ebp]
	jge	SHORT $LN3@kvz_intra_

; 369  :       out_left_ref[i + 1] = left_border[i * left_stride];

	mov	eax, DWORD PTR _i$11[ebp]
	imul	eax, DWORD PTR _left_stride$[ebp]
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	add	ecx, DWORD PTR _i$11[ebp]
	mov	edx, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+1], al

; 370  :     }

	jmp	SHORT $LN2@kvz_intra_
$LN3@kvz_intra_:

; 371  :     // Extend the last pixel for the rest of the reference values.
; 372  :     kvz_pixel nearest_pixel = out_left_ref[px_available_left];

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _px_available_left$12[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _nearest_pixel$10[ebp], cl

; 373  :     for (int i = px_available_left; i < width * 2; ++i) {

	mov	eax, DWORD PTR _px_available_left$12[ebp]
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN7@kvz_intra_
$LN5@kvz_intra_:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN7@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$9[ebp], eax
	jge	SHORT $LN6@kvz_intra_

; 374  :       out_left_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$9[ebp]
	mov	cl, BYTE PTR _nearest_pixel$10[ebp]
	mov	BYTE PTR [eax+1], cl

; 375  :     }

	jmp	SHORT $LN5@kvz_intra_
$LN6@kvz_intra_:

; 376  :   } else {

	jmp	SHORT $LN25@kvz_intra_
$LN24@kvz_intra_:

; 377  :     // If we are on the left edge, extend the first pixel of the top row.
; 378  :     kvz_pixel nearest_pixel = luma_px->y > 0 ? top_border[0] : dc_val;

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN59@kvz_intra_
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _top_border$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR tv230[ebp], ecx
	jmp	SHORT $LN60@kvz_intra_
$LN59@kvz_intra_:
	movzx	edx, BYTE PTR _dc_val$[ebp]
	mov	DWORD PTR tv230[ebp], edx
$LN60@kvz_intra_:
	mov	al, BYTE PTR tv230[ebp]
	mov	BYTE PTR _nearest_pixel$8[ebp], al

; 379  :     for (int i = 0; i < width * 2; i++) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN10@kvz_intra_
$LN8@kvz_intra_:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN10@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$7[ebp], eax
	jge	SHORT $LN25@kvz_intra_

; 380  :       out_left_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_left_ref$[ebp]
	add	eax, DWORD PTR _i$7[ebp]
	mov	cl, BYTE PTR _nearest_pixel$8[ebp]
	mov	BYTE PTR [eax+1], cl

; 381  :     }

	jmp	SHORT $LN8@kvz_intra_
$LN25@kvz_intra_:

; 382  :   }
; 383  : 
; 384  :   // Generate top-left reference.
; 385  :   if (luma_px->x > 0 && luma_px->y > 0) {

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN26@kvz_intra_
	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	$LN26@kvz_intra_

; 386  :     // If the block is at an LCU border, the top-left must be copied from
; 387  :     // the border that points to the LCUs 1D reference buffer.
; 388  :     if (px.x == 0) {

	cmp	DWORD PTR _px$[ebp], 0
	jne	SHORT $LN28@kvz_intra_

; 389  :       out_left_ref[0] = left_border[-1 * left_stride];

	imul	eax, DWORD PTR _left_stride$[ebp], -1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	mov	esi, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al

; 390  :       out_top_ref[0] = left_border[-1 * left_stride];

	imul	eax, DWORD PTR _left_stride$[ebp], -1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_top_ref$[ebp]
	mov	esi, DWORD PTR _left_border$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al

; 391  :     } else {

	jmp	SHORT $LN29@kvz_intra_
$LN28@kvz_intra_:

; 392  :       out_left_ref[0] = top_border[-1];

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out_left_ref$[ebp]
	mov	esi, DWORD PTR _top_border$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl

; 393  :       out_top_ref[0] = top_border[-1];

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _out_top_ref$[ebp]
	mov	esi, DWORD PTR _top_border$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
$LN29@kvz_intra_:

; 394  :     }
; 395  :   } else {

	jmp	SHORT $LN27@kvz_intra_
$LN26@kvz_intra_:

; 396  :     // Copy reference clockwise.
; 397  :     out_left_ref[0] = out_left_ref[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_left_ref$[ebp]
	mov	esi, DWORD PTR _out_left_ref$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al

; 398  :     out_top_ref[0] = out_left_ref[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_top_ref$[ebp]
	mov	esi, DWORD PTR _out_left_ref$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al
$LN27@kvz_intra_:

; 399  :   }
; 400  : 
; 401  :   // Generate top reference.
; 402  :   if (luma_px->y > 0) {

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	$LN30@kvz_intra_

; 403  :     // Get the number of reference pixels based on the PU coordinate within the LCU.
; 404  :     int px_available_top = num_ref_pixels_top[lcu_px.y / 4][lcu_px.x / 4] >> is_chroma;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	cdq
	and	edx, 3
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 2
	shl	ecx, 4
	mov	eax, DWORD PTR _lcu_px$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movzx	edx, BYTE PTR _num_ref_pixels_top[ecx+eax]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	mov	DWORD PTR _px_available_top$6[ebp], edx

; 405  : 
; 406  :     // Limit the number of available pixels based on block size and dimensions
; 407  :     // of the picture.
; 408  :     px_available_top = MIN(px_available_top, width * 2);

	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _px_available_top$6[ebp], eax
	jge	SHORT $LN61@kvz_intra_
	mov	ecx, DWORD PTR _px_available_top$6[ebp]
	mov	DWORD PTR tv285[ebp], ecx
	jmp	SHORT $LN62@kvz_intra_
$LN61@kvz_intra_:
	movsx	edx, BYTE PTR _width$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv285[ebp], edx
$LN62@kvz_intra_:
	mov	eax, DWORD PTR tv285[ebp]
	mov	DWORD PTR _px_available_top$6[ebp], eax

; 409  :     px_available_top = MIN(px_available_top, (pic_px->x - luma_px->x) >> is_chroma);

	mov	eax, DWORD PTR _pic_px$[ebp]
	mov	ecx, DWORD PTR _luma_px$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	edx, cl
	cmp	DWORD PTR _px_available_top$6[ebp], edx
	jge	SHORT $LN63@kvz_intra_
	mov	eax, DWORD PTR _px_available_top$6[ebp]
	mov	DWORD PTR tv327[ebp], eax
	jmp	SHORT $LN64@kvz_intra_
$LN63@kvz_intra_:
	mov	ecx, DWORD PTR _pic_px$[ebp]
	mov	edx, DWORD PTR _luma_px$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _is_chroma$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv327[ebp], eax
$LN64@kvz_intra_:
	mov	ecx, DWORD PTR tv327[ebp]
	mov	DWORD PTR _px_available_top$6[ebp], ecx

; 410  : 
; 411  :     // Copy all the pixels we can.
; 412  :     for (int i = 0; i < px_available_top; ++i) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN13@kvz_intra_
$LN11@kvz_intra_:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN13@kvz_intra_:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _px_available_top$6[ebp]
	jge	SHORT $LN12@kvz_intra_

; 413  :       out_top_ref[i + 1] = top_border[i];

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _top_border$[ebp]
	add	ecx, DWORD PTR _i$5[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+1], dl

; 414  :     }

	jmp	SHORT $LN11@kvz_intra_
$LN12@kvz_intra_:

; 415  :     // Extend the last pixel for the rest of the reference values.
; 416  :     kvz_pixel nearest_pixel = top_border[px_available_top - 1];

	mov	eax, DWORD PTR _top_border$[ebp]
	add	eax, DWORD PTR _px_available_top$6[ebp]
	mov	cl, BYTE PTR [eax-1]
	mov	BYTE PTR _nearest_pixel$4[ebp], cl

; 417  :     for (int i = px_available_top; i < width * 2; ++i) {

	mov	eax, DWORD PTR _px_available_top$6[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN16@kvz_intra_
$LN14@kvz_intra_:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN16@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN15@kvz_intra_

; 418  :       out_top_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	cl, BYTE PTR _nearest_pixel$4[ebp]
	mov	BYTE PTR [eax+1], cl

; 419  :     }

	jmp	SHORT $LN14@kvz_intra_
$LN15@kvz_intra_:

; 420  :   } else {

	jmp	SHORT $LN1@kvz_intra_
$LN30@kvz_intra_:

; 421  :     // Extend nearest pixel.
; 422  :     kvz_pixel nearest_pixel = luma_px->x > 0 ? left_border[0] : dc_val;

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN65@kvz_intra_
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _left_border$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR tv351[ebp], ecx
	jmp	SHORT $LN66@kvz_intra_
$LN65@kvz_intra_:
	movzx	edx, BYTE PTR _dc_val$[ebp]
	mov	DWORD PTR tv351[ebp], edx
$LN66@kvz_intra_:
	mov	al, BYTE PTR tv351[ebp]
	mov	BYTE PTR _nearest_pixel$2[ebp], al

; 423  :     for (int i = 0; i < width * 2; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN19@kvz_intra_
$LN17@kvz_intra_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN19@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN1@kvz_intra_

; 424  :       out_top_ref[i + 1] = nearest_pixel;

	mov	eax, DWORD PTR _out_top_ref$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR _nearest_pixel$2[ebp]
	mov	BYTE PTR [eax+1], cl

; 425  :     }

	jmp	SHORT $LN17@kvz_intra_
$LN1@kvz_intra_:

; 426  :   }
; 427  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN70@kvz_intra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN70@kvz_intra_:
	DD	2
	DD	$LN69@kvz_intra_
$LN69@kvz_intra_:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN67@kvz_intra_
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN68@kvz_intra_
$LN68@kvz_intra_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN67@kvz_intra_:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_intra_build_reference_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _intra_pred_dc
_TEXT	SEGMENT
_i$1 = -68						; size = 4
_block_size$ = -56					; size = 4
_dc_val$ = -41						; size = 1
_i$2 = -29						; size = 1
_sum$ = -20						; size = 4
_width$ = -5						; size = 1
_log2_width$ = 8					; size = 1
_ref_top$ = 12						; size = 4
_ref_left$ = 16						; size = 4
_out_block$ = 20					; size = 4
_intra_pred_dc PROC					; COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 235  :   int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 236  : 
; 237  :   int_fast16_t sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 238  :   for (int_fast8_t i = 0; i < width; ++i) {

	mov	BYTE PTR _i$2[ebp], 0
	jmp	SHORT $LN4@intra_pred
$LN2@intra_pred:
	mov	al, BYTE PTR _i$2[ebp]
	add	al, 1
	mov	BYTE PTR _i$2[ebp], al
$LN4@intra_pred:
	movsx	eax, BYTE PTR _i$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN3@intra_pred

; 239  :     sum += ref_top[i + 1];

	movsx	eax, BYTE PTR _i$2[ebp]
	mov	ecx, DWORD PTR _ref_top$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	add	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], edx

; 240  :     sum += ref_left[i + 1];

	movsx	eax, BYTE PTR _i$2[ebp]
	mov	ecx, DWORD PTR _ref_left$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	add	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], edx

; 241  :   }

	jmp	SHORT $LN2@intra_pred
$LN3@intra_pred:

; 242  : 
; 243  :   const kvz_pixel dc_val = (sum + width) >> (log2_width + 1);

	movsx	eax, BYTE PTR _width$[ebp]
	add	eax, DWORD PTR _sum$[ebp]
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	add	ecx, 1
	sar	eax, cl
	mov	BYTE PTR _dc_val$[ebp], al

; 244  :   const int_fast16_t block_size = 1 << (log2_width * 2);

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	shl	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _block_size$[ebp], eax

; 245  : 
; 246  :   for (int_fast16_t i = 0; i < block_size; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@intra_pred
$LN5@intra_pred:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@intra_pred:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _block_size$[ebp]
	jge	SHORT $LN1@intra_pred

; 247  :     out_block[i] = dc_val;

	mov	eax, DWORD PTR _out_block$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR _dc_val$[ebp]
	mov	BYTE PTR [eax], cl

; 248  :   }

	jmp	SHORT $LN5@intra_pred
$LN1@intra_pred:

; 249  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_intra_pred_dc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _intra_post_process_angular
_TEXT	SEGMENT
tv137 = -252						; size = 4
tv138 = -248						; size = 4
tv90 = -244						; size = 4
_ref1$1 = -41						; size = 1
_val$2 = -29						; size = 1
_i$3 = -20						; size = 4
_ref2$ = -5						; size = 1
_width$ = 8						; size = 4
_stride$ = 12						; size = 4
_ref$ = 16						; size = 4
_block$ = 20						; size = 4
_intra_post_process_angular PROC			; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 213  :   kvz_pixel ref2 = ref[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ref$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _ref2$[ebp], al

; 214  :   for (unsigned i = 0; i < width; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@intra_post
$LN2@intra_post:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@intra_post:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	$LN1@intra_post

; 215  :     kvz_pixel val = block[i * stride];

	mov	eax, DWORD PTR _i$3[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _val$2[ebp], dl

; 216  :     kvz_pixel ref1 = ref[i + 1];

	mov	eax, DWORD PTR _ref$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _ref1$1[ebp], cl

; 217  :     block[i * stride] = CLIP_TO_PIXEL(val + ((ref1 - ref2) >> 1));

	movzx	eax, BYTE PTR _val$2[ebp]
	movzx	ecx, BYTE PTR _ref1$1[ebp]
	movzx	edx, BYTE PTR _ref2$[ebp]
	sub	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN6@intra_post
	mov	DWORD PTR tv90[ebp], 255		; 000000ffH
	jmp	SHORT $LN7@intra_post
$LN6@intra_post:
	movzx	eax, BYTE PTR _val$2[ebp]
	movzx	ecx, BYTE PTR _ref1$1[ebp]
	movzx	edx, BYTE PTR _ref2$[ebp]
	sub	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	mov	DWORD PTR tv90[ebp], eax
$LN7@intra_post:
	cmp	DWORD PTR tv90[ebp], 0
	jge	SHORT $LN10@intra_post
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN11@intra_post
$LN10@intra_post:
	movzx	eax, BYTE PTR _val$2[ebp]
	movzx	ecx, BYTE PTR _ref1$1[ebp]
	movzx	edx, BYTE PTR _ref2$[ebp]
	sub	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN8@intra_post
	mov	DWORD PTR tv137[ebp], 255		; 000000ffH
	jmp	SHORT $LN9@intra_post
$LN8@intra_post:
	movzx	eax, BYTE PTR _val$2[ebp]
	movzx	ecx, BYTE PTR _ref1$1[ebp]
	movzx	edx, BYTE PTR _ref2$[ebp]
	sub	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	mov	DWORD PTR tv137[ebp], eax
$LN9@intra_post:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv138[ebp], eax
$LN11@intra_post:
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, DWORD PTR _stride$[ebp]
	mov	edx, DWORD PTR _block$[ebp]
	mov	al, BYTE PTR tv138[ebp]
	mov	BYTE PTR [edx+ecx], al

; 218  :   }

	jmp	$LN2@intra_post
$LN1@intra_post:

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_intra_post_process_angular ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _intra_filter_reference
_TEXT	SEGMENT
_p$1 = -80						; size = 4
_x$2 = -65						; size = 1
_p$3 = -56						; size = 4
_y$4 = -41						; size = 1
_filtered_ref$ = -32					; size = 4
_ref$ = -20						; size = 4
_ref_width$ = -5					; size = 1
_log2_width$ = 8					; size = 1
_refs$ = 12						; size = 4
_intra_filter_reference PROC				; COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 180  :   if (refs->filtered_initialized) {

	mov	eax, DWORD PTR _refs$[ebp]
	movzx	ecx, BYTE PTR [eax+260]
	test	ecx, ecx
	je	SHORT $LN8@intra_filt

; 181  :     return;

	jmp	$LN1@intra_filt

; 182  :   } else {

	jmp	SHORT $LN9@intra_filt
$LN8@intra_filt:

; 183  :     refs->filtered_initialized = true;

	mov	eax, DWORD PTR _refs$[ebp]
	mov	BYTE PTR [eax+260], 1
$LN9@intra_filt:

; 184  :   }
; 185  : 
; 186  :   const int_fast8_t ref_width = 2 * (1 << log2_width) + 1;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	BYTE PTR _ref_width$[ebp], cl

; 187  :   kvz_intra_ref *ref = &refs->ref;

	mov	eax, DWORD PTR _refs$[ebp]
	mov	DWORD PTR _ref$[ebp], eax

; 188  :   kvz_intra_ref *filtered_ref = &refs->filtered_ref;

	mov	eax, DWORD PTR _refs$[ebp]
	add	eax, 130				; 00000082H
	mov	DWORD PTR _filtered_ref$[ebp], eax

; 189  : 
; 190  :   filtered_ref->left[0] = (ref->left[1] + 2 * ref->left[0] + ref->top[1] + 2) / 4;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ref$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _ref$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	lea	edx, DWORD PTR [edx+ecx*2]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ref$[ebp]
	movzx	eax, BYTE PTR [ecx+eax+65]
	lea	eax, DWORD PTR [edx+eax+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _filtered_ref$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 191  :   filtered_ref->top[0] = filtered_ref->left[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _filtered_ref$[ebp]
	mov	esi, DWORD PTR _filtered_ref$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax+65], cl

; 192  : 
; 193  :   for (int_fast8_t y = 1; y < ref_width - 1; ++y) {

	mov	BYTE PTR _y$4[ebp], 1
	jmp	SHORT $LN4@intra_filt
$LN2@intra_filt:
	mov	al, BYTE PTR _y$4[ebp]
	add	al, 1
	mov	BYTE PTR _y$4[ebp], al
$LN4@intra_filt:
	movsx	eax, BYTE PTR _y$4[ebp]
	movsx	ecx, BYTE PTR _ref_width$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LN3@intra_filt

; 194  :     kvz_pixel *p = &ref->left[y];

	movsx	eax, BYTE PTR _y$4[ebp]
	add	eax, DWORD PTR _ref$[ebp]
	mov	DWORD PTR _p$3[ebp], eax

; 195  :     filtered_ref->left[y] = (p[-1] + 2 * p[0] + p[1] + 2) / 4;

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$3[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$3[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	lea	eax, DWORD PTR [eax+ecx+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movsx	edx, BYTE PTR _y$4[ebp]
	mov	ecx, DWORD PTR _filtered_ref$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 196  :   }

	jmp	SHORT $LN2@intra_filt
$LN3@intra_filt:

; 197  :   filtered_ref->left[ref_width - 1] = ref->left[ref_width - 1];

	movsx	eax, BYTE PTR _ref_width$[ebp]
	movsx	ecx, BYTE PTR _ref_width$[ebp]
	mov	edx, DWORD PTR _filtered_ref$[ebp]
	mov	esi, DWORD PTR _ref$[ebp]
	mov	al, BYTE PTR [esi+eax-1]
	mov	BYTE PTR [edx+ecx-1], al

; 198  : 
; 199  :   for (int_fast8_t x = 1; x < ref_width - 1; ++x) {

	mov	BYTE PTR _x$2[ebp], 1
	jmp	SHORT $LN7@intra_filt
$LN5@intra_filt:
	mov	al, BYTE PTR _x$2[ebp]
	add	al, 1
	mov	BYTE PTR _x$2[ebp], al
$LN7@intra_filt:
	movsx	eax, BYTE PTR _x$2[ebp]
	movsx	ecx, BYTE PTR _ref_width$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jge	SHORT $LN6@intra_filt

; 200  :     kvz_pixel *p = &ref->top[x];

	movsx	eax, BYTE PTR _x$2[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	lea	edx, DWORD PTR [ecx+eax+65]
	mov	DWORD PTR _p$1[ebp], edx

; 201  :     filtered_ref->top[x] = (p[-1] + 2 * p[0] + p[1] + 2) / 4;

	mov	eax, 1
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$1[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	lea	eax, DWORD PTR [eax+edx*2]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _p$1[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	lea	eax, DWORD PTR [eax+ecx+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movsx	edx, BYTE PTR _x$2[ebp]
	mov	ecx, DWORD PTR _filtered_ref$[ebp]
	mov	BYTE PTR [ecx+edx+65], al

; 202  :   }

	jmp	SHORT $LN5@intra_filt
$LN6@intra_filt:

; 203  :   filtered_ref->top[ref_width - 1] = ref->top[ref_width - 1];

	movsx	eax, BYTE PTR _ref_width$[ebp]
	movsx	ecx, BYTE PTR _ref_width$[ebp]
	mov	edx, DWORD PTR _filtered_ref$[ebp]
	mov	esi, DWORD PTR _ref$[ebp]
	mov	al, BYTE PTR [esi+eax+64]
	mov	BYTE PTR [edx+ecx+64], al
$LN1@intra_filt:

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_intra_filter_reference ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
;	COMDAT _kvz_math_floor_log2
_TEXT	SEGMENT
tv76 = -244						; size = 4
_shift$1 = -44						; size = 4
_bits$2 = -32						; size = 4
_i$3 = -20						; size = 4
_result$ = -8						; size = 4
_value$ = 8						; size = 4
_kvz_math_floor_log2 PROC				; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4AC213E_kvz_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 45   :   assert(value > 0);

	cmp	DWORD PTR _value$[ebp], 0
	ja	SHORT $LN6@kvz_math_f
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_math_f:

; 46   : 
; 47   :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {

	mov	DWORD PTR _i$3[ebp], 4
	jmp	SHORT $LN4@kvz_math_f
$LN2@kvz_math_f:
	mov	eax, DWORD PTR _i$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@kvz_math_f:
	cmp	DWORD PTR _i$3[ebp], 0
	jl	SHORT $LN3@kvz_math_f

; 50   :     unsigned bits = 1ull << i;

	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _i$3[ebp]
	call	__allshl
	mov	DWORD PTR _bits$2[ebp], eax

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$2[ebp]
	shl	eax, cl
	cmp	DWORD PTR _value$[ebp], eax
	jb	SHORT $LN7@kvz_math_f
	mov	ecx, DWORD PTR _bits$2[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN8@kvz_math_f
$LN7@kvz_math_f:
	mov	DWORD PTR tv76[ebp], 0
$LN8@kvz_math_f:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _shift$1[ebp], edx

; 52   :     result += shift;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _shift$1[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 53   :     value >>= shift;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _shift$1[ebp]
	shr	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 54   :   }

	jmp	SHORT $LN2@kvz_math_f
$LN3@kvz_math_f:

; 55   : 
; 56   :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_math_floor_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_recon_cu
_TEXT	SEGMENT
tv236 = -308						; size = 4
tv226 = -308						; size = 4
tv234 = -304						; size = 4
tv224 = -304						; size = 4
_has_chroma$1 = -101					; size = 1
_has_luma$2 = -89					; size = 1
_child_cbfs$3 = -80					; size = 6
_y2$4 = -64						; size = 4
_x2$5 = -52						; size = 4
_offset$6 = -40						; size = 4
_width$ = -25						; size = 1
_lcu_px$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_mode_luma$ = 24					; size = 1
_mode_chroma$ = 28					; size = 1
_cur_cu$ = 32						; size = 4
_lcu$ = 36						; size = 4
_kvz_intra_recon_cu PROC				; COMDAT

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 633  :   const vector2d_t lcu_px = { SUB_SCU(x), SUB_SCU(y) };

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 634  :   const int8_t width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 635  :   if (cur_cu == NULL) {

	cmp	DWORD PTR _cur_cu$[ebp], 0
	jne	SHORT $LN2@kvz_intra_

; 636  :     cur_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cur_cu$[ebp], eax
$LN2@kvz_intra_:

; 637  :   }
; 638  : 
; 639  :   // Reset CBFs because CBFs might have been set
; 640  :   // for depth earlier
; 641  :   if (mode_luma >= 0) {

	movsx	eax, BYTE PTR _mode_luma$[ebp]
	test	eax, eax
	jl	SHORT $LN3@kvz_intra_

; 642  :     cbf_clear(&cur_cu->cbf, depth, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH
$LN3@kvz_intra_:

; 643  :   }
; 644  :   if (mode_chroma >= 0) {

	movsx	eax, BYTE PTR _mode_chroma$[ebp]
	test	eax, eax
	jl	SHORT $LN4@kvz_intra_

; 645  :     cbf_clear(&cur_cu->cbf, depth, COLOR_U);

	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 646  :     cbf_clear(&cur_cu->cbf, depth, COLOR_V);

	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH
$LN4@kvz_intra_:

; 647  :   }
; 648  : 
; 649  :   if (depth == 0 || cur_cu->tr_depth > depth) {

	cmp	DWORD PTR _depth$[ebp], 0
	je	SHORT $LN7@kvz_intra_
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	cmp	edx, DWORD PTR _depth$[ebp]
	jle	$LN5@kvz_intra_
$LN7@kvz_intra_:

; 650  : 
; 651  :     const int offset = width / 2;

	movsx	eax, BYTE PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset$6[ebp], eax

; 652  :     const int32_t x2 = x + offset;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	mov	DWORD PTR _x2$5[ebp], eax

; 653  :     const int32_t y2 = y + offset;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	mov	DWORD PTR _y2$4[ebp], eax

; 654  : 
; 655  :     kvz_intra_recon_cu(state, x,  y,  depth + 1, mode_luma, mode_chroma, NULL, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mode_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 656  :     kvz_intra_recon_cu(state, x2, y,  depth + 1, mode_luma, mode_chroma, NULL, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mode_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$5[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 657  :     kvz_intra_recon_cu(state, x,  y2, depth + 1, mode_luma, mode_chroma, NULL, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mode_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y2$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 658  :     kvz_intra_recon_cu(state, x2, y2, depth + 1, mode_luma, mode_chroma, NULL, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mode_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y2$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$5[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 659  : 
; 660  :     // Propagate coded block flags from child CUs to parent CU.
; 661  :     uint16_t child_cbfs[3] = {

	mov	eax, DWORD PTR _lcu_px$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$3[ebp], ax
	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	add	ecx, DWORD PTR _offset$6[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$3[ebp+2], ax
	mov	eax, DWORD PTR _lcu_px$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	add	ecx, DWORD PTR _offset$6[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$3[ebp+4], ax

; 662  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y         )->cbf,
; 663  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x,          lcu_px.y + offset)->cbf,
; 664  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y + offset)->cbf,
; 665  :     };
; 666  : 
; 667  :     if (mode_luma != -1 && depth <= MAX_DEPTH) {

	movsx	eax, BYTE PTR _mode_luma$[ebp]
	cmp	eax, -1
	je	SHORT $LN8@kvz_intra_
	cmp	DWORD PTR _depth$[ebp], 3
	jg	SHORT $LN8@kvz_intra_

; 668  :       cbf_set_conditionally(&cur_cu->cbf, child_cbfs, depth, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H
$LN8@kvz_intra_:

; 669  :     }
; 670  :     if (mode_chroma != -1 && depth <= MAX_DEPTH) {

	movsx	eax, BYTE PTR _mode_chroma$[ebp]
	cmp	eax, -1
	je	SHORT $LN9@kvz_intra_
	cmp	DWORD PTR _depth$[ebp], 3
	jg	SHORT $LN9@kvz_intra_

; 671  :       cbf_set_conditionally(&cur_cu->cbf, child_cbfs, depth, COLOR_U);

	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H

; 672  :       cbf_set_conditionally(&cur_cu->cbf, child_cbfs, depth, COLOR_V);

	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H
$LN9@kvz_intra_:

; 673  :     }
; 674  :   } else {

	jmp	$LN1@kvz_intra_
$LN5@kvz_intra_:

; 675  :     const bool has_luma = mode_luma != -1;

	movsx	eax, BYTE PTR _mode_luma$[ebp]
	cmp	eax, -1
	je	SHORT $LN13@kvz_intra_
	mov	DWORD PTR tv224[ebp], 1
	jmp	SHORT $LN14@kvz_intra_
$LN13@kvz_intra_:
	mov	DWORD PTR tv224[ebp], 0
$LN14@kvz_intra_:
	cmp	DWORD PTR tv224[ebp], 0
	jne	SHORT $LN15@kvz_intra_
	mov	DWORD PTR tv226[ebp], 0
	jmp	SHORT $LN16@kvz_intra_
$LN15@kvz_intra_:
	mov	DWORD PTR tv226[ebp], 1
$LN16@kvz_intra_:
	mov	cl, BYTE PTR tv226[ebp]
	mov	BYTE PTR _has_luma$2[ebp], cl

; 676  :     const bool has_chroma = mode_chroma != -1 && x % 8 == 0 && y % 8 == 0;

	movsx	eax, BYTE PTR _mode_chroma$[ebp]
	cmp	eax, -1
	je	SHORT $LN17@kvz_intra_
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN25@kvz_intra_
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN25@kvz_intra_:
	test	ecx, ecx
	jne	SHORT $LN17@kvz_intra_
	mov	edx, DWORD PTR _y$[ebp]
	and	edx, -2147483641			; 80000007H
	jns	SHORT $LN26@kvz_intra_
	dec	edx
	or	edx, -8					; fffffff8H
	inc	edx
$LN26@kvz_intra_:
	test	edx, edx
	jne	SHORT $LN17@kvz_intra_
	mov	DWORD PTR tv234[ebp], 1
	jmp	SHORT $LN18@kvz_intra_
$LN17@kvz_intra_:
	mov	DWORD PTR tv234[ebp], 0
$LN18@kvz_intra_:
	cmp	DWORD PTR tv234[ebp], 0
	jne	SHORT $LN19@kvz_intra_
	mov	DWORD PTR tv236[ebp], 0
	jmp	SHORT $LN20@kvz_intra_
$LN19@kvz_intra_:
	mov	DWORD PTR tv236[ebp], 1
$LN20@kvz_intra_:
	mov	al, BYTE PTR tv236[ebp]
	mov	BYTE PTR _has_chroma$1[ebp], al

; 677  :     // Process a leaf TU.
; 678  :     if (has_luma) {

	movzx	eax, BYTE PTR _has_luma$2[ebp]
	test	eax, eax
	je	SHORT $LN10@kvz_intra_

; 679  :       intra_recon_tb_leaf(state, x, y, depth, mode_luma, lcu, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mode_luma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_intra_recon_tb_leaf
	add	esp, 28					; 0000001cH
$LN10@kvz_intra_:

; 680  :     }
; 681  :     if (has_chroma) {

	movzx	eax, BYTE PTR _has_chroma$1[ebp]
	test	eax, eax
	je	SHORT $LN11@kvz_intra_

; 682  :       intra_recon_tb_leaf(state, x, y, depth, mode_chroma, lcu, COLOR_U);

	push	1
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_intra_recon_tb_leaf
	add	esp, 28					; 0000001cH

; 683  :       intra_recon_tb_leaf(state, x, y, depth, mode_chroma, lcu, COLOR_V);

	push	2
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mode_chroma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_intra_recon_tb_leaf
	add	esp, 28					; 0000001cH
$LN11@kvz_intra_:

; 684  :     }
; 685  : 
; 686  :     kvz_quantize_lcu_residual(state, has_luma, has_chroma, x, y, depth, cur_cu, lcu, false);

	push	0
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _has_chroma$1[ebp]
	push	edx
	movzx	eax, BYTE PTR _has_luma$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H
$LN1@kvz_intra_:

; 687  :   }
; 688  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@kvz_intra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@kvz_intra_:
	DD	2
	DD	$LN23@kvz_intra_
$LN23@kvz_intra_:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN21@kvz_intra_
	DD	-80					; ffffffb0H
	DD	6
	DD	$LN22@kvz_intra_
$LN22@kvz_intra_:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN21@kvz_intra_:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_intra_recon_cu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_predict
_TEXT	SEGMENT
tv131 = -244						; size = 4
_dist_from_vert_or_hor$1 = -44				; size = 4
_filter_threshold$2 = -32				; size = 4
_used_ref$ = -20					; size = 4
_width$ = -5						; size = 1
_refs$ = 8						; size = 4
_log2_width$ = 12					; size = 1
_mode$ = 16						; size = 1
_color$ = 20						; size = 4
_dst$ = 24						; size = 4
_filter_boundary$ = 28					; size = 1
_kvz_intra_predict PROC					; COMDAT

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 260  :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 261  : 
; 262  :   const kvz_intra_ref *used_ref = &refs->ref;

	mov	eax, DWORD PTR _refs$[ebp]
	mov	DWORD PTR _used_ref$[ebp], eax

; 263  :   if (color != COLOR_Y || mode == 1 || width == 4) {

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN4@kvz_intra_
	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 1
	je	SHORT $LN4@kvz_intra_
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	eax, 4
	jne	SHORT $LN2@kvz_intra_
$LN4@kvz_intra_:

; 264  :     // For chroma, DC and 4x4 blocks, always use unfiltered reference.
; 265  :   } else if (mode == 0) {

	jmp	$LN3@kvz_intra_
$LN2@kvz_intra_:
	movsx	eax, BYTE PTR _mode$[ebp]
	test	eax, eax
	jne	SHORT $LN5@kvz_intra_

; 266  :     // Otherwise, use filtered for planar.
; 267  :     used_ref = &refs->filtered_ref;

	mov	eax, DWORD PTR _refs$[ebp]
	add	eax, 130				; 00000082H
	mov	DWORD PTR _used_ref$[ebp], eax

; 268  :   } else {

	jmp	$LN3@kvz_intra_
$LN5@kvz_intra_:

; 269  :     // Angular modes use smoothed reference pixels, unless the mode is close
; 270  :     // to being either vertical or horizontal.
; 271  :     static const int kvz_intra_hor_ver_dist_thres[5] = { 0, 7, 1, 0, 0 };
; 272  :     int filter_threshold = kvz_intra_hor_ver_dist_thres[kvz_math_floor_log2(width) - 2];

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_math_floor_log2
	add	esp, 4
	mov	ecx, DWORD PTR ?kvz_intra_hor_ver_dist_thres@?4??kvz_intra_predict@@9@9[eax*4-8]
	mov	DWORD PTR _filter_threshold$2[ebp], ecx

; 273  :     int dist_from_vert_or_hor = MIN(abs(mode - 26), abs(mode - 10));

	movsx	eax, BYTE PTR _mode$[ebp]
	sub	eax, 26					; 0000001aH
	push	eax
	call	_abs
	add	esp, 4
	mov	esi, eax
	movsx	ecx, BYTE PTR _mode$[ebp]
	sub	ecx, 10					; 0000000aH
	push	ecx
	call	_abs
	add	esp, 4
	cmp	esi, eax
	jge	SHORT $LN20@kvz_intra_
	movsx	edx, BYTE PTR _mode$[ebp]
	sub	edx, 26					; 0000001aH
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN21@kvz_intra_
$LN20@kvz_intra_:
	movsx	eax, BYTE PTR _mode$[ebp]
	sub	eax, 10					; 0000000aH
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR tv131[ebp], eax
$LN21@kvz_intra_:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _dist_from_vert_or_hor$1[ebp], ecx

; 274  :     if (dist_from_vert_or_hor > filter_threshold) {

	mov	eax, DWORD PTR _dist_from_vert_or_hor$1[ebp]
	cmp	eax, DWORD PTR _filter_threshold$2[ebp]
	jle	SHORT $LN3@kvz_intra_

; 275  :       used_ref = &refs->filtered_ref;

	mov	eax, DWORD PTR _refs$[ebp]
	add	eax, 130				; 00000082H
	mov	DWORD PTR _used_ref$[ebp], eax
$LN3@kvz_intra_:

; 276  :     }
; 277  :   }
; 278  : 
; 279  :   if (used_ref == &refs->filtered_ref && !refs->filtered_initialized) {

	mov	eax, DWORD PTR _refs$[ebp]
	add	eax, 130				; 00000082H
	cmp	DWORD PTR _used_ref$[ebp], eax
	jne	SHORT $LN8@kvz_intra_
	mov	eax, DWORD PTR _refs$[ebp]
	movzx	ecx, BYTE PTR [eax+260]
	test	ecx, ecx
	jne	SHORT $LN8@kvz_intra_

; 280  :     intra_filter_reference(log2_width, refs);

	mov	eax, DWORD PTR _refs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _log2_width$[ebp]
	push	ecx
	call	_intra_filter_reference
	add	esp, 8
$LN8@kvz_intra_:

; 281  :   }
; 282  : 
; 283  :   if (mode == 0) {

	movsx	eax, BYTE PTR _mode$[ebp]
	test	eax, eax
	jne	SHORT $LN9@kvz_intra_

; 284  :     kvz_intra_pred_planar(log2_width, used_ref->top, used_ref->left, dst);

	mov	esi, esp
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _used_ref$[ebp]
	add	edx, 65					; 00000041H
	push	edx
	movzx	eax, BYTE PTR _log2_width$[ebp]
	push	eax
	call	DWORD PTR _kvz_intra_pred_planar
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@kvz_intra_
$LN9@kvz_intra_:

; 285  :   } else if (mode == 1) {

	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 1
	jne	SHORT $LN11@kvz_intra_

; 286  :     // Do extra post filtering for edge pixels of luma DC mode.
; 287  :     if (color == COLOR_Y && width < 32) {

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN13@kvz_intra_
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN13@kvz_intra_

; 288  :       kvz_intra_pred_filtered_dc(log2_width, used_ref->top, used_ref->left, dst);

	mov	esi, esp
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _used_ref$[ebp]
	add	edx, 65					; 00000041H
	push	edx
	movzx	eax, BYTE PTR _log2_width$[ebp]
	push	eax
	call	DWORD PTR _kvz_intra_pred_filtered_dc
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 289  :     } else {

	jmp	SHORT $LN14@kvz_intra_
$LN13@kvz_intra_:

; 290  :       intra_pred_dc(log2_width, used_ref->top, used_ref->left, dst);

	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _used_ref$[ebp]
	add	edx, 65					; 00000041H
	push	edx
	movzx	eax, BYTE PTR _log2_width$[ebp]
	push	eax
	call	_intra_pred_dc
	add	esp, 16					; 00000010H
$LN14@kvz_intra_:

; 291  :     }
; 292  :   } else {

	jmp	$LN1@kvz_intra_
$LN11@kvz_intra_:

; 293  :     kvz_angular_pred(log2_width, mode, used_ref->top, used_ref->left, dst);

	mov	esi, esp
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _used_ref$[ebp]
	add	edx, 65					; 00000041H
	push	edx
	movzx	eax, BYTE PTR _mode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _log2_width$[ebp]
	push	ecx
	call	DWORD PTR _kvz_angular_pred
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 294  :     if (color == COLOR_Y && width < 32 && filter_boundary) {

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN1@kvz_intra_
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN1@kvz_intra_
	movzx	eax, BYTE PTR _filter_boundary$[ebp]
	test	eax, eax
	je	SHORT $LN1@kvz_intra_

; 295  :       if (mode == 10) {

	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN16@kvz_intra_

; 296  :         intra_post_process_angular(width, 1, used_ref->top, dst);

	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	add	ecx, 65					; 00000041H
	push	ecx
	push	1
	movsx	edx, BYTE PTR _width$[ebp]
	push	edx
	call	_intra_post_process_angular
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@kvz_intra_
$LN16@kvz_intra_:

; 297  :       } else if (mode == 26) {

	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 26					; 0000001aH
	jne	SHORT $LN1@kvz_intra_

; 298  :         intra_post_process_angular(width, width, used_ref->left, dst);

	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _used_ref$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _width$[ebp]
	push	edx
	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_intra_post_process_angular
	add	esp, 16					; 00000010H
$LN1@kvz_intra_:

; 299  :       }
; 300  :     }
; 301  :   }
; 302  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_intra_predict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_build_reference
_TEXT	SEGMENT
_log2_width$ = 8					; size = 1
_color$ = 12						; size = 4
_luma_px$ = 16						; size = 4
_pic_px$ = 20						; size = 4
_lcu$ = 24						; size = 4
_refs$ = 28						; size = 4
_kvz_intra_build_reference PROC				; COMDAT

; 552  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 553  :   // Much logic can be discarded if not on the edge
; 554  :   if (luma_px->x > 0 && luma_px->y > 0) {

	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN2@kvz_intra_
	mov	eax, DWORD PTR _luma_px$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN2@kvz_intra_

; 555  :     kvz_intra_build_reference_inner(log2_width, color, luma_px, pic_px, lcu, refs);

	mov	eax, DWORD PTR _refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _luma_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _log2_width$[ebp]
	push	edx
	call	_kvz_intra_build_reference_inner
	add	esp, 24					; 00000018H

; 556  :   } else {

	jmp	SHORT $LN1@kvz_intra_
$LN2@kvz_intra_:

; 557  :     kvz_intra_build_reference_any(log2_width, color, luma_px, pic_px, lcu, refs);

	mov	eax, DWORD PTR _refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _luma_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _log2_width$[ebp]
	push	edx
	call	_kvz_intra_build_reference_any
	add	esp, 24					; 00000018H
$LN1@kvz_intra_:

; 558  :   }
; 559  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_intra_build_reference ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\intra.c
;	COMDAT _kvz_intra_get_dir_luma_predictor
_TEXT	SEGMENT
tv153 = -220						; size = 4
_above_intra_dir$ = -17					; size = 1
_left_intra_dir$ = -5					; size = 1
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_preds$ = 16						; size = 4
_cur_pu$ = 20						; size = 4
_left_pu$ = 24						; size = 4
_above_pu$ = 28						; size = 4
_kvz_intra_get_dir_luma_predictor PROC			; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8EDBB6ED_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :   // The default mode if block is not coded yet is INTRA_DC.
; 93   :   int8_t left_intra_dir  = 1;

	mov	BYTE PTR _left_intra_dir$[ebp], 1

; 94   :   if (left_pu && left_pu->type == CU_INTRA) {

	cmp	DWORD PTR _left_pu$[ebp], 0
	je	SHORT $LN2@kvz_intra_
	mov	eax, DWORD PTR _left_pu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN2@kvz_intra_

; 95   :     left_intra_dir = left_pu->intra.mode;

	mov	eax, DWORD PTR _left_pu$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _left_intra_dir$[ebp], cl
$LN2@kvz_intra_:

; 96   :   }
; 97   : 
; 98   :   int8_t above_intra_dir = 1;

	mov	BYTE PTR _above_intra_dir$[ebp], 1

; 99   :   if (above_pu && above_pu->type == CU_INTRA && y % LCU_WIDTH != 0) {

	cmp	DWORD PTR _above_pu$[ebp], 0
	je	SHORT $LN3@kvz_intra_
	mov	eax, DWORD PTR _above_pu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN3@kvz_intra_
	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	ecx
	test	edx, edx
	je	SHORT $LN3@kvz_intra_

; 100  :     above_intra_dir = above_pu->intra.mode;

	mov	eax, DWORD PTR _above_pu$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _above_intra_dir$[ebp], cl
$LN3@kvz_intra_:

; 101  :   }
; 102  : 
; 103  :   // If the predictions are the same, add new predictions
; 104  :   if (left_intra_dir == above_intra_dir) {

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	movsx	ecx, BYTE PTR _above_intra_dir$[ebp]
	cmp	eax, ecx
	jne	$LN4@kvz_intra_

; 105  :     if (left_intra_dir > 1) { // angular modes

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	cmp	eax, 1
	jle	SHORT $LN6@kvz_intra_

; 106  :       preds[0] = left_intra_dir;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	al, BYTE PTR _left_intra_dir$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 107  :       preds[1] = ((left_intra_dir + 29) % 32) + 2;

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	add	eax, 29					; 0000001dH
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN13@kvz_intra_
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN13@kvz_intra_:
	add	eax, 2
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 108  :       preds[2] = ((left_intra_dir - 1 ) % 32) + 2;

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	sub	eax, 1
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN14@kvz_intra_
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN14@kvz_intra_:
	add	eax, 2
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 109  :     } else { //non-angular

	jmp	SHORT $LN7@kvz_intra_
$LN6@kvz_intra_:

; 110  :       preds[0] = 0;//PLANAR_IDX;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 111  :       preds[1] = 1;//DC_IDX;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [ecx+eax], 1

; 112  :       preds[2] = 26;//VER_IDX;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [ecx+eax], 26			; 0000001aH
$LN7@kvz_intra_:

; 113  :     }
; 114  :   } else { // If we have two distinct predictions

	jmp	SHORT $LN5@kvz_intra_
$LN4@kvz_intra_:

; 115  :     preds[0] = left_intra_dir;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	al, BYTE PTR _left_intra_dir$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 116  :     preds[1] = above_intra_dir;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	dl, BYTE PTR _above_intra_dir$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 117  : 
; 118  :     // add planar mode if it's not yet present
; 119  :     if (left_intra_dir && above_intra_dir ) {

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	test	eax, eax
	je	SHORT $LN8@kvz_intra_
	movsx	eax, BYTE PTR _above_intra_dir$[ebp]
	test	eax, eax
	je	SHORT $LN8@kvz_intra_

; 120  :       preds[2] = 0; // PLANAR_IDX;

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 121  :     } else {  // Add DC mode if it's not present, otherwise 26.

	jmp	SHORT $LN5@kvz_intra_
$LN8@kvz_intra_:

; 122  :       preds[2] =  (left_intra_dir+above_intra_dir)<2? 26 : 1;

	movsx	eax, BYTE PTR _left_intra_dir$[ebp]
	movsx	ecx, BYTE PTR _above_intra_dir$[ebp]
	add	eax, ecx
	cmp	eax, 2
	jge	SHORT $LN11@kvz_intra_
	mov	DWORD PTR tv153[ebp], 26		; 0000001aH
	jmp	SHORT $LN12@kvz_intra_
$LN11@kvz_intra_:
	mov	DWORD PTR tv153[ebp], 1
$LN12@kvz_intra_:
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _preds$[ebp]
	mov	cl, BYTE PTR tv153[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN5@kvz_intra_:

; 123  :     }
; 124  :   }
; 125  : 
; 126  :   return 1;

	mov	al, 1

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_intra_get_dir_luma_predictor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_clear
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_clear PROC						; COMDAT

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	mov	eax, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[eax*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _cbf$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, edx
	mov	edx, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [edx], cx

; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_set_conditionally
_TEXT	SEGMENT
tv90 = -212						; size = 4
tv88 = -208						; size = 4
_child_cbf_set$ = -5					; size = 1
_cbf$ = 8						; size = 4
_child_cbfs$ = 12					; size = 4
_depth$ = 16						; size = 4
_plane$ = 20						; size = 4
_cbf_set_conditionally PROC				; COMDAT

; 545  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _child_cbfs$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _child_cbfs$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	edx, DWORD PTR _plane$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _child_cbfs$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN5@cbf_set_co
$LN4@cbf_set_co:
	mov	DWORD PTR tv88[ebp], 1
$LN5@cbf_set_co:
	cmp	DWORD PTR tv88[ebp], 0
	jne	SHORT $LN6@cbf_set_co
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN7@cbf_set_co
$LN6@cbf_set_co:
	mov	DWORD PTR tv90[ebp], 1
$LN7@cbf_set_co:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR _child_cbf_set$[ebp], cl

; 547  :                        cbf_is_set(child_cbfs[1], depth + 1, plane) ||
; 548  :                        cbf_is_set(child_cbfs[2], depth + 1, plane);
; 549  :   if (child_cbf_set) {

	movzx	eax, BYTE PTR _child_cbf_set$[ebp]
	test	eax, eax
	je	SHORT $LN1@cbf_set_co

; 550  :     cbf_set(cbf, depth, plane);

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_set
	add	esp, 12					; 0000000cH
$LN1@cbf_set_co:

; 551  :   }
; 552  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_set_conditionally ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_set
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_set PROC						; COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 536  :   // Return value of the bit corresponding to the level.
; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	eax, cl
	mov	ecx, DWORD PTR _cbf$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [eax], dx

; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
END
