; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__9122E4C4_encoder_state-ctors_dtors@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	_kvz_encoder_state_init
PUBLIC	_kvz_encoder_state_finalize
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CG@KGGLHOEA@Failed?5to?5allocate?5the?5picture?5@ ; `string'
PUBLIC	??_C@_0BP@FJBDAGFI@Error?5allocating?5videoframe?$CB?$AN?6@ ; `string'
PUBLIC	??_C@_0CB@KNGJEANH@Error?5allocating?5wf_jobs?5array?$CB@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_config_slice_init@@9@9 ; `encoder_state_config_slice_init'::`1'::__LINE__Var
PUBLIC	??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CO@LIKHJHNP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAs?$AAl?$AAi?$AAc?$AAe?$AA?9?$AA?$DO?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_encoder_state_init@@9@9	; `kvz_encoder_state_init'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@OKOIAFK@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CM@DFNLHPLN@Could?5not?5initialize?5encoder_st@ ; `string'
PUBLIC	??_C@_0CL@CLJFOFKC@Could?5not?5initialize?5encoder_st@ ; `string'
PUBLIC	??_C@_0CM@GFACJLGN@Could?5not?5initialize?5encoder_st@ ; `string'
PUBLIC	??_C@_0CM@BDMJEKJE@Could?5not?5initialize?5encoder_st@ ; `string'
PUBLIC	??_C@_1CI@IKCIOEKA@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@ ; `string'
PUBLIC	??_C@_0CB@HPPNEMEB@Invalid?5encoder_state?9?$DOtype?5?$CFd?$CB@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_0CL@FPGHLMEH@Failed?5to?5allocate?5memory?5for?5c@ ; `string'
PUBLIC	??_C@_0BJ@JHELPOJE@Unable?5to?5init?5child?4?4?4?6@ ; `string'
PUBLIC	??_C@_1FO@BMCOFEPN@?$AA?$CB?$AA?$CI?$AAc?$AAh?$AAi?$AAl?$AAd?$AAr?$AAe?$AAn?$AA_?$AAa?$AAl?$AAl?$AAo@ ; `string'
PUBLIC	??_C@_1CC@FHCCGELM@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_0GG@LNBGIMPD@Invalid?3?5first?5CTB?5in?5slice?5?$CFd?5@ ; `string'
PUBLIC	??_C@_1CO@KEEFJGPG@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ ; `string'
PUBLIC	??_C@_1MK@PGPELNHO@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@ ; `string'
PUBLIC	??_C@_1EA@PKEKODDI@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ ; `string'
PUBLIC	??_C@_1KO@IPOAPGPC@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ ; `string'
PUBLIC	??_C@_0EB@HCOHOEFF@Tile?5?$CFd?5starts?5before?5slice?5?$CFd?0@ ; `string'
PUBLIC	??_C@_0DO@GJEKFBNI@Tile?5?$CFd?5ends?5after?5slice?5?$CFd?0?5in@ ; `string'
PUBLIC	??_C@_0EB@INCNAFLB@Slice?5?$CFd?5starts?5before?5tile?5?$CFd?0@ ; `string'
PUBLIC	??_C@_0DO@GNJBACMG@Slice?5?$CFd?5ends?5after?5tile?5?$CFd?0?5in@ ; `string'
PUBLIC	__real@40099a36e2eb1c43
PUBLIC	__real@bff5df3b645a1cac
EXTRN	__imp___wassert:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_kvz_bitstream_init:PROC
EXTRN	_kvz_bitstream_finalize:PROC
EXTRN	_kvz_yuv_t_alloc:PROC
EXTRN	_kvz_yuv_t_free:PROC
EXTRN	_pthread_mutex_destroy:PROC
EXTRN	_pthread_mutex_init:PROC
EXTRN	_kvz_threadqueue_free_job:PROC
EXTRN	_kvz_image_list_alloc:PROC
EXTRN	_kvz_image_list_destroy:PROC
EXTRN	_kvz_videoframe_alloc:PROC
EXTRN	_kvz_videoframe_free:PROC
EXTRN	_kvz_init_constraint:PROC
EXTRN	_kvz_constraint_free:PROC
EXTRN	_kvz_lcu_at_slice_start:PROC
EXTRN	_kvz_lcu_at_slice_end:PROC
EXTRN	_kvz_lcu_at_tile_start:PROC
EXTRN	_kvz_lcu_at_tile_end:PROC
EXTRN	_kvz_lcu_in_first_row:PROC
EXTRN	_kvz_lcu_in_last_row:PROC
EXTRN	_kvz_lcu_in_first_column:PROC
EXTRN	_kvz_lcu_in_last_column:PROC
EXTRN	_kvz_get_rc_data:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@bff5df3b645a1cac
CONST	SEGMENT
__real@bff5df3b645a1cac DQ 0bff5df3b645a1cacr	; -1.367
CONST	ENDS
;	COMDAT __real@40099a36e2eb1c43
CONST	SEGMENT
__real@40099a36e2eb1c43 DQ 040099a36e2eb1c43r	; 3.2003
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DO@GNJBACMG@Slice?5?$CFd?5ends?5after?5tile?5?$CFd?0?5in@
CONST	SEGMENT
??_C@_0DO@GNJBACMG@Slice?5?$CFd?5ends?5after?5tile?5?$CFd?0?5in@ DB 'Slic'
	DB	'e %d ends after tile %d, in which it should be included!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@INCNAFLB@Slice?5?$CFd?5starts?5before?5tile?5?$CFd?0@
CONST	SEGMENT
??_C@_0EB@INCNAFLB@Slice?5?$CFd?5starts?5before?5tile?5?$CFd?0@ DB 'Slice'
	DB	' %d starts before tile %d, in which it should be included!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GJEKFBNI@Tile?5?$CFd?5ends?5after?5slice?5?$CFd?0?5in@
CONST	SEGMENT
??_C@_0DO@GJEKFBNI@Tile?5?$CFd?5ends?5after?5slice?5?$CFd?0?5in@ DB 'Tile'
	DB	' %d ends after slice %d, in which it should be included!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HCOHOEFF@Tile?5?$CFd?5starts?5before?5slice?5?$CFd?0@
CONST	SEGMENT
??_C@_0EB@HCOHOEFF@Tile?5?$CFd?5starts?5before?5slice?5?$CFd?0@ DB 'Tile '
	DB	'%d starts before slice %d, in which it should be included!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@IPOAPGPC@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
CONST	SEGMENT
??_C@_1KO@IPOAPGPC@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'l'
	DB	00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H, 'l'
	DB	00H, 'e', 00H, 'f', 00H, 't', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, '.', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '.', 00H, 'x', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@PKEKODDI@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
CONST	SEGMENT
??_C@_1EA@PKEKODDI@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'l'
	DB	00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H, 'a'
	DB	00H, 'b', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@PGPELNHO@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@
CONST	SEGMENT
??_C@_1MK@PGPELNHO@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, '[', 00H, 'j', 00H, ']', 00H, '.', 00H
	DB	'l', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '[', 00H, 'k', 00H, ']', 00H, '.', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '.', 00H, 'y', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'l', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, '[', 00H, 'i', 00H, ']', 00H
	DB	'.', 00H, 'p', 00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'y', 00H, ' ', 00H, '-', 00H
	DB	' ', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@KEEFJGPG@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
CONST	SEGMENT
??_C@_1CO@KEEFJGPG@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'l'
	DB	00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@LNBGIMPD@Invalid?3?5first?5CTB?5in?5slice?5?$CFd?5@
CONST	SEGMENT
??_C@_0GG@LNBGIMPD@Invalid?3?5first?5CTB?5in?5slice?5?$CFd?5@ DB 'Invalid'
	DB	': first CTB in slice %d is not at the tile %d edge, and the s'
	DB	'lice spans on more than one row.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@FHCCGELM@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CC@FHCCGELM@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@BMCOFEPN@?$AA?$CB?$AA?$CI?$AAc?$AAh?$AAi?$AAl?$AAd?$AAr?$AAe?$AAn?$AA_?$AAa?$AAl?$AAl?$AAo@
CONST	SEGMENT
??_C@_1FO@BMCOFEPN@?$AA?$CB?$AA?$CI?$AAc?$AAh?$AAi?$AAl?$AAd?$AAr?$AAe?$AAn?$AA_?$AAa?$AAl?$AAl?$AAo@ DB '!'
	DB	00H, '(', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'w', 00H, '_', 00H, 's', 00H, 'l', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'w'
	DB	00H, '_', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JHELPOJE@Unable?5to?5init?5child?4?4?4?6@
CONST	SEGMENT
??_C@_0BJ@JHELPOJE@Unable?5to?5init?5child?4?4?4?6@ DB 'Unable to init ch'
	DB	'ild...', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FPGHLMEH@Failed?5to?5allocate?5memory?5for?5c@
CONST	SEGMENT
??_C@_0CL@FPGHLMEH@Failed?5to?5allocate?5memory?5for?5c@ DB 'Failed to al'
	DB	'locate memory for children...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HPPNEMEB@Invalid?5encoder_state?9?$DOtype?5?$CFd?$CB@
CONST	SEGMENT
??_C@_0CB@HPPNEMEB@Invalid?5encoder_state?9?$DOtype?5?$CFd?$CB@ DB 'Inval'
	DB	'id encoder_state->type %d!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@IKCIOEKA@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@
CONST	SEGMENT
??_C@_1CI@IKCIOEKA@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BDMJEKJE@Could?5not?5initialize?5encoder_st@
CONST	SEGMENT
??_C@_0CM@BDMJEKJE@Could?5not?5initialize?5encoder_st@ DB 'Could not init'
	DB	'ialize encoder_state->wfrow!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GFACJLGN@Could?5not?5initialize?5encoder_st@
CONST	SEGMENT
??_C@_0CM@GFACJLGN@Could?5not?5initialize?5encoder_st@ DB 'Could not init'
	DB	'ialize encoder_state->slice!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CLJFOFKC@Could?5not?5initialize?5encoder_st@
CONST	SEGMENT
??_C@_0CL@CLJFOFKC@Could?5not?5initialize?5encoder_st@ DB 'Could not init'
	DB	'ialize encoder_state->tile!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DFNLHPLN@Could?5not?5initialize?5encoder_st@
CONST	SEGMENT
??_C@_0CM@DFNLHPLN@Could?5not?5initialize?5encoder_st@ DB 'Could not init'
	DB	'ialize encoder_state->frame!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@OKOIAFK@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn@
CONST	SEGMENT
??_C@_1DK@OKOIAFK@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn@ DB 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encoder_state_init@@9@9 DD 0156H	; `kvz_encoder_state_init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@LIKHJHNP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAs?$AAl?$AAi?$AAc?$AAe?$AA?9?$AA?$DO?$AAi@
CONST	SEGMENT
??_C@_1CO@LIKHJHNP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAs?$AAl?$AAi?$AAc?$AAe?$AA?9?$AA?$DO?$AAi@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 's', 00H, '_', 00H, 'd', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_config_slice_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_config_slice_init@@9@9 DD 0c2H ; `encoder_state_config_slice_init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@KNGJEANH@Error?5allocating?5wf_jobs?5array?$CB@
CONST	SEGMENT
??_C@_0CB@KNGJEANH@Error?5allocating?5wf_jobs?5array?$CB@ DB 'Error alloc'
	DB	'ating wf_jobs array!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FJBDAGFI@Error?5allocating?5videoframe?$CB?$AN?6@
CONST	SEGMENT
??_C@_0BP@FJBDAGFI@Error?5allocating?5videoframe?$CB?$AN?6@ DB 'Error all'
	DB	'ocating videoframe!', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KGGLHOEA@Failed?5to?5allocate?5the?5picture?5@
CONST	SEGMENT
??_C@_0CG@KGGLHOEA@Failed?5to?5allocate?5the?5picture?5@ DB 'Failed to al'
	DB	'locate the picture list!', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_wfrow_init
_TEXT	SEGMENT
_state$ = 8						; size = 4
_lcu_offset_y$ = 12					; size = 4
_encoder_state_config_wfrow_init PROC			; COMDAT

; 213  :                                           const int lcu_offset_y) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 214  :   
; 215  :   state->wfrow->lcu_offset_y = lcu_offset_y;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _lcu_offset_y$[ebp]
	mov	DWORD PTR [ecx], edx

; 216  :   return 1;

	mov	eax, 1

; 217  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_config_wfrow_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_slice_init
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_state$ = 8						; size = 4
_start_address_in_ts$ = 12				; size = 4
_end_address_in_ts$ = 16				; size = 4
_encoder_state_config_slice_init PROC			; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 195  :   state->slice->id = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], -1

; 196  :   for (int i = 0; i < state->encoder_control->slice_count; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+4508]
	jge	SHORT $LN3@encoder_st

; 197  :     if (state->encoder_control->slice_addresses_in_ts[i] == start_address_in_ts) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4512]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	ecx, DWORD PTR _start_address_in_ts$[ebp]
	jne	SHORT $LN5@encoder_st

; 198  :       state->slice->id = i;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [ecx], edx

; 199  :       break;

	jmp	SHORT $LN3@encoder_st
$LN5@encoder_st:

; 200  :     }
; 201  :   }

	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 202  :   assert(state->slice->id != -1);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $LN7@encoder_st
	mov	edx, DWORD PTR ?__LINE__Var@?0??encoder_state_config_slice_init@@9@9
	add	edx, 8
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CO@LIKHJHNP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAs?$AAl?$AAi?$AAc?$AAe?$AA?9?$AA?$DO?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@encoder_st:

; 203  : 
; 204  :   state->slice->start_in_ts = start_address_in_ts;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _start_address_in_ts$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 205  :   state->slice->end_in_ts = end_address_in_ts;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _end_address_in_ts$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 206  :   
; 207  :   state->slice->start_in_rs = state->encoder_control->tiles_ctb_addr_ts_to_rs[start_address_in_ts];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4500]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _start_address_in_ts$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx+12], edx

; 208  :   state->slice->end_in_rs = state->encoder_control->tiles_ctb_addr_ts_to_rs[end_address_in_ts];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4500]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _end_address_in_ts$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx+16], edx

; 209  :   return 1;

	mov	eax, 1

; 210  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_config_slice_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_tile_finalize
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_num_jobs$2 = -8					; size = 4
_state$ = 8						; size = 4
_encoder_state_config_tile_finalize PROC		; COMDAT

; 171  : static void encoder_state_config_tile_finalize(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 172  :   if (state->tile == NULL) return;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN5@encoder_st
	jmp	$LN1@encoder_st
$LN5@encoder_st:

; 173  : 
; 174  :   kvz_yuv_t_free(state->tile->hor_buf_search);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_kvz_yuv_t_free
	add	esp, 4

; 175  :   kvz_yuv_t_free(state->tile->ver_buf_search);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_kvz_yuv_t_free
	add	esp, 4

; 176  :   kvz_yuv_t_free(state->tile->hor_buf_before_sao);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_kvz_yuv_t_free
	add	esp, 4

; 177  :   kvz_yuv_t_free(state->tile->ver_buf_before_sao);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_kvz_yuv_t_free
	add	esp, 4

; 178  : 
; 179  :   if (state->encoder_control->cfg.wpp) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+152], 0
	je	SHORT $LN6@encoder_st

; 180  :     int num_jobs = state->tile->frame->width_in_lcu * state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _num_jobs$2[ebp], ecx

; 181  :     for (int i = 0; i < num_jobs; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _num_jobs$2[ebp]
	jge	SHORT $LN6@encoder_st

; 182  :       kvz_threadqueue_free_job(&state->tile->wf_jobs[i]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 183  :     }

	jmp	SHORT $LN2@encoder_st
$LN6@encoder_st:

; 184  :   }
; 185  : 
; 186  :   kvz_videoframe_free(state->tile->frame);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_kvz_videoframe_free
	add	esp, 4

; 187  :   state->tile->frame = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx], 0

; 188  :   FREE_POINTER(state->tile->wf_jobs);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+44], 0
$LN1@encoder_st:

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_config_tile_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_tile_init
_TEXT	SEGMENT
_i$1 = -120						; size = 4
_num_jobs$2 = -108					; size = 4
_chroma_size_ver$ = -96					; size = 4
_chroma_size_hor$ = -84					; size = 4
_chroma_sizes_ver$ = -72				; size = 16
_chroma_sizes_hor$ = -48				; size = 16
_luma_size$ = -24					; size = 4
_encoder$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_lcu_offset_x$ = 12					; size = 4
_lcu_offset_y$ = 16					; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_width_in_lcu$ = 28					; size = 4
_height_in_lcu$ = 32					; size = 4
_encoder_state_config_tile_init PROC			; COMDAT

; 113  :                                           const int width, const int height, const int width_in_lcu, const int height_in_lcu) {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 114  :   
; 115  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 116  :   state->tile->frame = kvz_videoframe_alloc(width, height, state->encoder_control->chroma_format);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2536]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	call	_kvz_videoframe_alloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx], eax

; 117  :   
; 118  :   state->tile->frame->rec = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 119  :   
; 120  :   state->tile->frame->source = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 121  : 
; 122  :   if (!state->tile->frame) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN5@encoder_st

; 123  :     printf("Error allocating videoframe!\r\n");

	push	OFFSET ??_C@_0BP@FJBDAGFI@Error?5allocating?5videoframe?$CB?$AN?6@
	call	_printf
	add	esp, 4

; 124  :     return 0;

	xor	eax, eax
	jmp	$LN1@encoder_st
$LN5@encoder_st:

; 125  :   }
; 126  : 
; 127  :   state->tile->lcu_offset_x = lcu_offset_x;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu_offset_x$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 128  :   state->tile->lcu_offset_y = lcu_offset_y;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu_offset_y$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 129  :   state->tile->offset_x     = lcu_offset_x * LCU_WIDTH;

	mov	eax, DWORD PTR _lcu_offset_x$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+16], eax

; 130  :   state->tile->offset_y     = lcu_offset_y * LCU_WIDTH;

	mov	eax, DWORD PTR _lcu_offset_y$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+20], eax

; 131  : 
; 132  :   state->tile->lcu_offset_in_ts = encoder->tiles_ctb_addr_rs_to_ts[lcu_offset_x + lcu_offset_y * encoder->in.width_in_lcu];

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _lcu_offset_y$[ebp]
	imul	ecx, DWORD PTR [eax+2488]
	add	ecx, DWORD PTR _lcu_offset_x$[ebp]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+4496]
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+24], eax

; 133  :   
; 134  :   // hor_buf_search and ver_buf_search store single row/col from each LCU row/col.
; 135  :   // Because these lines are independent, the chroma subsampling only matters in one
; 136  :   // of the directions, .
; 137  :   unsigned luma_size = LCU_WIDTH * state->tile->frame->width_in_lcu * state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 6
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	imul	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _luma_size$[ebp], eax

; 138  :   unsigned chroma_sizes_hor[] = { 0, luma_size / 2, luma_size / 2, luma_size };

	mov	DWORD PTR _chroma_sizes_hor$[ebp], 0
	mov	eax, DWORD PTR _luma_size$[ebp]
	shr	eax, 1
	mov	DWORD PTR _chroma_sizes_hor$[ebp+4], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	shr	eax, 1
	mov	DWORD PTR _chroma_sizes_hor$[ebp+8], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR _chroma_sizes_hor$[ebp+12], eax

; 139  :   unsigned chroma_sizes_ver[] = { 0, luma_size / 2, luma_size, luma_size };

	mov	DWORD PTR _chroma_sizes_ver$[ebp], 0
	mov	eax, DWORD PTR _luma_size$[ebp]
	shr	eax, 1
	mov	DWORD PTR _chroma_sizes_ver$[ebp+4], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR _chroma_sizes_ver$[ebp+8], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR _chroma_sizes_ver$[ebp+12], eax

; 140  :   unsigned chroma_size_hor = chroma_sizes_hor[state->encoder_control->chroma_format];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2536]
	mov	eax, DWORD PTR _chroma_sizes_hor$[ebp+edx*4]
	mov	DWORD PTR _chroma_size_hor$[ebp], eax

; 141  :   unsigned chroma_size_ver = chroma_sizes_ver[state->encoder_control->chroma_format];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2536]
	mov	eax, DWORD PTR _chroma_sizes_ver$[ebp+edx*4]
	mov	DWORD PTR _chroma_size_ver$[ebp], eax

; 142  : 
; 143  :   state->tile->hor_buf_search = kvz_yuv_t_alloc(luma_size, chroma_size_hor);

	mov	eax, DWORD PTR _chroma_size_hor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_size$[ebp]
	push	ecx
	call	_kvz_yuv_t_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+28], eax

; 144  :   state->tile->ver_buf_search = kvz_yuv_t_alloc(luma_size, chroma_size_ver);

	mov	eax, DWORD PTR _chroma_size_ver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_size$[ebp]
	push	ecx
	call	_kvz_yuv_t_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax

; 145  : 
; 146  :   if (encoder->cfg.sao_type) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN6@encoder_st

; 147  :     state->tile->hor_buf_before_sao = kvz_yuv_t_alloc(luma_size, chroma_size_hor);

	mov	eax, DWORD PTR _chroma_size_hor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_size$[ebp]
	push	ecx
	call	_kvz_yuv_t_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+36], eax

; 148  :     state->tile->ver_buf_before_sao = kvz_yuv_t_alloc(luma_size, chroma_size_ver);

	mov	eax, DWORD PTR _chroma_size_ver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_size$[ebp]
	push	ecx
	call	_kvz_yuv_t_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+40], eax

; 149  :   } else {

	jmp	SHORT $LN7@encoder_st
$LN6@encoder_st:

; 150  :     state->tile->hor_buf_before_sao = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+36], 0

; 151  :     state->tile->ver_buf_before_sao = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+40], 0
$LN7@encoder_st:

; 152  :   }
; 153  : 
; 154  :   if (encoder->cfg.wpp) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	$LN8@encoder_st

; 155  :     int num_jobs = state->tile->frame->width_in_lcu * state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _num_jobs$2[ebp], ecx

; 156  :     state->tile->wf_jobs = MALLOC(threadqueue_job_t*, num_jobs);

	mov	eax, DWORD PTR _num_jobs$2[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+44], eax

; 157  :     for (int i = 0; i < num_jobs; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _num_jobs$2[ebp]
	jge	SHORT $LN3@encoder_st

; 158  :       state->tile->wf_jobs[i] = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 159  :     }

	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 160  :     if (!state->tile->wf_jobs) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN10@encoder_st

; 161  :       printf("Error allocating wf_jobs array!\n");

	push	OFFSET ??_C@_0CB@KNGJEANH@Error?5allocating?5wf_jobs?5array?$CB@
	call	_printf
	add	esp, 4

; 162  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN1@encoder_st
$LN10@encoder_st:

; 163  :     }
; 164  :   } else {

	jmp	SHORT $LN9@encoder_st
$LN8@encoder_st:

; 165  :     state->tile->wf_jobs = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+44], 0
$LN9@encoder_st:

; 166  :   }
; 167  :   state->tile->id = encoder->tiles_tile_id[state->tile->lcu_offset_in_ts];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4504]
	mov	eax, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+4], ecx

; 168  :   return 1;

	mov	eax, 1
$LN1@encoder_st:

; 169  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@encoder_st:
	DD	2
	DD	$LN14@encoder_st
$LN14@encoder_st:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@encoder_st
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN13@encoder_st
$LN13@encoder_st:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN12@encoder_st:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_encoder_state_config_tile_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_frame_finalize
_TEXT	SEGMENT
_state$ = 8						; size = 4
_encoder_state_config_frame_finalize PROC		; COMDAT

; 99   : static void encoder_state_config_frame_finalize(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 100  :   if (state->frame == NULL) return;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@encoder_st
	jmp	$LN1@encoder_st
$LN2@encoder_st:

; 101  : 
; 102  :   pthread_mutex_destroy(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_destroy
	add	esp, 4

; 103  :   if (state->frame->c_para) FREE_POINTER(state->frame->c_para);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+200], 0
	je	SHORT $LN3@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+200], 0
$LN3@encoder_st:

; 104  :   if (state->frame->k_para) FREE_POINTER(state->frame->k_para);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+204], 0
	je	SHORT $LN4@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+204], 0
$LN4@encoder_st:

; 105  : 
; 106  :   kvz_image_list_destroy(state->frame->ref);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_kvz_image_list_destroy
	add	esp, 4

; 107  :   FREE_POINTER(state->frame->lcu_stats);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+148], 0

; 108  :   FREE_POINTER(state->frame->aq_offsets);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+164], 0
$LN1@encoder_st:

; 109  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_config_frame_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _encoder_state_config_frame_init
_TEXT	SEGMENT
tv170 = -260						; size = 4
tv162 = -256						; size = 4
_temp$1 = -56						; size = 4
_x$2 = -44						; size = 4
_y$3 = -32						; size = 4
_num_lcus$ = -20					; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_config_frame_init PROC			; COMDAT

; 52   : static int encoder_state_config_frame_init(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :   state->frame->ref = kvz_image_list_alloc(MAX_REF_PIC_COUNT);

	push	16					; 00000010H
	call	_kvz_image_list_alloc
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+40], eax

; 54   :   if(!state->frame->ref) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN8@encoder_st

; 55   :     fprintf(stderr, "Failed to allocate the picture list!\n");

	push	OFFSET ??_C@_0CG@KGGLHOEA@Failed?5to?5allocate?5the?5picture?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 56   :     return 0;

	xor	eax, eax
	jmp	$LN1@encoder_st
$LN8@encoder_st:

; 57   :   }
; 58   :   state->frame->ref_list = REF_PIC_LIST_0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+44], 0

; 59   :   state->frame->num = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+8], 0

; 60   :   state->frame->poc = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], 0

; 61   :   state->frame->total_bits_coded = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+88], 0
	mov	DWORD PTR [ecx+92], 0

; 62   :   state->frame->cur_frame_bits_coded = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+104], 0
	mov	DWORD PTR [ecx+108], 0

; 63   :   state->frame->cur_gop_bits_coded = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+96], 0
	mov	DWORD PTR [ecx+100], 0

; 64   :   state->frame->prepared = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+144], 0

; 65   :   state->frame->done = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+145], 1

; 66   : 
; 67   :   state->frame->rc_alpha = 3.2003;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR __real@40099a36e2eb1c43
	movsd	QWORD PTR [ecx+128], xmm0

; 68   :   state->frame->rc_beta = -1.367;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR __real@bff5df3b645a1cac
	movsd	QWORD PTR [ecx+136], xmm0

; 69   :   state->frame->icost = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+176], xmm0

; 70   : 
; 71   :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 72   :   const int num_lcus = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2488]
	imul	edx, DWORD PTR [ecx+2492]
	mov	DWORD PTR _num_lcus$[ebp], edx

; 73   :   state->frame->lcu_stats = calloc(num_lcus, sizeof(lcu_stats_t));

	mov	esi, esp
	push	72					; 00000048H
	mov	eax, DWORD PTR _num_lcus$[ebp]
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+148], eax

; 74   :   state->frame->aq_offsets = MALLOC(double, num_lcus);

	mov	eax, DWORD PTR _num_lcus$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+164], eax

; 75   : 
; 76   :   for (int y = 0; y < encoder->in.height_in_lcu; y++) {

	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 1
	mov	DWORD PTR _y$3[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _y$3[ebp]
	cmp	ecx, DWORD PTR [eax+2492]
	jge	$LN3@encoder_st

; 77   :     for (int x = 0; x < encoder->in.width_in_lcu; x++) {

	mov	DWORD PTR _x$2[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _x$2[ebp]
	add	eax, 1
	mov	DWORD PTR _x$2[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _x$2[ebp]
	cmp	ecx, DWORD PTR [eax+2488]
	jge	$LN6@encoder_st

; 78   :       int temp = MIN(encoder->cfg.width - x * 64, 64) * MIN(encoder->cfg.height - y * 64, 64);

	mov	eax, DWORD PTR _x$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	cmp	edx, 64					; 00000040H
	jge	SHORT $LN12@encoder_st
	mov	eax, DWORD PTR _x$2[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	mov	DWORD PTR tv162[ebp], edx
	jmp	SHORT $LN13@encoder_st
$LN12@encoder_st:
	mov	DWORD PTR tv162[ebp], 64		; 00000040H
$LN13@encoder_st:
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	cmp	edx, 64					; 00000040H
	jge	SHORT $LN14@encoder_st
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, eax
	mov	DWORD PTR tv170[ebp], edx
	jmp	SHORT $LN15@encoder_st
$LN14@encoder_st:
	mov	DWORD PTR tv170[ebp], 64		; 00000040H
$LN15@encoder_st:
	mov	eax, DWORD PTR tv162[ebp]
	imul	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR _temp$1[ebp], eax

; 79   :       state->frame->lcu_stats[x + y * encoder->in.width_in_lcu].pixels = temp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR _y$3[ebp]
	imul	eax, DWORD PTR [edx+2488]
	add	eax, DWORD PTR _x$2[ebp]
	imul	edx, eax, 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [eax+edx+4], ecx

; 80   :     }

	jmp	$LN5@encoder_st
$LN6@encoder_st:

; 81   :   }

	jmp	$LN2@encoder_st
$LN3@encoder_st:

; 82   : 
; 83   :   state->frame->c_para = malloc(sizeof(double) * num_lcus);

	mov	eax, DWORD PTR _num_lcus$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+200], eax

; 84   :   if(state->frame->c_para == NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+200], 0
	jne	SHORT $LN9@encoder_st

; 85   :     return 0;

	xor	eax, eax
	jmp	SHORT $LN1@encoder_st
$LN9@encoder_st:

; 86   :   }
; 87   :   state->frame->k_para = malloc(sizeof(double) * num_lcus);

	mov	eax, DWORD PTR _num_lcus$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+204], eax

; 88   :   if (state->frame->k_para == NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+204], 0
	jne	SHORT $LN10@encoder_st

; 89   :     return 0;

	xor	eax, eax
	jmp	SHORT $LN1@encoder_st
$LN10@encoder_st:

; 90   :   }
; 91   : 
; 92   :   pthread_mutex_init(&state->frame->rc_lock, NULL);

	push	0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_init
	add	esp, 8

; 93   : 
; 94   :   state->frame->new_ratecontrol = kvz_get_rc_data(NULL);

	push	0
	call	_kvz_get_rc_data
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+156], eax

; 95   : 
; 96   :   return 1;

	mov	eax, 1
$LN1@encoder_st:

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_config_frame_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _kvz_encoder_state_finalize
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_state$ = 8						; size = 4
_kvz_encoder_state_finalize PROC			; COMDAT

; 722  : void kvz_encoder_state_finalize(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 723  :   if (state->children) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@kvz_encode

; 724  :     int i=0;

	mov	DWORD PTR _i$1[ebp], 0

; 725  :     for (i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_encode:
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN3@kvz_encode

; 726  :       kvz_encoder_state_finalize(&state->children[i]);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_kvz_encoder_state_finalize
	add	esp, 4

; 727  :     }

	jmp	SHORT $LN2@kvz_encode
$LN3@kvz_encode:

; 728  : 
; 729  :     FREE_POINTER(state->children);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN5@kvz_encode:

; 730  :   }
; 731  :   
; 732  :   FREE_POINTER(state->lcu_order);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+40], 0

; 733  :   state->lcu_order_count = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 734  :   
; 735  :   if (!state->parent || (state->parent->wfrow != state->wfrow)) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+32]
	je	SHORT $LN6@kvz_encode
$LN7@kvz_encode:

; 736  :     FREE_POINTER(state->wfrow);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN6@kvz_encode:

; 737  :   }
; 738  :   
; 739  :   if (!state->parent || (state->parent->slice != state->slice)) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN9@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	je	SHORT $LN8@kvz_encode
$LN9@kvz_encode:

; 740  :     FREE_POINTER(state->slice);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN8@kvz_encode:

; 741  :   }
; 742  :   
; 743  :   if (!state->parent || (state->parent->tile != state->tile)) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN11@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN10@kvz_encode
$LN11@kvz_encode:

; 744  :     encoder_state_config_tile_finalize(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_config_tile_finalize
	add	esp, 4

; 745  :     FREE_POINTER(state->tile);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN10@kvz_encode:

; 746  :   }
; 747  :   
; 748  :   if (!state->parent || (state->parent->frame != state->frame)) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN13@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+20]
	je	SHORT $LN12@kvz_encode
$LN13@kvz_encode:

; 749  :     encoder_state_config_frame_finalize(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_config_frame_finalize
	add	esp, 4

; 750  :     FREE_POINTER(state->frame);

	mov	esi, esp
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN12@kvz_encode:

; 751  :   }
; 752  :   
; 753  :   if (state->constraint) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+328], 0
	je	SHORT $LN14@kvz_encode

; 754  :     // End of the constraint structure
; 755  :     kvz_constraint_free(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_constraint_free
	add	esp, 4
$LN14@kvz_encode:

; 756  :   }
; 757  : 
; 758  :   kvz_bitstream_finalize(&state->stream);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_finalize
	add	esp, 4

; 759  : 
; 760  :   kvz_threadqueue_free_job(&state->tqj_recon_done);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 320				; 00000140H
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 761  :   kvz_threadqueue_free_job(&state->tqj_bitstream_written);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 762  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-ctors_dtors.c
;	COMDAT _kvz_encoder_state_init
_TEXT	SEGMENT
tv860 = -652						; size = 4
tv834 = -652						; size = 4
tv741 = -652						; size = 4
tv725 = -652						; size = 4
tv709 = -652						; size = 4
tv695 = -652						; size = 4
tv674 = -652						; size = 4
tv532 = -652						; size = 4
tv414 = -652						; size = 4
tv404 = -652						; size = 4
tv317 = -652						; size = 4
tv311 = -652						; size = 4
tv276 = -652						; size = 4
tv259 = -652						; size = 4
tv228 = -652						; size = 4
_k$1 = -452						; size = 4
_j$2 = -440						; size = 4
_lcu_end$3 = -428					; size = 4
_lcu_start$4 = -416					; size = 4
_lcu_id$5 = -404					; size = 4
_i$6 = -392						; size = 4
_new_child$7 = -380					; size = 4
_row$8 = -368						; size = 4
_i$9 = -356						; size = 4
_num_rows$10 = -344					; size = 4
_last_row$11 = -332					; size = 4
_first_row$12 = -320					; size = 4
_j$13 = -308						; size = 4
_i$14 = -296						; size = 4
_height$15 = -284					; size = 4
_width$16 = -272					; size = 4
_height_in_lcu$17 = -260				; size = 4
_width_in_lcu$18 = -248					; size = 4
_lcu_offset_y$19 = -236					; size = 4
_lcu_offset_x$20 = -224					; size = 4
_tile_y$21 = -212					; size = 4
_tile_x$22 = -200					; size = 4
_tile_id$23 = -188					; size = 4
_slice_allowed$24 = -176				; size = 4
_tile_allowed$25 = -164					; size = 4
_range_end_tile$26 = -152				; size = 4
_range_end_slice$27 = -140				; size = 4
_new_child$28 = -128					; size = 4
_num_wpp_rows$29 = -116					; size = 4
_end_in_ts$30 = -104					; size = 4
_start_in_ts$31 = -92					; size = 4
_range_start$32 = -80					; size = 4
_children_allow_tile$33 = -68				; size = 4
_children_allow_slice$34 = -56				; size = 4
_children_allow_wavefront_row$35 = -44			; size = 4
_child_count$36 = -32					; size = 4
_encoder$37 = -20					; size = 4
_encoder$38 = -8					; size = 4
_child_state$ = 8					; size = 4
_parent_state$ = 12					; size = 4
_kvz_encoder_state_init PROC				; COMDAT

; 342  : int kvz_encoder_state_init(encoder_state_t * const child_state, encoder_state_t * const parent_state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 652				; 0000028cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-652]
	mov	ecx, 163				; 000000a3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9122E4C4_encoder_state-ctors_dtors@c
	call	@__CheckForDebuggerJustMyCode@4

; 343  :   //We require that, if parent_state is NULL:
; 344  :   //child_state->encoder_control is set
; 345  :   //
; 346  :   //If parent_state is not NULL, the following variable should either be set to NULL,
; 347  :   //in order to inherit from parent, or should point to a valid structure:
; 348  :   //child_state->frame
; 349  :   //child_state->tile
; 350  :   //child_state->slice
; 351  :   //child_state->wfrow
; 352  :   
; 353  :   child_state->parent = parent_state;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 354  :   child_state->children = MALLOC(encoder_state_t, 1);

	mov	esi, esp
	push	336					; 00000150H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 355  :   child_state->children[0].encoder_control = NULL;

	mov	eax, 336				; 00000150H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], 0

; 356  :   child_state->crypto_hdl = NULL;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+280], 0

; 357  :   child_state->must_code_qp_delta = false;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	BYTE PTR [eax+313], 0

; 358  :   child_state->tqj_bitstream_written = NULL;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+324], 0

; 359  :   child_state->tqj_recon_done = NULL;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+320], 0

; 360  :   
; 361  :   if (!parent_state) {

	cmp	DWORD PTR _parent_state$[ebp], 0
	jne	$LN34@kvz_encode

; 362  :     const encoder_control_t * const encoder = child_state->encoder_control;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$38[ebp], ecx

; 363  :     child_state->type = ENCODER_STATE_TYPE_MAIN;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+4], 77			; 0000004dH

; 364  :     assert(child_state->encoder_control);

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN93@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DK@OKOIAFK@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN93@kvz_encode:

; 365  :     child_state->frame = MALLOC(encoder_state_config_frame_t, 1);

	mov	esi, esp
	push	208					; 000000d0H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 366  :     if (!child_state->frame || !encoder_state_config_frame_init(child_state)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN37@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_encoder_state_config_frame_init
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN36@kvz_encode
$LN37@kvz_encode:

; 367  :       fprintf(stderr, "Could not initialize encoder_state->frame!\n");

	push	OFFSET ??_C@_0CM@DFNLHPLN@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 368  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN36@kvz_encode:

; 369  :     }
; 370  :     child_state->tile = MALLOC(encoder_state_config_tile_t, 1);

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 371  :     if (!child_state->tile || !encoder_state_config_tile_init(child_state, 0, 0, encoder->in.width, encoder->in.height, encoder->in.width_in_lcu, encoder->in.height_in_lcu)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN39@kvz_encode
	mov	eax, DWORD PTR _encoder$38[ebp]
	mov	ecx, DWORD PTR [eax+2492]
	push	ecx
	mov	edx, DWORD PTR _encoder$38[ebp]
	mov	eax, DWORD PTR [edx+2488]
	push	eax
	mov	ecx, DWORD PTR _encoder$38[ebp]
	mov	edx, DWORD PTR [ecx+2484]
	push	edx
	mov	eax, DWORD PTR _encoder$38[ebp]
	mov	ecx, DWORD PTR [eax+2480]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _child_state$[ebp]
	push	edx
	call	_encoder_state_config_tile_init
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN38@kvz_encode
$LN39@kvz_encode:

; 372  :       fprintf(stderr, "Could not initialize encoder_state->tile!\n");

	push	OFFSET ??_C@_0CL@CLJFOFKC@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 373  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN38@kvz_encode:

; 374  :     }
; 375  : 
; 376  :     child_state->slice = MALLOC(encoder_state_config_slice_t, 1);

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 377  :     if (!child_state->slice || !encoder_state_config_slice_init(child_state, 0, encoder->in.width_in_lcu * encoder->in.height_in_lcu - 1)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN41@kvz_encode
	mov	eax, DWORD PTR _encoder$38[ebp]
	mov	ecx, DWORD PTR _encoder$38[ebp]
	mov	edx, DWORD PTR [eax+2488]
	imul	edx, DWORD PTR [ecx+2492]
	sub	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_encoder_state_config_slice_init
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN40@kvz_encode
$LN41@kvz_encode:

; 378  :       fprintf(stderr, "Could not initialize encoder_state->slice!\n");

	push	OFFSET ??_C@_0CM@GFACJLGN@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 379  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN40@kvz_encode:

; 380  :     }
; 381  :     child_state->wfrow = MALLOC(encoder_state_config_wfrow_t, 1);

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 382  :     if (!child_state->wfrow || !encoder_state_config_wfrow_init(child_state, 0)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN43@kvz_encode
	push	0
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_encoder_state_config_wfrow_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN42@kvz_encode
$LN43@kvz_encode:

; 383  :       fprintf(stderr, "Could not initialize encoder_state->wfrow!\n");

	push	OFFSET ??_C@_0CM@BDMJEKJE@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 384  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN42@kvz_encode:

; 385  :     }
; 386  :   } else {

	jmp	SHORT $LN35@kvz_encode
$LN34@kvz_encode:

; 387  :     child_state->encoder_control = parent_state->encoder_control;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 388  :     if (!child_state->frame) child_state->frame = parent_state->frame;

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN44@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
$LN44@kvz_encode:

; 389  :     if (!child_state->tile) child_state->tile = parent_state->tile;

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN45@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
$LN45@kvz_encode:

; 390  :     if (!child_state->slice) child_state->slice = parent_state->slice;

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN46@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
$LN46@kvz_encode:

; 391  :     if (!child_state->wfrow) child_state->wfrow = parent_state->wfrow;

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN35@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _parent_state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
$LN35@kvz_encode:

; 392  :   }
; 393  :   // Intialization of the constraint structure
; 394  :   child_state->constraint = kvz_init_constraint(child_state->constraint, child_state->encoder_control);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+328]
	push	eax
	call	_kvz_init_constraint
	add	esp, 8
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+328], eax

; 395  : 
; 396  :   kvz_bitstream_init(&child_state->stream);

	mov	eax, DWORD PTR _child_state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_init
	add	esp, 4

; 397  :   
; 398  :   // Set CABAC output bitstream
; 399  :   child_state->cabac.stream = &child_state->stream;

	mov	eax, DWORD PTR _child_state$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+92], eax

; 400  :   
; 401  :   //Create sub-encoders
; 402  :   {
; 403  :     const encoder_control_t * const encoder = child_state->encoder_control;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$37[ebp], ecx

; 404  :     int child_count = 0;

	mov	DWORD PTR _child_count$36[ebp], 0

; 405  :     //We first check the type of this element.
; 406  :     //If it's a MAIN, it can allow both slices or tiles as child
; 407  :     //If it's a TILE, it can allow slices as child, if its parent is not a slice, or wavefront rows if there is no other children
; 408  :     //If it's a SLICE, it can allow tiles as child, if its parent is not a tile, or wavefront rows if there is no other children
; 409  :     //If it's a WAVEFRONT_ROW, it doesn't allow any children
; 410  :     int children_allow_wavefront_row = 0;

	mov	DWORD PTR _children_allow_wavefront_row$35[ebp], 0

; 411  :     int children_allow_slice = 0;

	mov	DWORD PTR _children_allow_slice$34[ebp], 0

; 412  :     int children_allow_tile = 0;

	mov	DWORD PTR _children_allow_tile$33[ebp], 0

; 413  :     int range_start;
; 414  :     
; 415  :     // First index of this encoder state in tile scan order.
; 416  :     int start_in_ts;
; 417  :     // Index of the first LCU after this state in tile scan order.
; 418  :     int end_in_ts;
; 419  :     
; 420  :     switch(child_state->type) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv228[ebp], ecx
	mov	edx, DWORD PTR tv228[ebp]
	sub	edx, 77					; 0000004dH
	mov	DWORD PTR tv228[ebp], edx
	cmp	DWORD PTR tv228[ebp], 10		; 0000000aH
	ja	$LN54@kvz_encode
	mov	eax, DWORD PTR tv228[ebp]
	movzx	ecx, BYTE PTR $LN132@kvz_encode[eax]
	jmp	DWORD PTR $LN133@kvz_encode[ecx*4]
$LN48@kvz_encode:

; 421  :       case ENCODER_STATE_TYPE_MAIN:
; 422  :         children_allow_slice = 1;

	mov	DWORD PTR _children_allow_slice$34[ebp], 1

; 423  :         children_allow_tile = 1;

	mov	DWORD PTR _children_allow_tile$33[ebp], 1

; 424  :         start_in_ts = 0;

	mov	DWORD PTR _start_in_ts$31[ebp], 0

; 425  :         end_in_ts = child_state->tile->frame->width_in_lcu * child_state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _end_in_ts$30[ebp], ecx

; 426  :         break;

	jmp	$LN2@kvz_encode
$LN49@kvz_encode:

; 427  :       case ENCODER_STATE_TYPE_SLICE:
; 428  :         assert(child_state->parent);

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN94@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 86					; 00000056H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CI@IKCIOEKA@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN94@kvz_encode:

; 429  :         if (child_state->parent->type != ENCODER_STATE_TYPE_TILE) children_allow_tile = 1;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 84			; 00000054H
	je	SHORT $LN50@kvz_encode
	mov	DWORD PTR _children_allow_tile$33[ebp], 1
$LN50@kvz_encode:

; 430  :         start_in_ts = child_state->slice->start_in_ts;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _start_in_ts$31[ebp], edx

; 431  :         end_in_ts = child_state->slice->end_in_ts + 1;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	DWORD PTR _end_in_ts$30[ebp], edx

; 432  :         int num_wpp_rows = (end_in_ts - start_in_ts) / child_state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _end_in_ts$30[ebp]
	sub	eax, DWORD PTR _start_in_ts$31[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cdq
	idiv	DWORD PTR [ecx+20]
	mov	DWORD PTR _num_wpp_rows$29[ebp], eax

; 433  :         children_allow_wavefront_row = encoder->cfg.wpp && num_wpp_rows > 1;

	mov	eax, DWORD PTR _encoder$37[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN95@kvz_encode
	cmp	DWORD PTR _num_wpp_rows$29[ebp], 1
	jle	SHORT $LN95@kvz_encode
	mov	DWORD PTR tv259[ebp], 1
	jmp	SHORT $LN96@kvz_encode
$LN95@kvz_encode:
	mov	DWORD PTR tv259[ebp], 0
$LN96@kvz_encode:
	mov	ecx, DWORD PTR tv259[ebp]
	mov	DWORD PTR _children_allow_wavefront_row$35[ebp], ecx

; 434  :         break;

	jmp	$LN2@kvz_encode
$LN51@kvz_encode:

; 435  :       case ENCODER_STATE_TYPE_TILE:
; 436  :         assert(child_state->parent);

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN97@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 94					; 0000005eH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CI@IKCIOEKA@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN97@kvz_encode:

; 437  :         if (child_state->parent->type != ENCODER_STATE_TYPE_SLICE) children_allow_slice = 1;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 83			; 00000053H
	je	SHORT $LN52@kvz_encode
	mov	DWORD PTR _children_allow_slice$34[ebp], 1
$LN52@kvz_encode:

; 438  :         children_allow_wavefront_row =

	mov	eax, DWORD PTR _encoder$37[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN98@kvz_encode
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+16], 1
	jle	SHORT $LN98@kvz_encode
	mov	DWORD PTR tv276[ebp], 1
	jmp	SHORT $LN99@kvz_encode
$LN98@kvz_encode:
	mov	DWORD PTR tv276[ebp], 0
$LN99@kvz_encode:
	mov	ecx, DWORD PTR tv276[ebp]
	mov	DWORD PTR _children_allow_wavefront_row$35[ebp], ecx

; 439  :           encoder->cfg.wpp && child_state->tile->frame->height_in_lcu > 1;
; 440  :         start_in_ts = child_state->tile->lcu_offset_in_ts;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _start_in_ts$31[ebp], edx

; 441  :         end_in_ts = child_state->tile->lcu_offset_in_ts + child_state->tile->frame->width_in_lcu * child_state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+20]
	imul	edx, DWORD PTR [eax+16]
	add	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _end_in_ts$30[ebp], edx

; 442  :         break;

	jmp	SHORT $LN2@kvz_encode
$LN53@kvz_encode:

; 443  :       case ENCODER_STATE_TYPE_WAVEFRONT_ROW:
; 444  :         //GCC tries to be too clever...
; 445  :         start_in_ts = -1;

	mov	DWORD PTR _start_in_ts$31[ebp], -1

; 446  :         end_in_ts = -1;

	mov	DWORD PTR _end_in_ts$30[ebp], -1

; 447  :         break;

	jmp	SHORT $LN2@kvz_encode
$LN54@kvz_encode:

; 448  :       default:
; 449  :         fprintf(stderr, "Invalid encoder_state->type %d!\n", child_state->type);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0CB@HPPNEMEB@Invalid?5encoder_state?9?$DOtype?5?$CFd?$CB@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 450  :         assert(0);

	xor	eax, eax
	jne	SHORT $LN100@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 108				; 0000006cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN100@kvz_encode:

; 451  :         return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN2@kvz_encode:

; 452  :     }
; 453  :     
; 454  :     range_start = start_in_ts;

	mov	eax, DWORD PTR _start_in_ts$31[ebp]
	mov	DWORD PTR _range_start$32[ebp], eax
$LN4@kvz_encode:

; 455  :     //printf("%c-%p: start_in_ts=%d, end_in_ts=%d\n",child_state->type, child_state, start_in_ts, end_in_ts);
; 456  :     while (range_start < end_in_ts && (children_allow_slice || children_allow_tile)) {

	mov	eax, DWORD PTR _range_start$32[ebp]
	cmp	eax, DWORD PTR _end_in_ts$30[ebp]
	jge	$LN5@kvz_encode
	cmp	DWORD PTR _children_allow_slice$34[ebp], 0
	jne	SHORT $LN55@kvz_encode
	cmp	DWORD PTR _children_allow_tile$33[ebp], 0
	je	$LN5@kvz_encode
$LN55@kvz_encode:

; 457  :       encoder_state_t *new_child = NULL;

	mov	DWORD PTR _new_child$28[ebp], 0

; 458  :       int range_end_slice = range_start; //Will be incremented to get the range of the "thing"

	mov	eax, DWORD PTR _range_start$32[ebp]
	mov	DWORD PTR _range_end_slice$27[ebp], eax

; 459  :       int range_end_tile = range_start; //Will be incremented to get the range of the "thing"

	mov	eax, DWORD PTR _range_start$32[ebp]
	mov	DWORD PTR _range_end_tile$26[ebp], eax

; 460  :       
; 461  :       int tile_allowed = kvz_lcu_at_tile_start(encoder, range_start) && children_allow_tile;

	mov	eax, DWORD PTR _range_start$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$37[ebp]
	push	ecx
	call	_kvz_lcu_at_tile_start
	add	esp, 8
	test	eax, eax
	je	SHORT $LN101@kvz_encode
	cmp	DWORD PTR _children_allow_tile$33[ebp], 0
	je	SHORT $LN101@kvz_encode
	mov	DWORD PTR tv311[ebp], 1
	jmp	SHORT $LN102@kvz_encode
$LN101@kvz_encode:
	mov	DWORD PTR tv311[ebp], 0
$LN102@kvz_encode:
	mov	edx, DWORD PTR tv311[ebp]
	mov	DWORD PTR _tile_allowed$25[ebp], edx

; 462  :       int slice_allowed = kvz_lcu_at_slice_start(encoder, range_start) && children_allow_slice;

	mov	eax, DWORD PTR _range_start$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$37[ebp]
	push	ecx
	call	_kvz_lcu_at_slice_start
	add	esp, 8
	test	eax, eax
	je	SHORT $LN103@kvz_encode
	cmp	DWORD PTR _children_allow_slice$34[ebp], 0
	je	SHORT $LN103@kvz_encode
	mov	DWORD PTR tv317[ebp], 1
	jmp	SHORT $LN104@kvz_encode
$LN103@kvz_encode:
	mov	DWORD PTR tv317[ebp], 0
$LN104@kvz_encode:
	mov	edx, DWORD PTR tv317[ebp]
	mov	DWORD PTR _slice_allowed$24[ebp], edx

; 463  :       
; 464  :       //Find the smallest structure following the cursor
; 465  :       if (slice_allowed) {

	cmp	DWORD PTR _slice_allowed$24[ebp], 0
	je	SHORT $LN56@kvz_encode
$LN6@kvz_encode:

; 466  :         while(!kvz_lcu_at_slice_end(encoder, range_end_slice)) {

	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$37[ebp]
	push	ecx
	call	_kvz_lcu_at_slice_end
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN56@kvz_encode

; 467  :           ++range_end_slice;

	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	add	eax, 1
	mov	DWORD PTR _range_end_slice$27[ebp], eax

; 468  :         }

	jmp	SHORT $LN6@kvz_encode
$LN56@kvz_encode:

; 469  :       }
; 470  :       
; 471  :       if (tile_allowed) {

	cmp	DWORD PTR _tile_allowed$25[ebp], 0
	je	SHORT $LN57@kvz_encode
$LN8@kvz_encode:

; 472  :         while(!kvz_lcu_at_tile_end(encoder, range_end_tile)) {

	mov	eax, DWORD PTR _range_end_tile$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$37[ebp]
	push	ecx
	call	_kvz_lcu_at_tile_end
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN57@kvz_encode

; 473  :           ++range_end_tile;

	mov	eax, DWORD PTR _range_end_tile$26[ebp]
	add	eax, 1
	mov	DWORD PTR _range_end_tile$26[ebp], eax

; 474  :         }

	jmp	SHORT $LN8@kvz_encode
$LN57@kvz_encode:

; 475  :       }
; 476  :       
; 477  :       //printf("range_start=%d, range_end_slice=%d, range_end_tile=%d, tile_allowed=%d, slice_allowed=%d end_in_ts=%d\n",range_start,range_end_slice,range_end_tile,tile_allowed,slice_allowed,end_in_ts);
; 478  :       
; 479  :       if ((!tile_allowed || (range_end_slice >= range_end_tile)) && !new_child && slice_allowed) {

	cmp	DWORD PTR _tile_allowed$25[ebp], 0
	je	SHORT $LN59@kvz_encode
	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	cmp	eax, DWORD PTR _range_end_tile$26[ebp]
	jl	$LN58@kvz_encode
$LN59@kvz_encode:
	cmp	DWORD PTR _new_child$28[ebp], 0
	jne	$LN58@kvz_encode
	cmp	DWORD PTR _slice_allowed$24[ebp], 0
	je	$LN58@kvz_encode

; 480  :         //Create a slice
; 481  :         new_child = &child_state->children[child_count];

	imul	eax, DWORD PTR _child_count$36[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _new_child$28[ebp], eax

; 482  :         new_child->encoder_control = encoder;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _encoder$37[ebp]
	mov	DWORD PTR [eax], ecx

; 483  :         new_child->type  = ENCODER_STATE_TYPE_SLICE;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	DWORD PTR [eax+4], 83			; 00000053H

; 484  :         new_child->frame = child_state->frame;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 485  :         new_child->tile  = child_state->tile;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 486  :         new_child->wfrow = child_state->wfrow;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 487  :         new_child->slice = MALLOC(encoder_state_config_slice_t, 1);

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _new_child$28[ebp]
	mov	DWORD PTR [ecx+28], eax

; 488  :         if (!new_child->slice || !encoder_state_config_slice_init(new_child, range_start, range_end_slice)) {

	mov	eax, DWORD PTR _new_child$28[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN61@kvz_encode
	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _range_start$32[ebp]
	push	ecx
	mov	edx, DWORD PTR _new_child$28[ebp]
	push	edx
	call	_encoder_state_config_slice_init
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN58@kvz_encode
$LN61@kvz_encode:

; 489  :           fprintf(stderr, "Could not initialize encoder_state->slice!\n");

	push	OFFSET ??_C@_0CM@GFACJLGN@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 490  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN58@kvz_encode:

; 491  :         }
; 492  :       }
; 493  :       
; 494  :       if ((!slice_allowed || (range_end_slice < range_end_tile)) && !new_child && tile_allowed) {

	cmp	DWORD PTR _slice_allowed$24[ebp], 0
	je	SHORT $LN63@kvz_encode
	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	cmp	eax, DWORD PTR _range_end_tile$26[ebp]
	jge	$LN62@kvz_encode
$LN63@kvz_encode:
	cmp	DWORD PTR _new_child$28[ebp], 0
	jne	$LN62@kvz_encode
	cmp	DWORD PTR _tile_allowed$25[ebp], 0
	je	$LN62@kvz_encode

; 495  :         //Create a tile
; 496  :         int tile_id = encoder->tiles_tile_id[range_start];

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4504]
	mov	edx, DWORD PTR _range_start$32[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _tile_id$23[ebp], eax

; 497  :         int tile_x = tile_id % encoder->cfg.tiles_width_count;

	mov	ecx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR _tile_id$23[ebp]
	cdq
	idiv	DWORD PTR [ecx+136]
	mov	DWORD PTR _tile_x$22[ebp], edx

; 498  :         int tile_y = tile_id / encoder->cfg.tiles_width_count;

	mov	ecx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR _tile_id$23[ebp]
	cdq
	idiv	DWORD PTR [ecx+136]
	mov	DWORD PTR _tile_y$21[ebp], eax

; 499  :         
; 500  :         int lcu_offset_x = encoder->tiles_col_bd[tile_x];

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4488]
	mov	edx, DWORD PTR _tile_x$22[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _lcu_offset_x$20[ebp], eax

; 501  :         int lcu_offset_y = encoder->tiles_row_bd[tile_y];

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4492]
	mov	edx, DWORD PTR _tile_y$21[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _lcu_offset_y$19[ebp], eax

; 502  :         int width_in_lcu = encoder->tiles_col_bd[tile_x+1]-encoder->tiles_col_bd[tile_x];

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4488]
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+4488]
	mov	edx, DWORD PTR _tile_x$22[ebp]
	mov	esi, DWORD PTR _tile_x$22[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4+4]
	sub	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _width_in_lcu$18[ebp], ecx

; 503  :         int height_in_lcu = encoder->tiles_row_bd[tile_y+1]-encoder->tiles_row_bd[tile_y];

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4492]
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+4492]
	mov	edx, DWORD PTR _tile_y$21[ebp]
	mov	esi, DWORD PTR _tile_y$21[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4+4]
	sub	ecx, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _height_in_lcu$17[ebp], ecx

; 504  :         int width = MIN(width_in_lcu * LCU_WIDTH, encoder->in.width - lcu_offset_x * LCU_WIDTH);

	mov	eax, DWORD PTR _width_in_lcu$18[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _lcu_offset_x$20[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	edx, DWORD PTR [edx+2480]
	sub	edx, ecx
	cmp	eax, edx
	jge	SHORT $LN105@kvz_encode
	mov	eax, DWORD PTR _width_in_lcu$18[ebp]
	shl	eax, 6
	mov	DWORD PTR tv404[ebp], eax
	jmp	SHORT $LN106@kvz_encode
$LN105@kvz_encode:
	mov	ecx, DWORD PTR _lcu_offset_x$20[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+2480]
	sub	eax, ecx
	mov	DWORD PTR tv404[ebp], eax
$LN106@kvz_encode:
	mov	ecx, DWORD PTR tv404[ebp]
	mov	DWORD PTR _width$16[ebp], ecx

; 505  :         int height = MIN(height_in_lcu * LCU_WIDTH, encoder->in.height - lcu_offset_y * LCU_WIDTH);

	mov	eax, DWORD PTR _height_in_lcu$17[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _lcu_offset_y$19[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	edx, DWORD PTR [edx+2484]
	sub	edx, ecx
	cmp	eax, edx
	jge	SHORT $LN107@kvz_encode
	mov	eax, DWORD PTR _height_in_lcu$17[ebp]
	shl	eax, 6
	mov	DWORD PTR tv414[ebp], eax
	jmp	SHORT $LN108@kvz_encode
$LN107@kvz_encode:
	mov	ecx, DWORD PTR _lcu_offset_y$19[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+2484]
	sub	eax, ecx
	mov	DWORD PTR tv414[ebp], eax
$LN108@kvz_encode:
	mov	ecx, DWORD PTR tv414[ebp]
	mov	DWORD PTR _height$15[ebp], ecx

; 506  :         
; 507  :         new_child = &child_state->children[child_count];

	imul	eax, DWORD PTR _child_count$36[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _new_child$28[ebp], eax

; 508  :         new_child->encoder_control = encoder;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _encoder$37[ebp]
	mov	DWORD PTR [eax], ecx

; 509  :         new_child->type  = ENCODER_STATE_TYPE_TILE;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	DWORD PTR [eax+4], 84			; 00000054H

; 510  :         new_child->frame = child_state->frame;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 511  :         new_child->tile  = MALLOC(encoder_state_config_tile_t, 1);

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _new_child$28[ebp]
	mov	DWORD PTR [ecx+24], eax

; 512  :         new_child->slice = child_state->slice;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 513  :         new_child->wfrow = child_state->wfrow;

	mov	eax, DWORD PTR _new_child$28[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 514  :         
; 515  :         if (!new_child->tile || !encoder_state_config_tile_init(new_child, lcu_offset_x, lcu_offset_y, width, height, width_in_lcu, height_in_lcu)) {

	mov	eax, DWORD PTR _new_child$28[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN65@kvz_encode
	mov	eax, DWORD PTR _height_in_lcu$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_in_lcu$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$15[ebp]
	push	edx
	mov	eax, DWORD PTR _width$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu_offset_y$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_offset_x$20[ebp]
	push	edx
	mov	eax, DWORD PTR _new_child$28[ebp]
	push	eax
	call	_encoder_state_config_tile_init
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN62@kvz_encode
$LN65@kvz_encode:

; 516  :           fprintf(stderr, "Could not initialize encoder_state->tile!\n");

	push	OFFSET ??_C@_0CL@CLJFOFKC@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 517  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN62@kvz_encode:

; 518  :         }
; 519  :       }
; 520  :       
; 521  :       if (new_child) {

	cmp	DWORD PTR _new_child$28[ebp], 0
	je	$LN66@kvz_encode

; 522  :         child_state->children = realloc(child_state->children, sizeof(encoder_state_t) * (2+child_count));

	mov	eax, DWORD PTR _child_count$36[ebp]
	add	eax, 2
	imul	ecx, eax, 336
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 523  :         if (!child_state->children) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN67@kvz_encode

; 524  :           fprintf(stderr, "Failed to allocate memory for children...\n");

	push	OFFSET ??_C@_0CL@FPGHLMEH@Failed?5to?5allocate?5memory?5for?5c@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 525  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN67@kvz_encode:

; 526  :         }
; 527  : 
; 528  :         child_state->children[1 + child_count].encoder_control = NULL;

	mov	eax, DWORD PTR _child_count$36[ebp]
	add	eax, 1
	imul	ecx, eax, 336
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx], 0

; 529  : 
; 530  :         //Fix children parent (since we changed the address), except for the last one which is not ready yet
; 531  :         {
; 532  :           int i, j;
; 533  :           for (i = 0; child_state->children[i].encoder_control && i < child_count; ++i) {

	mov	DWORD PTR _i$14[ebp], 0
	jmp	SHORT $LN12@kvz_encode
$LN10@kvz_encode:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN12@kvz_encode:
	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN11@kvz_encode
	mov	eax, DWORD PTR _i$14[ebp]
	cmp	eax, DWORD PTR _child_count$36[ebp]
	jge	$LN11@kvz_encode

; 534  :             for (j = 0; child_state->children[i].children[j].encoder_control; ++j) {

	mov	DWORD PTR _j$13[ebp], 0
	jmp	SHORT $LN15@kvz_encode
$LN13@kvz_encode:
	mov	eax, DWORD PTR _j$13[ebp]
	add	eax, 1
	mov	DWORD PTR _j$13[ebp], eax
$LN15@kvz_encode:
	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	ecx, DWORD PTR _j$13[ebp], 336
	mov	edx, DWORD PTR [edx+eax+8]
	cmp	DWORD PTR [edx+ecx], 0
	je	SHORT $LN14@kvz_encode

; 535  :               child_state->children[i].children[j].parent = &child_state->children[i];

	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	imul	edx, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	imul	esi, DWORD PTR _j$13[ebp], 336
	mov	edx, DWORD PTR [ecx+edx+8]
	mov	DWORD PTR [edx+esi+12], eax

; 536  :             }

	jmp	SHORT $LN13@kvz_encode
$LN14@kvz_encode:

; 537  :             for (j = 0; j < child_state->children[i].lcu_order_count; ++j) {

	mov	DWORD PTR _j$13[ebp], 0
	jmp	SHORT $LN18@kvz_encode
$LN16@kvz_encode:
	mov	eax, DWORD PTR _j$13[ebp]
	add	eax, 1
	mov	DWORD PTR _j$13[ebp], eax
$LN18@kvz_encode:
	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$13[ebp]
	cmp	ecx, DWORD PTR [edx+eax+44]
	jae	SHORT $LN17@kvz_encode

; 538  :               child_state->children[i].lcu_order[j].encoder_state = &child_state->children[i];

	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	imul	edx, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	imul	esi, DWORD PTR _j$13[ebp], 68
	mov	edx, DWORD PTR [ecx+edx+40]
	mov	DWORD PTR [edx+esi+8], eax

; 539  :             }

	jmp	SHORT $LN16@kvz_encode
$LN17@kvz_encode:

; 540  :             child_state->children[i].cabac.stream = &child_state->children[i].stream;

	imul	eax, DWORD PTR _i$14[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+48]
	imul	ecx, DWORD PTR _i$14[ebp], 336
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx+92], eax

; 541  :           }

	jmp	$LN10@kvz_encode
$LN11@kvz_encode:

; 542  :         }
; 543  :         
; 544  :         if (!kvz_encoder_state_init(&child_state->children[child_count], child_state)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	imul	ecx, DWORD PTR _child_count$36[ebp], 336
	mov	edx, DWORD PTR _child_state$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	_kvz_encoder_state_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN68@kvz_encode

; 545  :           fprintf(stderr, "Unable to init child...\n");

	push	OFFSET ??_C@_0BJ@JHELPOJE@Unable?5to?5init?5child?4?4?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 546  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN68@kvz_encode:

; 547  :         }
; 548  :         child_count += 1;

	mov	eax, DWORD PTR _child_count$36[ebp]
	add	eax, 1
	mov	DWORD PTR _child_count$36[ebp], eax
$LN66@kvz_encode:

; 549  :       }
; 550  :       
; 551  :       range_start = MAX(range_end_slice, range_end_tile) + 1;

	mov	eax, DWORD PTR _range_end_slice$27[ebp]
	cmp	eax, DWORD PTR _range_end_tile$26[ebp]
	jle	SHORT $LN109@kvz_encode
	mov	ecx, DWORD PTR _range_end_slice$27[ebp]
	mov	DWORD PTR tv532[ebp], ecx
	jmp	SHORT $LN110@kvz_encode
$LN109@kvz_encode:
	mov	edx, DWORD PTR _range_end_tile$26[ebp]
	mov	DWORD PTR tv532[ebp], edx
$LN110@kvz_encode:
	mov	eax, DWORD PTR tv532[ebp]
	add	eax, 1
	mov	DWORD PTR _range_start$32[ebp], eax

; 552  :     }

	jmp	$LN4@kvz_encode
$LN5@kvz_encode:

; 553  :     
; 554  :     //We create wavefronts only if we have no children
; 555  :     if (children_allow_wavefront_row && child_count == 0) {

	cmp	DWORD PTR _children_allow_wavefront_row$35[ebp], 0
	je	$LN69@kvz_encode
	cmp	DWORD PTR _child_count$36[ebp], 0
	jne	$LN69@kvz_encode

; 556  :       int first_row = encoder->tiles_ctb_addr_ts_to_rs[start_in_ts] / encoder->in.width_in_lcu;

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4500]
	mov	edx, DWORD PTR _start_in_ts$31[ebp]
	mov	esi, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cdq
	idiv	DWORD PTR [esi+2488]
	mov	DWORD PTR _first_row$12[ebp], eax

; 557  :       int last_row = encoder->tiles_ctb_addr_ts_to_rs[start_in_ts] / encoder->in.width_in_lcu;

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4500]
	mov	edx, DWORD PTR _start_in_ts$31[ebp]
	mov	esi, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cdq
	idiv	DWORD PTR [esi+2488]
	mov	DWORD PTR _last_row$11[ebp], eax

; 558  :       int num_rows;
; 559  :       int i;
; 560  :       
; 561  :       assert(!(children_allow_slice || children_allow_tile));

	cmp	DWORD PTR _children_allow_slice$34[ebp], 0
	jne	SHORT $LN111@kvz_encode
	cmp	DWORD PTR _children_allow_tile$33[ebp], 0
	je	SHORT $LN112@kvz_encode
$LN111@kvz_encode:
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	eax, 219				; 000000dbH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FO@BMCOFEPN@?$AA?$CB?$AA?$CI?$AAc?$AAh?$AAi?$AAl?$AAd?$AAr?$AAe?$AAn?$AA_?$AAa?$AAl?$AAl?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN112@kvz_encode:

; 562  :       assert(child_count == 0);

	cmp	DWORD PTR _child_count$36[ebp], 0
	je	SHORT $LN113@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	eax, 220				; 000000dcH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CC@FHCCGELM@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN113@kvz_encode:

; 563  :       
; 564  :       for (i=start_in_ts; i<end_in_ts; ++i) {

	mov	eax, DWORD PTR _start_in_ts$31[ebp]
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN21@kvz_encode
$LN19@kvz_encode:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN21@kvz_encode:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _end_in_ts$30[ebp]
	jge	SHORT $LN20@kvz_encode

; 565  :         const int row = encoder->tiles_ctb_addr_ts_to_rs[i] / encoder->in.width_in_lcu;

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4500]
	mov	edx, DWORD PTR _i$9[ebp]
	mov	esi, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cdq
	idiv	DWORD PTR [esi+2488]
	mov	DWORD PTR _row$8[ebp], eax

; 566  :         if (row < first_row) first_row = row;

	mov	eax, DWORD PTR _row$8[ebp]
	cmp	eax, DWORD PTR _first_row$12[ebp]
	jge	SHORT $LN70@kvz_encode
	mov	eax, DWORD PTR _row$8[ebp]
	mov	DWORD PTR _first_row$12[ebp], eax
$LN70@kvz_encode:

; 567  :         if (row > last_row) last_row = row;

	mov	eax, DWORD PTR _row$8[ebp]
	cmp	eax, DWORD PTR _last_row$11[ebp]
	jle	SHORT $LN71@kvz_encode
	mov	eax, DWORD PTR _row$8[ebp]
	mov	DWORD PTR _last_row$11[ebp], eax
$LN71@kvz_encode:

; 568  :       }

	jmp	SHORT $LN19@kvz_encode
$LN20@kvz_encode:

; 569  :       
; 570  :       num_rows = last_row - first_row + 1;

	mov	eax, DWORD PTR _last_row$11[ebp]
	sub	eax, DWORD PTR _first_row$12[ebp]
	add	eax, 1
	mov	DWORD PTR _num_rows$10[ebp], eax

; 571  :       
; 572  :       //When entropy_coding_sync_enabled_flag is equal to 1 and the first coding tree block in a slice is not the first coding
; 573  :       //tree block of a row of coding tree blocks in a tile, it is a requirement of bitstream conformance that the last coding tree
; 574  :       //block in the slice shall belong to the same row of coding tree blocks as the first coding tree block in the slice.
; 575  :       
; 576  :       if (encoder->tiles_ctb_addr_ts_to_rs[start_in_ts] % encoder->in.width_in_lcu != child_state->tile->lcu_offset_x) {

	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+4500]
	mov	edx, DWORD PTR _start_in_ts$31[ebp]
	mov	esi, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cdq
	idiv	DWORD PTR [esi+2488]
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN72@kvz_encode

; 577  :         if (num_rows > 1) {

	cmp	DWORD PTR _num_rows$10[ebp], 1
	jle	SHORT $LN72@kvz_encode

; 578  :           fprintf(stderr, "Invalid: first CTB in slice %d is not at the tile %d edge, and the slice spans on more than one row.\n", child_state->slice->id, child_state->tile->id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0GG@LNBGIMPD@Invalid?3?5first?5CTB?5in?5slice?5?$CFd?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 579  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN72@kvz_encode:

; 580  :         }
; 581  :       }
; 582  :       
; 583  :       //FIXME Do the same kind of check if we implement slice segments
; 584  :     
; 585  :       child_count = num_rows;

	mov	eax, DWORD PTR _num_rows$10[ebp]
	mov	DWORD PTR _child_count$36[ebp], eax

; 586  :       child_state->children = realloc(child_state->children, sizeof(encoder_state_t) * (num_rows + 1));

	mov	eax, DWORD PTR _num_rows$10[ebp]
	add	eax, 1
	imul	ecx, eax, 336
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 587  :       child_state->children[num_rows].encoder_control = NULL;

	imul	eax, DWORD PTR _num_rows$10[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax], 0

; 588  :       
; 589  :       for (i=0; i < num_rows; ++i) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN24@kvz_encode
$LN22@kvz_encode:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN24@kvz_encode:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _num_rows$10[ebp]
	jge	$LN69@kvz_encode

; 590  :         encoder_state_t *new_child = &child_state->children[i];

	imul	eax, DWORD PTR _i$9[ebp], 336
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _new_child$7[ebp], eax

; 591  :         
; 592  :         new_child->encoder_control = encoder;

	mov	eax, DWORD PTR _new_child$7[ebp]
	mov	ecx, DWORD PTR _encoder$37[ebp]
	mov	DWORD PTR [eax], ecx

; 593  :         new_child->type  = ENCODER_STATE_TYPE_WAVEFRONT_ROW;

	mov	eax, DWORD PTR _new_child$7[ebp]
	mov	DWORD PTR [eax+4], 87			; 00000057H

; 594  :         new_child->frame = child_state->frame;

	mov	eax, DWORD PTR _new_child$7[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 595  :         new_child->tile  = child_state->tile;

	mov	eax, DWORD PTR _new_child$7[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 596  :         new_child->slice = child_state->slice;

	mov	eax, DWORD PTR _new_child$7[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 597  :         new_child->wfrow = MALLOC(encoder_state_config_wfrow_t, 1);

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _new_child$7[ebp]
	mov	DWORD PTR [ecx+32], eax

; 598  :         
; 599  :         if (!new_child->wfrow || !encoder_state_config_wfrow_init(new_child, i)) {

	mov	eax, DWORD PTR _new_child$7[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN75@kvz_encode
	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_child$7[ebp]
	push	ecx
	call	_encoder_state_config_wfrow_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN74@kvz_encode
$LN75@kvz_encode:

; 600  :           fprintf(stderr, "Could not initialize encoder_state->wfrow!\n");

	push	OFFSET ??_C@_0CM@BDMJEKJE@Could?5not?5initialize?5encoder_st@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 601  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN74@kvz_encode:

; 602  :         }
; 603  :         
; 604  :         if (!kvz_encoder_state_init(new_child, child_state)) {

	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_child$7[ebp]
	push	ecx
	call	_kvz_encoder_state_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN76@kvz_encode

; 605  :           fprintf(stderr, "Unable to init child...\n");

	push	OFFSET ??_C@_0BJ@JHELPOJE@Unable?5to?5init?5child?4?4?4?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 606  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN76@kvz_encode:

; 607  :         }
; 608  :       }

	jmp	$LN22@kvz_encode
$LN69@kvz_encode:

; 609  :     }
; 610  :     
; 611  :     child_state->is_leaf = (child_count == 0);

	cmp	DWORD PTR _child_count$36[ebp], 0
	jne	SHORT $LN114@kvz_encode
	mov	DWORD PTR tv674[ebp], 1
	jmp	SHORT $LN115@kvz_encode
$LN114@kvz_encode:
	mov	DWORD PTR tv674[ebp], 0
$LN115@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR tv674[ebp]
	mov	DWORD PTR [eax+36], ecx

; 612  :     //This node is a leaf, compute LCU-order
; 613  :     if (child_state->is_leaf) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN77@kvz_encode

; 614  :       //All LCU computations are relative to the tile
; 615  :       //Remark: this could be optimized, but since it's run only once, it's better to do it in a understandable way.
; 616  :       
; 617  :       //By default, the full tile
; 618  :       int i;
; 619  :       int lcu_id;
; 620  :       int lcu_start = 0;

	mov	DWORD PTR _lcu_start$4[ebp], 0

; 621  :       //End is the element AFTER the end (iterate < lcu_end)
; 622  :       int lcu_end = child_state->tile->frame->width_in_lcu * child_state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lcu_end$3[ebp], ecx

; 623  :       
; 624  :       //Restrict to the current slice if needed
; 625  :       lcu_start = MAX(lcu_start, child_state->slice->start_in_ts - child_state->tile->lcu_offset_in_ts);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+4]
	sub	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR _lcu_start$4[ebp], ecx
	jle	SHORT $LN116@kvz_encode
	mov	edx, DWORD PTR _lcu_start$4[ebp]
	mov	DWORD PTR tv695[ebp], edx
	jmp	SHORT $LN117@kvz_encode
$LN116@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+4]
	sub	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv695[ebp], ecx
$LN117@kvz_encode:
	mov	edx, DWORD PTR tv695[ebp]
	mov	DWORD PTR _lcu_start$4[ebp], edx

; 626  :       lcu_end = MIN(lcu_end, child_state->slice->end_in_ts - child_state->tile->lcu_offset_in_ts + 1);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	cmp	DWORD PTR _lcu_end$3[ebp], ecx
	jge	SHORT $LN118@kvz_encode
	mov	edx, DWORD PTR _lcu_end$3[ebp]
	mov	DWORD PTR tv709[ebp], edx
	jmp	SHORT $LN119@kvz_encode
$LN118@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	DWORD PTR tv709[ebp], ecx
$LN119@kvz_encode:
	mov	edx, DWORD PTR tv709[ebp]
	mov	DWORD PTR _lcu_end$3[ebp], edx

; 627  :       
; 628  :       //Restrict to the current wavefront row if needed
; 629  :       if (child_state->type == ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+4], 87			; 00000057H
	jne	$LN79@kvz_encode

; 630  :         lcu_start = MAX(lcu_start, (child_state->wfrow->lcu_offset_y) * child_state->tile->frame->width_in_lcu);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR _lcu_start$4[ebp], eax
	jle	SHORT $LN120@kvz_encode
	mov	ecx, DWORD PTR _lcu_start$4[ebp]
	mov	DWORD PTR tv725[ebp], ecx
	jmp	SHORT $LN121@kvz_encode
$LN120@kvz_encode:
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
	imul	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv725[ebp], edx
$LN121@kvz_encode:
	mov	eax, DWORD PTR tv725[ebp]
	mov	DWORD PTR _lcu_start$4[ebp], eax

; 631  :         lcu_end = MIN(lcu_end, (child_state->wfrow->lcu_offset_y + 1) * child_state->tile->frame->width_in_lcu);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	imul	edx, DWORD PTR [eax+20]
	cmp	DWORD PTR _lcu_end$3[ebp], edx
	jge	SHORT $LN122@kvz_encode
	mov	ecx, DWORD PTR _lcu_end$3[ebp]
	mov	DWORD PTR tv741[ebp], ecx
	jmp	SHORT $LN123@kvz_encode
$LN122@kvz_encode:
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax]
	imul	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR tv741[ebp], ecx
$LN123@kvz_encode:
	mov	eax, DWORD PTR tv741[ebp]
	mov	DWORD PTR _lcu_end$3[ebp], eax
$LN79@kvz_encode:

; 632  :       }
; 633  :       
; 634  :       child_state->lcu_order_count = lcu_end - lcu_start;

	mov	eax, DWORD PTR _lcu_end$3[ebp]
	sub	eax, DWORD PTR _lcu_start$4[ebp]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 635  :       child_state->lcu_order = MALLOC(lcu_order_element_t, child_state->lcu_order_count);

	mov	eax, DWORD PTR _child_state$[ebp]
	imul	ecx, DWORD PTR [eax+44], 68
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [edx+40], eax

; 636  :       assert(child_state->lcu_order);

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN124@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 294				; 00000126H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CO@KEEFJGPG@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN124@kvz_encode:

; 637  :       
; 638  :       for (i = 0; i < child_state->lcu_order_count; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN27@kvz_encode
$LN25@kvz_encode:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN27@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jae	$LN26@kvz_encode

; 639  :         lcu_id = lcu_start + i;

	mov	eax, DWORD PTR _lcu_start$4[ebp]
	add	eax, DWORD PTR _i$6[ebp]
	mov	DWORD PTR _lcu_id$5[ebp], eax

; 640  :         child_state->lcu_order[i].encoder_state = child_state;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx

; 641  :         child_state->lcu_order[i].id = lcu_id;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _lcu_id$5[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 642  :         child_state->lcu_order[i].index = i;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 643  :         child_state->lcu_order[i].position.x = lcu_id % child_state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lcu_id$5[ebp]
	cdq
	idiv	DWORD PTR [ecx+20]
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [ecx+eax+12], edx

; 644  :         child_state->lcu_order[i].position.y = lcu_id / child_state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lcu_id$5[ebp]
	cdq
	idiv	DWORD PTR [ecx+20]
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [ecx+edx+16], eax

; 645  :         child_state->lcu_order[i].position_px.x = child_state->lcu_order[i].position.x * LCU_WIDTH;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+eax+12]
	shl	eax, 6
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+20], eax

; 646  :         child_state->lcu_order[i].position_px.y = child_state->lcu_order[i].position.y * LCU_WIDTH;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+eax+16]
	shl	eax, 6
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+24], eax

; 647  :         child_state->lcu_order[i].size.x = MIN(LCU_WIDTH, encoder->in.width - (child_state->tile->lcu_offset_x * LCU_WIDTH + child_state->lcu_order[i].position_px.x));

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 6
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+2480]
	sub	ecx, edx
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN125@kvz_encode
	mov	DWORD PTR tv834[ebp], 64		; 00000040H
	jmp	SHORT $LN126@kvz_encode
$LN125@kvz_encode:
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 6
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [eax+40]
	add	ecx, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+2480]
	sub	eax, ecx
	mov	DWORD PTR tv834[ebp], eax
$LN126@kvz_encode:
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR tv834[ebp]
	mov	DWORD PTR [eax+ecx+28], edx

; 648  :         child_state->lcu_order[i].size.y = MIN(LCU_WIDTH, encoder->in.height - (child_state->tile->lcu_offset_y * LCU_WIDTH + child_state->lcu_order[i].position_px.y));

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 6
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR [ecx+eax+24]
	mov	eax, DWORD PTR _encoder$37[ebp]
	mov	ecx, DWORD PTR [eax+2484]
	sub	ecx, edx
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN127@kvz_encode
	mov	DWORD PTR tv860[ebp], 64		; 00000040H
	jmp	SHORT $LN128@kvz_encode
$LN127@kvz_encode:
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 6
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [eax+40]
	add	ecx, DWORD PTR [eax+edx+24]
	mov	edx, DWORD PTR _encoder$37[ebp]
	mov	eax, DWORD PTR [edx+2484]
	sub	eax, ecx
	mov	DWORD PTR tv860[ebp], eax
$LN128@kvz_encode:
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR tv860[ebp]
	mov	DWORD PTR [eax+ecx+32], edx

; 649  :         child_state->lcu_order[i].first_row = kvz_lcu_in_first_row(child_state, child_state->tile->lcu_offset_in_ts + lcu_id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _lcu_id$5[ebp]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_kvz_lcu_in_first_row
	add	esp, 8
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+40], eax

; 650  :         child_state->lcu_order[i].last_row = kvz_lcu_in_last_row(child_state, child_state->tile->lcu_offset_in_ts + lcu_id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _lcu_id$5[ebp]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_kvz_lcu_in_last_row
	add	esp, 8
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+48], eax

; 651  :         child_state->lcu_order[i].first_column = kvz_lcu_in_first_column(child_state, child_state->tile->lcu_offset_in_ts + lcu_id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _lcu_id$5[ebp]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_kvz_lcu_in_first_column
	add	esp, 8
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+36], eax

; 652  :         child_state->lcu_order[i].last_column = kvz_lcu_in_last_column(child_state, child_state->tile->lcu_offset_in_ts + lcu_id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _lcu_id$5[ebp]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	push	eax
	call	_kvz_lcu_in_last_column
	add	esp, 8
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+ecx+44], eax

; 653  :         
; 654  :         child_state->lcu_order[i].above = NULL;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+eax+52], 0

; 655  :         child_state->lcu_order[i].below = NULL;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+eax+56], 0

; 656  :         child_state->lcu_order[i].left = NULL;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+eax+60], 0

; 657  :         child_state->lcu_order[i].right = NULL;

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [edx+eax+64], 0

; 658  :         
; 659  :         if (!child_state->lcu_order[i].first_row) {

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [edx+eax+40], 0
	jne	$LN80@kvz_encode

; 660  :           //Find LCU above
; 661  :           if (child_state->type == ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+4], 87			; 00000057H
	jne	$LN81@kvz_encode

; 662  :             int j;
; 663  :             //For all previous wavefront rows
; 664  :             for (j=0; &child_state->parent->children[j] != child_state && child_state->parent->children[j].encoder_control; ++j) {

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN30@kvz_encode
$LN28@kvz_encode:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN30@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	add	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _child_state$[ebp]
	je	$LN29@kvz_encode
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax+edx], 0
	je	$LN29@kvz_encode

; 665  :               if (child_state->parent->children[j].wfrow->lcu_offset_y == child_state->wfrow->lcu_offset_y - 1) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [eax+edx+32]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax]
	sub	edx, 1
	cmp	DWORD PTR [ecx], edx
	jne	$LN83@kvz_encode

; 666  :                 int k;
; 667  :                 for (k=0; k < child_state->parent->children[j].lcu_order_count; ++k) {

	mov	DWORD PTR _k$1[ebp], 0
	jmp	SHORT $LN33@kvz_encode
$LN31@kvz_encode:
	mov	eax, DWORD PTR _k$1[ebp]
	add	eax, 1
	mov	DWORD PTR _k$1[ebp], eax
$LN33@kvz_encode:
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _k$1[ebp]
	cmp	ecx, DWORD PTR [eax+edx+44]
	jae	$LN83@kvz_encode

; 668  :                   if (child_state->parent->children[j].lcu_order[k].position.x == child_state->lcu_order[i].position.x) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	imul	ecx, DWORD PTR _k$1[ebp], 68
	mov	edx, DWORD PTR [eax+edx+40]
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	esi, DWORD PTR _child_state$[ebp]
	mov	esi, DWORD PTR [esi+40]
	mov	ecx, DWORD PTR [edx+ecx+12]
	cmp	ecx, DWORD PTR [esi+eax+12]
	jne	$LN84@kvz_encode

; 669  :                     assert(child_state->parent->children[j].lcu_order[k].position.y == child_state->lcu_order[i].position.y - 1);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	imul	ecx, DWORD PTR _k$1[ebp], 68
	mov	edx, DWORD PTR [eax+edx+40]
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	esi, DWORD PTR _child_state$[ebp]
	mov	esi, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [esi+eax+16]
	sub	eax, 1
	cmp	DWORD PTR [edx+ecx+16], eax
	je	SHORT $LN129@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	ecx, 327				; 00000147H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1MK@PGPELNHO@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAa@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN129@kvz_encode:

; 670  :                     child_state->lcu_order[i].above = &child_state->parent->children[j].lcu_order[k];

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$2[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	imul	ecx, DWORD PTR _k$1[ebp], 68
	add	ecx, DWORD PTR [eax+edx+40]
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	DWORD PTR [eax+edx+52], ecx
$LN84@kvz_encode:

; 671  :                   }
; 672  :                 }

	jmp	$LN31@kvz_encode
$LN83@kvz_encode:

; 673  :               }
; 674  :             }

	jmp	$LN28@kvz_encode
$LN29@kvz_encode:

; 675  :           } else {

	jmp	SHORT $LN82@kvz_encode
$LN81@kvz_encode:

; 676  :             child_state->lcu_order[i].above = &child_state->lcu_order[i-child_state->tile->frame->width_in_lcu];

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$6[ebp]
	sub	eax, DWORD PTR [edx+20]
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _child_state$[ebp]
	add	ecx, DWORD PTR [edx+40]
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+eax+52], ecx
$LN82@kvz_encode:

; 677  :           }
; 678  :           assert(child_state->lcu_order[i].above);

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [edx+eax+52], 0
	jne	SHORT $LN130@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	eax, 336				; 00000150H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EA@PKEKODDI@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN130@kvz_encode:

; 679  :           child_state->lcu_order[i].above->below = &child_state->lcu_order[i];

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+40]
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR [ecx+edx+52]
	mov	DWORD PTR [edx+56], eax
$LN80@kvz_encode:

; 680  :         }
; 681  :         if (!child_state->lcu_order[i].first_column) {

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [edx+eax+36], 0
	jne	$LN85@kvz_encode

; 682  :           child_state->lcu_order[i].left = &child_state->lcu_order[i-1];

	mov	eax, DWORD PTR _i$6[ebp]
	sub	eax, 1
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _child_state$[ebp]
	add	ecx, DWORD PTR [edx+40]
	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	DWORD PTR [edx+eax+60], ecx

; 683  :           assert(child_state->lcu_order[i].left->position.x == child_state->lcu_order[i].position.x - 1);

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+eax+60]
	imul	ecx, DWORD PTR _i$6[ebp], 68
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [edx+ecx+12]
	sub	ecx, 1
	cmp	DWORD PTR [eax+12], ecx
	je	SHORT $LN131@kvz_encode
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_init@@9@9
	add	edx, 341				; 00000155H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JA@DDELKBCM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1KO@IPOAPGPC@?$AAc?$AAh?$AAi?$AAl?$AAd?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN131@kvz_encode:

; 684  :           child_state->lcu_order[i].left->right = &child_state->lcu_order[i];

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	add	eax, DWORD PTR [ecx+40]
	imul	edx, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR [ecx+edx+60]
	mov	DWORD PTR [edx+64], eax
$LN85@kvz_encode:

; 685  :         }
; 686  :       }

	jmp	$LN25@kvz_encode
$LN26@kvz_encode:

; 687  :     } else {

	jmp	SHORT $LN78@kvz_encode
$LN77@kvz_encode:

; 688  :       child_state->lcu_order_count = 0;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 689  :       child_state->lcu_order = NULL;

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN78@kvz_encode:

; 690  :     }
; 691  :   }
; 692  :   
; 693  :   //Validate the structure
; 694  :   if (child_state->type == ENCODER_STATE_TYPE_TILE) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+4], 84			; 00000054H
	jne	$LN86@kvz_encode

; 695  :     if (child_state->tile->lcu_offset_in_ts < child_state->slice->start_in_ts) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+24]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN87@kvz_encode

; 696  :       fprintf(stderr, "Tile %d starts before slice %d, in which it should be included!\n", child_state->tile->id, child_state->slice->id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0EB@HCOHOEFF@Tile?5?$CFd?5starts?5before?5slice?5?$CFd?0@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 697  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN87@kvz_encode:

; 698  :     }
; 699  :     if (child_state->tile->lcu_offset_in_ts + child_state->tile->frame->width_in_lcu * child_state->tile->frame->height_in_lcu - 1 > child_state->slice->end_in_ts) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+20]
	imul	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+24]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN86@kvz_encode

; 700  :       fprintf(stderr, "Tile %d ends after slice %d, in which it should be included!\n", child_state->tile->id, child_state->slice->id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0DO@GJEKFBNI@Tile?5?$CFd?5ends?5after?5slice?5?$CFd?0?5in@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 701  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN86@kvz_encode:

; 702  :     }
; 703  :   }
; 704  :   
; 705  :   if (child_state->type == ENCODER_STATE_TYPE_SLICE) {

	mov	eax, DWORD PTR _child_state$[ebp]
	cmp	DWORD PTR [eax+4], 83			; 00000053H
	jne	$LN89@kvz_encode

; 706  :     if (child_state->slice->start_in_ts < child_state->tile->lcu_offset_in_ts) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN90@kvz_encode

; 707  :       fprintf(stderr, "Slice %d starts before tile %d, in which it should be included!\n", child_state->slice->id, child_state->tile->id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0EB@INCNAFLB@Slice?5?$CFd?5starts?5before?5tile?5?$CFd?0@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 708  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_encode
$LN90@kvz_encode:

; 709  :     }
; 710  :     if (child_state->slice->end_in_ts > child_state->tile->lcu_offset_in_ts + child_state->tile->frame->width_in_lcu * child_state->tile->frame->height_in_lcu - 1) {

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR _child_state$[ebp]
	mov	edx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [edx]
	mov	esi, DWORD PTR _child_state$[ebp]
	mov	esi, DWORD PTR [esi+24]
	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+20]
	imul	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [eax+24]
	lea	edx, DWORD PTR [eax+edx-1]
	cmp	DWORD PTR [ecx+8], edx
	jle	SHORT $LN89@kvz_encode

; 711  :       fprintf(stderr, "Slice %d ends after tile %d, in which it should be included!\n", child_state->slice->id, child_state->tile->id);

	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _child_state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0DO@GNJBACMG@Slice?5?$CFd?5ends?5after?5tile?5?$CFd?0?5in@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 712  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_encode
$LN89@kvz_encode:

; 713  :     }
; 714  :   }
; 715  :   
; 716  : #ifdef KVZ_DEBUG_PRINT_THREADING_INFO
; 717  :   if (!parent_state) encoder_state_dump_graphviz(child_state);
; 718  : #endif //KVZ_DEBUG_PRINT_THREADING_INFO
; 719  :   return 1;

	mov	eax, 1
$LN1@kvz_encode:

; 720  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 652				; 0000028cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN133@kvz_encode:
	DD	$LN48@kvz_encode
	DD	$LN49@kvz_encode
	DD	$LN51@kvz_encode
	DD	$LN53@kvz_encode
	DD	$LN54@kvz_encode
$LN132@kvz_encode:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	3
_kvz_encoder_state_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
