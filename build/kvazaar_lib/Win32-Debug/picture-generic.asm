; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__C86F3A13_picture-generic@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategy_register_picture_generic
PUBLIC	_kvz_fast_clip_16bit_to_pixel
PUBLIC	_kvz_fast_clip_32bit_to_pixel
PUBLIC	_kvz_satd_4x4_subblock_generic
PUBLIC	_kvz_satd_4x4_subblock_quad_generic
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_abs:PROC
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _pixel_var_generic
_TEXT	SEGMENT
tv135 = -272						; size = 4
tv92 = -272						; size = 4
_tmp$1 = -72						; size = 8
_sum$ = -56						; size = 8
_i$ = -40						; size = 4
_arr_mean$ = -28					; size = 8
_var$ = -12						; size = 8
_arr$ = 8						; size = 4
_len$ = 12						; size = 4
_pixel_var_generic PROC					; COMDAT

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 754  :   double var = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _var$[ebp], xmm0

; 755  :   double arr_mean = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _arr_mean$[ebp], xmm0

; 756  : 
; 757  :   // Calculate array mean
; 758  :   int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 759  :   double sum = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum$[ebp], xmm0

; 760  : 
; 761  :   for (; i < len; ++i) {

	jmp	SHORT $LN4@pixel_var_
$LN2@pixel_var_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@pixel_var_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN3@pixel_var_

; 762  :     sum += arr[i];

	mov	eax, DWORD PTR _arr$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cvtsi2sd xmm0, ecx
	addsd	xmm0, QWORD PTR _sum$[ebp]
	movsd	QWORD PTR _sum$[ebp], xmm0

; 763  :   }

	jmp	SHORT $LN2@pixel_var_
$LN3@pixel_var_:

; 764  :   arr_mean = sum / (double)len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv92[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	xmm1, QWORD PTR _sum$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _arr_mean$[ebp], xmm1

; 765  : 
; 766  :   // Calculate array variance
; 767  :   for (i = 0; i < len; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@pixel_var_
$LN5@pixel_var_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@pixel_var_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN6@pixel_var_

; 768  :     double tmp = (double)arr[i] - arr_mean;

	mov	eax, DWORD PTR _arr$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cvtsi2sd xmm0, ecx
	subsd	xmm0, QWORD PTR _arr_mean$[ebp]
	movsd	QWORD PTR _tmp$1[ebp], xmm0

; 769  :     var += tmp*tmp;

	movsd	xmm0, QWORD PTR _tmp$1[ebp]
	mulsd	xmm0, QWORD PTR _tmp$1[ebp]
	addsd	xmm0, QWORD PTR _var$[ebp]
	movsd	QWORD PTR _var$[ebp], xmm0

; 770  :   }

	jmp	SHORT $LN5@pixel_var_
$LN6@pixel_var_:

; 771  : 
; 772  :   var /= len;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv135[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv135[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	xmm1, QWORD PTR _var$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _var$[ebp], xmm1

; 773  : 
; 774  :   return var;

	fld	QWORD PTR _var$[ebp]

; 775  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pixel_var_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _hor_sad_generic
_TEXT	SEGMENT
_result$ = -8						; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_pic_stride$ = 24					; size = 4
_ref_stride$ = 28					; size = 4
_left$ = 32						; size = 4
_right$ = 36						; size = 4
_hor_sad_generic PROC					; COMDAT

; 729  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 730  :   uint32_t result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 731  :   if (left) {

	cmp	DWORD PTR _left$[ebp], 0
	je	SHORT $LN2@hor_sad_ge

; 732  :     result += hor_sad    (pic_data, ref_data + left, left,

	mov	eax, DWORD PTR _ref_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	add	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	_hor_sad
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 733  :                           height, pic_stride, ref_stride);
; 734  : 
; 735  :     result += kvz_reg_sad(pic_data + left, ref_data + left, width - left,

	mov	esi, esp
	mov	eax, DWORD PTR _ref_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	add	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	add	edx, DWORD PTR _left$[ebp]
	push	edx
	call	DWORD PTR _kvz_reg_sad
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN3@hor_sad_ge
$LN2@hor_sad_ge:

; 736  :                           height, pic_stride, ref_stride);
; 737  :   } else if (right) {

	cmp	DWORD PTR _right$[ebp], 0
	je	SHORT $LN4@hor_sad_ge

; 738  :     result += kvz_reg_sad(pic_data, ref_data, width - right,

	mov	esi, esp
	mov	eax, DWORD PTR _ref_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	DWORD PTR _kvz_reg_sad
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 739  :                           height, pic_stride, ref_stride);
; 740  : 
; 741  :     result += hor_sad    (pic_data + width - right,

	mov	eax, DWORD PTR _ref_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	add	ecx, DWORD PTR _width$[ebp]
	sub	ecx, DWORD PTR _right$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	add	edx, DWORD PTR _width$[ebp]
	sub	edx, DWORD PTR _right$[ebp]
	push	edx
	call	_hor_sad
	add	esp, 24					; 00000018H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 742  :                           ref_data + width - right - 1,
; 743  :                           right, height, pic_stride, ref_stride);
; 744  :   } else {

	jmp	SHORT $LN3@hor_sad_ge
$LN4@hor_sad_ge:

; 745  :     result += kvz_reg_sad(pic_data, ref_data, width,

	mov	esi, esp
	mov	eax, DWORD PTR _ref_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	DWORD PTR _kvz_reg_sad
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN3@hor_sad_ge:

; 746  :                           height, pic_stride, ref_stride);
; 747  :   }
; 748  :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 749  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hor_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _hor_sad
_TEXT	SEGMENT
_sad$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_block_width$ = 16					; size = 4
_block_height$ = 20					; size = 4
_pic_stride$ = 24					; size = 4
_ref_stride$ = 28					; size = 4
_hor_sad PROC						; COMDAT

; 712  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 713  :   int x, y;
; 714  :   unsigned sad = 0;

	mov	DWORD PTR _sad$[ebp], 0

; 715  : 
; 716  :   for (y = 0; y < block_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad
$LN2@hor_sad:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _block_height$[ebp]
	jge	SHORT $LN3@hor_sad

; 717  :     for (x = 0; x < block_width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@hor_sad
$LN5@hor_sad:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@hor_sad:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _block_width$[ebp]
	jge	SHORT $LN6@hor_sad

; 718  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[y * ref_stride]);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pic_data$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sad$[ebp]
	mov	DWORD PTR _sad$[ebp], eax

; 719  :     }

	jmp	SHORT $LN5@hor_sad
$LN6@hor_sad:

; 720  :   }

	jmp	SHORT $LN2@hor_sad
$LN3@hor_sad:

; 721  : 
; 722  :   return sad;

	mov	eax, DWORD PTR _sad$[ebp]

; 723  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hor_sad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _ver_sad_generic
_TEXT	SEGMENT
_sad$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_block_width$ = 16					; size = 4
_block_height$ = 20					; size = 4
_pic_stride$ = 24					; size = 4
_ver_sad_generic PROC					; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 687  :   int x, y;
; 688  :   unsigned sad = 0;

	mov	DWORD PTR _sad$[ebp], 0

; 689  : 
; 690  :   for (y = 0; y < block_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ver_sad_ge
$LN2@ver_sad_ge:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@ver_sad_ge:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _block_height$[ebp]
	jge	SHORT $LN3@ver_sad_ge

; 691  :     for (x = 0; x < block_width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@ver_sad_ge
$LN5@ver_sad_ge:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@ver_sad_ge:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _block_width$[ebp]
	jge	SHORT $LN6@ver_sad_ge

; 692  :       sad += abs(pic_data[y * pic_stride + x] - ref_data[x]);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pic_data$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _ref_data$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sad$[ebp]
	mov	DWORD PTR _sad$[ebp], eax

; 693  :     }

	jmp	SHORT $LN5@ver_sad_ge
$LN6@ver_sad_ge:

; 694  :   }

	jmp	SHORT $LN2@ver_sad_ge
$LN3@ver_sad_ge:

; 695  : 
; 696  :   return sad;

	mov	eax, DWORD PTR _sad$[ebp]

; 697  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ver_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _get_optimized_sad_generic
_TEXT	SEGMENT
_width$ = 8						; size = 4
_get_optimized_sad_generic PROC				; COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 670  :   return NULL;

	xor	eax, eax

; 671  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_optimized_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _bipred_average_generic
_TEXT	SEGMENT
tv225 = -316						; size = 4
tv220 = -316						; size = 4
tv215 = -316						; size = 4
tv210 = -316						; size = 4
tv139 = -316						; size = 4
tv134 = -316						; size = 4
_src_im_v$1 = -116					; size = 4
_src_px_v$2 = -104					; size = 4
_src_im_u$3 = -92					; size = 4
_src_px_u$4 = -80					; size = 4
_pb_h$5 = -68						; size = 4
_pb_w$6 = -56						; size = 4
_pb_offset$7 = -44					; size = 4
_src_im$8 = -32						; size = 4
_src_px$9 = -20						; size = 4
_pb_offset$10 = -8					; size = 4
_lcu$ = 8						; size = 4
_px_L0$ = 12						; size = 4
_px_L1$ = 16						; size = 4
_im_L0$ = 20						; size = 4
_im_L1$ = 24						; size = 4
_pu_x$ = 28						; size = 4
_pu_y$ = 32						; size = 4
_pu_w$ = 36						; size = 4
_pu_h$ = 40						; size = 4
_im_flags_L0$ = 44					; size = 4
_im_flags_L1$ = 48					; size = 4
_predict_luma$ = 52					; size = 1
_predict_chroma$ = 56					; size = 1
_bipred_average_generic PROC				; COMDAT

; 625  :   const bool predict_chroma) {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 626  : 
; 627  :   //After reconstruction, merge the predictors by taking an average of each pixel
; 628  :   if (predict_luma) {

	movzx	eax, BYTE PTR _predict_luma$[ebp]
	test	eax, eax
	je	$LN2@bipred_ave

; 629  :     unsigned pb_offset = SUB_SCU(pu_y) * LCU_WIDTH + SUB_SCU(pu_x);

	mov	eax, DWORD PTR _pu_y$[ebp]
	and	eax, 63					; 0000003fH
	shl	eax, 6
	mov	ecx, DWORD PTR _pu_x$[ebp]
	and	ecx, 63					; 0000003fH
	add	eax, ecx
	mov	DWORD PTR _pb_offset$10[ebp], eax

; 630  : 
; 631  :     if (!(im_flags_L0 & 1) && !(im_flags_L1 & 1)) {

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 1
	jne	SHORT $LN3@bipred_ave
	mov	eax, DWORD PTR _im_flags_L1$[ebp]
	and	eax, 1
	jne	SHORT $LN3@bipred_ave

; 632  :       bipred_average_px_px(lcu->rec.y + pb_offset, px_L0->y, px_L1->y, pu_w, pu_h, LCU_WIDTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _px_L1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _px_L0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pb_offset$10[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6540]
	push	edx
	call	_bipred_average_px_px
	add	esp, 24					; 00000018H
	jmp	$LN2@bipred_ave
$LN3@bipred_ave:

; 633  : 
; 634  :     } else if ((im_flags_L0 & 1) && (im_flags_L1 & 1)) {

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 1
	je	SHORT $LN5@bipred_ave
	mov	eax, DWORD PTR _im_flags_L1$[ebp]
	and	eax, 1
	je	SHORT $LN5@bipred_ave

; 635  :       bipred_average_im_im(lcu->rec.y + pb_offset, im_L0->y, im_L1->y, pu_w, pu_h, LCU_WIDTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _im_L1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pb_offset$10[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6540]
	push	edx
	call	_bipred_average_im_im
	add	esp, 24					; 00000018H

; 636  : 
; 637  :     } else {

	jmp	SHORT $LN2@bipred_ave
$LN5@bipred_ave:

; 638  :       kvz_pixel    *src_px = (im_flags_L0 & 1) ? px_L1->y : px_L0->y;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 1
	je	SHORT $LN13@bipred_ave
	mov	ecx, DWORD PTR _px_L1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN14@bipred_ave
$LN13@bipred_ave:
	mov	eax, DWORD PTR _px_L0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv134[ebp], ecx
$LN14@bipred_ave:
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _src_px$9[ebp], edx

; 639  :       kvz_pixel_im *src_im = (im_flags_L0 & 1) ? im_L0->y : im_L1->y;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 1
	je	SHORT $LN15@bipred_ave
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv139[ebp], edx
	jmp	SHORT $LN16@bipred_ave
$LN15@bipred_ave:
	mov	eax, DWORD PTR _im_L1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv139[ebp], ecx
$LN16@bipred_ave:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _src_im$8[ebp], edx

; 640  :       bipred_average_px_im(lcu->rec.y + pb_offset, src_px, src_im, pu_w, pu_h, LCU_WIDTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_im$8[ebp]
	push	edx
	mov	eax, DWORD PTR _src_px$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_offset$10[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+6540]
	push	eax
	call	_bipred_average_px_im
	add	esp, 24					; 00000018H
$LN2@bipred_ave:

; 641  :     }
; 642  :   }
; 643  :   if (predict_chroma) {

	movzx	eax, BYTE PTR _predict_chroma$[ebp]
	test	eax, eax
	je	$LN1@bipred_ave

; 644  :     unsigned pb_offset = SUB_SCU(pu_y) / 2 * LCU_WIDTH_C + SUB_SCU(pu_x) / 2;

	mov	eax, DWORD PTR _pu_y$[ebp]
	and	eax, 63					; 0000003fH
	shr	eax, 1
	shl	eax, 5
	mov	ecx, DWORD PTR _pu_x$[ebp]
	and	ecx, 63					; 0000003fH
	shr	ecx, 1
	add	eax, ecx
	mov	DWORD PTR _pb_offset$7[ebp], eax

; 645  :     unsigned pb_w = pu_w / 2;

	mov	eax, DWORD PTR _pu_w$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pb_w$6[ebp], eax

; 646  :     unsigned pb_h = pu_h / 2;

	mov	eax, DWORD PTR _pu_h$[ebp]
	shr	eax, 1
	mov	DWORD PTR _pb_h$5[ebp], eax

; 647  : 
; 648  :     if (!(im_flags_L0 & 2) && !(im_flags_L1 & 2)) {

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	jne	SHORT $LN8@bipred_ave
	mov	eax, DWORD PTR _im_flags_L1$[ebp]
	and	eax, 2
	jne	SHORT $LN8@bipred_ave

; 649  :       bipred_average_px_px(lcu->rec.u + pb_offset, px_L0->u, px_L1->u, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _px_L1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _px_L0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pb_offset$7[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	push	edx
	call	_bipred_average_px_px
	add	esp, 24					; 00000018H

; 650  :       bipred_average_px_px(lcu->rec.v + pb_offset, px_L0->v, px_L1->v, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _px_L1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _px_L0$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pb_offset$7[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	push	edx
	call	_bipred_average_px_px
	add	esp, 24					; 00000018H
	jmp	$LN1@bipred_ave
$LN8@bipred_ave:

; 651  : 
; 652  :     } else if ((im_flags_L0 & 2) && (im_flags_L1 & 2)) {

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	je	SHORT $LN10@bipred_ave
	mov	eax, DWORD PTR _im_flags_L1$[ebp]
	and	eax, 2
	je	SHORT $LN10@bipred_ave

; 653  :       bipred_average_im_im(lcu->rec.u + pb_offset, im_L0->u, im_L1->u, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _im_L1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pb_offset$7[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	push	edx
	call	_bipred_average_im_im
	add	esp, 24					; 00000018H

; 654  :       bipred_average_im_im(lcu->rec.v + pb_offset, im_L0->v, im_L1->v, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _im_L1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pb_offset$7[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	push	edx
	call	_bipred_average_im_im
	add	esp, 24					; 00000018H

; 655  : 
; 656  :     } else {

	jmp	$LN1@bipred_ave
$LN10@bipred_ave:

; 657  :       kvz_pixel    *src_px_u = (im_flags_L0 & 2) ? px_L1->u : px_L0->u;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	je	SHORT $LN17@bipred_ave
	mov	ecx, DWORD PTR _px_L1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv210[ebp], edx
	jmp	SHORT $LN18@bipred_ave
$LN17@bipred_ave:
	mov	eax, DWORD PTR _px_L0$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv210[ebp], ecx
$LN18@bipred_ave:
	mov	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR _src_px_u$4[ebp], edx

; 658  :       kvz_pixel_im *src_im_u = (im_flags_L0 & 2) ? im_L0->u : im_L1->u;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	je	SHORT $LN19@bipred_ave
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv215[ebp], edx
	jmp	SHORT $LN20@bipred_ave
$LN19@bipred_ave:
	mov	eax, DWORD PTR _im_L1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv215[ebp], ecx
$LN20@bipred_ave:
	mov	edx, DWORD PTR tv215[ebp]
	mov	DWORD PTR _src_im_u$3[ebp], edx

; 659  :       kvz_pixel    *src_px_v = (im_flags_L0 & 2) ? px_L1->v : px_L0->v;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	je	SHORT $LN21@bipred_ave
	mov	ecx, DWORD PTR _px_L1$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv220[ebp], edx
	jmp	SHORT $LN22@bipred_ave
$LN21@bipred_ave:
	mov	eax, DWORD PTR _px_L0$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv220[ebp], ecx
$LN22@bipred_ave:
	mov	edx, DWORD PTR tv220[ebp]
	mov	DWORD PTR _src_px_v$2[ebp], edx

; 660  :       kvz_pixel_im *src_im_v = (im_flags_L0 & 2) ? im_L0->v : im_L1->v;

	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	and	eax, 2
	je	SHORT $LN23@bipred_ave
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv225[ebp], edx
	jmp	SHORT $LN24@bipred_ave
$LN23@bipred_ave:
	mov	eax, DWORD PTR _im_L1$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv225[ebp], ecx
$LN24@bipred_ave:
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR _src_im_v$1[ebp], edx

; 661  :       bipred_average_px_im(lcu->rec.u + pb_offset, src_px_u, src_im_u, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_im_u$3[ebp]
	push	edx
	mov	eax, DWORD PTR _src_px_u$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_offset$7[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+10636]
	push	eax
	call	_bipred_average_px_im
	add	esp, 24					; 00000018H

; 662  :       bipred_average_px_im(lcu->rec.v + pb_offset, src_px_v, src_im_v, pb_w, pb_h, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _pb_h$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_im_v$1[ebp]
	push	edx
	mov	eax, DWORD PTR _src_px_v$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_offset$7[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+11660]
	push	eax
	call	_bipred_average_px_im
	add	esp, 24					; 00000018H
$LN1@bipred_ave:

; 663  :     }
; 664  :   }
; 665  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bipred_average_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _bipred_average_px_im
_TEXT	SEGMENT
_rounded$1 = -92					; size = 4
_sample_im$2 = -80					; size = 2
_sample_px$3 = -68					; size = 2
_x$4 = -56						; size = 4
_y$5 = -44						; size = 4
_i$6 = -32						; size = 4
_offset$ = -20						; size = 4
_shift$ = -8						; size = 4
_dst$ = 8						; size = 4
_px$ = 12						; size = 4
_im$ = 16						; size = 4
_pu_w$ = 20						; size = 4
_pu_h$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
_bipred_average_px_im PROC				; COMDAT

; 598  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 599  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines

	mov	DWORD PTR _shift$[ebp], 7

; 600  :   int32_t offset = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _offset$[ebp], eax

; 601  : 
; 602  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@bipred_ave
$LN2@bipred_ave:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@bipred_ave:
	mov	eax, DWORD PTR _pu_w$[ebp]
	imul	eax, DWORD PTR _pu_h$[ebp]
	cmp	DWORD PTR _i$6[ebp], eax
	jae	SHORT $LN1@bipred_ave

; 603  :   {
; 604  :     int y = i / pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _y$5[ebp], eax

; 605  :     int x = i % pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _x$4[ebp], edx

; 606  :     int16_t sample_px = px[i] << (14 - KVZ_BIT_DEPTH);

	mov	eax, DWORD PTR _px$[ebp]
	add	eax, DWORD PTR _i$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 6
	mov	WORD PTR _sample_px$3[ebp], cx

; 607  :     int16_t sample_im = im[i];

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _im$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _sample_im$2[ebp], dx

; 608  :     int32_t rounded = (sample_px + sample_im + offset) >> shift;

	movsx	eax, WORD PTR _sample_px$3[ebp]
	movsx	edx, WORD PTR _sample_im$2[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _rounded$1[ebp], edx

; 609  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	mov	eax, DWORD PTR _rounded$1[ebp]
	push	eax
	call	_kvz_fast_clip_32bit_to_pixel
	add	esp, 4
	mov	ecx, DWORD PTR _y$5[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _x$4[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 610  :   }

	jmp	SHORT $LN2@bipred_ave
$LN1@bipred_ave:

; 611  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bipred_average_px_im ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _bipred_average_im_im
_TEXT	SEGMENT
_rounded$1 = -92					; size = 4
_sample_L1$2 = -80					; size = 2
_sample_L0$3 = -68					; size = 2
_x$4 = -56						; size = 4
_y$5 = -44						; size = 4
_i$6 = -32						; size = 4
_offset$ = -20						; size = 4
_shift$ = -8						; size = 4
_dst$ = 8						; size = 4
_im_L0$ = 12						; size = 4
_im_L1$ = 16						; size = 4
_pu_w$ = 20						; size = 4
_pu_h$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
_bipred_average_im_im PROC				; COMDAT

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 578  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines

	mov	DWORD PTR _shift$[ebp], 7

; 579  :   int32_t offset = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _offset$[ebp], eax

; 580  : 
; 581  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@bipred_ave
$LN2@bipred_ave:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@bipred_ave:
	mov	eax, DWORD PTR _pu_w$[ebp]
	imul	eax, DWORD PTR _pu_h$[ebp]
	cmp	DWORD PTR _i$6[ebp], eax
	jae	SHORT $LN1@bipred_ave

; 582  :   {
; 583  :     int y = i / pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _y$5[ebp], eax

; 584  :     int x = i % pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _x$4[ebp], edx

; 585  :     int16_t sample_L0 = im_L0[i];

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _im_L0$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _sample_L0$3[ebp], dx

; 586  :     int16_t sample_L1 = im_L1[i];

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _im_L1$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _sample_L1$2[ebp], dx

; 587  :     int32_t rounded = (sample_L0 + sample_L1 + offset) >> shift;

	movsx	eax, WORD PTR _sample_L0$3[ebp]
	movsx	edx, WORD PTR _sample_L1$2[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _rounded$1[ebp], edx

; 588  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	mov	eax, DWORD PTR _rounded$1[ebp]
	push	eax
	call	_kvz_fast_clip_32bit_to_pixel
	add	esp, 4
	mov	ecx, DWORD PTR _y$5[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _x$4[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 589  :   }

	jmp	SHORT $LN2@bipred_ave
$LN1@bipred_ave:

; 590  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bipred_average_im_im ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _bipred_average_px_px
_TEXT	SEGMENT
_rounded$1 = -92					; size = 4
_sample_L1$2 = -80					; size = 2
_sample_L0$3 = -68					; size = 2
_x$4 = -56						; size = 4
_y$5 = -44						; size = 4
_i$6 = -32						; size = 4
_offset$ = -20						; size = 4
_shift$ = -8						; size = 4
_dst$ = 8						; size = 4
_px_L0$ = 12						; size = 4
_px_L1$ = 16						; size = 4
_pu_w$ = 20						; size = 4
_pu_h$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
_bipred_average_px_px PROC				; COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 557  :   int32_t shift = 15 - KVZ_BIT_DEPTH; // TODO: defines

	mov	DWORD PTR _shift$[ebp], 7

; 558  :   int32_t offset = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _offset$[ebp], eax

; 559  : 
; 560  :   for (int i = 0; i < pu_w * pu_h; ++i)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@bipred_ave
$LN2@bipred_ave:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@bipred_ave:
	mov	eax, DWORD PTR _pu_w$[ebp]
	imul	eax, DWORD PTR _pu_h$[ebp]
	cmp	DWORD PTR _i$6[ebp], eax
	jae	SHORT $LN1@bipred_ave

; 561  :   {
; 562  :     int y = i / pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _y$5[ebp], eax

; 563  :     int x = i % pu_w;

	mov	eax, DWORD PTR _i$6[ebp]
	xor	edx, edx
	div	DWORD PTR _pu_w$[ebp]
	mov	DWORD PTR _x$4[ebp], edx

; 564  :     int16_t sample_L0 = px_L0[i] << (14 - KVZ_BIT_DEPTH);

	mov	eax, DWORD PTR _px_L0$[ebp]
	add	eax, DWORD PTR _i$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 6
	mov	WORD PTR _sample_L0$3[ebp], cx

; 565  :     int16_t sample_L1 = px_L1[i] << (14 - KVZ_BIT_DEPTH);

	mov	eax, DWORD PTR _px_L1$[ebp]
	add	eax, DWORD PTR _i$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 6
	mov	WORD PTR _sample_L1$2[ebp], cx

; 566  :     int32_t rounded = (sample_L0 + sample_L1 + offset) >> shift;

	movsx	eax, WORD PTR _sample_L0$3[ebp]
	movsx	edx, WORD PTR _sample_L1$2[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _rounded$1[ebp], edx

; 567  :     dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(rounded);

	mov	eax, DWORD PTR _rounded$1[ebp]
	push	eax
	call	_kvz_fast_clip_32bit_to_pixel
	add	esp, 4
	mov	ecx, DWORD PTR _y$5[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _x$4[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 568  :   }

	jmp	SHORT $LN2@bipred_ave
$LN1@bipred_ave:

; 569  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bipred_average_px_px ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _pixels_calc_ssd_generic
_TEXT	SEGMENT
_diff$1 = -44						; size = 4
_x$ = -32						; size = 4
_y$ = -20						; size = 4
_ssd$ = -8						; size = 4
_ref$ = 8						; size = 4
_rec$ = 12						; size = 4
_ref_stride$ = 16					; size = 4
_rec_stride$ = 20					; size = 4
_width$ = 24						; size = 4
_pixels_calc_ssd_generic PROC				; COMDAT

; 536  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 537  :   int ssd = 0;

	mov	DWORD PTR _ssd$[ebp], 0

; 538  :   int y, x;
; 539  : 
; 540  :   for (y = 0; y < width; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@pixels_cal
$LN2@pixels_cal:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@pixels_cal:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN3@pixels_cal

; 541  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@pixels_cal
$LN5@pixels_cal:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@pixels_cal:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@pixels_cal

; 542  :       int diff = ref[x + y * ref_stride] - rec[x + y * rec_stride];

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _rec_stride$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _rec$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	DWORD PTR _diff$1[ebp], edx

; 543  :       ssd += diff * diff;

	mov	eax, DWORD PTR _diff$1[ebp]
	imul	eax, DWORD PTR _diff$1[ebp]
	add	eax, DWORD PTR _ssd$[ebp]
	mov	DWORD PTR _ssd$[ebp], eax

; 544  :     }

	jmp	SHORT $LN5@pixels_cal
$LN6@pixels_cal:

; 545  :   }

	jmp	SHORT $LN2@pixels_cal
$LN3@pixels_cal:

; 546  : 
; 547  :   return ssd >> (2*(KVZ_BIT_DEPTH-8));

	mov	eax, DWORD PTR _ssd$[ebp]

; 548  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pixels_calc_ssd_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_64x64_dual_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_sad_64x64_dual_generic PROC				; COMDAT

; 531  : SAD_DUAL_NXN(64, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_64x64_
$LN2@sad_64x64_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_64x64_:
	cmp	DWORD PTR _i$[ebp], 4096		; 00001000H
	jae	SHORT $LN3@sad_64x64_
	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _orig$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_64x64_
$LN3@sad_64x64_:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sad_64x64_
$LN5@sad_64x64_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sad_64x64_:
	cmp	DWORD PTR _i$[ebp], 4096		; 00001000H
	jae	SHORT $LN6@sad_64x64_
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _orig$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@sad_64x64_
$LN6@sad_64x64_:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_64x64_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_32x32_dual_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_sad_32x32_dual_generic PROC				; COMDAT

; 530  : SAD_DUAL_NXN(32, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_32x32_
$LN2@sad_32x32_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_32x32_:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jae	SHORT $LN3@sad_32x32_
	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _orig$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_32x32_
$LN3@sad_32x32_:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sad_32x32_
$LN5@sad_32x32_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sad_32x32_:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jae	SHORT $LN6@sad_32x32_
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _orig$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@sad_32x32_
$LN6@sad_32x32_:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_32x32_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_16x16_dual_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_sad_16x16_dual_generic PROC				; COMDAT

; 529  : SAD_DUAL_NXN(16, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_16x16_
$LN2@sad_16x16_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_16x16_:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN3@sad_16x16_
	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _orig$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_16x16_
$LN3@sad_16x16_:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sad_16x16_
$LN5@sad_16x16_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sad_16x16_:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN6@sad_16x16_
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _orig$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@sad_16x16_
$LN6@sad_16x16_:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_16x16_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_8x8_dual_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_sad_8x8_dual_generic PROC				; COMDAT

; 528  : SAD_DUAL_NXN(8, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_8x8_du
$LN2@sad_8x8_du:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_8x8_du:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $LN3@sad_8x8_du
	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _orig$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_8x8_du
$LN3@sad_8x8_du:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sad_8x8_du
$LN5@sad_8x8_du:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sad_8x8_du:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $LN6@sad_8x8_du
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _orig$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@sad_8x8_du
$LN6@sad_8x8_du:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_8x8_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_4x4_dual_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_sad_4x4_dual_generic PROC				; COMDAT

; 527  : SAD_DUAL_NXN(4, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_4x4_du
$LN2@sad_4x4_du:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_4x4_du:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN3@sad_4x4_du
	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _orig$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_4x4_du
$LN3@sad_4x4_du:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sad_4x4_du
$LN5@sad_4x4_du:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sad_4x4_du:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN6@sad_4x4_du
	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _orig$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@sad_4x4_du
$LN6@sad_4x4_du:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_4x4_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_64x64_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_sad_64x64_generic PROC					; COMDAT

; 498  : SAD_NXN(64, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_64x64_
$LN2@sad_64x64_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_64x64_:
	cmp	DWORD PTR _i$[ebp], 4096		; 00001000H
	jae	SHORT $LN3@sad_64x64_
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _block2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_64x64_
$LN3@sad_64x64_:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_64x64_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_32x32_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_sad_32x32_generic PROC					; COMDAT

; 497  : SAD_NXN(32, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_32x32_
$LN2@sad_32x32_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_32x32_:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jae	SHORT $LN3@sad_32x32_
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _block2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_32x32_
$LN3@sad_32x32_:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_16x16_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_sad_16x16_generic PROC					; COMDAT

; 496  : SAD_NXN(16, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_16x16_
$LN2@sad_16x16_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_16x16_:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN3@sad_16x16_
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _block2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_16x16_
$LN3@sad_16x16_:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_8x8_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_sad_8x8_generic PROC					; COMDAT

; 495  : SAD_NXN(8, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_8x8_ge
$LN2@sad_8x8_ge:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_8x8_ge:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $LN3@sad_8x8_ge
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _block2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_8x8_ge
$LN3@sad_8x8_ge:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _sad_4x4_generic
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_sad_4x4_generic PROC					; COMDAT

; 494  : SAD_NXN(4, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sad_4x4_ge
$LN2@sad_4x4_ge:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sad_4x4_ge:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN3@sad_4x4_ge
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _block2$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@sad_4x4_ge
$LN3@sad_4x4_ge:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sad_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_any_size_quad_generic
_TEXT	SEGMENT
_i$1 = -144						; size = 4
_x$2 = -132						; size = 4
_y$3 = -120						; size = 4
_blk$4 = -108						; size = 4
_x$5 = -96						; size = 4
_blk$6 = -84						; size = 4
_y$7 = -72						; size = 4
_orig_ptr$ = -60					; size = 4
_pred_ptrs$ = -48					; size = 16
_sums$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_preds$ = 16						; size = 4
_stride$ = 20						; size = 4
_orig$ = 24						; size = 4
_orig_stride$ = 28					; size = 4
_num_modes$ = 32					; size = 4
_costs_out$ = 36					; size = 4
_valid$ = 40						; size = 4
_satd_any_size_quad_generic PROC			; COMDAT

; 468  : SATD_ANY_SIZE_MULTI_GENERIC(quad_generic, 4)

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	xor	eax, eax
	mov	DWORD PTR _sums$[ebp], eax
	mov	DWORD PTR _sums$[ebp+4], eax
	mov	DWORD PTR _sums$[ebp+8], eax
	mov	DWORD PTR _sums$[ebp+12], eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _pred_ptrs$[ebp], eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _pred_ptrs$[ebp+4], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _pred_ptrs$[ebp+8], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _pred_ptrs$[ebp+12], eax
	mov	eax, DWORD PTR _orig$[ebp]
	mov	DWORD PTR _orig_ptr$[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+ecx], 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [ecx+eax], 0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [ecx+eax], 0
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+ecx], 0
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN30@satd_any_s
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN30@satd_any_s:
	test	eax, eax
	je	SHORT $LN23@satd_any_s
	mov	DWORD PTR _y$7[ebp], 0
	jmp	SHORT $LN4@satd_any_s
$LN2@satd_any_s:
	mov	eax, DWORD PTR _y$7[ebp]
	add	eax, 4
	mov	DWORD PTR _y$7[ebp], eax
$LN4@satd_any_s:
	mov	eax, DWORD PTR _y$7[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN3@satd_any_s
	lea	eax, DWORD PTR _sums$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _preds$[ebp]
	push	ecx
	call	_kvz_satd_4x4_subblock_quad_generic
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@satd_any_s
$LN3@satd_any_s:
	mov	eax, DWORD PTR _orig_ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _orig_ptr$[ebp], eax
	mov	DWORD PTR _blk$6[ebp], 0
	jmp	SHORT $LN7@satd_any_s
$LN5@satd_any_s:
	mov	eax, DWORD PTR _blk$6[ebp]
	add	eax, 1
	mov	DWORD PTR _blk$6[ebp], eax
$LN7@satd_any_s:
	cmp	DWORD PTR _blk$6[ebp], 4
	jge	SHORT $LN6@satd_any_s
	mov	eax, DWORD PTR _blk$6[ebp]
	mov	ecx, DWORD PTR _pred_ptrs$[ebp+eax*4]
	add	ecx, 4
	mov	edx, DWORD PTR _blk$6[ebp]
	mov	DWORD PTR _pred_ptrs$[ebp+edx*4], ecx
	jmp	SHORT $LN5@satd_any_s
$LN6@satd_any_s:
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 4
	mov	DWORD PTR _width$[ebp], eax
$LN23@satd_any_s:
	mov	eax, DWORD PTR _height$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN31@satd_any_s
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN31@satd_any_s:
	test	eax, eax
	je	SHORT $LN24@satd_any_s
	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN10@satd_any_s
$LN8@satd_any_s:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 4
	mov	DWORD PTR _x$5[ebp], eax
$LN10@satd_any_s:
	mov	eax, DWORD PTR _x$5[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN9@satd_any_s
	lea	eax, DWORD PTR _sums$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pred_ptrs$[ebp]
	push	ecx
	call	_kvz_satd_4x4_subblock_quad_generic
	add	esp, 20					; 00000014H
	jmp	SHORT $LN8@satd_any_s
$LN9@satd_any_s:
	mov	eax, DWORD PTR _orig_stride$[ebp]
	mov	ecx, DWORD PTR _orig_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _orig_ptr$[ebp], edx
	mov	DWORD PTR _blk$4[ebp], 0
	jmp	SHORT $LN13@satd_any_s
$LN11@satd_any_s:
	mov	eax, DWORD PTR _blk$4[ebp]
	add	eax, 1
	mov	DWORD PTR _blk$4[ebp], eax
$LN13@satd_any_s:
	cmp	DWORD PTR _blk$4[ebp], 4
	jge	SHORT $LN12@satd_any_s
	mov	eax, DWORD PTR _blk$4[ebp]
	mov	ecx, DWORD PTR _pred_ptrs$[ebp+eax*4]
	mov	edx, DWORD PTR _stride$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _blk$4[ebp]
	mov	DWORD PTR _pred_ptrs$[ebp+ecx*4], eax
	jmp	SHORT $LN11@satd_any_s
$LN12@satd_any_s:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 4
	mov	DWORD PTR _height$[ebp], eax
$LN24@satd_any_s:
	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN16@satd_any_s
$LN14@satd_any_s:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN16@satd_any_s:
	mov	eax, DWORD PTR _y$3[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN15@satd_any_s
	mov	eax, DWORD PTR _y$3[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	mov	DWORD PTR _orig_ptr$[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _y$3[ebp]
	imul	edx, DWORD PTR _stride$[ebp]
	mov	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _pred_ptrs$[ebp+eax], ecx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _y$3[ebp]
	imul	ecx, DWORD PTR _stride$[ebp]
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _pred_ptrs$[ebp+ecx], eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _y$3[ebp]
	imul	ecx, DWORD PTR _stride$[ebp]
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _pred_ptrs$[ebp+ecx], eax
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _y$3[ebp]
	imul	edx, DWORD PTR _stride$[ebp]
	mov	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _pred_ptrs$[ebp+eax], ecx
	mov	DWORD PTR _x$2[ebp], 0
	jmp	SHORT $LN19@satd_any_s
$LN17@satd_any_s:
	mov	eax, DWORD PTR _x$2[ebp]
	add	eax, 8
	mov	DWORD PTR _x$2[ebp], eax
$LN19@satd_any_s:
	mov	eax, DWORD PTR _x$2[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN18@satd_any_s
	lea	eax, DWORD PTR _sums$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pred_ptrs$[ebp]
	push	ecx
	call	_satd_8x8_subblock_quad_generic
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _orig_ptr$[ebp]
	add	eax, 8
	mov	DWORD PTR _orig_ptr$[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pred_ptrs$[ebp+ecx]
	add	edx, 8
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _pred_ptrs$[ebp+ecx], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pred_ptrs$[ebp+eax]
	add	ecx, 8
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _pred_ptrs$[ebp+edx], ecx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pred_ptrs$[ebp+eax]
	add	ecx, 8
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _pred_ptrs$[ebp+edx], ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pred_ptrs$[ebp+ecx]
	add	edx, 8
	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _pred_ptrs$[ebp+ecx], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	add	ecx, DWORD PTR _sums$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+eax], ecx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	add	eax, DWORD PTR _sums$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	add	eax, DWORD PTR _sums$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	add	ecx, DWORD PTR _sums$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [edx+eax], ecx
	jmp	$LN17@satd_any_s
$LN18@satd_any_s:
	jmp	$LN14@satd_any_s
$LN15@satd_any_s:
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN22@satd_any_s
$LN20@satd_any_s:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN22@satd_any_s:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN1@satd_any_s
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN20@satd_any_s
$LN1@satd_any_s:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@satd_any_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@satd_any_s:
	DD	2
	DD	$LN28@satd_any_s
$LN28@satd_any_s:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN26@satd_any_s
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN27@satd_any_s
$LN27@satd_any_s:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN26@satd_any_s:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_satd_any_size_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_64x64_dual_generic
_TEXT	SEGMENT
_row$1 = -56						; size = 4
_row$2 = -44						; size = 4
_sum$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_satd_64x64_dual_generic PROC				; COMDAT

; 402  : SATD_DUAL_NXN(64, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@satd_64x64
$LN2@satd_64x64:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN4@satd_64x64:
	cmp	DWORD PTR _y$[ebp], 64			; 00000040H
	jae	SHORT $LN3@satd_64x64
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 6
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@satd_64x64
$LN5@satd_64x64:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN7@satd_64x64:
	cmp	DWORD PTR _x$[ebp], 64			; 00000040H
	jae	SHORT $LN6@satd_64x64
	push	64					; 00000040H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	edx, eax
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_64x64
$LN6@satd_64x64:
	jmp	SHORT $LN2@satd_64x64
$LN3@satd_64x64:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@satd_64x64
$LN8@satd_64x64:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN10@satd_64x64:
	cmp	DWORD PTR _y$[ebp], 64			; 00000040H
	jae	SHORT $LN9@satd_64x64
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 6
	mov	DWORD PTR _row$1[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@satd_64x64
$LN11@satd_64x64:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN13@satd_64x64:
	cmp	DWORD PTR _x$[ebp], 64			; 00000040H
	jae	SHORT $LN12@satd_64x64
	push	64					; 00000040H
	mov	eax, DWORD PTR _row$1[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _row$1[ebp]
	add	edx, DWORD PTR _x$[ebp]
	add	ecx, edx
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN11@satd_64x64
$LN12@satd_64x64:
	jmp	SHORT $LN8@satd_64x64
$LN9@satd_64x64:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_64x64_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_32x32_dual_generic
_TEXT	SEGMENT
_row$1 = -56						; size = 4
_row$2 = -44						; size = 4
_sum$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_satd_32x32_dual_generic PROC				; COMDAT

; 401  : SATD_DUAL_NXN(32, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@satd_32x32
$LN2@satd_32x32:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN4@satd_32x32:
	cmp	DWORD PTR _y$[ebp], 32			; 00000020H
	jae	SHORT $LN3@satd_32x32
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 5
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@satd_32x32
$LN5@satd_32x32:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN7@satd_32x32:
	cmp	DWORD PTR _x$[ebp], 32			; 00000020H
	jae	SHORT $LN6@satd_32x32
	push	32					; 00000020H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	edx, eax
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_32x32
$LN6@satd_32x32:
	jmp	SHORT $LN2@satd_32x32
$LN3@satd_32x32:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@satd_32x32
$LN8@satd_32x32:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN10@satd_32x32:
	cmp	DWORD PTR _y$[ebp], 32			; 00000020H
	jae	SHORT $LN9@satd_32x32
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 5
	mov	DWORD PTR _row$1[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@satd_32x32
$LN11@satd_32x32:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN13@satd_32x32:
	cmp	DWORD PTR _x$[ebp], 32			; 00000020H
	jae	SHORT $LN12@satd_32x32
	push	32					; 00000020H
	mov	eax, DWORD PTR _row$1[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _row$1[ebp]
	add	edx, DWORD PTR _x$[ebp]
	add	ecx, edx
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN11@satd_32x32
$LN12@satd_32x32:
	jmp	SHORT $LN8@satd_32x32
$LN9@satd_32x32:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_32x32_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_16x16_dual_generic
_TEXT	SEGMENT
_row$1 = -56						; size = 4
_row$2 = -44						; size = 4
_sum$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_satd_16x16_dual_generic PROC				; COMDAT

; 400  : SATD_DUAL_NXN(16, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@satd_16x16
$LN2@satd_16x16:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN4@satd_16x16:
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jae	SHORT $LN3@satd_16x16
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 4
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@satd_16x16
$LN5@satd_16x16:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN7@satd_16x16:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jae	SHORT $LN6@satd_16x16
	push	16					; 00000010H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	edx, eax
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_16x16
$LN6@satd_16x16:
	jmp	SHORT $LN2@satd_16x16
$LN3@satd_16x16:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@satd_16x16
$LN8@satd_16x16:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN10@satd_16x16:
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jae	SHORT $LN9@satd_16x16
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 4
	mov	DWORD PTR _row$1[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@satd_16x16
$LN11@satd_16x16:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN13@satd_16x16:
	cmp	DWORD PTR _x$[ebp], 16			; 00000010H
	jae	SHORT $LN12@satd_16x16
	push	16					; 00000010H
	mov	eax, DWORD PTR _row$1[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _row$1[ebp]
	add	edx, DWORD PTR _x$[ebp]
	add	ecx, edx
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN11@satd_16x16
$LN12@satd_16x16:
	jmp	SHORT $LN8@satd_16x16
$LN9@satd_16x16:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_16x16_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_8x8_dual_generic
_TEXT	SEGMENT
_row$1 = -56						; size = 4
_row$2 = -44						; size = 4
_sum$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_satd_8x8_dual_generic PROC				; COMDAT

; 399  : SATD_DUAL_NXN(8, kvz_pixel)

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@satd_8x8_d
$LN2@satd_8x8_d:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN4@satd_8x8_d:
	cmp	DWORD PTR _y$[ebp], 8
	jae	SHORT $LN3@satd_8x8_d
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 3
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@satd_8x8_d
$LN5@satd_8x8_d:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN7@satd_8x8_d:
	cmp	DWORD PTR _x$[ebp], 8
	jae	SHORT $LN6@satd_8x8_d
	push	8
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	8
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	edx, eax
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_8x8_d
$LN6@satd_8x8_d:
	jmp	SHORT $LN2@satd_8x8_d
$LN3@satd_8x8_d:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs_out$[ebp]
	mov	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@satd_8x8_d
$LN8@satd_8x8_d:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 8
	mov	DWORD PTR _y$[ebp], eax
$LN10@satd_8x8_d:
	cmp	DWORD PTR _y$[ebp], 8
	jae	SHORT $LN9@satd_8x8_d
	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 3
	mov	DWORD PTR _row$1[ebp], eax
	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@satd_8x8_d
$LN11@satd_8x8_d:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 8
	mov	DWORD PTR _x$[ebp], eax
$LN13@satd_8x8_d:
	cmp	DWORD PTR _x$[ebp], 8
	jae	SHORT $LN12@satd_8x8_d
	push	8
	mov	eax, DWORD PTR _row$1[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	push	8
	mov	ecx, 1024				; 00000400H
	shl	ecx, 0
	add	ecx, DWORD PTR _preds$[ebp]
	mov	edx, DWORD PTR _row$1[ebp]
	add	edx, DWORD PTR _x$[ebp]
	add	ecx, edx
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN11@satd_8x8_d
$LN12@satd_8x8_d:
	jmp	SHORT $LN8@satd_8x8_d
$LN9@satd_8x8_d:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+eax], edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_8x8_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_4x4_dual_generic
_TEXT	SEGMENT
_preds$ = 8						; size = 4
_orig$ = 12						; size = 4
_num_modes$ = 16					; size = 4
_costs_out$ = 20					; size = 4
_satd_4x4_dual_generic PROC				; COMDAT

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 395  :   costs_out[0] = satd_4x4_generic(orig, preds[0]);

	mov	eax, 1024				; 00000400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _preds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	call	_satd_4x4_generic
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 396  :   costs_out[1] = satd_4x4_generic(orig, preds[1]);

	mov	eax, 1024				; 00000400H
	shl	eax, 0
	add	eax, DWORD PTR _preds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig$[ebp]
	push	ecx
	call	_satd_4x4_generic
	add	esp, 8
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_4x4_dual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_any_size_generic
_TEXT	SEGMENT
_x$1 = -80						; size = 4
_row2$2 = -68						; size = 4
_row1$3 = -56						; size = 4
_y$4 = -44						; size = 4
_x$5 = -32						; size = 4
_y$6 = -20						; size = 4
_sum$ = -8						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_block1$ = 16						; size = 4
_stride1$ = 20						; size = 4
_block2$ = 24						; size = 4
_stride2$ = 28						; size = 4
_satd_any_size_generic PROC				; COMDAT

; 359  : SATD_ANY_SIZE(generic)

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN17@satd_any_s
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN17@satd_any_s:
	test	eax, eax
	je	SHORT $LN14@satd_any_s
	mov	DWORD PTR _y$6[ebp], 0
	jmp	SHORT $LN4@satd_any_s
$LN2@satd_any_s:
	mov	eax, DWORD PTR _y$6[ebp]
	add	eax, 4
	mov	DWORD PTR _y$6[ebp], eax
$LN4@satd_any_s:
	mov	eax, DWORD PTR _y$6[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN3@satd_any_s
	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$6[ebp]
	imul	ecx, DWORD PTR _stride2$[ebp]
	add	ecx, DWORD PTR _block2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stride1$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$6[ebp]
	imul	eax, DWORD PTR _stride1$[ebp]
	add	eax, DWORD PTR _block1$[ebp]
	push	eax
	call	_kvz_satd_4x4_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN2@satd_any_s
$LN3@satd_any_s:
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, 4
	mov	DWORD PTR _block1$[ebp], eax
	mov	eax, DWORD PTR _block2$[ebp]
	add	eax, 4
	mov	DWORD PTR _block2$[ebp], eax
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 4
	mov	DWORD PTR _width$[ebp], eax
$LN14@satd_any_s:
	mov	eax, DWORD PTR _height$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN18@satd_any_s
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN18@satd_any_s:
	test	eax, eax
	je	SHORT $LN15@satd_any_s
	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN7@satd_any_s
$LN5@satd_any_s:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 4
	mov	DWORD PTR _x$5[ebp], eax
$LN7@satd_any_s:
	mov	eax, DWORD PTR _x$5[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@satd_any_s
	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block2$[ebp]
	add	ecx, DWORD PTR _x$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _stride1$[ebp]
	push	edx
	mov	eax, DWORD PTR _block1$[ebp]
	add	eax, DWORD PTR _x$5[ebp]
	push	eax
	call	_kvz_satd_4x4_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_any_s
$LN6@satd_any_s:
	mov	eax, DWORD PTR _stride1$[ebp]
	mov	ecx, DWORD PTR _block1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block1$[ebp], edx
	mov	eax, DWORD PTR _stride2$[ebp]
	mov	ecx, DWORD PTR _block2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _block2$[ebp], edx
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 4
	mov	DWORD PTR _height$[ebp], eax
$LN15@satd_any_s:
	mov	DWORD PTR _y$4[ebp], 0
	jmp	SHORT $LN10@satd_any_s
$LN8@satd_any_s:
	mov	eax, DWORD PTR _y$4[ebp]
	add	eax, 8
	mov	DWORD PTR _y$4[ebp], eax
$LN10@satd_any_s:
	mov	eax, DWORD PTR _y$4[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN9@satd_any_s
	mov	eax, DWORD PTR _y$4[ebp]
	imul	eax, DWORD PTR _stride1$[ebp]
	add	eax, DWORD PTR _block1$[ebp]
	mov	DWORD PTR _row1$3[ebp], eax
	mov	eax, DWORD PTR _y$4[ebp]
	imul	eax, DWORD PTR _stride2$[ebp]
	add	eax, DWORD PTR _block2$[ebp]
	mov	DWORD PTR _row2$2[ebp], eax
	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN13@satd_any_s
$LN11@satd_any_s:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 8
	mov	DWORD PTR _x$1[ebp], eax
$LN13@satd_any_s:
	mov	eax, DWORD PTR _x$1[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@satd_any_s
	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row2$2[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _stride1$[ebp]
	push	edx
	mov	eax, DWORD PTR _row1$3[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	push	eax
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN11@satd_any_s
$LN12@satd_any_s:
	jmp	SHORT $LN8@satd_any_s
$LN9@satd_any_s:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_any_size_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_64x64_generic
_TEXT	SEGMENT
_x$1 = -44						; size = 4
_row$2 = -32						; size = 4
_y$3 = -20						; size = 4
_sum$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_satd_64x64_generic PROC				; COMDAT

; 358  : SATD_NxN(generic, 64)

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN4@satd_64x64
$LN2@satd_64x64:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN4@satd_64x64:
	cmp	DWORD PTR _y$3[ebp], 64			; 00000040H
	jae	SHORT $LN3@satd_64x64
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 6
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@satd_64x64
$LN5@satd_64x64:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 8
	mov	DWORD PTR _x$1[ebp], eax
$LN7@satd_64x64:
	cmp	DWORD PTR _x$1[ebp], 64			; 00000040H
	jae	SHORT $LN6@satd_64x64
	push	64					; 00000040H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	add	eax, DWORD PTR _block2$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _row$2[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	add	ecx, DWORD PTR _block1$[ebp]
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_64x64
$LN6@satd_64x64:
	jmp	SHORT $LN2@satd_64x64
$LN3@satd_64x64:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_64x64_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_32x32_generic
_TEXT	SEGMENT
_x$1 = -44						; size = 4
_row$2 = -32						; size = 4
_y$3 = -20						; size = 4
_sum$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_satd_32x32_generic PROC				; COMDAT

; 357  : SATD_NxN(generic, 32)

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN4@satd_32x32
$LN2@satd_32x32:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN4@satd_32x32:
	cmp	DWORD PTR _y$3[ebp], 32			; 00000020H
	jae	SHORT $LN3@satd_32x32
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 5
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@satd_32x32
$LN5@satd_32x32:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 8
	mov	DWORD PTR _x$1[ebp], eax
$LN7@satd_32x32:
	cmp	DWORD PTR _x$1[ebp], 32			; 00000020H
	jae	SHORT $LN6@satd_32x32
	push	32					; 00000020H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	add	eax, DWORD PTR _block2$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _row$2[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	add	ecx, DWORD PTR _block1$[ebp]
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_32x32
$LN6@satd_32x32:
	jmp	SHORT $LN2@satd_32x32
$LN3@satd_32x32:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_16x16_generic
_TEXT	SEGMENT
_x$1 = -44						; size = 4
_row$2 = -32						; size = 4
_y$3 = -20						; size = 4
_sum$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_satd_16x16_generic PROC				; COMDAT

; 356  : SATD_NxN(generic, 16)

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN4@satd_16x16
$LN2@satd_16x16:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN4@satd_16x16:
	cmp	DWORD PTR _y$3[ebp], 16			; 00000010H
	jae	SHORT $LN3@satd_16x16
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 4
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@satd_16x16
$LN5@satd_16x16:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 8
	mov	DWORD PTR _x$1[ebp], eax
$LN7@satd_16x16:
	cmp	DWORD PTR _x$1[ebp], 16			; 00000010H
	jae	SHORT $LN6@satd_16x16
	push	16					; 00000010H
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	add	eax, DWORD PTR _block2$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _row$2[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	add	ecx, DWORD PTR _block1$[ebp]
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_16x16
$LN6@satd_16x16:
	jmp	SHORT $LN2@satd_16x16
$LN3@satd_16x16:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_8x8_generic
_TEXT	SEGMENT
_x$1 = -44						; size = 4
_row$2 = -32						; size = 4
_y$3 = -20						; size = 4
_sum$ = -8						; size = 4
_block1$ = 8						; size = 4
_block2$ = 12						; size = 4
_satd_8x8_generic PROC					; COMDAT

; 355  : SATD_NxN(generic,  8)

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN4@satd_8x8_g
$LN2@satd_8x8_g:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN4@satd_8x8_g:
	cmp	DWORD PTR _y$3[ebp], 8
	jae	SHORT $LN3@satd_8x8_g
	mov	eax, DWORD PTR _y$3[ebp]
	shl	eax, 3
	mov	DWORD PTR _row$2[ebp], eax
	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@satd_8x8_g
$LN5@satd_8x8_g:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 8
	mov	DWORD PTR _x$1[ebp], eax
$LN7@satd_8x8_g:
	cmp	DWORD PTR _x$1[ebp], 8
	jae	SHORT $LN6@satd_8x8_g
	push	8
	mov	eax, DWORD PTR _row$2[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	add	eax, DWORD PTR _block2$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _row$2[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	add	ecx, DWORD PTR _block1$[ebp]
	push	ecx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	jmp	SHORT $LN5@satd_8x8_g
$LN6@satd_8x8_g:
	jmp	SHORT $LN2@satd_8x8_g
$LN3@satd_8x8_g:
	mov	eax, DWORD PTR _sum$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_8x8_subblock_quad_generic
_TEXT	SEGMENT
_preds$ = 8						; size = 4
_stride$ = 12						; size = 4
_orig$ = 16						; size = 4
_orig_stride$ = 20					; size = 4
_costs$ = 24						; size = 4
_satd_8x8_subblock_quad_generic PROC			; COMDAT

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 348  :   costs[0] = satd_8x8_subblock_generic(orig, orig_stride, preds[0], stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _orig_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _orig$[ebp]
	push	eax
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 349  :   costs[1] = satd_8x8_subblock_generic(orig, orig_stride, preds[1], stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 350  :   costs[2] = satd_8x8_subblock_generic(orig, orig_stride, preds[2], stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 351  :   costs[3] = satd_8x8_subblock_generic(orig, orig_stride, preds[3], stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _orig_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _orig$[ebp]
	push	eax
	call	_satd_8x8_subblock_generic
	add	esp, 16					; 00000010H
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 352  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_satd_8x8_subblock_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_8x8_subblock_generic
_TEXT	SEGMENT
_m3$ = -1116						; size = 256
_m2$ = -852						; size = 256
_m1$ = -588						; size = 256
_diff$ = -324						; size = 256
_sad$ = -60						; size = 4
_jj$ = -48						; size = 4
_j$ = -36						; size = 4
_i$ = -24						; size = 4
_k$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_piOrg$ = 8						; size = 4
_iStrideOrg$ = 12					; size = 4
_piCur$ = 16						; size = 4
_iStrideCur$ = 20					; size = 4
_satd_8x8_subblock_generic PROC				; COMDAT

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1696				; 000006a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1696]
	mov	ecx, 424				; 000001a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 255  :   int32_t k, i, j, jj, sad = 0;

	mov	DWORD PTR _sad$[ebp], 0

; 256  :   int32_t diff[64], m1[8][8], m2[8][8], m3[8][8];
; 257  : 
; 258  :   for (k = 0; k < 64; k += 8) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN4@satd_8x8_s
$LN2@satd_8x8_s:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 8
	mov	DWORD PTR _k$[ebp], eax
$LN4@satd_8x8_s:
	cmp	DWORD PTR _k$[ebp], 64			; 00000040H
	jge	$LN3@satd_8x8_s

; 259  :     diff[k + 0] = piOrg[0] - piCur[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4], eax

; 260  :     diff[k + 1] = piOrg[1] - piCur[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+4], edx

; 261  :     diff[k + 2] = piOrg[2] - piCur[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+8], edx

; 262  :     diff[k + 3] = piOrg[3] - piCur[3];

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+12], eax

; 263  :     diff[k + 4] = piOrg[4] - piCur[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+16], edx

; 264  :     diff[k + 5] = piOrg[5] - piCur[5];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+20], eax

; 265  :     diff[k + 6] = piOrg[6] - piCur[6];

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+24], eax

; 266  :     diff[k + 7] = piOrg[7] - piCur[7];

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _piCur$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+28], eax

; 267  : 
; 268  :     piCur += iStrideCur;

	mov	eax, DWORD PTR _piCur$[ebp]
	add	eax, DWORD PTR _iStrideCur$[ebp]
	mov	DWORD PTR _piCur$[ebp], eax

; 269  :     piOrg += iStrideOrg;

	mov	eax, DWORD PTR _piOrg$[ebp]
	add	eax, DWORD PTR _iStrideOrg$[ebp]
	mov	DWORD PTR _piOrg$[ebp], eax

; 270  :   }

	jmp	$LN2@satd_8x8_s
$LN3@satd_8x8_s:

; 271  : 
; 272  :   // horizontal
; 273  :   for (j = 0; j < 8; ++j) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@satd_8x8_s
$LN5@satd_8x8_s:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@satd_8x8_s:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN6@satd_8x8_s

; 274  :     jj = j << 3;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 3
	mov	DWORD PTR _jj$[ebp], eax

; 275  :     m2[j][0] = diff[jj] + diff[jj + 4];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4]
	mov	edx, DWORD PTR _jj$[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+16]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	DWORD PTR [edx+eax], ecx

; 276  :     m2[j][1] = diff[jj + 1] + diff[jj + 5];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+4]
	mov	edx, DWORD PTR _jj$[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+20]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax], ecx

; 277  :     m2[j][2] = diff[jj + 2] + diff[jj + 6];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+8]
	mov	edx, DWORD PTR _jj$[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+24]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR [edx+eax], ecx

; 278  :     m2[j][3] = diff[jj + 3] + diff[jj + 7];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+12]
	mov	edx, DWORD PTR _jj$[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	DWORD PTR [edx+eax], ecx

; 279  :     m2[j][4] = diff[jj] - diff[jj + 4];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+16]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR [ecx+eax], edx

; 280  :     m2[j][5] = diff[jj + 1] - diff[jj + 5];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+4]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+20]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 5
	mov	DWORD PTR [ecx+eax], edx

; 281  :     m2[j][6] = diff[jj + 2] - diff[jj + 6];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+8]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+24]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	DWORD PTR [ecx+eax], edx

; 282  :     m2[j][7] = diff[jj + 3] - diff[jj + 7];

	mov	eax, DWORD PTR _jj$[ebp]
	mov	ecx, DWORD PTR _jj$[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+12]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 7
	mov	DWORD PTR [ecx+eax], edx

; 283  : 
; 284  :     m1[j][0] = m2[j][0] + m2[j][2];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 285  :     m1[j][1] = m2[j][1] + m2[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [eax+edx], ecx

; 286  :     m1[j][2] = m2[j][0] - m2[j][2];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR [edx+ecx], eax

; 287  :     m1[j][3] = m2[j][1] - m2[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	DWORD PTR [eax+edx], ecx

; 288  :     m1[j][4] = m2[j][4] + m2[j][6];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [eax+edx], ecx

; 289  :     m1[j][5] = m2[j][5] + m2[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 5
	mov	DWORD PTR [edx+ecx], eax

; 290  :     m1[j][6] = m2[j][4] - m2[j][6];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 6
	mov	DWORD PTR [eax+edx], ecx

; 291  :     m1[j][7] = m2[j][5] - m2[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	mov	DWORD PTR [edx+ecx], eax

; 292  : 
; 293  :     m2[j][0] = m1[j][0] + m1[j][1];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 294  :     m2[j][1] = m1[j][0] - m1[j][1];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 295  :     m2[j][2] = m1[j][2] + m1[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR [eax+edx], ecx

; 296  :     m2[j][3] = m1[j][2] - m1[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	DWORD PTR [eax+edx], ecx

; 297  :     m2[j][4] = m1[j][4] + m1[j][5];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [eax+edx], ecx

; 298  :     m2[j][5] = m1[j][4] - m1[j][5];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	DWORD PTR [eax+edx], ecx

; 299  :     m2[j][6] = m1[j][6] + m1[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	DWORD PTR [edx+ecx], eax

; 300  :     m2[j][7] = m1[j][6] - m1[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	mov	DWORD PTR [edx+ecx], eax

; 301  :   }

	jmp	$LN5@satd_8x8_s
$LN6@satd_8x8_s:

; 302  : 
; 303  :   // vertical
; 304  :   for (i = 0; i < 8; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@satd_8x8_s
$LN8@satd_8x8_s:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@satd_8x8_s:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN9@satd_8x8_s

; 305  :     m3[0][i] = m2[0][i] + m2[4][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 306  :     m3[1][i] = m2[1][i] + m2[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 0
	lea	eax, DWORD PTR _m3$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 307  :     m3[2][i] = m2[2][i] + m2[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 1
	lea	eax, DWORD PTR _m3$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 308  :     m3[3][i] = m2[3][i] + m2[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 309  :     m3[4][i] = m2[0][i] - m2[4][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 310  :     m3[5][i] = m2[1][i] - m2[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 311  :     m3[6][i] = m2[2][i] - m2[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 312  :     m3[7][i] = m2[3][i] - m2[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 313  : 
; 314  :     m1[0][i] = m3[0][i] + m3[2][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 315  :     m1[1][i] = m3[1][i] + m3[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 0
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 316  :     m1[2][i] = m3[0][i] - m3[2][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 317  :     m1[3][i] = m3[1][i] - m3[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 318  :     m1[4][i] = m3[4][i] + m3[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 2
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 319  :     m1[5][i] = m3[5][i] + m3[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 320  :     m1[6][i] = m3[4][i] - m3[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 321  :     m1[7][i] = m3[5][i] - m3[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 322  : 
; 323  :     m2[0][i] = m1[0][i] + m1[1][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 324  :     m2[1][i] = m1[0][i] - m1[1][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 325  :     m2[2][i] = m1[2][i] + m1[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 1
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 326  :     m2[3][i] = m1[2][i] - m1[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 327  :     m2[4][i] = m1[4][i] + m1[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 2
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 328  :     m2[5][i] = m1[4][i] - m1[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 329  :     m2[6][i] = m1[6][i] + m1[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 330  :     m2[7][i] = m1[6][i] - m1[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 331  :   }

	jmp	$LN8@satd_8x8_s
$LN9@satd_8x8_s:

; 332  : 
; 333  :   for (i = 0; i < 64; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@satd_8x8_s
$LN11@satd_8x8_s:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@satd_8x8_s:
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jge	SHORT $LN12@satd_8x8_s

; 334  :     sad += abs(((int*)m2)[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp+eax*4]
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sad$[ebp]
	mov	DWORD PTR _sad$[ebp], eax

; 335  :   }

	jmp	SHORT $LN11@satd_8x8_s
$LN12@satd_8x8_s:

; 336  : 
; 337  :   sad = (sad + 2) >> 2;

	mov	eax, DWORD PTR _sad$[ebp]
	add	eax, 2
	sar	eax, 2
	mov	DWORD PTR _sad$[ebp], eax

; 338  : 
; 339  :   return sad;

	mov	eax, DWORD PTR _sad$[ebp]

; 340  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@satd_8x8_s
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1696				; 000006a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@satd_8x8_s:
	DD	4
	DD	$LN19@satd_8x8_s
$LN19@satd_8x8_s:
	DD	-324					; fffffebcH
	DD	256					; 00000100H
	DD	$LN15@satd_8x8_s
	DD	-588					; fffffdb4H
	DD	256					; 00000100H
	DD	$LN16@satd_8x8_s
	DD	-852					; fffffcacH
	DD	256					; 00000100H
	DD	$LN17@satd_8x8_s
	DD	-1116					; fffffba4H
	DD	256					; 00000100H
	DD	$LN18@satd_8x8_s
$LN18@satd_8x8_s:
	DB	109					; 0000006dH
	DB	51					; 00000033H
	DB	0
$LN17@satd_8x8_s:
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN16@satd_8x8_s:
	DB	109					; 0000006dH
	DB	49					; 00000031H
	DB	0
$LN15@satd_8x8_s:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_satd_8x8_subblock_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _satd_4x4_generic
_TEXT	SEGMENT
_i$1 = -84						; size = 4
_diff$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_piOrg$ = 8						; size = 4
_piCur$ = 12						; size = 4
_satd_4x4_generic PROC					; COMDAT

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 203  :   int32_t diff[4 * 4];
; 204  :   for (int i = 0; i < 4 * 4; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@satd_4x4_g
$LN2@satd_4x4_g:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@satd_4x4_g:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jge	SHORT $LN3@satd_4x4_g

; 205  :     diff[i] = piOrg[i] - piCur[i];

	mov	eax, DWORD PTR _piOrg$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _piCur$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	edx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _diff$[ebp+edx*4], ecx

; 206  :   }

	jmp	SHORT $LN2@satd_4x4_g
$LN3@satd_4x4_g:

; 207  :   return hadamard_4x4_generic(diff);

	lea	eax, DWORD PTR _diff$[ebp]
	push	eax
	call	_hadamard_4x4_generic
	add	esp, 4

; 208  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@satd_4x4_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@satd_4x4_g:
	DD	1
	DD	$LN7@satd_4x4_g
$LN7@satd_4x4_g:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@satd_4x4_g
$LN6@satd_4x4_g:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_satd_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _hadamard_4x4_generic
_TEXT	SEGMENT
_i$1 = -168						; size = 4
_satd$ = -156						; size = 4
_d$ = -144						; size = 64
_m$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_diff$ = 8						; size = 4
_hadamard_4x4_generic PROC				; COMDAT

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 119  :   int32_t m[4 * 4];
; 120  :   m[0] = diff[0] + diff[12];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _diff$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 0
	mov	DWORD PTR _m$[ebp+edx], ecx

; 121  :   m[1] = diff[1] + diff[13];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _diff$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR _m$[ebp+edx], eax

; 122  :   m[2] = diff[2] + diff[14];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _diff$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _m$[ebp+edx], eax

; 123  :   m[3] = diff[3] + diff[15];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _diff$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	DWORD PTR _m$[ebp+edx], ecx

; 124  :   m[4] = diff[4] + diff[8];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _diff$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _m$[ebp+ecx], eax

; 125  :   m[5] = diff[5] + diff[9];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _diff$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 5
	mov	DWORD PTR _m$[ebp+edx], ecx

; 126  :   m[6] = diff[6] + diff[10];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _diff$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 6
	mov	DWORD PTR _m$[ebp+edx], ecx

; 127  :   m[7] = diff[7] + diff[11];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR _diff$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 7
	mov	DWORD PTR _m$[ebp+edx], ecx

; 128  :   m[8] = diff[4] - diff[8];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	sub	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR _m$[ebp+ecx], eax

; 129  :   m[9] = diff[5] - diff[9];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 9
	mov	DWORD PTR _m$[ebp+eax], ecx

; 130  :   m[10] = diff[6] - diff[10];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	DWORD PTR _m$[ebp+eax], ecx

; 131  :   m[11] = diff[7] - diff[11];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 11
	mov	DWORD PTR _m$[ebp+eax], ecx

; 132  :   m[12] = diff[0] - diff[12];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 12
	mov	DWORD PTR _m$[ebp+eax], ecx

; 133  :   m[13] = diff[1] - diff[13];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	DWORD PTR _m$[ebp+edx], eax

; 134  :   m[14] = diff[2] - diff[14];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	DWORD PTR _m$[ebp+edx], eax

; 135  :   m[15] = diff[3] - diff[15];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _diff$[ebp]
	mov	esi, DWORD PTR _diff$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	sub	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	DWORD PTR _m$[ebp+eax], ecx

; 136  : 
; 137  :   int32_t d[4 * 4];
; 138  :   d[0] = m[0] + m[4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _m$[ebp+ecx]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _d$[ebp+edx], eax

; 139  :   d[1] = m[1] + m[5];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _d$[ebp+ecx], eax

; 140  :   d[2] = m[2] + m[6];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _d$[ebp+ecx], eax

; 141  :   d[3] = m[3] + m[7];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _d$[ebp+eax], ecx

; 142  :   d[4] = m[8] + m[12];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _d$[ebp+ecx], eax

; 143  :   d[5] = m[9] + m[13];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	DWORD PTR _d$[ebp+eax], ecx

; 144  :   d[6] = m[10] + m[14];

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	DWORD PTR _d$[ebp+eax], ecx

; 145  :   d[7] = m[11] + m[15];

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 7
	mov	DWORD PTR _d$[ebp+eax], ecx

; 146  :   d[8] = m[0] - m[4];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _m$[ebp+ecx]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR _d$[ebp+ecx], eax

; 147  :   d[9] = m[1] - m[5];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _m$[ebp+eax]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	DWORD PTR _d$[ebp+edx], eax

; 148  :   d[10] = m[2] - m[6];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _m$[ebp+eax]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	DWORD PTR _d$[ebp+edx], eax

; 149  :   d[11] = m[3] - m[7];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 11
	mov	DWORD PTR _d$[ebp+eax], ecx

; 150  :   d[12] = m[12] - m[8];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _m$[ebp+ecx]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	DWORD PTR _d$[ebp+edx], eax

; 151  :   d[13] = m[13] - m[9];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 13
	mov	DWORD PTR _d$[ebp+eax], ecx

; 152  :   d[14] = m[14] - m[10];

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 14
	mov	DWORD PTR _d$[ebp+eax], ecx

; 153  :   d[15] = m[15] - m[11];

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 11
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	DWORD PTR _d$[ebp+eax], ecx

; 154  : 
; 155  :   m[0] = d[0] + d[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	add	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _m$[ebp+eax], ecx

; 156  :   m[1] = d[1] + d[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _d$[ebp+eax]
	add	edx, DWORD PTR _d$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _m$[ebp+eax], edx

; 157  :   m[2] = d[1] - d[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _d$[ebp+eax]
	sub	edx, DWORD PTR _d$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _m$[ebp+eax], edx

; 158  :   m[3] = d[0] - d[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _m$[ebp+eax], ecx

; 159  :   m[4] = d[4] + d[7];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _d$[ebp+eax]
	add	eax, DWORD PTR _d$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _m$[ebp+ecx], eax

; 160  :   m[5] = d[5] + d[6];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	add	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	DWORD PTR _m$[ebp+eax], ecx

; 161  :   m[6] = d[5] - d[6];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	DWORD PTR _m$[ebp+eax], ecx

; 162  :   m[7] = d[4] - d[7];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _d$[ebp+eax]
	sub	eax, DWORD PTR _d$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	DWORD PTR _m$[ebp+edx], eax

; 163  :   m[8] = d[8] + d[11];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _d$[ebp+eax]
	add	eax, DWORD PTR _d$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR _m$[ebp+ecx], eax

; 164  :   m[9] = d[9] + d[10];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	add	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 9
	mov	DWORD PTR _m$[ebp+eax], ecx

; 165  :   m[10] = d[9] - d[10];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	DWORD PTR _m$[ebp+eax], ecx

; 166  :   m[11] = d[8] - d[11];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _d$[ebp+eax]
	sub	eax, DWORD PTR _d$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	DWORD PTR _m$[ebp+edx], eax

; 167  :   m[12] = d[12] + d[15];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	add	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 12
	mov	DWORD PTR _m$[ebp+eax], ecx

; 168  :   m[13] = d[13] + d[14];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	add	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 13
	mov	DWORD PTR _m$[ebp+eax], ecx

; 169  :   m[14] = d[13] - d[14];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 14
	mov	DWORD PTR _m$[ebp+eax], ecx

; 170  :   m[15] = d[12] - d[15];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _d$[ebp+ecx]
	sub	ecx, DWORD PTR _d$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	DWORD PTR _m$[ebp+eax], ecx

; 171  : 
; 172  :   d[0] = m[0] + m[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _m$[ebp+ecx]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _d$[ebp+edx], eax

; 173  :   d[1] = m[0] - m[1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _m$[ebp+ecx]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _d$[ebp+ecx], eax

; 174  :   d[2] = m[2] + m[3];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _d$[ebp+ecx], eax

; 175  :   d[3] = m[3] - m[2];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _m$[ebp+ecx]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	DWORD PTR _d$[ebp+edx], eax

; 176  :   d[4] = m[4] + m[5];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _d$[ebp+ecx], eax

; 177  :   d[5] = m[4] - m[5];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _m$[ebp+eax]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	DWORD PTR _d$[ebp+edx], eax

; 178  :   d[6] = m[6] + m[7];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	DWORD PTR _d$[ebp+eax], ecx

; 179  :   d[7] = m[7] - m[6];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 7
	mov	DWORD PTR _d$[ebp+eax], ecx

; 180  :   d[8] = m[8] + m[9];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _m$[ebp+eax]
	add	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR _d$[ebp+ecx], eax

; 181  :   d[9] = m[8] - m[9];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _m$[ebp+eax]
	sub	eax, DWORD PTR _m$[ebp+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	DWORD PTR _d$[ebp+edx], eax

; 182  :   d[10] = m[10] + m[11];

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 11
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	DWORD PTR _d$[ebp+eax], ecx

; 183  :   d[11] = m[11] - m[10];

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 11
	mov	DWORD PTR _d$[ebp+eax], ecx

; 184  :   d[12] = m[12] + m[13];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 12
	mov	DWORD PTR _d$[ebp+eax], ecx

; 185  :   d[13] = m[12] - m[13];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 13
	mov	DWORD PTR _d$[ebp+eax], ecx

; 186  :   d[14] = m[14] + m[15];

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	add	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 14
	mov	DWORD PTR _d$[ebp+eax], ecx

; 187  :   d[15] = m[15] - m[14];

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _m$[ebp+ecx]
	sub	ecx, DWORD PTR _m$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	DWORD PTR _d$[ebp+eax], ecx

; 188  : 
; 189  :   int32_t satd = 0;

	mov	DWORD PTR _satd$[ebp], 0

; 190  :   for (int i = 0; i < 16; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@hadamard_4
$LN2@hadamard_4:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@hadamard_4:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jge	SHORT $LN3@hadamard_4

; 191  :     satd += abs(d[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _d$[ebp+eax*4]
	push	ecx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _satd$[ebp]
	mov	DWORD PTR _satd$[ebp], eax

; 192  :   }

	jmp	SHORT $LN2@hadamard_4
$LN3@hadamard_4:

; 193  :   satd = ((satd + 1) >> 1);

	mov	eax, DWORD PTR _satd$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _satd$[ebp], eax

; 194  : 
; 195  :   return satd;

	mov	eax, DWORD PTR _satd$[ebp]

; 196  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@hadamard_4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@hadamard_4:
	DD	2
	DD	$LN8@hadamard_4
$LN8@hadamard_4:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@hadamard_4
	DD	-144					; ffffff70H
	DD	64					; 00000040H
	DD	$LN7@hadamard_4
$LN7@hadamard_4:
	DB	100					; 00000064H
	DB	0
$LN6@hadamard_4:
	DB	109					; 0000006dH
	DB	0
_hadamard_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _reg_sad_generic
_TEXT	SEGMENT
_sad$ = -32						; size = 4
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride1$ = 24						; size = 4
_stride2$ = 28						; size = 4
_reg_sad_generic PROC					; COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 101  :   int y, x;
; 102  :   unsigned sad = 0;

	mov	DWORD PTR _sad$[ebp], 0

; 103  : 
; 104  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_ge
$LN2@reg_sad_ge:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_ge:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN3@reg_sad_ge

; 105  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@reg_sad_ge
$LN5@reg_sad_ge:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@reg_sad_ge:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@reg_sad_ge

; 106  :       sad += abs(data1[y * stride1 + x] - data2[y * stride2 + x]);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _data1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _data2$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sad$[ebp]
	mov	DWORD PTR _sad$[ebp], eax

; 107  :     }

	jmp	SHORT $LN5@reg_sad_ge
$LN6@reg_sad_ge:

; 108  :   }

	jmp	SHORT $LN2@reg_sad_ge
$LN3@reg_sad_ge:

; 109  : 
; 110  :   return sad;

	mov	eax, DWORD PTR _sad$[ebp]

; 111  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reg_sad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _kvz_satd_4x4_subblock_quad_generic
_TEXT	SEGMENT
_x$1 = -288						; size = 4
_y$2 = -276						; size = 4
_diff$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_preds$ = 8						; size = 4
_stride$ = 12						; size = 4
_orig$ = 16						; size = 4
_orig_stride$ = 20					; size = 4
_costs$ = 24						; size = 4
_kvz_satd_4x4_subblock_quad_generic PROC		; COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-484]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 233  :   int32_t diff[4][4 * 4];
; 234  :   for (int y = 0; y < 4; y++) {

	mov	DWORD PTR _y$2[ebp], 0
	jmp	SHORT $LN4@kvz_satd_4
$LN2@kvz_satd_4:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 1
	mov	DWORD PTR _y$2[ebp], eax
$LN4@kvz_satd_4:
	cmp	DWORD PTR _y$2[ebp], 4
	jge	$LN3@kvz_satd_4

; 235  :     for (int x = 0; x < 4; x++) {

	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@kvz_satd_4
$LN5@kvz_satd_4:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _x$1[ebp], eax
$LN7@kvz_satd_4:
	cmp	DWORD PTR _x$1[ebp], 4
	jge	$LN6@kvz_satd_4

; 236  :       diff[0][x + y * 4] = orig[x + y * orig_stride] - preds[0][x + y * stride];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _orig$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	esi, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	mov	eax, DWORD PTR _y$2[ebp]
	mov	esi, DWORD PTR _x$1[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 237  :       diff[1][x + y * 4] = orig[x + y * orig_stride] - preds[1][x + y * stride];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _orig$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _y$2[ebp]
	imul	ecx, DWORD PTR _stride$[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	mov	esi, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	movzx	ecx, BYTE PTR [eax+ecx]
	sub	edx, ecx
	mov	eax, 64					; 00000040H
	shl	eax, 0
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	mov	eax, DWORD PTR _y$2[ebp]
	mov	esi, DWORD PTR _x$1[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 238  :       diff[2][x + y * 4] = orig[x + y * orig_stride] - preds[2][x + y * stride];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _orig$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _y$2[ebp]
	imul	ecx, DWORD PTR _stride$[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	mov	esi, DWORD PTR _preds$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	movzx	ecx, BYTE PTR [eax+ecx]
	sub	edx, ecx
	mov	eax, 64					; 00000040H
	shl	eax, 1
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	mov	eax, DWORD PTR _y$2[ebp]
	mov	esi, DWORD PTR _x$1[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 239  :       diff[3][x + y * 4] = orig[x + y * orig_stride] - preds[3][x + y * stride];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _orig$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	esi, DWORD PTR _preds$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 3
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	mov	eax, DWORD PTR _y$2[ebp]
	mov	esi, DWORD PTR _x$1[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 240  :     }

	jmp	$LN5@kvz_satd_4
$LN6@kvz_satd_4:

; 241  :   }

	jmp	$LN2@kvz_satd_4
$LN3@kvz_satd_4:

; 242  : 
; 243  :   costs[0] = hadamard_4x4_generic(diff[0]);

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _diff$[ebp+ecx]
	push	edx
	call	_hadamard_4x4_generic
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 244  :   costs[1] = hadamard_4x4_generic(diff[1]);

	mov	eax, 64					; 00000040H
	shl	eax, 0
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	push	ecx
	call	_hadamard_4x4_generic
	add	esp, 4
	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 245  :   costs[2] = hadamard_4x4_generic(diff[2]);

	mov	eax, 64					; 00000040H
	shl	eax, 1
	lea	ecx, DWORD PTR _diff$[ebp+eax]
	push	ecx
	call	_hadamard_4x4_generic
	add	esp, 4
	mov	edx, 4
	shl	edx, 1
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 246  :   costs[3] = hadamard_4x4_generic(diff[3]);

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _diff$[ebp+ecx]
	push	edx
	call	_hadamard_4x4_generic
	add	esp, 4
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 247  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@kvz_satd_4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 484				; 000001e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@kvz_satd_4:
	DD	1
	DD	$LN10@kvz_satd_4
$LN10@kvz_satd_4:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN9@kvz_satd_4
$LN9@kvz_satd_4:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_kvz_satd_4x4_subblock_quad_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _kvz_satd_4x4_subblock_generic
_TEXT	SEGMENT
_x$1 = -96						; size = 4
_y$2 = -84						; size = 4
_diff$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_buf1$ = 8						; size = 4
_stride1$ = 12						; size = 4
_buf2$ = 16						; size = 4
_stride2$ = 20						; size = 4
_kvz_satd_4x4_subblock_generic PROC			; COMDAT

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 218  :   int32_t diff[4 * 4];
; 219  :   for (int y = 0; y < 4; y++) {

	mov	DWORD PTR _y$2[ebp], 0
	jmp	SHORT $LN4@kvz_satd_4
$LN2@kvz_satd_4:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 1
	mov	DWORD PTR _y$2[ebp], eax
$LN4@kvz_satd_4:
	cmp	DWORD PTR _y$2[ebp], 4
	jge	SHORT $LN3@kvz_satd_4

; 220  :     for (int x = 0; x < 4; x++) {

	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@kvz_satd_4
$LN5@kvz_satd_4:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _x$1[ebp], eax
$LN7@kvz_satd_4:
	cmp	DWORD PTR _x$1[ebp], 4
	jge	SHORT $LN6@kvz_satd_4

; 221  :       diff[x + y * 4] = buf1[x + y * stride1] - buf2[x + y * stride2];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _stride1$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _buf1$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _stride2$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _buf2$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, DWORD PTR _y$2[ebp]
	mov	eax, DWORD PTR _x$1[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _diff$[ebp+ecx*4], edx

; 222  :     }

	jmp	SHORT $LN5@kvz_satd_4
$LN6@kvz_satd_4:

; 223  :   }

	jmp	SHORT $LN2@kvz_satd_4
$LN3@kvz_satd_4:

; 224  :   return hadamard_4x4_generic(diff);

	lea	eax, DWORD PTR _diff$[ebp]
	push	eax
	call	_hadamard_4x4_generic
	add	esp, 4

; 225  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@kvz_satd_4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@kvz_satd_4:
	DD	1
	DD	$LN10@kvz_satd_4
$LN10@kvz_satd_4:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN9@kvz_satd_4
$LN9@kvz_satd_4:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_kvz_satd_4x4_subblock_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _kvz_fast_clip_32bit_to_pixel
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_value$ = 8						; size = 4
_kvz_fast_clip_32bit_to_pixel PROC			; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 66   :   // Ensure that compiler generates arithmetic shift from ">>" 
; 67   : #if defined(_MSC_VER) || defined(__GNUC__) || defined(__clang__)
; 68   : 
; 69   :   if (value & ~PIXEL_MAX) {

	mov	eax, DWORD PTR _value$[ebp]
	and	eax, -256				; ffffff00H
	je	SHORT $LN2@kvz_fast_c

; 70   :     int32_t temp = (-value) >> 31;

	mov	eax, DWORD PTR _value$[ebp]
	neg	eax
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _temp$1[ebp], eax

; 71   : #if KVZ_BIT_DEPTH == 10
; 72   :     temp &= PIXEL_MAX;
; 73   : #endif
; 74   :     return temp;

	mov	al, BYTE PTR _temp$1[ebp]
	jmp	SHORT $LN1@kvz_fast_c

; 75   :   }

	jmp	SHORT $LN1@kvz_fast_c
$LN2@kvz_fast_c:

; 76   :   else {
; 77   :     return value;

	mov	al, BYTE PTR _value$[ebp]
$LN1@kvz_fast_c:

; 78   :   }
; 79   : #else
; 80   :   return CLIP(PIXEL_MIN, PIXEL_MAX, value);
; 81   : #endif
; 82   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_fast_clip_32bit_to_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _kvz_fast_clip_16bit_to_pixel
_TEXT	SEGMENT
_temp$1 = -8						; size = 2
_value$ = 8						; size = 2
_kvz_fast_clip_16bit_to_pixel PROC			; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 44   :   // Ensure that compiler generates arithmetic shift from ">>" 
; 45   : #if defined(_MSC_VER) || defined(__GNUC__) || defined(__clang__)
; 46   : 
; 47   :   if (value & ~PIXEL_MAX) {

	movsx	eax, WORD PTR _value$[ebp]
	and	eax, -256				; ffffff00H
	je	SHORT $LN2@kvz_fast_c

; 48   :     int16_t temp = (-value) >> 15;

	movsx	eax, WORD PTR _value$[ebp]
	neg	eax
	sar	eax, 15					; 0000000fH
	mov	WORD PTR _temp$1[ebp], ax

; 49   : #if KVZ_BIT_DEPTH == 10
; 50   :     temp &= PIXEL_MAX;
; 51   : #endif
; 52   :     return temp;

	mov	al, BYTE PTR _temp$1[ebp]
	jmp	SHORT $LN1@kvz_fast_c

; 53   :   }

	jmp	SHORT $LN1@kvz_fast_c
$LN2@kvz_fast_c:

; 54   :   else {
; 55   :     return value;

	mov	al, BYTE PTR _value$[ebp]
$LN1@kvz_fast_c:

; 56   :   }
; 57   : #else
; 58   :   return CLIP(PIXEL_MIN, PIXEL_MAX, value);
; 59   : #endif
; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_fast_clip_16bit_to_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\picture-generic.c
;	COMDAT _kvz_strategy_register_picture_generic
_TEXT	SEGMENT
tv413 = -208						; size = 4
tv402 = -208						; size = 4
tv391 = -208						; size = 4
tv380 = -208						; size = 4
tv369 = -208						; size = 4
tv358 = -208						; size = 4
tv347 = -208						; size = 4
tv336 = -208						; size = 4
tv325 = -208						; size = 4
tv314 = -208						; size = 4
tv303 = -208						; size = 4
tv292 = -208						; size = 4
tv281 = -208						; size = 4
tv270 = -208						; size = 4
tv259 = -208						; size = 4
tv248 = -208						; size = 4
tv237 = -208						; size = 4
tv226 = -208						; size = 4
tv215 = -208						; size = 4
tv204 = -208						; size = 4
tv193 = -208						; size = 4
tv182 = -208						; size = 4
tv171 = -208						; size = 4
tv160 = -208						; size = 4
tv149 = -208						; size = 4
tv138 = -208						; size = 4
tv95 = -208						; size = 4
tv84 = -208						; size = 4
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_picture_generic PROC		; COMDAT

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C86F3A13_picture-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 779  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 780  : 
; 781  :   success &= kvz_strategyselector_register(opaque, "reg_sad", "generic", 0, &reg_sad_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _reg_sad_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07DDJKLCAH@reg_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 782  : 
; 783  :   success &= kvz_strategyselector_register(opaque, "sad_4x4", "generic", 0, &sad_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07CCGEEBAL@sad_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN5@kvz_strate
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@kvz_strate
$LN5@kvz_strate:
	mov	DWORD PTR tv84[ebp], 1
$LN6@kvz_strate:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 784  :   success &= kvz_strategyselector_register(opaque, "sad_8x8", "generic", 0, &sad_8x8_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_8x8_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07MEAHLBLP@sad_8x8@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN7@kvz_strate
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@kvz_strate
$LN7@kvz_strate:
	mov	DWORD PTR tv95[ebp], 1
$LN8@kvz_strate:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 785  :   success &= kvz_strategyselector_register(opaque, "sad_16x16", "generic", 0, &sad_16x16_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_16x16_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09CIFGAEGF@sad_16x16@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN9@kvz_strate
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN10@kvz_strate
$LN9@kvz_strate:
	mov	DWORD PTR tv138[ebp], 1
$LN10@kvz_strate:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 786  :   success &= kvz_strategyselector_register(opaque, "sad_32x32", "generic", 0, &sad_32x32_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_32x32_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09PHPGBCME@sad_32x32@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN11@kvz_strate
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN12@kvz_strate
$LN11@kvz_strate:
	mov	DWORD PTR tv149[ebp], 1
$LN12@kvz_strate:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 787  :   success &= kvz_strategyselector_register(opaque, "sad_64x64", "generic", 0, &sad_64x64_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_64x64_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09HIOKBDLK@sad_64x64@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN13@kvz_strate
	mov	DWORD PTR tv160[ebp], 0
	jmp	SHORT $LN14@kvz_strate
$LN13@kvz_strate:
	mov	DWORD PTR tv160[ebp], 1
$LN14@kvz_strate:
	mov	cl, BYTE PTR tv160[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 788  : 
; 789  :   success &= kvz_strategyselector_register(opaque, "satd_4x4", "generic", 0, &satd_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_08GDBJPAOD@satd_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN15@kvz_strate
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN16@kvz_strate
$LN15@kvz_strate:
	mov	DWORD PTR tv171[ebp], 1
$LN16@kvz_strate:
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 790  :   success &= kvz_strategyselector_register(opaque, "satd_8x8", "generic", 0, &satd_8x8_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_8x8_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_08IFHKAAFH@satd_8x8@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN17@kvz_strate
	mov	DWORD PTR tv182[ebp], 0
	jmp	SHORT $LN18@kvz_strate
$LN17@kvz_strate:
	mov	DWORD PTR tv182[ebp], 1
$LN18@kvz_strate:
	mov	cl, BYTE PTR tv182[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 791  :   success &= kvz_strategyselector_register(opaque, "satd_16x16", "generic", 0, &satd_16x16_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_16x16_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0L@CJHLPOG@satd_16x16@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN19@kvz_strate
	mov	DWORD PTR tv193[ebp], 0
	jmp	SHORT $LN20@kvz_strate
$LN19@kvz_strate:
	mov	DWORD PTR tv193[ebp], 1
$LN20@kvz_strate:
	mov	cl, BYTE PTR tv193[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 792  :   success &= kvz_strategyselector_register(opaque, "satd_32x32", "generic", 0, &satd_32x32_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_32x32_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0L@NNDHKJEH@satd_32x32@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN21@kvz_strate
	mov	DWORD PTR tv204[ebp], 0
	jmp	SHORT $LN22@kvz_strate
$LN21@kvz_strate:
	mov	DWORD PTR tv204[ebp], 1
$LN22@kvz_strate:
	mov	cl, BYTE PTR tv204[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 793  :   success &= kvz_strategyselector_register(opaque, "satd_64x64", "generic", 0, &satd_64x64_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_64x64_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0L@FCCLKIDJ@satd_64x64@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN23@kvz_strate
	mov	DWORD PTR tv215[ebp], 0
	jmp	SHORT $LN24@kvz_strate
$LN23@kvz_strate:
	mov	DWORD PTR tv215[ebp], 1
$LN24@kvz_strate:
	mov	cl, BYTE PTR tv215[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 794  : 
; 795  :   success &= kvz_strategyselector_register(opaque, "sad_4x4_dual", "generic", 0, &sad_4x4_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_4x4_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0N@PBMCJFCI@sad_4x4_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN25@kvz_strate
	mov	DWORD PTR tv226[ebp], 0
	jmp	SHORT $LN26@kvz_strate
$LN25@kvz_strate:
	mov	DWORD PTR tv226[ebp], 1
$LN26@kvz_strate:
	mov	cl, BYTE PTR tv226[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 796  :   success &= kvz_strategyselector_register(opaque, "sad_8x8_dual", "generic", 0, &sad_8x8_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_8x8_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0N@NAFGAMEI@sad_8x8_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN27@kvz_strate
	mov	DWORD PTR tv237[ebp], 0
	jmp	SHORT $LN28@kvz_strate
$LN27@kvz_strate:
	mov	DWORD PTR tv237[ebp], 1
$LN28@kvz_strate:
	mov	cl, BYTE PTR tv237[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 797  :   success &= kvz_strategyselector_register(opaque, "sad_16x16_dual", "generic", 0, &sad_16x16_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_16x16_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0P@KGAKCNHP@sad_16x16_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN29@kvz_strate
	mov	DWORD PTR tv248[ebp], 0
	jmp	SHORT $LN30@kvz_strate
$LN29@kvz_strate:
	mov	DWORD PTR tv248[ebp], 1
$LN30@kvz_strate:
	mov	cl, BYTE PTR tv248[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 798  :   success &= kvz_strategyselector_register(opaque, "sad_32x32_dual", "generic", 0, &sad_32x32_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_32x32_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0P@EBOHBHKK@sad_32x32_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN31@kvz_strate
	mov	DWORD PTR tv259[ebp], 0
	jmp	SHORT $LN32@kvz_strate
$LN31@kvz_strate:
	mov	DWORD PTR tv259[ebp], 1
$LN32@kvz_strate:
	mov	cl, BYTE PTR tv259[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 799  :   success &= kvz_strategyselector_register(opaque, "sad_64x64_dual", "generic", 0, &sad_64x64_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sad_64x64_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0P@BGJOPAPB@sad_64x64_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN33@kvz_strate
	mov	DWORD PTR tv270[ebp], 0
	jmp	SHORT $LN34@kvz_strate
$LN33@kvz_strate:
	mov	DWORD PTR tv270[ebp], 1
$LN34@kvz_strate:
	mov	cl, BYTE PTR tv270[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 800  : 
; 801  :   success &= kvz_strategyselector_register(opaque, "satd_4x4_dual", "generic", 0, &satd_4x4_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_4x4_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0O@PJODLFIO@satd_4x4_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN35@kvz_strate
	mov	DWORD PTR tv281[ebp], 0
	jmp	SHORT $LN36@kvz_strate
$LN35@kvz_strate:
	mov	DWORD PTR tv281[ebp], 1
$LN36@kvz_strate:
	mov	cl, BYTE PTR tv281[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 802  :   success &= kvz_strategyselector_register(opaque, "satd_8x8_dual", "generic", 0, &satd_8x8_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_8x8_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0O@NIHHCMOO@satd_8x8_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN37@kvz_strate
	mov	DWORD PTR tv292[ebp], 0
	jmp	SHORT $LN38@kvz_strate
$LN37@kvz_strate:
	mov	DWORD PTR tv292[ebp], 1
$LN38@kvz_strate:
	mov	cl, BYTE PTR tv292[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 803  :   success &= kvz_strategyselector_register(opaque, "satd_16x16_dual", "generic", 0, &satd_16x16_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_16x16_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN39@kvz_strate
	mov	DWORD PTR tv303[ebp], 0
	jmp	SHORT $LN40@kvz_strate
$LN39@kvz_strate:
	mov	DWORD PTR tv303[ebp], 1
$LN40@kvz_strate:
	mov	cl, BYTE PTR tv303[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 804  :   success &= kvz_strategyselector_register(opaque, "satd_32x32_dual", "generic", 0, &satd_32x32_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_32x32_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BA@ICNECECM@satd_32x32_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN41@kvz_strate
	mov	DWORD PTR tv314[ebp], 0
	jmp	SHORT $LN42@kvz_strate
$LN41@kvz_strate:
	mov	DWORD PTR tv314[ebp], 1
$LN42@kvz_strate:
	mov	cl, BYTE PTR tv314[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 805  :   success &= kvz_strategyselector_register(opaque, "satd_64x64_dual", "generic", 0, &satd_64x64_dual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_64x64_dual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN43@kvz_strate
	mov	DWORD PTR tv325[ebp], 0
	jmp	SHORT $LN44@kvz_strate
$LN43@kvz_strate:
	mov	DWORD PTR tv325[ebp], 1
$LN44@kvz_strate:
	mov	cl, BYTE PTR tv325[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 806  :   success &= kvz_strategyselector_register(opaque, "satd_any_size", "generic", 0, &satd_any_size_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_any_size_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0O@FHJAMJMP@satd_any_size@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN45@kvz_strate
	mov	DWORD PTR tv336[ebp], 0
	jmp	SHORT $LN46@kvz_strate
$LN45@kvz_strate:
	mov	DWORD PTR tv336[ebp], 1
$LN46@kvz_strate:
	mov	cl, BYTE PTR tv336[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 807  :   success &= kvz_strategyselector_register(opaque, "satd_any_size_quad", "generic", 0, &satd_any_size_quad_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _satd_any_size_quad_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN47@kvz_strate
	mov	DWORD PTR tv347[ebp], 0
	jmp	SHORT $LN48@kvz_strate
$LN47@kvz_strate:
	mov	DWORD PTR tv347[ebp], 1
$LN48@kvz_strate:
	mov	cl, BYTE PTR tv347[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 808  : 
; 809  :   success &= kvz_strategyselector_register(opaque, "pixels_calc_ssd", "generic", 0, &pixels_calc_ssd_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _pixels_calc_ssd_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN49@kvz_strate
	mov	DWORD PTR tv358[ebp], 0
	jmp	SHORT $LN50@kvz_strate
$LN49@kvz_strate:
	mov	DWORD PTR tv358[ebp], 1
$LN50@kvz_strate:
	mov	cl, BYTE PTR tv358[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 810  :   success &= kvz_strategyselector_register(opaque, "bipred_average", "generic", 0, &bipred_average_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _bipred_average_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0P@FIKELBGI@bipred_average@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN51@kvz_strate
	mov	DWORD PTR tv369[ebp], 0
	jmp	SHORT $LN52@kvz_strate
$LN51@kvz_strate:
	mov	DWORD PTR tv369[ebp], 1
$LN52@kvz_strate:
	mov	cl, BYTE PTR tv369[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 811  : 
; 812  :   success &= kvz_strategyselector_register(opaque, "get_optimized_sad", "generic", 0, &get_optimized_sad_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _get_optimized_sad_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BC@IMILIHON@get_optimized_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN53@kvz_strate
	mov	DWORD PTR tv380[ebp], 0
	jmp	SHORT $LN54@kvz_strate
$LN53@kvz_strate:
	mov	DWORD PTR tv380[ebp], 1
$LN54@kvz_strate:
	mov	cl, BYTE PTR tv380[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 813  :   success &= kvz_strategyselector_register(opaque, "ver_sad", "generic", 0, &ver_sad_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _ver_sad_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07OEMLCPNF@ver_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN55@kvz_strate
	mov	DWORD PTR tv391[ebp], 0
	jmp	SHORT $LN56@kvz_strate
$LN55@kvz_strate:
	mov	DWORD PTR tv391[ebp], 1
$LN56@kvz_strate:
	mov	cl, BYTE PTR tv391[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 814  :   success &= kvz_strategyselector_register(opaque, "hor_sad", "generic", 0, &hor_sad_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _hor_sad_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07CJIKFDIC@hor_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN57@kvz_strate
	mov	DWORD PTR tv402[ebp], 0
	jmp	SHORT $LN58@kvz_strate
$LN57@kvz_strate:
	mov	DWORD PTR tv402[ebp], 1
$LN58@kvz_strate:
	mov	cl, BYTE PTR tv402[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 815  : 
; 816  :   success &= kvz_strategyselector_register(opaque, "pixel_var", "generic", 0, &pixel_var_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _pixel_var_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09GDPKBOJB@pixel_var@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN59@kvz_strate
	mov	DWORD PTR tv413[ebp], 0
	jmp	SHORT $LN60@kvz_strate
$LN59@kvz_strate:
	mov	DWORD PTR tv413[ebp], 1
$LN60@kvz_strate:
	mov	cl, BYTE PTR tv413[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 817  : 
; 818  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 819  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_picture_generic ENDP
_TEXT	ENDS
END
