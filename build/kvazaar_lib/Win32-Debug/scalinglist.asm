; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_g_scaling_list_num
PUBLIC	_kvz_g_scaling_list_size
PUBLIC	_kvz_g_quant_scales
PUBLIC	_kvz_g_inv_quant_scales
msvcjmc	SEGMENT
__E2865EBA_corecrt_math@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__A1428DF1_scalinglist@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_kvz_g_scaling_list_num DB 06H
	DB	06H
	DB	06H
	DB	02H
_kvz_g_scaling_list_size DW 010H
	DW	040H
	DW	0100H
	DW	0400H
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_g_scaling_list_size_x DB 04H
	DB	08H
	DB	010H
	DB	020H
_g_quant_default_4x4 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
_g_quant_intra_default_8x8 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	015H
	DD	018H
	DD	010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	013H
	DD	016H
	DD	019H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	016H
	DD	019H
	DD	01dH
	DD	010H
	DD	010H
	DD	012H
	DD	015H
	DD	018H
	DD	01bH
	DD	01fH
	DD	024H
	DD	011H
	DD	011H
	DD	014H
	DD	018H
	DD	01eH
	DD	023H
	DD	029H
	DD	02fH
	DD	012H
	DD	013H
	DD	016H
	DD	01bH
	DD	023H
	DD	02cH
	DD	036H
	DD	041H
	DD	015H
	DD	016H
	DD	019H
	DD	01fH
	DD	029H
	DD	036H
	DD	046H
	DD	058H
	DD	018H
	DD	019H
	DD	01dH
	DD	024H
	DD	02fH
	DD	041H
	DD	058H
	DD	073H
_g_quant_inter_default_8x8 DD 010H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	010H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	010H
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	011H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	012H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	014H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	047H
	DD	018H
	DD	019H
	DD	01cH
	DD	021H
	DD	029H
	DD	036H
	DD	047H
	DD	05bH
_kvz_g_quant_scales DW 06666H
	DW	05b06H
	DW	05050H
	DW	047dcH
	DW	04000H
	DW	038e4H
_kvz_g_inv_quant_scales DW 028H
	DW	02dH
	DW	033H
	DW	039H
	DW	040H
	DW	048H
?matrix_type@?1??kvz_scalinglist_parse@@9@9 DB 'INTRA4X4_LUMA', 00H ; `kvz_scalinglist_parse'::`2'::matrix_type
	ORG $+6
	DB	'INTRA4X4_CHROMAU', 00H
	ORG $+3
	DB	'INTRA4X4_CHROMAV', 00H
	ORG $+3
	DB	'INTER4X4_LUMA', 00H
	ORG $+6
	DB	'INTER4X4_CHROMAU', 00H
	ORG $+3
	DB	'INTER4X4_CHROMAV', 00H
	ORG $+3
	DB	'INTRA8X8_LUMA', 00H
	ORG $+6
	DB	'INTRA8X8_CHROMAU', 00H
	ORG $+3
	DB	'INTRA8X8_CHROMAV', 00H
	ORG $+3
	DB	'INTER8X8_LUMA', 00H
	ORG $+6
	DB	'INTER8X8_CHROMAU', 00H
	ORG $+3
	DB	'INTER8X8_CHROMAV', 00H
	ORG $+3
	DB	'INTRA16X16_LUMA', 00H
	ORG $+4
	DB	'INTRA16X16_CHROMAU', 00H
	ORG $+1
	DB	'INTRA16X16_CHROMAV', 00H
	ORG $+1
	DB	'INTER16X16_LUMA', 00H
	ORG $+4
	DB	'INTER16X16_CHROMAU', 00H
	ORG $+1
	DB	'INTER16X16_CHROMAV', 00H
	ORG $+1
	DB	'INTRA32X32_LUMA', 00H
	ORG $+4
	DB	'INTER32X32_LUMA', 00H
	ORG $+4
	ORG $+80
?matrix_type_dc@?1??kvz_scalinglist_parse@@9@9 DB 'INTRA16X16_LUMA_DC', 00H ; `kvz_scalinglist_parse'::`2'::matrix_type_dc
	ORG $+3
	DB	'INTRA16X16_CHROMAU_DC', 00H
	DB	'INTRA16X16_CHROMAV_DC', 00H
	DB	'INTER16X16_LUMA_DC', 00H
	ORG $+3
	DB	'INTER16X16_CHROMAU_DC', 00H
	DB	'INTER16X16_CHROMAV_DC', 00H
	DB	'INTRA32X32_LUMA_DC', 00H
	ORG $+3
	DB	'INTER32X32_LUMA_DC', 00H
	ORG $+3
	ORG $+88
CONST	ENDS
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfscanf_l
PUBLIC	_fscanf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	_kvz_scalinglist_get_default
PUBLIC	_kvz_scalinglist_init
PUBLIC	_kvz_scalinglist_destroy
PUBLIC	_kvz_scalinglist_parse
PUBLIC	_kvz_scalinglist_process
PUBLIC	_kvz_scalinglist_process_enc
PUBLIC	_kvz_scalinglist_set
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	__real@4000000000000000
PUBLIC	__real@40e0000000000000
PUBLIC	__real@c000000000000000
EXTRN	_pow:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	_strstr:PROC
EXTRN	__imp__feof:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@40e0000000000000
CONST	SEGMENT
__real@40e0000000000000 DQ 040e0000000000000r	; 32768
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_set
_TEXT	SEGMENT
tv180 = -272						; size = 4
tv154 = -272						; size = 4
tv169 = -268						; size = 4
tv143 = -268						; size = 4
tv93 = -268						; size = 4
tv80 = -268						; size = 4
_dequantcoeff$ = -68					; size = 4
_quantcoeff$ = -56					; size = 4
_dc$ = -44						; size = 4
_ratio$ = -32						; size = 4
_height$ = -20						; size = 4
_width$ = -8						; size = 4
_scaling_list$ = 8					; size = 4
_coeff$ = 12						; size = 4
_listId$ = 16						; size = 4
_sizeId$ = 20						; size = 4
_qp$ = 24						; size = 4
_kvz_scalinglist_set PROC				; COMDAT

; 376  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 377  :   const uint32_t width  = g_scaling_list_size_x[sizeId];

	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, BYTE PTR _g_scaling_list_size_x[eax]
	mov	DWORD PTR _width$[ebp], ecx

; 378  :   const uint32_t height = g_scaling_list_size_x[sizeId];

	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, BYTE PTR _g_scaling_list_size_x[eax]
	mov	DWORD PTR _height$[ebp], ecx

; 379  :   const uint32_t ratio  = g_scaling_list_size_x[sizeId] / MIN(8, g_scaling_list_size_x[sizeId]);

	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, BYTE PTR _g_scaling_list_size_x[eax]
	cmp	ecx, 8
	jle	SHORT $LN3@kvz_scalin
	mov	DWORD PTR tv80[ebp], 8
	jmp	SHORT $LN4@kvz_scalin
$LN3@kvz_scalin:
	mov	edx, DWORD PTR _sizeId$[ebp]
	movzx	eax, BYTE PTR _g_scaling_list_size_x[edx]
	mov	DWORD PTR tv80[ebp], eax
$LN4@kvz_scalin:
	mov	ecx, DWORD PTR _sizeId$[ebp]
	movzx	eax, BYTE PTR _g_scaling_list_size_x[ecx]
	cdq
	idiv	DWORD PTR tv80[ebp]
	mov	DWORD PTR _ratio$[ebp], eax

; 380  :   const uint32_t dc = scaling_list->scaling_list_dc[sizeId][listId] != 0 ? scaling_list->scaling_list_dc[sizeId][listId] : 16;

	imul	eax, DWORD PTR _sizeId$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _listId$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN5@kvz_scalin
	imul	ecx, DWORD PTR _sizeId$[ebp], 24
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _listId$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN6@kvz_scalin
$LN5@kvz_scalin:
	mov	DWORD PTR tv93[ebp], 16			; 00000010H
$LN6@kvz_scalin:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR _dc$[ebp], eax

; 381  :   //These cast are allowed, since these are pointer's to malloc'd area in kvz_scalinglist_init
; 382  :   int32_t *quantcoeff   = (int32_t*) scaling_list->quant_coeff[sizeId][listId][qp];

	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+196]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _quantcoeff$[ebp], edx

; 383  :   int32_t *dequantcoeff = (int32_t*) scaling_list->de_quant_coeff[sizeId][listId][qp];

	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+772]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dequantcoeff$[ebp], edx

; 384  : 
; 385  :   // Encoder list
; 386  :   kvz_scalinglist_process_enc(coeff, quantcoeff, kvz_g_quant_scales[qp]<<4, height, width, ratio,

	mov	eax, DWORD PTR _scaling_list$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@kvz_scalin
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN8@kvz_scalin
$LN7@kvz_scalin:
	mov	DWORD PTR tv143[ebp], 0
$LN8@kvz_scalin:
	mov	edx, DWORD PTR _sizeId$[ebp]
	movzx	eax, BYTE PTR _g_scaling_list_size_x[edx]
	cmp	eax, 8
	jle	SHORT $LN9@kvz_scalin
	mov	DWORD PTR tv154[ebp], 8
	jmp	SHORT $LN10@kvz_scalin
$LN9@kvz_scalin:
	mov	ecx, DWORD PTR _sizeId$[ebp]
	movzx	edx, BYTE PTR _g_scaling_list_size_x[ecx]
	mov	DWORD PTR tv154[ebp], edx
$LN10@kvz_scalin:
	movzx	eax, BYTE PTR tv143[ebp]
	push	eax
	mov	ecx, DWORD PTR _dc$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv154[ebp]
	push	edx
	mov	eax, DWORD PTR _ratio$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _qp$[ebp]
	movsx	ecx, WORD PTR _kvz_g_quant_scales[eax*2]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _quantcoeff$[ebp]
	push	edx
	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	call	_kvz_scalinglist_process_enc
	add	esp, 36					; 00000024H

; 387  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 388  :   // Decoder list
; 389  :   scalinglist_process_dec(coeff, dequantcoeff, kvz_g_inv_quant_scales[qp], height, width, ratio,

	mov	eax, DWORD PTR _scaling_list$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN11@kvz_scalin
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN12@kvz_scalin
$LN11@kvz_scalin:
	mov	DWORD PTR tv169[ebp], 0
$LN12@kvz_scalin:
	mov	edx, DWORD PTR _sizeId$[ebp]
	movzx	eax, BYTE PTR _g_scaling_list_size_x[edx]
	cmp	eax, 8
	jle	SHORT $LN13@kvz_scalin
	mov	DWORD PTR tv180[ebp], 8
	jmp	SHORT $LN14@kvz_scalin
$LN13@kvz_scalin:
	mov	ecx, DWORD PTR _sizeId$[ebp]
	movzx	edx, BYTE PTR _g_scaling_list_size_x[ecx]
	mov	DWORD PTR tv180[ebp], edx
$LN14@kvz_scalin:
	movzx	eax, BYTE PTR tv169[ebp]
	push	eax
	mov	ecx, DWORD PTR _dc$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv180[ebp]
	push	edx
	mov	eax, DWORD PTR _ratio$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _qp$[ebp]
	movsx	ecx, WORD PTR _kvz_g_inv_quant_scales[eax*2]
	push	ecx
	mov	edx, DWORD PTR _dequantcoeff$[ebp]
	push	edx
	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	call	_scalinglist_process_dec
	add	esp, 36					; 00000024H

; 390  :                           MIN(8, g_scaling_list_size_x[sizeId]), dc, !scaling_list->enable);
; 391  : 
; 392  : 
; 393  :   // TODO: support NSQT
; 394  :   // if(sizeId == /*SCALING_LIST_32x32*/3 || sizeId == /*SCALING_LIST_16x16*/2) { //for NSQT
; 395  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_VER*/1];
; 396  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height,width>>2,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 397  : 
; 398  :   //   quantcoeff   = g_quant_coeff[listId][qp][sizeId-1][/*SCALING_LIST_HOR*/2];
; 399  :   //   kvz_scalinglist_process_enc(coeff,quantcoeff,g_quantScales[qp]<<4,height>>2,width,ratio,MIN(8,g_scalingListSizeX[sizeId]),/*scalingList->getScalingListDC(sizeId,listId)*/0);
; 400  :   // }
; 401  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_scalinglist_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _scalinglist_set_err_scale
_TEXT	SEGMENT
tv165 = -288						; size = 8
_scale$ = -84						; size = 8
_err_scale$ = -68					; size = 4
_quantcoeff$ = -56					; size = 4
_max_num_coeff$ = -44					; size = 4
_i$ = -32						; size = 4
_transform_shift$ = -20					; size = 4
_log2_tr_size$ = -8					; size = 4
_bitdepth$ = 8						; size = 1
_scaling_list$ = 12					; size = 4
_list$ = 16						; size = 4
_size$ = 20						; size = 4
_qp$ = 24						; size = 4
_scalinglist_set_err_scale PROC				; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 353  :   uint32_t log2_tr_size   = kvz_g_convert_to_bit[ g_scaling_list_size_x[size] ] + 2;

	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, BYTE PTR _g_scaling_list_size_x[eax]
	movsx	edx, BYTE PTR _kvz_g_convert_to_bit[ecx]
	add	edx, 2
	mov	DWORD PTR _log2_tr_size$[ebp], edx

; 354  :   int32_t transform_shift = MAX_TR_DYNAMIC_RANGE - bitdepth - log2_tr_size;  // Represents scaling through forward transform

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	mov	ecx, 15					; 0000000fH
	sub	ecx, eax
	sub	ecx, DWORD PTR _log2_tr_size$[ebp]
	mov	DWORD PTR _transform_shift$[ebp], ecx

; 355  : 
; 356  :   uint32_t i,max_num_coeff  = kvz_g_scaling_list_size[size];

	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	mov	DWORD PTR _max_num_coeff$[ebp], ecx

; 357  :   const int32_t *quantcoeff = scaling_list->quant_coeff[size][list][qp];

	imul	eax, DWORD PTR _size$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+196]
	imul	eax, DWORD PTR _list$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _quantcoeff$[ebp], edx

; 358  :   //This cast is allowed, since error_scale is a malloc'd pointer in kvz_scalinglist_init
; 359  :   double *err_scale         = (double *) scaling_list->error_scale[size][list][qp];

	imul	eax, DWORD PTR _size$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1348]
	imul	eax, DWORD PTR _list$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _err_scale$[ebp], edx

; 360  : 
; 361  :   // Compensate for scaling of bitcount in Lagrange cost function
; 362  :   double scale = CTX_FRAC_ONE_BIT;

	movsd	xmm0, QWORD PTR __real@40e0000000000000
	movsd	QWORD PTR _scale$[ebp], xmm0

; 363  :   // Compensate for scaling through forward transform
; 364  :   scale = scale*pow(2.0,-2.0*transform_shift);

	cvtsi2sd xmm0, DWORD PTR _transform_shift$[ebp]
	mulsd	xmm0, QWORD PTR __real@c000000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv165[ebp]
	movsd	xmm0, QWORD PTR tv165[ebp]
	mulsd	xmm0, QWORD PTR _scale$[ebp]
	movsd	QWORD PTR _scale$[ebp], xmm0

; 365  :   for(i=0;i<max_num_coeff;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@scalinglis
$LN2@scalinglis:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@scalinglis:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _max_num_coeff$[ebp]
	jae	SHORT $LN3@scalinglis

; 366  :     err_scale[i] = scale / quantcoeff[i] / quantcoeff[i] / (1<<(2*(bitdepth-8)));

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _quantcoeff$[ebp]
	cvtsi2sd xmm0, DWORD PTR [ecx+eax*4]
	movsd	xmm1, QWORD PTR _scale$[ebp]
	divsd	xmm1, xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _quantcoeff$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+edx*4]
	divsd	xmm1, xmm0
	movzx	ecx, BYTE PTR _bitdepth$[ebp]
	lea	ecx, DWORD PTR [ecx+ecx-16]
	mov	edx, 1
	shl	edx, cl
	cvtsi2sd xmm0, edx
	divsd	xmm1, xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _err_scale$[ebp]
	movsd	QWORD PTR [ecx+eax*8], xmm1

; 367  :   }

	jmp	SHORT $LN2@scalinglis
$LN3@scalinglis:

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_scalinglist_set_err_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_process_enc
_TEXT	SEGMENT
tv92 = -256						; size = 4
tv67 = -256						; size = 4
tv65 = -256						; size = 4
_coeffpos$1 = -56					; size = 4
_nsqtw$ = -44						; size = 4
_nsqth$ = -32						; size = 4
_i$ = -20						; size = 4
_j$ = -8						; size = 4
_coeff$ = 8						; size = 4
_quantcoeff$ = 12					; size = 4
_quant_scales$ = 16					; size = 4
_height$ = 20						; size = 4
_width$ = 24						; size = 4
_ratio$ = 28						; size = 4
_size_num$ = 32						; size = 4
_dc$ = 36						; size = 4
_flat$ = 40						; size = 1
_kvz_scalinglist_process_enc PROC			; COMDAT

; 321  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 322  :   uint32_t j,i;
; 323  :   int32_t nsqth = (height < width) ? 4: 1; //!< height ratio for NSQT

	mov	eax, DWORD PTR _height$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	SHORT $LN15@kvz_scalin
	mov	DWORD PTR tv65[ebp], 4
	jmp	SHORT $LN16@kvz_scalin
$LN15@kvz_scalin:
	mov	DWORD PTR tv65[ebp], 1
$LN16@kvz_scalin:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _nsqth$[ebp], ecx

; 324  :   int32_t nsqtw = (width < height) ? 4: 1; //!< width ratio for NSQT

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jae	SHORT $LN17@kvz_scalin
	mov	DWORD PTR tv67[ebp], 4
	jmp	SHORT $LN18@kvz_scalin
$LN17@kvz_scalin:
	mov	DWORD PTR tv67[ebp], 1
$LN18@kvz_scalin:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _nsqtw$[ebp], ecx

; 325  : 
; 326  :   // Flat scaling list
; 327  :   if (flat) {

	movzx	eax, BYTE PTR _flat$[ebp]
	test	eax, eax
	je	SHORT $LN11@kvz_scalin

; 328  :     for (j = 0; j < height * width; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@kvz_scalin
$LN2@kvz_scalin:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@kvz_scalin:
	mov	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN3@kvz_scalin

; 329  :       *quantcoeff++ = quant_scales>>4;

	mov	eax, DWORD PTR _quant_scales$[ebp]
	sar	eax, 4
	mov	ecx, DWORD PTR _quantcoeff$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _quantcoeff$[ebp]
	add	edx, 4
	mov	DWORD PTR _quantcoeff$[ebp], edx

; 330  :     }

	jmp	SHORT $LN2@kvz_scalin
$LN3@kvz_scalin:

; 331  :   } else {

	jmp	$LN1@kvz_scalin
$LN11@kvz_scalin:

; 332  :     for (j = 0; j < height; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@kvz_scalin
$LN5@kvz_scalin:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@kvz_scalin:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jae	SHORT $LN6@kvz_scalin

; 333  :       for (i = 0; i < width; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@kvz_scalin
$LN8@kvz_scalin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@kvz_scalin:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	SHORT $LN9@kvz_scalin

; 334  :         uint32_t coeffpos  = size_num * (j * nsqth / ratio) + i * nsqtw / ratio;

	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, DWORD PTR _nsqth$[ebp]
	xor	edx, edx
	div	DWORD PTR _ratio$[ebp]
	mov	ecx, eax
	imul	ecx, DWORD PTR _size_num$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _nsqtw$[ebp]
	xor	edx, edx
	div	DWORD PTR _ratio$[ebp]
	add	ecx, eax
	mov	DWORD PTR _coeffpos$1[ebp], ecx

; 335  :         quantcoeff[j*width + i] = quant_scales / ((coeffpos > 63) ? 1 : coeff[coeffpos]);

	cmp	DWORD PTR _coeffpos$1[ebp], 63		; 0000003fH
	jbe	SHORT $LN19@kvz_scalin
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN20@kvz_scalin
$LN19@kvz_scalin:
	mov	eax, DWORD PTR _coeffpos$1[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv92[ebp], edx
$LN20@kvz_scalin:
	mov	eax, DWORD PTR _quant_scales$[ebp]
	cdq
	idiv	DWORD PTR tv92[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, DWORD PTR _width$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _quantcoeff$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 336  :       }

	jmp	SHORT $LN8@kvz_scalin
$LN9@kvz_scalin:

; 337  :     }

	jmp	$LN5@kvz_scalin
$LN6@kvz_scalin:

; 338  :     if (ratio > 1) {

	cmp	DWORD PTR _ratio$[ebp], 1
	jbe	SHORT $LN1@kvz_scalin

; 339  :       quantcoeff[0] = quant_scales / dc;

	mov	eax, DWORD PTR _quant_scales$[ebp]
	xor	edx, edx
	div	DWORD PTR _dc$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _quantcoeff$[ebp]
	mov	DWORD PTR [ecx+edx], eax
$LN1@kvz_scalin:

; 340  :     }
; 341  :   }
; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_scalinglist_process_enc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _scalinglist_process_dec
_TEXT	SEGMENT
_i$ = -20						; size = 4
_j$ = -8						; size = 4
_coeff$ = 8						; size = 4
_dequantcoeff$ = 12					; size = 4
_inv_quant_scales$ = 16					; size = 4
_height$ = 20						; size = 4
_width$ = 24						; size = 4
_ratio$ = 28						; size = 4
_size_num$ = 32						; size = 4
_dc$ = 36						; size = 4
_flat$ = 40						; size = 1
_scalinglist_process_dec PROC				; COMDAT

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 295  :   uint32_t j,i;
; 296  : 
; 297  :   // Flat scaling list
; 298  :   if (flat) {

	movzx	eax, BYTE PTR _flat$[ebp]
	test	eax, eax
	je	SHORT $LN11@scalinglis

; 299  :     for (j = 0; j < height * width; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@scalinglis
$LN2@scalinglis:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@scalinglis:
	mov	eax, DWORD PTR _height$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN3@scalinglis

; 300  :       *dequantcoeff++ = inv_quant_scales<<4;

	mov	eax, DWORD PTR _inv_quant_scales$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dequantcoeff$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _dequantcoeff$[ebp]
	add	edx, 4
	mov	DWORD PTR _dequantcoeff$[ebp], edx

; 301  :     }

	jmp	SHORT $LN2@scalinglis
$LN3@scalinglis:

; 302  :   } else {

	jmp	$LN1@scalinglis
$LN11@scalinglis:

; 303  :     for (j = 0; j < height; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@scalinglis
$LN5@scalinglis:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@scalinglis:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jae	SHORT $LN6@scalinglis

; 304  :       for (i = 0; i < width; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@scalinglis
$LN8@scalinglis:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@scalinglis:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	SHORT $LN9@scalinglis

; 305  :         dequantcoeff[j*width + i] = inv_quant_scales * coeff[size_num * (j / ratio) + i / ratio];

	mov	eax, DWORD PTR _j$[ebp]
	xor	edx, edx
	div	DWORD PTR _ratio$[ebp]
	mov	ecx, eax
	imul	ecx, DWORD PTR _size_num$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	xor	edx, edx
	div	DWORD PTR _ratio$[ebp]
	add	ecx, eax
	mov	edx, DWORD PTR _coeff$[ebp]
	mov	eax, DWORD PTR _inv_quant_scales$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, DWORD PTR _width$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _dequantcoeff$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 306  :       }

	jmp	SHORT $LN8@scalinglis
$LN9@scalinglis:

; 307  :     }

	jmp	SHORT $LN5@scalinglis
$LN6@scalinglis:

; 308  :     if (ratio > 1) {

	cmp	DWORD PTR _ratio$[ebp], 1
	jbe	SHORT $LN1@scalinglis

; 309  :       dequantcoeff[0] = inv_quant_scales * dc;

	mov	eax, DWORD PTR _inv_quant_scales$[ebp]
	imul	eax, DWORD PTR _dc$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dequantcoeff$[ebp]
	mov	DWORD PTR [ecx+edx], eax
$LN1@scalinglis:

; 310  :     }
; 311  :   }
; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_scalinglist_process_dec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_process
_TEXT	SEGMENT
tv82 = -244						; size = 4
_list_ptr$1 = -44					; size = 4
_qp$ = -32						; size = 4
_list$ = -20						; size = 4
_size$ = -8						; size = 4
_scaling_list$ = 8					; size = 4
_bitdepth$ = 12						; size = 1
_kvz_scalinglist_process PROC				; COMDAT

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 409  :   uint32_t size,list,qp;
; 410  : 
; 411  :   for (size = 0; size < SCALING_LIST_SIZE_NUM; size++) {

	mov	DWORD PTR _size$[ebp], 0
	jmp	SHORT $LN4@kvz_scalin
$LN2@kvz_scalin:
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN4@kvz_scalin:
	cmp	DWORD PTR _size$[ebp], 4
	jae	$LN1@kvz_scalin

; 412  :     for (list = 0; list < kvz_g_scaling_list_num[size]; list++) {

	mov	DWORD PTR _list$[ebp], 0
	jmp	SHORT $LN7@kvz_scalin
$LN5@kvz_scalin:
	mov	eax, DWORD PTR _list$[ebp]
	add	eax, 1
	mov	DWORD PTR _list$[ebp], eax
$LN7@kvz_scalin:
	mov	eax, DWORD PTR _size$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_scaling_list_num[eax]
	cmp	DWORD PTR _list$[ebp], ecx
	jae	$LN6@kvz_scalin

; 413  :       const int32_t * const list_ptr = scaling_list->use_default_list ?

	mov	eax, DWORD PTR _scaling_list$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN12@kvz_scalin
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_kvz_scalinglist_get_default
	add	esp, 8
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN13@kvz_scalin
$LN12@kvz_scalin:
	imul	ecx, DWORD PTR _size$[ebp], 24
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	eax, DWORD PTR [edx+ecx+100]
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv82[ebp], edx
$LN13@kvz_scalin:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR _list_ptr$1[ebp], eax

; 414  :                                        kvz_scalinglist_get_default(size, list) :
; 415  :                                        scaling_list->scaling_list_coeff[size][list];
; 416  : 
; 417  :       for (qp = 0; qp < SCALING_LIST_REM_NUM; qp++) {

	mov	DWORD PTR _qp$[ebp], 0
	jmp	SHORT $LN10@kvz_scalin
$LN8@kvz_scalin:
	mov	eax, DWORD PTR _qp$[ebp]
	add	eax, 1
	mov	DWORD PTR _qp$[ebp], eax
$LN10@kvz_scalin:
	cmp	DWORD PTR _qp$[ebp], 6
	jae	SHORT $LN9@kvz_scalin

; 418  :         kvz_scalinglist_set(scaling_list, list_ptr, list, size, qp);

	mov	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	mov	eax, DWORD PTR _list_ptr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	push	ecx
	call	_kvz_scalinglist_set
	add	esp, 20					; 00000014H

; 419  :         scalinglist_set_err_scale(bitdepth, scaling_list, list, size, qp);

	mov	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	mov	eax, DWORD PTR _scaling_list$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bitdepth$[ebp]
	push	ecx
	call	_scalinglist_set_err_scale
	add	esp, 20					; 00000014H

; 420  :       }

	jmp	SHORT $LN8@kvz_scalin
$LN9@kvz_scalin:

; 421  :     }

	jmp	$LN5@kvz_scalin
$LN6@kvz_scalin:

; 422  :   }

	jmp	$LN2@kvz_scalin
$LN1@kvz_scalin:

; 423  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_scalinglist_process ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_parse
_TEXT	SEGMENT
tv190 = -1728						; size = 4
tv135 = -1728						; size = 4
tv73 = -1728						; size = 4
_ret$1 = -1144						; size = 4
_p$2 = -1132						; size = 4
_line$3 = -1120						; size = 1025
_coeff$4 = -84						; size = 4
_data$5 = -72						; size = 4
_i$6 = -60						; size = 4
_found$7 = -48						; size = 4
_size$8 = -36						; size = 4
_list_id$9 = -24					; size = 4
_size_id$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_scaling_list$ = 8					; size = 4
_fp$ = 12						; size = 4
_kvz_scalinglist_parse PROC				; COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1728				; 000006c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1728]
	mov	ecx, 432				; 000001b0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 144  :   #define LINE_BUFSIZE 1024
; 145  :   static const char matrix_type[4][6][20] =
; 146  :   {
; 147  :     {
; 148  :       "INTRA4X4_LUMA",
; 149  :       "INTRA4X4_CHROMAU",
; 150  :       "INTRA4X4_CHROMAV",
; 151  :       "INTER4X4_LUMA",
; 152  :       "INTER4X4_CHROMAU",
; 153  :       "INTER4X4_CHROMAV"
; 154  :     },
; 155  :     {
; 156  :       "INTRA8X8_LUMA",
; 157  :       "INTRA8X8_CHROMAU",
; 158  :       "INTRA8X8_CHROMAV",
; 159  :       "INTER8X8_LUMA",
; 160  :       "INTER8X8_CHROMAU",
; 161  :       "INTER8X8_CHROMAV"
; 162  :     },
; 163  :     {
; 164  :       "INTRA16X16_LUMA",
; 165  :       "INTRA16X16_CHROMAU",
; 166  :       "INTRA16X16_CHROMAV",
; 167  :       "INTER16X16_LUMA",
; 168  :       "INTER16X16_CHROMAU",
; 169  :       "INTER16X16_CHROMAV"
; 170  :     },
; 171  :     {
; 172  :       "INTRA32X32_LUMA",
; 173  :       "INTER32X32_LUMA",
; 174  :     },
; 175  :   };
; 176  :   static const char matrix_type_dc[2][6][22] =
; 177  :   {
; 178  :     {
; 179  :       "INTRA16X16_LUMA_DC",
; 180  :       "INTRA16X16_CHROMAU_DC",
; 181  :       "INTRA16X16_CHROMAV_DC",
; 182  :       "INTER16X16_LUMA_DC",
; 183  :       "INTER16X16_CHROMAU_DC",
; 184  :       "INTER16X16_CHROMAV_DC"
; 185  :     },
; 186  :     {
; 187  :       "INTRA32X32_LUMA_DC",
; 188  :       "INTER32X32_LUMA_DC",
; 189  :     },
; 190  :   };
; 191  : 
; 192  :   uint32_t size_id;
; 193  :   for (size_id = 0; size_id < SCALING_LIST_SIZE_NUM; size_id++) {

	mov	DWORD PTR _size_id$[ebp], 0
	jmp	SHORT $LN4@kvz_scalin
$LN2@kvz_scalin:
	mov	eax, DWORD PTR _size_id$[ebp]
	add	eax, 1
	mov	DWORD PTR _size_id$[ebp], eax
$LN4@kvz_scalin:
	cmp	DWORD PTR _size_id$[ebp], 4
	jae	$LN3@kvz_scalin

; 194  :     uint32_t list_id;
; 195  :     uint32_t size = MIN(MAX_MATRIX_COEF_NUM, (int32_t)kvz_g_scaling_list_size[size_id]);

	mov	eax, DWORD PTR _size_id$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN39@kvz_scalin
	mov	DWORD PTR tv73[ebp], 64			; 00000040H
	jmp	SHORT $LN40@kvz_scalin
$LN39@kvz_scalin:
	mov	edx, DWORD PTR _size_id$[ebp]
	movzx	eax, WORD PTR _kvz_g_scaling_list_size[edx*2]
	mov	DWORD PTR tv73[ebp], eax
$LN40@kvz_scalin:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _size$8[ebp], ecx

; 196  :     //const uint32_t * const scan = (size_id == 0) ? kvz_g_sig_last_scan[SCAN_DIAG][1] : g_sig_last_scan_32x32;
; 197  : 
; 198  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	mov	DWORD PTR _list_id$9[ebp], 0
	jmp	SHORT $LN7@kvz_scalin
$LN5@kvz_scalin:
	mov	eax, DWORD PTR _list_id$9[ebp]
	add	eax, 1
	mov	DWORD PTR _list_id$9[ebp], eax
$LN7@kvz_scalin:
	mov	eax, DWORD PTR _size_id$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_scaling_list_num[eax]
	cmp	DWORD PTR _list_id$9[ebp], ecx
	jae	$LN6@kvz_scalin

; 199  :       int found;
; 200  :       uint32_t i;
; 201  :       int32_t data;
; 202  :       //This IS valid (our pointer is dynamically allocated in kvz_scalinglist_init)
; 203  :       int32_t *coeff = (int32_t*) scaling_list->scaling_list_coeff[size_id][list_id];

	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+100]
	mov	eax, DWORD PTR _list_id$9[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _coeff$4[ebp], ecx

; 204  :       char line[LINE_BUFSIZE + 1] = { 0 }; // +1 for null-terminator

	push	1025					; 00000401H
	push	0
	lea	eax, DWORD PTR _line$3[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 205  : 
; 206  :       // Go back for each matrix.
; 207  :       fseek(fp, 0, SEEK_SET);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	DWORD PTR __imp__fseek
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_scalin:

; 208  : 
; 209  :       do {
; 210  :         if (!fgets(line, LINE_BUFSIZE, fp) ||

	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _line$3[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN23@kvz_scalin
	imul	eax, DWORD PTR _size_id$[ebp], 120
	imul	ecx, DWORD PTR _list_id$9[ebp], 20
	lea	edx, DWORD PTR ?matrix_type@?1??kvz_scalinglist_parse@@9@9[eax+ecx]
	push	edx
	lea	eax, DWORD PTR _line$3[ebp]
	push	eax
	call	_strstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@kvz_scalin
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN42@kvz_scalin
$LN41@kvz_scalin:
	mov	DWORD PTR tv135[ebp], 0
$LN42@kvz_scalin:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _found$7[ebp], ecx
	cmp	DWORD PTR _found$7[ebp], 0
	jne	SHORT $LN8@kvz_scalin
	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN8@kvz_scalin
$LN23@kvz_scalin:

; 211  :             ((found = !!strstr(line, matrix_type[size_id][list_id])) == 0 && feof(fp)))
; 212  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_scalin
$LN8@kvz_scalin:

; 213  :       } while (!found);

	cmp	DWORD PTR _found$7[ebp], 0
	je	$LN10@kvz_scalin

; 214  : 
; 215  :       for (i = 0; i < size;) {

	mov	DWORD PTR _i$6[ebp], 0
$LN13@kvz_scalin:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _size$8[ebp]
	jae	$LN12@kvz_scalin

; 216  :         char *p;
; 217  :         if (!fgets(line, LINE_BUFSIZE, fp))

	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _line$3[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN24@kvz_scalin

; 218  :           return 0;

	xor	eax, eax
	jmp	$LN1@kvz_scalin
$LN24@kvz_scalin:

; 219  :         p = line;

	lea	eax, DWORD PTR _line$3[ebp]
	mov	DWORD PTR _p$2[ebp], eax
$LN16@kvz_scalin:

; 220  : 
; 221  :         // Read coefficients per line.
; 222  :         // The comma (,) character is used as a separator.
; 223  :         // The coefficients are stored in up-right diagonal order.
; 224  :         do {
; 225  :           int ret = sscanf(p, "%d", &data);

	lea	eax, DWORD PTR _data$5[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	mov	ecx, DWORD PTR _p$2[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 226  :           if (ret != 1)

	cmp	DWORD PTR _ret$1[ebp], 1
	je	SHORT $LN25@kvz_scalin

; 227  :             break;

	jmp	$LN15@kvz_scalin
	jmp	SHORT $LN26@kvz_scalin
$LN25@kvz_scalin:

; 228  :           else if (data < 1 || data > 255)

	cmp	DWORD PTR _data$5[ebp], 1
	jl	SHORT $LN28@kvz_scalin
	cmp	DWORD PTR _data$5[ebp], 255		; 000000ffH
	jle	SHORT $LN26@kvz_scalin
$LN28@kvz_scalin:

; 229  :             return 0;

	xor	eax, eax
	jmp	$LN1@kvz_scalin
$LN26@kvz_scalin:

; 230  : 
; 231  :           coeff[i++] = data;

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _coeff$4[ebp]
	mov	edx, DWORD PTR _data$5[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax

; 232  :           if (i == size)

	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _size$8[ebp]
	jne	SHORT $LN17@kvz_scalin

; 233  :             break;

	jmp	SHORT $LN15@kvz_scalin
$LN17@kvz_scalin:

; 234  : 
; 235  :           // Seek to the next newline, null-terminator or comma.
; 236  :           while (*p != '\n' && *p != '\0' && *p != ',')

	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN18@kvz_scalin
	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN18@kvz_scalin
	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	je	SHORT $LN18@kvz_scalin

; 237  :             ++p;

	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, 1
	mov	DWORD PTR _p$2[ebp], eax
	jmp	SHORT $LN17@kvz_scalin
$LN18@kvz_scalin:

; 238  :           if (*p == ',')

	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 44					; 0000002cH
	jne	SHORT $LN14@kvz_scalin

; 239  :             ++p;

	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, 1
	mov	DWORD PTR _p$2[ebp], eax
$LN14@kvz_scalin:

; 240  :         } while (*p != '\n' && *p != '\0');

	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN15@kvz_scalin
	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN16@kvz_scalin
$LN15@kvz_scalin:

; 241  :       }

	jmp	$LN13@kvz_scalin
$LN12@kvz_scalin:

; 242  : 
; 243  :       // Set DC value.
; 244  :       if (size_id >= SCALING_LIST_16x16) {

	cmp	DWORD PTR _size_id$[ebp], 2
	jb	$LN32@kvz_scalin

; 245  :         fseek(fp, 0, SEEK_SET);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	DWORD PTR __imp__fseek
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@kvz_scalin:

; 246  : 
; 247  :         do {
; 248  :           if (!fgets(line, LINE_BUFSIZE, fp) ||

	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _line$3[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN35@kvz_scalin
	mov	eax, DWORD PTR _size_id$[ebp]
	sub	eax, 2
	imul	ecx, eax, 132
	imul	edx, DWORD PTR _list_id$9[ebp], 22
	lea	eax, DWORD PTR ?matrix_type_dc@?1??kvz_scalinglist_parse@@9@9[ecx+edx]
	push	eax
	lea	ecx, DWORD PTR _line$3[ebp]
	push	ecx
	call	_strstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN43@kvz_scalin
	mov	DWORD PTR tv190[ebp], 1
	jmp	SHORT $LN44@kvz_scalin
$LN43@kvz_scalin:
	mov	DWORD PTR tv190[ebp], 0
$LN44@kvz_scalin:
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR _found$7[ebp], edx
	cmp	DWORD PTR _found$7[ebp], 0
	jne	SHORT $LN19@kvz_scalin
	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	DWORD PTR __imp__feof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN19@kvz_scalin
$LN35@kvz_scalin:

; 249  :               ((found = !!strstr(line, matrix_type_dc[size_id - SCALING_LIST_16x16][list_id])) == 0 && feof(fp)))
; 250  :             return 0;

	xor	eax, eax
	jmp	$LN1@kvz_scalin
$LN19@kvz_scalin:

; 251  :         } while (!found);

	cmp	DWORD PTR _found$7[ebp], 0
	je	$LN21@kvz_scalin

; 252  :         if (1 != fscanf(fp, "%d", &data) || data < 1 || data > 255)

	lea	eax, DWORD PTR _data$5[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN37@kvz_scalin
	cmp	DWORD PTR _data$5[ebp], 1
	jl	SHORT $LN37@kvz_scalin
	cmp	DWORD PTR _data$5[ebp], 255		; 000000ffH
	jle	SHORT $LN36@kvz_scalin
$LN37@kvz_scalin:

; 253  :           return 0;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_scalin
$LN36@kvz_scalin:

; 254  : 
; 255  :         scaling_list->scaling_list_dc[size_id][list_id] = data;

	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _list_id$9[ebp]
	mov	ecx, DWORD PTR _data$5[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 256  :       } else

	jmp	SHORT $LN33@kvz_scalin
$LN32@kvz_scalin:

; 257  :         scaling_list->scaling_list_dc[size_id][list_id] = coeff[0];

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _size_id$[ebp], 24
	mov	eax, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [eax+edx+4]
	mov	eax, DWORD PTR _list_id$9[ebp]
	mov	esi, DWORD PTR _coeff$4[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax*4], ecx
$LN33@kvz_scalin:

; 258  :     }

	jmp	$LN5@kvz_scalin
$LN6@kvz_scalin:

; 259  :   }

	jmp	$LN2@kvz_scalin
$LN3@kvz_scalin:

; 260  : 
; 261  :   scaling_list->enable = 1;

	mov	eax, DWORD PTR _scaling_list$[ebp]
	mov	BYTE PTR [eax], 1

; 262  :   return 1;

	mov	eax, 1
$LN1@kvz_scalin:

; 263  :   #undef LINE_BUFSIZE
; 264  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@kvz_scalin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1728				; 000006c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN48@kvz_scalin:
	DD	2
	DD	$LN47@kvz_scalin
$LN47@kvz_scalin:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN45@kvz_scalin
	DD	-1120					; fffffba0H
	DD	1025					; 00000401H
	DD	$LN46@kvz_scalin
$LN46@kvz_scalin:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN45@kvz_scalin:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_kvz_scalinglist_parse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_destroy
_TEXT	SEGMENT
_qp$ = -32						; size = 4
_listId$ = -20						; size = 4
_sizeId$ = -8						; size = 4
_scaling_list$ = 8					; size = 4
_kvz_scalinglist_destroy PROC				; COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 126  :   uint32_t sizeId,listId,qp;
; 127  : 
; 128  :   for (sizeId = 0; sizeId < 4; sizeId++) {

	mov	DWORD PTR _sizeId$[ebp], 0
	jmp	SHORT $LN4@kvz_scalin
$LN2@kvz_scalin:
	mov	eax, DWORD PTR _sizeId$[ebp]
	add	eax, 1
	mov	DWORD PTR _sizeId$[ebp], eax
$LN4@kvz_scalin:
	cmp	DWORD PTR _sizeId$[ebp], 4
	jae	$LN1@kvz_scalin

; 129  :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	mov	DWORD PTR _listId$[ebp], 0
	jmp	SHORT $LN7@kvz_scalin
$LN5@kvz_scalin:
	mov	eax, DWORD PTR _listId$[ebp]
	add	eax, 1
	mov	DWORD PTR _listId$[ebp], eax
$LN7@kvz_scalin:
	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_scaling_list_num[eax]
	cmp	DWORD PTR _listId$[ebp], ecx
	jae	$LN6@kvz_scalin

; 130  :       for (qp = 0; qp < 6; qp++) {

	mov	DWORD PTR _qp$[ebp], 0
	jmp	SHORT $LN10@kvz_scalin
$LN8@kvz_scalin:
	mov	eax, DWORD PTR _qp$[ebp]
	add	eax, 1
	mov	DWORD PTR _qp$[ebp], eax
$LN10@kvz_scalin:
	cmp	DWORD PTR _qp$[ebp], 6
	jae	$LN9@kvz_scalin

; 131  :         if (!(sizeId == 3 && listId == 3)) {

	cmp	DWORD PTR _sizeId$[ebp], 3
	jne	SHORT $LN12@kvz_scalin
	cmp	DWORD PTR _listId$[ebp], 3
	je	$LN11@kvz_scalin
$LN12@kvz_scalin:

; 132  :           FREE_POINTER(scaling_list->quant_coeff[sizeId][listId][qp]);

	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+196]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	esi, esp
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+196]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0

; 133  :           FREE_POINTER(scaling_list->de_quant_coeff[sizeId][listId][qp]);

	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+772]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	esi, esp
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+772]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0

; 134  :           FREE_POINTER(scaling_list->error_scale[sizeId][listId][qp]);

	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1348]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	esi, esp
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	eax, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1348]
	imul	eax, DWORD PTR _listId$[ebp], 24
	add	edx, eax
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
$LN11@kvz_scalin:

; 135  :         }
; 136  :       }

	jmp	$LN8@kvz_scalin
$LN9@kvz_scalin:

; 137  :       FREE_POINTER(scaling_list->scaling_list_coeff[sizeId][listId]);

	imul	eax, DWORD PTR _sizeId$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+100]
	mov	esi, esp
	mov	eax, DWORD PTR _listId$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	eax, DWORD PTR _sizeId$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+100]
	mov	eax, DWORD PTR _listId$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 138  :     }

	jmp	$LN5@kvz_scalin
$LN6@kvz_scalin:

; 139  :   }

	jmp	$LN2@kvz_scalin
$LN1@kvz_scalin:

; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_scalinglist_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_init
_TEXT	SEGMENT
tv171 = -232						; size = 4
_qp$ = -32						; size = 4
_listId$ = -20						; size = 4
_sizeId$ = -8						; size = 4
_scaling_list$ = 8					; size = 4
_kvz_scalinglist_init PROC				; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 88   :   uint32_t sizeId,listId,qp;
; 89   : 
; 90   :   for (sizeId = 0; sizeId < 4; sizeId++) {

	mov	DWORD PTR _sizeId$[ebp], 0
	jmp	SHORT $LN4@kvz_scalin
$LN2@kvz_scalin:
	mov	eax, DWORD PTR _sizeId$[ebp]
	add	eax, 1
	mov	DWORD PTR _sizeId$[ebp], eax
$LN4@kvz_scalin:
	cmp	DWORD PTR _sizeId$[ebp], 4
	jae	$LN3@kvz_scalin

; 91   :     for (listId = 0; listId < kvz_g_scaling_list_num[sizeId]; listId++) {

	mov	DWORD PTR _listId$[ebp], 0
	jmp	SHORT $LN7@kvz_scalin
$LN5@kvz_scalin:
	mov	eax, DWORD PTR _listId$[ebp]
	add	eax, 1
	mov	DWORD PTR _listId$[ebp], eax
$LN7@kvz_scalin:
	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_scaling_list_num[eax]
	cmp	DWORD PTR _listId$[ebp], ecx
	jae	$LN6@kvz_scalin

; 92   :       for (qp = 0; qp < 6; qp++) {

	mov	DWORD PTR _qp$[ebp], 0
	jmp	SHORT $LN10@kvz_scalin
$LN8@kvz_scalin:
	mov	eax, DWORD PTR _qp$[ebp]
	add	eax, 1
	mov	DWORD PTR _qp$[ebp], eax
$LN10@kvz_scalin:
	cmp	DWORD PTR _qp$[ebp], 6
	jae	$LN9@kvz_scalin

; 93   :         if (!(sizeId == 3 && listId == 3)) {

	cmp	DWORD PTR _sizeId$[ebp], 3
	jne	SHORT $LN21@kvz_scalin
	cmp	DWORD PTR _listId$[ebp], 3
	je	$LN20@kvz_scalin
$LN21@kvz_scalin:

; 94   :           scaling_list->quant_coeff[sizeId][listId][qp]    = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	edx, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+edx+196]
	imul	ecx, DWORD PTR _listId$[ebp], 24
	add	edx, ecx
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 95   :           scaling_list->de_quant_coeff[sizeId][listId][qp] = (int32_t*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(int32_t));

	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	edx, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+edx+772]
	imul	ecx, DWORD PTR _listId$[ebp], 24
	add	edx, ecx
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 96   :           scaling_list->error_scale[sizeId][listId][qp]    = (double*)calloc(kvz_g_scaling_list_size[sizeId], sizeof(double));

	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	edx, DWORD PTR _sizeId$[ebp], 144
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+edx+1348]
	imul	ecx, DWORD PTR _listId$[ebp], 24
	add	edx, ecx
	mov	ecx, DWORD PTR _qp$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN20@kvz_scalin:

; 97   :         }
; 98   :       }

	jmp	$LN8@kvz_scalin
$LN9@kvz_scalin:

; 99   :       scaling_list->scaling_list_coeff[sizeId][listId] = (int32_t*)calloc(MIN(MAX_MATRIX_COEF_NUM, kvz_g_scaling_list_size[sizeId]), sizeof(int32_t));

	mov	eax, DWORD PTR _sizeId$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN23@kvz_scalin
	mov	DWORD PTR tv171[ebp], 64		; 00000040H
	jmp	SHORT $LN24@kvz_scalin
$LN23@kvz_scalin:
	mov	edx, DWORD PTR _sizeId$[ebp]
	movzx	eax, WORD PTR _kvz_g_scaling_list_size[edx*2]
	mov	DWORD PTR tv171[ebp], eax
$LN24@kvz_scalin:
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR tv171[ebp]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	edx, DWORD PTR _sizeId$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+edx+100]
	mov	ecx, DWORD PTR _listId$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 100  :     }

	jmp	$LN5@kvz_scalin
$LN6@kvz_scalin:

; 101  :   }

	jmp	$LN2@kvz_scalin
$LN3@kvz_scalin:

; 102  :   // alias, assign pointer to an existing array
; 103  :   for (qp = 0; qp < 6; qp++) {

	mov	DWORD PTR _qp$[ebp], 0
	jmp	SHORT $LN13@kvz_scalin
$LN11@kvz_scalin:
	mov	eax, DWORD PTR _qp$[ebp]
	add	eax, 1
	mov	DWORD PTR _qp$[ebp], eax
$LN13@kvz_scalin:
	cmp	DWORD PTR _qp$[ebp], 6
	jae	$LN12@kvz_scalin

; 104  :     scaling_list->quant_coeff[3][3][qp]    = scaling_list->quant_coeff[3][1][qp];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	eax, DWORD PTR [edx+ecx+196]
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 144				; 00000090H
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+196]
	mov	edx, 24					; 00000018H
	imul	edx, edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR _qp$[ebp]
	mov	esi, DWORD PTR _qp$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax

; 105  :     scaling_list->de_quant_coeff[3][3][qp] = scaling_list->de_quant_coeff[3][1][qp];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	eax, DWORD PTR [edx+ecx+772]
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 144				; 00000090H
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+772]
	mov	edx, 24					; 00000018H
	imul	edx, edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR _qp$[ebp]
	mov	esi, DWORD PTR _qp$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax

; 106  :     scaling_list->error_scale[3][3][qp]    = scaling_list->error_scale[3][1][qp];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1348]
	mov	ecx, 24					; 00000018H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 144				; 00000090H
	imul	ecx, edx, 3
	mov	edx, DWORD PTR _scaling_list$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+1348]
	mov	edx, 24					; 00000018H
	imul	edx, edx, 3
	add	ecx, edx
	mov	edx, DWORD PTR _qp$[ebp]
	mov	esi, DWORD PTR _qp$[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax

; 107  :   }

	jmp	$LN11@kvz_scalin
$LN12@kvz_scalin:

; 108  :   
; 109  :   //Initialize dc (otherwise we switch on undef in kvz_scalinglist_set)
; 110  :   for (sizeId = 0; sizeId < SCALING_LIST_SIZE_NUM; ++sizeId) {

	mov	DWORD PTR _sizeId$[ebp], 0
	jmp	SHORT $LN16@kvz_scalin
$LN14@kvz_scalin:
	mov	eax, DWORD PTR _sizeId$[ebp]
	add	eax, 1
	mov	DWORD PTR _sizeId$[ebp], eax
$LN16@kvz_scalin:
	cmp	DWORD PTR _sizeId$[ebp], 4
	jae	SHORT $LN15@kvz_scalin

; 111  :     for (listId = 0; listId < SCALING_LIST_NUM; ++listId) {

	mov	DWORD PTR _listId$[ebp], 0
	jmp	SHORT $LN19@kvz_scalin
$LN17@kvz_scalin:
	mov	eax, DWORD PTR _listId$[ebp]
	add	eax, 1
	mov	DWORD PTR _listId$[ebp], eax
$LN19@kvz_scalin:
	cmp	DWORD PTR _listId$[ebp], 6
	jae	SHORT $LN18@kvz_scalin

; 112  :       scaling_list->scaling_list_dc[sizeId][listId] = 0;

	imul	eax, DWORD PTR _sizeId$[ebp], 24
	mov	ecx, DWORD PTR _scaling_list$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, DWORD PTR _listId$[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 113  :     }

	jmp	SHORT $LN17@kvz_scalin
$LN18@kvz_scalin:

; 114  :   }

	jmp	SHORT $LN14@kvz_scalin
$LN15@kvz_scalin:

; 115  :   
; 116  :   scaling_list->enable = 0;

	mov	eax, DWORD PTR _scaling_list$[ebp]
	mov	BYTE PTR [eax], 0

; 117  :   scaling_list->use_default_list = 0;

	mov	eax, DWORD PTR _scaling_list$[ebp]
	mov	BYTE PTR [eax+1], 0

; 118  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_scalinglist_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\scalinglist.c
;	COMDAT _kvz_scalinglist_get_default
_TEXT	SEGMENT
tv64 = -208						; size = 4
_list_ptr$ = -8						; size = 4
_size_id$ = 8						; size = 4
_list_id$ = 12						; size = 4
_kvz_scalinglist_get_default PROC			; COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A1428DF1_scalinglist@c
	call	@__CheckForDebuggerJustMyCode@4

; 268  :   const int32_t *list_ptr = g_quant_intra_default_8x8; // Default to "8x8" intra

	mov	DWORD PTR _list_ptr$[ebp], OFFSET _g_quant_intra_default_8x8

; 269  :   switch(size_id) {

	mov	eax, DWORD PTR _size_id$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN2@kvz_scalin
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@kvz_scalin[ecx*4]
$LN4@kvz_scalin:

; 270  :     case SCALING_LIST_4x4:
; 271  :       list_ptr = g_quant_default_4x4;

	mov	DWORD PTR _list_ptr$[ebp], OFFSET _g_quant_default_4x4

; 272  :       break;

	jmp	SHORT $LN2@kvz_scalin
$LN5@kvz_scalin:

; 273  :     case SCALING_LIST_8x8:
; 274  :     case SCALING_LIST_16x16:
; 275  :       if (list_id > 2) list_ptr = g_quant_inter_default_8x8;

	cmp	DWORD PTR _list_id$[ebp], 2
	jbe	SHORT $LN6@kvz_scalin
	mov	DWORD PTR _list_ptr$[ebp], OFFSET _g_quant_inter_default_8x8
$LN6@kvz_scalin:

; 276  :       break;

	jmp	SHORT $LN2@kvz_scalin
$LN7@kvz_scalin:

; 277  :     case SCALING_LIST_32x32:
; 278  :       if (list_id > 0) list_ptr = g_quant_inter_default_8x8;

	cmp	DWORD PTR _list_id$[ebp], 0
	jbe	SHORT $LN2@kvz_scalin
	mov	DWORD PTR _list_ptr$[ebp], OFFSET _g_quant_inter_default_8x8
$LN2@kvz_scalin:

; 279  :       break;
; 280  :   }
; 281  :   return list_ptr;

	mov	eax, DWORD PTR _list_ptr$[ebp]

; 282  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@kvz_scalin:
	DD	$LN4@kvz_scalin
	DD	$LN5@kvz_scalin
	DD	$LN5@kvz_scalin
	DD	$LN7@kvz_scalin
_kvz_scalinglist_get_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2270 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 2271 :         int _Result;
; 2272 :         va_list _ArgList;
; 2273 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 2274 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 2275 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 2276 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2277 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2175 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 2176 :         return __stdio_common_vsscanf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vsscanf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2177 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2178 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2179 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fscanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fscanf	PROC						; COMDAT

; 1204 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1205 :         int _Result;
; 1206 :         va_list _ArgList;
; 1207 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1208 :         _Result = _vfscanf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1209 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1210 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1211 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1063 :         return __stdio_common_vfscanf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfscanf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
END
