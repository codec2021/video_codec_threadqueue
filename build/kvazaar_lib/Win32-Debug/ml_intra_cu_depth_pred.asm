; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__46C1F544_ml_intra_cu_depth_pred@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_kvz_init_ml_intra_depth_const
PUBLIC	_kvz_end_ml_intra_depth_const
PUBLIC	_kvz_lcu_luma_depth_pred
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9 ; `kvz_init_ml_intra_depth_const'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	?__LINE__Var@?0??vect_average_blck_int8@@9@9	; `vect_average_blck_int8'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@ ; `string'
PUBLIC	?__LINE__Var@?0??vect_variance_blck_int8@@9@9	; `vect_variance_blck_int8'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??matrix_mask@@9@9		; `matrix_mask'::`1'::__LINE__Var
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@40106d77318fc505
PUBLIC	__real@4013000000000000
PUBLIC	__real@40210dfa43fe5c92
PUBLIC	__real@402233f7ced91687
PUBLIC	__real@4022d80346dc5d64
PUBLIC	__real@4024c4dd2f1a9fbe
PUBLIC	__real@40281edfa43fe5c9
PUBLIC	__real@402856e2eb1c432d
PUBLIC	__real@402a941205bc01a3
PUBLIC	__real@4030edbf487fcb92
PUBLIC	__real@4033f7c1bda5119d
PUBLIC	__real@4034df0068db8bac
PUBLIC	__real@4034e2a9930be0df
PUBLIC	__real@403751bda5119ce0
PUBLIC	__real@403a99c0ebedfa44
PUBLIC	__real@403ebc1bda5119ce
PUBLIC	__real@404326d916872b02
PUBLIC	__real@40437bcd35a85879
PUBLIC	__real@404390e560418937
PUBLIC	__real@4046e8b780346dc6
PUBLIC	__real@40471e90ff972474
PUBLIC	__real@40476f765fd8adac
PUBLIC	__real@404eb5ed288ce704
PUBLIC	__real@404f61ce075f6fd2
PUBLIC	__real@4050ab318fc50481
PUBLIC	__real@40518e027525460b
PUBLIC	__real@40521ab851eb851f
PUBLIC	__real@40523ce703afb7e9
PUBLIC	__real@40527f8bac710cb3
PUBLIC	__real@405409844d013a93
PUBLIC	__real@4054edbf487fcb92
PUBLIC	__real@405659bf487fcb92
PUBLIC	__real@4058f7c6a7ef9db2
PUBLIC	__real@40598f0068db8bac
PUBLIC	__real@405d1fc01a36e2eb
PUBLIC	__real@405ddd82a9930be1
PUBLIC	__real@40613ce8a71de69b
PUBLIC	__real@40618a0346dc5d64
PUBLIC	__real@4061c989374bc6a8
PUBLIC	__real@406258bfb15b573f
PUBLIC	__real@4063731de69ad42c
PUBLIC	__real@40638cd844d013a9
PUBLIC	__real@40686f80346dc5d6
PUBLIC	__real@406969e00d1b7176
PUBLIC	__real@4069c00000000000
PUBLIC	__real@406bb180346dc5d6
PUBLIC	__real@406c72dfa43fe5c9
PUBLIC	__real@406dc7318fc50481
PUBLIC	__real@406e08dfa43fe5c9
PUBLIC	__real@406e882de00d1b71
PUBLIC	__real@406fed8e219652bd
PUBLIC	__real@40703b1f8a0902de
PUBLIC	__real@4070488ef34d6a16
PUBLIC	__real@4070600000000000
PUBLIC	__real@4071200000000000
PUBLIC	__real@4071600000000000
PUBLIC	__real@40719f36e2eb1c43
PUBLIC	__real@4071a4e703afb7e9
PUBLIC	__real@4072200000000000
PUBLIC	__real@4072500000000000
PUBLIC	__real@4072d00000000000
PUBLIC	__real@4073800000000000
PUBLIC	__real@4074900000000000
PUBLIC	__real@4074a37c1bda511a
PUBLIC	__real@4075a00000000000
PUBLIC	__real@4075fd05532617c2
PUBLIC	__real@4076400000000000
PUBLIC	__real@4076600000000000
PUBLIC	__real@4077600000000000
PUBLIC	__real@4077737ef9db22d1
PUBLIC	__real@4077900000000000
PUBLIC	__real@4077b00000000000
PUBLIC	__real@4077c97bb2fec56d
PUBLIC	__real@4077f00000000000
PUBLIC	__real@4078800000000000
PUBLIC	__real@4078a7be0ded288d
PUBLIC	__real@4078b00000000000
PUBLIC	__real@4078f00000000000
PUBLIC	__real@4079100000000000
PUBLIC	__real@407944f0068db8bb
PUBLIC	__real@4079800000000000
PUBLIC	__real@4079b00000000000
PUBLIC	__real@407a500000000000
PUBLIC	__real@407ad00000000000
PUBLIC	__real@407b200000000000
PUBLIC	__real@407b300000000000
PUBLIC	__real@407b500000000000
PUBLIC	__real@407c800000000000
PUBLIC	__real@407ca00000000000
PUBLIC	__real@407d700000000000
PUBLIC	__real@407da00000000000
PUBLIC	__real@407db00000000000
PUBLIC	__real@407e600000000000
PUBLIC	__real@407e900000000000
PUBLIC	__real@407ecd0ded288ce7
PUBLIC	__real@407ed00000000000
PUBLIC	__real@407ed95bc01a36e3
PUBLIC	__real@407ee00000000000
PUBLIC	__real@407ef00000000000
PUBLIC	__real@407f200000000000
PUBLIC	__real@407f300000000000
PUBLIC	__real@407f700000000000
PUBLIC	__real@4080680000000000
PUBLIC	__real@4080780000000000
PUBLIC	__real@4080d80000000000
PUBLIC	__real@4081300000000000
PUBLIC	__real@4081680000000000
PUBLIC	__real@4081700000000000
PUBLIC	__real@4081980000000000
PUBLIC	__real@4081a163f141205c
PUBLIC	__real@4081b00000000000
PUBLIC	__real@4081cd3e0ded288d
PUBLIC	__real@4081d99a6b50b0f2
PUBLIC	__real@4081dc436113404f
PUBLIC	__real@4081e00000000000
PUBLIC	__real@4082500000000000
PUBLIC	__real@4082600000000000
PUBLIC	__real@4082900000000000
PUBLIC	__real@4082f00000000000
PUBLIC	__real@4083580000000000
PUBLIC	__real@4083b80000000000
PUBLIC	__real@4083ce87c84b5dcc
PUBLIC	__real@4083d00000000000
PUBLIC	__real@4083f80000000000
PUBLIC	__real@408436902de00d1b
PUBLIC	__real@4084c61652bd3c36
PUBLIC	__real@4084c7985f06f694
PUBLIC	__real@4085180000000000
PUBLIC	__real@4085380000000000
PUBLIC	__real@4085c19758e21965
PUBLIC	__real@4086480000000000
PUBLIC	__real@4086500000000000
PUBLIC	__real@4086600000000000
PUBLIC	__real@4086700000000000
PUBLIC	__real@4086880000000000
PUBLIC	__real@4087080000000000
PUBLIC	__real@4087f80000000000
PUBLIC	__real@4088000000000000
PUBLIC	__real@4088d80000000000
PUBLIC	__real@4089880000000000
PUBLIC	__real@408994236e2eb1c4
PUBLIC	__real@4089b00000000000
PUBLIC	__real@408a500000000000
PUBLIC	__real@408ace70068db8bb
PUBLIC	__real@408ae80000000000
PUBLIC	__real@408be00000000000
PUBLIC	__real@408cf72d77318fc5
PUBLIC	__real@408ed9ddcc63f141
PUBLIC	__real@408f400000000000
PUBLIC	__real@408f480000000000
PUBLIC	__real@408f580000000000
PUBLIC	__real@408f680000000000
PUBLIC	__real@408fa80000000000
PUBLIC	__real@408fe00000000000
PUBLIC	__real@4090040000000000
PUBLIC	__real@4090300000000000
PUBLIC	__real@4090480000000000
PUBLIC	__real@4090540000000000
PUBLIC	__real@4090640000000000
PUBLIC	__real@40908c0000000000
PUBLIC	__real@4090d00000000000
PUBLIC	__real@4090d84154c985f0
PUBLIC	__real@4090e00000000000
PUBLIC	__real@4091000000000000
PUBLIC	__real@4091140000000000
PUBLIC	__real@4091480000000000
PUBLIC	__real@4091680000000000
PUBLIC	__real@4091840000000000
PUBLIC	__real@4091c80000000000
PUBLIC	__real@4091cbca0902de01
PUBLIC	__real@4091f80000000000
PUBLIC	__real@4092100000000000
PUBLIC	__real@4092380000000000
PUBLIC	__real@4092540000000000
PUBLIC	__real@4092600000000000
PUBLIC	__real@40927c0000000000
PUBLIC	__real@409285e425aee632
PUBLIC	__real@4092e00000000000
PUBLIC	__real@4092e80000000000
PUBLIC	__real@4092fc0000000000
PUBLIC	__real@4093800000000000
PUBLIC	__real@40938c0000000000
PUBLIC	__real@40939c0000000000
PUBLIC	__real@4093f00000000000
PUBLIC	__real@4093f80000000000
PUBLIC	__real@4094280000000000
PUBLIC	__real@4094300000000000
PUBLIC	__real@4094480000000000
PUBLIC	__real@4094a40000000000
PUBLIC	__real@4094ac0000000000
PUBLIC	__real@4094b80000000000
PUBLIC	__real@4094d00000000000
PUBLIC	__real@4095680000000000
PUBLIC	__real@4095740000000000
PUBLIC	__real@4095d40000000000
PUBLIC	__real@4095f40000000000
PUBLIC	__real@4096800000000000
PUBLIC	__real@40980c0000000000
PUBLIC	__real@4098100000000000
PUBLIC	__real@4098480000000000
PUBLIC	__real@4098600000000000
PUBLIC	__real@4098cc0000000000
PUBLIC	__real@4099240000000000
PUBLIC	__real@40994c0000000000
PUBLIC	__real@4099600000000000
PUBLIC	__real@4099b00000000000
PUBLIC	__real@409a300000000000
PUBLIC	__real@409a580000000000
PUBLIC	__real@409a8c0000000000
PUBLIC	__real@409aac0000000000
PUBLIC	__real@409b300000000000
PUBLIC	__real@409b700000000000
PUBLIC	__real@409bc40000000000
PUBLIC	__real@409be80000000000
PUBLIC	__real@409bfc0000000000
PUBLIC	__real@409c100000000000
PUBLIC	__real@409c340000000000
PUBLIC	__real@409c940000000000
PUBLIC	__real@409d440000000000
PUBLIC	__real@409d7c0000000000
PUBLIC	__real@409db00000000000
PUBLIC	__real@409db80000000000
PUBLIC	__real@409e000000000000
PUBLIC	__real@409ea40000000000
PUBLIC	__real@409ef00000000000
PUBLIC	__real@409f172bd3c36113
PUBLIC	__real@409f580000000000
PUBLIC	__real@409fbc0000000000
PUBLIC	__real@40a17e0000000000
PUBLIC	__real@40a1bc0000000000
PUBLIC	__real@40a2260000000000
PUBLIC	__real@40a2c20000000000
PUBLIC	__real@40a2f20000000000
PUBLIC	__real@40a37c0000000000
PUBLIC	__real@40a44ae7e28240b8
PUBLIC	__real@40a4a00000000000
PUBLIC	__real@40a4fe0000000000
PUBLIC	__real@40a5700000000000
PUBLIC	__real@40a5b20000000000
PUBLIC	__real@40a6160000000000
PUBLIC	__real@40a6e20000000000
PUBLIC	__real@40a6fe0000000000
PUBLIC	__real@40a71e0000000000
PUBLIC	__real@40a7200000000000
PUBLIC	__real@40a7ba0000000000
PUBLIC	__real@40a7e80000000000
PUBLIC	__real@40a8b40000000000
PUBLIC	__real@40a9c8ce8a71de6a
PUBLIC	__real@40aab00000000000
PUBLIC	__real@40ab220000000000
PUBLIC	__real@40ac260000000000
PUBLIC	__real@40ac380000000000
PUBLIC	__real@40ac3a0000000000
PUBLIC	__real@40ad720000000000
PUBLIC	__real@40adfa0000000000
PUBLIC	__real@40aedc0000000000
PUBLIC	__real@40af3e0000000000
PUBLIC	__real@40b1e10000000000
PUBLIC	__real@40b1e40000000000
PUBLIC	__real@40b2390000000000
PUBLIC	__real@40b4440000000000
PUBLIC	__real@40b49f0000000000
PUBLIC	__real@40b4a60000000000
PUBLIC	__real@40b5210000000000
PUBLIC	__real@40b68c0000000000
PUBLIC	__real@40b6d17a30553261
PUBLIC	__real@40b7b30000000000
PUBLIC	__real@40b80a0000000000
PUBLIC	__real@40b8ed8353f7ced9
PUBLIC	__real@40baf50000000000
PUBLIC	__real@40bd2e0000000000
PUBLIC	__real@40bda107381d7dbf
PUBLIC	__real@40c0fe8000000000
PUBLIC	__real@40c1538000000000
PUBLIC	__real@40c24d8000000000
PUBLIC	__real@40c2548000000000
PUBLIC	__real@40c3d04d0e560419
PUBLIC	__real@40c4858000000000
PUBLIC	__real@40c71c54ed916873
PUBLIC	__real@40c8e9648e8a71de
PUBLIC	__real@40c9860000000000
PUBLIC	__real@40d0f0d96a161e4f
PUBLIC	__real@40d2ac8000000000
PUBLIC	__real@40d2f90000000000
PUBLIC	__real@40d4160000000000
PUBLIC	__real@40d46f8000000000
PUBLIC	__real@40d49c8000000000
PUBLIC	__real@40d4db4000000000
PUBLIC	__real@40d62c4000000000
PUBLIC	__real@40d6ac0000000000
PUBLIC	__real@40d890c000000000
PUBLIC	__real@40d8a34000000000
PUBLIC	__real@40daa64d8c7e2824
PUBLIC	__real@40dac18000000000
PUBLIC	__real@40dc55c000000000
PUBLIC	__real@40dc914000000000
PUBLIC	__real@40dd1b8000000000
PUBLIC	__real@40ddf58000000000
PUBLIC	__real@40df0ed4bfb15b57
PUBLIC	__real@40dfaf4000000000
PUBLIC	__real@40e231a94467381d
PUBLIC	__real@40e23a89a858793e
PUBLIC	__real@40edb650aa64c2f8
PUBLIC	__real@40f04218e28240b8
PUBLIC	__real@40f801dd3f141206
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@40f801dd3f141206
CONST	SEGMENT
__real@40f801dd3f141206 DQ 040f801dd3f141206r	; 98333.8
CONST	ENDS
;	COMDAT __real@40f04218e28240b8
CONST	SEGMENT
__real@40f04218e28240b8 DQ 040f04218e28240b8r	; 66593.6
CONST	ENDS
;	COMDAT __real@40edb650aa64c2f8
CONST	SEGMENT
__real@40edb650aa64c2f8 DQ 040edb650aa64c2f8r	; 60850.5
CONST	ENDS
;	COMDAT __real@40e23a89a858793e
CONST	SEGMENT
__real@40e23a89a858793e DQ 040e23a89a858793er	; 37332.3
CONST	ENDS
;	COMDAT __real@40e231a94467381d
CONST	SEGMENT
__real@40e231a94467381d DQ 040e231a94467381dr	; 37261.3
CONST	ENDS
;	COMDAT __real@40dfaf4000000000
CONST	SEGMENT
__real@40dfaf4000000000 DQ 040dfaf4000000000r	; 32445
CONST	ENDS
;	COMDAT __real@40df0ed4bfb15b57
CONST	SEGMENT
__real@40df0ed4bfb15b57 DQ 040df0ed4bfb15b57r	; 31803.3
CONST	ENDS
;	COMDAT __real@40ddf58000000000
CONST	SEGMENT
__real@40ddf58000000000 DQ 040ddf58000000000r	; 30678
CONST	ENDS
;	COMDAT __real@40dd1b8000000000
CONST	SEGMENT
__real@40dd1b8000000000 DQ 040dd1b8000000000r	; 29806
CONST	ENDS
;	COMDAT __real@40dc914000000000
CONST	SEGMENT
__real@40dc914000000000 DQ 040dc914000000000r	; 29253
CONST	ENDS
;	COMDAT __real@40dc55c000000000
CONST	SEGMENT
__real@40dc55c000000000 DQ 040dc55c000000000r	; 29015
CONST	ENDS
;	COMDAT __real@40dac18000000000
CONST	SEGMENT
__real@40dac18000000000 DQ 040dac18000000000r	; 27398
CONST	ENDS
;	COMDAT __real@40daa64d8c7e2824
CONST	SEGMENT
__real@40daa64d8c7e2824 DQ 040daa64d8c7e2824r	; 27289.2
CONST	ENDS
;	COMDAT __real@40d8a34000000000
CONST	SEGMENT
__real@40d8a34000000000 DQ 040d8a34000000000r	; 25229
CONST	ENDS
;	COMDAT __real@40d890c000000000
CONST	SEGMENT
__real@40d890c000000000 DQ 040d890c000000000r	; 25155
CONST	ENDS
;	COMDAT __real@40d6ac0000000000
CONST	SEGMENT
__real@40d6ac0000000000 DQ 040d6ac0000000000r	; 23216
CONST	ENDS
;	COMDAT __real@40d62c4000000000
CONST	SEGMENT
__real@40d62c4000000000 DQ 040d62c4000000000r	; 22705
CONST	ENDS
;	COMDAT __real@40d4db4000000000
CONST	SEGMENT
__real@40d4db4000000000 DQ 040d4db4000000000r	; 21357
CONST	ENDS
;	COMDAT __real@40d49c8000000000
CONST	SEGMENT
__real@40d49c8000000000 DQ 040d49c8000000000r	; 21106
CONST	ENDS
;	COMDAT __real@40d46f8000000000
CONST	SEGMENT
__real@40d46f8000000000 DQ 040d46f8000000000r	; 20926
CONST	ENDS
;	COMDAT __real@40d4160000000000
CONST	SEGMENT
__real@40d4160000000000 DQ 040d4160000000000r	; 20568
CONST	ENDS
;	COMDAT __real@40d2f90000000000
CONST	SEGMENT
__real@40d2f90000000000 DQ 040d2f90000000000r	; 19428
CONST	ENDS
;	COMDAT __real@40d2ac8000000000
CONST	SEGMENT
__real@40d2ac8000000000 DQ 040d2ac8000000000r	; 19122
CONST	ENDS
;	COMDAT __real@40d0f0d96a161e4f
CONST	SEGMENT
__real@40d0f0d96a161e4f DQ 040d0f0d96a161e4fr	; 17347.4
CONST	ENDS
;	COMDAT __real@40c9860000000000
CONST	SEGMENT
__real@40c9860000000000 DQ 040c9860000000000r	; 13068
CONST	ENDS
;	COMDAT __real@40c8e9648e8a71de
CONST	SEGMENT
__real@40c8e9648e8a71de DQ 040c8e9648e8a71der	; 12754.8
CONST	ENDS
;	COMDAT __real@40c71c54ed916873
CONST	SEGMENT
__real@40c71c54ed916873 DQ 040c71c54ed916873r	; 11832.7
CONST	ENDS
;	COMDAT __real@40c4858000000000
CONST	SEGMENT
__real@40c4858000000000 DQ 040c4858000000000r	; 10507
CONST	ENDS
;	COMDAT __real@40c3d04d0e560419
CONST	SEGMENT
__real@40c3d04d0e560419 DQ 040c3d04d0e560419r	; 10144.6
CONST	ENDS
;	COMDAT __real@40c2548000000000
CONST	SEGMENT
__real@40c2548000000000 DQ 040c2548000000000r	; 9385
CONST	ENDS
;	COMDAT __real@40c24d8000000000
CONST	SEGMENT
__real@40c24d8000000000 DQ 040c24d8000000000r	; 9371
CONST	ENDS
;	COMDAT __real@40c1538000000000
CONST	SEGMENT
__real@40c1538000000000 DQ 040c1538000000000r	; 8871
CONST	ENDS
;	COMDAT __real@40c0fe8000000000
CONST	SEGMENT
__real@40c0fe8000000000 DQ 040c0fe8000000000r	; 8701
CONST	ENDS
;	COMDAT __real@40bda107381d7dbf
CONST	SEGMENT
__real@40bda107381d7dbf DQ 040bda107381d7dbfr	; 7585.03
CONST	ENDS
;	COMDAT __real@40bd2e0000000000
CONST	SEGMENT
__real@40bd2e0000000000 DQ 040bd2e0000000000r	; 7470
CONST	ENDS
;	COMDAT __real@40baf50000000000
CONST	SEGMENT
__real@40baf50000000000 DQ 040baf50000000000r	; 6901
CONST	ENDS
;	COMDAT __real@40b8ed8353f7ced9
CONST	SEGMENT
__real@40b8ed8353f7ced9 DQ 040b8ed8353f7ced9r	; 6381.51
CONST	ENDS
;	COMDAT __real@40b80a0000000000
CONST	SEGMENT
__real@40b80a0000000000 DQ 040b80a0000000000r	; 6154
CONST	ENDS
;	COMDAT __real@40b7b30000000000
CONST	SEGMENT
__real@40b7b30000000000 DQ 040b7b30000000000r	; 6067
CONST	ENDS
;	COMDAT __real@40b6d17a30553261
CONST	SEGMENT
__real@40b6d17a30553261 DQ 040b6d17a30553261r	; 5841.48
CONST	ENDS
;	COMDAT __real@40b68c0000000000
CONST	SEGMENT
__real@40b68c0000000000 DQ 040b68c0000000000r	; 5772
CONST	ENDS
;	COMDAT __real@40b5210000000000
CONST	SEGMENT
__real@40b5210000000000 DQ 040b5210000000000r	; 5409
CONST	ENDS
;	COMDAT __real@40b4a60000000000
CONST	SEGMENT
__real@40b4a60000000000 DQ 040b4a60000000000r	; 5286
CONST	ENDS
;	COMDAT __real@40b49f0000000000
CONST	SEGMENT
__real@40b49f0000000000 DQ 040b49f0000000000r	; 5279
CONST	ENDS
;	COMDAT __real@40b4440000000000
CONST	SEGMENT
__real@40b4440000000000 DQ 040b4440000000000r	; 5188
CONST	ENDS
;	COMDAT __real@40b2390000000000
CONST	SEGMENT
__real@40b2390000000000 DQ 040b2390000000000r	; 4665
CONST	ENDS
;	COMDAT __real@40b1e40000000000
CONST	SEGMENT
__real@40b1e40000000000 DQ 040b1e40000000000r	; 4580
CONST	ENDS
;	COMDAT __real@40b1e10000000000
CONST	SEGMENT
__real@40b1e10000000000 DQ 040b1e10000000000r	; 4577
CONST	ENDS
;	COMDAT __real@40af3e0000000000
CONST	SEGMENT
__real@40af3e0000000000 DQ 040af3e0000000000r	; 3999
CONST	ENDS
;	COMDAT __real@40aedc0000000000
CONST	SEGMENT
__real@40aedc0000000000 DQ 040aedc0000000000r	; 3950
CONST	ENDS
;	COMDAT __real@40adfa0000000000
CONST	SEGMENT
__real@40adfa0000000000 DQ 040adfa0000000000r	; 3837
CONST	ENDS
;	COMDAT __real@40ad720000000000
CONST	SEGMENT
__real@40ad720000000000 DQ 040ad720000000000r	; 3769
CONST	ENDS
;	COMDAT __real@40ac3a0000000000
CONST	SEGMENT
__real@40ac3a0000000000 DQ 040ac3a0000000000r	; 3613
CONST	ENDS
;	COMDAT __real@40ac380000000000
CONST	SEGMENT
__real@40ac380000000000 DQ 040ac380000000000r	; 3612
CONST	ENDS
;	COMDAT __real@40ac260000000000
CONST	SEGMENT
__real@40ac260000000000 DQ 040ac260000000000r	; 3603
CONST	ENDS
;	COMDAT __real@40ab220000000000
CONST	SEGMENT
__real@40ab220000000000 DQ 040ab220000000000r	; 3473
CONST	ENDS
;	COMDAT __real@40aab00000000000
CONST	SEGMENT
__real@40aab00000000000 DQ 040aab00000000000r	; 3416
CONST	ENDS
;	COMDAT __real@40a9c8ce8a71de6a
CONST	SEGMENT
__real@40a9c8ce8a71de6a DQ 040a9c8ce8a71de6ar	; 3300.4
CONST	ENDS
;	COMDAT __real@40a8b40000000000
CONST	SEGMENT
__real@40a8b40000000000 DQ 040a8b40000000000r	; 3162
CONST	ENDS
;	COMDAT __real@40a7e80000000000
CONST	SEGMENT
__real@40a7e80000000000 DQ 040a7e80000000000r	; 3060
CONST	ENDS
;	COMDAT __real@40a7ba0000000000
CONST	SEGMENT
__real@40a7ba0000000000 DQ 040a7ba0000000000r	; 3037
CONST	ENDS
;	COMDAT __real@40a7200000000000
CONST	SEGMENT
__real@40a7200000000000 DQ 040a7200000000000r	; 2960
CONST	ENDS
;	COMDAT __real@40a71e0000000000
CONST	SEGMENT
__real@40a71e0000000000 DQ 040a71e0000000000r	; 2959
CONST	ENDS
;	COMDAT __real@40a6fe0000000000
CONST	SEGMENT
__real@40a6fe0000000000 DQ 040a6fe0000000000r	; 2943
CONST	ENDS
;	COMDAT __real@40a6e20000000000
CONST	SEGMENT
__real@40a6e20000000000 DQ 040a6e20000000000r	; 2929
CONST	ENDS
;	COMDAT __real@40a6160000000000
CONST	SEGMENT
__real@40a6160000000000 DQ 040a6160000000000r	; 2827
CONST	ENDS
;	COMDAT __real@40a5b20000000000
CONST	SEGMENT
__real@40a5b20000000000 DQ 040a5b20000000000r	; 2777
CONST	ENDS
;	COMDAT __real@40a5700000000000
CONST	SEGMENT
__real@40a5700000000000 DQ 040a5700000000000r	; 2744
CONST	ENDS
;	COMDAT __real@40a4fe0000000000
CONST	SEGMENT
__real@40a4fe0000000000 DQ 040a4fe0000000000r	; 2687
CONST	ENDS
;	COMDAT __real@40a4a00000000000
CONST	SEGMENT
__real@40a4a00000000000 DQ 040a4a00000000000r	; 2640
CONST	ENDS
;	COMDAT __real@40a44ae7e28240b8
CONST	SEGMENT
__real@40a44ae7e28240b8 DQ 040a44ae7e28240b8r	; 2597.45
CONST	ENDS
;	COMDAT __real@40a37c0000000000
CONST	SEGMENT
__real@40a37c0000000000 DQ 040a37c0000000000r	; 2494
CONST	ENDS
;	COMDAT __real@40a2f20000000000
CONST	SEGMENT
__real@40a2f20000000000 DQ 040a2f20000000000r	; 2425
CONST	ENDS
;	COMDAT __real@40a2c20000000000
CONST	SEGMENT
__real@40a2c20000000000 DQ 040a2c20000000000r	; 2401
CONST	ENDS
;	COMDAT __real@40a2260000000000
CONST	SEGMENT
__real@40a2260000000000 DQ 040a2260000000000r	; 2323
CONST	ENDS
;	COMDAT __real@40a1bc0000000000
CONST	SEGMENT
__real@40a1bc0000000000 DQ 040a1bc0000000000r	; 2270
CONST	ENDS
;	COMDAT __real@40a17e0000000000
CONST	SEGMENT
__real@40a17e0000000000 DQ 040a17e0000000000r	; 2239
CONST	ENDS
;	COMDAT __real@409fbc0000000000
CONST	SEGMENT
__real@409fbc0000000000 DQ 0409fbc0000000000r	; 2031
CONST	ENDS
;	COMDAT __real@409f580000000000
CONST	SEGMENT
__real@409f580000000000 DQ 0409f580000000000r	; 2006
CONST	ENDS
;	COMDAT __real@409f172bd3c36113
CONST	SEGMENT
__real@409f172bd3c36113 DQ 0409f172bd3c36113r	; 1989.79
CONST	ENDS
;	COMDAT __real@409ef00000000000
CONST	SEGMENT
__real@409ef00000000000 DQ 0409ef00000000000r	; 1980
CONST	ENDS
;	COMDAT __real@409ea40000000000
CONST	SEGMENT
__real@409ea40000000000 DQ 0409ea40000000000r	; 1961
CONST	ENDS
;	COMDAT __real@409e000000000000
CONST	SEGMENT
__real@409e000000000000 DQ 0409e000000000000r	; 1920
CONST	ENDS
;	COMDAT __real@409db80000000000
CONST	SEGMENT
__real@409db80000000000 DQ 0409db80000000000r	; 1902
CONST	ENDS
;	COMDAT __real@409db00000000000
CONST	SEGMENT
__real@409db00000000000 DQ 0409db00000000000r	; 1900
CONST	ENDS
;	COMDAT __real@409d7c0000000000
CONST	SEGMENT
__real@409d7c0000000000 DQ 0409d7c0000000000r	; 1887
CONST	ENDS
;	COMDAT __real@409d440000000000
CONST	SEGMENT
__real@409d440000000000 DQ 0409d440000000000r	; 1873
CONST	ENDS
;	COMDAT __real@409c940000000000
CONST	SEGMENT
__real@409c940000000000 DQ 0409c940000000000r	; 1829
CONST	ENDS
;	COMDAT __real@409c340000000000
CONST	SEGMENT
__real@409c340000000000 DQ 0409c340000000000r	; 1805
CONST	ENDS
;	COMDAT __real@409c100000000000
CONST	SEGMENT
__real@409c100000000000 DQ 0409c100000000000r	; 1796
CONST	ENDS
;	COMDAT __real@409bfc0000000000
CONST	SEGMENT
__real@409bfc0000000000 DQ 0409bfc0000000000r	; 1791
CONST	ENDS
;	COMDAT __real@409be80000000000
CONST	SEGMENT
__real@409be80000000000 DQ 0409be80000000000r	; 1786
CONST	ENDS
;	COMDAT __real@409bc40000000000
CONST	SEGMENT
__real@409bc40000000000 DQ 0409bc40000000000r	; 1777
CONST	ENDS
;	COMDAT __real@409b700000000000
CONST	SEGMENT
__real@409b700000000000 DQ 0409b700000000000r	; 1756
CONST	ENDS
;	COMDAT __real@409b300000000000
CONST	SEGMENT
__real@409b300000000000 DQ 0409b300000000000r	; 1740
CONST	ENDS
;	COMDAT __real@409aac0000000000
CONST	SEGMENT
__real@409aac0000000000 DQ 0409aac0000000000r	; 1707
CONST	ENDS
;	COMDAT __real@409a8c0000000000
CONST	SEGMENT
__real@409a8c0000000000 DQ 0409a8c0000000000r	; 1699
CONST	ENDS
;	COMDAT __real@409a580000000000
CONST	SEGMENT
__real@409a580000000000 DQ 0409a580000000000r	; 1686
CONST	ENDS
;	COMDAT __real@409a300000000000
CONST	SEGMENT
__real@409a300000000000 DQ 0409a300000000000r	; 1676
CONST	ENDS
;	COMDAT __real@4099b00000000000
CONST	SEGMENT
__real@4099b00000000000 DQ 04099b00000000000r	; 1644
CONST	ENDS
;	COMDAT __real@4099600000000000
CONST	SEGMENT
__real@4099600000000000 DQ 04099600000000000r	; 1624
CONST	ENDS
;	COMDAT __real@40994c0000000000
CONST	SEGMENT
__real@40994c0000000000 DQ 040994c0000000000r	; 1619
CONST	ENDS
;	COMDAT __real@4099240000000000
CONST	SEGMENT
__real@4099240000000000 DQ 04099240000000000r	; 1609
CONST	ENDS
;	COMDAT __real@4098cc0000000000
CONST	SEGMENT
__real@4098cc0000000000 DQ 04098cc0000000000r	; 1587
CONST	ENDS
;	COMDAT __real@4098600000000000
CONST	SEGMENT
__real@4098600000000000 DQ 04098600000000000r	; 1560
CONST	ENDS
;	COMDAT __real@4098480000000000
CONST	SEGMENT
__real@4098480000000000 DQ 04098480000000000r	; 1554
CONST	ENDS
;	COMDAT __real@4098100000000000
CONST	SEGMENT
__real@4098100000000000 DQ 04098100000000000r	; 1540
CONST	ENDS
;	COMDAT __real@40980c0000000000
CONST	SEGMENT
__real@40980c0000000000 DQ 040980c0000000000r	; 1539
CONST	ENDS
;	COMDAT __real@4096800000000000
CONST	SEGMENT
__real@4096800000000000 DQ 04096800000000000r	; 1440
CONST	ENDS
;	COMDAT __real@4095f40000000000
CONST	SEGMENT
__real@4095f40000000000 DQ 04095f40000000000r	; 1405
CONST	ENDS
;	COMDAT __real@4095d40000000000
CONST	SEGMENT
__real@4095d40000000000 DQ 04095d40000000000r	; 1397
CONST	ENDS
;	COMDAT __real@4095740000000000
CONST	SEGMENT
__real@4095740000000000 DQ 04095740000000000r	; 1373
CONST	ENDS
;	COMDAT __real@4095680000000000
CONST	SEGMENT
__real@4095680000000000 DQ 04095680000000000r	; 1370
CONST	ENDS
;	COMDAT __real@4094d00000000000
CONST	SEGMENT
__real@4094d00000000000 DQ 04094d00000000000r	; 1332
CONST	ENDS
;	COMDAT __real@4094b80000000000
CONST	SEGMENT
__real@4094b80000000000 DQ 04094b80000000000r	; 1326
CONST	ENDS
;	COMDAT __real@4094ac0000000000
CONST	SEGMENT
__real@4094ac0000000000 DQ 04094ac0000000000r	; 1323
CONST	ENDS
;	COMDAT __real@4094a40000000000
CONST	SEGMENT
__real@4094a40000000000 DQ 04094a40000000000r	; 1321
CONST	ENDS
;	COMDAT __real@4094480000000000
CONST	SEGMENT
__real@4094480000000000 DQ 04094480000000000r	; 1298
CONST	ENDS
;	COMDAT __real@4094300000000000
CONST	SEGMENT
__real@4094300000000000 DQ 04094300000000000r	; 1292
CONST	ENDS
;	COMDAT __real@4094280000000000
CONST	SEGMENT
__real@4094280000000000 DQ 04094280000000000r	; 1290
CONST	ENDS
;	COMDAT __real@4093f80000000000
CONST	SEGMENT
__real@4093f80000000000 DQ 04093f80000000000r	; 1278
CONST	ENDS
;	COMDAT __real@4093f00000000000
CONST	SEGMENT
__real@4093f00000000000 DQ 04093f00000000000r	; 1276
CONST	ENDS
;	COMDAT __real@40939c0000000000
CONST	SEGMENT
__real@40939c0000000000 DQ 040939c0000000000r	; 1255
CONST	ENDS
;	COMDAT __real@40938c0000000000
CONST	SEGMENT
__real@40938c0000000000 DQ 040938c0000000000r	; 1251
CONST	ENDS
;	COMDAT __real@4093800000000000
CONST	SEGMENT
__real@4093800000000000 DQ 04093800000000000r	; 1248
CONST	ENDS
;	COMDAT __real@4092fc0000000000
CONST	SEGMENT
__real@4092fc0000000000 DQ 04092fc0000000000r	; 1215
CONST	ENDS
;	COMDAT __real@4092e80000000000
CONST	SEGMENT
__real@4092e80000000000 DQ 04092e80000000000r	; 1210
CONST	ENDS
;	COMDAT __real@4092e00000000000
CONST	SEGMENT
__real@4092e00000000000 DQ 04092e00000000000r	; 1208
CONST	ENDS
;	COMDAT __real@409285e425aee632
CONST	SEGMENT
__real@409285e425aee632 DQ 0409285e425aee632r	; 1185.47
CONST	ENDS
;	COMDAT __real@40927c0000000000
CONST	SEGMENT
__real@40927c0000000000 DQ 040927c0000000000r	; 1183
CONST	ENDS
;	COMDAT __real@4092600000000000
CONST	SEGMENT
__real@4092600000000000 DQ 04092600000000000r	; 1176
CONST	ENDS
;	COMDAT __real@4092540000000000
CONST	SEGMENT
__real@4092540000000000 DQ 04092540000000000r	; 1173
CONST	ENDS
;	COMDAT __real@4092380000000000
CONST	SEGMENT
__real@4092380000000000 DQ 04092380000000000r	; 1166
CONST	ENDS
;	COMDAT __real@4092100000000000
CONST	SEGMENT
__real@4092100000000000 DQ 04092100000000000r	; 1156
CONST	ENDS
;	COMDAT __real@4091f80000000000
CONST	SEGMENT
__real@4091f80000000000 DQ 04091f80000000000r	; 1150
CONST	ENDS
;	COMDAT __real@4091cbca0902de01
CONST	SEGMENT
__real@4091cbca0902de01 DQ 04091cbca0902de01r	; 1138.95
CONST	ENDS
;	COMDAT __real@4091c80000000000
CONST	SEGMENT
__real@4091c80000000000 DQ 04091c80000000000r	; 1138
CONST	ENDS
;	COMDAT __real@4091840000000000
CONST	SEGMENT
__real@4091840000000000 DQ 04091840000000000r	; 1121
CONST	ENDS
;	COMDAT __real@4091680000000000
CONST	SEGMENT
__real@4091680000000000 DQ 04091680000000000r	; 1114
CONST	ENDS
;	COMDAT __real@4091480000000000
CONST	SEGMENT
__real@4091480000000000 DQ 04091480000000000r	; 1106
CONST	ENDS
;	COMDAT __real@4091140000000000
CONST	SEGMENT
__real@4091140000000000 DQ 04091140000000000r	; 1093
CONST	ENDS
;	COMDAT __real@4091000000000000
CONST	SEGMENT
__real@4091000000000000 DQ 04091000000000000r	; 1088
CONST	ENDS
;	COMDAT __real@4090e00000000000
CONST	SEGMENT
__real@4090e00000000000 DQ 04090e00000000000r	; 1080
CONST	ENDS
;	COMDAT __real@4090d84154c985f0
CONST	SEGMENT
__real@4090d84154c985f0 DQ 04090d84154c985f0r	; 1078.06
CONST	ENDS
;	COMDAT __real@4090d00000000000
CONST	SEGMENT
__real@4090d00000000000 DQ 04090d00000000000r	; 1076
CONST	ENDS
;	COMDAT __real@40908c0000000000
CONST	SEGMENT
__real@40908c0000000000 DQ 040908c0000000000r	; 1059
CONST	ENDS
;	COMDAT __real@4090640000000000
CONST	SEGMENT
__real@4090640000000000 DQ 04090640000000000r	; 1049
CONST	ENDS
;	COMDAT __real@4090540000000000
CONST	SEGMENT
__real@4090540000000000 DQ 04090540000000000r	; 1045
CONST	ENDS
;	COMDAT __real@4090480000000000
CONST	SEGMENT
__real@4090480000000000 DQ 04090480000000000r	; 1042
CONST	ENDS
;	COMDAT __real@4090300000000000
CONST	SEGMENT
__real@4090300000000000 DQ 04090300000000000r	; 1036
CONST	ENDS
;	COMDAT __real@4090040000000000
CONST	SEGMENT
__real@4090040000000000 DQ 04090040000000000r	; 1025
CONST	ENDS
;	COMDAT __real@408fe00000000000
CONST	SEGMENT
__real@408fe00000000000 DQ 0408fe00000000000r	; 1020
CONST	ENDS
;	COMDAT __real@408fa80000000000
CONST	SEGMENT
__real@408fa80000000000 DQ 0408fa80000000000r	; 1013
CONST	ENDS
;	COMDAT __real@408f680000000000
CONST	SEGMENT
__real@408f680000000000 DQ 0408f680000000000r	; 1005
CONST	ENDS
;	COMDAT __real@408f580000000000
CONST	SEGMENT
__real@408f580000000000 DQ 0408f580000000000r	; 1003
CONST	ENDS
;	COMDAT __real@408f480000000000
CONST	SEGMENT
__real@408f480000000000 DQ 0408f480000000000r	; 1001
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@408ed9ddcc63f141
CONST	SEGMENT
__real@408ed9ddcc63f141 DQ 0408ed9ddcc63f141r	; 987.233
CONST	ENDS
;	COMDAT __real@408cf72d77318fc5
CONST	SEGMENT
__real@408cf72d77318fc5 DQ 0408cf72d77318fc5r	; 926.897
CONST	ENDS
;	COMDAT __real@408be00000000000
CONST	SEGMENT
__real@408be00000000000 DQ 0408be00000000000r	; 892
CONST	ENDS
;	COMDAT __real@408ae80000000000
CONST	SEGMENT
__real@408ae80000000000 DQ 0408ae80000000000r	; 861
CONST	ENDS
;	COMDAT __real@408ace70068db8bb
CONST	SEGMENT
__real@408ace70068db8bb DQ 0408ace70068db8bbr	; 857.805
CONST	ENDS
;	COMDAT __real@408a500000000000
CONST	SEGMENT
__real@408a500000000000 DQ 0408a500000000000r	; 842
CONST	ENDS
;	COMDAT __real@4089b00000000000
CONST	SEGMENT
__real@4089b00000000000 DQ 04089b00000000000r	; 822
CONST	ENDS
;	COMDAT __real@408994236e2eb1c4
CONST	SEGMENT
__real@408994236e2eb1c4 DQ 0408994236e2eb1c4r	; 818.517
CONST	ENDS
;	COMDAT __real@4089880000000000
CONST	SEGMENT
__real@4089880000000000 DQ 04089880000000000r	; 817
CONST	ENDS
;	COMDAT __real@4088d80000000000
CONST	SEGMENT
__real@4088d80000000000 DQ 04088d80000000000r	; 795
CONST	ENDS
;	COMDAT __real@4088000000000000
CONST	SEGMENT
__real@4088000000000000 DQ 04088000000000000r	; 768
CONST	ENDS
;	COMDAT __real@4087f80000000000
CONST	SEGMENT
__real@4087f80000000000 DQ 04087f80000000000r	; 767
CONST	ENDS
;	COMDAT __real@4087080000000000
CONST	SEGMENT
__real@4087080000000000 DQ 04087080000000000r	; 737
CONST	ENDS
;	COMDAT __real@4086880000000000
CONST	SEGMENT
__real@4086880000000000 DQ 04086880000000000r	; 721
CONST	ENDS
;	COMDAT __real@4086700000000000
CONST	SEGMENT
__real@4086700000000000 DQ 04086700000000000r	; 718
CONST	ENDS
;	COMDAT __real@4086600000000000
CONST	SEGMENT
__real@4086600000000000 DQ 04086600000000000r	; 716
CONST	ENDS
;	COMDAT __real@4086500000000000
CONST	SEGMENT
__real@4086500000000000 DQ 04086500000000000r	; 714
CONST	ENDS
;	COMDAT __real@4086480000000000
CONST	SEGMENT
__real@4086480000000000 DQ 04086480000000000r	; 713
CONST	ENDS
;	COMDAT __real@4085c19758e21965
CONST	SEGMENT
__real@4085c19758e21965 DQ 04085c19758e21965r	; 696.199
CONST	ENDS
;	COMDAT __real@4085380000000000
CONST	SEGMENT
__real@4085380000000000 DQ 04085380000000000r	; 679
CONST	ENDS
;	COMDAT __real@4085180000000000
CONST	SEGMENT
__real@4085180000000000 DQ 04085180000000000r	; 675
CONST	ENDS
;	COMDAT __real@4084c7985f06f694
CONST	SEGMENT
__real@4084c7985f06f694 DQ 04084c7985f06f694r	; 664.949
CONST	ENDS
;	COMDAT __real@4084c61652bd3c36
CONST	SEGMENT
__real@4084c61652bd3c36 DQ 04084c61652bd3c36r	; 664.761
CONST	ENDS
;	COMDAT __real@408436902de00d1b
CONST	SEGMENT
__real@408436902de00d1b DQ 0408436902de00d1br	; 646.82
CONST	ENDS
;	COMDAT __real@4083f80000000000
CONST	SEGMENT
__real@4083f80000000000 DQ 04083f80000000000r	; 639
CONST	ENDS
;	COMDAT __real@4083d00000000000
CONST	SEGMENT
__real@4083d00000000000 DQ 04083d00000000000r	; 634
CONST	ENDS
;	COMDAT __real@4083ce87c84b5dcc
CONST	SEGMENT
__real@4083ce87c84b5dcc DQ 04083ce87c84b5dccr	; 633.816
CONST	ENDS
;	COMDAT __real@4083b80000000000
CONST	SEGMENT
__real@4083b80000000000 DQ 04083b80000000000r	; 631
CONST	ENDS
;	COMDAT __real@4083580000000000
CONST	SEGMENT
__real@4083580000000000 DQ 04083580000000000r	; 619
CONST	ENDS
;	COMDAT __real@4082f00000000000
CONST	SEGMENT
__real@4082f00000000000 DQ 04082f00000000000r	; 606
CONST	ENDS
;	COMDAT __real@4082900000000000
CONST	SEGMENT
__real@4082900000000000 DQ 04082900000000000r	; 594
CONST	ENDS
;	COMDAT __real@4082600000000000
CONST	SEGMENT
__real@4082600000000000 DQ 04082600000000000r	; 588
CONST	ENDS
;	COMDAT __real@4082500000000000
CONST	SEGMENT
__real@4082500000000000 DQ 04082500000000000r	; 586
CONST	ENDS
;	COMDAT __real@4081e00000000000
CONST	SEGMENT
__real@4081e00000000000 DQ 04081e00000000000r	; 572
CONST	ENDS
;	COMDAT __real@4081dc436113404f
CONST	SEGMENT
__real@4081dc436113404f DQ 04081dc436113404fr	; 571.533
CONST	ENDS
;	COMDAT __real@4081d99a6b50b0f2
CONST	SEGMENT
__real@4081d99a6b50b0f2 DQ 04081d99a6b50b0f2r	; 571.2
CONST	ENDS
;	COMDAT __real@4081cd3e0ded288d
CONST	SEGMENT
__real@4081cd3e0ded288d DQ 04081cd3e0ded288dr	; 569.655
CONST	ENDS
;	COMDAT __real@4081b00000000000
CONST	SEGMENT
__real@4081b00000000000 DQ 04081b00000000000r	; 566
CONST	ENDS
;	COMDAT __real@4081a163f141205c
CONST	SEGMENT
__real@4081a163f141205c DQ 04081a163f141205cr	; 564.174
CONST	ENDS
;	COMDAT __real@4081980000000000
CONST	SEGMENT
__real@4081980000000000 DQ 04081980000000000r	; 563
CONST	ENDS
;	COMDAT __real@4081700000000000
CONST	SEGMENT
__real@4081700000000000 DQ 04081700000000000r	; 558
CONST	ENDS
;	COMDAT __real@4081680000000000
CONST	SEGMENT
__real@4081680000000000 DQ 04081680000000000r	; 557
CONST	ENDS
;	COMDAT __real@4081300000000000
CONST	SEGMENT
__real@4081300000000000 DQ 04081300000000000r	; 550
CONST	ENDS
;	COMDAT __real@4080d80000000000
CONST	SEGMENT
__real@4080d80000000000 DQ 04080d80000000000r	; 539
CONST	ENDS
;	COMDAT __real@4080780000000000
CONST	SEGMENT
__real@4080780000000000 DQ 04080780000000000r	; 527
CONST	ENDS
;	COMDAT __real@4080680000000000
CONST	SEGMENT
__real@4080680000000000 DQ 04080680000000000r	; 525
CONST	ENDS
;	COMDAT __real@407f700000000000
CONST	SEGMENT
__real@407f700000000000 DQ 0407f700000000000r	; 503
CONST	ENDS
;	COMDAT __real@407f300000000000
CONST	SEGMENT
__real@407f300000000000 DQ 0407f300000000000r	; 499
CONST	ENDS
;	COMDAT __real@407f200000000000
CONST	SEGMENT
__real@407f200000000000 DQ 0407f200000000000r	; 498
CONST	ENDS
;	COMDAT __real@407ef00000000000
CONST	SEGMENT
__real@407ef00000000000 DQ 0407ef00000000000r	; 495
CONST	ENDS
;	COMDAT __real@407ee00000000000
CONST	SEGMENT
__real@407ee00000000000 DQ 0407ee00000000000r	; 494
CONST	ENDS
;	COMDAT __real@407ed95bc01a36e3
CONST	SEGMENT
__real@407ed95bc01a36e3 DQ 0407ed95bc01a36e3r	; 493.585
CONST	ENDS
;	COMDAT __real@407ed00000000000
CONST	SEGMENT
__real@407ed00000000000 DQ 0407ed00000000000r	; 493
CONST	ENDS
;	COMDAT __real@407ecd0ded288ce7
CONST	SEGMENT
__real@407ecd0ded288ce7 DQ 0407ecd0ded288ce7r	; 492.816
CONST	ENDS
;	COMDAT __real@407e900000000000
CONST	SEGMENT
__real@407e900000000000 DQ 0407e900000000000r	; 489
CONST	ENDS
;	COMDAT __real@407e600000000000
CONST	SEGMENT
__real@407e600000000000 DQ 0407e600000000000r	; 486
CONST	ENDS
;	COMDAT __real@407db00000000000
CONST	SEGMENT
__real@407db00000000000 DQ 0407db00000000000r	; 475
CONST	ENDS
;	COMDAT __real@407da00000000000
CONST	SEGMENT
__real@407da00000000000 DQ 0407da00000000000r	; 474
CONST	ENDS
;	COMDAT __real@407d700000000000
CONST	SEGMENT
__real@407d700000000000 DQ 0407d700000000000r	; 471
CONST	ENDS
;	COMDAT __real@407ca00000000000
CONST	SEGMENT
__real@407ca00000000000 DQ 0407ca00000000000r	; 458
CONST	ENDS
;	COMDAT __real@407c800000000000
CONST	SEGMENT
__real@407c800000000000 DQ 0407c800000000000r	; 456
CONST	ENDS
;	COMDAT __real@407b500000000000
CONST	SEGMENT
__real@407b500000000000 DQ 0407b500000000000r	; 437
CONST	ENDS
;	COMDAT __real@407b300000000000
CONST	SEGMENT
__real@407b300000000000 DQ 0407b300000000000r	; 435
CONST	ENDS
;	COMDAT __real@407b200000000000
CONST	SEGMENT
__real@407b200000000000 DQ 0407b200000000000r	; 434
CONST	ENDS
;	COMDAT __real@407ad00000000000
CONST	SEGMENT
__real@407ad00000000000 DQ 0407ad00000000000r	; 429
CONST	ENDS
;	COMDAT __real@407a500000000000
CONST	SEGMENT
__real@407a500000000000 DQ 0407a500000000000r	; 421
CONST	ENDS
;	COMDAT __real@4079b00000000000
CONST	SEGMENT
__real@4079b00000000000 DQ 04079b00000000000r	; 411
CONST	ENDS
;	COMDAT __real@4079800000000000
CONST	SEGMENT
__real@4079800000000000 DQ 04079800000000000r	; 408
CONST	ENDS
;	COMDAT __real@407944f0068db8bb
CONST	SEGMENT
__real@407944f0068db8bb DQ 0407944f0068db8bbr	; 404.309
CONST	ENDS
;	COMDAT __real@4079100000000000
CONST	SEGMENT
__real@4079100000000000 DQ 04079100000000000r	; 401
CONST	ENDS
;	COMDAT __real@4078f00000000000
CONST	SEGMENT
__real@4078f00000000000 DQ 04078f00000000000r	; 399
CONST	ENDS
;	COMDAT __real@4078b00000000000
CONST	SEGMENT
__real@4078b00000000000 DQ 04078b00000000000r	; 395
CONST	ENDS
;	COMDAT __real@4078a7be0ded288d
CONST	SEGMENT
__real@4078a7be0ded288d DQ 04078a7be0ded288dr	; 394.484
CONST	ENDS
;	COMDAT __real@4078800000000000
CONST	SEGMENT
__real@4078800000000000 DQ 04078800000000000r	; 392
CONST	ENDS
;	COMDAT __real@4077f00000000000
CONST	SEGMENT
__real@4077f00000000000 DQ 04077f00000000000r	; 383
CONST	ENDS
;	COMDAT __real@4077c97bb2fec56d
CONST	SEGMENT
__real@4077c97bb2fec56d DQ 04077c97bb2fec56dr	; 380.593
CONST	ENDS
;	COMDAT __real@4077b00000000000
CONST	SEGMENT
__real@4077b00000000000 DQ 04077b00000000000r	; 379
CONST	ENDS
;	COMDAT __real@4077900000000000
CONST	SEGMENT
__real@4077900000000000 DQ 04077900000000000r	; 377
CONST	ENDS
;	COMDAT __real@4077737ef9db22d1
CONST	SEGMENT
__real@4077737ef9db22d1 DQ 04077737ef9db22d1r	; 375.219
CONST	ENDS
;	COMDAT __real@4077600000000000
CONST	SEGMENT
__real@4077600000000000 DQ 04077600000000000r	; 374
CONST	ENDS
;	COMDAT __real@4076600000000000
CONST	SEGMENT
__real@4076600000000000 DQ 04076600000000000r	; 358
CONST	ENDS
;	COMDAT __real@4076400000000000
CONST	SEGMENT
__real@4076400000000000 DQ 04076400000000000r	; 356
CONST	ENDS
;	COMDAT __real@4075fd05532617c2
CONST	SEGMENT
__real@4075fd05532617c2 DQ 04075fd05532617c2r	; 351.814
CONST	ENDS
;	COMDAT __real@4075a00000000000
CONST	SEGMENT
__real@4075a00000000000 DQ 04075a00000000000r	; 346
CONST	ENDS
;	COMDAT __real@4074a37c1bda511a
CONST	SEGMENT
__real@4074a37c1bda511a DQ 04074a37c1bda511ar	; 330.218
CONST	ENDS
;	COMDAT __real@4074900000000000
CONST	SEGMENT
__real@4074900000000000 DQ 04074900000000000r	; 329
CONST	ENDS
;	COMDAT __real@4073800000000000
CONST	SEGMENT
__real@4073800000000000 DQ 04073800000000000r	; 312
CONST	ENDS
;	COMDAT __real@4072d00000000000
CONST	SEGMENT
__real@4072d00000000000 DQ 04072d00000000000r	; 301
CONST	ENDS
;	COMDAT __real@4072500000000000
CONST	SEGMENT
__real@4072500000000000 DQ 04072500000000000r	; 293
CONST	ENDS
;	COMDAT __real@4072200000000000
CONST	SEGMENT
__real@4072200000000000 DQ 04072200000000000r	; 290
CONST	ENDS
;	COMDAT __real@4071a4e703afb7e9
CONST	SEGMENT
__real@4071a4e703afb7e9 DQ 04071a4e703afb7e9r	; 282.306
CONST	ENDS
;	COMDAT __real@40719f36e2eb1c43
CONST	SEGMENT
__real@40719f36e2eb1c43 DQ 040719f36e2eb1c43r	; 281.951
CONST	ENDS
;	COMDAT __real@4071600000000000
CONST	SEGMENT
__real@4071600000000000 DQ 04071600000000000r	; 278
CONST	ENDS
;	COMDAT __real@4071200000000000
CONST	SEGMENT
__real@4071200000000000 DQ 04071200000000000r	; 274
CONST	ENDS
;	COMDAT __real@4070600000000000
CONST	SEGMENT
__real@4070600000000000 DQ 04070600000000000r	; 262
CONST	ENDS
;	COMDAT __real@4070488ef34d6a16
CONST	SEGMENT
__real@4070488ef34d6a16 DQ 04070488ef34d6a16r	; 260.535
CONST	ENDS
;	COMDAT __real@40703b1f8a0902de
CONST	SEGMENT
__real@40703b1f8a0902de DQ 040703b1f8a0902der	; 259.695
CONST	ENDS
;	COMDAT __real@406fed8e219652bd
CONST	SEGMENT
__real@406fed8e219652bd DQ 0406fed8e219652bdr	; 255.424
CONST	ENDS
;	COMDAT __real@406e882de00d1b71
CONST	SEGMENT
__real@406e882de00d1b71 DQ 0406e882de00d1b71r	; 244.256
CONST	ENDS
;	COMDAT __real@406e08dfa43fe5c9
CONST	SEGMENT
__real@406e08dfa43fe5c9 DQ 0406e08dfa43fe5c9r	; 240.277
CONST	ENDS
;	COMDAT __real@406dc7318fc50481
CONST	SEGMENT
__real@406dc7318fc50481 DQ 0406dc7318fc50481r	; 238.225
CONST	ENDS
;	COMDAT __real@406c72dfa43fe5c9
CONST	SEGMENT
__real@406c72dfa43fe5c9 DQ 0406c72dfa43fe5c9r	; 227.59
CONST	ENDS
;	COMDAT __real@406bb180346dc5d6
CONST	SEGMENT
__real@406bb180346dc5d6 DQ 0406bb180346dc5d6r	; 221.547
CONST	ENDS
;	COMDAT __real@4069c00000000000
CONST	SEGMENT
__real@4069c00000000000 DQ 04069c00000000000r	; 206
CONST	ENDS
;	COMDAT __real@406969e00d1b7176
CONST	SEGMENT
__real@406969e00d1b7176 DQ 0406969e00d1b7176r	; 203.309
CONST	ENDS
;	COMDAT __real@40686f80346dc5d6
CONST	SEGMENT
__real@40686f80346dc5d6 DQ 040686f80346dc5d6r	; 195.484
CONST	ENDS
;	COMDAT __real@40638cd844d013a9
CONST	SEGMENT
__real@40638cd844d013a9 DQ 040638cd844d013a9r	; 156.401
CONST	ENDS
;	COMDAT __real@4063731de69ad42c
CONST	SEGMENT
__real@4063731de69ad42c DQ 04063731de69ad42cr	; 155.597
CONST	ENDS
;	COMDAT __real@406258bfb15b573f
CONST	SEGMENT
__real@406258bfb15b573f DQ 0406258bfb15b573fr	; 146.773
CONST	ENDS
;	COMDAT __real@4061c989374bc6a8
CONST	SEGMENT
__real@4061c989374bc6a8 DQ 04061c989374bc6a8r	; 142.298
CONST	ENDS
;	COMDAT __real@40618a0346dc5d64
CONST	SEGMENT
__real@40618a0346dc5d64 DQ 040618a0346dc5d64r	; 140.313
CONST	ENDS
;	COMDAT __real@40613ce8a71de69b
CONST	SEGMENT
__real@40613ce8a71de69b DQ 040613ce8a71de69br	; 137.903
CONST	ENDS
;	COMDAT __real@405ddd82a9930be1
CONST	SEGMENT
__real@405ddd82a9930be1 DQ 0405ddd82a9930be1r	; 119.461
CONST	ENDS
;	COMDAT __real@405d1fc01a36e2eb
CONST	SEGMENT
__real@405d1fc01a36e2eb DQ 0405d1fc01a36e2ebr	; 116.496
CONST	ENDS
;	COMDAT __real@40598f0068db8bac
CONST	SEGMENT
__real@40598f0068db8bac DQ 040598f0068db8bacr	; 102.234
CONST	ENDS
;	COMDAT __real@4058f7c6a7ef9db2
CONST	SEGMENT
__real@4058f7c6a7ef9db2 DQ 04058f7c6a7ef9db2r	; 99.8715
CONST	ENDS
;	COMDAT __real@405659bf487fcb92
CONST	SEGMENT
__real@405659bf487fcb92 DQ 0405659bf487fcb92r	; 89.4023
CONST	ENDS
;	COMDAT __real@4054edbf487fcb92
CONST	SEGMENT
__real@4054edbf487fcb92 DQ 04054edbf487fcb92r	; 83.7148
CONST	ENDS
;	COMDAT __real@405409844d013a93
CONST	SEGMENT
__real@405409844d013a93 DQ 0405409844d013a93r	; 80.1487
CONST	ENDS
;	COMDAT __real@40527f8bac710cb3
CONST	SEGMENT
__real@40527f8bac710cb3 DQ 040527f8bac710cb3r	; 73.9929
CONST	ENDS
;	COMDAT __real@40523ce703afb7e9
CONST	SEGMENT
__real@40523ce703afb7e9 DQ 040523ce703afb7e9r	; 72.9516
CONST	ENDS
;	COMDAT __real@40521ab851eb851f
CONST	SEGMENT
__real@40521ab851eb851f DQ 040521ab851eb851fr	; 72.4175
CONST	ENDS
;	COMDAT __real@40518e027525460b
CONST	SEGMENT
__real@40518e027525460b DQ 040518e027525460br	; 70.2189
CONST	ENDS
;	COMDAT __real@4050ab318fc50481
CONST	SEGMENT
__real@4050ab318fc50481 DQ 04050ab318fc50481r	; 66.6749
CONST	ENDS
;	COMDAT __real@404f61ce075f6fd2
CONST	SEGMENT
__real@404f61ce075f6fd2 DQ 0404f61ce075f6fd2r	; 62.7641
CONST	ENDS
;	COMDAT __real@404eb5ed288ce704
CONST	SEGMENT
__real@404eb5ed288ce704 DQ 0404eb5ed288ce704r	; 61.4213
CONST	ENDS
;	COMDAT __real@40476f765fd8adac
CONST	SEGMENT
__real@40476f765fd8adac DQ 040476f765fd8adacr	; 46.8708
CONST	ENDS
;	COMDAT __real@40471e90ff972474
CONST	SEGMENT
__real@40471e90ff972474 DQ 040471e90ff972474r	; 46.2388
CONST	ENDS
;	COMDAT __real@4046e8b780346dc6
CONST	SEGMENT
__real@4046e8b780346dc6 DQ 04046e8b780346dc6r	; 45.8181
CONST	ENDS
;	COMDAT __real@404390e560418937
CONST	SEGMENT
__real@404390e560418937 DQ 0404390e560418937r	; 39.132
CONST	ENDS
;	COMDAT __real@40437bcd35a85879
CONST	SEGMENT
__real@40437bcd35a85879 DQ 040437bcd35a85879r	; 38.9672
CONST	ENDS
;	COMDAT __real@404326d916872b02
CONST	SEGMENT
__real@404326d916872b02 DQ 0404326d916872b02r	; 38.3035
CONST	ENDS
;	COMDAT __real@403ebc1bda5119ce
CONST	SEGMENT
__real@403ebc1bda5119ce DQ 0403ebc1bda5119cer	; 30.7348
CONST	ENDS
;	COMDAT __real@403a99c0ebedfa44
CONST	SEGMENT
__real@403a99c0ebedfa44 DQ 0403a99c0ebedfa44r	; 26.6006
CONST	ENDS
;	COMDAT __real@403751bda5119ce0
CONST	SEGMENT
__real@403751bda5119ce0 DQ 0403751bda5119ce0r	; 23.3193
CONST	ENDS
;	COMDAT __real@4034e2a9930be0df
CONST	SEGMENT
__real@4034e2a9930be0df DQ 04034e2a9930be0dfr	; 20.8854
CONST	ENDS
;	COMDAT __real@4034df0068db8bac
CONST	SEGMENT
__real@4034df0068db8bac DQ 04034df0068db8bacr	; 20.8711
CONST	ENDS
;	COMDAT __real@4033f7c1bda5119d
CONST	SEGMENT
__real@4033f7c1bda5119d DQ 04033f7c1bda5119dr	; 19.9678
CONST	ENDS
;	COMDAT __real@4030edbf487fcb92
CONST	SEGMENT
__real@4030edbf487fcb92 DQ 04030edbf487fcb92r	; 16.9287
CONST	ENDS
;	COMDAT __real@402a941205bc01a3
CONST	SEGMENT
__real@402a941205bc01a3 DQ 0402a941205bc01a3r	; 13.2892
CONST	ENDS
;	COMDAT __real@402856e2eb1c432d
CONST	SEGMENT
__real@402856e2eb1c432d DQ 0402856e2eb1c432dr	; 12.1697
CONST	ENDS
;	COMDAT __real@40281edfa43fe5c9
CONST	SEGMENT
__real@40281edfa43fe5c9 DQ 040281edfa43fe5c9r	; 12.0603
CONST	ENDS
;	COMDAT __real@4024c4dd2f1a9fbe
CONST	SEGMENT
__real@4024c4dd2f1a9fbe DQ 04024c4dd2f1a9fber	; 10.3845
CONST	ENDS
;	COMDAT __real@4022d80346dc5d64
CONST	SEGMENT
__real@4022d80346dc5d64 DQ 04022d80346dc5d64r	; 9.4219
CONST	ENDS
;	COMDAT __real@402233f7ced91687
CONST	SEGMENT
__real@402233f7ced91687 DQ 0402233f7ced91687r	; 9.1015
CONST	ENDS
;	COMDAT __real@40210dfa43fe5c92
CONST	SEGMENT
__real@40210dfa43fe5c92 DQ 040210dfa43fe5c92r	; 8.5273
CONST	ENDS
;	COMDAT __real@4013000000000000
CONST	SEGMENT
__real@4013000000000000 DQ 04013000000000000r	; 4.75
CONST	ENDS
;	COMDAT __real@40106d77318fc505
CONST	SEGMENT
__real@40106d77318fc505 DQ 040106d77318fc505r	; 4.1069
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?__LINE__Var@?0??matrix_mask@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??matrix_mask@@9@9 DD 065cH		; `matrix_mask'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??vect_variance_blck_int8@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??vect_variance_blck_int8@@9@9 DD 03a4H	; `vect_variance_blck_int8'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@
CONST	SEGMENT
??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@ DB 'null pointer as pa'
	DB	'rameter.', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??vect_average_blck_int8@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??vect_average_blck_int8@@9@9 DD 0382H	; `vect_average_blck_int8'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'm', 00H, 'l', 00H
	DB	'_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'a', 00H, '_'
	DB	00H, 'c', 00H, 'u', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'h', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@ DB 'Memory allocation'
	DB	' failed!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9 DD 033bH ; `kvz_init_ml_intra_depth_const'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _generate_interval_from_os_pred
_TEXT	SEGMENT
_j$1 = -264						; size = 4
_mat_max$ = -252					; size = 64
_mat_mask$ = -180					; size = 64
_mat_ref$ = -108					; size = 64
__nb_level$ = -33					; size = 1
__mat_depth_max$ = -24					; size = 4
__mat_depth_min$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_ml_intra_depth_ctu$ = 8				; size = 4
__mat_depth_MEP$ = 12					; size = 4
_generate_interval_from_os_pred PROC			; COMDAT

; 1703 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1704 : 	uint8_t* _mat_depth_min = ml_intra_depth_ctu->_mat_upper_depth;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __mat_depth_min$[ebp], ecx

; 1705 : 	uint8_t* _mat_depth_max = ml_intra_depth_ctu->_mat_lower_depth;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __mat_depth_max$[ebp], ecx

; 1706 : 	int8_t _nb_level = ml_intra_depth_ctu->i_nb_addDepth;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR __nb_level$[ebp], cl

; 1707 : 
; 1708 : 	memcpy(_mat_depth_min, _mat_depth_MEP, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_depth_MEP$[ebp]
	push	eax
	mov	ecx, DWORD PTR __mat_depth_min$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1709 : 	memcpy(_mat_depth_max, _mat_depth_MEP, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_depth_MEP$[ebp]
	push	eax
	mov	ecx, DWORD PTR __mat_depth_max$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1710 : 	if (_nb_level <= 0)

	movsx	eax, BYTE PTR __nb_level$[ebp]
	test	eax, eax
	jg	SHORT $LN5@generate_i

; 1711 : 	{
; 1712 : 		return;

	jmp	$LN1@generate_i

; 1713 : 	}

	jmp	SHORT $LN6@generate_i
$LN5@generate_i:

; 1714 : 	else if (_nb_level >= 4)

	movsx	eax, BYTE PTR __nb_level$[ebp]
	cmp	eax, 4
	jl	SHORT $LN6@generate_i

; 1715 : 	{
; 1716 : 		memset(_mat_depth_min, 0, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR __mat_depth_min$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1717 : 		memset(_mat_depth_max, 4, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	push	4
	mov	eax, DWORD PTR __mat_depth_max$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1718 : 		return;

	jmp	$LN1@generate_i
$LN6@generate_i:

; 1719 : 	}
; 1720 : 	uint8_t mat_ref[64];	/*!< Matrix used to store the ref map */
; 1721 : 	uint8_t mat_mask[64]; 	/*!< Matrix used as mask */
; 1722 : 	uint8_t mat_max[64];	/*!< Matrix used to store current depth map max */
; 1723 : 
; 1724 : 	for (int j = 0; j < _nb_level; ++j)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN4@generate_i
$LN2@generate_i:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN4@generate_i:
	movsx	eax, BYTE PTR __nb_level$[ebp]
	cmp	DWORD PTR _j$1[ebp], eax
	jge	$LN1@generate_i

; 1725 : 	{
; 1726 : 		/*!< Copy the original map seed */
; 1727 : 		memcpy(mat_ref, _mat_depth_min, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_depth_min$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat_ref$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1728 : 		memcpy(mat_mask, _mat_depth_min, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_depth_min$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat_mask$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1729 : 		memcpy(mat_max, _mat_depth_max, 64 * sizeof(uint8_t));

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_depth_max$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat_max$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1730 : 
; 1731 : 		/*!< Apply the RCDM on the upper map */
; 1732 : 		merge_matrix_64(_mat_depth_min, _mat_depth_min);

	mov	eax, DWORD PTR __mat_depth_min$[ebp]
	push	eax
	mov	ecx, DWORD PTR __mat_depth_min$[ebp]
	push	ecx
	call	_merge_matrix_64
	add	esp, 8

; 1733 : 
; 1734 : 		/*!< Extract the mask */
; 1735 : 		matrix_mask(mat_mask, _mat_depth_min, 8, 8);

	push	8
	push	8
	mov	eax, DWORD PTR __mat_depth_min$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat_mask$[ebp]
	push	ecx
	call	_matrix_mask
	add	esp, 16					; 00000010H

; 1736 : 
; 1737 : 		/*!< Add a level only on the masked area */
; 1738 : 		matrix_add_level_roi(mat_max, _mat_depth_max, _mat_depth_min, 1, mat_mask);

	lea	eax, DWORD PTR _mat_mask$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __mat_depth_min$[ebp]
	push	ecx
	mov	edx, DWORD PTR __mat_depth_max$[ebp]
	push	edx
	lea	eax, DWORD PTR _mat_max$[ebp]
	push	eax
	call	_matrix_add_level_roi
	add	esp, 20					; 00000014H

; 1739 : 		
; 1740 : 	}

	jmp	$LN2@generate_i
$LN1@generate_i:

; 1741 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@generate_i
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@generate_i:
	DD	3
	DD	$LN12@generate_i
$LN12@generate_i:
	DD	-108					; ffffff94H
	DD	64					; 00000040H
	DD	$LN9@generate_i
	DD	-180					; ffffff4cH
	DD	64					; 00000040H
	DD	$LN10@generate_i
	DD	-252					; ffffff04H
	DD	64					; 00000040H
	DD	$LN11@generate_i
$LN11@generate_i:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
$LN10@generate_i:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN9@generate_i:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	0
_generate_interval_from_os_pred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _matrix_add_level_roi
_TEXT	SEGMENT
tv78 = -244						; size = 4
_i_depth_sup$1 = -41					; size = 1
_i_depth$ = -29						; size = 1
_y$ = -17						; size = 1
_x$ = -5						; size = 1
__mat_sup$ = 8						; size = 4
__mat_inf$ = 12						; size = 4
__mat_sup_dst$ = 16					; size = 4
__nb_level$ = 20					; size = 1
__mat_roi$ = 24						; size = 4
_matrix_add_level_roi PROC				; COMDAT

; 1655 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1656 : 	int8_t x = 0, y = 0;

	mov	BYTE PTR _x$[ebp], 0
	mov	BYTE PTR _y$[ebp], 0

; 1657 : 	int8_t i_depth = 0;

	mov	BYTE PTR _i_depth$[ebp], 0

; 1658 : 	for (y = 0; y < 8; ++y)

	mov	BYTE PTR _y$[ebp], 0
	jmp	SHORT $LN4@matrix_add
$LN2@matrix_add:
	mov	al, BYTE PTR _y$[ebp]
	add	al, 1
	mov	BYTE PTR _y$[ebp], al
$LN4@matrix_add:
	movsx	eax, BYTE PTR _y$[ebp]
	cmp	eax, 8
	jge	$LN1@matrix_add

; 1659 : 	{
; 1660 : 		for (x = 0; x < 8; ++x)

	mov	BYTE PTR _x$[ebp], 0
	jmp	SHORT $LN7@matrix_add
$LN5@matrix_add:
	mov	al, BYTE PTR _x$[ebp]
	add	al, 1
	mov	BYTE PTR _x$[ebp], al
$LN7@matrix_add:
	movsx	eax, BYTE PTR _x$[ebp]
	cmp	eax, 8
	jge	$LN6@matrix_add

; 1661 : 		{
; 1662 : 			if ((!_mat_roi[x + (y << 3)]) == 1)

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_roi$[ebp]
	movzx	edx, BYTE PTR [eax+ecx*8]
	test	edx, edx
	jne	SHORT $LN18@matrix_add
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN19@matrix_add
$LN18@matrix_add:
	mov	DWORD PTR tv78[ebp], 0
$LN19@matrix_add:
	cmp	DWORD PTR tv78[ebp], 1
	jne	$LN8@matrix_add

; 1663 : 			{
; 1664 : 				i_depth = _mat_sup[x + (y << 3)];

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_sup$[ebp]
	mov	dl, BYTE PTR [eax+ecx*8]
	mov	BYTE PTR _i_depth$[ebp], dl

; 1665 : 				if (i_depth == 4)

	movsx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jne	$LN9@matrix_add

; 1666 : 				{
; 1667 : 					int8_t i_depth_sup = _mat_sup_dst[x + (y << 3)];

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_sup_dst$[ebp]
	mov	dl, BYTE PTR [eax+ecx*8]
	mov	BYTE PTR _i_depth_sup$1[ebp], dl

; 1668 : 					_mat_inf[x + (y << 3)] = 4;

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_inf$[ebp]
	mov	BYTE PTR [eax+ecx*8], 4

; 1669 : 					if (i_depth_sup == 4)

	movsx	eax, BYTE PTR _i_depth_sup$1[ebp]
	cmp	eax, 4
	jne	SHORT $LN11@matrix_add

; 1670 : 					{
; 1671 : 						_mat_sup_dst[x + (y << 3)] = 3;

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_sup_dst$[ebp]
	mov	BYTE PTR [eax+ecx*8], 3

; 1672 : 					}

	jmp	SHORT $LN12@matrix_add
$LN11@matrix_add:

; 1673 : 					else if (i_depth_sup > 0 && abs(i_depth_sup - 4) < _nb_level)

	movsx	eax, BYTE PTR _i_depth_sup$1[ebp]
	test	eax, eax
	jle	SHORT $LN12@matrix_add
	movsx	eax, BYTE PTR _i_depth_sup$1[ebp]
	sub	eax, 4
	push	eax
	call	_abs
	add	esp, 4
	movsx	ecx, BYTE PTR __nb_level$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@matrix_add

; 1674 : 					{
; 1675 : 						fill_matrix_with_depth(_mat_sup_dst, (x & (~(8 >> (i_depth_sup)))), (y & (~(8 >> (i_depth_sup)))), i_depth_sup - 1);

	movsx	eax, BYTE PTR _i_depth_sup$1[ebp]
	sub	eax, 1
	push	eax
	movsx	edx, BYTE PTR _y$[ebp]
	movsx	ecx, BYTE PTR _i_depth_sup$1[ebp]
	mov	eax, 8
	sar	eax, cl
	not	eax
	and	edx, eax
	push	edx
	movsx	edx, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _i_depth_sup$1[ebp]
	mov	eax, 8
	sar	eax, cl
	not	eax
	and	edx, eax
	push	edx
	mov	ecx, DWORD PTR __mat_sup_dst$[ebp]
	push	ecx
	call	_fill_matrix_with_depth
	add	esp, 16					; 00000010H
$LN12@matrix_add:

; 1676 : 					}
; 1677 : 					continue;

	jmp	$LN5@matrix_add

; 1678 : 				}

	jmp	SHORT $LN10@matrix_add
$LN9@matrix_add:

; 1679 : 				else if (i_depth == 3)

	movsx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 3
	jne	SHORT $LN14@matrix_add

; 1680 : 				{
; 1681 : 					_mat_inf[x + (y << 3)] = 4;

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_inf$[ebp]
	mov	BYTE PTR [eax+ecx*8], 4

; 1682 : 					continue;

	jmp	$LN5@matrix_add

; 1683 : 				}

	jmp	SHORT $LN10@matrix_add
$LN14@matrix_add:

; 1684 : 				else if (abs(_mat_inf[x + (y << 3)] - _mat_sup[x + (y << 3)]) != _nb_level)

	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_inf$[ebp]
	movzx	edx, BYTE PTR [eax+ecx*8]
	movsx	eax, BYTE PTR _x$[ebp]
	movsx	ecx, BYTE PTR _y$[ebp]
	add	eax, DWORD PTR __mat_sup$[ebp]
	movzx	eax, BYTE PTR [eax+ecx*8]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	movsx	ecx, BYTE PTR __nb_level$[ebp]
	cmp	eax, ecx
	je	SHORT $LN10@matrix_add

; 1685 : 				{
; 1686 : 					fill_matrix_with_depth(_mat_inf, x, y, i_depth + 1);

	movsx	eax, BYTE PTR _i_depth$[ebp]
	add	eax, 1
	push	eax
	movsx	ecx, BYTE PTR _y$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR __mat_inf$[ebp]
	push	eax
	call	_fill_matrix_with_depth
	add	esp, 16					; 00000010H
$LN10@matrix_add:

; 1687 : 				}
; 1688 : 				x += (8 >> (i_depth + 1)) - 1;

	movsx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 1
	mov	eax, 8
	sar	eax, cl
	movsx	ecx, BYTE PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	BYTE PTR _x$[ebp], dl
$LN8@matrix_add:

; 1689 : 			}
; 1690 : 		}

	jmp	$LN5@matrix_add
$LN6@matrix_add:

; 1691 : 	}

	jmp	$LN2@matrix_add
$LN1@matrix_add:

; 1692 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matrix_add_level_roi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _matrix_mask
_TEXT	SEGMENT
tv89 = -220						; size = 4
_i$1 = -20						; size = 4
_i_size$ = -8						; size = 4
__mat_mask$ = 8						; size = 4
__mat_src$ = 12						; size = 4
__size_w$ = 16						; size = 4
__size_h$ = 20						; size = 4
_matrix_mask PROC					; COMDAT

; 1628 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1629 : 	if (_mat_mask == NULL || _mat_src == NULL)

	cmp	DWORD PTR __mat_mask$[ebp], 0
	je	SHORT $LN6@matrix_mas
	cmp	DWORD PTR __mat_src$[ebp], 0
	jne	SHORT $LN5@matrix_mas
$LN6@matrix_mas:

; 1630 : 	{
; 1631 : 		fprintf(stderr, "null pointer as parameter.");

	push	OFFSET ??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 1632 : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN8@matrix_mas
	mov	ecx, DWORD PTR ?__LINE__Var@?0??matrix_mask@@9@9
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@matrix_mas:

; 1633 : 		return;

	jmp	SHORT $LN1@matrix_mas
$LN5@matrix_mas:

; 1634 : 	}
; 1635 : 	size_t i_size = _size_h * _size_w;

	mov	eax, DWORD PTR __size_h$[ebp]
	imul	eax, DWORD PTR __size_w$[ebp]
	mov	DWORD PTR _i_size$[ebp], eax

; 1636 : 	for (size_t i = 0; i < i_size; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@matrix_mas
$LN2@matrix_mas:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@matrix_mas:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _i_size$[ebp]
	jae	SHORT $LN1@matrix_mas

; 1637 : 	{
; 1638 : 		_mat_mask[i] = (_mat_mask[i] ^ _mat_src[i]) != 0 ? 1 : 0;

	mov	eax, DWORD PTR __mat_mask$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR __mat_src$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	ecx, eax
	je	SHORT $LN9@matrix_mas
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN10@matrix_mas
$LN9@matrix_mas:
	mov	DWORD PTR tv89[ebp], 0
$LN10@matrix_mas:
	mov	ecx, DWORD PTR __mat_mask$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	dl, BYTE PTR tv89[ebp]
	mov	BYTE PTR [ecx], dl

; 1639 : 	}

	jmp	SHORT $LN2@matrix_mas
$LN1@matrix_mas:

; 1640 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matrix_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _merge_matrix_64
_TEXT	SEGMENT
_i_x$1 = -129						; size = 1
_i_y$2 = -117						; size = 1
_mat_tmp$ = -108					; size = 64
_retval$ = -33						; size = 1
_nb_block$ = -24					; size = 4
_i_depth$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
__mat_seed$ = 8						; size = 4
__mat_dst$ = 12						; size = 4
_merge_matrix_64 PROC					; COMDAT

; 1551 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1552 : 	uint8_t i_depth = 0;

	mov	BYTE PTR _i_depth$[ebp], 0

; 1553 : 	uint32_t nb_block = 0;

	mov	DWORD PTR _nb_block$[ebp], 0

; 1554 : 	uint8_t retval = 0;

	mov	BYTE PTR _retval$[ebp], 0

; 1555 : 	uint8_t mat_tmp[64];
; 1556 : 	memcpy(mat_tmp, _mat_seed, 64);

	push	64					; 00000040H
	mov	eax, DWORD PTR __mat_seed$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mat_tmp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1557 : 	for (uint_fast8_t i_y = 0; i_y < 8; ++i_y)

	mov	BYTE PTR _i_y$2[ebp], 0
	jmp	SHORT $LN4@merge_matr
$LN2@merge_matr:
	mov	al, BYTE PTR _i_y$2[ebp]
	add	al, 1
	mov	BYTE PTR _i_y$2[ebp], al
$LN4@merge_matr:
	movzx	eax, BYTE PTR _i_y$2[ebp]
	cmp	eax, 8
	jge	$exit_64$16

; 1558 : 	{
; 1559 : 		for (uint_fast8_t i_x = 0; i_x < 8; ++i_x)

	mov	BYTE PTR _i_x$1[ebp], 0
	jmp	SHORT $LN7@merge_matr
$LN5@merge_matr:
	mov	al, BYTE PTR _i_x$1[ebp]
	add	al, 1
	mov	BYTE PTR _i_x$1[ebp], al
$LN7@merge_matr:
	movzx	eax, BYTE PTR _i_x$1[ebp]
	cmp	eax, 8
	jge	$LN6@merge_matr

; 1560 : 		{
; 1561 : 			i_depth = mat_tmp[i_x + (i_y << 3)];

	movzx	eax, BYTE PTR _i_x$1[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	lea	edx, DWORD PTR _mat_tmp$[ebp+eax]
	mov	al, BYTE PTR [edx+ecx*8]
	mov	BYTE PTR _i_depth$[ebp], al

; 1562 : 
; 1563 : 			if (i_depth == 4)

	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jne	SHORT $LN8@merge_matr

; 1564 : 			{
; 1565 : 				_mat_dst[i_x + (i_y << 3)] = 3;/*!< All depth 4 blocks are merged by default to depth 3 */

	movzx	eax, BYTE PTR _i_x$1[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	add	eax, DWORD PTR __mat_dst$[ebp]
	mov	BYTE PTR [eax+ecx*8], 3

; 1566 : 				retval = 1;

	mov	BYTE PTR _retval$[ebp], 1

; 1567 : 				continue; /*!< Skip the modulo operations and conditional tests */

	jmp	SHORT $LN5@merge_matr
$LN8@merge_matr:

; 1568 : 			}
; 1569 : 
; 1570 : 			if (i_depth == 0) /*!< Skip all the loop process, since 0 depth means there will be no other depths tested */

	movzx	eax, BYTE PTR _i_depth$[ebp]
	test	eax, eax
	jne	SHORT $LN9@merge_matr

; 1571 : 			{
; 1572 : 				_mat_dst[i_x + (i_y << 3)] = i_depth;

	movzx	eax, BYTE PTR _i_x$1[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	add	eax, DWORD PTR __mat_dst$[ebp]
	mov	dl, BYTE PTR _i_depth$[ebp]
	mov	BYTE PTR [eax+ecx*8], dl

; 1573 : 				memset(_mat_dst, 0, 64);

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR __mat_dst$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1574 : 				goto exit_64;

	jmp	$exit_64$16
$LN9@merge_matr:

; 1575 : 			}
; 1576 : 
; 1577 : 			nb_block = (16 >> i_depth); /*!< Offset to go check the three other blocks */

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 16					; 00000010H
	sar	eax, cl
	mov	DWORD PTR _nb_block$[ebp], eax

; 1578 : 										/*!< Check if we are on the fourth block of a depth*/
; 1579 : 			if ((i_x % nb_block == (8 >> i_depth)) &&

	movzx	eax, BYTE PTR _i_x$1[ebp]
	xor	edx, edx
	div	DWORD PTR _nb_block$[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 8
	sar	eax, cl
	cmp	edx, eax
	jne	$LN10@merge_matr
	movzx	eax, BYTE PTR _i_y$2[ebp]
	xor	edx, edx
	div	DWORD PTR _nb_block$[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 8
	sar	eax, cl
	cmp	edx, eax
	jne	$LN10@merge_matr

; 1580 : 				(i_y % nb_block == (8 >> i_depth)))
; 1581 : 			{
; 1582 : 				retval = 1;

	mov	BYTE PTR _retval$[ebp], 1

; 1583 : 				nb_block = (8 >> i_depth); /*!< Generate the real offset for the array */

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 8
	sar	eax, cl
	mov	DWORD PTR _nb_block$[ebp], eax

; 1584 : 										   /*
; 1585 : 										   *   x 0 1 2 3 4 5 6 7
; 1586 : 										   * y
; 1587 : 										   * 0   3 3 2 2 1 1 1 1
; 1588 : 										   * 1   3 3 2 2 1 1 1 1
; 1589 : 										   * 2   2 2 2 2 1 1 1 1
; 1590 : 										   * 3   2 2 2 2 1 1 1 1
; 1591 : 										   * 4   1 1 1 1 2 2 2 2
; 1592 : 										   * 5   1 1 1 1 2 2 2 2
; 1593 : 										   * 6   1 1 1 1 2 2 2 2
; 1594 : 										   * 7   1 1 1 1 2 2 2 2
; 1595 : 										   *
; 1596 : 										   * exemple for the first fourth block of depth 2 :
; 1597 : 										   * 8 >> 2 = 2
; 1598 : 										   * nb_block = 4 -> x % 4 == 2 -> x = 2
; 1599 : 										   *              -> y % 4 == 2 -> y = 2
; 1600 : 										   * nb_block = 2 -> check blocs[(0,2),(2,0),(0,0)]
; 1601 : 										   * all informations are available
; 1602 : 										   */
; 1603 : 				if (mat_tmp[i_x - nb_block + (i_y << 3)] == i_depth &&
; 1604 : 					mat_tmp[i_x + ((i_y - nb_block) << 3)] == i_depth &&

	movzx	eax, BYTE PTR _i_x$1[ebp]
	sub	eax, DWORD PTR _nb_block$[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	lea	edx, DWORD PTR _mat_tmp$[ebp+eax]
	movzx	eax, BYTE PTR [edx+ecx*8]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN10@merge_matr
	movzx	eax, BYTE PTR _i_x$1[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	sub	ecx, DWORD PTR _nb_block$[ebp]
	lea	edx, DWORD PTR _mat_tmp$[ebp+eax]
	movzx	eax, BYTE PTR [edx+ecx*8]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN10@merge_matr
	movzx	eax, BYTE PTR _i_x$1[ebp]
	sub	eax, DWORD PTR _nb_block$[ebp]
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	sub	ecx, DWORD PTR _nb_block$[ebp]
	lea	edx, DWORD PTR _mat_tmp$[ebp+eax]
	movzx	eax, BYTE PTR [edx+ecx*8]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN10@merge_matr

; 1605 : 					mat_tmp[i_x - nb_block + ((i_y - nb_block) << 3)] == i_depth)
; 1606 : 				{
; 1607 : 					fill_matrix_with_depth(_mat_dst, i_x - nb_block, i_y - nb_block, i_depth - 1);

	movzx	eax, BYTE PTR _i_depth$[ebp]
	sub	eax, 1
	push	eax
	movzx	ecx, BYTE PTR _i_y$2[ebp]
	sub	ecx, DWORD PTR _nb_block$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _i_x$1[ebp]
	sub	edx, DWORD PTR _nb_block$[ebp]
	push	edx
	mov	eax, DWORD PTR __mat_dst$[ebp]
	push	eax
	call	_fill_matrix_with_depth
	add	esp, 16					; 00000010H
$LN10@merge_matr:

; 1608 : 				}
; 1609 : 			}
; 1610 : 		}

	jmp	$LN5@merge_matr
$LN6@merge_matr:

; 1611 : 	}

	jmp	$LN2@merge_matr
$exit_64$16:

; 1612 : exit_64:
; 1613 : 	return retval;

	mov	al, BYTE PTR _retval$[ebp]

; 1614 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@merge_matr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@merge_matr:
	DD	1
	DD	$LN14@merge_matr
$LN14@merge_matr:
	DD	-108					; ffffff94H
	DD	64					; 00000040H
	DD	$LN13@merge_matr
$LN13@merge_matr:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_merge_matrix_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _fill_matrix_with_depth
_TEXT	SEGMENT
tv68 = -220						; size = 4
_block$ = -20						; size = 4
_i$ = -8						; size = 4
_matrix$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 1
_fill_matrix_with_depth PROC				; COMDAT

; 1533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1534 : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1535 : 	int32_t block = depth < 4 ? (8 >> depth) : 1; //nb blocks in 8*8 block

	movsx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 4
	jge	SHORT $LN6@fill_matri
	movsx	ecx, BYTE PTR _depth$[ebp]
	mov	edx, 8
	sar	edx, cl
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN7@fill_matri
$LN6@fill_matri:
	mov	DWORD PTR tv68[ebp], 1
$LN7@fill_matri:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _block$[ebp], eax

; 1536 : 	for (i = y; i < y + block; ++i)

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@fill_matri
$LN2@fill_matri:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@fill_matri:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@fill_matri

; 1537 : 	{
; 1538 : 		memset(matrix + x + (i << 3), depth, block);

	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _matrix$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1539 : 	}

	jmp	SHORT $LN2@fill_matri
$LN1@fill_matri:

; 1540 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_matrix_with_depth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _os_luma_qt_pred
_TEXT	SEGMENT
_arr_features$ = -32804					; size = 20
_features64$ = -32776					; size = 96
_arr_features_32$ = -32672				; size = 384
_arr_features_16$ = -32280				; size = 1536
_arr_features_8$ = -30736				; size = 6144
_arr_features_4$ = -24584				; size = 24576
__$ArrayPad$ = -4					; size = 4
_ml_intra_depth_ctu$ = 8				; size = 4
_luma_px$ = 12						; size = 4
_qp$ = 16						; size = 1
_arr_CDM$ = 20						; size = 4
_os_luma_qt_pred PROC					; COMDAT

; 1491 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 34344				; 00008628H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-34344]
	mov	ecx, 8586				; 0000218aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1492 : 	// Features array per depth
; 1493 : 	features_s arr_features_4[256];
; 1494 : 	features_s arr_features_8[64];
; 1495 : 	features_s arr_features_16[16];
; 1496 : 	features_s arr_features_32[4];
; 1497 : 	features_s features64;
; 1498 : 
; 1499 : 	// Initialize to 0 all the features
; 1500 : 	features_init_array(arr_features_4, 256, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _arr_features_4$[ebp]
	push	ecx
	call	_features_init_array
	add	esp, 12					; 0000000cH

; 1501 : 	features_init_array(arr_features_8, 64, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	push	eax
	push	64					; 00000040H
	lea	ecx, DWORD PTR _arr_features_8$[ebp]
	push	ecx
	call	_features_init_array
	add	esp, 12					; 0000000cH

; 1502 : 	features_init_array(arr_features_16, 16, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	push	eax
	push	16					; 00000010H
	lea	ecx, DWORD PTR _arr_features_16$[ebp]
	push	ecx
	call	_features_init_array
	add	esp, 12					; 0000000cH

; 1503 : 	features_init_array(arr_features_32, 4, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	push	eax
	push	4
	lea	ecx, DWORD PTR _arr_features_32$[ebp]
	push	ecx
	call	_features_init_array
	add	esp, 12					; 0000000cH

; 1504 : 	features_init_array(&features64, 1, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _features64$[ebp]
	push	ecx
	call	_features_init_array
	add	esp, 12					; 0000000cH

; 1505 : 
; 1506 : 	// Commpute the features for the current CTU for all depth
; 1507 : 	features_s* arr_features[5];
; 1508 : 	arr_features[0] = &features64;

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _features64$[ebp]
	mov	DWORD PTR _arr_features$[ebp+ecx], edx

; 1509 : 	arr_features[1] = arr_features_32;

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _arr_features_32$[ebp]
	mov	DWORD PTR _arr_features$[ebp+eax], ecx

; 1510 : 	arr_features[2] = arr_features_16; 

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _arr_features_16$[ebp]
	mov	DWORD PTR _arr_features$[ebp+eax], ecx

; 1511 : 	arr_features[3] = arr_features_8;

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _arr_features_8$[ebp]
	mov	DWORD PTR _arr_features$[ebp+ecx], edx

; 1512 : 	arr_features[4] = arr_features_4;

	mov	eax, 4
	shl	eax, 2
	lea	ecx, DWORD PTR _arr_features_4$[ebp]
	mov	DWORD PTR _arr_features$[ebp+eax], ecx

; 1513 : 
; 1514 : 
; 1515 : 	features_compute_all(arr_features, luma_px);

	mov	eax, DWORD PTR _luma_px$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arr_features$[ebp]
	push	ecx
	call	_features_compute_all
	add	esp, 8

; 1516 : 
; 1517 : 	// Generate the CDM for the current CTU
; 1518 : 	
; 1519 : 	/*!< Set the depth map to 4 by default */
; 1520 : 	memset(arr_CDM, 4, 64);

	push	64					; 00000040H
	push	4
	mov	eax, DWORD PTR _arr_CDM$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1521 : 	ml_os_qt_gen(arr_CDM, arr_features_4, arr_features_8, 4, 1, RESTRAINED_FLAG);

	push	1
	push	1
	push	4
	lea	eax, DWORD PTR _arr_features_8$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arr_features_4$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_CDM$[ebp]
	push	edx
	call	_ml_os_qt_gen
	add	esp, 24					; 00000018H

; 1522 : 	
; 1523 : 
; 1524 : 	ml_os_qt_gen(arr_CDM, arr_features_8, arr_features_16, 3, 1, RESTRAINED_FLAG);

	push	1
	push	1
	push	3
	lea	eax, DWORD PTR _arr_features_16$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arr_features_8$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_CDM$[ebp]
	push	edx
	call	_ml_os_qt_gen
	add	esp, 24					; 00000018H

; 1525 : 	ml_os_qt_gen(arr_CDM, arr_features_16, arr_features_32, 2, 1, RESTRAINED_FLAG);

	push	1
	push	1
	push	2
	lea	eax, DWORD PTR _arr_features_32$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arr_features_16$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_CDM$[ebp]
	push	edx
	call	_ml_os_qt_gen
	add	esp, 24					; 00000018H

; 1526 : 	ml_os_qt_gen(arr_CDM, arr_features_32, &features64, 1, 1, RESTRAINED_FLAG);

	push	1
	push	1
	push	1
	lea	eax, DWORD PTR _features64$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arr_features_32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_CDM$[ebp]
	push	edx
	call	_ml_os_qt_gen
	add	esp, 24					; 00000018H

; 1527 : 
; 1528 : 
; 1529 : 
; 1530 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@os_luma_qt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 34344				; 00008628H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@os_luma_qt:
	DD	6
	DD	$LN9@os_luma_qt
$LN9@os_luma_qt:
	DD	-24584					; ffff9ff8H
	DD	24576					; 00006000H
	DD	$LN3@os_luma_qt
	DD	-30736					; ffff87f0H
	DD	6144					; 00001800H
	DD	$LN4@os_luma_qt
	DD	-32280					; ffff81e8H
	DD	1536					; 00000600H
	DD	$LN5@os_luma_qt
	DD	-32672					; ffff8060H
	DD	384					; 00000180H
	DD	$LN6@os_luma_qt
	DD	-32776					; ffff7ff8H
	DD	96					; 00000060H
	DD	$LN7@os_luma_qt
	DD	-32804					; ffff7fdcH
	DD	20					; 00000014H
	DD	$LN8@os_luma_qt
$LN8@os_luma_qt:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN7@os_luma_qt:
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
$LN6@os_luma_qt:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	0
$LN5@os_luma_qt:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
$LN4@os_luma_qt:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	56					; 00000038H
	DB	0
$LN3@os_luma_qt:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	52					; 00000034H
	DB	0
_os_luma_qt_pred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _ml_os_qt_gen
_TEXT	SEGMENT
tv292 = -516						; size = 4
tv282 = -512						; size = 4
tv275 = -512						; size = 4
tv268 = -512						; size = 4
tv75 = -512						; size = 4
_tmp$1 = -312						; size = 8
_i_subCU$2 = -296					; size = 2
_condition$3 = -284					; size = 4
_pred$4 = -269						; size = 1
_split_prediction$5 = -257				; size = 1
_merge_prediction$6 = -248				; size = 4
_i_cu_up$7 = -236					; size = 2
_i_cu_3$8 = -224					; size = 2
_i_cu_2$9 = -212					; size = 2
_i_cu_1$10 = -200					; size = 2
_i_cu_0$11 = -188					; size = 2
_check_flag$12 = -173					; size = 1
_x$13 = -164						; size = 2
_y$14 = -152						; size = 2
_inc$ = -140						; size = 4
_i_nbBlocks$ = -128					; size = 2
_i_rdepth$ = -113					; size = 1
_d_nb_bad$ = -104					; size = 8
_d_nb_iter$ = -88					; size = 8
_prediction_function_split$ = -72			; size = 4
_prediction_function_merge$ = -60			; size = 4
_predict_func_split$ = -48				; size = 16
_predict_func_merge$ = -24				; size = 16
__$ArrayPad$ = -4					; size = 4
_arr_depthMap$ = 8					; size = 4
_arr_features_cur$ = 12					; size = 4
_arr_features_up$ = 16					; size = 4
_i_depth$ = 20						; size = 1
__level$ = 24						; size = 4
_limited_flag$ = 28					; size = 1
_ml_os_qt_gen PROC					; COMDAT

; 1414 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1415 : 	
; 1416 : 
; 1417 : 		tree_predict predict_func_merge[4] = {

	mov	DWORD PTR _predict_func_merge$[ebp], OFFSET _tree_predict_merge_depth_1
	mov	DWORD PTR _predict_func_merge$[ebp+4], OFFSET _tree_predict_merge_depth_2
	mov	DWORD PTR _predict_func_merge$[ebp+8], OFFSET _tree_predict_merge_depth_3
	mov	DWORD PTR _predict_func_merge$[ebp+12], OFFSET _tree_predict_merge_depth_4

; 1418 : 				tree_predict_merge_depth_1,
; 1419 : 				tree_predict_merge_depth_2,
; 1420 : 				tree_predict_merge_depth_3,
; 1421 : 				tree_predict_merge_depth_4
; 1422 : 		};
; 1423 : 
; 1424 : 		tree_predict predict_func_split[4] = {

	mov	DWORD PTR _predict_func_split$[ebp], OFFSET _tree_predict_split_depth_0
	mov	DWORD PTR _predict_func_split$[ebp+4], OFFSET _tree_predict_split_depth_1
	mov	DWORD PTR _predict_func_split$[ebp+8], OFFSET _tree_predict_split_depth_2
	mov	DWORD PTR _predict_func_split$[ebp+12], OFFSET _tree_predict_split_depth_3

; 1425 : 				tree_predict_split_depth_0,
; 1426 : 				tree_predict_split_depth_1,
; 1427 : 				tree_predict_split_depth_2,
; 1428 : 				tree_predict_split_depth_3
; 1429 : 		};
; 1430 : 	
; 1431 : 	tree_predict prediction_function_merge = predict_func_merge[i_depth - 1];

	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, DWORD PTR _predict_func_merge$[ebp+eax*4-4]
	mov	DWORD PTR _prediction_function_merge$[ebp], ecx

; 1432 : 	tree_predict prediction_function_split = predict_func_split[i_depth - 1];

	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, DWORD PTR _predict_func_split$[ebp+eax*4-4]
	mov	DWORD PTR _prediction_function_split$[ebp], ecx

; 1433 : 
; 1434 : 	double d_nb_iter;
; 1435 : 	double d_nb_bad;
; 1436 : 
; 1437 : 	uint8_t i_rdepth = i_depth < 4 ? i_depth : 3;

	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jge	SHORT $LN12@ml_os_qt_g
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN13@ml_os_qt_g
$LN12@ml_os_qt_g:
	mov	DWORD PTR tv75[ebp], 3
$LN13@ml_os_qt_g:
	mov	dl, BYTE PTR tv75[ebp]
	mov	BYTE PTR _i_rdepth$[ebp], dl

; 1438 : 
; 1439 : 	int16_t i_nbBlocks = 2 << (i_depth - 1);

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	sub	ecx, 1
	mov	eax, 2
	shl	eax, cl
	mov	WORD PTR _i_nbBlocks$[ebp], ax

; 1440 : 
; 1441 : 	int inc = 2;

	mov	DWORD PTR _inc$[ebp], 2

; 1442 : 	for (int16_t y = 0; y < i_nbBlocks; y += inc)

	xor	eax, eax
	mov	WORD PTR _y$14[ebp], ax
	jmp	SHORT $LN4@ml_os_qt_g
$LN2@ml_os_qt_g:
	movsx	eax, WORD PTR _y$14[ebp]
	add	eax, DWORD PTR _inc$[ebp]
	mov	WORD PTR _y$14[ebp], ax
$LN4@ml_os_qt_g:
	movsx	eax, WORD PTR _y$14[ebp]
	movsx	ecx, WORD PTR _i_nbBlocks$[ebp]
	cmp	eax, ecx
	jge	$LN1@ml_os_qt_g

; 1443 : 	{
; 1444 : 		for (int16_t x = 0; x < i_nbBlocks; x += inc)

	xor	eax, eax
	mov	WORD PTR _x$13[ebp], ax
	jmp	SHORT $LN7@ml_os_qt_g
$LN5@ml_os_qt_g:
	movsx	eax, WORD PTR _x$13[ebp]
	add	eax, DWORD PTR _inc$[ebp]
	mov	WORD PTR _x$13[ebp], ax
$LN7@ml_os_qt_g:
	movsx	eax, WORD PTR _x$13[ebp]
	movsx	ecx, WORD PTR _i_nbBlocks$[ebp]
	cmp	eax, ecx
	jge	$LN6@ml_os_qt_g

; 1445 : 		{
; 1446 : 			uint8_t check_flag = 1;

	mov	BYTE PTR _check_flag$12[ebp], 1

; 1447 : 			/*!< Check if neighboring blocks are of the same size */
; 1448 : 			if ((limited_flag == 1) && (i_depth != 4))

	movzx	eax, BYTE PTR _limited_flag$[ebp]
	cmp	eax, 1
	jne	SHORT $LN8@ml_os_qt_g
	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	je	SHORT $LN8@ml_os_qt_g

; 1449 : 			{
; 1450 : 				check_flag = neighbor_constrain_bu(arr_depthMap, x << (3 - i_depth), y << (3 - i_depth), i_depth, _level);

	mov	eax, DWORD PTR __level$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	push	ecx
	movsx	edx, WORD PTR _y$14[ebp]
	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, 3
	sub	ecx, eax
	shl	edx, cl
	push	edx
	movsx	edx, WORD PTR _x$13[ebp]
	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, 3
	sub	ecx, eax
	shl	edx, cl
	push	edx
	mov	ecx, DWORD PTR _arr_depthMap$[ebp]
	push	ecx
	call	_neighbor_constrain_bu
	add	esp, 20					; 00000014H
	mov	BYTE PTR _check_flag$12[ebp], al
$LN8@ml_os_qt_g:

; 1451 : 			}
; 1452 : 
; 1453 : 			if (check_flag)

	movzx	eax, BYTE PTR _check_flag$12[ebp]
	test	eax, eax
	je	$LN9@ml_os_qt_g

; 1454 : 			{
; 1455 : 				int16_t i_cu_0 = x + (y << i_depth);

	movsx	eax, WORD PTR _x$13[ebp]
	movsx	edx, WORD PTR _y$14[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu_0$11[ebp], ax

; 1456 : 				int16_t i_cu_1 = x + 1 + (y << i_depth);

	movsx	eax, WORD PTR _x$13[ebp]
	movsx	edx, WORD PTR _y$14[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	lea	eax, DWORD PTR [eax+edx+1]
	mov	WORD PTR _i_cu_1$10[ebp], ax

; 1457 : 				int16_t i_cu_2 = x + ((y + 1) << i_depth);

	movsx	eax, WORD PTR _x$13[ebp]
	movsx	edx, WORD PTR _y$14[ebp]
	add	edx, 1
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu_2$9[ebp], ax

; 1458 : 				int16_t i_cu_3 = x + 1 + ((y + 1) << i_depth);

	movsx	eax, WORD PTR _x$13[ebp]
	movsx	edx, WORD PTR _y$14[ebp]
	add	edx, 1
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	lea	eax, DWORD PTR [eax+edx+1]
	mov	WORD PTR _i_cu_3$8[ebp], ax

; 1459 : 				int16_t i_cu_up = x / 2 + (y / 2 << (i_depth - 1));

	movsx	eax, WORD PTR _x$13[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	movsx	eax, WORD PTR _y$14[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	sub	ecx, 1
	shl	eax, cl
	add	esi, eax
	mov	WORD PTR _i_cu_up$7[ebp], si

; 1460 : 
; 1461 : 
; 1462 : 				int8_t merge_prediction[4];
; 1463 : 				int8_t split_prediction;
; 1464 : 
; 1465 : 
; 1466 : 				merge_prediction[0] = prediction_function_merge(&arr_features_cur[i_cu_0], &d_nb_iter, &d_nb_bad);

	mov	esi, esp
	lea	eax, DWORD PTR _d_nb_bad$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d_nb_iter$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i_cu_0$11[ebp]
	imul	eax, edx, 96
	add	eax, DWORD PTR _arr_features_cur$[ebp]
	push	eax
	call	DWORD PTR _prediction_function_merge$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _merge_prediction$6[ebp+edx], al

; 1467 : 				merge_prediction[1] = prediction_function_merge(&arr_features_cur[i_cu_1], &d_nb_iter, &d_nb_bad);

	mov	esi, esp
	lea	eax, DWORD PTR _d_nb_bad$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d_nb_iter$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i_cu_1$10[ebp]
	imul	eax, edx, 96
	add	eax, DWORD PTR _arr_features_cur$[ebp]
	push	eax
	call	DWORD PTR _prediction_function_merge$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _merge_prediction$6[ebp+ecx], al

; 1468 : 				merge_prediction[2] = prediction_function_merge(&arr_features_cur[i_cu_2], &d_nb_iter, &d_nb_bad);

	mov	esi, esp
	lea	eax, DWORD PTR _d_nb_bad$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d_nb_iter$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i_cu_2$9[ebp]
	imul	eax, edx, 96
	add	eax, DWORD PTR _arr_features_cur$[ebp]
	push	eax
	call	DWORD PTR _prediction_function_merge$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR _merge_prediction$6[ebp+ecx], al

; 1469 : 				merge_prediction[3] = prediction_function_merge(&arr_features_cur[i_cu_3], &d_nb_iter, &d_nb_bad);

	mov	esi, esp
	lea	eax, DWORD PTR _d_nb_bad$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d_nb_iter$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i_cu_3$8[ebp]
	imul	eax, edx, 96
	add	eax, DWORD PTR _arr_features_cur$[ebp]
	push	eax
	call	DWORD PTR _prediction_function_merge$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _merge_prediction$6[ebp+edx], al

; 1470 : 				split_prediction = prediction_function_split(&arr_features_up[i_cu_up], &d_nb_iter, &d_nb_bad);

	mov	esi, esp
	lea	eax, DWORD PTR _d_nb_bad$[ebp]
	push	eax
	lea	ecx, DWORD PTR _d_nb_iter$[ebp]
	push	ecx
	movsx	edx, WORD PTR _i_cu_up$7[ebp]
	imul	eax, edx, 96
	add	eax, DWORD PTR _arr_features_up$[ebp]
	push	eax
	call	DWORD PTR _prediction_function_split$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _split_prediction$5[ebp], al

; 1471 : 
; 1472 : 				int8_t pred = combined_tree_function(merge_prediction, split_prediction, (i_depth >= 4) ? 8 : 9, i_depth);

	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jl	SHORT $LN14@ml_os_qt_g
	mov	DWORD PTR tv268[ebp], 8
	jmp	SHORT $LN15@ml_os_qt_g
$LN14@ml_os_qt_g:
	mov	DWORD PTR tv268[ebp], 9
$LN15@ml_os_qt_g:
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	push	ecx
	movzx	edx, BYTE PTR tv268[ebp]
	push	edx
	movzx	eax, BYTE PTR _split_prediction$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _merge_prediction$6[ebp]
	push	ecx
	call	_combined_tree_function
	add	esp, 16					; 00000010H
	mov	BYTE PTR _pred$4[ebp], al

; 1473 : 				int condition = (pred < 0) ? 1 : 0;

	movsx	eax, BYTE PTR _pred$4[ebp]
	test	eax, eax
	jge	SHORT $LN16@ml_os_qt_g
	mov	DWORD PTR tv275[ebp], 1
	jmp	SHORT $LN17@ml_os_qt_g
$LN16@ml_os_qt_g:
	mov	DWORD PTR tv275[ebp], 0
$LN17@ml_os_qt_g:
	mov	ecx, DWORD PTR tv275[ebp]
	mov	DWORD PTR _condition$3[ebp], ecx

; 1474 : 
; 1475 : 				if (condition)

	cmp	DWORD PTR _condition$3[ebp], 0
	je	$LN9@ml_os_qt_g

; 1476 : 				{
; 1477 : 					int16_t i_subCU = CR_GET_CU_D3((i_depth < 4 ? x : x / 2), (i_depth < 4 ? y : y / 2), i_rdepth);

	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jge	SHORT $LN18@ml_os_qt_g
	movsx	ecx, WORD PTR _x$13[ebp]
	mov	DWORD PTR tv282[ebp], ecx
	jmp	SHORT $LN19@ml_os_qt_g
$LN18@ml_os_qt_g:
	movsx	eax, WORD PTR _x$13[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv282[ebp], eax
$LN19@ml_os_qt_g:
	movzx	edx, BYTE PTR _i_depth$[ebp]
	cmp	edx, 4
	jge	SHORT $LN20@ml_os_qt_g
	movsx	eax, WORD PTR _y$14[ebp]
	mov	DWORD PTR tv292[ebp], eax
	jmp	SHORT $LN21@ml_os_qt_g
$LN20@ml_os_qt_g:
	movsx	eax, WORD PTR _y$14[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv292[ebp], eax
$LN21@ml_os_qt_g:
	movzx	ecx, BYTE PTR _i_rdepth$[ebp]
	mov	edx, 3
	sub	edx, ecx
	mov	eax, 1
	mov	ecx, edx
	shl	eax, cl
	imul	eax, DWORD PTR tv282[ebp]
	movzx	ecx, BYTE PTR _i_rdepth$[ebp]
	mov	edx, 6
	sub	edx, ecx
	mov	esi, DWORD PTR tv292[ebp]
	mov	ecx, edx
	shl	esi, cl
	add	eax, esi
	mov	WORD PTR _i_subCU$2[ebp], ax

; 1478 : 					vect_2D tmp;
; 1479 : 					tmp.x = i_subCU % 8;

	movsx	eax, WORD PTR _i_subCU$2[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN30@ml_os_qt_g
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN30@ml_os_qt_g:
	mov	DWORD PTR _tmp$1[ebp], eax

; 1480 : 					tmp.y = i_subCU / 8;

	movsx	eax, WORD PTR _i_subCU$2[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _tmp$1[ebp+4], eax

; 1481 : 					fill_depth_matrix_8(arr_depthMap, &tmp, i_depth - 1, i_depth - 1);

	movzx	eax, BYTE PTR _i_depth$[ebp]
	sub	eax, 1
	push	eax
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	sub	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _arr_depthMap$[ebp]
	push	eax
	call	_fill_depth_matrix_8
	add	esp, 16					; 00000010H
$LN9@ml_os_qt_g:

; 1482 : 				}
; 1483 : 			}
; 1484 : 		}

	jmp	$LN5@ml_os_qt_g
$LN6@ml_os_qt_g:

; 1485 : 	}

	jmp	$LN2@ml_os_qt_g
$LN1@ml_os_qt_g:

; 1486 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@ml_os_qt_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@ml_os_qt_g:
	DD	6
	DD	$LN28@ml_os_qt_g
$LN28@ml_os_qt_g:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN22@ml_os_qt_g
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN23@ml_os_qt_g
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN24@ml_os_qt_g
	DD	-104					; ffffff98H
	DD	8
	DD	$LN25@ml_os_qt_g
	DD	-248					; ffffff08H
	DD	4
	DD	$LN26@ml_os_qt_g
	DD	-312					; fffffec8H
	DD	8
	DD	$LN27@ml_os_qt_g
$LN27@ml_os_qt_g:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN26@ml_os_qt_g:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN25@ml_os_qt_g:
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN24@ml_os_qt_g:
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN23@ml_os_qt_g:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN22@ml_os_qt_g:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
_ml_os_qt_gen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _fill_depth_matrix_8
_TEXT	SEGMENT
_block$ = -44						; size = 4
_i$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_matrix$ = 8						; size = 4
_cu$ = 12						; size = 4
_curr_depth$ = 16					; size = 1
_val$ = 20						; size = 1
_fill_depth_matrix_8 PROC				; COMDAT

; 1386 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1387 : 	//convert cu coordinate
; 1388 : 	int32_t x = cu->x;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$[ebp], ecx

; 1389 : 	int32_t y = cu->y;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$[ebp], ecx

; 1390 : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1391 : 	int32_t block = (8 >> curr_depth); //nb blocks in 8*8 block

	movsx	ecx, BYTE PTR _curr_depth$[ebp]
	mov	eax, 8
	sar	eax, cl
	mov	DWORD PTR _block$[ebp], eax

; 1392 : 	for (i = y; i < y + block; ++i)

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@fill_depth
$LN2@fill_depth:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@fill_depth:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _block$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@fill_depth

; 1393 : 	{
; 1394 : 		memset(matrix + x + (i << 3), val, block);

	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _matrix$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1395 : 	}

	jmp	SHORT $LN2@fill_depth
$LN1@fill_depth:

; 1396 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fill_depth_matrix_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _combined_tree_function
_TEXT	SEGMENT
tv189 = -232						; size = 4
tv182 = -232						; size = 4
tv175 = -232						; size = 4
tv168 = -232						; size = 4
tv161 = -232						; size = 4
tv154 = -232						; size = 4
tv147 = -232						; size = 4
tv140 = -232						; size = 4
tv133 = -232						; size = 4
tv128 = -232						; size = 4
tv91 = -232						; size = 4
tv86 = -232						; size = 4
tv81 = -232						; size = 4
tv77 = -232						; size = 4
tv72 = -232						; size = 4
_i$1 = -29						; size = 1
_pred_merge_tmp$ = -17					; size = 1
_prediction$ = -5					; size = 1
_merge_prediction$ = 8					; size = 4
_split_prediction$ = 12					; size = 1
_test_id$ = 16						; size = 1
_depth$ = 20						; size = 1
_combined_tree_function PROC				; COMDAT

; 1331 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1332 : 	int8_t prediction;
; 1333 : 	int8_t pred_merge_tmp = 0; // NUmber of sub-blocks non merge (=d)

	mov	BYTE PTR _pred_merge_tmp$[ebp], 0

; 1334 : 	for (int8_t i = 0; i < 4; i++) {

	mov	BYTE PTR _i$1[ebp], 0
	jmp	SHORT $LN4@combined_t
$LN2@combined_t:
	mov	al, BYTE PTR _i$1[ebp]
	add	al, 1
	mov	BYTE PTR _i$1[ebp], al
$LN4@combined_t:
	movsx	eax, BYTE PTR _i$1[ebp]
	cmp	eax, 4
	jge	SHORT $LN3@combined_t

; 1335 : 		pred_merge_tmp += (merge_prediction[i] > 0) ? 1 : 0;

	movsx	eax, BYTE PTR _i$1[ebp]
	mov	ecx, DWORD PTR _merge_prediction$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jle	SHORT $LN22@combined_t
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN23@combined_t
$LN22@combined_t:
	mov	DWORD PTR tv72[ebp], 0
$LN23@combined_t:
	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	add	eax, DWORD PTR tv72[ebp]
	mov	BYTE PTR _pred_merge_tmp$[ebp], al

; 1336 : 	}

	jmp	SHORT $LN2@combined_t
$LN3@combined_t:

; 1337 : 	switch (test_id) {// We don't merge (-1) if :

	movzx	eax, BYTE PTR _test_id$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	cmp	DWORD PTR tv77[ebp], 12			; 0000000cH
	ja	$LN20@combined_t
	mov	ecx, DWORD PTR tv77[ebp]
	jmp	DWORD PTR $LN50@combined_t[ecx*4]
$LN7@combined_t:

; 1338 : 	case 0: // At least one sub block non merge
; 1339 : 		prediction = (pred_merge_tmp >= 1) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 1
	jl	SHORT $LN24@combined_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv81[ebp], ecx
	jmp	SHORT $LN25@combined_t
$LN24@combined_t:
	mov	DWORD PTR tv81[ebp], -1
$LN25@combined_t:
	mov	dl, BYTE PTR tv81[ebp]
	mov	BYTE PTR _prediction$[ebp], dl

; 1340 : 		break;

	jmp	$LN5@combined_t
$LN8@combined_t:

; 1341 : 	case 1: // At least two sub blocks non merge
; 1342 : 		prediction = (pred_merge_tmp >= 2) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 2
	jl	SHORT $LN26@combined_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN27@combined_t
$LN26@combined_t:
	mov	DWORD PTR tv86[ebp], -1
$LN27@combined_t:
	mov	dl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _prediction$[ebp], dl

; 1343 : 		break;

	jmp	$LN5@combined_t
$LN9@combined_t:

; 1344 : 	case 2: // At least three sub blocks non merge
; 1345 : 		prediction = (pred_merge_tmp >= 3) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 3
	jl	SHORT $LN28@combined_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN29@combined_t
$LN28@combined_t:
	mov	DWORD PTR tv91[ebp], -1
$LN29@combined_t:
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR _prediction$[ebp], dl

; 1346 : 		break;

	jmp	$LN5@combined_t
$LN10@combined_t:

; 1347 : 	case 3: // All sub blocks non merge
; 1348 : 		prediction = (pred_merge_tmp >= 4) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 4
	jl	SHORT $LN30@combined_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN31@combined_t
$LN30@combined_t:
	mov	DWORD PTR tv128[ebp], -1
$LN31@combined_t:
	mov	dl, BYTE PTR tv128[ebp]
	mov	BYTE PTR _prediction$[ebp], dl

; 1349 : 		break;

	jmp	$LN5@combined_t
$LN11@combined_t:

; 1350 : 	case 4: // Up bock non merge ( = split)
; 1351 : 		prediction = (split_prediction == -1) ? depth : -1;

	movsx	eax, BYTE PTR _split_prediction$[ebp]
	cmp	eax, -1
	jne	SHORT $LN32@combined_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	jmp	SHORT $LN33@combined_t
$LN32@combined_t:
	mov	DWORD PTR tv133[ebp], -1
$LN33@combined_t:
	mov	dl, BYTE PTR tv133[ebp]
	mov	BYTE PTR _prediction$[ebp], dl

; 1352 : 		break;

	jmp	$LN5@combined_t
$LN12@combined_t:

; 1353 : 	case 5: // (At least one sub block non merge) & Up block non merge
; 1354 : 		prediction = ((pred_merge_tmp >= 1) && (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 1
	jl	SHORT $LN34@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	jne	SHORT $LN34@combined_t
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv140[ebp], edx
	jmp	SHORT $LN35@combined_t
$LN34@combined_t:
	mov	DWORD PTR tv140[ebp], -1
$LN35@combined_t:
	mov	al, BYTE PTR tv140[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1355 : 		break;

	jmp	$LN5@combined_t
$LN13@combined_t:

; 1356 : 	case 6: // (At least two sub blocks non merge) & Up block non merge
; 1357 : 		prediction = ((pred_merge_tmp >= 2) && (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 2
	jl	SHORT $LN36@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	jne	SHORT $LN36@combined_t
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN37@combined_t
$LN36@combined_t:
	mov	DWORD PTR tv147[ebp], -1
$LN37@combined_t:
	mov	al, BYTE PTR tv147[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1358 : 		break;

	jmp	$LN5@combined_t
$LN14@combined_t:

; 1359 : 	case 7: // (At least three sub blocks non merge) & Up block non merge
; 1360 : 		prediction = ((pred_merge_tmp >= 3) && (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 3
	jl	SHORT $LN38@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	jne	SHORT $LN38@combined_t
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN39@combined_t
$LN38@combined_t:
	mov	DWORD PTR tv154[ebp], -1
$LN39@combined_t:
	mov	al, BYTE PTR tv154[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1361 : 		break;

	jmp	$LN5@combined_t
$LN15@combined_t:

; 1362 : 	case 8: // (All sub blocks non merge) & Up block non merge
; 1363 : 		prediction = ((pred_merge_tmp >= 4) && (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 4
	jl	SHORT $LN40@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	jne	SHORT $LN40@combined_t
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv161[ebp], edx
	jmp	SHORT $LN41@combined_t
$LN40@combined_t:
	mov	DWORD PTR tv161[ebp], -1
$LN41@combined_t:
	mov	al, BYTE PTR tv161[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1364 : 		break;

	jmp	$LN5@combined_t
$LN16@combined_t:

; 1365 : 	case 9: // (At least one sub block non merge) | Up block non merge
; 1366 : 		prediction = ((pred_merge_tmp >= 1) || (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 1
	jge	SHORT $LN42@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	je	SHORT $LN42@combined_t
	mov	DWORD PTR tv168[ebp], -1
	jmp	SHORT $LN43@combined_t
$LN42@combined_t:
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv168[ebp], edx
$LN43@combined_t:
	mov	al, BYTE PTR tv168[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1367 : 		break;

	jmp	$LN5@combined_t
$LN17@combined_t:

; 1368 : 	case 10: // (At least two sub blocks non merge) | Up block non merge
; 1369 : 		prediction = ((pred_merge_tmp >= 2) || (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 2
	jge	SHORT $LN44@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	je	SHORT $LN44@combined_t
	mov	DWORD PTR tv175[ebp], -1
	jmp	SHORT $LN45@combined_t
$LN44@combined_t:
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv175[ebp], edx
$LN45@combined_t:
	mov	al, BYTE PTR tv175[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1370 : 		break;

	jmp	SHORT $LN5@combined_t
$LN18@combined_t:

; 1371 : 	case 11: // (At least three sub blocks non merge) | Up block non merge
; 1372 : 		prediction = ((pred_merge_tmp >= 3) || (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 3
	jge	SHORT $LN46@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	je	SHORT $LN46@combined_t
	mov	DWORD PTR tv182[ebp], -1
	jmp	SHORT $LN47@combined_t
$LN46@combined_t:
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv182[ebp], edx
$LN47@combined_t:
	mov	al, BYTE PTR tv182[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1373 : 		break;

	jmp	SHORT $LN5@combined_t
$LN19@combined_t:

; 1374 : 	case 12: // (All sub blocks non merge) | Up block non merge
; 1375 : 		prediction = ((pred_merge_tmp >= 4) || (split_prediction == -1)) ? depth : -1;

	movsx	eax, BYTE PTR _pred_merge_tmp$[ebp]
	cmp	eax, 4
	jge	SHORT $LN48@combined_t
	movsx	ecx, BYTE PTR _split_prediction$[ebp]
	cmp	ecx, -1
	je	SHORT $LN48@combined_t
	mov	DWORD PTR tv189[ebp], -1
	jmp	SHORT $LN49@combined_t
$LN48@combined_t:
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv189[ebp], edx
$LN49@combined_t:
	mov	al, BYTE PTR tv189[ebp]
	mov	BYTE PTR _prediction$[ebp], al

; 1376 : 		break;

	jmp	SHORT $LN5@combined_t
$LN20@combined_t:

; 1377 : 	default:
; 1378 : 		prediction = 0;

	mov	BYTE PTR _prediction$[ebp], 0
$LN5@combined_t:

; 1379 : 	}
; 1380 : 
; 1381 : 	return prediction;

	mov	al, BYTE PTR _prediction$[ebp]

; 1382 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN50@combined_t:
	DD	$LN7@combined_t
	DD	$LN8@combined_t
	DD	$LN9@combined_t
	DD	$LN10@combined_t
	DD	$LN11@combined_t
	DD	$LN12@combined_t
	DD	$LN13@combined_t
	DD	$LN14@combined_t
	DD	$LN15@combined_t
	DD	$LN16@combined_t
	DD	$LN17@combined_t
	DD	$LN18@combined_t
	DD	$LN19@combined_t
_combined_tree_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _neighbor_constrain_bu
_TEXT	SEGMENT
_x$1 = -32						; size = 4
_y$2 = -20						; size = 4
_nb_block$ = -8						; size = 4
_arr_depthMap$ = 8					; size = 4
__x$ = 12						; size = 4
__y$ = 16						; size = 4
__depth$ = 20						; size = 4
__level$ = 24						; size = 4
_neighbor_constrain_bu PROC				; COMDAT

; 1315 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1316 : 	int nb_block = (8 >> (_depth)) << 1;

	mov	eax, 8
	mov	ecx, DWORD PTR __depth$[ebp]
	sar	eax, cl
	shl	eax, 1
	mov	DWORD PTR _nb_block$[ebp], eax

; 1317 : 	for (int y = _y; y < _y + nb_block; ++y)

	mov	eax, DWORD PTR __y$[ebp]
	mov	DWORD PTR _y$2[ebp], eax
	jmp	SHORT $LN4@neighbor_c
$LN2@neighbor_c:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 1
	mov	DWORD PTR _y$2[ebp], eax
$LN4@neighbor_c:
	mov	eax, DWORD PTR __y$[ebp]
	add	eax, DWORD PTR _nb_block$[ebp]
	cmp	DWORD PTR _y$2[ebp], eax
	jge	SHORT $LN3@neighbor_c

; 1318 : 	{
; 1319 : 		for (int x = _x; x < _x + nb_block; ++x)

	mov	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR _x$1[ebp], eax
	jmp	SHORT $LN7@neighbor_c
$LN5@neighbor_c:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _x$1[ebp], eax
$LN7@neighbor_c:
	mov	eax, DWORD PTR __x$[ebp]
	add	eax, DWORD PTR _nb_block$[ebp]
	cmp	DWORD PTR _x$1[ebp], eax
	jge	SHORT $LN6@neighbor_c

; 1320 : 		{
; 1321 : 			if (arr_depthMap[x + (y << 3)] - _level >= _depth)

	mov	eax, DWORD PTR _y$2[ebp]
	mov	ecx, DWORD PTR _x$1[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _arr_depthMap$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	sub	ecx, DWORD PTR __level$[ebp]
	cmp	ecx, DWORD PTR __depth$[ebp]
	jl	SHORT $LN8@neighbor_c

; 1322 : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN1@neighbor_c
$LN8@neighbor_c:

; 1323 : 		}

	jmp	SHORT $LN5@neighbor_c
$LN6@neighbor_c:

; 1324 : 	}

	jmp	SHORT $LN2@neighbor_c
$LN3@neighbor_c:

; 1325 : 	return 1;

	mov	eax, 1
$LN1@neighbor_c:

; 1326 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_neighbor_constrain_bu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_compute_all
_TEXT	SEGMENT
_y_blck$1 = -4244					; size = 2
_x_blck$2 = -4232					; size = 2
_x$3 = -4217						; size = 1
_y$4 = -4205						; size = 1
_p_features64$ = -4196					; size = 4
_arr_features_32$ = -4184				; size = 4
_arr_features_16$ = -4172				; size = 4
_arr_features_8$ = -4160				; size = 4
_arr_features_4$ = -4148				; size = 4
_avg_luma$ = -4136					; size = 2048
_variance$ = -2080					; size = 2048
_y_px$ = -24						; size = 4
_x_px$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_arr_features$ = 8					; size = 4
_luma_px$ = 12						; size = 4
_features_compute_all PROC				; COMDAT

; 1238 : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5784				; 00001698H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5784]
	mov	ecx, 1446				; 000005a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1239 : 
; 1240 : 	uint32_t x_px = 0; /*!< Top left X of the lcu */

	mov	DWORD PTR _x_px$[ebp], 0

; 1241 : 	uint32_t y_px = 0; /*!< Top left Y of the lcu */

	mov	DWORD PTR _y_px$[ebp], 0

; 1242 : 	double variance[256] = { 0.0 };

	xorps	xmm0, xmm0
	movsd	QWORD PTR _variance$[ebp], xmm0
	push	2040					; 000007f8H
	push	0
	lea	eax, DWORD PTR _variance$[ebp+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1243 : 	double avg_luma[256] = { 0.0 };

	xorps	xmm0, xmm0
	movsd	QWORD PTR _avg_luma$[ebp], xmm0
	push	2040					; 000007f8H
	push	0
	lea	eax, DWORD PTR _avg_luma$[ebp+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1244 : 
; 1245 : 
; 1246 : 	features_s* arr_features_4 = arr_features[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _arr_features$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _arr_features_4$[ebp], edx

; 1247 : 	features_s* arr_features_8 = arr_features[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _arr_features_8$[ebp], eax

; 1248 : 	features_s* arr_features_16 = arr_features[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _arr_features$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _arr_features_16$[ebp], edx

; 1249 : 	features_s* arr_features_32 = arr_features[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _arr_features$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _arr_features_32$[ebp], edx

; 1250 : 	features_s* p_features64 = arr_features[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _p_features64$[ebp], eax

; 1251 : 
; 1252 : 	/*!< Compute the variance for all 4*4 blocs */
; 1253 : 	for (int8_t y = 0; y < 8; ++y)

	mov	BYTE PTR _y$4[ebp], 0
	jmp	SHORT $LN4@features_c
$LN2@features_c:
	mov	al, BYTE PTR _y$4[ebp]
	add	al, 1
	mov	BYTE PTR _y$4[ebp], al
$LN4@features_c:
	movsx	eax, BYTE PTR _y$4[ebp]
	cmp	eax, 8
	jge	$LN3@features_c

; 1254 : 	{
; 1255 : 		for (int8_t x = 0; x < 8; ++x)

	mov	BYTE PTR _x$3[ebp], 0
	jmp	SHORT $LN7@features_c
$LN5@features_c:
	mov	al, BYTE PTR _x$3[ebp]
	add	al, 1
	mov	BYTE PTR _x$3[ebp], al
$LN7@features_c:
	movsx	eax, BYTE PTR _x$3[ebp]
	cmp	eax, 8
	jge	$LN6@features_c

; 1256 : 		{
; 1257 : 			int16_t x_blck = (x << 1);

	movsx	eax, BYTE PTR _x$3[ebp]
	shl	eax, 1
	mov	WORD PTR _x_blck$2[ebp], ax

; 1258 : 			int16_t y_blck = (y << 1);

	movsx	eax, BYTE PTR _y$4[ebp]
	shl	eax, 1
	mov	WORD PTR _y_blck$1[ebp], ax

; 1259 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,

	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	shl	ecx, 4
	add	ecx, eax
	lea	edx, DWORD PTR _variance$[ebp+ecx*8]
	push	edx
	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	shl	ecx, 4
	add	ecx, eax
	lea	edx, DWORD PTR _avg_luma$[ebp+ecx*8]
	push	edx
	push	64					; 00000040H
	push	64					; 00000040H
	push	4
	movsx	eax, WORD PTR _y_blck$1[ebp]
	shl	eax, 2
	push	eax
	movsx	ecx, WORD PTR _x_blck$2[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_px$[ebp]
	push	ecx
	call	_features_var_avg_blck
	add	esp, 40					; 00000028H

; 1260 : 				&avg_luma[CR_GET_CU_D4(x_blck, y_blck, 4)],
; 1261 : 				&variance[CR_GET_CU_D4(x_blck, y_blck, 4)]);
; 1262 : 
; 1263 : 			features_var_avg_blck(luma_px, x_px, y_px, (x_blck + 1) << 2, y_blck << 2, 4, LCU_WIDTH, LCU_WIDTH,

	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [ecx+eax+1]
	lea	eax, DWORD PTR _variance$[ebp+edx*8]
	push	eax
	movsx	ecx, WORD PTR _x_blck$2[ebp]
	movsx	edx, WORD PTR _y_blck$1[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR [edx+ecx+1]
	lea	ecx, DWORD PTR _avg_luma$[ebp+eax*8]
	push	ecx
	push	64					; 00000040H
	push	64					; 00000040H
	push	4
	movsx	edx, WORD PTR _y_blck$1[ebp]
	shl	edx, 2
	push	edx
	movsx	eax, WORD PTR _x_blck$2[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_px$[ebp]
	push	ecx
	call	_features_var_avg_blck
	add	esp, 40					; 00000028H

; 1264 : 				&avg_luma[CR_GET_CU_D4(x_blck + 1, y_blck, 4)],
; 1265 : 				&variance[CR_GET_CU_D4(x_blck + 1, y_blck, 4)]);
; 1266 : 			features_var_avg_blck(luma_px, x_px, y_px, x_blck << 2, (y_blck + 1) << 2, 4, LCU_WIDTH, LCU_WIDTH,

	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	add	ecx, 1
	shl	ecx, 4
	add	ecx, eax
	lea	edx, DWORD PTR _variance$[ebp+ecx*8]
	push	edx
	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	add	ecx, 1
	shl	ecx, 4
	add	ecx, eax
	lea	edx, DWORD PTR _avg_luma$[ebp+ecx*8]
	push	edx
	push	64					; 00000040H
	push	64					; 00000040H
	push	4
	movsx	eax, WORD PTR _y_blck$1[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	movsx	edx, WORD PTR _x_blck$2[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _luma_px$[ebp]
	push	edx
	call	_features_var_avg_blck
	add	esp, 40					; 00000028H

; 1267 : 				&avg_luma[CR_GET_CU_D4(x_blck, y_blck + 1, 4)],
; 1268 : 				&variance[CR_GET_CU_D4(x_blck, y_blck + 1, 4)]);
; 1269 : 			features_var_avg_blck(luma_px, x_px, y_px, (x_blck + 1) << 2, (y_blck + 1) << 2, 4, LCU_WIDTH, LCU_WIDTH,

	movsx	eax, WORD PTR _x_blck$2[ebp]
	movsx	ecx, WORD PTR _y_blck$1[ebp]
	add	ecx, 1
	shl	ecx, 4
	lea	edx, DWORD PTR [ecx+eax+1]
	lea	eax, DWORD PTR _variance$[ebp+edx*8]
	push	eax
	movsx	ecx, WORD PTR _x_blck$2[ebp]
	movsx	edx, WORD PTR _y_blck$1[ebp]
	add	edx, 1
	shl	edx, 4
	lea	eax, DWORD PTR [edx+ecx+1]
	lea	ecx, DWORD PTR _avg_luma$[ebp+eax*8]
	push	ecx
	push	64					; 00000040H
	push	64					; 00000040H
	push	4
	movsx	edx, WORD PTR _y_blck$1[ebp]
	lea	eax, DWORD PTR [edx*4+4]
	push	eax
	movsx	ecx, WORD PTR _x_blck$2[ebp]
	lea	edx, DWORD PTR [ecx*4+4]
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _luma_px$[ebp]
	push	edx
	call	_features_var_avg_blck
	add	esp, 40					; 00000028H

; 1270 : 				&avg_luma[CR_GET_CU_D4(x_blck + 1, y_blck + 1, 4)],
; 1271 : 				&variance[CR_GET_CU_D4(x_blck + 1, y_blck + 1, 4)]);
; 1272 : 
; 1273 : 		}

	jmp	$LN5@features_c
$LN6@features_c:

; 1274 : 	}

	jmp	$LN2@features_c
$LN3@features_c:

; 1275 : 
; 1276 : 	/* Compute the generic features of the all depth */
; 1277 : 	features_compute(arr_features_4, 4, variance, avg_luma);

	lea	eax, DWORD PTR _avg_luma$[ebp]
	push	eax
	lea	ecx, DWORD PTR _variance$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _arr_features_4$[ebp]
	push	edx
	call	_features_compute
	add	esp, 16					; 00000010H

; 1278 : 	features_compute(arr_features_8, 3, variance, avg_luma);

	lea	eax, DWORD PTR _avg_luma$[ebp]
	push	eax
	lea	ecx, DWORD PTR _variance$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _arr_features_8$[ebp]
	push	edx
	call	_features_compute
	add	esp, 16					; 00000010H

; 1279 : 	features_compute(arr_features_16, 2, variance, avg_luma);

	lea	eax, DWORD PTR _avg_luma$[ebp]
	push	eax
	lea	ecx, DWORD PTR _variance$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _arr_features_16$[ebp]
	push	edx
	call	_features_compute
	add	esp, 16					; 00000010H

; 1280 : 	features_compute(arr_features_32, 1, variance, avg_luma);

	lea	eax, DWORD PTR _avg_luma$[ebp]
	push	eax
	lea	ecx, DWORD PTR _variance$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _arr_features_32$[ebp]
	push	edx
	call	_features_compute
	add	esp, 16					; 00000010H

; 1281 : 	features_compute(p_features64, 0, variance, avg_luma);

	lea	eax, DWORD PTR _avg_luma$[ebp]
	push	eax
	lea	ecx, DWORD PTR _variance$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p_features64$[ebp]
	push	edx
	call	_features_compute
	add	esp, 16					; 00000010H

; 1282 : 
; 1283 : 	/* Set the Sub_var features for the depth 3, 2, 1, 0*/
; 1284 : 	features_sub_var(arr_features_8, arr_features_4, 3);

	push	3
	mov	eax, DWORD PTR _arr_features_4$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_8$[ebp]
	push	ecx
	call	_features_sub_var
	add	esp, 12					; 0000000cH

; 1285 : 	features_sub_var(arr_features_16, arr_features_8, 2);

	push	2
	mov	eax, DWORD PTR _arr_features_8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_16$[ebp]
	push	ecx
	call	_features_sub_var
	add	esp, 12					; 0000000cH

; 1286 : 	features_sub_var(arr_features_32, arr_features_16, 1);

	push	1
	mov	eax, DWORD PTR _arr_features_16$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_32$[ebp]
	push	ecx
	call	_features_sub_var
	add	esp, 12					; 0000000cH

; 1287 : 	features_sub_var(p_features64, arr_features_32, 0);

	push	0
	mov	eax, DWORD PTR _arr_features_32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_features64$[ebp]
	push	ecx
	call	_features_sub_var
	add	esp, 12					; 0000000cH

; 1288 : 
; 1289 : 	/* Set the Merge_var features for the depth 4, 3, 2, 1*/
; 1290 : 	features_merge_var(arr_features_4, arr_features_8, 4);

	push	4
	mov	eax, DWORD PTR _arr_features_8$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_4$[ebp]
	push	ecx
	call	_features_merge_var
	add	esp, 12					; 0000000cH

; 1291 : 	features_merge_var(arr_features_8, arr_features_16, 3);

	push	3
	mov	eax, DWORD PTR _arr_features_16$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_8$[ebp]
	push	ecx
	call	_features_merge_var
	add	esp, 12					; 0000000cH

; 1292 : 	features_merge_var(arr_features_16, arr_features_32, 2);

	push	2
	mov	eax, DWORD PTR _arr_features_32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_16$[ebp]
	push	ecx
	call	_features_merge_var
	add	esp, 12					; 0000000cH

; 1293 : 	features_merge_var(arr_features_32, p_features64, 1);

	push	1
	mov	eax, DWORD PTR _p_features64$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_features_32$[ebp]
	push	ecx
	call	_features_merge_var
	add	esp, 12					; 0000000cH

; 1294 : 
; 1295 : 	/* Compute the Var_of_sub_var for the depth 3, 2, 1, 0*/
; 1296 : 	features_var_of_sub_var(arr_features_8, 3);

	push	3
	mov	eax, DWORD PTR _arr_features_8$[ebp]
	push	eax
	call	_features_var_of_sub_var
	add	esp, 8

; 1297 : 	features_var_of_sub_var(arr_features_16, 2);

	push	2
	mov	eax, DWORD PTR _arr_features_16$[ebp]
	push	eax
	call	_features_var_of_sub_var
	add	esp, 8

; 1298 : 	features_var_of_sub_var(arr_features_32, 1);

	push	1
	mov	eax, DWORD PTR _arr_features_32$[ebp]
	push	eax
	call	_features_var_of_sub_var
	add	esp, 8

; 1299 : 	features_var_of_sub_var(p_features64, 0);

	push	0
	mov	eax, DWORD PTR _p_features64$[ebp]
	push	eax
	call	_features_var_of_sub_var
	add	esp, 8

; 1300 : 
; 1301 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@features_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5784				; 00001698H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@features_c:
	DD	2
	DD	$LN11@features_c
$LN11@features_c:
	DD	-2080					; fffff7e0H
	DD	2048					; 00000800H
	DD	$LN9@features_c
	DD	-4136					; ffffefd8H
	DD	2048					; 00000800H
	DD	$LN10@features_c
$LN10@features_c:
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
$LN9@features_c:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
_features_compute_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_var_of_sub_var
_TEXT	SEGMENT
_d_avg$1 = -76						; size = 8
_d_var$2 = -60						; size = 8
_i_cu$3 = -44						; size = 2
_x$4 = -29						; size = 1
_y$5 = -17						; size = 1
_i_nbBlock$ = -5					; size = 1
_arr_features$ = 8					; size = 4
_i_depth$ = 12						; size = 1
_features_var_of_sub_var PROC				; COMDAT

; 1204 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1205 : 	int8_t i_nbBlock = (1 << i_depth);

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _i_nbBlock$[ebp], al

; 1206 : 
; 1207 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	mov	BYTE PTR _y$5[ebp], 0
	jmp	SHORT $LN4@features_v
$LN2@features_v:
	mov	al, BYTE PTR _y$5[ebp]
	add	al, 1
	mov	BYTE PTR _y$5[ebp], al
$LN4@features_v:
	movsx	eax, BYTE PTR _y$5[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN3@features_v

; 1208 : 	{
; 1209 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	mov	BYTE PTR _x$4[ebp], 0
	jmp	SHORT $LN7@features_v
$LN5@features_v:
	mov	al, BYTE PTR _x$4[ebp]
	add	al, 1
	mov	BYTE PTR _x$4[ebp], al
$LN7@features_v:
	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN6@features_v

; 1210 : 		{
; 1211 : 			int16_t i_cu = x + (y << i_depth);

	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	edx, BYTE PTR _y$5[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu$3[ebp], ax

; 1212 : 			double d_var = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_var$2[ebp], xmm0

; 1213 : 			double d_avg = (arr_features[i_cu].sub_variance_0 + arr_features[i_cu].sub_variance_1 + arr_features[i_cu].sub_variance_2 + arr_features[i_cu].sub_variance_3) / 4.0;

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu$3[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx+16]
	addsd	xmm0, QWORD PTR [esi+eax+24]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	addsd	xmm0, QWORD PTR [edx+ecx+32]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	addsd	xmm0, QWORD PTR [edx+ecx+40]
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR _d_avg$1[ebp], xmm0

; 1214 : 
; 1215 : 			d_var = pow2(arr_features[i_cu].sub_variance_0 - d_avg);

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx+16]
	subsd	xmm0, QWORD PTR _d_avg$1[ebp]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm1, QWORD PTR [edx+ecx+16]
	subsd	xmm1, QWORD PTR _d_avg$1[ebp]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _d_var$2[ebp], xmm0

; 1216 : 			d_var = pow2(arr_features[i_cu].sub_variance_1 - d_avg) + d_var;

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx+24]
	subsd	xmm0, QWORD PTR _d_avg$1[ebp]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm1, QWORD PTR [edx+ecx+24]
	subsd	xmm1, QWORD PTR _d_avg$1[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$2[ebp]
	movsd	QWORD PTR _d_var$2[ebp], xmm0

; 1217 : 			d_var = pow2(arr_features[i_cu].sub_variance_2 - d_avg) + d_var;

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx+32]
	subsd	xmm0, QWORD PTR _d_avg$1[ebp]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm1, QWORD PTR [edx+ecx+32]
	subsd	xmm1, QWORD PTR _d_avg$1[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$2[ebp]
	movsd	QWORD PTR _d_var$2[ebp], xmm0

; 1218 : 			d_var = pow2(arr_features[i_cu].sub_variance_3 - d_avg) + d_var;

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx+40]
	subsd	xmm0, QWORD PTR _d_avg$1[ebp]
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	xmm1, QWORD PTR [edx+ecx+40]
	subsd	xmm1, QWORD PTR _d_avg$1[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$2[ebp]
	movsd	QWORD PTR _d_var$2[ebp], xmm0

; 1219 : 			arr_features[i_cu].var_of_sub_var = d_var / 4.0;

	movsd	xmm0, QWORD PTR _d_var$2[ebp]
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	movsd	QWORD PTR [edx+ecx+88], xmm0

; 1220 : 		}

	jmp	$LN5@features_v
$LN6@features_v:

; 1221 : 	}

	jmp	$LN2@features_v
$LN3@features_v:

; 1222 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_var_of_sub_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_merge_var
_TEXT	SEGMENT
_i_sb3$1 = -104						; size = 2
_i_sb2$2 = -92						; size = 2
_i_sb1$3 = -80						; size = 2
_i_sb0$4 = -68						; size = 2
_i_cu$5 = -56						; size = 2
_x$6 = -41						; size = 1
_y$7 = -29						; size = 1
_i_nbBlock$ = -17					; size = 1
_i_depth$ = -5						; size = 1
_arr_features$ = 8					; size = 4
_arr_up_features$ = 12					; size = 4
_i_rdepth$ = 16						; size = 1
_features_merge_var PROC				; COMDAT

; 1171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1172 : 	uint8_t i_depth = i_rdepth - 1;

	movzx	eax, BYTE PTR _i_rdepth$[ebp]
	sub	eax, 1
	mov	BYTE PTR _i_depth$[ebp], al

; 1173 : 	int8_t 	i_nbBlock = (1 << i_depth);

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _i_nbBlock$[ebp], al

; 1174 : 
; 1175 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	mov	BYTE PTR _y$7[ebp], 0
	jmp	SHORT $LN4@features_m
$LN2@features_m:
	mov	al, BYTE PTR _y$7[ebp]
	add	al, 1
	mov	BYTE PTR _y$7[ebp], al
$LN4@features_m:
	movsx	eax, BYTE PTR _y$7[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN3@features_m

; 1176 : 	{
; 1177 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	mov	BYTE PTR _x$6[ebp], 0
	jmp	SHORT $LN7@features_m
$LN5@features_m:
	mov	al, BYTE PTR _x$6[ebp]
	add	al, 1
	mov	BYTE PTR _x$6[ebp], al
$LN7@features_m:
	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN6@features_m

; 1178 : 		{
; 1179 : 			int16_t i_cu = x + (y << i_depth);

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu$5[ebp], ax

; 1180 : 			int16_t i_sb0 = (x << 1) + (y << (2 + i_depth)); 					/*!< Top left sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 2
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2]
	mov	WORD PTR _i_sb0$4[ebp], ax

; 1181 : 			int16_t i_sb1 = (x << 1) + 1 + (y << (2 + i_depth)); 		    	/*!< Top right sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 2
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2+1]
	mov	WORD PTR _i_sb1$3[ebp], ax

; 1182 : 			int16_t i_sb2 = (x << 1) + (((y << 1) + 1) << (1 + i_depth)); 		/*!< Bottom left sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _y$7[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 1
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2]
	mov	WORD PTR _i_sb2$2[ebp], ax

; 1183 : 			int16_t i_sb3 = (x << 1) + 1 + (((y << 1) + 1) << (1 + i_depth));  /*!< Bottom right sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _y$7[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 1
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2+1]
	mov	WORD PTR _i_sb3$1[ebp], ax

; 1184 : 
; 1185 : 			arr_features[i_sb0].merge_variance = arr_up_features[i_cu].variance;

	movsx	eax, WORD PTR _i_cu$5[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_sb0$4[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_up_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+8], xmm0

; 1186 : 			arr_features[i_sb1].merge_variance = arr_up_features[i_cu].variance;

	movsx	eax, WORD PTR _i_cu$5[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_sb1$3[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_up_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+8], xmm0

; 1187 : 			arr_features[i_sb2].merge_variance = arr_up_features[i_cu].variance;

	movsx	eax, WORD PTR _i_cu$5[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_sb2$2[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_up_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+8], xmm0

; 1188 : 			arr_features[i_sb3].merge_variance = arr_up_features[i_cu].variance;

	movsx	eax, WORD PTR _i_cu$5[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_sb3$1[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_up_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+8], xmm0

; 1189 : 
; 1190 : 		}

	jmp	$LN5@features_m
$LN6@features_m:

; 1191 : 	}

	jmp	$LN2@features_m
$LN3@features_m:

; 1192 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_merge_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_sub_var
_TEXT	SEGMENT
_i_sb3$1 = -92						; size = 2
_i_sb2$2 = -80						; size = 2
_i_sb1$3 = -68						; size = 2
_i_sb0$4 = -56						; size = 2
_i_cu$5 = -44						; size = 2
_x$6 = -29						; size = 1
_y$7 = -17						; size = 1
_i_nbBlock$ = -5					; size = 1
_arr_features$ = 8					; size = 4
_arr_sub_features$ = 12					; size = 4
_i_depth$ = 16						; size = 1
_features_sub_var PROC					; COMDAT

; 1137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1138 : 	int8_t i_nbBlock = (1 << i_depth);

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _i_nbBlock$[ebp], al

; 1139 : 
; 1140 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	mov	BYTE PTR _y$7[ebp], 0
	jmp	SHORT $LN4@features_s
$LN2@features_s:
	mov	al, BYTE PTR _y$7[ebp]
	add	al, 1
	mov	BYTE PTR _y$7[ebp], al
$LN4@features_s:
	movsx	eax, BYTE PTR _y$7[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN3@features_s

; 1141 : 	{
; 1142 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	mov	BYTE PTR _x$6[ebp], 0
	jmp	SHORT $LN7@features_s
$LN5@features_s:
	mov	al, BYTE PTR _x$6[ebp]
	add	al, 1
	mov	BYTE PTR _x$6[ebp], al
$LN7@features_s:
	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN6@features_s

; 1143 : 		{
; 1144 : 			int16_t i_cu = x + (y << i_depth);

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu$5[ebp], ax

; 1145 : 			int16_t i_sb0 = (x << 1) + (y << (2 + i_depth)); 					/*!< Top left sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 2
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2]
	mov	WORD PTR _i_sb0$4[ebp], ax

; 1146 : 			int16_t i_sb1 = (x << 1) + 1 + (y << (2 + i_depth)); 		    	/*!< Top right sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	edx, BYTE PTR _y$7[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 2
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2+1]
	mov	WORD PTR _i_sb1$3[ebp], ax

; 1147 : 			int16_t i_sb2 = (x << 1) + (((y << 1) + 1) << (1 + i_depth)); 		/*!< Bottom left sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _y$7[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 1
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2]
	mov	WORD PTR _i_sb2$2[ebp], ax

; 1148 : 			int16_t i_sb3 = (x << 1) + 1 + (((y << 1) + 1) << (1 + i_depth));  /*!< Bottom right sub block index */

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _y$7[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	add	ecx, 1
	shl	edx, cl
	lea	eax, DWORD PTR [edx+eax*2+1]
	mov	WORD PTR _i_sb3$1[ebp], ax

; 1149 : 
; 1150 : 
; 1151 : 			arr_features[i_cu].sub_variance_0 = arr_sub_features[i_sb0].variance;

	movsx	eax, WORD PTR _i_sb0$4[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu$5[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_sub_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+16], xmm0

; 1152 : 			arr_features[i_cu].sub_variance_1 = arr_sub_features[i_sb1].variance;

	movsx	eax, WORD PTR _i_sb1$3[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu$5[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_sub_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+24], xmm0

; 1153 : 			arr_features[i_cu].sub_variance_2 = arr_sub_features[i_sb2].variance;

	movsx	eax, WORD PTR _i_sb2$2[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu$5[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_sub_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+32], xmm0

; 1154 : 			arr_features[i_cu].sub_variance_3 = arr_sub_features[i_sb3].variance;

	movsx	eax, WORD PTR _i_sb3$1[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu$5[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_sub_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+40], xmm0

; 1155 : 
; 1156 : 		}

	jmp	$LN5@features_s
$LN6@features_s:

; 1157 : 	}

	jmp	$LN2@features_s
$LN3@features_s:

; 1158 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_sub_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_compute
_TEXT	SEGMENT
_i_rows$1 = -84						; size = 2
_i_CU_4$2 = -72						; size = 2
_i_cu$3 = -60						; size = 2
_x$4 = -45						; size = 1
_y$5 = -33						; size = 1
_i_nbBlock$ = -21					; size = 1
_d_avgLumaC$ = -12					; size = 8
_arr_features$ = 8					; size = 4
_i_depth$ = 12						; size = 1
_arr_var$ = 16						; size = 4
_arr_avg$ = 20						; size = 4
_features_compute PROC					; COMDAT

; 1088 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1089 : 	double d_avgLumaC;
; 1090 : 
; 1091 : 	int8_t i_nbBlock = (1 << i_depth);

	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _i_nbBlock$[ebp], al

; 1092 : 
; 1093 : 	for (int8_t y = 0; y < i_nbBlock; ++y)

	mov	BYTE PTR _y$5[ebp], 0
	jmp	SHORT $LN4@features_c
$LN2@features_c:
	mov	al, BYTE PTR _y$5[ebp]
	add	al, 1
	mov	BYTE PTR _y$5[ebp], al
$LN4@features_c:
	movsx	eax, BYTE PTR _y$5[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN3@features_c

; 1094 : 	{
; 1095 : 		for (int8_t x = 0; x < i_nbBlock; ++x)

	mov	BYTE PTR _x$4[ebp], 0
	jmp	SHORT $LN7@features_c
$LN5@features_c:
	mov	al, BYTE PTR _x$4[ebp]
	add	al, 1
	mov	BYTE PTR _x$4[ebp], al
$LN7@features_c:
	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	ecx, BYTE PTR _i_nbBlock$[ebp]
	cmp	eax, ecx
	jge	$LN6@features_c

; 1096 : 		{
; 1097 : 			int16_t i_cu = x + (y << i_depth);

	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	edx, BYTE PTR _y$5[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu$3[ebp], ax

; 1098 : 			if (i_depth == 4)

	movzx	eax, BYTE PTR _i_depth$[ebp]
	cmp	eax, 4
	jne	SHORT $LN8@features_c

; 1099 : 			{
; 1100 : 				arr_features[i_cu].variance = arr_var[i_cu];

	movsx	eax, WORD PTR _i_cu$3[ebp]
	movsx	ecx, WORD PTR _i_cu$3[ebp]
	imul	edx, ecx, 96
	mov	ecx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_var$[ebp]
	movsd	xmm0, QWORD PTR [esi+eax*8]
	movsd	QWORD PTR [ecx+edx], xmm0

; 1101 : 			}

	jmp	$LN9@features_c
$LN8@features_c:

; 1102 : 			else
; 1103 : 			{
; 1104 : 				features_combine_var(arr_var, arr_avg, x, y, i_depth, &arr_features[i_cu].variance, &d_avgLumaC);

	lea	eax, DWORD PTR _d_avgLumaC$[ebp]
	push	eax
	movsx	ecx, WORD PTR _i_cu$3[ebp]
	imul	edx, ecx, 96
	add	edx, DWORD PTR _arr_features$[ebp]
	push	edx
	movzx	eax, BYTE PTR _i_depth$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _y$5[ebp]
	push	ecx
	movsx	edx, BYTE PTR _x$4[ebp]
	push	edx
	mov	eax, DWORD PTR _arr_avg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_var$[ebp]
	push	ecx
	call	_features_combine_var
	add	esp, 28					; 0000001cH

; 1105 : 				int16_t i_CU_4 = (x << (4 - i_depth)) + (y << (8 - i_depth));

	movsx	eax, BYTE PTR _x$4[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	edx, 4
	sub	edx, ecx
	mov	ecx, edx
	shl	eax, cl
	movsx	edx, BYTE PTR _y$5[ebp]
	movzx	ecx, BYTE PTR _i_depth$[ebp]
	mov	esi, 8
	sub	esi, ecx
	mov	ecx, esi
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_CU_4$2[ebp], ax

; 1106 : 				int16_t i_rows = (16 << (3 - i_depth));

	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, 3
	sub	ecx, eax
	mov	edx, 16					; 00000010H
	shl	edx, cl
	mov	WORD PTR _i_rows$1[ebp], dx

; 1107 : 				arr_features[i_cu].var_of_sub_mean = features_get_var_of_sub_mean(arr_avg,

	movsx	eax, WORD PTR _i_CU_4$2[ebp]
	movsx	ecx, WORD PTR _i_rows$1[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _i_depth$[ebp]
	mov	ecx, 3
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	add	eax, edx
	push	eax
	movsx	eax, WORD PTR _i_CU_4$2[ebp]
	movsx	ecx, WORD PTR _i_rows$1[ebp]
	add	eax, ecx
	push	eax
	movsx	edx, WORD PTR _i_CU_4$2[ebp]
	movzx	eax, BYTE PTR _i_depth$[ebp]
	mov	ecx, 3
	sub	ecx, eax
	mov	eax, 1
	shl	eax, cl
	add	edx, eax
	push	edx
	movzx	ecx, WORD PTR _i_CU_4$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_avg$[ebp]
	push	edx
	call	_features_get_var_of_sub_mean
	add	esp, 20					; 00000014H
	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	fstp	QWORD PTR [edx+ecx+72]

; 1108 : 					i_CU_4,
; 1109 : 					i_CU_4 + (1 << (3 - i_depth)),
; 1110 : 					i_CU_4 + i_rows,
; 1111 : 					i_CU_4 + i_rows + (1 << (3 - i_depth)));
; 1112 : 				arr_avg[i_CU_4] = d_avgLumaC;

	movsx	eax, WORD PTR _i_CU_4$2[ebp]
	mov	ecx, DWORD PTR _arr_avg$[ebp]
	movsd	xmm0, QWORD PTR _d_avgLumaC$[ebp]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 1113 : 				arr_var[i_CU_4] = arr_features[i_cu].variance;

	movsx	eax, WORD PTR _i_cu$3[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_CU_4$2[ebp]
	mov	eax, DWORD PTR _arr_var$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [eax+edx*8], xmm0
$LN9@features_c:

; 1114 : 			}
; 1115 : 			if (x % 2 == 1 &&

	movsx	eax, BYTE PTR _x$4[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN15@features_c
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN15@features_c:
	cmp	eax, 1
	jne	SHORT $LN10@features_c
	movsx	eax, BYTE PTR _y$5[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN16@features_c
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN16@features_c:
	cmp	eax, 1
	jne	SHORT $LN10@features_c

; 1116 : 				y % 2 == 1)
; 1117 : 			{
; 1118 : 				features_var_neighbor(arr_features, x, y, i_depth);

	movzx	ax, BYTE PTR _i_depth$[ebp]
	movzx	ecx, ax
	push	ecx
	movsx	dx, BYTE PTR _y$5[ebp]
	movzx	eax, dx
	push	eax
	movsx	cx, BYTE PTR _x$4[ebp]
	movzx	edx, cx
	push	edx
	mov	eax, DWORD PTR _arr_features$[ebp]
	push	eax
	call	_features_var_neighbor
	add	esp, 16					; 00000010H
$LN10@features_c:

; 1119 : 			}
; 1120 : 
; 1121 : 		}

	jmp	$LN5@features_c
$LN6@features_c:

; 1122 : 	}

	jmp	$LN2@features_c
$LN3@features_c:

; 1123 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@features_c
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@features_c:
	DD	1
	DD	$LN13@features_c
$LN13@features_c:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN12@features_c
$LN12@features_c:
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	103					; 00000067H
	DB	76					; 0000004cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	67					; 00000043H
	DB	0
_features_compute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_var_neighbor
_TEXT	SEGMENT
_i_cu3$ = -44						; size = 2
_i_cu2$ = -32						; size = 2
_i_cu1$ = -20						; size = 2
_i_cu0$ = -8						; size = 2
_arr_features$ = 8					; size = 4
__x$ = 12						; size = 2
__y$ = 16						; size = 2
__depth$ = 20						; size = 2
_features_var_neighbor PROC				; COMDAT

; 1051 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1052 : 	int16_t i_cu0 = (_x - 1) + ((_y - 1) << _depth);

	movsx	eax, WORD PTR __x$[ebp]
	movsx	edx, WORD PTR __y$[ebp]
	sub	edx, 1
	movsx	ecx, WORD PTR __depth$[ebp]
	shl	edx, cl
	lea	eax, DWORD PTR [eax+edx-1]
	mov	WORD PTR _i_cu0$[ebp], ax

; 1053 : 	int16_t i_cu1 = (_x)+((_y - 1) << _depth);

	movsx	eax, WORD PTR __x$[ebp]
	movsx	edx, WORD PTR __y$[ebp]
	sub	edx, 1
	movsx	ecx, WORD PTR __depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu1$[ebp], ax

; 1054 : 	int16_t i_cu2 = (_x - 1) + (_y << _depth);

	movsx	eax, WORD PTR __x$[ebp]
	movsx	edx, WORD PTR __y$[ebp]
	movsx	ecx, WORD PTR __depth$[ebp]
	shl	edx, cl
	lea	eax, DWORD PTR [eax+edx-1]
	mov	WORD PTR _i_cu2$[ebp], ax

; 1055 : 	int16_t i_cu3 = _x + (_y << _depth);

	movsx	eax, WORD PTR __x$[ebp]
	movsx	edx, WORD PTR __y$[ebp]
	movsx	ecx, WORD PTR __depth$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_cu3$[ebp], ax

; 1056 : 
; 1057 : 	arr_features[i_cu0].neigh_variance_A = arr_features[i_cu1].variance;

	movsx	eax, WORD PTR _i_cu1$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu0$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+48], xmm0

; 1058 : 	arr_features[i_cu0].neigh_variance_B = arr_features[i_cu2].variance;

	movsx	eax, WORD PTR _i_cu2$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu0$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+56], xmm0

; 1059 : 	arr_features[i_cu0].neigh_variance_C = arr_features[i_cu3].variance;

	movsx	eax, WORD PTR _i_cu3$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu0$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+64], xmm0

; 1060 : 
; 1061 : 
; 1062 : 	arr_features[i_cu1].neigh_variance_A = arr_features[i_cu0].variance;

	movsx	eax, WORD PTR _i_cu0$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu1$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+48], xmm0

; 1063 : 	arr_features[i_cu1].neigh_variance_B = arr_features[i_cu2].variance;

	movsx	eax, WORD PTR _i_cu2$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu1$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+56], xmm0

; 1064 : 	arr_features[i_cu1].neigh_variance_C = arr_features[i_cu3].variance;

	movsx	eax, WORD PTR _i_cu3$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu1$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+64], xmm0

; 1065 : 
; 1066 : 
; 1067 : 	arr_features[i_cu2].neigh_variance_A = arr_features[i_cu0].variance;

	movsx	eax, WORD PTR _i_cu0$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu2$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+48], xmm0

; 1068 : 	arr_features[i_cu2].neigh_variance_B = arr_features[i_cu1].variance;

	movsx	eax, WORD PTR _i_cu1$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu2$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+56], xmm0

; 1069 : 	arr_features[i_cu2].neigh_variance_C = arr_features[i_cu3].variance;

	movsx	eax, WORD PTR _i_cu3$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu2$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+64], xmm0

; 1070 : 
; 1071 : 
; 1072 : 	arr_features[i_cu3].neigh_variance_A = arr_features[i_cu0].variance;

	movsx	eax, WORD PTR _i_cu0$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu3$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+48], xmm0

; 1073 : 	arr_features[i_cu3].neigh_variance_B = arr_features[i_cu1].variance;

	movsx	eax, WORD PTR _i_cu1$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu3$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+56], xmm0

; 1074 : 	arr_features[i_cu3].neigh_variance_C = arr_features[i_cu2].variance;

	movsx	eax, WORD PTR _i_cu2$[ebp]
	imul	ecx, eax, 96
	movsx	edx, WORD PTR _i_cu3$[ebp]
	imul	eax, edx, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	esi, DWORD PTR _arr_features$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx]
	movsd	QWORD PTR [edx+eax+64], xmm0

; 1075 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_var_neighbor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_get_var_of_sub_mean
_TEXT	SEGMENT
tv190 = -232						; size = 8
_d_avg$ = -28						; size = 8
_d_var$ = -12						; size = 8
_arr_avgLuma$ = 8					; size = 4
_i_sb0$ = 12						; size = 2
_i_sb1$ = 16						; size = 2
_i_sb2$ = 20						; size = 2
_i_sb3$ = 24						; size = 2
_features_get_var_of_sub_mean PROC			; COMDAT

; 1031 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1032 : 	double d_var = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_var$[ebp], xmm0

; 1033 : 	double d_avg = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1] + arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 4.0;

	movsx	eax, WORD PTR _i_sb0$[ebp]
	movsx	ecx, WORD PTR _i_sb1$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	addsd	xmm0, QWORD PTR [esi+ecx*8]
	movsx	eax, WORD PTR _i_sb2$[ebp]
	mov	ecx, DWORD PTR _arr_avgLuma$[ebp]
	addsd	xmm0, QWORD PTR [ecx+eax*8]
	movsx	edx, WORD PTR _i_sb3$[ebp]
	mov	eax, DWORD PTR _arr_avgLuma$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx*8]
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR _d_avg$[ebp], xmm0

; 1034 : 	d_var = pow2(arr_avgLuma[i_sb0] - d_avg);

	movsx	eax, WORD PTR _i_sb0$[ebp]
	mov	ecx, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	subsd	xmm0, QWORD PTR _d_avg$[ebp]
	movsx	edx, WORD PTR _i_sb0$[ebp]
	mov	eax, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [eax+edx*8]
	subsd	xmm1, QWORD PTR _d_avg$[ebp]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _d_var$[ebp], xmm0

; 1035 : 	d_var = pow2(arr_avgLuma[i_sb1] - d_avg) + d_var;

	movsx	eax, WORD PTR _i_sb1$[ebp]
	mov	ecx, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	subsd	xmm0, QWORD PTR _d_avg$[ebp]
	movsx	edx, WORD PTR _i_sb1$[ebp]
	mov	eax, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [eax+edx*8]
	subsd	xmm1, QWORD PTR _d_avg$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$[ebp]
	movsd	QWORD PTR _d_var$[ebp], xmm0

; 1036 : 	d_var = pow2(arr_avgLuma[i_sb2] - d_avg) + d_var;

	movsx	eax, WORD PTR _i_sb2$[ebp]
	mov	ecx, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	subsd	xmm0, QWORD PTR _d_avg$[ebp]
	movsx	edx, WORD PTR _i_sb2$[ebp]
	mov	eax, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [eax+edx*8]
	subsd	xmm1, QWORD PTR _d_avg$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$[ebp]
	movsd	QWORD PTR _d_var$[ebp], xmm0

; 1037 : 	d_var = pow2(arr_avgLuma[i_sb3] - d_avg) + d_var;

	movsx	eax, WORD PTR _i_sb3$[ebp]
	mov	ecx, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	subsd	xmm0, QWORD PTR _d_avg$[ebp]
	movsx	edx, WORD PTR _i_sb3$[ebp]
	mov	eax, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [eax+edx*8]
	subsd	xmm1, QWORD PTR _d_avg$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _d_var$[ebp]
	movsd	QWORD PTR _d_var$[ebp], xmm0

; 1038 : 	return d_var / 4.0;

	movsd	xmm0, QWORD PTR _d_var$[ebp]
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR tv190[ebp], xmm0
	fld	QWORD PTR tv190[ebp]

; 1039 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_get_var_of_sub_mean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_combine_var
_TEXT	SEGMENT
_i_sb3$ = -132						; size = 2
_i_sb2$ = -120						; size = 2
_i_sb1$ = -108						; size = 2
_i_sb0$ = -96						; size = 2
_i_rows$ = -84						; size = 2
_i_subCU$ = -72						; size = 2
_d_avg_temp_2$ = -60					; size = 8
_d_avg_temp_1$ = -44					; size = 8
_d_var_temp_2$ = -28					; size = 8
_d_var_temp_1$ = -12					; size = 8
_arr_var$ = 8						; size = 4
_arr_avgLuma$ = 12					; size = 4
_i_x$ = 16						; size = 4
_i_y$ = 20						; size = 4
_i_depth$ = 24						; size = 4
_p_varianceC$ = 28					; size = 4
_p_avgLumaC$ = 32					; size = 4
_features_combine_var PROC				; COMDAT

; 992  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 993  : 	double d_var_temp_1 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_var_temp_1$[ebp], xmm0

; 994  : 	double d_var_temp_2 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_var_temp_2$[ebp], xmm0

; 995  : 	double d_avg_temp_1 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_avg_temp_1$[ebp], xmm0

; 996  : 	double d_avg_temp_2 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d_avg_temp_2$[ebp], xmm0

; 997  : 
; 998  : 	int16_t i_subCU = (i_x + (i_y << 4)) << (4 - i_depth);

	mov	eax, DWORD PTR _i_y$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _i_x$[ebp]
	mov	ecx, 4
	sub	ecx, DWORD PTR _i_depth$[ebp]
	shl	eax, cl
	mov	WORD PTR _i_subCU$[ebp], ax

; 999  : 	int16_t i_rows = (16 << (3 - i_depth));

	mov	ecx, 3
	sub	ecx, DWORD PTR _i_depth$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, cl
	mov	WORD PTR _i_rows$[ebp], ax

; 1000 : 
; 1001 : 	int16_t i_sb0 = i_subCU; 									/*!< Top left sub block index */

	mov	ax, WORD PTR _i_subCU$[ebp]
	mov	WORD PTR _i_sb0$[ebp], ax

; 1002 : 	int16_t i_sb1 = i_subCU + (1 << (3 - i_depth));			/*!< Top right sub block index */

	movsx	eax, WORD PTR _i_subCU$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _i_depth$[ebp]
	mov	edx, 1
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_sb1$[ebp], ax

; 1003 : 	int16_t i_sb2 = i_subCU + i_rows;							/*!< Bottom left sub block index */

	movsx	eax, WORD PTR _i_subCU$[ebp]
	movsx	ecx, WORD PTR _i_rows$[ebp]
	add	eax, ecx
	mov	WORD PTR _i_sb2$[ebp], ax

; 1004 : 	int16_t i_sb3 = i_subCU + i_rows + (1 << (3 - i_depth)); 	/*!< Bottom right sub block index */

	movsx	eax, WORD PTR _i_subCU$[ebp]
	movsx	ecx, WORD PTR _i_rows$[ebp]
	add	eax, ecx
	mov	ecx, 3
	sub	ecx, DWORD PTR _i_depth$[ebp]
	mov	edx, 1
	shl	edx, cl
	add	eax, edx
	mov	WORD PTR _i_sb3$[ebp], ax

; 1005 : 
; 1006 : 	d_avg_temp_1 = (arr_avgLuma[i_sb0] + arr_avgLuma[i_sb1]) / 2.0;

	movsx	eax, WORD PTR _i_sb0$[ebp]
	movsx	ecx, WORD PTR _i_sb1$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	addsd	xmm0, QWORD PTR [esi+ecx*8]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _d_avg_temp_1$[ebp], xmm0

; 1007 : 	d_avg_temp_2 = (arr_avgLuma[i_sb2] + arr_avgLuma[i_sb3]) / 2.0;

	movsx	eax, WORD PTR _i_sb2$[ebp]
	movsx	ecx, WORD PTR _i_sb3$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	addsd	xmm0, QWORD PTR [esi+ecx*8]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _d_avg_temp_2$[ebp], xmm0

; 1008 : 
; 1009 : 	d_var_temp_1 = (2.0 * (arr_var[i_sb0] + arr_var[i_sb1]) + pow2((arr_avgLuma[i_sb0] - arr_avgLuma[i_sb1]))) / 4.0;

	movsx	eax, WORD PTR _i_sb0$[ebp]
	movsx	ecx, WORD PTR _i_sb1$[ebp]
	mov	edx, DWORD PTR _arr_var$[ebp]
	mov	esi, DWORD PTR _arr_var$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	addsd	xmm0, QWORD PTR [esi+ecx*8]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsx	eax, WORD PTR _i_sb0$[ebp]
	movsx	ecx, WORD PTR _i_sb1$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [edx+eax*8]
	subsd	xmm1, QWORD PTR [esi+ecx*8]
	movsx	eax, WORD PTR _i_sb0$[ebp]
	movsx	ecx, WORD PTR _i_sb1$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm2, QWORD PTR [edx+eax*8]
	subsd	xmm2, QWORD PTR [esi+ecx*8]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR _d_var_temp_1$[ebp], xmm0

; 1010 : 	d_var_temp_2 = (2.0 * (arr_var[i_sb2] + arr_var[i_sb3]) + pow2((arr_avgLuma[i_sb2] - arr_avgLuma[i_sb3]))) / 4.0;

	movsx	eax, WORD PTR _i_sb2$[ebp]
	movsx	ecx, WORD PTR _i_sb3$[ebp]
	mov	edx, DWORD PTR _arr_var$[ebp]
	mov	esi, DWORD PTR _arr_var$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	addsd	xmm0, QWORD PTR [esi+ecx*8]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsx	eax, WORD PTR _i_sb2$[ebp]
	movsx	ecx, WORD PTR _i_sb3$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm1, QWORD PTR [edx+eax*8]
	subsd	xmm1, QWORD PTR [esi+ecx*8]
	movsx	eax, WORD PTR _i_sb2$[ebp]
	movsx	ecx, WORD PTR _i_sb3$[ebp]
	mov	edx, DWORD PTR _arr_avgLuma$[ebp]
	mov	esi, DWORD PTR _arr_avgLuma$[ebp]
	movsd	xmm2, QWORD PTR [edx+eax*8]
	subsd	xmm2, QWORD PTR [esi+ecx*8]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR _d_var_temp_2$[ebp], xmm0

; 1011 : 
; 1012 : 	if (p_avgLumaC)

	cmp	DWORD PTR _p_avgLumaC$[ebp], 0
	je	SHORT $LN2@features_c

; 1013 : 	{
; 1014 : 		*p_avgLumaC = (d_avg_temp_1 + d_avg_temp_2) / 2.0;

	movsd	xmm0, QWORD PTR _d_avg_temp_1$[ebp]
	addsd	xmm0, QWORD PTR _d_avg_temp_2$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _p_avgLumaC$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN2@features_c:

; 1015 : 	}
; 1016 : 	*p_varianceC = (2.0 * (d_var_temp_1 + d_var_temp_2) + pow2(d_avg_temp_1 - d_avg_temp_2)) / 4.0;

	movsd	xmm0, QWORD PTR _d_var_temp_1$[ebp]
	addsd	xmm0, QWORD PTR _d_var_temp_2$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR _d_avg_temp_1$[ebp]
	subsd	xmm1, QWORD PTR _d_avg_temp_2$[ebp]
	movsd	xmm2, QWORD PTR _d_avg_temp_1$[ebp]
	subsd	xmm2, QWORD PTR _d_avg_temp_2$[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4010000000000000
	mov	eax, DWORD PTR _p_varianceC$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 1017 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_combine_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_var_avg_blck
_TEXT	SEGMENT
tv80 = -220						; size = 4
tv71 = -220						; size = 4
_iYMax$ = -20						; size = 4
_iXMax$ = -8						; size = 4
_arr_luma_px$ = 8					; size = 4
_i_xLcu$ = 12						; size = 4
_i_yLcu$ = 16						; size = 4
_i_xBlck$ = 20						; size = 4
_i_yBlck$ = 24						; size = 4
_i_blockSize$ = 28					; size = 1
_i_width$ = 32						; size = 4
_i_height$ = 36						; size = 4
_p_average$ = 40					; size = 4
_p_variance$ = 44					; size = 4
_features_var_avg_blck PROC				; COMDAT

; 971  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 972  : 	uint32_t iXMax = CR_XMAX(i_xLcu, i_blockSize + i_xBlck, i_width);

	movzx	eax, BYTE PTR _i_blockSize$[ebp]
	add	eax, DWORD PTR _i_xBlck$[ebp]
	add	eax, DWORD PTR _i_xLcu$[ebp]
	cmp	eax, DWORD PTR _i_width$[ebp]
	jae	SHORT $LN3@features_v
	movzx	ecx, BYTE PTR _i_blockSize$[ebp]
	add	ecx, DWORD PTR _i_xBlck$[ebp]
	add	ecx, DWORD PTR _i_xLcu$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN4@features_v
$LN3@features_v:
	mov	edx, DWORD PTR _i_width$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@features_v:
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, DWORD PTR _i_xLcu$[ebp]
	mov	DWORD PTR _iXMax$[ebp], eax

; 973  : 	uint32_t iYMax = CR_YMAX(i_yLcu, i_blockSize + i_yBlck, i_height);

	movzx	eax, BYTE PTR _i_blockSize$[ebp]
	add	eax, DWORD PTR _i_yBlck$[ebp]
	add	eax, DWORD PTR _i_yLcu$[ebp]
	cmp	eax, DWORD PTR _i_height$[ebp]
	jae	SHORT $LN5@features_v
	movzx	ecx, BYTE PTR _i_blockSize$[ebp]
	add	ecx, DWORD PTR _i_yBlck$[ebp]
	add	ecx, DWORD PTR _i_yLcu$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN6@features_v
$LN5@features_v:
	mov	edx, DWORD PTR _i_height$[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN6@features_v:
	mov	eax, DWORD PTR tv80[ebp]
	sub	eax, DWORD PTR _i_yLcu$[ebp]
	mov	DWORD PTR _iYMax$[ebp], eax

; 974  : 	*p_average = vect_average_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, 64);

	push	64					; 00000040H
	mov	eax, DWORD PTR _iYMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i_yBlck$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iXMax$[ebp]
	push	edx
	mov	eax, DWORD PTR _i_xBlck$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arr_luma_px$[ebp]
	push	ecx
	call	_vect_average_blck_int8
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _p_average$[ebp]
	fstp	QWORD PTR [edx]

; 975  : 	*p_variance = vect_variance_blck_int8(arr_luma_px, i_xBlck, iXMax, i_yBlck, iYMax, (*p_average), 64);

	push	64					; 00000040H
	mov	eax, DWORD PTR _p_average$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _iYMax$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i_yBlck$[ebp]
	push	edx
	mov	eax, DWORD PTR _iXMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i_xBlck$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr_luma_px$[ebp]
	push	edx
	call	_vect_variance_blck_int8
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR _p_variance$[ebp]
	fstp	QWORD PTR [eax]

; 976  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_var_avg_blck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _vect_variance_blck_int8
_TEXT	SEGMENT
tv170 = -268						; size = 8
tv152 = -268						; size = 4
tv147 = -264						; size = 4
_i_x$1 = -64						; size = 4
_i_y_line$2 = -52					; size = 4
_i_y$3 = -40						; size = 4
_variance$ = -28					; size = 8
_block_size$ = -12					; size = 8
__mat_src$ = 8						; size = 4
__x$ = 12						; size = 4
__x_end$ = 16						; size = 4
__y$ = 20						; size = 4
__y_end$ = 24						; size = 4
__avg_blck$ = 28					; size = 8
__width$ = 36						; size = 4
_vect_variance_blck_int8 PROC				; COMDAT

; 932  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 933  : 	if (_mat_src == NULL)

	cmp	DWORD PTR __mat_src$[ebp], 0
	jne	SHORT $LN8@vect_varia

; 934  : 	{
; 935  : 		fprintf(stderr, "null pointer as parameter.");

	push	OFFSET ??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 936  : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN10@vect_varia
	mov	ecx, DWORD PTR ?__LINE__Var@?0??vect_variance_blck_int8@@9@9
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@vect_varia:

; 937  : 		return -1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	$LN1@vect_varia
$LN8@vect_varia:

; 938  : 	}
; 939  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	eax, DWORD PTR __x_end$[ebp]
	sub	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv147[ebp]
	mov	ecx, DWORD PTR tv147[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mov	edx, DWORD PTR __y_end$[ebp]
	sub	edx, DWORD PTR __y$[ebp]
	mov	DWORD PTR tv152[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv152[ebp]
	mov	eax, DWORD PTR tv152[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _block_size$[ebp], xmm0

; 940  : 	double   variance = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _variance$[ebp], xmm0

; 941  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	mov	eax, DWORD PTR __y$[ebp]
	mov	DWORD PTR _i_y$3[ebp], eax
	jmp	SHORT $LN4@vect_varia
$LN2@vect_varia:
	mov	eax, DWORD PTR _i_y$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i_y$3[ebp], eax
$LN4@vect_varia:
	mov	eax, DWORD PTR _i_y$3[ebp]
	cmp	eax, DWORD PTR __y_end$[ebp]
	jae	SHORT $LN3@vect_varia

; 942  : 	{
; 943  : 		size_t i_y_line = i_y * _width;

	mov	eax, DWORD PTR _i_y$3[ebp]
	imul	eax, DWORD PTR __width$[ebp]
	mov	DWORD PTR _i_y_line$2[ebp], eax

; 944  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR _i_x$1[ebp], eax
	jmp	SHORT $LN7@vect_varia
$LN5@vect_varia:
	mov	eax, DWORD PTR _i_x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i_x$1[ebp], eax
$LN7@vect_varia:
	mov	eax, DWORD PTR _i_x$1[ebp]
	cmp	eax, DWORD PTR __x_end$[ebp]
	jae	SHORT $LN6@vect_varia

; 945  : 		{
; 946  : 			variance = variance + pow2((double)(_mat_src[i_x + i_y_line]) - _avg_blck);

	mov	eax, DWORD PTR _i_x$1[ebp]
	add	eax, DWORD PTR _i_y_line$2[ebp]
	mov	ecx, DWORD PTR __mat_src$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2sd xmm0, edx
	subsd	xmm0, QWORD PTR __avg_blck$[ebp]
	mov	eax, DWORD PTR _i_x$1[ebp]
	add	eax, DWORD PTR _i_y_line$2[ebp]
	mov	ecx, DWORD PTR __mat_src$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2sd xmm1, edx
	subsd	xmm1, QWORD PTR __avg_blck$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _variance$[ebp]
	movsd	QWORD PTR _variance$[ebp], xmm0

; 947  : 		}

	jmp	SHORT $LN5@vect_varia
$LN6@vect_varia:

; 948  : 	}

	jmp	SHORT $LN2@vect_varia
$LN3@vect_varia:

; 949  : 	return variance / (double)(block_size);

	movsd	xmm0, QWORD PTR _variance$[ebp]
	divsd	xmm0, QWORD PTR _block_size$[ebp]
	movsd	QWORD PTR tv170[ebp], xmm0
	fld	QWORD PTR tv170[ebp]
$LN1@vect_varia:

; 950  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vect_variance_blck_int8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _vect_average_blck_int8
_TEXT	SEGMENT
tv157 = -268						; size = 8
tv141 = -268						; size = 4
tv136 = -264						; size = 4
_i_x$1 = -64						; size = 4
_i_y_line$2 = -52					; size = 4
_i_y$3 = -40						; size = 4
_avg_vect$ = -28					; size = 8
_block_size$ = -12					; size = 8
__mat_src$ = 8						; size = 4
__x$ = 12						; size = 4
__x_end$ = 16						; size = 4
__y$ = 20						; size = 4
__y_end$ = 24						; size = 4
__width$ = 28						; size = 4
_vect_average_blck_int8 PROC				; COMDAT

; 898  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 899  : 	if (_mat_src == NULL)

	cmp	DWORD PTR __mat_src$[ebp], 0
	jne	SHORT $LN8@vect_avera

; 900  : 	{
; 901  : 		fprintf(stderr, "null pointer as parameter.");

	push	OFFSET ??_C@_0BL@IPAEIICN@null?5pointer?5as?5parameter?4@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 902  : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN10@vect_avera
	mov	ecx, DWORD PTR ?__LINE__Var@?0??vect_average_blck_int8@@9@9
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@vect_avera:

; 903  : 		return -1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	$LN1@vect_avera
$LN8@vect_avera:

; 904  : 	}
; 905  : 	double   block_size = (double)(_x_end - _x) * (double)(_y_end - _y);

	mov	eax, DWORD PTR __x_end$[ebp]
	sub	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv136[ebp]
	mov	ecx, DWORD PTR tv136[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mov	edx, DWORD PTR __y_end$[ebp]
	sub	edx, DWORD PTR __y$[ebp]
	mov	DWORD PTR tv141[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv141[ebp]
	mov	eax, DWORD PTR tv141[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _block_size$[ebp], xmm0

; 906  : 	double   avg_vect = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _avg_vect$[ebp], xmm0

; 907  : 	//STD_print_matrix(_mat_src,64, 64);
; 908  : 	for (size_t i_y = _y; i_y < _y_end; ++i_y)

	mov	eax, DWORD PTR __y$[ebp]
	mov	DWORD PTR _i_y$3[ebp], eax
	jmp	SHORT $LN4@vect_avera
$LN2@vect_avera:
	mov	eax, DWORD PTR _i_y$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i_y$3[ebp], eax
$LN4@vect_avera:
	mov	eax, DWORD PTR _i_y$3[ebp]
	cmp	eax, DWORD PTR __y_end$[ebp]
	jae	SHORT $LN3@vect_avera

; 909  : 	{
; 910  : 		size_t i_y_line = i_y * _width;

	mov	eax, DWORD PTR _i_y$3[ebp]
	imul	eax, DWORD PTR __width$[ebp]
	mov	DWORD PTR _i_y_line$2[ebp], eax

; 911  : 		for (size_t i_x = _x; i_x < _x_end; ++i_x)

	mov	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR _i_x$1[ebp], eax
	jmp	SHORT $LN7@vect_avera
$LN5@vect_avera:
	mov	eax, DWORD PTR _i_x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i_x$1[ebp], eax
$LN7@vect_avera:
	mov	eax, DWORD PTR _i_x$1[ebp]
	cmp	eax, DWORD PTR __x_end$[ebp]
	jae	SHORT $LN6@vect_avera

; 912  : 		{
; 913  : 			avg_vect = avg_vect + (double)_mat_src[i_x + i_y_line];

	mov	eax, DWORD PTR _i_x$1[ebp]
	add	eax, DWORD PTR _i_y_line$2[ebp]
	mov	ecx, DWORD PTR __mat_src$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cvtsi2sd xmm0, edx
	addsd	xmm0, QWORD PTR _avg_vect$[ebp]
	movsd	QWORD PTR _avg_vect$[ebp], xmm0

; 914  : 		}

	jmp	SHORT $LN5@vect_avera
$LN6@vect_avera:

; 915  : 	}

	jmp	SHORT $LN2@vect_avera
$LN3@vect_avera:

; 916  : 	return avg_vect / (double)(block_size);

	movsd	xmm0, QWORD PTR _avg_vect$[ebp]
	divsd	xmm0, QWORD PTR _block_size$[ebp]
	movsd	QWORD PTR tv157[ebp], xmm0
	fld	QWORD PTR tv157[ebp]
$LN1@vect_avera:

; 917  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vect_average_blck_int8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _features_init_array
_TEXT	SEGMENT
_i$ = -8						; size = 2
_arr_features$ = 8					; size = 4
__size$ = 12						; size = 2
__qp$ = 16						; size = 4
_features_init_array PROC				; COMDAT

; 867  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 868  : 	int16_t i = 0;

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax

; 869  : 	for (i = 0; i < _size; ++i)

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN4@features_i
$LN2@features_i:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN4@features_i:
	movsx	eax, WORD PTR _i$[ebp]
	movsx	ecx, WORD PTR __size$[ebp]
	cmp	eax, ecx
	jge	$LN3@features_i

; 870  : 	{
; 871  : 		arr_features[i].variance = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx], xmm0

; 872  : 		arr_features[i].sub_variance_0 = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+16], xmm0

; 873  : 		arr_features[i].sub_variance_1 = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+24], xmm0

; 874  : 		arr_features[i].sub_variance_2 = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+32], xmm0

; 875  : 		arr_features[i].sub_variance_3 = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+40], xmm0

; 876  : 		arr_features[i].merge_variance = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+8], xmm0

; 877  : 		arr_features[i].neigh_variance_A = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+48], xmm0

; 878  : 		arr_features[i].neigh_variance_B = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+56], xmm0

; 879  : 		arr_features[i].neigh_variance_C = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+64], xmm0

; 880  : 		arr_features[i].var_of_sub_mean = 0.0;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+ecx+72], xmm0

; 881  : 		arr_features[i].qp = _qp;

	movsx	eax, WORD PTR _i$[ebp]
	imul	ecx, eax, 96
	mov	edx, DWORD PTR _arr_features$[ebp]
	mov	eax, DWORD PTR __qp$[ebp]
	mov	DWORD PTR [edx+ecx+80], eax

; 882  : 		//arr_features[i].NB_pixels = _NB_pixels;
; 883  : 	}

	jmp	$LN2@features_i
$LN3@features_i:

; 884  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_features_init_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_split_depth_3
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_split_depth_3 PROC			; COMDAT

; 716  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 717  : 		if (p_features->var_of_sub_var <= 818.5173)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@408994236e2eb1c4
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN2@tree_predi

; 718  : 		{
; 719  : 				if (p_features->merge_variance <= 62.7641)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@404f61ce075f6fd2
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN4@tree_predi

; 720  : 				{
; 721  : 						*p_nb_iter = 20568.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d4160000000000
	movsd	QWORD PTR [eax], xmm0

; 722  : 						*p_nb_bad = 767.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4087f80000000000
	movsd	QWORD PTR [eax], xmm0

; 723  : 						return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi

; 724  : 				}

	jmp	$LN7@tree_predi
$LN4@tree_predi:

; 725  : 				else if (p_features->qp <= 27)

	mov	eax, DWORD PTR _p_features$[ebp]
	cmp	DWORD PTR [eax+80], 27			; 0000001bH
	jg	$LN6@tree_predi

; 726  : 				{
; 727  : 						if (p_features->variance <= 9.4219)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4022d80346dc5d64
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN8@tree_predi

; 728  : 						{
; 729  : 								*p_nb_iter = 1255.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40939c0000000000
	movsd	QWORD PTR [eax], xmm0

; 730  : 								*p_nb_bad = 206.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4069c00000000000
	movsd	QWORD PTR [eax], xmm0

; 731  : 								return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi

; 732  : 						}

	jmp	SHORT $LN11@tree_predi
$LN8@tree_predi:

; 733  : 						else if (p_features->merge_variance <= 375.2185)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4077737ef9db22d1
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN10@tree_predi

; 734  : 						{
; 735  : 								*p_nb_iter = 3999.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40af3e0000000000
	movsd	QWORD PTR [eax], xmm0

; 736  : 								*p_nb_bad = 1321.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4094a40000000000
	movsd	QWORD PTR [eax], xmm0

; 737  : 								return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi

; 738  : 						}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 739  : 						else {
; 740  : 								*p_nb_iter = 1786.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409be80000000000
	movsd	QWORD PTR [eax], xmm0

; 741  : 								*p_nb_bad = 817.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4089880000000000
	movsd	QWORD PTR [eax], xmm0

; 742  : 								return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN11@tree_predi:

; 743  : 						}
; 744  : 				}

	jmp	SHORT $LN7@tree_predi
$LN6@tree_predi:

; 745  : 				else {
; 746  : 						*p_nb_iter = 5286.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b4a60000000000
	movsd	QWORD PTR [eax], xmm0

; 747  : 						*p_nb_bad = 737.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4087080000000000
	movsd	QWORD PTR [eax], xmm0

; 748  : 						return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi
$LN7@tree_predi:

; 749  : 				}
; 750  : 		}

	jmp	$LN13@tree_predi
$LN2@tree_predi:

; 751  : 		else if (p_features->var_of_sub_var <= 37332.3018)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40e23a89a858793e
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN12@tree_predi

; 752  : 		{
; 753  : 				if (p_features->var_of_sub_var <= 7585.0282)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40bda107381d7dbf
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN14@tree_predi

; 754  : 				{
; 755  : 						if (p_features->qp <= 32)

	mov	eax, DWORD PTR _p_features$[ebp]
	cmp	DWORD PTR [eax+80], 32			; 00000020H
	jg	$LN16@tree_predi

; 756  : 						{
; 757  : 								if (p_features->neigh_variance_C <= 330.2178)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4074a37c1bda511a
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN18@tree_predi

; 758  : 								{
; 759  : 										if (p_features->sub_variance_0 <= 8.5273)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40210dfa43fe5c92
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN20@tree_predi

; 760  : 										{
; 761  : 												*p_nb_iter = 1114.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4091680000000000
	movsd	QWORD PTR [eax], xmm0

; 762  : 												*p_nb_bad = 346.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4075a00000000000
	movsd	QWORD PTR [eax], xmm0

; 763  : 												return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 764  : 										}

	jmp	$LN23@tree_predi
$LN20@tree_predi:

; 765  : 										else if (p_features->neigh_variance_B <= 221.5469)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406bb180346dc5d6
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN22@tree_predi

; 766  : 										{
; 767  : 												if (p_features->var_of_sub_var <= 1989.7928)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@409f172bd3c36113
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN24@tree_predi

; 768  : 												{
; 769  : 														*p_nb_iter = 1539.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40980c0000000000
	movsd	QWORD PTR [eax], xmm0

; 770  : 														*p_nb_bad = 606.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4082f00000000000
	movsd	QWORD PTR [eax], xmm0

; 771  : 														return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi

; 772  : 												}

	jmp	SHORT $LN27@tree_predi
$LN24@tree_predi:

; 773  : 												else if (p_features->variance <= 155.5974)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4063731de69ad42c
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN26@tree_predi

; 774  : 												{
; 775  : 														*p_nb_iter = 1298.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094480000000000
	movsd	QWORD PTR [eax], xmm0

; 776  : 														*p_nb_bad = 634.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4083d00000000000
	movsd	QWORD PTR [eax], xmm0

; 777  : 														return 3.0000;

	mov	eax, 3
	jmp	$LN13@tree_predi

; 778  : 												}

	jmp	SHORT $LN27@tree_predi
$LN26@tree_predi:

; 779  : 												else {
; 780  : 														*p_nb_iter = 1076.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090d00000000000
	movsd	QWORD PTR [eax], xmm0

; 781  : 														*p_nb_bad = 456.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407c800000000000
	movsd	QWORD PTR [eax], xmm0

; 782  : 														return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN27@tree_predi:

; 783  : 												}
; 784  : 										}

	jmp	SHORT $LN23@tree_predi
$LN22@tree_predi:

; 785  : 										else {
; 786  : 												*p_nb_iter = 1644.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4099b00000000000
	movsd	QWORD PTR [eax], xmm0

; 787  : 												*p_nb_bad = 639.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4083f80000000000
	movsd	QWORD PTR [eax], xmm0

; 788  : 												return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN23@tree_predi:

; 789  : 										}
; 790  : 								}

	jmp	SHORT $LN19@tree_predi
$LN18@tree_predi:

; 791  : 								else {
; 792  : 										*p_nb_iter = 2401.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a2c20000000000
	movsd	QWORD PTR [eax], xmm0

; 793  : 										*p_nb_bad = 713.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4086480000000000
	movsd	QWORD PTR [eax], xmm0

; 794  : 										return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN19@tree_predi:

; 795  : 								}
; 796  : 						}

	jmp	SHORT $LN29@tree_predi
$LN16@tree_predi:

; 797  : 						else if (p_features->merge_variance <= 281.9509)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40719f36e2eb1c43
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN28@tree_predi

; 798  : 						{
; 799  : 								*p_nb_iter = 1020.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408fe00000000000
	movsd	QWORD PTR [eax], xmm0

; 800  : 								*p_nb_bad = 262.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4070600000000000
	movsd	QWORD PTR [eax], xmm0

; 801  : 								return 3.0000;

	mov	eax, 3
	jmp	SHORT $LN13@tree_predi

; 802  : 						}

	jmp	SHORT $LN29@tree_predi
$LN28@tree_predi:

; 803  : 						else {
; 804  : 								*p_nb_iter = 1278.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4093f80000000000
	movsd	QWORD PTR [eax], xmm0

; 805  : 								*p_nb_bad = 594.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4082900000000000
	movsd	QWORD PTR [eax], xmm0

; 806  : 								return -1.0000;

	or	eax, -1
	jmp	SHORT $LN13@tree_predi
$LN29@tree_predi:

; 807  : 						}
; 808  : 				}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 809  : 				else {
; 810  : 						*p_nb_iter = 10507.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c4858000000000
	movsd	QWORD PTR [eax], xmm0

; 811  : 						*p_nb_bad = 2943.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a6fe0000000000
	movsd	QWORD PTR [eax], xmm0

; 812  : 						return -1.0000;

	or	eax, -1
	jmp	SHORT $LN13@tree_predi
$LN15@tree_predi:

; 813  : 				}
; 814  : 		}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 815  : 		else {
; 816  : 				*p_nb_iter = 25229.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d8a34000000000
	movsd	QWORD PTR [eax], xmm0

; 817  : 				*p_nb_bad = 3060.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a7e80000000000
	movsd	QWORD PTR [eax], xmm0

; 818  : 				return -1.0000;

	or	eax, -1
$LN13@tree_predi:

; 819  : 		}
; 820  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_split_depth_3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_split_depth_2
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_split_depth_2 PROC			; COMDAT

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 622  : 		if (p_features->var_of_sub_var <= 2597.4529)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40a44ae7e28240b8
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN2@tree_predi

; 623  : 		{
; 624  : 				if (p_features->var_of_sub_var <= 146.7734)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406258bfb15b573f
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN4@tree_predi

; 625  : 				{
; 626  : 						*p_nb_iter = 23216.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d6ac0000000000
	movsd	QWORD PTR [eax], xmm0

; 627  : 						*p_nb_bad = 1560.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4098600000000000
	movsd	QWORD PTR [eax], xmm0

; 628  : 						return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 629  : 				}

	jmp	$LN9@tree_predi
$LN4@tree_predi:

; 630  : 				else if (p_features->merge_variance <= 259.6952)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40703b1f8a0902de
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN6@tree_predi

; 631  : 				{
; 632  : 						*p_nb_iter = 7470.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40bd2e0000000000
	movsd	QWORD PTR [eax], xmm0

; 633  : 						*p_nb_bad = 1902.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409db80000000000
	movsd	QWORD PTR [eax], xmm0

; 634  : 						return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 635  : 				}

	jmp	$LN9@tree_predi
$LN6@tree_predi:

; 636  : 				else if (p_features->qp <= 27)

	mov	eax, DWORD PTR _p_features$[ebp]
	cmp	DWORD PTR [eax+80], 27			; 0000001bH
	jg	SHORT $LN8@tree_predi

; 637  : 				{
; 638  : 						if (p_features->variance <= 73.9929)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40527f8bac710cb3
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN10@tree_predi

; 639  : 						{
; 640  : 								*p_nb_iter = 1138.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4091c80000000000
	movsd	QWORD PTR [eax], xmm0

; 641  : 								*p_nb_bad = 486.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407e600000000000
	movsd	QWORD PTR [eax], xmm0

; 642  : 								return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 643  : 						}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 644  : 						else {
; 645  : 								*p_nb_iter = 1619.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40994c0000000000
	movsd	QWORD PTR [eax], xmm0

; 646  : 								*p_nb_bad = 716.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4086600000000000
	movsd	QWORD PTR [eax], xmm0

; 647  : 								return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi
$LN11@tree_predi:

; 648  : 						}
; 649  : 				}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 650  : 				else {
; 651  : 						*p_nb_iter = 2425.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a2f20000000000
	movsd	QWORD PTR [eax], xmm0

; 652  : 						*p_nb_bad = 861.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@408ae80000000000
	movsd	QWORD PTR [eax], xmm0

; 653  : 						return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi
$LN9@tree_predi:

; 654  : 				}
; 655  : 		}

	jmp	$LN13@tree_predi
$LN2@tree_predi:

; 656  : 		else if (p_features->var_of_sub_var <= 60850.5208)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40edb650aa64c2f8
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN12@tree_predi

; 657  : 		{
; 658  : 				if (p_features->var_of_sub_var <= 10144.602)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40c3d04d0e560419
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN14@tree_predi

; 659  : 				{
; 660  : 						if (p_features->neigh_variance_C <= 926.8972)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@408cf72d77318fc5
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN16@tree_predi

; 661  : 						{
; 662  : 								if (p_features->sub_variance_0 <= 26.6006)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@403a99c0ebedfa44
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN18@tree_predi

; 663  : 								{
; 664  : 										*p_nb_iter = 1796.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409c100000000000
	movsd	QWORD PTR [eax], xmm0

; 665  : 										*p_nb_bad = 586.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4082500000000000
	movsd	QWORD PTR [eax], xmm0

; 666  : 										return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 667  : 								}

	jmp	$LN21@tree_predi
$LN18@tree_predi:

; 668  : 								else if (p_features->neigh_variance_A <= 493.5849)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@407ed95bc01a36e3
	comisd	xmm0, QWORD PTR [eax+48]
	jb	$LN20@tree_predi

; 669  : 								{
; 670  : 										if (p_features->neigh_variance_A <= 72.9516)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40523ce703afb7e9
	comisd	xmm0, QWORD PTR [eax+48]
	jb	SHORT $LN22@tree_predi

; 671  : 										{
; 672  : 												*p_nb_iter = 1326.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094b80000000000
	movsd	QWORD PTR [eax], xmm0

; 673  : 												*p_nb_bad = 557.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081680000000000
	movsd	QWORD PTR [eax], xmm0

; 674  : 												return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 675  : 										}

	jmp	SHORT $LN25@tree_predi
$LN22@tree_predi:

; 676  : 										else if (p_features->variance <= 156.4014)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40638cd844d013a9
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN24@tree_predi

; 677  : 										{
; 678  : 												*p_nb_iter = 1210.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092e80000000000
	movsd	QWORD PTR [eax], xmm0

; 679  : 												*p_nb_bad = 563.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081980000000000
	movsd	QWORD PTR [eax], xmm0

; 680  : 												return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 681  : 										}

	jmp	SHORT $LN25@tree_predi
$LN24@tree_predi:

; 682  : 										else {
; 683  : 												*p_nb_iter = 1920.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409e000000000000
	movsd	QWORD PTR [eax], xmm0

; 684  : 												*p_nb_bad = 817.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4089880000000000
	movsd	QWORD PTR [eax], xmm0

; 685  : 												return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi
$LN25@tree_predi:

; 686  : 										}
; 687  : 								}

	jmp	SHORT $LN21@tree_predi
$LN20@tree_predi:

; 688  : 								else {
; 689  : 										*p_nb_iter = 1106.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4091480000000000
	movsd	QWORD PTR [eax], xmm0

; 690  : 										*p_nb_bad = 437.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407b500000000000
	movsd	QWORD PTR [eax], xmm0

; 691  : 										return -1.0000;

	or	eax, -1
	jmp	SHORT $LN13@tree_predi
$LN21@tree_predi:

; 692  : 								}
; 693  : 						}

	jmp	SHORT $LN17@tree_predi
$LN16@tree_predi:

; 694  : 						else {
; 695  : 								*p_nb_iter = 1001.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f480000000000
	movsd	QWORD PTR [eax], xmm0

; 696  : 								*p_nb_bad = 278.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4071600000000000
	movsd	QWORD PTR [eax], xmm0

; 697  : 								return -1.0000;

	or	eax, -1
	jmp	SHORT $LN13@tree_predi
$LN17@tree_predi:

; 698  : 						}
; 699  : 				}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 700  : 				else {
; 701  : 						*p_nb_iter = 13068.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c9860000000000
	movsd	QWORD PTR [eax], xmm0

; 702  : 						*p_nb_bad = 3612.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40ac380000000000
	movsd	QWORD PTR [eax], xmm0

; 703  : 						return -1.0000;

	or	eax, -1
	jmp	SHORT $LN13@tree_predi
$LN15@tree_predi:

; 704  : 				}
; 705  : 		}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 706  : 		else {
; 707  : 				*p_nb_iter = 22705.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d62c4000000000
	movsd	QWORD PTR [eax], xmm0

; 708  : 				*p_nb_bad = 2687.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a4fe0000000000
	movsd	QWORD PTR [eax], xmm0

; 709  : 				return -1.0000;

	or	eax, -1
$LN13@tree_predi:

; 710  : 		}
; 711  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_split_depth_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_split_depth_1
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_split_depth_1 PROC			; COMDAT

; 531  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 532  : 		if (p_features->var_of_sub_var <= 1138.9473)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4091cbca0902de01
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN2@tree_predi

; 533  : 		{
; 534  : 				*p_nb_iter = 32445.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40dfaf4000000000
	movsd	QWORD PTR [eax], xmm0

; 535  : 				*p_nb_bad = 4580.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40b1e40000000000
	movsd	QWORD PTR [eax], xmm0

; 536  : 				return 1.0000;

	mov	eax, 1
	jmp	$LN5@tree_predi

; 537  : 		}

	jmp	$LN5@tree_predi
$LN2@tree_predi:

; 538  : 		else if (p_features->var_of_sub_var <= 27289.2117)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40daa64d8c7e2824
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN4@tree_predi

; 539  : 		{
; 540  : 				if (p_features->sub_variance_1 <= 12.0603)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40281edfa43fe5c9
	comisd	xmm0, QWORD PTR [eax+24]
	jb	SHORT $LN6@tree_predi

; 541  : 				{
; 542  : 						*p_nb_iter = 1900.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409db00000000000
	movsd	QWORD PTR [eax], xmm0

; 543  : 						*p_nb_bad = 401.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4079100000000000
	movsd	QWORD PTR [eax], xmm0

; 544  : 						return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi

; 545  : 				}

	jmp	$LN17@tree_predi
$LN6@tree_predi:

; 546  : 				else if (p_features->var_of_sub_var <= 5841.4773)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40b6d17a30553261
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN8@tree_predi

; 547  : 				{
; 548  : 						if (p_features->variance <= 72.4175)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40521ab851eb851f
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN10@tree_predi

; 549  : 						{
; 550  : 								*p_nb_iter = 1000.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [eax], xmm0

; 551  : 								*p_nb_bad = 356.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4076400000000000
	movsd	QWORD PTR [eax], xmm0

; 552  : 								return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi

; 553  : 						}

	jmp	SHORT $LN13@tree_predi
$LN10@tree_predi:

; 554  : 						else if (p_features->neigh_variance_A <= 633.8163)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4083ce87c84b5dcc
	comisd	xmm0, QWORD PTR [eax+48]
	jb	SHORT $LN12@tree_predi

; 555  : 						{
; 556  : 								*p_nb_iter = 5279.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b49f0000000000
	movsd	QWORD PTR [eax], xmm0

; 557  : 								*p_nb_bad = 1961.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409ea40000000000
	movsd	QWORD PTR [eax], xmm0

; 558  : 								return 1.0000;

	mov	eax, 1
	jmp	$LN5@tree_predi

; 559  : 						}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 560  : 						else {
; 561  : 								*p_nb_iter = 1176.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092600000000000
	movsd	QWORD PTR [eax], xmm0

; 562  : 								*p_nb_bad = 527.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4080780000000000
	movsd	QWORD PTR [eax], xmm0

; 563  : 								return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi
$LN13@tree_predi:

; 564  : 						}
; 565  : 				}

	jmp	$LN17@tree_predi
$LN8@tree_predi:

; 566  : 				else if (p_features->sub_variance_0 <= 38.3035)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@404326d916872b02
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN14@tree_predi

; 567  : 				{
; 568  : 						*p_nb_iter = 1251.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40938c0000000000
	movsd	QWORD PTR [eax], xmm0

; 569  : 						*p_nb_bad = 293.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4072500000000000
	movsd	QWORD PTR [eax], xmm0

; 570  : 						return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi

; 571  : 				}

	jmp	$LN17@tree_predi
$LN14@tree_predi:

; 572  : 				else if (p_features->neigh_variance_B <= 664.9494)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4084c7985f06f694
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN16@tree_predi

; 573  : 				{
; 574  : 						if (p_features->sub_variance_3 <= 45.8181)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4046e8b780346dc6
	comisd	xmm0, QWORD PTR [eax+40]
	jb	SHORT $LN18@tree_predi

; 575  : 						{
; 576  : 								*p_nb_iter = 1276.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4093f00000000000
	movsd	QWORD PTR [eax], xmm0

; 577  : 								*p_nb_bad = 471.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407d700000000000
	movsd	QWORD PTR [eax], xmm0

; 578  : 								return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi

; 579  : 						}

	jmp	$LN21@tree_predi
$LN18@tree_predi:

; 580  : 						else if (p_features->sub_variance_3 <= 404.3086)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@407944f0068db8bb
	comisd	xmm0, QWORD PTR [eax+40]
	jb	$LN20@tree_predi

; 581  : 						{
; 582  : 								if (p_features->sub_variance_1 <= 99.8715)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4058f7c6a7ef9db2
	comisd	xmm0, QWORD PTR [eax+24]
	jb	SHORT $LN22@tree_predi

; 583  : 								{
; 584  : 										*p_nb_iter = 1005.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f680000000000
	movsd	QWORD PTR [eax], xmm0

; 585  : 										*p_nb_bad = 435.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407b300000000000
	movsd	QWORD PTR [eax], xmm0

; 586  : 										return -1.0000;

	or	eax, -1
	jmp	$LN5@tree_predi

; 587  : 								}

	jmp	SHORT $LN25@tree_predi
$LN22@tree_predi:

; 588  : 								else if (p_features->sub_variance_0 <= 282.3064)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4071a4e703afb7e9
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN24@tree_predi

; 589  : 								{
; 590  : 										*p_nb_iter = 1370.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4095680000000000
	movsd	QWORD PTR [eax], xmm0

; 591  : 										*p_nb_bad = 539.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4080d80000000000
	movsd	QWORD PTR [eax], xmm0

; 592  : 										return 1.0000;

	mov	eax, 1
	jmp	$LN5@tree_predi

; 593  : 								}

	jmp	SHORT $LN25@tree_predi
$LN24@tree_predi:

; 594  : 								else {
; 595  : 										*p_nb_iter = 1013.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408fa80000000000
	movsd	QWORD PTR [eax], xmm0

; 596  : 										*p_nb_bad = 495.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407ef00000000000
	movsd	QWORD PTR [eax], xmm0

; 597  : 										return -1.0000;

	or	eax, -1
	jmp	SHORT $LN5@tree_predi
$LN25@tree_predi:

; 598  : 								}
; 599  : 						}

	jmp	SHORT $LN21@tree_predi
$LN20@tree_predi:

; 600  : 						else {
; 601  : 								*p_nb_iter = 1000.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [eax], xmm0

; 602  : 								*p_nb_bad = 379.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4077b00000000000
	movsd	QWORD PTR [eax], xmm0

; 603  : 								return -1.0000;

	or	eax, -1
	jmp	SHORT $LN5@tree_predi
$LN21@tree_predi:

; 604  : 						}
; 605  : 				}

	jmp	SHORT $LN17@tree_predi
$LN16@tree_predi:

; 606  : 				else {
; 607  : 						*p_nb_iter = 2270.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a1bc0000000000
	movsd	QWORD PTR [eax], xmm0

; 608  : 						*p_nb_bad = 679.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4085380000000000
	movsd	QWORD PTR [eax], xmm0

; 609  : 						return -1.0000;

	or	eax, -1
	jmp	SHORT $LN5@tree_predi
$LN17@tree_predi:

; 610  : 				}
; 611  : 		}

	jmp	SHORT $LN5@tree_predi
$LN4@tree_predi:

; 612  : 		else {
; 613  : 				*p_nb_iter = 29015.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40dc55c000000000
	movsd	QWORD PTR [eax], xmm0

; 614  : 				*p_nb_bad = 3950.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40aedc0000000000
	movsd	QWORD PTR [eax], xmm0

; 615  : 				return -1.0000;

	or	eax, -1
$LN5@tree_predi:

; 616  : 		}
; 617  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_split_depth_1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_split_depth_0
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_split_depth_0 PROC			; COMDAT

; 425  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 426  : 		if (p_features->var_of_sub_var <= 12754.7856)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40c8e9648e8a71de
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN2@tree_predi

; 427  : 		{
; 428  : 				if (p_features->var_of_sub_var <= 137.9034)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40613ce8a71de69b
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN4@tree_predi

; 429  : 				{
; 430  : 						*p_nb_iter = 25155.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d890c000000000
	movsd	QWORD PTR [eax], xmm0

; 431  : 						*p_nb_bad = 2959.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a71e0000000000
	movsd	QWORD PTR [eax], xmm0

; 432  : 						return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi

; 433  : 				}

	jmp	$LN9@tree_predi
$LN4@tree_predi:

; 434  : 				else if (p_features->sub_variance_2 <= 13.2892)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@402a941205bc01a3
	comisd	xmm0, QWORD PTR [eax+32]
	jb	SHORT $LN6@tree_predi

; 435  : 				{
; 436  : 						*p_nb_iter = 1080.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090e00000000000
	movsd	QWORD PTR [eax], xmm0

; 437  : 						*p_nb_bad = 383.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4077f00000000000
	movsd	QWORD PTR [eax], xmm0

; 438  : 						return -1.0000;

	or	eax, -1
	jmp	$LN19@tree_predi

; 439  : 				}

	jmp	$LN9@tree_predi
$LN6@tree_predi:

; 440  : 				else if (p_features->variance <= 564.1738)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4081a163f141205c
	comisd	xmm0, QWORD PTR [eax]
	jb	$LN8@tree_predi

; 441  : 				{
; 442  : 						if (p_features->var_of_sub_var <= 1185.4728)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@409285e425aee632
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN10@tree_predi

; 443  : 						{
; 444  : 								*p_nb_iter = 6067.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b7b30000000000
	movsd	QWORD PTR [eax], xmm0

; 445  : 								*p_nb_bad = 1699.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409a8c0000000000
	movsd	QWORD PTR [eax], xmm0

; 446  : 								return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi

; 447  : 						}

	jmp	$LN13@tree_predi
$LN10@tree_predi:

; 448  : 						else if (p_features->var_of_sub_mean <= 46.2388)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40471e90ff972474
	comisd	xmm0, QWORD PTR [eax+72]
	jb	$LN12@tree_predi

; 449  : 						{
; 450  : 								if (p_features->sub_variance_0 <= 46.8708)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40476f765fd8adac
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN14@tree_predi

; 451  : 								{
; 452  : 										*p_nb_iter = 1088.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4091000000000000
	movsd	QWORD PTR [eax], xmm0

; 453  : 										*p_nb_bad = 377.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4077900000000000
	movsd	QWORD PTR [eax], xmm0

; 454  : 										return -1.0000;

	or	eax, -1
	jmp	$LN19@tree_predi

; 455  : 								}

	jmp	SHORT $LN17@tree_predi
$LN14@tree_predi:

; 456  : 								else if (p_features->sub_variance_3 <= 61.4213)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@404eb5ed288ce704
	comisd	xmm0, QWORD PTR [eax+40]
	jb	SHORT $LN16@tree_predi

; 457  : 								{
; 458  : 										*p_nb_iter = 1183.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40927c0000000000
	movsd	QWORD PTR [eax], xmm0

; 459  : 										*p_nb_bad = 498.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407f200000000000
	movsd	QWORD PTR [eax], xmm0

; 460  : 										return -1.0000;

	or	eax, -1
	jmp	$LN19@tree_predi

; 461  : 								}

	jmp	SHORT $LN17@tree_predi
$LN16@tree_predi:

; 462  : 								else {
; 463  : 										*p_nb_iter = 3416.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40aab00000000000
	movsd	QWORD PTR [eax], xmm0

; 464  : 										*p_nb_bad = 1373.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4095740000000000
	movsd	QWORD PTR [eax], xmm0

; 465  : 										return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi
$LN17@tree_predi:

; 466  : 								}
; 467  : 						}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 468  : 						else {
; 469  : 								*p_nb_iter = 3769.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40ad720000000000
	movsd	QWORD PTR [eax], xmm0

; 470  : 								*p_nb_bad = 1093.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4091140000000000
	movsd	QWORD PTR [eax], xmm0

; 471  : 								return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi
$LN13@tree_predi:

; 472  : 						}
; 473  : 				}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 474  : 				else {
; 475  : 						*p_nb_iter = 1036.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090300000000000
	movsd	QWORD PTR [eax], xmm0

; 476  : 						*p_nb_bad = 434.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407b200000000000
	movsd	QWORD PTR [eax], xmm0

; 477  : 						return -1.0000;

	or	eax, -1
	jmp	$LN19@tree_predi
$LN9@tree_predi:

; 478  : 				}
; 479  : 		}

	jmp	$LN19@tree_predi
$LN2@tree_predi:

; 480  : 		else if (p_features->var_of_sub_var <= 98333.8279)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40f801dd3f141206
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN18@tree_predi

; 481  : 		{
; 482  : 				if (p_features->variance <= 987.2333)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@408ed9ddcc63f141
	comisd	xmm0, QWORD PTR [eax]
	jb	$LN20@tree_predi

; 483  : 				{
; 484  : 						if (p_features->var_of_sub_var <= 37261.2896)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40e231a94467381d
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN22@tree_predi

; 485  : 						{
; 486  : 								if (p_features->variance <= 238.2248)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406dc7318fc50481
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN24@tree_predi

; 487  : 								{
; 488  : 										*p_nb_iter = 1323.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094ac0000000000
	movsd	QWORD PTR [eax], xmm0

; 489  : 										*p_nb_bad = 301.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4072d00000000000
	movsd	QWORD PTR [eax], xmm0

; 490  : 										return -1.0000;

	or	eax, -1
	jmp	$LN19@tree_predi

; 491  : 								}

	jmp	$LN29@tree_predi
$LN24@tree_predi:

; 492  : 								else if (p_features->var_of_sub_var <= 17347.3971)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40d0f0d96a161e4f
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN26@tree_predi

; 493  : 								{
; 494  : 										*p_nb_iter = 1215.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092fc0000000000
	movsd	QWORD PTR [eax], xmm0

; 495  : 										*p_nb_bad = 550.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081300000000000
	movsd	QWORD PTR [eax], xmm0

; 496  : 										return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi

; 497  : 								}

	jmp	SHORT $LN29@tree_predi
$LN26@tree_predi:

; 498  : 								else if (p_features->qp <= 22)

	mov	eax, DWORD PTR _p_features$[ebp]
	cmp	DWORD PTR [eax+80], 22			; 00000016H
	jg	SHORT $LN28@tree_predi

; 499  : 								{
; 500  : 										*p_nb_iter = 1000.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [eax], xmm0

; 501  : 										*p_nb_bad = 493.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407ed00000000000
	movsd	QWORD PTR [eax], xmm0

; 502  : 										return 0.0000;

	xor	eax, eax
	jmp	$LN19@tree_predi

; 503  : 								}

	jmp	SHORT $LN29@tree_predi
$LN28@tree_predi:

; 504  : 								else {
; 505  : 										*p_nb_iter = 2640.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a4a00000000000
	movsd	QWORD PTR [eax], xmm0

; 506  : 										*p_nb_bad = 1121.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4091840000000000
	movsd	QWORD PTR [eax], xmm0

; 507  : 										return -1.0000;

	or	eax, -1
	jmp	SHORT $LN19@tree_predi
$LN29@tree_predi:

; 508  : 								}
; 509  : 						}

	jmp	SHORT $LN23@tree_predi
$LN22@tree_predi:

; 510  : 						else {
; 511  : 								*p_nb_iter = 5188.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b4440000000000
	movsd	QWORD PTR [eax], xmm0

; 512  : 								*p_nb_bad = 1248.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4093800000000000
	movsd	QWORD PTR [eax], xmm0

; 513  : 								return -1.0000;

	or	eax, -1
	jmp	SHORT $LN19@tree_predi
$LN23@tree_predi:

; 514  : 						}
; 515  : 				}

	jmp	SHORT $LN21@tree_predi
$LN20@tree_predi:

; 516  : 				else {
; 517  : 						*p_nb_iter = 2323.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a2260000000000
	movsd	QWORD PTR [eax], xmm0

; 518  : 						*p_nb_bad = 274.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4071200000000000
	movsd	QWORD PTR [eax], xmm0

; 519  : 						return -1.0000;

	or	eax, -1
	jmp	SHORT $LN19@tree_predi
$LN21@tree_predi:

; 520  : 				}
; 521  : 		}

	jmp	SHORT $LN19@tree_predi
$LN18@tree_predi:

; 522  : 		else {
; 523  : 				*p_nb_iter = 21357.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d4db4000000000
	movsd	QWORD PTR [eax], xmm0

; 524  : 				*p_nb_bad = 1829.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409c940000000000
	movsd	QWORD PTR [eax], xmm0

; 525  : 				return -1.0000;

	or	eax, -1
$LN19@tree_predi:

; 526  : 		}
; 527  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_split_depth_0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_merge_depth_4
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_merge_depth_4 PROC			; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 353  : 		if (p_features->neigh_variance_C <= 240.2773)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406e08dfa43fe5c9
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN2@tree_predi

; 354  : 		{
; 355  : 				if (p_features->neigh_variance_B <= 227.5898)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406c72dfa43fe5c9
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN4@tree_predi

; 356  : 				{
; 357  : 						if (p_features->neigh_variance_A <= 195.4844)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40686f80346dc5d6
	comisd	xmm0, QWORD PTR [eax+48]
	jb	$LN6@tree_predi

; 358  : 						{
; 359  : 								if (p_features->variance <= 203.3086)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406969e00d1b7176
	comisd	xmm0, QWORD PTR [eax]
	jb	$LN8@tree_predi

; 360  : 								{
; 361  : 										if (p_features->qp <= 32)

	mov	eax, DWORD PTR _p_features$[ebp]
	cmp	DWORD PTR [eax+80], 32			; 00000020H
	jg	$LN10@tree_predi

; 362  : 										{
; 363  : 												if (p_features->neigh_variance_C <= 102.2344)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40598f0068db8bac
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN12@tree_predi

; 364  : 												{
; 365  : 														if (p_features->neigh_variance_B <= 116.4961)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@405d1fc01a36e2eb
	comisd	xmm0, QWORD PTR [eax+56]
	jb	SHORT $LN14@tree_predi

; 366  : 														{
; 367  : 																if (p_features->variance <= 89.4023)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@405659bf487fcb92
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN16@tree_predi

; 368  : 																{
; 369  : 																		*p_nb_iter = 27398.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40dac18000000000
	movsd	QWORD PTR [eax], xmm0

; 370  : 																		*p_nb_bad = 4665.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40b2390000000000
	movsd	QWORD PTR [eax], xmm0

; 371  : 																		return -1.0000;

	or	eax, -1
	jmp	$LN3@tree_predi

; 372  : 																}

	jmp	SHORT $LN17@tree_predi
$LN16@tree_predi:

; 373  : 																else {
; 374  : 																		*p_nb_iter = 1676.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409a300000000000
	movsd	QWORD PTR [eax], xmm0

; 375  : 																		*p_nb_bad = 795.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4088d80000000000
	movsd	QWORD PTR [eax], xmm0

; 376  : 																		return 4.0000;

	mov	eax, 4
	jmp	$LN3@tree_predi
$LN17@tree_predi:

; 377  : 																}
; 378  : 														}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 379  : 														else {
; 380  : 																*p_nb_iter = 1405.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4095f40000000000
	movsd	QWORD PTR [eax], xmm0

; 381  : 																*p_nb_bad = 566.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081b00000000000
	movsd	QWORD PTR [eax], xmm0

; 382  : 																return 4.0000;

	mov	eax, 4
	jmp	$LN3@tree_predi
$LN15@tree_predi:

; 383  : 														}
; 384  : 												}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 385  : 												else {
; 386  : 														*p_nb_iter = 2827.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a6160000000000
	movsd	QWORD PTR [eax], xmm0

; 387  : 														*p_nb_bad = 1173.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4092540000000000
	movsd	QWORD PTR [eax], xmm0

; 388  : 														return 4.0000;

	mov	eax, 4
	jmp	$LN3@tree_predi
$LN13@tree_predi:

; 389  : 												}
; 390  : 										}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 391  : 										else {
; 392  : 												*p_nb_iter = 8871.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c1538000000000
	movsd	QWORD PTR [eax], xmm0

; 393  : 												*p_nb_bad = 822.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4089b00000000000
	movsd	QWORD PTR [eax], xmm0

; 394  : 												return -1.0000;

	or	eax, -1
	jmp	$LN3@tree_predi
$LN11@tree_predi:

; 395  : 										}
; 396  : 								}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 397  : 								else {
; 398  : 										*p_nb_iter = 3162.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a8b40000000000
	movsd	QWORD PTR [eax], xmm0

; 399  : 										*p_nb_bad = 718.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4086700000000000
	movsd	QWORD PTR [eax], xmm0

; 400  : 										return 4.0000;

	mov	eax, 4
	jmp	SHORT $LN3@tree_predi
$LN9@tree_predi:

; 401  : 								}
; 402  : 						}

	jmp	SHORT $LN7@tree_predi
$LN6@tree_predi:

; 403  : 						else {
; 404  : 								*p_nb_iter = 6154.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b80a0000000000
	movsd	QWORD PTR [eax], xmm0

; 405  : 								*p_nb_bad = 1397.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4095d40000000000
	movsd	QWORD PTR [eax], xmm0

; 406  : 								return 4.0000;

	mov	eax, 4
	jmp	SHORT $LN3@tree_predi
$LN7@tree_predi:

; 407  : 						}
; 408  : 				}

	jmp	SHORT $LN5@tree_predi
$LN4@tree_predi:

; 409  : 				else {
; 410  : 						*p_nb_iter = 9385.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c2548000000000
	movsd	QWORD PTR [eax], xmm0

; 411  : 						*p_nb_bad = 1609.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4099240000000000
	movsd	QWORD PTR [eax], xmm0

; 412  : 						return 4.0000;

	mov	eax, 4
	jmp	SHORT $LN3@tree_predi
$LN5@tree_predi:

; 413  : 				}
; 414  : 		}

	jmp	SHORT $LN3@tree_predi
$LN2@tree_predi:

; 415  : 		else {
; 416  : 				*p_nb_iter = 19122.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d2ac8000000000
	movsd	QWORD PTR [eax], xmm0

; 417  : 				*p_nb_bad = 2960.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a7200000000000
	movsd	QWORD PTR [eax], xmm0

; 418  : 				return 4.0000;

	mov	eax, 4
$LN3@tree_predi:

; 419  : 		}
; 420  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_merge_depth_4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_merge_depth_3
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_merge_depth_3 PROC			; COMDAT

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 276  : 		if (p_features->merge_variance <= 80.1487)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@405409844d013a93
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN2@tree_predi

; 277  : 		{
; 278  : 				if (p_features->neigh_variance_C <= 83.7148)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4054edbf487fcb92
	comisd	xmm0, QWORD PTR [eax+64]
	jb	SHORT $LN4@tree_predi

; 279  : 				{
; 280  : 						*p_nb_iter = 29806.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40dd1b8000000000
	movsd	QWORD PTR [eax], xmm0

; 281  : 						*p_nb_bad = 3603.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40ac260000000000
	movsd	QWORD PTR [eax], xmm0

; 282  : 						return -1.0000;

	or	eax, -1
	jmp	$LN7@tree_predi

; 283  : 				}

	jmp	SHORT $LN5@tree_predi
$LN4@tree_predi:

; 284  : 				else {
; 285  : 						*p_nb_iter = 1003.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@408f580000000000
	movsd	QWORD PTR [eax], xmm0

; 286  : 						*p_nb_bad = 421.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407a500000000000
	movsd	QWORD PTR [eax], xmm0

; 287  : 						return 3.0000;

	mov	eax, 3
	jmp	$LN7@tree_predi
$LN5@tree_predi:

; 288  : 				}
; 289  : 		}

	jmp	$LN7@tree_predi
$LN2@tree_predi:

; 290  : 		else if (p_features->merge_variance <= 351.8138)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4075fd05532617c2
	comisd	xmm0, QWORD PTR [eax+8]
	jb	$LN6@tree_predi

; 291  : 		{
; 292  : 				if (p_features->neigh_variance_C <= 255.4236)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406fed8e219652bd
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN8@tree_predi

; 293  : 				{
; 294  : 						if (p_features->neigh_variance_B <= 260.5349)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4070488ef34d6a16
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN10@tree_predi

; 295  : 						{
; 296  : 								if (p_features->var_of_sub_var <= 6381.513)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40b8ed8353f7ced9
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN12@tree_predi

; 297  : 								{
; 298  : 										if (p_features->neigh_variance_A <= 244.2556)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@406e882de00d1b71
	comisd	xmm0, QWORD PTR [eax+48]
	jb	$LN14@tree_predi

; 299  : 										{
; 300  : 												if (p_features->sub_variance_0 <= 4.75)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4013000000000000
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN16@tree_predi

; 301  : 												{
; 302  : 														*p_nb_iter = 1290.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094280000000000
	movsd	QWORD PTR [eax], xmm0

; 303  : 														*p_nb_bad = 525.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4080680000000000
	movsd	QWORD PTR [eax], xmm0

; 304  : 														return 3.0000;

	mov	eax, 3
	jmp	$LN7@tree_predi

; 305  : 												}

	jmp	SHORT $LN19@tree_predi
$LN16@tree_predi:

; 306  : 												else if (p_features->neigh_variance_B <= 16.9287)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4030edbf487fcb92
	comisd	xmm0, QWORD PTR [eax+56]
	jb	SHORT $LN18@tree_predi

; 307  : 												{
; 308  : 														*p_nb_iter = 1045.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090540000000000
	movsd	QWORD PTR [eax], xmm0

; 309  : 														*p_nb_bad = 499.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407f300000000000
	movsd	QWORD PTR [eax], xmm0

; 310  : 														return 3.0000;

	mov	eax, 3
	jmp	$LN7@tree_predi

; 311  : 												}

	jmp	SHORT $LN19@tree_predi
$LN18@tree_predi:

; 312  : 												else {
; 313  : 														*p_nb_iter = 6901.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40baf50000000000
	movsd	QWORD PTR [eax], xmm0

; 314  : 														*p_nb_bad = 2494.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a37c0000000000
	movsd	QWORD PTR [eax], xmm0

; 315  : 														return -1.0000;

	or	eax, -1
	jmp	$LN7@tree_predi
$LN19@tree_predi:

; 316  : 												}
; 317  : 										}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 318  : 										else {
; 319  : 												*p_nb_iter = 1332.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094d00000000000
	movsd	QWORD PTR [eax], xmm0

; 320  : 												*p_nb_bad = 408.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4079800000000000
	movsd	QWORD PTR [eax], xmm0

; 321  : 												return 3.0000;

	mov	eax, 3
	jmp	$LN7@tree_predi
$LN15@tree_predi:

; 322  : 										}
; 323  : 								}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 324  : 								else {
; 325  : 										*p_nb_iter = 2929.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a6e20000000000
	movsd	QWORD PTR [eax], xmm0

; 326  : 										*p_nb_bad = 842.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@408a500000000000
	movsd	QWORD PTR [eax], xmm0

; 327  : 										return 3.0000;

	mov	eax, 3
	jmp	SHORT $LN7@tree_predi
$LN13@tree_predi:

; 328  : 								}
; 329  : 						}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 330  : 						else {
; 331  : 								*p_nb_iter = 2239.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a17e0000000000
	movsd	QWORD PTR [eax], xmm0

; 332  : 								*p_nb_bad = 572.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081e00000000000
	movsd	QWORD PTR [eax], xmm0

; 333  : 								return 3.0000;

	mov	eax, 3
	jmp	SHORT $LN7@tree_predi
$LN11@tree_predi:

; 334  : 						}
; 335  : 				}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 336  : 				else {
; 337  : 						*p_nb_iter = 2777.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40a5b20000000000
	movsd	QWORD PTR [eax], xmm0

; 338  : 						*p_nb_bad = 714.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4086500000000000
	movsd	QWORD PTR [eax], xmm0

; 339  : 						return 3.0000;

	mov	eax, 3
	jmp	SHORT $LN7@tree_predi
$LN9@tree_predi:

; 340  : 				}
; 341  : 		}

	jmp	SHORT $LN7@tree_predi
$LN6@tree_predi:

; 342  : 		else {
; 343  : 				*p_nb_iter = 30678.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40ddf58000000000
	movsd	QWORD PTR [eax], xmm0

; 344  : 				*p_nb_bad = 5409.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40b5210000000000
	movsd	QWORD PTR [eax], xmm0

; 345  : 				return 3.0000;

	mov	eax, 3
$LN7@tree_predi:

; 346  : 		}
; 347  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_merge_depth_3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_merge_depth_2
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_merge_depth_2 PROC			; COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 167  : 		if (p_features->merge_variance <= 119.4611)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@405ddd82a9930be1
	comisd	xmm0, QWORD PTR [eax+8]
	jb	$LN2@tree_predi

; 168  : 		{
; 169  : 				if (p_features->var_of_sub_var <= 1078.0638)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4090d84154c985f0
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN4@tree_predi

; 170  : 				{
; 171  : 						if (p_features->neigh_variance_B <= 70.2189)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40518e027525460b
	comisd	xmm0, QWORD PTR [eax+56]
	jb	SHORT $LN6@tree_predi

; 172  : 						{
; 173  : 								*p_nb_iter = 29253.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40dc914000000000
	movsd	QWORD PTR [eax], xmm0

; 174  : 								*p_nb_bad = 3837.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40adfa0000000000
	movsd	QWORD PTR [eax], xmm0

; 175  : 								return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 176  : 						}

	jmp	SHORT $LN9@tree_predi
$LN6@tree_predi:

; 177  : 						else if (p_features->variance <= 20.8711)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4034df0068db8bac
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN8@tree_predi

; 178  : 						{
; 179  : 								*p_nb_iter = 1292.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094300000000000
	movsd	QWORD PTR [eax], xmm0

; 180  : 								*p_nb_bad = 458.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407ca00000000000
	movsd	QWORD PTR [eax], xmm0

; 181  : 								return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 182  : 						}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 183  : 						else {
; 184  : 								*p_nb_iter = 1707.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409aac0000000000
	movsd	QWORD PTR [eax], xmm0

; 185  : 								*p_nb_bad = 399.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4078f00000000000
	movsd	QWORD PTR [eax], xmm0

; 186  : 								return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN9@tree_predi:

; 187  : 						}
; 188  : 				}

	jmp	SHORT $LN11@tree_predi
$LN4@tree_predi:

; 189  : 				else if (p_features->var_of_sub_var <= 3300.4034)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40a9c8ce8a71de6a
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN10@tree_predi

; 190  : 				{
; 191  : 						*p_nb_iter = 1554.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4098480000000000
	movsd	QWORD PTR [eax], xmm0

; 192  : 						*p_nb_bad = 675.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4085180000000000
	movsd	QWORD PTR [eax], xmm0

; 193  : 						return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi

; 194  : 				}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 195  : 				else {
; 196  : 						*p_nb_iter = 1540.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4098100000000000
	movsd	QWORD PTR [eax], xmm0

; 197  : 						*p_nb_bad = 429.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407ad00000000000
	movsd	QWORD PTR [eax], xmm0

; 198  : 						return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi
$LN11@tree_predi:

; 199  : 				}
; 200  : 		}

	jmp	$LN13@tree_predi
$LN2@tree_predi:

; 201  : 		else if (p_features->merge_variance <= 696.1989)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4085c19758e21965
	comisd	xmm0, QWORD PTR [eax+8]
	jb	$LN12@tree_predi

; 202  : 		{
; 203  : 				if (p_features->var_of_sub_var <= 31803.3242)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40df0ed4bfb15b57
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN14@tree_predi

; 204  : 				{
; 205  : 						if (p_features->sub_variance_2 <= 10.3845)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4024c4dd2f1a9fbe
	comisd	xmm0, QWORD PTR [eax+32]
	jb	SHORT $LN16@tree_predi

; 206  : 						{
; 207  : 								*p_nb_iter = 3473.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40ab220000000000
	movsd	QWORD PTR [eax], xmm0

; 208  : 								*p_nb_bad = 768.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4088000000000000
	movsd	QWORD PTR [eax], xmm0

; 209  : 								return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 210  : 						}

	jmp	$LN19@tree_predi
$LN16@tree_predi:

; 211  : 						else if (p_features->neigh_variance_C <= 571.5329)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4081dc436113404f
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN18@tree_predi

; 212  : 						{
; 213  : 								if (p_features->neigh_variance_B <= 492.8159)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@407ecd0ded288ce7
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN20@tree_predi

; 214  : 								{
; 215  : 										if (p_features->neigh_variance_B <= 38.9672)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40437bcd35a85879
	comisd	xmm0, QWORD PTR [eax+56]
	jb	SHORT $LN22@tree_predi

; 216  : 										{
; 217  : 												*p_nb_iter = 1887.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409d7c0000000000
	movsd	QWORD PTR [eax], xmm0

; 218  : 												*p_nb_bad = 588.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4082600000000000
	movsd	QWORD PTR [eax], xmm0

; 219  : 												return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 220  : 										}

	jmp	$LN25@tree_predi
$LN22@tree_predi:

; 221  : 										else if (p_features->neigh_variance_A <= 380.5927)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4077c97bb2fec56d
	comisd	xmm0, QWORD PTR [eax+48]
	jb	$LN24@tree_predi

; 222  : 										{
; 223  : 												if (p_features->sub_variance_1 <= 19.9678)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4033f7c1bda5119d
	comisd	xmm0, QWORD PTR [eax+24]
	jb	SHORT $LN26@tree_predi

; 224  : 												{
; 225  : 														*p_nb_iter = 1686.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409a580000000000
	movsd	QWORD PTR [eax], xmm0

; 226  : 														*p_nb_bad = 721.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4086880000000000
	movsd	QWORD PTR [eax], xmm0

; 227  : 														return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 228  : 												}

	jmp	SHORT $LN29@tree_predi
$LN26@tree_predi:

; 229  : 												else if (p_features->neigh_variance_A <= 66.6749)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4050ab318fc50481
	comisd	xmm0, QWORD PTR [eax+48]
	jb	SHORT $LN28@tree_predi

; 230  : 												{
; 231  : 														*p_nb_iter = 1440.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4096800000000000
	movsd	QWORD PTR [eax], xmm0

; 232  : 														*p_nb_bad = 631.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4083b80000000000
	movsd	QWORD PTR [eax], xmm0

; 233  : 														return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi

; 234  : 												}

	jmp	SHORT $LN29@tree_predi
$LN28@tree_predi:

; 235  : 												else {
; 236  : 														*p_nb_iter = 5772.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b68c0000000000
	movsd	QWORD PTR [eax], xmm0

; 237  : 														*p_nb_bad = 2031.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409fbc0000000000
	movsd	QWORD PTR [eax], xmm0

; 238  : 														return -1.0000;

	or	eax, -1
	jmp	$LN13@tree_predi
$LN29@tree_predi:

; 239  : 												}
; 240  : 										}

	jmp	SHORT $LN25@tree_predi
$LN24@tree_predi:

; 241  : 										else {
; 242  : 												*p_nb_iter = 1791.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409bfc0000000000
	movsd	QWORD PTR [eax], xmm0

; 243  : 												*p_nb_bad = 619.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4083580000000000
	movsd	QWORD PTR [eax], xmm0

; 244  : 												return 2.0000;

	mov	eax, 2
	jmp	$LN13@tree_predi
$LN25@tree_predi:

; 245  : 										}
; 246  : 								}

	jmp	SHORT $LN21@tree_predi
$LN20@tree_predi:

; 247  : 								else {
; 248  : 										*p_nb_iter = 1624.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4099600000000000
	movsd	QWORD PTR [eax], xmm0

; 249  : 										*p_nb_bad = 494.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407ee00000000000
	movsd	QWORD PTR [eax], xmm0

; 250  : 										return 2.0000;

	mov	eax, 2
	jmp	SHORT $LN13@tree_predi
$LN21@tree_predi:

; 251  : 								}
; 252  : 						}

	jmp	SHORT $LN19@tree_predi
$LN18@tree_predi:

; 253  : 						else {
; 254  : 								*p_nb_iter = 1298.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4094480000000000
	movsd	QWORD PTR [eax], xmm0

; 255  : 								*p_nb_bad = 312.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4073800000000000
	movsd	QWORD PTR [eax], xmm0

; 256  : 								return 2.0000;

	mov	eax, 2
	jmp	SHORT $LN13@tree_predi
$LN19@tree_predi:

; 257  : 						}
; 258  : 				}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 259  : 				else {
; 260  : 						*p_nb_iter = 4577.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40b1e10000000000
	movsd	QWORD PTR [eax], xmm0

; 261  : 						*p_nb_bad = 892.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@408be00000000000
	movsd	QWORD PTR [eax], xmm0

; 262  : 						return 2.0000;

	mov	eax, 2
	jmp	SHORT $LN13@tree_predi
$LN15@tree_predi:

; 263  : 				}
; 264  : 		}

	jmp	SHORT $LN13@tree_predi
$LN12@tree_predi:

; 265  : 		else {
; 266  : 				*p_nb_iter = 21106.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d49c8000000000
	movsd	QWORD PTR [eax], xmm0

; 267  : 				*p_nb_bad = 2744.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a5700000000000
	movsd	QWORD PTR [eax], xmm0

; 268  : 				return 2.0000;

	mov	eax, 2
$LN13@tree_predi:

; 269  : 		}
; 270  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_merge_depth_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _tree_predict_merge_depth_1
_TEXT	SEGMENT
_p_features$ = 8					; size = 4
_p_nb_iter$ = 12					; size = 4
_p_nb_bad$ = 16						; size = 4
_tree_predict_merge_depth_1 PROC			; COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 38   : 		if (p_features->merge_variance <= 140.3129)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40618a0346dc5d64
	comisd	xmm0, QWORD PTR [eax+8]
	jb	$LN2@tree_predi

; 39   : 		{
; 40   : 				if (p_features->var_of_sub_var <= 569.6553)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4081cd3e0ded288d
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN4@tree_predi

; 41   : 				{
; 42   : 						if (p_features->merge_variance <= 20.8854)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4034e2a9930be0df
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN6@tree_predi

; 43   : 						{
; 44   : 								*p_nb_iter = 19428.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d2f90000000000
	movsd	QWORD PTR [eax], xmm0

; 45   : 								*p_nb_bad = 1740.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409b300000000000
	movsd	QWORD PTR [eax], xmm0

; 46   : 								return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi

; 47   : 						}

	jmp	$LN9@tree_predi
$LN6@tree_predi:

; 48   : 						else if (p_features->sub_variance_0 <= 9.1015)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@402233f7ced91687
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN8@tree_predi

; 49   : 						{
; 50   : 								if (p_features->merge_variance <= 39.132)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@404390e560418937
	comisd	xmm0, QWORD PTR [eax+8]
	jb	SHORT $LN10@tree_predi

; 51   : 								{
; 52   : 										*p_nb_iter = 1166.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092380000000000
	movsd	QWORD PTR [eax], xmm0

; 53   : 										*p_nb_bad = 358.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4076600000000000
	movsd	QWORD PTR [eax], xmm0

; 54   : 										return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi

; 55   : 								}

	jmp	SHORT $LN11@tree_predi
$LN10@tree_predi:

; 56   : 								else {
; 57   : 										*p_nb_iter = 1049.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090640000000000
	movsd	QWORD PTR [eax], xmm0

; 58   : 										*p_nb_bad = 392.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4078800000000000
	movsd	QWORD PTR [eax], xmm0

; 59   : 										return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi
$LN11@tree_predi:

; 60   : 								}
; 61   : 						}

	jmp	SHORT $LN9@tree_predi
$LN8@tree_predi:

; 62   : 						else {
; 63   : 								*p_nb_iter = 9371.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c24d8000000000
	movsd	QWORD PTR [eax], xmm0

; 64   : 								*p_nb_bad = 1805.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409c340000000000
	movsd	QWORD PTR [eax], xmm0

; 65   : 								return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi
$LN9@tree_predi:

; 66   : 						}
; 67   : 				}

	jmp	$LN15@tree_predi
$LN4@tree_predi:

; 68   : 				else if (p_features->sub_variance_2 <= 23.3193)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@403751bda5119ce0
	comisd	xmm0, QWORD PTR [eax+32]
	jb	SHORT $LN12@tree_predi

; 69   : 				{
; 70   : 						*p_nb_iter = 1059.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40908c0000000000
	movsd	QWORD PTR [eax], xmm0

; 71   : 						*p_nb_bad = 329.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4074900000000000
	movsd	QWORD PTR [eax], xmm0

; 72   : 						return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 73   : 				}

	jmp	SHORT $LN15@tree_predi
$LN12@tree_predi:

; 74   : 				else if (p_features->sub_variance_1 <= 30.7348)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@403ebc1bda5119ce
	comisd	xmm0, QWORD PTR [eax+24]
	jb	SHORT $LN14@tree_predi

; 75   : 				{
; 76   : 						*p_nb_iter = 1042.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090480000000000
	movsd	QWORD PTR [eax], xmm0

; 77   : 						*p_nb_bad = 395.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4078b00000000000
	movsd	QWORD PTR [eax], xmm0

; 78   : 						return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 79   : 				}

	jmp	SHORT $LN15@tree_predi
$LN14@tree_predi:

; 80   : 				else {
; 81   : 						*p_nb_iter = 1756.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409b700000000000
	movsd	QWORD PTR [eax], xmm0

; 82   : 						*p_nb_bad = 588.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4082600000000000
	movsd	QWORD PTR [eax], xmm0

; 83   : 						return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi
$LN15@tree_predi:

; 84   : 				}
; 85   : 		}

	jmp	$LN17@tree_predi
$LN2@tree_predi:

; 86   : 		else if (p_features->merge_variance <= 857.8047)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@408ace70068db8bb
	comisd	xmm0, QWORD PTR [eax+8]
	jb	$LN16@tree_predi

; 87   : 		{
; 88   : 				if (p_features->var_of_sub_var <= 66593.5553)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40f04218e28240b8
	comisd	xmm0, QWORD PTR [eax+88]
	jb	$LN18@tree_predi

; 89   : 				{
; 90   : 						if (p_features->sub_variance_0 <= 12.1697)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@402856e2eb1c432d
	comisd	xmm0, QWORD PTR [eax+16]
	jb	SHORT $LN20@tree_predi

; 91   : 						{
; 92   : 								*p_nb_iter = 2006.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409f580000000000
	movsd	QWORD PTR [eax], xmm0

; 93   : 								*p_nb_bad = 374.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4077600000000000
	movsd	QWORD PTR [eax], xmm0

; 94   : 								return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 95   : 						}

	jmp	$LN23@tree_predi
$LN20@tree_predi:

; 96   : 						else if (p_features->neigh_variance_C <= 646.8204)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@408436902de00d1b
	comisd	xmm0, QWORD PTR [eax+64]
	jb	$LN22@tree_predi

; 97   : 						{
; 98   : 								if (p_features->neigh_variance_A <= 664.7609)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4084c61652bd3c36
	comisd	xmm0, QWORD PTR [eax+48]
	jb	$LN24@tree_predi

; 99   : 								{
; 100  : 										if (p_features->neigh_variance_B <= 571.2004)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4081d99a6b50b0f2
	comisd	xmm0, QWORD PTR [eax+56]
	jb	$LN26@tree_predi

; 101  : 										{
; 102  : 												if (p_features->var_of_sub_mean <= 4.1069)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40106d77318fc505
	comisd	xmm0, QWORD PTR [eax+72]
	jb	SHORT $LN28@tree_predi

; 103  : 												{
; 104  : 														*p_nb_iter = 1208.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092e00000000000
	movsd	QWORD PTR [eax], xmm0

; 105  : 														*p_nb_bad = 399.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4078f00000000000
	movsd	QWORD PTR [eax], xmm0

; 106  : 														return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 107  : 												}

	jmp	$LN35@tree_predi
$LN28@tree_predi:

; 108  : 												else if (p_features->var_of_sub_var <= 11832.6635)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@40c71c54ed916873
	comisd	xmm0, QWORD PTR [eax+88]
	jb	SHORT $LN30@tree_predi

; 109  : 												{
; 110  : 														*p_nb_iter = 8701.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40c0fe8000000000
	movsd	QWORD PTR [eax], xmm0

; 111  : 														*p_nb_bad = 3037.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@40a7ba0000000000
	movsd	QWORD PTR [eax], xmm0

; 112  : 														return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi

; 113  : 												}

	jmp	$LN35@tree_predi
$LN30@tree_predi:

; 114  : 												else if (p_features->neigh_variance_A <= 142.298)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4061c989374bc6a8
	comisd	xmm0, QWORD PTR [eax+48]
	jb	SHORT $LN32@tree_predi

; 115  : 												{
; 116  : 														*p_nb_iter = 1025.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4090040000000000
	movsd	QWORD PTR [eax], xmm0

; 117  : 														*p_nb_bad = 290.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4072200000000000
	movsd	QWORD PTR [eax], xmm0

; 118  : 														return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 119  : 												}

	jmp	SHORT $LN35@tree_predi
$LN32@tree_predi:

; 120  : 												else if (p_features->variance <= 394.4839)

	mov	eax, DWORD PTR _p_features$[ebp]
	movsd	xmm0, QWORD PTR __real@4078a7be0ded288d
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN34@tree_predi

; 121  : 												{
; 122  : 														*p_nb_iter = 1156.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4092100000000000
	movsd	QWORD PTR [eax], xmm0

; 123  : 														*p_nb_bad = 489.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407e900000000000
	movsd	QWORD PTR [eax], xmm0

; 124  : 														return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi

; 125  : 												}

	jmp	SHORT $LN35@tree_predi
$LN34@tree_predi:

; 126  : 												else {
; 127  : 														*p_nb_iter = 1150.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4091f80000000000
	movsd	QWORD PTR [eax], xmm0

; 128  : 														*p_nb_bad = 503.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407f700000000000
	movsd	QWORD PTR [eax], xmm0

; 129  : 														return -1.0000;

	or	eax, -1
	jmp	$LN17@tree_predi
$LN35@tree_predi:

; 130  : 												}
; 131  : 										}

	jmp	SHORT $LN27@tree_predi
$LN26@tree_predi:

; 132  : 										else {
; 133  : 												*p_nb_iter = 1777.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409bc40000000000
	movsd	QWORD PTR [eax], xmm0

; 134  : 												*p_nb_bad = 558.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4081700000000000
	movsd	QWORD PTR [eax], xmm0

; 135  : 												return 1.0000;

	mov	eax, 1
	jmp	$LN17@tree_predi
$LN27@tree_predi:

; 136  : 										}
; 137  : 								}

	jmp	SHORT $LN25@tree_predi
$LN24@tree_predi:

; 138  : 								else {
; 139  : 										*p_nb_iter = 1587.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@4098cc0000000000
	movsd	QWORD PTR [eax], xmm0

; 140  : 										*p_nb_bad = 411.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@4079b00000000000
	movsd	QWORD PTR [eax], xmm0

; 141  : 										return 1.0000;

	mov	eax, 1
	jmp	SHORT $LN17@tree_predi
$LN25@tree_predi:

; 142  : 								}
; 143  : 						}

	jmp	SHORT $LN23@tree_predi
$LN22@tree_predi:

; 144  : 						else {
; 145  : 								*p_nb_iter = 1980.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@409ef00000000000
	movsd	QWORD PTR [eax], xmm0

; 146  : 								*p_nb_bad = 474.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407da00000000000
	movsd	QWORD PTR [eax], xmm0

; 147  : 								return 1.0000;

	mov	eax, 1
	jmp	SHORT $LN17@tree_predi
$LN23@tree_predi:

; 148  : 						}
; 149  : 				}

	jmp	SHORT $LN19@tree_predi
$LN18@tree_predi:

; 150  : 				else {
; 151  : 						*p_nb_iter = 3613.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40ac3a0000000000
	movsd	QWORD PTR [eax], xmm0

; 152  : 						*p_nb_bad = 475.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@407db00000000000
	movsd	QWORD PTR [eax], xmm0

; 153  : 						return 1.0000;

	mov	eax, 1
	jmp	SHORT $LN17@tree_predi
$LN19@tree_predi:

; 154  : 				}
; 155  : 		}

	jmp	SHORT $LN17@tree_predi
$LN16@tree_predi:

; 156  : 		else {
; 157  : 				*p_nb_iter = 20926.0;

	mov	eax, DWORD PTR _p_nb_iter$[ebp]
	movsd	xmm0, QWORD PTR __real@40d46f8000000000
	movsd	QWORD PTR [eax], xmm0

; 158  : 				*p_nb_bad = 1873.0;

	mov	eax, DWORD PTR _p_nb_bad$[ebp]
	movsd	xmm0, QWORD PTR __real@409d440000000000
	movsd	QWORD PTR [eax], xmm0

; 159  : 				return 1.0000;

	mov	eax, 1
$LN17@tree_predi:

; 160  : 		}
; 161  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tree_predict_merge_depth_1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _kvz_lcu_luma_depth_pred
_TEXT	SEGMENT
_ml_intra_depth_ctu$ = 8				; size = 4
_luma_px$ = 12						; size = 4
_qp$ = 16						; size = 1
_kvz_lcu_luma_depth_pred PROC				; COMDAT

; 1746 : void kvz_lcu_luma_depth_pred(ml_intra_ctu_pred_t* ml_intra_depth_ctu, kvz_pixel* luma_px, int8_t qp) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 1747 : 
; 1748 : 	// Compute the one-shot (OS) Quad-tree prediction (_mat_OS_pred)
; 1749 : 	os_luma_qt_pred(ml_intra_depth_ctu, luma_px, qp, ml_intra_depth_ctu->_mat_upper_depth);

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	movzx	edx, BYTE PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _luma_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ml_intra_depth_ctu$[ebp]
	push	ecx
	call	_os_luma_qt_pred
	add	esp, 16					; 00000010H

; 1750 : 
; 1751 : 	// Generate the interval of QT predictions around the first one
; 1752 : 	generate_interval_from_os_pred(ml_intra_depth_ctu, ml_intra_depth_ctu->_mat_upper_depth);

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ml_intra_depth_ctu$[ebp]
	push	edx
	call	_generate_interval_from_os_pred
	add	esp, 8

; 1753 : 
; 1754 : 	// Apply the extra Upper Expansion pass
; 1755 : 	merge_matrix_64(ml_intra_depth_ctu->_mat_upper_depth, ml_intra_depth_ctu->_mat_upper_depth);

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_merge_matrix_64
	add	esp, 8

; 1756 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_lcu_luma_depth_pred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _kvz_end_ml_intra_depth_const
_TEXT	SEGMENT
_ml_intra_depth_ctu$ = 8				; size = 4
_kvz_end_ml_intra_depth_const PROC			; COMDAT

; 858  : void kvz_end_ml_intra_depth_const(ml_intra_ctu_pred_t* ml_intra_depth_ctu) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 859  : 	FREE_POINTER(ml_intra_depth_ctu->_mat_lower_depth);

	mov	esi, esp
	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	DWORD PTR [eax+8], 0

; 860  : 	FREE_POINTER(ml_intra_depth_ctu->_mat_upper_depth);

	mov	esi, esp
	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	DWORD PTR [eax+4], 0

; 861  : 
; 862  : 	FREE_POINTER(ml_intra_depth_ctu);

	mov	esi, esp
	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ml_intra_depth_ctu$[ebp], 0

; 863  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_end_ml_intra_depth_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\ml_intra_cu_depth_pred.c
;	COMDAT _kvz_init_ml_intra_depth_const
_TEXT	SEGMENT
_ml_intra_depth_ctu$ = -8				; size = 4
_kvz_init_ml_intra_depth_const PROC			; COMDAT

; 827  : ml_intra_ctu_pred_t* kvz_init_ml_intra_depth_const() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __46C1F544_ml_intra_cu_depth_pred@c
	call	@__CheckForDebuggerJustMyCode@4

; 828  : 	ml_intra_ctu_pred_t* ml_intra_depth_ctu = NULL;

	mov	DWORD PTR _ml_intra_depth_ctu$[ebp], 0

; 829  : 	// Allocate the ml_intra_ctu_pred_t strucutre
; 830  : 	ml_intra_depth_ctu = MALLOC(ml_intra_ctu_pred_t, 1);

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ml_intra_depth_ctu$[ebp], eax

; 831  : 	if (!ml_intra_depth_ctu) {

	cmp	DWORD PTR _ml_intra_depth_ctu$[ebp], 0
	jne	SHORT $LN2@kvz_init_m

; 832  : 		fprintf(stderr, "Memory allocation failed!\n");

	push	OFFSET ??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 833  : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN2@kvz_init_m
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9
	add	ecx, 6
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@kvz_init_m:

; 834  : 	}
; 835  : 	// Set the number of number of deth add to 1 by default
; 836  : 	ml_intra_depth_ctu->i_nb_addDepth = 1;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	BYTE PTR [eax], 1

; 837  : 	// Set the extra Upper Expansion in the upper_depth enabled by default 
; 838  : 	ml_intra_depth_ctu->b_extra_up_exp = true;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	BYTE PTR [eax+1], 1

; 839  : 
; 840  : 	// Allocate the depth matrices 
; 841  : 	ml_intra_depth_ctu->_mat_lower_depth = MALLOC(uint8_t, LCU_DEPTH_MAT_SIZE);

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 842  : 	if (!ml_intra_depth_ctu->_mat_lower_depth) {

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@kvz_init_m

; 843  : 		fprintf(stderr, "Memory allocation failed!\n");

	push	OFFSET ??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 844  : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN3@kvz_init_m
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9
	add	ecx, 17					; 00000011H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_init_m:

; 845  : 	}
; 846  : 	ml_intra_depth_ctu->_mat_upper_depth = MALLOC(uint8_t, LCU_DEPTH_MAT_SIZE);

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ml_intra_depth_ctu$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 847  : 	if (!ml_intra_depth_ctu->_mat_upper_depth) {

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@kvz_init_m

; 848  : 		fprintf(stderr, "Memory allocation failed!\n");

	push	OFFSET ??_C@_0BL@KPFFIJF@Memory?5allocation?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 849  : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN4@kvz_init_m
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_init_ml_intra_depth_const@@9@9
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IK@OMOCBIKG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@kvz_init_m:

; 850  : 	}
; 851  : 
; 852  : 	return ml_intra_depth_ctu;

	mov	eax, DWORD PTR _ml_intra_depth_ctu$[ebp]

; 853  : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_init_ml_intra_depth_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
