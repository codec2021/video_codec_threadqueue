; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__614D3496_malloc@h DB 01H
__4DF1518D_xmmintrin@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__45BE13D6_sao_shared_generics@h DB 01H
__A748CBAD_avx2_common_functions@h DB 01H
__9CF28069_sao-avx2@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9 DD 01H ; `sao_calc_eo_cat'::`2'::sao_eo_idx_to_eo_category
	DD	02H
	DD	00H
	DD	03H
	DD	04H
	ORG $+4
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategy_register_sao_avx2
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04GEEJMEMG@avx2@				; `string'
PUBLIC	__xmm@0c0804000c0804000c0804000c080400
PUBLIC	__ymm@0000000000000000000000040300020100000000000000000000000403000201
PUBLIC	__ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
PUBLIC	__ymm@0001000100010001000100010001000100010001000100010001000100010001
PUBLIC	__ymm@0101010101010101000000000000000001010101010101010000000000000000
PUBLIC	__ymm@0101010101010101010101010101010101010101010101010101010101010101
PUBLIC	__ymm@0202020202020202020202020202020202020202020202020202020202020202
PUBLIC	__ymm@0303030303030303030303030303030303030303030303030303030303030303
PUBLIC	__ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100
PUBLIC	__ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
PUBLIC	__ymm@1010101010101010101010101010101010101010101010101010101010101010
PUBLIC	__ymm@8080808080808080808080808080808080808080808080808080808080808080
PUBLIC	__ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01
PUBLIC	__ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001
CONST	SEGMENT
__ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001 DB 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH, 01H
	DB	00H, 0ffH, 0ffH, 01H, 00H, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01
CONST	SEGMENT
__ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01 DB 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH, 01H
	DB	0ffH, 01H, 0ffH, 01H, 0ffH, 01H, 0ffH
CONST	ENDS
;	COMDAT __ymm@8080808080808080808080808080808080808080808080808080808080808080
CONST	SEGMENT
__ymm@8080808080808080808080808080808080808080808080808080808080808080 DB 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __ymm@1010101010101010101010101010101010101010101010101010101010101010
CONST	SEGMENT
__ymm@1010101010101010101010101010101010101010101010101010101010101010 DB 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
	DB	010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H, 010H
CONST	ENDS
;	COMDAT __ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
CONST	SEGMENT
__ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f DB 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH, 0fH
	DB	0fH, 0fH, 0fH, 0fH, 0fH
CONST	ENDS
;	COMDAT __ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100 DB 00H
	DB	01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 00H, 01H, 02H, 03H, 04H, 05H, 06H, 07H, 08H, 09H, 0aH
	DB	0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __ymm@0303030303030303030303030303030303030303030303030303030303030303
CONST	SEGMENT
__ymm@0303030303030303030303030303030303030303030303030303030303030303 DB 03H
	DB	03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H
	DB	03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H, 03H
	DB	03H, 03H, 03H, 03H, 03H
CONST	ENDS
;	COMDAT __ymm@0202020202020202020202020202020202020202020202020202020202020202
CONST	SEGMENT
__ymm@0202020202020202020202020202020202020202020202020202020202020202 DB 02H
	DB	02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H
	DB	02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H, 02H
	DB	02H, 02H, 02H, 02H, 02H
CONST	ENDS
;	COMDAT __ymm@0101010101010101010101010101010101010101010101010101010101010101
CONST	SEGMENT
__ymm@0101010101010101010101010101010101010101010101010101010101010101 DB 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H
CONST	ENDS
;	COMDAT __ymm@0101010101010101000000000000000001010101010101010000000000000000
CONST	SEGMENT
__ymm@0101010101010101000000000000000001010101010101010000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 01H, 01H, 01H, 01H, 01H
	DB	01H, 01H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 01H, 01H, 01H
	DB	01H, 01H, 01H, 01H, 01H
CONST	ENDS
;	COMDAT __ymm@0001000100010001000100010001000100010001000100010001000100010001
CONST	SEGMENT
__ymm@0001000100010001000100010001000100010001000100010001000100010001 DB 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
	DB	01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
CONST	SEGMENT
__ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003 DB 03H
	DB	00H, 00H, 00H, 07H, 00H, 00H, 00H, 0bH, 00H, 00H, 00H, 0fH, 00H
	DB	00H, 00H, 013H, 00H, 00H, 00H, 017H, 00H, 00H, 00H, 01bH, 00H, 00H
	DB	00H, 01fH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000000000040300020100000000000000000000000403000201
CONST	SEGMENT
__ymm@0000000000000000000000040300020100000000000000000000000403000201 DB 01H
	DB	02H, 00H, 03H, 04H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 01H, 02H, 00H, 03H, 04H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@0c0804000c0804000c0804000c080400
CONST	SEGMENT
__xmm@0c0804000c0804000c0804000c080400 DB 00H, 04H, 08H, 0cH, 00H, 04H, 08H
	DB	0cH, 00H, 04H, 08H, 0cH, 00H, 04H, 08H, 0cH
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04GEEJMEMG@avx2@
CONST	SEGMENT
??_C@_04GEEJMEMG@avx2@ DB 'avx2', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _sao_band_ddistortion_avx2
_TEXT	SEGMENT
_curr_sum$1 = -1472					; size = 32
_offsets$2 = -1408					; size = 32
_band_inv$3 = -1344					; size = 32
_band_gt_3$4 = -1280					; size = 32
_band_lt_0$5 = -1216					; size = 32
_band$6 = -1152						; size = 32
_rd_divd$7 = -1088					; size = 32
_diff_hi$8 = -1024					; size = 32
_diff_lo$9 = -960					; size = 32
_rd_hi$10 = -896					; size = 32
_rd_lo$11 = -832					; size = 32
_orig_hi$12 = -768					; size = 32
_orig_lo$13 = -704					; size = 32
_orig$14 = -640						; size = 32
_rd$15 = -576						; size = 32
_curr_pos$16 = -516					; size = 4
_x$17 = -504						; size = 4
_y$18 = -492						; size = 4
_sum$ = -480						; size = 32
_threes$ = -416						; size = 32
_zero$ = -352						; size = 32
_sb_256$ = -288						; size = 32
_sbs_8$ = -224						; size = 16
_sbs_32$ = -192						; size = 16
_bp_256$ = -160						; size = 32
_lolimit$ = -112					; size = 16
_hilimit$ = -80						; size = 16
_bp_128$ = -48						; size = 16
_shift$ = -20						; size = 4
_bitdepth$ = -8						; size = 4
_state$ = 8						; size = 4
_orig_data$ = 12					; size = 4
_rec_data$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_band_pos$ = 28						; size = 4
_sao_bands$ = 32					; size = 4
_sao_band_ddistortion_avx2 PROC				; COMDAT

; 823  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2072				; 00000818H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2072]
	mov	ecx, 518				; 00000206H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 824  :   const uint32_t bitdepth = 8;

	mov	DWORD PTR _bitdepth$[ebp], 8

; 825  :   const uint32_t shift    = bitdepth - 5;

	mov	eax, DWORD PTR _bitdepth$[ebp]
	sub	eax, 5
	mov	DWORD PTR _shift$[ebp], eax

; 826  : 
; 827  :   // Clamp band_pos to 32 from above. It'll be subtracted from the shifted
; 828  :   // rec_data values, which in 8-bit depth will always be clamped to [0, 31],
; 829  :   // so if it ever exceeds 32, all the band values will be negative and
; 830  :   // ignored. Ditto for less than -4.
; 831  :   __m128i bp_128   = _mm_cvtsi32_si128    (band_pos);

	vmovd	xmm0, DWORD PTR _band_pos$[ebx]
	vmovdqa	XMMWORD PTR _bp_128$[ebp], xmm0

; 832  :   __m128i hilimit  = _mm_cvtsi32_si128    (32);

	mov	eax, 32					; 00000020H
	vmovd	xmm0, eax
	vmovdqa	XMMWORD PTR _hilimit$[ebp], xmm0

; 833  :   __m128i lolimit  = _mm_cvtsi32_si128    (-4);

	mov	eax, -4					; fffffffcH
	vmovd	xmm0, eax
	vmovdqa	XMMWORD PTR _lolimit$[ebp], xmm0

; 834  : 
; 835  :           bp_128   = _mm_min_epi8         (bp_128, hilimit);

	vmovdqa	xmm0, XMMWORD PTR _bp_128$[ebp]
	vpminsb	xmm0, xmm0, XMMWORD PTR _hilimit$[ebp]
	vmovdqa	XMMWORD PTR _bp_128$[ebp], xmm0

; 836  :           bp_128   = _mm_max_epi8         (bp_128, lolimit);

	vmovdqa	xmm0, XMMWORD PTR _bp_128$[ebp]
	vpmaxsb	xmm0, xmm0, XMMWORD PTR _lolimit$[ebp]
	vmovdqa	XMMWORD PTR _bp_128$[ebp], xmm0

; 837  : 
; 838  :   __m256i bp_256  = _mm256_broadcastb_epi8(bp_128);

	vpbroadcastb ymm0, XMMWORD PTR _bp_128$[ebp]
	vmovdqu	YMMWORD PTR _bp_256$[ebp], ymm0

; 839  : 
; 840  :   __m128i sbs_32   = _mm_loadu_si128((const __m128i *)sao_bands);

	mov	eax, DWORD PTR _sao_bands$[ebx]
	vmovdqu	xmm0, XMMWORD PTR [eax]
	vmovdqa	XMMWORD PTR _sbs_32$[ebp], xmm0

; 841  :   __m128i sbs_8    = truncate_epi32_epi8(sbs_32);

	vmovdqa	xmm0, XMMWORD PTR _sbs_32$[ebp]
	call	_truncate_epi32_epi8
	vmovdqa	XMMWORD PTR _sbs_8$[ebp], xmm0

; 842  :   __m256i sb_256   = broadcast_xmm2ymm  (sbs_8);

	vmovdqa	xmm0, XMMWORD PTR _sbs_8$[ebp]
	call	_broadcast_xmm2ymm
	vmovdqu	YMMWORD PTR _sb_256$[ebp], ymm0

; 843  : 
; 844  :   // These should trigger like, never, at least the later condition of block
; 845  :   // not being a multiple of 32 wide. Rather safe than sorry though, huge SAO
; 846  :   // bands are more tricky of these two because the algorithm needs a complete
; 847  :   // reimplementation to work on 16-bit values.
; 848  :   if (epi32v_fits_in_epi8s(sbs_32) != 0xffff)

	vmovdqa	xmm0, XMMWORD PTR _sbs_32$[ebp]
	call	_epi32v_fits_in_epi8s
	movzx	eax, ax
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN8@sao_band_d

; 849  :     goto use_generic;

	jmp	$use_generic$17
$LN8@sao_band_d:

; 850  : 
; 851  :   // If VVC or something will start using SAO on blocks with width a multiple
; 852  :   // of 16, feel free to implement a XMM variant of this algorithm
; 853  :   if ((block_width & 31) != 0)

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, 31					; 0000001fH
	je	SHORT $LN9@sao_band_d

; 854  :     goto use_generic;

	jmp	$use_generic$17
$LN9@sao_band_d:

; 855  : 
; 856  :   const __m256i zero          = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 857  :   const __m256i threes        = _mm256_set1_epi8 (3);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0303030303030303030303030303030303030303030303030303030303030303
	vmovdqu	YMMWORD PTR _threes$[ebp], ymm0

; 858  : 
; 859  :   __m256i sum = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _sum$[ebp], ymm0

; 860  :   for (uint32_t y = 0; y < block_height; y++) {

	mov	DWORD PTR _y$18[ebp], 0
	jmp	SHORT $LN4@sao_band_d
$LN2@sao_band_d:
	mov	eax, DWORD PTR _y$18[ebp]
	add	eax, 1
	mov	DWORD PTR _y$18[ebp], eax
$LN4@sao_band_d:
	mov	eax, DWORD PTR _y$18[ebp]
	cmp	eax, DWORD PTR _block_height$[ebx]
	jae	$LN3@sao_band_d

; 861  :     for (uint32_t x = 0; x < block_width; x += 32) {

	mov	DWORD PTR _x$17[ebp], 0
	jmp	SHORT $LN7@sao_band_d
$LN5@sao_band_d:
	mov	eax, DWORD PTR _x$17[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _x$17[ebp], eax
$LN7@sao_band_d:
	mov	eax, DWORD PTR _x$17[ebp]
	cmp	eax, DWORD PTR _block_width$[ebx]
	jae	$LN6@sao_band_d

; 862  :       const int32_t curr_pos = y * block_width + x;

	mov	eax, DWORD PTR _y$18[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$17[ebp]
	mov	DWORD PTR _curr_pos$16[ebp], eax

; 863  : 
; 864  :       __m256i   rd = _mm256_loadu_si256((const __m256i *)( rec_data + curr_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_pos$16[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _rd$15[ebp], ymm0

; 865  :       __m256i orig = _mm256_loadu_si256((const __m256i *)(orig_data + curr_pos));

	mov	eax, DWORD PTR _orig_data$[ebx]
	add	eax, DWORD PTR _curr_pos$16[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _orig$14[ebp], ymm0

; 866  : 
; 867  :       __m256i orig_lo, orig_hi, rd_lo, rd_hi;
; 868  :       cvt_epu8_epi16(orig, &orig_lo, &orig_hi);

	lea	eax, DWORD PTR _orig_hi$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _orig_lo$13[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _orig$14[ebp]
	call	_cvt_epu8_epi16
	add	esp, 8

; 869  :       cvt_epu8_epi16(rd,   &rd_lo,   &rd_hi);

	lea	eax, DWORD PTR _rd_hi$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _rd_lo$11[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _rd$15[ebp]
	call	_cvt_epu8_epi16
	add	esp, 8

; 870  : 
; 871  :       __m256i diff_lo      = _mm256_sub_epi16     (orig_lo,      rd_lo);

	vmovdqu	ymm0, YMMWORD PTR _orig_lo$13[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _rd_lo$11[ebp]
	vmovdqu	YMMWORD PTR _diff_lo$9[ebp], ymm0

; 872  :       __m256i diff_hi      = _mm256_sub_epi16     (orig_hi,      rd_hi);

	vmovdqu	ymm0, YMMWORD PTR _orig_hi$12[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _rd_hi$10[ebp]
	vmovdqu	YMMWORD PTR _diff_hi$8[ebp], ymm0

; 873  : 
; 874  :       // The shift will clamp band to 0...31; band_pos on the other
; 875  :       // hand is always between 0...32, so band will be -1...31. Anything
; 876  :       // below zero is ignored, so we can clamp band_pos to 32.
; 877  :       __m256i rd_divd      = srli_epi8           (rd,            shift);

	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	vmovdqu	ymm0, YMMWORD PTR _rd$15[ebp]
	call	_srli_epi8
	add	esp, 4
	vmovdqu	YMMWORD PTR _rd_divd$7[ebp], ymm0

; 878  :       __m256i band         = _mm256_sub_epi8     (rd_divd,       bp_256);

	vmovdqu	ymm0, YMMWORD PTR _rd_divd$7[ebp]
	vpsubb	ymm0, ymm0, YMMWORD PTR _bp_256$[ebp]
	vmovdqu	YMMWORD PTR _band$6[ebp], ymm0

; 879  : 
; 880  :       // Force all <0 or >3 bands to 0xff, which will zero the shuffle result
; 881  :       __m256i band_lt_0    = _mm256_cmpgt_epi8   (zero,          band);

	vmovdqu	ymm0, YMMWORD PTR _zero$[ebp]
	vpcmpgtb ymm0, ymm0, YMMWORD PTR _band$6[ebp]
	vmovdqu	YMMWORD PTR _band_lt_0$5[ebp], ymm0

; 882  :       __m256i band_gt_3    = _mm256_cmpgt_epi8   (band,          threes);

	vmovdqu	ymm0, YMMWORD PTR _band$6[ebp]
	vpcmpgtb ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _band_gt_3$4[ebp], ymm0

; 883  :       __m256i band_inv     = _mm256_or_si256     (band_lt_0,     band_gt_3);

	vmovdqu	ymm0, YMMWORD PTR _band_lt_0$5[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _band_gt_3$4[ebp]
	vmovdqu	YMMWORD PTR _band_inv$3[ebp], ymm0

; 884  : 
; 885  :               band         = _mm256_or_si256     (band,          band_inv);

	vmovdqu	ymm0, YMMWORD PTR _band$6[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _band_inv$3[ebp]
	vmovdqu	YMMWORD PTR _band$6[ebp], ymm0

; 886  : 
; 887  :       __m256i offsets      = _mm256_shuffle_epi8 (sb_256,        band);

	vmovdqu	ymm0, YMMWORD PTR _sb_256$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _band$6[ebp]
	vmovdqu	YMMWORD PTR _offsets$2[ebp], ymm0

; 888  : 
; 889  :       __m256i curr_sum     = calc_diff_off_delta (diff_lo, diff_hi, offsets, orig);

	vmovdqu	ymm3, YMMWORD PTR _orig$14[ebp]
	vmovdqu	ymm2, YMMWORD PTR _offsets$2[ebp]
	vmovdqu	ymm1, YMMWORD PTR _diff_hi$8[ebp]
	vmovdqu	ymm0, YMMWORD PTR _diff_lo$9[ebp]
	call	calc_diff_off_delta@@128
	vmovdqu	YMMWORD PTR _curr_sum$1[ebp], ymm0

; 890  :               sum          = _mm256_add_epi32    (sum,          curr_sum);

	vmovdqu	ymm0, YMMWORD PTR _sum$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _curr_sum$1[ebp]
	vmovdqu	YMMWORD PTR _sum$[ebp], ymm0

; 891  :     }

	jmp	$LN5@sao_band_d
$LN6@sao_band_d:

; 892  :   }

	jmp	$LN2@sao_band_d
$LN3@sao_band_d:

; 893  :   return hsum_8x32b(sum);

	vmovdqu	ymm0, YMMWORD PTR _sum$[ebp]
	call	hsum_8x32b@@32
	jmp	SHORT $LN1@sao_band_d
$use_generic$17:

; 894  : 
; 895  : use_generic:
; 896  :   return sao_band_ddistortion_generic(state, orig_data, rec_data, block_width,

	mov	eax, DWORD PTR _sao_bands$[ebx]
	push	eax
	mov	ecx, DWORD PTR _band_pos$[ebx]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebx]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rec_data$[ebx]
	push	ecx
	mov	edx, DWORD PTR _orig_data$[ebx]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	call	_sao_band_ddistortion_generic
	add	esp, 28					; 0000001cH
$LN1@sao_band_d:

; 897  :       block_height, band_pos, sao_bands);
; 898  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@sao_band_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN16@sao_band_d:
	DD	4
	DD	$LN15@sao_band_d
$LN15@sao_band_d:
	DD	-704					; fffffd40H
	DD	32					; 00000020H
	DD	$LN11@sao_band_d
	DD	-768					; fffffd00H
	DD	32					; 00000020H
	DD	$LN12@sao_band_d
	DD	-832					; fffffcc0H
	DD	32					; 00000020H
	DD	$LN13@sao_band_d
	DD	-896					; fffffc80H
	DD	32					; 00000020H
	DD	$LN14@sao_band_d
$LN14@sao_band_d:
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN13@sao_band_d:
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN12@sao_band_d:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN11@sao_band_d:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
_sao_band_ddistortion_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _sao_reconstruct_color_avx2
_TEXT	SEGMENT
_encoder$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_new_rec_data$ = 16					; size = 4
_sao$ = 20						; size = 4
_stride$ = 24						; size = 4
_new_stride$ = 28					; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_color_i$ = 40						; size = 4
_sao_reconstruct_color_avx2 PROC			; COMDAT

; 808  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 809  :   if (sao->type == SAO_TYPE_BAND) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@sao_recons

; 810  :     reconstruct_color_band (encoder, rec_data, new_rec_data, sao, stride, new_stride, block_width, block_height, color_i);

	mov	eax, DWORD PTR _color_i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_rec_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	push	edx
	call	_reconstruct_color_band
	add	esp, 36					; 00000024H

; 811  :   } else {

	jmp	SHORT $LN1@sao_recons
$LN2@sao_recons:

; 812  :     reconstruct_color_other(encoder, rec_data, new_rec_data, sao, stride, new_stride, block_width, block_height, color_i);

	mov	eax, DWORD PTR _color_i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao$[ebp]
	push	edx
	mov	eax, DWORD PTR _new_rec_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	push	edx
	call	_reconstruct_color_other
	add	esp, 36					; 00000024H
$LN1@sao_recons:

; 813  :   }
; 814  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_reconstruct_color_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _reconstruct_color_other
_TEXT	SEGMENT
tv65 = -1748						; size = 4
_last_dword$1 = -1164					; size = 4
_res$2 = -1152						; size = 32
_c$3 = -1088						; size = 32
_b$4 = -1024						; size = 32
_a$5 = -960						; size = 32
_dst_ptr$6 = -916					; size = 4
_c_ptr$7 = -904						; size = 4
_b_ptr$8 = -892						; size = 4
_a_ptr$9 = -880						; size = 4
_c_last$10 = -868					; size = 4
_b_last$11 = -856					; size = 4
_a_last$12 = -844					; size = 4
_rest_dstpos$13 = -832					; size = 4
_curr_dstpos$14 = -820					; size = 4
_rest_bpos$15 = -808					; size = 4
_curr_bpos$16 = -796					; size = 4
_rest_apos$17 = -784					; size = 4
_curr_apos$18 = -772					; size = 4
_rest_srcpos$19 = -760					; size = 4
_curr_srcpos$20 = -748					; size = 4
_res$21 = -736						; size = 32
_c$22 = -672						; size = 32
_b$23 = -608						; size = 32
_a$24 = -544						; size = 32
_b_pos$25 = -488					; size = 4
_a_pos$26 = -476					; size = 4
_dst_pos$27 = -464					; size = 4
_src_pos$28 = -452					; size = 4
_x$29 = -440						; size = 4
_y$30 = -428						; size = 4
_sao_offs$ = -416					; size = 32
_sao_offs_16$ = -352					; size = 16
_sao_offs_hi$ = -320					; size = 16
_sao_offs_lo$ = -288					; size = 16
_db4_mask$ = -256					; size = 32
_indexes$ = -192					; size = 32
_wdb4_256$ = -128					; size = 32
_width_rest$ = -76					; size = 4
_width_db4$ = -64					; size = 4
_width_db32$ = -52					; size = 4
_b_ofs$ = -40						; size = 8
_a_ofs$ = -24						; size = 8
_offset_v$ = -8						; size = 4
_encoder$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_new_rec_data$ = 16					; size = 4
_sao$ = 20						; size = 4
_stride$ = 24						; size = 4
_new_stride$ = 28					; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_color_i$ = 40						; size = 4
_reconstruct_color_other PROC				; COMDAT

; 719  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1752				; 000006d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1752]
	mov	ecx, 438				; 000001b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 720  :   const uint32_t   offset_v    = color_i == COLOR_V ? 5 : 0;

	cmp	DWORD PTR _color_i$[ebx], 2
	jne	SHORT $LN10@reconstruc
	mov	DWORD PTR tv65[ebp], 5
	jmp	SHORT $LN11@reconstruc
$LN10@reconstruc:
	mov	DWORD PTR tv65[ebp], 0
$LN11@reconstruc:
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _offset_v$[ebp], eax

; 721  :   const vector2d_t a_ofs       = g_sao_edge_offsets[sao->eo_class][0];

	mov	eax, DWORD PTR _sao$[ebx]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _g_sao_edge_offsets[ecx+eax]
	mov	eax, DWORD PTR _g_sao_edge_offsets[ecx+eax+4]
	mov	DWORD PTR _a_ofs$[ebp], edx
	mov	DWORD PTR _a_ofs$[ebp+4], eax

; 722  :   const vector2d_t b_ofs       = g_sao_edge_offsets[sao->eo_class][1];

	mov	eax, DWORD PTR _sao$[ebx]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _g_sao_edge_offsets[ecx+edx]
	mov	ecx, DWORD PTR _g_sao_edge_offsets[ecx+edx+4]
	mov	DWORD PTR _b_ofs$[ebp], eax
	mov	DWORD PTR _b_ofs$[ebp+4], ecx

; 723  : 
; 724  :   const uint32_t   width_db32  = block_width & ~31;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _width_db32$[ebp], eax

; 725  :   const uint32_t   width_db4   = block_width &  ~3;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _width_db4$[ebp], eax

; 726  :   const uint32_t   width_rest  = block_width &   3;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, 3
	mov	DWORD PTR _width_rest$[ebp], eax

; 727  : 
; 728  :   // Form the load&store mask
; 729  :   const __m256i    wdb4_256    = _mm256_set1_epi32 (width_db4 & 31);

	mov	eax, DWORD PTR _width_db4$[ebp]
	and	eax, 31					; 0000001fH
	vmovd	xmm0, eax
	vpbroadcastd ymm0, xmm0
	vmovdqu	YMMWORD PTR _wdb4_256$[ebp], ymm0

; 730  :   const __m256i    indexes     = _mm256_setr_epi32 (3, 7, 11, 15, 19, 23, 27, 31);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
	vmovdqu	YMMWORD PTR _indexes$[ebp], ymm0

; 731  :   const __m256i    db4_mask    = _mm256_cmpgt_epi32(wdb4_256, indexes);

	vmovdqu	ymm0, YMMWORD PTR _wdb4_256$[ebp]
	vpcmpgtd ymm0, ymm0, YMMWORD PTR _indexes$[ebp]
	vmovdqu	YMMWORD PTR _db4_mask$[ebp], ymm0

; 732  : 
; 733  :   // Again, saturate offsets to signed 16 bits, because anything outside of
; 734  :   // [-255, 255] will saturate anything these are used with
; 735  :   const __m128i    sao_offs_lo = _mm_loadu_si128  ((const __m128i *)(sao->offsets + offset_v + 0));

	mov	eax, DWORD PTR _offset_v$[ebp]
	mov	ecx, DWORD PTR _sao$[ebx]
	vmovdqu	xmm0, XMMWORD PTR [ecx+eax*4+28]
	vmovdqa	XMMWORD PTR _sao_offs_lo$[ebp], xmm0

; 736  :   const __m128i    sao_offs_hi = _mm_cvtsi32_si128(sao->offsets[offset_v + 4]);

	mov	eax, DWORD PTR _offset_v$[ebp]
	mov	ecx, DWORD PTR _sao$[ebx]
	vmovd	xmm0, DWORD PTR [ecx+eax*4+44]
	vmovdqa	XMMWORD PTR _sao_offs_hi$[ebp], xmm0

; 737  :   const __m128i    sao_offs_16 = _mm_packs_epi32  (sao_offs_lo, sao_offs_hi);

	vmovdqa	xmm0, XMMWORD PTR _sao_offs_lo$[ebp]
	vpackssdw xmm0, xmm0, XMMWORD PTR _sao_offs_hi$[ebp]
	vmovdqa	XMMWORD PTR _sao_offs_16$[ebp], xmm0

; 738  : 
; 739  :   const __m256i    sao_offs    = broadcast_xmm2ymm(sao_offs_16);

	vmovdqa	xmm0, XMMWORD PTR _sao_offs_16$[ebp]
	call	_broadcast_xmm2ymm
	vmovdqu	YMMWORD PTR _sao_offs$[ebp], ymm0

; 740  : 
; 741  :   for (uint32_t y = 0; y < block_height; y++) {

	mov	DWORD PTR _y$30[ebp], 0
	jmp	SHORT $LN4@reconstruc
$LN2@reconstruc:
	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, 1
	mov	DWORD PTR _y$30[ebp], eax
$LN4@reconstruc:
	mov	eax, DWORD PTR _y$30[ebp]
	cmp	eax, DWORD PTR _block_height$[ebx]
	jae	$LN1@reconstruc

; 742  :     uint32_t x;
; 743  :     for (x = 0; x < width_db32; x += 32) {

	mov	DWORD PTR _x$29[ebp], 0
	jmp	SHORT $LN7@reconstruc
$LN5@reconstruc:
	mov	eax, DWORD PTR _x$29[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _x$29[ebp], eax
$LN7@reconstruc:
	mov	eax, DWORD PTR _x$29[ebp]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jae	$LN6@reconstruc

; 744  :       const uint32_t  src_pos = y *     stride + x;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _src_pos$28[ebp], eax

; 745  :       const uint32_t  dst_pos = y * new_stride + x;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _dst_pos$27[ebp], eax

; 746  : 
; 747  :       // TODO: these will go negative, but that's a defect of the original
; 748  :       // code already since 2013 (98f2a1aedc5f4933c2729ae15412549dea9e5549)
; 749  :       const int32_t   a_pos   = (y + a_ofs.y) * stride + x + a_ofs.x;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _a_pos$26[ebp], eax

; 750  :       const int32_t   b_pos   = (y + b_ofs.y) * stride + x + b_ofs.x;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _b_pos$25[ebp], eax

; 751  : 
; 752  :       __m256i a = _mm256_loadu_si256((const __m256i *)(rec_data + a_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _a_pos$26[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$24[ebp], ymm0

; 753  :       __m256i b = _mm256_loadu_si256((const __m256i *)(rec_data + b_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _b_pos$25[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$23[ebp], ymm0

; 754  :       __m256i c = _mm256_loadu_si256((const __m256i *)(rec_data + src_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _src_pos$28[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$22[ebp], ymm0

; 755  : 
; 756  :       __m256i res = do_one_nonband_ymm(a, b, c, sao_offs);

	vmovdqu	ymm3, YMMWORD PTR _sao_offs$[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$22[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$23[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$24[ebp]
	call	do_one_nonband_ymm@@128
	vmovdqu	YMMWORD PTR _res$21[ebp], ymm0

; 757  :       _mm256_storeu_si256((__m256i *)(new_rec_data + dst_pos), res);

	vmovdqu	ymm0, YMMWORD PTR _res$21[ebp]
	mov	eax, DWORD PTR _new_rec_data$[ebx]
	add	eax, DWORD PTR _dst_pos$27[ebp]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 758  :     }

	jmp	$LN5@reconstruc
$LN6@reconstruc:

; 759  :     if (block_width > width_db32) {

	mov	eax, DWORD PTR _block_width$[ebx]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jbe	$LN8@reconstruc

; 760  :       const uint32_t curr_srcpos =  y            * stride + x;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _curr_srcpos$20[ebp], eax

; 761  :       const uint32_t rest_srcpos =  y            * stride + width_db4;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_srcpos$19[ebp], eax

; 762  : 
; 763  :       const  int32_t curr_apos   = (y + a_ofs.y) * stride + a_ofs.x + x;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _a_ofs$[ebp]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _curr_apos$18[ebp], eax

; 764  :       const  int32_t rest_apos   = (y + a_ofs.y) * stride + a_ofs.x + width_db4;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _a_ofs$[ebp]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_apos$17[ebp], eax

; 765  : 
; 766  :       const  int32_t curr_bpos   = (y + b_ofs.y) * stride + b_ofs.x + x;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _b_ofs$[ebp]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _curr_bpos$16[ebp], eax

; 767  :       const  int32_t rest_bpos   = (y + b_ofs.y) * stride + b_ofs.x + width_db4;

	mov	eax, DWORD PTR _y$30[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _b_ofs$[ebp]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_bpos$15[ebp], eax

; 768  : 
; 769  :       const uint32_t curr_dstpos = y * new_stride + x;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _x$29[ebp]
	mov	DWORD PTR _curr_dstpos$14[ebp], eax

; 770  :       const uint32_t rest_dstpos = y * new_stride + width_db4;

	mov	eax, DWORD PTR _y$30[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_dstpos$13[ebp], eax

; 771  : 
; 772  :       uint32_t a_last        = load_border_bytes(rec_data, rest_apos,   width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_apos$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a_last$12[ebp], eax

; 773  :       uint32_t b_last        = load_border_bytes(rec_data, rest_bpos,   width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_bpos$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b_last$11[ebp], eax

; 774  :       uint32_t c_last        = load_border_bytes(rec_data, rest_srcpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_srcpos$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _c_last$10[ebp], eax

; 775  : 
; 776  :       const int32_t   *a_ptr = (const int32_t *)(    rec_data + curr_apos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_apos$18[ebp]
	mov	DWORD PTR _a_ptr$9[ebp], eax

; 777  :       const int32_t   *b_ptr = (const int32_t *)(    rec_data + curr_bpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_bpos$16[ebp]
	mov	DWORD PTR _b_ptr$8[ebp], eax

; 778  :       const int32_t   *c_ptr = (const int32_t *)(    rec_data + curr_srcpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_srcpos$20[ebp]
	mov	DWORD PTR _c_ptr$7[ebp], eax

; 779  :             int32_t *dst_ptr = (      int32_t *)(new_rec_data + curr_dstpos);

	mov	eax, DWORD PTR _new_rec_data$[ebx]
	add	eax, DWORD PTR _curr_dstpos$14[ebp]
	mov	DWORD PTR _dst_ptr$6[ebp], eax

; 780  : 
; 781  :       __m256i a = _mm256_maskload_epi32(a_ptr, db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _a_ptr$9[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$5[ebp], ymm0

; 782  :       __m256i b = _mm256_maskload_epi32(b_ptr, db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _b_ptr$8[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$4[ebp], ymm0

; 783  :       __m256i c = _mm256_maskload_epi32(c_ptr, db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _c_ptr$7[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$3[ebp], ymm0

; 784  : 
; 785  :               a = _mm256_insert_epi32  (a, a_last, 7);

	vmovd	xmm0, DWORD PTR _a_last$12[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _a$5[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _a$5[ebp], ymm0

; 786  :               b = _mm256_insert_epi32  (b, b_last, 7);

	vmovd	xmm0, DWORD PTR _b_last$11[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _b$4[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _b$4[ebp], ymm0

; 787  :               c = _mm256_insert_epi32  (c, c_last, 7);

	vmovd	xmm0, DWORD PTR _c_last$10[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _c$3[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _c$3[ebp], ymm0

; 788  : 
; 789  :       __m256i res = do_one_nonband_ymm(a, b, c, sao_offs);

	vmovdqu	ymm3, YMMWORD PTR _sao_offs$[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$3[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$4[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$5[ebp]
	call	do_one_nonband_ymm@@128
	vmovdqu	YMMWORD PTR _res$2[ebp], ymm0

; 790  :       _mm256_maskstore_epi32(dst_ptr, db4_mask, res);

	vmovdqu	ymm0, YMMWORD PTR _res$2[ebp]
	vmovdqu	ymm1, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _dst_ptr$6[ebp]
	vpmaskmovd YMMWORD PTR [eax], ymm1, ymm0

; 791  : 
; 792  :       uint32_t last_dword = _mm256_extract_epi32(res, 7);

	vmovdqu	ymm0, YMMWORD PTR _res$2[ebp]
	vextracti128 xmm0, ymm0, 1
	vpextrd	eax, xmm0, 3
	mov	DWORD PTR _last_dword$1[ebp], eax

; 793  : 
; 794  :       store_border_bytes(new_rec_data, rest_dstpos, width_rest, last_dword);

	mov	eax, DWORD PTR _last_dword$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_rest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rest_dstpos$13[ebp]
	push	edx
	mov	eax, DWORD PTR _new_rec_data$[ebx]
	push	eax
	call	_store_border_bytes
	add	esp, 16					; 00000010H
$LN8@reconstruc:

; 795  :     }
; 796  :   }

	jmp	$LN2@reconstruc
$LN1@reconstruc:

; 797  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@reconstruc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN15@reconstruc:
	DD	2
	DD	$LN14@reconstruc
$LN14@reconstruc:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN12@reconstruc
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN13@reconstruc
$LN13@reconstruc:
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN12@reconstruc:
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
_reconstruct_color_other ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT do_one_nonband_ymm@@128
_TEXT	SEGMENT
_res$ = -960						; size = 32
_res_hi$ = -896						; size = 32
_res_lo$ = -832						; size = 32
_offs_hi$ = -768					; size = 32
_offs_lo$ = -704					; size = 32
_c_hi$ = -640						; size = 32
_c_lo$ = -576						; size = 32
_eo_cat_hi$ = -512					; size = 32
_eo_cat_lo$ = -448					; size = 32
_eo_cat$ = -384						; size = 32
_zero$ = -320						; size = 32
_sao_offs$ = -256					; size = 32
_c$ = -192						; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
do_one_nonband_ymm@@128 PROC				; COMDAT
; _a$ = ymm0
; _b$ = ymm1
; _c$ = ymm2
; _sao_offs$ = ymm3

; 689  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1368				; 00000558H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1368]
	mov	ecx, 342				; 00000156H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	vmovups	YMMWORD PTR _sao_offs$[ebp], ymm3
	vmovups	YMMWORD PTR _c$[ebp], ymm2
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 690  :   const __m256i zero = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 691  : 
; 692  :   __m256i eo_cat = calc_eo_cat(a, b, c);

	vmovdqu	ymm2, YMMWORD PTR _c$[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	call	calc_eo_cat@@96
	vmovdqu	YMMWORD PTR _eo_cat$[ebp], ymm0

; 693  :   __m256i eo_cat_lo, eo_cat_hi, c_lo, c_hi;
; 694  :   cvt_shufmask_epi8_epi16(eo_cat, &eo_cat_lo, &eo_cat_hi);

	lea	eax, DWORD PTR _eo_cat_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eo_cat_lo$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _eo_cat$[ebp]
	call	_cvt_shufmask_epi8_epi16
	add	esp, 8

; 695  :   cvt_epu8_epi16         (c,      &c_lo,      &c_hi);

	lea	eax, DWORD PTR _c_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _c_lo$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _c$[ebp]
	call	_cvt_epu8_epi16
	add	esp, 8

; 696  : 
; 697  :   __m256i offs_lo = _mm256_shuffle_epi8(sao_offs, eo_cat_lo);

	vmovdqu	ymm0, YMMWORD PTR _sao_offs$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _eo_cat_lo$[ebp]
	vmovdqu	YMMWORD PTR _offs_lo$[ebp], ymm0

; 698  :   __m256i offs_hi = _mm256_shuffle_epi8(sao_offs, eo_cat_hi);

	vmovdqu	ymm0, YMMWORD PTR _sao_offs$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _eo_cat_hi$[ebp]
	vmovdqu	YMMWORD PTR _offs_hi$[ebp], ymm0

; 699  : 
; 700  :   __m256i res_lo  = _mm256_adds_epi16  (offs_lo,  c_lo);

	vmovdqu	ymm0, YMMWORD PTR _offs_lo$[ebp]
	vpaddsw	ymm0, ymm0, YMMWORD PTR _c_lo$[ebp]
	vmovdqu	YMMWORD PTR _res_lo$[ebp], ymm0

; 701  :   __m256i res_hi  = _mm256_adds_epi16  (offs_hi,  c_hi);

	vmovdqu	ymm0, YMMWORD PTR _offs_hi$[ebp]
	vpaddsw	ymm0, ymm0, YMMWORD PTR _c_hi$[ebp]
	vmovdqu	YMMWORD PTR _res_hi$[ebp], ymm0

; 702  : 
; 703  :           res_lo  = _mm256_max_epi16   (res_lo,   zero);

	vmovdqu	ymm0, YMMWORD PTR _res_lo$[ebp]
	vpmaxsw	ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _res_lo$[ebp], ymm0

; 704  :           res_hi  = _mm256_max_epi16   (res_hi,   zero);

	vmovdqu	ymm0, YMMWORD PTR _res_hi$[ebp]
	vpmaxsw	ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _res_hi$[ebp], ymm0

; 705  : 
; 706  :   __m256i res     = _mm256_packus_epi16(res_lo,   res_hi);

	vmovdqu	ymm0, YMMWORD PTR _res_lo$[ebp]
	vpackuswb ymm0, ymm0, YMMWORD PTR _res_hi$[ebp]
	vmovdqu	YMMWORD PTR _res$[ebp], ymm0

; 707  :   return res;

	vmovdqu	ymm0, YMMWORD PTR _res$[ebp]

; 708  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@do_one_non
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN8@do_one_non:
	DD	4
	DD	$LN7@do_one_non
$LN7@do_one_non:
	DD	-448					; fffffe40H
	DD	32					; 00000020H
	DD	$LN3@do_one_non
	DD	-512					; fffffe00H
	DD	32					; 00000020H
	DD	$LN4@do_one_non
	DD	-576					; fffffdc0H
	DD	32					; 00000020H
	DD	$LN5@do_one_non
	DD	-640					; fffffd80H
	DD	32					; 00000020H
	DD	$LN6@do_one_non
$LN6@do_one_non:
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN5@do_one_non:
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN4@do_one_non:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN3@do_one_non:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
do_one_nonband_ymm@@128 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _reconstruct_color_band
_TEXT	SEGMENT
_last_dword_dst$1 = -1132				; size = 4
_result$2 = -1120					; size = 32
_curr_row$3 = -1056					; size = 32
_dst_ptr$4 = -1012					; size = 4
_src_ptr$5 = -1000					; size = 4
_last_dword$6 = -988					; size = 4
_rest_dstpos$7 = -976					; size = 4
_rest_srcpos$8 = -964					; size = 4
_curr_dstpos$9 = -952					; size = 4
_curr_srcpos$10 = -940					; size = 4
_result$11 = -928					; size = 32
_curr_row$12 = -864					; size = 32
_curr_dstpos$13 = -816					; size = 4
_curr_srcpos$14 = -804					; size = 4
_x$15 = -792						; size = 4
_y$16 = -780						; size = 4
_offsets$ = -768					; size = 512
_db4_mask$ = -224					; size = 32
_indexes$ = -160					; size = 32
_wdb4_256$ = -96					; size = 32
_width_rest$ = -36					; size = 4
_width_db4$ = -24					; size = 4
_width_db32$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_new_rec_data$ = 16					; size = 4
_sao$ = 20						; size = 4
_stride$ = 24						; size = 4
_new_stride$ = 28					; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_color_i$ = 40						; size = 4
_reconstruct_color_band PROC				; COMDAT

; 632  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1720				; 000006b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1720]
	mov	ecx, 430				; 000001aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 633  :   const uint32_t width_db32 = block_width & ~31;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _width_db32$[ebp], eax

; 634  :   const uint32_t width_db4  = block_width &  ~3;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _width_db4$[ebp], eax

; 635  :   const uint32_t width_rest = block_width &   3;

	mov	eax, DWORD PTR _block_width$[ebx]
	and	eax, 3
	mov	DWORD PTR _width_rest$[ebp], eax

; 636  : 
; 637  :   // Form the load&store mask
; 638  :   const __m256i wdb4_256      = _mm256_set1_epi32 (width_db4 & 31);

	mov	eax, DWORD PTR _width_db4$[ebp]
	and	eax, 31					; 0000001fH
	vmovd	xmm0, eax
	vpbroadcastd ymm0, xmm0
	vmovdqu	YMMWORD PTR _wdb4_256$[ebp], ymm0

; 639  :   const __m256i indexes       = _mm256_setr_epi32 (3, 7, 11, 15, 19, 23, 27, 31);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
	vmovdqu	YMMWORD PTR _indexes$[ebp], ymm0

; 640  :   const __m256i db4_mask      = _mm256_cmpgt_epi32(wdb4_256, indexes);

	vmovdqu	ymm0, YMMWORD PTR _wdb4_256$[ebp]
	vpcmpgtd ymm0, ymm0, YMMWORD PTR _indexes$[ebp]
	vmovdqu	YMMWORD PTR _db4_mask$[ebp], ymm0

; 641  : 
; 642  :   // Each of the 256 offsets is a byte, but only 16 are held in one YMM since
; 643  :   // lanes must be duplicated to use shuffle.
; 644  :   __m256i offsets[16];
; 645  :   calc_sao_offset_array_avx2(encoder, sao, offsets, color_i);

	mov	eax, DWORD PTR _color_i$[ebx]
	push	eax
	lea	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao$[ebx]
	push	edx
	mov	eax, DWORD PTR _encoder$[ebx]
	push	eax
	call	_calc_sao_offset_array_avx2
	add	esp, 16					; 00000010H

; 646  : 
; 647  :   for (uint32_t y = 0; y < block_height; y++) {

	mov	DWORD PTR _y$16[ebp], 0
	jmp	SHORT $LN4@reconstruc
$LN2@reconstruc:
	mov	eax, DWORD PTR _y$16[ebp]
	add	eax, 1
	mov	DWORD PTR _y$16[ebp], eax
$LN4@reconstruc:
	mov	eax, DWORD PTR _y$16[ebp]
	cmp	eax, DWORD PTR _block_height$[ebx]
	jae	$LN1@reconstruc

; 648  :     uint32_t x = 0;

	mov	DWORD PTR _x$15[ebp], 0

; 649  :     for (; x < width_db32; x += 32) {

	jmp	SHORT $LN7@reconstruc
$LN5@reconstruc:
	mov	eax, DWORD PTR _x$15[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _x$15[ebp], eax
$LN7@reconstruc:
	mov	eax, DWORD PTR _x$15[ebp]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jae	SHORT $LN6@reconstruc

; 650  :       const uint32_t curr_srcpos = y *     stride + x;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$15[ebp]
	mov	DWORD PTR _curr_srcpos$14[ebp], eax

; 651  :       const uint32_t curr_dstpos = y * new_stride + x;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _x$15[ebp]
	mov	DWORD PTR _curr_dstpos$13[ebp], eax

; 652  : 
; 653  :       __m256i curr_row = _mm256_loadu_si256((const __m256i *)(rec_data + curr_srcpos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_srcpos$14[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _curr_row$12[ebp], ymm0

; 654  :       __m256i result   = lookup_color_band_ymm(curr_row, offsets);

	lea	eax, DWORD PTR _offsets$[ebp]
	push	eax
	vmovdqu	ymm0, YMMWORD PTR _curr_row$12[ebp]
	call	_lookup_color_band_ymm
	add	esp, 4
	vmovdqu	YMMWORD PTR _result$11[ebp], ymm0

; 655  :       _mm256_storeu_si256((__m256i *)(new_rec_data + curr_dstpos), result);

	vmovdqu	ymm0, YMMWORD PTR _result$11[ebp]
	mov	eax, DWORD PTR _new_rec_data$[ebx]
	add	eax, DWORD PTR _curr_dstpos$13[ebp]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 656  :     }

	jmp	$LN5@reconstruc
$LN6@reconstruc:

; 657  :     if (block_width > width_db32) {

	mov	eax, DWORD PTR _block_width$[ebx]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jbe	$LN8@reconstruc

; 658  :       const uint32_t curr_srcpos = y *     stride + x;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _x$15[ebp]
	mov	DWORD PTR _curr_srcpos$10[ebp], eax

; 659  :       const uint32_t curr_dstpos = y * new_stride + x;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _x$15[ebp]
	mov	DWORD PTR _curr_dstpos$9[ebp], eax

; 660  :       const uint32_t rest_srcpos = y *     stride + width_db4;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_srcpos$8[ebp], eax

; 661  :       const uint32_t rest_dstpos = y * new_stride + width_db4;

	mov	eax, DWORD PTR _y$16[ebp]
	imul	eax, DWORD PTR _new_stride$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	DWORD PTR _rest_dstpos$7[ebp], eax

; 662  : 
; 663  :       // Read the very last pixels byte by byte and pack them into one dword.
; 664  :       // Piggyback said dword as the highest dword of the row vector variable,
; 665  :       // that particular place can never be loaded into by the maskmove
; 666  :       // (otherwise that vector would go through the divisible-by-32 code
; 667  :       // path).
; 668  :       uint32_t last_dword = load_border_bytes(rec_data, rest_srcpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_srcpos$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _last_dword$6[ebp], eax

; 669  : 
; 670  :       const int32_t *src_ptr = (const int32_t *)(    rec_data + curr_srcpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_srcpos$10[ebp]
	mov	DWORD PTR _src_ptr$5[ebp], eax

; 671  :             int32_t *dst_ptr = (      int32_t *)(new_rec_data + curr_dstpos);

	mov	eax, DWORD PTR _new_rec_data$[ebx]
	add	eax, DWORD PTR _curr_dstpos$9[ebp]
	mov	DWORD PTR _dst_ptr$4[ebp], eax

; 672  : 
; 673  :       __m256i curr_row = _mm256_maskload_epi32(src_ptr,  db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _src_ptr$5[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _curr_row$3[ebp], ymm0

; 674  :               curr_row = _mm256_insert_epi32  (curr_row, last_dword, 7);

	vmovd	xmm0, DWORD PTR _last_dword$6[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _curr_row$3[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _curr_row$3[ebp], ymm0

; 675  :       __m256i result   = lookup_color_band_ymm(curr_row, offsets);

	lea	eax, DWORD PTR _offsets$[ebp]
	push	eax
	vmovdqu	ymm0, YMMWORD PTR _curr_row$3[ebp]
	call	_lookup_color_band_ymm
	add	esp, 4
	vmovdqu	YMMWORD PTR _result$2[ebp], ymm0

; 676  : 
; 677  :       _mm256_maskstore_epi32(dst_ptr, db4_mask, result);

	vmovdqu	ymm0, YMMWORD PTR _result$2[ebp]
	vmovdqu	ymm1, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _dst_ptr$4[ebp]
	vpmaskmovd YMMWORD PTR [eax], ymm1, ymm0

; 678  :       uint32_t last_dword_dst = _mm256_extract_epi32(result, 7);

	vmovdqu	ymm0, YMMWORD PTR _result$2[ebp]
	vextracti128 xmm0, ymm0, 1
	vpextrd	eax, xmm0, 3
	mov	DWORD PTR _last_dword_dst$1[ebp], eax

; 679  : 
; 680  :       store_border_bytes(new_rec_data, rest_dstpos, width_rest, last_dword_dst);

	mov	eax, DWORD PTR _last_dword_dst$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_rest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rest_dstpos$7[ebp]
	push	edx
	mov	eax, DWORD PTR _new_rec_data$[ebx]
	push	eax
	call	_store_border_bytes
	add	esp, 16					; 00000010H
$LN8@reconstruc:

; 681  :     }
; 682  :   }

	jmp	$LN2@reconstruc
$LN1@reconstruc:

; 683  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@reconstruc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN12@reconstruc:
	DD	1
	DD	$LN11@reconstruc
$LN11@reconstruc:
	DD	-768					; fffffd00H
	DD	512					; 00000200H
	DD	$LN10@reconstruc
$LN10@reconstruc:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_reconstruct_color_band ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _lookup_color_band_ymm
_TEXT	SEGMENT
_lookup_res$1 = -1536					; size = 32
_lookup_mskd23$2 = -1472				; size = 32
_lookup_mskd01$3 = -1408				; size = 32
_lookup_mskd3$4 = -1344					; size = 32
_lookup_mskd2$5 = -1280					; size = 32
_lookup_mskd1$6 = -1216					; size = 32
_lookup_mskd0$7 = -1152					; size = 32
_lonib_lookup3$8 = -1088				; size = 32
_lonib_lookup2$9 = -1024				; size = 32
_lonib_lookup1$10 = -960				; size = 32
_lonib_lookup0$11 = -896				; size = 32
_hinib_select3$12 = -832				; size = 32
_hinib_select2$13 = -768				; size = 32
_hinib_select1$14 = -704				; size = 32
_hinib_select0$15 = -640				; size = 32
_curr_hinib3$16 = -576					; size = 32
_curr_hinib2$17 = -512					; size = 32
_curr_hinib1$18 = -448					; size = 32
_curr_hinib0$19 = -384					; size = 32
_i$20 = -329						; size = 1
_result_row$ = -320					; size = 32
_hi_nibbles$ = -256					; size = 32
_lo_nibbles$ = -192					; size = 32
_select_nibble$ = -128					; size = 32
_curr_row$ = -64					; size = 32
_offsets$ = 8						; size = 4
_lookup_color_band_ymm PROC				; COMDAT
; _curr_row$ = ymm0

; 581  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2328				; 00000918H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2328]
	mov	ecx, 582				; 00000246H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _curr_row$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 582  :   const __m256i select_nibble = _mm256_set1_epi8   (0x0f);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
	vmovdqu	YMMWORD PTR _select_nibble$[ebp], ymm0

; 583  :   const __m256i lo_nibbles    = _mm256_and_si256   (select_nibble, curr_row);

	vmovdqu	ymm0, YMMWORD PTR _select_nibble$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _curr_row$[ebp]
	vmovdqu	YMMWORD PTR _lo_nibbles$[ebp], ymm0

; 584  :   const __m256i hi_nibbles    = _mm256_andnot_si256(select_nibble, curr_row);

	vmovdqu	ymm0, YMMWORD PTR _select_nibble$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _curr_row$[ebp]
	vmovdqu	YMMWORD PTR _hi_nibbles$[ebp], ymm0

; 585  : 
; 586  :   // Loop through the offset vectors, the 0xi'th one always holding
; 587  :   // offsets 0xi0...0xif. Use shuffle to do a lookup on the current
; 588  :   // offset vector, then check which pixels actually should be looked
; 589  :   // up from this vector (ie. whether their values are 0xi0...0xif) and
; 590  :   // mask out any but correct ones.
; 591  :   __m256i result_row = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _result_row$[ebp], ymm0

; 592  :   for (uint8_t i = 0; i < 16; i += 4) {

	mov	BYTE PTR _i$20[ebp], 0
	jmp	SHORT $LN4@lookup_col
$LN2@lookup_col:
	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 4
	mov	BYTE PTR _i$20[ebp], al
$LN4@lookup_col:
	movzx	eax, BYTE PTR _i$20[ebp]
	cmp	eax, 16					; 00000010H
	jge	$LN3@lookup_col

; 593  : 
; 594  :     __m256i curr_hinib0   = _mm256_set1_epi8   ((i + 0) << 4);

	movzx	eax, BYTE PTR _i$20[ebp]
	shl	eax, 4
	movsx	ecx, al
	vmovd	xmm0, ecx
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _curr_hinib0$19[ebp], ymm0

; 595  :     __m256i curr_hinib1   = _mm256_set1_epi8   ((i + 1) << 4);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 1
	shl	eax, 4
	movsx	ecx, al
	vmovd	xmm0, ecx
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _curr_hinib1$18[ebp], ymm0

; 596  :     __m256i curr_hinib2   = _mm256_set1_epi8   ((i + 2) << 4);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 2
	shl	eax, 4
	movsx	ecx, al
	vmovd	xmm0, ecx
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _curr_hinib2$17[ebp], ymm0

; 597  :     __m256i curr_hinib3   = _mm256_set1_epi8   ((i + 3) << 4);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 3
	shl	eax, 4
	movsx	ecx, al
	vmovd	xmm0, ecx
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _curr_hinib3$16[ebp], ymm0

; 598  : 
; 599  :     __m256i hinib_select0 = _mm256_cmpeq_epi8  (curr_hinib0,    hi_nibbles);

	vmovdqu	ymm0, YMMWORD PTR _curr_hinib0$19[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _hi_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _hinib_select0$15[ebp], ymm0

; 600  :     __m256i hinib_select1 = _mm256_cmpeq_epi8  (curr_hinib1,    hi_nibbles);

	vmovdqu	ymm0, YMMWORD PTR _curr_hinib1$18[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _hi_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _hinib_select1$14[ebp], ymm0

; 601  :     __m256i hinib_select2 = _mm256_cmpeq_epi8  (curr_hinib2,    hi_nibbles);

	vmovdqu	ymm0, YMMWORD PTR _curr_hinib2$17[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _hi_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _hinib_select2$13[ebp], ymm0

; 602  :     __m256i hinib_select3 = _mm256_cmpeq_epi8  (curr_hinib3,    hi_nibbles);

	vmovdqu	ymm0, YMMWORD PTR _curr_hinib3$16[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _hi_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _hinib_select3$12[ebp], ymm0

; 603  : 
; 604  :     __m256i lonib_lookup0 = _mm256_shuffle_epi8(offsets[i + 0], lo_nibbles);

	movzx	eax, BYTE PTR _i$20[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vpshufb	ymm0, ymm0, YMMWORD PTR _lo_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _lonib_lookup0$11[ebp], ymm0

; 605  :     __m256i lonib_lookup1 = _mm256_shuffle_epi8(offsets[i + 1], lo_nibbles);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 1
	shl	eax, 5
	add	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vpshufb	ymm0, ymm0, YMMWORD PTR _lo_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _lonib_lookup1$10[ebp], ymm0

; 606  :     __m256i lonib_lookup2 = _mm256_shuffle_epi8(offsets[i + 2], lo_nibbles);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 2
	shl	eax, 5
	add	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vpshufb	ymm0, ymm0, YMMWORD PTR _lo_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _lonib_lookup2$9[ebp], ymm0

; 607  :     __m256i lonib_lookup3 = _mm256_shuffle_epi8(offsets[i + 3], lo_nibbles);

	movzx	eax, BYTE PTR _i$20[ebp]
	add	eax, 3
	shl	eax, 5
	add	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vpshufb	ymm0, ymm0, YMMWORD PTR _lo_nibbles$[ebp]
	vmovdqu	YMMWORD PTR _lonib_lookup3$8[ebp], ymm0

; 608  : 
; 609  :     __m256i lookup_mskd0  = _mm256_and_si256   (hinib_select0,  lonib_lookup0);

	vmovdqu	ymm0, YMMWORD PTR _hinib_select0$15[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _lonib_lookup0$11[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd0$7[ebp], ymm0

; 610  :     __m256i lookup_mskd1  = _mm256_and_si256   (hinib_select1,  lonib_lookup1);

	vmovdqu	ymm0, YMMWORD PTR _hinib_select1$14[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _lonib_lookup1$10[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd1$6[ebp], ymm0

; 611  :     __m256i lookup_mskd2  = _mm256_and_si256   (hinib_select2,  lonib_lookup2);

	vmovdqu	ymm0, YMMWORD PTR _hinib_select2$13[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _lonib_lookup2$9[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd2$5[ebp], ymm0

; 612  :     __m256i lookup_mskd3  = _mm256_and_si256   (hinib_select3,  lonib_lookup3);

	vmovdqu	ymm0, YMMWORD PTR _hinib_select3$12[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _lonib_lookup3$8[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd3$4[ebp], ymm0

; 613  : 
; 614  :     __m256i lookup_mskd01 = _mm256_or_si256    (lookup_mskd0,   lookup_mskd1);

	vmovdqu	ymm0, YMMWORD PTR _lookup_mskd0$7[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _lookup_mskd1$6[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd01$3[ebp], ymm0

; 615  :     __m256i lookup_mskd23 = _mm256_or_si256    (lookup_mskd2,   lookup_mskd3);

	vmovdqu	ymm0, YMMWORD PTR _lookup_mskd2$5[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _lookup_mskd3$4[ebp]
	vmovdqu	YMMWORD PTR _lookup_mskd23$2[ebp], ymm0

; 616  :     __m256i lookup_res    = _mm256_or_si256    (lookup_mskd01,  lookup_mskd23);

	vmovdqu	ymm0, YMMWORD PTR _lookup_mskd01$3[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _lookup_mskd23$2[ebp]
	vmovdqu	YMMWORD PTR _lookup_res$1[ebp], ymm0

; 617  : 
; 618  :             result_row    = _mm256_or_si256    (result_row,     lookup_res);

	vmovdqu	ymm0, YMMWORD PTR _result_row$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _lookup_res$1[ebp]
	vmovdqu	YMMWORD PTR _result_row$[ebp], ymm0

; 619  :   }

	jmp	$LN2@lookup_col
$LN3@lookup_col:

; 620  :   return result_row;

	vmovdqu	ymm0, YMMWORD PTR _result_row$[ebp]

; 621  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_lookup_color_band_ymm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _calc_sao_offset_array_avx2
_TEXT	SEGMENT
tv65 = -2088						; size = 4
_offs$1 = -1504						; size = 32
_sums_hi$2 = -1440					; size = 32
_sums_lo$3 = -1376					; size = 32
_offs_hi$4 = -1312					; size = 32
_offs_lo$5 = -1248					; size = 32
_offid_hi$6 = -1184					; size = 32
_offid_lo$7 = -1120					; size = 32
_val_hi$8 = -1056					; size = 32
_val_lo$9 = -992					; size = 32
_offset_id$10 = -928					; size = 32
_in_band$11 = -864					; size = 32
_bmbp_bads$12 = -800					; size = 32
_band_m_bp$13 = -736					; size = 32
_i$14 = -684						; size = 4
_sao_offs$ = -672					; size = 32
_sao_offs_xmm$ = -608					; size = 16
_sao_offs_hi$ = -576					; size = 16
_sao_offs_lo$ = -544					; size = 16
_bands$ = -512						; size = 32
_vals$ = -448						; size = 32
_band_incr$ = -384					; size = 32
_val_incr$ = -320					; size = 32
_cur_bp_v$ = -256					; size = 32
_band_pos_v$ = -192					; size = 32
_threes$ = -128						; size = 32
_zero$ = -64						; size = 32
_cur_bp$ = -20						; size = 4
_band_pos$ = -8						; size = 4
_encoder$ = 8						; size = 4
_sao$ = 12						; size = 4
_offsets$ = 16						; size = 4
_color_i$ = 20						; size = 4
_calc_sao_offset_array_avx2 PROC			; COMDAT

; 516  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2104				; 00000838H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2104]
	mov	ecx, 526				; 0000020eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 517  :   const uint32_t band_pos   = (color_i == COLOR_V) ? 1 : 0;

	cmp	DWORD PTR _color_i$[ebx], 2
	jne	SHORT $LN6@calc_sao_o
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN7@calc_sao_o
$LN6@calc_sao_o:
	mov	DWORD PTR tv65[ebp], 0
$LN7@calc_sao_o:
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _band_pos$[ebp], eax

; 518  :   const  int32_t cur_bp     = sao->band_position[band_pos];

	mov	eax, DWORD PTR _band_pos$[ebp]
	mov	ecx, DWORD PTR _sao$[ebx]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	DWORD PTR _cur_bp$[ebp], edx

; 519  : 
; 520  :   const __m256i  zero       = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 521  :   const __m256i  threes     = _mm256_set1_epi8  (  3);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0303030303030303030303030303030303030303030303030303030303030303
	vmovdqu	YMMWORD PTR _threes$[ebp], ymm0

; 522  : 
; 523  :   const __m256i  band_pos_v = _mm256_set1_epi8  (band_pos << 2);

	mov	eax, DWORD PTR _band_pos$[ebp]
	shl	eax, 2
	movsx	ecx, al
	vmovd	xmm0, ecx
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _band_pos_v$[ebp], ymm0

; 524  :   const __m256i  cur_bp_v   = _mm256_set1_epi8  (cur_bp);

	movsx	eax, BYTE PTR _cur_bp$[ebp]
	vmovd	xmm0, eax
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _cur_bp_v$[ebp], ymm0

; 525  :   const __m256i  val_incr   = _mm256_set1_epi8  (16);

	vmovdqu	ymm0, YMMWORD PTR __ymm@1010101010101010101010101010101010101010101010101010101010101010
	vmovdqu	YMMWORD PTR _val_incr$[ebp], ymm0

; 526  :   const __m256i  band_incr  = _mm256_set1_epi8  ( 2);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0202020202020202020202020202020202020202020202020202020202020202
	vmovdqu	YMMWORD PTR _band_incr$[ebp], ymm0

; 527  :         __m256i  vals       = _mm256_setr_epi8  ( 0,  1,  2,  3,  4,  5,  6,  7,

	vmovdqu	ymm0, YMMWORD PTR __ymm@0f0e0d0c0b0a090807060504030201000f0e0d0c0b0a09080706050403020100
	vmovdqu	YMMWORD PTR _vals$[ebp], ymm0

; 528  :                                                   8,  9, 10, 11, 12, 13, 14, 15,
; 529  :                                                   0,  1,  2,  3,  4,  5,  6,  7,
; 530  :                                                   8,  9, 10, 11, 12, 13, 14, 15);
; 531  : 
; 532  :         __m256i  bands     = _mm256_setr_epi32 (0, 0, 0x01010101, 0x01010101,

	vmovdqu	ymm0, YMMWORD PTR __ymm@0101010101010101000000000000000001010101010101010000000000000000
	vmovdqu	YMMWORD PTR _bands$[ebp], ymm0

; 533  :                                                 0, 0, 0x01010101, 0x01010101);
; 534  : 
; 535  :   // We'll only ever address SAO offsets 1, 2, 3, 4, 6, 7, 8, 9, so only load
; 536  :   // them and truncate into signed 16 bits (anything out of that range will
; 537  :   // anyway saturate anything they're used to do)
; 538  :   __m128i sao_offs_lo  = _mm_loadu_si128((const __m128i *)(sao->offsets + 1));

	mov	eax, DWORD PTR _sao$[ebx]
	add	eax, 32					; 00000020H
	vmovdqu	xmm0, XMMWORD PTR [eax]
	vmovdqa	XMMWORD PTR _sao_offs_lo$[ebp], xmm0

; 539  :   __m128i sao_offs_hi  = _mm_loadu_si128((const __m128i *)(sao->offsets + 6));

	mov	eax, DWORD PTR _sao$[ebx]
	add	eax, 52					; 00000034H
	vmovdqu	xmm0, XMMWORD PTR [eax]
	vmovdqa	XMMWORD PTR _sao_offs_hi$[ebp], xmm0

; 540  : 
; 541  :   __m128i sao_offs_xmm = _mm_packs_epi32  (sao_offs_lo, sao_offs_hi);

	vmovdqa	xmm0, XMMWORD PTR _sao_offs_lo$[ebp]
	vpackssdw xmm0, xmm0, XMMWORD PTR _sao_offs_hi$[ebp]
	vmovdqa	XMMWORD PTR _sao_offs_xmm$[ebp], xmm0

; 542  :   __m256i sao_offs     = broadcast_xmm2ymm(sao_offs_xmm);

	vmovdqa	xmm0, XMMWORD PTR _sao_offs_xmm$[ebp]
	call	_broadcast_xmm2ymm
	vmovdqu	YMMWORD PTR _sao_offs$[ebp], ymm0

; 543  : 
; 544  :   for (uint32_t i = 0; i < 16; i++) {

	mov	DWORD PTR _i$14[ebp], 0
	jmp	SHORT $LN4@calc_sao_o
$LN2@calc_sao_o:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN4@calc_sao_o:
	cmp	DWORD PTR _i$14[ebp], 16		; 00000010H
	jae	$LN1@calc_sao_o

; 545  :     // bands will always be in [0, 31], and cur_bp in [0, 27], so no overflow
; 546  :     // can occur
; 547  :     __m256i band_m_bp = _mm256_sub_epi8    (bands,  cur_bp_v);

	vmovdqu	ymm0, YMMWORD PTR _bands$[ebp]
	vpsubb	ymm0, ymm0, YMMWORD PTR _cur_bp_v$[ebp]
	vmovdqu	YMMWORD PTR _band_m_bp$13[ebp], ymm0

; 548  : 
; 549  :     // If (x & ~3) != 0 for any signed x, then x < 0 or x > 3
; 550  :     __m256i bmbp_bads = _mm256_andnot_si256(threes,    band_m_bp);

	vmovdqu	ymm0, YMMWORD PTR _threes$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _band_m_bp$13[ebp]
	vmovdqu	YMMWORD PTR _bmbp_bads$12[ebp], ymm0

; 551  :     __m256i in_band   = _mm256_cmpeq_epi8  (zero,      bmbp_bads);

	vmovdqu	ymm0, YMMWORD PTR _zero$[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _bmbp_bads$12[ebp]
	vmovdqu	YMMWORD PTR _in_band$11[ebp], ymm0

; 552  : 
; 553  :     __m256i offset_id = _mm256_add_epi8    (band_m_bp, band_pos_v);

	vmovdqu	ymm0, YMMWORD PTR _band_m_bp$13[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _band_pos_v$[ebp]
	vmovdqu	YMMWORD PTR _offset_id$10[ebp], ymm0

; 554  : 
; 555  :     __m256i val_lo, val_hi;
; 556  :     cvt_epu8_epi16(vals, &val_lo, &val_hi);

	lea	eax, DWORD PTR _val_hi$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _val_lo$9[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _vals$[ebp]
	call	_cvt_epu8_epi16
	add	esp, 8

; 557  : 
; 558  :     __m256i offid_lo, offid_hi;
; 559  :     cvt_shufmask_epi8_epi16(offset_id, &offid_lo, &offid_hi);

	lea	eax, DWORD PTR _offid_hi$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _offid_lo$7[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _offset_id$10[ebp]
	call	_cvt_shufmask_epi8_epi16
	add	esp, 8

; 560  : 
; 561  :     __m256i offs_lo = _mm256_shuffle_epi8(sao_offs, offid_lo);

	vmovdqu	ymm0, YMMWORD PTR _sao_offs$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _offid_lo$7[ebp]
	vmovdqu	YMMWORD PTR _offs_lo$5[ebp], ymm0

; 562  :     __m256i offs_hi = _mm256_shuffle_epi8(sao_offs, offid_hi);

	vmovdqu	ymm0, YMMWORD PTR _sao_offs$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _offid_hi$6[ebp]
	vmovdqu	YMMWORD PTR _offs_hi$4[ebp], ymm0

; 563  : 
; 564  :     __m256i sums_lo = _mm256_adds_epi16  (val_lo,   offs_lo);

	vmovdqu	ymm0, YMMWORD PTR _val_lo$9[ebp]
	vpaddsw	ymm0, ymm0, YMMWORD PTR _offs_lo$5[ebp]
	vmovdqu	YMMWORD PTR _sums_lo$3[ebp], ymm0

; 565  :     __m256i sums_hi = _mm256_adds_epi16  (val_hi,   offs_hi);

	vmovdqu	ymm0, YMMWORD PTR _val_hi$8[ebp]
	vpaddsw	ymm0, ymm0, YMMWORD PTR _offs_hi$4[ebp]
	vmovdqu	YMMWORD PTR _sums_hi$2[ebp], ymm0

; 566  : 
; 567  :             sums_lo = _mm256_max_epi16   (sums_lo,  zero);

	vmovdqu	ymm0, YMMWORD PTR _sums_lo$3[ebp]
	vpmaxsw	ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _sums_lo$3[ebp], ymm0

; 568  :             sums_hi = _mm256_max_epi16   (sums_hi,  zero);

	vmovdqu	ymm0, YMMWORD PTR _sums_hi$2[ebp]
	vpmaxsw	ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _sums_hi$2[ebp], ymm0

; 569  : 
; 570  :     __m256i offs    = _mm256_packus_epi16(sums_lo,  sums_hi);

	vmovdqu	ymm0, YMMWORD PTR _sums_lo$3[ebp]
	vpackuswb ymm0, ymm0, YMMWORD PTR _sums_hi$2[ebp]
	vmovdqu	YMMWORD PTR _offs$1[ebp], ymm0

; 571  : 
; 572  :     offsets[i]      = _mm256_blendv_epi8 (vals,     offs, in_band);

	vmovdqu	ymm0, YMMWORD PTR _in_band$11[ebp]
	vmovdqu	ymm1, YMMWORD PTR _vals$[ebp]
	vpblendvb ymm0, ymm1, YMMWORD PTR _offs$1[ebp], ymm0
	mov	eax, DWORD PTR _i$14[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 573  : 
; 574  :             vals    = _mm256_add_epi8    (vals,     val_incr);

	vmovdqu	ymm0, YMMWORD PTR _vals$[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _val_incr$[ebp]
	vmovdqu	YMMWORD PTR _vals$[ebp], ymm0

; 575  :             bands   = _mm256_add_epi8    (bands,    band_incr);

	vmovdqu	ymm0, YMMWORD PTR _bands$[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _band_incr$[ebp]
	vmovdqu	YMMWORD PTR _bands$[ebp], ymm0

; 576  :   }

	jmp	$LN2@calc_sao_o
$LN1@calc_sao_o:

; 577  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@calc_sao_o
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN13@calc_sao_o:
	DD	4
	DD	$LN12@calc_sao_o
$LN12@calc_sao_o:
	DD	-992					; fffffc20H
	DD	32					; 00000020H
	DD	$LN8@calc_sao_o
	DD	-1056					; fffffbe0H
	DD	32					; 00000020H
	DD	$LN9@calc_sao_o
	DD	-1120					; fffffba0H
	DD	32					; 00000020H
	DD	$LN10@calc_sao_o
	DD	-1184					; fffffb60H
	DD	32					; 00000020H
	DD	$LN11@calc_sao_o
$LN11@calc_sao_o:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN10@calc_sao_o:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN9@calc_sao_o:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN8@calc_sao_o:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
_calc_sao_offset_array_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _calc_sao_edge_dir_avx2
_TEXT	SEGMENT
_sum$1 = -1368						; size = 4
_i$2 = -1356						; size = 4
_badbyte_mask$3 = -1344					; size = 32
_orig$4 = -1280						; size = 32
_c$5 = -1216						; size = 32
_b$6 = -1152						; size = 32
_a$7 = -1088						; size = 32
_orig_ptr$8 = -1032					; size = 4
_c_ptr$9 = -1020					; size = 4
_b_ptr$10 = -1008					; size = 4
_a_ptr$11 = -996					; size = 4
_orig_last$12 = -984					; size = 4
_c_last$13 = -972					; size = 4
_b_last$14 = -960					; size = 4
_a_last$15 = -948					; size = 4
_rest_bpos$16 = -936					; size = 4
_curr_bpos$17 = -924					; size = 4
_rest_apos$18 = -912					; size = 4
_curr_apos$19 = -900					; size = 4
_rest_cpos$20 = -888					; size = 4
_curr_cpos$21 = -876					; size = 4
_orig$22 = -864						; size = 32
_c$23 = -800						; size = 32
_b$24 = -736						; size = 32
_a$25 = -672						; size = 32
_c_off$26 = -604					; size = 4
_b_off$27 = -592					; size = 4
_a_off$28 = -580					; size = 4
_x$ = -568						; size = 4
_y$ = -556						; size = 4
_diff_accum$ = -544					; size = 160
_db4_mask$ = -352					; size = 32
_indexes$ = -288					; size = 32
_wdb4_256$ = -224					; size = 32
_zero$ = -160						; size = 32
_width_rest$ = -104					; size = 4
_width_db4$ = -92					; size = 4
_width_db32$ = -80					; size = 4
_scan_width$ = -68					; size = 4
_hit_cnt$ = -56						; size = 4
_diff_sum$ = -44					; size = 4
_b_ofs$ = -32						; size = 8
_a_ofs$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_orig_data$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_eo_class$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_cat_sum_cnt$ = 28					; size = 4
_calc_sao_edge_dir_avx2 PROC				; COMDAT

; 429  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1976				; 000007b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1976]
	mov	ecx, 494				; 000001eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 430  :   vector2d_t a_ofs = g_sao_edge_offsets[eo_class][0];

	mov	eax, DWORD PTR _eo_class$[ebx]
	shl	eax, 4
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _g_sao_edge_offsets[eax+edx]
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+edx+4]
	mov	DWORD PTR _a_ofs$[ebp], ecx
	mov	DWORD PTR _a_ofs$[ebp+4], edx

; 431  :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];

	mov	eax, DWORD PTR _eo_class$[ebx]
	shl	eax, 4
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+ecx]
	mov	eax, DWORD PTR _g_sao_edge_offsets[eax+ecx+4]
	mov	DWORD PTR _b_ofs$[ebp], edx
	mov	DWORD PTR _b_ofs$[ebp+4], eax

; 432  : 
; 433  :   int32_t *diff_sum   = cat_sum_cnt[0];

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _cat_sum_cnt$[ebx]
	mov	DWORD PTR _diff_sum$[ebp], ecx

; 434  :   int32_t *hit_cnt    = cat_sum_cnt[1];

	mov	eax, 20					; 00000014H
	shl	eax, 0
	add	eax, DWORD PTR _cat_sum_cnt$[ebx]
	mov	DWORD PTR _hit_cnt$[ebp], eax

; 435  : 
; 436  :   int32_t scan_width  = block_width -   2;

	mov	eax, DWORD PTR _block_width$[ebx]
	sub	eax, 2
	mov	DWORD PTR _scan_width$[ebp], eax

; 437  :   int32_t width_db32  = scan_width  & ~31;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _width_db32$[ebp], eax

; 438  :   int32_t width_db4   = scan_width  &  ~3;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _width_db4$[ebp], eax

; 439  :   int32_t width_rest  = scan_width  &   3;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, 3
	mov	DWORD PTR _width_rest$[ebp], eax

; 440  : 
; 441  :   const __m256i zero          = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 442  : 
; 443  :   // Form the load&store mask
; 444  :   const __m256i wdb4_256      = _mm256_set1_epi32 (width_db4 & 31);

	mov	eax, DWORD PTR _width_db4$[ebp]
	and	eax, 31					; 0000001fH
	vmovd	xmm0, eax
	vpbroadcastd ymm0, xmm0
	vmovdqu	YMMWORD PTR _wdb4_256$[ebp], ymm0

; 445  :   const __m256i indexes       = _mm256_setr_epi32 (3, 7, 11, 15, 19, 23, 27, 31);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
	vmovdqu	YMMWORD PTR _indexes$[ebp], ymm0

; 446  :   const __m256i db4_mask      = _mm256_cmpgt_epi32(wdb4_256, indexes);

	vmovdqu	ymm0, YMMWORD PTR _wdb4_256$[ebp]
	vpcmpgtd ymm0, ymm0, YMMWORD PTR _indexes$[ebp]
	vmovdqu	YMMWORD PTR _db4_mask$[ebp], ymm0

; 447  : 
; 448  :   __m256i diff_accum[5] = { _mm256_setzero_si256() };

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _diff_accum$[ebp], ymm0
	push	128					; 00000080H
	push	0
	lea	eax, DWORD PTR _diff_accum$[ebp+32]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 449  : 
; 450  :   int32_t y, x;
; 451  :   for (y = 1; y < block_height - 1; y++) {

	mov	DWORD PTR _y$[ebp], 1
	jmp	SHORT $LN4@calc_sao_e
$LN2@calc_sao_e:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@calc_sao_e:
	mov	eax, DWORD PTR _block_height$[ebx]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN3@calc_sao_e

; 452  :     for (x = 1; x < width_db32 + 1; x += 32) {

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN7@calc_sao_e
$LN5@calc_sao_e:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _x$[ebp], eax
$LN7@calc_sao_e:
	mov	eax, DWORD PTR _width_db32$[ebp]
	add	eax, 1
	cmp	DWORD PTR _x$[ebp], eax
	jge	$LN6@calc_sao_e

; 453  :       const uint32_t a_off = (y + a_ofs.y) * block_width + x + a_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _a_off$28[ebp], eax

; 454  :       const uint32_t b_off = (y + b_ofs.y) * block_width + x + b_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _b_off$27[ebp], eax

; 455  :       const uint32_t c_off =  y            * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _c_off$26[ebp], eax

; 456  : 
; 457  :       __m256i a      = _mm256_loadu_si256((const __m256i *)(rec_data  + a_off));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _a_off$28[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$25[ebp], ymm0

; 458  :       __m256i b      = _mm256_loadu_si256((const __m256i *)(rec_data  + b_off));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _b_off$27[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$24[ebp], ymm0

; 459  :       __m256i c      = _mm256_loadu_si256((const __m256i *)(rec_data  + c_off));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _c_off$26[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$23[ebp], ymm0

; 460  :       __m256i orig   = _mm256_loadu_si256((const __m256i *)(orig_data + c_off));

	mov	eax, DWORD PTR _orig_data$[ebx]
	add	eax, DWORD PTR _c_off$26[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _orig$22[ebp], ymm0

; 461  : 
; 462  :       calc_edge_dir_one_ymm(a, b, c, orig, zero, diff_accum, hit_cnt);

	vmovdqu	ymm4, YMMWORD PTR _zero$[ebp]
	vmovdqu	ymm3, YMMWORD PTR _orig$22[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$23[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$24[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$25[ebp]
	mov	edx, DWORD PTR _hit_cnt$[ebp]
	lea	ecx, DWORD PTR _diff_accum$[ebp]
	call	calc_edge_dir_one_ymm@@168

; 463  :     }

	jmp	$LN5@calc_sao_e
$LN6@calc_sao_e:

; 464  :     if (scan_width > width_db32) {

	mov	eax, DWORD PTR _scan_width$[ebp]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jle	$LN11@calc_sao_e

; 465  :       const uint32_t curr_cpos   =  y            * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _curr_cpos$21[ebp], eax

; 466  :       const uint32_t rest_cpos   =  y            * block_width + width_db4 + 1;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	mov	ecx, DWORD PTR _width_db4$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_cpos$20[ebp], edx

; 467  : 
; 468  :       const  int32_t curr_apos   = (y + a_ofs.y) * block_width + x + a_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _curr_apos$19[ebp], eax

; 469  :       const  int32_t rest_apos   = (y + a_ofs.y) * block_width + width_db4 + a_ofs.x + 1;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	ecx, DWORD PTR _a_ofs$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_apos$18[ebp], edx

; 470  : 
; 471  :       const  int32_t curr_bpos   = (y + b_ofs.y) * block_width + x + b_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _curr_bpos$17[ebp], eax

; 472  :       const  int32_t rest_bpos   = (y + b_ofs.y) * block_width + width_db4 + b_ofs.x + 1;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	ecx, DWORD PTR _b_ofs$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_bpos$16[ebp], edx

; 473  : 
; 474  :             uint32_t a_last      = load_border_bytes(rec_data,  rest_apos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_apos$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a_last$15[ebp], eax

; 475  :             uint32_t b_last      = load_border_bytes(rec_data,  rest_bpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_bpos$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b_last$14[ebp], eax

; 476  :             uint32_t c_last      = load_border_bytes(rec_data,  rest_cpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_cpos$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _c_last$13[ebp], eax

; 477  :             uint32_t orig_last   = load_border_bytes(orig_data, rest_cpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_cpos$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _orig_last$12[ebp], eax

; 478  : 
; 479  :       const int32_t *a_ptr       = (const int32_t *)(rec_data  + curr_apos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_apos$19[ebp]
	mov	DWORD PTR _a_ptr$11[ebp], eax

; 480  :       const int32_t *b_ptr       = (const int32_t *)(rec_data  + curr_bpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_bpos$17[ebp]
	mov	DWORD PTR _b_ptr$10[ebp], eax

; 481  :       const int32_t *c_ptr       = (const int32_t *)(rec_data  + curr_cpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_cpos$21[ebp]
	mov	DWORD PTR _c_ptr$9[ebp], eax

; 482  :       const int32_t *orig_ptr    = (const int32_t *)(orig_data + curr_cpos);

	mov	eax, DWORD PTR _orig_data$[ebx]
	add	eax, DWORD PTR _curr_cpos$21[ebp]
	mov	DWORD PTR _orig_ptr$8[ebp], eax

; 483  : 
; 484  :       __m256i a    = _mm256_maskload_epi32(a_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _a_ptr$11[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$7[ebp], ymm0

; 485  :       __m256i b    = _mm256_maskload_epi32(b_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _b_ptr$10[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$6[ebp], ymm0

; 486  :       __m256i c    = _mm256_maskload_epi32(c_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _c_ptr$9[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$5[ebp], ymm0

; 487  :       __m256i orig = _mm256_maskload_epi32(orig_ptr, db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _orig_ptr$8[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _orig$4[ebp], ymm0

; 488  : 
; 489  :               a    = _mm256_insert_epi32  (a,        a_last,    7);

	vmovd	xmm0, DWORD PTR _a_last$15[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _a$7[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _a$7[ebp], ymm0

; 490  :               b    = _mm256_insert_epi32  (b,        b_last,    7);

	vmovd	xmm0, DWORD PTR _b_last$14[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _b$6[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _b$6[ebp], ymm0

; 491  :               c    = _mm256_insert_epi32  (c,        c_last,    7);

	vmovd	xmm0, DWORD PTR _c_last$13[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _c$5[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _c$5[ebp], ymm0

; 492  :               orig = _mm256_insert_epi32  (orig,     orig_last, 7);

	vmovd	xmm0, DWORD PTR _orig_last$12[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _orig$4[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _orig$4[ebp], ymm0

; 493  : 
; 494  :       __m256i badbyte_mask = gen_badbyte_mask(db4_mask, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	call	_gen_badbyte_mask
	add	esp, 4
	vmovdqu	YMMWORD PTR _badbyte_mask$3[ebp], ymm0

; 495  : 
; 496  :       calc_edge_dir_one_ymm(a, b, c, orig, badbyte_mask, diff_accum, hit_cnt);

	vmovdqu	ymm4, YMMWORD PTR _badbyte_mask$3[ebp]
	vmovdqu	ymm3, YMMWORD PTR _orig$4[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$5[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$6[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$7[ebp]
	mov	edx, DWORD PTR _hit_cnt$[ebp]
	lea	ecx, DWORD PTR _diff_accum$[ebp]
	call	calc_edge_dir_one_ymm@@168
$LN11@calc_sao_e:

; 497  :     }
; 498  :   }

	jmp	$LN2@calc_sao_e
$LN3@calc_sao_e:

; 499  :   for (uint32_t i = 0; i < 5; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@calc_sao_e
$LN8@calc_sao_e:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@calc_sao_e:
	cmp	DWORD PTR _i$2[ebp], 5
	jae	SHORT $LN1@calc_sao_e

; 500  :     int32_t sum = hsum_8x32b(diff_accum[i]);

	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 5
	vmovdqu	ymm0, YMMWORD PTR _diff_accum$[ebp+eax]
	call	hsum_8x32b@@32
	mov	DWORD PTR _sum$1[ebp], eax

; 501  :     diff_sum[i] += sum;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _diff_sum$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _sum$1[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _diff_sum$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 502  :   }

	jmp	SHORT $LN8@calc_sao_e
$LN1@calc_sao_e:

; 503  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@calc_sao_e
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN17@calc_sao_e:
	DD	3
	DD	$LN16@calc_sao_e
$LN16@calc_sao_e:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN13@calc_sao_e
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN14@calc_sao_e
	DD	-544					; fffffde0H
	DD	160					; 000000a0H
	DD	$LN15@calc_sao_e
$LN15@calc_sao_e:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN14@calc_sao_e:
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN13@calc_sao_e:
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
_calc_sao_edge_dir_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT calc_edge_dir_one_ymm@@168
_TEXT	SEGMENT
_eoc_diffs_32$1 = -1088					; size = 32
_eoc_diffs_16$2 = -1024					; size = 32
_eoc_diffs_hi$3 = -960					; size = 32
_eoc_diffs_lo$4 = -896					; size = 32
_eoc_mask_hi$5 = -832					; size = 32
_eoc_mask_lo$6 = -768					; size = 32
_eoc_hits$7 = -728					; size = 4
_eoc_bits$8 = -716					; size = 4
_eoc_mask$9 = -704					; size = 32
_curr_id$10 = -640					; size = 32
_i$11 = -588						; size = 4
_diffs_hi$ = -576					; size = 32
_diffs_lo$ = -512					; size = 32
_eo_cat$ = -448						; size = 32
_ones_16$ = -384					; size = 32
_hit_cnt$ = -344					; size = 4
_diff_accum$ = -332					; size = 4
_badbyte_mask$ = -320					; size = 32
_orig$ = -256						; size = 32
_c$ = -192						; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
calc_edge_dir_one_ymm@@168 PROC				; COMDAT
; _a$ = ymm0
; _b$ = ymm1
; _c$ = ymm2
; _orig$ = ymm3
; _badbyte_mask$ = ymm4
; _diff_accum$ = ecx
; _hit_cnt$ = edx

; 395  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1688				; 00000698H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1688]
	mov	ecx, 422				; 000001a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _hit_cnt$[ebp], edx
	mov	DWORD PTR _diff_accum$[ebp], ecx
	vmovups	YMMWORD PTR _badbyte_mask$[ebp], ymm4
	vmovups	YMMWORD PTR _orig$[ebp], ymm3
	vmovups	YMMWORD PTR _c$[ebp], ymm2
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 396  :   const __m256i ones_16 = _mm256_set1_epi16(1);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
	vmovdqu	YMMWORD PTR _ones_16$[ebp], ymm0

; 397  :         __m256i eo_cat  = calc_eo_cat      (a, b, c);

	vmovdqu	ymm2, YMMWORD PTR _c$[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	call	calc_eo_cat@@96
	vmovdqu	YMMWORD PTR _eo_cat$[ebp], ymm0

; 398  :                 eo_cat  = _mm256_or_si256  (eo_cat, badbyte_mask);

	vmovdqu	ymm0, YMMWORD PTR _eo_cat$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _badbyte_mask$[ebp]
	vmovdqu	YMMWORD PTR _eo_cat$[ebp], ymm0

; 399  : 
; 400  :   __m256i diffs_lo, diffs_hi;
; 401  :   diff_epi8_epi16(orig, c, &diffs_lo, &diffs_hi);

	lea	eax, DWORD PTR _diffs_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diffs_lo$[ebp]
	push	ecx
	vmovdqu	ymm1, YMMWORD PTR _c$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _orig$[ebp]
	call	_diff_epi8_epi16
	add	esp, 8

; 402  : 
; 403  :   for (uint32_t i = 0; i < 5; i++) {

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN4@calc_edge_
$LN2@calc_edge_:
	mov	eax, DWORD PTR _i$11[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11[ebp], eax
$LN4@calc_edge_:
	cmp	DWORD PTR _i$11[ebp], 5
	jae	$LN1@calc_edge_

; 404  :     __m256i  curr_id       = _mm256_set1_epi8    (i);

	movsx	eax, BYTE PTR _i$11[ebp]
	vmovd	xmm0, eax
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _curr_id$10[ebp], ymm0

; 405  :     __m256i  eoc_mask      = _mm256_cmpeq_epi8   (eo_cat, curr_id);

	vmovdqu	ymm0, YMMWORD PTR _eo_cat$[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _curr_id$10[ebp]
	vmovdqu	YMMWORD PTR _eoc_mask$9[ebp], ymm0

; 406  :     uint32_t eoc_bits      = _mm256_movemask_epi8(eoc_mask);

	vmovdqu	ymm0, YMMWORD PTR _eoc_mask$9[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _eoc_bits$8[ebp], eax

; 407  :     uint32_t eoc_hits      = _mm_popcnt_u32      (eoc_bits);

	popcnt	eax, DWORD PTR _eoc_bits$8[ebp]
	mov	DWORD PTR _eoc_hits$7[ebp], eax

; 408  : 
; 409  :     __m256i  eoc_mask_lo   = _mm256_unpacklo_epi8(eoc_mask,      eoc_mask);

	vmovdqu	ymm0, YMMWORD PTR _eoc_mask$9[ebp]
	vpunpcklbw ymm0, ymm0, YMMWORD PTR _eoc_mask$9[ebp]
	vmovdqu	YMMWORD PTR _eoc_mask_lo$6[ebp], ymm0

; 410  :     __m256i  eoc_mask_hi   = _mm256_unpackhi_epi8(eoc_mask,      eoc_mask);

	vmovdqu	ymm0, YMMWORD PTR _eoc_mask$9[ebp]
	vpunpckhbw ymm0, ymm0, YMMWORD PTR _eoc_mask$9[ebp]
	vmovdqu	YMMWORD PTR _eoc_mask_hi$5[ebp], ymm0

; 411  : 
; 412  :     __m256i  eoc_diffs_lo  = _mm256_and_si256    (diffs_lo,      eoc_mask_lo);

	vmovdqu	ymm0, YMMWORD PTR _diffs_lo$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _eoc_mask_lo$6[ebp]
	vmovdqu	YMMWORD PTR _eoc_diffs_lo$4[ebp], ymm0

; 413  :     __m256i  eoc_diffs_hi  = _mm256_and_si256    (diffs_hi,      eoc_mask_hi);

	vmovdqu	ymm0, YMMWORD PTR _diffs_hi$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _eoc_mask_hi$5[ebp]
	vmovdqu	YMMWORD PTR _eoc_diffs_hi$3[ebp], ymm0

; 414  : 
; 415  :     __m256i  eoc_diffs_16  = _mm256_add_epi16    (eoc_diffs_lo,  eoc_diffs_hi);

	vmovdqu	ymm0, YMMWORD PTR _eoc_diffs_lo$4[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _eoc_diffs_hi$3[ebp]
	vmovdqu	YMMWORD PTR _eoc_diffs_16$2[ebp], ymm0

; 416  :     __m256i  eoc_diffs_32  = _mm256_madd_epi16   (eoc_diffs_16,  ones_16);

	vmovdqu	ymm0, YMMWORD PTR _eoc_diffs_16$2[ebp]
	vpmaddwd ymm0, ymm0, YMMWORD PTR _ones_16$[ebp]
	vmovdqu	YMMWORD PTR _eoc_diffs_32$1[ebp], ymm0

; 417  : 
; 418  :              diff_accum[i] = _mm256_add_epi32    (diff_accum[i], eoc_diffs_32);

	mov	eax, DWORD PTR _i$11[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _diff_accum$[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vpaddd	ymm0, ymm0, YMMWORD PTR _eoc_diffs_32$1[ebp]
	mov	ecx, DWORD PTR _i$11[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR _diff_accum$[ebp]
	vmovdqu	YMMWORD PTR [ecx], ymm0

; 419  :              hit_cnt[i]   += eoc_hits;

	mov	eax, DWORD PTR _i$11[ebp]
	mov	ecx, DWORD PTR _hit_cnt$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _eoc_hits$7[ebp]
	mov	eax, DWORD PTR _i$11[ebp]
	mov	ecx, DWORD PTR _hit_cnt$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 420  :   }

	jmp	$LN2@calc_edge_
$LN1@calc_edge_:

; 421  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@calc_edge_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN9@calc_edge_:
	DD	2
	DD	$LN8@calc_edge_
$LN8@calc_edge_:
	DD	-512					; fffffe00H
	DD	32					; 00000020H
	DD	$LN6@calc_edge_
	DD	-576					; fffffdc0H
	DD	32					; 00000020H
	DD	$LN7@calc_edge_
$LN7@calc_edge_:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN6@calc_edge_:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
calc_edge_dir_one_ymm@@168 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _sao_edge_ddistortion_avx2
_TEXT	SEGMENT
_curr$1 = -1536						; size = 32
_badbyte_mask$2 = -1472					; size = 32
_orig$3 = -1408						; size = 32
_c$4 = -1344						; size = 32
_b$5 = -1280						; size = 32
_a$6 = -1216						; size = 32
_orig_ptr$7 = -1160					; size = 4
_c_ptr$8 = -1148					; size = 4
_b_ptr$9 = -1136					; size = 4
_a_ptr$10 = -1124					; size = 4
_orig_last$11 = -1112					; size = 4
_c_last$12 = -1100					; size = 4
_b_last$13 = -1088					; size = 4
_a_last$14 = -1076					; size = 4
_rest_bpos$15 = -1064					; size = 4
_curr_bpos$16 = -1052					; size = 4
_rest_apos$17 = -1040					; size = 4
_curr_apos$18 = -1028					; size = 4
_rest_cpos$19 = -1016					; size = 4
_curr_cpos$20 = -1004					; size = 4
_curr$21 = -992						; size = 32
_orig$22 = -928						; size = 32
_c$23 = -864						; size = 32
_b$24 = -800						; size = 32
_a$25 = -736						; size = 32
_b_pos$26 = -676					; size = 4
_a_pos$27 = -664					; size = 4
_c_pos$28 = -652					; size = 4
_sum$ = -640						; size = 32
_offsets_256$ = -576					; size = 32
_offsets_8b$ = -528					; size = 16
_offsets4_8b$ = -496					; size = 16
_offsets03_8b$ = -464					; size = 16
_offsets_ok$ = -428					; size = 2
_offsets4$ = -416					; size = 16
_offsets03$ = -384					; size = 16
_zero$ = -352						; size = 32
_db4_mask$ = -288					; size = 32
_indexes$ = -224					; size = 32
_wdb4_256$ = -160					; size = 32
_width_rest$ = -100					; size = 4
_width_db4$ = -88					; size = 4
_width_db32$ = -76					; size = 4
_scan_width$ = -64					; size = 4
_b_ofs$ = -52						; size = 8
_a_ofs$ = -36						; size = 8
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_orig_data$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_block_width$ = 16					; size = 4
_block_height$ = 20					; size = 4
_eo_class$ = 24						; size = 4
_offsets$ = 28						; size = 4
_sao_edge_ddistortion_avx2 PROC				; COMDAT

; 293  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2328				; 00000918H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2328]
	mov	ecx, 582				; 00000246H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 294  :   int32_t y, x;
; 295  :   vector2d_t a_ofs = g_sao_edge_offsets[eo_class][0];

	mov	eax, DWORD PTR _eo_class$[ebx]
	shl	eax, 4
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _g_sao_edge_offsets[eax+edx]
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+edx+4]
	mov	DWORD PTR _a_ofs$[ebp], ecx
	mov	DWORD PTR _a_ofs$[ebp+4], edx

; 296  :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];

	mov	eax, DWORD PTR _eo_class$[ebx]
	shl	eax, 4
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+ecx]
	mov	eax, DWORD PTR _g_sao_edge_offsets[eax+ecx+4]
	mov	DWORD PTR _b_ofs$[ebp], edx
	mov	DWORD PTR _b_ofs$[ebp+4], eax

; 297  : 
; 298  :    int32_t scan_width = block_width -   2;

	mov	eax, DWORD PTR _block_width$[ebx]
	sub	eax, 2
	mov	DWORD PTR _scan_width$[ebp], eax

; 299  :   uint32_t width_db32 = scan_width  & ~31;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR _width_db32$[ebp], eax

; 300  :   uint32_t width_db4  = scan_width  &  ~3;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _width_db4$[ebp], eax

; 301  :   uint32_t width_rest = scan_width  &   3;

	mov	eax, DWORD PTR _scan_width$[ebp]
	and	eax, 3
	mov	DWORD PTR _width_rest$[ebp], eax

; 302  : 
; 303  :   // Form the load&store mask
; 304  :   const __m256i wdb4_256      = _mm256_set1_epi32 (width_db4 & 31);

	mov	eax, DWORD PTR _width_db4$[ebp]
	and	eax, 31					; 0000001fH
	vmovd	xmm0, eax
	vpbroadcastd ymm0, xmm0
	vmovdqu	YMMWORD PTR _wdb4_256$[ebp], ymm0

; 305  :   const __m256i indexes       = _mm256_setr_epi32 (3, 7, 11, 15, 19, 23, 27, 31);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000001f0000001b00000017000000130000000f0000000b0000000700000003
	vmovdqu	YMMWORD PTR _indexes$[ebp], ymm0

; 306  :   const __m256i db4_mask      = _mm256_cmpgt_epi32(wdb4_256, indexes);

	vmovdqu	ymm0, YMMWORD PTR _wdb4_256$[ebp]
	vpcmpgtd ymm0, ymm0, YMMWORD PTR _indexes$[ebp]
	vmovdqu	YMMWORD PTR _db4_mask$[ebp], ymm0

; 307  : 
; 308  :   const __m256i zero          = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 309  : 
; 310  :   __m128i offsets03 = _mm_loadu_si128((const __m128i *)offsets);

	mov	eax, DWORD PTR _offsets$[ebx]
	vmovdqu	xmm0, XMMWORD PTR [eax]
	vmovdqa	XMMWORD PTR _offsets03$[ebp], xmm0

; 311  :   __m128i offsets4  = _mm_cvtsi32_si128(offsets[4]);

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _offsets$[ebx]
	vmovd	xmm0, DWORD PTR [ecx+eax]
	vmovdqa	XMMWORD PTR _offsets4$[ebp], xmm0

; 312  : 
; 313  :   uint16_t offsets_ok = epi32v_fits_in_epi8s(offsets03) &

	vmovdqa	xmm0, XMMWORD PTR _offsets03$[ebp]
	call	_epi32v_fits_in_epi8s
	movzx	esi, ax
	vmovdqa	xmm0, XMMWORD PTR _offsets4$[ebp]
	call	_epi32v_fits_in_epi8s
	movzx	eax, ax
	and	esi, eax
	mov	WORD PTR _offsets_ok$[ebp], si

; 314  :                         epi32v_fits_in_epi8s(offsets4);
; 315  : 
; 316  :   assert(NUM_SAO_EDGE_CATEGORIES == 5);
; 317  : 
; 318  :   if (offsets_ok != 0xffff) {

	movzx	eax, WORD PTR _offsets_ok$[ebp]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN8@sao_edge_d

; 319  :     return sao_edge_ddistortion_generic(orig_data,

	mov	eax, DWORD PTR _offsets$[ebx]
	push	eax
	mov	ecx, DWORD PTR _eo_class$[ebx]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebx]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rec_data$[ebx]
	push	ecx
	mov	edx, DWORD PTR _orig_data$[ebx]
	push	edx
	call	_sao_edge_ddistortion_generic
	add	esp, 24					; 00000018H
	jmp	$LN1@sao_edge_d
$LN8@sao_edge_d:

; 320  :                                         rec_data,
; 321  :                                         block_width,
; 322  :                                         block_height,
; 323  :                                         eo_class,
; 324  :                                         offsets);
; 325  :   }
; 326  : 
; 327  :   __m128i offsets03_8b = truncate_epi32_epi8(offsets03);

	vmovdqa	xmm0, XMMWORD PTR _offsets03$[ebp]
	call	_truncate_epi32_epi8
	vmovdqa	XMMWORD PTR _offsets03_8b$[ebp], xmm0

; 328  :   __m128i offsets4_8b  = truncate_epi32_epi8(offsets4);

	vmovdqa	xmm0, XMMWORD PTR _offsets4$[ebp]
	call	_truncate_epi32_epi8
	vmovdqa	XMMWORD PTR _offsets4_8b$[ebp], xmm0

; 329  :   __m128i offsets_8b   = _mm_unpacklo_epi32 (offsets03_8b, offsets4_8b);

	vmovdqa	xmm0, XMMWORD PTR _offsets03_8b$[ebp]
	vpunpckldq xmm0, xmm0, XMMWORD PTR _offsets4_8b$[ebp]
	vmovdqa	XMMWORD PTR _offsets_8b$[ebp], xmm0

; 330  :   __m256i offsets_256  = broadcast_xmm2ymm  (offsets_8b);

	vmovdqa	xmm0, XMMWORD PTR _offsets_8b$[ebp]
	call	_broadcast_xmm2ymm
	vmovdqu	YMMWORD PTR _offsets_256$[ebp], ymm0

; 331  : 
; 332  :   __m256i sum = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _sum$[ebp], ymm0

; 333  :   for (y = 1; y < block_height - 1; y++) {

	mov	DWORD PTR _y$[ebp], 1
	jmp	SHORT $LN4@sao_edge_d
$LN2@sao_edge_d:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@sao_edge_d:
	mov	eax, DWORD PTR _block_height$[ebx]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN3@sao_edge_d

; 334  :     for (x = 1; x < width_db32 + 1; x += 32) {

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN7@sao_edge_d
$LN5@sao_edge_d:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _x$[ebp], eax
$LN7@sao_edge_d:
	mov	eax, DWORD PTR _width_db32$[ebp]
	add	eax, 1
	cmp	DWORD PTR _x$[ebp], eax
	jae	$LN6@sao_edge_d

; 335  :       uint32_t c_pos =  y            * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _c_pos$28[ebp], eax

; 336  :       uint32_t a_pos = (y + a_ofs.y) * block_width + x + a_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _a_pos$27[ebp], eax

; 337  :       uint32_t b_pos = (y + b_ofs.y) * block_width + x + b_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _b_pos$26[ebp], eax

; 338  : 
; 339  :       __m256i a      = _mm256_loadu_si256((const __m256i *)(rec_data  + a_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _a_pos$27[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$25[ebp], ymm0

; 340  :       __m256i b      = _mm256_loadu_si256((const __m256i *)(rec_data  + b_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _b_pos$26[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$24[ebp], ymm0

; 341  :       __m256i c      = _mm256_loadu_si256((const __m256i *)(rec_data  + c_pos));

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _c_pos$28[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$23[ebp], ymm0

; 342  :       __m256i orig   = _mm256_loadu_si256((const __m256i *)(orig_data + c_pos));

	mov	eax, DWORD PTR _orig_data$[ebx]
	add	eax, DWORD PTR _c_pos$28[ebp]
	vmovdqu	ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _orig$22[ebp], ymm0

; 343  : 
; 344  :       __m256i curr   = do_one_edge_ymm(a, b, c, orig, zero, offsets_256);

	vmovdqu	ymm5, YMMWORD PTR _offsets_256$[ebp]
	vmovdqu	ymm4, YMMWORD PTR _zero$[ebp]
	vmovdqu	ymm3, YMMWORD PTR _orig$22[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$23[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$24[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$25[ebp]
	call	do_one_edge_ymm@@192
	vmovdqu	YMMWORD PTR _curr$21[ebp], ymm0

; 345  :               sum    = _mm256_add_epi32(sum, curr);

	vmovdqu	ymm0, YMMWORD PTR _sum$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _curr$21[ebp]
	vmovdqu	YMMWORD PTR _sum$[ebp], ymm0

; 346  :     }

	jmp	$LN5@sao_edge_d
$LN6@sao_edge_d:

; 347  :     if (scan_width > width_db32) {

	mov	eax, DWORD PTR _scan_width$[ebp]
	cmp	eax, DWORD PTR _width_db32$[ebp]
	jbe	$LN9@sao_edge_d

; 348  :       const uint32_t curr_cpos   =  y            * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _curr_cpos$20[ebp], eax

; 349  :       const uint32_t rest_cpos   =  y            * block_width + width_db4 + 1;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebx]
	mov	ecx, DWORD PTR _width_db4$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_cpos$19[ebp], edx

; 350  : 
; 351  :       const  int32_t curr_apos   = (y + a_ofs.y) * block_width + x + a_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _curr_apos$18[ebp], eax

; 352  :       const  int32_t rest_apos   = (y + a_ofs.y) * block_width + width_db4 + a_ofs.x + 1;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	ecx, DWORD PTR _a_ofs$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_apos$17[ebp], edx

; 353  : 
; 354  :       const  int32_t curr_bpos   = (y + b_ofs.y) * block_width + x + b_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _curr_bpos$16[ebp], eax

; 355  :       const  int32_t rest_bpos   = (y + b_ofs.y) * block_width + width_db4 + b_ofs.x + 1;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebx]
	add	eax, DWORD PTR _width_db4$[ebp]
	mov	ecx, DWORD PTR _b_ofs$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _rest_bpos$15[ebp], edx

; 356  : 
; 357  :       // Same trick to read a narrow line as there is in the band SAO routine
; 358  :       uint32_t a_last         = load_border_bytes(rec_data,  rest_apos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_apos$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a_last$14[ebp], eax

; 359  :       uint32_t b_last         = load_border_bytes(rec_data,  rest_bpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_bpos$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b_last$13[ebp], eax

; 360  :       uint32_t c_last         = load_border_bytes(rec_data,  rest_cpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_cpos$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _c_last$12[ebp], eax

; 361  :       uint32_t orig_last      = load_border_bytes(orig_data, rest_cpos, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rest_cpos$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_data$[ebx]
	push	edx
	call	_load_border_bytes
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _orig_last$11[ebp], eax

; 362  : 
; 363  :       const int32_t *a_ptr    = (const int32_t *)(rec_data  + curr_apos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_apos$18[ebp]
	mov	DWORD PTR _a_ptr$10[ebp], eax

; 364  :       const int32_t *b_ptr    = (const int32_t *)(rec_data  + curr_bpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_bpos$16[ebp]
	mov	DWORD PTR _b_ptr$9[ebp], eax

; 365  :       const int32_t *c_ptr    = (const int32_t *)(rec_data  + curr_cpos);

	mov	eax, DWORD PTR _rec_data$[ebx]
	add	eax, DWORD PTR _curr_cpos$20[ebp]
	mov	DWORD PTR _c_ptr$8[ebp], eax

; 366  :       const int32_t *orig_ptr = (const int32_t *)(orig_data + curr_cpos);

	mov	eax, DWORD PTR _orig_data$[ebx]
	add	eax, DWORD PTR _curr_cpos$20[ebp]
	mov	DWORD PTR _orig_ptr$7[ebp], eax

; 367  : 
; 368  :       __m256i a    = _mm256_maskload_epi32(a_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _a_ptr$10[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _a$6[ebp], ymm0

; 369  :       __m256i b    = _mm256_maskload_epi32(b_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _b_ptr$9[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _b$5[ebp], ymm0

; 370  :       __m256i c    = _mm256_maskload_epi32(c_ptr,    db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _c_ptr$8[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _c$4[ebp], ymm0

; 371  :       __m256i orig = _mm256_maskload_epi32(orig_ptr, db4_mask);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	mov	eax, DWORD PTR _orig_ptr$7[ebp]
	vpmaskmovd ymm0, ymm0, YMMWORD PTR [eax]
	vmovdqu	YMMWORD PTR _orig$3[ebp], ymm0

; 372  : 
; 373  :               a    = _mm256_insert_epi32  (a,        a_last,    7);

	vmovd	xmm0, DWORD PTR _a_last$14[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _a$6[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _a$6[ebp], ymm0

; 374  :               b    = _mm256_insert_epi32  (b,        b_last,    7);

	vmovd	xmm0, DWORD PTR _b_last$13[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _b$5[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _b$5[ebp], ymm0

; 375  :               c    = _mm256_insert_epi32  (c,        c_last,    7);

	vmovd	xmm0, DWORD PTR _c_last$12[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _c$4[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _c$4[ebp], ymm0

; 376  :               orig = _mm256_insert_epi32  (orig,     orig_last, 7);

	vmovd	xmm0, DWORD PTR _orig_last$11[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _orig$3[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H
	vmovdqu	YMMWORD PTR _orig$3[ebp], ymm0

; 377  : 
; 378  :       // Mask all unused bytes to 0xFF, so they won't count anywhere
; 379  :       __m256i badbyte_mask = gen_badbyte_mask(db4_mask, width_rest);

	mov	eax, DWORD PTR _width_rest$[ebp]
	push	eax
	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	call	_gen_badbyte_mask
	add	esp, 4
	vmovdqu	YMMWORD PTR _badbyte_mask$2[ebp], ymm0

; 380  : 
; 381  :       __m256i curr  = do_one_edge_ymm(a, b, c, orig, badbyte_mask, offsets_256);

	vmovdqu	ymm5, YMMWORD PTR _offsets_256$[ebp]
	vmovdqu	ymm4, YMMWORD PTR _badbyte_mask$2[ebp]
	vmovdqu	ymm3, YMMWORD PTR _orig$3[ebp]
	vmovdqu	ymm2, YMMWORD PTR _c$4[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$5[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$6[ebp]
	call	do_one_edge_ymm@@192
	vmovdqu	YMMWORD PTR _curr$1[ebp], ymm0

; 382  :               sum   = _mm256_add_epi32(sum, curr);

	vmovdqu	ymm0, YMMWORD PTR _sum$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _curr$1[ebp]
	vmovdqu	YMMWORD PTR _sum$[ebp], ymm0
$LN9@sao_edge_d:

; 383  :     }
; 384  :   }

	jmp	$LN2@sao_edge_d
$LN3@sao_edge_d:

; 385  :   return hsum_8x32b(sum);

	vmovdqu	ymm0, YMMWORD PTR _sum$[ebp]
	call	hsum_8x32b@@32
$LN1@sao_edge_d:

; 386  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@sao_edge_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN14@sao_edge_d:
	DD	2
	DD	$LN13@sao_edge_d
$LN13@sao_edge_d:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN11@sao_edge_d
	DD	-52					; ffffffccH
	DD	8
	DD	$LN12@sao_edge_d
$LN12@sao_edge_d:
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN11@sao_edge_d:
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
_sao_edge_ddistortion_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT do_one_edge_ymm@@192
_TEXT	SEGMENT
_diff_hi$ = -768					; size = 32
_diff_lo$ = -704					; size = 32
_offset_hi$ = -640					; size = 32
_offset_lo$ = -576					; size = 32
_offset$ = -512						; size = 32
_eo_cat$ = -448						; size = 32
_offsets_256$ = -384					; size = 32
_badbyte_mask$ = -320					; size = 32
_orig$ = -256						; size = 32
_c$ = -192						; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
do_one_edge_ymm@@192 PROC				; COMDAT
; _a$ = ymm0
; _b$ = ymm1
; _c$ = ymm2
; _orig$ = ymm3
; _badbyte_mask$ = ymm4
; _offsets_256$ = ymm5

; 273  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1176				; 00000498H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1176]
	mov	ecx, 294				; 00000126H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	vmovups	YMMWORD PTR _offsets_256$[ebp], ymm5
	vmovups	YMMWORD PTR _badbyte_mask$[ebp], ymm4
	vmovups	YMMWORD PTR _orig$[ebp], ymm3
	vmovups	YMMWORD PTR _c$[ebp], ymm2
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 274  :   __m256i eo_cat = calc_eo_cat(a, b, c);

	vmovdqu	ymm2, YMMWORD PTR _c$[ebp]
	vmovdqu	ymm1, YMMWORD PTR _b$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	call	calc_eo_cat@@96
	vmovdqu	YMMWORD PTR _eo_cat$[ebp], ymm0

; 275  :           eo_cat = _mm256_or_si256    (eo_cat,      badbyte_mask);

	vmovdqu	ymm0, YMMWORD PTR _eo_cat$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _badbyte_mask$[ebp]
	vmovdqu	YMMWORD PTR _eo_cat$[ebp], ymm0

; 276  :   __m256i offset = _mm256_shuffle_epi8(offsets_256, eo_cat);

	vmovdqu	ymm0, YMMWORD PTR _offsets_256$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _eo_cat$[ebp]
	vmovdqu	YMMWORD PTR _offset$[ebp], ymm0

; 277  : 
; 278  :   __m256i offset_lo, offset_hi;
; 279  :   cvt_epi8_epi16(offset, &offset_lo, &offset_hi);

	lea	eax, DWORD PTR _offset_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offset_lo$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _offset$[ebp]
	call	_cvt_epi8_epi16
	add	esp, 8

; 280  : 
; 281  :   __m256i diff_lo, diff_hi;
; 282  :   diff_epi8_epi16(orig, c, &diff_lo, &diff_hi);

	lea	eax, DWORD PTR _diff_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _diff_lo$[ebp]
	push	ecx
	vmovdqu	ymm1, YMMWORD PTR _c$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _orig$[ebp]
	call	_diff_epi8_epi16
	add	esp, 8

; 283  : 
; 284  :   return calc_diff_off_delta(diff_lo, diff_hi, offset, orig);

	vmovdqu	ymm3, YMMWORD PTR _orig$[ebp]
	vmovdqu	ymm2, YMMWORD PTR _offset$[ebp]
	vmovdqu	ymm1, YMMWORD PTR _diff_hi$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _diff_lo$[ebp]
	call	calc_diff_off_delta@@128

; 285  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@do_one_edg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN8@do_one_edg:
	DD	4
	DD	$LN7@do_one_edg
$LN7@do_one_edg:
	DD	-576					; fffffdc0H
	DD	32					; 00000020H
	DD	$LN3@do_one_edg
	DD	-640					; fffffd80H
	DD	32					; 00000020H
	DD	$LN4@do_one_edg
	DD	-704					; fffffd40H
	DD	32					; 00000020H
	DD	$LN5@do_one_edg
	DD	-768					; fffffd00H
	DD	32					; 00000020H
	DD	$LN6@do_one_edg
$LN6@do_one_edg:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN5@do_one_edg:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN4@do_one_edg:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN3@do_one_edg:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
do_one_edge_ymm@@192 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT calc_diff_off_delta@@128
_TEXT	SEGMENT
_sum1$ = -2048						; size = 32
_sum0$ = -1984						; size = 32
_sum1_hi$ = -1920					; size = 32
_sum1_lo$ = -1856					; size = 32
_sum0_hi$ = -1792					; size = 32
_sum0_lo$ = -1728					; size = 32
_dd1_hi_n$ = -1664					; size = 32
_dd1_lo_n$ = -1600					; size = 32
_dd0_hi_n$ = -1536					; size = 32
_dd0_lo_n$ = -1472					; size = 32
_dd1_hi$ = -1408					; size = 32
_dd1_lo$ = -1344					; size = 32
_dd0_hi$ = -1280					; size = 32
_dd0_lo$ = -1216					; size = 32
_delta_hi_m$ = -1152					; size = 32
_delta_lo_m$ = -1088					; size = 32
_diff_hi_m$ = -1024					; size = 32
_diff_lo_m$ = -960					; size = 32
_delta_hi$ = -896					; size = 32
_delta_lo$ = -832					; size = 32
_offsets_0_hi$ = -768					; size = 32
_offsets_0_lo$ = -704					; size = 32
_offsets_hi$ = -640					; size = 32
_offsets_lo$ = -576					; size = 32
_orig_hi$ = -512					; size = 32
_orig_lo$ = -448					; size = 32
_negate_hiword$ = -384					; size = 32
_zero$ = -320						; size = 32
_orig$ = -256						; size = 32
_offsets$ = -192					; size = 32
_diff_hi$ = -128					; size = 32
_diff_lo$ = -64						; size = 32
calc_diff_off_delta@@128 PROC				; COMDAT
; _diff_lo$ = ymm0
; _diff_hi$ = ymm1
; _offsets$ = ymm2
; _orig$ = ymm3

; 227  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 3032				; 00000bd8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-3032]
	mov	ecx, 758				; 000002f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	vmovups	YMMWORD PTR _orig$[ebp], ymm3
	vmovups	YMMWORD PTR _offsets$[ebp], ymm2
	vmovups	YMMWORD PTR _diff_hi$[ebp], ymm1
	vmovups	YMMWORD PTR _diff_lo$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 228  :   const __m256i zero          = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 229  :   const __m256i negate_hiword = _mm256_set1_epi32(0xffff0001);

	vmovdqu	ymm0, YMMWORD PTR __ymm@ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001ffff0001
	vmovdqu	YMMWORD PTR _negate_hiword$[ebp], ymm0

; 230  : 
; 231  :   __m256i orig_lo, orig_hi, offsets_lo, offsets_hi;
; 232  : 
; 233  :   cvt_epu8_epi16(orig,    &orig_lo,    &orig_hi);

	lea	eax, DWORD PTR _orig_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _orig_lo$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _orig$[ebp]
	call	_cvt_epu8_epi16
	add	esp, 8

; 234  :   cvt_epi8_epi16(offsets, &offsets_lo, &offsets_hi);

	lea	eax, DWORD PTR _offsets_hi$[ebp]
	push	eax
	lea	ecx, DWORD PTR _offsets_lo$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _offsets$[ebp]
	call	_cvt_epi8_epi16
	add	esp, 8

; 235  : 
; 236  :   __m256i offsets_0_lo = _mm256_cmpeq_epi16   (offsets_lo,   zero);

	vmovdqu	ymm0, YMMWORD PTR _offsets_lo$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _offsets_0_lo$[ebp], ymm0

; 237  :   __m256i offsets_0_hi = _mm256_cmpeq_epi16   (offsets_hi,   zero);

	vmovdqu	ymm0, YMMWORD PTR _offsets_hi$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _offsets_0_hi$[ebp], ymm0

; 238  : 
; 239  :   __m256i delta_lo     = _mm256_sub_epi16     (diff_lo,      offsets_lo);

	vmovdqu	ymm0, YMMWORD PTR _diff_lo$[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _offsets_lo$[ebp]
	vmovdqu	YMMWORD PTR _delta_lo$[ebp], ymm0

; 240  :   __m256i delta_hi     = _mm256_sub_epi16     (diff_hi,      offsets_hi);

	vmovdqu	ymm0, YMMWORD PTR _diff_hi$[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _offsets_hi$[ebp]
	vmovdqu	YMMWORD PTR _delta_hi$[ebp], ymm0

; 241  : 
; 242  :   __m256i diff_lo_m    = _mm256_andnot_si256  (offsets_0_lo, diff_lo);

	vmovdqu	ymm0, YMMWORD PTR _offsets_0_lo$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _diff_lo$[ebp]
	vmovdqu	YMMWORD PTR _diff_lo_m$[ebp], ymm0

; 243  :   __m256i diff_hi_m    = _mm256_andnot_si256  (offsets_0_hi, diff_hi);

	vmovdqu	ymm0, YMMWORD PTR _offsets_0_hi$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _diff_hi$[ebp]
	vmovdqu	YMMWORD PTR _diff_hi_m$[ebp], ymm0

; 244  :   __m256i delta_lo_m   = _mm256_andnot_si256  (offsets_0_lo, delta_lo);

	vmovdqu	ymm0, YMMWORD PTR _offsets_0_lo$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _delta_lo$[ebp]
	vmovdqu	YMMWORD PTR _delta_lo_m$[ebp], ymm0

; 245  :   __m256i delta_hi_m   = _mm256_andnot_si256  (offsets_0_hi, delta_hi);

	vmovdqu	ymm0, YMMWORD PTR _offsets_0_hi$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _delta_hi$[ebp]
	vmovdqu	YMMWORD PTR _delta_hi_m$[ebp], ymm0

; 246  : 
; 247  :   __m256i dd0_lo       = _mm256_unpacklo_epi16(delta_lo_m,   diff_lo_m);

	vmovdqu	ymm0, YMMWORD PTR _delta_lo_m$[ebp]
	vpunpcklwd ymm0, ymm0, YMMWORD PTR _diff_lo_m$[ebp]
	vmovdqu	YMMWORD PTR _dd0_lo$[ebp], ymm0

; 248  :   __m256i dd0_hi       = _mm256_unpackhi_epi16(delta_lo_m,   diff_lo_m);

	vmovdqu	ymm0, YMMWORD PTR _delta_lo_m$[ebp]
	vpunpckhwd ymm0, ymm0, YMMWORD PTR _diff_lo_m$[ebp]
	vmovdqu	YMMWORD PTR _dd0_hi$[ebp], ymm0

; 249  :   __m256i dd1_lo       = _mm256_unpacklo_epi16(delta_hi_m,   diff_hi_m);

	vmovdqu	ymm0, YMMWORD PTR _delta_hi_m$[ebp]
	vpunpcklwd ymm0, ymm0, YMMWORD PTR _diff_hi_m$[ebp]
	vmovdqu	YMMWORD PTR _dd1_lo$[ebp], ymm0

; 250  :   __m256i dd1_hi       = _mm256_unpackhi_epi16(delta_hi_m,   diff_hi_m);

	vmovdqu	ymm0, YMMWORD PTR _delta_hi_m$[ebp]
	vpunpckhwd ymm0, ymm0, YMMWORD PTR _diff_hi_m$[ebp]
	vmovdqu	YMMWORD PTR _dd1_hi$[ebp], ymm0

; 251  : 
; 252  :   __m256i dd0_lo_n     = _mm256_sign_epi16    (dd0_lo,       negate_hiword);

	vmovdqu	ymm0, YMMWORD PTR _dd0_lo$[ebp]
	vpsignw	ymm0, ymm0, YMMWORD PTR _negate_hiword$[ebp]
	vmovdqu	YMMWORD PTR _dd0_lo_n$[ebp], ymm0

; 253  :   __m256i dd0_hi_n     = _mm256_sign_epi16    (dd0_hi,       negate_hiword);

	vmovdqu	ymm0, YMMWORD PTR _dd0_hi$[ebp]
	vpsignw	ymm0, ymm0, YMMWORD PTR _negate_hiword$[ebp]
	vmovdqu	YMMWORD PTR _dd0_hi_n$[ebp], ymm0

; 254  :   __m256i dd1_lo_n     = _mm256_sign_epi16    (dd1_lo,       negate_hiword);

	vmovdqu	ymm0, YMMWORD PTR _dd1_lo$[ebp]
	vpsignw	ymm0, ymm0, YMMWORD PTR _negate_hiword$[ebp]
	vmovdqu	YMMWORD PTR _dd1_lo_n$[ebp], ymm0

; 255  :   __m256i dd1_hi_n     = _mm256_sign_epi16    (dd1_hi,       negate_hiword);

	vmovdqu	ymm0, YMMWORD PTR _dd1_hi$[ebp]
	vpsignw	ymm0, ymm0, YMMWORD PTR _negate_hiword$[ebp]
	vmovdqu	YMMWORD PTR _dd1_hi_n$[ebp], ymm0

; 256  : 
; 257  :   __m256i sum0_lo      = _mm256_madd_epi16    (dd0_lo,       dd0_lo_n);

	vmovdqu	ymm0, YMMWORD PTR _dd0_lo$[ebp]
	vpmaddwd ymm0, ymm0, YMMWORD PTR _dd0_lo_n$[ebp]
	vmovdqu	YMMWORD PTR _sum0_lo$[ebp], ymm0

; 258  :   __m256i sum0_hi      = _mm256_madd_epi16    (dd0_hi,       dd0_hi_n);

	vmovdqu	ymm0, YMMWORD PTR _dd0_hi$[ebp]
	vpmaddwd ymm0, ymm0, YMMWORD PTR _dd0_hi_n$[ebp]
	vmovdqu	YMMWORD PTR _sum0_hi$[ebp], ymm0

; 259  :   __m256i sum1_lo      = _mm256_madd_epi16    (dd1_lo,       dd1_lo_n);

	vmovdqu	ymm0, YMMWORD PTR _dd1_lo$[ebp]
	vpmaddwd ymm0, ymm0, YMMWORD PTR _dd1_lo_n$[ebp]
	vmovdqu	YMMWORD PTR _sum1_lo$[ebp], ymm0

; 260  :   __m256i sum1_hi      = _mm256_madd_epi16    (dd1_hi,       dd1_hi_n);

	vmovdqu	ymm0, YMMWORD PTR _dd1_hi$[ebp]
	vpmaddwd ymm0, ymm0, YMMWORD PTR _dd1_hi_n$[ebp]
	vmovdqu	YMMWORD PTR _sum1_hi$[ebp], ymm0

; 261  : 
; 262  :   __m256i sum0         = _mm256_add_epi32     (sum0_lo,      sum0_hi);

	vmovdqu	ymm0, YMMWORD PTR _sum0_lo$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum0_hi$[ebp]
	vmovdqu	YMMWORD PTR _sum0$[ebp], ymm0

; 263  :   __m256i sum1         = _mm256_add_epi32     (sum1_lo,      sum1_hi);

	vmovdqu	ymm0, YMMWORD PTR _sum1_lo$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum1_hi$[ebp]
	vmovdqu	YMMWORD PTR _sum1$[ebp], ymm0

; 264  :   return                 _mm256_add_epi32     (sum0,         sum1);

	vmovdqu	ymm0, YMMWORD PTR _sum0$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum1$[ebp]

; 265  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@calc_diff_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@calc_diff_:
	DD	4
	DD	$LN7@calc_diff_
$LN7@calc_diff_:
	DD	-448					; fffffe40H
	DD	32					; 00000020H
	DD	$LN3@calc_diff_
	DD	-512					; fffffe00H
	DD	32					; 00000020H
	DD	$LN4@calc_diff_
	DD	-576					; fffffdc0H
	DD	32					; 00000020H
	DD	$LN5@calc_diff_
	DD	-640					; fffffd80H
	DD	32					; 00000020H
	DD	$LN6@calc_diff_
$LN6@calc_diff_:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN5@calc_diff_:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN4@calc_diff_:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN3@calc_diff_:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
calc_diff_off_delta@@128 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _broadcast_xmm2ymm
_TEXT	SEGMENT
_res$ = -96						; size = 32
_v$ = -32						; size = 16
_broadcast_xmm2ymm PROC					; COMDAT
; _v$ = xmm0

; 217  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovdqa	XMMWORD PTR _v$[ebp], xmm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 218  :   __m256i res = _mm256_castsi128_si256 (v);

	vmovdqu	xmm0, XMMWORD PTR _v$[ebp]
	vmovdqu	YMMWORD PTR _res$[ebp], ymm0

; 219  :   return        _mm256_inserti128_si256(res, v, 1);

	vmovdqu	ymm0, YMMWORD PTR _res$[ebp]
	vinserti128 ymm0, ymm0, XMMWORD PTR _v$[ebp], 1

; 220  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_broadcast_xmm2ymm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _gen_badbyte_mask
_TEXT	SEGMENT
_badbyte_mask$ = -192					; size = 32
_last_badbytes$ = -140					; size = 4
_zero$ = -128						; size = 32
_db4_mask$ = -64					; size = 32
_width_rest$ = 8					; size = 4
_gen_badbyte_mask PROC					; COMDAT
; _db4_mask$ = ymm0

; 206  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _db4_mask$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 207  :   const __m256i zero    = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 208  : 
; 209  :   uint32_t last_badbytes = 0xffffffff << (width_rest << 3);

	mov	eax, DWORD PTR _width_rest$[ebx]
	shl	eax, 3
	or	ecx, -1
	shlx	edx, ecx, eax
	mov	DWORD PTR _last_badbytes$[ebp], edx

; 210  :   __m256i  badbyte_mask  = _mm256_cmpeq_epi8  (db4_mask,     zero);

	vmovdqu	ymm0, YMMWORD PTR _db4_mask$[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _badbyte_mask$[ebp], ymm0

; 211  :   return                   _mm256_insert_epi32(badbyte_mask, last_badbytes, 7);

	vmovd	xmm0, DWORD PTR _last_badbytes$[ebp]
	vpbroadcastd ymm0, xmm0
	vmovdqu	ymm1, YMMWORD PTR _badbyte_mask$[ebp]
	vpblendd ymm0, ymm1, ymm0, 128			; 00000080H

; 212  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_gen_badbyte_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _store_border_bytes
_TEXT	SEGMENT
_currb$1 = -17						; size = 1
_i$2 = -8						; size = 4
_buf$ = 8						; size = 4
_start_pos$ = 12					; size = 4
_width_rest$ = 16					; size = 4
_data$ = 20						; size = 4
_store_border_bytes PROC				; COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 195  :   for (uint32_t i = 0; i < width_rest; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@store_bord
$LN2@store_bord:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@store_bord:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _width_rest$[ebp]
	jae	SHORT $LN1@store_bord

; 196  :     uint8_t currb = data & 0xff;

	mov	eax, DWORD PTR _data$[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _currb$1[ebp], al

; 197  :     buf[start_pos + i] = currb;

	mov	eax, DWORD PTR _start_pos$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR _currb$1[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 198  :     data >>= 8;

	mov	eax, DWORD PTR _data$[ebp]
	shr	eax, 8
	mov	DWORD PTR _data$[ebp], eax

; 199  :   }

	jmp	SHORT $LN2@store_bord
$LN1@store_bord:

; 200  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_store_border_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _load_border_bytes
_TEXT	SEGMENT
_currd$1 = -44						; size = 4
_currb$2 = -29						; size = 1
_i$3 = -20						; size = 4
_last_dword$ = -8					; size = 4
_buf$ = 8						; size = 4
_start_pos$ = 12					; size = 4
_width_rest$ = 16					; size = 4
_load_border_bytes PROC					; COMDAT

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 181  :   uint32_t last_dword = 0;

	mov	DWORD PTR _last_dword$[ebp], 0

; 182  :   for (int32_t i = 0; i < width_rest; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@load_borde
$LN2@load_borde:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@load_borde:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _width_rest$[ebp]
	jge	SHORT $LN3@load_borde

; 183  :     uint8_t  currb = buf[start_pos + i];

	mov	eax, DWORD PTR _start_pos$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _currb$2[ebp], dl

; 184  :     uint32_t currd = ((uint32_t)currb) << (i * 8);

	movzx	eax, BYTE PTR _currb$2[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	shl	ecx, 3
	shlx	edx, eax, ecx
	mov	DWORD PTR _currd$1[ebp], edx

; 185  :     last_dword |= currd;

	mov	eax, DWORD PTR _last_dword$[ebp]
	or	eax, DWORD PTR _currd$1[ebp]
	mov	DWORD PTR _last_dword$[ebp], eax

; 186  :   }

	jmp	SHORT $LN2@load_borde
$LN3@load_borde:

; 187  :   return last_dword;

	mov	eax, DWORD PTR _last_dword$[ebp]

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_load_border_bytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _truncate_epi32_epi8
_TEXT	SEGMENT
_sbs_8$ = -96						; size = 16
_trunc_shufmask$ = -64					; size = 16
_v$ = -32						; size = 16
_truncate_epi32_epi8 PROC				; COMDAT
; _v$ = xmm0

; 168  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovdqa	XMMWORD PTR _v$[ebp], xmm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 169  :   // LSBs of each dword, the values values must fit in 8 bits anyway for
; 170  :   // what this intended for (use epi32v_fits_in_epi8s to check if needed)
; 171  :   const __m128i trunc_shufmask = _mm_set1_epi32  (0x0c080400);

	vmovdqa	xmm0, XMMWORD PTR __xmm@0c0804000c0804000c0804000c080400
	vmovdqa	XMMWORD PTR _trunc_shufmask$[ebp], xmm0

; 172  :         __m128i sbs_8          = _mm_shuffle_epi8(v, trunc_shufmask);

	vmovdqa	xmm0, XMMWORD PTR _v$[ebp]
	vpshufb	xmm0, xmm0, XMMWORD PTR _trunc_shufmask$[ebp]
	vmovdqa	XMMWORD PTR _sbs_8$[ebp], xmm0

; 173  :   return        sbs_8;

	vmovdqa	xmm0, XMMWORD PTR _sbs_8$[ebp]

; 174  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_truncate_epi32_epi8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _epi32v_fits_in_epi8s
_TEXT	SEGMENT
_ok_i32s$ = -128					; size = 16
_v_signs$ = -96						; size = 16
_v_ms25b$ = -64						; size = 16
_v$ = -32						; size = 16
_epi32v_fits_in_epi8s PROC				; COMDAT
; _v$ = xmm0

; 157  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovdqa	XMMWORD PTR _v$[ebp], xmm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 158  :   // Compare most significant 25 bits of SAO bands to the sign bit to assert
; 159  :   // that the i32's are between -128 and 127 (only comparing 24 would fail to
; 160  :   // detect values of 128...255)
; 161  :   __m128i  v_ms25b = _mm_srai_epi32   (v,  7);

	vmovdqa	xmm0, XMMWORD PTR _v$[ebp]
	vpsrad	xmm0, xmm0, 7
	vmovdqa	XMMWORD PTR _v_ms25b$[ebp], xmm0

; 162  :   __m128i  v_signs = _mm_srai_epi32   (v, 31);

	vmovdqa	xmm0, XMMWORD PTR _v$[ebp]
	vpsrad	xmm0, xmm0, 31				; 0000001fH
	vmovdqa	XMMWORD PTR _v_signs$[ebp], xmm0

; 163  :   __m128i  ok_i32s = _mm_cmpeq_epi32  (v_ms25b, v_signs);

	vmovdqa	xmm0, XMMWORD PTR _v_ms25b$[ebp]
	vpcmpeqd xmm0, xmm0, XMMWORD PTR _v_signs$[ebp]
	vmovdqa	XMMWORD PTR _ok_i32s$[ebp], xmm0

; 164  :   return             _mm_movemask_epi8(ok_i32s);

	vmovdqa	xmm0, XMMWORD PTR _ok_i32s$[ebp]
	vpmovmskb eax, xmm0

; 165  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_epi32v_fits_in_epi8s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _cvt_shufmask_epi8_epi16
_TEXT	SEGMENT
_v_hibytes$ = -384					; size = 32
_v_lobytes$ = -320					; size = 32
_v_nonnegs$ = -256					; size = 32
_ones$ = -192						; size = 32
_zero$ = -128						; size = 32
_v$ = -64						; size = 32
_res_lo$ = 8						; size = 4
_res_hi$ = 12						; size = 4
_cvt_shufmask_epi8_epi16 PROC				; COMDAT
; _v$ = ymm0

; 138  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _v$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 139  :   const __m256i zero = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 140  :   const __m256i ones = _mm256_set1_epi8(1);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0101010101010101010101010101010101010101010101010101010101010101
	vmovdqu	YMMWORD PTR _ones$[ebp], ymm0

; 141  : 
; 142  :   // There's no 8-bit shift, so highest bit could bleed into neighboring byte
; 143  :   // if set. To avoid it, reset all sign bits with max. The only valid input
; 144  :   // values for v are [0, 7] anyway and invalid places should be masked out by
; 145  :   // caller, so it doesn't matter that we turn negative bytes into garbage.
; 146  :   __m256i v_nonnegs  = _mm256_max_epi8  (zero,      v);

	vmovdqu	ymm0, YMMWORD PTR _zero$[ebp]
	vpmaxsb	ymm0, ymm0, YMMWORD PTR _v$[ebp]
	vmovdqu	YMMWORD PTR _v_nonnegs$[ebp], ymm0

; 147  :   __m256i v_lobytes  = _mm256_slli_epi32(v_nonnegs, 1);

	vmovdqu	ymm0, YMMWORD PTR _v_nonnegs$[ebp]
	vpslld	ymm0, ymm0, 1
	vmovdqu	YMMWORD PTR _v_lobytes$[ebp], ymm0

; 148  :   __m256i v_hibytes  = _mm256_add_epi8  (v_lobytes, ones);

	vmovdqu	ymm0, YMMWORD PTR _v_lobytes$[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _ones$[ebp]
	vmovdqu	YMMWORD PTR _v_hibytes$[ebp], ymm0

; 149  : 
; 150  :           *res_lo    = _mm256_unpacklo_epi8(v_lobytes, v_hibytes);

	vmovdqu	ymm0, YMMWORD PTR _v_lobytes$[ebp]
	vpunpcklbw ymm0, ymm0, YMMWORD PTR _v_hibytes$[ebp]
	mov	eax, DWORD PTR _res_lo$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 151  :           *res_hi    = _mm256_unpackhi_epi8(v_lobytes, v_hibytes);

	vmovdqu	ymm0, YMMWORD PTR _v_lobytes$[ebp]
	vpunpckhbw ymm0, ymm0, YMMWORD PTR _v_hibytes$[ebp]
	mov	eax, DWORD PTR _res_hi$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 152  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_cvt_shufmask_epi8_epi16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _diff_epi8_epi16
_TEXT	SEGMENT
_composite_hi$ = -320					; size = 32
_composite_lo$ = -256					; size = 32
_invmask$ = -192					; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
_res_lo$ = 8						; size = 4
_res_hi$ = 12						; size = 4
_diff_epi8_epi16 PROC					; COMDAT
; _a$ = ymm0
; _b$ = ymm1

; 122  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 123  :   const __m256i invmask = _mm256_set1_epi16(0xff01);

	vmovdqu	ymm0, YMMWORD PTR __ymm@ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01
	vmovdqu	YMMWORD PTR _invmask$[ebp], ymm0

; 124  : 
; 125  :   __m256i composite_lo  = _mm256_unpacklo_epi8(a, b);

	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	vpunpcklbw ymm0, ymm0, YMMWORD PTR _b$[ebp]
	vmovdqu	YMMWORD PTR _composite_lo$[ebp], ymm0

; 126  :   __m256i composite_hi  = _mm256_unpackhi_epi8(a, b);

	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	vpunpckhbw ymm0, ymm0, YMMWORD PTR _b$[ebp]
	vmovdqu	YMMWORD PTR _composite_hi$[ebp], ymm0

; 127  : 
; 128  :          *res_lo        = _mm256_maddubs_epi16(composite_lo, invmask);

	vmovdqu	ymm0, YMMWORD PTR _composite_lo$[ebp]
	vpmaddubsw ymm0, ymm0, YMMWORD PTR _invmask$[ebp]
	mov	eax, DWORD PTR _res_lo$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 129  :          *res_hi        = _mm256_maddubs_epi16(composite_hi, invmask);

	vmovdqu	ymm0, YMMWORD PTR _composite_hi$[ebp]
	vpmaddubsw ymm0, ymm0, YMMWORD PTR _invmask$[ebp]
	mov	eax, DWORD PTR _res_hi$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 130  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_diff_epi8_epi16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _cvt_epi8_epi16
_TEXT	SEGMENT
_signs$ = -192						; size = 32
_zero$ = -128						; size = 32
_v$ = -64						; size = 32
_res_lo$ = 8						; size = 4
_res_hi$ = 12						; size = 4
_cvt_epi8_epi16 PROC					; COMDAT
; _v$ = ymm0

; 111  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _v$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 112  :   const __m256i zero  = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 113  :         __m256i signs = _mm256_cmpgt_epi8   (zero, v);

	vmovdqu	ymm0, YMMWORD PTR _zero$[ebp]
	vpcmpgtb ymm0, ymm0, YMMWORD PTR _v$[ebp]
	vmovdqu	YMMWORD PTR _signs$[ebp], ymm0

; 114  :              *res_lo  = _mm256_unpacklo_epi8(v,    signs);

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vpunpcklbw ymm0, ymm0, YMMWORD PTR _signs$[ebp]
	mov	eax, DWORD PTR _res_lo$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 115  :              *res_hi  = _mm256_unpackhi_epi8(v,    signs);

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vpunpckhbw ymm0, ymm0, YMMWORD PTR _signs$[ebp]
	mov	eax, DWORD PTR _res_hi$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 116  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_cvt_epi8_epi16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _cvt_epu8_epi16
_TEXT	SEGMENT
_zero$ = -128						; size = 32
_v$ = -64						; size = 32
_res_lo$ = 8						; size = 4
_res_hi$ = 12						; size = 4
_cvt_epu8_epi16 PROC					; COMDAT
; _v$ = ymm0

; 102  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _v$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 103  :   const __m256i zero  = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 104  :              *res_lo  = _mm256_unpacklo_epi8(v, zero);

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vpunpcklbw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	mov	eax, DWORD PTR _res_lo$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 105  :              *res_hi  = _mm256_unpackhi_epi8(v, zero);

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vpunpckhbw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	mov	eax, DWORD PTR _res_hi$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 106  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_cvt_epu8_epi16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _srli_epi8
_TEXT	SEGMENT
_v_masked$ = -256					; size = 32
_v_shifted$ = -192					; size = 32
_hibit_mask_256$ = -128					; size = 32
_hibit_mask$ = -73					; size = 1
_v$ = -64						; size = 32
_shift$ = 8						; size = 4
_srli_epi8 PROC						; COMDAT
; _v$ = ymm0

; 89   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _v$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 90   :   const uint8_t hibit_mask     = 0xff >> shift;

	mov	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _shift$[ebx]
	sarx	edx, eax, ecx
	mov	BYTE PTR _hibit_mask$[ebp], dl

; 91   :   const __m256i hibit_mask_256 = _mm256_set1_epi8(hibit_mask);

	movsx	eax, BYTE PTR _hibit_mask$[ebp]
	vmovd	xmm0, eax
	vpbroadcastb ymm0, xmm0
	vmovdqu	YMMWORD PTR _hibit_mask_256$[ebp], ymm0

; 92   : 
; 93   :   __m256i v_shifted = _mm256_srli_epi32(v,         shift);

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vmovd	xmm1, DWORD PTR _shift$[ebx]
	vpsrld	ymm0, ymm0, xmm1
	vmovdqu	YMMWORD PTR _v_shifted$[ebp], ymm0

; 94   :   __m256i v_masked  = _mm256_and_si256 (v_shifted, hibit_mask_256);

	vmovdqu	ymm0, YMMWORD PTR _v_shifted$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _hibit_mask_256$[ebp]
	vmovdqu	YMMWORD PTR _v_masked$[ebp], ymm0

; 95   : 
; 96   :   return v_masked;

	vmovdqu	ymm0, YMMWORD PTR _v_masked$[ebp]

; 97   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_srli_epi8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT calc_eo_cat@@96
_TEXT	SEGMENT
_eo_idx$ = -576						; size = 32
_signsum$ = -512					; size = 32
_c_b_sign$ = -448					; size = 32
_c_a_sign$ = -384					; size = 32
_idx_to_cat$ = -320					; size = 32
_twos$ = -256						; size = 32
_c$ = -192						; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
calc_eo_cat@@96 PROC					; COMDAT
; _a$ = ymm0
; _b$ = ymm1
; _c$ = ymm2

; 73   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 984				; 000003d8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-984]
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	vmovups	YMMWORD PTR _c$[ebp], ymm2
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 74   :   const __m256i twos       = _mm256_set1_epi8  (0x02);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0202020202020202020202020202020202020202020202020202020202020202
	vmovdqu	YMMWORD PTR _twos$[ebp], ymm0

; 75   :   const __m256i idx_to_cat = _mm256_setr_epi64x(0x0403000201, 0,

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000000000000000000000040300020100000000000000000000000403000201
	vmovdqu	YMMWORD PTR _idx_to_cat$[ebp], ymm0

; 76   :                                                 0x0403000201, 0);
; 77   : 
; 78   :   __m256i c_a_sign         = sign3_diff_epu8    (c, a);

	vmovdqu	ymm1, YMMWORD PTR _a$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _c$[ebp]
	call	_sign3_diff_epu8
	vmovdqu	YMMWORD PTR _c_a_sign$[ebp], ymm0

; 79   :   __m256i c_b_sign         = sign3_diff_epu8    (c, b);

	vmovdqu	ymm1, YMMWORD PTR _b$[ebp]
	vmovdqu	ymm0, YMMWORD PTR _c$[ebp]
	call	_sign3_diff_epu8
	vmovdqu	YMMWORD PTR _c_b_sign$[ebp], ymm0

; 80   : 
; 81   :   __m256i signsum          = _mm256_add_epi8    (c_a_sign,   c_b_sign);

	vmovdqu	ymm0, YMMWORD PTR _c_a_sign$[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _c_b_sign$[ebp]
	vmovdqu	YMMWORD PTR _signsum$[ebp], ymm0

; 82   :   __m256i eo_idx           = _mm256_add_epi8    (signsum,    twos);

	vmovdqu	ymm0, YMMWORD PTR _signsum$[ebp]
	vpaddb	ymm0, ymm0, YMMWORD PTR _twos$[ebp]
	vmovdqu	YMMWORD PTR _eo_idx$[ebp], ymm0

; 83   : 
; 84   :   return                     _mm256_shuffle_epi8(idx_to_cat, eo_idx);

	vmovdqu	ymm0, YMMWORD PTR _idx_to_cat$[ebp]
	vpshufb	ymm0, ymm0, YMMWORD PTR _eo_idx$[ebp]

; 85   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
calc_eo_cat@@96 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _sign3_diff_epu8
_TEXT	SEGMENT
_diff$ = -448						; size = 32
_b_signed$ = -384					; size = 32
_a_signed$ = -320					; size = 32
_ones$ = -256						; size = 32
_epu2epi$ = -192					; size = 32
_b$ = -128						; size = 32
_a$ = -64						; size = 32
_sign3_diff_epu8 PROC					; COMDAT
; _a$ = ymm0
; _b$ = ymm1

; 57   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 664				; 00000298H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-664]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _b$[ebp], ymm1
	vmovups	YMMWORD PTR _a$[ebp], ymm0
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 58   :   // Subtract 0x80 from unsigneds to compare them as signed
; 59   :   const __m256i epu2epi = _mm256_set1_epi8  (0x80);

	vmovdqu	ymm0, YMMWORD PTR __ymm@8080808080808080808080808080808080808080808080808080808080808080
	vmovdqu	YMMWORD PTR _epu2epi$[ebp], ymm0

; 60   :   const __m256i ones    = _mm256_set1_epi8  (0x01);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0101010101010101010101010101010101010101010101010101010101010101
	vmovdqu	YMMWORD PTR _ones$[ebp], ymm0

; 61   : 
; 62   :   __m256i a_signed      = _mm256_sub_epi8   (a,        epu2epi);

	vmovdqu	ymm0, YMMWORD PTR _a$[ebp]
	vpsubb	ymm0, ymm0, YMMWORD PTR _epu2epi$[ebp]
	vmovdqu	YMMWORD PTR _a_signed$[ebp], ymm0

; 63   :   __m256i b_signed      = _mm256_sub_epi8   (b,        epu2epi);

	vmovdqu	ymm0, YMMWORD PTR _b$[ebp]
	vpsubb	ymm0, ymm0, YMMWORD PTR _epu2epi$[ebp]
	vmovdqu	YMMWORD PTR _b_signed$[ebp], ymm0

; 64   : 
; 65   :   __m256i diff          = _mm256_subs_epi8  (a_signed, b_signed);

	vmovdqu	ymm0, YMMWORD PTR _a_signed$[ebp]
	vpsubsb	ymm0, ymm0, YMMWORD PTR _b_signed$[ebp]
	vmovdqu	YMMWORD PTR _diff$[ebp], ymm0

; 66   :   return                  _mm256_sign_epi8  (ones,     diff);

	vmovdqu	ymm0, YMMWORD PTR _ones$[ebp]
	vpsignb	ymm0, ymm0, YMMWORD PTR _diff$[ebp]

; 67   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_sign3_diff_epu8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\avx2_common_functions.h
;	COMDAT hsum_8x32b@@32
_TEXT	SEGMENT
_sum9$ = -556						; size = 4
_sum8$ = -544						; size = 16
_sum7$ = -512						; size = 32
_sum6$ = -448						; size = 32
_sum5$ = -384						; size = 32
_sum4$ = -320						; size = 32
_sum3$ = -256						; size = 32
_sum2$ = -192						; size = 32
_sum1$ = -128						; size = 32
_v$ = -64						; size = 32
hsum_8x32b@@32 PROC					; COMDAT
; _v$ = ymm0

; 171  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 952				; 000003b8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-952]
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	vmovups	YMMWORD PTR _v$[ebp], ymm0
	mov	ecx, OFFSET __A748CBAD_avx2_common_functions@h
	call	@__CheckForDebuggerJustMyCode@4

; 172  :   __m256i sum1 = v;

	vmovdqu	ymm0, YMMWORD PTR _v$[ebp]
	vmovdqu	YMMWORD PTR _sum1$[ebp], ymm0

; 173  :   __m256i sum2 = _mm256_permute4x64_epi64(sum1, _MM_SHUFFLE(1, 0, 3, 2));

	vpermq	ymm0, YMMWORD PTR _sum1$[ebp], 78	; 0000004eH
	vmovdqu	YMMWORD PTR _sum2$[ebp], ymm0

; 174  :   __m256i sum3 = _mm256_add_epi32        (sum1, sum2);

	vmovdqu	ymm0, YMMWORD PTR _sum1$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum2$[ebp]
	vmovdqu	YMMWORD PTR _sum3$[ebp], ymm0

; 175  :   __m256i sum4 = _mm256_shuffle_epi32    (sum3, _MM_SHUFFLE(1, 0, 3, 2));

	vpshufd	ymm0, YMMWORD PTR _sum3$[ebp], 78	; 0000004eH
	vmovdqu	YMMWORD PTR _sum4$[ebp], ymm0

; 176  :   __m256i sum5 = _mm256_add_epi32        (sum3, sum4);

	vmovdqu	ymm0, YMMWORD PTR _sum3$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum4$[ebp]
	vmovdqu	YMMWORD PTR _sum5$[ebp], ymm0

; 177  :   __m256i sum6 = _mm256_shuffle_epi32    (sum5, _MM_SHUFFLE(2, 3, 0, 1));

	vpshufd	ymm0, YMMWORD PTR _sum5$[ebp], 177	; 000000b1H
	vmovdqu	YMMWORD PTR _sum6$[ebp], ymm0

; 178  :   __m256i sum7 = _mm256_add_epi32        (sum5, sum6);

	vmovdqu	ymm0, YMMWORD PTR _sum5$[ebp]
	vpaddd	ymm0, ymm0, YMMWORD PTR _sum6$[ebp]
	vmovdqu	YMMWORD PTR _sum7$[ebp], ymm0

; 179  : 
; 180  :   __m128i sum8 = _mm256_castsi256_si128  (sum7);

	vmovdqu	xmm0, XMMWORD PTR _sum7$[ebp]
	vmovdqa	XMMWORD PTR _sum8$[ebp], xmm0

; 181  :   int32_t sum9 = _mm_cvtsi128_si32       (sum8);

	vmovdqa	xmm0, XMMWORD PTR _sum8$[ebp]
	vmovd	eax, xmm0
	mov	DWORD PTR _sum9$[ebp], eax

; 182  :   return  sum9;

	mov	eax, DWORD PTR _sum9$[ebp]

; 183  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
hsum_8x32b@@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
;	COMDAT _sao_band_ddistortion_generic
_TEXT	SEGMENT
tv90 = -340						; size = 4
_dmask$1 = -140						; size = 4
_delta$2 = -128						; size = 4
_diff$3 = -116						; size = 4
_offset$4 = -104					; size = 4
_band$5 = -92						; size = 4
_orig$6 = -77						; size = 1
_rec$7 = -65						; size = 1
_curr_pos$8 = -56					; size = 4
_sum$ = -44						; size = 4
_shift$ = -32						; size = 4
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_state$ = 8						; size = 4
_orig_data$ = 12					; size = 4
_rec_data$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_band_pos$ = 28						; size = 4
_sao_bands$ = 32					; size = 4
_sao_band_ddistortion_generic PROC			; COMDAT

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __45BE13D6_sao_shared_generics@h
	call	@__CheckForDebuggerJustMyCode@4

; 98   :   int y, x;
; 99   :   int shift = state->encoder_control->bitdepth-5;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2532]
	sub	edx, 5
	mov	DWORD PTR _shift$[ebp], edx

; 100  :   int sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 101  :   for (y = 0; y < block_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@sao_band_d
$LN2@sao_band_d:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@sao_band_d:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _block_height$[ebp]
	jge	$LN3@sao_band_d

; 102  :     for (x = 0; x < block_width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@sao_band_d
$LN5@sao_band_d:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@sao_band_d:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _block_width$[ebp]
	jge	$LN6@sao_band_d

; 103  :       const int32_t curr_pos = y * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _curr_pos$8[ebp], eax

; 104  : 
; 105  :       kvz_pixel rec  =  rec_data[curr_pos];

	mov	eax, DWORD PTR _rec_data$[ebp]
	add	eax, DWORD PTR _curr_pos$8[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _rec$7[ebp], cl

; 106  :       kvz_pixel orig = orig_data[curr_pos];

	mov	eax, DWORD PTR _orig_data$[ebp]
	add	eax, DWORD PTR _curr_pos$8[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _orig$6[ebp], cl

; 107  : 
; 108  :       int32_t band = (rec >> shift) - band_pos;

	movzx	eax, BYTE PTR _rec$7[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sarx	edx, eax, ecx
	sub	edx, DWORD PTR _band_pos$[ebp]
	mov	DWORD PTR _band$5[ebp], edx

; 109  :       int32_t offset = 0;

	mov	DWORD PTR _offset$4[ebp], 0

; 110  :       if (band >= 0 && band <= 3) {

	cmp	DWORD PTR _band$5[ebp], 0
	jl	SHORT $LN8@sao_band_d
	cmp	DWORD PTR _band$5[ebp], 3
	jg	SHORT $LN8@sao_band_d

; 111  :         offset = sao_bands[band];

	mov	eax, DWORD PTR _band$5[ebp]
	mov	ecx, DWORD PTR _sao_bands$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _offset$4[ebp], edx
$LN8@sao_band_d:

; 112  :       }
; 113  :       // Offset is applied to reconstruction, so it is subtracted from diff.
; 114  : 
; 115  :       int32_t diff  = orig - rec;

	movzx	eax, BYTE PTR _orig$6[ebp]
	movzx	ecx, BYTE PTR _rec$7[ebp]
	sub	eax, ecx
	mov	DWORD PTR _diff$3[ebp], eax

; 116  :       int32_t delta = diff - offset;

	mov	eax, DWORD PTR _diff$3[ebp]
	sub	eax, DWORD PTR _offset$4[ebp]
	mov	DWORD PTR _delta$2[ebp], eax

; 117  : 
; 118  :       int32_t dmask = (offset == 0) ? -1 : 0;

	cmp	DWORD PTR _offset$4[ebp], 0
	jne	SHORT $LN10@sao_band_d
	mov	DWORD PTR tv90[ebp], -1
	jmp	SHORT $LN11@sao_band_d
$LN10@sao_band_d:
	mov	DWORD PTR tv90[ebp], 0
$LN11@sao_band_d:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _dmask$1[ebp], eax

; 119  :       diff  &= ~dmask;

	mov	eax, DWORD PTR _dmask$1[ebp]
	not	eax
	and	eax, DWORD PTR _diff$3[ebp]
	mov	DWORD PTR _diff$3[ebp], eax

; 120  :       delta &= ~dmask;

	mov	eax, DWORD PTR _dmask$1[ebp]
	not	eax
	and	eax, DWORD PTR _delta$2[ebp]
	mov	DWORD PTR _delta$2[ebp], eax

; 121  : 
; 122  :       sum += delta * delta - diff * diff;

	mov	eax, DWORD PTR _delta$2[ebp]
	imul	eax, DWORD PTR _delta$2[ebp]
	mov	ecx, DWORD PTR _diff$3[ebp]
	imul	ecx, DWORD PTR _diff$3[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax

; 123  :     }

	jmp	$LN5@sao_band_d
$LN6@sao_band_d:

; 124  :   }

	jmp	$LN2@sao_band_d
$LN3@sao_band_d:

; 125  : 
; 126  :   return sum;

	mov	eax, DWORD PTR _sum$[ebp]

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_band_ddistortion_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
;	COMDAT _sao_edge_ddistortion_generic
_TEXT	SEGMENT
_curr$1 = -208						; size = 4
_delta$2 = -196						; size = 4
_diff$3 = -184						; size = 4
_offset$4 = -172					; size = 4
_eo_cat$5 = -160					; size = 4
_orig$6 = -145						; size = 1
_c$7 = -133						; size = 1
_b$8 = -121						; size = 1
_a$9 = -109						; size = 1
_b_pos$10 = -100					; size = 4
_a_pos$11 = -88						; size = 4
_c_pos$12 = -76						; size = 4
_b_ofs$ = -64						; size = 8
_a_ofs$ = -48						; size = 8
_sum$ = -32						; size = 4
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_orig_data$ = 8						; size = 4
_rec_data$ = 12						; size = 4
_block_width$ = 16					; size = 4
_block_height$ = 20					; size = 4
_eo_class$ = 24						; size = 4
_offsets$ = 28						; size = 4
_sao_edge_ddistortion_generic PROC			; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __45BE13D6_sao_shared_generics@h
	call	@__CheckForDebuggerJustMyCode@4

; 59   :   int y, x;
; 60   :   int32_t sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 61   :   vector2d_t a_ofs = g_sao_edge_offsets[eo_class][0];

	mov	eax, DWORD PTR _eo_class$[ebp]
	shl	eax, 4
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _g_sao_edge_offsets[eax+edx]
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+edx+4]
	mov	DWORD PTR _a_ofs$[ebp], ecx
	mov	DWORD PTR _a_ofs$[ebp+4], edx

; 62   :   vector2d_t b_ofs = g_sao_edge_offsets[eo_class][1];

	mov	eax, DWORD PTR _eo_class$[ebp]
	shl	eax, 4
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _g_sao_edge_offsets[eax+ecx]
	mov	eax, DWORD PTR _g_sao_edge_offsets[eax+ecx+4]
	mov	DWORD PTR _b_ofs$[ebp], edx
	mov	DWORD PTR _b_ofs$[ebp+4], eax

; 63   : 
; 64   :   for (y = 1; y < block_height - 1; y++) {

	mov	DWORD PTR _y$[ebp], 1
	jmp	SHORT $LN4@sao_edge_d
$LN2@sao_edge_d:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@sao_edge_d:
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN3@sao_edge_d

; 65   :     for (x = 1; x < block_width - 1; x++) {

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN7@sao_edge_d
$LN5@sao_edge_d:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@sao_edge_d:
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _x$[ebp], eax
	jge	$LN6@sao_edge_d

; 66   :       uint32_t c_pos =  y            * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _c_pos$12[ebp], eax

; 67   :       uint32_t a_pos = (y + a_ofs.y) * block_width + x + a_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _a_ofs$[ebp]
	mov	DWORD PTR _a_pos$11[ebp], eax

; 68   :       uint32_t b_pos = (y + b_ofs.y) * block_width + x + b_ofs.x;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp+4]
	imul	eax, DWORD PTR _block_width$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _b_ofs$[ebp]
	mov	DWORD PTR _b_pos$10[ebp], eax

; 69   : 
; 70   :       uint8_t   a    =  rec_data[a_pos];

	mov	eax, DWORD PTR _rec_data$[ebp]
	add	eax, DWORD PTR _a_pos$11[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _a$9[ebp], cl

; 71   :       uint8_t   b    =  rec_data[b_pos];

	mov	eax, DWORD PTR _rec_data$[ebp]
	add	eax, DWORD PTR _b_pos$10[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _b$8[ebp], cl

; 72   :       uint8_t   c    =  rec_data[c_pos];

	mov	eax, DWORD PTR _rec_data$[ebp]
	add	eax, DWORD PTR _c_pos$12[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$7[ebp], cl

; 73   :       uint8_t   orig = orig_data[c_pos];

	mov	eax, DWORD PTR _orig_data$[ebp]
	add	eax, DWORD PTR _c_pos$12[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _orig$6[ebp], cl

; 74   : 
; 75   :       int32_t eo_cat = sao_calc_eo_cat(a, b, c);

	movzx	eax, BYTE PTR _c$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR _b$8[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$9[ebp]
	push	edx
	call	_sao_calc_eo_cat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _eo_cat$5[ebp], eax

; 76   :       int32_t offset = offsets[eo_cat];

	mov	eax, DWORD PTR _eo_cat$5[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _offset$4[ebp], edx

; 77   : 
; 78   :       if (offset != 0) {

	cmp	DWORD PTR _offset$4[ebp], 0
	je	SHORT $LN8@sao_edge_d

; 79   :         int32_t diff   = orig - c;

	movzx	eax, BYTE PTR _orig$6[ebp]
	movzx	ecx, BYTE PTR _c$7[ebp]
	sub	eax, ecx
	mov	DWORD PTR _diff$3[ebp], eax

; 80   :         int32_t delta  = diff - offset;

	mov	eax, DWORD PTR _diff$3[ebp]
	sub	eax, DWORD PTR _offset$4[ebp]
	mov	DWORD PTR _delta$2[ebp], eax

; 81   :         int32_t curr   = delta * delta - diff * diff;

	mov	eax, DWORD PTR _delta$2[ebp]
	imul	eax, DWORD PTR _delta$2[ebp]
	mov	ecx, DWORD PTR _diff$3[ebp]
	imul	ecx, DWORD PTR _diff$3[ebp]
	sub	eax, ecx
	mov	DWORD PTR _curr$1[ebp], eax

; 82   : 
; 83   :         sum += curr;

	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _curr$1[ebp]
	mov	DWORD PTR _sum$[ebp], eax
$LN8@sao_edge_d:

; 84   :       }
; 85   :     }

	jmp	$LN5@sao_edge_d
$LN6@sao_edge_d:

; 86   :   }

	jmp	$LN2@sao_edge_d
$LN3@sao_edge_d:

; 87   :   return sum;

	mov	eax, DWORD PTR _sum$[ebp]

; 88   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@sao_edge_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@sao_edge_d:
	DD	2
	DD	$LN12@sao_edge_d
$LN12@sao_edge_d:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN10@sao_edge_d
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN11@sao_edge_d
$LN11@sao_edge_d:
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN10@sao_edge_d:
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
_sao_edge_ddistortion_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\sao_shared_generics.h
;	COMDAT _sao_calc_eo_cat
_TEXT	SEGMENT
tv84 = -220						; size = 4
tv85 = -216						; size = 4
tv72 = -212						; size = 4
tv73 = -208						; size = 4
_eo_idx$ = -8						; size = 4
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_c$ = 16						; size = 1
_sao_calc_eo_cat PROC					; COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __45BE13D6_sao_shared_generics@h
	call	@__CheckForDebuggerJustMyCode@4

; 44   :   // Mapping relationships between a, b and c to eo_idx.
; 45   :   static const int sao_eo_idx_to_eo_category[] = { 1, 2, 0, 3, 4 };
; 46   : 
; 47   :   int eo_idx = 2 + SIGN3((int)c - (int)a) + SIGN3((int)c - (int)b);

	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR _a$[ebp]
	sub	eax, ecx
	test	eax, eax
	jle	SHORT $LN5@sao_calc_e
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@sao_calc_e
$LN5@sao_calc_e:
	mov	DWORD PTR tv73[ebp], 0
$LN6@sao_calc_e:
	movzx	edx, BYTE PTR _c$[ebp]
	movzx	eax, BYTE PTR _a$[ebp]
	sub	edx, eax
	jns	SHORT $LN3@sao_calc_e
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@sao_calc_e
$LN3@sao_calc_e:
	mov	DWORD PTR tv72[ebp], 0
$LN4@sao_calc_e:
	movzx	ecx, BYTE PTR _c$[ebp]
	movzx	edx, BYTE PTR _b$[ebp]
	sub	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN9@sao_calc_e
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN10@sao_calc_e
$LN9@sao_calc_e:
	mov	DWORD PTR tv85[ebp], 0
$LN10@sao_calc_e:
	movzx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	jns	SHORT $LN7@sao_calc_e
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN8@sao_calc_e
$LN7@sao_calc_e:
	mov	DWORD PTR tv84[ebp], 0
$LN8@sao_calc_e:
	mov	edx, DWORD PTR tv73[ebp]
	sub	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	sub	eax, DWORD PTR tv84[ebp]
	lea	ecx, DWORD PTR [edx+eax+2]
	mov	DWORD PTR _eo_idx$[ebp], ecx

; 48   : 
; 49   :   return sao_eo_idx_to_eo_category[eo_idx];

	mov	eax, DWORD PTR _eo_idx$[ebp]
	mov	eax, DWORD PTR ?sao_eo_idx_to_eo_category@?1??sao_calc_eo_cat@@9@9[eax*4]

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_calc_eo_cat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\sao-avx2.c
;	COMDAT _kvz_strategy_register_sao_avx2
_TEXT	SEGMENT
tv140 = -208						; size = 4
tv129 = -208						; size = 4
tv86 = -208						; size = 4
tv75 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_sao_avx2 PROC			; COMDAT

; 904  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CF28069_sao-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 905  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 906  : #if COMPILE_INTEL_AVX2
; 907  : #if KVZ_BIT_DEPTH == 8
; 908  :   if (bitdepth == 8) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	cmp	eax, 8
	jne	$LN2@kvz_strate

; 909  :     success &= kvz_strategyselector_register(opaque, "sao_edge_ddistortion", "avx2", 40, &sao_edge_ddistortion_avx2);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sao_edge_ddistortion_avx2
	push	40					; 00000028H
	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	push	OFFSET ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN4@kvz_strate
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN5@kvz_strate
$LN4@kvz_strate:
	mov	DWORD PTR tv75[ebp], 1
$LN5@kvz_strate:
	mov	cl, BYTE PTR tv75[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 910  :     success &= kvz_strategyselector_register(opaque, "calc_sao_edge_dir", "avx2", 40, &calc_sao_edge_dir_avx2);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _calc_sao_edge_dir_avx2
	push	40					; 00000028H
	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	push	OFFSET ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN6@kvz_strate
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN7@kvz_strate
$LN6@kvz_strate:
	mov	DWORD PTR tv86[ebp], 1
$LN7@kvz_strate:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 911  :     success &= kvz_strategyselector_register(opaque, "sao_reconstruct_color", "avx2", 40, &sao_reconstruct_color_avx2);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sao_reconstruct_color_avx2
	push	40					; 00000028H
	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	push	OFFSET ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN8@kvz_strate
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN9@kvz_strate
$LN8@kvz_strate:
	mov	DWORD PTR tv129[ebp], 1
$LN9@kvz_strate:
	mov	cl, BYTE PTR tv129[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 912  :     success &= kvz_strategyselector_register(opaque, "sao_band_ddistortion", "avx2", 40, &sao_band_ddistortion_avx2);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _sao_band_ddistortion_avx2
	push	40					; 00000028H
	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	push	OFFSET ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN10@kvz_strate
	mov	DWORD PTR tv140[ebp], 0
	jmp	SHORT $LN11@kvz_strate
$LN10@kvz_strate:
	mov	DWORD PTR tv140[ebp], 1
$LN11@kvz_strate:
	mov	cl, BYTE PTR tv140[ebp]
	mov	BYTE PTR _success$[ebp], cl
$LN2@kvz_strate:

; 913  :   }
; 914  : #endif // KVZ_BIT_DEPTH == 8
; 915  : #endif //COMPILE_INTEL_AVX2
; 916  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 917  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_sao_avx2 ENDP
_TEXT	ENDS
END
