; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__FD9E72A4_intra-generic@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
?modedisp2sampledisp@?1??kvz_angular_pred_generic@@9@9 DB 00H ; `kvz_angular_pred_generic'::`2'::modedisp2sampledisp
	DB	02H
	DB	05H
	DB	09H
	DB	0dH
	DB	011H
	DB	015H
	DB	01aH
	DB	020H
	ORG $+3
?modedisp2invsampledisp@?1??kvz_angular_pred_generic@@9@9 DW 00H ; `kvz_angular_pred_generic'::`2'::modedisp2invsampledisp
	DW	01000H
	DW	0666H
	DW	038eH
	DW	0276H
	DW	01e2H
	DW	0186H
	DW	013bH
	DW	0100H
CONST	ENDS
PUBLIC	_kvz_strategy_register_intra_generic
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_angular_pred_generic@@9@9	; `kvz_angular_pred_generic'::`1'::__LINE__Var
PUBLIC	??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ ; `string'
PUBLIC	??_C@_1EI@LOIGGLAN@?$AAi?$AAn?$AAt?$AAr?$AAa?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_intra_pred_planar_generic@@9@9 ; `kvz_intra_pred_planar_generic'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??kvz_intra_pred_filtered_dc_generic@@9@9 ; `kvz_intra_pred_filtered_dc_generic'::`1'::__LINE__Var
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_intra_pred_filtered_dc_generic@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_intra_pred_filtered_dc_generic@@9@9 DD 0d7H ; `kvz_intra_pred_filtered_dc_generic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_intra_pred_planar_generic@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_intra_pred_planar_generic@@9@9 DD 0aaH ; `kvz_intra_pred_planar_generic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@LOIGGLAN@?$AAi?$AAn?$AAt?$AAr?$AAa?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
CONST	SEGMENT
??_C@_1EI@LOIGGLAN@?$AAi?$AAn?$AAt?$AAr?$AAa?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ DB 'i'
	DB	00H, 'n', 00H, 't', 00H, 'r', 00H, 'a', 00H, '_', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'r', 00H, 'a', 00H, '_', 00H, 'm', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'3', 00H, '4', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
CONST	SEGMENT
??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ DB 'l'
	DB	00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'5', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'e'
	DB	00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, '-', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_angular_pred_generic@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_angular_pred_generic@@9@9 DD 037H	; `kvz_angular_pred_generic'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
;	COMDAT _kvz_intra_pred_filtered_dc_generic
_TEXT	SEGMENT
_x$1 = -77						; size = 1
_y$2 = -65						; size = 1
_x$3 = -53						; size = 1
_dc_val$ = -41						; size = 1
_i$4 = -29						; size = 1
_sum$ = -20						; size = 4
_width$ = -5						; size = 1
_log2_width$ = 8					; size = 1
_ref_top$ = 12						; size = 4
_ref_left$ = 16						; size = 4
_out_block$ = 20					; size = 4
_kvz_intra_pred_filtered_dc_generic PROC		; COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FD9E72A4_intra-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 216  :   assert(log2_width >= 2 && log2_width <= 5);

	movsx	eax, BYTE PTR _log2_width$[ebp]
	cmp	eax, 2
	jl	SHORT $LN15@kvz_intra_
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	cmp	ecx, 5
	jle	SHORT $LN16@kvz_intra_
$LN15@kvz_intra_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_intra_pred_filtered_dc_generic@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@kvz_intra_:

; 217  : 
; 218  :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 219  : 
; 220  :   int_fast16_t sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 221  :   for (int_fast8_t i = 0; i < width; ++i) {

	mov	BYTE PTR _i$4[ebp], 0
	jmp	SHORT $LN4@kvz_intra_
$LN2@kvz_intra_:
	mov	al, BYTE PTR _i$4[ebp]
	add	al, 1
	mov	BYTE PTR _i$4[ebp], al
$LN4@kvz_intra_:
	movsx	eax, BYTE PTR _i$4[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN3@kvz_intra_

; 222  :     sum += ref_top[i + 1];

	movsx	eax, BYTE PTR _i$4[ebp]
	mov	ecx, DWORD PTR _ref_top$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	add	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], edx

; 223  :     sum += ref_left[i + 1];

	movsx	eax, BYTE PTR _i$4[ebp]
	mov	ecx, DWORD PTR _ref_left$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	add	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], edx

; 224  :   }

	jmp	SHORT $LN2@kvz_intra_
$LN3@kvz_intra_:

; 225  : 
; 226  :   const kvz_pixel dc_val = (sum + width) >> (log2_width + 1);

	movsx	eax, BYTE PTR _width$[ebp]
	add	eax, DWORD PTR _sum$[ebp]
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	add	ecx, 1
	sar	eax, cl
	mov	BYTE PTR _dc_val$[ebp], al

; 227  : 
; 228  :   // Filter top-left with ([1 2 1] / 4)
; 229  :   out_block[0] = (ref_left[1] + 2 * dc_val + ref_top[1] + 2) / 4;

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ref_left$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	movzx	eax, BYTE PTR _dc_val$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ref_top$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	lea	eax, DWORD PTR [ecx+edx+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _out_block$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 230  : 
; 231  :   // Filter rest of the boundary with ([1 3] / 4)
; 232  :   for (int_fast8_t x = 1; x < width; ++x) {

	mov	BYTE PTR _x$3[ebp], 1
	jmp	SHORT $LN7@kvz_intra_
$LN5@kvz_intra_:
	mov	al, BYTE PTR _x$3[ebp]
	add	al, 1
	mov	BYTE PTR _x$3[ebp], al
$LN7@kvz_intra_:
	movsx	eax, BYTE PTR _x$3[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN6@kvz_intra_

; 233  :     out_block[x] = (ref_top[x + 1] + 3 * dc_val + 2) / 4;

	movsx	eax, BYTE PTR _x$3[ebp]
	mov	ecx, DWORD PTR _ref_top$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	movzx	eax, BYTE PTR _dc_val$[ebp]
	imul	ecx, eax, 3
	lea	eax, DWORD PTR [edx+ecx+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movsx	edx, BYTE PTR _x$3[ebp]
	mov	ecx, DWORD PTR _out_block$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 234  :   }

	jmp	SHORT $LN5@kvz_intra_
$LN6@kvz_intra_:

; 235  :   for (int_fast8_t y = 1; y < width; ++y) {

	mov	BYTE PTR _y$2[ebp], 1
	jmp	SHORT $LN10@kvz_intra_
$LN8@kvz_intra_:
	mov	al, BYTE PTR _y$2[ebp]
	add	al, 1
	mov	BYTE PTR _y$2[ebp], al
$LN10@kvz_intra_:
	movsx	eax, BYTE PTR _y$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN1@kvz_intra_

; 236  :     out_block[y * width] = (ref_left[y + 1] + 3 * dc_val + 2) / 4;

	movsx	eax, BYTE PTR _y$2[ebp]
	mov	ecx, DWORD PTR _ref_left$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1]
	movzx	eax, BYTE PTR _dc_val$[ebp]
	imul	ecx, eax, 3
	lea	eax, DWORD PTR [edx+ecx+2]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	movsx	edx, BYTE PTR _y$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	edx, ecx
	mov	ecx, DWORD PTR _out_block$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 237  :     for (int_fast8_t x = 1; x < width; ++x) {

	mov	BYTE PTR _x$1[ebp], 1
	jmp	SHORT $LN13@kvz_intra_
$LN11@kvz_intra_:
	mov	al, BYTE PTR _x$1[ebp]
	add	al, 1
	mov	BYTE PTR _x$1[ebp], al
$LN13@kvz_intra_:
	movsx	eax, BYTE PTR _x$1[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@kvz_intra_

; 238  :       out_block[y * width + x] = dc_val;

	movsx	eax, BYTE PTR _y$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	eax, ecx
	movsx	edx, BYTE PTR _x$1[ebp]
	add	edx, DWORD PTR _out_block$[ebp]
	mov	cl, BYTE PTR _dc_val$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 239  :     }

	jmp	SHORT $LN11@kvz_intra_
$LN12@kvz_intra_:

; 240  :   }

	jmp	SHORT $LN8@kvz_intra_
$LN1@kvz_intra_:

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_intra_pred_filtered_dc_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
;	COMDAT _kvz_intra_pred_planar_generic
_TEXT	SEGMENT
_x$1 = -220						; size = 4
_hor$2 = -208						; size = 4
_y$3 = -196						; size = 4
_i$4 = -184						; size = 4
_top$ = -172						; size = 128
_bottom_left$ = -33					; size = 1
_top_right$ = -21					; size = 1
_width$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_log2_width$ = 8					; size = 1
_ref_top$ = 12						; size = 4
_ref_left$ = 16						; size = 4
_dst$ = 20						; size = 4
_kvz_intra_pred_planar_generic PROC			; COMDAT

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __FD9E72A4_intra-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 171  :   assert(log2_width >= 2 && log2_width <= 5);

	movsx	eax, BYTE PTR _log2_width$[ebp]
	cmp	eax, 2
	jl	SHORT $LN12@kvz_intra_
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	cmp	ecx, 5
	jle	SHORT $LN13@kvz_intra_
$LN12@kvz_intra_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_intra_pred_planar_generic@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@kvz_intra_:

; 172  : 
; 173  :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 174  :   const kvz_pixel top_right = ref_top[width + 1];

	movsx	eax, BYTE PTR _width$[ebp]
	mov	ecx, DWORD PTR _ref_top$[ebp]
	mov	dl, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR _top_right$[ebp], dl

; 175  :   const kvz_pixel bottom_left = ref_left[width + 1];

	movsx	eax, BYTE PTR _width$[ebp]
	mov	ecx, DWORD PTR _ref_left$[ebp]
	mov	dl, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR _bottom_left$[ebp], dl

; 176  : 
; 177  : #if 0
; 178  :   // Unoptimized version for reference.
; 179  :   for (int y = 0; y < width; ++y) {
; 180  :     for (int x = 0; x < width; ++x) {
; 181  :       int_fast16_t hor = (width - 1 - x) * ref_left[y + 1] + (x + 1) * top_right;
; 182  :       int_fast16_t ver = (width - 1 - y) * ref_top[x + 1] + (y + 1) * bottom_left;
; 183  :       dst[y * width + x] = (ver + hor + width) >> (log2_width + 1);
; 184  :     }
; 185  :   }
; 186  : #else
; 187  :   int_fast16_t top[32];
; 188  :   for (int i = 0; i < width; ++i) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@kvz_intra_
$LN2@kvz_intra_:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN3@kvz_intra_

; 189  :     top[i] = ref_top[i + 1] << log2_width;

	mov	eax, DWORD PTR _ref_top$[ebp]
	add	eax, DWORD PTR _i$4[ebp]
	movzx	edx, BYTE PTR [eax+1]
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR _top$[ebp+eax*4], edx

; 190  :   }

	jmp	SHORT $LN2@kvz_intra_
$LN3@kvz_intra_:

; 191  : 
; 192  :   for (int y = 0; y < width; ++y) {

	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN7@kvz_intra_
$LN5@kvz_intra_:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 1
	mov	DWORD PTR _y$3[ebp], eax
$LN7@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	DWORD PTR _y$3[ebp], eax
	jge	$LN1@kvz_intra_

; 193  :     int_fast16_t hor = (ref_left[y + 1] << log2_width) + width;

	mov	eax, DWORD PTR _ref_left$[ebp]
	add	eax, DWORD PTR _y$3[ebp]
	movzx	edx, BYTE PTR [eax+1]
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	shl	edx, cl
	movsx	eax, BYTE PTR _width$[ebp]
	add	edx, eax
	mov	DWORD PTR _hor$2[ebp], edx

; 194  :     for (int x = 0; x < width; ++x) {

	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN10@kvz_intra_
$LN8@kvz_intra_:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _x$1[ebp], eax
$LN10@kvz_intra_:
	movsx	eax, BYTE PTR _width$[ebp]
	cmp	DWORD PTR _x$1[ebp], eax
	jge	$LN9@kvz_intra_

; 195  :       hor += top_right - ref_left[y + 1];

	movzx	eax, BYTE PTR _top_right$[ebp]
	mov	ecx, DWORD PTR _ref_left$[ebp]
	add	ecx, DWORD PTR _y$3[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	sub	eax, edx
	add	eax, DWORD PTR _hor$2[ebp]
	mov	DWORD PTR _hor$2[ebp], eax

; 196  :       top[x] += bottom_left - ref_top[x + 1];

	movzx	eax, BYTE PTR _bottom_left$[ebp]
	mov	ecx, DWORD PTR _ref_top$[ebp]
	add	ecx, DWORD PTR _x$1[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	sub	eax, edx
	mov	ecx, DWORD PTR _x$1[ebp]
	add	eax, DWORD PTR _top$[ebp+ecx*4]
	mov	edx, DWORD PTR _x$1[ebp]
	mov	DWORD PTR _top$[ebp+edx*4], eax

; 197  :       dst[y * width + x] = (hor + top[x]) >> (log2_width + 1);

	mov	eax, DWORD PTR _x$1[ebp]
	mov	edx, DWORD PTR _hor$2[ebp]
	add	edx, DWORD PTR _top$[ebp+eax*4]
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	add	ecx, 1
	sar	edx, cl
	movsx	eax, BYTE PTR _width$[ebp]
	imul	eax, DWORD PTR _y$3[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 198  :     }

	jmp	$LN8@kvz_intra_
$LN9@kvz_intra_:

; 199  :   }

	jmp	$LN5@kvz_intra_
$LN1@kvz_intra_:

; 200  : #endif
; 201  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@kvz_intra_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@kvz_intra_:
	DD	1
	DD	$LN15@kvz_intra_
$LN15@kvz_intra_:
	DD	-172					; ffffff54H
	DD	128					; 00000080H
	DD	$LN14@kvz_intra_
$LN14@kvz_intra_:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_kvz_intra_pred_planar_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
;	COMDAT _kvz_angular_pred_generic
_TEXT	SEGMENT
tv89 = -576						; size = 4
tv200 = -572						; size = 4
tv196 = -572						; size = 4
tv150 = -572						; size = 4
tv146 = -572						; size = 4
tv133 = -572						; size = 4
tv129 = -572						; size = 4
tv87 = -572						; size = 4
_tempval$1 = -369					; size = 1
_x$2 = -357						; size = 1
_y$3 = -345						; size = 1
_x$4 = -333						; size = 1
_y$5 = -321						; size = 1
_x$6 = -309						; size = 1
_ref2$7 = -297						; size = 1
_ref1$8 = -285						; size = 1
_x$9 = -273						; size = 1
_delta_fract$10 = -261					; size = 1
_delta_int$11 = -249					; size = 1
_y$12 = -237						; size = 1
_delta_pos$13 = -228					; size = 4
_side_index$14 = -213					; size = 1
_x$15 = -201						; size = 1
_most_negative_index$16 = -189				; size = 1
_inv_abs_sample_disp$17 = -180				; size = 4
_col_sample_disp$18 = -168				; size = 4
_x$19 = -153						; size = 1
_ref_side$ = -144					; size = 4
_ref_main$ = -132					; size = 4
_sample_disp$ = -117					; size = 1
_mode_disp$ = -105					; size = 1
_vertical_mode$ = -93					; size = 1
_width$ = -81						; size = 1
_tmp_ref$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_log2_width$ = 8					; size = 1
_intra_mode$ = 12					; size = 1
_in_ref_above$ = 16					; size = 4
_in_ref_left$ = 20					; size = 4
_dst$ = 24						; size = 4
_kvz_angular_pred_generic PROC				; COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 576				; 00000240H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __FD9E72A4_intra-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 56   :   assert(log2_width >= 2 && log2_width <= 5);

	movsx	eax, BYTE PTR _log2_width$[ebp]
	cmp	eax, 2
	jl	SHORT $LN37@kvz_angula
	movsx	ecx, BYTE PTR _log2_width$[ebp]
	cmp	ecx, 5
	jle	SHORT $LN38@kvz_angula
$LN37@kvz_angula:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_angular_pred_generic@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@kvz_angula:

; 57   :   assert(intra_mode >= 2 && intra_mode <= 34);

	movsx	eax, BYTE PTR _intra_mode$[ebp]
	cmp	eax, 2
	jl	SHORT $LN39@kvz_angula
	movsx	ecx, BYTE PTR _intra_mode$[ebp]
	cmp	ecx, 34					; 00000022H
	jle	SHORT $LN40@kvz_angula
$LN39@kvz_angula:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_angular_pred_generic@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JO@ONBLLPDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EI@LOIGGLAN@?$AAi?$AAn?$AAt?$AAr?$AAa?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@kvz_angula:

; 58   : 
; 59   :   static const int8_t modedisp2sampledisp[9] = { 0, 2, 5, 9, 13, 17, 21, 26, 32 };
; 60   :   static const int16_t modedisp2invsampledisp[9] = { 0, 4096, 1638, 910, 630, 482, 390, 315, 256 }; // (256 * 32) / sampledisp
; 61   : 
; 62   :                                                     // Temporary buffer for modes 11-25.
; 63   :                                                     // It only needs to be big enough to hold indices from -width to width-1.
; 64   :   kvz_pixel tmp_ref[2 * 32];
; 65   :   const int_fast8_t width = 1 << log2_width;

	movsx	ecx, BYTE PTR _log2_width$[ebp]
	mov	eax, 1
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 66   : 
; 67   :   // Whether to swap references to always project on the left reference row.
; 68   :   const bool vertical_mode = intra_mode >= 18;

	movsx	eax, BYTE PTR _intra_mode$[ebp]
	cmp	eax, 18					; 00000012H
	jl	SHORT $LN41@kvz_angula
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN42@kvz_angula
$LN41@kvz_angula:
	mov	DWORD PTR tv87[ebp], 0
$LN42@kvz_angula:
	cmp	DWORD PTR tv87[ebp], 0
	jne	SHORT $LN43@kvz_angula
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN44@kvz_angula
$LN43@kvz_angula:
	mov	DWORD PTR tv89[ebp], 1
$LN44@kvz_angula:
	mov	cl, BYTE PTR tv89[ebp]
	mov	BYTE PTR _vertical_mode$[ebp], cl

; 69   :   // Modes distance to horizontal or vertical mode.
; 70   :   const int_fast8_t mode_disp = vertical_mode ? intra_mode - 26 : 10 - intra_mode;

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	je	SHORT $LN45@kvz_angula
	movsx	ecx, BYTE PTR _intra_mode$[ebp]
	sub	ecx, 26					; 0000001aH
	mov	DWORD PTR tv129[ebp], ecx
	jmp	SHORT $LN46@kvz_angula
$LN45@kvz_angula:
	movsx	edx, BYTE PTR _intra_mode$[ebp]
	mov	eax, 10					; 0000000aH
	sub	eax, edx
	mov	DWORD PTR tv129[ebp], eax
$LN46@kvz_angula:
	mov	cl, BYTE PTR tv129[ebp]
	mov	BYTE PTR _mode_disp$[ebp], cl

; 71   :   // Sample displacement per column in fractions of 32.
; 72   :   const int_fast8_t sample_disp = (mode_disp < 0 ? -1 : 1) * modedisp2sampledisp[abs(mode_disp)];

	movsx	eax, BYTE PTR _mode_disp$[ebp]
	test	eax, eax
	jge	SHORT $LN47@kvz_angula
	mov	DWORD PTR tv133[ebp], -1
	jmp	SHORT $LN48@kvz_angula
$LN47@kvz_angula:
	mov	DWORD PTR tv133[ebp], 1
$LN48@kvz_angula:
	movsx	ecx, BYTE PTR _mode_disp$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	movsx	edx, BYTE PTR ?modedisp2sampledisp@?1??kvz_angular_pred_generic@@9@9[eax]
	imul	edx, DWORD PTR tv133[ebp]
	mov	BYTE PTR _sample_disp$[ebp], dl

; 73   : 
; 74   :   // Pointer for the reference we are interpolating from.
; 75   :   const kvz_pixel *ref_main;
; 76   :   // Pointer for the other reference.
; 77   :   const kvz_pixel *ref_side;
; 78   : 
; 79   :   // Set ref_main and ref_side such that, when indexed with 0, they point to
; 80   :   // index 0 in block coordinates.
; 81   :   if (sample_disp < 0) {

	movsx	eax, BYTE PTR _sample_disp$[ebp]
	test	eax, eax
	jge	$LN29@kvz_angula

; 82   :     // Negative sample_disp means, we need to use both references.
; 83   : 
; 84   :     ref_side = (vertical_mode ? in_ref_left : in_ref_above) + 1;

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	je	SHORT $LN49@kvz_angula
	mov	ecx, DWORD PTR _in_ref_left$[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	jmp	SHORT $LN50@kvz_angula
$LN49@kvz_angula:
	mov	edx, DWORD PTR _in_ref_above$[ebp]
	mov	DWORD PTR tv146[ebp], edx
$LN50@kvz_angula:
	mov	eax, DWORD PTR tv146[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_side$[ebp], eax

; 85   :     ref_main = (vertical_mode ? in_ref_above : in_ref_left) + 1;

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	je	SHORT $LN51@kvz_angula
	mov	ecx, DWORD PTR _in_ref_above$[ebp]
	mov	DWORD PTR tv150[ebp], ecx
	jmp	SHORT $LN52@kvz_angula
$LN51@kvz_angula:
	mov	edx, DWORD PTR _in_ref_left$[ebp]
	mov	DWORD PTR tv150[ebp], edx
$LN52@kvz_angula:
	mov	eax, DWORD PTR tv150[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_main$[ebp], eax

; 86   : 
; 87   :     // Move the reference pixels to start from the middle to the later half of
; 88   :     // the tmp_ref, so there is room for negative indices.
; 89   :     for (int_fast8_t x = -1; x < width; ++x) {

	mov	BYTE PTR _x$19[ebp], -1
	jmp	SHORT $LN4@kvz_angula
$LN2@kvz_angula:
	mov	al, BYTE PTR _x$19[ebp]
	add	al, 1
	mov	BYTE PTR _x$19[ebp], al
$LN4@kvz_angula:
	movsx	eax, BYTE PTR _x$19[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN3@kvz_angula

; 90   :       tmp_ref[x + width] = ref_main[x];

	movsx	eax, BYTE PTR _x$19[ebp]
	movsx	ecx, BYTE PTR _x$19[ebp]
	movsx	edx, BYTE PTR _width$[ebp]
	lea	edx, DWORD PTR _tmp_ref$[ebp+edx]
	mov	esi, DWORD PTR _ref_main$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al

; 91   :     }

	jmp	SHORT $LN2@kvz_angula
$LN3@kvz_angula:

; 92   :     // Get a pointer to block index 0 in tmp_ref.
; 93   :     ref_main = &tmp_ref[width];

	movsx	eax, BYTE PTR _width$[ebp]
	lea	ecx, DWORD PTR _tmp_ref$[ebp+eax]
	mov	DWORD PTR _ref_main$[ebp], ecx

; 94   : 
; 95   :     // Extend the side reference to the negative indices of main reference.
; 96   :     int_fast32_t col_sample_disp = 128; // rounding for the ">> 8"

	mov	DWORD PTR _col_sample_disp$18[ebp], 128	; 00000080H

; 97   :     int_fast16_t inv_abs_sample_disp = modedisp2invsampledisp[abs(mode_disp)];

	movsx	eax, BYTE PTR _mode_disp$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	movsx	ecx, WORD PTR ?modedisp2invsampledisp@?1??kvz_angular_pred_generic@@9@9[eax*2]
	mov	DWORD PTR _inv_abs_sample_disp$17[ebp], ecx

; 98   :     int_fast8_t most_negative_index = (width * sample_disp) >> 5;

	movsx	eax, BYTE PTR _width$[ebp]
	movsx	ecx, BYTE PTR _sample_disp$[ebp]
	imul	eax, ecx
	sar	eax, 5
	mov	BYTE PTR _most_negative_index$16[ebp], al

; 99   :     for (int_fast8_t x = -2; x >= most_negative_index; --x) {

	mov	BYTE PTR _x$15[ebp], -2			; fffffffeH
	jmp	SHORT $LN7@kvz_angula
$LN5@kvz_angula:
	mov	al, BYTE PTR _x$15[ebp]
	sub	al, 1
	mov	BYTE PTR _x$15[ebp], al
$LN7@kvz_angula:
	movsx	eax, BYTE PTR _x$15[ebp]
	movsx	ecx, BYTE PTR _most_negative_index$16[ebp]
	cmp	eax, ecx
	jl	SHORT $LN6@kvz_angula

; 100  :       col_sample_disp += inv_abs_sample_disp;

	mov	eax, DWORD PTR _col_sample_disp$18[ebp]
	add	eax, DWORD PTR _inv_abs_sample_disp$17[ebp]
	mov	DWORD PTR _col_sample_disp$18[ebp], eax

; 101  :       int_fast8_t side_index = col_sample_disp >> 8;

	mov	eax, DWORD PTR _col_sample_disp$18[ebp]
	sar	eax, 8
	mov	BYTE PTR _side_index$14[ebp], al

; 102  :       tmp_ref[x + width] = ref_side[side_index - 1];

	movsx	eax, BYTE PTR _side_index$14[ebp]
	movsx	ecx, BYTE PTR _x$15[ebp]
	movsx	edx, BYTE PTR _width$[ebp]
	lea	edx, DWORD PTR _tmp_ref$[ebp+edx]
	mov	esi, DWORD PTR _ref_side$[ebp]
	mov	al, BYTE PTR [esi+eax-1]
	mov	BYTE PTR [edx+ecx], al

; 103  :     }

	jmp	SHORT $LN5@kvz_angula
$LN6@kvz_angula:

; 104  :   }

	jmp	SHORT $LN30@kvz_angula
$LN29@kvz_angula:

; 105  :   else {
; 106  :     // sample_disp >= 0 means we don't need to refer to negative indices,
; 107  :     // which means we can just use the references as is.
; 108  :     ref_main = (vertical_mode ? in_ref_above : in_ref_left) + 1;

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	je	SHORT $LN53@kvz_angula
	mov	ecx, DWORD PTR _in_ref_above$[ebp]
	mov	DWORD PTR tv196[ebp], ecx
	jmp	SHORT $LN54@kvz_angula
$LN53@kvz_angula:
	mov	edx, DWORD PTR _in_ref_left$[ebp]
	mov	DWORD PTR tv196[ebp], edx
$LN54@kvz_angula:
	mov	eax, DWORD PTR tv196[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_main$[ebp], eax

; 109  :     ref_side = (vertical_mode ? in_ref_left : in_ref_above) + 1;

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	je	SHORT $LN55@kvz_angula
	mov	ecx, DWORD PTR _in_ref_left$[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	jmp	SHORT $LN56@kvz_angula
$LN55@kvz_angula:
	mov	edx, DWORD PTR _in_ref_above$[ebp]
	mov	DWORD PTR tv200[ebp], edx
$LN56@kvz_angula:
	mov	eax, DWORD PTR tv200[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_side$[ebp], eax
$LN30@kvz_angula:

; 110  :   }
; 111  : 
; 112  :   if (sample_disp != 0) {

	movsx	eax, BYTE PTR _sample_disp$[ebp]
	test	eax, eax
	je	$LN31@kvz_angula

; 113  :     // The mode is not horizontal or vertical, we have to do interpolation.
; 114  : 
; 115  :     int_fast16_t delta_pos = 0;

	mov	DWORD PTR _delta_pos$13[ebp], 0

; 116  :     for (int_fast8_t y = 0; y < width; ++y) {

	mov	BYTE PTR _y$12[ebp], 0
	jmp	SHORT $LN10@kvz_angula
$LN8@kvz_angula:
	mov	al, BYTE PTR _y$12[ebp]
	add	al, 1
	mov	BYTE PTR _y$12[ebp], al
$LN10@kvz_angula:
	movsx	eax, BYTE PTR _y$12[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	$LN9@kvz_angula

; 117  :       delta_pos += sample_disp;

	movsx	eax, BYTE PTR _sample_disp$[ebp]
	add	eax, DWORD PTR _delta_pos$13[ebp]
	mov	DWORD PTR _delta_pos$13[ebp], eax

; 118  :       int_fast8_t delta_int = delta_pos >> 5;

	mov	eax, DWORD PTR _delta_pos$13[ebp]
	sar	eax, 5
	mov	BYTE PTR _delta_int$11[ebp], al

; 119  :       int_fast8_t delta_fract = delta_pos & (32 - 1);

	mov	eax, DWORD PTR _delta_pos$13[ebp]
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _delta_fract$10[ebp], al

; 120  : 
; 121  :       if (delta_fract) {

	movsx	eax, BYTE PTR _delta_fract$10[ebp]
	test	eax, eax
	je	$LN33@kvz_angula

; 122  :         // Do linear filtering
; 123  :         for (int_fast8_t x = 0; x < width; ++x) {

	mov	BYTE PTR _x$9[ebp], 0
	jmp	SHORT $LN13@kvz_angula
$LN11@kvz_angula:
	mov	al, BYTE PTR _x$9[ebp]
	add	al, 1
	mov	BYTE PTR _x$9[ebp], al
$LN13@kvz_angula:
	movsx	eax, BYTE PTR _x$9[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	$LN12@kvz_angula

; 124  :           kvz_pixel ref1 = ref_main[x + delta_int];

	movsx	eax, BYTE PTR _x$9[ebp]
	movsx	ecx, BYTE PTR _delta_int$11[ebp]
	add	ecx, DWORD PTR _ref_main$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _ref1$8[ebp], dl

; 125  :           kvz_pixel ref2 = ref_main[x + delta_int + 1];

	movsx	eax, BYTE PTR _x$9[ebp]
	movsx	ecx, BYTE PTR _delta_int$11[ebp]
	add	ecx, DWORD PTR _ref_main$[ebp]
	mov	dl, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR _ref2$7[ebp], dl

; 126  :           dst[y * width + x] = ((32 - delta_fract) * ref1 + delta_fract * ref2 + 16) >> 5;

	movsx	eax, BYTE PTR _delta_fract$10[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	movzx	edx, BYTE PTR _ref1$8[ebp]
	imul	ecx, edx
	movsx	eax, BYTE PTR _delta_fract$10[ebp]
	movzx	edx, BYTE PTR _ref2$7[ebp]
	imul	eax, edx
	lea	eax, DWORD PTR [ecx+eax+16]
	sar	eax, 5
	movsx	ecx, BYTE PTR _y$12[ebp]
	movsx	edx, BYTE PTR _width$[ebp]
	imul	ecx, edx
	movsx	edx, BYTE PTR _x$9[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 127  :         }

	jmp	$LN11@kvz_angula
$LN12@kvz_angula:

; 128  :       }

	jmp	SHORT $LN34@kvz_angula
$LN33@kvz_angula:

; 129  :       else {
; 130  :         // Just copy the integer samples
; 131  :         for (int_fast8_t x = 0; x < width; x++) {

	mov	BYTE PTR _x$6[ebp], 0
	jmp	SHORT $LN16@kvz_angula
$LN14@kvz_angula:
	mov	al, BYTE PTR _x$6[ebp]
	add	al, 1
	mov	BYTE PTR _x$6[ebp], al
$LN16@kvz_angula:
	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN34@kvz_angula

; 132  :           dst[y * width + x] = ref_main[x + delta_int];

	movsx	eax, BYTE PTR _x$6[ebp]
	movsx	ecx, BYTE PTR _delta_int$11[ebp]
	add	eax, ecx
	movsx	edx, BYTE PTR _y$12[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	edx, ecx
	movsx	ecx, BYTE PTR _x$6[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	mov	esi, DWORD PTR _ref_main$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al

; 133  :         }

	jmp	SHORT $LN14@kvz_angula
$LN34@kvz_angula:

; 134  :       }
; 135  :     }

	jmp	$LN8@kvz_angula
$LN9@kvz_angula:

; 136  :   }

	jmp	SHORT $LN32@kvz_angula
$LN31@kvz_angula:

; 137  :   else {
; 138  :     // Mode is horizontal or vertical, just copy the pixels.
; 139  : 
; 140  :     for (int_fast8_t y = 0; y < width; ++y) {

	mov	BYTE PTR _y$5[ebp], 0
	jmp	SHORT $LN19@kvz_angula
$LN17@kvz_angula:
	mov	al, BYTE PTR _y$5[ebp]
	add	al, 1
	mov	BYTE PTR _y$5[ebp], al
$LN19@kvz_angula:
	movsx	eax, BYTE PTR _y$5[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN32@kvz_angula

; 141  :       for (int_fast8_t x = 0; x < width; ++x) {

	mov	BYTE PTR _x$4[ebp], 0
	jmp	SHORT $LN22@kvz_angula
$LN20@kvz_angula:
	mov	al, BYTE PTR _x$4[ebp]
	add	al, 1
	mov	BYTE PTR _x$4[ebp], al
$LN22@kvz_angula:
	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN21@kvz_angula

; 142  :         dst[y * width + x] = ref_main[x];

	movsx	eax, BYTE PTR _x$4[ebp]
	movsx	ecx, BYTE PTR _y$5[ebp]
	movsx	edx, BYTE PTR _width$[ebp]
	imul	ecx, edx
	movsx	edx, BYTE PTR _x$4[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	mov	esi, DWORD PTR _ref_main$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al

; 143  :       }

	jmp	SHORT $LN20@kvz_angula
$LN21@kvz_angula:

; 144  :     }

	jmp	SHORT $LN17@kvz_angula
$LN32@kvz_angula:

; 145  :   }
; 146  : 
; 147  :   // Flip the block if this is was a horizontal mode.
; 148  :   if (!vertical_mode) {

	movzx	eax, BYTE PTR _vertical_mode$[ebp]
	test	eax, eax
	jne	$LN1@kvz_angula

; 149  :     for (int_fast8_t y = 0; y < width - 1; ++y) {

	mov	BYTE PTR _y$3[ebp], 0
	jmp	SHORT $LN25@kvz_angula
$LN23@kvz_angula:
	mov	al, BYTE PTR _y$3[ebp]
	add	al, 1
	mov	BYTE PTR _y$3[ebp], al
$LN25@kvz_angula:
	movsx	eax, BYTE PTR _y$3[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jge	$LN1@kvz_angula

; 150  :       for (int_fast8_t x = y + 1; x < width; ++x) {

	movsx	eax, BYTE PTR _y$3[ebp]
	add	eax, 1
	mov	BYTE PTR _x$2[ebp], al
	jmp	SHORT $LN28@kvz_angula
$LN26@kvz_angula:
	mov	al, BYTE PTR _x$2[ebp]
	add	al, 1
	mov	BYTE PTR _x$2[ebp], al
$LN28@kvz_angula:
	movsx	eax, BYTE PTR _x$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN27@kvz_angula

; 151  :         SWAP(dst[y * width + x], dst[x * width + y], kvz_pixel);

	movsx	eax, BYTE PTR _y$3[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	eax, ecx
	movsx	edx, BYTE PTR _x$2[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR _tempval$1[ebp], al
	movsx	eax, BYTE PTR _x$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	eax, ecx
	movsx	edx, BYTE PTR _y$3[ebp]
	add	eax, edx
	movsx	ecx, BYTE PTR _y$3[ebp]
	movsx	edx, BYTE PTR _width$[ebp]
	imul	ecx, edx
	movsx	edx, BYTE PTR _x$2[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al
	movsx	eax, BYTE PTR _x$2[ebp]
	movsx	ecx, BYTE PTR _width$[ebp]
	imul	eax, ecx
	movsx	edx, BYTE PTR _y$3[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR _tempval$1[ebp]
	mov	BYTE PTR [edx+eax], cl

; 152  :       }

	jmp	$LN26@kvz_angula
$LN27@kvz_angula:

; 153  :     }

	jmp	$LN23@kvz_angula
$LN1@kvz_angula:

; 154  :   }
; 155  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@kvz_angula
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN59@kvz_angula:
	DD	1
	DD	$LN58@kvz_angula
$LN58@kvz_angula:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN57@kvz_angula
$LN57@kvz_angula:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	0
_kvz_angular_pred_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\intra-generic.c
;	COMDAT _kvz_strategy_register_intra_generic
_TEXT	SEGMENT
tv95 = -208						; size = 4
tv84 = -208						; size = 4
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_intra_generic PROC		; COMDAT

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FD9E72A4_intra-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 246  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 247  : 
; 248  :   success &= kvz_strategyselector_register(opaque, "angular_pred", "generic", 0, &kvz_angular_pred_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_angular_pred_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0N@NMFCEONC@angular_pred@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 249  :   success &= kvz_strategyselector_register(opaque, "intra_pred_planar", "generic", 0, &kvz_intra_pred_planar_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_intra_pred_planar_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BC@KPOCLILL@intra_pred_planar@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN5@kvz_strate
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@kvz_strate
$LN5@kvz_strate:
	mov	DWORD PTR tv84[ebp], 1
$LN6@kvz_strate:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 250  :   success &= kvz_strategyselector_register(opaque, "intra_pred_filtered_dc", "generic", 0, &kvz_intra_pred_filtered_dc_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_intra_pred_filtered_dc_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN7@kvz_strate
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@kvz_strate
$LN7@kvz_strate:
	mov	DWORD PTR tv95[ebp], 1
$LN8@kvz_strate:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 251  : 
; 252  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 253  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_intra_generic ENDP
_TEXT	ENDS
END
