; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__C34A0D60_ipol-generic@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+4
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategy_register_ipol_generic
PUBLIC	_kvz_sample_quarterpel_luma_generic
PUBLIC	_kvz_sample_quarterpel_luma_hi_generic
PUBLIC	_kvz_sample_octpel_chroma_generic
PUBLIC	_kvz_sample_octpel_chroma_hi_generic
PUBLIC	_kvz_eight_tap_filter_hor_generic
PUBLIC	_kvz_eight_tap_filter_hor_16bit_generic
PUBLIC	_kvz_eight_tap_filter_ver_generic
PUBLIC	_kvz_eight_tap_filter_ver_16bit_generic
PUBLIC	_kvz_four_tap_filter_hor_generic
PUBLIC	_kvz_four_tap_filter_hor_16bit_generic
PUBLIC	_kvz_four_tap_filter_ver_generic
PUBLIC	_kvz_four_tap_filter_ver_16bit_generic
PUBLIC	_kvz_filter_hpel_blocks_hor_ver_luma_generic
PUBLIC	_kvz_filter_hpel_blocks_diag_luma_generic
PUBLIC	_kvz_filter_qpel_blocks_hor_ver_luma_generic
PUBLIC	_kvz_filter_qpel_blocks_diag_luma_generic
PUBLIC	_kvz_get_extended_block_generic
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
EXTRN	_memset:PROC
EXTRN	_kvz_fast_clip_16bit_to_pixel:PROC
EXTRN	_kvz_fast_clip_32bit_to_pixel:PROC
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_g_luma_filter:BYTE
EXTRN	_kvz_g_chroma_filter:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_get_extended_block_generic
_TEXT	SEGMENT
tv255 = -480						; size = 4
tv226 = -480						; size = 4
tv196 = -480						; size = 4
tv170 = -480						; size = 4
tv256 = -476						; size = 4
tv227 = -476						; size = 4
tv197 = -476						; size = 4
tv171 = -476						; size = 4
tv128 = -476						; size = 4
tv80 = -476						; size = 4
tv273 = -472						; size = 4
tv244 = -472						; size = 4
tv211 = -472						; size = 4
tv183 = -472						; size = 4
tv161 = -472						; size = 4
tv94 = -472						; size = 4
tv78 = -472						; size = 4
_temp_ptr$1 = -272					; size = 4
_dst$2 = -260						; size = 4
_y_simd$3 = -248					; size = 4
_i$4 = -236						; size = 4
_i$5 = -224						; size = 4
_i$6 = -212						; size = 4
_dst_r$7 = -200						; size = 4
_dst_m$8 = -188						; size = 4
_dst_l$9 = -176						; size = 4
_src_m$10 = -164					; size = 4
_sample_r$11 = -152					; size = 4
_sample_l$12 = -140					; size = 4
_clipped_y$13 = -128					; size = 4
_y$14 = -116						; size = 4
_cnt_m$15 = -104					; size = 4
_cnt_r$16 = -92						; size = 4
_cnt_l$17 = -80						; size = 4
_out_of_bounds_x$ = -65					; size = 1
_max_x$ = -56						; size = 4
_min_x$ = -44						; size = 4
_out_of_bounds_y$ = -29					; size = 1
_max_y$ = -20						; size = 4
_min_y$ = -8						; size = 4
_args$ = 8						; size = 4
_kvz_get_extended_block_generic PROC			; COMDAT

; 761  : void kvz_get_extended_block_generic(kvz_epol_args *args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 762  : 
; 763  :   int min_y = args->blk_y - args->pad_t;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _min_y$[ebp], edx

; 764  :   int max_y = args->blk_y + args->blk_h + args->pad_b + args->pad_b_simd - 1;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+48]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _max_y$[ebp], ecx

; 765  :   bool out_of_bounds_y = (min_y < 0) || (max_y >= args->src_h);

	cmp	DWORD PTR _min_y$[ebp], 0
	jl	SHORT $LN21@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _max_y$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN21@kvz_get_ex
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN22@kvz_get_ex
$LN21@kvz_get_ex:
	mov	DWORD PTR tv78[ebp], 1
$LN22@kvz_get_ex:
	cmp	DWORD PTR tv78[ebp], 0
	jne	SHORT $LN23@kvz_get_ex
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN24@kvz_get_ex
$LN23@kvz_get_ex:
	mov	DWORD PTR tv80[ebp], 1
$LN24@kvz_get_ex:
	mov	dl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _out_of_bounds_y$[ebp], dl

; 766  : 
; 767  :   int min_x = args->blk_x - args->pad_l;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _min_x$[ebp], edx

; 768  :   int max_x = args->blk_x + args->blk_w + args->pad_r - 1;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+36]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	DWORD PTR _max_x$[ebp], eax

; 769  :   bool out_of_bounds_x = (min_x < 0) || (max_x >= args->src_w);

	cmp	DWORD PTR _min_x$[ebp], 0
	jl	SHORT $LN25@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _max_x$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN25@kvz_get_ex
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN26@kvz_get_ex
$LN25@kvz_get_ex:
	mov	DWORD PTR tv94[ebp], 1
$LN26@kvz_get_ex:
	cmp	DWORD PTR tv94[ebp], 0
	jne	SHORT $LN27@kvz_get_ex
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN28@kvz_get_ex
$LN27@kvz_get_ex:
	mov	DWORD PTR tv128[ebp], 1
$LN28@kvz_get_ex:
	mov	dl, BYTE PTR tv128[ebp]
	mov	BYTE PTR _out_of_bounds_x$[ebp], dl

; 770  : 
; 771  :   if (out_of_bounds_y || out_of_bounds_x) {

	movzx	eax, BYTE PTR _out_of_bounds_y$[ebp]
	test	eax, eax
	jne	SHORT $LN19@kvz_get_ex
	movzx	eax, BYTE PTR _out_of_bounds_x$[ebp]
	test	eax, eax
	je	$LN17@kvz_get_ex
$LN19@kvz_get_ex:

; 772  : 
; 773  :     *args->ext = args->buf;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx], eax

; 774  :     *args->ext_s = args->pad_l + args->blk_w + args->pad_r;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [eax], ecx

; 775  :     *args->ext_origin = args->buf + args->pad_t * (*args->ext_s) + args->pad_l;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+40]
	imul	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	add	edx, eax
	mov	eax, DWORD PTR _args$[ebp]
	add	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax], edx

; 776  : 
; 777  :     // Note that stride equals width here.
; 778  :     int cnt_l = CLIP(0, *args->ext_s, -min_x);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _min_x$[ebp]
	neg	edx
	cmp	DWORD PTR [ecx], edx
	jge	SHORT $LN29@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv161[ebp], edx
	jmp	SHORT $LN30@kvz_get_ex
$LN29@kvz_get_ex:
	mov	eax, DWORD PTR _min_x$[ebp]
	neg	eax
	mov	DWORD PTR tv161[ebp], eax
$LN30@kvz_get_ex:
	cmp	DWORD PTR tv161[ebp], 0
	jge	SHORT $LN33@kvz_get_ex
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN34@kvz_get_ex
$LN33@kvz_get_ex:
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _min_x$[ebp]
	neg	eax
	cmp	DWORD PTR [edx], eax
	jge	SHORT $LN31@kvz_get_ex
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN32@kvz_get_ex
$LN31@kvz_get_ex:
	mov	ecx, DWORD PTR _min_x$[ebp]
	neg	ecx
	mov	DWORD PTR tv170[ebp], ecx
$LN32@kvz_get_ex:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv171[ebp], edx
$LN34@kvz_get_ex:
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR _cnt_l$17[ebp], eax

; 779  :     int cnt_r = CLIP(0, *args->ext_s, max_x - (args->src_w - 1));

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	edx, DWORD PTR _max_x$[ebp]
	sub	edx, eax
	cmp	DWORD PTR [ecx], edx
	jge	SHORT $LN35@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv183[ebp], edx
	jmp	SHORT $LN36@kvz_get_ex
$LN35@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _max_x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv183[ebp], edx
$LN36@kvz_get_ex:
	cmp	DWORD PTR tv183[ebp], 0
	jge	SHORT $LN39@kvz_get_ex
	mov	DWORD PTR tv197[ebp], 0
	jmp	SHORT $LN40@kvz_get_ex
$LN39@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	edx, DWORD PTR _max_x$[ebp]
	sub	edx, eax
	cmp	DWORD PTR [ecx], edx
	jge	SHORT $LN37@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv196[ebp], edx
	jmp	SHORT $LN38@kvz_get_ex
$LN37@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _max_x$[ebp]
	sub	edx, ecx
	mov	DWORD PTR tv196[ebp], edx
$LN38@kvz_get_ex:
	mov	eax, DWORD PTR tv196[ebp]
	mov	DWORD PTR tv197[ebp], eax
$LN40@kvz_get_ex:
	mov	ecx, DWORD PTR tv197[ebp]
	mov	DWORD PTR _cnt_r$16[ebp], ecx

; 780  :     int cnt_m = CLIP(0, *args->ext_s, *args->ext_s - cnt_l - cnt_r);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR _cnt_l$17[ebp]
	sub	edx, DWORD PTR _cnt_r$16[ebp]
	cmp	DWORD PTR [ecx], edx
	jge	SHORT $LN41@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv211[ebp], edx
	jmp	SHORT $LN42@kvz_get_ex
$LN41@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _cnt_l$17[ebp]
	sub	edx, DWORD PTR _cnt_r$16[ebp]
	mov	DWORD PTR tv211[ebp], edx
$LN42@kvz_get_ex:
	cmp	DWORD PTR tv211[ebp], 0
	jge	SHORT $LN45@kvz_get_ex
	mov	DWORD PTR tv227[ebp], 0
	jmp	SHORT $LN46@kvz_get_ex
$LN45@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR _cnt_l$17[ebp]
	sub	edx, DWORD PTR _cnt_r$16[ebp]
	cmp	DWORD PTR [ecx], edx
	jge	SHORT $LN43@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv226[ebp], edx
	jmp	SHORT $LN44@kvz_get_ex
$LN43@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _cnt_l$17[ebp]
	sub	edx, DWORD PTR _cnt_r$16[ebp]
	mov	DWORD PTR tv226[ebp], edx
$LN44@kvz_get_ex:
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR tv227[ebp], eax
$LN46@kvz_get_ex:
	mov	ecx, DWORD PTR tv227[ebp]
	mov	DWORD PTR _cnt_m$15[ebp], ecx

; 781  : 
; 782  :     // For each row including real padding.
; 783  :     // Don't read "don't care" values (SIMD padding). Zero them out.
; 784  :     int y;
; 785  :     for (y = -args->pad_t; y < args->blk_h + args->pad_b; ++y) {

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	neg	ecx
	mov	DWORD PTR _y$14[ebp], ecx
	jmp	SHORT $LN4@kvz_get_ex
$LN2@kvz_get_ex:
	mov	eax, DWORD PTR _y$14[ebp]
	add	eax, 1
	mov	DWORD PTR _y$14[ebp], eax
$LN4@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+44]
	cmp	DWORD PTR _y$14[ebp], ecx
	jge	$LN3@kvz_get_ex

; 786  : 
; 787  :       int clipped_y = CLIP(0, args->src_h - 1, args->blk_y + y);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _y$14[ebp]
	cmp	ecx, eax
	jge	SHORT $LN47@kvz_get_ex
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR tv244[ebp], edx
	jmp	SHORT $LN48@kvz_get_ex
$LN47@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _y$14[ebp]
	mov	DWORD PTR tv244[ebp], ecx
$LN48@kvz_get_ex:
	cmp	DWORD PTR tv244[ebp], 0
	jge	SHORT $LN51@kvz_get_ex
	mov	DWORD PTR tv256[ebp], 0
	jmp	SHORT $LN52@kvz_get_ex
$LN51@kvz_get_ex:
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _y$14[ebp]
	cmp	eax, edx
	jge	SHORT $LN49@kvz_get_ex
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv255[ebp], ecx
	jmp	SHORT $LN50@kvz_get_ex
$LN49@kvz_get_ex:
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _y$14[ebp]
	mov	DWORD PTR tv255[ebp], eax
$LN50@kvz_get_ex:
	mov	ecx, DWORD PTR tv255[ebp]
	mov	DWORD PTR tv256[ebp], ecx
$LN52@kvz_get_ex:
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR _clipped_y$13[ebp], edx

; 788  :       kvz_pixel *sample_l = args->src + clipped_y * args->src_s;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _clipped_y$13[ebp]
	imul	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _sample_l$12[ebp], ecx

; 789  :       kvz_pixel *sample_r = args->src + clipped_y * args->src_s + args->src_w - 1;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _clipped_y$13[ebp]
	imul	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx-1]
	mov	DWORD PTR _sample_r$11[ebp], eax

; 790  :       kvz_pixel *src_m = args->src + clipped_y * args->src_s + MAX(min_x, 0);

	cmp	DWORD PTR _min_x$[ebp], 0
	jle	SHORT $LN53@kvz_get_ex
	mov	eax, DWORD PTR _min_x$[ebp]
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN54@kvz_get_ex
$LN53@kvz_get_ex:
	mov	DWORD PTR tv273[ebp], 0
$LN54@kvz_get_ex:
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _clipped_y$13[ebp]
	imul	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	add	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR _src_m$10[ebp], ecx

; 791  :       kvz_pixel *dst_l = args->buf + (y + args->pad_t) * (*args->ext_s);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _y$14[ebp]
	add	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+64]
	imul	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _dst_l$9[ebp], ecx

; 792  :       kvz_pixel *dst_m = dst_l + cnt_l;

	mov	eax, DWORD PTR _dst_l$9[ebp]
	add	eax, DWORD PTR _cnt_l$17[ebp]
	mov	DWORD PTR _dst_m$8[ebp], eax

; 793  :       kvz_pixel *dst_r = dst_m + cnt_m;

	mov	eax, DWORD PTR _dst_m$8[ebp]
	add	eax, DWORD PTR _cnt_m$15[ebp]
	mov	DWORD PTR _dst_r$7[ebp], eax

; 794  :       for (int i = 0; i < cnt_l; ++i) *(dst_l + i) = *sample_l;

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN7@kvz_get_ex
$LN5@kvz_get_ex:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN7@kvz_get_ex:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _cnt_l$17[ebp]
	jge	SHORT $LN6@kvz_get_ex
	mov	eax, DWORD PTR _dst_l$9[ebp]
	add	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _sample_l$12[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN5@kvz_get_ex
$LN6@kvz_get_ex:

; 795  :       for (int i = 0; i < cnt_m; ++i) *(dst_m + i) = *(src_m + i);

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN10@kvz_get_ex
$LN8@kvz_get_ex:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN10@kvz_get_ex:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _cnt_m$15[ebp]
	jge	SHORT $LN9@kvz_get_ex
	mov	eax, DWORD PTR _dst_m$8[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _src_m$10[ebp]
	add	ecx, DWORD PTR _i$5[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN8@kvz_get_ex
$LN9@kvz_get_ex:

; 796  :       for (int i = 0; i < cnt_r; ++i) *(dst_r + i) = *sample_r;

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN13@kvz_get_ex
$LN11@kvz_get_ex:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN13@kvz_get_ex:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _cnt_r$16[ebp]
	jge	SHORT $LN12@kvz_get_ex
	mov	eax, DWORD PTR _dst_r$7[ebp]
	add	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _sample_r$11[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN11@kvz_get_ex
$LN12@kvz_get_ex:

; 797  :     }

	jmp	$LN2@kvz_get_ex
$LN3@kvz_get_ex:

; 798  : 
; 799  :     for (int y_simd = 0; y_simd < args->pad_b_simd; ++y_simd) {

	mov	DWORD PTR _y_simd$3[ebp], 0
	jmp	SHORT $LN16@kvz_get_ex
$LN14@kvz_get_ex:
	mov	eax, DWORD PTR _y_simd$3[ebp]
	add	eax, 1
	mov	DWORD PTR _y_simd$3[ebp], eax
$LN16@kvz_get_ex:
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _y_simd$3[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jge	SHORT $LN15@kvz_get_ex

; 800  :       kvz_pixel *dst = args->buf + (y + args->pad_t + y_simd) * (*args->ext_s);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _y$14[ebp]
	add	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _y_simd$3[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+64]
	imul	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR _dst$2[ebp], ecx

; 801  :       FILL_ARRAY(dst, 0, *args->ext_s);

	mov	eax, DWORD PTR _dst$2[ebp]
	mov	DWORD PTR _temp_ptr$1[ebp], eax
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	mov	eax, DWORD PTR _temp_ptr$1[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 802  :     }

	jmp	SHORT $LN14@kvz_get_ex
$LN15@kvz_get_ex:

; 803  : 
; 804  :   } else {

	jmp	SHORT $LN1@kvz_get_ex
$LN17@kvz_get_ex:

; 805  : 
; 806  :     *args->ext = args->src + (args->blk_y - args->pad_t) * args->src_s + (args->blk_x - args->pad_l);

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _args$[ebp]
	imul	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [ecx]
	add	eax, edx
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	sub	ecx, DWORD PTR [edx+32]
	add	eax, ecx
	mov	edx, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx], eax

; 807  :     *args->ext_origin = args->src + args->blk_y * args->src_s + args->blk_x;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR _args$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx], ecx

; 808  :     *args->ext_s = args->src_s;

	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], eax
$LN1@kvz_get_ex:

; 809  :   }
; 810  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_get_extended_block_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_filter_qpel_blocks_diag_luma_generic
_TEXT	SEGMENT
tv365 = -616						; size = 4
tv360 = -616						; size = 4
tv307 = -616						; size = 4
tv302 = -616						; size = 4
tv249 = -616						; size = 4
tv244 = -616						; size = 4
tv159 = -616						; size = 4
tv154 = -616						; size = 4
tv95 = -616						; size = 4
tv92 = -616						; size = 4
tv89 = -616						; size = 4
tv86 = -616						; size = 4
tv83 = -616						; size = 4
tv80 = -616						; size = 4
_sample$1 = -416					; size = 2
_xpos$2 = -404						; size = 4
_ypos$3 = -392						; size = 4
_sample$4 = -380					; size = 2
_sample$5 = -368					; size = 2
_xpos$6 = -356						; size = 4
_ypos$7 = -344						; size = 4
_sample$8 = -332					; size = 2
_sample$9 = -320					; size = 2
_xpos$10 = -308						; size = 4
_ypos$11 = -296						; size = 4
_sample$12 = -284					; size = 2
_sample$13 = -272					; size = 2
_xpos$14 = -260						; size = 4
_ypos$15 = -248						; size = 4
_sample$16 = -236					; size = 2
_off_y_fir_b$ = -224					; size = 4
_off_y_fir_t$ = -212					; size = 4
_off_x_fir_r$ = -200					; size = 4
_off_x_fir_l$ = -188					; size = 4
_ver_fir_b$ = -176					; size = 4
_ver_fir_t$ = -164					; size = 4
_hor_stride$ = -152					; size = 2
_dst_stride$ = -140					; size = 2
_col_pos_r$ = -128					; size = 4
_col_pos_l$ = -116					; size = 4
_hor_pos_r$ = -104					; size = 4
_hor_pos_l$ = -92					; size = 4
_fir3$ = -80						; size = 4
_fir1$ = -68						; size = 4
_wp_offset1$ = -56					; size = 4
_wp_shift1$ = -44					; size = 4
_shift2$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_filtered$ = 28						; size = 4
_hor_intermediate$ = 32					; size = 4
_fme_level$ = 36					; size = 1
_hor_first_cols$ = 40					; size = 4
_hpel_off_x$ = 44					; size = 1
_hpel_off_y$ = 48					; size = 1
_kvz_filter_qpel_blocks_diag_luma_generic PROC		; COMDAT

; 579  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 616				; 00000268H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-616]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 580  :   int x, y;
; 581  : 
; 582  :   // Interpolation filter shifts
; 583  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 584  : 
; 585  :   // Weighted prediction offset and shift
; 586  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 587  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 588  : 
; 589  :   int8_t *fir1 = kvz_g_luma_filter[1];

	mov	eax, 8
	shl	eax, 0
	add	eax, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir1$[ebp], eax

; 590  :   int8_t *fir3 = kvz_g_luma_filter[3];

	mov	eax, 8
	imul	ecx, eax, 3
	add	ecx, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir3$[ebp], ecx

; 591  : 
; 592  :   // Horiziontal positions.
; 593  :   int16_t *hor_pos_l = hor_intermediate[3];

	mov	eax, 9216				; 00002400H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos_l$[ebp], ecx

; 594  :   int16_t *hor_pos_r = hor_intermediate[4];

	mov	eax, 9216				; 00002400H
	shl	eax, 2
	add	eax, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos_r$[ebp], eax

; 595  : 
; 596  :   int16_t *col_pos_l = hor_first_cols[1];

	mov	eax, 144				; 00000090H
	shl	eax, 0
	add	eax, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos_l$[ebp], eax

; 597  :   int16_t *col_pos_r = hor_first_cols[3];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos_r$[ebp], ecx

; 598  : 
; 599  :   int16_t dst_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _dst_stride$[ebp], ax

; 600  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 601  : 
; 602  :   // VERTICAL STEP
; 603  :   int8_t *ver_fir_t = hpel_off_y != 0 ? fir1 : fir3;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN31@kvz_filter
	mov	ecx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN32@kvz_filter
$LN31@kvz_filter:
	mov	edx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv80[ebp], edx
$LN32@kvz_filter:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _ver_fir_t$[ebp], eax

; 604  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN33@kvz_filter
	mov	ecx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN34@kvz_filter
$LN33@kvz_filter:
	mov	edx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN34@kvz_filter:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _ver_fir_b$[ebp], eax

; 605  : 
; 606  :   // Specify if integer pixels are filtered from left or/and top integer samples
; 607  :   int off_x_fir_l = hpel_off_x < 1 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	cmp	eax, 1
	jge	SHORT $LN35@kvz_filter
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN36@kvz_filter
$LN35@kvz_filter:
	mov	DWORD PTR tv86[ebp], 1
$LN36@kvz_filter:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _off_x_fir_l$[ebp], ecx

; 608  :   int off_x_fir_r = hpel_off_x < 0 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	jge	SHORT $LN37@kvz_filter
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN38@kvz_filter
$LN37@kvz_filter:
	mov	DWORD PTR tv89[ebp], 1
$LN38@kvz_filter:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _off_x_fir_r$[ebp], ecx

; 609  :   int off_y_fir_t = hpel_off_y < 1 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	cmp	eax, 1
	jge	SHORT $LN39@kvz_filter
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN40@kvz_filter
$LN39@kvz_filter:
	mov	DWORD PTR tv92[ebp], 1
$LN40@kvz_filter:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _off_y_fir_t$[ebp], ecx

; 610  :   int off_y_fir_b = hpel_off_y < 0 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	jge	SHORT $LN41@kvz_filter
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN42@kvz_filter
$LN41@kvz_filter:
	mov	DWORD PTR tv95[ebp], 1
$LN42@kvz_filter:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _off_y_fir_b$[ebp], ecx

; 611  : 
; 612  :   // Top-left QPEL
; 613  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_filter
$LN2@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN3@kvz_filter

; 614  :     if (!off_x_fir_l) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN26@kvz_filter

; 615  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 616  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_l[y + off_y_fir_t]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	ecx, DWORD PTR _col_pos_l$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_t$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$16[ebp], ax

; 617  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$16[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$16[ebp], cx

; 618  :       filtered[0][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$16[ebp]
	mov	BYTE PTR [edx+ecx], al
$LN26@kvz_filter:

; 619  :     }
; 620  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN43@kvz_filter
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN44@kvz_filter
$LN43@kvz_filter:
	mov	DWORD PTR tv154[ebp], 0
$LN44@kvz_filter:
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN7@kvz_filter
$LN5@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN6@kvz_filter

; 621  :       int ypos = y + off_y_fir_t;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	DWORD PTR _ypos$15[ebp], eax

; 622  :       int xpos = x - !off_x_fir_l;

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN45@kvz_filter
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN46@kvz_filter
$LN45@kvz_filter:
	mov	DWORD PTR tv159[ebp], 0
$LN46@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR _xpos$14[ebp], eax

; 623  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$15[ebp]
	add	ecx, DWORD PTR _xpos$14[ebp]
	mov	edx, DWORD PTR _hor_pos_l$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_t$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$13[ebp], ax

; 624  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$13[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$13[ebp], cx

; 625  :       filtered[0][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$13[ebp]
	mov	BYTE PTR [edx+ecx], al

; 626  :     }

	jmp	$LN5@kvz_filter
$LN6@kvz_filter:

; 627  :   }

	jmp	$LN2@kvz_filter
$LN3@kvz_filter:

; 628  : 
; 629  :   // Top-right QPEL
; 630  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_filter
$LN8@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN9@kvz_filter

; 631  :     if (!off_x_fir_r) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN27@kvz_filter

; 632  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 633  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_r[y + off_y_fir_t]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	ecx, DWORD PTR _col_pos_r$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_t$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$12[ebp], ax

; 634  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$12[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$12[ebp], cx

; 635  :       filtered[1][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$12[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN27@kvz_filter:

; 636  :     }
; 637  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN47@kvz_filter
	mov	DWORD PTR tv244[ebp], 1
	jmp	SHORT $LN48@kvz_filter
$LN47@kvz_filter:
	mov	DWORD PTR tv244[ebp], 0
$LN48@kvz_filter:
	mov	eax, DWORD PTR tv244[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN13@kvz_filter
$LN11@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN12@kvz_filter

; 638  :       int ypos = y + off_y_fir_t;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	DWORD PTR _ypos$11[ebp], eax

; 639  :       int xpos = x - !off_x_fir_r;

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN49@kvz_filter
	mov	DWORD PTR tv249[ebp], 1
	jmp	SHORT $LN50@kvz_filter
$LN49@kvz_filter:
	mov	DWORD PTR tv249[ebp], 0
$LN50@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv249[ebp]
	mov	DWORD PTR _xpos$10[ebp], eax

; 640  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$11[ebp]
	add	ecx, DWORD PTR _xpos$10[ebp]
	mov	edx, DWORD PTR _hor_pos_r$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_t$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$9[ebp], ax

; 641  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$9[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$9[ebp], cx

; 642  :       filtered[1][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$9[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 643  :     }

	jmp	$LN11@kvz_filter
$LN12@kvz_filter:

; 644  :   }

	jmp	$LN8@kvz_filter
$LN9@kvz_filter:

; 645  : 
; 646  :   // Bottom-left QPEL
; 647  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN16@kvz_filter
$LN14@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN16@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN15@kvz_filter

; 648  :     if (!off_x_fir_l) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN28@kvz_filter

; 649  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 650  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_l[y + off_y_fir_b]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	ecx, DWORD PTR _col_pos_l$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_b$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$8[ebp], ax

; 651  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$8[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$8[ebp], cx

; 652  :       filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$8[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN28@kvz_filter:

; 653  :     }
; 654  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN51@kvz_filter
	mov	DWORD PTR tv302[ebp], 1
	jmp	SHORT $LN52@kvz_filter
$LN51@kvz_filter:
	mov	DWORD PTR tv302[ebp], 0
$LN52@kvz_filter:
	mov	eax, DWORD PTR tv302[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN19@kvz_filter
$LN17@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN19@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN18@kvz_filter

; 655  :       int ypos = y + off_y_fir_b;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	DWORD PTR _ypos$7[ebp], eax

; 656  :       int xpos = x - !off_x_fir_l;

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN53@kvz_filter
	mov	DWORD PTR tv307[ebp], 1
	jmp	SHORT $LN54@kvz_filter
$LN53@kvz_filter:
	mov	DWORD PTR tv307[ebp], 0
$LN54@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR _xpos$6[ebp], eax

; 657  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$7[ebp]
	add	ecx, DWORD PTR _xpos$6[ebp]
	mov	edx, DWORD PTR _hor_pos_l$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_b$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$5[ebp], ax

; 658  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$5[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$5[ebp], cx

; 659  :       filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$5[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 660  :     }

	jmp	$LN17@kvz_filter
$LN18@kvz_filter:

; 661  :   }

	jmp	$LN14@kvz_filter
$LN15@kvz_filter:

; 662  : 
; 663  :   // Bottom-right QPEL
; 664  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@kvz_filter
$LN20@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN1@kvz_filter

; 665  :     if (!off_x_fir_r) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN29@kvz_filter

; 666  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 667  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_r[y + off_y_fir_b]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	ecx, DWORD PTR _col_pos_r$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_b$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$4[ebp], ax

; 668  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$4[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$4[ebp], cx

; 669  :       filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$4[ebp]
	mov	BYTE PTR [edx+ecx], al
$LN29@kvz_filter:

; 670  :     }
; 671  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN55@kvz_filter
	mov	DWORD PTR tv360[ebp], 1
	jmp	SHORT $LN56@kvz_filter
$LN55@kvz_filter:
	mov	DWORD PTR tv360[ebp], 0
$LN56@kvz_filter:
	mov	eax, DWORD PTR tv360[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN25@kvz_filter
$LN23@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN25@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN24@kvz_filter

; 672  :       int ypos = y + off_y_fir_b;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	DWORD PTR _ypos$3[ebp], eax

; 673  :       int xpos = x - !off_x_fir_r;

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN57@kvz_filter
	mov	DWORD PTR tv365[ebp], 1
	jmp	SHORT $LN58@kvz_filter
$LN57@kvz_filter:
	mov	DWORD PTR tv365[ebp], 0
$LN58@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv365[ebp]
	mov	DWORD PTR _xpos$2[ebp], eax

; 674  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$3[ebp]
	add	ecx, DWORD PTR _xpos$2[ebp]
	mov	edx, DWORD PTR _hor_pos_r$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_b$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$1[ebp], ax

; 675  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$1[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$1[ebp], cx

; 676  :       filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$1[ebp]
	mov	BYTE PTR [edx+ecx], al

; 677  :     }

	jmp	$LN23@kvz_filter
$LN24@kvz_filter:

; 678  :   }

	jmp	$LN20@kvz_filter
$LN1@kvz_filter:

; 679  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 616				; 00000268H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_qpel_blocks_diag_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_filter_qpel_blocks_hor_ver_luma_generic
_TEXT	SEGMENT
tv521 = -1060						; size = 4
tv516 = -1060						; size = 4
tv463 = -1060						; size = 4
tv458 = -1060						; size = 4
tv399 = -1060						; size = 4
tv370 = -1060						; size = 4
tv365 = -1060						; size = 4
tv312 = -1060						; size = 4
tv307 = -1060						; size = 4
tv280 = -1060						; size = 4
tv277 = -1060						; size = 4
tv274 = -1060						; size = 4
tv271 = -1060						; size = 4
tv148 = -1060						; size = 4
tv145 = -1060						; size = 4
tv142 = -1060						; size = 4
tv139 = -1060						; size = 4
tv136 = -1060						; size = 4
tv133 = -1060						; size = 4
tv94 = -1060						; size = 4
tv87 = -1060						; size = 4
tv84 = -1060						; size = 4
_sample$1 = -668					; size = 2
_xpos$2 = -656						; size = 4
_ypos$3 = -644						; size = 4
_sample$4 = -632					; size = 2
_sample$5 = -620					; size = 2
_xpos$6 = -608						; size = 4
_ypos$7 = -596						; size = 4
_sample$8 = -584					; size = 2
_sample_off_x$ = -572					; size = 4
_sample$9 = -560					; size = 2
_xpos$10 = -548						; size = 4
_ypos$11 = -536						; size = 4
_sample$12 = -524					; size = 2
_sample$13 = -512					; size = 2
_xpos$14 = -500						; size = 4
_ypos$15 = -488						; size = 4
_sample$16 = -476					; size = 2
_ver_fir_b$ = -464					; size = 4
_ver_fir_t$ = -452					; size = 4
_ver_fir_r$ = -440					; size = 4
_ver_fir_l$ = -428					; size = 4
_xpos$17 = -416						; size = 4
_ypos$18 = -404						; size = 4
_xpos$19 = -392						; size = 4
_ypos$20 = -380						; size = 4
_xpos$21 = -368						; size = 4
_ypos$22 = -356						; size = 4
_xpos$23 = -344						; size = 4
_ypos$24 = -332						; size = 4
_sample_off_y$ = -320					; size = 4
_off_y_fir_b$ = -308					; size = 4
_off_y_fir_t$ = -296					; size = 4
_off_x_fir_r$ = -284					; size = 4
_off_x_fir_l$ = -272					; size = 4
_col_pos_hor$ = -260					; size = 4
_hor_hpel_pos$ = -248					; size = 4
_hor_stride$ = -236					; size = 2
_dst_stride$ = -224					; size = 2
_col_pos_r$ = -212					; size = 4
_col_pos_l$ = -200					; size = 4
_hor_fir_r$ = -188					; size = 4
_hor_fir_l$ = -176					; size = 4
_hor_pos_r$ = -164					; size = 4
_hor_pos_l$ = -152					; size = 4
_hor_pos2$ = -140					; size = 4
_hor_pos0$ = -128					; size = 4
_fir3$ = -116						; size = 4
_fir1$ = -104						; size = 4
_fir2$ = -92						; size = 4
_fir0$ = -80						; size = 4
_wp_offset1$ = -68					; size = 4
_wp_shift1$ = -56					; size = 4
_shift2$ = -44						; size = 4
_shift1$ = -32						; size = 2
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_filtered$ = 28						; size = 4
_hor_intermediate$ = 32					; size = 4
_fme_level$ = 36					; size = 1
_hor_first_cols$ = 40					; size = 4
_hpel_off_x$ = 44					; size = 1
_hpel_off_y$ = 48					; size = 1
_kvz_filter_qpel_blocks_hor_ver_luma_generic PROC	; COMDAT

; 419  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1060				; 00000424H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1060]
	mov	ecx, 265				; 00000109H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 420  :   int x, y;
; 421  : 
; 422  :   // Interpolation filter shifts
; 423  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 424  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 425  : 
; 426  :   // Weighted prediction offset and shift
; 427  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 428  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 429  : 
; 430  :   int8_t *fir0 = kvz_g_luma_filter[0];

	mov	eax, 8
	imul	ecx, eax, 0
	add	ecx, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir0$[ebp], ecx

; 431  :   int8_t *fir2 = kvz_g_luma_filter[2];

	mov	eax, 8
	shl	eax, 1
	add	eax, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir2$[ebp], eax

; 432  :   int8_t *fir1 = kvz_g_luma_filter[1];

	mov	eax, 8
	shl	eax, 0
	add	eax, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir1$[ebp], eax

; 433  :   int8_t *fir3 = kvz_g_luma_filter[3];

	mov	eax, 8
	imul	ecx, eax, 3
	add	ecx, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir3$[ebp], ecx

; 434  : 
; 435  :   // Horiziontal positions. Positions 0 and 2 have already been calculated in filtered.
; 436  :   int16_t *hor_pos0 = hor_intermediate[0];

	mov	eax, 9216				; 00002400H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos0$[ebp], ecx

; 437  :   int16_t *hor_pos2 = hor_intermediate[1];

	mov	eax, 9216				; 00002400H
	shl	eax, 0
	add	eax, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos2$[ebp], eax

; 438  :   int16_t *hor_pos_l = hor_intermediate[3];

	mov	eax, 9216				; 00002400H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos_l$[ebp], ecx

; 439  :   int16_t *hor_pos_r = hor_intermediate[4];

	mov	eax, 9216				; 00002400H
	shl	eax, 2
	add	eax, DWORD PTR _hor_intermediate$[ebp]
	mov	DWORD PTR _hor_pos_r$[ebp], eax

; 440  :   int8_t *hor_fir_l  = hpel_off_x != 0 ? fir1 : fir3;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	je	SHORT $LN49@kvz_filter
	mov	ecx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN50@kvz_filter
$LN49@kvz_filter:
	mov	edx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN50@kvz_filter:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR _hor_fir_l$[ebp], eax

; 441  :   int8_t *hor_fir_r  = hpel_off_x != 0 ? fir3 : fir1;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	je	SHORT $LN51@kvz_filter
	mov	ecx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN52@kvz_filter
$LN51@kvz_filter:
	mov	edx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv87[ebp], edx
$LN52@kvz_filter:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR _hor_fir_r$[ebp], eax

; 442  :   int16_t *col_pos_l = hor_first_cols[1];

	mov	eax, 144				; 00000090H
	shl	eax, 0
	add	eax, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos_l$[ebp], eax

; 443  :   int16_t *col_pos_r = hor_first_cols[3];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos_r$[ebp], ecx

; 444  : 
; 445  :   int16_t dst_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _dst_stride$[ebp], ax

; 446  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 447  : 
; 448  :   int16_t *hor_hpel_pos = hpel_off_x != 0 ? hor_pos2 : hor_pos0;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	je	SHORT $LN53@kvz_filter
	mov	ecx, DWORD PTR _hor_pos2$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN54@kvz_filter
$LN53@kvz_filter:
	mov	edx, DWORD PTR _hor_pos0$[ebp]
	mov	DWORD PTR tv94[ebp], edx
$LN54@kvz_filter:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _hor_hpel_pos$[ebp], eax

; 449  :   int16_t *col_pos_hor  = hpel_off_x != 0 ? hor_first_cols[2] : hor_first_cols[0];

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	je	SHORT $LN55@kvz_filter
	mov	ecx, 144				; 00000090H
	shl	ecx, 1
	add	ecx, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	jmp	SHORT $LN56@kvz_filter
$LN55@kvz_filter:
	mov	edx, 144				; 00000090H
	imul	eax, edx, 0
	add	eax, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN56@kvz_filter:
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _col_pos_hor$[ebp], ecx

; 450  : 
; 451  :   // Specify if integer pixels are filtered from left or/and top integer samples
; 452  :   int off_x_fir_l = hpel_off_x < 1 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	cmp	eax, 1
	jge	SHORT $LN57@kvz_filter
	mov	DWORD PTR tv136[ebp], 0
	jmp	SHORT $LN58@kvz_filter
$LN57@kvz_filter:
	mov	DWORD PTR tv136[ebp], 1
$LN58@kvz_filter:
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR _off_x_fir_l$[ebp], ecx

; 453  :   int off_x_fir_r = hpel_off_x < 0 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	test	eax, eax
	jge	SHORT $LN59@kvz_filter
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN60@kvz_filter
$LN59@kvz_filter:
	mov	DWORD PTR tv139[ebp], 1
$LN60@kvz_filter:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _off_x_fir_r$[ebp], ecx

; 454  :   int off_y_fir_t = hpel_off_y < 1 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	cmp	eax, 1
	jge	SHORT $LN61@kvz_filter
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN62@kvz_filter
$LN61@kvz_filter:
	mov	DWORD PTR tv142[ebp], 1
$LN62@kvz_filter:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _off_y_fir_t$[ebp], ecx

; 455  :   int off_y_fir_b = hpel_off_y < 0 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	jge	SHORT $LN63@kvz_filter
	mov	DWORD PTR tv145[ebp], 0
	jmp	SHORT $LN64@kvz_filter
$LN63@kvz_filter:
	mov	DWORD PTR tv145[ebp], 1
$LN64@kvz_filter:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _off_y_fir_b$[ebp], ecx

; 456  :   
; 457  :   // HORIZONTAL STEP
; 458  :   // Left QPEL
; 459  :   int sample_off_y = hpel_off_y < 0 ? 0 : 1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	jge	SHORT $LN65@kvz_filter
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN66@kvz_filter
$LN65@kvz_filter:
	mov	DWORD PTR tv148[ebp], 1
$LN66@kvz_filter:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _sample_off_y$[ebp], ecx

; 460  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_filter
$LN2@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_filter

; 461  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_filter
$LN5@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_filter

; 462  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$24[ebp], eax

; 463  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xpos$23[ebp], eax

; 464  :       hor_pos_l[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_l, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$24[ebp]
	add	eax, DWORD PTR _xpos$23[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_fir_l$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	movsx	edx, WORD PTR _hor_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _hor_pos_l$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 465  :     }

	jmp	SHORT $LN5@kvz_filter
$LN6@kvz_filter:

; 466  :   }

	jmp	$LN2@kvz_filter
$LN3@kvz_filter:

; 467  : 
; 468  :   // Write the first column in contiguous memory
; 469  :   x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 470  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_filter
$LN8@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN9@kvz_filter

; 471  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$22[ebp], eax

; 472  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$21[ebp], eax

; 473  :     col_pos_l[y] = kvz_eight_tap_filter_hor_generic(hor_fir_l, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$22[ebp]
	add	eax, DWORD PTR _xpos$21[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_fir_l$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos_l$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 474  :   }

	jmp	SHORT $LN8@kvz_filter
$LN9@kvz_filter:

; 475  : 
; 476  :   // Right QPEL
; 477  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@kvz_filter
$LN11@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN13@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN12@kvz_filter

; 478  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN16@kvz_filter
$LN14@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN16@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN15@kvz_filter

; 479  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$20[ebp], eax

; 480  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xpos$19[ebp], eax

; 481  :       hor_pos_r[y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(hor_fir_r, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$20[ebp]
	add	eax, DWORD PTR _xpos$19[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_fir_r$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	movsx	edx, WORD PTR _hor_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _hor_pos_r$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 482  :     }

	jmp	SHORT $LN14@kvz_filter
$LN15@kvz_filter:

; 483  :   }

	jmp	$LN11@kvz_filter
$LN12@kvz_filter:

; 484  : 
; 485  :   // Write the first column in contiguous memory
; 486  :   x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 487  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN19@kvz_filter
$LN17@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN19@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN18@kvz_filter

; 488  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$18[ebp], eax

; 489  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$17[ebp], eax

; 490  :     col_pos_r[y] = kvz_eight_tap_filter_hor_generic(hor_fir_r, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$18[ebp]
	add	eax, DWORD PTR _xpos$17[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_fir_r$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos_r$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 491  :   }

	jmp	SHORT $LN17@kvz_filter
$LN18@kvz_filter:

; 492  : 
; 493  :   // VERTICAL STEP
; 494  :   int8_t *ver_fir_l = hpel_off_y != 0 ? fir2 : fir0;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN67@kvz_filter
	mov	ecx, DWORD PTR _fir2$[ebp]
	mov	DWORD PTR tv271[ebp], ecx
	jmp	SHORT $LN68@kvz_filter
$LN67@kvz_filter:
	mov	edx, DWORD PTR _fir0$[ebp]
	mov	DWORD PTR tv271[ebp], edx
$LN68@kvz_filter:
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR _ver_fir_l$[ebp], eax

; 495  :   int8_t *ver_fir_r = hpel_off_y != 0 ? fir2 : fir0;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN69@kvz_filter
	mov	ecx, DWORD PTR _fir2$[ebp]
	mov	DWORD PTR tv274[ebp], ecx
	jmp	SHORT $LN70@kvz_filter
$LN69@kvz_filter:
	mov	edx, DWORD PTR _fir0$[ebp]
	mov	DWORD PTR tv274[ebp], edx
$LN70@kvz_filter:
	mov	eax, DWORD PTR tv274[ebp]
	mov	DWORD PTR _ver_fir_r$[ebp], eax

; 496  :   int8_t *ver_fir_t = hpel_off_y != 0 ? fir1 : fir3;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN71@kvz_filter
	mov	ecx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv277[ebp], ecx
	jmp	SHORT $LN72@kvz_filter
$LN71@kvz_filter:
	mov	edx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv277[ebp], edx
$LN72@kvz_filter:
	mov	eax, DWORD PTR tv277[ebp]
	mov	DWORD PTR _ver_fir_t$[ebp], eax

; 497  :   int8_t *ver_fir_b = hpel_off_y != 0 ? fir3 : fir1;

	movsx	eax, BYTE PTR _hpel_off_y$[ebp]
	test	eax, eax
	je	SHORT $LN73@kvz_filter
	mov	ecx, DWORD PTR _fir3$[ebp]
	mov	DWORD PTR tv280[ebp], ecx
	jmp	SHORT $LN74@kvz_filter
$LN73@kvz_filter:
	mov	edx, DWORD PTR _fir1$[ebp]
	mov	DWORD PTR tv280[ebp], edx
$LN74@kvz_filter:
	mov	eax, DWORD PTR tv280[ebp]
	mov	DWORD PTR _ver_fir_b$[ebp], eax

; 498  : 
; 499  :   // Left QPEL (1/4 or 3/4 x positions) 
; 500  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@kvz_filter
$LN20@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN21@kvz_filter

; 501  :     if (!off_x_fir_l) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN44@kvz_filter

; 502  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 503  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_l, &col_pos_l[y + sample_off_y]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _sample_off_y$[ebp]
	mov	ecx, DWORD PTR _col_pos_l$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_l$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$16[ebp], ax

; 504  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$16[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$16[ebp], cx

; 505  :       filtered[0][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$16[ebp]
	mov	BYTE PTR [edx+ecx], al
$LN44@kvz_filter:

; 506  :     }
; 507  :     for (x = !off_x_fir_l; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN75@kvz_filter
	mov	DWORD PTR tv307[ebp], 1
	jmp	SHORT $LN76@kvz_filter
$LN75@kvz_filter:
	mov	DWORD PTR tv307[ebp], 0
$LN76@kvz_filter:
	mov	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN25@kvz_filter
$LN23@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN25@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN24@kvz_filter

; 508  :       int ypos = y + sample_off_y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _sample_off_y$[ebp]
	mov	DWORD PTR _ypos$15[ebp], eax

; 509  :       int xpos = x - !off_x_fir_l;

	cmp	DWORD PTR _off_x_fir_l$[ebp], 0
	jne	SHORT $LN77@kvz_filter
	mov	DWORD PTR tv312[ebp], 1
	jmp	SHORT $LN78@kvz_filter
$LN77@kvz_filter:
	mov	DWORD PTR tv312[ebp], 0
$LN78@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv312[ebp]
	mov	DWORD PTR _xpos$14[ebp], eax

; 510  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_l, &hor_pos_l[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$15[ebp]
	add	ecx, DWORD PTR _xpos$14[ebp]
	mov	edx, DWORD PTR _hor_pos_l$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_l$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$13[ebp], ax

; 511  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$13[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$13[ebp], cx

; 512  :       filtered[0][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$13[ebp]
	mov	BYTE PTR [edx+ecx], al

; 513  :     }

	jmp	$LN23@kvz_filter
$LN24@kvz_filter:

; 514  :   }

	jmp	$LN20@kvz_filter
$LN21@kvz_filter:

; 515  : 
; 516  :   // Right QPEL (3/4 or 1/4 x positions)
; 517  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN28@kvz_filter
$LN26@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN28@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN27@kvz_filter

; 518  :     if (!off_x_fir_r) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN45@kvz_filter

; 519  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 520  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_r, &col_pos_r[y + sample_off_y]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _sample_off_y$[ebp]
	mov	ecx, DWORD PTR _col_pos_r$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_r$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$12[ebp], ax

; 521  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$12[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$12[ebp], cx

; 522  :       filtered[1][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$12[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN45@kvz_filter:

; 523  :     }
; 524  :     for (x = !off_x_fir_r; x < width; ++x) {

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN79@kvz_filter
	mov	DWORD PTR tv365[ebp], 1
	jmp	SHORT $LN80@kvz_filter
$LN79@kvz_filter:
	mov	DWORD PTR tv365[ebp], 0
$LN80@kvz_filter:
	mov	eax, DWORD PTR tv365[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN31@kvz_filter
$LN29@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN31@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN30@kvz_filter

; 525  :       int ypos = y + sample_off_y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _sample_off_y$[ebp]
	mov	DWORD PTR _ypos$11[ebp], eax

; 526  :       int xpos = x - !off_x_fir_r;

	cmp	DWORD PTR _off_x_fir_r$[ebp], 0
	jne	SHORT $LN81@kvz_filter
	mov	DWORD PTR tv370[ebp], 1
	jmp	SHORT $LN82@kvz_filter
$LN81@kvz_filter:
	mov	DWORD PTR tv370[ebp], 0
$LN82@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv370[ebp]
	mov	DWORD PTR _xpos$10[ebp], eax

; 527  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_r, &hor_pos_r[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$11[ebp]
	add	ecx, DWORD PTR _xpos$10[ebp]
	mov	edx, DWORD PTR _hor_pos_r$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_r$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$9[ebp], ax

; 528  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$9[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$9[ebp], cx

; 529  :       filtered[1][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$9[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 530  :     }

	jmp	$LN29@kvz_filter
$LN30@kvz_filter:

; 531  :   }

	jmp	$LN26@kvz_filter
$LN27@kvz_filter:

; 532  : 
; 533  :   // Top QPEL (1/4 or 3/4 y positions)
; 534  :   int sample_off_x = (hpel_off_x > -1 ? 1 : 0);

	movsx	eax, BYTE PTR _hpel_off_x$[ebp]
	cmp	eax, -1
	jle	SHORT $LN83@kvz_filter
	mov	DWORD PTR tv399[ebp], 1
	jmp	SHORT $LN84@kvz_filter
$LN83@kvz_filter:
	mov	DWORD PTR tv399[ebp], 0
$LN84@kvz_filter:
	mov	ecx, DWORD PTR tv399[ebp]
	mov	DWORD PTR _sample_off_x$[ebp], ecx

; 535  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN34@kvz_filter
$LN32@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN34@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN33@kvz_filter

; 536  :     if (!sample_off_x) {

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN46@kvz_filter

; 537  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 538  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_t, &col_pos_hor[y + off_y_fir_t]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	ecx, DWORD PTR _col_pos_hor$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_t$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$8[ebp], ax

; 539  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$8[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$8[ebp], cx

; 540  :       filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$8[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN46@kvz_filter:

; 541  :     }
; 542  :     for (x = !sample_off_x; x < width; ++x) {

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN85@kvz_filter
	mov	DWORD PTR tv458[ebp], 1
	jmp	SHORT $LN86@kvz_filter
$LN85@kvz_filter:
	mov	DWORD PTR tv458[ebp], 0
$LN86@kvz_filter:
	mov	eax, DWORD PTR tv458[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN37@kvz_filter
$LN35@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN37@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN36@kvz_filter

; 543  :       int ypos = y + off_y_fir_t;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_t$[ebp]
	mov	DWORD PTR _ypos$7[ebp], eax

; 544  :       int xpos = x - !sample_off_x;

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN87@kvz_filter
	mov	DWORD PTR tv463[ebp], 1
	jmp	SHORT $LN88@kvz_filter
$LN87@kvz_filter:
	mov	DWORD PTR tv463[ebp], 0
$LN88@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv463[ebp]
	mov	DWORD PTR _xpos$6[ebp], eax

; 545  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_t, &hor_hpel_pos[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$7[ebp]
	add	ecx, DWORD PTR _xpos$6[ebp]
	mov	edx, DWORD PTR _hor_hpel_pos$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_t$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$5[ebp], ax

; 546  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$5[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$5[ebp], cx

; 547  :       filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$5[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 548  :     }

	jmp	$LN35@kvz_filter
$LN36@kvz_filter:

; 549  :   }

	jmp	$LN32@kvz_filter
$LN33@kvz_filter:

; 550  : 
; 551  :   // Bottom QPEL (3/4 or 1/4 y positions)
; 552  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN40@kvz_filter
$LN38@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN40@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN1@kvz_filter

; 553  :     if (!sample_off_x) {

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN47@kvz_filter

; 554  :       x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 555  :       int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(ver_fir_b, &col_pos_hor[y + off_y_fir_b]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	ecx, DWORD PTR _col_pos_hor$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _ver_fir_b$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$4[ebp], ax

; 556  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$4[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$4[ebp], cx

; 557  :       filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$4[ebp]
	mov	BYTE PTR [edx+ecx], al
$LN47@kvz_filter:

; 558  :     }
; 559  :     for (x = !sample_off_x; x < width; ++x) {

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN89@kvz_filter
	mov	DWORD PTR tv516[ebp], 1
	jmp	SHORT $LN90@kvz_filter
$LN89@kvz_filter:
	mov	DWORD PTR tv516[ebp], 0
$LN90@kvz_filter:
	mov	eax, DWORD PTR tv516[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN43@kvz_filter
$LN41@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN43@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN42@kvz_filter

; 560  :       int ypos = y + off_y_fir_b;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _off_y_fir_b$[ebp]
	mov	DWORD PTR _ypos$3[ebp], eax

; 561  :       int xpos = x - !sample_off_x;

	cmp	DWORD PTR _sample_off_x$[ebp], 0
	jne	SHORT $LN91@kvz_filter
	mov	DWORD PTR tv521[ebp], 1
	jmp	SHORT $LN92@kvz_filter
$LN91@kvz_filter:
	mov	DWORD PTR tv521[ebp], 0
$LN92@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR tv521[ebp]
	mov	DWORD PTR _xpos$2[ebp], eax

; 562  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(ver_fir_b, &hor_hpel_pos[ypos * hor_stride + xpos], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$3[ebp]
	add	ecx, DWORD PTR _xpos$2[ebp]
	mov	edx, DWORD PTR _hor_hpel_pos$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _ver_fir_b$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$1[ebp], ax

; 563  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$1[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$1[ebp], cx

; 564  :       filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$1[ebp]
	mov	BYTE PTR [edx+ecx], al

; 565  :     }

	jmp	$LN41@kvz_filter
$LN42@kvz_filter:

; 566  :   }

	jmp	$LN38@kvz_filter
$LN1@kvz_filter:

; 567  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1060				; 00000424H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_qpel_blocks_hor_ver_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_filter_hpel_blocks_diag_luma_generic
_TEXT	SEGMENT
_sample$ = -152						; size = 2
_sample$1 = -140					; size = 2
_sample$2 = -128					; size = 2
_sample$3 = -116					; size = 2
_col_pos2$ = -104					; size = 4
_hor_stride$ = -92					; size = 2
_dst_stride$ = -80					; size = 2
_fir2$ = -68						; size = 4
_wp_offset1$ = -56					; size = 4
_wp_shift1$ = -44					; size = 4
_shift2$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_filtered$ = 28						; size = 4
_hor_intermediate$ = 32					; size = 4
_fme_level$ = 36					; size = 1
_hor_first_cols$ = 40					; size = 4
_hpel_off_x$ = 44					; size = 1
_hpel_off_y$ = 48					; size = 1
_kvz_filter_hpel_blocks_diag_luma_generic PROC		; COMDAT

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 339  :   int x, y;
; 340  : 
; 341  :   // Interpolation filter shifts
; 342  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 343  : 
; 344  :   // Weighted prediction offset and shift
; 345  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 346  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 347  : 
; 348  :   int8_t *fir2 = kvz_g_luma_filter[2];

	mov	eax, 8
	shl	eax, 1
	add	eax, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir2$[ebp], eax

; 349  : 
; 350  :   int16_t dst_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _dst_stride$[ebp], ax

; 351  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 352  : 
; 353  :   // Horizontal positions
; 354  :   int16_t *col_pos2 = hor_first_cols[2];

	mov	eax, 144				; 00000090H
	shl	eax, 1
	add	eax, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos2$[ebp], eax

; 355  : 
; 356  :   // VERTICAL STEP
; 357  : 
; 358  :   // Top-right
; 359  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_filter
$LN2@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN3@kvz_filter

; 360  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_filter
$LN5@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_filter

; 361  :       int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(fir2, &hor_intermediate[1][y * hor_stride + x], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, 9216				; 00002400H
	shl	ecx, 0
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	movsx	edx, WORD PTR _hor_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _fir2$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$3[ebp], ax

; 362  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$3[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$3[ebp], cx

; 363  :       filtered[1][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$3[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 364  :     }

	jmp	SHORT $LN5@kvz_filter
$LN6@kvz_filter:

; 365  :   }

	jmp	$LN2@kvz_filter
$LN3@kvz_filter:

; 366  : 
; 367  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_filter
$LN8@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN9@kvz_filter

; 368  :     x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 369  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos2$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+8]
	add	edx, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	edx, cl
	push	edx
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	mov	ecx, 4096				; 00001000H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 370  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN13@kvz_filter
$LN11@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@kvz_filter
	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	edx, 4096				; 00001000H
	imul	edx, edx, 0
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR [esi+edx], al
	jmp	SHORT $LN11@kvz_filter
$LN12@kvz_filter:

; 371  :   }

	jmp	$LN8@kvz_filter
$LN9@kvz_filter:

; 372  : 
; 373  :   // Top-left
; 374  :   // Copy what can be copied from top-right filtered values. Filter the first column from the column array.
; 375  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN16@kvz_filter
$LN14@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN16@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN15@kvz_filter

; 376  :     x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 377  :     int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[y]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _fir2$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$2[ebp], ax

; 378  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$2[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$2[ebp], cx

; 379  :     filtered[0][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$2[ebp]
	mov	BYTE PTR [edx+ecx], al

; 380  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN19@kvz_filter
$LN17@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN19@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN18@kvz_filter
	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	edx, 4096				; 00001000H
	imul	edx, edx, 0
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR [esi+edx], al
	jmp	SHORT $LN17@kvz_filter
$LN18@kvz_filter:

; 381  :   }

	jmp	$LN14@kvz_filter
$LN15@kvz_filter:

; 382  : 
; 383  :   // Bottom-right
; 384  :   // Copy what can be copied from top-right filtered values. Filter the last row.
; 385  :   for (y = 0; y < height - 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@kvz_filter
$LN20@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN21@kvz_filter

; 386  :     for (x = 0; x < width; ++x) filtered[3][y* dst_stride + x] = filtered[1][(y + 1) * dst_stride + x];

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN25@kvz_filter
$LN23@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN25@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN24@kvz_filter
	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	ecx, edx
	add	eax, DWORD PTR _x$[ebp]
	mov	edx, 4096				; 00001000H
	imul	edx, edx, 3
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR [ecx+eax]
	mov	BYTE PTR [esi+edx], al
	jmp	SHORT $LN23@kvz_filter
$LN24@kvz_filter:

; 387  :   }

	jmp	SHORT $LN20@kvz_filter
$LN21@kvz_filter:

; 388  : 
; 389  :   for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN28@kvz_filter
$LN26@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN28@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN27@kvz_filter

; 390  :     int16_t sample = kvz_eight_tap_filter_ver_16bit_generic(fir2, &hor_intermediate[1][(y + 1) * hor_stride + x], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, 9216				; 00002400H
	shl	ecx, 0
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	movsx	eax, WORD PTR _hor_stride$[ebp]
	imul	edx, eax
	add	edx, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [ecx+edx*2]
	push	ecx
	mov	edx, DWORD PTR _fir2$[ebp]
	push	edx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$1[ebp], ax

; 391  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$1[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$1[ebp], cx

; 392  :     filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$1[ebp]
	mov	BYTE PTR [edx+ecx], al

; 393  :   }

	jmp	$LN26@kvz_filter
$LN27@kvz_filter:

; 394  : 
; 395  :   // Bottom-left
; 396  :   // Copy what can be copied from the top-left filtered values.
; 397  :   // Copy what can be copied from the bottom-right filtered values.
; 398  :   // Finally filter the last pixel from the column array.
; 399  :   for (y = 0; y < height - 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN31@kvz_filter
$LN29@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN31@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN30@kvz_filter

; 400  :     for (x = 0; x < width; ++x) filtered[2][y * dst_stride + x] = filtered[0][(y + 1) * dst_stride + x];

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN34@kvz_filter
$LN32@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN34@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN33@kvz_filter
	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	movsx	eax, WORD PTR _dst_stride$[ebp]
	imul	edx, eax
	add	ecx, DWORD PTR _x$[ebp]
	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	cl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [esi+eax], cl
	jmp	SHORT $LN32@kvz_filter
$LN33@kvz_filter:

; 401  :   }

	jmp	SHORT $LN29@kvz_filter
$LN30@kvz_filter:

; 402  :   for (x = 1; x < width; ++x) filtered[2][y * dst_stride + x] = filtered[3][y * dst_stride + x - 1];

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN37@kvz_filter
$LN35@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN37@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN36@kvz_filter
	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	cl, BYTE PTR [edx+ecx-1]
	mov	BYTE PTR [esi+eax], cl
	jmp	SHORT $LN35@kvz_filter
$LN36@kvz_filter:

; 403  :   x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 404  :   int16_t sample = kvz_eight_tap_filter_hor_16bit_generic(fir2, &col_pos2[(y + 1)]) >> shift2;

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	push	edx
	mov	eax, DWORD PTR _fir2$[ebp]
	push	eax
	call	_kvz_eight_tap_filter_hor_16bit_generic
	add	esp, 8
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$[ebp], ax

; 405  :   sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$[ebp], cx

; 406  :   filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 407  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_hpel_blocks_diag_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_filter_hpel_blocks_hor_ver_luma_generic
_TEXT	SEGMENT
tv78 = -520						; size = 4
_sample$1 = -320					; size = 2
_xpos$2 = -308						; size = 4
_ypos$ = -296						; size = 4
_sample$3 = -284					; size = 2
_xpos$4 = -272						; size = 4
_ypos$5 = -260						; size = 4
_xpos$6 = -248						; size = 4
_ypos$7 = -236						; size = 4
_xpos$8 = -224						; size = 4
_ypos$9 = -212						; size = 4
_xpos$10 = -200						; size = 4
_ypos$11 = -188						; size = 4
_xpos$12 = -176						; size = 4
_ypos$13 = -164						; size = 4
_col_pos2$ = -152					; size = 4
_col_pos0$ = -140					; size = 4
_first_row_offset$ = -128				; size = 4
_hor_stride$ = -116					; size = 2
_dst_stride$ = -104					; size = 2
_fir2$ = -92						; size = 4
_fir0$ = -80						; size = 4
_wp_offset1$ = -68					; size = 4
_wp_shift1$ = -56					; size = 4
_shift1$ = -44						; size = 2
_first_y$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_filtered$ = 28						; size = 4
_hor_intermediate$ = 32					; size = 4
_fme_level$ = 36					; size = 1
_hor_first_cols$ = 40					; size = 4
_hpel_off_x$ = 44					; size = 1
_hpel_off_y$ = 48					; size = 1
_kvz_filter_hpel_blocks_hor_ver_luma_generic PROC	; COMDAT

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 224  :   int x, y, first_y;
; 225  : 
; 226  :   // Interpolation filter shifts
; 227  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 228  : 
; 229  :   // Weighted prediction offset and shift
; 230  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 231  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 232  : 
; 233  :   int8_t *fir0 = kvz_g_luma_filter[0];

	mov	eax, 8
	imul	ecx, eax, 0
	add	ecx, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir0$[ebp], ecx

; 234  :   int8_t *fir2 = kvz_g_luma_filter[2];

	mov	eax, 8
	shl	eax, 1
	add	eax, OFFSET _kvz_g_luma_filter
	mov	DWORD PTR _fir2$[ebp], eax

; 235  : 
; 236  :   int16_t dst_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _dst_stride$[ebp], ax

; 237  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 238  :   int32_t first_row_offset = (KVZ_LUMA_FILTER_OFFSET + 1) * hor_stride;

	movsx	eax, WORD PTR _hor_stride$[ebp]
	shl	eax, 2
	mov	DWORD PTR _first_row_offset$[ebp], eax

; 239  : 
; 240  :   int16_t *col_pos0 = hor_first_cols[0];

	mov	eax, 144				; 00000090H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos0$[ebp], ecx

; 241  :   int16_t *col_pos2 = hor_first_cols[2];

	mov	eax, 144				; 00000090H
	shl	eax, 1
	add	eax, DWORD PTR _hor_first_cols$[ebp]
	mov	DWORD PTR _col_pos2$[ebp], eax

; 242  : 
; 243  :   // Horizontally filtered samples from the top row are
; 244  :   // not needed unless samples for diagonal positions are filtered later.
; 245  :   first_y = fme_level > 1 ? 0 : 1; 

	movsx	eax, BYTE PTR _fme_level$[ebp]
	cmp	eax, 1
	jle	SHORT $LN48@kvz_filter
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN49@kvz_filter
$LN48@kvz_filter:
	mov	DWORD PTR tv78[ebp], 1
$LN49@kvz_filter:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _first_y$[ebp], ecx

; 246  :                                              
; 247  :   // HORIZONTAL STEP
; 248  :   // Integer pixels
; 249  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_filter
$LN2@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_filter

; 250  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_filter
$LN5@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_filter

; 251  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$13[ebp], eax

; 252  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xpos$12[ebp], eax

; 253  :       hor_intermediate[0][y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(fir0, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$13[ebp]
	add	eax, DWORD PTR _xpos$12[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fir0$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, 9216				; 00002400H
	imul	ecx, edx, 0
	add	ecx, DWORD PTR _hor_intermediate$[ebp]
	movsx	edx, WORD PTR _hor_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 254  :     }

	jmp	SHORT $LN5@kvz_filter
$LN6@kvz_filter:

; 255  :   }

	jmp	$LN2@kvz_filter
$LN3@kvz_filter:

; 256  : 
; 257  :   // Write the first column in contiguous memory
; 258  :   x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 259  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_filter
$LN8@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN9@kvz_filter

; 260  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$11[ebp], eax

; 261  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$10[ebp], eax

; 262  :     col_pos0[y] = kvz_eight_tap_filter_hor_generic(fir0, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$11[ebp]
	add	eax, DWORD PTR _xpos$10[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fir0$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos0$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 263  :   }

	jmp	SHORT $LN8@kvz_filter
$LN9@kvz_filter:

; 264  : 
; 265  :   // Half pixels
; 266  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	eax, DWORD PTR _first_y$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN13@kvz_filter
$LN11@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN13@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN12@kvz_filter

; 267  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN16@kvz_filter
$LN14@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN16@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN15@kvz_filter

; 268  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$9[ebp], eax

; 269  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET + 1;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 2
	mov	DWORD PTR _xpos$8[ebp], eax

; 270  :       hor_intermediate[1][y * hor_stride + x] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$9[ebp]
	add	eax, DWORD PTR _xpos$8[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fir2$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, 9216				; 00002400H
	shl	edx, 0
	add	edx, DWORD PTR _hor_intermediate$[ebp]
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 271  :     }

	jmp	SHORT $LN14@kvz_filter
$LN15@kvz_filter:

; 272  :   }

	jmp	$LN11@kvz_filter
$LN12@kvz_filter:

; 273  : 
; 274  :   // Write the first column in contiguous memory
; 275  :   x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 276  :   for (y = first_y; y < height + KVZ_EXT_PADDING_LUMA + 1; ++y) {

	mov	eax, DWORD PTR _first_y$[ebp]
	mov	DWORD PTR _y$[ebp], eax
	jmp	SHORT $LN19@kvz_filter
$LN17@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN19@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 8
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN18@kvz_filter

; 277  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$7[ebp], eax

; 278  :     int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$6[ebp], eax

; 279  :     col_pos2[y] = kvz_eight_tap_filter_hor_generic(fir2, &src[src_stride*ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$7[ebp]
	add	eax, DWORD PTR _xpos$6[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fir2$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos2$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 280  :   }

	jmp	SHORT $LN17@kvz_filter
$LN18@kvz_filter:

; 281  : 
; 282  :   // VERTICAL STEP
; 283  : 
; 284  :   // Right
; 285  :   // Only horizontal filter
; 286  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@kvz_filter
$LN20@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN21@kvz_filter

; 287  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN25@kvz_filter
$LN23@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN25@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN24@kvz_filter

; 288  :       filtered[1][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((hor_intermediate[1][first_row_offset + y * hor_stride + x] + wp_offset1) >> wp_shift1);

	mov	eax, 9216				; 00002400H
	shl	eax, 0
	add	eax, DWORD PTR _hor_intermediate$[ebp]
	movsx	ecx, WORD PTR _hor_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _first_row_offset$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	add	edx, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	edx, cl
	push	edx
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	mov	ecx, 4096				; 00001000H
	shl	ecx, 0
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 289  :     }

	jmp	SHORT $LN23@kvz_filter
$LN24@kvz_filter:

; 290  :   }

	jmp	SHORT $LN20@kvz_filter
$LN21@kvz_filter:

; 291  : 
; 292  :   // Left
; 293  :   // Copy from the right filtered block and the extra column
; 294  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN28@kvz_filter
$LN26@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN28@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN27@kvz_filter

; 295  :     x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 296  :     filtered[0][y * dst_stride + x] = kvz_fast_clip_16bit_to_pixel((col_pos2[y + KVZ_LUMA_FILTER_OFFSET + 1] + wp_offset1) >> wp_shift1);

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _col_pos2$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+8]
	add	edx, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	edx, cl
	push	edx
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	mov	ecx, 4096				; 00001000H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 297  :     for (x = 1; x < width; ++x) filtered[0][y * dst_stride + x] = filtered[1][y * dst_stride + x - 1];

	mov	DWORD PTR _x$[ebp], 1
	jmp	SHORT $LN31@kvz_filter
$LN29@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN31@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN30@kvz_filter
	mov	eax, 4096				; 00001000H
	shl	eax, 0
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	edx, 4096				; 00001000H
	imul	edx, edx, 0
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR [ecx+eax-1]
	mov	BYTE PTR [esi+edx], al
	jmp	SHORT $LN29@kvz_filter
$LN30@kvz_filter:

; 298  :   }

	jmp	$LN26@kvz_filter
$LN27@kvz_filter:

; 299  : 
; 300  :   // Top
; 301  :   // Only vertical filter
; 302  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN34@kvz_filter
$LN32@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN34@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN33@kvz_filter

; 303  :     int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$5[ebp], eax

; 304  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN37@kvz_filter
$LN35@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN37@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN36@kvz_filter

; 305  :       int xpos = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xpos$4[ebp], eax

; 306  :       int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*ypos + xpos + 1], src_stride) >> shift1;

	movzx	eax, WORD PTR _src_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _src_stride$[ebp]
	imul	ecx, DWORD PTR _ypos$5[ebp]
	add	ecx, DWORD PTR _xpos$4[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	push	eax
	mov	ecx, DWORD PTR _fir2$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_ver_generic
	add	esp, 12					; 0000000cH
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$3[ebp], ax

; 307  :       sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$3[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$3[ebp], cx

; 308  :       filtered[2][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	dl, BYTE PTR _sample$3[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 309  :     }

	jmp	$LN35@kvz_filter
$LN36@kvz_filter:

; 310  :   }

	jmp	$LN32@kvz_filter
$LN33@kvz_filter:

; 311  : 
; 312  :   // Bottom
; 313  :   // Copy what can be copied from the top filtered values.
; 314  :   // Then filter the last row from horizontal intermediate buffer.
; 315  :   for (y = 0; y < height - 1; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN40@kvz_filter
$LN38@kvz_filter:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN40@kvz_filter:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN39@kvz_filter

; 316  :     for (x = 0; x < width; ++x) filtered[3][y * dst_stride + x] = filtered[2][(y + 1) * dst_stride + x];

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN43@kvz_filter
$LN41@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN43@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN42@kvz_filter
	mov	eax, 4096				; 00001000H
	shl	eax, 1
	add	eax, DWORD PTR _filtered$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	ecx, edx
	add	eax, DWORD PTR _x$[ebp]
	mov	edx, 4096				; 00001000H
	imul	edx, edx, 3
	add	edx, DWORD PTR _filtered$[ebp]
	movsx	esi, WORD PTR _dst_stride$[ebp]
	imul	esi, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR [ecx+eax]
	mov	BYTE PTR [esi+edx], al
	jmp	SHORT $LN41@kvz_filter
$LN42@kvz_filter:

; 317  :   }

	jmp	SHORT $LN38@kvz_filter
$LN39@kvz_filter:

; 318  : 
; 319  :   int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$[ebp], eax

; 320  :   for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN46@kvz_filter
$LN44@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN46@kvz_filter:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN1@kvz_filter

; 321  :     int xpos = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xpos$2[ebp], eax

; 322  :     int16_t sample = kvz_eight_tap_filter_ver_generic(fir2, &src[src_stride*(ypos + 1) + xpos + 1], src_stride) >> shift1;

	movzx	eax, WORD PTR _src_stride$[ebp]
	push	eax
	movsx	ecx, WORD PTR _src_stride$[ebp]
	mov	edx, DWORD PTR _ypos$[ebp]
	add	edx, 1
	imul	ecx, edx
	add	ecx, DWORD PTR _xpos$2[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	lea	ecx, DWORD PTR [eax+ecx+1]
	push	ecx
	mov	edx, DWORD PTR _fir2$[ebp]
	push	edx
	call	_kvz_eight_tap_filter_ver_generic
	add	esp, 12					; 0000000cH
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	WORD PTR _sample$1[ebp], ax

; 323  :     sample = kvz_fast_clip_16bit_to_pixel((sample + wp_offset1) >> wp_shift1);

	movsx	eax, WORD PTR _sample$1[ebp]
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_16bit_to_pixel
	add	esp, 4
	movzx	cx, al
	mov	WORD PTR _sample$1[ebp], cx

; 324  :     filtered[3][y * dst_stride + x] = sample;

	mov	eax, 4096				; 00001000H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _filtered$[ebp]
	movsx	edx, WORD PTR _dst_stride$[ebp]
	imul	edx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	al, BYTE PTR _sample$1[ebp]
	mov	BYTE PTR [edx+ecx], al

; 325  :   }

	jmp	$LN44@kvz_filter
$LN1@kvz_filter:

; 326  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_hpel_blocks_hor_ver_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_four_tap_filter_ver_16bit_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_stride$ = 16						; size = 2
_kvz_four_tap_filter_ver_16bit_generic PROC		; COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 125  :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 126  :   for (int i = 0; i < 4; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_four_t
$LN2@kvz_four_t:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_four_t:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN3@kvz_four_t

; 127  :   {
; 128  :     temp += filter[i] * data[stride * i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, WORD PTR _stride$[ebp]
	imul	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 129  :   }

	jmp	SHORT $LN2@kvz_four_t
$LN3@kvz_four_t:

; 130  : 
; 131  :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_four_tap_filter_ver_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_four_tap_filter_ver_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_stride$ = 16						; size = 2
_kvz_four_tap_filter_ver_generic PROC			; COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 114  :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 115  :   for (int i = 0; i < 4; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_four_t
$LN2@kvz_four_t:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_four_t:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN3@kvz_four_t

; 116  :   {
; 117  :     temp += filter[i] * data[stride * i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, WORD PTR _stride$[ebp]
	imul	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 118  :   }

	jmp	SHORT $LN2@kvz_four_t
$LN3@kvz_four_t:

; 119  : 
; 120  :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_four_tap_filter_ver_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_four_tap_filter_hor_16bit_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_kvz_four_tap_filter_hor_16bit_generic PROC		; COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 103  :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 104  :   for (int i = 0; i < 4; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_four_t
$LN2@kvz_four_t:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_four_t:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN3@kvz_four_t

; 105  :   {
; 106  :     temp += filter[i] * data[i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 107  :   }

	jmp	SHORT $LN2@kvz_four_t
$LN3@kvz_four_t:

; 108  : 
; 109  :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_four_tap_filter_hor_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_four_tap_filter_hor_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_kvz_four_tap_filter_hor_generic PROC			; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 93   :   for (int i = 0; i < 4; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_four_t
$LN2@kvz_four_t:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_four_t:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN3@kvz_four_t

; 94   :   {
; 95   :     temp += filter[i] * data[i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	imul	ecx, eax
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 96   :   }

	jmp	SHORT $LN2@kvz_four_t
$LN3@kvz_four_t:

; 97   : 
; 98   :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_four_tap_filter_hor_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_eight_tap_filter_ver_16bit_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_stride$ = 16						; size = 2
_kvz_eight_tap_filter_ver_16bit_generic PROC		; COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 81   :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 82   :   for (int i = 0; i < 8; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_eight_
$LN2@kvz_eight_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_eight_:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@kvz_eight_

; 83   :   {
; 84   :     temp += filter[i] * data[stride * i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, WORD PTR _stride$[ebp]
	imul	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 85   :   }

	jmp	SHORT $LN2@kvz_eight_
$LN3@kvz_eight_:

; 86   : 
; 87   :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_eight_tap_filter_ver_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_eight_tap_filter_ver_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_stride$ = 16						; size = 2
_kvz_eight_tap_filter_ver_generic PROC			; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 70   :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 71   :   for (int i = 0; i < 8; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_eight_
$LN2@kvz_eight_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_eight_:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@kvz_eight_

; 72   :   {
; 73   :     temp += filter[i] * data[stride * i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, WORD PTR _stride$[ebp]
	imul	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [eax+edx]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 74   :   }

	jmp	SHORT $LN2@kvz_eight_
$LN3@kvz_eight_:

; 75   : 
; 76   :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_eight_tap_filter_ver_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_eight_tap_filter_hor_16bit_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_kvz_eight_tap_filter_hor_16bit_generic PROC		; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 60   :   for (int i = 0; i < 8; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_eight_
$LN2@kvz_eight_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_eight_:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@kvz_eight_

; 61   :   {
; 62   :     temp += filter[i] * data[i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	imul	ecx, edx
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 63   :   }

	jmp	SHORT $LN2@kvz_eight_
$LN3@kvz_eight_:

; 64   : 
; 65   :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_eight_tap_filter_hor_16bit_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_eight_tap_filter_hor_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_temp$ = -8						; size = 4
_filter$ = 8						; size = 4
_data$ = 12						; size = 4
_kvz_eight_tap_filter_hor_generic PROC			; COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 48   :   int32_t temp = 0;

	mov	DWORD PTR _temp$[ebp], 0

; 49   :   for (int i = 0; i < 8; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_eight_
$LN2@kvz_eight_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_eight_:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN3@kvz_eight_

; 50   :   {
; 51   :     temp += filter[i] * data[i];

	mov	eax, DWORD PTR _filter$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	imul	ecx, eax
	add	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 52   :   }

	jmp	SHORT $LN2@kvz_eight_
$LN3@kvz_eight_:

; 53   : 
; 54   :   return temp;

	mov	eax, DWORD PTR _temp$[ebp]

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_eight_tap_filter_hor_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_sample_octpel_chroma_hi_generic
_TEXT	SEGMENT
_xpos$1 = -2356						; size = 4
_ypos$2 = -2344						; size = 4
_hor_stride$ = -2332					; size = 2
_hor_filtered$ = -2320					; size = 2240
_ver_filter$ = -72					; size = 4
_hor_filter$ = -60					; size = 4
_shift2$ = -48						; size = 4
_shift1$ = -36						; size = 2
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dst$ = 28						; size = 4
_dst_stride$ = 32					; size = 2
_hor_flag$ = 36						; size = 1
_ver_flag$ = 40						; size = 1
_mv$ = 44						; size = 4
_kvz_sample_octpel_chroma_hi_generic PROC		; COMDAT

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3320				; 00000cf8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3320]
	mov	ecx, 830				; 0000033eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 729  :   //TODO: horizontal and vertical only filtering
; 730  :   int32_t x, y;
; 731  : 
; 732  :   // Interpolation filter shifts
; 733  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 734  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 735  : 
; 736  :   // Select filters according to the fractional part of the x and y mv components
; 737  :   int8_t *hor_filter = kvz_g_chroma_filter[mv[0] & 7];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 7
	lea	ecx, DWORD PTR _kvz_g_chroma_filter[eax*4]
	mov	DWORD PTR _hor_filter$[ebp], ecx

; 738  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 7
	lea	eax, DWORD PTR _kvz_g_chroma_filter[edx*4]
	mov	DWORD PTR _ver_filter$[ebp], eax

; 739  : 
; 740  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 741  :   int16_t hor_stride = LCU_WIDTH_C;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _hor_stride$[ebp], ax

; 742  : 
; 743  :   // Filter horizontally
; 744  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_sample
$LN2@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_sample:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 3
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_sample

; 745  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_sample
$LN5@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_sample

; 746  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ypos$2[ebp], eax

; 747  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xpos$1[ebp], eax

; 748  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$2[ebp]
	add	eax, DWORD PTR _xpos$1[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_filter$[ebp]
	push	ecx
	call	_kvz_four_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	shl	edx, 6
	lea	ecx, DWORD PTR _hor_filtered$[ebp+edx]
	mov	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 749  :     }

	jmp	SHORT $LN5@kvz_sample
$LN6@kvz_sample:

; 750  :   }

	jmp	$LN2@kvz_sample
$LN3@kvz_sample:

; 751  : 
; 752  :   // Filter vertically
; 753  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_sample
$LN8@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@kvz_sample

; 754  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@kvz_sample
$LN11@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@kvz_sample

; 755  :       dst[y * dst_stride + x] = kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 6
	lea	edx, DWORD PTR _hor_filtered$[ebp+ecx]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _ver_filter$[ebp]
	push	edx
	call	_kvz_four_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 756  :     }

	jmp	SHORT $LN11@kvz_sample
$LN12@kvz_sample:

; 757  :   }

	jmp	SHORT $LN8@kvz_sample
$LN1@kvz_sample:

; 758  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@kvz_sample
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3320				; 00000cf8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@kvz_sample:
	DD	1
	DD	$LN16@kvz_sample
$LN16@kvz_sample:
	DD	-2320					; fffff6f0H
	DD	2240					; 000008c0H
	DD	$LN15@kvz_sample
$LN15@kvz_sample:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_kvz_sample_octpel_chroma_hi_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_sample_octpel_chroma_generic
_TEXT	SEGMENT
_xpos$1 = -2380						; size = 4
_ypos$2 = -2368						; size = 4
_hor_stride$ = -2356					; size = 2
_hor_filtered$ = -2344					; size = 2240
_ver_filter$ = -96					; size = 4
_hor_filter$ = -84					; size = 4
_wp_offset1$ = -72					; size = 4
_wp_shift1$ = -60					; size = 4
_shift2$ = -48						; size = 4
_shift1$ = -36						; size = 2
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dst$ = 28						; size = 4
_dst_stride$ = 32					; size = 2
_hor_flag$ = 36						; size = 1
_ver_flag$ = 40						; size = 1
_mv$ = 44						; size = 4
_kvz_sample_octpel_chroma_generic PROC			; COMDAT

; 691  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3344				; 00000d10H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3344]
	mov	ecx, 836				; 00000344H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 692  :   //TODO: horizontal and vertical only filtering
; 693  :   int32_t x, y;
; 694  : 
; 695  :   // Interpolation filter shifts
; 696  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 697  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 698  : 
; 699  :   // Weighted prediction offset and shift
; 700  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 701  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 702  : 
; 703  :   // Select filters according to the fractional part of the x and y mv components
; 704  :   int8_t *hor_filter = kvz_g_chroma_filter[mv[0] & 7];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 7
	lea	ecx, DWORD PTR _kvz_g_chroma_filter[eax*4]
	mov	DWORD PTR _hor_filter$[ebp], ecx

; 705  :   int8_t *ver_filter = kvz_g_chroma_filter[mv[1] & 7];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 7
	lea	eax, DWORD PTR _kvz_g_chroma_filter[edx*4]
	mov	DWORD PTR _ver_filter$[ebp], eax

; 706  : 
; 707  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_CHROMA][LCU_WIDTH_C];
; 708  :   int16_t hor_stride = LCU_WIDTH_C;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _hor_stride$[ebp], ax

; 709  : 
; 710  :   // Filter horizontally
; 711  :   for (y = 0; y < height + KVZ_EXT_PADDING_CHROMA; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_sample
$LN2@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_sample:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 3
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_sample

; 712  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_sample
$LN5@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_sample

; 713  :       int ypos = y - KVZ_CHROMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	mov	DWORD PTR _ypos$2[ebp], eax

; 714  :       int xpos = x - KVZ_CHROMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _xpos$1[ebp], eax

; 715  :       hor_filtered[y][x] = kvz_four_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$2[ebp]
	add	eax, DWORD PTR _xpos$1[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_filter$[ebp]
	push	ecx
	call	_kvz_four_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	shl	edx, 6
	lea	ecx, DWORD PTR _hor_filtered$[ebp+edx]
	mov	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 716  :     }

	jmp	SHORT $LN5@kvz_sample
$LN6@kvz_sample:

; 717  :   }

	jmp	$LN2@kvz_sample
$LN3@kvz_sample:

; 718  : 
; 719  :   // Filter vertically
; 720  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_sample
$LN8@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@kvz_sample

; 721  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@kvz_sample
$LN11@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@kvz_sample

; 722  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_four_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 6
	lea	edx, DWORD PTR _hor_filtered$[ebp+ecx]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _ver_filter$[ebp]
	push	edx
	call	_kvz_four_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_32bit_to_pixel
	add	esp, 4
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 723  :     }

	jmp	SHORT $LN11@kvz_sample
$LN12@kvz_sample:

; 724  :   }

	jmp	SHORT $LN8@kvz_sample
$LN1@kvz_sample:

; 725  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@kvz_sample
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3344				; 00000d10H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@kvz_sample:
	DD	1
	DD	$LN16@kvz_sample
$LN16@kvz_sample:
	DD	-2344					; fffff6d8H
	DD	2240					; 000008c0H
	DD	$LN15@kvz_sample
$LN15@kvz_sample:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_kvz_sample_octpel_chroma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_sample_quarterpel_luma_hi_generic
_TEXT	SEGMENT
_xpos$1 = -9204						; size = 4
_ypos$2 = -9192						; size = 4
_hor_stride$ = -9180					; size = 2
_hor_filtered$ = -9168					; size = 9088
_ver_filter$ = -72					; size = 4
_hor_filter$ = -60					; size = 4
_shift2$ = -48						; size = 4
_shift1$ = -36						; size = 2
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dst$ = 28						; size = 4
_dst_stride$ = 32					; size = 2
_hor_flag$ = 36						; size = 1
_ver_flag$ = 40						; size = 1
_mv$ = 44						; size = 4
_kvz_sample_quarterpel_luma_hi_generic PROC		; COMDAT

; 181  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 10744				; 000029f8H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-10744]
	mov	ecx, 2686				; 00000a7eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 182  :   //TODO: horizontal and vertical only filtering
; 183  :   int32_t x, y;
; 184  : 
; 185  :   // Interpolation filter shifts
; 186  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 187  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 188  : 
; 189  :   // Select filters according to the fractional part of the x and y mv components
; 190  :   int8_t *hor_filter = kvz_g_luma_filter[mv[0] & 3];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	lea	ecx, DWORD PTR _kvz_g_luma_filter[eax*8]
	mov	DWORD PTR _hor_filter$[ebp], ecx

; 191  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 3
	lea	eax, DWORD PTR _kvz_g_luma_filter[edx*8]
	mov	DWORD PTR _ver_filter$[ebp], eax

; 192  : 
; 193  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 194  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 195  : 
; 196  :   // Filter horizontally
; 197  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_sample
$LN2@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_sample:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 7
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_sample

; 198  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_sample
$LN5@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_sample

; 199  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$2[ebp], eax

; 200  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$1[ebp], eax

; 201  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$2[ebp]
	add	eax, DWORD PTR _xpos$1[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_filter$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	shl	edx, 7
	lea	ecx, DWORD PTR _hor_filtered$[ebp+edx]
	mov	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 202  :     }

	jmp	SHORT $LN5@kvz_sample
$LN6@kvz_sample:

; 203  :   }

	jmp	$LN2@kvz_sample
$LN3@kvz_sample:

; 204  : 
; 205  :   // Filter vertically
; 206  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_sample
$LN8@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@kvz_sample

; 207  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@kvz_sample
$LN11@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@kvz_sample

; 208  :       dst[y * dst_stride + x] = kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2;

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 7
	lea	edx, DWORD PTR _hor_filtered$[ebp+ecx]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _ver_filter$[ebp]
	push	edx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 209  :     }

	jmp	SHORT $LN11@kvz_sample
$LN12@kvz_sample:

; 210  :   }

	jmp	SHORT $LN8@kvz_sample
$LN1@kvz_sample:

; 211  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@kvz_sample
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 10744				; 000029f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@kvz_sample:
	DD	1
	DD	$LN16@kvz_sample
$LN16@kvz_sample:
	DD	-9168					; ffffdc30H
	DD	9088					; 00002380H
	DD	$LN15@kvz_sample
$LN15@kvz_sample:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_kvz_sample_quarterpel_luma_hi_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_sample_quarterpel_luma_generic
_TEXT	SEGMENT
_xpos$1 = -9228						; size = 4
_ypos$2 = -9216						; size = 4
_hor_stride$ = -9204					; size = 2
_hor_filtered$ = -9192					; size = 9088
_ver_filter$ = -96					; size = 4
_hor_filter$ = -84					; size = 4
_wp_offset1$ = -72					; size = 4
_wp_shift1$ = -60					; size = 4
_shift2$ = -48						; size = 4
_shift1$ = -36						; size = 2
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_src_stride$ = 16					; size = 2
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dst$ = 28						; size = 4
_dst_stride$ = 32					; size = 2
_hor_flag$ = 36						; size = 1
_ver_flag$ = 40						; size = 1
_mv$ = 44						; size = 4
_kvz_sample_quarterpel_luma_generic PROC		; COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 10768				; 00002a10H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-10768]
	mov	ecx, 2692				; 00000a84H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 145  :   //TODO: horizontal and vertical only filtering
; 146  :   int32_t x, y;
; 147  : 
; 148  :   // Interpolation filter shifts
; 149  :   int16_t shift1 = KVZ_BIT_DEPTH - 8;

	xor	eax, eax
	mov	WORD PTR _shift1$[ebp], ax

; 150  :   int32_t shift2 = 6;

	mov	DWORD PTR _shift2$[ebp], 6

; 151  : 
; 152  :   // Weighted prediction offset and shift
; 153  :   int32_t wp_shift1 = 14 - KVZ_BIT_DEPTH;

	mov	DWORD PTR _wp_shift1$[ebp], 6

; 154  :   int32_t wp_offset1 = 1 << (wp_shift1 - 1);

	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _wp_offset1$[ebp], eax

; 155  : 
; 156  :   // Select filters according to the fractional part of the x and y mv components
; 157  :   int8_t *hor_filter = kvz_g_luma_filter[mv[0] & 3];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	lea	ecx, DWORD PTR _kvz_g_luma_filter[eax*8]
	mov	DWORD PTR _hor_filter$[ebp], ecx

; 158  :   int8_t *ver_filter = kvz_g_luma_filter[mv[1] & 3];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 3
	lea	eax, DWORD PTR _kvz_g_luma_filter[edx*8]
	mov	DWORD PTR _ver_filter$[ebp], eax

; 159  : 
; 160  :   int16_t hor_filtered[KVZ_EXT_BLOCK_W_LUMA][LCU_WIDTH];
; 161  :   int16_t hor_stride = LCU_WIDTH;

	mov	eax, 64					; 00000040H
	mov	WORD PTR _hor_stride$[ebp], ax

; 162  : 
; 163  :   // Filter horizontally
; 164  :   for (y = 0; y < height + KVZ_EXT_PADDING_LUMA; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@kvz_sample
$LN2@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@kvz_sample:
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 7
	cmp	DWORD PTR _y$[ebp], eax
	jge	SHORT $LN3@kvz_sample

; 165  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@kvz_sample
$LN5@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN6@kvz_sample

; 166  :       int ypos = y - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 3
	mov	DWORD PTR _ypos$2[ebp], eax

; 167  :       int xpos = x - KVZ_LUMA_FILTER_OFFSET;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 3
	mov	DWORD PTR _xpos$1[ebp], eax

; 168  :       hor_filtered[y][x] = kvz_eight_tap_filter_hor_generic(hor_filter, &src[src_stride * ypos + xpos]) >> shift1;

	movsx	eax, WORD PTR _src_stride$[ebp]
	imul	eax, DWORD PTR _ypos$2[ebp]
	add	eax, DWORD PTR _xpos$1[ebp]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_filter$[ebp]
	push	ecx
	call	_kvz_eight_tap_filter_hor_generic
	add	esp, 8
	movsx	ecx, WORD PTR _shift1$[ebp]
	sar	eax, cl
	mov	edx, DWORD PTR _y$[ebp]
	shl	edx, 7
	lea	ecx, DWORD PTR _hor_filtered$[ebp+edx]
	mov	edx, DWORD PTR _x$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 169  :     }

	jmp	SHORT $LN5@kvz_sample
$LN6@kvz_sample:

; 170  :   }

	jmp	$LN2@kvz_sample
$LN3@kvz_sample:

; 171  : 
; 172  :   // Filter vertically
; 173  :   for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN10@kvz_sample
$LN8@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@kvz_sample:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@kvz_sample

; 174  :     for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN13@kvz_sample
$LN11@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN13@kvz_sample:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	SHORT $LN12@kvz_sample

; 175  :       dst[y * dst_stride + x] = kvz_fast_clip_32bit_to_pixel(((kvz_eight_tap_filter_ver_16bit_generic(ver_filter, &hor_filtered[y][x], hor_stride) >> shift2) + wp_offset1) >> wp_shift1);

	movzx	eax, WORD PTR _hor_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 7
	lea	edx, DWORD PTR _hor_filtered$[ebp+ecx]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _ver_filter$[ebp]
	push	edx
	call	_kvz_eight_tap_filter_ver_16bit_generic
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _shift2$[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _wp_offset1$[ebp]
	mov	ecx, DWORD PTR _wp_shift1$[ebp]
	sar	eax, cl
	push	eax
	call	_kvz_fast_clip_32bit_to_pixel
	add	esp, 4
	movsx	ecx, WORD PTR _dst_stride$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 176  :     }

	jmp	SHORT $LN11@kvz_sample
$LN12@kvz_sample:

; 177  :   }

	jmp	SHORT $LN8@kvz_sample
$LN1@kvz_sample:

; 178  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@kvz_sample
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 10768				; 00002a10H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@kvz_sample:
	DD	1
	DD	$LN16@kvz_sample
$LN16@kvz_sample:
	DD	-9192					; ffffdc18H
	DD	9088					; 00002380H
	DD	$LN15@kvz_sample
$LN15@kvz_sample:
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_kvz_sample_quarterpel_luma_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\ipol-generic.c
;	COMDAT _kvz_strategy_register_ipol_generic
_TEXT	SEGMENT
tv193 = -208						; size = 4
tv182 = -208						; size = 4
tv171 = -208						; size = 4
tv160 = -208						; size = 4
tv149 = -208						; size = 4
tv138 = -208						; size = 4
tv95 = -208						; size = 4
tv84 = -208						; size = 4
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_ipol_generic PROC		; COMDAT

; 813  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C34A0D60_ipol-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 814  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 815  : 
; 816  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_hpel_blocks_hor_ver_luma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_filter_hpel_blocks_hor_ver_luma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 817  :   success &= kvz_strategyselector_register(opaque, "filter_hpel_blocks_diag_luma", "generic", 0, &kvz_filter_hpel_blocks_diag_luma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_filter_hpel_blocks_diag_luma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN5@kvz_strate
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@kvz_strate
$LN5@kvz_strate:
	mov	DWORD PTR tv84[ebp], 1
$LN6@kvz_strate:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 818  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_hor_ver_luma", "generic", 0, &kvz_filter_qpel_blocks_hor_ver_luma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_filter_qpel_blocks_hor_ver_luma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN7@kvz_strate
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@kvz_strate
$LN7@kvz_strate:
	mov	DWORD PTR tv95[ebp], 1
$LN8@kvz_strate:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 819  :   success &= kvz_strategyselector_register(opaque, "filter_qpel_blocks_diag_luma", "generic", 0, &kvz_filter_qpel_blocks_diag_luma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_filter_qpel_blocks_diag_luma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN9@kvz_strate
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN10@kvz_strate
$LN9@kvz_strate:
	mov	DWORD PTR tv138[ebp], 1
$LN10@kvz_strate:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 820  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma", "generic", 0, &kvz_sample_quarterpel_luma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_sample_quarterpel_luma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN11@kvz_strate
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN12@kvz_strate
$LN11@kvz_strate:
	mov	DWORD PTR tv149[ebp], 1
$LN12@kvz_strate:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 821  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma", "generic", 0, &kvz_sample_octpel_chroma_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_sample_octpel_chroma_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN13@kvz_strate
	mov	DWORD PTR tv160[ebp], 0
	jmp	SHORT $LN14@kvz_strate
$LN13@kvz_strate:
	mov	DWORD PTR tv160[ebp], 1
$LN14@kvz_strate:
	mov	cl, BYTE PTR tv160[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 822  :   success &= kvz_strategyselector_register(opaque, "sample_quarterpel_luma_hi", "generic", 0, &kvz_sample_quarterpel_luma_hi_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_sample_quarterpel_luma_hi_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN15@kvz_strate
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN16@kvz_strate
$LN15@kvz_strate:
	mov	DWORD PTR tv171[ebp], 1
$LN16@kvz_strate:
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 823  :   success &= kvz_strategyselector_register(opaque, "sample_octpel_chroma_hi", "generic", 0, &kvz_sample_octpel_chroma_hi_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_sample_octpel_chroma_hi_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN17@kvz_strate
	mov	DWORD PTR tv182[ebp], 0
	jmp	SHORT $LN18@kvz_strate
$LN17@kvz_strate:
	mov	DWORD PTR tv182[ebp], 1
$LN18@kvz_strate:
	mov	cl, BYTE PTR tv182[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 824  :   success &= kvz_strategyselector_register(opaque, "get_extended_block", "generic", 0, &kvz_get_extended_block_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_get_extended_block_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BD@MPANGNDO@get_extended_block@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN19@kvz_strate
	mov	DWORD PTR tv193[ebp], 0
	jmp	SHORT $LN20@kvz_strate
$LN19@kvz_strate:
	mov	DWORD PTR tv193[ebp], 1
$LN20@kvz_strate:
	mov	cl, BYTE PTR tv193[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 825  : 
; 826  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 827  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_ipol_generic ENDP
_TEXT	ENDS
END
