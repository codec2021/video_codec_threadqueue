; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_g_dst_4
PUBLIC	_kvz_g_dct_4
PUBLIC	_kvz_g_dct_8
PUBLIC	_kvz_g_dct_16
PUBLIC	_kvz_g_dct_32
PUBLIC	_kvz_g_dst_4_t
PUBLIC	_kvz_g_dct_4_t
PUBLIC	_kvz_g_dct_8_t
PUBLIC	_kvz_g_dct_16_t
PUBLIC	_kvz_g_dct_32_t
PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__F22A899F_dct-generic@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_kvz_g_dst_4 DW	01dH
	DW	037H
	DW	04aH
	DW	054H
	DW	04aH
	DW	04aH
	DW	00H
	DW	0ffb6H
	DW	054H
	DW	0ffe3H
	DW	0ffb6H
	DW	037H
	DW	037H
	DW	0ffacH
	DW	04aH
	DW	0ffe3H
_kvz_g_dct_4 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
_kvz_g_dct_8 DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
_kvz_g_dct_16 DW 040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	05aH
	DW	057H
	DW	050H
	DW	046H
	DW	039H
	DW	02bH
	DW	019H
	DW	09H
	DW	0fff7H
	DW	0ffe7H
	DW	0ffd5H
	DW	0ffc7H
	DW	0ffbaH
	DW	0ffb0H
	DW	0ffa9H
	DW	0ffa6H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	057H
	DW	039H
	DW	09H
	DW	0ffd5H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffe7H
	DW	019H
	DW	046H
	DW	05aH
	DW	050H
	DW	02bH
	DW	0fff7H
	DW	0ffc7H
	DW	0ffa9H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	050H
	DW	09H
	DW	0ffbaH
	DW	0ffa9H
	DW	0ffe7H
	DW	039H
	DW	05aH
	DW	02bH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffc7H
	DW	019H
	DW	057H
	DW	046H
	DW	0fff7H
	DW	0ffb0H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	046H
	DW	0ffd5H
	DW	0ffa9H
	DW	09H
	DW	05aH
	DW	019H
	DW	0ffb0H
	DW	0ffc7H
	DW	039H
	DW	050H
	DW	0ffe7H
	DW	0ffa6H
	DW	0fff7H
	DW	057H
	DW	02bH
	DW	0ffbaH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	039H
	DW	0ffb0H
	DW	0ffe7H
	DW	05aH
	DW	0fff7H
	DW	0ffa9H
	DW	02bH
	DW	046H
	DW	0ffbaH
	DW	0ffd5H
	DW	057H
	DW	09H
	DW	0ffa6H
	DW	019H
	DW	050H
	DW	0ffc7H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	02bH
	DW	0ffa6H
	DW	039H
	DW	019H
	DW	0ffa9H
	DW	046H
	DW	09H
	DW	0ffb0H
	DW	050H
	DW	0fff7H
	DW	0ffbaH
	DW	057H
	DW	0ffe7H
	DW	0ffc7H
	DW	05aH
	DW	0ffd5H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	019H
	DW	0ffbaH
	DW	05aH
	DW	0ffb0H
	DW	02bH
	DW	09H
	DW	0ffc7H
	DW	057H
	DW	0ffa9H
	DW	039H
	DW	0fff7H
	DW	0ffd5H
	DW	050H
	DW	0ffa6H
	DW	046H
	DW	0ffe7H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	09H
	DW	0ffe7H
	DW	02bH
	DW	0ffc7H
	DW	046H
	DW	0ffb0H
	DW	057H
	DW	0ffa6H
	DW	05aH
	DW	0ffa9H
	DW	050H
	DW	0ffbaH
	DW	039H
	DW	0ffd5H
	DW	019H
	DW	0fff7H
_kvz_g_dct_32 DW 040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	040H
	DW	05aH
	DW	05aH
	DW	058H
	DW	055H
	DW	052H
	DW	04eH
	DW	049H
	DW	043H
	DW	03dH
	DW	036H
	DW	02eH
	DW	026H
	DW	01fH
	DW	016H
	DW	0dH
	DW	04H
	DW	0fffcH
	DW	0fff3H
	DW	0ffeaH
	DW	0ffe1H
	DW	0ffdaH
	DW	0ffd2H
	DW	0ffcaH
	DW	0ffc3H
	DW	0ffbdH
	DW	0ffb7H
	DW	0ffb2H
	DW	0ffaeH
	DW	0ffabH
	DW	0ffa8H
	DW	0ffa6H
	DW	0ffa6H
	DW	05aH
	DW	057H
	DW	050H
	DW	046H
	DW	039H
	DW	02bH
	DW	019H
	DW	09H
	DW	0fff7H
	DW	0ffe7H
	DW	0ffd5H
	DW	0ffc7H
	DW	0ffbaH
	DW	0ffb0H
	DW	0ffa9H
	DW	0ffa6H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb0H
	DW	0ffbaH
	DW	0ffc7H
	DW	0ffd5H
	DW	0ffe7H
	DW	0fff7H
	DW	09H
	DW	019H
	DW	02bH
	DW	039H
	DW	046H
	DW	050H
	DW	057H
	DW	05aH
	DW	05aH
	DW	052H
	DW	043H
	DW	02eH
	DW	016H
	DW	0fffcH
	DW	0ffe1H
	DW	0ffcaH
	DW	0ffb7H
	DW	0ffabH
	DW	0ffa6H
	DW	0ffa8H
	DW	0ffb2H
	DW	0ffc3H
	DW	0ffdaH
	DW	0fff3H
	DW	0dH
	DW	026H
	DW	03dH
	DW	04eH
	DW	058H
	DW	05aH
	DW	055H
	DW	049H
	DW	036H
	DW	01fH
	DW	04H
	DW	0ffeaH
	DW	0ffd2H
	DW	0ffbdH
	DW	0ffaeH
	DW	0ffa6H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	059H
	DW	04bH
	DW	032H
	DW	012H
	DW	0ffeeH
	DW	0ffceH
	DW	0ffb5H
	DW	0ffa7H
	DW	0ffa7H
	DW	0ffb5H
	DW	0ffceH
	DW	0ffeeH
	DW	012H
	DW	032H
	DW	04bH
	DW	059H
	DW	058H
	DW	043H
	DW	01fH
	DW	0fff3H
	DW	0ffcaH
	DW	0ffaeH
	DW	0ffa6H
	DW	0ffb2H
	DW	0ffd2H
	DW	0fffcH
	DW	026H
	DW	049H
	DW	05aH
	DW	055H
	DW	03dH
	DW	016H
	DW	0ffeaH
	DW	0ffc3H
	DW	0ffabH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffdaH
	DW	04H
	DW	02eH
	DW	04eH
	DW	05aH
	DW	052H
	DW	036H
	DW	0dH
	DW	0ffe1H
	DW	0ffbdH
	DW	0ffa8H
	DW	057H
	DW	039H
	DW	09H
	DW	0ffd5H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffe7H
	DW	019H
	DW	046H
	DW	05aH
	DW	050H
	DW	02bH
	DW	0fff7H
	DW	0ffc7H
	DW	0ffa9H
	DW	0ffa9H
	DW	0ffc7H
	DW	0fff7H
	DW	02bH
	DW	050H
	DW	05aH
	DW	046H
	DW	019H
	DW	0ffe7H
	DW	0ffbaH
	DW	0ffa6H
	DW	0ffb0H
	DW	0ffd5H
	DW	09H
	DW	039H
	DW	057H
	DW	055H
	DW	02eH
	DW	0fff3H
	DW	0ffbdH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffeaH
	DW	026H
	DW	052H
	DW	058H
	DW	036H
	DW	0fffcH
	DW	0ffc3H
	DW	0ffa6H
	DW	0ffb2H
	DW	0ffe1H
	DW	01fH
	DW	04eH
	DW	05aH
	DW	03dH
	DW	04H
	DW	0ffcaH
	DW	0ffa8H
	DW	0ffaeH
	DW	0ffdaH
	DW	016H
	DW	049H
	DW	05aH
	DW	043H
	DW	0dH
	DW	0ffd2H
	DW	0ffabH
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	053H
	DW	024H
	DW	0ffdcH
	DW	0ffadH
	DW	0ffadH
	DW	0ffdcH
	DW	024H
	DW	053H
	DW	052H
	DW	016H
	DW	0ffcaH
	DW	0ffa6H
	DW	0ffc3H
	DW	0dH
	DW	04eH
	DW	055H
	DW	01fH
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffbdH
	DW	04H
	DW	049H
	DW	058H
	DW	026H
	DW	0ffdaH
	DW	0ffa8H
	DW	0ffb7H
	DW	0fffcH
	DW	043H
	DW	05aH
	DW	02eH
	DW	0ffe1H
	DW	0ffabH
	DW	0ffb2H
	DW	0fff3H
	DW	03dH
	DW	05aH
	DW	036H
	DW	0ffeaH
	DW	0ffaeH
	DW	050H
	DW	09H
	DW	0ffbaH
	DW	0ffa9H
	DW	0ffe7H
	DW	039H
	DW	05aH
	DW	02bH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffc7H
	DW	019H
	DW	057H
	DW	046H
	DW	0fff7H
	DW	0ffb0H
	DW	0ffb0H
	DW	0fff7H
	DW	046H
	DW	057H
	DW	019H
	DW	0ffc7H
	DW	0ffa6H
	DW	0ffd5H
	DW	02bH
	DW	05aH
	DW	039H
	DW	0ffe7H
	DW	0ffa9H
	DW	0ffbaH
	DW	09H
	DW	050H
	DW	04eH
	DW	0fffcH
	DW	0ffaeH
	DW	0ffb7H
	DW	0dH
	DW	055H
	DW	043H
	DW	0ffeaH
	DW	0ffa8H
	DW	0ffc3H
	DW	01fH
	DW	05aH
	DW	036H
	DW	0ffdaH
	DW	0ffa6H
	DW	0ffd2H
	DW	02eH
	DW	05aH
	DW	026H
	DW	0ffcaH
	DW	0ffa6H
	DW	0ffe1H
	DW	03dH
	DW	058H
	DW	016H
	DW	0ffbdH
	DW	0ffabH
	DW	0fff3H
	DW	049H
	DW	052H
	DW	04H
	DW	0ffb2H
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	04bH
	DW	0ffeeH
	DW	0ffa7H
	DW	0ffceH
	DW	032H
	DW	059H
	DW	012H
	DW	0ffb5H
	DW	0ffb5H
	DW	012H
	DW	059H
	DW	032H
	DW	0ffceH
	DW	0ffa7H
	DW	0ffeeH
	DW	04bH
	DW	049H
	DW	0ffe1H
	DW	0ffa6H
	DW	0ffeaH
	DW	04eH
	DW	043H
	DW	0ffdaH
	DW	0ffa6H
	DW	0fff3H
	DW	052H
	DW	03dH
	DW	0ffd2H
	DW	0ffa8H
	DW	0fffcH
	DW	055H
	DW	036H
	DW	0ffcaH
	DW	0ffabH
	DW	04H
	DW	058H
	DW	02eH
	DW	0ffc3H
	DW	0ffaeH
	DW	0dH
	DW	05aH
	DW	026H
	DW	0ffbdH
	DW	0ffb2H
	DW	016H
	DW	05aH
	DW	01fH
	DW	0ffb7H
	DW	046H
	DW	0ffd5H
	DW	0ffa9H
	DW	09H
	DW	05aH
	DW	019H
	DW	0ffb0H
	DW	0ffc7H
	DW	039H
	DW	050H
	DW	0ffe7H
	DW	0ffa6H
	DW	0fff7H
	DW	057H
	DW	02bH
	DW	0ffbaH
	DW	0ffbaH
	DW	02bH
	DW	057H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffe7H
	DW	050H
	DW	039H
	DW	0ffc7H
	DW	0ffb0H
	DW	019H
	DW	05aH
	DW	09H
	DW	0ffa9H
	DW	0ffd5H
	DW	046H
	DW	043H
	DW	0ffcaH
	DW	0ffb2H
	DW	026H
	DW	055H
	DW	0ffeaH
	DW	0ffa6H
	DW	04H
	DW	05aH
	DW	0dH
	DW	0ffa8H
	DW	0ffe1H
	DW	052H
	DW	02eH
	DW	0ffb7H
	DW	0ffc3H
	DW	03dH
	DW	049H
	DW	0ffd2H
	DW	0ffaeH
	DW	01fH
	DW	058H
	DW	0fff3H
	DW	0ffa6H
	DW	0fffcH
	DW	05aH
	DW	016H
	DW	0ffabH
	DW	0ffdaH
	DW	04eH
	DW	036H
	DW	0ffbdH
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	040H
	DW	0ffc0H
	DW	0ffc0H
	DW	040H
	DW	03dH
	DW	0ffb7H
	DW	0ffd2H
	DW	052H
	DW	01fH
	DW	0ffa8H
	DW	0fff3H
	DW	05aH
	DW	0fffcH
	DW	0ffa6H
	DW	016H
	DW	055H
	DW	0ffdaH
	DW	0ffb2H
	DW	036H
	DW	043H
	DW	0ffbdH
	DW	0ffcaH
	DW	04eH
	DW	026H
	DW	0ffabH
	DW	0ffeaH
	DW	05aH
	DW	04H
	DW	0ffa6H
	DW	0dH
	DW	058H
	DW	0ffe1H
	DW	0ffaeH
	DW	02eH
	DW	049H
	DW	0ffc3H
	DW	039H
	DW	0ffb0H
	DW	0ffe7H
	DW	05aH
	DW	0fff7H
	DW	0ffa9H
	DW	02bH
	DW	046H
	DW	0ffbaH
	DW	0ffd5H
	DW	057H
	DW	09H
	DW	0ffa6H
	DW	019H
	DW	050H
	DW	0ffc7H
	DW	0ffc7H
	DW	050H
	DW	019H
	DW	0ffa6H
	DW	09H
	DW	057H
	DW	0ffd5H
	DW	0ffbaH
	DW	046H
	DW	02bH
	DW	0ffa9H
	DW	0fff7H
	DW	05aH
	DW	0ffe7H
	DW	0ffb0H
	DW	039H
	DW	036H
	DW	0ffabH
	DW	0fffcH
	DW	058H
	DW	0ffd2H
	DW	0ffc3H
	DW	052H
	DW	0dH
	DW	0ffa6H
	DW	026H
	DW	043H
	DW	0ffb2H
	DW	0ffeaH
	DW	05aH
	DW	0ffe1H
	DW	0ffb7H
	DW	049H
	DW	01fH
	DW	0ffa6H
	DW	016H
	DW	04eH
	DW	0ffbdH
	DW	0ffdaH
	DW	05aH
	DW	0fff3H
	DW	0ffaeH
	DW	03dH
	DW	02eH
	DW	0ffa8H
	DW	04H
	DW	055H
	DW	0ffcaH
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	032H
	DW	0ffa7H
	DW	012H
	DW	04bH
	DW	0ffb5H
	DW	0ffeeH
	DW	059H
	DW	0ffceH
	DW	0ffceH
	DW	059H
	DW	0ffeeH
	DW	0ffb5H
	DW	04bH
	DW	012H
	DW	0ffa7H
	DW	032H
	DW	02eH
	DW	0ffa6H
	DW	026H
	DW	036H
	DW	0ffa6H
	DW	01fH
	DW	03dH
	DW	0ffa8H
	DW	016H
	DW	043H
	DW	0ffabH
	DW	0dH
	DW	049H
	DW	0ffaeH
	DW	04H
	DW	04eH
	DW	0ffb2H
	DW	0fffcH
	DW	052H
	DW	0ffb7H
	DW	0fff3H
	DW	055H
	DW	0ffbdH
	DW	0ffeaH
	DW	058H
	DW	0ffc3H
	DW	0ffe1H
	DW	05aH
	DW	0ffcaH
	DW	0ffdaH
	DW	05aH
	DW	0ffd2H
	DW	02bH
	DW	0ffa6H
	DW	039H
	DW	019H
	DW	0ffa9H
	DW	046H
	DW	09H
	DW	0ffb0H
	DW	050H
	DW	0fff7H
	DW	0ffbaH
	DW	057H
	DW	0ffe7H
	DW	0ffc7H
	DW	05aH
	DW	0ffd5H
	DW	0ffd5H
	DW	05aH
	DW	0ffc7H
	DW	0ffe7H
	DW	057H
	DW	0ffbaH
	DW	0fff7H
	DW	050H
	DW	0ffb0H
	DW	09H
	DW	046H
	DW	0ffa9H
	DW	019H
	DW	039H
	DW	0ffa6H
	DW	02bH
	DW	026H
	DW	0ffa8H
	DW	049H
	DW	0fffcH
	DW	0ffbdH
	DW	05aH
	DW	0ffd2H
	DW	0ffe1H
	DW	055H
	DW	0ffb2H
	DW	0dH
	DW	03dH
	DW	0ffa6H
	DW	036H
	DW	016H
	DW	0ffaeH
	DW	052H
	DW	0ffeaH
	DW	0ffcaH
	DW	05aH
	DW	0ffc3H
	DW	0fff3H
	DW	04eH
	DW	0ffabH
	DW	01fH
	DW	02eH
	DW	0ffa6H
	DW	043H
	DW	04H
	DW	0ffb7H
	DW	058H
	DW	0ffdaH
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	024H
	DW	0ffadH
	DW	053H
	DW	0ffdcH
	DW	0ffdcH
	DW	053H
	DW	0ffadH
	DW	024H
	DW	01fH
	DW	0ffb2H
	DW	05aH
	DW	0ffc3H
	DW	04H
	DW	036H
	DW	0ffa8H
	DW	052H
	DW	0ffdaH
	DW	0ffeaH
	DW	049H
	DW	0ffa6H
	DW	043H
	DW	0fff3H
	DW	0ffd2H
	DW	055H
	DW	0ffabH
	DW	02eH
	DW	0dH
	DW	0ffbdH
	DW	05aH
	DW	0ffb7H
	DW	016H
	DW	026H
	DW	0ffaeH
	DW	058H
	DW	0ffcaH
	DW	0fffcH
	DW	03dH
	DW	0ffa6H
	DW	04eH
	DW	0ffe1H
	DW	019H
	DW	0ffbaH
	DW	05aH
	DW	0ffb0H
	DW	02bH
	DW	09H
	DW	0ffc7H
	DW	057H
	DW	0ffa9H
	DW	039H
	DW	0fff7H
	DW	0ffd5H
	DW	050H
	DW	0ffa6H
	DW	046H
	DW	0ffe7H
	DW	0ffe7H
	DW	046H
	DW	0ffa6H
	DW	050H
	DW	0ffd5H
	DW	0fff7H
	DW	039H
	DW	0ffa9H
	DW	057H
	DW	0ffc7H
	DW	09H
	DW	02bH
	DW	0ffb0H
	DW	05aH
	DW	0ffbaH
	DW	019H
	DW	016H
	DW	0ffc3H
	DW	055H
	DW	0ffa6H
	DW	049H
	DW	0ffdaH
	DW	0fffcH
	DW	02eH
	DW	0ffb2H
	DW	05aH
	DW	0ffaeH
	DW	036H
	DW	0fff3H
	DW	0ffe1H
	DW	043H
	DW	0ffa8H
	DW	058H
	DW	0ffbdH
	DW	01fH
	DW	0dH
	DW	0ffcaH
	DW	052H
	DW	0ffa6H
	DW	04eH
	DW	0ffd2H
	DW	04H
	DW	026H
	DW	0ffb7H
	DW	05aH
	DW	0ffabH
	DW	03dH
	DW	0ffeaH
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	012H
	DW	0ffceH
	DW	04bH
	DW	0ffa7H
	DW	059H
	DW	0ffb5H
	DW	032H
	DW	0ffeeH
	DW	0ffeeH
	DW	032H
	DW	0ffb5H
	DW	059H
	DW	0ffa7H
	DW	04bH
	DW	0ffceH
	DW	012H
	DW	0dH
	DW	0ffdaH
	DW	03dH
	DW	0ffb2H
	DW	058H
	DW	0ffa6H
	DW	055H
	DW	0ffb7H
	DW	036H
	DW	0ffe1H
	DW	04H
	DW	016H
	DW	0ffd2H
	DW	043H
	DW	0ffaeH
	DW	05aH
	DW	0ffa6H
	DW	052H
	DW	0ffbdH
	DW	02eH
	DW	0ffeaH
	DW	0fffcH
	DW	01fH
	DW	0ffcaH
	DW	049H
	DW	0ffabH
	DW	05aH
	DW	0ffa8H
	DW	04eH
	DW	0ffc3H
	DW	026H
	DW	0fff3H
	DW	09H
	DW	0ffe7H
	DW	02bH
	DW	0ffc7H
	DW	046H
	DW	0ffb0H
	DW	057H
	DW	0ffa6H
	DW	05aH
	DW	0ffa9H
	DW	050H
	DW	0ffbaH
	DW	039H
	DW	0ffd5H
	DW	019H
	DW	0fff7H
	DW	0fff7H
	DW	019H
	DW	0ffd5H
	DW	039H
	DW	0ffbaH
	DW	050H
	DW	0ffa9H
	DW	05aH
	DW	0ffa6H
	DW	057H
	DW	0ffb0H
	DW	046H
	DW	0ffc7H
	DW	02bH
	DW	0ffe7H
	DW	09H
	DW	04H
	DW	0fff3H
	DW	016H
	DW	0ffe1H
	DW	026H
	DW	0ffd2H
	DW	036H
	DW	0ffc3H
	DW	043H
	DW	0ffb7H
	DW	04eH
	DW	0ffaeH
	DW	055H
	DW	0ffa8H
	DW	05aH
	DW	0ffa6H
	DW	05aH
	DW	0ffa6H
	DW	058H
	DW	0ffabH
	DW	052H
	DW	0ffb2H
	DW	049H
	DW	0ffbdH
	DW	03dH
	DW	0ffcaH
	DW	02eH
	DW	0ffdaH
	DW	01fH
	DW	0ffeaH
	DW	0dH
	DW	0fffcH
_kvz_g_dst_4_t DW 01dH
	DW	04aH
	DW	054H
	DW	037H
	DW	037H
	DW	04aH
	DW	0ffe3H
	DW	0ffacH
	DW	04aH
	DW	00H
	DW	0ffb6H
	DW	04aH
	DW	054H
	DW	0ffb6H
	DW	037H
	DW	0ffe3H
_kvz_g_dct_4_t DW 040H
	DW	053H
	DW	040H
	DW	024H
	DW	040H
	DW	024H
	DW	0ffc0H
	DW	0ffadH
	DW	040H
	DW	0ffdcH
	DW	0ffc0H
	DW	053H
	DW	040H
	DW	0ffadH
	DW	040H
	DW	0ffdcH
_kvz_g_dct_8_t DW 040H
	DW	059H
	DW	053H
	DW	04bH
	DW	040H
	DW	032H
	DW	024H
	DW	012H
	DW	040H
	DW	04bH
	DW	024H
	DW	0ffeeH
	DW	0ffc0H
	DW	0ffa7H
	DW	0ffadH
	DW	0ffceH
	DW	040H
	DW	032H
	DW	0ffdcH
	DW	0ffa7H
	DW	0ffc0H
	DW	012H
	DW	053H
	DW	04bH
	DW	040H
	DW	012H
	DW	0ffadH
	DW	0ffceH
	DW	040H
	DW	04bH
	DW	0ffdcH
	DW	0ffa7H
	DW	040H
	DW	0ffeeH
	DW	0ffadH
	DW	032H
	DW	040H
	DW	0ffb5H
	DW	0ffdcH
	DW	059H
	DW	040H
	DW	0ffceH
	DW	0ffdcH
	DW	059H
	DW	0ffc0H
	DW	0ffeeH
	DW	053H
	DW	0ffb5H
	DW	040H
	DW	0ffb5H
	DW	024H
	DW	012H
	DW	0ffc0H
	DW	059H
	DW	0ffadH
	DW	032H
	DW	040H
	DW	0ffa7H
	DW	053H
	DW	0ffb5H
	DW	040H
	DW	0ffceH
	DW	024H
	DW	0ffeeH
_kvz_g_dct_16_t DW 040H
	DW	05aH
	DW	059H
	DW	057H
	DW	053H
	DW	050H
	DW	04bH
	DW	046H
	DW	040H
	DW	039H
	DW	032H
	DW	02bH
	DW	024H
	DW	019H
	DW	012H
	DW	09H
	DW	040H
	DW	057H
	DW	04bH
	DW	039H
	DW	024H
	DW	09H
	DW	0ffeeH
	DW	0ffd5H
	DW	0ffc0H
	DW	0ffb0H
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffadH
	DW	0ffbaH
	DW	0ffceH
	DW	0ffe7H
	DW	040H
	DW	050H
	DW	032H
	DW	09H
	DW	0ffdcH
	DW	0ffbaH
	DW	0ffa7H
	DW	0ffa9H
	DW	0ffc0H
	DW	0ffe7H
	DW	012H
	DW	039H
	DW	053H
	DW	05aH
	DW	04bH
	DW	02bH
	DW	040H
	DW	046H
	DW	012H
	DW	0ffd5H
	DW	0ffadH
	DW	0ffa9H
	DW	0ffceH
	DW	09H
	DW	040H
	DW	05aH
	DW	04bH
	DW	019H
	DW	0ffdcH
	DW	0ffb0H
	DW	0ffa7H
	DW	0ffc7H
	DW	040H
	DW	039H
	DW	0ffeeH
	DW	0ffb0H
	DW	0ffadH
	DW	0ffe7H
	DW	032H
	DW	05aH
	DW	040H
	DW	0fff7H
	DW	0ffb5H
	DW	0ffa9H
	DW	0ffdcH
	DW	02bH
	DW	059H
	DW	046H
	DW	040H
	DW	02bH
	DW	0ffceH
	DW	0ffa6H
	DW	0ffdcH
	DW	039H
	DW	059H
	DW	019H
	DW	0ffc0H
	DW	0ffa9H
	DW	0ffeeH
	DW	046H
	DW	053H
	DW	09H
	DW	0ffb5H
	DW	0ffb0H
	DW	040H
	DW	019H
	DW	0ffb5H
	DW	0ffbaH
	DW	024H
	DW	05aH
	DW	012H
	DW	0ffb0H
	DW	0ffc0H
	DW	02bH
	DW	059H
	DW	09H
	DW	0ffadH
	DW	0ffc7H
	DW	032H
	DW	057H
	DW	040H
	DW	09H
	DW	0ffa7H
	DW	0ffe7H
	DW	053H
	DW	02bH
	DW	0ffb5H
	DW	0ffc7H
	DW	040H
	DW	046H
	DW	0ffceH
	DW	0ffb0H
	DW	024H
	DW	057H
	DW	0ffeeH
	DW	0ffa6H
	DW	040H
	DW	0fff7H
	DW	0ffa7H
	DW	019H
	DW	053H
	DW	0ffd5H
	DW	0ffb5H
	DW	039H
	DW	040H
	DW	0ffbaH
	DW	0ffceH
	DW	050H
	DW	024H
	DW	0ffa9H
	DW	0ffeeH
	DW	05aH
	DW	040H
	DW	0ffe7H
	DW	0ffb5H
	DW	046H
	DW	024H
	DW	0ffa6H
	DW	012H
	DW	050H
	DW	0ffc0H
	DW	0ffd5H
	DW	059H
	DW	0fff7H
	DW	0ffadH
	DW	039H
	DW	032H
	DW	0ffa9H
	DW	040H
	DW	0ffd5H
	DW	0ffceH
	DW	05aH
	DW	0ffdcH
	DW	0ffc7H
	DW	059H
	DW	0ffe7H
	DW	0ffc0H
	DW	057H
	DW	0ffeeH
	DW	0ffbaH
	DW	053H
	DW	0fff7H
	DW	0ffb5H
	DW	050H
	DW	040H
	DW	0ffc7H
	DW	0ffeeH
	DW	050H
	DW	0ffadH
	DW	019H
	DW	032H
	DW	0ffa6H
	DW	040H
	DW	09H
	DW	0ffb5H
	DW	057H
	DW	0ffdcH
	DW	0ffd5H
	DW	059H
	DW	0ffbaH
	DW	040H
	DW	0ffbaH
	DW	012H
	DW	02bH
	DW	0ffadH
	DW	057H
	DW	0ffceH
	DW	0fff7H
	DW	040H
	DW	0ffa6H
	DW	04bH
	DW	0ffe7H
	DW	0ffdcH
	DW	050H
	DW	0ffa7H
	DW	039H
	DW	040H
	DW	0ffb0H
	DW	032H
	DW	0fff7H
	DW	0ffdcH
	DW	046H
	DW	0ffa7H
	DW	057H
	DW	0ffc0H
	DW	019H
	DW	012H
	DW	0ffc7H
	DW	053H
	DW	0ffa6H
	DW	04bH
	DW	0ffd5H
	DW	040H
	DW	0ffa9H
	DW	04bH
	DW	0ffc7H
	DW	024H
	DW	0fff7H
	DW	0ffeeH
	DW	02bH
	DW	0ffc0H
	DW	050H
	DW	0ffa7H
	DW	05aH
	DW	0ffadH
	DW	046H
	DW	0ffceH
	DW	019H
	DW	040H
	DW	0ffa6H
	DW	059H
	DW	0ffa9H
	DW	053H
	DW	0ffb0H
	DW	04bH
	DW	0ffbaH
	DW	040H
	DW	0ffc7H
	DW	032H
	DW	0ffd5H
	DW	024H
	DW	0ffe7H
	DW	012H
	DW	0fff7H
_kvz_g_dct_32_t DW 040H
	DW	05aH
	DW	05aH
	DW	05aH
	DW	059H
	DW	058H
	DW	057H
	DW	055H
	DW	053H
	DW	052H
	DW	050H
	DW	04eH
	DW	04bH
	DW	049H
	DW	046H
	DW	043H
	DW	040H
	DW	03dH
	DW	039H
	DW	036H
	DW	032H
	DW	02eH
	DW	02bH
	DW	026H
	DW	024H
	DW	01fH
	DW	019H
	DW	016H
	DW	012H
	DW	0dH
	DW	09H
	DW	04H
	DW	040H
	DW	05aH
	DW	057H
	DW	052H
	DW	04bH
	DW	043H
	DW	039H
	DW	02eH
	DW	024H
	DW	016H
	DW	09H
	DW	0fffcH
	DW	0ffeeH
	DW	0ffe1H
	DW	0ffd5H
	DW	0ffcaH
	DW	0ffc0H
	DW	0ffb7H
	DW	0ffb0H
	DW	0ffabH
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffa6H
	DW	0ffa8H
	DW	0ffadH
	DW	0ffb2H
	DW	0ffbaH
	DW	0ffc3H
	DW	0ffceH
	DW	0ffdaH
	DW	0ffe7H
	DW	0fff3H
	DW	040H
	DW	058H
	DW	050H
	DW	043H
	DW	032H
	DW	01fH
	DW	09H
	DW	0fff3H
	DW	0ffdcH
	DW	0ffcaH
	DW	0ffbaH
	DW	0ffaeH
	DW	0ffa7H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb2H
	DW	0ffc0H
	DW	0ffd2H
	DW	0ffe7H
	DW	0fffcH
	DW	012H
	DW	026H
	DW	039H
	DW	049H
	DW	053H
	DW	05aH
	DW	05aH
	DW	055H
	DW	04bH
	DW	03dH
	DW	02bH
	DW	016H
	DW	040H
	DW	055H
	DW	046H
	DW	02eH
	DW	012H
	DW	0fff3H
	DW	0ffd5H
	DW	0ffbdH
	DW	0ffadH
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffb7H
	DW	0ffceH
	DW	0ffeaH
	DW	09H
	DW	026H
	DW	040H
	DW	052H
	DW	05aH
	DW	058H
	DW	04bH
	DW	036H
	DW	019H
	DW	0fffcH
	DW	0ffdcH
	DW	0ffc3H
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffa7H
	DW	0ffb2H
	DW	0ffc7H
	DW	0ffe1H
	DW	040H
	DW	052H
	DW	039H
	DW	016H
	DW	0ffeeH
	DW	0ffcaH
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffadH
	DW	0ffc3H
	DW	0ffe7H
	DW	0dH
	DW	032H
	DW	04eH
	DW	05aH
	DW	055H
	DW	040H
	DW	01fH
	DW	0fff7H
	DW	0ffd2H
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffa9H
	DW	0ffbdH
	DW	0ffdcH
	DW	04H
	DW	02bH
	DW	049H
	DW	059H
	DW	058H
	DW	046H
	DW	026H
	DW	040H
	DW	04eH
	DW	02bH
	DW	0fffcH
	DW	0ffceH
	DW	0ffaeH
	DW	0ffa6H
	DW	0ffb7H
	DW	0ffdcH
	DW	0dH
	DW	039H
	DW	055H
	DW	059H
	DW	043H
	DW	019H
	DW	0ffeaH
	DW	0ffc0H
	DW	0ffa8H
	DW	0ffa9H
	DW	0ffc3H
	DW	0ffeeH
	DW	01fH
	DW	046H
	DW	05aH
	DW	053H
	DW	036H
	DW	09H
	DW	0ffdaH
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffb0H
	DW	0ffd2H
	DW	040H
	DW	049H
	DW	019H
	DW	0ffe1H
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffbaH
	DW	0ffeaH
	DW	024H
	DW	04eH
	DW	05aH
	DW	043H
	DW	012H
	DW	0ffdaH
	DW	0ffb0H
	DW	0ffa6H
	DW	0ffc0H
	DW	0fff3H
	DW	02bH
	DW	052H
	DW	059H
	DW	03dH
	DW	09H
	DW	0ffd2H
	DW	0ffadH
	DW	0ffa8H
	DW	0ffc7H
	DW	0fffcH
	DW	032H
	DW	055H
	DW	057H
	DW	036H
	DW	040H
	DW	043H
	DW	09H
	DW	0ffcaH
	DW	0ffa7H
	DW	0ffb2H
	DW	0ffe7H
	DW	026H
	DW	053H
	DW	055H
	DW	02bH
	DW	0ffeaH
	DW	0ffb5H
	DW	0ffa6H
	DW	0ffc7H
	DW	04H
	DW	040H
	DW	05aH
	DW	046H
	DW	0dH
	DW	0ffceH
	DW	0ffa8H
	DW	0ffb0H
	DW	0ffe1H
	DW	024H
	DW	052H
	DW	057H
	DW	02eH
	DW	0ffeeH
	DW	0ffb7H
	DW	0ffa6H
	DW	0ffc3H
	DW	040H
	DW	03dH
	DW	0fff7H
	DW	0ffb7H
	DW	0ffa7H
	DW	0ffd2H
	DW	019H
	DW	052H
	DW	053H
	DW	01fH
	DW	0ffd5H
	DW	0ffa8H
	DW	0ffb5H
	DW	0fff3H
	DW	039H
	DW	05aH
	DW	040H
	DW	0fffcH
	DW	0ffbaH
	DW	0ffa6H
	DW	0ffceH
	DW	016H
	DW	050H
	DW	055H
	DW	024H
	DW	0ffdaH
	DW	0ffa9H
	DW	0ffb2H
	DW	0ffeeH
	DW	036H
	DW	05aH
	DW	043H
	DW	040H
	DW	036H
	DW	0ffe7H
	DW	0ffabH
	DW	0ffb5H
	DW	0fffcH
	DW	046H
	DW	058H
	DW	024H
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffc3H
	DW	012H
	DW	052H
	DW	050H
	DW	0dH
	DW	0ffc0H
	DW	0ffa6H
	DW	0ffd5H
	DW	026H
	DW	059H
	DW	043H
	DW	0fff7H
	DW	0ffb2H
	DW	0ffadH
	DW	0ffeaH
	DW	039H
	DW	05aH
	DW	032H
	DW	0ffe1H
	DW	0ffa9H
	DW	0ffb7H
	DW	040H
	DW	02eH
	DW	0ffd5H
	DW	0ffa6H
	DW	0ffceH
	DW	026H
	DW	05aH
	DW	036H
	DW	0ffdcH
	DW	0ffa6H
	DW	0ffc7H
	DW	01fH
	DW	059H
	DW	03dH
	DW	0ffe7H
	DW	0ffa8H
	DW	0ffc0H
	DW	016H
	DW	057H
	DW	043H
	DW	0ffeeH
	DW	0ffabH
	DW	0ffbaH
	DW	0dH
	DW	053H
	DW	049H
	DW	0fff7H
	DW	0ffaeH
	DW	0ffb5H
	DW	04H
	DW	050H
	DW	04eH
	DW	040H
	DW	026H
	DW	0ffc7H
	DW	0ffa8H
	DW	0ffeeH
	DW	049H
	DW	050H
	DW	0fffcH
	DW	0ffadH
	DW	0ffbdH
	DW	019H
	DW	05aH
	DW	032H
	DW	0ffd2H
	DW	0ffa6H
	DW	0ffe1H
	DW	040H
	DW	055H
	DW	09H
	DW	0ffb2H
	DW	0ffb5H
	DW	0dH
	DW	057H
	DW	03dH
	DW	0ffdcH
	DW	0ffa6H
	DW	0ffd5H
	DW	036H
	DW	059H
	DW	016H
	DW	0ffbaH
	DW	0ffaeH
	DW	040H
	DW	01fH
	DW	0ffbaH
	DW	0ffb2H
	DW	012H
	DW	05aH
	DW	02bH
	DW	0ffc3H
	DW	0ffadH
	DW	04H
	DW	057H
	DW	036H
	DW	0ffceH
	DW	0ffa8H
	DW	0fff7H
	DW	052H
	DW	040H
	DW	0ffdaH
	DW	0ffa6H
	DW	0ffeaH
	DW	04bH
	DW	049H
	DW	0ffe7H
	DW	0ffa6H
	DW	0ffdcH
	DW	043H
	DW	050H
	DW	0fff3H
	DW	0ffa7H
	DW	0ffd2H
	DW	039H
	DW	055H
	DW	040H
	DW	016H
	DW	0ffb0H
	DW	0ffc3H
	DW	032H
	DW	055H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffdcH
	DW	049H
	DW	046H
	DW	0ffdaH
	DW	0ffa7H
	DW	0fffcH
	DW	057H
	DW	02eH
	DW	0ffc0H
	DW	0ffb2H
	DW	019H
	DW	05aH
	DW	012H
	DW	0ffaeH
	DW	0ffc7H
	DW	036H
	DW	053H
	DW	0fff3H
	DW	0ffa6H
	DW	0ffe1H
	DW	04bH
	DW	043H
	DW	0ffd5H
	DW	0ffa8H
	DW	040H
	DW	0dH
	DW	0ffa9H
	DW	0ffdaH
	DW	04bH
	DW	03dH
	DW	0ffc7H
	DW	0ffb2H
	DW	024H
	DW	058H
	DW	0fff7H
	DW	0ffa6H
	DW	0ffeeH
	DW	055H
	DW	02bH
	DW	0ffb7H
	DW	0ffc0H
	DW	036H
	DW	050H
	DW	0ffe1H
	DW	0ffa7H
	DW	04H
	DW	05aH
	DW	016H
	DW	0ffadH
	DW	0ffd2H
	DW	046H
	DW	043H
	DW	0ffceH
	DW	0ffaeH
	DW	019H
	DW	05aH
	DW	040H
	DW	04H
	DW	0ffa6H
	DW	0fff3H
	DW	059H
	DW	016H
	DW	0ffa9H
	DW	0ffe1H
	DW	053H
	DW	026H
	DW	0ffb0H
	DW	0ffd2H
	DW	04bH
	DW	036H
	DW	0ffbaH
	DW	0ffc3H
	DW	040H
	DW	043H
	DW	0ffc7H
	DW	0ffb7H
	DW	032H
	DW	04eH
	DW	0ffd5H
	DW	0ffaeH
	DW	024H
	DW	055H
	DW	0ffe7H
	DW	0ffa8H
	DW	012H
	DW	05aH
	DW	0fff7H
	DW	0ffa6H
	DW	040H
	DW	0fffcH
	DW	0ffa6H
	DW	0dH
	DW	059H
	DW	0ffeaH
	DW	0ffa9H
	DW	01fH
	DW	053H
	DW	0ffdaH
	DW	0ffb0H
	DW	02eH
	DW	04bH
	DW	0ffcaH
	DW	0ffbaH
	DW	03dH
	DW	040H
	DW	0ffbdH
	DW	0ffc7H
	DW	049H
	DW	032H
	DW	0ffb2H
	DW	0ffd5H
	DW	052H
	DW	024H
	DW	0ffabH
	DW	0ffe7H
	DW	058H
	DW	012H
	DW	0ffa6H
	DW	0fff7H
	DW	05aH
	DW	040H
	DW	0fff3H
	DW	0ffa9H
	DW	026H
	DW	04bH
	DW	0ffc3H
	DW	0ffc7H
	DW	04eH
	DW	024H
	DW	0ffa8H
	DW	0fff7H
	DW	05aH
	DW	0ffeeH
	DW	0ffabH
	DW	02bH
	DW	049H
	DW	0ffc0H
	DW	0ffcaH
	DW	050H
	DW	01fH
	DW	0ffa7H
	DW	0fffcH
	DW	05aH
	DW	0ffeaH
	DW	0ffadH
	DW	02eH
	DW	046H
	DW	0ffbdH
	DW	0ffceH
	DW	052H
	DW	019H
	DW	0ffa6H
	DW	040H
	DW	0ffeaH
	DW	0ffb0H
	DW	03dH
	DW	032H
	DW	0ffabH
	DW	0fff7H
	DW	05aH
	DW	0ffdcH
	DW	0ffb7H
	DW	046H
	DW	026H
	DW	0ffa7H
	DW	04H
	DW	057H
	DW	0ffd2H
	DW	0ffc0H
	DW	04eH
	DW	019H
	DW	0ffa6H
	DW	012H
	DW	052H
	DW	0ffc7H
	DW	0ffcaH
	DW	053H
	DW	0dH
	DW	0ffa6H
	DW	01fH
	DW	04bH
	DW	0ffbdH
	DW	0ffd5H
	DW	058H
	DW	040H
	DW	0ffe1H
	DW	0ffbaH
	DW	04eH
	DW	012H
	DW	0ffa6H
	DW	02bH
	DW	03dH
	DW	0ffadH
	DW	0fffcH
	DW	057H
	DW	0ffcaH
	DW	0ffceH
	DW	058H
	DW	0fff7H
	DW	0ffaeH
	DW	040H
	DW	026H
	DW	0ffa6H
	DW	016H
	DW	04bH
	DW	0ffb7H
	DW	0ffe7H
	DW	05aH
	DW	0ffdcH
	DW	0ffbdH
	DW	050H
	DW	0dH
	DW	0ffa7H
	DW	02eH
	DW	039H
	DW	0ffabH
	DW	040H
	DW	0ffdaH
	DW	0ffc7H
	DW	058H
	DW	0ffeeH
	DW	0ffb7H
	DW	050H
	DW	04H
	DW	0ffadH
	DW	043H
	DW	019H
	DW	0ffa6H
	DW	032H
	DW	02eH
	DW	0ffa6H
	DW	01fH
	DW	040H
	DW	0ffabH
	DW	09H
	DW	04eH
	DW	0ffb5H
	DW	0fff3H
	DW	057H
	DW	0ffc3H
	DW	0ffdcH
	DW	05aH
	DW	0ffd5H
	DW	0ffcaH
	DW	059H
	DW	0ffeaH
	DW	0ffbaH
	DW	052H
	DW	040H
	DW	0ffd2H
	DW	0ffd5H
	DW	05aH
	DW	0ffceH
	DW	0ffdaH
	DW	05aH
	DW	0ffcaH
	DW	0ffdcH
	DW	05aH
	DW	0ffc7H
	DW	0ffe1H
	DW	059H
	DW	0ffc3H
	DW	0ffe7H
	DW	058H
	DW	0ffc0H
	DW	0ffeaH
	DW	057H
	DW	0ffbdH
	DW	0ffeeH
	DW	055H
	DW	0ffbaH
	DW	0fff3H
	DW	053H
	DW	0ffb7H
	DW	0fff7H
	DW	052H
	DW	0ffb5H
	DW	0fffcH
	DW	050H
	DW	0ffb2H
	DW	040H
	DW	0ffcaH
	DW	0ffe7H
	DW	055H
	DW	0ffb5H
	DW	04H
	DW	046H
	DW	0ffa8H
	DW	024H
	DW	02eH
	DW	0ffa6H
	DW	03dH
	DW	012H
	DW	0ffaeH
	DW	050H
	DW	0fff3H
	DW	0ffc0H
	DW	05aH
	DW	0ffd5H
	DW	0ffdaH
	DW	059H
	DW	0ffbdH
	DW	0fff7H
	DW	04eH
	DW	0ffadH
	DW	016H
	DW	039H
	DW	0ffa6H
	DW	032H
	DW	01fH
	DW	0ffa9H
	DW	049H
	DW	040H
	DW	0ffc3H
	DW	0fff7H
	DW	049H
	DW	0ffa7H
	DW	02eH
	DW	019H
	DW	0ffaeH
	DW	053H
	DW	0ffe1H
	DW	0ffd5H
	DW	058H
	DW	0ffb5H
	DW	0dH
	DW	039H
	DW	0ffa6H
	DW	040H
	DW	04H
	DW	0ffbaH
	DW	05aH
	DW	0ffceH
	DW	0ffeaH
	DW	050H
	DW	0ffabH
	DW	024H
	DW	026H
	DW	0ffa9H
	DW	04eH
	DW	0ffeeH
	DW	0ffcaH
	DW	05aH
	DW	0ffbdH
	DW	040H
	DW	0ffbdH
	DW	09H
	DW	036H
	DW	0ffa7H
	DW	04eH
	DW	0ffe7H
	DW	0ffdaH
	DW	053H
	DW	0ffabH
	DW	02bH
	DW	016H
	DW	0ffb5H
	DW	05aH
	DW	0ffc7H
	DW	0fffcH
	DW	040H
	DW	0ffa6H
	DW	046H
	DW	0fff3H
	DW	0ffceH
	DW	058H
	DW	0ffb0H
	DW	01fH
	DW	024H
	DW	0ffaeH
	DW	057H
	DW	0ffd2H
	DW	0ffeeH
	DW	049H
	DW	0ffa6H
	DW	03dH
	DW	040H
	DW	0ffb7H
	DW	019H
	DW	01fH
	DW	0ffb5H
	DW	05aH
	DW	0ffbaH
	DW	016H
	DW	024H
	DW	0ffb2H
	DW	05aH
	DW	0ffbdH
	DW	012H
	DW	026H
	DW	0ffb0H
	DW	05aH
	DW	0ffc0H
	DW	0dH
	DW	02bH
	DW	0ffaeH
	DW	059H
	DW	0ffc3H
	DW	09H
	DW	02eH
	DW	0ffadH
	DW	058H
	DW	0ffc7H
	DW	04H
	DW	032H
	DW	0ffabH
	DW	057H
	DW	0ffcaH
	DW	040H
	DW	0ffb2H
	DW	02bH
	DW	04H
	DW	0ffceH
	DW	052H
	DW	0ffa6H
	DW	049H
	DW	0ffdcH
	DW	0fff3H
	DW	039H
	DW	0ffabH
	DW	059H
	DW	0ffbdH
	DW	019H
	DW	016H
	DW	0ffc0H
	DW	058H
	DW	0ffa9H
	DW	03dH
	DW	0ffeeH
	DW	0ffe1H
	DW	046H
	DW	0ffa6H
	DW	053H
	DW	0ffcaH
	DW	09H
	DW	026H
	DW	0ffb5H
	DW	05aH
	DW	0ffb0H
	DW	02eH
	DW	040H
	DW	0ffaeH
	DW	039H
	DW	0ffeaH
	DW	0ffeeH
	DW	036H
	DW	0ffb0H
	DW	05aH
	DW	0ffadH
	DW	03dH
	DW	0ffe7H
	DW	0fff3H
	DW	032H
	DW	0ffb2H
	DW	05aH
	DW	0ffabH
	DW	040H
	DW	0ffe1H
	DW	0fff7H
	DW	02eH
	DW	0ffb5H
	DW	05aH
	DW	0ffa9H
	DW	043H
	DW	0ffdcH
	DW	0fffcH
	DW	02bH
	DW	0ffb7H
	DW	059H
	DW	0ffa8H
	DW	046H
	DW	0ffdaH
	DW	040H
	DW	0ffabH
	DW	046H
	DW	0ffd2H
	DW	012H
	DW	0dH
	DW	0ffd5H
	DW	043H
	DW	0ffadH
	DW	05aH
	DW	0ffa9H
	DW	049H
	DW	0ffceH
	DW	016H
	DW	09H
	DW	0ffdaH
	DW	040H
	DW	0ffaeH
	DW	05aH
	DW	0ffa8H
	DW	04bH
	DW	0ffcaH
	DW	019H
	DW	04H
	DW	0ffdcH
	DW	03dH
	DW	0ffb0H
	DW	05aH
	DW	0ffa7H
	DW	04eH
	DW	0ffc7H
	DW	01fH
	DW	040H
	DW	0ffa8H
	DW	050H
	DW	0ffbdH
	DW	032H
	DW	0ffe1H
	DW	09H
	DW	0dH
	DW	0ffdcH
	DW	036H
	DW	0ffbaH
	DW	052H
	DW	0ffa7H
	DW	05aH
	DW	0ffa9H
	DW	04eH
	DW	0ffc0H
	DW	02eH
	DW	0ffe7H
	DW	04H
	DW	012H
	DW	0ffdaH
	DW	039H
	DW	0ffb7H
	DW	053H
	DW	0ffa6H
	DW	05aH
	DW	0ffabH
	DW	04bH
	DW	0ffc3H
	DW	02bH
	DW	0ffeaH
	DW	040H
	DW	0ffa6H
	DW	057H
	DW	0ffaeH
	DW	04bH
	DW	0ffbdH
	DW	039H
	DW	0ffd2H
	DW	024H
	DW	0ffeaH
	DW	09H
	DW	04H
	DW	0ffeeH
	DW	01fH
	DW	0ffd5H
	DW	036H
	DW	0ffc0H
	DW	049H
	DW	0ffb0H
	DW	055H
	DW	0ffa7H
	DW	05aH
	DW	0ffa6H
	DW	058H
	DW	0ffadH
	DW	04eH
	DW	0ffbaH
	DW	03dH
	DW	0ffceH
	DW	026H
	DW	0ffe7H
	DW	0dH
	DW	040H
	DW	0ffa6H
	DW	05aH
	DW	0ffa6H
	DW	059H
	DW	0ffa8H
	DW	057H
	DW	0ffabH
	DW	053H
	DW	0ffaeH
	DW	050H
	DW	0ffb2H
	DW	04bH
	DW	0ffb7H
	DW	046H
	DW	0ffbdH
	DW	040H
	DW	0ffc3H
	DW	039H
	DW	0ffcaH
	DW	032H
	DW	0ffd2H
	DW	02bH
	DW	0ffdaH
	DW	024H
	DW	0ffe1H
	DW	019H
	DW	0ffeaH
	DW	012H
	DW	0fff3H
	DW	09H
	DW	0fffcH
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategy_register_dct_generic
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _fast_inverse_dst_4x4_generic
_TEXT	SEGMENT
_shift_2nd$ = -64					; size = 4
_shift_1st$ = -52					; size = 4
_tmp$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_fast_inverse_dst_4x4_generic PROC			; COMDAT

; 622  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 623  :   int16_t tmp[4 * 4];
; 624  :   int32_t shift_1st = 7;

	mov	DWORD PTR _shift_1st$[ebp], 7

; 625  :   int32_t shift_2nd = 12 - (bitdepth - 8);

	movsx	eax, BYTE PTR _bitdepth$[ebp]
	sub	eax, 8
	mov	ecx, 12					; 0000000cH
	sub	ecx, eax
	mov	DWORD PTR _shift_2nd$[ebp], ecx

; 626  : 
; 627  :   fast_inverse_dst_4_generic(input, tmp, shift_1st);

	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_fast_inverse_dst_4_generic
	add	esp, 12					; 0000000cH

; 628  :   fast_inverse_dst_4_generic(tmp, output, shift_2nd);

	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_fast_inverse_dst_4_generic
	add	esp, 12					; 0000000cH

; 629  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@fast_inver
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@fast_inver:
	DD	1
	DD	$LN4@fast_inver
$LN4@fast_inver:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@fast_inver
$LN3@fast_inver:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_fast_inverse_dst_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _fast_forward_dst_4x4_generic
_TEXT	SEGMENT
_shift_2nd$ = -64					; size = 4
_shift_1st$ = -52					; size = 4
_tmp$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_fast_forward_dst_4x4_generic PROC			; COMDAT

; 612  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 613  :   int16_t tmp[4*4]; 
; 614  :   int32_t shift_1st = kvz_g_convert_to_bit[4] + 1 + (bitdepth - 8);

	mov	eax, 1
	shl	eax, 2
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	movsx	edx, BYTE PTR _bitdepth$[ebp]
	lea	eax, DWORD PTR [ecx+edx-7]
	mov	DWORD PTR _shift_1st$[ebp], eax

; 615  :   int32_t shift_2nd = kvz_g_convert_to_bit[4] + 8;

	mov	eax, 1
	shl	eax, 2
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 8
	mov	DWORD PTR _shift_2nd$[ebp], ecx

; 616  : 
; 617  :   fast_forward_dst_4_generic(input, tmp, shift_1st); 

	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_fast_forward_dst_4_generic
	add	esp, 12					; 0000000cH

; 618  :   fast_forward_dst_4_generic(tmp, output, shift_2nd);

	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_fast_forward_dst_4_generic
	add	esp, 12					; 0000000cH

; 619  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@fast_forwa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@fast_forwa:
	DD	1
	DD	$LN4@fast_forwa
$LN4@fast_forwa:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@fast_forwa
$LN3@fast_forwa:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_fast_forward_dst_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _idct_32x32_generic
_TEXT	SEGMENT
_shift_2nd$ = -2080					; size = 4
_shift_1st$ = -2068					; size = 4
_tmp$ = -2056						; size = 2048
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_idct_32x32_generic PROC				; COMDAT

; 609  : IDCT_NXN_GENERIC(32);

	push	ebp
	mov	ebp, esp
	sub	esp, 3044				; 00000be4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3044]
	mov	ecx, 761				; 000002f9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _shift_1st$[ebp], 7
	movsx	eax, BYTE PTR _bitdepth$[ebp]
	sub	eax, 8
	mov	ecx, 12					; 0000000cH
	sub	ecx, eax
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_inverse_32_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_inverse_32_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@idct_32x32
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3044				; 00000be4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@idct_32x32:
	DD	1
	DD	$LN4@idct_32x32
$LN4@idct_32x32:
	DD	-2056					; fffff7f8H
	DD	2048					; 00000800H
	DD	$LN3@idct_32x32
$LN3@idct_32x32:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_idct_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _idct_16x16_generic
_TEXT	SEGMENT
_shift_2nd$ = -544					; size = 4
_shift_1st$ = -532					; size = 4
_tmp$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_idct_16x16_generic PROC				; COMDAT

; 608  : IDCT_NXN_GENERIC(16);

	push	ebp
	mov	ebp, esp
	sub	esp, 932				; 000003a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-932]
	mov	ecx, 233				; 000000e9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _shift_1st$[ebp], 7
	movsx	eax, BYTE PTR _bitdepth$[ebp]
	sub	eax, 8
	mov	ecx, 12					; 0000000cH
	sub	ecx, eax
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_inverse_16_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_inverse_16_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@idct_16x16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 932				; 000003a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@idct_16x16:
	DD	1
	DD	$LN4@idct_16x16
$LN4@idct_16x16:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@idct_16x16
$LN3@idct_16x16:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_idct_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _idct_8x8_generic
_TEXT	SEGMENT
_shift_2nd$ = -160					; size = 4
_shift_1st$ = -148					; size = 4
_tmp$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_idct_8x8_generic PROC					; COMDAT

; 607  : IDCT_NXN_GENERIC(8);

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _shift_1st$[ebp], 7
	movsx	eax, BYTE PTR _bitdepth$[ebp]
	sub	eax, 8
	mov	ecx, 12					; 0000000cH
	sub	ecx, eax
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_inverse_8_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_inverse_8_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@idct_8x8_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@idct_8x8_g:
	DD	1
	DD	$LN4@idct_8x8_g
$LN4@idct_8x8_g:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@idct_8x8_g
$LN3@idct_8x8_g:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_idct_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _idct_4x4_generic
_TEXT	SEGMENT
_shift_2nd$ = -64					; size = 4
_shift_1st$ = -52					; size = 4
_tmp$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_idct_4x4_generic PROC					; COMDAT

; 606  : IDCT_NXN_GENERIC(4);

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	DWORD PTR _shift_1st$[ebp], 7
	movsx	eax, BYTE PTR _bitdepth$[ebp]
	sub	eax, 8
	mov	ecx, 12					; 0000000cH
	sub	ecx, eax
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_inverse_4_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_inverse_4_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@idct_4x4_g
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@idct_4x4_g:
	DD	1
	DD	$LN4@idct_4x4_g
$LN4@idct_4x4_g:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@idct_4x4_g
$LN3@idct_4x4_g:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_idct_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _dct_32x32_generic
_TEXT	SEGMENT
_shift_2nd$ = -2080					; size = 4
_shift_1st$ = -2068					; size = 4
_tmp$ = -2056						; size = 2048
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_dct_32x32_generic PROC					; COMDAT

; 604  : DCT_NXN_GENERIC(32);

	push	ebp
	mov	ebp, esp
	sub	esp, 3044				; 00000be4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3044]
	mov	ecx, 761				; 000002f9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 1
	shl	eax, 5
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	movsx	edx, BYTE PTR _bitdepth$[ebp]
	lea	eax, DWORD PTR [ecx+edx-7]
	mov	DWORD PTR _shift_1st$[ebp], eax
	mov	eax, 1
	shl	eax, 5
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 8
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_32_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_32_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@dct_32x32_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3044				; 00000be4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@dct_32x32_:
	DD	1
	DD	$LN4@dct_32x32_
$LN4@dct_32x32_:
	DD	-2056					; fffff7f8H
	DD	2048					; 00000800H
	DD	$LN3@dct_32x32_
$LN3@dct_32x32_:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dct_32x32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _dct_16x16_generic
_TEXT	SEGMENT
_shift_2nd$ = -544					; size = 4
_shift_1st$ = -532					; size = 4
_tmp$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_dct_16x16_generic PROC					; COMDAT

; 603  : DCT_NXN_GENERIC(16);

	push	ebp
	mov	ebp, esp
	sub	esp, 932				; 000003a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-932]
	mov	ecx, 233				; 000000e9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 1
	shl	eax, 4
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	movsx	edx, BYTE PTR _bitdepth$[ebp]
	lea	eax, DWORD PTR [ecx+edx-7]
	mov	DWORD PTR _shift_1st$[ebp], eax
	mov	eax, 1
	shl	eax, 4
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 8
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_16_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_16_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@dct_16x16_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 932				; 000003a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@dct_16x16_:
	DD	1
	DD	$LN4@dct_16x16_
$LN4@dct_16x16_:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@dct_16x16_
$LN3@dct_16x16_:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dct_16x16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _dct_8x8_generic
_TEXT	SEGMENT
_shift_2nd$ = -160					; size = 4
_shift_1st$ = -148					; size = 4
_tmp$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_dct_8x8_generic PROC					; COMDAT

; 602  : DCT_NXN_GENERIC(8);

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 1
	shl	eax, 3
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	movsx	edx, BYTE PTR _bitdepth$[ebp]
	lea	eax, DWORD PTR [ecx+edx-7]
	mov	DWORD PTR _shift_1st$[ebp], eax
	mov	eax, 1
	shl	eax, 3
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 8
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_8_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_8_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@dct_8x8_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@dct_8x8_ge:
	DD	1
	DD	$LN4@dct_8x8_ge
$LN4@dct_8x8_ge:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@dct_8x8_ge
$LN3@dct_8x8_ge:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dct_8x8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _dct_4x4_generic
_TEXT	SEGMENT
_shift_2nd$ = -64					; size = 4
_shift_1st$ = -52					; size = 4
_tmp$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_bitdepth$ = 8						; size = 1
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_dct_4x4_generic PROC					; COMDAT

; 601  : DCT_NXN_GENERIC(4);

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, 1
	shl	eax, 2
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	movsx	edx, BYTE PTR _bitdepth$[ebp]
	lea	eax, DWORD PTR [ecx+edx-7]
	mov	DWORD PTR _shift_1st$[ebp], eax
	mov	eax, 1
	shl	eax, 2
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 8
	mov	DWORD PTR _shift_2nd$[ebp], ecx
	mov	eax, DWORD PTR _shift_1st$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_partial_butterfly_4_generic
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _shift_2nd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_partial_butterfly_4_generic
	add	esp, 12					; 0000000cH
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@dct_4x4_ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@dct_4x4_ge:
	DD	1
	DD	$LN4@dct_4x4_ge
$LN4@dct_4x4_ge:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@dct_4x4_ge
$LN3@dct_4x4_ge:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_dct_4x4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_inverse_32_generic
_TEXT	SEGMENT
tv654 = -560						; size = 4
tv608 = -560						; size = 4
tv655 = -556						; size = 4
tv609 = -556						; size = 4
tv633 = -552						; size = 4
tv591 = -552						; size = 4
_line$ = -352						; size = 4
_add$ = -340						; size = 4
_eeeo$ = -328						; size = 8
_eeee$ = -312						; size = 8
_eeo$ = -296						; size = 16
_eee$ = -272						; size = 16
_eo$ = -248						; size = 32
_ee$ = -208						; size = 32
_o$ = -168						; size = 64
_e$ = -96						; size = 64
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_inverse_32_generic PROC		; COMDAT

; 528  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 529  :   int32_t j, k;
; 530  :   int32_t e[16], o[16];
; 531  :   int32_t ee[8], eo[8];
; 532  :   int32_t eee[4], eeo[4];
; 533  :   int32_t eeee[2], eeeo[2];
; 534  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 535  :   const int32_t line = 32;

	mov	DWORD PTR _line$[ebp], 32		; 00000020H

; 536  : 
; 537  :   for (j = 0; j<line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 538  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 539  :     for (k = 0; k < 16; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jge	$LN6@partial_bu

; 540  :       o[k] = kvz_g_dct_32[1][k] * src[line] + kvz_g_dct_32[3][k] * src[3 * line] + kvz_g_dct_32[5][k] * src[5 * line] + kvz_g_dct_32[7][k] * src[7 * line] +

	mov	eax, 64					; 00000040H
	shl	eax, 0
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 5
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 7
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 7
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 9
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 11
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 11
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 13
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 15
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 15
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 17
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 17
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 19
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 19
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 21
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 21
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 23
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 23
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 25
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 25
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 27
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 27
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 29
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 29
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 31
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 31
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+eax*4], edx

; 541  :         kvz_g_dct_32[9][k] * src[9 * line] + kvz_g_dct_32[11][k] * src[11 * line] + kvz_g_dct_32[13][k] * src[13 * line] + kvz_g_dct_32[15][k] * src[15 * line] +
; 542  :         kvz_g_dct_32[17][k] * src[17 * line] + kvz_g_dct_32[19][k] * src[19 * line] + kvz_g_dct_32[21][k] * src[21 * line] + kvz_g_dct_32[23][k] * src[23 * line] +
; 543  :         kvz_g_dct_32[25][k] * src[25 * line] + kvz_g_dct_32[27][k] * src[27 * line] + kvz_g_dct_32[29][k] * src[29 * line] + kvz_g_dct_32[31][k] * src[31 * line];
; 544  :     }

	jmp	$LN5@partial_bu
$LN6@partial_bu:

; 545  :     for (k = 0; k < 8; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@partial_bu
$LN8@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	$LN9@partial_bu

; 546  :       eo[k] = kvz_g_dct_32[2][k] * src[2 * line] + kvz_g_dct_32[6][k] * src[6 * line] + kvz_g_dct_32[10][k] * src[10 * line] + kvz_g_dct_32[14][k] * src[14 * line] +

	mov	eax, 64					; 00000040H
	shl	eax, 1
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 6
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 6
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 10
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 14
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 14
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 18
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 18
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 22
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 22
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 26
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 26
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 30
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 30
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eo$[ebp+eax*4], edx

; 547  :         kvz_g_dct_32[18][k] * src[18 * line] + kvz_g_dct_32[22][k] * src[22 * line] + kvz_g_dct_32[26][k] * src[26 * line] + kvz_g_dct_32[30][k] * src[30 * line];
; 548  :     }

	jmp	$LN8@partial_bu
$LN9@partial_bu:

; 549  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN13@partial_bu
$LN11@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN13@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$LN12@partial_bu

; 550  :       eeo[k] = kvz_g_dct_32[4][k] * src[4 * line] + kvz_g_dct_32[12][k] * src[12 * line] + kvz_g_dct_32[20][k] * src[20 * line] + kvz_g_dct_32[28][k] * src[28 * line];

	mov	eax, 64					; 00000040H
	shl	eax, 2
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 12
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 12
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 20
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 20
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 28
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 28
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eeo$[ebp+eax*4], edx

; 551  :     }

	jmp	$LN11@partial_bu
$LN12@partial_bu:

; 552  :     eeeo[0] = kvz_g_dct_32[8][0] * src[8 * line] + kvz_g_dct_32[24][0] * src[24 * line];

	mov	eax, 64					; 00000040H
	shl	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, DWORD PTR _line$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	imul	eax, ecx
	mov	edx, 64					; 00000040H
	imul	ecx, edx, 24
	mov	edx, 2
	imul	edx, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	imul	edx, DWORD PTR _line$[ebp], 24
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _eeeo$[ebp+edx], eax

; 553  :     eeeo[1] = kvz_g_dct_32[8][1] * src[8 * line] + kvz_g_dct_32[24][1] * src[24 * line];

	mov	eax, 64					; 00000040H
	shl	eax, 3
	mov	ecx, 2
	shl	ecx, 0
	movsx	edx, WORD PTR _kvz_g_dct_32[eax+ecx]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 64					; 00000040H
	imul	eax, ecx, 24
	mov	ecx, 2
	shl	ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+ecx]
	imul	ecx, DWORD PTR _line$[ebp], 24
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eeeo$[ebp+eax], edx

; 554  :     eeee[0] = kvz_g_dct_32[0][0] * src[0] + kvz_g_dct_32[16][0] * src[16 * line];

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+eax]
	imul	ecx, eax
	mov	edx, 64					; 00000040H
	shl	edx, 4
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR _kvz_g_dct_32[edx+eax]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 4
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	edx, eax
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eeee$[ebp+eax], ecx

; 555  :     eeee[1] = kvz_g_dct_32[0][1] * src[0] + kvz_g_dct_32[16][1] * src[16 * line];

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	imul	eax, edx
	mov	ecx, 64					; 00000040H
	shl	ecx, 4
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, DWORD PTR _line$[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _eeee$[ebp+ecx], eax

; 556  : 
; 557  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 558  :     eee[0] = eeee[0] + eeeo[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _eeee$[ebp+ecx]
	add	ecx, DWORD PTR _eeeo$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eee$[ebp+eax], ecx

; 559  :     eee[3] = eeee[0] - eeeo[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _eeee$[ebp+ecx]
	sub	ecx, DWORD PTR _eeeo$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _eee$[ebp+eax], ecx

; 560  :     eee[1] = eeee[1] + eeeo[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _eeee$[ebp+eax]
	add	edx, DWORD PTR _eeeo$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eee$[ebp+eax], edx

; 561  :     eee[2] = eeee[1] - eeeo[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _eeee$[ebp+eax]
	sub	edx, DWORD PTR _eeeo$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _eee$[ebp+eax], edx

; 562  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN16@partial_bu
$LN14@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN16@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	SHORT $LN15@partial_bu

; 563  :       ee[k] = eee[k] + eeo[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _eee$[ebp+eax*4]
	mov	edx, DWORD PTR _k$[ebp]
	add	ecx, DWORD PTR _eeo$[ebp+edx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4], ecx

; 564  :       ee[k + 4] = eee[3 - k] - eeo[3 - k];

	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _eee$[ebp+eax*4]
	sub	edx, DWORD PTR _eeo$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4+16], edx

; 565  :     }

	jmp	SHORT $LN14@partial_bu
$LN15@partial_bu:

; 566  :     for (k = 0; k < 8; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN19@partial_bu
$LN17@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN19@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	SHORT $LN18@partial_bu

; 567  :       e[k] = ee[k] + eo[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _ee$[ebp+eax*4]
	mov	edx, DWORD PTR _k$[ebp]
	add	ecx, DWORD PTR _eo$[ebp+edx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+eax*4], ecx

; 568  :       e[k + 8] = ee[7 - k] - eo[7 - k];

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 7
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _ee$[ebp+eax*4]
	sub	edx, DWORD PTR _eo$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+eax*4+32], edx

; 569  :     }

	jmp	SHORT $LN17@partial_bu
$LN18@partial_bu:

; 570  :     for (k = 0; k<16; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN22@partial_bu
$LN20@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN22@partial_bu:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jge	$LN21@partial_bu

; 571  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN24@partial_bu
	mov	DWORD PTR tv591[ebp], 32767		; 00007fffH
	jmp	SHORT $LN25@partial_bu
$LN24@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv591[ebp], edx
$LN25@partial_bu:
	cmp	DWORD PTR tv591[ebp], -32768		; ffff8000H
	jge	SHORT $LN28@partial_bu
	mov	DWORD PTR tv609[ebp], -32768		; ffff8000H
	jmp	SHORT $LN29@partial_bu
$LN28@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN26@partial_bu
	mov	DWORD PTR tv608[ebp], 32767		; 00007fffH
	jmp	SHORT $LN27@partial_bu
$LN26@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv608[ebp], edx
$LN27@partial_bu:
	mov	ecx, DWORD PTR tv608[ebp]
	mov	DWORD PTR tv609[ebp], ecx
$LN29@partial_bu:
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cx, WORD PTR tv609[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 572  :       dst[k + 16] = (short)MAX(-32768, MIN(32767, (e[15 - k] - o[15 - k] + add) >> shift));

	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN30@partial_bu
	mov	DWORD PTR tv633[ebp], 32767		; 00007fffH
	jmp	SHORT $LN31@partial_bu
$LN30@partial_bu:
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv633[ebp], edx
$LN31@partial_bu:
	cmp	DWORD PTR tv633[ebp], -32768		; ffff8000H
	jge	SHORT $LN34@partial_bu
	mov	DWORD PTR tv655[ebp], -32768		; ffff8000H
	jmp	SHORT $LN35@partial_bu
$LN34@partial_bu:
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN32@partial_bu
	mov	DWORD PTR tv654[ebp], 32767		; 00007fffH
	jmp	SHORT $LN33@partial_bu
$LN32@partial_bu:
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv654[ebp], edx
$LN33@partial_bu:
	mov	eax, DWORD PTR tv654[ebp]
	mov	DWORD PTR tv655[ebp], eax
$LN35@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	ax, WORD PTR tv655[ebp]
	mov	WORD PTR [edx+ecx*2+32], ax

; 573  :     }

	jmp	$LN20@partial_bu
$LN21@partial_bu:

; 574  :     src++;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax

; 575  :     dst += 32;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _dst$[ebp], eax

; 576  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 577  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN45@partial_bu:
	DD	8
	DD	$LN44@partial_bu
$LN44@partial_bu:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN36@partial_bu
	DD	-168					; ffffff58H
	DD	64					; 00000040H
	DD	$LN37@partial_bu
	DD	-208					; ffffff30H
	DD	32					; 00000020H
	DD	$LN38@partial_bu
	DD	-248					; ffffff08H
	DD	32					; 00000020H
	DD	$LN39@partial_bu
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN40@partial_bu
	DD	-296					; fffffed8H
	DD	16					; 00000010H
	DD	$LN41@partial_bu
	DD	-312					; fffffec8H
	DD	8
	DD	$LN42@partial_bu
	DD	-328					; fffffeb8H
	DD	8
	DD	$LN43@partial_bu
$LN43@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN42@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN41@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN40@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN39@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN38@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN37@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN36@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_inverse_32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_32_generic
_TEXT	SEGMENT
_line$ = -352						; size = 4
_add$ = -340						; size = 4
_eeeo$ = -328						; size = 8
_eeee$ = -312						; size = 8
_eeo$ = -296						; size = 16
_eee$ = -272						; size = 16
_eo$ = -248						; size = 32
_ee$ = -208						; size = 32
_o$ = -168						; size = 64
_e$ = -96						; size = 64
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_32_generic PROC			; COMDAT

; 472  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-548]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 473  :   int32_t j, k;
; 474  :   int32_t e[16], o[16];
; 475  :   int32_t ee[8], eo[8];
; 476  :   int32_t eee[4], eeo[4];
; 477  :   int32_t eeee[2], eeeo[2];
; 478  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 479  :   const int32_t line = 32;

	mov	DWORD PTR _line$[ebp], 32		; 00000020H

; 480  : 
; 481  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 482  :     // E and O
; 483  :     for (k = 0; k < 16; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jge	SHORT $LN6@partial_bu

; 484  :       e[k] = src[k] + src[31 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	add	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+ecx*4], edx

; 485  :       o[k] = src[k] - src[31 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+ecx*4], edx

; 486  :     }

	jmp	SHORT $LN5@partial_bu
$LN6@partial_bu:

; 487  :     // EE and EO
; 488  :     for (k = 0; k < 8; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@partial_bu
$LN8@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	SHORT $LN9@partial_bu

; 489  :       ee[k] = e[k] + e[15 - k];

	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	add	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4], edx

; 490  :       eo[k] = e[k] - e[15 - k];

	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	sub	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eo$[ebp+eax*4], edx

; 491  :     }

	jmp	SHORT $LN8@partial_bu
$LN9@partial_bu:

; 492  :     // EEE and EEO
; 493  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN13@partial_bu
$LN11@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN13@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	SHORT $LN12@partial_bu

; 494  :       eee[k] = ee[k] + ee[7 - k];

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _ee$[ebp+ecx*4]
	add	edx, DWORD PTR _ee$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eee$[ebp+eax*4], edx

; 495  :       eeo[k] = ee[k] - ee[7 - k];

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _ee$[ebp+ecx*4]
	sub	edx, DWORD PTR _ee$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eeo$[ebp+eax*4], edx

; 496  :     }

	jmp	SHORT $LN11@partial_bu
$LN12@partial_bu:

; 497  :     // EEEE and EEEO
; 498  :     eeee[0] = eee[0] + eee[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _eee$[ebp+ecx]
	add	ecx, DWORD PTR _eee$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eeee$[ebp+eax], ecx

; 499  :     eeeo[0] = eee[0] - eee[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _eee$[ebp+ecx]
	sub	ecx, DWORD PTR _eee$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eeeo$[ebp+eax], ecx

; 500  :     eeee[1] = eee[1] + eee[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _eee$[ebp+eax]
	add	edx, DWORD PTR _eee$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eeee$[ebp+eax], edx

; 501  :     eeeo[1] = eee[1] - eee[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _eee$[ebp+eax]
	sub	edx, DWORD PTR _eee$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eeeo$[ebp+eax], edx

; 502  : 
; 503  :     dst[0] = (short)((kvz_g_dct_32[0][0] * eeee[0] + kvz_g_dct_32[0][1] * eeee[1] + add) >> shift);

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _eeee$[ebp+eax]
	mov	edx, 64					; 00000040H
	imul	eax, edx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _eeee$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 504  :     dst[16 * line] = (short)((kvz_g_dct_32[16][0] * eeee[0] + kvz_g_dct_32[16][1] * eeee[1] + add) >> shift);

	mov	eax, 64					; 00000040H
	shl	eax, 4
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eeee$[ebp+edx]
	mov	ecx, 64					; 00000040H
	shl	ecx, 4
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _eeee$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 505  :     dst[8 * line] = (short)((kvz_g_dct_32[8][0] * eeeo[0] + kvz_g_dct_32[8][1] * eeeo[1] + add) >> shift);

	mov	eax, 64					; 00000040H
	shl	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eeeo$[ebp+edx]
	mov	ecx, 64					; 00000040H
	shl	ecx, 3
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _eeeo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 506  :     dst[24 * line] = (short)((kvz_g_dct_32[24][0] * eeeo[0] + kvz_g_dct_32[24][1] * eeeo[1] + add) >> shift);

	mov	eax, 64					; 00000040H
	imul	ecx, eax, 24
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _eeeo$[ebp+eax]
	mov	edx, 64					; 00000040H
	imul	eax, edx, 24
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _eeeo$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 24
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 507  :     for (k = 4; k < 32; k += 8) {

	mov	DWORD PTR _k$[ebp], 4
	jmp	SHORT $LN16@partial_bu
$LN14@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 8
	mov	DWORD PTR _k$[ebp], eax
$LN16@partial_bu:
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jge	$LN15@partial_bu

; 508  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * eeo[0] + kvz_g_dct_32[k][1] * eeo[1] + kvz_g_dct_32[k][2] * eeo[2] + kvz_g_dct_32[k][3] * eeo[3] + add) >> shift);

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 6
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eeo$[ebp+edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _eeo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _eeo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 3
	movsx	edx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	imul	edx, DWORD PTR _eeo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 509  :     }

	jmp	$LN14@partial_bu
$LN15@partial_bu:

; 510  :     for (k = 2; k < 32; k += 4) {

	mov	DWORD PTR _k$[ebp], 2
	jmp	SHORT $LN19@partial_bu
$LN17@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 4
	mov	DWORD PTR _k$[ebp], eax
$LN19@partial_bu:
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jge	$LN18@partial_bu

; 511  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * eo[0] + kvz_g_dct_32[k][1] * eo[1] + kvz_g_dct_32[k][2] * eo[2] + kvz_g_dct_32[k][3] * eo[3] +

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 6
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eo$[ebp+edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 3
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 2
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 2
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 5
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 5
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 6
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 6
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 7
	movsx	edx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	imul	edx, DWORD PTR _eo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 512  :         kvz_g_dct_32[k][4] * eo[4] + kvz_g_dct_32[k][5] * eo[5] + kvz_g_dct_32[k][6] * eo[6] + kvz_g_dct_32[k][7] * eo[7] + add) >> shift);
; 513  :     }

	jmp	$LN17@partial_bu
$LN18@partial_bu:

; 514  :     for (k = 1; k < 32; k += 2) {

	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN22@partial_bu
$LN20@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 2
	mov	DWORD PTR _k$[ebp], eax
$LN22@partial_bu:
	cmp	DWORD PTR _k$[ebp], 32			; 00000020H
	jge	$LN21@partial_bu

; 515  :       dst[k*line] = (short)((kvz_g_dct_32[k][0] * o[0] + kvz_g_dct_32[k][1] * o[1] + kvz_g_dct_32[k][2] * o[2] + kvz_g_dct_32[k][3] * o[3] +

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 6
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_32[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 3
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 2
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 2
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 5
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 5
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 6
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 6
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 7
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 7
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	shl	edx, 3
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	shl	edx, 3
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 9
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 9
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 10
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 10
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 11
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 11
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 12
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 12
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 13
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 13
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 14
	movsx	ecx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 14
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 6
	mov	edx, 2
	imul	edx, edx, 15
	movsx	edx, WORD PTR _kvz_g_dct_32[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 15
	imul	edx, DWORD PTR _o$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 516  :         kvz_g_dct_32[k][4] * o[4] + kvz_g_dct_32[k][5] * o[5] + kvz_g_dct_32[k][6] * o[6] + kvz_g_dct_32[k][7] * o[7] +
; 517  :         kvz_g_dct_32[k][8] * o[8] + kvz_g_dct_32[k][9] * o[9] + kvz_g_dct_32[k][10] * o[10] + kvz_g_dct_32[k][11] * o[11] +
; 518  :         kvz_g_dct_32[k][12] * o[12] + kvz_g_dct_32[k][13] * o[13] + kvz_g_dct_32[k][14] * o[14] + kvz_g_dct_32[k][15] * o[15] + add) >> shift);
; 519  :     }

	jmp	$LN20@partial_bu
$LN21@partial_bu:

; 520  :     src += 32;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _src$[ebp], eax

; 521  :     dst++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax

; 522  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 523  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 548				; 00000224H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@partial_bu:
	DD	8
	DD	$LN32@partial_bu
$LN32@partial_bu:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN24@partial_bu
	DD	-168					; ffffff58H
	DD	64					; 00000040H
	DD	$LN25@partial_bu
	DD	-208					; ffffff30H
	DD	32					; 00000020H
	DD	$LN26@partial_bu
	DD	-248					; ffffff08H
	DD	32					; 00000020H
	DD	$LN27@partial_bu
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN28@partial_bu
	DD	-296					; fffffed8H
	DD	16					; 00000010H
	DD	$LN29@partial_bu
	DD	-312					; fffffec8H
	DD	8
	DD	$LN30@partial_bu
	DD	-328					; fffffeb8H
	DD	8
	DD	$LN31@partial_bu
$LN31@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN30@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN29@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN28@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN27@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN26@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN25@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN24@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_32_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_inverse_16_generic
_TEXT	SEGMENT
tv447 = -416						; size = 4
tv401 = -416						; size = 4
tv448 = -412						; size = 4
tv402 = -412						; size = 4
tv426 = -408						; size = 4
tv384 = -408						; size = 4
_line$ = -208						; size = 4
_add$ = -196						; size = 4
_eeo$ = -184						; size = 8
_eee$ = -168						; size = 8
_eo$ = -152						; size = 16
_ee$ = -128						; size = 16
_o$ = -104						; size = 32
_e$ = -64						; size = 32
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_inverse_16_generic PROC		; COMDAT

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 430  :   int32_t j, k;
; 431  :   int32_t e[8], o[8];
; 432  :   int32_t ee[4], eo[4];
; 433  :   int32_t eee[2], eeo[2];
; 434  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 435  :   const int32_t line = 16;

	mov	DWORD PTR _line$[ebp], 16		; 00000010H

; 436  : 
; 437  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 438  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 439  :     for (k = 0; k < 8; k++)  {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	$LN6@partial_bu

; 440  :       o[k] = kvz_g_dct_16[1][k] * src[line] + kvz_g_dct_16[3][k] * src[3 * line] + kvz_g_dct_16[5][k] * src[5 * line] + kvz_g_dct_16[7][k] * src[7 * line] +

	mov	eax, 32					; 00000020H
	shl	eax, 0
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 5
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 7
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 7
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 9
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 11
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 11
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 13
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 15
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 15
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+eax*4], edx

; 441  :         kvz_g_dct_16[9][k] * src[9 * line] + kvz_g_dct_16[11][k] * src[11 * line] + kvz_g_dct_16[13][k] * src[13 * line] + kvz_g_dct_16[15][k] * src[15 * line];
; 442  :     }

	jmp	$LN5@partial_bu
$LN6@partial_bu:

; 443  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@partial_bu
$LN8@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$LN9@partial_bu

; 444  :       eo[k] = kvz_g_dct_16[2][k] * src[2 * line] + kvz_g_dct_16[6][k] * src[6 * line] + kvz_g_dct_16[10][k] * src[10 * line] + kvz_g_dct_16[14][k] * src[14 * line];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 6
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 6
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 10
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 14
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 14
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eo$[ebp+eax*4], edx

; 445  :     }

	jmp	$LN8@partial_bu
$LN9@partial_bu:

; 446  :     eeo[0] = kvz_g_dct_16[4][0] * src[4 * line] + kvz_g_dct_16[12][0] * src[12 * line];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	ecx, DWORD PTR _line$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	imul	eax, ecx
	mov	edx, 32					; 00000020H
	imul	ecx, edx, 12
	mov	edx, 2
	imul	edx, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	imul	edx, DWORD PTR _line$[ebp], 12
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _eeo$[ebp+edx], eax

; 447  :     eee[0] = kvz_g_dct_16[0][0] * src[0] + kvz_g_dct_16[8][0] * src[8 * line];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+eax]
	imul	ecx, eax
	mov	edx, 32					; 00000020H
	shl	edx, 3
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR _kvz_g_dct_16[edx+eax]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	edx, eax
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eee$[ebp+eax], ecx

; 448  :     eeo[1] = kvz_g_dct_16[4][1] * src[4 * line] + kvz_g_dct_16[12][1] * src[12 * line];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	mov	ecx, 2
	shl	ecx, 0
	movsx	edx, WORD PTR _kvz_g_dct_16[eax+ecx]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 12
	mov	ecx, 2
	shl	ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+ecx]
	imul	ecx, DWORD PTR _line$[ebp], 12
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eeo$[ebp+eax], edx

; 449  :     eee[1] = kvz_g_dct_16[0][1] * src[0] + kvz_g_dct_16[8][1] * src[8 * line];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	imul	eax, edx
	mov	ecx, 32					; 00000020H
	shl	ecx, 3
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, DWORD PTR _line$[ebp]
	shl	edx, 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _eee$[ebp+ecx], eax

; 450  : 
; 451  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 452  :     for (k = 0; k < 2; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN13@partial_bu
$LN11@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN13@partial_bu:
	cmp	DWORD PTR _k$[ebp], 2
	jge	SHORT $LN12@partial_bu

; 453  :       ee[k] = eee[k] + eeo[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _eee$[ebp+eax*4]
	mov	edx, DWORD PTR _k$[ebp]
	add	ecx, DWORD PTR _eeo$[ebp+edx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4], ecx

; 454  :       ee[k + 2] = eee[1 - k] - eeo[1 - k];

	mov	eax, 1
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _eee$[ebp+eax*4]
	sub	edx, DWORD PTR _eeo$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4+8], edx

; 455  :     }

	jmp	SHORT $LN11@partial_bu
$LN12@partial_bu:

; 456  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN16@partial_bu
$LN14@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN16@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	SHORT $LN15@partial_bu

; 457  :       e[k] = ee[k] + eo[k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _ee$[ebp+eax*4]
	mov	edx, DWORD PTR _k$[ebp]
	add	ecx, DWORD PTR _eo$[ebp+edx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+eax*4], ecx

; 458  :       e[k + 4] = ee[3 - k] - eo[3 - k];

	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _ee$[ebp+eax*4]
	sub	edx, DWORD PTR _eo$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+eax*4+16], edx

; 459  :     }

	jmp	SHORT $LN14@partial_bu
$LN15@partial_bu:

; 460  :     for (k = 0; k < 8; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN19@partial_bu
$LN17@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN19@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	$LN18@partial_bu

; 461  :       dst[k] = (short)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN21@partial_bu
	mov	DWORD PTR tv384[ebp], 32767		; 00007fffH
	jmp	SHORT $LN22@partial_bu
$LN21@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv384[ebp], edx
$LN22@partial_bu:
	cmp	DWORD PTR tv384[ebp], -32768		; ffff8000H
	jge	SHORT $LN25@partial_bu
	mov	DWORD PTR tv402[ebp], -32768		; ffff8000H
	jmp	SHORT $LN26@partial_bu
$LN25@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN23@partial_bu
	mov	DWORD PTR tv401[ebp], 32767		; 00007fffH
	jmp	SHORT $LN24@partial_bu
$LN23@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv401[ebp], edx
$LN24@partial_bu:
	mov	ecx, DWORD PTR tv401[ebp]
	mov	DWORD PTR tv402[ebp], ecx
$LN26@partial_bu:
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cx, WORD PTR tv402[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 462  :       dst[k + 8] = (short)MAX(-32768, MIN(32767, (e[7 - k] - o[7 - k] + add) >> shift));

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 7
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN27@partial_bu
	mov	DWORD PTR tv426[ebp], 32767		; 00007fffH
	jmp	SHORT $LN28@partial_bu
$LN27@partial_bu:
	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 7
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv426[ebp], edx
$LN28@partial_bu:
	cmp	DWORD PTR tv426[ebp], -32768		; ffff8000H
	jge	SHORT $LN31@partial_bu
	mov	DWORD PTR tv448[ebp], -32768		; ffff8000H
	jmp	SHORT $LN32@partial_bu
$LN31@partial_bu:
	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 7
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN29@partial_bu
	mov	DWORD PTR tv447[ebp], 32767		; 00007fffH
	jmp	SHORT $LN30@partial_bu
$LN29@partial_bu:
	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 7
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv447[ebp], edx
$LN30@partial_bu:
	mov	eax, DWORD PTR tv447[ebp]
	mov	DWORD PTR tv448[ebp], eax
$LN32@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	ax, WORD PTR tv448[ebp]
	mov	WORD PTR [edx+ecx*2+16], ax

; 463  :     }

	jmp	$LN17@partial_bu
$LN18@partial_bu:

; 464  :     src++;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax

; 465  :     dst += 16;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _dst$[ebp], eax

; 466  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 467  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@partial_bu:
	DD	6
	DD	$LN39@partial_bu
$LN39@partial_bu:
	DD	-64					; ffffffc0H
	DD	32					; 00000020H
	DD	$LN33@partial_bu
	DD	-104					; ffffff98H
	DD	32					; 00000020H
	DD	$LN34@partial_bu
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN35@partial_bu
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN36@partial_bu
	DD	-168					; ffffff58H
	DD	8
	DD	$LN37@partial_bu
	DD	-184					; ffffff48H
	DD	8
	DD	$LN38@partial_bu
$LN38@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN37@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN36@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN35@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN34@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN33@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_inverse_16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_16_generic
_TEXT	SEGMENT
_line$ = -208						; size = 4
_add$ = -196						; size = 4
_eeo$ = -184						; size = 8
_eee$ = -168						; size = 8
_eo$ = -152						; size = 16
_ee$ = -128						; size = 16
_o$ = -104						; size = 32
_e$ = -64						; size = 32
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_16_generic PROC			; COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 383  :   int32_t j, k;
; 384  :   int32_t e[8], o[8];
; 385  :   int32_t ee[4], eo[4];
; 386  :   int32_t eee[2], eeo[2];
; 387  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 388  :   const int32_t line = 16;

	mov	DWORD PTR _line$[ebp], 16		; 00000010H

; 389  : 
; 390  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 391  :     // E and O
; 392  :     for (k = 0; k < 8; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 8
	jge	SHORT $LN6@partial_bu

; 393  :       e[k] = src[k] + src[15 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	add	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+ecx*4], edx

; 394  :       o[k] = src[k] - src[15 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+ecx*4], edx

; 395  :     }

	jmp	SHORT $LN5@partial_bu
$LN6@partial_bu:

; 396  :     // EE and EO
; 397  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@partial_bu
$LN8@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	SHORT $LN9@partial_bu

; 398  :       ee[k] = e[k] + e[7 - k];

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	add	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _ee$[ebp+eax*4], edx

; 399  :       eo[k] = e[k] - e[7 - k];

	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	sub	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _eo$[ebp+eax*4], edx

; 400  :     }

	jmp	SHORT $LN8@partial_bu
$LN9@partial_bu:

; 401  :     // EEE and EEO
; 402  :     eee[0] = ee[0] + ee[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _ee$[ebp+ecx]
	add	ecx, DWORD PTR _ee$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eee$[ebp+eax], ecx

; 403  :     eeo[0] = ee[0] - ee[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _ee$[ebp+ecx]
	sub	ecx, DWORD PTR _ee$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eeo$[ebp+eax], ecx

; 404  :     eee[1] = ee[1] + ee[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _ee$[ebp+eax]
	add	edx, DWORD PTR _ee$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eee$[ebp+eax], edx

; 405  :     eeo[1] = ee[1] - ee[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _ee$[ebp+eax]
	sub	edx, DWORD PTR _ee$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eeo$[ebp+eax], edx

; 406  : 
; 407  :     dst[0] = (short)((kvz_g_dct_16[0][0] * eee[0] + kvz_g_dct_16[0][1] * eee[1] + add) >> shift);

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _eee$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _eee$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 408  :     dst[8 * line] = (short)((kvz_g_dct_16[8][0] * eee[0] + kvz_g_dct_16[8][1] * eee[1] + add) >> shift);

	mov	eax, 32					; 00000020H
	shl	eax, 3
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eee$[ebp+edx]
	mov	ecx, 32					; 00000020H
	shl	ecx, 3
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _eee$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 409  :     dst[4 * line] = (short)((kvz_g_dct_16[4][0] * eeo[0] + kvz_g_dct_16[4][1] * eeo[1] + add) >> shift);

	mov	eax, 32					; 00000020H
	shl	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eeo$[ebp+edx]
	mov	ecx, 32					; 00000020H
	shl	ecx, 2
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _eeo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 410  :     dst[12 * line] = (short)((kvz_g_dct_16[12][0] * eeo[0] + kvz_g_dct_16[12][1] * eeo[1] + add) >> shift);

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 12
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _eeo$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 12
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _eeo$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 12
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 411  : 
; 412  :     for (k = 2; k < 16; k += 4) {

	mov	DWORD PTR _k$[ebp], 2
	jmp	SHORT $LN13@partial_bu
$LN11@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 4
	mov	DWORD PTR _k$[ebp], eax
$LN13@partial_bu:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jge	$LN12@partial_bu

; 413  :       dst[k*line] = (short)((kvz_g_dct_16[k][0] * eo[0] + kvz_g_dct_16[k][1] * eo[1] + kvz_g_dct_16[k][2] * eo[2] + kvz_g_dct_16[k][3] * eo[3] + add) >> shift);

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eo$[ebp+edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _eo$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	imul	edx, edx, 3
	movsx	edx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	imul	edx, DWORD PTR _eo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 414  :     }

	jmp	$LN11@partial_bu
$LN12@partial_bu:

; 415  : 
; 416  :     for (k = 1; k < 16; k += 2) {

	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN16@partial_bu
$LN14@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 2
	mov	DWORD PTR _k$[ebp], eax
$LN16@partial_bu:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jge	$LN15@partial_bu

; 417  :       dst[k*line] = (short)((kvz_g_dct_16[k][0] * o[0] + kvz_g_dct_16[k][1] * o[1] + kvz_g_dct_16[k][2] * o[2] + kvz_g_dct_16[k][3] * o[3] +

	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 5
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_16[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	imul	edx, edx, 3
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	shl	edx, 2
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	shl	edx, 2
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	imul	edx, edx, 5
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 5
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	imul	edx, edx, 6
	movsx	ecx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	edx, 4
	imul	edx, edx, 6
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 5
	mov	edx, 2
	imul	edx, edx, 7
	movsx	edx, WORD PTR _kvz_g_dct_16[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	imul	edx, DWORD PTR _o$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 418  :         kvz_g_dct_16[k][4] * o[4] + kvz_g_dct_16[k][5] * o[5] + kvz_g_dct_16[k][6] * o[6] + kvz_g_dct_16[k][7] * o[7] + add) >> shift);
; 419  :     }

	jmp	$LN14@partial_bu
$LN15@partial_bu:

; 420  : 
; 421  :     src += 16;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _src$[ebp], eax

; 422  :     dst++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax

; 423  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 424  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@partial_bu:
	DD	6
	DD	$LN24@partial_bu
$LN24@partial_bu:
	DD	-64					; ffffffc0H
	DD	32					; 00000020H
	DD	$LN18@partial_bu
	DD	-104					; ffffff98H
	DD	32					; 00000020H
	DD	$LN19@partial_bu
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN20@partial_bu
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN21@partial_bu
	DD	-168					; ffffff58H
	DD	8
	DD	$LN22@partial_bu
	DD	-184					; ffffff48H
	DD	8
	DD	$LN23@partial_bu
$LN23@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN22@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN21@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN20@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN19@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN18@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_inverse_8_generic
_TEXT	SEGMENT
tv346 = -336						; size = 4
tv300 = -336						; size = 4
tv347 = -332						; size = 4
tv301 = -332						; size = 4
tv325 = -328						; size = 4
tv283 = -328						; size = 4
_line$ = -128						; size = 4
_add$ = -116						; size = 4
_eo$ = -104						; size = 8
_ee$ = -88						; size = 8
_o$ = -72						; size = 16
_e$ = -48						; size = 16
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_inverse_8_generic PROC		; COMDAT

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 348  :   int32_t j, k;
; 349  :   int32_t e[4], o[4];
; 350  :   int32_t ee[2], eo[2];
; 351  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 352  :   const int32_t line = 8;

	mov	DWORD PTR _line$[ebp], 8

; 353  : 
; 354  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 355  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 356  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$LN6@partial_bu

; 357  :       o[k] = kvz_g_dct_8[1][k] * src[line] + kvz_g_dct_8[3][k] * src[3 * line] + kvz_g_dct_8[5][k] * src[5 * line] + kvz_g_dct_8[7][k] * src[7 * line];

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	edx, WORD PTR _kvz_g_dct_8[eax+ecx*2]
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 16					; 00000010H
	imul	eax, ecx, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _k$[ebp]
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax*2]
	imul	eax, DWORD PTR _line$[ebp], 5
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	ecx, eax
	add	edx, ecx
	mov	ecx, 16					; 00000010H
	imul	eax, ecx, 7
	mov	ecx, DWORD PTR _k$[ebp]
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+ecx*2]
	imul	ecx, DWORD PTR _line$[ebp], 7
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+eax*4], edx

; 358  :     }

	jmp	$LN5@partial_bu
$LN6@partial_bu:

; 359  : 
; 360  :     eo[0] = kvz_g_dct_8[2][0] * src[2 * line] + kvz_g_dct_8[6][0] * src[6 * line];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	ecx, DWORD PTR _line$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	imul	eax, ecx
	mov	edx, 16					; 00000010H
	imul	ecx, edx, 6
	mov	edx, 2
	imul	edx, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+edx]
	imul	edx, DWORD PTR _line$[ebp], 6
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _eo$[ebp+edx], eax

; 361  :     eo[1] = kvz_g_dct_8[2][1] * src[2 * line] + kvz_g_dct_8[6][1] * src[6 * line];

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 2
	shl	ecx, 0
	movsx	edx, WORD PTR _kvz_g_dct_8[eax+ecx]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 16					; 00000010H
	imul	eax, ecx, 6
	mov	ecx, 2
	shl	ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+ecx]
	imul	ecx, DWORD PTR _line$[ebp], 6
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eo$[ebp+eax], edx

; 362  :     ee[0] = kvz_g_dct_8[0][0] * src[0] + kvz_g_dct_8[4][0] * src[4 * line];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+eax]
	imul	ecx, eax
	mov	edx, 16					; 00000010H
	shl	edx, 2
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR _kvz_g_dct_8[edx+eax]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 2
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	edx, eax
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _ee$[ebp+eax], ecx

; 363  :     ee[1] = kvz_g_dct_8[0][1] * src[0] + kvz_g_dct_8[4][1] * src[4 * line];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	imul	eax, edx
	mov	ecx, 16					; 00000010H
	shl	ecx, 2
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	edx, DWORD PTR _line$[ebp]
	shl	edx, 2
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _ee$[ebp+ecx], eax

; 364  : 
; 365  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 366  :     e[0] = ee[0] + eo[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ee$[ebp+ecx]
	add	ecx, DWORD PTR _eo$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _e$[ebp+eax], ecx

; 367  :     e[3] = ee[0] - eo[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ee$[ebp+ecx]
	sub	ecx, DWORD PTR _eo$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _e$[ebp+eax], ecx

; 368  :     e[1] = ee[1] + eo[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ee$[ebp+eax]
	add	edx, DWORD PTR _eo$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _e$[ebp+eax], edx

; 369  :     e[2] = ee[1] - eo[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _ee$[ebp+eax]
	sub	edx, DWORD PTR _eo$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _e$[ebp+eax], edx

; 370  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@partial_bu
$LN8@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	$LN9@partial_bu

; 371  :       dst[k] = (int16_t)MAX(-32768, MIN(32767, (e[k] + o[k] + add) >> shift));

	mov	eax, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN12@partial_bu
	mov	DWORD PTR tv283[ebp], 32767		; 00007fffH
	jmp	SHORT $LN13@partial_bu
$LN12@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv283[ebp], edx
$LN13@partial_bu:
	cmp	DWORD PTR tv283[ebp], -32768		; ffff8000H
	jge	SHORT $LN16@partial_bu
	mov	DWORD PTR tv301[ebp], -32768		; ffff8000H
	jmp	SHORT $LN17@partial_bu
$LN16@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN14@partial_bu
	mov	DWORD PTR tv300[ebp], 32767		; 00007fffH
	jmp	SHORT $LN15@partial_bu
$LN14@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+ecx*4]
	mov	eax, DWORD PTR _k$[ebp]
	add	edx, DWORD PTR _o$[ebp+eax*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv300[ebp], edx
$LN15@partial_bu:
	mov	ecx, DWORD PTR tv300[ebp]
	mov	DWORD PTR tv301[ebp], ecx
$LN17@partial_bu:
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cx, WORD PTR tv301[ebp]
	mov	WORD PTR [eax+edx*2], cx

; 372  :       dst[k + 4] = (int16_t)MAX(-32768, MIN(32767, (e[3 - k] - o[3 - k] + add) >> shift));

	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN18@partial_bu
	mov	DWORD PTR tv325[ebp], 32767		; 00007fffH
	jmp	SHORT $LN19@partial_bu
$LN18@partial_bu:
	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv325[ebp], edx
$LN19@partial_bu:
	cmp	DWORD PTR tv325[ebp], -32768		; ffff8000H
	jge	SHORT $LN22@partial_bu
	mov	DWORD PTR tv347[ebp], -32768		; ffff8000H
	jmp	SHORT $LN23@partial_bu
$LN22@partial_bu:
	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN20@partial_bu
	mov	DWORD PTR tv346[ebp], 32767		; 00007fffH
	jmp	SHORT $LN21@partial_bu
$LN20@partial_bu:
	mov	eax, 3
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, 3
	sub	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _e$[ebp+eax*4]
	sub	edx, DWORD PTR _o$[ebp+ecx*4]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv346[ebp], edx
$LN21@partial_bu:
	mov	eax, DWORD PTR tv346[ebp]
	mov	DWORD PTR tv347[ebp], eax
$LN23@partial_bu:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	ax, WORD PTR tv347[ebp]
	mov	WORD PTR [edx+ecx*2+8], ax

; 373  :     }

	jmp	$LN8@partial_bu
$LN9@partial_bu:

; 374  :     src++;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax

; 375  :     dst += 8;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _dst$[ebp], eax

; 376  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 377  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@partial_bu:
	DD	4
	DD	$LN28@partial_bu
$LN28@partial_bu:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN24@partial_bu
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN25@partial_bu
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN26@partial_bu
	DD	-104					; ffffff98H
	DD	8
	DD	$LN27@partial_bu
$LN27@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN26@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN25@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN24@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_inverse_8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_8_generic
_TEXT	SEGMENT
_line$ = -128						; size = 4
_add$ = -116						; size = 4
_eo$ = -104						; size = 8
_ee$ = -88						; size = 8
_o$ = -72						; size = 16
_e$ = -48						; size = 16
_k$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_8_generic PROC			; COMDAT

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 311  :   int32_t j, k;
; 312  :   int32_t e[4], o[4];
; 313  :   int32_t ee[2], eo[2];
; 314  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 315  :   const int32_t line = 8;

	mov	DWORD PTR _line$[ebp], 8

; 316  : 
; 317  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 318  :     // E and O
; 319  :     for (k = 0; k < 4; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@partial_bu
$LN5@partial_bu:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@partial_bu:
	cmp	DWORD PTR _k$[ebp], 4
	jge	SHORT $LN6@partial_bu

; 320  :       e[k] = src[k] + src[7 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	add	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _e$[ebp+ecx*4], edx

; 321  :       o[k] = src[k] - src[7 - k];

	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, 7
	sub	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	sub	edx, eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _o$[ebp+ecx*4], edx

; 322  :     }

	jmp	SHORT $LN5@partial_bu
$LN6@partial_bu:

; 323  :     // EE and EO
; 324  :     ee[0] = e[0] + e[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _e$[ebp+ecx]
	add	ecx, DWORD PTR _e$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _ee$[ebp+eax], ecx

; 325  :     eo[0] = e[0] - e[3];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _e$[ebp+ecx]
	sub	ecx, DWORD PTR _e$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _eo$[ebp+eax], ecx

; 326  :     ee[1] = e[1] + e[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _e$[ebp+eax]
	add	edx, DWORD PTR _e$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _ee$[ebp+eax], edx

; 327  :     eo[1] = e[1] - e[2];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _e$[ebp+eax]
	sub	edx, DWORD PTR _e$[ebp+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _eo$[ebp+eax], edx

; 328  : 
; 329  :     dst[0] = (short)((kvz_g_dct_8[0][0] * ee[0] + kvz_g_dct_8[0][1] * ee[1] + add) >> shift);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _ee$[ebp+eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _ee$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 330  :     dst[4 * line] = (short)((kvz_g_dct_8[4][0] * ee[0] + kvz_g_dct_8[4][1] * ee[1] + add) >> shift);

	mov	eax, 16					; 00000010H
	shl	eax, 2
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _ee$[ebp+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 2
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _ee$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 331  :     dst[2 * line] = (short)((kvz_g_dct_8[2][0] * eo[0] + kvz_g_dct_8[2][1] * eo[1] + add) >> shift);

	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _eo$[ebp+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _eo$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 332  :     dst[6 * line] = (short)((kvz_g_dct_8[6][0] * eo[0] + kvz_g_dct_8[6][1] * eo[1] + add) >> shift);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 6
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _eo$[ebp+eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 6
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _eo$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 6
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 333  : 
; 334  :     dst[line] = (short)((kvz_g_dct_8[1][0] * o[0] + kvz_g_dct_8[1][1] * o[1] + kvz_g_dct_8[1][2] * o[2] + kvz_g_dct_8[1][3] * o[3] + add) >> shift);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	edx, 4
	shl	edx, 0
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 2
	shl	edx, 1
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	edx, 4
	shl	edx, 1
	imul	ecx, DWORD PTR _o$[ebp+edx]
	add	eax, ecx
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 2
	imul	edx, edx, 3
	movsx	edx, WORD PTR _kvz_g_dct_8[ecx+edx]
	mov	ecx, 4
	imul	ecx, ecx, 3
	imul	edx, DWORD PTR _o$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 335  :     dst[3 * line] = (short)((kvz_g_dct_8[3][0] * o[0] + kvz_g_dct_8[3][1] * o[1] + kvz_g_dct_8[3][2] * o[2] + kvz_g_dct_8[3][3] * o[3] + add) >> shift);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _o$[ebp+eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, eax
	mov	eax, 16					; 00000010H
	imul	edx, eax, 3
	mov	eax, 2
	shl	eax, 1
	movsx	edx, WORD PTR _kvz_g_dct_8[edx+eax]
	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _o$[ebp+eax]
	add	ecx, edx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	edx, 2
	imul	edx, edx, 3
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 336  :     dst[5 * line] = (short)((kvz_g_dct_8[5][0] * o[0] + kvz_g_dct_8[5][1] * o[1] + kvz_g_dct_8[5][2] * o[2] + kvz_g_dct_8[5][3] * o[3] + add) >> shift);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 5
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _o$[ebp+eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 5
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, eax
	mov	eax, 16					; 00000010H
	imul	edx, eax, 5
	mov	eax, 2
	shl	eax, 1
	movsx	edx, WORD PTR _kvz_g_dct_8[edx+eax]
	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _o$[ebp+eax]
	add	ecx, edx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 5
	mov	edx, 2
	imul	edx, edx, 3
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 5
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 337  :     dst[7 * line] = (short)((kvz_g_dct_8[7][0] * o[0] + kvz_g_dct_8[7][1] * o[1] + kvz_g_dct_8[7][2] * o[2] + kvz_g_dct_8[7][3] * o[3] + add) >> shift);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 7
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_8[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _o$[ebp+eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 7
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, eax
	mov	eax, 16					; 00000010H
	imul	edx, eax, 7
	mov	eax, 2
	shl	eax, 1
	movsx	edx, WORD PTR _kvz_g_dct_8[edx+eax]
	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _o$[ebp+eax]
	add	ecx, edx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 7
	mov	edx, 2
	imul	edx, edx, 3
	movsx	eax, WORD PTR _kvz_g_dct_8[eax+edx]
	mov	edx, 4
	imul	edx, edx, 3
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 7
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 338  : 
; 339  :     src += 8;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _src$[ebp], eax

; 340  :     dst++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax

; 341  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 342  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@partial_bu:
	DD	4
	DD	$LN13@partial_bu
$LN13@partial_bu:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN9@partial_bu
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN10@partial_bu
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN11@partial_bu
	DD	-104					; ffffff98H
	DD	8
	DD	$LN12@partial_bu
$LN12@partial_bu:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN11@partial_bu:
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN10@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN9@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_inverse_4_generic
_TEXT	SEGMENT
tv333 = -272						; size = 4
tv296 = -272						; size = 4
tv259 = -272						; size = 4
tv222 = -272						; size = 4
tv334 = -268						; size = 4
tv297 = -268						; size = 4
tv260 = -268						; size = 4
tv223 = -268						; size = 4
tv316 = -264						; size = 4
tv279 = -264						; size = 4
tv242 = -264						; size = 4
tv205 = -264						; size = 4
_line$ = -64						; size = 4
_add$ = -52						; size = 4
_o$ = -40						; size = 8
_e$ = -24						; size = 8
_j$ = -8						; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_inverse_4_generic PROC		; COMDAT

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 284  :   int j;
; 285  :   int e[2], o[2];
; 286  :   int add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 287  :   const int32_t line = 4;

	mov	DWORD PTR _line$[ebp], 4

; 288  : 
; 289  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 290  :     // Utilizing symmetry properties to the maximum to minimize the number of multiplications
; 291  :     o[0] = kvz_g_dct_4[1][0] * src[line] + kvz_g_dct_4[3][0] * src[3 * line];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+edx]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	imul	eax, ecx
	mov	edx, 8
	imul	ecx, edx, 3
	mov	edx, 2
	imul	edx, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_4[ecx+edx]
	imul	edx, DWORD PTR _line$[ebp], 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _o$[ebp+edx], eax

; 292  :     o[1] = kvz_g_dct_4[1][1] * src[line] + kvz_g_dct_4[3][1] * src[3 * line];

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 2
	shl	ecx, 0
	movsx	edx, WORD PTR _kvz_g_dct_4[eax+ecx]
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	imul	edx, eax
	mov	ecx, 8
	imul	eax, ecx, 3
	mov	ecx, 2
	shl	ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+ecx]
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	esi, DWORD PTR _src$[ebp]
	movsx	ecx, WORD PTR [esi+ecx*2]
	imul	eax, ecx
	add	edx, eax
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _o$[ebp+eax], edx

; 293  :     e[0] = kvz_g_dct_4[0][0] * src[0] + kvz_g_dct_4[2][0] * src[2 * line];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_4[ecx+eax]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+eax]
	imul	ecx, eax
	mov	edx, 8
	shl	edx, 1
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR _kvz_g_dct_4[edx+eax]
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	esi, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [esi+eax*2]
	imul	edx, eax
	add	ecx, edx
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _e$[ebp+eax], ecx

; 294  :     e[1] = kvz_g_dct_4[0][1] * src[0] + kvz_g_dct_4[2][1] * src[2 * line];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[ecx+edx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	imul	eax, edx
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_4[ecx+edx]
	mov	edx, DWORD PTR _line$[ebp]
	shl	edx, 1
	mov	esi, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [esi+edx*2]
	imul	ecx, edx
	add	eax, ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _e$[ebp+ecx], eax

; 295  : 
; 296  :     // Combining even and odd terms at each hierarchy levels to calculate the final spatial domain vector
; 297  :     dst[0] = (short)CLIP(-32768, 32767, (e[0] + o[0] + add) >> shift);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	add	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN6@partial_bu
	mov	DWORD PTR tv205[ebp], 32767		; 00007fffH
	jmp	SHORT $LN7@partial_bu
$LN6@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	add	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv205[ebp], edx
$LN7@partial_bu:
	cmp	DWORD PTR tv205[ebp], -32768		; ffff8000H
	jge	SHORT $LN10@partial_bu
	mov	DWORD PTR tv223[ebp], -32768		; ffff8000H
	jmp	SHORT $LN11@partial_bu
$LN10@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	add	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN8@partial_bu
	mov	DWORD PTR tv222[ebp], 32767		; 00007fffH
	jmp	SHORT $LN9@partial_bu
$LN8@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	add	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv222[ebp], edx
$LN9@partial_bu:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR tv223[ebp], eax
$LN11@partial_bu:
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cx, WORD PTR tv223[ebp]
	mov	WORD PTR [eax+edx], cx

; 298  :     dst[1] = (short)CLIP(-32768, 32767, (e[1] + o[1] + add) >> shift);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	add	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN12@partial_bu
	mov	DWORD PTR tv242[ebp], 32767		; 00007fffH
	jmp	SHORT $LN13@partial_bu
$LN12@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	add	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv242[ebp], edx
$LN13@partial_bu:
	cmp	DWORD PTR tv242[ebp], -32768		; ffff8000H
	jge	SHORT $LN16@partial_bu
	mov	DWORD PTR tv260[ebp], -32768		; ffff8000H
	jmp	SHORT $LN17@partial_bu
$LN16@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	add	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN14@partial_bu
	mov	DWORD PTR tv259[ebp], 32767		; 00007fffH
	jmp	SHORT $LN15@partial_bu
$LN14@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	add	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv259[ebp], edx
$LN15@partial_bu:
	mov	eax, DWORD PTR tv259[ebp]
	mov	DWORD PTR tv260[ebp], eax
$LN17@partial_bu:
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _dst$[ebp]
	mov	ax, WORD PTR tv260[ebp]
	mov	WORD PTR [edx+ecx], ax

; 299  :     dst[2] = (short)CLIP(-32768, 32767, (e[1] - o[1] + add) >> shift);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	sub	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN18@partial_bu
	mov	DWORD PTR tv279[ebp], 32767		; 00007fffH
	jmp	SHORT $LN19@partial_bu
$LN18@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	sub	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv279[ebp], edx
$LN19@partial_bu:
	cmp	DWORD PTR tv279[ebp], -32768		; ffff8000H
	jge	SHORT $LN22@partial_bu
	mov	DWORD PTR tv297[ebp], -32768		; ffff8000H
	jmp	SHORT $LN23@partial_bu
$LN22@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	sub	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN20@partial_bu
	mov	DWORD PTR tv296[ebp], 32767		; 00007fffH
	jmp	SHORT $LN21@partial_bu
$LN20@partial_bu:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _e$[ebp+eax]
	sub	edx, DWORD PTR _o$[ebp+ecx]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv296[ebp], edx
$LN21@partial_bu:
	mov	eax, DWORD PTR tv296[ebp]
	mov	DWORD PTR tv297[ebp], eax
$LN23@partial_bu:
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _dst$[ebp]
	mov	ax, WORD PTR tv297[ebp]
	mov	WORD PTR [edx+ecx], ax

; 300  :     dst[3] = (short)CLIP(-32768, 32767, (e[0] - o[0] + add) >> shift);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	sub	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN24@partial_bu
	mov	DWORD PTR tv316[ebp], 32767		; 00007fffH
	jmp	SHORT $LN25@partial_bu
$LN24@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	sub	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv316[ebp], edx
$LN25@partial_bu:
	cmp	DWORD PTR tv316[ebp], -32768		; ffff8000H
	jge	SHORT $LN28@partial_bu
	mov	DWORD PTR tv334[ebp], -32768		; ffff8000H
	jmp	SHORT $LN29@partial_bu
$LN28@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	sub	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN26@partial_bu
	mov	DWORD PTR tv333[ebp], 32767		; 00007fffH
	jmp	SHORT $LN27@partial_bu
$LN26@partial_bu:
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _e$[ebp+ecx]
	sub	edx, DWORD PTR _o$[ebp+eax]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv333[ebp], edx
$LN27@partial_bu:
	mov	eax, DWORD PTR tv333[ebp]
	mov	DWORD PTR tv334[ebp], eax
$LN29@partial_bu:
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _dst$[ebp]
	mov	cx, WORD PTR tv334[ebp]
	mov	WORD PTR [eax+edx], cx

; 301  : 
; 302  :     src++;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax

; 303  :     dst += 4;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 8
	mov	DWORD PTR _dst$[ebp], eax

; 304  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 305  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@partial_bu:
	DD	2
	DD	$LN32@partial_bu
$LN32@partial_bu:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN30@partial_bu
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN31@partial_bu
$LN31@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN30@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_inverse_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _partial_butterfly_4_generic
_TEXT	SEGMENT
_line$ = -64						; size = 4
_add$ = -52						; size = 4
_o$ = -40						; size = 8
_e$ = -24						; size = 8
_j$ = -8						; size = 4
_src$ = 8						; size = 4
_dst$ = 12						; size = 4
_shift$ = 16						; size = 4
_partial_butterfly_4_generic PROC			; COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 258  :   int32_t j;
; 259  :   int32_t e[2], o[2];
; 260  :   int32_t add = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 261  :   const int32_t line = 4;

	mov	DWORD PTR _line$[ebp], 4

; 262  : 
; 263  :   for (j = 0; j < line; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@partial_bu
$LN2@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@partial_bu:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _line$[ebp]
	jge	$LN1@partial_bu

; 264  :     // E and O
; 265  :     e[0] = src[0] + src[3];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	add	eax, edx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _e$[ebp+edx], eax

; 266  :     o[0] = src[0] - src[3];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sub	eax, edx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _o$[ebp+edx], eax

; 267  :     e[1] = src[1] + src[2];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	add	edx, eax
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _e$[ebp+ecx], edx

; 268  :     o[1] = src[1] - src[2];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _src$[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _o$[ebp+ecx], edx

; 269  : 
; 270  :     dst[0] = (short)((kvz_g_dct_4[0][0] * e[0] + kvz_g_dct_4[0][1] * e[1] + add) >> shift);

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_4[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _e$[ebp+eax]
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _e$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 271  :     dst[2 * line] = (short)((kvz_g_dct_4[2][0] * e[0] + kvz_g_dct_4[2][1] * e[1] + add) >> shift);

	mov	eax, 8
	shl	eax, 1
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _e$[ebp+edx]
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_4[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _e$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 272  :     dst[line] = (short)((kvz_g_dct_4[1][0] * o[0] + kvz_g_dct_4[1][1] * o[1] + add) >> shift);

	mov	eax, 8
	shl	eax, 0
	mov	ecx, 2
	imul	edx, ecx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, 2
	shl	edx, 0
	movsx	edx, WORD PTR _kvz_g_dct_4[ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _o$[ebp+ecx]
	add	eax, DWORD PTR _add$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _line$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 273  :     dst[3 * line] = (short)((kvz_g_dct_4[3][0] * o[0] + kvz_g_dct_4[3][1] * o[1] + add) >> shift);

	mov	eax, 8
	imul	ecx, eax, 3
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR _kvz_g_dct_4[ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	imul	ecx, DWORD PTR _o$[ebp+eax]
	mov	edx, 8
	imul	eax, edx, 3
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR _kvz_g_dct_4[eax+edx]
	mov	edx, 4
	shl	edx, 0
	imul	eax, DWORD PTR _o$[ebp+edx]
	add	ecx, DWORD PTR _add$[ebp]
	add	eax, ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _line$[ebp], 3
	mov	edx, DWORD PTR _dst$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 274  : 
; 275  :     src += 4;

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 8
	mov	DWORD PTR _src$[ebp], eax

; 276  :     dst++;

	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 2
	mov	DWORD PTR _dst$[ebp], eax

; 277  :   }

	jmp	$LN2@partial_bu
$LN1@partial_bu:

; 278  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@partial_bu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@partial_bu:
	DD	2
	DD	$LN8@partial_bu
$LN8@partial_bu:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@partial_bu
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN7@partial_bu
$LN7@partial_bu:
	DB	111					; 0000006fH
	DB	0
$LN6@partial_bu:
	DB	101					; 00000065H
	DB	0
_partial_butterfly_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _fast_inverse_dst_4_generic
_TEXT	SEGMENT
tv387 = -256						; size = 4
tv328 = -256						; size = 4
tv253 = -256						; size = 4
tv194 = -256						; size = 4
tv388 = -252						; size = 4
tv329 = -252						; size = 4
tv254 = -252						; size = 4
tv195 = -252						; size = 4
tv360 = -248						; size = 4
tv293 = -248						; size = 4
tv226 = -248						; size = 4
tv167 = -248						; size = 4
_rnd_factor$ = -48					; size = 4
_c$ = -36						; size = 16
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_tmp$ = 8						; size = 4
_block$ = 12						; size = 4
_shift$ = 16						; size = 4
_fast_inverse_dst_4_generic PROC			; COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 238  :   int i, c[4];
; 239  :   int rnd_factor = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _rnd_factor$[ebp], eax

; 240  :   for (i = 0; i < 4; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@fast_inver
$LN2@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@fast_inver:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN1@fast_inver

; 241  :     // Intermediate Variables
; 242  :     c[0] = tmp[i] + tmp[8 + i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+16]
	add	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 0
	mov	DWORD PTR _c$[ebp+eax], edx

; 243  :     c[1] = tmp[8 + i] + tmp[12 + i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+16]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+24]
	add	edx, eax
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _c$[ebp+ecx], edx

; 244  :     c[2] = tmp[i] - tmp[12 + i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+24]
	sub	edx, eax
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _c$[ebp+ecx], edx

; 245  :     c[3] = 74 * tmp[4 + i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+8]
	imul	eax, edx, 74
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	DWORD PTR _c$[ebp+edx], eax

; 246  : 
; 247  :     block[4 * i + 0] = (short)CLIP(-32768, 32767, (29 * c[0] + 55 * c[1] + c[3] + rnd_factor) >> shift);

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _c$[ebp+ecx], 29
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 55
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN6@fast_inver
	mov	DWORD PTR tv167[ebp], 32767		; 00007fffH
	jmp	SHORT $LN7@fast_inver
$LN6@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 29
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 55
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv167[ebp], edx
$LN7@fast_inver:
	cmp	DWORD PTR tv167[ebp], -32768		; ffff8000H
	jge	SHORT $LN10@fast_inver
	mov	DWORD PTR tv195[ebp], -32768		; ffff8000H
	jmp	$LN11@fast_inver
$LN10@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 29
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 55
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN8@fast_inver
	mov	DWORD PTR tv194[ebp], 32767		; 00007fffH
	jmp	SHORT $LN9@fast_inver
$LN8@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 29
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 55
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv194[ebp], edx
$LN9@fast_inver:
	mov	edx, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv195[ebp], edx
$LN11@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	mov	dx, WORD PTR tv195[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 248  :     block[4 * i + 1] = (short)CLIP(-32768, 32767, (55 * c[2] - 29 * c[1] + c[3] + rnd_factor) >> shift);

	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	sub	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN12@fast_inver
	mov	DWORD PTR tv226[ebp], 32767		; 00007fffH
	jmp	SHORT $LN13@fast_inver
$LN12@fast_inver:
	mov	edx, 4
	shl	edx, 1
	imul	eax, DWORD PTR _c$[ebp+edx], 55
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _c$[ebp+ecx], 29
	sub	eax, edx
	mov	ecx, 4
	imul	edx, ecx, 3
	add	eax, DWORD PTR _c$[ebp+edx]
	add	eax, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv226[ebp], eax
$LN13@fast_inver:
	cmp	DWORD PTR tv226[ebp], -32768		; ffff8000H
	jge	SHORT $LN16@fast_inver
	mov	DWORD PTR tv254[ebp], -32768		; ffff8000H
	jmp	$LN17@fast_inver
$LN16@fast_inver:
	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	sub	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN14@fast_inver
	mov	DWORD PTR tv253[ebp], 32767		; 00007fffH
	jmp	SHORT $LN15@fast_inver
$LN14@fast_inver:
	mov	edx, 4
	shl	edx, 1
	imul	eax, DWORD PTR _c$[ebp+edx], 55
	mov	ecx, 4
	shl	ecx, 0
	imul	edx, DWORD PTR _c$[ebp+ecx], 29
	sub	eax, edx
	mov	ecx, 4
	imul	edx, ecx, 3
	add	eax, DWORD PTR _c$[ebp+edx]
	add	eax, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR tv253[ebp], eax
$LN15@fast_inver:
	mov	eax, DWORD PTR tv253[ebp]
	mov	DWORD PTR tv254[ebp], eax
$LN17@fast_inver:
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _block$[ebp]
	mov	ax, WORD PTR tv254[ebp]
	mov	WORD PTR [edx+ecx*2+2], ax

; 249  :     block[4 * i + 2] = (short)CLIP(-32768, 32767, (74 * (tmp[i] - tmp[8 + i] + tmp[12 + i]) + rnd_factor) >> shift);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+16]
	sub	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movsx	ecx, WORD PTR [eax+ecx*2+24]
	add	edx, ecx
	imul	edx, edx, 74
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN18@fast_inver
	mov	DWORD PTR tv293[ebp], 32767		; 00007fffH
	jmp	SHORT $LN19@fast_inver
$LN18@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+16]
	sub	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movsx	ecx, WORD PTR [eax+ecx*2+24]
	add	edx, ecx
	imul	edx, edx, 74
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv293[ebp], edx
$LN19@fast_inver:
	cmp	DWORD PTR tv293[ebp], -32768		; ffff8000H
	jge	SHORT $LN22@fast_inver
	mov	DWORD PTR tv329[ebp], -32768		; ffff8000H
	jmp	$LN23@fast_inver
$LN22@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+16]
	sub	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movsx	ecx, WORD PTR [eax+ecx*2+24]
	add	edx, ecx
	imul	edx, edx, 74
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN20@fast_inver
	mov	DWORD PTR tv328[ebp], 32767		; 00007fffH
	jmp	SHORT $LN21@fast_inver
$LN20@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+16]
	sub	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movsx	ecx, WORD PTR [eax+ecx*2+24]
	add	edx, ecx
	imul	edx, edx, 74
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv328[ebp], edx
$LN21@fast_inver:
	mov	eax, DWORD PTR tv328[ebp]
	mov	DWORD PTR tv329[ebp], eax
$LN23@fast_inver:
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _block$[ebp]
	mov	ax, WORD PTR tv329[ebp]
	mov	WORD PTR [edx+ecx*2+4], ax

; 250  :     block[4 * i + 3] = (short)CLIP(-32768, 32767, (55 * c[0] + 29 * c[2] - c[3] + rnd_factor) >> shift);

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _c$[ebp+ecx], 55
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	sub	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN24@fast_inver
	mov	DWORD PTR tv360[ebp], 32767		; 00007fffH
	jmp	SHORT $LN25@fast_inver
$LN24@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	sub	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv360[ebp], edx
$LN25@fast_inver:
	cmp	DWORD PTR tv360[ebp], -32768		; ffff8000H
	jge	SHORT $LN28@fast_inver
	mov	DWORD PTR tv388[ebp], -32768		; ffff8000H
	jmp	$LN29@fast_inver
$LN28@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	sub	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN26@fast_inver
	mov	DWORD PTR tv387[ebp], 32767		; 00007fffH
	jmp	SHORT $LN27@fast_inver
$LN26@fast_inver:
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 1
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	sub	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv387[ebp], edx
$LN27@fast_inver:
	mov	edx, DWORD PTR tv387[ebp]
	mov	DWORD PTR tv388[ebp], edx
$LN29@fast_inver:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	mov	dx, WORD PTR tv388[ebp]
	mov	WORD PTR [ecx+eax*2+6], dx

; 251  :   }

	jmp	$LN2@fast_inver
$LN1@fast_inver:

; 252  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@fast_inver
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@fast_inver:
	DD	1
	DD	$LN31@fast_inver
$LN31@fast_inver:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN30@fast_inver
$LN30@fast_inver:
	DB	99					; 00000063H
	DB	0
_fast_inverse_dst_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _fast_forward_dst_4_generic
_TEXT	SEGMENT
_rnd_factor$ = -48					; size = 4
_c$ = -36						; size = 16
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_block$ = 8						; size = 4
_coeff$ = 12						; size = 4
_shift$ = 16						; size = 4
_fast_forward_dst_4_generic PROC			; COMDAT

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 220  :   int32_t i, c[4];
; 221  :   int32_t rnd_factor = 1 << (shift - 1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _rnd_factor$[ebp], eax

; 222  :   for (i = 0; i < 4; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@fast_forwa
$LN2@fast_forwa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@fast_forwa:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN1@fast_forwa

; 223  :     // int32_termediate Variables
; 224  :     c[0] = block[4 * i + 0] + block[4 * i + 3];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+6]
	add	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 0
	mov	DWORD PTR _c$[ebp+eax], edx

; 225  :     c[1] = block[4 * i + 1] + block[4 * i + 3];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+2]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+6]
	add	edx, eax
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _c$[ebp+ecx], edx

; 226  :     c[2] = block[4 * i + 0] - block[4 * i + 1];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+2]
	sub	edx, eax
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _c$[ebp+ecx], edx

; 227  :     c[3] = 74 * block[4 * i + 2];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+4]
	imul	eax, edx, 74
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	DWORD PTR _c$[ebp+edx], eax

; 228  : 
; 229  :     coeff[i] = (short)((29 * c[0] + 55 * c[1] + c[3] + rnd_factor) >> shift);

	mov	eax, 4
	imul	ecx, eax, 0
	imul	edx, DWORD PTR _c$[ebp+ecx], 29
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 55
	add	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 230  :     coeff[4 + i] = (short)((74 * (block[4 * i + 0] + block[4 * i + 1] - block[4 * i + 3]) + rnd_factor) >> shift);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+2]
	add	edx, eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 2
	mov	eax, DWORD PTR _block$[ebp]
	movsx	ecx, WORD PTR [eax+ecx*2+6]
	sub	edx, ecx
	imul	edx, edx, 74
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [ecx+eax*2+8], dx

; 231  :     coeff[8 + i] = (short)((29 * c[2] + 55 * c[0] - c[3] + rnd_factor) >> shift);

	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _c$[ebp+eax], 29
	mov	eax, 4
	imul	ecx, eax, 0
	imul	eax, DWORD PTR _c$[ebp+ecx], 55
	add	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 3
	sub	edx, DWORD PTR _c$[ebp+eax]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [eax+ecx*2+16], dx

; 232  :     coeff[12 + i] = (short)((55 * c[2] - 29 * c[1] + c[3] + rnd_factor) >> shift);

	mov	eax, 4
	shl	eax, 1
	imul	edx, DWORD PTR _c$[ebp+eax], 55
	mov	eax, 4
	shl	eax, 0
	imul	ecx, DWORD PTR _c$[ebp+eax], 29
	sub	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 3
	add	edx, DWORD PTR _c$[ebp+ecx]
	add	edx, DWORD PTR _rnd_factor$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [ecx+eax*2+24], dx

; 233  :   }

	jmp	$LN2@fast_forwa
$LN1@fast_forwa:

; 234  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@fast_forwa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@fast_forwa:
	DD	1
	DD	$LN7@fast_forwa
$LN7@fast_forwa:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN6@fast_forwa
$LN6@fast_forwa:
	DB	99					; 00000063H
	DB	0
_fast_forward_dst_4_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\dct-generic.c
;	COMDAT _kvz_strategy_register_dct_generic
_TEXT	SEGMENT
tv204 = -208						; size = 4
tv193 = -208						; size = 4
tv182 = -208						; size = 4
tv171 = -208						; size = 4
tv160 = -208						; size = 4
tv149 = -208						; size = 4
tv138 = -208						; size = 4
tv95 = -208						; size = 4
tv84 = -208						; size = 4
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_dct_generic PROC			; COMDAT

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F22A899F_dct-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 633  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 634  : 
; 635  :   success &= kvz_strategyselector_register(opaque, "fast_forward_dst_4x4", "generic", 0, &fast_forward_dst_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _fast_forward_dst_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 636  :   
; 637  :   success &= kvz_strategyselector_register(opaque, "dct_4x4", "generic", 0, &dct_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _dct_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07MAFDGKIL@dct_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN5@kvz_strate
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@kvz_strate
$LN5@kvz_strate:
	mov	DWORD PTR tv84[ebp], 1
$LN6@kvz_strate:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 638  :   success &= kvz_strategyselector_register(opaque, "dct_8x8", "generic", 0, &dct_8x8_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _dct_8x8_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07CGDAJKDP@dct_8x8@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN7@kvz_strate
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@kvz_strate
$LN7@kvz_strate:
	mov	DWORD PTR tv95[ebp], 1
$LN8@kvz_strate:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 639  :   success &= kvz_strategyselector_register(opaque, "dct_16x16", "generic", 0, &dct_16x16_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _dct_16x16_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09LPGJIHFJ@dct_16x16@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN9@kvz_strate
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN10@kvz_strate
$LN9@kvz_strate:
	mov	DWORD PTR tv138[ebp], 1
$LN10@kvz_strate:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 640  :   success &= kvz_strategyselector_register(opaque, "dct_32x32", "generic", 0, &dct_32x32_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _dct_32x32_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_09GAMJJBPI@dct_32x32@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN11@kvz_strate
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN12@kvz_strate
$LN11@kvz_strate:
	mov	DWORD PTR tv149[ebp], 1
$LN12@kvz_strate:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 641  : 
; 642  :   success &= kvz_strategyselector_register(opaque, "fast_inverse_dst_4x4", "generic", 0, &fast_inverse_dst_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _fast_inverse_dst_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN13@kvz_strate
	mov	DWORD PTR tv160[ebp], 0
	jmp	SHORT $LN14@kvz_strate
$LN13@kvz_strate:
	mov	DWORD PTR tv160[ebp], 1
$LN14@kvz_strate:
	mov	cl, BYTE PTR tv160[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 643  : 
; 644  :   success &= kvz_strategyselector_register(opaque, "idct_4x4", "generic", 0, &idct_4x4_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _idct_4x4_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_08LDLIJGLD@idct_4x4@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN15@kvz_strate
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN16@kvz_strate
$LN15@kvz_strate:
	mov	DWORD PTR tv171[ebp], 1
$LN16@kvz_strate:
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 645  :   success &= kvz_strategyselector_register(opaque, "idct_8x8", "generic", 0, &idct_8x8_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _idct_8x8_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_08FFNLGGAH@idct_8x8@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN17@kvz_strate
	mov	DWORD PTR tv182[ebp], 0
	jmp	SHORT $LN18@kvz_strate
$LN17@kvz_strate:
	mov	DWORD PTR tv182[ebp], 1
$LN18@kvz_strate:
	mov	cl, BYTE PTR tv182[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 646  :   success &= kvz_strategyselector_register(opaque, "idct_16x16", "generic", 0, &idct_16x16_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _idct_16x16_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0L@BMPNPGHO@idct_16x16@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN19@kvz_strate
	mov	DWORD PTR tv193[ebp], 0
	jmp	SHORT $LN20@kvz_strate
$LN19@kvz_strate:
	mov	DWORD PTR tv193[ebp], 1
$LN20@kvz_strate:
	mov	cl, BYTE PTR tv193[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 647  :   success &= kvz_strategyselector_register(opaque, "idct_32x32", "generic", 0, &idct_32x32_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _idct_32x32_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0L@MDFNOANP@idct_32x32@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN21@kvz_strate
	mov	DWORD PTR tv204[ebp], 0
	jmp	SHORT $LN22@kvz_strate
$LN21@kvz_strate:
	mov	DWORD PTR tv204[ebp], 1
$LN22@kvz_strate:
	mov	cl, BYTE PTR tv204[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 648  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_dct_generic ENDP
_TEXT	ENDS
END
