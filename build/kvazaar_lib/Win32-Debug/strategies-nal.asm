; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-nal.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_kvz_array_checksum:DWORD
COMM	_kvz_array_md5:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__05E49C96_strategies-nal@c DB 01H
msvcjmc	ENDS
PUBLIC	_kvz_strategy_register_nal
PUBLIC	__JustMyCode_Default
EXTRN	_kvz_strategy_register_nal_generic:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\strategies-nal.c
;	COMDAT _kvz_strategy_register_nal
_TEXT	SEGMENT
tv70 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_nal PROC				; COMDAT

; 48   : int kvz_strategy_register_nal(void* opaque, uint8_t bitdepth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __05E49C96_strategies-nal@c
	call	@__CheckForDebuggerJustMyCode@4

; 49   :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 50   : 
; 51   :   success &= kvz_strategy_register_nal_generic(opaque, bitdepth);

	movzx	esi, BYTE PTR _success$[ebp]
	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opaque$[ebp]
	push	ecx
	call	_kvz_strategy_register_nal_generic
	add	esp, 8
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv70[ebp], 1
$LN4@kvz_strate:
	mov	dl, BYTE PTR tv70[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 52   :   
; 53   :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_nal ENDP
_TEXT	ENDS
END
