; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__614D3496_malloc@h DB 01H
__4DF1518D_xmmintrin@h DB 01H
__A748CBAD_avx2_common_functions@h DB 01H
__53CC1827_encode_coding_tree-avx2@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_encode_coeff_nxn_avx2
PUBLIC	_kvz_strategy_register_encode_avx2
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_encode_coeff_nxn_avx2@@9@9	; `kvz_encode_coeff_nxn_avx2'::`1'::__LINE__Var
PUBLIC	??_C@_1KM@HFNGIBBC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CE@JKIDKDDG@?$AAs?$AAc?$AAa?$AAn?$AA_?$AAc?$AAg?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	??_C@_04GEEJMEMG@avx2@				; `string'
PUBLIC	__xmm@030209080f0e070601000d0c05040b0a
PUBLIC	__xmm@0b0a03020f0e0706090801000d0c0504
PUBLIC	__xmm@0b0a090805040f0e0302010007060d0c
PUBLIC	__xmm@0b0a09080f0e0d0c0302010007060504
PUBLIC	__xmm@0f0e07060b0a03020d0c050409080100
PUBLIC	__xmm@0f0e0d0c05040b0a0706030209080100
PUBLIC	__xmm@0f0e0d0c0b0a09080706050403020100
PUBLIC	__xmm@ffffffff00000000ffff000000000000
PUBLIC	__xmm@ffffffff00000000ffffffff00000000
PUBLIC	__ymm@0000000000000000000000000000000000000000000000000000000000000000
PUBLIC	__ymm@0001000100010001000100010001000100010001000100010001000100010001
PUBLIC	__ymm@0002000200020002000200020002000200020002000200020002000200020002
PUBLIC	__ymm@0003000300030003000300030003000300030003000300030003000300030003
PUBLIC	__ymm@0008000800050005000800080004000400070006000300010007000600020000
PUBLIC	__ymm@0008000800070007000800080006000600050004000300020005000400010000
PUBLIC	__ymm@0008000800080005000800070005000400060007000400030006000100020000
PUBLIC	__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	_kvz_cabac_encode_bin:PROC
EXTRN	_kvz_cabac_encode_bins_ep:PROC
EXTRN	_kvz_cabac_write_coeff_remain:PROC
EXTRN	_kvz_cabac_write_coeff_remain_encry:PROC
EXTRN	_kvz_context_calc_pattern_sig_ctx:PROC
EXTRN	_kvz_context_get_sig_coeff_group:PROC
EXTRN	_kvz_encode_last_significant_xy:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_g_sig_last_scan:BYTE
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT __ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
CONST	SEGMENT
__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff DB 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@0008000800080005000800070005000400060007000400030006000100020000
CONST	SEGMENT
__ymm@0008000800080005000800070005000400060007000400030006000100020000 DB 00H
	DB	00H, 02H, 00H, 01H, 00H, 06H, 00H, 03H, 00H, 04H, 00H, 07H, 00H
	DB	06H, 00H, 04H, 00H, 05H, 00H, 07H, 00H, 08H, 00H, 05H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0008000800070007000800080006000600050004000300020005000400010000
CONST	SEGMENT
__ymm@0008000800070007000800080006000600050004000300020005000400010000 DB 00H
	DB	00H, 01H, 00H, 04H, 00H, 05H, 00H, 02H, 00H, 03H, 00H, 04H, 00H
	DB	05H, 00H, 06H, 00H, 06H, 00H, 08H, 00H, 08H, 00H, 07H, 00H, 07H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0008000800050005000800080004000400070006000300010007000600020000
CONST	SEGMENT
__ymm@0008000800050005000800080004000400070006000300010007000600020000 DB 00H
	DB	00H, 02H, 00H, 06H, 00H, 07H, 00H, 01H, 00H, 03H, 00H, 06H, 00H
	DB	07H, 00H, 04H, 00H, 04H, 00H, 08H, 00H, 08H, 00H, 05H, 00H, 05H
	DB	00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __ymm@0003000300030003000300030003000300030003000300030003000300030003
CONST	SEGMENT
__ymm@0003000300030003000300030003000300030003000300030003000300030003 DB 03H
	DB	00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H
	DB	03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H, 00H, 03H
	DB	00H, 03H, 00H, 03H, 00H
CONST	ENDS
;	COMDAT __ymm@0002000200020002000200020002000200020002000200020002000200020002
CONST	SEGMENT
__ymm@0002000200020002000200020002000200020002000200020002000200020002 DB 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
	DB	02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __ymm@0001000100010001000100010001000100010001000100010001000100010001
CONST	SEGMENT
__ymm@0001000100010001000100010001000100010001000100010001000100010001 DB 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
	DB	01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __ymm@0000000000000000000000000000000000000000000000000000000000000000
CONST	SEGMENT
__ymm@0000000000000000000000000000000000000000000000000000000000000000 DB 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@ffffffff00000000ffffffff00000000
CONST	SEGMENT
__xmm@ffffffff00000000ffffffff00000000 DB 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH
	DB	0ffH, 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@ffffffff00000000ffff000000000000
CONST	SEGMENT
__xmm@ffffffff00000000ffff000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0ffH
	DB	0ffH, 00H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@0f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__xmm@0f0e0d0c0b0a09080706050403020100 DB 00H, 01H, 02H, 03H, 04H, 05H, 06H
	DB	07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0f0e0d0c05040b0a0706030209080100
CONST	SEGMENT
__xmm@0f0e0d0c05040b0a0706030209080100 DB 00H, 01H, 08H, 09H, 02H, 03H, 06H
	DB	07H, 0aH, 0bH, 04H, 05H, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0f0e07060b0a03020d0c050409080100
CONST	SEGMENT
__xmm@0f0e07060b0a03020d0c050409080100 DB 00H, 01H, 08H, 09H, 04H, 05H, 0cH
	DB	0dH, 02H, 03H, 0aH, 0bH, 06H, 07H, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0b0a09080f0e0d0c0302010007060504
CONST	SEGMENT
__xmm@0b0a09080f0e0d0c0302010007060504 DB 04H, 05H, 06H, 07H, 00H, 01H, 02H
	DB	03H, 0cH, 0dH, 0eH, 0fH, 08H, 09H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@0b0a090805040f0e0302010007060d0c
CONST	SEGMENT
__xmm@0b0a090805040f0e0302010007060d0c DB 0cH, 0dH, 06H, 07H, 00H, 01H, 02H
	DB	03H, 0eH, 0fH, 04H, 05H, 08H, 09H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@0b0a03020f0e0706090801000d0c0504
CONST	SEGMENT
__xmm@0b0a03020f0e0706090801000d0c0504 DB 04H, 05H, 0cH, 0dH, 00H, 01H, 08H
	DB	09H, 06H, 07H, 0eH, 0fH, 02H, 03H, 0aH, 0bH
CONST	ENDS
;	COMDAT __xmm@030209080f0e070601000d0c05040b0a
CONST	SEGMENT
__xmm@030209080f0e070601000d0c05040b0a DB 0aH, 0bH, 04H, 05H, 0cH, 0dH, 00H
	DB	01H, 06H, 07H, 0eH, 0fH, 08H, 09H, 02H, 03H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04GEEJMEMG@avx2@
CONST	SEGMENT
??_C@_04GEEJMEMG@avx2@ DB 'avx2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JKIDKDDG@?$AAs?$AAc?$AAa?$AAn?$AA_?$AAc?$AAg?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@JKIDKDDG@?$AAs?$AAc?$AAa?$AAn?$AA_?$AAc?$AAg?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?5?$AA?$DO?$AA?$DN@ DB 's'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'c', 00H, 'g', 00H
	DB	'_', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@HFNGIBBC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1KM@HFNGIBBC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'e'
	DB	00H, 's', 00H, '\', 00H, 'a', 00H, 'v', 00H, 'x', 00H, '2', 00H
	DB	'\', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, '_', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '-'
	DB	00H, 'a', 00H, 'v', 00H, 'x', 00H, '2', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encode_coeff_nxn_avx2@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encode_coeff_nxn_avx2@@9@9 DD 0100H ; `kvz_encode_coeff_nxn_avx2'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
;	COMDAT _kvz_context_get_sig_ctx_inc_16x16b
_TEXT	SEGMENT
tv165 = -4680						; size = 4
_rv$ = -3328						; size = 32
_rv2$ = -3264						; size = 32
_rv1$ = -3200						; size = 32
_rv_noshortcirc$ = -3136				; size = 32
_tmp_with_offsets$ = -3072				; size = 32
_tmp$ = -3008						; size = 32
_tmpcond$ = -2944					; size = 32
_cg_pos_sums_gt_0$ = -2880				; size = 32
_textype_eq_0$ = -2816					; size = 32
_cnts$ = -2752						; size = 32
_cnts_sc012_masked$ = -2688				; size = 32
_cnts_scother_masked$ = -2624				; size = 32
_cnts_sc12_masked$ = -2560				; size = 32
_cnts_sig_ctx_1or2$ = -2496				; size = 32
_pos_operands_max2$ = -2432				; size = 32
_pos_operands_ctx_1or2$ = -2368				; size = 32
_cnts_sc0_masked$ = -2304				; size = 32
_cnts_sig_ctx_0$ = -2240				; size = 32
_cnts_tmp$ = -2176					; size = 32
_pxyis_max3$ = -2112					; size = 32
_subamts$ = -2048					; size = 32
_pxyis_lte_1$ = -1984					; size = 32
_pos_xy_sums_in_subset$ = -1920				; size = 32
_cg_pos_xysums$ = -1856					; size = 32
_cg_pos_ys$ = -1792					; size = 32
_cg_pos_xs$ = -1728					; size = 32
_pos_ys_in_subset$ = -1664				; size = 32
_pos_xs_in_subset$ = -1600				; size = 32
_bt2_vals_masked$ = -1536				; size = 32
_bt2_vals$ = -1472					; size = 32
_block_type_two$ = -1408				; size = 32
_block_types$ = -1344					; size = 32
_texture_types$ = -1280					; size = 32
_x_plus_y_zero$ = -1216					; size = 32
_x_plus_y$ = -1152					; size = 32
_pattern_sig_ctxs_other$ = -1088			; size = 32
_pattern_sig_ctxs_lt3$ = -1024				; size = 32
_pattern_sig_ctxs_eq_1or2$ = -960			; size = 32
_pattern_sig_ctxs_eq_two$ = -896			; size = 32
_pattern_sig_ctxs_eq_one$ = -832			; size = 32
_pattern_sig_ctxs_eq_zero$ = -768			; size = 32
_pattern_sig_ctxs$ = -704				; size = 32
_offsets$ = -640					; size = 32
_offset$ = -588						; size = 2
_ctx_ind_map$ = -576					; size = 96
_threes$ = -448						; size = 32
_twos$ = -384						; size = 32
_ones$ = -320						; size = 32
_ff$ = -256						; size = 32
_zero$ = -192						; size = 32
_pos_ys$ = -128						; size = 32
_pos_xs$ = -64						; size = 32
__$ArrayPad$ = -4					; size = 4
_pattern_sig_ctx$ = 8					; size = 4
_scan_idx$ = 12						; size = 4
_block_type$ = 16					; size = 4
_texture_type$ = 20					; size = 1
_kvz_context_get_sig_ctx_inc_16x16b PROC		; COMDAT
; _pos_xs$ = ymm0
; _pos_ys$ = ymm1

; 102  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 4696				; 00001258H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4696]
	mov	ecx, 1174				; 00000496H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	vmovups	YMMWORD PTR _pos_ys$[ebp], ymm1
	vmovups	YMMWORD PTR _pos_xs$[ebp], ymm0
	mov	ecx, OFFSET __53CC1827_encode_coding_tree-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 103  :   const __m256i zero   = _mm256_set1_epi8(0);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000000000000000000000000000000000000000000000000000000000000000
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 104  :   const __m256i ff     = _mm256_set1_epi8(0xff);

	vmovdqu	ymm0, YMMWORD PTR __ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
	vmovdqu	YMMWORD PTR _ff$[ebp], ymm0

; 105  : 
; 106  :   const __m256i ones   = _mm256_set1_epi16(1);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
	vmovdqu	YMMWORD PTR _ones$[ebp], ymm0

; 107  :   const __m256i twos   = _mm256_set1_epi16(2);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0002000200020002000200020002000200020002000200020002000200020002
	vmovdqu	YMMWORD PTR _twos$[ebp], ymm0

; 108  :   const __m256i threes = _mm256_set1_epi16(3);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0003000300030003000300030003000300030003000300030003000300030003
	vmovdqu	YMMWORD PTR _threes$[ebp], ymm0

; 109  : 
; 110  :   const __m256i ctx_ind_map[3] = {

	vmovdqu	ymm0, YMMWORD PTR __ymm@0008000800080005000800070005000400060007000400030006000100020000
	vmovdqu	YMMWORD PTR _ctx_ind_map$[ebp], ymm0
	vmovdqu	ymm0, YMMWORD PTR __ymm@0008000800070007000800080006000600050004000300020005000400010000
	vmovdqu	YMMWORD PTR _ctx_ind_map$[ebp+32], ymm0
	vmovdqu	ymm0, YMMWORD PTR __ymm@0008000800050005000800080004000400070006000300010007000600020000
	vmovdqu	YMMWORD PTR _ctx_ind_map$[ebp+64], ymm0

; 111  :     _mm256_setr_epi16(
; 112  :         0, 2, 1, 6,
; 113  :         3, 4, 7, 6,
; 114  :         4, 5, 7, 8,
; 115  :         5, 8, 8, 8
; 116  :     ),
; 117  :     _mm256_setr_epi16(
; 118  :         0, 1, 4, 5,
; 119  :         2, 3, 4, 5,
; 120  :         6, 6, 8, 8,
; 121  :         7, 7, 8, 8
; 122  :     ),
; 123  :     _mm256_setr_epi16(
; 124  :         0, 2, 6, 7,
; 125  :         1, 3, 6, 7,
; 126  :         4, 4, 8, 8,
; 127  :         5, 5, 8, 8
; 128  :     ),
; 129  :   };
; 130  : 
; 131  :   int16_t offset;
; 132  :   if (block_type == 3)

	cmp	DWORD PTR _block_type$[ebx], 3
	jne	SHORT $LN2@kvz_contex

; 133  :     if (scan_idx == SCAN_DIAG)

	cmp	DWORD PTR _scan_idx$[ebx], 0
	jne	SHORT $LN4@kvz_contex

; 134  :       offset = 9;

	mov	eax, 9
	mov	WORD PTR _offset$[ebp], ax
	jmp	SHORT $LN5@kvz_contex
$LN4@kvz_contex:

; 135  :     else
; 136  :       offset = 15;

	mov	eax, 15					; 0000000fH
	mov	WORD PTR _offset$[ebp], ax
$LN5@kvz_contex:
	jmp	SHORT $LN3@kvz_contex
$LN2@kvz_contex:

; 137  :   else
; 138  :     if (texture_type == 0)

	movsx	eax, BYTE PTR _texture_type$[ebx]
	test	eax, eax
	jne	SHORT $LN6@kvz_contex

; 139  :       offset = 21;

	mov	eax, 21					; 00000015H
	mov	WORD PTR _offset$[ebp], ax
	jmp	SHORT $LN3@kvz_contex
$LN6@kvz_contex:

; 140  :     else
; 141  :       offset = 12;

	mov	eax, 12					; 0000000cH
	mov	WORD PTR _offset$[ebp], ax
$LN3@kvz_contex:

; 142  : 
; 143  :   __m256i offsets = _mm256_set1_epi16(offset);

	movsx	eax, WORD PTR _offset$[ebp]
	vmovd	xmm0, eax
	vpbroadcastw ymm0, xmm0
	vmovdqu	YMMWORD PTR _offsets$[ebp], ymm0

; 144  : 
; 145  :   // This will only ever be compared to 0, 1 and 2, so it's fine to cast down
; 146  :   // to 16b (and it should never be above 3 anyways)
; 147  :   __m256i pattern_sig_ctxs = _mm256_set1_epi16((int16_t)(MIN(0xffff, pattern_sig_ctx)));

	cmp	DWORD PTR _pattern_sig_ctx$[ebx], 65535	; 0000ffffH
	jle	SHORT $LN9@kvz_contex
	mov	DWORD PTR tv165[ebp], 65535		; 0000ffffH
	jmp	SHORT $LN10@kvz_contex
$LN9@kvz_contex:
	mov	eax, DWORD PTR _pattern_sig_ctx$[ebx]
	mov	DWORD PTR tv165[ebp], eax
$LN10@kvz_contex:
	movsx	ecx, WORD PTR tv165[ebp]
	vmovd	xmm0, ecx
	vpbroadcastw ymm0, xmm0
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs$[ebp], ymm0

; 148  :   __m256i pattern_sig_ctxs_eq_zero = _mm256_cmpeq_epi16(pattern_sig_ctxs, zero);

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_eq_zero$[ebp], ymm0

; 149  :   __m256i pattern_sig_ctxs_eq_one  = _mm256_cmpeq_epi16(pattern_sig_ctxs, ones);

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _ones$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_eq_one$[ebp], ymm0

; 150  :   __m256i pattern_sig_ctxs_eq_two  = _mm256_cmpeq_epi16(pattern_sig_ctxs, twos);

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _twos$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_eq_two$[ebp], ymm0

; 151  : 
; 152  :   __m256i pattern_sig_ctxs_eq_1or2 = _mm256_or_si256 (pattern_sig_ctxs_eq_one,

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_one$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_two$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_eq_1or2$[ebp], ymm0

; 153  :                                                       pattern_sig_ctxs_eq_two);
; 154  :   __m256i pattern_sig_ctxs_lt3     = _mm256_or_si256 (pattern_sig_ctxs_eq_1or2,

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_1or2$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_zero$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_lt3$[ebp], ymm0

; 155  :                                                       pattern_sig_ctxs_eq_zero);
; 156  :   __m256i pattern_sig_ctxs_other   = _mm256_xor_si256(pattern_sig_ctxs_lt3,

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs_lt3$[ebp]
	vpxor	ymm0, ymm0, YMMWORD PTR _ff$[ebp]
	vmovdqu	YMMWORD PTR _pattern_sig_ctxs_other$[ebp], ymm0

; 157  :                                                       ff);
; 158  :   __m256i x_plus_y        = _mm256_add_epi16  (pos_xs,   pos_ys);

	vmovdqu	ymm0, YMMWORD PTR _pos_xs$[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _pos_ys$[ebp]
	vmovdqu	YMMWORD PTR _x_plus_y$[ebp], ymm0

; 159  :   __m256i x_plus_y_zero   = _mm256_cmpeq_epi16(x_plus_y, zero);   // All these should be 0, preempts block_type_two rule

	vmovdqu	ymm0, YMMWORD PTR _x_plus_y$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _x_plus_y_zero$[ebp], ymm0

; 160  : 
; 161  :   __m256i texture_types = _mm256_set1_epi16((int16_t)texture_type);

	movsx	ax, BYTE PTR _texture_type$[ebx]
	movsx	ecx, ax
	vmovd	xmm0, ecx
	vpbroadcastw ymm0, xmm0
	vmovdqu	YMMWORD PTR _texture_types$[ebp], ymm0

; 162  : 
; 163  :   __m256i block_types     = _mm256_set1_epi16((int16_t)block_type);

	movsx	eax, WORD PTR _block_type$[ebx]
	vmovd	xmm0, eax
	vpbroadcastw ymm0, xmm0
	vmovdqu	YMMWORD PTR _block_types$[ebp], ymm0

; 164  :   __m256i block_type_two  = _mm256_cmpeq_epi16(block_types, twos);   // All these should be ctx_ind_map[4 * pos_y + pos_x];

	vmovdqu	ymm0, YMMWORD PTR _block_types$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _twos$[ebp]
	vmovdqu	YMMWORD PTR _block_type_two$[ebp], ymm0

; 165  :   __m256i bt2_vals        = ctx_ind_map[scan_idx];

	mov	eax, DWORD PTR _scan_idx$[ebx]
	shl	eax, 5
	vmovdqu	ymm0, YMMWORD PTR _ctx_ind_map$[ebp+eax]
	vmovdqu	YMMWORD PTR _bt2_vals$[ebp], ymm0

; 166  :   __m256i bt2_vals_masked = _mm256_and_si256(bt2_vals, block_type_two);

	vmovdqu	ymm0, YMMWORD PTR _bt2_vals$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _block_type_two$[ebp]
	vmovdqu	YMMWORD PTR _bt2_vals_masked$[ebp], ymm0

; 167  : 
; 168  :   __m256i pos_xs_in_subset = _mm256_and_si256(pos_xs, threes);

	vmovdqu	ymm0, YMMWORD PTR _pos_xs$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _pos_xs_in_subset$[ebp], ymm0

; 169  :   __m256i pos_ys_in_subset = _mm256_and_si256(pos_ys, threes);

	vmovdqu	ymm0, YMMWORD PTR _pos_ys$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _pos_ys_in_subset$[ebp], ymm0

; 170  : 
; 171  :   __m256i cg_pos_xs        = _mm256_srli_epi16(pos_xs, 2);

	vmovdqu	ymm0, YMMWORD PTR _pos_xs$[ebp]
	vpsrlw	ymm0, ymm0, 2
	vmovdqu	YMMWORD PTR _cg_pos_xs$[ebp], ymm0

; 172  :   __m256i cg_pos_ys        = _mm256_srli_epi16(pos_ys, 2);

	vmovdqu	ymm0, YMMWORD PTR _pos_ys$[ebp]
	vpsrlw	ymm0, ymm0, 2
	vmovdqu	YMMWORD PTR _cg_pos_ys$[ebp], ymm0

; 173  :   __m256i cg_pos_xysums    = _mm256_add_epi16 (cg_pos_xs, cg_pos_ys);

	vmovdqu	ymm0, YMMWORD PTR _cg_pos_xs$[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _cg_pos_ys$[ebp]
	vmovdqu	YMMWORD PTR _cg_pos_xysums$[ebp], ymm0

; 174  : 
; 175  :   __m256i pos_xy_sums_in_subset = _mm256_add_epi16(pos_xs_in_subset, pos_ys_in_subset);

	vmovdqu	ymm0, YMMWORD PTR _pos_xs_in_subset$[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _pos_ys_in_subset$[ebp]
	vmovdqu	YMMWORD PTR _pos_xy_sums_in_subset$[ebp], ymm0

; 176  : 
; 177  :   /*
; 178  :    * if (pattern_sig_ctx == 0) {
; 179  :    *   switch (pos_x_in_subset + pos_y_in_subset) {
; 180  :    *   case 0:
; 181  :    *     cnt = 2;
; 182  :    *     break;
; 183  :    *   case 1:
; 184  :    *   case 2:
; 185  :    *     cnt = 1;
; 186  :    *     break;
; 187  :    *   default:
; 188  :    *     cnt = 0;
; 189  :    *   }
; 190  :    * }
; 191  :    *
; 192  :    * Equivalent to:
; 193  :    *
; 194  :    * if (pattern_sig_ctx == 0) {
; 195  :    *   subamt = cnt <= 1 ? 1 : 0;
; 196  :    *   pxyis_max3 = min(3, pos_x_in_subset + pos_y_in_subset);
; 197  :    *   cnt = (3 - pxyis_max3) - subamt;
; 198  :    * }
; 199  :    */
; 200  :   __m256i pxyis_lte_1     = _mm256_cmpgt_epi16(twos,                  pos_xy_sums_in_subset);

	vmovdqu	ymm0, YMMWORD PTR _twos$[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _pos_xy_sums_in_subset$[ebp]
	vmovdqu	YMMWORD PTR _pxyis_lte_1$[ebp], ymm0

; 201  :   __m256i subamts         = _mm256_and_si256  (pxyis_lte_1,           ones);

	vmovdqu	ymm0, YMMWORD PTR _pxyis_lte_1$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _ones$[ebp]
	vmovdqu	YMMWORD PTR _subamts$[ebp], ymm0

; 202  :   __m256i pxyis_max3      = _mm256_min_epu16  (pos_xy_sums_in_subset, threes);

	vmovdqu	ymm0, YMMWORD PTR _pos_xy_sums_in_subset$[ebp]
	vpminuw	ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _pxyis_max3$[ebp], ymm0

; 203  :   __m256i cnts_tmp        = _mm256_sub_epi16  (threes,                pxyis_max3);

	vmovdqu	ymm0, YMMWORD PTR _threes$[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _pxyis_max3$[ebp]
	vmovdqu	YMMWORD PTR _cnts_tmp$[ebp], ymm0

; 204  :   __m256i cnts_sig_ctx_0  = _mm256_sub_epi16  (cnts_tmp,              subamts);

	vmovdqu	ymm0, YMMWORD PTR _cnts_tmp$[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _subamts$[ebp]
	vmovdqu	YMMWORD PTR _cnts_sig_ctx_0$[ebp], ymm0

; 205  :   __m256i cnts_sc0_masked = _mm256_and_si256  (cnts_sig_ctx_0,        pattern_sig_ctxs_eq_zero);

	vmovdqu	ymm0, YMMWORD PTR _cnts_sig_ctx_0$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_zero$[ebp]
	vmovdqu	YMMWORD PTR _cnts_sc0_masked$[ebp], ymm0

; 206  : 
; 207  :   /*
; 208  :    * if (pattern_sig_ctx == 1 || pattern_sig_ctx == 2) {
; 209  :    *   if (pattern_sig_ctx == 1)
; 210  :    *     subtrahend = pos_y_in_subset;
; 211  :    *   else
; 212  :    *     subtrahend = pos_x_in_subset;
; 213  :    *   cnt = 2 - min(2, subtrahend);
; 214  :    * }
; 215  :    */
; 216  :   __m256i pos_operands_ctx_1or2 = _mm256_blendv_epi8(pos_ys_in_subset,

	vmovdqu	ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_two$[ebp]
	vmovdqu	ymm1, YMMWORD PTR _pos_ys_in_subset$[ebp]
	vpblendvb ymm0, ymm1, YMMWORD PTR _pos_xs_in_subset$[ebp], ymm0
	vmovdqu	YMMWORD PTR _pos_operands_ctx_1or2$[ebp], ymm0

; 217  :                                                      pos_xs_in_subset,
; 218  :                                                      pattern_sig_ctxs_eq_two);
; 219  : 
; 220  :   __m256i pos_operands_max2     = _mm256_min_epu16  (pos_operands_ctx_1or2, twos);

	vmovdqu	ymm0, YMMWORD PTR _pos_operands_ctx_1or2$[ebp]
	vpminuw	ymm0, ymm0, YMMWORD PTR _twos$[ebp]
	vmovdqu	YMMWORD PTR _pos_operands_max2$[ebp], ymm0

; 221  :   __m256i cnts_sig_ctx_1or2     = _mm256_sub_epi16  (twos,                  pos_operands_max2);

	vmovdqu	ymm0, YMMWORD PTR _twos$[ebp]
	vpsubw	ymm0, ymm0, YMMWORD PTR _pos_operands_max2$[ebp]
	vmovdqu	YMMWORD PTR _cnts_sig_ctx_1or2$[ebp], ymm0

; 222  :   __m256i cnts_sc12_masked      = _mm256_and_si256  (cnts_sig_ctx_1or2,     pattern_sig_ctxs_eq_1or2);

	vmovdqu	ymm0, YMMWORD PTR _cnts_sig_ctx_1or2$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _pattern_sig_ctxs_eq_1or2$[ebp]
	vmovdqu	YMMWORD PTR _cnts_sc12_masked$[ebp], ymm0

; 223  : 
; 224  :   /*
; 225  :    * if (pattern_sig_ctx > 2)
; 226  :    *   cnt = 2;
; 227  :    */
; 228  :   __m256i cnts_scother_masked = _mm256_and_si256(twos, pattern_sig_ctxs_other);

	vmovdqu	ymm0, YMMWORD PTR _twos$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _pattern_sig_ctxs_other$[ebp]
	vmovdqu	YMMWORD PTR _cnts_scother_masked$[ebp], ymm0

; 229  : 
; 230  :   // Select correct count
; 231  :   __m256i cnts_sc012_masked   = _mm256_or_si256 (cnts_sc0_masked,     cnts_sc12_masked);

	vmovdqu	ymm0, YMMWORD PTR _cnts_sc0_masked$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _cnts_sc12_masked$[ebp]
	vmovdqu	YMMWORD PTR _cnts_sc012_masked$[ebp], ymm0

; 232  :   __m256i cnts                = _mm256_or_si256 (cnts_scother_masked, cnts_sc012_masked);

	vmovdqu	ymm0, YMMWORD PTR _cnts_scother_masked$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _cnts_sc012_masked$[ebp]
	vmovdqu	YMMWORD PTR _cnts$[ebp], ymm0

; 233  : 
; 234  :   // Compute final values
; 235  :   __m256i textype_eq_0     = _mm256_cmpeq_epi16(texture_types, zero);

	vmovdqu	ymm0, YMMWORD PTR _texture_types$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _textype_eq_0$[ebp], ymm0

; 236  :   __m256i cg_pos_sums_gt_0 = _mm256_cmpgt_epi16(cg_pos_xysums, zero);

	vmovdqu	ymm0, YMMWORD PTR _cg_pos_xysums$[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _cg_pos_sums_gt_0$[ebp], ymm0

; 237  :   __m256i tmpcond          = _mm256_and_si256  (textype_eq_0,  cg_pos_sums_gt_0);

	vmovdqu	ymm0, YMMWORD PTR _textype_eq_0$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _cg_pos_sums_gt_0$[ebp]
	vmovdqu	YMMWORD PTR _tmpcond$[ebp], ymm0

; 238  :   __m256i tmp              = _mm256_and_si256  (tmpcond,       threes);

	vmovdqu	ymm0, YMMWORD PTR _tmpcond$[ebp]
	vpand	ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _tmp$[ebp], ymm0

; 239  :   __m256i tmp_with_offsets = _mm256_add_epi16  (tmp,           offsets);

	vmovdqu	ymm0, YMMWORD PTR _tmp$[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _offsets$[ebp]
	vmovdqu	YMMWORD PTR _tmp_with_offsets$[ebp], ymm0

; 240  :   __m256i rv_noshortcirc   = _mm256_add_epi16  (cnts,          tmp_with_offsets);

	vmovdqu	ymm0, YMMWORD PTR _cnts$[ebp]
	vpaddw	ymm0, ymm0, YMMWORD PTR _tmp_with_offsets$[ebp]
	vmovdqu	YMMWORD PTR _rv_noshortcirc$[ebp], ymm0

; 241  : 
; 242  :   // Ol' sprite mask method works here!
; 243  :   __m256i rv1 = _mm256_andnot_si256(block_type_two, rv_noshortcirc);

	vmovdqu	ymm0, YMMWORD PTR _block_type_two$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _rv_noshortcirc$[ebp]
	vmovdqu	YMMWORD PTR _rv1$[ebp], ymm0

; 244  :   __m256i rv2 = _mm256_or_si256    (rv1,            bt2_vals_masked);

	vmovdqu	ymm0, YMMWORD PTR _rv1$[ebp]
	vpor	ymm0, ymm0, YMMWORD PTR _bt2_vals_masked$[ebp]
	vmovdqu	YMMWORD PTR _rv2$[ebp], ymm0

; 245  :   __m256i rv  = _mm256_andnot_si256(x_plus_y_zero,  rv2);

	vmovdqu	ymm0, YMMWORD PTR _x_plus_y_zero$[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _rv2$[ebp]
	vmovdqu	YMMWORD PTR _rv$[ebp], ymm0

; 246  :   return rv;

	vmovdqu	ymm0, YMMWORD PTR _rv$[ebp]

; 247  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@kvz_contex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN13@kvz_contex:
	DD	1
	DD	$LN12@kvz_contex
$LN12@kvz_contex:
	DD	-576					; fffffdc0H
	DD	96					; 00000060H
	DD	$LN11@kvz_contex
$LN11@kvz_contex:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_kvz_context_get_sig_ctx_inc_16x16b ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
;	COMDAT _pack_16x16b_to_16x2b
_TEXT	SEGMENT
_result$ = -396						; size = 4
_cmpres$ = -384						; size = 32
_shifted$ = -320					; size = 32
_clipped$ = -256					; size = 32
_cmpmask$ = -192					; size = 32
_threes$ = -128						; size = 32
_src$ = -64						; size = 32
_pack_16x16b_to_16x2b PROC				; COMDAT
; _src$ = ymm0

; 68   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _src$[ebp], ymm0
	mov	ecx, OFFSET __53CC1827_encode_coding_tree-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 69   :   /*
; 70   :    * For each 16-bit element in src:
; 71   :    * ABCD EFGH IJKL MNOP Original elements
; 72   :    * 0000 0000 0000 00XY Element clipped to [0, 3] using _mm256_min_epu16
; 73   :    * 0000 000X Y000 0000 Shift word to align LSBs across byte boundary
; 74   :    * 0000 0001 1000 0000 Comparison mask to be compared against
; 75   :    * XXXX XXXX YYYY YYYY Comparison result, for movemask
; 76   :    */
; 77   :   const __m256i threes  = _mm256_set1_epi16   (3);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0003000300030003000300030003000300030003000300030003000300030003
	vmovdqu	YMMWORD PTR _threes$[ebp], ymm0

; 78   :   const __m256i cmpmask = _mm256_slli_epi16   (threes, 7); // 0x0180 (avoid set1)

	vmovdqu	ymm0, YMMWORD PTR _threes$[ebp]
	vpsllw	ymm0, ymm0, 7
	vmovdqu	YMMWORD PTR _cmpmask$[ebp], ymm0

; 79   : 
; 80   :   __m256i  clipped      = _mm256_min_epu16    (src, threes);

	vmovdqu	ymm0, YMMWORD PTR _src$[ebp]
	vpminuw	ymm0, ymm0, YMMWORD PTR _threes$[ebp]
	vmovdqu	YMMWORD PTR _clipped$[ebp], ymm0

; 81   :   __m256i  shifted      = _mm256_slli_epi16   (clipped, 7);

	vmovdqu	ymm0, YMMWORD PTR _clipped$[ebp]
	vpsllw	ymm0, ymm0, 7
	vmovdqu	YMMWORD PTR _shifted$[ebp], ymm0

; 82   :   __m256i  cmpres       = _mm256_cmpeq_epi8   (shifted, cmpmask);

	vmovdqu	ymm0, YMMWORD PTR _shifted$[ebp]
	vpcmpeqb ymm0, ymm0, YMMWORD PTR _cmpmask$[ebp]
	vmovdqu	YMMWORD PTR _cmpres$[ebp], ymm0

; 83   :   uint32_t result       = _mm256_movemask_epi8(cmpres);

	vmovdqu	ymm0, YMMWORD PTR _cmpres$[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _result$[ebp], eax

; 84   : 
; 85   :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 86   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_pack_16x16b_to_16x2b ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
;	COMDAT _u32vec_cmpgt_epu2
_TEXT	SEGMENT
_res$ = -56						; size = 4
_lobit_tiebrk_hi$ = -44					; size = 4
_a_gt_b_sh$ = -32					; size = 4
_a_ne_b$ = -20						; size = 4
_a_gt_b$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_u32vec_cmpgt_epu2 PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __53CC1827_encode_coding_tree-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :   uint32_t a_gt_b          = _andn_u32(b, a);

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	and	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a_gt_b$[ebp], eax

; 60   :   uint32_t a_ne_b          = a ^ b;

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a_ne_b$[ebp], eax

; 61   :   uint32_t a_gt_b_sh       = a_gt_b << 1;

	mov	eax, DWORD PTR _a_gt_b$[ebp]
	shl	eax, 1
	mov	DWORD PTR _a_gt_b_sh$[ebp], eax

; 62   :   uint32_t lobit_tiebrk_hi = _andn_u32(a_ne_b, a_gt_b_sh);

	mov	eax, DWORD PTR _a_ne_b$[ebp]
	not	eax
	and	eax, DWORD PTR _a_gt_b_sh$[ebp]
	mov	DWORD PTR _lobit_tiebrk_hi$[ebp], eax

; 63   :   uint32_t res             = a_gt_b | lobit_tiebrk_hi;

	mov	eax, DWORD PTR _a_gt_b$[ebp]
	or	eax, DWORD PTR _lobit_tiebrk_hi$[ebp]
	mov	DWORD PTR _res$[ebp], eax

; 64   :   return res;

	mov	eax, DWORD PTR _res$[ebp]

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_u32vec_cmpgt_epu2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
;	COMDAT _kvz_strategy_register_encode_avx2
_TEXT	SEGMENT
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_encode_avx2 PROC			; COMDAT

; 609  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __53CC1827_encode_coding_tree-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 610  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 611  : 
; 612  : #if COMPILE_INTEL_AVX2
; 613  :   success &= kvz_strategyselector_register(opaque, "encode_coeff_nxn", "avx2", 40, &kvz_encode_coeff_nxn_avx2);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_encode_coeff_nxn_avx2
	push	40					; 00000028H
	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	push	OFFSET ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 614  : #endif
; 615  : 
; 616  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 617  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_encode_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\encode_coding_tree-avx2.c
;	COMDAT _kvz_encode_coeff_nxn_avx2
_TEXT	SEGMENT
tv546 = -13260						; size = 4
tv736 = -13256						; size = 4
tv623 = -13256						; size = 4
tv606 = -13256						; size = 4
tv578 = -13256						; size = 4
tv576 = -13256						; size = 4
tv551 = -13256						; size = 4
tv544 = -13256						; size = 4
tv343 = -13256						; size = 4
tv326 = -13256						; size = 4
tv297 = -13256						; size = 4
tv139 = -13256						; size = 4
$T1 = -13245						; size = 1
_level_diff$2 = -11700					; size = 2
_curr_abs_coeff$3 = -11688				; size = 2
_base_level$4 = -11676					; size = 2
_dont_encode_curr$5 = -11664				; size = 4
_shift$6 = -11652					; size = 4
_encode_decisions$7 = -11640				; size = 4
_base_levels$8 = -11628					; size = 4
_first_coeff2s$9 = -11616				; size = 4
_c1flag_number_mask$10 = -11604				; size = 4
_c1flag_number_mask_inv$11 = -11592			; size = 4
_twos_base4$12 = -11580					; size = 4
_ones_base4$13 = -11568					; size = 4
_abs_coeffs_base4$14 = -11556				; size = 4
_first_acgt1_bpos$15 = -11544				; size = 4
_acgt1_bits$16 = -11532					; size = 4
_abs_coeffs_gt1$17 = -11520				; size = 32
_ones$18 = -11456					; size = 32
_nnz$19 = -11396					; size = 4
_shiftamt$20 = -11384					; size = 4
_symbol$21 = -11369					; size = 1
_shift$22 = -11360					; size = 4
_symbol$23 = -11348					; size = 4
_shift$24 = -11336					; size = 4
_c1s_nextiter$25 = -11324				; size = 4
_n_nongt1_bits$26 = -11312				; size = 4
_c1s_pattern$27 = -11300				; size = 4
_coeffs_gt2_bits$28 = -11288				; size = 4
_coeffs_gt1_bits$29 = -11276				; size = 4
_coeffs_gt2$30 = -11264					; size = 32
_coeffs_gt1$31 = -11200					; size = 32
_abs_coeffs$32 = -11136					; size = 32
_idx$33 = -11080					; size = 4
_first_c2_flag_idx$34 = -11068				; size = 4
_num_c1_flag$35 = -11056				; size = 4
_base_ctx_mod$36 = -11044				; size = 4
_ctx_set$37 = -11032					; size = 4
_sign_hidden$38 = -11017				; size = 1
_curr_coeff_sign$39 = -11008				; size = 4
_curr_esc_flag$40 = -10996				; size = 4
_curr_sig$41 = -10984					; size = 4
_shift$42 = -10972					; size = 4
_id$43 = -10960						; size = 4
_coeff_sign_buf$44 = -10948				; size = 4
_sigs$45 = -10936					; size = 4
_esc_flags$46 = -10924					; size = 4
_ctx_sigs$47 = -10912					; size = 32
_encode_sig_coeff_flags_inv$48 = -10848			; size = 32
_pos_xs$49 = -10784					; size = 32
_pos_ys$50 = -10720					; size = 32
_blk_poses$51 = -10656					; size = 32
_blk_poses_tmp$52 = -10592				; size = 32
_blk_poses_lo$53 = -10528				; size = 32
_blk_poses_hi$54 = -10464				; size = 32
_abs_coeffs$55 = -10400					; size = 32
_masked_coeffs$56 = -10336				; size = 32
_coeffs_negative$57 = -10272				; size = 32
_is_zero$58 = -10208					; size = 32
_is$59 = -10144						; size = 32
_sigs_inv$60 = -10080					; size = 32
_coeffs$61 = -10016					; size = 32
_log2_block_size_128$62 = -9952				; size = 16
_coeff_pos_zero$63 = -9920				; size = 32
_pattern_sig_ctx$64 = -9860				; size = 4
_ctx_sig$65 = -9848					; size = 4
_sig_coeff_group$66 = -9836				; size = 4
_cg_pos_x$67 = -9824					; size = 4
_cg_pos_y$68 = -9812					; size = 4
_cg_blk_pos$69 = -9800					; size = 4
_sub_pos$70 = -9788					; size = 4
_first_nz_pos_in_cg$ = -9776				; size = 4
_last_nz_pos_in_cg$ = -9764				; size = 4
_num_non_zero$ = -9752					; size = 4
_coeff_signs$ = -9740					; size = 4
_ctx_sig_buf$ = -9728					; size = 32
_pos_xs_buf$ = -9664					; size = 32
_pos_ys_buf$ = -9600					; size = 32
_abs_coeff_buf_sb$ = -9536				; size = 32
_abs_coeff$ = -9472					; size = 32
_nz_bytes$71 = -9388					; size = 4
_cur_coeffs_zeros$72 = -9376				; size = 32
_baseaddr$73 = -9316					; size = 4
_subpos$74 = -9304					; size = 4
_i$75 = -9292						; size = 4
_coeffs_r$76 = -9280					; size = 32
_scan_pos_last$ = -9240					; size = 4
_pos_last$ = -9228					; size = 4
_coeff_reord$ = -9216					; size = 8192
_nz_coeffs_2b$77 = -1004				; size = 4
_coeffs_zero$78 = -992					; size = 32
_cur_coeffs$79 = -928					; size = 32
_coeffs_lower$80 = -880					; size = 16
_coeffs_upper$81 = -848					; size = 16
_coeffs_d_lower$82 = -816				; size = 16
_coeffs_d_upper$83 = -784				; size = 16
_idx$84 = -752						; size = 4
_cg_pos_x$85 = -740					; size = 4
_cg_pos_y$86 = -728					; size = 4
_cg_pos$87 = -716					; size = 4
_cg_y$88 = -704						; size = 4
_cg_x$89 = -692						; size = 4
_n_xbits$90 = -680					; size = 4
_cg_id$91 = -668					; size = 4
_i$92 = -656						; size = 4
_scan_cg_last$ = -644					; size = 4
_baseCtx$ = -632					; size = 4
_base_coeff_group_ctx$ = -620				; size = 4
_twos$ = -608						; size = 32
_ones$ = -544						; size = 32
_zero$ = -480						; size = 32
_num_blocks$ = -436					; size = 4
_scan_cg$ = -424					; size = 4
_scan$ = -412						; size = 4
_log2_block_size$ = -400				; size = 4
_num_blk_side$ = -388					; size = 4
_ctx_sig$ = -376					; size = 4
_go_rice_param$ = -364					; size = 4
_scan_pos_sig$ = -352					; size = 4
_be_valid$ = -337					; size = 1
_sig_coeffgroup_nzs$ = -328				; size = 256
_i$ = -60						; size = 4
_last_coeff_y$ = -45					; size = 1
_last_coeff_x$ = -33					; size = 1
_c1$ = -24						; size = 4
_encoder$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_coeff$ = 16						; size = 4
_width$ = 20						; size = 1
_type$ = 24						; size = 1
_scan_mode$ = 28					; size = 1
_tr_skip$ = 32						; size = 1
_kvz_encode_coeff_nxn_avx2 PROC				; COMDAT

; 256  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -64				; ffffffc0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 13304				; 000033f8H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-13304]
	mov	ecx, 3326				; 00000cfeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __53CC1827_encode_coding_tree-avx2@c
	call	@__CheckForDebuggerJustMyCode@4

; 257  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 258  :   int c1 = 1;

	mov	DWORD PTR _c1$[ebp], 1

; 259  :   uint8_t last_coeff_x = 0;

	mov	BYTE PTR _last_coeff_x$[ebp], 0

; 260  :   uint8_t last_coeff_y = 0;

	mov	BYTE PTR _last_coeff_y$[ebp], 0

; 261  :   int32_t i;
; 262  :   uint32_t sig_coeffgroup_nzs[8 * 8] = { 0 };

	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _sig_coeffgroup_nzs$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 263  : 
; 264  :   int8_t be_valid = encoder->cfg.signhide_enable;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	cl, BYTE PTR [eax+52]
	mov	BYTE PTR _be_valid$[ebp], cl

; 265  :   int32_t scan_pos_sig;
; 266  :   uint32_t go_rice_param = 0;

	mov	DWORD PTR _go_rice_param$[ebp], 0

; 267  :   uint32_t ctx_sig;
; 268  : 
; 269  :   // CONSTANTS
; 270  :   const uint32_t num_blk_side    = width >> TR_MIN_LOG2_SIZE;

	movzx	eax, BYTE PTR _width$[ebx]
	sar	eax, 2
	mov	DWORD PTR _num_blk_side$[ebp], eax

; 271  :   const uint32_t log2_block_size = kvz_g_convert_to_bit[width] + 2;

	movzx	eax, BYTE PTR _width$[ebx]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_block_size$[ebp], ecx

; 272  :   const uint32_t *scan           =

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _log2_block_size$[ebp]
	mov	eax, DWORD PTR _kvz_g_sig_last_scan[ecx+edx*4-4]
	mov	DWORD PTR _scan$[ebp], eax

; 273  :     kvz_g_sig_last_scan[scan_mode][log2_block_size - 1];
; 274  :   const uint32_t *scan_cg = g_sig_last_scan_cg[log2_block_size - 2][scan_mode];

	mov	eax, DWORD PTR _log2_block_size$[ebp]
	sub	eax, 2
	imul	ecx, eax, 12
	movsx	edx, BYTE PTR _scan_mode$[ebx]
	mov	eax, DWORD PTR _g_sig_last_scan_cg[ecx+edx*4]
	mov	DWORD PTR _scan_cg$[ebp], eax

; 275  :   const uint32_t num_blocks = num_blk_side * num_blk_side;

	mov	eax, DWORD PTR _num_blk_side$[ebp]
	imul	eax, DWORD PTR _num_blk_side$[ebp]
	mov	DWORD PTR _num_blocks$[ebp], eax

; 276  : 
; 277  :   const __m256i zero = _mm256_set1_epi8(0);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0000000000000000000000000000000000000000000000000000000000000000
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 278  :   const __m256i ones = _mm256_set1_epi16(1);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
	vmovdqu	YMMWORD PTR _ones$[ebp], ymm0

; 279  :   const __m256i twos = _mm256_set1_epi16(2);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0002000200020002000200020002000200020002000200020002000200020002
	vmovdqu	YMMWORD PTR _twos$[ebp], ymm0

; 280  : 
; 281  :   // Init base contexts according to block type
; 282  :   cabac_ctx_t *base_coeff_group_ctx = &(cabac->ctx.cu_sig_coeff_group_model[type]);

	movzx	eax, BYTE PTR _type$[ebx]
	mov	ecx, DWORD PTR _cabac$[ebx]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	DWORD PTR _base_coeff_group_ctx$[ebp], edx

; 283  :   cabac_ctx_t *baseCtx           = (type == 0) ? &(cabac->ctx.cu_sig_model_luma[0]) :

	movzx	eax, BYTE PTR _type$[ebx]
	test	eax, eax
	jne	SHORT $LN42@kvz_encode
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cabac$[ebx]
	lea	ecx, DWORD PTR [eax+edx+68]
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN43@kvz_encode
$LN42@kvz_encode:
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebx]
	lea	edx, DWORD PTR [ecx+eax+95]
	mov	DWORD PTR tv139[ebp], edx
$LN43@kvz_encode:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR _baseCtx$[ebp], eax

; 284  :                                  &(cabac->ctx.cu_sig_model_chroma[0]);
; 285  : 
; 286  :   // Scan all coeff groups to find out which of them have coeffs.
; 287  :   // Populate sig_coeffgroup_nzs with that info.
; 288  : 
; 289  :   // NOTE: Modified the functionality a bit, sig_coeffgroup_flag used to be
; 290  :   // 1 if true and 0 if false, now it's "undefined but nonzero" if true and
; 291  :   // 0 if false (not actually undefined, it's a bitmask representing the
; 292  :   // significant coefficients' position in the group which in itself could
; 293  :   // be useful information)
; 294  :   int32_t scan_cg_last = -1;

	mov	DWORD PTR _scan_cg_last$[ebp], -1

; 295  : 
; 296  :   for (int32_t i = 0; i < num_blocks; i++) {

	mov	DWORD PTR _i$92[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _i$92[ebp]
	add	eax, 1
	mov	DWORD PTR _i$92[ebp], eax
$LN4@kvz_encode:
	mov	eax, DWORD PTR _i$92[ebp]
	cmp	eax, DWORD PTR _num_blocks$[ebp]
	jae	$LN3@kvz_encode

; 297  :     const uint32_t cg_id = scan_cg[i];

	mov	eax, DWORD PTR _i$92[ebp]
	mov	ecx, DWORD PTR _scan_cg$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cg_id$91[ebp], edx

; 298  :     const uint32_t n_xbits = log2_block_size - 2; // How many lowest bits of scan_cg represent X coord

	mov	eax, DWORD PTR _log2_block_size$[ebp]
	sub	eax, 2
	mov	DWORD PTR _n_xbits$90[ebp], eax

; 299  :     const uint32_t cg_x = cg_id & ((1 << n_xbits) - 1);

	mov	eax, 1
	mov	ecx, DWORD PTR _n_xbits$90[ebp]
	shlx	edx, eax, ecx
	sub	edx, 1
	and	edx, DWORD PTR _cg_id$91[ebp]
	mov	DWORD PTR _cg_x$89[ebp], edx

; 300  :     const uint32_t cg_y = cg_id >> n_xbits;

	mov	eax, DWORD PTR _n_xbits$90[ebp]
	shrx	ecx, DWORD PTR _cg_id$91[ebp], eax
	mov	DWORD PTR _cg_y$88[ebp], ecx

; 301  : 
; 302  :     const uint32_t cg_pos = cg_y * width * 4 + cg_x * 4;

	movzx	eax, BYTE PTR _width$[ebx]
	imul	eax, DWORD PTR _cg_y$88[ebp]
	mov	ecx, DWORD PTR _cg_x$89[ebp]
	shl	ecx, 2
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cg_pos$87[ebp], edx

; 303  :     const uint32_t cg_pos_y = (cg_pos >> log2_block_size) >> TR_MIN_LOG2_SIZE;

	mov	eax, DWORD PTR _log2_block_size$[ebp]
	shrx	ecx, DWORD PTR _cg_pos$87[ebp], eax
	shr	ecx, 2
	mov	DWORD PTR _cg_pos_y$86[ebp], ecx

; 304  :     const uint32_t cg_pos_x = (cg_pos & (width - 1)) >> TR_MIN_LOG2_SIZE;

	movzx	eax, BYTE PTR _width$[ebx]
	sub	eax, 1
	and	eax, DWORD PTR _cg_pos$87[ebp]
	shr	eax, 2
	mov	DWORD PTR _cg_pos_x$85[ebp], eax

; 305  :     const uint32_t idx = cg_pos_x + cg_pos_y * num_blk_side;

	mov	eax, DWORD PTR _cg_pos_y$86[ebp]
	imul	eax, DWORD PTR _num_blk_side$[ebp]
	add	eax, DWORD PTR _cg_pos_x$85[ebp]
	mov	DWORD PTR _idx$84[ebp], eax

; 306  : 
; 307  :     __m128d coeffs_d_upper = _mm_setzero_pd();

	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR _coeffs_d_upper$83[ebp], xmm0

; 308  :     __m128d coeffs_d_lower = _mm_setzero_pd();

	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR _coeffs_d_lower$82[ebp], xmm0

; 309  :     __m128i coeffs_upper;
; 310  :     __m128i coeffs_lower;
; 311  :     __m256i cur_coeffs;
; 312  : 
; 313  :     coeffs_d_upper = _mm_loadl_pd(coeffs_d_upper, (double *)(coeff + cg_pos + 0 * width));

	mov	eax, DWORD PTR _cg_pos$87[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	lea	edx, DWORD PTR [ecx+eax*2]
	movzx	eax, BYTE PTR _width$[ebx]
	imul	ecx, eax, 0
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$83[ebp]
	vmovlpd	xmm0, xmm0, QWORD PTR [edx+ecx*2]
	vmovaps	XMMWORD PTR _coeffs_d_upper$83[ebp], xmm0

; 314  :     coeffs_d_upper = _mm_loadh_pd(coeffs_d_upper, (double *)(coeff + cg_pos + 1 * width));

	mov	eax, DWORD PTR _cg_pos$87[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	lea	edx, DWORD PTR [ecx+eax*2]
	movzx	eax, BYTE PTR _width$[ebx]
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$83[ebp]
	vmovhpd	xmm0, xmm0, QWORD PTR [edx+eax*2]
	vmovaps	XMMWORD PTR _coeffs_d_upper$83[ebp], xmm0

; 315  :     coeffs_d_lower = _mm_loadl_pd(coeffs_d_lower, (double *)(coeff + cg_pos + 2 * width));

	mov	eax, DWORD PTR _cg_pos$87[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	lea	edx, DWORD PTR [ecx+eax*2]
	movzx	eax, BYTE PTR _width$[ebx]
	shl	eax, 1
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$82[ebp]
	vmovlpd	xmm0, xmm0, QWORD PTR [edx+eax*2]
	vmovaps	XMMWORD PTR _coeffs_d_lower$82[ebp], xmm0

; 316  :     coeffs_d_lower = _mm_loadh_pd(coeffs_d_lower, (double *)(coeff + cg_pos + 3 * width));

	mov	eax, DWORD PTR _cg_pos$87[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	lea	edx, DWORD PTR [ecx+eax*2]
	movzx	eax, BYTE PTR _width$[ebx]
	imul	ecx, eax, 3
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$82[ebp]
	vmovhpd	xmm0, xmm0, QWORD PTR [edx+ecx*2]
	vmovaps	XMMWORD PTR _coeffs_d_lower$82[ebp], xmm0

; 317  : 
; 318  :     coeffs_upper = _mm_castpd_si128(coeffs_d_upper);

	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$83[ebp]
	vmovdqa	XMMWORD PTR _coeffs_upper$81[ebp], xmm0

; 319  :     coeffs_lower = _mm_castpd_si128(coeffs_d_lower);

	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$82[ebp]
	vmovdqa	XMMWORD PTR _coeffs_lower$80[ebp], xmm0

; 320  : 
; 321  :     cur_coeffs = _mm256_insertf128_si256(_mm256_castsi128_si256(coeffs_upper),

	vmovdqu	xmm0, XMMWORD PTR _coeffs_upper$81[ebp]
	vinsertf128 ymm0, ymm0, XMMWORD PTR _coeffs_lower$80[ebp], 1
	vmovdqu	YMMWORD PTR _cur_coeffs$79[ebp], ymm0

; 322  :                                          coeffs_lower,
; 323  :                                          1);
; 324  : 
; 325  :     __m256i coeffs_zero = _mm256_cmpeq_epi16(cur_coeffs, zero);

	vmovdqu	ymm0, YMMWORD PTR _cur_coeffs$79[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _coeffs_zero$78[ebp], ymm0

; 326  : 
; 327  :     uint32_t nz_coeffs_2b = ~((uint32_t)_mm256_movemask_epi8(coeffs_zero));

	vmovdqu	ymm0, YMMWORD PTR _coeffs_zero$78[ebp]
	vpmovmskb eax, ymm0
	not	eax
	mov	DWORD PTR _nz_coeffs_2b$77[ebp], eax

; 328  :     sig_coeffgroup_nzs[idx] = nz_coeffs_2b;

	mov	eax, DWORD PTR _idx$84[ebp]
	mov	ecx, DWORD PTR _nz_coeffs_2b$77[ebp]
	mov	DWORD PTR _sig_coeffgroup_nzs$[ebp+eax*4], ecx

; 329  : 
; 330  :     if (nz_coeffs_2b)

	cmp	DWORD PTR _nz_coeffs_2b$77[ebp], 0
	je	SHORT $LN20@kvz_encode

; 331  :       scan_cg_last = i;

	mov	eax, DWORD PTR _i$92[ebp]
	mov	DWORD PTR _scan_cg_last$[ebp], eax
$LN20@kvz_encode:

; 332  :   }

	jmp	$LN2@kvz_encode
$LN3@kvz_encode:

; 333  :   // Rest of the code assumes at least one non-zero coeff.
; 334  :   assert(scan_cg_last >= 0);

	cmp	DWORD PTR _scan_cg_last$[ebp], 0
	jge	SHORT $LN44@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encode_coeff_nxn_avx2@@9@9
	add	eax, 78					; 0000004eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1KM@HFNGIBBC@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@JKIDKDDG@?$AAs?$AAc?$AAa?$AAn?$AA_?$AAc?$AAg?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?5?$AA?$DO?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN44@kvz_encode:

; 335  : 
; 336  :   ALIGNED(64) int16_t coeff_reord[LCU_WIDTH * LCU_WIDTH];
; 337  :   uint32_t pos_last, scan_pos_last;
; 338  : 
; 339  :   {

	mov	BYTE PTR $T1[ebp], 0

; 340  :     __m256i coeffs_r;
; 341  :     for (int32_t i = 0; i <= scan_cg_last; i++) {

	mov	DWORD PTR _i$75[ebp], 0
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:
	mov	eax, DWORD PTR _i$75[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75[ebp], eax
$LN7@kvz_encode:
	mov	eax, DWORD PTR _i$75[ebp]
	cmp	eax, DWORD PTR _scan_cg_last$[ebp]
	jg	SHORT $LN6@kvz_encode

; 342  :       int32_t subpos = i * 16;

	mov	eax, DWORD PTR _i$75[ebp]
	shl	eax, 4
	mov	DWORD PTR _subpos$74[ebp], eax

; 343  :       scanord_read_vector(&coeff, scan, scan_mode, subpos, width, &coeffs_r, 1);

	push	1
	mov	BYTE PTR $T1[ebp], 1
	lea	eax, DWORD PTR _coeffs_r$76[ebp]
	push	eax
	movzx	ecx, BYTE PTR _width$[ebx]
	push	ecx
	mov	edx, DWORD PTR _subpos$74[ebp]
	push	edx
	movzx	eax, BYTE PTR _scan_mode$[ebx]
	push	eax
	mov	ecx, DWORD PTR _scan$[ebp]
	push	ecx
	lea	edx, DWORD PTR _coeff$[ebx]
	push	edx
	call	_scanord_read_vector
	add	esp, 28					; 0000001cH

; 344  :       _mm256_store_si256((__m256i *)(coeff_reord + subpos), coeffs_r);

	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN67@kvz_encode
	push	OFFSET $LN68@kvz_encode
	call	__RTC_UninitUse
	add	esp, 4
$LN67@kvz_encode:
	vmovdqu	ymm0, YMMWORD PTR _coeffs_r$76[ebp]
	mov	eax, DWORD PTR _subpos$74[ebp]
	vmovdqu	YMMWORD PTR _coeff_reord$[ebp+eax*2], ymm0

; 345  :     }

	jmp	$LN5@kvz_encode
$LN6@kvz_encode:

; 346  : 
; 347  :     // Find the last coeff by going backwards in scan order. With cmpeq_epi16
; 348  :     // and movemask, we can generate a dword with 16 2-bit masks that are 11
; 349  :     // for zero words in the coeff vector, and 00 for nonzero words. By
; 350  :     // inverting the bits and counting leading zeros, we can determine the
; 351  :     // number of zero bytes in the vector counting from high to low memory
; 352  :     // addresses; subtract that from 31 and divide by 2 to get the offset of
; 353  :     // the last nonzero word.
; 354  :     uint32_t baseaddr = scan_cg_last * 16;

	mov	eax, DWORD PTR _scan_cg_last$[ebp]
	shl	eax, 4
	mov	DWORD PTR _baseaddr$73[ebp], eax

; 355  :     __m256i cur_coeffs_zeros = _mm256_cmpeq_epi16(coeffs_r, zero);

	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN69@kvz_encode
	push	OFFSET $LN68@kvz_encode
	call	__RTC_UninitUse
	add	esp, 4
$LN69@kvz_encode:
	vmovdqu	ymm0, YMMWORD PTR _coeffs_r$76[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _cur_coeffs_zeros$72[ebp], ymm0

; 356  :     uint32_t nz_bytes = ~(_mm256_movemask_epi8(cur_coeffs_zeros));

	vmovdqu	ymm0, YMMWORD PTR _cur_coeffs_zeros$72[ebp]
	vpmovmskb eax, ymm0
	not	eax
	mov	DWORD PTR _nz_bytes$71[ebp], eax

; 357  :     scan_pos_last = baseaddr + ((31 - _lzcnt_u32(nz_bytes)) >> 1);

	lzcnt	eax, DWORD PTR _nz_bytes$71[ebp]
	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
	shr	ecx, 1
	add	ecx, DWORD PTR _baseaddr$73[ebp]
	mov	DWORD PTR _scan_pos_last$[ebp], ecx

; 358  :     pos_last = scan[scan_pos_last];

	mov	eax, DWORD PTR _scan_pos_last$[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pos_last$[ebp], edx

; 359  :   }
; 360  : 
; 361  :   // transform skip flag
; 362  :   if(width == 4 && encoder->cfg.trskip_enable) {

	movzx	eax, BYTE PTR _width$[ebx]
	cmp	eax, 4
	jne	SHORT $LN21@kvz_encode
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN21@kvz_encode

; 363  :     cabac->cur_ctx = (type == 0) ? &(cabac->ctx.transform_skip_model_luma) : &(cabac->ctx.transform_skip_model_chroma);

	movzx	eax, BYTE PTR _type$[ebx]
	test	eax, eax
	jne	SHORT $LN45@kvz_encode
	mov	ecx, DWORD PTR _cabac$[ebx]
	add	ecx, 214				; 000000d6H
	mov	DWORD PTR tv297[ebp], ecx
	jmp	SHORT $LN46@kvz_encode
$LN45@kvz_encode:
	mov	edx, DWORD PTR _cabac$[ebx]
	add	edx, 215				; 000000d7H
	mov	DWORD PTR tv297[ebp], edx
$LN46@kvz_encode:
	mov	eax, DWORD PTR _cabac$[ebx]
	mov	ecx, DWORD PTR tv297[ebp]
	mov	DWORD PTR [eax], ecx

; 364  :     CABAC_BIN(cabac, tr_skip, "transform_skip_flag");

	movsx	eax, BYTE PTR _tr_skip$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebx]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN21@kvz_encode:

; 365  :   }
; 366  : 
; 367  :   last_coeff_x = pos_last & (width - 1);

	movzx	eax, BYTE PTR _width$[ebx]
	sub	eax, 1
	and	eax, DWORD PTR _pos_last$[ebp]
	mov	BYTE PTR _last_coeff_x$[ebp], al

; 368  :   last_coeff_y = (uint8_t)(pos_last >> log2_block_size);

	mov	eax, DWORD PTR _log2_block_size$[ebp]
	shrx	ecx, DWORD PTR _pos_last$[ebp], eax
	mov	BYTE PTR _last_coeff_y$[ebp], cl

; 369  : 
; 370  :   // Code last_coeff_x and last_coeff_y
; 371  :   kvz_encode_last_significant_xy(cabac,

	movzx	eax, BYTE PTR _scan_mode$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _type$[ebx]
	push	ecx
	movzx	edx, BYTE PTR _width$[ebx]
	push	edx
	movzx	eax, BYTE PTR _width$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _last_coeff_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _last_coeff_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebx]
	push	eax
	call	_kvz_encode_last_significant_xy
	add	esp, 28					; 0000001cH

; 372  :                                  last_coeff_x,
; 373  :                                  last_coeff_y,
; 374  :                                  width,
; 375  :                                  width,
; 376  :                                  type,
; 377  :                                  scan_mode);
; 378  : 
; 379  :   scan_pos_sig = scan_pos_last;

	mov	eax, DWORD PTR _scan_pos_last$[ebp]
	mov	DWORD PTR _scan_pos_sig$[ebp], eax

; 380  : 
; 381  :   ALIGNED(64) uint16_t abs_coeff[16];
; 382  :   ALIGNED(32) uint16_t abs_coeff_buf_sb[16];
; 383  :   ALIGNED(32) int16_t pos_ys_buf[16];
; 384  :   ALIGNED(32) int16_t pos_xs_buf[16];
; 385  :   ALIGNED(32) int16_t ctx_sig_buf[16];
; 386  : 
; 387  :   abs_coeff[0] = abs(coeff[pos_last]);

	mov	eax, DWORD PTR _pos_last$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	movsx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_abs
	add	esp, 4
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	WORD PTR _abs_coeff$[ebp+edx], ax

; 388  :   uint32_t coeff_signs  = (coeff[pos_last] < 0);

	mov	eax, DWORD PTR _pos_last$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebx]
	movsx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jge	SHORT $LN47@kvz_encode
	mov	DWORD PTR tv326[ebp], 1
	jmp	SHORT $LN48@kvz_encode
$LN47@kvz_encode:
	mov	DWORD PTR tv326[ebp], 0
$LN48@kvz_encode:
	mov	eax, DWORD PTR tv326[ebp]
	mov	DWORD PTR _coeff_signs$[ebp], eax

; 389  :   int32_t num_non_zero = 1;

	mov	DWORD PTR _num_non_zero$[ebp], 1

; 390  :   int32_t last_nz_pos_in_cg  = scan_pos_sig;

	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	mov	DWORD PTR _last_nz_pos_in_cg$[ebp], eax

; 391  :   int32_t first_nz_pos_in_cg = scan_pos_sig;

	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	mov	DWORD PTR _first_nz_pos_in_cg$[ebp], eax

; 392  :   scan_pos_sig--;

	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	sub	eax, 1
	mov	DWORD PTR _scan_pos_sig$[ebp], eax

; 393  : 
; 394  :   // significant_coeff_flag
; 395  :   for (i = scan_cg_last; i >= 0; i--) {

	mov	eax, DWORD PTR _scan_cg_last$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN10@kvz_encode
$LN8@kvz_encode:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@kvz_encode:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN1@kvz_encode

; 396  :     int32_t sub_pos        = i << 4; // LOG2_SCAN_SET_SIZE;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	DWORD PTR _sub_pos$70[ebp], eax

; 397  :     int32_t cg_blk_pos     = scan_cg[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scan_cg$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cg_blk_pos$69[ebp], edx

; 398  :     int32_t cg_pos_y       = cg_blk_pos / num_blk_side;

	mov	eax, DWORD PTR _cg_blk_pos$69[ebp]
	xor	edx, edx
	div	DWORD PTR _num_blk_side$[ebp]
	mov	DWORD PTR _cg_pos_y$68[ebp], eax

; 399  :     int32_t cg_pos_x       = cg_blk_pos - (cg_pos_y * num_blk_side);

	mov	eax, DWORD PTR _cg_pos_y$68[ebp]
	imul	eax, DWORD PTR _num_blk_side$[ebp]
	mov	ecx, DWORD PTR _cg_blk_pos$69[ebp]
	sub	ecx, eax
	mov	DWORD PTR _cg_pos_x$67[ebp], ecx

; 400  : 
; 401  :     go_rice_param = 0;

	mov	DWORD PTR _go_rice_param$[ebp], 0

; 402  : 
; 403  :     if (i == scan_cg_last || i == 0) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _scan_cg_last$[ebp]
	je	SHORT $LN24@kvz_encode
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN22@kvz_encode
$LN24@kvz_encode:

; 404  :       sig_coeffgroup_nzs[cg_blk_pos] = 1;

	mov	eax, DWORD PTR _cg_blk_pos$69[ebp]
	mov	DWORD PTR _sig_coeffgroup_nzs$[ebp+eax*4], 1

; 405  :     } else {

	jmp	SHORT $LN23@kvz_encode
$LN22@kvz_encode:

; 406  :       uint32_t sig_coeff_group   = (sig_coeffgroup_nzs[cg_blk_pos] != 0);

	mov	eax, DWORD PTR _cg_blk_pos$69[ebp]
	cmp	DWORD PTR _sig_coeffgroup_nzs$[ebp+eax*4], 0
	je	SHORT $LN49@kvz_encode
	mov	DWORD PTR tv343[ebp], 1
	jmp	SHORT $LN50@kvz_encode
$LN49@kvz_encode:
	mov	DWORD PTR tv343[ebp], 0
$LN50@kvz_encode:
	mov	ecx, DWORD PTR tv343[ebp]
	mov	DWORD PTR _sig_coeff_group$66[ebp], ecx

; 407  :       uint32_t ctx_sig  = kvz_context_get_sig_coeff_group(sig_coeffgroup_nzs, cg_pos_x,

	movzx	eax, BYTE PTR _width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cg_pos_y$68[ebp]
	push	ecx
	mov	edx, DWORD PTR _cg_pos_x$67[ebp]
	push	edx
	lea	eax, DWORD PTR _sig_coeffgroup_nzs$[ebp]
	push	eax
	call	_kvz_context_get_sig_coeff_group
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ctx_sig$65[ebp], eax

; 408  :                                                       cg_pos_y, width);
; 409  :       cabac->cur_ctx = &base_coeff_group_ctx[ctx_sig];

	mov	eax, DWORD PTR _base_coeff_group_ctx$[ebp]
	add	eax, DWORD PTR _ctx_sig$65[ebp]
	mov	ecx, DWORD PTR _cabac$[ebx]
	mov	DWORD PTR [ecx], eax

; 410  :       CABAC_BIN(cabac, sig_coeff_group, "coded_sub_block_flag");

	mov	eax, DWORD PTR _sig_coeff_group$66[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebx]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN23@kvz_encode:

; 411  :     }
; 412  : 
; 413  :     if (sig_coeffgroup_nzs[cg_blk_pos]) {

	mov	eax, DWORD PTR _cg_blk_pos$69[ebp]
	cmp	DWORD PTR _sig_coeffgroup_nzs$[ebp+eax*4], 0
	je	$LN25@kvz_encode

; 414  :       int32_t pattern_sig_ctx = kvz_context_calc_pattern_sig_ctx(sig_coeffgroup_nzs,

	movzx	eax, BYTE PTR _width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cg_pos_y$68[ebp]
	push	ecx
	mov	edx, DWORD PTR _cg_pos_x$67[ebp]
	push	edx
	lea	eax, DWORD PTR _sig_coeffgroup_nzs$[ebp]
	push	eax
	call	_kvz_context_calc_pattern_sig_ctx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pattern_sig_ctx$64[ebp], eax

; 415  :                                                              cg_pos_x, cg_pos_y, width);
; 416  : 
; 417  :       // A mask with the first 16-bit word unmasked (bits set ie. 0xffff)
; 418  :       const __m256i coeff_pos_zero = _mm256_castsi128_si256(_mm_cvtsi32_si128(0xffff));

	mov	eax, 65535				; 0000ffffH
	vmovd	xmm0, eax
	vmovdqu	YMMWORD PTR _coeff_pos_zero$63[ebp], ymm0

; 419  : 
; 420  :       const __m128i log2_block_size_128 = _mm_cvtsi32_si128(log2_block_size);

	vmovd	xmm0, DWORD PTR _log2_block_size$[ebp]
	vmovdqa	XMMWORD PTR _log2_block_size_128$62[ebp], xmm0

; 421  : 
; 422  :       __m256i coeffs = _mm256_load_si256((__m256i *)(coeff_reord + sub_pos));

	mov	eax, DWORD PTR _sub_pos$70[ebp]
	vmovdqu	ymm0, YMMWORD PTR _coeff_reord$[ebp+eax*2]
	vmovdqu	YMMWORD PTR _coeffs$61[ebp], ymm0

; 423  :       __m256i sigs_inv = _mm256_cmpeq_epi16(coeffs, zero);

	vmovdqu	ymm0, YMMWORD PTR _coeffs$61[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _sigs_inv$60[ebp], ymm0

; 424  :       __m256i is = _mm256_set1_epi16(i);

	movsx	eax, WORD PTR _i$[ebp]
	vmovd	xmm0, eax
	vpbroadcastw ymm0, xmm0
	vmovdqu	YMMWORD PTR _is$59[ebp], ymm0

; 425  :       __m256i is_zero = _mm256_cmpeq_epi16(is, zero);

	vmovdqu	ymm0, YMMWORD PTR _is$59[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _is_zero$58[ebp], ymm0

; 426  :       __m256i coeffs_negative = _mm256_cmpgt_epi16(zero, coeffs);

	vmovdqu	ymm0, YMMWORD PTR _zero$[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _coeffs$61[ebp]
	vmovdqu	YMMWORD PTR _coeffs_negative$57[ebp], ymm0

; 427  : 
; 428  :       __m256i masked_coeffs = _mm256_andnot_si256(sigs_inv, coeffs);

	vmovdqu	ymm0, YMMWORD PTR _sigs_inv$60[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _coeffs$61[ebp]
	vmovdqu	YMMWORD PTR _masked_coeffs$56[ebp], ymm0

; 429  :       __m256i abs_coeffs = _mm256_abs_epi16(masked_coeffs);

	vpabsw	ymm0, YMMWORD PTR _masked_coeffs$56[ebp]
	vmovdqu	YMMWORD PTR _abs_coeffs$55[ebp], ymm0

; 430  : 
; 431  :       // TODO: obtain 16-bit block positions, maybe? :P
; 432  :       __m256i blk_poses_hi = _mm256_loadu_si256((__m256i *)(scan + sub_pos + 8));

	mov	eax, DWORD PTR _sub_pos$70[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	vmovdqu	ymm0, YMMWORD PTR [ecx+eax*4+32]
	vmovdqu	YMMWORD PTR _blk_poses_hi$54[ebp], ymm0

; 433  :       __m256i blk_poses_lo = _mm256_loadu_si256((__m256i *)(scan + sub_pos + 0));

	mov	eax, DWORD PTR _sub_pos$70[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	vmovdqu	ymm0, YMMWORD PTR [ecx+eax*4]
	vmovdqu	YMMWORD PTR _blk_poses_lo$53[ebp], ymm0

; 434  :       __m256i blk_poses_tmp = _mm256_packs_epi32(blk_poses_lo, blk_poses_hi);

	vmovdqu	ymm0, YMMWORD PTR _blk_poses_lo$53[ebp]
	vpackssdw ymm0, ymm0, YMMWORD PTR _blk_poses_hi$54[ebp]
	vmovdqu	YMMWORD PTR _blk_poses_tmp$52[ebp], ymm0

; 435  :       __m256i blk_poses = _mm256_permute4x64_epi64(blk_poses_tmp, _MM_SHUFFLE(3, 1, 2, 0));

	vpermq	ymm0, YMMWORD PTR _blk_poses_tmp$52[ebp], 216 ; 000000d8H
	vmovdqu	YMMWORD PTR _blk_poses$51[ebp], ymm0

; 436  : 
; 437  :       __m256i pos_ys = _mm256_srl_epi16(blk_poses, log2_block_size_128);

	vmovdqu	ymm0, YMMWORD PTR _blk_poses$51[ebp]
	vpsrlw	ymm0, ymm0, XMMWORD PTR _log2_block_size_128$62[ebp]
	vmovdqu	YMMWORD PTR _pos_ys$50[ebp], ymm0

; 438  :       __m256i pos_xs = _mm256_sub_epi16(blk_poses, _mm256_sll_epi16(pos_ys, log2_block_size_128));

	vmovdqu	ymm0, YMMWORD PTR _pos_ys$50[ebp]
	vpsllw	ymm0, ymm0, XMMWORD PTR _log2_block_size_128$62[ebp]
	vmovdqu	ymm1, YMMWORD PTR _blk_poses$51[ebp]
	vpsubw	ymm0, ymm1, ymm0
	vmovdqu	YMMWORD PTR _pos_xs$49[ebp], ymm0

; 439  : 
; 440  :       _mm256_store_si256((__m256i *)pos_ys_buf, pos_ys);

	vmovdqu	ymm0, YMMWORD PTR _pos_ys$50[ebp]
	vmovdqa	YMMWORD PTR _pos_ys_buf$[ebp], ymm0

; 441  :       _mm256_store_si256((__m256i *)pos_xs_buf, pos_xs);

	vmovdqu	ymm0, YMMWORD PTR _pos_xs$49[ebp]
	vmovdqa	YMMWORD PTR _pos_xs_buf$[ebp], ymm0

; 442  : 
; 443  :       __m256i encode_sig_coeff_flags_inv = _mm256_andnot_si256(is_zero, coeff_pos_zero);

	vmovdqu	ymm0, YMMWORD PTR _is_zero$58[ebp]
	vpandn	ymm0, ymm0, YMMWORD PTR _coeff_pos_zero$63[ebp]
	vmovdqu	YMMWORD PTR _encode_sig_coeff_flags_inv$48[ebp], ymm0

; 444  : 
; 445  :       get_first_last_nz_int16(masked_coeffs, &first_nz_pos_in_cg, &last_nz_pos_in_cg);

	lea	eax, DWORD PTR _last_nz_pos_in_cg$[ebp]
	push	eax
	lea	ecx, DWORD PTR _first_nz_pos_in_cg$[ebp]
	push	ecx
	vmovdqu	ymm0, YMMWORD PTR _masked_coeffs$56[ebp]
	call	_get_first_last_nz_int16
	add	esp, 8

; 446  :       _mm256_store_si256((__m256i *)abs_coeff_buf_sb, abs_coeffs);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs$55[ebp]
	vmovdqa	YMMWORD PTR _abs_coeff_buf_sb$[ebp], ymm0

; 447  : 
; 448  :       __m256i ctx_sigs = kvz_context_get_sig_ctx_inc_16x16b(pattern_sig_ctx, scan_mode, pos_xs, pos_ys,

	movzx	eax, BYTE PTR _type$[ebx]
	push	eax
	mov	ecx, DWORD PTR _log2_block_size$[ebp]
	push	ecx
	vmovdqu	ymm1, YMMWORD PTR _pos_ys$50[ebp]
	vmovdqu	ymm0, YMMWORD PTR _pos_xs$49[ebp]
	movsx	edx, BYTE PTR _scan_mode$[ebx]
	push	edx
	mov	eax, DWORD PTR _pattern_sig_ctx$64[ebp]
	push	eax
	call	_kvz_context_get_sig_ctx_inc_16x16b
	add	esp, 16					; 00000010H
	vmovdqu	YMMWORD PTR _ctx_sigs$47[ebp], ymm0

; 449  :                                              log2_block_size, type);
; 450  : 
; 451  :       _mm256_store_si256((__m256i *)ctx_sig_buf, ctx_sigs);

	vmovdqu	ymm0, YMMWORD PTR _ctx_sigs$47[ebp]
	vmovdqa	YMMWORD PTR _ctx_sig_buf$[ebp], ymm0

; 452  : 
; 453  :       uint32_t esc_flags = ~(_mm256_movemask_epi8(encode_sig_coeff_flags_inv));

	vmovdqu	ymm0, YMMWORD PTR _encode_sig_coeff_flags_inv$48[ebp]
	vpmovmskb eax, ymm0
	not	eax
	mov	DWORD PTR _esc_flags$46[ebp], eax

; 454  :       uint32_t sigs = ~(_mm256_movemask_epi8(sigs_inv));

	vmovdqu	ymm0, YMMWORD PTR _sigs_inv$60[ebp]
	vpmovmskb eax, ymm0
	not	eax
	mov	DWORD PTR _sigs$45[ebp], eax

; 455  :       uint32_t coeff_sign_buf = _mm256_movemask_epi8(coeffs_negative);

	vmovdqu	ymm0, YMMWORD PTR _coeffs_negative$57[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _coeff_sign_buf$44[ebp], eax

; 456  : 
; 457  :       for (; scan_pos_sig >= sub_pos; scan_pos_sig--) {

	jmp	SHORT $LN13@kvz_encode
$LN11@kvz_encode:
	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	sub	eax, 1
	mov	DWORD PTR _scan_pos_sig$[ebp], eax
$LN13@kvz_encode:
	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	cmp	eax, DWORD PTR _sub_pos$70[ebp]
	jl	$LN12@kvz_encode

; 458  :         uint32_t id = scan_pos_sig - sub_pos;

	mov	eax, DWORD PTR _scan_pos_sig$[ebp]
	sub	eax, DWORD PTR _sub_pos$70[ebp]
	mov	DWORD PTR _id$43[ebp], eax

; 459  :         uint32_t shift = (id << 1) + 1;

	mov	eax, DWORD PTR _id$43[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	DWORD PTR _shift$42[ebp], ecx

; 460  : 
; 461  :         uint32_t curr_sig = (sigs >> shift) & 1;

	mov	eax, DWORD PTR _shift$42[ebp]
	shrx	ecx, DWORD PTR _sigs$45[ebp], eax
	and	ecx, 1
	mov	DWORD PTR _curr_sig$41[ebp], ecx

; 462  :         uint32_t curr_esc_flag = (esc_flags >> shift) & 1;

	mov	eax, DWORD PTR _shift$42[ebp]
	shrx	ecx, DWORD PTR _esc_flags$46[ebp], eax
	and	ecx, 1
	mov	DWORD PTR _curr_esc_flag$40[ebp], ecx

; 463  :         uint32_t curr_coeff_sign = (coeff_sign_buf >> shift) & 1;

	mov	eax, DWORD PTR _shift$42[ebp]
	shrx	ecx, DWORD PTR _coeff_sign_buf$44[ebp], eax
	and	ecx, 1
	mov	DWORD PTR _curr_coeff_sign$39[ebp], ecx

; 464  : 
; 465  :         if (curr_esc_flag | num_non_zero) {

	mov	eax, DWORD PTR _curr_esc_flag$40[ebp]
	or	eax, DWORD PTR _num_non_zero$[ebp]
	je	SHORT $LN27@kvz_encode

; 466  :           ctx_sig = ctx_sig_buf[id];

	mov	eax, DWORD PTR _id$43[ebp]
	movsx	ecx, WORD PTR _ctx_sig_buf$[ebp+eax*2]
	mov	DWORD PTR _ctx_sig$[ebp], ecx

; 467  :           cabac->cur_ctx = &baseCtx[ctx_sig];

	mov	eax, DWORD PTR _baseCtx$[ebp]
	add	eax, DWORD PTR _ctx_sig$[ebp]
	mov	ecx, DWORD PTR _cabac$[ebx]
	mov	DWORD PTR [ecx], eax

; 468  :           CABAC_BIN(cabac, curr_sig, "sig_coeff_flag");

	mov	eax, DWORD PTR _curr_sig$41[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebx]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN27@kvz_encode:

; 469  :         }
; 470  : 
; 471  :         if (curr_sig) {

	cmp	DWORD PTR _curr_sig$41[ebp], 0
	je	SHORT $LN28@kvz_encode

; 472  :           abs_coeff[num_non_zero]  = abs_coeff_buf_sb[id];

	mov	eax, DWORD PTR _num_non_zero$[ebp]
	mov	ecx, DWORD PTR _id$43[ebp]
	mov	dx, WORD PTR _abs_coeff_buf_sb$[ebp+ecx*2]
	mov	WORD PTR _abs_coeff$[ebp+eax*2], dx

; 473  :           coeff_signs              = 2 * coeff_signs + curr_coeff_sign;

	mov	eax, DWORD PTR _coeff_signs$[ebp]
	mov	ecx, DWORD PTR _curr_coeff_sign$39[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _coeff_signs$[ebp], edx

; 474  :           num_non_zero++;

	mov	eax, DWORD PTR _num_non_zero$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_non_zero$[ebp], eax
$LN28@kvz_encode:

; 475  :         }
; 476  :       }

	jmp	$LN11@kvz_encode
$LN12@kvz_encode:

; 477  :     } else {

	jmp	SHORT $LN26@kvz_encode
$LN25@kvz_encode:

; 478  :       scan_pos_sig = sub_pos - 1;

	mov	eax, DWORD PTR _sub_pos$70[ebp]
	sub	eax, 1
	mov	DWORD PTR _scan_pos_sig$[ebp], eax
$LN26@kvz_encode:

; 479  :     }
; 480  : 
; 481  :     if (num_non_zero > 0) {

	cmp	DWORD PTR _num_non_zero$[ebp], 0
	jle	$LN29@kvz_encode

; 482  :       bool sign_hidden = last_nz_pos_in_cg - first_nz_pos_in_cg >= 4 /* SBH_THRESHOLD */

	mov	eax, DWORD PTR _last_nz_pos_in_cg$[ebp]
	sub	eax, DWORD PTR _first_nz_pos_in_cg$[ebp]
	cmp	eax, 4
	jl	SHORT $LN51@kvz_encode
	mov	ecx, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [ecx+2364], 0
	jne	SHORT $LN51@kvz_encode
	mov	DWORD PTR tv544[ebp], 1
	jmp	SHORT $LN52@kvz_encode
$LN51@kvz_encode:
	mov	DWORD PTR tv544[ebp], 0
$LN52@kvz_encode:
	cmp	DWORD PTR tv544[ebp], 0
	jne	SHORT $LN53@kvz_encode
	mov	DWORD PTR tv546[ebp], 0
	jmp	SHORT $LN54@kvz_encode
$LN53@kvz_encode:
	mov	DWORD PTR tv546[ebp], 1
$LN54@kvz_encode:
	mov	dl, BYTE PTR tv546[ebp]
	mov	BYTE PTR _sign_hidden$38[ebp], dl

; 483  :                          && !encoder->cfg.lossless;
; 484  :       uint32_t ctx_set  = (i > 0 && type == 0) ? 2 : 0;

	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN55@kvz_encode
	movzx	eax, BYTE PTR _type$[ebx]
	test	eax, eax
	jne	SHORT $LN55@kvz_encode
	mov	DWORD PTR tv551[ebp], 2
	jmp	SHORT $LN56@kvz_encode
$LN55@kvz_encode:
	mov	DWORD PTR tv551[ebp], 0
$LN56@kvz_encode:
	mov	ecx, DWORD PTR tv551[ebp]
	mov	DWORD PTR _ctx_set$37[ebp], ecx

; 485  :       cabac_ctx_t *base_ctx_mod;
; 486  :       int32_t num_c1_flag, first_c2_flag_idx, idx;
; 487  : 
; 488  :       __m256i abs_coeffs = _mm256_load_si256((__m256i *)abs_coeff);

	vmovdqa	ymm0, YMMWORD PTR _abs_coeff$[ebp]
	vmovdqu	YMMWORD PTR _abs_coeffs$32[ebp], ymm0

; 489  :       __m256i coeffs_gt1 = _mm256_cmpgt_epi16(abs_coeffs, ones);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs$32[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _ones$[ebp]
	vmovdqu	YMMWORD PTR _coeffs_gt1$31[ebp], ymm0

; 490  :       __m256i coeffs_gt2 = _mm256_cmpgt_epi16(abs_coeffs, twos);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs$32[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _twos$[ebp]
	vmovdqu	YMMWORD PTR _coeffs_gt2$30[ebp], ymm0

; 491  :       uint32_t coeffs_gt1_bits = _mm256_movemask_epi8(coeffs_gt1);

	vmovdqu	ymm0, YMMWORD PTR _coeffs_gt1$31[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _coeffs_gt1_bits$29[ebp], eax

; 492  :       uint32_t coeffs_gt2_bits = _mm256_movemask_epi8(coeffs_gt2);

	vmovdqu	ymm0, YMMWORD PTR _coeffs_gt2$30[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _coeffs_gt2_bits$28[ebp], eax

; 493  : 
; 494  :       if (c1 == 0) {

	cmp	DWORD PTR _c1$[ebp], 0
	jne	SHORT $LN30@kvz_encode

; 495  :         ctx_set++;

	mov	eax, DWORD PTR _ctx_set$37[ebp]
	add	eax, 1
	mov	DWORD PTR _ctx_set$37[ebp], eax
$LN30@kvz_encode:

; 496  :       }
; 497  : 
; 498  :       base_ctx_mod     = (type == 0) ? &(cabac->ctx.cu_one_model_luma[4 * ctx_set]) :

	movzx	eax, BYTE PTR _type$[ebx]
	test	eax, eax
	jne	SHORT $LN57@kvz_encode
	mov	ecx, DWORD PTR _ctx_set$37[ebp]
	mov	edx, DWORD PTR _cabac$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4+170]
	mov	DWORD PTR tv576[ebp], eax
	jmp	SHORT $LN58@kvz_encode
$LN57@kvz_encode:
	mov	ecx, DWORD PTR _ctx_set$37[ebp]
	mov	edx, DWORD PTR _cabac$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4+186]
	mov	DWORD PTR tv576[ebp], eax
$LN58@kvz_encode:
	mov	ecx, DWORD PTR tv576[ebp]
	mov	DWORD PTR _base_ctx_mod$36[ebp], ecx

; 499  :                          &(cabac->ctx.cu_one_model_chroma[4 * ctx_set]);
; 500  :       num_c1_flag      = MIN(num_non_zero, C1FLAG_NUMBER);

	cmp	DWORD PTR _num_non_zero$[ebp], 8
	jge	SHORT $LN59@kvz_encode
	mov	eax, DWORD PTR _num_non_zero$[ebp]
	mov	DWORD PTR tv578[ebp], eax
	jmp	SHORT $LN60@kvz_encode
$LN59@kvz_encode:
	mov	DWORD PTR tv578[ebp], 8
$LN60@kvz_encode:
	mov	ecx, DWORD PTR tv578[ebp]
	mov	DWORD PTR _num_c1_flag$35[ebp], ecx

; 501  :       first_c2_flag_idx = -1;

	mov	DWORD PTR _first_c2_flag_idx$34[ebp], -1

; 502  : 
; 503  : 
; 504  :       /*
; 505  :        * c1s_pattern is 16 base-4 numbers: 3, 3, 3, ... , 3, 2 (c1 will never
; 506  :        * be less than 0 or greater than 3, so two bits per iter are enough).
; 507  :        * It's essentially the values that c1 will be for the next iteration as
; 508  :        * long as we have not encountered any >1 symbols. Count how long run of
; 509  :        * such symbols there is in the beginning of this CG, and zero all c1's
; 510  :        * that are located at or after the first >1 symbol.
; 511  :        */
; 512  :       const uint32_t c1s_pattern = 0xfffffffe;

	mov	DWORD PTR _c1s_pattern$27[ebp], -2	; fffffffeH

; 513  :       uint32_t n_nongt1_bits = _tzcnt_u32(coeffs_gt1_bits);

	tzcnt	eax, DWORD PTR _coeffs_gt1_bits$29[ebp]
	mov	DWORD PTR _n_nongt1_bits$26[ebp], eax

; 514  :       uint32_t c1s_nextiter  = _bzhi_u32(c1s_pattern, n_nongt1_bits);

	mov	eax, DWORD PTR _n_nongt1_bits$26[ebp]
	bzhi	ecx, DWORD PTR _c1s_pattern$27[ebp], eax
	mov	DWORD PTR _c1s_nextiter$25[ebp], ecx

; 515  :       first_c2_flag_idx      = n_nongt1_bits >> 1;

	mov	eax, DWORD PTR _n_nongt1_bits$26[ebp]
	shr	eax, 1
	mov	DWORD PTR _first_c2_flag_idx$34[ebp], eax

; 516  : 
; 517  :       c1 = 1;

	mov	DWORD PTR _c1$[ebp], 1

; 518  :       for (idx = 0; idx < num_c1_flag; idx++) {

	mov	DWORD PTR _idx$33[ebp], 0
	jmp	SHORT $LN16@kvz_encode
$LN14@kvz_encode:
	mov	eax, DWORD PTR _idx$33[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$33[ebp], eax
$LN16@kvz_encode:
	mov	eax, DWORD PTR _idx$33[ebp]
	cmp	eax, DWORD PTR _num_c1_flag$35[ebp]
	jge	SHORT $LN15@kvz_encode

; 519  :         uint32_t shift = idx << 1;

	mov	eax, DWORD PTR _idx$33[ebp]
	shl	eax, 1
	mov	DWORD PTR _shift$24[ebp], eax

; 520  :         uint32_t symbol = (coeffs_gt1_bits >> shift) & 1;

	mov	eax, DWORD PTR _shift$24[ebp]
	shrx	ecx, DWORD PTR _coeffs_gt1_bits$29[ebp], eax
	and	ecx, 1
	mov	DWORD PTR _symbol$23[ebp], ecx

; 521  : 
; 522  :         cabac->cur_ctx = &base_ctx_mod[c1];

	mov	eax, DWORD PTR _base_ctx_mod$36[ebp]
	add	eax, DWORD PTR _c1$[ebp]
	mov	ecx, DWORD PTR _cabac$[ebx]
	mov	DWORD PTR [ecx], eax

; 523  :         CABAC_BIN(cabac, symbol, "coeff_abs_level_greater1_flag");

	mov	eax, DWORD PTR _symbol$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebx]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 524  : 
; 525  :         c1 = (c1s_nextiter >> shift) & 3;

	mov	eax, DWORD PTR _shift$24[ebp]
	shrx	ecx, DWORD PTR _c1s_nextiter$25[ebp], eax
	and	ecx, 3
	mov	DWORD PTR _c1$[ebp], ecx

; 526  :       }

	jmp	SHORT $LN14@kvz_encode
$LN15@kvz_encode:

; 527  : 
; 528  :       if (c1 == 0) {

	cmp	DWORD PTR _c1$[ebp], 0
	jne	$LN31@kvz_encode

; 529  :         base_ctx_mod = (type == 0) ? &(cabac->ctx.cu_abs_model_luma[ctx_set]) :

	movzx	eax, BYTE PTR _type$[ebx]
	test	eax, eax
	jne	SHORT $LN61@kvz_encode
	mov	ecx, DWORD PTR _ctx_set$37[ebp]
	mov	edx, DWORD PTR _cabac$[ebx]
	lea	eax, DWORD PTR [edx+ecx+194]
	mov	DWORD PTR tv606[ebp], eax
	jmp	SHORT $LN62@kvz_encode
$LN61@kvz_encode:
	mov	ecx, DWORD PTR _ctx_set$37[ebp]
	mov	edx, DWORD PTR _cabac$[ebx]
	lea	eax, DWORD PTR [edx+ecx+198]
	mov	DWORD PTR tv606[ebp], eax
$LN62@kvz_encode:
	mov	ecx, DWORD PTR tv606[ebp]
	mov	DWORD PTR _base_ctx_mod$36[ebp], ecx

; 530  :                        &(cabac->ctx.cu_abs_model_chroma[ctx_set]);
; 531  : 
; 532  :         if (first_c2_flag_idx != -1) {

	cmp	DWORD PTR _first_c2_flag_idx$34[ebp], -1
	je	SHORT $LN31@kvz_encode

; 533  :           uint32_t shift = (first_c2_flag_idx << 1) + 1;

	mov	eax, DWORD PTR _first_c2_flag_idx$34[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	DWORD PTR _shift$22[ebp], ecx

; 534  :           uint8_t symbol = (coeffs_gt2_bits >> shift) & 1;

	mov	eax, DWORD PTR _shift$22[ebp]
	shrx	ecx, DWORD PTR _coeffs_gt2_bits$28[ebp], eax
	and	ecx, 1
	mov	BYTE PTR _symbol$21[ebp], cl

; 535  :           cabac->cur_ctx = &base_ctx_mod[0];

	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _base_ctx_mod$36[ebp]
	mov	edx, DWORD PTR _cabac$[ebx]
	mov	DWORD PTR [edx], ecx

; 536  : 
; 537  :           CABAC_BIN(cabac, symbol, "coeff_abs_level_greater2_flag");

	movzx	eax, BYTE PTR _symbol$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebx]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN31@kvz_encode:

; 538  :         }
; 539  :       }
; 540  :       int32_t shiftamt = (be_valid && sign_hidden) ? 1 : 0;

	movsx	eax, BYTE PTR _be_valid$[ebp]
	test	eax, eax
	je	SHORT $LN63@kvz_encode
	movzx	ecx, BYTE PTR _sign_hidden$38[ebp]
	test	ecx, ecx
	je	SHORT $LN63@kvz_encode
	mov	DWORD PTR tv623[ebp], 1
	jmp	SHORT $LN64@kvz_encode
$LN63@kvz_encode:
	mov	DWORD PTR tv623[ebp], 0
$LN64@kvz_encode:
	mov	edx, DWORD PTR tv623[ebp]
	mov	DWORD PTR _shiftamt$20[ebp], edx

; 541  :       int32_t nnz = num_non_zero - shiftamt;

	mov	eax, DWORD PTR _num_non_zero$[ebp]
	sub	eax, DWORD PTR _shiftamt$20[ebp]
	mov	DWORD PTR _nnz$19[ebp], eax

; 542  :       coeff_signs >>= shiftamt;

	mov	eax, DWORD PTR _shiftamt$20[ebp]
	shrx	ecx, DWORD PTR _coeff_signs$[ebp], eax
	mov	DWORD PTR _coeff_signs$[ebp], ecx

; 543  :       if (!cabac->only_count) {

	mov	eax, DWORD PTR _cabac$[ebx]
	movsx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN33@kvz_encode

; 544  :         if (encoder->cfg.crypto_features & KVZ_CRYPTO_TRANSF_COEFF_SIGNS) {

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2348]
	and	ecx, 8
	je	SHORT $LN33@kvz_encode

; 545  :           coeff_signs ^= kvz_crypto_get_key(state->crypto_hdl, nnz);

	mov	eax, DWORD PTR _nnz$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	call	_kvz_crypto_get_key
	add	esp, 8
	xor	eax, DWORD PTR _coeff_signs$[ebp]
	mov	DWORD PTR _coeff_signs$[ebp], eax
$LN33@kvz_encode:

; 546  :         }
; 547  :       }
; 548  :       CABAC_BINS_EP(cabac, coeff_signs, nnz, "coeff_sign_flag");

	mov	eax, DWORD PTR _nnz$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _coeff_signs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebx]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 549  : 
; 550  :       if (c1 == 0 || num_non_zero > C1FLAG_NUMBER) {

	cmp	DWORD PTR _c1$[ebp], 0
	je	SHORT $LN36@kvz_encode
	cmp	DWORD PTR _num_non_zero$[ebp], 8
	jle	$LN29@kvz_encode
$LN36@kvz_encode:

; 551  : 
; 552  :         const __m256i ones        = _mm256_set1_epi16(1);

	vmovdqu	ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
	vmovdqu	YMMWORD PTR _ones$18[ebp], ymm0

; 553  : 
; 554  :         __m256i abs_coeffs_gt1    = _mm256_cmpgt_epi16  (abs_coeffs, ones);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs$32[ebp]
	vpcmpgtw ymm0, ymm0, YMMWORD PTR _ones$18[ebp]
	vmovdqu	YMMWORD PTR _abs_coeffs_gt1$17[ebp], ymm0

; 555  :         uint32_t acgt1_bits       = _mm256_movemask_epi8(abs_coeffs_gt1);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs_gt1$17[ebp]
	vpmovmskb eax, ymm0
	mov	DWORD PTR _acgt1_bits$16[ebp], eax

; 556  :         uint32_t first_acgt1_bpos = _tzcnt_u32(acgt1_bits);

	tzcnt	eax, DWORD PTR _acgt1_bits$16[ebp]
	mov	DWORD PTR _first_acgt1_bpos$15[ebp], eax

; 557  : 
; 558  :         uint32_t abs_coeffs_base4 = pack_16x16b_to_16x2b(abs_coeffs);

	vmovdqu	ymm0, YMMWORD PTR _abs_coeffs$32[ebp]
	call	_pack_16x16b_to_16x2b
	mov	DWORD PTR _abs_coeffs_base4$14[ebp], eax

; 559  : 
; 560  :         const uint32_t ones_base4 = 0x55555555;

	mov	DWORD PTR _ones_base4$13[ebp], 1431655765 ; 55555555H

; 561  :         const uint32_t twos_base4 = 0xaaaaaaaa;

	mov	DWORD PTR _twos_base4$12[ebp], -1431655766 ; aaaaaaaaH

; 562  : 
; 563  :         const uint32_t c1flag_number_mask_inv = 0xffffffff << (C1FLAG_NUMBER << 1);

	mov	DWORD PTR _c1flag_number_mask_inv$11[ebp], -65536 ; ffff0000H

; 564  :         const uint32_t c1flag_number_mask     = ~c1flag_number_mask_inv;

	mov	eax, DWORD PTR _c1flag_number_mask_inv$11[ebp]
	not	eax
	mov	DWORD PTR _c1flag_number_mask$10[ebp], eax

; 565  : 
; 566  :         // The addition will not overflow between 2-bit atoms because
; 567  :         // first_coeff2s will only be 1 or 0, and the other addend is 2
; 568  :         uint32_t first_coeff2s    = _bzhi_u32(ones_base4, first_acgt1_bpos + 2);

	mov	eax, DWORD PTR _first_acgt1_bpos$15[ebp]
	add	eax, 2
	bzhi	ecx, DWORD PTR _ones_base4$13[ebp], eax
	mov	DWORD PTR _first_coeff2s$9[ebp], ecx

; 569  :         uint32_t base_levels      = first_coeff2s + twos_base4;

	mov	eax, DWORD PTR _first_coeff2s$9[ebp]
	add	eax, DWORD PTR _twos_base4$12[ebp]
	mov	DWORD PTR _base_levels$8[ebp], eax

; 570  : 
; 571  :         base_levels &= c1flag_number_mask;

	mov	eax, DWORD PTR _base_levels$8[ebp]
	and	eax, DWORD PTR _c1flag_number_mask$10[ebp]
	mov	DWORD PTR _base_levels$8[ebp], eax

; 572  :         base_levels |= (ones_base4 & c1flag_number_mask_inv);

	mov	eax, DWORD PTR _ones_base4$13[ebp]
	and	eax, DWORD PTR _c1flag_number_mask_inv$11[ebp]
	or	eax, DWORD PTR _base_levels$8[ebp]
	mov	DWORD PTR _base_levels$8[ebp], eax

; 573  : 
; 574  :         uint32_t encode_decisions = u32vec_cmpgt_epu2(base_levels, abs_coeffs_base4);

	mov	eax, DWORD PTR _abs_coeffs_base4$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_levels$8[ebp]
	push	ecx
	call	_u32vec_cmpgt_epu2
	add	esp, 8
	mov	DWORD PTR _encode_decisions$7[ebp], eax

; 575  : 
; 576  :         for (idx = 0; idx < num_non_zero; idx++) {

	mov	DWORD PTR _idx$33[ebp], 0
	jmp	SHORT $LN19@kvz_encode
$LN17@kvz_encode:
	mov	eax, DWORD PTR _idx$33[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$33[ebp], eax
$LN19@kvz_encode:
	mov	eax, DWORD PTR _idx$33[ebp]
	cmp	eax, DWORD PTR _num_non_zero$[ebp]
	jge	$LN29@kvz_encode

; 577  : 
; 578  :           uint32_t shift = idx << 1;

	mov	eax, DWORD PTR _idx$33[ebp]
	shl	eax, 1
	mov	DWORD PTR _shift$6[ebp], eax

; 579  :           uint32_t dont_encode_curr = (encode_decisions >> shift);

	mov	eax, DWORD PTR _shift$6[ebp]
	shrx	ecx, DWORD PTR _encode_decisions$7[ebp], eax
	mov	DWORD PTR _dont_encode_curr$5[ebp], ecx

; 580  :           int16_t base_level        = (base_levels      >> shift) & 3;

	mov	eax, DWORD PTR _shift$6[ebp]
	shrx	ecx, DWORD PTR _base_levels$8[ebp], eax
	and	ecx, 3
	mov	WORD PTR _base_level$4[ebp], cx

; 581  : 
; 582  :           uint16_t curr_abs_coeff = abs_coeff[idx];

	mov	eax, DWORD PTR _idx$33[ebp]
	mov	cx, WORD PTR _abs_coeff$[ebp+eax*2]
	mov	WORD PTR _curr_abs_coeff$3[ebp], cx

; 583  : 
; 584  :           if (!(dont_encode_curr & 2)) {

	mov	eax, DWORD PTR _dont_encode_curr$5[ebp]
	and	eax, 2
	jne	$LN37@kvz_encode

; 585  :             uint16_t level_diff = curr_abs_coeff - base_level;

	movzx	eax, WORD PTR _curr_abs_coeff$3[ebp]
	movsx	ecx, WORD PTR _base_level$4[ebp]
	sub	eax, ecx
	mov	WORD PTR _level_diff$2[ebp], ax

; 586  :             if (!cabac->only_count && (encoder->cfg.crypto_features & KVZ_CRYPTO_TRANSF_COEFFS)) {

	mov	eax, DWORD PTR _cabac$[ebx]
	movsx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN38@kvz_encode
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2348]
	and	ecx, 4
	je	SHORT $LN38@kvz_encode

; 587  :               kvz_cabac_write_coeff_remain_encry(state, cabac, level_diff, go_rice_param, base_level);

	movsx	eax, WORD PTR _base_level$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _go_rice_param$[ebp]
	push	ecx
	movzx	edx, WORD PTR _level_diff$2[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	push	ecx
	call	_kvz_cabac_write_coeff_remain_encry
	add	esp, 20					; 00000014H

; 588  :             } else {

	jmp	SHORT $LN39@kvz_encode
$LN38@kvz_encode:

; 589  :               kvz_cabac_write_coeff_remain(cabac, level_diff, go_rice_param);

	mov	eax, DWORD PTR _go_rice_param$[ebp]
	push	eax
	movzx	ecx, WORD PTR _level_diff$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebx]
	push	edx
	call	_kvz_cabac_write_coeff_remain
	add	esp, 12					; 0000000cH
$LN39@kvz_encode:

; 590  :             }
; 591  : 
; 592  :             if (curr_abs_coeff > 3 * (1 << go_rice_param)) {

	movzx	eax, WORD PTR _curr_abs_coeff$3[ebp]
	mov	ecx, 1
	mov	edx, DWORD PTR _go_rice_param$[ebp]
	shlx	ecx, ecx, edx
	imul	edx, ecx, 3
	cmp	eax, edx
	jle	SHORT $LN37@kvz_encode

; 593  :               go_rice_param = MIN(go_rice_param + 1, 4);

	mov	eax, DWORD PTR _go_rice_param$[ebp]
	add	eax, 1
	cmp	eax, 4
	jae	SHORT $LN65@kvz_encode
	mov	ecx, DWORD PTR _go_rice_param$[ebp]
	add	ecx, 1
	mov	DWORD PTR tv736[ebp], ecx
	jmp	SHORT $LN66@kvz_encode
$LN65@kvz_encode:
	mov	DWORD PTR tv736[ebp], 4
$LN66@kvz_encode:
	mov	edx, DWORD PTR tv736[ebp]
	mov	DWORD PTR _go_rice_param$[ebp], edx
$LN37@kvz_encode:

; 594  :             }
; 595  :           }
; 596  : 
; 597  :         }

	jmp	$LN17@kvz_encode
$LN29@kvz_encode:

; 598  :       }
; 599  :     }
; 600  :     last_nz_pos_in_cg = -1;

	mov	DWORD PTR _last_nz_pos_in_cg$[ebp], -1

; 601  :     first_nz_pos_in_cg = 16;

	mov	DWORD PTR _first_nz_pos_in_cg$[ebp], 16	; 00000010H

; 602  :     num_non_zero = 0;

	mov	DWORD PTR _num_non_zero$[ebp], 0

; 603  :     coeff_signs = 0;

	mov	DWORD PTR _coeff_signs$[ebp], 0

; 604  :   }

	jmp	$LN8@kvz_encode
$LN1@kvz_encode:

; 605  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN80@kvz_encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN80@kvz_encode:
	DD	10					; 0000000aH
	DD	$LN79@kvz_encode
$LN79@kvz_encode:
	DD	-9280					; ffffdbc0H
	DD	32					; 00000020H
	DD	$LN68@kvz_encode
	DD	-328					; fffffeb8H
	DD	256					; 00000100H
	DD	$LN70@kvz_encode
	DD	-9216					; ffffdc00H
	DD	8192					; 00002000H
	DD	$LN71@kvz_encode
	DD	-9472					; ffffdb00H
	DD	32					; 00000020H
	DD	$LN72@kvz_encode
	DD	-9536					; ffffdac0H
	DD	32					; 00000020H
	DD	$LN73@kvz_encode
	DD	-9600					; ffffda80H
	DD	32					; 00000020H
	DD	$LN74@kvz_encode
	DD	-9664					; ffffda40H
	DD	32					; 00000020H
	DD	$LN75@kvz_encode
	DD	-9728					; ffffda00H
	DD	32					; 00000020H
	DD	$LN76@kvz_encode
	DD	-9764					; ffffd9dcH
	DD	4
	DD	$LN77@kvz_encode
	DD	-9776					; ffffd9d0H
	DD	4
	DD	$LN78@kvz_encode
$LN78@kvz_encode:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	103					; 00000067H
	DB	0
$LN77@kvz_encode:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	103					; 00000067H
	DB	0
$LN76@kvz_encode:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN75@kvz_encode:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN74@kvz_encode:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN73@kvz_encode:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN72@kvz_encode:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN71@kvz_encode:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN70@kvz_encode:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	115					; 00000073H
	DB	0
$LN68@kvz_encode:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
_kvz_encode_coeff_nxn_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\avx2_common_functions.h
;	COMDAT _get_first_last_nz_int16
_TEXT	SEGMENT
_nonzero_bytes$ = -204					; size = 4
_zeros$ = -192						; size = 32
_zero$ = -128						; size = 32
_ints$ = -64						; size = 32
_first$ = 8						; size = 4
_last$ = 12						; size = 4
_get_first_last_nz_int16 PROC				; COMDAT
; _ints$ = ymm0

; 155  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -32				; ffffffe0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	vmovups	YMMWORD PTR _ints$[ebp], ymm0
	mov	ecx, OFFSET __A748CBAD_avx2_common_functions@h
	call	@__CheckForDebuggerJustMyCode@4

; 156  :   // Note that nonzero_bytes will always have both bytes set for a set word
; 157  :   // even if said word only had one of its bytes set, because we're doing 16
; 158  :   // bit wide comparisons. No big deal, just shift results to the right by one
; 159  :   // bit to have the results represent indexes of first set words, not bytes.
; 160  :   // Another note, it has to use right shift instead of division to preserve
; 161  :   // behavior on an all-zero vector (-1 / 2 == 0, but -1 >> 1 == -1)
; 162  :   const __m256i zero = _mm256_setzero_si256();

	vpxor	xmm0, xmm0, xmm0
	vmovdqu	YMMWORD PTR _zero$[ebp], ymm0

; 163  : 
; 164  :   __m256i zeros = _mm256_cmpeq_epi16(ints, zero);

	vmovdqu	ymm0, YMMWORD PTR _ints$[ebp]
	vpcmpeqw ymm0, ymm0, YMMWORD PTR _zero$[ebp]
	vmovdqu	YMMWORD PTR _zeros$[ebp], ymm0

; 165  :   uint32_t nonzero_bytes = ~((uint32_t)_mm256_movemask_epi8(zeros));

	vmovdqu	ymm0, YMMWORD PTR _zeros$[ebp]
	vpmovmskb eax, ymm0
	not	eax
	mov	DWORD PTR _nonzero_bytes$[ebp], eax

; 166  :   *first = (    (int32_t)_tzcnt_u32(nonzero_bytes)) >> 1;

	tzcnt	eax, DWORD PTR _nonzero_bytes$[ebp]
	sar	eax, 1
	mov	ecx, DWORD PTR _first$[ebx]
	mov	DWORD PTR [ecx], eax

; 167  :   *last = (31 - (int32_t)_lzcnt_u32(nonzero_bytes)) >> 1;

	lzcnt	eax, DWORD PTR _nonzero_bytes$[ebp]
	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
	sar	ecx, 1
	mov	edx, DWORD PTR _last$[ebx]
	mov	DWORD PTR [edx], ecx

; 168  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_get_first_last_nz_int16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\avx2\avx2_common_functions.h
;	COMDAT _scanord_read_vector
_TEXT	SEGMENT
_coeffs_rearr2_lower$1 = -560				; size = 16
_coeffs_rearr2_upper$2 = -528				; size = 16
_coeffs_rearr1_lower$3 = -496				; size = 16
_coeffs_rearr1_upper$4 = -464				; size = 16
_coeffs_lower$5 = -432					; size = 16
_coeffs_upper$6 = -400					; size = 16
_coeffs_d_lower$7 = -368				; size = 16
_coeffs_d_upper$8 = -336				; size = 16
_coeff$9 = -304						; size = 4
_i$10 = -292						; size = 4
_row_offsets$ = -280					; size = 16
_invec_rearr_masks_lower$ = -256			; size = 48
_invec_rearr_masks_upper$ = -192			; size = 48
_blend_masks$ = -128					; size = 48
_low128_shuffle_masks$ = -64				; size = 48
__$ArrayPad$ = -4					; size = 4
_coeffs$ = 8						; size = 4
_scan$ = 12						; size = 4
_scan_mode$ = 16					; size = 1
_subpos$ = 20						; size = 4
_width$ = 24						; size = 4
_result_vecs$ = 28					; size = 4
_n_bufs$ = 32						; size = 4
_scanord_read_vector PROC				; COMDAT

; 71   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 952				; 000003b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-952]
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A748CBAD_avx2_common_functions@h
	call	@__CheckForDebuggerJustMyCode@4

; 72   :   // For vectorized reordering of coef and q_coef
; 73   :   const __m128i low128_shuffle_masks[3] = {

	vmovdqa	xmm0, XMMWORD PTR __xmm@030209080f0e070601000d0c05040b0a
	vmovdqa	XMMWORD PTR _low128_shuffle_masks$[ebp], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	vmovdqa	XMMWORD PTR _low128_shuffle_masks$[ebp+16], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0b0a09080f0e0d0c0302010007060504
	vmovdqa	XMMWORD PTR _low128_shuffle_masks$[ebp+32], xmm0

; 74   :     _mm_setr_epi8(10,11,  4, 5, 12,13,  0, 1,  6, 7, 14,15,  8, 9,  2, 3),
; 75   :     _mm_setr_epi8( 0, 1,  2, 3,  4, 5,  6, 7,  8, 9, 10,11, 12,13, 14,15),
; 76   :     _mm_setr_epi8( 4, 5,  6, 7,  0, 1,  2, 3, 12,13, 14,15,  8, 9, 10,11),
; 77   :   };
; 78   : 
; 79   :   const __m128i blend_masks[3] = {

	vmovdqa	xmm0, XMMWORD PTR __xmm@ffffffff00000000ffff000000000000
	vmovdqa	XMMWORD PTR _blend_masks$[ebp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovdqa	XMMWORD PTR _blend_masks$[ebp+16], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@ffffffff00000000ffffffff00000000
	vmovdqa	XMMWORD PTR _blend_masks$[ebp+32], xmm0

; 80   :     _mm_setr_epi16( 0,  0,  0, -1,  0,  0, -1, -1),
; 81   :     _mm_setr_epi16( 0,  0,  0,  0,  0,  0,  0,  0),
; 82   :     _mm_setr_epi16( 0,  0, -1, -1,  0,  0, -1, -1),
; 83   :   };
; 84   : 
; 85   :   const __m128i invec_rearr_masks_upper[3] = {

	vmovdqa	xmm0, XMMWORD PTR __xmm@0f0e0d0c05040b0a0706030209080100
	vmovdqa	XMMWORD PTR _invec_rearr_masks_upper$[ebp], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	vmovdqa	XMMWORD PTR _invec_rearr_masks_upper$[ebp+16], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0f0e07060b0a03020d0c050409080100
	vmovdqa	XMMWORD PTR _invec_rearr_masks_upper$[ebp+32], xmm0

; 86   :     _mm_setr_epi8( 0, 1,  8, 9,  2, 3,  6, 7, 10,11,  4, 5, 12,13, 14,15),
; 87   :     _mm_setr_epi8( 0, 1,  2, 3,  4, 5,  6, 7,  8, 9, 10,11, 12,13, 14,15),
; 88   :     _mm_setr_epi8( 0, 1,  8, 9,  4, 5, 12,13,  2, 3, 10,11,  6, 7, 14,15),
; 89   :   };
; 90   : 
; 91   :   const __m128i invec_rearr_masks_lower[3] = {

	vmovdqa	xmm0, XMMWORD PTR __xmm@0b0a090805040f0e0302010007060d0c
	vmovdqa	XMMWORD PTR _invec_rearr_masks_lower$[ebp], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	vmovdqa	XMMWORD PTR _invec_rearr_masks_lower$[ebp+16], xmm0
	vmovdqa	xmm0, XMMWORD PTR __xmm@0b0a03020f0e0706090801000d0c0504
	vmovdqa	XMMWORD PTR _invec_rearr_masks_lower$[ebp+32], xmm0

; 92   :     _mm_setr_epi8(12,13,  6, 7,  0, 1,  2, 3, 14,15,  4, 5,  8, 9, 10,11),
; 93   :     _mm_setr_epi8( 0, 1,  2, 3,  4, 5,  6, 7,  8, 9, 10,11, 12,13, 14,15),
; 94   :     _mm_setr_epi8( 4, 5, 12,13,  0, 1,  8, 9,  6, 7, 14,15,  2, 3, 10,11),
; 95   :   };
; 96   : 
; 97   :   const size_t row_offsets[4] = {

	imul	eax, DWORD PTR _width$[ebx], 0
	mov	ecx, DWORD PTR _subpos$[ebx]
	mov	edx, DWORD PTR _scan$[ebx]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _row_offsets$[ebp], eax
	mov	eax, DWORD PTR _subpos$[ebx]
	mov	ecx, DWORD PTR _scan$[ebx]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, DWORD PTR _width$[ebx]
	mov	DWORD PTR _row_offsets$[ebp+4], edx
	mov	eax, DWORD PTR _subpos$[ebx]
	mov	ecx, DWORD PTR _scan$[ebx]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _width$[ebx]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _row_offsets$[ebp+8], ecx
	imul	eax, DWORD PTR _width$[ebx], 3
	mov	ecx, DWORD PTR _subpos$[ebx]
	mov	edx, DWORD PTR _scan$[ebx]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _row_offsets$[ebp+12], eax

; 98   :     scan[subpos] + width * 0,
; 99   :     scan[subpos] + width * 1,
; 100  :     scan[subpos] + width * 2,
; 101  :     scan[subpos] + width * 3,
; 102  :   };
; 103  : 
; 104  :   for (int i = 0; i < n_bufs; i++) {

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN4@scanord_re
$LN2@scanord_re:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN4@scanord_re:
	mov	eax, DWORD PTR _i$10[ebp]
	cmp	eax, DWORD PTR _n_bufs$[ebx]
	jge	$LN1@scanord_re

; 105  :     const int16_t *__restrict coeff = coeffs[i];

	mov	eax, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR _coeffs$[ebx]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _coeff$9[ebp], edx

; 106  : 
; 107  :     // NOTE: Upper means "higher in pixel order inside block", which implies
; 108  :     // lower addresses (note the difference: HIGH and LOW vs UPPER and LOWER),
; 109  :     // so upper 128b vector actually becomes the lower part of a 256-bit coeff
; 110  :     // vector and lower vector the higher part!
; 111  :     __m128d coeffs_d_upper;
; 112  :     __m128d coeffs_d_lower;
; 113  : 
; 114  :     __m128i coeffs_upper;
; 115  :     __m128i coeffs_lower;
; 116  : 
; 117  :     __m128i coeffs_rearr1_upper;
; 118  :     __m128i coeffs_rearr1_lower;
; 119  : 
; 120  :     __m128i coeffs_rearr2_upper;
; 121  :     __m128i coeffs_rearr2_lower;
; 122  : 
; 123  :     // Zeroing these is actually unnecessary, but the compiler will whine
; 124  :     // about uninitialized values otherwise
; 125  :     coeffs_d_upper = _mm_setzero_pd();

	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR _coeffs_d_upper$8[ebp], xmm0

; 126  :     coeffs_d_lower = _mm_setzero_pd();

	vxorps	xmm0, xmm0, xmm0
	vmovaps	XMMWORD PTR _coeffs_d_lower$7[ebp], xmm0

; 127  : 
; 128  :     coeffs_d_upper = _mm_loadl_pd(coeffs_d_upper, (double *)(coeff + row_offsets[0]));

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _row_offsets$[ebp+ecx]
	mov	eax, DWORD PTR _coeff$9[ebp]
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$8[ebp]
	vmovlpd	xmm0, xmm0, QWORD PTR [eax+edx*2]
	vmovaps	XMMWORD PTR _coeffs_d_upper$8[ebp], xmm0

; 129  :     coeffs_d_upper = _mm_loadh_pd(coeffs_d_upper, (double *)(coeff + row_offsets[1]));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _row_offsets$[ebp+eax]
	mov	edx, DWORD PTR _coeff$9[ebp]
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$8[ebp]
	vmovhpd	xmm0, xmm0, QWORD PTR [edx+ecx*2]
	vmovaps	XMMWORD PTR _coeffs_d_upper$8[ebp], xmm0

; 130  : 
; 131  :     coeffs_d_lower = _mm_loadl_pd(coeffs_d_lower, (double *)(coeff + row_offsets[2]));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _row_offsets$[ebp+eax]
	mov	edx, DWORD PTR _coeff$9[ebp]
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$7[ebp]
	vmovlpd	xmm0, xmm0, QWORD PTR [edx+ecx*2]
	vmovaps	XMMWORD PTR _coeffs_d_lower$7[ebp], xmm0

; 132  :     coeffs_d_lower = _mm_loadh_pd(coeffs_d_lower, (double *)(coeff + row_offsets[3]));

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _row_offsets$[ebp+ecx]
	mov	eax, DWORD PTR _coeff$9[ebp]
	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$7[ebp]
	vmovhpd	xmm0, xmm0, QWORD PTR [eax+edx*2]
	vmovaps	XMMWORD PTR _coeffs_d_lower$7[ebp], xmm0

; 133  : 
; 134  :     coeffs_upper   = _mm_castpd_si128(coeffs_d_upper);

	vmovaps	xmm0, XMMWORD PTR _coeffs_d_upper$8[ebp]
	vmovdqa	XMMWORD PTR _coeffs_upper$6[ebp], xmm0

; 135  :     coeffs_lower   = _mm_castpd_si128(coeffs_d_lower);

	vmovaps	xmm0, XMMWORD PTR _coeffs_d_lower$7[ebp]
	vmovdqa	XMMWORD PTR _coeffs_lower$5[ebp], xmm0

; 136  : 
; 137  :     coeffs_lower   = _mm_shuffle_epi8(coeffs_lower, low128_shuffle_masks[scan_mode]);

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	shl	eax, 4
	vmovdqa	xmm0, XMMWORD PTR _coeffs_lower$5[ebp]
	vpshufb	xmm0, xmm0, XMMWORD PTR _low128_shuffle_masks$[ebp+eax]
	vmovdqa	XMMWORD PTR _coeffs_lower$5[ebp], xmm0

; 138  : 
; 139  :     coeffs_rearr1_upper = _mm_blendv_epi8(coeffs_upper, coeffs_lower, blend_masks[scan_mode]);

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	shl	eax, 4
	vmovdqu	xmm0, XMMWORD PTR _blend_masks$[ebp+eax]
	vmovdqa	xmm1, XMMWORD PTR _coeffs_upper$6[ebp]
	vpblendvb xmm0, xmm1, XMMWORD PTR _coeffs_lower$5[ebp], xmm0
	vmovdqa	XMMWORD PTR _coeffs_rearr1_upper$4[ebp], xmm0

; 140  :     coeffs_rearr1_lower = _mm_blendv_epi8(coeffs_lower, coeffs_upper, blend_masks[scan_mode]);

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	shl	eax, 4
	vmovdqu	xmm0, XMMWORD PTR _blend_masks$[ebp+eax]
	vmovdqa	xmm1, XMMWORD PTR _coeffs_lower$5[ebp]
	vpblendvb xmm0, xmm1, XMMWORD PTR _coeffs_upper$6[ebp], xmm0
	vmovdqa	XMMWORD PTR _coeffs_rearr1_lower$3[ebp], xmm0

; 141  : 
; 142  :     coeffs_rearr2_upper = _mm_shuffle_epi8(coeffs_rearr1_upper, invec_rearr_masks_upper[scan_mode]);

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	shl	eax, 4
	vmovdqa	xmm0, XMMWORD PTR _coeffs_rearr1_upper$4[ebp]
	vpshufb	xmm0, xmm0, XMMWORD PTR _invec_rearr_masks_upper$[ebp+eax]
	vmovdqa	XMMWORD PTR _coeffs_rearr2_upper$2[ebp], xmm0

; 143  :     coeffs_rearr2_lower = _mm_shuffle_epi8(coeffs_rearr1_lower, invec_rearr_masks_lower[scan_mode]);

	movsx	eax, BYTE PTR _scan_mode$[ebx]
	shl	eax, 4
	vmovdqa	xmm0, XMMWORD PTR _coeffs_rearr1_lower$3[ebp]
	vpshufb	xmm0, xmm0, XMMWORD PTR _invec_rearr_masks_lower$[ebp+eax]
	vmovdqa	XMMWORD PTR _coeffs_rearr2_lower$1[ebp], xmm0

; 144  : 
; 145  :     // The Intel Intrinsics Guide talks about _mm256_setr_m128i but my headers
; 146  :     // lack such an instruction. What it does is essentially this anyway.
; 147  :     result_vecs[i] = _mm256_inserti128_si256(_mm256_castsi128_si256(coeffs_rearr2_upper),

	vmovdqu	xmm0, XMMWORD PTR _coeffs_rearr2_upper$2[ebp]
	vinserti128 ymm0, ymm0, XMMWORD PTR _coeffs_rearr2_lower$1[ebp], 1
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _result_vecs$[ebx]
	vmovdqu	YMMWORD PTR [eax], ymm0

; 148  :                                              coeffs_rearr2_lower,
; 149  :                                              1);
; 150  :   }

	jmp	$LN2@scanord_re
$LN1@scanord_re:

; 151  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@scanord_re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN12@scanord_re:
	DD	5
	DD	$LN11@scanord_re
$LN11@scanord_re:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN6@scanord_re
	DD	-128					; ffffff80H
	DD	48					; 00000030H
	DD	$LN7@scanord_re
	DD	-192					; ffffff40H
	DD	48					; 00000030H
	DD	$LN8@scanord_re
	DD	-256					; ffffff00H
	DD	48					; 00000030H
	DD	$LN9@scanord_re
	DD	-280					; fffffee8H
	DD	16					; 00000010H
	DD	$LN10@scanord_re
$LN10@scanord_re:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN9@scanord_re:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN8@scanord_re:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN7@scanord_re:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
$LN6@scanord_re:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	56					; 00000038H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
_scanord_read_vector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
;	COMDAT _kvz_crypto_get_key
_TEXT	SEGMENT
_hdl$ = 8						; size = 4
_num_bits$ = 12						; size = 4
_kvz_crypto_get_key PROC				; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __546CF5FC_crypto@h
	call	@__CheckForDebuggerJustMyCode@4

; 66   :   return 0;

	xor	eax, eax

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_crypto_get_key ENDP
_TEXT	ENDS
END
