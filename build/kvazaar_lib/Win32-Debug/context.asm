; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\context.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__5892C5DB_context@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_INIT_SAO_MERGE_FLAG DB 099H
	DB	099H
	DB	099H
	ORG $+1
_INIT_SAO_TYPE_IDX DB 0a0H
	DB	0b9H
	DB	0c8H
	ORG $+1
_INIT_QT_ROOT_CBF DB 04fH
	DB	04fH
	DB	09aH
	ORG $+1
_INIT_MVP_IDX DB 0a8H
	DB	09aH
	DB	0a8H
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+2
_INIT_REF_PIC DB 099H
	DB	099H
	DB	099H
	DB	099H
	DB	09aH
	DB	09aH
	ORG $+2
_INIT_MVD DB	0a9H
	DB	0c6H
	DB	08cH
	DB	0c6H
	DB	09aH
	DB	09aH
	ORG $+2
_INIT_MERGE_FLAG_EXT DB 09aH
	DB	06eH
	DB	09aH
	ORG $+1
_INIT_MERGE_IDX_EXT DB 089H
	DB	07aH
	DB	09aH
	ORG $+1
_INIT_CU_TRANSQUANT_BYPASS DB 09aH
	DB	09aH
	DB	09aH
	ORG $+1
_INIT_SKIP_FLAG DB 0c5H
	DB	0b9H
	DB	0c9H
	DB	0c5H
	DB	0b9H
	DB	0c9H
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+3
_INIT_PRED_MODE DB 086H
	DB	095H
	DB	09aH
	ORG $+1
_INIT_PART_SIZE DB 09aH
	DB	08bH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	08bH
	DB	09aH
	DB	09aH
	DB	0b8H
	DB	09aH
	DB	09aH
	DB	09aH
_INIT_SPLIT_FLAG DB 06bH
	DB	08bH
	DB	07eH
	DB	06bH
	DB	08bH
	DB	07eH
	DB	08bH
	DB	08dH
	DB	09dH
	ORG $+3
_INIT_INTRA_PRED_MODE DB 0b7H
	DB	09aH
	DB	0b8H
	ORG $+1
_INIT_CHROMA_PRED_MODE DB 098H
	DB	08bH
	DB	098H
	DB	08bH
	DB	03fH
	DB	08bH
	ORG $+2
_INIT_INTER_DIR DB 05fH
	DB	04fH
	DB	03fH
	DB	01fH
	DB	01fH
	DB	05fH
	DB	04fH
	DB	03fH
	DB	01fH
	DB	01fH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+1
_INIT_TRANS_SUBDIV_FLAG DB 0e0H
	DB	0a7H
	DB	07aH
	DB	07cH
	DB	08aH
	DB	05eH
	DB	099H
	DB	08aH
	DB	08aH
	ORG $+3
_INIT_QT_CBF DB	099H
	DB	06fH
	DB	09aH
	DB	09aH
	DB	095H
	DB	05cH
	DB	0a7H
	DB	09aH
	DB	099H
	DB	06fH
	DB	09aH
	DB	09aH
	DB	095H
	DB	06bH
	DB	0a7H
	DB	09aH
	DB	06fH
	DB	08dH
	DB	09aH
	DB	09aH
	DB	05eH
	DB	08aH
	DB	0b6H
	DB	09aH
_INIT_CU_QP_DELTA_ABS DB 09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+2
_INIT_SIG_CG_FLAG DB 079H
	DB	08cH
	DB	03dH
	DB	09aH
	DB	079H
	DB	08cH
	DB	03dH
	DB	09aH
	DB	05bH
	DB	0abH
	DB	086H
	DB	08dH
_INIT_SIG_FLAG DB 0aaH
	DB	09aH
	DB	08bH
	DB	099H
	DB	08bH
	DB	07bH
	DB	07bH
	DB	03fH
	DB	07cH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0aaH
	DB	099H
	DB	08aH
	DB	08aH
	DB	07aH
	DB	079H
	DB	07aH
	DB	079H
	DB	0a7H
	DB	097H
	DB	0b7H
	DB	08cH
	DB	097H
	DB	0b7H
	DB	08cH
	DB	09bH
	DB	09aH
	DB	08bH
	DB	099H
	DB	08bH
	DB	07bH
	DB	07bH
	DB	03fH
	DB	099H
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0a6H
	DB	0b7H
	DB	08cH
	DB	088H
	DB	099H
	DB	09aH
	DB	0aaH
	DB	099H
	DB	07bH
	DB	07bH
	DB	06bH
	DB	079H
	DB	06bH
	DB	079H
	DB	0a7H
	DB	097H
	DB	0b7H
	DB	08cH
	DB	097H
	DB	0b7H
	DB	08cH
	DB	06fH
	DB	06fH
	DB	07dH
	DB	06eH
	DB	06eH
	DB	05eH
	DB	07cH
	DB	06cH
	DB	07cH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	06bH
	DB	07dH
	DB	08dH
	DB	0b3H
	DB	099H
	DB	07dH
	DB	08cH
	DB	08bH
	DB	0b6H
	DB	0b6H
	DB	098H
	DB	088H
	DB	098H
	DB	088H
	DB	099H
	DB	088H
	DB	08bH
	DB	06fH
	DB	088H
	DB	08bH
	DB	06fH
	ORG $+2
_INIT_LAST DB	07dH
	DB	06eH
	DB	07cH
	DB	06eH
	DB	05fH
	DB	05eH
	DB	07dH
	DB	06fH
	DB	06fH
	DB	04fH
	DB	07dH
	DB	07eH
	DB	06fH
	DB	06fH
	DB	04fH
	DB	06cH
	DB	07bH
	DB	05dH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	07dH
	DB	06eH
	DB	05eH
	DB	06eH
	DB	05fH
	DB	04fH
	DB	07dH
	DB	06fH
	DB	06eH
	DB	04eH
	DB	06eH
	DB	06fH
	DB	06fH
	DB	05fH
	DB	05eH
	DB	06cH
	DB	07bH
	DB	06cH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	06eH
	DB	06eH
	DB	07cH
	DB	07dH
	DB	08cH
	DB	099H
	DB	07dH
	DB	07fH
	DB	08cH
	DB	06dH
	DB	06fH
	DB	08fH
	DB	07fH
	DB	06fH
	DB	04fH
	DB	06cH
	DB	07bH
	DB	03fH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	DB	09aH
	ORG $+2
_INIT_ABS_FLAG DB 06bH
	DB	0a7H
	DB	05bH
	DB	06bH
	DB	06bH
	DB	0a7H
	DB	06bH
	DB	0a7H
	DB	05bH
	DB	07aH
	DB	06bH
	DB	0a7H
	DB	08aH
	DB	099H
	DB	088H
	DB	0a7H
	DB	098H
	DB	098H
	ORG $+2
_INIT_ONE_FLAG DB 09aH
	DB	0c4H
	DB	0a7H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	0b6H
	DB	086H
	DB	095H
	DB	088H
	DB	099H
	DB	079H
	DB	088H
	DB	07aH
	DB	0a9H
	DB	0d0H
	DB	0a6H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	09aH
	DB	0c4H
	DB	0c4H
	DB	0a7H
	DB	09aH
	DB	098H
	DB	0a7H
	DB	0b6H
	DB	0b6H
	DB	086H
	DB	095H
	DB	088H
	DB	099H
	DB	079H
	DB	088H
	DB	089H
	DB	0a9H
	DB	0c2H
	DB	0a6H
	DB	0a7H
	DB	09aH
	DB	0a7H
	DB	089H
	DB	0b6H
	DB	08cH
	DB	05cH
	DB	089H
	DB	08aH
	DB	08cH
	DB	098H
	DB	08aH
	DB	08bH
	DB	099H
	DB	04aH
	DB	095H
	DB	05cH
	DB	08bH
	DB	06bH
	DB	07aH
	DB	098H
	DB	08cH
	DB	0b3H
	DB	0a6H
	DB	0b6H
	DB	08cH
	DB	0e3H
	DB	07aH
	DB	0c5H
_INIT_TRANSFORMSKIP_FLAG DB 08bH
	DB	08bH
	DB	08bH
	DB	08bH
	DB	08bH
	DB	08bH
CONST	ENDS
PUBLIC	_kvz_ctx_init
PUBLIC	_kvz_init_contexts
PUBLIC	_kvz_context_copy
PUBLIC	_kvz_context_calc_pattern_sig_ctx
PUBLIC	_kvz_context_get_sig_coeff_group
PUBLIC	_kvz_context_get_sig_ctx_inc
PUBLIC	__JustMyCode_Default
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_context_get_sig_ctx_inc
_TEXT	SEGMENT
tv76 = -328						; size = 4
tv164 = -324						; size = 4
tv95 = -324						; size = 4
tv90 = -324						; size = 4
tv77 = -324						; size = 4
tv171 = -320						; size = 4
tv163 = -320						; size = 4
tv94 = -320						; size = 4
tv89 = -320						; size = 4
tv73 = -320						; size = 4
_pos_y_in_subset$ = -120				; size = 4
_pos_x_in_subset$ = -108				; size = 4
_offset$ = -96						; size = 4
_cnt$ = -84						; size = 4
_ctx_ind_map$ = -72					; size = 64
__$ArrayPad$ = -4					; size = 4
_pattern_sig_ctx$ = 8					; size = 4
_scan_idx$ = 12						; size = 4
_pos_x$ = 16						; size = 4
_pos_y$ = 20						; size = 4
_block_type$ = 24					; size = 4
_texture_type$ = 28					; size = 1
_kvz_context_get_sig_ctx_inc PROC			; COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 369  :   const int32_t ctx_ind_map[16] =

	mov	DWORD PTR _ctx_ind_map$[ebp], 0
	mov	DWORD PTR _ctx_ind_map$[ebp+4], 1
	mov	DWORD PTR _ctx_ind_map$[ebp+8], 4
	mov	DWORD PTR _ctx_ind_map$[ebp+12], 5
	mov	DWORD PTR _ctx_ind_map$[ebp+16], 2
	mov	DWORD PTR _ctx_ind_map$[ebp+20], 3
	mov	DWORD PTR _ctx_ind_map$[ebp+24], 4
	mov	DWORD PTR _ctx_ind_map$[ebp+28], 5
	mov	DWORD PTR _ctx_ind_map$[ebp+32], 6
	mov	DWORD PTR _ctx_ind_map$[ebp+36], 6
	mov	DWORD PTR _ctx_ind_map$[ebp+40], 8
	mov	DWORD PTR _ctx_ind_map$[ebp+44], 8
	mov	DWORD PTR _ctx_ind_map$[ebp+48], 7
	mov	DWORD PTR _ctx_ind_map$[ebp+52], 7
	mov	DWORD PTR _ctx_ind_map$[ebp+56], 8
	mov	DWORD PTR _ctx_ind_map$[ebp+60], 8

; 370  :   {
; 371  :     0, 1, 4, 5,
; 372  :     2, 3, 4, 5,
; 373  :     6, 6, 8, 8,
; 374  :     7, 7, 8, 8
; 375  :   };
; 376  : 
; 377  :   int32_t cnt,offset,pos_x_in_subset,pos_y_in_subset;
; 378  : 
; 379  :   if (pos_x + pos_y == 0) return 0;

	mov	eax, DWORD PTR _pos_x$[ebp]
	add	eax, DWORD PTR _pos_y$[ebp]
	jne	SHORT $LN2@kvz_contex
	xor	eax, eax
	jmp	$LN1@kvz_contex
$LN2@kvz_contex:

; 380  : 
; 381  :   if (block_type == 2) return ctx_ind_map[4 * pos_y + pos_x];

	cmp	DWORD PTR _block_type$[ebp], 2
	jne	SHORT $LN3@kvz_contex
	mov	eax, DWORD PTR _pos_y$[ebp]
	mov	ecx, DWORD PTR _pos_x$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _ctx_ind_map$[ebp+edx*4]
	jmp	$LN1@kvz_contex
$LN3@kvz_contex:

; 382  : 
; 383  :   offset = (block_type == 3) ? ((scan_idx == SCAN_DIAG) ? 9 : 15) : ((texture_type == 0) ? 21 : 12);

	cmp	DWORD PTR _block_type$[ebp], 3
	jne	SHORT $LN15@kvz_contex
	cmp	DWORD PTR _scan_idx$[ebp], 0
	jne	SHORT $LN11@kvz_contex
	mov	DWORD PTR tv73[ebp], 9
	jmp	SHORT $LN12@kvz_contex
$LN11@kvz_contex:
	mov	DWORD PTR tv73[ebp], 15			; 0000000fH
$LN12@kvz_contex:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@kvz_contex
$LN15@kvz_contex:
	movsx	ecx, BYTE PTR _texture_type$[ebp]
	test	ecx, ecx
	jne	SHORT $LN13@kvz_contex
	mov	DWORD PTR tv76[ebp], 21			; 00000015H
	jmp	SHORT $LN14@kvz_contex
$LN13@kvz_contex:
	mov	DWORD PTR tv76[ebp], 12			; 0000000cH
$LN14@kvz_contex:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN16@kvz_contex:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _offset$[ebp], eax

; 384  :   pos_x_in_subset = pos_x - ((pos_x>>2)<<2);

	mov	eax, DWORD PTR _pos_x$[ebp]
	sar	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _pos_x$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _pos_x_in_subset$[ebp], ecx

; 385  :   pos_y_in_subset = pos_y - ((pos_y>>2)<<2);

	mov	eax, DWORD PTR _pos_y$[ebp]
	sar	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _pos_y$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _pos_y_in_subset$[ebp], ecx

; 386  : 
; 387  :   if (pattern_sig_ctx == 0) {

	cmp	DWORD PTR _pattern_sig_ctx$[ebp], 0
	jne	SHORT $LN4@kvz_contex

; 388  :     cnt = (pos_x_in_subset + pos_y_in_subset <= 2) ? ((pos_x_in_subset + pos_y_in_subset==0) ? 2 : 1) : 0;

	mov	eax, DWORD PTR _pos_x_in_subset$[ebp]
	add	eax, DWORD PTR _pos_y_in_subset$[ebp]
	cmp	eax, 2
	jg	SHORT $LN19@kvz_contex
	mov	ecx, DWORD PTR _pos_x_in_subset$[ebp]
	add	ecx, DWORD PTR _pos_y_in_subset$[ebp]
	jne	SHORT $LN17@kvz_contex
	mov	DWORD PTR tv89[ebp], 2
	jmp	SHORT $LN18@kvz_contex
$LN17@kvz_contex:
	mov	DWORD PTR tv89[ebp], 1
$LN18@kvz_contex:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN20@kvz_contex
$LN19@kvz_contex:
	mov	DWORD PTR tv90[ebp], 0
$LN20@kvz_contex:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _cnt$[ebp], eax
	jmp	$LN5@kvz_contex
$LN4@kvz_contex:

; 389  :   } else if (pattern_sig_ctx==1) {

	cmp	DWORD PTR _pattern_sig_ctx$[ebp], 1
	jne	SHORT $LN6@kvz_contex

; 390  :     cnt = (pos_y_in_subset <= 1) ? ((pos_y_in_subset == 0) ? 2 : 1) : 0;

	cmp	DWORD PTR _pos_y_in_subset$[ebp], 1
	jg	SHORT $LN23@kvz_contex
	cmp	DWORD PTR _pos_y_in_subset$[ebp], 0
	jne	SHORT $LN21@kvz_contex
	mov	DWORD PTR tv94[ebp], 2
	jmp	SHORT $LN22@kvz_contex
$LN21@kvz_contex:
	mov	DWORD PTR tv94[ebp], 1
$LN22@kvz_contex:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN24@kvz_contex
$LN23@kvz_contex:
	mov	DWORD PTR tv95[ebp], 0
$LN24@kvz_contex:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _cnt$[ebp], ecx
	jmp	SHORT $LN5@kvz_contex
$LN6@kvz_contex:

; 391  :   } else if (pattern_sig_ctx==2) {

	cmp	DWORD PTR _pattern_sig_ctx$[ebp], 2
	jne	SHORT $LN8@kvz_contex

; 392  :     cnt = (pos_x_in_subset <= 1) ? ((pos_x_in_subset == 0) ? 2 : 1) : 0;

	cmp	DWORD PTR _pos_x_in_subset$[ebp], 1
	jg	SHORT $LN27@kvz_contex
	cmp	DWORD PTR _pos_x_in_subset$[ebp], 0
	jne	SHORT $LN25@kvz_contex
	mov	DWORD PTR tv163[ebp], 2
	jmp	SHORT $LN26@kvz_contex
$LN25@kvz_contex:
	mov	DWORD PTR tv163[ebp], 1
$LN26@kvz_contex:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN28@kvz_contex
$LN27@kvz_contex:
	mov	DWORD PTR tv164[ebp], 0
$LN28@kvz_contex:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR _cnt$[ebp], ecx

; 393  :   } else {

	jmp	SHORT $LN5@kvz_contex
$LN8@kvz_contex:

; 394  :     cnt = 2;

	mov	DWORD PTR _cnt$[ebp], 2
$LN5@kvz_contex:

; 395  :   }
; 396  :   return (( texture_type == 0 && ((pos_x>>2) + (pos_y>>2)) > 0 ) ? 3 : 0) + offset + cnt;

	movsx	eax, BYTE PTR _texture_type$[ebp]
	test	eax, eax
	jne	SHORT $LN29@kvz_contex
	mov	ecx, DWORD PTR _pos_x$[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _pos_y$[ebp]
	sar	edx, 2
	add	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN29@kvz_contex
	mov	DWORD PTR tv171[ebp], 3
	jmp	SHORT $LN30@kvz_contex
$LN29@kvz_contex:
	mov	DWORD PTR tv171[ebp], 0
$LN30@kvz_contex:
	mov	eax, DWORD PTR tv171[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _cnt$[ebp]
$LN1@kvz_contex:

; 397  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@kvz_contex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN33@kvz_contex:
	DD	1
	DD	$LN32@kvz_contex
$LN32@kvz_contex:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN31@kvz_contex
$LN31@kvz_contex:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
_kvz_context_get_sig_ctx_inc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_context_get_sig_coeff_group
_TEXT	SEGMENT
tv85 = -220						; size = 4
tv82 = -220						; size = 4
tv73 = -220						; size = 4
_uiLower$ = -20						; size = 4
_uiRight$ = -8						; size = 4
_sig_coeff_group_flag$ = 8				; size = 4
_pos_x$ = 12						; size = 4
_pos_y$ = 16						; size = 4
_width$ = 20						; size = 4
_kvz_context_get_sig_coeff_group PROC			; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 320  :   uint32_t uiRight = 0;

	mov	DWORD PTR _uiRight$[ebp], 0

; 321  :   uint32_t uiLower = 0;

	mov	DWORD PTR _uiLower$[ebp], 0

; 322  :   width >>= 2;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 2
	mov	DWORD PTR _width$[ebp], eax

; 323  :   if (pos_x < (uint32_t)width - 1) uiRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _pos_x$[ebp], eax
	jae	SHORT $LN2@kvz_contex
	mov	eax, DWORD PTR _pos_y$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _pos_x$[ebp]
	mov	ecx, DWORD PTR _sig_coeff_group_flag$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 0
	je	SHORT $LN5@kvz_contex
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@kvz_contex
$LN5@kvz_contex:
	mov	DWORD PTR tv73[ebp], 0
$LN6@kvz_contex:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _uiRight$[ebp], edx
$LN2@kvz_contex:

; 324  :   if (pos_y < (uint32_t)width - 1) uiLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _pos_y$[ebp], eax
	jae	SHORT $LN3@kvz_contex
	mov	eax, DWORD PTR _pos_y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _pos_x$[ebp]
	mov	ecx, DWORD PTR _sig_coeff_group_flag$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN7@kvz_contex
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN8@kvz_contex
$LN7@kvz_contex:
	mov	DWORD PTR tv82[ebp], 0
$LN8@kvz_contex:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _uiLower$[ebp], edx
$LN3@kvz_contex:

; 325  : 
; 326  :   return uiRight || uiLower;

	cmp	DWORD PTR _uiRight$[ebp], 0
	jne	SHORT $LN9@kvz_contex
	cmp	DWORD PTR _uiLower$[ebp], 0
	jne	SHORT $LN9@kvz_contex
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN10@kvz_contex
$LN9@kvz_contex:
	mov	DWORD PTR tv85[ebp], 1
$LN10@kvz_contex:
	mov	eax, DWORD PTR tv85[ebp]

; 327  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_context_get_sig_coeff_group ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_context_calc_pattern_sig_ctx
_TEXT	SEGMENT
tv83 = -220						; size = 4
tv74 = -220						; size = 4
_sigLower$ = -20					; size = 4
_sigRight$ = -8						; size = 4
_sig_coeff_group_flag$ = 8				; size = 4
_pos_x$ = 12						; size = 4
_pos_y$ = 16						; size = 4
_width$ = 20						; size = 4
_kvz_context_calc_pattern_sig_ctx PROC			; COMDAT

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 341  :   uint32_t sigRight = 0;

	mov	DWORD PTR _sigRight$[ebp], 0

; 342  :   uint32_t sigLower = 0;

	mov	DWORD PTR _sigLower$[ebp], 0

; 343  : 
; 344  :   if (width == 4) return -1;

	cmp	DWORD PTR _width$[ebp], 4
	jne	SHORT $LN2@kvz_contex
	or	eax, -1
	jmp	$LN1@kvz_contex
$LN2@kvz_contex:

; 345  : 
; 346  :   width >>= 2;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 2
	mov	DWORD PTR _width$[ebp], eax

; 347  :   if (pos_x < (uint32_t)width - 1) sigRight = (sig_coeff_group_flag[pos_y * width + pos_x + 1] != 0);

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _pos_x$[ebp], eax
	jae	SHORT $LN3@kvz_contex
	mov	eax, DWORD PTR _pos_y$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _pos_x$[ebp]
	mov	ecx, DWORD PTR _sig_coeff_group_flag$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 0
	je	SHORT $LN6@kvz_contex
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@kvz_contex
$LN6@kvz_contex:
	mov	DWORD PTR tv74[ebp], 0
$LN7@kvz_contex:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _sigRight$[ebp], edx
$LN3@kvz_contex:

; 348  :   if (pos_y < (uint32_t)width - 1) sigLower = (sig_coeff_group_flag[(pos_y  + 1 ) * width + pos_x] != 0);

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _pos_y$[ebp], eax
	jae	SHORT $LN4@kvz_contex
	mov	eax, DWORD PTR _pos_y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _pos_x$[ebp]
	mov	ecx, DWORD PTR _sig_coeff_group_flag$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN8@kvz_contex
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN9@kvz_contex
$LN8@kvz_contex:
	mov	DWORD PTR tv83[ebp], 0
$LN9@kvz_contex:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _sigLower$[ebp], edx
$LN4@kvz_contex:

; 349  : 
; 350  :   return sigRight + (sigLower<<1);

	mov	eax, DWORD PTR _sigLower$[ebp]
	mov	ecx, DWORD PTR _sigRight$[ebp]
	lea	eax, DWORD PTR [ecx+eax*2]
$LN1@kvz_contex:

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_context_calc_pattern_sig_ctx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_context_copy
_TEXT	SEGMENT
_source_cabac$ = -20					; size = 4
_target_cabac$ = -8					; size = 4
_target_state$ = 8					; size = 4
_source_state$ = 12					; size = 4
_kvz_context_copy PROC					; COMDAT

; 305  : void kvz_context_copy(encoder_state_t * const target_state, const encoder_state_t * const source_state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 306  :   cabac_data_t * const target_cabac = &target_state->cabac;

	mov	eax, DWORD PTR _target_state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _target_cabac$[ebp], eax

; 307  :   const cabac_data_t * const source_cabac = &source_state->cabac;

	mov	eax, DWORD PTR _source_state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _source_cabac$[ebp], eax

; 308  :   
; 309  :   if (target_cabac == source_cabac) return;

	mov	eax, DWORD PTR _target_cabac$[ebp]
	cmp	eax, DWORD PTR _source_cabac$[ebp]
	jne	SHORT $LN2@kvz_contex
	jmp	SHORT $LN1@kvz_contex
$LN2@kvz_contex:

; 310  : 
; 311  :   target_cabac->ctx = source_cabac->ctx;

	mov	esi, DWORD PTR _source_cabac$[ebp]
	add	esi, 32					; 00000020H
	mov	edi, DWORD PTR _target_cabac$[ebp]
	add	edi, 32					; 00000020H
	mov	ecx, 46					; 0000002eH
	rep movsd
$LN1@kvz_contex:

; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_context_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_init_contexts
_TEXT	SEGMENT
_i$ = -20						; size = 2
_cabac$ = -8						; size = 4
_state$ = 8						; size = 4
_QP$ = 12						; size = 1
_slice$ = 16						; size = 1
_kvz_init_contexts PROC					; COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 223  :   cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 224  :   uint16_t i;
; 225  : 
; 226  :   // Initialize contexts
; 227  :   kvz_ctx_init(&cabac->ctx.transform_skip_model_luma, QP, INIT_TRANSFORMSKIP_FLAG[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_TRANSFORMSKIP_FLAG[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 214				; 000000d6H
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 228  :   kvz_ctx_init(&cabac->ctx.transform_skip_model_chroma, QP, INIT_TRANSFORMSKIP_FLAG[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_TRANSFORMSKIP_FLAG[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	add	ecx, 215				; 000000d7H
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 229  : 
; 230  :   kvz_ctx_init(&cabac->ctx.sao_merge_flag_model, QP, INIT_SAO_MERGE_FLAG[slice]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, BYTE PTR _INIT_SAO_MERGE_FLAG[eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 231  :   kvz_ctx_init(&cabac->ctx.sao_type_idx_model, QP, INIT_SAO_TYPE_IDX[slice]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, BYTE PTR _INIT_SAO_TYPE_IDX[eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 33					; 00000021H
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 232  : 
; 233  :   kvz_ctx_init(&cabac->ctx.cu_merge_flag_ext_model, QP, INIT_MERGE_FLAG_EXT[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_MERGE_FLAG_EXT[edx+eax]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 205				; 000000cdH
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 234  :   kvz_ctx_init(&cabac->ctx.cu_merge_idx_ext_model, QP, INIT_MERGE_IDX_EXT[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_MERGE_IDX_EXT[edx+eax]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 235  :   kvz_ctx_init(&cabac->ctx.cu_pred_mode_model, QP, INIT_PRED_MODE[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_PRED_MODE[edx+eax]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 200				; 000000c8H
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 236  :   kvz_ctx_init(&cabac->ctx.cu_transquant_bypass, QP, INIT_CU_TRANSQUANT_BYPASS[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_CU_TRANSQUANT_BYPASS[edx+eax]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 206				; 000000ceH
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 237  : 
; 238  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[0], QP, INIT_SKIP_FLAG[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR _INIT_SKIP_FLAG[ecx+eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+201]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 239  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[1], QP, INIT_SKIP_FLAG[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR _INIT_SKIP_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+201]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 240  :   kvz_ctx_init(&cabac->ctx.cu_skip_flag_model[2], QP, INIT_SKIP_FLAG[slice][2]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR _INIT_SKIP_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+201]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 241  : 
; 242  :   kvz_ctx_init(&cabac->ctx.split_flag_model[0], QP, INIT_SPLIT_FLAG[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR _INIT_SPLIT_FLAG[ecx+eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+34]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 243  :   kvz_ctx_init(&cabac->ctx.split_flag_model[1], QP, INIT_SPLIT_FLAG[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR _INIT_SPLIT_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+34]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 244  :   kvz_ctx_init(&cabac->ctx.split_flag_model[2], QP, INIT_SPLIT_FLAG[slice][2]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR _INIT_SPLIT_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+34]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 245  : 
; 246  :   kvz_ctx_init(&cabac->ctx.intra_mode_model, QP, INIT_INTRA_PRED_MODE[slice]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, BYTE PTR _INIT_INTRA_PRED_MODE[eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 37					; 00000025H
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 247  : 
; 248  :   kvz_ctx_init(&cabac->ctx.chroma_pred_model[0], QP, INIT_CHROMA_PRED_MODE[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_CHROMA_PRED_MODE[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+38]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 249  :   kvz_ctx_init(&cabac->ctx.chroma_pred_model[1], QP, INIT_CHROMA_PRED_MODE[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_CHROMA_PRED_MODE[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+38]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 250  : 
; 251  :   kvz_ctx_init(&cabac->ctx.cu_abs_model_chroma[0], QP, INIT_ABS_FLAG[slice][4]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 6
	mov	edx, 1
	shl	edx, 2
	movzx	eax, BYTE PTR _INIT_ABS_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+198]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 252  :   kvz_ctx_init(&cabac->ctx.cu_abs_model_chroma[1], QP, INIT_ABS_FLAG[slice][5]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 6
	mov	edx, 1
	imul	eax, edx, 5
	movzx	ecx, BYTE PTR _INIT_ABS_FLAG[ecx+eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+198]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 253  : 
; 254  :   //TODO: ignore P/B contexts on intra frame
; 255  :   kvz_ctx_init(&cabac->ctx.cu_qt_root_cbf_model, QP, INIT_QT_ROOT_CBF[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_QT_ROOT_CBF[edx+eax]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 213				; 000000d5H
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 256  : 
; 257  :   kvz_ctx_init(&cabac->ctx.cu_mvd_model[0], QP, INIT_MVD[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_MVD[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+207]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 258  :   kvz_ctx_init(&cabac->ctx.cu_mvd_model[1], QP, INIT_MVD[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_MVD[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+207]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 259  :   kvz_ctx_init(&cabac->ctx.cu_ref_pic_model[0], QP, INIT_REF_PIC[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_REF_PIC[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+209]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 260  :   kvz_ctx_init(&cabac->ctx.cu_ref_pic_model[1], QP, INIT_REF_PIC[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_REF_PIC[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+209]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 261  :   kvz_ctx_init(&cabac->ctx.mvp_idx_model[0], QP, INIT_MVP_IDX[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_MVP_IDX[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+211]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 262  :   kvz_ctx_init(&cabac->ctx.mvp_idx_model[1], QP, INIT_MVP_IDX[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_MVP_IDX[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+211]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 263  : 
; 264  :   kvz_ctx_init(&cabac->ctx.cu_qp_delta_abs[0], QP, INIT_CU_QP_DELTA_ABS[slice][0]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR _INIT_CU_QP_DELTA_ABS[edx+eax*2]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+56]
	push	edx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 265  :   kvz_ctx_init(&cabac->ctx.cu_qp_delta_abs[1], QP, INIT_CU_QP_DELTA_ABS[slice][1]);

	movsx	eax, BYTE PTR _slice$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR _INIT_CU_QP_DELTA_ABS[ecx+eax*2]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+56]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 266  : 
; 267  :   for (i = 0; i < 4; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN4@kvz_init_c
$LN2@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN4@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 4
	jge	$LN3@kvz_init_c

; 268  :     kvz_ctx_init(&cabac->ctx.cu_sig_coeff_group_model[i], QP, INIT_SIG_CG_FLAG[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _INIT_SIG_CG_FLAG[ecx+eax*4]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+64]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 269  :     kvz_ctx_init(&cabac->ctx.cu_abs_model_luma[i], QP, INIT_ABS_FLAG[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 6
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_ABS_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+194]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 270  :     kvz_ctx_init(&cabac->ctx.part_size_model[i], QP, INIT_PART_SIZE[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _INIT_PART_SIZE[ecx+eax*4]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+60]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 271  :   }

	jmp	$LN2@kvz_init_c
$LN3@kvz_init_c:

; 272  :   for (i = 0; i < 3; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN7@kvz_init_c
$LN5@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN7@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 3
	jge	SHORT $LN6@kvz_init_c

; 273  :     kvz_ctx_init(&cabac->ctx.trans_subdiv_model[i], QP, INIT_TRANS_SUBDIV_FLAG[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 3
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_TRANS_SUBDIV_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+45]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 274  :   }

	jmp	SHORT $LN5@kvz_init_c
$LN6@kvz_init_c:

; 275  :   for (i = 0; i < 4; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN10@kvz_init_c
$LN8@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN10@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 4
	jge	SHORT $LN9@kvz_init_c

; 276  :     kvz_ctx_init(&cabac->ctx.qt_cbf_model_luma[i], QP, INIT_QT_CBF[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _INIT_QT_CBF[ecx+eax*8]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 277  :     kvz_ctx_init(&cabac->ctx.qt_cbf_model_chroma[i], QP, INIT_QT_CBF[slice][i + 4]);

	movsx	eax, BYTE PTR _slice$[ebp]
	movzx	ecx, WORD PTR _i$[ebp]
	add	ecx, 4
	movzx	edx, BYTE PTR _INIT_QT_CBF[ecx+eax*8]
	push	edx
	movsx	eax, BYTE PTR _QP$[ebp]
	push	eax
	movzx	ecx, WORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+52]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 278  :   }

	jmp	SHORT $LN8@kvz_init_c
$LN9@kvz_init_c:

; 279  : 
; 280  :   for (i = 0; i < 5; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN13@kvz_init_c
$LN11@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN13@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 5
	jge	SHORT $LN12@kvz_init_c

; 281  :     kvz_ctx_init(&cabac->ctx.inter_dir[i], QP, INIT_INTER_DIR[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 5
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_INTER_DIR[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+40]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 282  :   }

	jmp	SHORT $LN11@kvz_init_c
$LN12@kvz_init_c:

; 283  : 
; 284  :   for (i = 0; i < 8; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN16@kvz_init_c
$LN14@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN16@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 8
	jge	SHORT $LN15@kvz_init_c

; 285  :     kvz_ctx_init(&cabac->ctx.cu_one_model_chroma[i], QP, INIT_ONE_FLAG[slice][i+16]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 24
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_ONE_FLAG[ecx+edx+16]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+186]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 286  :   }

	jmp	SHORT $LN14@kvz_init_c
$LN15@kvz_init_c:

; 287  : 
; 288  :   for (i = 0; i < 15; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN19@kvz_init_c
$LN17@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN19@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 15					; 0000000fH
	jge	$LN18@kvz_init_c

; 289  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_y_luma[i], QP, INIT_LAST[slice][i] );

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 30
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_LAST[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+110]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 290  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_x_luma[i], QP, INIT_LAST[slice][i] );

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 30
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_LAST[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+140]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 291  : 
; 292  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_y_chroma[i], QP, INIT_LAST[slice][i+15] );

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 30
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_LAST[ecx+edx+15]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+125]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 293  :     kvz_ctx_init(&cabac->ctx.cu_ctx_last_x_chroma[i], QP, INIT_LAST[slice][i+15] );

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 30
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_LAST[ecx+edx+15]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+155]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 294  : 
; 295  :     kvz_ctx_init(&cabac->ctx.cu_one_model_luma[i], QP, INIT_ONE_FLAG[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 24
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_ONE_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+170]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 296  :   }

	jmp	$LN17@kvz_init_c
$LN18@kvz_init_c:

; 297  :   kvz_ctx_init(&cabac->ctx.cu_one_model_luma[15], QP, INIT_ONE_FLAG[slice][15]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 24
	mov	edx, 1
	imul	eax, edx, 15
	movzx	ecx, BYTE PTR _INIT_ONE_FLAG[ecx+eax]
	push	ecx
	movsx	edx, BYTE PTR _QP$[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+170]
	push	eax
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 298  : 
; 299  :   for (i = 0; i < 27; i++) {

	xor	eax, eax
	mov	WORD PTR _i$[ebp], ax
	jmp	SHORT $LN22@kvz_init_c
$LN20@kvz_init_c:
	mov	ax, WORD PTR _i$[ebp]
	add	ax, 1
	mov	WORD PTR _i$[ebp], ax
$LN22@kvz_init_c:
	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1@kvz_init_c

; 300  :     kvz_ctx_init(&cabac->ctx.cu_sig_model_luma[i], QP, INIT_SIG_FLAG[slice][i]);

	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 42
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_SIG_FLAG[ecx+edx]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+68]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH

; 301  :     if(i < 15) kvz_ctx_init(&cabac->ctx.cu_sig_model_chroma[i], QP, INIT_SIG_FLAG[slice][i+27]);

	movzx	eax, WORD PTR _i$[ebp]
	cmp	eax, 15					; 0000000fH
	jge	SHORT $LN23@kvz_init_c
	movsx	eax, BYTE PTR _slice$[ebp]
	imul	ecx, eax, 42
	movzx	edx, WORD PTR _i$[ebp]
	movzx	eax, BYTE PTR _INIT_SIG_FLAG[ecx+edx+27]
	push	eax
	movsx	ecx, BYTE PTR _QP$[ebp]
	push	ecx
	movzx	edx, WORD PTR _i$[ebp]
	mov	eax, DWORD PTR _cabac$[ebp]
	lea	ecx, DWORD PTR [eax+edx+95]
	push	ecx
	call	_kvz_ctx_init
	add	esp, 12					; 0000000cH
$LN23@kvz_init_c:

; 302  :   }

	jmp	SHORT $LN20@kvz_init_c
$LN1@kvz_init_c:

; 303  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_init_contexts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\context.c
;	COMDAT _kvz_ctx_init
_TEXT	SEGMENT
tv87 = -240						; size = 4
tv86 = -236						; size = 4
tv77 = -232						; size = 4
_init_state$ = -32					; size = 4
_offset$ = -20						; size = 4
_slope$ = -8						; size = 4
_ctx$ = 8						; size = 4
_qp$ = 12						; size = 4
_init_value$ = 16					; size = 4
_kvz_ctx_init PROC					; COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5892C5DB_context@c
	call	@__CheckForDebuggerJustMyCode@4

; 204  :   int slope = (init_value >> 4) * 5 - 45;

	mov	eax, DWORD PTR _init_value$[ebp]
	shr	eax, 4
	imul	ecx, eax, 5
	sub	ecx, 45					; 0000002dH
	mov	DWORD PTR _slope$[ebp], ecx

; 205  :   int offset = ((init_value & 15) << 3) - 16;

	mov	eax, DWORD PTR _init_value$[ebp]
	and	eax, 15					; 0000000fH
	lea	ecx, DWORD PTR [eax*8-16]
	mov	DWORD PTR _offset$[ebp], ecx

; 206  :   int init_state = MIN(MAX(1, ((slope * (int)qp) >> 4) + offset), 126);

	mov	eax, DWORD PTR _slope$[ebp]
	imul	eax, DWORD PTR _qp$[ebp]
	sar	eax, 4
	add	eax, DWORD PTR _offset$[ebp]
	cmp	eax, 1
	jge	SHORT $LN5@kvz_ctx_in
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN6@kvz_ctx_in
$LN5@kvz_ctx_in:
	mov	ecx, DWORD PTR _slope$[ebp]
	imul	ecx, DWORD PTR _qp$[ebp]
	sar	ecx, 4
	add	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN6@kvz_ctx_in:
	cmp	DWORD PTR tv77[ebp], 126		; 0000007eH
	jge	SHORT $LN9@kvz_ctx_in
	mov	edx, DWORD PTR _slope$[ebp]
	imul	edx, DWORD PTR _qp$[ebp]
	sar	edx, 4
	add	edx, DWORD PTR _offset$[ebp]
	cmp	edx, 1
	jge	SHORT $LN7@kvz_ctx_in
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN8@kvz_ctx_in
$LN7@kvz_ctx_in:
	mov	eax, DWORD PTR _slope$[ebp]
	imul	eax, DWORD PTR _qp$[ebp]
	sar	eax, 4
	add	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv86[ebp], eax
$LN8@kvz_ctx_in:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN10@kvz_ctx_in
$LN9@kvz_ctx_in:
	mov	DWORD PTR tv87[ebp], 126		; 0000007eH
$LN10@kvz_ctx_in:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _init_state$[ebp], edx

; 207  : 
; 208  :   if (init_state >= 64) {

	cmp	DWORD PTR _init_state$[ebp], 64		; 00000040H
	jl	SHORT $LN2@kvz_ctx_in

; 209  :     ctx->uc_state = ((init_state - 64) << 1) + 1;

	mov	eax, DWORD PTR _init_state$[ebp]
	lea	ecx, DWORD PTR [eax+eax-127]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [edx], cl

; 210  :   } else {

	jmp	SHORT $LN1@kvz_ctx_in
$LN2@kvz_ctx_in:

; 211  :     ctx->uc_state = (63 - init_state) << 1;

	mov	eax, 63					; 0000003fH
	sub	eax, DWORD PTR _init_state$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	BYTE PTR [ecx], al
$LN1@kvz_ctx_in:

; 212  :   }
; 213  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_ctx_init ENDP
_TEXT	ENDS
END
