; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_g_auc_next_state_mps
PUBLIC	_kvz_g_auc_next_state_lps
PUBLIC	_kvz_g_auc_lpst_table
PUBLIC	_kvz_g_auc_renorm_table
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__7575154B_cabac@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_kvz_g_auc_next_state_mps DB 02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
_kvz_g_auc_next_state_lps DB 01H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	04H
	DB	05H
	DB	08H
	DB	09H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	012H
	DB	013H
	DB	016H
	DB	017H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01aH
	DB	01bH
	DB	01eH
	DB	01fH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	020H
	DB	021H
	DB	024H
	DB	025H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	026H
	DB	027H
	DB	02aH
	DB	02bH
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03cH
	DB	03dH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	042H
	DB	043H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	046H
	DB	047H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	048H
	DB	049H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04aH
	DB	04bH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04cH
	DB	04dH
	DB	07eH
	DB	07fH
_kvz_g_auc_lpst_table DB 080H
	DB	0b0H
	DB	0d0H
	DB	0f0H
	DB	080H
	DB	0a7H
	DB	0c5H
	DB	0e3H
	DB	080H
	DB	09eH
	DB	0bbH
	DB	0d8H
	DB	07bH
	DB	096H
	DB	0b2H
	DB	0cdH
	DB	074H
	DB	08eH
	DB	0a9H
	DB	0c3H
	DB	06fH
	DB	087H
	DB	0a0H
	DB	0b9H
	DB	069H
	DB	080H
	DB	098H
	DB	0afH
	DB	064H
	DB	07aH
	DB	090H
	DB	0a6H
	DB	05fH
	DB	074H
	DB	089H
	DB	09eH
	DB	05aH
	DB	06eH
	DB	082H
	DB	096H
	DB	055H
	DB	068H
	DB	07bH
	DB	08eH
	DB	051H
	DB	063H
	DB	075H
	DB	087H
	DB	04dH
	DB	05eH
	DB	06fH
	DB	080H
	DB	049H
	DB	059H
	DB	069H
	DB	07aH
	DB	045H
	DB	055H
	DB	064H
	DB	074H
	DB	042H
	DB	050H
	DB	05fH
	DB	06eH
	DB	03eH
	DB	04cH
	DB	05aH
	DB	068H
	DB	03bH
	DB	048H
	DB	056H
	DB	063H
	DB	038H
	DB	045H
	DB	051H
	DB	05eH
	DB	035H
	DB	041H
	DB	04dH
	DB	059H
	DB	033H
	DB	03eH
	DB	049H
	DB	055H
	DB	030H
	DB	03bH
	DB	045H
	DB	050H
	DB	02eH
	DB	038H
	DB	042H
	DB	04cH
	DB	02bH
	DB	035H
	DB	03fH
	DB	048H
	DB	029H
	DB	032H
	DB	03bH
	DB	045H
	DB	027H
	DB	030H
	DB	038H
	DB	041H
	DB	025H
	DB	02dH
	DB	036H
	DB	03eH
	DB	023H
	DB	02bH
	DB	033H
	DB	03bH
	DB	021H
	DB	029H
	DB	030H
	DB	038H
	DB	020H
	DB	027H
	DB	02eH
	DB	035H
	DB	01eH
	DB	025H
	DB	02bH
	DB	032H
	DB	01dH
	DB	023H
	DB	029H
	DB	030H
	DB	01bH
	DB	021H
	DB	027H
	DB	02dH
	DB	01aH
	DB	01fH
	DB	025H
	DB	02bH
	DB	018H
	DB	01eH
	DB	023H
	DB	029H
	DB	017H
	DB	01cH
	DB	021H
	DB	027H
	DB	016H
	DB	01bH
	DB	020H
	DB	025H
	DB	015H
	DB	01aH
	DB	01eH
	DB	023H
	DB	014H
	DB	018H
	DB	01dH
	DB	021H
	DB	013H
	DB	017H
	DB	01bH
	DB	01fH
	DB	012H
	DB	016H
	DB	01aH
	DB	01eH
	DB	011H
	DB	015H
	DB	019H
	DB	01cH
	DB	010H
	DB	014H
	DB	017H
	DB	01bH
	DB	0fH
	DB	013H
	DB	016H
	DB	019H
	DB	0eH
	DB	012H
	DB	015H
	DB	018H
	DB	0eH
	DB	011H
	DB	014H
	DB	017H
	DB	0dH
	DB	010H
	DB	013H
	DB	016H
	DB	0cH
	DB	0fH
	DB	012H
	DB	015H
	DB	0cH
	DB	0eH
	DB	011H
	DB	014H
	DB	0bH
	DB	0eH
	DB	010H
	DB	013H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	012H
	DB	0aH
	DB	0cH
	DB	0fH
	DB	011H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	010H
	DB	09H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	09H
	DB	0bH
	DB	0cH
	DB	0eH
	DB	08H
	DB	0aH
	DB	0cH
	DB	0eH
	DB	08H
	DB	09H
	DB	0bH
	DB	0dH
	DB	07H
	DB	09H
	DB	0bH
	DB	0cH
	DB	07H
	DB	09H
	DB	0aH
	DB	0cH
	DB	07H
	DB	08H
	DB	0aH
	DB	0bH
	DB	06H
	DB	08H
	DB	09H
	DB	0bH
	DB	06H
	DB	07H
	DB	09H
	DB	0aH
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
_kvz_g_auc_renorm_table DB 06H
	DB	05H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+4
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
CONST	ENDS
PUBLIC	_kvz_cabac_start
PUBLIC	_kvz_cabac_encode_bin
PUBLIC	_kvz_cabac_encode_bin_ep
PUBLIC	_kvz_cabac_encode_bins_ep
PUBLIC	_kvz_cabac_encode_bin_trm
PUBLIC	_kvz_cabac_write
PUBLIC	_kvz_cabac_finish
PUBLIC	_kvz_cabac_write_coeff_remain
PUBLIC	_kvz_cabac_write_coeff_remain_encry
PUBLIC	_kvz_cabac_write_ep_ex_golomb
PUBLIC	_kvz_cabac_write_unary_max_symbol
PUBLIC	_kvz_cabac_write_unary_max_symbol_ep
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_cabac_finish@@9@9		; `kvz_cabac_finish'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CM@OPPDDLCC@?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol@@9@9 ; `kvz_cabac_write_unary_max_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@GKJCJABM@?$AAs?$AAy?$AAm?$AAb?$AAo?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AA_?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol_ep@@9@9 ; `kvz_cabac_write_unary_max_symbol_ep'::`1'::__LINE__Var
EXTRN	__imp___wassert:PROC
EXTRN	_kvz_bitstream_put:PROC
EXTRN	_kvz_bitstream_put_byte:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol_ep@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol_ep@@9@9 DD 0206H ; `kvz_cabac_write_unary_max_symbol_ep'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@GKJCJABM@?$AAs?$AAy?$AAm?$AAb?$AAo?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AA_?$AAs@
CONST	SEGMENT
??_C@_1CK@GKJCJABM@?$AAs?$AAy?$AAm?$AAb?$AAo?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AA_?$AAs@ DB 's'
	DB	00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'l', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, '_'
	DB	00H, 's', 00H, 'y', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol@@9@9 DD 01ecH ; `kvz_cabac_write_unary_max_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CM@OPPDDLCC@?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@
CONST	SEGMENT
??_C@_1CM@OPPDDLCC@?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@ DB 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'f'
	DB	00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H, 'a', 00H
	DB	'b', 00H, 'a', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cabac_finish@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cabac_finish@@9@9 DD 0aeH		; `kvz_cabac_finish'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
;	COMDAT _kvz_crypto_get_key
_TEXT	SEGMENT
_hdl$ = 8						; size = 4
_num_bits$ = 12						; size = 4
_kvz_crypto_get_key PROC				; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __546CF5FC_crypto@h
	call	@__CheckForDebuggerJustMyCode@4

; 66   :   return 0;

	xor	eax, eax

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_crypto_get_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write_unary_max_symbol_ep
_TEXT	SEGMENT
tv74 = -208						; size = 4
tv65 = -208						; size = 4
_code_last$ = -5					; size = 1
_data$ = 8						; size = 4
_symbol$ = 12						; size = 4
_max_symbol$ = 16					; size = 4
_kvz_cabac_write_unary_max_symbol_ep PROC		; COMDAT

; 518  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 519  :   /*if (symbol == 0) {
; 520  :     CABAC_BIN_EP(data, 0, "ums_ep");
; 521  :   } else {
; 522  :     // Make a bit-string of (symbol) times 1 and a single 0, except when
; 523  :     // symbol == max_symbol.
; 524  :     unsigned bins = ((1 << symbol) - 1) << (symbol < max_symbol);
; 525  :     CABAC_BINS_EP(data, bins, symbol + (symbol < max_symbol), "ums_ep");
; 526  :   }*/
; 527  : 
; 528  :   int8_t code_last = max_symbol > symbol;

	mov	eax, DWORD PTR _max_symbol$[ebp]
	cmp	eax, DWORD PTR _symbol$[ebp]
	jbe	SHORT $LN7@kvz_cabac_
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN8@kvz_cabac_
$LN7@kvz_cabac_:
	mov	DWORD PTR tv65[ebp], 0
$LN8@kvz_cabac_:
	mov	cl, BYTE PTR tv65[ebp]
	mov	BYTE PTR _code_last$[ebp], cl

; 529  : 
; 530  :   assert(symbol <= max_symbol);

	mov	eax, DWORD PTR _symbol$[ebp]
	cmp	eax, DWORD PTR _max_symbol$[ebp]
	jbe	SHORT $LN9@kvz_cabac_
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol_ep@@9@9
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CK@GKJCJABM@?$AAs?$AAy?$AAm?$AAb?$AAo?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AA_?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_cabac_:

; 531  : 
; 532  :   CABAC_BIN_EP(data, symbol ? 1 : 0, "ums_ep");

	cmp	DWORD PTR _symbol$[ebp], 0
	je	SHORT $LN10@kvz_cabac_
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN11@kvz_cabac_
$LN10@kvz_cabac_:
	mov	DWORD PTR tv74[ebp], 0
$LN11@kvz_cabac_:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8

; 533  : 
; 534  :   if (!symbol) return;

	cmp	DWORD PTR _symbol$[ebp], 0
	jne	SHORT $LN2@kvz_cabac_
	jmp	SHORT $LN1@kvz_cabac_
$LN2@kvz_cabac_:

; 535  : 
; 536  :   while (--symbol) {

	mov	eax, DWORD PTR _symbol$[ebp]
	sub	eax, 1
	mov	DWORD PTR _symbol$[ebp], eax
	je	SHORT $LN3@kvz_cabac_

; 537  :     CABAC_BIN_EP(data, 1, "ums_ep");

	push	1
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8

; 538  :   }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 539  :   if (code_last) {

	movsx	eax, BYTE PTR _code_last$[ebp]
	test	eax, eax
	je	SHORT $LN1@kvz_cabac_

; 540  :     CABAC_BIN_EP(data, 0, "ums_ep");

	push	0
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN1@kvz_cabac_:

; 541  :   }
; 542  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write_unary_max_symbol_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write_unary_max_symbol
_TEXT	SEGMENT
tv65 = -208						; size = 4
_code_last$ = -5					; size = 1
_data$ = 8						; size = 4
_ctx$ = 12						; size = 4
_symbol$ = 16						; size = 4
_offset$ = 20						; size = 4
_max_symbol$ = 24					; size = 4
_kvz_cabac_write_unary_max_symbol PROC			; COMDAT

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 493  :   int8_t code_last = max_symbol > symbol;

	mov	eax, DWORD PTR _max_symbol$[ebp]
	cmp	eax, DWORD PTR _symbol$[ebp]
	jbe	SHORT $LN8@kvz_cabac_
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN9@kvz_cabac_
$LN8@kvz_cabac_:
	mov	DWORD PTR tv65[ebp], 0
$LN9@kvz_cabac_:
	mov	cl, BYTE PTR tv65[ebp]
	mov	BYTE PTR _code_last$[ebp], cl

; 494  : 
; 495  :   assert(symbol <= max_symbol);

	mov	eax, DWORD PTR _symbol$[ebp]
	cmp	eax, DWORD PTR _max_symbol$[ebp]
	jbe	SHORT $LN10@kvz_cabac_
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_cabac_write_unary_max_symbol@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CK@GKJCJABM@?$AAs?$AAy?$AAm?$AAb?$AAo?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AAa?$AAx?$AA_?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_cabac_:

; 496  : 
; 497  :   if (!max_symbol) return;

	cmp	DWORD PTR _max_symbol$[ebp], 0
	jne	SHORT $LN4@kvz_cabac_
	jmp	SHORT $LN1@kvz_cabac_
$LN4@kvz_cabac_:

; 498  : 
; 499  :   data->cur_ctx = &ctx[0];

	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx], ecx

; 500  :   CABAC_BIN(data, symbol, "ums");

	mov	eax, DWORD PTR _symbol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 501  : 
; 502  :   if (!symbol) return;

	cmp	DWORD PTR _symbol$[ebp], 0
	jne	SHORT $LN2@kvz_cabac_
	jmp	SHORT $LN1@kvz_cabac_
$LN2@kvz_cabac_:

; 503  : 
; 504  :   while (--symbol) {

	mov	eax, DWORD PTR _symbol$[ebp]
	sub	eax, 1
	mov	DWORD PTR _symbol$[ebp], eax
	je	SHORT $LN3@kvz_cabac_

; 505  :     data->cur_ctx = &ctx[offset];

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx], eax

; 506  :     CABAC_BIN(data, 1, "ums");

	push	1
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 507  :   }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 508  :   if (code_last) {

	movsx	eax, BYTE PTR _code_last$[ebp]
	test	eax, eax
	je	SHORT $LN1@kvz_cabac_

; 509  :     data->cur_ctx = &ctx[offset];

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx], eax

; 510  :     CABAC_BIN(data, 0, "ums");

	push	0
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN1@kvz_cabac_:

; 511  :   }
; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write_unary_max_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write_ep_ex_golomb
_TEXT	SEGMENT
_mask$1 = -44						; size = 4
_key$2 = -32						; size = 4
_num_bins$ = -20					; size = 4
_bins$ = -8						; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_symbol$ = 16						; size = 4
_count$ = 20						; size = 4
_kvz_cabac_write_ep_ex_golomb PROC			; COMDAT

; 551  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 552  :   uint32_t bins = 0;

	mov	DWORD PTR _bins$[ebp], 0

; 553  :   int32_t num_bins = 0;

	mov	DWORD PTR _num_bins$[ebp], 0
$LN2@kvz_cabac_:

; 554  : 
; 555  :   while (symbol >= (uint32_t)(1 << count)) {

	mov	eax, 1
	mov	ecx, DWORD PTR _count$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _symbol$[ebp], eax
	jb	SHORT $LN3@kvz_cabac_

; 556  :     bins = 2 * bins + 1;

	mov	eax, DWORD PTR _bins$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	mov	DWORD PTR _bins$[ebp], ecx

; 557  :     ++num_bins;

	mov	eax, DWORD PTR _num_bins$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_bins$[ebp], eax

; 558  :     symbol -= 1 << count;

	mov	eax, 1
	mov	ecx, DWORD PTR _count$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _symbol$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _symbol$[ebp], ecx

; 559  :     ++count;

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 560  :   }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 561  :   bins = 2 * bins;

	mov	eax, DWORD PTR _bins$[ebp]
	shl	eax, 1
	mov	DWORD PTR _bins$[ebp], eax

; 562  :   ++num_bins;

	mov	eax, DWORD PTR _num_bins$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_bins$[ebp], eax

; 563  : 
; 564  :   bins      = (bins << count) | symbol;

	mov	eax, DWORD PTR _bins$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR _bins$[ebp], eax

; 565  :   num_bins += count;

	mov	eax, DWORD PTR _num_bins$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _num_bins$[ebp], eax

; 566  :   if (!data->only_count) {

	mov	eax, DWORD PTR _data$[ebp]
	movsx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN4@kvz_cabac_

; 567  :     if (state->encoder_control->cfg.crypto_features & KVZ_CRYPTO_MVs) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2348]
	and	edx, 1
	je	SHORT $LN4@kvz_cabac_

; 568  :       uint32_t key, mask;
; 569  :       key                      = kvz_crypto_get_key(state->crypto_hdl, num_bins>>1);

	mov	eax, DWORD PTR _num_bins$[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$2[ebp], eax

; 570  :       mask                     = ( (1<<(num_bins >>1) ) -1 );

	mov	ecx, DWORD PTR _num_bins$[ebp]
	sar	ecx, 1
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _mask$1[ebp], eax

; 571  :       state->crypto_prev_pos  = ( bins + ( state->crypto_prev_pos^key ) ) & mask;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$2[ebp]
	add	ecx, DWORD PTR _bins$[ebp]
	and	ecx, DWORD PTR _mask$1[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 572  :       bins                     = ( (bins >> (num_bins >>1) ) << (num_bins >>1) ) | state->crypto_prev_pos;

	mov	ecx, DWORD PTR _num_bins$[ebp]
	sar	ecx, 1
	mov	eax, DWORD PTR _bins$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _num_bins$[ebp]
	sar	ecx, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	or	eax, DWORD PTR [ecx+284]
	mov	DWORD PTR _bins$[ebp], eax
$LN4@kvz_cabac_:

; 573  :     }
; 574  :   }
; 575  :   kvz_cabac_encode_bins_ep(data, bins, num_bins);

	mov	eax, DWORD PTR _num_bins$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bins$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 576  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write_ep_ex_golomb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write_coeff_remain_encry
_TEXT	SEGMENT
_mask$1 = -332						; size = 4
_key$2 = -320						; size = 4
_Suffix$3 = -308					; size = 4
_key$4 = -296						; size = 4
_key$5 = -284						; size = 4
_key$6 = -272						; size = 4
_key$7 = -260						; size = 4
_key$8 = -248						; size = 4
_key$9 = -236						; size = 4
_key$10 = -224						; size = 4
_key$11 = -212						; size = 4
_key$12 = -200						; size = 4
_key$13 = -188						; size = 4
_key$14 = -176						; size = 4
_key$15 = -164						; size = 4
_key$16 = -152						; size = 4
_key$17 = -140						; size = 4
_key$18 = -128						; size = 4
_key$19 = -116						; size = 4
_key$20 = -104						; size = 4
_key$21 = -92						; size = 4
_key$22 = -80						; size = 4
_key$23 = -68						; size = 4
_key$24 = -56						; size = 4
_key$25 = -44						; size = 4
_Suffix$26 = -32					; size = 4
_length$ = -20						; size = 4
_codeNumber$ = -8					; size = 4
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_symbol$ = 16						; size = 4
_r_param$ = 20						; size = 4
_base_level$ = 24					; size = 4
_kvz_cabac_write_coeff_remain_encry PROC		; COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 298  :  int32_t codeNumber  = (int32_t)symbol;

	mov	eax, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR _codeNumber$[ebp], eax

; 299  :  uint32_t length;
; 300  : 
; 301  :  if (codeNumber < (3 << r_param)) {

	mov	eax, 3
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _codeNumber$[ebp], eax
	jge	$LN4@kvz_cabac_

; 302  :    length = codeNumber>>r_param;

	mov	eax, DWORD PTR _codeNumber$[ebp]
	mov	ecx, DWORD PTR _r_param$[ebp]
	sar	eax, cl
	mov	DWORD PTR _length$[ebp], eax

; 303  :    CABAC_BINS_EP(cabac, (1 << (length + 1)) - 2 , length + 1, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 304  :    //m_pcBinIf->encodeBinsEP( (1<<(length+1))-2 , length+1);
; 305  :    uint32_t Suffix = (codeNumber%(1<<r_param));

	mov	esi, 1
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	esi, cl
	mov	eax, DWORD PTR _codeNumber$[ebp]
	cdq
	idiv	esi
	mov	DWORD PTR _Suffix$26[ebp], edx

; 306  : 
; 307  :    if(!r_param)

	cmp	DWORD PTR _r_param$[ebp], 0
	jne	SHORT $LN6@kvz_cabac_

; 308  :     CABAC_BINS_EP(cabac, Suffix, r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Suffix$26[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN6@kvz_cabac_:

; 309  :     //m_pcBinIf->encodeBinsEP(Suffix, r_param);
; 310  :    if(r_param==1) {

	cmp	DWORD PTR _r_param$[ebp], 1
	jne	SHORT $LN7@kvz_cabac_

; 311  :      if(!(( base_level ==2 )&& (codeNumber==4 || codeNumber==5) ) ) {

	cmp	DWORD PTR _base_level$[ebp], 2
	jne	SHORT $LN11@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 4
	je	SHORT $LN9@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 5
	je	SHORT $LN9@kvz_cabac_
$LN11@kvz_cabac_:

; 312  :        uint32_t key = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$25[ebp], eax

; 313  :        state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$25[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 314  :        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 1, "coeff_abs_level_remaining");

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 315  :        //m_pcBinIf->encodeBinsEP(m_prev_pos, 1);
; 316  :      } else {

	jmp	SHORT $LN10@kvz_cabac_
$LN9@kvz_cabac_:

; 317  :        CABAC_BINS_EP(cabac, Suffix, 1, "coeff_abs_level_remaining");

	push	1
	mov	eax, DWORD PTR _Suffix$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN10@kvz_cabac_:

; 318  :        //m_pcBinIf->encodeBinsEP(Suffix, 1);
; 319  :      }
; 320  :    }

	jmp	$LN8@kvz_cabac_
$LN7@kvz_cabac_:

; 321  :    else
; 322  :     if(r_param==2) {

	cmp	DWORD PTR _r_param$[ebp], 2
	jne	$LN12@kvz_cabac_

; 323  :        if( base_level ==1) {

	cmp	DWORD PTR _base_level$[ebp], 1
	jne	SHORT $LN14@kvz_cabac_

; 324  :          uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$24[ebp], eax

; 325  :          state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$24[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 326  :          CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 327  :          //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 328  :        } else

	jmp	$LN15@kvz_cabac_
$LN14@kvz_cabac_:

; 329  :          if( base_level ==2) {

	cmp	DWORD PTR _base_level$[ebp], 2
	jne	$LN16@kvz_cabac_

; 330  :            if(codeNumber<=7 || codeNumber>=12) {

	cmp	DWORD PTR _codeNumber$[ebp], 7
	jle	SHORT $LN20@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 12		; 0000000cH
	jl	SHORT $LN18@kvz_cabac_
$LN20@kvz_cabac_:

; 331  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$23[ebp], eax

; 332  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$23[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 333  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 334  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 335  :            }

	jmp	SHORT $LN19@kvz_cabac_
$LN18@kvz_cabac_:

; 336  :            else
; 337  :              if(codeNumber<10) {

	cmp	DWORD PTR _codeNumber$[ebp], 10		; 0000000aH
	jge	SHORT $LN21@kvz_cabac_

; 338  :                 uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$22[ebp], eax

; 339  :                 state->crypto_prev_pos  = (( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$22[ebp]
	add	eax, edx
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 340  :                 CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 341  :                 //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 342  :              } else

	jmp	SHORT $LN19@kvz_cabac_
$LN21@kvz_cabac_:

; 343  :                CABAC_BINS_EP(cabac, Suffix, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _Suffix$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN19@kvz_cabac_:

; 344  :                //m_pcBinIf->encodeBinsEP(Suffix, 2);
; 345  :          } else { //base_level=3

	jmp	$LN15@kvz_cabac_
$LN16@kvz_cabac_:

; 346  :            if(codeNumber<=7 || codeNumber>11) {

	cmp	DWORD PTR _codeNumber$[ebp], 7
	jle	SHORT $LN25@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 11		; 0000000bH
	jle	SHORT $LN23@kvz_cabac_
$LN25@kvz_cabac_:

; 347  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$21[ebp], eax

; 348  :              state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 3;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$21[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 349  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 350  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 351  :            } else {

	jmp	SHORT $LN15@kvz_cabac_
$LN23@kvz_cabac_:

; 352  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$20[ebp], eax

; 353  :              state->crypto_prev_pos  = ((Suffix&2))+(( (Suffix&1) + ( state->crypto_prev_pos^key)) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 2
	mov	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+284]
	xor	edx, DWORD PTR _key$20[ebp]
	add	ecx, edx
	and	ecx, 1
	add	eax, ecx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 354  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 2, "coeff_abs_level_remaining");

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN15@kvz_cabac_:

; 355  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 2);
; 356  :            }
; 357  :          }
; 358  :      } else

	jmp	$LN8@kvz_cabac_
$LN12@kvz_cabac_:

; 359  :        if(r_param==3) {

	cmp	DWORD PTR _r_param$[ebp], 3
	jne	$LN26@kvz_cabac_

; 360  :          if( base_level ==1) {

	cmp	DWORD PTR _base_level$[ebp], 1
	jne	SHORT $LN28@kvz_cabac_

; 361  :            uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$19[ebp], eax

; 362  :            state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$19[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 363  :            CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 364  :            //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 365  :          }

	jmp	$LN29@kvz_cabac_
$LN28@kvz_cabac_:

; 366  :          else if( base_level ==2) {

	cmp	DWORD PTR _base_level$[ebp], 2
	jne	$LN30@kvz_cabac_

; 367  :            if(codeNumber<=15 || codeNumber>23) {

	cmp	DWORD PTR _codeNumber$[ebp], 15		; 0000000fH
	jle	SHORT $LN34@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 23		; 00000017H
	jle	SHORT $LN32@kvz_cabac_
$LN34@kvz_cabac_:

; 368  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$18[ebp], eax

; 369  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$18[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 370  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 371  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 372  :            } else

	jmp	$LN33@kvz_cabac_
$LN32@kvz_cabac_:

; 373  :              if(codeNumber<=19){

	cmp	DWORD PTR _codeNumber$[ebp], 19		; 00000013H
	jg	SHORT $LN35@kvz_cabac_

; 374  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$17[ebp], eax

; 375  :                state->crypto_prev_pos  = ((Suffix&4))+(( (Suffix&3) + (state->crypto_prev_pos^key )) & 3);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 4
	mov	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+284]
	xor	edx, DWORD PTR _key$17[ebp]
	add	ecx, edx
	and	ecx, 3
	add	eax, ecx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 376  :                CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 377  :                //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 378  :              } else

	jmp	SHORT $LN33@kvz_cabac_
$LN35@kvz_cabac_:

; 379  :                if(codeNumber<=21){

	cmp	DWORD PTR _codeNumber$[ebp], 21		; 00000015H
	jg	SHORT $LN37@kvz_cabac_

; 380  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$16[ebp], eax

; 381  :                  state->crypto_prev_pos  = 4+(( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$16[ebp]
	add	eax, edx
	and	eax, 1
	add	eax, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 382  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 383  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 384  :                } else

	jmp	SHORT $LN33@kvz_cabac_
$LN37@kvz_cabac_:

; 385  :                  CABAC_BINS_EP(cabac, Suffix, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _Suffix$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN33@kvz_cabac_:

; 386  :            // m_pcBinIf->encodeBinsEP(Suffix, 3);
; 387  :          } else {//base_level=3

	jmp	$LN29@kvz_cabac_
$LN30@kvz_cabac_:

; 388  :            CABAC_BINS_EP(cabac, Suffix, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _Suffix$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 389  :            //m_pcBinIf->encodeBinsEP(Suffix, 3);
; 390  :            if(codeNumber<=15 || codeNumber>23) {

	cmp	DWORD PTR _codeNumber$[ebp], 15		; 0000000fH
	jle	SHORT $LN41@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 23		; 00000017H
	jle	SHORT $LN39@kvz_cabac_
$LN41@kvz_cabac_:

; 391  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$15[ebp], eax

; 392  :              state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$15[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 393  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 394  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 395  :            } else

	jmp	$LN29@kvz_cabac_
$LN39@kvz_cabac_:

; 396  :              if(codeNumber<=19) {

	cmp	DWORD PTR _codeNumber$[ebp], 19		; 00000013H
	jg	SHORT $LN42@kvz_cabac_

; 397  :                uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$14[ebp], eax

; 398  :                state->crypto_prev_pos  = (( (Suffix&3) + ( state->crypto_prev_pos^key )) &3);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$14[ebp]
	add	eax, edx
	and	eax, 3
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 399  :                CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 400  :                //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 401  :              } else

	jmp	SHORT $LN29@kvz_cabac_
$LN42@kvz_cabac_:

; 402  :                if(codeNumber<=23) {

	cmp	DWORD PTR _codeNumber$[ebp], 23		; 00000017H
	jg	SHORT $LN29@kvz_cabac_

; 403  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$13[ebp], eax

; 404  :                  state->crypto_prev_pos  = (Suffix&6)+(( (Suffix&1) + (state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 6
	mov	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+284]
	xor	edx, DWORD PTR _key$13[ebp]
	add	ecx, edx
	and	ecx, 1
	add	eax, ecx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 405  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, 3, "coeff_abs_level_remaining");

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN29@kvz_cabac_:

; 406  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, 3);
; 407  :                }
; 408  :          }
; 409  :        } else

	jmp	$LN8@kvz_cabac_
$LN26@kvz_cabac_:

; 410  :          if(r_param==4) {

	cmp	DWORD PTR _r_param$[ebp], 4
	jne	$LN8@kvz_cabac_

; 411  :            if( base_level ==1) {

	cmp	DWORD PTR _base_level$[ebp], 1
	jne	SHORT $LN46@kvz_cabac_

; 412  :              uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$12[ebp], eax

; 413  :              state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 15;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$12[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 414  :              CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 415  :              //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 416  :            } else

	jmp	$LN8@kvz_cabac_
$LN46@kvz_cabac_:

; 417  :              if( base_level ==2) {

	cmp	DWORD PTR _base_level$[ebp], 2
	jne	$LN48@kvz_cabac_

; 418  :                if(codeNumber<=31 || codeNumber>47) {

	cmp	DWORD PTR _codeNumber$[ebp], 31		; 0000001fH
	jle	SHORT $LN52@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 47		; 0000002fH
	jle	SHORT $LN50@kvz_cabac_
$LN52@kvz_cabac_:

; 419  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$11[ebp], eax

; 420  :                  state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & 15;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$11[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 421  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 422  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, r_param);
; 423  :                } else

	jmp	$LN51@kvz_cabac_
$LN50@kvz_cabac_:

; 424  :                  if(codeNumber<=39) {

	cmp	DWORD PTR _codeNumber$[ebp], 39		; 00000027H
	jg	SHORT $LN53@kvz_cabac_

; 425  :                    uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$10[ebp], eax

; 426  :                    state->crypto_prev_pos  = (( (Suffix&7) + ( state->crypto_prev_pos^key )) & 7);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$10[ebp]
	add	eax, edx
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 427  :                    CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 428  :                    //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 429  :                  } else

	jmp	$LN51@kvz_cabac_
$LN53@kvz_cabac_:

; 430  :                    if(codeNumber<=43) {

	cmp	DWORD PTR _codeNumber$[ebp], 43		; 0000002bH
	jg	SHORT $LN55@kvz_cabac_

; 431  :                      uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$9[ebp], eax

; 432  :                      state->crypto_prev_pos  = 8+(( (Suffix&3) + ( state->crypto_prev_pos^key )) & 3);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$9[ebp]
	add	eax, edx
	and	eax, 3
	add	eax, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 433  :                      CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 434  :                      //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 435  :                    } else

	jmp	SHORT $LN51@kvz_cabac_
$LN55@kvz_cabac_:

; 436  :                      if(codeNumber<=45){

	cmp	DWORD PTR _codeNumber$[ebp], 45		; 0000002dH
	jg	SHORT $LN57@kvz_cabac_

; 437  :                        uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$8[ebp], eax

; 438  :                        state->crypto_prev_pos  = 12+(( (Suffix&1) + ( state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$8[ebp]
	add	eax, edx
	and	eax, 1
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 439  :                        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 440  :                        //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 441  :                      } else

	jmp	SHORT $LN51@kvz_cabac_
$LN57@kvz_cabac_:

; 442  :                        CABAC_BINS_EP(cabac, Suffix, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _Suffix$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN51@kvz_cabac_:

; 443  :                        //m_pcBinIf->encodeBinsEP(Suffix, 4);
; 444  :              } else {//base_level=3

	jmp	$LN8@kvz_cabac_
$LN48@kvz_cabac_:

; 445  :                if(codeNumber<=31 || codeNumber>47) {

	cmp	DWORD PTR _codeNumber$[ebp], 31		; 0000001fH
	jle	SHORT $LN61@kvz_cabac_
	cmp	DWORD PTR _codeNumber$[ebp], 47		; 0000002fH
	jle	SHORT $LN59@kvz_cabac_
$LN61@kvz_cabac_:

; 446  :                  uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 4);

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$7[ebp], eax

; 447  :                  state->crypto_prev_pos  = (Suffix + ( state->crypto_prev_pos^key ) ) & 15;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$7[ebp]
	add	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 448  :                  CABAC_BINS_EP(cabac, state->crypto_prev_pos, r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 449  :                  //m_pcBinIf->encodeBinsEP(m_prev_pos, r_param);
; 450  :                } else

	jmp	$LN8@kvz_cabac_
$LN59@kvz_cabac_:

; 451  :                  if(codeNumber<=39) {

	cmp	DWORD PTR _codeNumber$[ebp], 39		; 00000027H
	jg	SHORT $LN62@kvz_cabac_

; 452  :                    uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 3);

	push	3
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$6[ebp], eax

; 453  :                    state->crypto_prev_pos  = (( (Suffix&7) + ( state->crypto_prev_pos^key )) & 7);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$6[ebp]
	add	eax, edx
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 454  :                    CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 455  :                    //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 456  :                  } else

	jmp	$LN8@kvz_cabac_
$LN62@kvz_cabac_:

; 457  :                    if(codeNumber<=43) {

	cmp	DWORD PTR _codeNumber$[ebp], 43		; 0000002bH
	jg	SHORT $LN64@kvz_cabac_

; 458  :                      uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 2);

	push	2
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$5[ebp], eax

; 459  :                      state->crypto_prev_pos  = 8+(( (Suffix&3) + ( state->crypto_prev_pos^key )) & 3);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	xor	edx, DWORD PTR _key$5[ebp]
	add	eax, edx
	and	eax, 3
	add	eax, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 460  :                      CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 461  :                      //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 462  :                    } else

	jmp	SHORT $LN8@kvz_cabac_
$LN64@kvz_cabac_:

; 463  :                      if(codeNumber<=47) {

	cmp	DWORD PTR _codeNumber$[ebp], 47		; 0000002fH
	jg	SHORT $LN8@kvz_cabac_

; 464  :                        uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$4[ebp], eax

; 465  :                        state->crypto_prev_pos  = (Suffix&14)+(( (Suffix&1) + (state->crypto_prev_pos^key )) & 1);

	mov	eax, DWORD PTR _Suffix$26[ebp]
	and	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _Suffix$26[ebp]
	and	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+284]
	xor	edx, DWORD PTR _key$4[ebp]
	add	ecx, edx
	and	ecx, 1
	add	eax, ecx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 466  :                        CABAC_BINS_EP(cabac, state->crypto_prev_pos, 4, "coeff_abs_level_remaining");

	push	4
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN8@kvz_cabac_:

; 467  :                        //m_pcBinIf->encodeBinsEP(m_prev_pos, 4);
; 468  :                      }
; 469  :              }
; 470  :        }
; 471  :   } else {

	jmp	$LN1@kvz_cabac_
$LN4@kvz_cabac_:

; 472  :     length = r_param;

	mov	eax, DWORD PTR _r_param$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 473  :     codeNumber  = codeNumber - ( 3 << r_param);

	mov	eax, 3
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _codeNumber$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _codeNumber$[ebp], ecx
$LN2@kvz_cabac_:

; 474  :     while (codeNumber >= (1<<length)) {

	mov	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _codeNumber$[ebp], eax
	jl	SHORT $LN3@kvz_cabac_

; 475  :       codeNumber -=  (1<<(length));

	mov	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _codeNumber$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _codeNumber$[ebp], ecx

; 476  :       ++length;

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax

; 477  :     }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 478  :     CABAC_BINS_EP(cabac, (1 << (3 + length + 1 - r_param)) - 2, 3 + length + 1 - r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 4
	sub	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 4
	sub	ecx, DWORD PTR _r_param$[ebp]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 479  :     //m_pcBinIf->encodeBinsEP((1<<(COEF_REMAIN_BIN_REDUCTION+length+1-r_param))-2,COEF_REMAIN_BIN_REDUCTION+length+1-r_param);
; 480  :     uint32_t Suffix = codeNumber;

	mov	eax, DWORD PTR _codeNumber$[ebp]
	mov	DWORD PTR _Suffix$3[ebp], eax

; 481  :     uint32_t key    = kvz_crypto_get_key(state->crypto_hdl, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	DWORD PTR _key$2[ebp], eax

; 482  :     uint32_t mask   = ( (1<<length ) -1 );

	mov	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	shl	eax, cl
	sub	eax, 1
	mov	DWORD PTR _mask$1[ebp], eax

; 483  :     state->crypto_prev_pos  = ( Suffix + ( state->crypto_prev_pos^key ) ) & mask;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	xor	ecx, DWORD PTR _key$2[ebp]
	add	ecx, DWORD PTR _Suffix$3[ebp]
	and	ecx, DWORD PTR _mask$1[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+284], ecx

; 484  :     CABAC_BINS_EP(cabac, state->crypto_prev_pos, length, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN1@kvz_cabac_:

; 485  :     //m_pcBinIf->encodeBinsEP(m_prev_pos,length);
; 486  :   }
; 487  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write_coeff_remain_encry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write_coeff_remain
_TEXT	SEGMENT
_length$ = -20						; size = 4
_code_number$ = -8					; size = 4
_cabac$ = 8						; size = 4
_symbol$ = 12						; size = 4
_r_param$ = 16						; size = 4
_kvz_cabac_write_coeff_remain PROC			; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  :   int32_t code_number = symbol;

	mov	eax, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR _code_number$[ebp], eax

; 278  :   uint32_t length;
; 279  : 
; 280  :   if (code_number < (3 << r_param)) {

	mov	eax, 3
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _code_number$[ebp], eax
	jge	SHORT $LN4@kvz_cabac_

; 281  :     length = code_number >> r_param;

	mov	eax, DWORD PTR _code_number$[ebp]
	mov	ecx, DWORD PTR _r_param$[ebp]
	sar	eax, cl
	mov	DWORD PTR _length$[ebp], eax

; 282  :     CABAC_BINS_EP(cabac, (1 << (length + 1)) - 2 , length + 1, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 283  :     CABAC_BINS_EP(cabac, (code_number % (1 << r_param)), r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	esi, 1
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	esi, cl
	mov	eax, DWORD PTR _code_number$[ebp]
	cdq
	idiv	esi
	push	edx
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 284  :   } else {

	jmp	$LN1@kvz_cabac_
$LN4@kvz_cabac_:

; 285  :     length = r_param;

	mov	eax, DWORD PTR _r_param$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 286  :     code_number = code_number - (3 << r_param);

	mov	eax, 3
	mov	ecx, DWORD PTR _r_param$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _code_number$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _code_number$[ebp], ecx
$LN2@kvz_cabac_:

; 287  :     while (code_number >= (1 << length)) {

	mov	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _code_number$[ebp], eax
	jl	SHORT $LN3@kvz_cabac_

; 288  :       code_number -= 1 << length;

	mov	eax, 1
	mov	ecx, DWORD PTR _length$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _code_number$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _code_number$[ebp], ecx

; 289  :       ++length;

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax

; 290  :     }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 291  :     CABAC_BINS_EP(cabac, (1 << (3 + length + 1 - r_param)) - 2, 3 + length + 1 - r_param, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	add	eax, 4
	sub	eax, DWORD PTR _r_param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	add	ecx, 4
	sub	ecx, DWORD PTR _r_param$[ebp]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 292  :     CABAC_BINS_EP(cabac, code_number, length, "coeff_abs_level_remaining");

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _code_number$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN1@kvz_cabac_:

; 293  :   }
; 294  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write_coeff_remain ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_finish
_TEXT	SEGMENT
_bits$1 = -5						; size = 1
_data$ = 8						; size = 4
_kvz_cabac_finish PROC					; COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 175  :   assert(data->bits_left <= 32);

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 32			; 00000020H
	jle	SHORT $LN10@kvz_cabac_
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_cabac_finish@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@FBIDMFKI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CM@OPPDDLCC@?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAs?$AA_?$AAl?$AAe?$AAf?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_cabac_:

; 176  : 
; 177  :   if (data->low >> (32 - data->bits_left)) {

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, cl
	test	eax, eax
	je	SHORT $LN6@kvz_cabac_

; 178  :     kvz_bitstream_put_byte(data->stream, data->buffered_byte + 1);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_kvz_bitstream_put_byte
	add	esp, 8
$LN2@kvz_cabac_:

; 179  :     while (data->num_buffered_bytes > 1) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jle	SHORT $LN3@kvz_cabac_

; 180  :       kvz_bitstream_put_byte(data->stream, 0);

	push	0
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_kvz_bitstream_put_byte
	add	esp, 8

; 181  :       data->num_buffered_bytes--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 182  :     }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 183  :     data->low -= 1 << (32 - data->bits_left);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 184  :   } else {

	jmp	SHORT $LN7@kvz_cabac_
$LN6@kvz_cabac_:

; 185  :     if (data->num_buffered_bytes > 0) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jle	SHORT $LN4@kvz_cabac_

; 186  :       kvz_bitstream_put_byte(data->stream, data->buffered_byte);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_kvz_bitstream_put_byte
	add	esp, 8
$LN4@kvz_cabac_:

; 187  :     }
; 188  :     while (data->num_buffered_bytes > 1) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jle	SHORT $LN7@kvz_cabac_

; 189  :       kvz_bitstream_put_byte(data->stream, 0xff);

	push	255					; 000000ffH
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_kvz_bitstream_put_byte
	add	esp, 8

; 190  :       data->num_buffered_bytes--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 191  :     }

	jmp	SHORT $LN4@kvz_cabac_
$LN7@kvz_cabac_:

; 192  :   }
; 193  : 
; 194  :   {
; 195  :     uint8_t bits = (uint8_t)(24 - data->bits_left);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, 24					; 00000018H
	sub	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR _bits$1[ebp], cl

; 196  :     kvz_bitstream_put(data->stream, data->low >> 8, bits);

	movzx	eax, BYTE PTR _bits$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 8
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 197  :   }
; 198  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_write
_TEXT	SEGMENT
_byte$1 = -32						; size = 4
_carry$2 = -20						; size = 4
_lead_byte$ = -8					; size = 4
_data$ = 8						; size = 4
_kvz_cabac_write PROC					; COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 139  :   uint32_t lead_byte = data->low >> (24 - data->bits_left);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, 24					; 00000018H
	sub	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, cl
	mov	DWORD PTR _lead_byte$[ebp], eax

; 140  :   data->bits_left += 8;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 141  :   data->low &= 0xffffffffu >> data->bits_left;

	mov	eax, DWORD PTR _data$[ebp]
	or	edx, -1
	mov	ecx, DWORD PTR [eax+20]
	shr	edx, cl
	mov	eax, DWORD PTR _data$[ebp]
	and	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 142  : 
; 143  :   // Binary counter mode
; 144  :   if(data->only_count) {

	mov	eax, DWORD PTR _data$[ebp]
	movsx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN4@kvz_cabac_

; 145  :     data->num_buffered_bytes++;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 146  :     return;

	jmp	$LN1@kvz_cabac_
$LN4@kvz_cabac_:

; 147  :   }
; 148  : 
; 149  :   if (lead_byte == 0xff) {

	cmp	DWORD PTR _lead_byte$[ebp], 255		; 000000ffH
	jne	SHORT $LN5@kvz_cabac_

; 150  :     data->num_buffered_bytes++;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 151  :   } else {

	jmp	$LN1@kvz_cabac_
$LN5@kvz_cabac_:

; 152  :     if (data->num_buffered_bytes > 0) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jle	SHORT $LN7@kvz_cabac_

; 153  :       uint32_t carry = lead_byte >> 8;

	mov	eax, DWORD PTR _lead_byte$[ebp]
	shr	eax, 8
	mov	DWORD PTR _carry$2[ebp], eax

; 154  :       uint32_t byte = data->buffered_byte + carry;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _carry$2[ebp]
	mov	DWORD PTR _byte$1[ebp], ecx

; 155  :       data->buffered_byte = lead_byte & 0xff;

	mov	eax, DWORD PTR _lead_byte$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 156  :       kvz_bitstream_put_byte(data->stream, byte);

	mov	eax, DWORD PTR _byte$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_kvz_bitstream_put_byte
	add	esp, 8

; 157  : 
; 158  :       byte = (0xff + carry) & 0xff;

	mov	eax, DWORD PTR _carry$2[ebp]
	add	eax, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _byte$1[ebp], eax
$LN2@kvz_cabac_:

; 159  :       while (data->num_buffered_bytes > 1) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jle	SHORT $LN3@kvz_cabac_

; 160  :         kvz_bitstream_put_byte(data->stream, byte);

	mov	eax, DWORD PTR _byte$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_kvz_bitstream_put_byte
	add	esp, 8

; 161  :         data->num_buffered_bytes--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 162  :       }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 163  :     } else {

	jmp	SHORT $LN1@kvz_cabac_
$LN7@kvz_cabac_:

; 164  :       data->num_buffered_bytes = 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+16], 1

; 165  :       data->buffered_byte = lead_byte;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _lead_byte$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@kvz_cabac_:

; 166  :     }
; 167  :   }
; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_encode_bin_trm
_TEXT	SEGMENT
_data$ = 8						; size = 4
_bin_value$ = 12					; size = 1
_kvz_cabac_encode_bin_trm PROC				; COMDAT

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 206  :   data->range -= 2;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 2
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 207  :   if(bin_value) {

	movzx	eax, BYTE PTR _bin_value$[ebp]
	test	eax, eax
	je	SHORT $LN2@kvz_cabac_

; 208  :     data->low += data->range;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 209  :     data->low <<= 7;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 7
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 210  :     data->range = 2 << 7;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], 256			; 00000100H

; 211  :     data->bits_left -= 7;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 7
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx
	jmp	SHORT $LN3@kvz_cabac_
$LN2@kvz_cabac_:

; 212  :   } else if (data->range >= 256) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+8], 256			; 00000100H
	jb	SHORT $LN4@kvz_cabac_

; 213  :     return;

	jmp	SHORT $LN1@kvz_cabac_

; 214  :   } else {

	jmp	SHORT $LN3@kvz_cabac_
$LN4@kvz_cabac_:

; 215  :     data->low <<= 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 216  :     data->range <<= 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 217  :     data->bits_left--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@kvz_cabac_:

; 218  :   }
; 219  : 
; 220  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 12			; 0000000cH
	jge	SHORT $LN1@kvz_cabac_

; 221  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_write
	add	esp, 4
$LN1@kvz_cabac_:

; 222  :   }
; 223  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_encode_bin_trm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_encode_bins_ep
_TEXT	SEGMENT
_pattern$ = -8						; size = 4
_data$ = 8						; size = 4
_bin_values$ = 12					; size = 4
_num_bins$ = 16						; size = 4
_kvz_cabac_encode_bins_ep PROC				; COMDAT

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@kvz_cabac_:

; 246  :   uint32_t pattern;
; 247  : 
; 248  :   while (num_bins > 8) {

	cmp	DWORD PTR _num_bins$[ebp], 8
	jle	SHORT $LN3@kvz_cabac_

; 249  :     num_bins -= 8;

	mov	eax, DWORD PTR _num_bins$[ebp]
	sub	eax, 8
	mov	DWORD PTR _num_bins$[ebp], eax

; 250  :     pattern = bin_values >> num_bins;

	mov	eax, DWORD PTR _bin_values$[ebp]
	mov	ecx, DWORD PTR _num_bins$[ebp]
	shr	eax, cl
	mov	DWORD PTR _pattern$[ebp], eax

; 251  :     data->low <<= 8;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 252  :     data->low += data->range * pattern;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, DWORD PTR _pattern$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 253  :     bin_values -= pattern << num_bins;

	mov	eax, DWORD PTR _pattern$[ebp]
	mov	ecx, DWORD PTR _num_bins$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _bin_values$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bin_values$[ebp], ecx

; 254  :     data->bits_left -= 8;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 8
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 255  : 
; 256  :     if(data->bits_left < 12) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 12			; 0000000cH
	jge	SHORT $LN4@kvz_cabac_

; 257  :       kvz_cabac_write(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_write
	add	esp, 4
$LN4@kvz_cabac_:

; 258  :     }
; 259  :   }

	jmp	SHORT $LN2@kvz_cabac_
$LN3@kvz_cabac_:

; 260  : 
; 261  :   data->low <<= num_bins;

	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _num_bins$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], edx

; 262  :   data->low += data->range * bin_values;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, DWORD PTR _bin_values$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 263  :   data->bits_left -= num_bins;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _num_bins$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 264  : 
; 265  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 12			; 0000000cH
	jge	SHORT $LN1@kvz_cabac_

; 266  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_write
	add	esp, 4
$LN1@kvz_cabac_:

; 267  :   }
; 268  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_encode_bins_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_encode_bin_ep
_TEXT	SEGMENT
_data$ = 8						; size = 4
_bin_value$ = 12					; size = 4
_kvz_cabac_encode_bin_ep PROC				; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 230  :   data->low <<= 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 231  :   if (bin_value) {

	cmp	DWORD PTR _bin_value$[ebp], 0
	je	SHORT $LN2@kvz_cabac_

; 232  :     data->low += data->range;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@kvz_cabac_:

; 233  :   }
; 234  :   data->bits_left--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 235  : 
; 236  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 12			; 0000000cH
	jge	SHORT $LN1@kvz_cabac_

; 237  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_write
	add	esp, 4
$LN1@kvz_cabac_:

; 238  :   }
; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_encode_bin_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_encode_bin
_TEXT	SEGMENT
tv80 = -220						; size = 4
_num_bits$1 = -20					; size = 4
_lps$ = -8						; size = 4
_data$ = 8						; size = 4
_bin_value$ = 12					; size = 4
_kvz_cabac_encode_bin PROC				; COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 105  :   uint32_t lps;
; 106  : 
; 107  : 
; 108  :   lps = kvz_g_auc_lpst_table[CTX_STATE(data->cur_ctx)][(data->range >> 6) & 3];

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	sar	edx, 1
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 6
	and	ecx, 3
	movzx	edx, BYTE PTR _kvz_g_auc_lpst_table[ecx+edx*4]
	mov	DWORD PTR _lps$[ebp], edx

; 109  :   data->range -= lps;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 110  : 
; 111  :   // Not the Most Probable Symbol?
; 112  :   if ((bin_value ? 1 : 0) != CTX_MPS(data->cur_ctx)) {

	cmp	DWORD PTR _bin_value$[ebp], 0
	je	SHORT $LN7@kvz_cabac_
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN8@kvz_cabac_
$LN7@kvz_cabac_:
	mov	DWORD PTR tv80[ebp], 0
$LN8@kvz_cabac_:
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 1
	cmp	DWORD PTR tv80[ebp], edx
	je	SHORT $LN2@kvz_cabac_

; 113  :     int num_bits = kvz_g_auc_renorm_table[lps >> 3];

	mov	eax, DWORD PTR _lps$[ebp]
	shr	eax, 3
	movzx	ecx, BYTE PTR _kvz_g_auc_renorm_table[eax]
	mov	DWORD PTR _num_bits$1[ebp], ecx

; 114  :     data->low = (data->low + data->range) << num_bits;

	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _num_bits$1[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 115  :     data->range = lps << num_bits;

	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR _num_bits$1[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 116  : 
; 117  :     CTX_UPDATE_LPS(data->cur_ctx);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _kvz_g_auc_next_state_lps[edx]
	mov	BYTE PTR [ecx], dl

; 118  : 
; 119  :     data->bits_left -= num_bits;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _num_bits$1[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 120  :   } else {

	jmp	SHORT $LN3@kvz_cabac_
$LN2@kvz_cabac_:

; 121  :     CTX_UPDATE_MPS(data->cur_ctx);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _kvz_g_auc_next_state_mps[edx]
	mov	BYTE PTR [ecx], dl

; 122  :     if (data->range >= 256) return;

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+8], 256			; 00000100H
	jb	SHORT $LN4@kvz_cabac_
	jmp	SHORT $LN1@kvz_cabac_
$LN4@kvz_cabac_:

; 123  : 
; 124  :     data->low <<= 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 125  :     data->range <<= 1;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 126  :     data->bits_left--;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@kvz_cabac_:

; 127  :   }
; 128  : 
; 129  :   if (data->bits_left < 12) {

	mov	eax, DWORD PTR _data$[ebp]
	cmp	DWORD PTR [eax+20], 12			; 0000000cH
	jge	SHORT $LN1@kvz_cabac_

; 130  :     kvz_cabac_write(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_kvz_cabac_write
	add	esp, 4
$LN1@kvz_cabac_:

; 131  :   }
; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_encode_bin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cabac.c
;	COMDAT _kvz_cabac_start
_TEXT	SEGMENT
_data$ = 8						; size = 4
_kvz_cabac_start PROC					; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __7575154B_cabac@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :   data->low = 0;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+4], 0

; 93   :   data->range = 510;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], 510			; 000001feH

; 94   :   data->bits_left = 23;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+20], 23			; 00000017H

; 95   :   data->num_buffered_bytes = 0;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+16], 0

; 96   :   data->buffered_byte = 0xff;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+12], 255			; 000000ffH

; 97   :   data->only_count = 0; // By default, write bits out

	mov	eax, DWORD PTR _data$[ebp]
	mov	BYTE PTR [eax+24], 0

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cabac_start ENDP
_TEXT	ENDS
END
