; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\transform.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_g_chroma_scale
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__90868309_transform@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_kvz_g_chroma_scale DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	021H
	DB	022H
	DB	022H
	DB	023H
	DB	023H
	DB	024H
	DB	024H
	DB	025H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
CONST	ENDS
PUBLIC	_kvz_transformskip
PUBLIC	_kvz_itransformskip
PUBLIC	_kvz_transform2d
PUBLIC	_kvz_itransform2d
PUBLIC	_kvz_get_scaled_qp
PUBLIC	_kvz_quantize_lcu_residual
PUBLIC	_kvz_quantize_residual_trskip
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??xy_to_zorder@@9@9		; `xy_to_zorder'::`1'::__LINE__Var
PUBLIC	??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ ; `string'
PUBLIC	??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ ; `string'
PUBLIC	??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_quantize_lcu_residual@@9@9	; `kvz_quantize_lcu_residual'::`1'::__LINE__Var
PUBLIC	??_C@_1HA@MBFKMMEN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1IM@PKHKBHNP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAw@ ; `string'
PUBLIC	__real@3fe0000000000000
EXTRN	__imp___wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_get_scan_order:PROC
EXTRN	_kvz_get_coeff_cost:PROC
EXTRN	_kvz_get_dct_func:PROC
EXTRN	_kvz_get_idct_func:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1IM@PKHKBHNP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAw@
CONST	SEGMENT
??_C@_1IM@PKHKBHNP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAw@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '4', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, '6', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '3'
	DB	00H, '2', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@MBFKMMEN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HA@MBFKMMEN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 't', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 's', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_quantize_lcu_residual@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_quantize_lcu_residual@@9@9 DD 01c3H ; `kvz_quantize_lcu_residual'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ DB 'y'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'y', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
CONST	SEGMENT
??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ DB 'x'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H, 'u', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??xy_to_zorder@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??xy_to_zorder@@9@9 DD 0182H		; `xy_to_zorder'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _quantize_tr_residual
_TEXT	SEGMENT
tv191 = -408						; size = 4
tv81 = -408						; size = 4
tv257 = -404						; size = 4
tv235 = -404						; size = 4
tv189 = -404						; size = 4
tv154 = -404						; size = 4
tv138 = -404						; size = 4
tv130 = -404						; size = 4
tv79 = -404						; size = 4
tv67 = -404						; size = 4
_tr_skip$1 = -201					; size = 1
_has_coeffs$ = -189					; size = 1
_can_use_trskip$ = -177					; size = 1
_coeff$ = -168						; size = 4
_ref$ = -156						; size = 4
_pred$ = -144						; size = 4
_z_index$ = -132					; size = 4
_offset$ = -120						; size = 4
_scan_idx$ = -108					; size = 4
_mode$ = -93						; size = 1
_lcu_width$ = -84					; size = 4
_chroma_depth$2 = -72					; size = 4
_tr_width$ = -60					; size = 4
_handled_elsewhere$ = -45				; size = 1
_lcu_px$ = -36						; size = 8
_shift$ = -20						; size = 4
_cfg$ = -8						; size = 4
_state$ = 8						; size = 4
_color$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_depth$ = 24						; size = 1
_cur_pu$ = 28						; size = 4
_lcu$ = 32						; size = 4
_early_skip$ = 36					; size = 1
_quantize_tr_residual PROC				; COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 305  :   const kvz_config *cfg    = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 306  :   const int32_t shift      = color == COLOR_Y ? 0 : 1;

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN20@quantize_t
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN21@quantize_t
$LN20@quantize_t:
	mov	DWORD PTR tv67[ebp], 1
$LN21@quantize_t:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _shift$[ebp], eax

; 307  :   const vector2d_t lcu_px  = { SUB_SCU(x) >> shift, SUB_SCU(y) >> shift };

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 308  : 
; 309  :   // If luma is 4x4, do chroma for the 8x8 luma area when handling the top
; 310  :   // left PU because the coordinates are correct.
; 311  :   bool handled_elsewhere = color != COLOR_Y &&

	cmp	DWORD PTR _color$[ebp], 0
	je	SHORT $LN22@quantize_t
	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 3
	jle	SHORT $LN22@quantize_t
	mov	ecx, DWORD PTR _lcu_px$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN43@quantize_t
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN43@quantize_t:
	test	ecx, ecx
	jne	SHORT $LN23@quantize_t
	mov	edx, DWORD PTR _lcu_px$[ebp+4]
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN44@quantize_t
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN44@quantize_t:
	test	edx, edx
	je	SHORT $LN22@quantize_t
$LN23@quantize_t:
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN24@quantize_t
$LN22@quantize_t:
	mov	DWORD PTR tv79[ebp], 0
$LN24@quantize_t:
	cmp	DWORD PTR tv79[ebp], 0
	jne	SHORT $LN25@quantize_t
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN26@quantize_t
$LN25@quantize_t:
	mov	DWORD PTR tv81[ebp], 1
$LN26@quantize_t:
	mov	al, BYTE PTR tv81[ebp]
	mov	BYTE PTR _handled_elsewhere$[ebp], al

; 312  :                            depth > MAX_DEPTH &&
; 313  :                            (lcu_px.x % 4 != 0 || lcu_px.y % 4 != 0);
; 314  :   if (handled_elsewhere) {

	movzx	eax, BYTE PTR _handled_elsewhere$[ebp]
	test	eax, eax
	je	SHORT $LN4@quantize_t

; 315  :     return;

	jmp	$LN1@quantize_t
$LN4@quantize_t:

; 316  :   }
; 317  : 
; 318  :   // Clear coded block flag structures for depths lower than current depth.
; 319  :   // This should ensure that the CBF data doesn't get corrupted if this function
; 320  :   // is called more than once.
; 321  :   cbf_clear(&cur_pu->cbf, depth, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 322  : 
; 323  :   int32_t tr_width;
; 324  :   if (color == COLOR_Y) {

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN5@quantize_t

; 325  :     tr_width = LCU_WIDTH >> depth;

	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	DWORD PTR _tr_width$[ebp], eax

; 326  :   } else {

	jmp	SHORT $LN6@quantize_t
$LN5@quantize_t:

; 327  :     const int chroma_depth = (depth == MAX_PU_DEPTH ? depth - 1 : depth);

	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 4
	jne	SHORT $LN27@quantize_t
	movzx	ecx, BYTE PTR _depth$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv130[ebp], ecx
	jmp	SHORT $LN28@quantize_t
$LN27@quantize_t:
	movzx	edx, BYTE PTR _depth$[ebp]
	mov	DWORD PTR tv130[ebp], edx
$LN28@quantize_t:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR _chroma_depth$2[ebp], eax

; 328  :     tr_width = LCU_WIDTH_C >> chroma_depth;

	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _chroma_depth$2[ebp]
	sar	eax, cl
	mov	DWORD PTR _tr_width$[ebp], eax
$LN6@quantize_t:

; 329  :   }
; 330  :   const int32_t lcu_width = LCU_WIDTH >> shift;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _lcu_width$[ebp], eax

; 331  :   const int8_t mode =

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN29@quantize_t
	mov	eax, DWORD PTR _cur_pu$[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR tv138[ebp], ecx
	jmp	SHORT $LN30@quantize_t
$LN29@quantize_t:
	mov	edx, DWORD PTR _cur_pu$[ebp]
	movsx	eax, BYTE PTR [edx+9]
	mov	DWORD PTR tv138[ebp], eax
$LN30@quantize_t:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _mode$[ebp], cl

; 332  :     (color == COLOR_Y) ? cur_pu->intra.mode : cur_pu->intra.mode_chroma;
; 333  :   const coeff_scan_order_t scan_idx =

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	movsx	ecx, BYTE PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 3
	movzx	ecx, al
	push	ecx
	call	_kvz_get_scan_order
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scan_idx$[ebp], eax

; 334  :     kvz_get_scan_order(cur_pu->type, mode, depth);
; 335  :   const int offset = lcu_px.x + lcu_px.y * lcu_width;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	imul	eax, DWORD PTR _lcu_width$[ebp]
	add	eax, DWORD PTR _lcu_px$[ebp]
	mov	DWORD PTR _offset$[ebp], eax

; 336  :   const int z_index = xy_to_zorder(lcu_width, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcu_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_width$[ebp]
	push	edx
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _z_index$[ebp], eax

; 337  : 
; 338  :   // Pointers to current location in arrays with prediction. The
; 339  :   // reconstruction will be written to this array.
; 340  :   kvz_pixel *pred = NULL;

	mov	DWORD PTR _pred$[ebp], 0

; 341  :   // Pointers to current location in arrays with reference.
; 342  :   const kvz_pixel *ref = NULL;

	mov	DWORD PTR _ref$[ebp], 0

; 343  :   // Pointers to current location in arrays with quantized coefficients.
; 344  :   coeff_t *coeff = NULL;

	mov	DWORD PTR _coeff$[ebp], 0

; 345  : 
; 346  :   switch (color) {

	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR tv154[ebp], eax
	cmp	DWORD PTR tv154[ebp], 0
	je	SHORT $LN7@quantize_t
	cmp	DWORD PTR tv154[ebp], 1
	je	SHORT $LN8@quantize_t
	cmp	DWORD PTR tv154[ebp], 2
	je	$LN9@quantize_t
	jmp	$LN2@quantize_t
$LN7@quantize_t:

; 347  :     case COLOR_Y:
; 348  :       pred  = &lcu->rec.y[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6540]
	mov	DWORD PTR _pred$[ebp], edx

; 349  :       ref   = &lcu->ref.y[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+392]
	mov	DWORD PTR _ref$[ebp], edx

; 350  :       coeff = &lcu->coeff.y[z_index];

	mov	eax, DWORD PTR _z_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+12688]
	mov	DWORD PTR _coeff$[ebp], edx

; 351  :       break;

	jmp	SHORT $LN2@quantize_t
$LN8@quantize_t:

; 352  :     case COLOR_U:
; 353  :       pred = &lcu->rec.u[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	mov	DWORD PTR _pred$[ebp], edx

; 354  :       ref  = &lcu->ref.u[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4488]
	mov	DWORD PTR _ref$[ebp], edx

; 355  :       coeff = &lcu->coeff.u[z_index];

	mov	eax, DWORD PTR _z_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+20880]
	mov	DWORD PTR _coeff$[ebp], edx

; 356  :       break;

	jmp	SHORT $LN2@quantize_t
$LN9@quantize_t:

; 357  :     case COLOR_V:
; 358  :       pred = &lcu->rec.v[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	mov	DWORD PTR _pred$[ebp], edx

; 359  :       ref  = &lcu->ref.v[offset];

	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5512]
	mov	DWORD PTR _ref$[ebp], edx

; 360  :       coeff = &lcu->coeff.v[z_index];

	mov	eax, DWORD PTR _z_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+22928]
	mov	DWORD PTR _coeff$[ebp], edx
$LN2@quantize_t:

; 361  :       break;
; 362  :   }
; 363  : 
; 364  :   const bool can_use_trskip = tr_width == 4 &&

	cmp	DWORD PTR _tr_width$[ebp], 4
	jne	SHORT $LN31@quantize_t
	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN31@quantize_t
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN31@quantize_t
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN32@quantize_t
$LN31@quantize_t:
	mov	DWORD PTR tv189[ebp], 0
$LN32@quantize_t:
	cmp	DWORD PTR tv189[ebp], 0
	jne	SHORT $LN33@quantize_t
	mov	DWORD PTR tv191[ebp], 0
	jmp	SHORT $LN34@quantize_t
$LN33@quantize_t:
	mov	DWORD PTR tv191[ebp], 1
$LN34@quantize_t:
	mov	cl, BYTE PTR tv191[ebp]
	mov	BYTE PTR _can_use_trskip$[ebp], cl

; 365  :                               color == COLOR_Y &&
; 366  :                               cfg->trskip_enable;
; 367  : 
; 368  :   bool has_coeffs;
; 369  : 
; 370  :   if (cfg->lossless) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	je	$LN10@quantize_t

; 371  :     has_coeffs = bypass_transquant(tr_width,

	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _tr_width$[ebp]
	push	eax
	call	_bypass_transquant
	add	esp, 28					; 0000001cH
	mov	BYTE PTR _has_coeffs$[ebp], al

; 372  :                                    lcu_width, // in stride
; 373  :                                    lcu_width, // out stride
; 374  :                                    ref,
; 375  :                                    pred,
; 376  :                                    pred,
; 377  :                                    coeff);
; 378  :     if (cfg->implicit_rdpcm && cur_pu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2392], 0
	je	SHORT $LN12@quantize_t
	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN12@quantize_t

; 379  :       // implicit rdpcm for horizontal and vertical intra modes
; 380  :       if (mode == 10) {

	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN13@quantize_t

; 381  :         rdpcm(tr_width, RDPCM_HOR, coeff);

	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _tr_width$[ebp]
	push	ecx
	call	_rdpcm
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN12@quantize_t
$LN13@quantize_t:

; 382  :       } else if (mode == 26) {

	movsx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 26					; 0000001aH
	jne	SHORT $LN12@quantize_t

; 383  :         rdpcm(tr_width, RDPCM_VER, coeff);

	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tr_width$[ebp]
	push	ecx
	call	_rdpcm
	add	esp, 12					; 0000000cH
$LN12@quantize_t:

; 384  :       }
; 385  :     }

	jmp	$LN11@quantize_t
$LN10@quantize_t:

; 386  : 
; 387  :   } else if (can_use_trskip) {

	movzx	eax, BYTE PTR _can_use_trskip$[ebp]
	test	eax, eax
	je	$LN16@quantize_t

; 388  :     int8_t tr_skip = 0;

	mov	BYTE PTR _tr_skip$1[ebp], 0

; 389  : 
; 390  :     // Try quantization with trskip and use it if it's better.
; 391  :     has_coeffs = kvz_quantize_residual_trskip(state,

	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_width$[ebp]
	push	edx
	lea	eax, DWORD PTR _tr_skip$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _scan_idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _tr_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_quantize_residual_trskip
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN35@quantize_t
	mov	DWORD PTR tv235[ebp], 0
	jmp	SHORT $LN36@quantize_t
$LN35@quantize_t:
	mov	DWORD PTR tv235[ebp], 1
$LN36@quantize_t:
	mov	al, BYTE PTR tv235[ebp]
	mov	BYTE PTR _has_coeffs$[ebp], al

; 392  :                                               cur_pu,
; 393  :                                               tr_width,
; 394  :                                               color,
; 395  :                                               scan_idx,
; 396  :                                               &tr_skip,
; 397  :                                               lcu_width,
; 398  :                                               lcu_width,
; 399  :                                               ref,
; 400  :                                               pred,
; 401  :                                               pred,
; 402  :                                               coeff);
; 403  :     cur_pu->tr_skip = tr_skip;

	mov	al, BYTE PTR _tr_skip$1[ebp]
	and	al, 1
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	and	dl, 254					; 000000feH
	or	dl, al
	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	BYTE PTR [eax+2], dl

; 404  :   } else {

	jmp	SHORT $LN11@quantize_t
$LN16@quantize_t:

; 405  :     has_coeffs = kvz_quantize_residual(state,

	mov	esi, esp
	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _coeff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred$[ebp]
	push	edx
	mov	eax, DWORD PTR _pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu_width$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _scan_idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color$[ebp]
	push	edx
	mov	eax, DWORD PTR _tr_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	DWORD PTR _kvz_quantize_residual
	add	esp, 52					; 00000034H
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN37@quantize_t
	mov	DWORD PTR tv257[ebp], 0
	jmp	SHORT $LN38@quantize_t
$LN37@quantize_t:
	mov	DWORD PTR tv257[ebp], 1
$LN38@quantize_t:
	mov	al, BYTE PTR tv257[ebp]
	mov	BYTE PTR _has_coeffs$[ebp], al
$LN11@quantize_t:

; 406  :                                        cur_pu,
; 407  :                                        tr_width,
; 408  :                                        color,
; 409  :                                        scan_idx,
; 410  :                                        false, // tr skip
; 411  :                                        lcu_width,
; 412  :                                        lcu_width,
; 413  :                                        ref,
; 414  :                                        pred,
; 415  :                                        pred,
; 416  :                                        coeff,
; 417  :                                        early_skip);
; 418  :   }
; 419  : 
; 420  :   if (has_coeffs) {

	movzx	eax, BYTE PTR _has_coeffs$[ebp]
	test	eax, eax
	je	SHORT $LN1@quantize_t

; 421  :     cbf_set(&cur_pu->cbf, depth, color);

	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set
	add	esp, 12					; 0000000cH
$LN1@quantize_t:

; 422  :   }
; 423  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@quantize_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN42@quantize_t:
	DD	2
	DD	$LN41@quantize_t
$LN41@quantize_t:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN39@quantize_t
	DD	-201					; ffffff37H
	DD	1
	DD	$LN40@quantize_t
$LN40@quantize_t:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN39@quantize_t:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_quantize_tr_residual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_quantize_residual_trskip
_TEXT	SEGMENT
_bit_cost$ = -152					; size = 4
_best$ = -140						; size = 4
_noskip$ = -128						; size = 56
_skip$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_cur_cu$ = 12						; size = 4
_width$ = 16						; size = 4
_color$ = 20						; size = 4
_scan_order$ = 24					; size = 4
_trskip_out$ = 28					; size = 4
_in_stride$ = 32					; size = 4
_out_stride$ = 36					; size = 4
_ref_in$ = 40						; size = 4
_pred_in$ = 44						; size = 4
_rec_out$ = 48						; size = 4
_coeff_out$ = 52					; size = 4
_kvz_quantize_residual_trskip PROC			; COMDAT

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 250  :   struct {
; 251  :     kvz_pixel rec[4*4];
; 252  :     coeff_t coeff[4*4];
; 253  :     uint32_t cost;
; 254  :     int has_coeffs;
; 255  :   } skip, noskip, *best;
; 256  : 
; 257  :   const int bit_cost = (int)(state->lambda + 0.5);

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _bit_cost$[ebp], ecx

; 258  :   
; 259  :   noskip.has_coeffs = kvz_quantize_residual(

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _noskip$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _noskip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_in$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _in_stride$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _scan_order$[ebp]
	push	edx
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	DWORD PTR _kvz_quantize_residual
	add	esp, 52					; 00000034H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _noskip$[ebp+52], eax

; 260  :       state, cur_cu, width, color, scan_order,
; 261  :       0, in_stride, 4,
; 262  :       ref_in, pred_in, noskip.rec, noskip.coeff, false);
; 263  :   noskip.cost = kvz_pixels_calc_ssd(ref_in, noskip.rec, in_stride, 4, 4);

	mov	esi, esp
	push	4
	push	4
	mov	eax, DWORD PTR _in_stride$[ebp]
	push	eax
	lea	ecx, DWORD PTR _noskip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_in$[ebp]
	push	edx
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _noskip$[ebp+48], eax

; 264  :   noskip.cost += kvz_get_coeff_cost(state, noskip.coeff, 4, 0, scan_order) * bit_cost;

	movzx	eax, BYTE PTR _scan_order$[ebp]
	push	eax
	push	0
	push	4
	lea	ecx, DWORD PTR _noskip$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_coeff_cost
	add	esp, 20					; 00000014H
	imul	eax, DWORD PTR _bit_cost$[ebp]
	add	eax, DWORD PTR _noskip$[ebp+48]
	mov	DWORD PTR _noskip$[ebp+48], eax

; 265  : 
; 266  :   skip.has_coeffs = kvz_quantize_residual(

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _skip$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _skip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_in$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_in$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _in_stride$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _scan_order$[ebp]
	push	edx
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	DWORD PTR _kvz_quantize_residual
	add	esp, 52					; 00000034H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _skip$[ebp+52], eax

; 267  :     state, cur_cu, width, color, scan_order,
; 268  :     1, in_stride, 4,
; 269  :     ref_in, pred_in, skip.rec, skip.coeff, false);
; 270  :   skip.cost = kvz_pixels_calc_ssd(ref_in, skip.rec, in_stride, 4, 4);

	mov	esi, esp
	push	4
	push	4
	mov	eax, DWORD PTR _in_stride$[ebp]
	push	eax
	lea	ecx, DWORD PTR _skip$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_in$[ebp]
	push	edx
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _skip$[ebp+48], eax

; 271  :   skip.cost += kvz_get_coeff_cost(state, skip.coeff, 4, 0, scan_order) * bit_cost;

	movzx	eax, BYTE PTR _scan_order$[ebp]
	push	eax
	push	0
	push	4
	lea	ecx, DWORD PTR _skip$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_coeff_cost
	add	esp, 20					; 00000014H
	imul	eax, DWORD PTR _bit_cost$[ebp]
	add	eax, DWORD PTR _skip$[ebp+48]
	mov	DWORD PTR _skip$[ebp+48], eax

; 272  : 
; 273  :   if (noskip.cost <= skip.cost) {

	mov	eax, DWORD PTR _noskip$[ebp+48]
	cmp	eax, DWORD PTR _skip$[ebp+48]
	ja	SHORT $LN2@kvz_quanti

; 274  :     *trskip_out = 0;

	mov	eax, DWORD PTR _trskip_out$[ebp]
	mov	BYTE PTR [eax], 0

; 275  :     best = &noskip;

	lea	eax, DWORD PTR _noskip$[ebp]
	mov	DWORD PTR _best$[ebp], eax

; 276  :   } else {

	jmp	SHORT $LN3@kvz_quanti
$LN2@kvz_quanti:

; 277  :     *trskip_out = 1;

	mov	eax, DWORD PTR _trskip_out$[ebp]
	mov	BYTE PTR [eax], 1

; 278  :     best = &skip;

	lea	eax, DWORD PTR _skip$[ebp]
	mov	DWORD PTR _best$[ebp], eax
$LN3@kvz_quanti:

; 279  :   }
; 280  : 
; 281  :   if (best->has_coeffs || rec_out != pred_in) {

	mov	eax, DWORD PTR _best$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN5@kvz_quanti
	mov	eax, DWORD PTR _rec_out$[ebp]
	cmp	eax, DWORD PTR _pred_in$[ebp]
	je	SHORT $LN4@kvz_quanti
$LN5@kvz_quanti:

; 282  :     // If there is no residual and reconstruction is already in rec_out, 
; 283  :     // we can skip this.
; 284  :     kvz_pixels_blit(best->rec, rec_out, width, width, 4, out_stride);

	mov	eax, DWORD PTR _out_stride$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _rec_out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _best$[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN4@kvz_quanti:

; 285  :   }
; 286  :   copy_coeffs(best->coeff, coeff_out, width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _coeff_out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _best$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 287  : 
; 288  :   return best->has_coeffs;

	mov	eax, DWORD PTR _best$[ebp]
	mov	eax, DWORD PTR [eax+52]

; 289  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@kvz_quanti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@kvz_quanti:
	DD	2
	DD	$LN9@kvz_quanti
$LN9@kvz_quanti:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN7@kvz_quanti
	DD	-128					; ffffff80H
	DD	56					; 00000038H
	DD	$LN8@kvz_quanti
$LN8@kvz_quanti:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN7@kvz_quanti:
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
_kvz_quantize_residual_trskip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _rdpcm
_TEXT	SEGMENT
tv69 = -268						; size = 4
tv67 = -268						; size = 4
tv65 = -268						; size = 4
_index$1 = -68						; size = 4
_x$2 = -56						; size = 4
_y$3 = -44						; size = 4
_min_y$ = -32						; size = 4
_min_x$ = -20						; size = 4
_offset$ = -8						; size = 4
_width$ = 8						; size = 4
_dir$ = 12						; size = 4
_coeff$ = 16						; size = 4
_rdpcm	PROC						; COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 125  :   const int offset = (dir == RDPCM_HOR) ? 1 : width;

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN9@rdpcm
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN10@rdpcm
$LN9@rdpcm:
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN10@rdpcm:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _offset$[ebp], ecx

; 126  :   const int min_x  = (dir == RDPCM_HOR) ? 1 : 0;

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN11@rdpcm
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN12@rdpcm
$LN11@rdpcm:
	mov	DWORD PTR tv67[ebp], 0
$LN12@rdpcm:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _min_x$[ebp], eax

; 127  :   const int min_y  = (dir == RDPCM_HOR) ? 0 : 1;

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN13@rdpcm
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN14@rdpcm
$LN13@rdpcm:
	mov	DWORD PTR tv69[ebp], 1
$LN14@rdpcm:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _min_y$[ebp], eax

; 128  : 
; 129  :   for (int y = width - 1; y >= min_y; y--) {

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _y$3[ebp], eax
	jmp	SHORT $LN4@rdpcm
$LN2@rdpcm:
	mov	eax, DWORD PTR _y$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _y$3[ebp], eax
$LN4@rdpcm:
	mov	eax, DWORD PTR _y$3[ebp]
	cmp	eax, DWORD PTR _min_y$[ebp]
	jl	SHORT $LN1@rdpcm

; 130  :     for (int x = width - 1; x >= min_x; x--) {

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$2[ebp], eax
	jmp	SHORT $LN7@rdpcm
$LN5@rdpcm:
	mov	eax, DWORD PTR _x$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$2[ebp], eax
$LN7@rdpcm:
	mov	eax, DWORD PTR _x$2[ebp]
	cmp	eax, DWORD PTR _min_x$[ebp]
	jl	SHORT $LN6@rdpcm

; 131  :       const int index = x + y * width;

	mov	eax, DWORD PTR _y$3[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _x$2[ebp]
	mov	DWORD PTR _index$1[ebp], eax

; 132  :       coeff[index] -= coeff[index - offset];

	mov	eax, DWORD PTR _index$1[ebp]
	sub	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	sub	eax, edx
	mov	ecx, DWORD PTR _index$1[ebp]
	mov	edx, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 133  :     }

	jmp	SHORT $LN5@rdpcm
$LN6@rdpcm:

; 134  :   }

	jmp	SHORT $LN2@rdpcm
$LN1@rdpcm:

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rdpcm	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _bypass_transquant
_TEXT	SEGMENT
tv94 = -284						; size = 4
tv91 = -280						; size = 4
_coeff$1 = -80						; size = 2
_coeff_idx$2 = -68					; size = 4
_out_idx$3 = -56					; size = 4
_in_idx$4 = -44						; size = 4
_x$5 = -32						; size = 4
_y$6 = -20						; size = 4
_nonzero_coeffs$ = -5					; size = 1
_width$ = 8						; size = 4
_in_stride$ = 12					; size = 4
_out_stride$ = 16					; size = 4
_ref_in$ = 20						; size = 4
_pred_in$ = 24						; size = 4
_rec_out$ = 28						; size = 4
_coeff_out$ = 32					; size = 4
_bypass_transquant PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   :   bool nonzero_coeffs = false;

	mov	BYTE PTR _nonzero_coeffs$[ebp], 0

; 94   : 
; 95   :   for (int y = 0; y < width; ++y) {

	mov	DWORD PTR _y$6[ebp], 0
	jmp	SHORT $LN4@bypass_tra
$LN2@bypass_tra:
	mov	eax, DWORD PTR _y$6[ebp]
	add	eax, 1
	mov	DWORD PTR _y$6[ebp], eax
$LN4@bypass_tra:
	mov	eax, DWORD PTR _y$6[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN3@bypass_tra

; 96   :     for (int x = 0; x < width; ++x) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN7@bypass_tra
$LN5@bypass_tra:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x$5[ebp], eax
$LN7@bypass_tra:
	mov	eax, DWORD PTR _x$5[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jge	$LN6@bypass_tra

; 97   :       int32_t in_idx    = x + y * in_stride;

	mov	eax, DWORD PTR _y$6[ebp]
	imul	eax, DWORD PTR _in_stride$[ebp]
	add	eax, DWORD PTR _x$5[ebp]
	mov	DWORD PTR _in_idx$4[ebp], eax

; 98   :       int32_t out_idx   = x + y * out_stride;

	mov	eax, DWORD PTR _y$6[ebp]
	imul	eax, DWORD PTR _out_stride$[ebp]
	add	eax, DWORD PTR _x$5[ebp]
	mov	DWORD PTR _out_idx$3[ebp], eax

; 99   :       int32_t coeff_idx = x + y * width;

	mov	eax, DWORD PTR _y$6[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	add	eax, DWORD PTR _x$5[ebp]
	mov	DWORD PTR _coeff_idx$2[ebp], eax

; 100  : 
; 101  :       // The residual must be computed before writing to rec_out because
; 102  :       // pred_in and rec_out may point to the same array.
; 103  :       coeff_t coeff        = (coeff_t)(ref_in[in_idx] - pred_in[in_idx]);

	mov	eax, DWORD PTR _ref_in$[ebp]
	add	eax, DWORD PTR _in_idx$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pred_in$[ebp]
	add	edx, DWORD PTR _in_idx$4[ebp]
	movzx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	WORD PTR _coeff$1[ebp], cx

; 104  :       coeff_out[coeff_idx] = coeff;

	mov	eax, DWORD PTR _coeff_idx$2[ebp]
	mov	ecx, DWORD PTR _coeff_out$[ebp]
	mov	dx, WORD PTR _coeff$1[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 105  :       rec_out[out_idx]     = ref_in[in_idx];

	mov	eax, DWORD PTR _rec_out$[ebp]
	add	eax, DWORD PTR _out_idx$3[ebp]
	mov	ecx, DWORD PTR _ref_in$[ebp]
	add	ecx, DWORD PTR _in_idx$4[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 106  : 
; 107  :       nonzero_coeffs |= (coeff != 0);

	movsx	eax, WORD PTR _coeff$1[ebp]
	test	eax, eax
	je	SHORT $LN9@bypass_tra
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN10@bypass_tra
$LN9@bypass_tra:
	mov	DWORD PTR tv91[ebp], 0
$LN10@bypass_tra:
	movzx	ecx, BYTE PTR _nonzero_coeffs$[ebp]
	or	ecx, DWORD PTR tv91[ebp]
	jne	SHORT $LN11@bypass_tra
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN12@bypass_tra
$LN11@bypass_tra:
	mov	DWORD PTR tv94[ebp], 1
$LN12@bypass_tra:
	mov	dl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _nonzero_coeffs$[ebp], dl

; 108  :     }

	jmp	$LN5@bypass_tra
$LN6@bypass_tra:

; 109  :   }

	jmp	$LN2@bypass_tra
$LN3@bypass_tra:

; 110  : 
; 111  :   return nonzero_coeffs;

	mov	al, BYTE PTR _nonzero_coeffs$[ebp]

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bypass_transquant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_quantize_lcu_residual
_TEXT	SEGMENT
_child_cbfs$1 = -80					; size = 6
_y2$2 = -64						; size = 4
_x2$3 = -52						; size = 4
_offset$4 = -40						; size = 4
_lcu_px$ = -28						; size = 8
_width$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_luma$ = 12						; size = 1
_chroma$ = 16						; size = 1
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_depth$ = 28						; size = 1
_cur_pu$ = 32						; size = 4
_lcu$ = 36						; size = 4
_early_skip$ = 40					; size = 1
_kvz_quantize_lcu_residual PROC				; COMDAT

; 451  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 452  :   const int32_t width = LCU_WIDTH >> depth;

	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 453  :   const vector2d_t lcu_px  = { SUB_SCU(x), SUB_SCU(y) };

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 454  : 
; 455  :   if (cur_pu == NULL) {

	cmp	DWORD PTR _cur_pu$[ebp], 0
	jne	SHORT $LN2@kvz_quanti

; 456  :     cur_pu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cur_pu$[ebp], eax
$LN2@kvz_quanti:

; 457  :   }
; 458  : 
; 459  :   // Tell clang-analyzer what is up. For some reason it can't figure out from
; 460  :   // asserting just depth.
; 461  :   assert(width ==  4 ||

	cmp	DWORD PTR _width$[ebp], 4
	je	SHORT $LN12@kvz_quanti
	cmp	DWORD PTR _width$[ebp], 8
	je	SHORT $LN12@kvz_quanti
	cmp	DWORD PTR _width$[ebp], 16		; 00000010H
	je	SHORT $LN12@kvz_quanti
	cmp	DWORD PTR _width$[ebp], 32		; 00000020H
	je	SHORT $LN12@kvz_quanti
	cmp	DWORD PTR _width$[ebp], 64		; 00000040H
	je	SHORT $LN12@kvz_quanti
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_quantize_lcu_residual@@9@9
	add	eax, 14					; 0000000eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HA@MBFKMMEN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1IM@PKHKBHNP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAw@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@kvz_quanti:

; 462  :          width ==  8 ||
; 463  :          width == 16 ||
; 464  :          width == 32 ||
; 465  :          width == 64);
; 466  : 
; 467  :   // Reset CBFs because CBFs might have been set
; 468  :   // for depth earlier
; 469  :   if (luma) {

	movzx	eax, BYTE PTR _luma$[ebp]
	test	eax, eax
	je	SHORT $LN3@kvz_quanti

; 470  :     cbf_clear(&cur_pu->cbf, depth, COLOR_Y);

	push	0
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH
$LN3@kvz_quanti:

; 471  :   }
; 472  :   if (chroma) {

	movzx	eax, BYTE PTR _chroma$[ebp]
	test	eax, eax
	je	SHORT $LN4@kvz_quanti

; 473  :     cbf_clear(&cur_pu->cbf, depth, COLOR_U);

	push	1
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 474  :     cbf_clear(&cur_pu->cbf, depth, COLOR_V);

	push	2
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH
$LN4@kvz_quanti:

; 475  :   }
; 476  : 
; 477  :   if (depth == 0 || cur_pu->tr_depth > depth) {

	movzx	eax, BYTE PTR _depth$[ebp]
	test	eax, eax
	je	SHORT $LN7@kvz_quanti
	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	edx, eax
	jle	$LN5@kvz_quanti
$LN7@kvz_quanti:

; 478  : 
; 479  :     // Split transform and increase depth
; 480  :     const int offset = width / 2;

	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset$4[ebp], eax

; 481  :     const int32_t x2 = x + offset;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _offset$4[ebp]
	mov	DWORD PTR _x2$3[ebp], eax

; 482  :     const int32_t y2 = y + offset;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _offset$4[ebp]
	mov	DWORD PTR _y2$2[ebp], eax

; 483  : 
; 484  :     kvz_quantize_lcu_residual(state, luma, chroma, x,  y,  depth + 1, NULL, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	push	0
	movzx	edx, BYTE PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _chroma$[ebp]
	push	edx
	movzx	eax, BYTE PTR _luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H

; 485  :     kvz_quantize_lcu_residual(state, luma, chroma, x2, y,  depth + 1, NULL, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	push	0
	movzx	edx, BYTE PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$3[ebp]
	push	ecx
	movzx	edx, BYTE PTR _chroma$[ebp]
	push	edx
	movzx	eax, BYTE PTR _luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H

; 486  :     kvz_quantize_lcu_residual(state, luma, chroma, x,  y2, depth + 1, NULL, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	push	0
	movzx	edx, BYTE PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _chroma$[ebp]
	push	edx
	movzx	eax, BYTE PTR _luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H

; 487  :     kvz_quantize_lcu_residual(state, luma, chroma, x2, y2, depth + 1, NULL, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	push	0
	movzx	edx, BYTE PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y2$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x2$3[ebp]
	push	ecx
	movzx	edx, BYTE PTR _chroma$[ebp]
	push	edx
	movzx	eax, BYTE PTR _luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H

; 488  : 
; 489  :     // Propagate coded block flags from child CUs to parent CU.
; 490  :     uint16_t child_cbfs[3] = {

	mov	eax, DWORD PTR _lcu_px$[ebp]
	add	eax, DWORD PTR _offset$4[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$1[ebp], ax
	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	add	ecx, DWORD PTR _offset$4[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$1[ebp+2], ax
	mov	eax, DWORD PTR _lcu_px$[ebp]
	add	eax, DWORD PTR _offset$4[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	add	ecx, DWORD PTR _offset$4[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	ax, WORD PTR [edx+ecx+24980]
	mov	WORD PTR _child_cbfs$1[ebp+4], ax

; 491  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y         )->cbf,
; 492  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x,          lcu_px.y + offset)->cbf,
; 493  :       LCU_GET_CU_AT_PX(lcu, lcu_px.x + offset, lcu_px.y + offset)->cbf,
; 494  :     };
; 495  : 
; 496  :     if (depth <= MAX_DEPTH) {

	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 3
	jg	SHORT $LN8@kvz_quanti

; 497  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_Y);

	push	0
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H

; 498  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_U);

	push	1
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H

; 499  :       cbf_set_conditionally(&cur_pu->cbf, child_cbfs, depth, COLOR_V);

	push	2
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _child_cbfs$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	add	edx, 4
	push	edx
	call	_cbf_set_conditionally
	add	esp, 16					; 00000010H
$LN8@kvz_quanti:

; 500  :     }
; 501  : 
; 502  :   } else {

	jmp	$LN1@kvz_quanti
$LN5@kvz_quanti:

; 503  :     // Process a leaf TU.
; 504  :     if (luma) {

	movzx	eax, BYTE PTR _luma$[ebp]
	test	eax, eax
	je	SHORT $LN9@kvz_quanti

; 505  :       quantize_tr_residual(state, COLOR_Y, x, y, depth, cur_pu, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	push	edx
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_quantize_tr_residual
	add	esp, 32					; 00000020H
$LN9@kvz_quanti:

; 506  :     }
; 507  :     if (chroma) {

	movzx	eax, BYTE PTR _chroma$[ebp]
	test	eax, eax
	je	SHORT $LN1@kvz_quanti

; 508  :       quantize_tr_residual(state, COLOR_U, x, y, depth, cur_pu, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	push	edx
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_quantize_tr_residual
	add	esp, 32					; 00000020H

; 509  :       quantize_tr_residual(state, COLOR_V, x, y, depth, cur_pu, lcu, early_skip);

	movzx	eax, BYTE PTR _early_skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$[ebp]
	push	edx
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_quantize_tr_residual
	add	esp, 32					; 00000020H
$LN1@kvz_quanti:

; 510  :     }
; 511  :   }
; 512  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@kvz_quanti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@kvz_quanti:
	DD	2
	DD	$LN15@kvz_quanti
$LN15@kvz_quanti:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN13@kvz_quanti
	DD	-80					; ffffffb0H
	DD	6
	DD	$LN14@kvz_quanti
$LN14@kvz_quanti:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN13@kvz_quanti:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_quantize_lcu_residual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_get_scaled_qp
_TEXT	SEGMENT
tv81 = -216						; size = 4
tv82 = -212						; size = 4
tv74 = -208						; size = 4
_qp_scaled$ = -8					; size = 4
_type$ = 8						; size = 1
_qp$ = 12						; size = 1
_qp_offset$ = 16					; size = 1
_kvz_get_scaled_qp PROC					; COMDAT

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 143  :   int32_t qp_scaled = 0;

	mov	DWORD PTR _qp_scaled$[ebp], 0

; 144  :   if(type == 0) {

	movsx	eax, BYTE PTR _type$[ebp]
	test	eax, eax
	jne	SHORT $LN2@kvz_get_sc

; 145  :     qp_scaled = qp + qp_offset;

	movsx	eax, BYTE PTR _qp$[ebp]
	movsx	ecx, BYTE PTR _qp_offset$[ebp]
	add	eax, ecx
	mov	DWORD PTR _qp_scaled$[ebp], eax

; 146  :   } else {

	jmp	$LN3@kvz_get_sc
$LN2@kvz_get_sc:

; 147  :     qp_scaled = CLIP(-qp_offset, 57, qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN7@kvz_get_sc
	mov	DWORD PTR tv74[ebp], 57			; 00000039H
	jmp	SHORT $LN8@kvz_get_sc
$LN7@kvz_get_sc:
	movsx	ecx, BYTE PTR _qp$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
$LN8@kvz_get_sc:
	movsx	edx, BYTE PTR _qp_offset$[ebp]
	neg	edx
	cmp	edx, DWORD PTR tv74[ebp]
	jle	SHORT $LN11@kvz_get_sc
	movsx	eax, BYTE PTR _qp_offset$[ebp]
	neg	eax
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN12@kvz_get_sc
$LN11@kvz_get_sc:
	movsx	ecx, BYTE PTR _qp$[ebp]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN9@kvz_get_sc
	mov	DWORD PTR tv81[ebp], 57			; 00000039H
	jmp	SHORT $LN10@kvz_get_sc
$LN9@kvz_get_sc:
	movsx	edx, BYTE PTR _qp$[ebp]
	mov	DWORD PTR tv81[ebp], edx
$LN10@kvz_get_sc:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN12@kvz_get_sc:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _qp_scaled$[ebp], ecx

; 148  :     if(qp_scaled < 0) {

	cmp	DWORD PTR _qp_scaled$[ebp], 0
	jge	SHORT $LN4@kvz_get_sc

; 149  :       qp_scaled = qp_scaled + qp_offset;

	movsx	eax, BYTE PTR _qp_offset$[ebp]
	add	eax, DWORD PTR _qp_scaled$[ebp]
	mov	DWORD PTR _qp_scaled$[ebp], eax

; 150  :     } else {

	jmp	SHORT $LN3@kvz_get_sc
$LN4@kvz_get_sc:

; 151  :       qp_scaled = kvz_g_chroma_scale[qp_scaled] + qp_offset;

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_chroma_scale[eax]
	movsx	edx, BYTE PTR _qp_offset$[ebp]
	add	ecx, edx
	mov	DWORD PTR _qp_scaled$[ebp], ecx
$LN3@kvz_get_sc:

; 152  :     }
; 153  :   }
; 154  :   return qp_scaled;

	mov	eax, DWORD PTR _qp_scaled$[ebp]

; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_get_scaled_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_itransform2d
_TEXT	SEGMENT
_idct_func$ = -8					; size = 4
_encoder$ = 8						; size = 4
_block$ = 12						; size = 4
_coeff$ = 16						; size = 4
_block_size$ = 20					; size = 1
_color$ = 24						; size = 4
_type$ = 28						; size = 4
_kvz_itransform2d PROC					; COMDAT

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 220  :   dct_func *idct_func = kvz_get_idct_func(block_size, color, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _block_size$[ebp]
	push	edx
	call	_kvz_get_idct_func
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _idct_func$[ebp], eax

; 221  :   idct_func(encoder->bitdepth, coeff, block);

	mov	esi, esp
	mov	eax, DWORD PTR _block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _coeff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	eax, BYTE PTR [edx+2532]
	push	eax
	call	DWORD PTR _idct_func$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_itransform2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_transform2d
_TEXT	SEGMENT
_dct_func$ = -8						; size = 4
_encoder$ = 8						; size = 4
_block$ = 12						; size = 4
_coeff$ = 16						; size = 4
_block_size$ = 20					; size = 1
_color$ = 24						; size = 4
_type$ = 28						; size = 4
_kvz_transform2d PROC					; COMDAT

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 209  :   dct_func *dct_func = kvz_get_dct_func(block_size, color, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _block_size$[ebp]
	push	edx
	call	_kvz_get_dct_func
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dct_func$[ebp], eax

; 210  :   dct_func(encoder->bitdepth, block, coeff);

	mov	esi, esp
	mov	eax, DWORD PTR _coeff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	eax, BYTE PTR [edx+2532]
	push	eax
	call	DWORD PTR _dct_func$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 211  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_transform2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_itransformskip
_TEXT	SEGMENT
_offset$ = -56						; size = 4
_k$ = -44						; size = 4
_j$ = -32						; size = 4
_shift$ = -20						; size = 4
_log2_tr_size$ = -8					; size = 4
_encoder$ = 8						; size = 4
_block$ = 12						; size = 4
_coeff$ = 16						; size = 4
_block_size$ = 20					; size = 1
_kvz_itransformskip PROC				; COMDAT

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 184  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	eax, BYTE PTR _block_size$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_tr_size$[ebp], ecx

; 185  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 15					; 0000000fH
	sub	edx, ecx
	sub	edx, DWORD PTR _log2_tr_size$[ebp]
	mov	DWORD PTR _shift$[ebp], edx

; 186  :   int32_t  j,k;
; 187  :   int32_t offset;
; 188  :   offset = (1 << (shift -1)); // For rounding

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _offset$[ebp], eax

; 189  :   for ( j = 0; j < block_size; j++ ) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@kvz_itrans
$LN2@kvz_itrans:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@kvz_itrans:
	movsx	eax, BYTE PTR _block_size$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@kvz_itrans

; 190  :     for(k = 0; k < block_size; k ++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@kvz_itrans
$LN5@kvz_itrans:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@kvz_itrans:
	movsx	eax, BYTE PTR _block_size$[ebp]
	cmp	DWORD PTR _k$[ebp], eax
	jge	SHORT $LN6@kvz_itrans

; 191  :       block[j * block_size + k] =  (coeff[j * block_size + k] + offset) >> shift;

	movsx	eax, BYTE PTR _block_size$[ebp]
	imul	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	movsx	eax, BYTE PTR _block_size$[ebp]
	imul	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 192  :     }

	jmp	SHORT $LN5@kvz_itrans
$LN6@kvz_itrans:

; 193  :   }

	jmp	SHORT $LN2@kvz_itrans
$LN1@kvz_itrans:

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_itransformskip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\transform.c
;	COMDAT _kvz_transformskip
_TEXT	SEGMENT
_k$ = -44						; size = 4
_j$ = -32						; size = 4
_shift$ = -20						; size = 4
_log2_tr_size$ = -8					; size = 4
_encoder$ = 8						; size = 4
_block$ = 12						; size = 4
_coeff$ = 16						; size = 4
_block_size$ = 20					; size = 1
_kvz_transformskip PROC					; COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90868309_transform@c
	call	@__CheckForDebuggerJustMyCode@4

; 165  :   uint32_t log2_tr_size =  kvz_g_convert_to_bit[block_size] + 2;

	movsx	eax, BYTE PTR _block_size$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_tr_size$[ebp], ecx

; 166  :   int32_t  shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size;

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 15					; 0000000fH
	sub	edx, ecx
	sub	edx, DWORD PTR _log2_tr_size$[ebp]
	mov	DWORD PTR _shift$[ebp], edx

; 167  :   int32_t  j,k;
; 168  :   for (j = 0; j < block_size; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@kvz_transf
$LN2@kvz_transf:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@kvz_transf:
	movsx	eax, BYTE PTR _block_size$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@kvz_transf

; 169  :     for(k = 0; k < block_size; k ++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN7@kvz_transf
$LN5@kvz_transf:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN7@kvz_transf:
	movsx	eax, BYTE PTR _block_size$[ebp]
	cmp	DWORD PTR _k$[ebp], eax
	jge	SHORT $LN6@kvz_transf

; 170  :       // Casting back and forth to make UBSan not trigger due to left-shifting negatives
; 171  :       coeff[j * block_size + k] = (int16_t)((uint16_t)(block[j * block_size + k]) << shift);

	movsx	eax, BYTE PTR _block_size$[ebp]
	imul	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR _shift$[ebp]
	shl	edx, cl
	movsx	eax, BYTE PTR _block_size$[ebp]
	imul	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 172  :     }

	jmp	SHORT $LN5@kvz_transf
$LN6@kvz_transf:

; 173  :   }

	jmp	SHORT $LN2@kvz_transf
$LN1@kvz_transf:

; 174  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_transformskip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_clear
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_clear PROC						; COMDAT

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	mov	eax, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[eax*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _cbf$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, edx
	mov	edx, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [edx], cx

; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_set_conditionally
_TEXT	SEGMENT
tv90 = -212						; size = 4
tv88 = -208						; size = 4
_child_cbf_set$ = -5					; size = 1
_cbf$ = 8						; size = 4
_child_cbfs$ = 12					; size = 4
_depth$ = 16						; size = 4
_plane$ = 20						; size = 4
_cbf_set_conditionally PROC				; COMDAT

; 545  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 546  :   bool child_cbf_set = cbf_is_set(child_cbfs[0], depth + 1, plane) ||

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _child_cbfs$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _child_cbfs$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	edx, DWORD PTR _plane$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _child_cbfs$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@cbf_set_co
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN5@cbf_set_co
$LN4@cbf_set_co:
	mov	DWORD PTR tv88[ebp], 1
$LN5@cbf_set_co:
	cmp	DWORD PTR tv88[ebp], 0
	jne	SHORT $LN6@cbf_set_co
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN7@cbf_set_co
$LN6@cbf_set_co:
	mov	DWORD PTR tv90[ebp], 1
$LN7@cbf_set_co:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR _child_cbf_set$[ebp], cl

; 547  :                        cbf_is_set(child_cbfs[1], depth + 1, plane) ||
; 548  :                        cbf_is_set(child_cbfs[2], depth + 1, plane);
; 549  :   if (child_cbf_set) {

	movzx	eax, BYTE PTR _child_cbf_set$[ebp]
	test	eax, eax
	je	SHORT $LN1@cbf_set_co

; 550  :     cbf_set(cbf, depth, plane);

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_set
	add	esp, 12					; 0000000cH
$LN1@cbf_set_co:

; 551  :   }
; 552  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_set_conditionally ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_set
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_set PROC						; COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 536  :   // Return value of the bit corresponding to the level.
; 537  :   *cbf |= (0x10 >> depth) << (NUM_CBF_DEPTHS * plane);

	mov	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	eax, cl
	mov	ecx, DWORD PTR _cbf$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [eax], dx

; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _xy_to_zorder
_TEXT	SEGMENT
tv89 = -208						; size = 4
_result$ = -8						; size = 4
_width$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xy_to_zorder PROC					; COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 387  :   assert(width % 4 == 0 && width >= 4 && width <= 64);

	mov	eax, DWORD PTR _width$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 4
	jb	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 64		; 00000040H
	jbe	SHORT $LN11@xy_to_zord
$LN10@xy_to_zord:
	mov	edx, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xy_to_zord:

; 388  :   assert(x % 4 == 0 && x < width);

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN12@xy_to_zord
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN13@xy_to_zord
$LN12@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xy_to_zord:

; 389  :   assert(y % 4 == 0 && y < width);

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN14@xy_to_zord
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN15@xy_to_zord
$LN14@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@xy_to_zord:

; 390  : 
; 391  :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 392  : 
; 393  :   switch (width) {

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 56			; 00000038H
	ja	$LN2@xy_to_zord
	mov	edx, DWORD PTR tv89[ebp]
	movzx	eax, BYTE PTR $LN16@xy_to_zord[edx]
	jmp	DWORD PTR $LN17@xy_to_zord[eax*4]
$LN4@xy_to_zord:

; 394  :     case 64:
; 395  :       result += x / 32 * (32*32);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 5
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 396  :       result += y / 32 * (64*32);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 5
	shl	eax, 11					; 0000000bH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 397  :       x %= 32;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 398  :       y %= 32;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN5@xy_to_zord:

; 399  :       // fallthrough
; 400  :     case 32:
; 401  :       result += x / 16 * (16*16);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 4
	shl	eax, 8
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 402  :       result += y / 16 * (32*16);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 4
	shl	eax, 9
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 403  :       x %= 16;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 404  :       y %= 16;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN6@xy_to_zord:

; 405  :       // fallthrough
; 406  :     case 16:
; 407  :       result += x / 8 * ( 8*8);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 3
	shl	eax, 6
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 408  :       result += y / 8 * (16*8);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 3
	shl	eax, 7
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 409  :       x %= 8;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 410  :       y %= 8;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN7@xy_to_zord:

; 411  :       // fallthrough
; 412  :     case 8:
; 413  :       result += x / 4 * (4*4);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 2
	shl	eax, 4
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 414  :       result += y / 4 * (8*4);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 2
	shl	eax, 5
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN2@xy_to_zord:

; 415  :       // fallthrough
; 416  :     case 4:
; 417  :       break;
; 418  :   }
; 419  : 
; 420  :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@xy_to_zord:
	DD	$LN7@xy_to_zord
	DD	$LN6@xy_to_zord
	DD	$LN5@xy_to_zord
	DD	$LN4@xy_to_zord
	DD	$LN2@xy_to_zord
$LN16@xy_to_zord:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_xy_to_zorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _copy_coeffs
_TEXT	SEGMENT
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
_width$ = 16						; size = 4
_copy_coeffs PROC					; COMDAT

; 369  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 370  :   memcpy(dest, src, width * width * sizeof(coeff_t));

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 371  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_coeffs ENDP
_TEXT	ENDS
END
