; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\filter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_g_tc_table_8x8
PUBLIC	_kvz_g_beta_table_8x8
PUBLIC	_kvz_g_luma_filter
PUBLIC	_kvz_g_chroma_filter
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__D9DF5D2E_filter@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_kvz_g_tc_table_8x8 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0dH
	DB	0eH
	DB	010H
	DB	012H
	DB	014H
	DB	016H
	DB	018H
	ORG $+2
_kvz_g_beta_table_8x8 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	014H
	DB	016H
	DB	018H
	DB	01aH
	DB	01cH
	DB	01eH
	DB	020H
	DB	022H
	DB	024H
	DB	026H
	DB	028H
	DB	02aH
	DB	02cH
	DB	02eH
	DB	030H
	DB	032H
	DB	034H
	DB	036H
	DB	038H
	DB	03aH
	DB	03cH
	DB	03eH
	DB	040H
_kvz_g_luma_filter DB 00H
	DB	00H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	04H
	DB	0f6H
	DB	03aH
	DB	011H
	DB	0fbH
	DB	01H
	DB	00H
	DB	0ffH
	DB	04H
	DB	0f5H
	DB	028H
	DB	028H
	DB	0f5H
	DB	04H
	DB	0ffH
	DB	00H
	DB	01H
	DB	0fbH
	DB	011H
	DB	03aH
	DB	0f6H
	DB	04H
	DB	0ffH
_kvz_g_chroma_filter DB 00H
	DB	040H
	DB	00H
	DB	00H
	DB	0feH
	DB	03aH
	DB	0aH
	DB	0feH
	DB	0fcH
	DB	036H
	DB	010H
	DB	0feH
	DB	0faH
	DB	02eH
	DB	01cH
	DB	0fcH
	DB	0fcH
	DB	024H
	DB	024H
	DB	0fcH
	DB	0fcH
	DB	01cH
	DB	02eH
	DB	0faH
	DB	0feH
	DB	010H
	DB	036H
	DB	0fcH
	DB	0feH
	DB	0aH
	DB	03aH
	DB	0feH
CONST	ENDS
PUBLIC	_kvz_filter_deblock_lcu
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_filter_deblock_lcu@@9@9	; `kvz_filter_deblock_lcu'::`1'::__LINE__Var
PUBLIC	??_C@_1GK@NANLLHAI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_cu_array_at:PROC
EXTRN	_kvz_cu_array_at_const:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_kvz_part_mode_num_parts:BYTE
EXTRN	_kvz_part_mode_offsets:BYTE
EXTRN	_kvz_g_chroma_scale:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f'
	DB	00H, 'g', 00H, '.', 00H, 'l', 00H, 'o', 00H, 's', 00H, 's', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@NANLLHAI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GK@NANLLHAI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_filter_deblock_lcu@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_filter_deblock_lcu@@9@9 DD 0310H	; `kvz_filter_deblock_lcu'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _filter_deblock_lcu_rightmost
_TEXT	SEGMENT
tv147 = -340						; size = 4
tv74 = -340						; size = 4
_pu_boundary$1 = -137					; size = 1
_tu_boundary$2 = -125					; size = 1
_y_c$3 = -116						; size = 4
_end_c$4 = -104						; size = 4
_x_c$5 = -92						; size = 4
_y_px_c$6 = -80						; size = 4
_x_px_c$7 = -68						; size = 4
_pu_boundary$8 = -53					; size = 1
_tu_boundary$9 = -41					; size = 1
_y$10 = -32						; size = 4
_end$ = -20						; size = 4
_x$ = -8						; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_filter_deblock_lcu_rightmost PROC			; COMDAT

; 727  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 728  :   // Luma
; 729  :   const int x = x_px - 4;

	mov	eax, DWORD PTR _x_px$[ebp]
	sub	eax, 4
	mov	DWORD PTR _x$[ebp], eax

; 730  :   const int end = MIN(y_px + LCU_WIDTH, state->tile->frame->height);

	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN14@filter_deb
	mov	edx, DWORD PTR _y_px$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN15@filter_deb
$LN14@filter_deb:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv74[ebp], eax
$LN15@filter_deb:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _end$[ebp], ecx

; 731  :   for (int y = y_px; y < end; y += 8) {

	mov	eax, DWORD PTR _y_px$[ebp]
	mov	DWORD PTR _y$10[ebp], eax
	jmp	SHORT $LN4@filter_deb
$LN2@filter_deb:
	mov	eax, DWORD PTR _y$10[ebp]
	add	eax, 8
	mov	DWORD PTR _y$10[ebp], eax
$LN4@filter_deb:
	mov	eax, DWORD PTR _y$10[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN3@filter_deb

; 732  :     // The top edge of the whole frame is not filtered.
; 733  :     bool tu_boundary = is_tu_boundary(state, x, y, EDGE_HOR);

	push	1
	mov	eax, DWORD PTR _y$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_is_tu_boundary
	add	esp, 16					; 00000010H
	mov	BYTE PTR _tu_boundary$9[ebp], al

; 734  :     bool pu_boundary = is_pu_boundary(state, x, y, EDGE_HOR);

	push	1
	mov	eax, DWORD PTR _y$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_is_pu_boundary
	add	esp, 16					; 00000010H
	mov	BYTE PTR _pu_boundary$8[ebp], al

; 735  :     if (y > 0 && (tu_boundary || pu_boundary)) {

	cmp	DWORD PTR _y$10[ebp], 0
	jle	SHORT $LN8@filter_deb
	movzx	eax, BYTE PTR _tu_boundary$9[ebp]
	test	eax, eax
	jne	SHORT $LN9@filter_deb
	movzx	eax, BYTE PTR _pu_boundary$8[ebp]
	test	eax, eax
	je	SHORT $LN8@filter_deb
$LN9@filter_deb:

; 736  :       filter_deblock_edge_luma(state, x, y, 4, EDGE_HOR, tu_boundary);

	movzx	eax, BYTE PTR _tu_boundary$9[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _y$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_filter_deblock_edge_luma
	add	esp, 24					; 00000018H
$LN8@filter_deb:

; 737  :     }
; 738  :   }

	jmp	SHORT $LN2@filter_deb
$LN3@filter_deb:

; 739  : 
; 740  :   // Chroma
; 741  :   if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN1@filter_deb

; 742  :     const int x_px_c = x_px >> 1;

	mov	eax, DWORD PTR _x_px$[ebp]
	sar	eax, 1
	mov	DWORD PTR _x_px_c$7[ebp], eax

; 743  :     const int y_px_c = y_px >> 1;

	mov	eax, DWORD PTR _y_px$[ebp]
	sar	eax, 1
	mov	DWORD PTR _y_px_c$6[ebp], eax

; 744  :     const int x_c = x_px_c - 4;

	mov	eax, DWORD PTR _x_px_c$7[ebp]
	sub	eax, 4
	mov	DWORD PTR _x_c$5[ebp], eax

; 745  :     const int end_c = MIN(y_px_c + LCU_WIDTH_C, state->tile->frame->height >> 1);

	mov	eax, DWORD PTR _y_px_c$6[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+12]
	sar	edx, 1
	cmp	eax, edx
	jge	SHORT $LN16@filter_deb
	mov	eax, DWORD PTR _y_px_c$6[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN17@filter_deb
$LN16@filter_deb:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	sar	ecx, 1
	mov	DWORD PTR tv147[ebp], ecx
$LN17@filter_deb:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _end_c$4[ebp], edx

; 746  :     for (int y_c = y_px_c; y_c < end_c; y_c += 8) {

	mov	eax, DWORD PTR _y_px_c$6[ebp]
	mov	DWORD PTR _y_c$3[ebp], eax
	jmp	SHORT $LN7@filter_deb
$LN5@filter_deb:
	mov	eax, DWORD PTR _y_c$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y_c$3[ebp], eax
$LN7@filter_deb:
	mov	eax, DWORD PTR _y_c$3[ebp]
	cmp	eax, DWORD PTR _end_c$4[ebp]
	jge	SHORT $LN1@filter_deb

; 747  :       // The top edge of the whole frame is not filtered.
; 748  :       bool tu_boundary = is_tu_boundary(state, x_c << 1, y_c << 1, EDGE_HOR);

	push	1
	mov	eax, DWORD PTR _y_c$3[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_c$5[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_is_tu_boundary
	add	esp, 16					; 00000010H
	mov	BYTE PTR _tu_boundary$2[ebp], al

; 749  :       bool pu_boundary = is_pu_boundary(state, x_c << 1, y_c << 1, EDGE_HOR);

	push	1
	mov	eax, DWORD PTR _y_c$3[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_c$5[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_is_pu_boundary
	add	esp, 16					; 00000010H
	mov	BYTE PTR _pu_boundary$1[ebp], al

; 750  :       if (y_c > 0 && (tu_boundary || pu_boundary)) {

	cmp	DWORD PTR _y_c$3[ebp], 0
	jle	SHORT $LN11@filter_deb
	movzx	eax, BYTE PTR _tu_boundary$2[ebp]
	test	eax, eax
	jne	SHORT $LN12@filter_deb
	movzx	eax, BYTE PTR _pu_boundary$1[ebp]
	test	eax, eax
	je	SHORT $LN11@filter_deb
$LN12@filter_deb:

; 751  :         filter_deblock_edge_chroma(state, x_c, y_c, 4, EDGE_HOR, tu_boundary);

	movzx	eax, BYTE PTR _tu_boundary$2[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _y_c$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_c$5[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_filter_deblock_edge_chroma
	add	esp, 24					; 00000018H
$LN11@filter_deb:

; 752  :       }
; 753  :     }

	jmp	$LN5@filter_deb
$LN1@filter_deb:

; 754  :   }
; 755  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filter_deblock_lcu_rightmost ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _filter_deblock_lcu_inside
_TEXT	SEGMENT
tv83 = -256						; size = 4
tv73 = -256						; size = 4
_tu_boundary$1 = -53					; size = 1
_edge_x$2 = -44						; size = 4
_edge_y$3 = -32						; size = 4
_end_y$ = -20						; size = 4
_end_x$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
_filter_deblock_lcu_inside PROC				; COMDAT

; 702  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 703  :   const int end_x = MIN(x + LCU_WIDTH, state->tile->frame->width);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN11@filter_deb
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN12@filter_deb
$LN11@filter_deb:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv73[ebp], eax
$LN12@filter_deb:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _end_x$[ebp], ecx

; 704  :   const int end_y = MIN(y + LCU_WIDTH, state->tile->frame->height);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN13@filter_deb
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN14@filter_deb
$LN13@filter_deb:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv83[ebp], eax
$LN14@filter_deb:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _end_y$[ebp], ecx

; 705  : 
; 706  :   for (int edge_y = y; edge_y < end_y; edge_y += 8) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _edge_y$3[ebp], eax
	jmp	SHORT $LN4@filter_deb
$LN2@filter_deb:
	mov	eax, DWORD PTR _edge_y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _edge_y$3[ebp], eax
$LN4@filter_deb:
	mov	eax, DWORD PTR _edge_y$3[ebp]
	cmp	eax, DWORD PTR _end_y$[ebp]
	jge	$LN1@filter_deb

; 707  :     for (int edge_x = x; edge_x < end_x; edge_x += 8) {

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _edge_x$2[ebp], eax
	jmp	SHORT $LN7@filter_deb
$LN5@filter_deb:
	mov	eax, DWORD PTR _edge_x$2[ebp]
	add	eax, 8
	mov	DWORD PTR _edge_x$2[ebp], eax
$LN7@filter_deb:
	mov	eax, DWORD PTR _edge_x$2[ebp]
	cmp	eax, DWORD PTR _end_x$[ebp]
	jge	SHORT $LN6@filter_deb

; 708  :       bool tu_boundary = is_tu_boundary(state, edge_x, edge_y, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_y$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _edge_x$2[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_is_tu_boundary
	add	esp, 16					; 00000010H
	mov	BYTE PTR _tu_boundary$1[ebp], al

; 709  :       if (tu_boundary || is_pu_boundary(state, edge_x, edge_y, dir)) {

	movzx	eax, BYTE PTR _tu_boundary$1[ebp]
	test	eax, eax
	jne	SHORT $LN9@filter_deb
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_y$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _edge_x$2[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_is_pu_boundary
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@filter_deb
$LN9@filter_deb:

; 710  :         filter_deblock_unit(state, edge_x, edge_y, 8, 8, dir, tu_boundary);

	movzx	eax, BYTE PTR _tu_boundary$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	push	8
	push	8
	mov	edx, DWORD PTR _edge_y$3[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_x$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_filter_deblock_unit
	add	esp, 28					; 0000001cH
$LN8@filter_deb:

; 711  :       }
; 712  :     }

	jmp	SHORT $LN5@filter_deb
$LN6@filter_deb:

; 713  :   }

	jmp	$LN2@filter_deb
$LN1@filter_deb:

; 714  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filter_deblock_lcu_inside ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _filter_deblock_unit
_TEXT	SEGMENT
tv82 = -296						; size = 4
tv76 = -296						; size = 4
tv80 = -292						; size = 4
tv74 = -292						; size = 4
_y_c$ = -92						; size = 4
_x_c$ = -80						; size = 4
_rightmost_4px_of_frame$1 = -65				; size = 1
_rightmost_4px_of_lcu$2 = -53				; size = 1
_x_right$3 = -44					; size = 4
_frame$4 = -32						; size = 4
_length_c$ = -20					; size = 4
_length$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dir$ = 28						; size = 4
_tu_boundary$ = 32					; size = 1
_filter_deblock_unit PROC				; COMDAT

; 646  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 647  :   // no filtering on borders (where filter would use pixels outside the picture)
; 648  :   if (x == 0 && dir == EDGE_VER) return;

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@filter_deb
	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN2@filter_deb
	jmp	$LN1@filter_deb
$LN2@filter_deb:

; 649  :   if (y == 0 && dir == EDGE_HOR) return;

	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN3@filter_deb
	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN3@filter_deb
	jmp	$LN1@filter_deb
$LN3@filter_deb:

; 650  : 
; 651  :   // Length of luma and chroma edges.
; 652  :   int32_t length;
; 653  :   int32_t length_c;
; 654  : 
; 655  :   if (dir == EDGE_HOR) {

	cmp	DWORD PTR _dir$[ebp], 1
	jne	$LN4@filter_deb

; 656  :     const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$4[ebp], edx

; 657  :     const int32_t x_right             = x + width;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _x_right$3[ebp], eax

; 658  :     const bool rightmost_4px_of_lcu   = x_right % LCU_WIDTH == 0;

	mov	eax, DWORD PTR _x_right$3[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN18@filter_deb
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN18@filter_deb:
	test	eax, eax
	jne	SHORT $LN10@filter_deb
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN11@filter_deb
$LN10@filter_deb:
	mov	DWORD PTR tv74[ebp], 0
$LN11@filter_deb:
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN12@filter_deb
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN13@filter_deb
$LN12@filter_deb:
	mov	DWORD PTR tv76[ebp], 1
$LN13@filter_deb:
	mov	cl, BYTE PTR tv76[ebp]
	mov	BYTE PTR _rightmost_4px_of_lcu$2[ebp], cl

; 659  :     const bool rightmost_4px_of_frame = x_right == frame->width;

	mov	eax, DWORD PTR _frame$4[ebp]
	mov	ecx, DWORD PTR _x_right$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN14@filter_deb
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN15@filter_deb
$LN14@filter_deb:
	mov	DWORD PTR tv80[ebp], 0
$LN15@filter_deb:
	cmp	DWORD PTR tv80[ebp], 0
	jne	SHORT $LN16@filter_deb
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN17@filter_deb
$LN16@filter_deb:
	mov	DWORD PTR tv82[ebp], 1
$LN17@filter_deb:
	mov	dl, BYTE PTR tv82[ebp]
	mov	BYTE PTR _rightmost_4px_of_frame$1[ebp], dl

; 660  : 
; 661  :     if (rightmost_4px_of_lcu && !rightmost_4px_of_frame) {

	movzx	eax, BYTE PTR _rightmost_4px_of_lcu$2[ebp]
	test	eax, eax
	je	SHORT $LN6@filter_deb
	movzx	eax, BYTE PTR _rightmost_4px_of_frame$1[ebp]
	test	eax, eax
	jne	SHORT $LN6@filter_deb

; 662  :       // The last 4 pixels will be deblocked when processing the next LCU.
; 663  :       length   = width - 4;

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 4
	mov	DWORD PTR _length$[ebp], eax

; 664  :       length_c = (width >> 1) - 4;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	sub	eax, 4
	mov	DWORD PTR _length_c$[ebp], eax

; 665  : 
; 666  :     } else {

	jmp	SHORT $LN7@filter_deb
$LN6@filter_deb:

; 667  :       length   = width;

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 668  :       length_c = width >> 1;

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length_c$[ebp], eax
$LN7@filter_deb:

; 669  :     }
; 670  :   } else {

	jmp	SHORT $LN5@filter_deb
$LN4@filter_deb:

; 671  :     length   = height;

	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 672  :     length_c = height >> 1;

	mov	eax, DWORD PTR _height$[ebp]
	sar	eax, 1
	mov	DWORD PTR _length_c$[ebp], eax
$LN5@filter_deb:

; 673  :   }
; 674  : 
; 675  :   filter_deblock_edge_luma(state, x, y, length, dir, tu_boundary);

	movzx	eax, BYTE PTR _tu_boundary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_filter_deblock_edge_luma
	add	esp, 24					; 00000018H

; 676  : 
; 677  :   // Chroma pixel coordinates.
; 678  :   const int32_t x_c = x >> 1;

	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 1
	mov	DWORD PTR _x_c$[ebp], eax

; 679  :   const int32_t y_c = y >> 1;

	mov	eax, DWORD PTR _y$[ebp]
	sar	eax, 1
	mov	DWORD PTR _y_c$[ebp], eax

; 680  :   if (state->encoder_control->chroma_format != KVZ_CSP_400 && is_on_8x8_grid(x_c, y_c, dir)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN1@filter_deb
	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_c$[ebp]
	push	edx
	call	_is_on_8x8_grid
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@filter_deb

; 681  :     filter_deblock_edge_chroma(state, x_c, y_c, length_c, dir, tu_boundary);

	movzx	eax, BYTE PTR _tu_boundary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length_c$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_filter_deblock_edge_chroma
	add	esp, 24					; 00000018H
$LN1@filter_deb:

; 682  :   }
; 683  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_filter_deblock_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _filter_deblock_edge_chroma
_TEXT	SEGMENT
tv158 = -460						; size = 4
tv159 = -456						; size = 4
tv168 = -452						; size = 4
tv166 = -452						; size = 4
tv143 = -452						; size = 4
_i$1 = -252						; size = 4
_component$2 = -240					; size = 4
_x_coord$3 = -228					; size = 4
_y_coord$4 = -216					; size = 4
_cu_q$5 = -204						; size = 4
_cu_p$6 = -192						; size = 4
_blk_idx$7 = -180					; size = 4
_step$8 = -168						; size = 4
_offset$9 = -156					; size = 4
_num_4px_parts$10 = -144				; size = 4
_Tc$11 = -132						; size = 4
_TC_index$12 = -120					; size = 4
_bitdepth_scale$13 = -108				; size = 4
_QP$14 = -96						; size = 4
_luma_qp$15 = -84					; size = 4
_strength$16 = -69					; size = 1
_src$17 = -60						; size = 8
_tc_offset_div2$18 = -44				; size = 4
_stride$19 = -32					; size = 4
_frame$ = -20						; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_length$ = 20						; size = 4
_dir$ = 24						; size = 4
_tu_boundary$ = 28					; size = 1
_filter_deblock_edge_chroma PROC			; COMDAT

; 573  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 574  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 575  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 576  : 
; 577  :   // For each subpart
; 578  :   {
; 579  :     int32_t stride = frame->rec->stride >> 1;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	sar	edx, 1
	mov	DWORD PTR _stride$19[ebp], edx

; 580  :     int32_t tc_offset_div2 = encoder->cfg.deblock_tc;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _tc_offset_div2$18[ebp], ecx

; 581  :     // TODO: support 10+bits
; 582  :     kvz_pixel *src[] = {

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _stride$19[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	add	eax, edx
	mov	DWORD PTR _src$17[ebp], eax
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _stride$19[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	add	eax, edx
	mov	DWORD PTR _src$17[ebp+4], eax

; 583  :       &frame->rec->u[x + y*stride],
; 584  :       &frame->rec->v[x + y*stride],
; 585  :     };
; 586  :     int8_t strength = 2;

	mov	BYTE PTR _strength$16[ebp], 2

; 587  : 
; 588  :     const int32_t luma_qp  = get_qp_y_pred(state, x << 1, y << 1, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_get_qp_y_pred
	add	esp, 16					; 00000010H
	movsx	ecx, al
	mov	DWORD PTR _luma_qp$15[ebp], ecx

; 589  :     int32_t QP             = kvz_g_chroma_scale[luma_qp];

	mov	eax, DWORD PTR _luma_qp$15[ebp]
	movzx	ecx, BYTE PTR _kvz_g_chroma_scale[eax]
	mov	DWORD PTR _QP$14[ebp], ecx

; 590  :     int32_t bitdepth_scale = 1 << (encoder->bitdepth-8);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _bitdepth_scale$13[ebp], edx

; 591  :     int32_t TC_index       = CLIP(0, 51+2, (int32_t)(QP + 2*(strength-1) + (tc_offset_div2 << 1)));

	movsx	eax, BYTE PTR _strength$16[ebp]
	mov	ecx, DWORD PTR _QP$14[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	eax, DWORD PTR _tc_offset_div2$18[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	cmp	ecx, 53					; 00000035H
	jle	SHORT $LN16@filter_deb
	mov	DWORD PTR tv143[ebp], 53		; 00000035H
	jmp	SHORT $LN17@filter_deb
$LN16@filter_deb:
	movsx	edx, BYTE PTR _strength$16[ebp]
	mov	eax, DWORD PTR _QP$14[ebp]
	lea	ecx, DWORD PTR [eax+edx*2-2]
	mov	edx, DWORD PTR _tc_offset_div2$18[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv143[ebp], eax
$LN17@filter_deb:
	cmp	DWORD PTR tv143[ebp], 0
	jge	SHORT $LN20@filter_deb
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN21@filter_deb
$LN20@filter_deb:
	movsx	ecx, BYTE PTR _strength$16[ebp]
	mov	edx, DWORD PTR _QP$14[ebp]
	lea	eax, DWORD PTR [edx+ecx*2-2]
	mov	ecx, DWORD PTR _tc_offset_div2$18[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	cmp	edx, 53					; 00000035H
	jle	SHORT $LN18@filter_deb
	mov	DWORD PTR tv158[ebp], 53		; 00000035H
	jmp	SHORT $LN19@filter_deb
$LN18@filter_deb:
	movsx	eax, BYTE PTR _strength$16[ebp]
	mov	ecx, DWORD PTR _QP$14[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	eax, DWORD PTR _tc_offset_div2$18[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR tv158[ebp], ecx
$LN19@filter_deb:
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv159[ebp], edx
$LN21@filter_deb:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR _TC_index$12[ebp], eax

; 592  :     int32_t Tc             = kvz_g_tc_table_8x8[TC_index]*bitdepth_scale;

	mov	eax, DWORD PTR _TC_index$12[ebp]
	movzx	ecx, BYTE PTR _kvz_g_tc_table_8x8[eax]
	imul	ecx, DWORD PTR _bitdepth_scale$13[ebp]
	mov	DWORD PTR _Tc$11[ebp], ecx

; 593  : 
; 594  :     const uint32_t num_4px_parts = length / 4;

	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _num_4px_parts$10[ebp], eax

; 595  : 
; 596  :     const int32_t offset = (dir == EDGE_HOR) ? stride :      1;

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN22@filter_deb
	mov	eax, DWORD PTR _stride$19[ebp]
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN23@filter_deb
$LN22@filter_deb:
	mov	DWORD PTR tv166[ebp], 1
$LN23@filter_deb:
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR _offset$9[ebp], ecx

; 597  :     const int32_t step   = (dir == EDGE_HOR) ?      1 : stride;

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN24@filter_deb
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN25@filter_deb
$LN24@filter_deb:
	mov	eax, DWORD PTR _stride$19[ebp]
	mov	DWORD PTR tv168[ebp], eax
$LN25@filter_deb:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _step$8[ebp], ecx

; 598  : 
; 599  :     for (uint32_t blk_idx = 0; blk_idx < num_4px_parts; ++blk_idx)

	mov	DWORD PTR _blk_idx$7[ebp], 0
	jmp	SHORT $LN4@filter_deb
$LN2@filter_deb:
	mov	eax, DWORD PTR _blk_idx$7[ebp]
	add	eax, 1
	mov	DWORD PTR _blk_idx$7[ebp], eax
$LN4@filter_deb:
	mov	eax, DWORD PTR _blk_idx$7[ebp]
	cmp	eax, DWORD PTR _num_4px_parts$10[ebp]
	jae	$LN1@filter_deb

; 600  :     {
; 601  :       // CUs on both sides of the edge
; 602  :       cu_info_t *cu_p;
; 603  :       cu_info_t *cu_q;
; 604  :       if (dir == EDGE_VER) {

	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN11@filter_deb

; 605  :         int32_t y_coord = (y + 4 * blk_idx) << 1;

	mov	eax, DWORD PTR _blk_idx$7[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 1
	mov	DWORD PTR _y_coord$4[ebp], edx

; 606  :         cu_p = kvz_cu_array_at(frame->cu_array, (x - 1) << 1, y_coord);

	mov	eax, DWORD PTR _y_coord$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+ecx-2]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_p$6[ebp], eax

; 607  :         cu_q = kvz_cu_array_at(frame->cu_array,  x      << 1, y_coord);

	mov	eax, DWORD PTR _y_coord$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_q$5[ebp], eax

; 608  : 
; 609  :       } else {

	jmp	SHORT $LN12@filter_deb
$LN11@filter_deb:

; 610  :         int32_t x_coord = (x + 4 * blk_idx) << 1;

	mov	eax, DWORD PTR _blk_idx$7[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 1
	mov	DWORD PTR _x_coord$3[ebp], edx

; 611  :         cu_p = kvz_cu_array_at(frame->cu_array, x_coord, (y - 1) << 1);

	mov	eax, DWORD PTR _y$[ebp]
	lea	ecx, DWORD PTR [eax+eax-2]
	push	ecx
	mov	edx, DWORD PTR _x_coord$3[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_p$6[ebp], eax

; 612  :         cu_q = kvz_cu_array_at(frame->cu_array, x_coord, (y    ) << 1);

	mov	eax, DWORD PTR _y$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_coord$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_q$5[ebp], eax
$LN12@filter_deb:

; 613  :       }
; 614  : 
; 615  :       // Only filter when strenght == 2 (one of the blocks is intra coded)
; 616  :       if (cu_q->type == CU_INTRA || cu_p->type == CU_INTRA) {

	mov	eax, DWORD PTR _cu_q$5[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN14@filter_deb
	mov	eax, DWORD PTR _cu_p$6[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	$LN13@filter_deb
$LN14@filter_deb:

; 617  :         for (int component = 0; component < 2; component++) {

	mov	DWORD PTR _component$2[ebp], 0
	jmp	SHORT $LN7@filter_deb
$LN5@filter_deb:
	mov	eax, DWORD PTR _component$2[ebp]
	add	eax, 1
	mov	DWORD PTR _component$2[ebp], eax
$LN7@filter_deb:
	cmp	DWORD PTR _component$2[ebp], 2
	jge	SHORT $LN13@filter_deb

; 618  :           for (int i = 0; i < 4; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@filter_deb
$LN8@filter_deb:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN10@filter_deb:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN9@filter_deb

; 619  :             kvz_filter_deblock_chroma(encoder, src[component] + step * (4*blk_idx + i), offset, Tc, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _Tc$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _blk_idx$7[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	imul	ecx, DWORD PTR _step$8[ebp]
	mov	edx, DWORD PTR _component$2[ebp]
	add	ecx, DWORD PTR _src$17[ebp+edx*4]
	push	ecx
	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_kvz_filter_deblock_chroma
	add	esp, 24					; 00000018H

; 620  :           }

	jmp	SHORT $LN8@filter_deb
$LN9@filter_deb:

; 621  :         }

	jmp	SHORT $LN5@filter_deb
$LN13@filter_deb:

; 622  :       }
; 623  :     }

	jmp	$LN2@filter_deb
$LN1@filter_deb:

; 624  :   }
; 625  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@filter_deb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@filter_deb:
	DD	1
	DD	$LN27@filter_deb
$LN27@filter_deb:
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN26@filter_deb
$LN26@filter_deb:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
_filter_deblock_edge_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _filter_deblock_edge_luma
_TEXT	SEGMENT
tv684 = -968						; size = 4
tv131 = -968						; size = 4
tv940 = -964						; size = 4
tv935 = -964						; size = 4
tv685 = -964						; size = 4
tv194 = -964						; size = 4
tv132 = -964						; size = 4
tv938 = -960						; size = 4
tv933 = -960						; size = 4
tv900 = -960						; size = 4
tv669 = -960						; size = 4
tv654 = -960						; size = 4
tv572 = -960						; size = 4
tv530 = -960						; size = 4
tv471 = -960						; size = 4
tv453 = -960						; size = 4
tv403 = -960						; size = 4
tv385 = -960						; size = 4
tv192 = -960						; size = 4
tv144 = -960						; size = 4
tv142 = -960						; size = 4
tv92 = -960						; size = 4
_q_2nd$1 = -565						; size = 1
_p_2nd$2 = -553						; size = 1
_filter_reach$3 = -544					; size = 4
_i$4 = -532						; size = 4
_sw$5 = -517						; size = 1
_dq$6 = -508						; size = 4
_dp$7 = -496						; size = 4
_dq3$8 = -484						; size = 4
_dp3$9 = -472						; size = 4
_dq0$10 = -460						; size = 4
_dp0$11 = -448						; size = 4
_b$12 = -436						; size = 32
_edge_src$13 = -396					; size = 4
_mvP1$14 = -384						; size = 4
_mvP0$15 = -372						; size = 4
_mvQ1$16 = -360						; size = 4
_mvQ0$17 = -348						; size = 4
_refQ1$18 = -336					; size = 4
_refQ0$19 = -324					; size = 4
_refP1$20 = -312					; size = 4
_refP0$21 = -300					; size = 4
_nonzero_coeffs$22 = -285				; size = 1
_x_coord$23 = -276					; size = 4
_y_coord$24 = -264					; size = 4
_cu_q$25 = -252						; size = 4
_cu_p$26 = -240						; size = 4
_block_idx$27 = -228					; size = 4
_y_stride$28 = -216					; size = 4
_x_stride$29 = -204					; size = 4
_num_4px_parts$30 = -192				; size = 4
_tc$31 = -180						; size = 4
_tc_index$32 = -168					; size = 4
_side_threshold$33 = -156				; size = 4
_beta$34 = -144						; size = 4
_b_index$35 = -132					; size = 4
_bitdepth_scale$36 = -120				; size = 4
_strength$37 = -105					; size = 1
_qp$38 = -96						; size = 4
_src$39 = -84						; size = 4
_orig_src$40 = -72					; size = 4
_tc_offset_div2$41 = -60				; size = 4
_beta_offset_div2$42 = -48				; size = 4
_stride$43 = -36					; size = 4
_encoder$ = -24						; size = 4
_frame$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_length$ = 20						; size = 4
_dir$ = 24						; size = 4
_tu_boundary$ = 28					; size = 1
_filter_deblock_edge_luma PROC				; COMDAT

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 968				; 000003c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-968]
	mov	ecx, 242				; 000000f2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 359  :   videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 360  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 361  : 
; 362  :   {
; 363  :     int32_t stride = frame->rec->stride;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _stride$43[ebp], edx

; 364  :     int32_t beta_offset_div2 = encoder->cfg.deblock_beta;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _beta_offset_div2$42[ebp], ecx

; 365  :     int32_t tc_offset_div2   = encoder->cfg.deblock_tc;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _tc_offset_div2$41[ebp], ecx

; 366  :     // TODO: support 10+bits
; 367  :     kvz_pixel *orig_src = &frame->rec->y[x + y*stride];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _stride$43[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, edx
	mov	DWORD PTR _orig_src$40[ebp], eax

; 368  :     kvz_pixel *src = orig_src;

	mov	eax, DWORD PTR _orig_src$40[ebp]
	mov	DWORD PTR _src$39[ebp], eax

; 369  : 
; 370  :     const int32_t qp = get_qp_y_pred(state, x, y, dir);

	mov	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_get_qp_y_pred
	add	esp, 16					; 00000010H
	movsx	ecx, al
	mov	DWORD PTR _qp$38[ebp], ecx

; 371  : 
; 372  :     int8_t strength = 0;

	mov	BYTE PTR _strength$37[ebp], 0

; 373  :     int32_t bitdepth_scale  = 1 << (encoder->bitdepth - 8);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _bitdepth_scale$36[ebp], edx

; 374  :     int32_t b_index         = CLIP(0, 51, qp + (beta_offset_div2 << 1));

	mov	eax, DWORD PTR _beta_offset_div2$42[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN37@filter_deb
	mov	DWORD PTR tv92[ebp], 51			; 00000033H
	jmp	SHORT $LN38@filter_deb
$LN37@filter_deb:
	mov	eax, DWORD PTR _beta_offset_div2$42[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv92[ebp], edx
$LN38@filter_deb:
	cmp	DWORD PTR tv92[ebp], 0
	jge	SHORT $LN41@filter_deb
	mov	DWORD PTR tv132[ebp], 0
	jmp	SHORT $LN42@filter_deb
$LN41@filter_deb:
	mov	eax, DWORD PTR _beta_offset_div2$42[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN39@filter_deb
	mov	DWORD PTR tv131[ebp], 51		; 00000033H
	jmp	SHORT $LN40@filter_deb
$LN39@filter_deb:
	mov	eax, DWORD PTR _beta_offset_div2$42[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv131[ebp], edx
$LN40@filter_deb:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv132[ebp], eax
$LN42@filter_deb:
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR _b_index$35[ebp], ecx

; 375  :     int32_t beta            = kvz_g_beta_table_8x8[b_index] * bitdepth_scale;

	mov	eax, DWORD PTR _b_index$35[ebp]
	movzx	ecx, BYTE PTR _kvz_g_beta_table_8x8[eax]
	imul	ecx, DWORD PTR _bitdepth_scale$36[ebp]
	mov	DWORD PTR _beta$34[ebp], ecx

; 376  :     int32_t side_threshold  = (beta + (beta >>1 )) >> 3;

	mov	eax, DWORD PTR _beta$34[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _beta$34[ebp]
	sar	eax, 3
	mov	DWORD PTR _side_threshold$33[ebp], eax

; 377  :     int32_t tc_index;
; 378  :     int32_t tc;
; 379  : 
; 380  :     uint32_t num_4px_parts  = length / 4;

	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _num_4px_parts$30[ebp], eax

; 381  : 
; 382  :     // Transpose the image by swapping x and y strides when doing horizontal
; 383  :     // edges.
; 384  :     const int32_t x_stride = (dir == EDGE_VER) ? 1 : stride;

	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN43@filter_deb
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN44@filter_deb
$LN43@filter_deb:
	mov	eax, DWORD PTR _stride$43[ebp]
	mov	DWORD PTR tv142[ebp], eax
$LN44@filter_deb:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _x_stride$29[ebp], ecx

; 385  :     const int32_t y_stride = (dir == EDGE_VER) ? stride : 1;

	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN45@filter_deb
	mov	eax, DWORD PTR _stride$43[ebp]
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN46@filter_deb
$LN45@filter_deb:
	mov	DWORD PTR tv144[ebp], 1
$LN46@filter_deb:
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR _y_stride$28[ebp], ecx

; 386  : 
; 387  :     // TODO: add CU based QP calculation
; 388  : 
; 389  :     // For each 4-pixel part in the edge
; 390  :     for (uint32_t block_idx = 0; block_idx < num_4px_parts; ++block_idx) {

	mov	DWORD PTR _block_idx$27[ebp], 0
	jmp	SHORT $LN4@filter_deb
$LN2@filter_deb:
	mov	eax, DWORD PTR _block_idx$27[ebp]
	add	eax, 1
	mov	DWORD PTR _block_idx$27[ebp], eax
$LN4@filter_deb:
	mov	eax, DWORD PTR _block_idx$27[ebp]
	cmp	eax, DWORD PTR _num_4px_parts$30[ebp]
	jae	$LN1@filter_deb

; 391  :       {
; 392  :         // CUs on both sides of the edge
; 393  :         cu_info_t *cu_p;
; 394  :         cu_info_t *cu_q;
; 395  :         if (dir == EDGE_VER) {

	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN8@filter_deb

; 396  :           int32_t y_coord = y + 4 * block_idx;

	mov	eax, DWORD PTR _block_idx$27[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _y_coord$24[ebp], edx

; 397  :           cu_p = kvz_cu_array_at(frame->cu_array, x - 1, y_coord);

	mov	eax, DWORD PTR _y_coord$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_p$26[ebp], eax

; 398  :           cu_q = kvz_cu_array_at(frame->cu_array, x,     y_coord);

	mov	eax, DWORD PTR _y_coord$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_q$25[ebp], eax

; 399  : 
; 400  :         } else {

	jmp	SHORT $LN9@filter_deb
$LN8@filter_deb:

; 401  :           int32_t x_coord = x + 4 * block_idx;

	mov	eax, DWORD PTR _block_idx$27[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _x_coord$23[ebp], edx

; 402  :           cu_p = kvz_cu_array_at(frame->cu_array, x_coord, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_coord$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_p$26[ebp], eax

; 403  :           cu_q = kvz_cu_array_at(frame->cu_array, x_coord, y    );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_coord$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu_q$25[ebp], eax
$LN9@filter_deb:

; 404  :         }
; 405  : 
; 406  :         bool nonzero_coeffs = cbf_is_set(cu_q->cbf, cu_q->tr_depth, COLOR_Y)

	push	0
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _cu_q$25[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN47@filter_deb
	push	0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	mov	al, BYTE PTR [edx+1]
	and	al, 7
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _cu_p$26[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN47@filter_deb
	mov	DWORD PTR tv192[ebp], 0
	jmp	SHORT $LN48@filter_deb
$LN47@filter_deb:
	mov	DWORD PTR tv192[ebp], 1
$LN48@filter_deb:
	cmp	DWORD PTR tv192[ebp], 0
	jne	SHORT $LN49@filter_deb
	mov	DWORD PTR tv194[ebp], 0
	jmp	SHORT $LN50@filter_deb
$LN49@filter_deb:
	mov	DWORD PTR tv194[ebp], 1
$LN50@filter_deb:
	mov	cl, BYTE PTR tv194[ebp]
	mov	BYTE PTR _nonzero_coeffs$22[ebp], cl

; 407  :                            || cbf_is_set(cu_p->cbf, cu_p->tr_depth, COLOR_Y);
; 408  : 
; 409  :         // Filter strength
; 410  :         strength = 0;

	mov	BYTE PTR _strength$37[ebp], 0

; 411  :         if (cu_q->type == CU_INTRA || cu_p->type == CU_INTRA) {

	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN12@filter_deb
	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN10@filter_deb
$LN12@filter_deb:

; 412  :           strength = 2;

	mov	BYTE PTR _strength$37[ebp], 2
	jmp	$LN11@filter_deb
$LN10@filter_deb:

; 413  :         } else if (tu_boundary && nonzero_coeffs) {

	movzx	eax, BYTE PTR _tu_boundary$[ebp]
	test	eax, eax
	je	SHORT $LN13@filter_deb
	movzx	eax, BYTE PTR _nonzero_coeffs$22[ebp]
	test	eax, eax
	je	SHORT $LN13@filter_deb

; 414  :           // Non-zero residual/coeffs and transform boundary
; 415  :           // Neither CU is intra so tr_depth <= MAX_DEPTH.
; 416  :           strength = 1;       

	mov	BYTE PTR _strength$37[ebp], 1
	jmp	$LN11@filter_deb
$LN13@filter_deb:

; 417  :         } else if (cu_p->inter.mv_dir != 3 && cu_q->inter.mv_dir != 3 &&

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	je	$LN15@filter_deb
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	je	$LN15@filter_deb
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, DWORD PTR _cu_q$25[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR [ecx+eax]
	mov	edx, DWORD PTR _cu_p$26[ebp]
	mov	al, BYTE PTR [edx+18]
	shr	al, 6
	and	al, 3
	movzx	edx, al
	mov	eax, DWORD PTR _cu_p$26[ebp]
	lea	edx, DWORD PTR [eax+edx*4+4]
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR [edx+eax]
	sub	ecx, edx
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN17@filter_deb
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, DWORD PTR _cu_q$25[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _cu_p$26[ebp]
	mov	dl, BYTE PTR [ecx+18]
	shr	dl, 6
	and	dl, 3
	movzx	ecx, dl
	mov	edx, DWORD PTR _cu_p$26[ebp]
	lea	ecx, DWORD PTR [edx+ecx*4+4]
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR [ecx+edx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jl	SHORT $LN15@filter_deb
$LN17@filter_deb:

; 418  :                  ((abs(cu_q->inter.mv[cu_q->inter.mv_dir - 1][0] - cu_p->inter.mv[cu_p->inter.mv_dir - 1][0]) >= 4) ||
; 419  :                   (abs(cu_q->inter.mv[cu_q->inter.mv_dir - 1][1] - cu_p->inter.mv[cu_p->inter.mv_dir - 1][1]) >= 4))) {
; 420  :           // Absolute motion vector diff between blocks >= 1 (Integer pixel)
; 421  :           strength = 1;

	mov	BYTE PTR _strength$37[ebp], 1
	jmp	SHORT $LN11@filter_deb
$LN15@filter_deb:

; 422  :         } else if (cu_p->inter.mv_dir != 3 && cu_q->inter.mv_dir != 3 &&

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	je	SHORT $LN11@filter_deb
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	je	SHORT $LN11@filter_deb
	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, DWORD PTR _cu_q$25[ebp]
	movzx	ecx, BYTE PTR [eax+edx+15]
	mov	edx, DWORD PTR _cu_p$26[ebp]
	mov	al, BYTE PTR [edx+18]
	shr	al, 6
	and	al, 3
	movzx	edx, al
	mov	eax, DWORD PTR _cu_p$26[ebp]
	movzx	edx, BYTE PTR [eax+edx+15]
	cmp	ecx, edx
	je	SHORT $LN11@filter_deb

; 423  :                    cu_q->inter.mv_ref[cu_q->inter.mv_dir - 1] != cu_p->inter.mv_ref[cu_p->inter.mv_dir - 1]) {
; 424  :           strength = 1;

	mov	BYTE PTR _strength$37[ebp], 1
$LN11@filter_deb:

; 425  :         }
; 426  :         
; 427  :         // B-slice related checks
; 428  :         if(!strength && state->frame->slicetype == KVZ_SLICE_B) {

	movsx	eax, BYTE PTR _strength$37[ebp]
	test	eax, eax
	jne	$LN19@filter_deb
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	$LN19@filter_deb

; 429  : 
; 430  :           // Zero all undefined motion vectors for easier usage
; 431  :           if(!(cu_q->inter.mv_dir & 1)) {

	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 1
	jne	SHORT $LN20@filter_deb

; 432  :             cu_q->inter.mv[0][0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_q$25[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	imul	edx, ecx, 0
	xor	ecx, ecx
	mov	WORD PTR [eax+edx], cx

; 433  :             cu_q->inter.mv[0][1] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_q$25[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	WORD PTR [eax+ecx], dx
$LN20@filter_deb:

; 434  :           }
; 435  :           if(!(cu_q->inter.mv_dir & 2)) {

	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 2
	jne	SHORT $LN21@filter_deb

; 436  :             cu_q->inter.mv[1][0] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_q$25[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR [edx+ecx], ax

; 437  :             cu_q->inter.mv[1][1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_q$25[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR [edx+eax], cx
$LN21@filter_deb:

; 438  :           }
; 439  : 
; 440  :           if(!(cu_p->inter.mv_dir & 1)) {

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 1
	jne	SHORT $LN22@filter_deb

; 441  :             cu_p->inter.mv[0][0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	imul	edx, ecx, 0
	xor	ecx, ecx
	mov	WORD PTR [eax+edx], cx

; 442  :             cu_p->inter.mv[0][1] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	WORD PTR [eax+ecx], dx
$LN22@filter_deb:

; 443  :           }
; 444  :           if(!(cu_p->inter.mv_dir & 2)) {

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 2
	jne	SHORT $LN23@filter_deb

; 445  :             cu_p->inter.mv[1][0] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_p$26[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR [edx+ecx], ax

; 446  :             cu_p->inter.mv[1][1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_p$26[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR [edx+eax], cx
$LN23@filter_deb:

; 447  :           }
; 448  :           const int refP0 = (cu_p->inter.mv_dir & 1) ? state->frame->ref_LX[0][cu_p->inter.mv_ref[0]] : -1;

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 1
	je	SHORT $LN51@filter_deb
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	movzx	eax, BYTE PTR [edx+eax+16]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	DWORD PTR tv385[ebp], ecx
	jmp	SHORT $LN52@filter_deb
$LN51@filter_deb:
	mov	DWORD PTR tv385[ebp], -1
$LN52@filter_deb:
	mov	edx, DWORD PTR tv385[ebp]
	mov	DWORD PTR _refP0$21[ebp], edx

; 449  :           const int refP1 = (cu_p->inter.mv_dir & 2) ? state->frame->ref_LX[1][cu_p->inter.mv_ref[1]] : -1;

	mov	eax, DWORD PTR _cu_p$26[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 2
	je	SHORT $LN53@filter_deb
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+16]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv403[ebp], edx
	jmp	SHORT $LN54@filter_deb
$LN53@filter_deb:
	mov	DWORD PTR tv403[ebp], -1
$LN54@filter_deb:
	mov	eax, DWORD PTR tv403[ebp]
	mov	DWORD PTR _refP1$20[ebp], eax

; 450  :           const int refQ0 = (cu_q->inter.mv_dir & 1) ? state->frame->ref_LX[0][cu_q->inter.mv_ref[0]] : -1;

	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 1
	je	SHORT $LN55@filter_deb
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _cu_q$25[ebp]
	movzx	eax, BYTE PTR [edx+eax+16]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	DWORD PTR tv453[ebp], ecx
	jmp	SHORT $LN56@filter_deb
$LN55@filter_deb:
	mov	DWORD PTR tv453[ebp], -1
$LN56@filter_deb:
	mov	edx, DWORD PTR tv453[ebp]
	mov	DWORD PTR _refQ0$19[ebp], edx

; 451  :           const int refQ1 = (cu_q->inter.mv_dir & 2) ? state->frame->ref_LX[1][cu_q->inter.mv_ref[1]] : -1;

	mov	eax, DWORD PTR _cu_q$25[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	and	edx, 2
	je	SHORT $LN57@filter_deb
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cu_q$25[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+16]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv471[ebp], edx
	jmp	SHORT $LN58@filter_deb
$LN57@filter_deb:
	mov	DWORD PTR tv471[ebp], -1
$LN58@filter_deb:
	mov	eax, DWORD PTR tv471[ebp]
	mov	DWORD PTR _refQ1$18[ebp], eax

; 452  :           const int16_t* mvQ0 = cu_q->inter.mv[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_q$25[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _mvQ0$17[ebp], eax

; 453  :           const int16_t* mvQ1 = cu_q->inter.mv[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_q$25[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _mvQ1$16[ebp], edx

; 454  : 
; 455  :           const int16_t* mvP0 = cu_p->inter.mv[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cu_p$26[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _mvP0$15[ebp], eax

; 456  :           const int16_t* mvP1 = cu_p->inter.mv[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cu_p$26[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _mvP1$14[ebp], edx

; 457  : 
; 458  :           if(( refP0 == refQ0 &&  refP1 == refQ1 ) || ( refP0 == refQ1 && refP1==refQ0 ))

	mov	eax, DWORD PTR _refP0$21[ebp]
	cmp	eax, DWORD PTR _refQ0$19[ebp]
	jne	SHORT $LN27@filter_deb
	mov	eax, DWORD PTR _refP1$20[ebp]
	cmp	eax, DWORD PTR _refQ1$18[ebp]
	je	SHORT $LN26@filter_deb
$LN27@filter_deb:
	mov	eax, DWORD PTR _refP0$21[ebp]
	cmp	eax, DWORD PTR _refQ1$18[ebp]
	jne	$LN24@filter_deb
	mov	eax, DWORD PTR _refP1$20[ebp]
	cmp	eax, DWORD PTR _refQ0$19[ebp]
	jne	$LN24@filter_deb
$LN26@filter_deb:

; 459  :           {
; 460  :             // Different L0 & L1
; 461  :             if ( refP0 != refP1 ) {          

	mov	eax, DWORD PTR _refP0$21[ebp]
	cmp	eax, DWORD PTR _refP1$20[ebp]
	je	$LN28@filter_deb

; 462  :               if ( refP0 == refQ0 ) {

	mov	eax, DWORD PTR _refP0$21[ebp]
	cmp	eax, DWORD PTR _refQ0$19[ebp]
	jne	$LN30@filter_deb

; 463  :                 strength  = ((abs(mvQ0[0] - mvP0[0]) >= 4) ||

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mvQ0$17[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	$LN59@filter_deb
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvQ0$17[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN59@filter_deb
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mvQ1$16[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	eax, WORD PTR [edx+eax]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN59@filter_deb
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvQ1$16[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	ecx, WORD PTR [edx+ecx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN59@filter_deb
	mov	DWORD PTR tv530[ebp], 0
	jmp	SHORT $LN60@filter_deb
$LN59@filter_deb:
	mov	DWORD PTR tv530[ebp], 1
$LN60@filter_deb:
	mov	dl, BYTE PTR tv530[ebp]
	mov	BYTE PTR _strength$37[ebp], dl

; 464  :                              (abs(mvQ0[1] - mvP0[1]) >= 4) ||
; 465  :                              (abs(mvQ1[0] - mvP1[0]) >= 4) ||
; 466  :                              (abs(mvQ1[1] - mvP1[1]) >= 4)) ? 1 : 0;
; 467  :               } else {

	jmp	$LN31@filter_deb
$LN30@filter_deb:

; 468  :                 strength  = ((abs(mvQ1[0] - mvP0[0]) >= 4) ||

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mvQ1$16[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	$LN61@filter_deb
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvQ1$16[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN61@filter_deb
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mvQ0$17[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	eax, WORD PTR [edx+eax]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN61@filter_deb
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvQ0$17[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	ecx, WORD PTR [edx+ecx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN61@filter_deb
	mov	DWORD PTR tv572[ebp], 0
	jmp	SHORT $LN62@filter_deb
$LN61@filter_deb:
	mov	DWORD PTR tv572[ebp], 1
$LN62@filter_deb:
	mov	dl, BYTE PTR tv572[ebp]
	mov	BYTE PTR _strength$37[ebp], dl
$LN31@filter_deb:

; 469  :                              (abs(mvQ1[1] - mvP0[1]) >= 4) ||
; 470  :                              (abs(mvQ0[0] - mvP1[0]) >= 4) ||
; 471  :                              (abs(mvQ0[1] - mvP1[1]) >= 4)) ? 1 : 0;
; 472  :               }
; 473  :             // Same L0 & L1
; 474  :             } else {  

	jmp	$LN29@filter_deb
$LN28@filter_deb:

; 475  :               strength  = ((abs(mvQ0[0] - mvP0[0]) >= 4) ||

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mvQ0$17[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	$LN63@filter_deb
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvQ0$17[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvP0$15[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN63@filter_deb
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mvQ1$16[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	eax, WORD PTR [edx+eax]
	sub	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN63@filter_deb
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvQ1$16[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mvP1$14[ebp]
	movsx	ecx, WORD PTR [edx+ecx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jl	$LN65@filter_deb
$LN63@filter_deb:
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _mvQ1$16[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _mvP0$15[ebp]
	movsx	ecx, WORD PTR [eax+ecx]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	$LN64@filter_deb
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _mvQ1$16[ebp]
	movsx	ecx, WORD PTR [eax+edx]
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _mvP0$15[ebp]
	movsx	edx, WORD PTR [eax+edx]
	sub	ecx, edx
	push	ecx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN64@filter_deb
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mvQ0$17[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _mvP1$14[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jge	SHORT $LN64@filter_deb
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvQ0$17[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mvP1$14[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 4
	jl	SHORT $LN65@filter_deb
$LN64@filter_deb:
	mov	DWORD PTR tv654[ebp], 1
	jmp	SHORT $LN66@filter_deb
$LN65@filter_deb:
	mov	DWORD PTR tv654[ebp], 0
$LN66@filter_deb:
	mov	cl, BYTE PTR tv654[ebp]
	mov	BYTE PTR _strength$37[ebp], cl
$LN29@filter_deb:

; 476  :                            (abs(mvQ0[1] - mvP0[1]) >= 4) ||
; 477  :                            (abs(mvQ1[0] - mvP1[0]) >= 4) ||
; 478  :                            (abs(mvQ1[1] - mvP1[1]) >= 4)) &&
; 479  :                           ((abs(mvQ1[0] - mvP0[0]) >= 4) ||
; 480  :                            (abs(mvQ1[1] - mvP0[1]) >= 4) ||
; 481  :                            (abs(mvQ0[0] - mvP1[0]) >= 4) ||
; 482  :                            (abs(mvQ0[1] - mvP1[1]) >= 4)) ? 1 : 0;
; 483  :             }
; 484  :           } else {

	jmp	SHORT $LN19@filter_deb
$LN24@filter_deb:

; 485  :             strength = 1;

	mov	BYTE PTR _strength$37[ebp], 1
$LN19@filter_deb:

; 486  :           }
; 487  :         }
; 488  : 
; 489  :         tc_index        = CLIP(0, 51 + 2, (int32_t)(qp + 2*(strength - 1) + (tc_offset_div2 << 1)));

	movsx	eax, BYTE PTR _strength$37[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	eax, DWORD PTR _tc_offset_div2$41[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	cmp	ecx, 53					; 00000035H
	jle	SHORT $LN67@filter_deb
	mov	DWORD PTR tv669[ebp], 53		; 00000035H
	jmp	SHORT $LN68@filter_deb
$LN67@filter_deb:
	movsx	edx, BYTE PTR _strength$37[ebp]
	mov	eax, DWORD PTR _qp$38[ebp]
	lea	ecx, DWORD PTR [eax+edx*2-2]
	mov	edx, DWORD PTR _tc_offset_div2$41[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv669[ebp], eax
$LN68@filter_deb:
	cmp	DWORD PTR tv669[ebp], 0
	jge	SHORT $LN71@filter_deb
	mov	DWORD PTR tv685[ebp], 0
	jmp	SHORT $LN72@filter_deb
$LN71@filter_deb:
	movsx	ecx, BYTE PTR _strength$37[ebp]
	mov	edx, DWORD PTR _qp$38[ebp]
	lea	eax, DWORD PTR [edx+ecx*2-2]
	mov	ecx, DWORD PTR _tc_offset_div2$41[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	cmp	edx, 53					; 00000035H
	jle	SHORT $LN69@filter_deb
	mov	DWORD PTR tv684[ebp], 53		; 00000035H
	jmp	SHORT $LN70@filter_deb
$LN69@filter_deb:
	movsx	eax, BYTE PTR _strength$37[ebp]
	mov	ecx, DWORD PTR _qp$38[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	eax, DWORD PTR _tc_offset_div2$41[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR tv684[ebp], ecx
$LN70@filter_deb:
	mov	edx, DWORD PTR tv684[ebp]
	mov	DWORD PTR tv685[ebp], edx
$LN72@filter_deb:
	mov	eax, DWORD PTR tv685[ebp]
	mov	DWORD PTR _tc_index$32[ebp], eax

; 490  :         tc              = kvz_g_tc_table_8x8[tc_index] * bitdepth_scale;

	mov	eax, DWORD PTR _tc_index$32[ebp]
	movzx	ecx, BYTE PTR _kvz_g_tc_table_8x8[eax]
	imul	ecx, DWORD PTR _bitdepth_scale$36[ebp]
	mov	DWORD PTR _tc$31[ebp], ecx

; 491  :       }
; 492  : 
; 493  :       if (strength == 0) continue;

	movsx	eax, BYTE PTR _strength$37[ebp]
	test	eax, eax
	jne	SHORT $LN32@filter_deb
	jmp	$LN2@filter_deb
$LN32@filter_deb:

; 494  : 
; 495  :       //                   +-- edge_src
; 496  :       //                   v
; 497  :       // line0 p3 p2 p1 p0 q0 q1 q2 q3
; 498  :       kvz_pixel *edge_src = &src[block_idx * 4 * y_stride];

	mov	eax, DWORD PTR _block_idx$27[ebp]
	shl	eax, 2
	imul	eax, DWORD PTR _y_stride$28[ebp]
	add	eax, DWORD PTR _src$39[ebp]
	mov	DWORD PTR _edge_src$13[ebp], eax

; 499  : 
; 500  :       // Gather the lines of pixels required for the filter on/off decision.
; 501  :       kvz_pixel b[4][8];
; 502  :       gather_deblock_pixels(edge_src, x_stride, 0 * y_stride, 4, &b[0][0]);

	mov	eax, 8
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	add	edx, ecx
	push	edx
	push	4
	imul	edx, DWORD PTR _y_stride$28[ebp], 0
	push	edx
	mov	eax, DWORD PTR _x_stride$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_src$13[ebp]
	push	ecx
	call	_gather_deblock_pixels
	add	esp, 20					; 00000014H

; 503  :       gather_deblock_pixels(edge_src, x_stride, 3 * y_stride, 4, &b[3][0]);

	mov	eax, 8
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	add	edx, ecx
	push	edx
	push	4
	imul	edx, DWORD PTR _y_stride$28[ebp], 3
	push	edx
	mov	eax, DWORD PTR _x_stride$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_src$13[ebp]
	push	ecx
	call	_gather_deblock_pixels
	add	esp, 20					; 00000014H

; 504  : 
; 505  :       int_fast32_t dp0 = abs(b[0][1] - 2 * b[0][2] + b[0][3]);

	mov	eax, 8
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 8
	imul	eax, edx, 0
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	shl	edx, 1
	sub	ecx, edx
	mov	eax, 8
	imul	edx, eax, 0
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	add	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _dp0$11[ebp], eax

; 506  :       int_fast32_t dq0 = abs(b[0][4] - 2 * b[0][5] + b[0][6]);

	mov	eax, 8
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	shl	eax, 2
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 8
	imul	eax, edx, 0
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 5
	movzx	edx, BYTE PTR [edx+eax]
	shl	edx, 1
	sub	ecx, edx
	mov	eax, 8
	imul	edx, eax, 0
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 6
	movzx	eax, BYTE PTR [eax+edx]
	add	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _dq0$10[ebp], eax

; 507  :       int_fast32_t dp3 = abs(b[3][1] - 2 * b[3][2] + b[3][3]);

	mov	eax, 8
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 8
	imul	eax, edx, 3
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	shl	edx, 1
	sub	ecx, edx
	mov	eax, 8
	imul	edx, eax, 3
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	add	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _dp3$9[ebp], eax

; 508  :       int_fast32_t dq3 = abs(b[3][4] - 2 * b[3][5] + b[3][6]);

	mov	eax, 8
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	shl	eax, 2
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 8
	imul	eax, edx, 3
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 5
	movzx	edx, BYTE PTR [edx+eax]
	shl	edx, 1
	sub	ecx, edx
	mov	eax, 8
	imul	edx, eax, 3
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 6
	movzx	eax, BYTE PTR [eax+edx]
	add	ecx, eax
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _dq3$8[ebp], eax

; 509  :       int_fast32_t dp = dp0 + dp3;

	mov	eax, DWORD PTR _dp0$11[ebp]
	add	eax, DWORD PTR _dp3$9[ebp]
	mov	DWORD PTR _dp$7[ebp], eax

; 510  :       int_fast32_t dq = dq0 + dq3;

	mov	eax, DWORD PTR _dq0$10[ebp]
	add	eax, DWORD PTR _dq3$8[ebp]
	mov	DWORD PTR _dq$6[ebp], eax

; 511  : 
; 512  :       if (dp + dq < beta) {

	mov	eax, DWORD PTR _dp$7[ebp]
	add	eax, DWORD PTR _dq$6[ebp]
	cmp	eax, DWORD PTR _beta$34[ebp]
	jge	$LN33@filter_deb

; 513  :         // Strong filtering flag checking
; 514  :         int8_t sw = 2 * (dp0 + dq0) < beta >> 2 &&

	mov	eax, DWORD PTR _dp0$11[ebp]
	add	eax, DWORD PTR _dq0$10[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _beta$34[ebp]
	sar	ecx, 2
	cmp	eax, ecx
	jge	$LN73@filter_deb
	mov	edx, DWORD PTR _dp3$9[ebp]
	add	edx, DWORD PTR _dq3$8[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _beta$34[ebp]
	sar	eax, 2
	cmp	edx, eax
	jge	$LN73@filter_deb
	mov	ecx, 8
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 8
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	shl	edx, 2
	movzx	ecx, BYTE PTR [ecx+edx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	imul	edx, DWORD PTR _tc$31[ebp], 5
	add	edx, 1
	sar	edx, 1
	cmp	eax, edx
	jge	$LN73@filter_deb
	mov	eax, 8
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 8
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _b$12[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 2
	movzx	eax, BYTE PTR [eax+ecx]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	imul	ecx, DWORD PTR _tc$31[ebp], 5
	add	ecx, 1
	sar	ecx, 1
	cmp	eax, ecx
	jge	$LN73@filter_deb
	mov	edx, 8
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _b$12[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 8
	imul	eax, edx, 0
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax]
	sub	ecx, edx
	push	ecx
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	eax, 8
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _b$12[ebp+ecx]
	mov	eax, 1
	shl	eax, 2
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 8
	imul	eax, edx, 0
	lea	edx, DWORD PTR _b$12[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 7
	movzx	edx, BYTE PTR [edx+eax]
	sub	ecx, edx
	push	ecx
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	eax, DWORD PTR _beta$34[ebp]
	sar	eax, 3
	cmp	esi, eax
	jge	$LN73@filter_deb
	mov	ecx, 8
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _b$12[ebp+edx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 8
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	edx, 8
	imul	eax, edx, 3
	lea	ecx, DWORD PTR _b$12[ebp+eax]
	mov	edx, 1
	shl	edx, 2
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 8
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _b$12[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 7
	movzx	ecx, BYTE PTR [ecx+edx]
	sub	eax, ecx
	push	eax
	call	_abs
	add	esp, 4
	add	esi, eax
	mov	edx, DWORD PTR _beta$34[ebp]
	sar	edx, 3
	cmp	esi, edx
	jge	SHORT $LN73@filter_deb
	mov	DWORD PTR tv900[ebp], 1
	jmp	SHORT $LN74@filter_deb
$LN73@filter_deb:
	mov	DWORD PTR tv900[ebp], 0
$LN74@filter_deb:
	mov	al, BYTE PTR tv900[ebp]
	mov	BYTE PTR _sw$5[ebp], al

; 515  :                     2 * (dp3 + dq3) < beta >> 2 &&
; 516  :                     abs(b[0][3] - b[0][4]) < (5 * tc + 1) >> 1 &&
; 517  :                     abs(b[3][3] - b[3][4]) < (5 * tc + 1) >> 1 &&
; 518  :                     abs(b[0][0] - b[0][3]) + abs(b[0][4] - b[0][7]) < beta >> 3 &&
; 519  :                     abs(b[3][0] - b[3][3]) + abs(b[3][4] - b[3][7]) < beta >> 3;
; 520  : 
; 521  :         // Read lines 1 and 2. Weak filtering doesn't use the outermost pixels
; 522  :         // but let's give them anyway to simplify control flow.
; 523  :         gather_deblock_pixels(edge_src, x_stride, 1 * y_stride, 4, &b[1][0]);

	mov	eax, 8
	shl	eax, 0
	lea	ecx, DWORD PTR _b$12[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	add	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _y_stride$28[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_stride$29[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_src$13[ebp]
	push	eax
	call	_gather_deblock_pixels
	add	esp, 20					; 00000014H

; 524  :         gather_deblock_pixels(edge_src, x_stride, 2 * y_stride, 4, &b[2][0]);

	mov	eax, 8
	shl	eax, 1
	lea	ecx, DWORD PTR _b$12[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	add	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _y_stride$28[ebp]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _x_stride$29[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_src$13[ebp]
	push	eax
	call	_gather_deblock_pixels
	add	esp, 20					; 00000014H

; 525  : 
; 526  :         for (int i = 0; i < 4; ++i) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN7@filter_deb
$LN5@filter_deb:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN7@filter_deb:
	cmp	DWORD PTR _i$4[ebp], 4
	jge	$LN33@filter_deb

; 527  :           int filter_reach;
; 528  :           if (sw) {

	movsx	eax, BYTE PTR _sw$5[ebp]
	test	eax, eax
	je	SHORT $LN34@filter_deb

; 529  :             filter_reach = kvz_filter_deblock_luma_strong(&b[i][0], tc);

	mov	eax, DWORD PTR _tc$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	lea	edx, DWORD PTR _b$12[ebp+ecx*8]
	mov	eax, 1
	imul	ecx, eax, 0
	add	edx, ecx
	push	edx
	call	_kvz_filter_deblock_luma_strong
	add	esp, 8
	mov	DWORD PTR _filter_reach$3[ebp], eax

; 530  :           } else {

	jmp	$LN35@filter_deb
$LN34@filter_deb:

; 531  :             bool p_2nd = dp < side_threshold;

	mov	eax, DWORD PTR _dp$7[ebp]
	cmp	eax, DWORD PTR _side_threshold$33[ebp]
	jge	SHORT $LN75@filter_deb
	mov	DWORD PTR tv933[ebp], 1
	jmp	SHORT $LN76@filter_deb
$LN75@filter_deb:
	mov	DWORD PTR tv933[ebp], 0
$LN76@filter_deb:
	cmp	DWORD PTR tv933[ebp], 0
	jne	SHORT $LN77@filter_deb
	mov	DWORD PTR tv935[ebp], 0
	jmp	SHORT $LN78@filter_deb
$LN77@filter_deb:
	mov	DWORD PTR tv935[ebp], 1
$LN78@filter_deb:
	mov	cl, BYTE PTR tv935[ebp]
	mov	BYTE PTR _p_2nd$2[ebp], cl

; 532  :             bool q_2nd = dq < side_threshold;

	mov	eax, DWORD PTR _dq$6[ebp]
	cmp	eax, DWORD PTR _side_threshold$33[ebp]
	jge	SHORT $LN79@filter_deb
	mov	DWORD PTR tv938[ebp], 1
	jmp	SHORT $LN80@filter_deb
$LN79@filter_deb:
	mov	DWORD PTR tv938[ebp], 0
$LN80@filter_deb:
	cmp	DWORD PTR tv938[ebp], 0
	jne	SHORT $LN81@filter_deb
	mov	DWORD PTR tv940[ebp], 0
	jmp	SHORT $LN82@filter_deb
$LN81@filter_deb:
	mov	DWORD PTR tv940[ebp], 1
$LN82@filter_deb:
	mov	cl, BYTE PTR tv940[ebp]
	mov	BYTE PTR _q_2nd$1[ebp], cl

; 533  :             filter_reach = kvz_filter_deblock_luma_weak(encoder, &b[i][0], tc, p_2nd, q_2nd);

	movzx	eax, BYTE PTR _q_2nd$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR _p_2nd$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _tc$31[ebp]
	push	edx
	mov	eax, DWORD PTR _i$4[ebp]
	lea	ecx, DWORD PTR _b$12[ebp+eax*8]
	mov	edx, 1
	imul	eax, edx, 0
	add	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _encoder$[ebp]
	push	ecx
	call	_kvz_filter_deblock_luma_weak
	add	esp, 20					; 00000014H
	mov	DWORD PTR _filter_reach$3[ebp], eax
$LN35@filter_deb:

; 534  :           }
; 535  :           scatter_deblock_pixels(&b[i][0], x_stride, i * y_stride, filter_reach, edge_src);

	mov	eax, DWORD PTR _edge_src$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _filter_reach$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$4[ebp]
	imul	edx, DWORD PTR _y_stride$28[ebp]
	push	edx
	mov	eax, DWORD PTR _x_stride$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	lea	edx, DWORD PTR _b$12[ebp+ecx*8]
	mov	eax, 1
	imul	ecx, eax, 0
	add	edx, ecx
	push	edx
	call	_scatter_deblock_pixels
	add	esp, 20					; 00000014H

; 536  :         }

	jmp	$LN5@filter_deb
$LN33@filter_deb:

; 537  :       }
; 538  :     }

	jmp	$LN2@filter_deb
$LN1@filter_deb:

; 539  :   }
; 540  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN85@filter_deb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 968				; 000003c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN85@filter_deb:
	DD	1
	DD	$LN84@filter_deb
$LN84@filter_deb:
	DD	-436					; fffffe4cH
	DD	32					; 00000020H
	DD	$LN83@filter_deb
$LN83@filter_deb:
	DB	98					; 00000062H
	DB	0
_filter_deblock_edge_luma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _scatter_deblock_pixels
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_src$ = 8						; size = 4
_step$ = 12						; size = 4
_stride$ = 16						; size = 4
_reach$ = 20						; size = 4
_dst$ = 24						; size = 4
_scatter_deblock_pixels PROC				; COMDAT

; 321  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 322  :   for (int i = -reach; i < +reach; ++i) {

	mov	eax, DWORD PTR _reach$[ebp]
	neg	eax
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@scatter_de
$LN2@scatter_de:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@scatter_de:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _reach$[ebp]
	jge	SHORT $LN1@scatter_de

; 323  :     dst[i * step + stride] = src[i + 4];

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, DWORD PTR _step$[ebp]
	add	eax, DWORD PTR _stride$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	cl, BYTE PTR [ecx+4]
	mov	BYTE PTR [edx+eax], cl

; 324  :   }

	jmp	SHORT $LN2@scatter_de
$LN1@scatter_de:

; 325  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_scatter_deblock_pixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _gather_deblock_pixels
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_src$ = 8						; size = 4
_step$ = 12						; size = 4
_stride$ = 16						; size = 4
_reach$ = 20						; size = 4
_dst$ = 24						; size = 4
_gather_deblock_pixels PROC				; COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 307  :   for (int i = -reach; i < +reach; ++i) {

	mov	eax, DWORD PTR _reach$[ebp]
	neg	eax
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@gather_deb
$LN2@gather_deb:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@gather_deb:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _reach$[ebp]
	jge	SHORT $LN1@gather_deb

; 308  :     dst[i + 4] = src[i * step + stride];

	mov	eax, DWORD PTR _i$1[ebp]
	imul	eax, DWORD PTR _step$[ebp]
	add	eax, DWORD PTR _stride$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx+4], al

; 309  :   }

	jmp	SHORT $LN2@gather_deb
$LN1@gather_deb:

; 310  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gather_deblock_pixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _get_qp_y_pred
_TEXT	SEGMENT
tv132 = -220						; size = 4
_qp_q$ = -20						; size = 4
_qp_p$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
_get_qp_y_pred PROC					; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  :   if (state->encoder_control->max_qp_delta_depth < 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+4584]
	test	edx, edx
	jge	SHORT $LN2@get_qp_y_p

; 278  :     return state->qp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	al, BYTE PTR [eax+312]
	jmp	$LN1@get_qp_y_p
$LN2@get_qp_y_p:

; 279  :   }
; 280  : 
; 281  :   int32_t qp_p;
; 282  :   if (dir == EDGE_HOR && y > 0) {

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN3@get_qp_y_p
	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN3@get_qp_y_p

; 283  :     qp_p = kvz_cu_array_at_const(state->tile->frame->cu_array, x, y - 1)->qp;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR [eax+6]
	mov	DWORD PTR _qp_p$[ebp], eax
	jmp	SHORT $LN4@get_qp_y_p
$LN3@get_qp_y_p:

; 284  :   } else if (dir == EDGE_VER && x > 0) {

	cmp	DWORD PTR _dir$[ebp], 0
	jne	SHORT $LN5@get_qp_y_p
	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN5@get_qp_y_p

; 285  :     qp_p = kvz_cu_array_at_const(state->tile->frame->cu_array, x - 1, y)->qp;

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR [eax+6]
	mov	DWORD PTR _qp_p$[ebp], eax

; 286  :   } else {

	jmp	SHORT $LN4@get_qp_y_p
$LN5@get_qp_y_p:

; 287  :     // TODO: This seems to be dead code. Investigate.
; 288  :     qp_p = state->encoder_control->cfg.set_qp_in_cu ? 26 : state->frame->QP;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2431]
	test	edx, edx
	je	SHORT $LN8@get_qp_y_p
	mov	DWORD PTR tv132[ebp], 26		; 0000001aH
	jmp	SHORT $LN9@get_qp_y_p
$LN8@get_qp_y_p:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	mov	DWORD PTR tv132[ebp], edx
$LN9@get_qp_y_p:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _qp_p$[ebp], eax
$LN4@get_qp_y_p:

; 289  :   }
; 290  : 
; 291  :   const int32_t qp_q =

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR [eax+6]
	mov	DWORD PTR _qp_q$[ebp], eax

; 292  :     kvz_cu_array_at_const(state->tile->frame->cu_array, x, y)->qp;
; 293  : 
; 294  :   return (qp_p + qp_q + 1) >> 1;

	mov	eax, DWORD PTR _qp_q$[ebp]
	mov	ecx, DWORD PTR _qp_p$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	sar	eax, 1
$LN1@get_qp_y_p:

; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_qp_y_pred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _is_on_8x8_grid
_TEXT	SEGMENT
tv75 = -200						; size = 4
tv69 = -200						; size = 4
tv73 = -196						; size = 4
tv67 = -196						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dir$ = 16						; size = 4
_is_on_8x8_grid PROC					; COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 268  :   if (dir == EDGE_HOR) {

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN2@is_on_8x8_

; 269  :     return (y & 7) == 0;

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 7
	jne	SHORT $LN5@is_on_8x8_
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@is_on_8x8_
$LN5@is_on_8x8_:
	mov	DWORD PTR tv67[ebp], 0
$LN6@is_on_8x8_:
	cmp	DWORD PTR tv67[ebp], 0
	jne	SHORT $LN7@is_on_8x8_
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN8@is_on_8x8_
$LN7@is_on_8x8_:
	mov	DWORD PTR tv69[ebp], 1
$LN8@is_on_8x8_:
	mov	al, BYTE PTR tv69[ebp]
	jmp	SHORT $LN1@is_on_8x8_

; 270  :   } else {

	jmp	SHORT $LN1@is_on_8x8_
$LN2@is_on_8x8_:

; 271  :     return (x & 7) == 0;

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 7
	jne	SHORT $LN9@is_on_8x8_
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN10@is_on_8x8_
$LN9@is_on_8x8_:
	mov	DWORD PTR tv73[ebp], 0
$LN10@is_on_8x8_:
	cmp	DWORD PTR tv73[ebp], 0
	jne	SHORT $LN11@is_on_8x8_
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN12@is_on_8x8_
$LN11@is_on_8x8_:
	mov	DWORD PTR tv75[ebp], 1
$LN12@is_on_8x8_:
	mov	al, BYTE PTR tv75[ebp]
$LN1@is_on_8x8_:

; 272  :   }
; 273  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_on_8x8_grid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _is_pu_boundary
_TEXT	SEGMENT
_x_pu$1 = -104						; size = 4
_y_pu$2 = -92						; size = 4
_i$3 = -80						; size = 4
_num_pu$ = -68						; size = 4
_cu$ = -56						; size = 4
_y_cu$ = -44						; size = 4
_x_cu$ = -32						; size = 4
_cu_width$ = -20					; size = 4
_scu$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
_is_pu_boundary PROC					; COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 233  :   const cu_info_t *const scu =

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scu$[ebp], eax

; 234  :     kvz_cu_array_at_const(state->tile->frame->cu_array, x, y);
; 235  :   // Get the containing CU.
; 236  :   const int32_t cu_width = LCU_WIDTH >> scu->depth;

	mov	eax, DWORD PTR _scu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	ecx, cl
	mov	edx, 64					; 00000040H
	sar	edx, cl
	mov	DWORD PTR _cu_width$[ebp], edx

; 237  :   const int32_t x_cu = x & ~(cu_width - 1);

	mov	eax, DWORD PTR _cu_width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x_cu$[ebp], eax

; 238  :   const int32_t y_cu = y & ~(cu_width - 1);

	mov	eax, DWORD PTR _cu_width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y_cu$[ebp], eax

; 239  :   const cu_info_t *const cu =

	mov	eax, DWORD PTR _y_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu$[ebp], eax

; 240  :     kvz_cu_array_at_const(state->tile->frame->cu_array, x_cu, y_cu);
; 241  : 
; 242  :   const int num_pu = kvz_part_mode_num_parts[cu->part_size];

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _kvz_part_mode_num_parts[edx]
	mov	DWORD PTR _num_pu$[ebp], eax

; 243  :   for (int i = 0; i < num_pu; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@is_pu_boun
$LN2@is_pu_boun:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@is_pu_boun:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _num_pu$[ebp]
	jge	$LN3@is_pu_boun

; 244  :     if (dir == EDGE_HOR) {

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN5@is_pu_boun

; 245  :       int y_pu = PU_GET_Y(cu->part_size, cu_width, y_cu, i);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _y_cu$[ebp]
	mov	DWORD PTR _y_pu$2[ebp], eax

; 246  :       if (y_pu == y) return true;

	mov	eax, DWORD PTR _y_pu$2[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jne	SHORT $LN7@is_pu_boun
	mov	al, 1
	jmp	SHORT $LN1@is_pu_boun
$LN7@is_pu_boun:

; 247  : 
; 248  :     } else {

	jmp	SHORT $LN6@is_pu_boun
$LN5@is_pu_boun:

; 249  :       int x_pu = PU_GET_X(cu->part_size, cu_width, x_cu, i);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i$3[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	eax, BYTE PTR [ecx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _x_cu$[ebp]
	mov	DWORD PTR _x_pu$1[ebp], eax

; 250  :       if (x_pu == x) return true;

	mov	eax, DWORD PTR _x_pu$1[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN6@is_pu_boun
	mov	al, 1
	jmp	SHORT $LN1@is_pu_boun
$LN6@is_pu_boun:

; 251  :     }
; 252  :   }

	jmp	$LN2@is_pu_boun
$LN3@is_pu_boun:

; 253  : 
; 254  :   return false;

	xor	al, al
$LN1@is_pu_boun:

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_pu_boundary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _is_tu_boundary
_TEXT	SEGMENT
tv88 = -224						; size = 4
tv81 = -224						; size = 4
tv86 = -220						; size = 4
tv79 = -220						; size = 4
_tu_width$ = -20					; size = 4
_scu$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dir$ = 20						; size = 4
_is_tu_boundary PROC					; COMDAT

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 207  :   const cu_info_t *const scu =

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _scu$[ebp], eax

; 208  :     kvz_cu_array_at_const(state->tile->frame->cu_array, x, y);
; 209  :   const int tu_width = LCU_WIDTH >> scu->tr_depth;

	mov	eax, DWORD PTR _scu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	ecx, cl
	mov	edx, 64					; 00000040H
	sar	edx, cl
	mov	DWORD PTR _tu_width$[ebp], edx

; 210  : 
; 211  :   if (dir == EDGE_HOR) {

	cmp	DWORD PTR _dir$[ebp], 1
	jne	SHORT $LN2@is_tu_boun

; 212  :     return (y & (tu_width - 1)) == 0;

	mov	eax, DWORD PTR _tu_width$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _y$[ebp]
	jne	SHORT $LN5@is_tu_boun
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN6@is_tu_boun
$LN5@is_tu_boun:
	mov	DWORD PTR tv79[ebp], 0
$LN6@is_tu_boun:
	cmp	DWORD PTR tv79[ebp], 0
	jne	SHORT $LN7@is_tu_boun
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN8@is_tu_boun
$LN7@is_tu_boun:
	mov	DWORD PTR tv81[ebp], 1
$LN8@is_tu_boun:
	mov	al, BYTE PTR tv81[ebp]
	jmp	SHORT $LN1@is_tu_boun

; 213  :   } else {

	jmp	SHORT $LN1@is_tu_boun
$LN2@is_tu_boun:

; 214  :     return (x & (tu_width - 1)) == 0;

	mov	eax, DWORD PTR _tu_width$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN9@is_tu_boun
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN10@is_tu_boun
$LN9@is_tu_boun:
	mov	DWORD PTR tv86[ebp], 0
$LN10@is_tu_boun:
	cmp	DWORD PTR tv86[ebp], 0
	jne	SHORT $LN11@is_tu_boun
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN12@is_tu_boun
$LN11@is_tu_boun:
	mov	DWORD PTR tv88[ebp], 1
$LN12@is_tu_boun:
	mov	al, BYTE PTR tv88[ebp]
$LN1@is_tu_boun:

; 215  :   }
; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_tu_boundary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _kvz_filter_deblock_chroma
_TEXT	SEGMENT
tv227 = -264						; size = 4
tv192 = -264						; size = 4
tv157 = -264						; size = 4
tv228 = -260						; size = 4
tv193 = -260						; size = 4
tv158 = -260						; size = 4
tv212 = -256						; size = 4
tv177 = -256						; size = 4
tv133 = -256						; size = 4
_m5$ = -56						; size = 2
_m4$ = -44						; size = 2
_m3$ = -32						; size = 2
_m2$ = -20						; size = 2
_delta$ = -8						; size = 4
_encoder$ = 8						; size = 4
_src$ = 12						; size = 4
_offset$ = 16						; size = 4
_tc$ = 20						; size = 4
_part_P_nofilter$ = 24					; size = 1
_part_Q_nofilter$ = 28					; size = 1
_kvz_filter_deblock_chroma PROC				; COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 177  :   int32_t delta;
; 178  :   int16_t m2 = src[-offset * 2];

	mov	eax, DWORD PTR _offset$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	dx, BYTE PTR [ecx+eax*2]
	mov	WORD PTR _m2$[ebp], dx

; 179  :   int16_t m3 = src[-offset];

	mov	eax, DWORD PTR _offset$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	dx, BYTE PTR [ecx+eax]
	mov	WORD PTR _m3$[ebp], dx

; 180  :   int16_t m4 = src[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _src$[ebp]
	movzx	ax, BYTE PTR [edx+ecx]
	mov	WORD PTR _m4$[ebp], ax

; 181  :   int16_t m5 = src[offset];

	mov	eax, DWORD PTR _src$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	WORD PTR _m5$[ebp], cx

; 182  : 
; 183  :   delta = CLIP(-tc,tc, (((m4 - m3) * 4) + m2 - m5 + 4 ) >> 3);

	movsx	eax, WORD PTR _m4$[ebp]
	movsx	ecx, WORD PTR _m3$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _m2$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	movsx	ecx, WORD PTR _m5$[ebp]
	sub	eax, ecx
	add	eax, 4
	sar	eax, 3
	cmp	DWORD PTR _tc$[ebp], eax
	jge	SHORT $LN5@kvz_filter
	mov	edx, DWORD PTR _tc$[ebp]
	mov	DWORD PTR tv133[ebp], edx
	jmp	SHORT $LN6@kvz_filter
$LN5@kvz_filter:
	movsx	eax, WORD PTR _m4$[ebp]
	movsx	ecx, WORD PTR _m3$[ebp]
	sub	eax, ecx
	movsx	edx, WORD PTR _m2$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	movsx	ecx, WORD PTR _m5$[ebp]
	sub	eax, ecx
	add	eax, 4
	sar	eax, 3
	mov	DWORD PTR tv133[ebp], eax
$LN6@kvz_filter:
	mov	edx, DWORD PTR _tc$[ebp]
	neg	edx
	cmp	edx, DWORD PTR tv133[ebp]
	jle	SHORT $LN9@kvz_filter
	mov	eax, DWORD PTR _tc$[ebp]
	neg	eax
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN10@kvz_filter
$LN9@kvz_filter:
	movsx	ecx, WORD PTR _m4$[ebp]
	movsx	edx, WORD PTR _m3$[ebp]
	sub	ecx, edx
	movsx	eax, WORD PTR _m2$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	movsx	edx, WORD PTR _m5$[ebp]
	sub	ecx, edx
	add	ecx, 4
	sar	ecx, 3
	cmp	DWORD PTR _tc$[ebp], ecx
	jge	SHORT $LN7@kvz_filter
	mov	eax, DWORD PTR _tc$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN8@kvz_filter
$LN7@kvz_filter:
	movsx	ecx, WORD PTR _m4$[ebp]
	movsx	edx, WORD PTR _m3$[ebp]
	sub	ecx, edx
	movsx	eax, WORD PTR _m2$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4]
	movsx	edx, WORD PTR _m5$[ebp]
	sub	ecx, edx
	add	ecx, 4
	sar	ecx, 3
	mov	DWORD PTR tv157[ebp], ecx
$LN8@kvz_filter:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv158[ebp], eax
$LN10@kvz_filter:
	mov	ecx, DWORD PTR tv158[ebp]
	mov	DWORD PTR _delta$[ebp], ecx

; 184  :   if(!part_P_nofilter) {

	movsx	eax, BYTE PTR _part_P_nofilter$[ebp]
	test	eax, eax
	jne	$LN2@kvz_filter

; 185  :     src[-offset] = CLIP(0, (1 << encoder->bitdepth) - 1, m3 + delta);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movsx	eax, WORD PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN11@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv177[ebp], edx
	jmp	SHORT $LN12@kvz_filter
$LN11@kvz_filter:
	movsx	eax, WORD PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv177[ebp], eax
$LN12@kvz_filter:
	cmp	DWORD PTR tv177[ebp], 0
	jge	SHORT $LN15@kvz_filter
	mov	DWORD PTR tv193[ebp], 0
	jmp	SHORT $LN16@kvz_filter
$LN15@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movsx	eax, WORD PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN13@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv192[ebp], edx
	jmp	SHORT $LN14@kvz_filter
$LN13@kvz_filter:
	movsx	eax, WORD PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv192[ebp], eax
$LN14@kvz_filter:
	mov	ecx, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv193[ebp], ecx
$LN16@kvz_filter:
	mov	edx, DWORD PTR _offset$[ebp]
	neg	edx
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR tv193[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN2@kvz_filter:

; 186  :   }
; 187  :   if(!part_Q_nofilter) {

	movsx	eax, BYTE PTR _part_Q_nofilter$[ebp]
	test	eax, eax
	jne	$LN1@kvz_filter

; 188  :     src[0] = CLIP(0, (1 << encoder->bitdepth) - 1, m4 - delta);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movsx	eax, WORD PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN17@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv212[ebp], edx
	jmp	SHORT $LN18@kvz_filter
$LN17@kvz_filter:
	movsx	eax, WORD PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv212[ebp], eax
$LN18@kvz_filter:
	cmp	DWORD PTR tv212[ebp], 0
	jge	SHORT $LN21@kvz_filter
	mov	DWORD PTR tv228[ebp], 0
	jmp	SHORT $LN22@kvz_filter
$LN21@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movsx	eax, WORD PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN19@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv227[ebp], edx
	jmp	SHORT $LN20@kvz_filter
$LN19@kvz_filter:
	movsx	eax, WORD PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv227[ebp], eax
$LN20@kvz_filter:
	mov	ecx, DWORD PTR tv227[ebp]
	mov	DWORD PTR tv228[ebp], ecx
$LN22@kvz_filter:
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR tv228[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN1@kvz_filter:

; 189  :   }
; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_deblock_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _kvz_filter_deblock_luma_weak
_TEXT	SEGMENT
tv353 = -324						; size = 4
tv321 = -324						; size = 4
tv274 = -324						; size = 4
tv242 = -324						; size = 4
tv195 = -324						; size = 4
tv162 = -324						; size = 4
tv130 = -324						; size = 4
tv354 = -320						; size = 4
tv322 = -320						; size = 4
tv275 = -320						; size = 4
tv243 = -320						; size = 4
tv196 = -320						; size = 4
tv163 = -320						; size = 4
tv131 = -320						; size = 4
tv338 = -316						; size = 4
tv299 = -316						; size = 4
tv259 = -316						; size = 4
tv220 = -316						; size = 4
tv180 = -316						; size = 4
tv147 = -316						; size = 4
tv94 = -316						; size = 4
_delta2$1 = -116					; size = 4
_delta1$2 = -104					; size = 4
_tc2$3 = -92						; size = 4
_delta$ = -80						; size = 4
_m6$ = -65						; size = 1
_m5$ = -53						; size = 1
_m4$ = -41						; size = 1
_m3$ = -29						; size = 1
_m2$ = -17						; size = 1
_m1$ = -5						; size = 1
_encoder$ = 8						; size = 4
_line$ = 12						; size = 4
_tc$ = 16						; size = 4
_p_2nd$ = 20						; size = 1
_q_2nd$ = 24						; size = 1
_kvz_filter_deblock_luma_weak PROC			; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 133  :   const kvz_pixel m1 = line[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m1$[ebp], dl

; 134  :   const kvz_pixel m2 = line[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m2$[ebp], dl

; 135  :   const kvz_pixel m3 = line[3];

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m3$[ebp], al

; 136  :   const kvz_pixel m4 = line[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m4$[ebp], dl

; 137  :   const kvz_pixel m5 = line[5];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m5$[ebp], al

; 138  :   const kvz_pixel m6 = line[6];

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m6$[ebp], al

; 139  : 
; 140  :   int32_t delta = (9 * (m4 - m3) - 3 * (m5 - m2) + 8) >> 4;

	movzx	eax, BYTE PTR _m4$[ebp]
	movzx	ecx, BYTE PTR _m3$[ebp]
	sub	eax, ecx
	imul	edx, eax, 9
	movzx	eax, BYTE PTR _m5$[ebp]
	movzx	ecx, BYTE PTR _m2$[ebp]
	sub	eax, ecx
	imul	eax, eax, 3
	sub	edx, eax
	add	edx, 8
	sar	edx, 4
	mov	DWORD PTR _delta$[ebp], edx

; 141  : 
; 142  :   if (abs(delta) >= tc * 10) {

	mov	eax, DWORD PTR _delta$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	imul	ecx, DWORD PTR _tc$[ebp], 10
	cmp	eax, ecx
	jl	SHORT $LN2@kvz_filter

; 143  :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_filter

; 144  :   } else {

	jmp	$LN1@kvz_filter
$LN2@kvz_filter:

; 145  :     int32_t tc2 = tc >> 1;

	mov	eax, DWORD PTR _tc$[ebp]
	sar	eax, 1
	mov	DWORD PTR _tc2$3[ebp], eax

; 146  :     delta = CLIP(-tc, tc, delta);

	mov	eax, DWORD PTR _tc$[ebp]
	cmp	eax, DWORD PTR _delta$[ebp]
	jge	SHORT $LN10@kvz_filter
	mov	ecx, DWORD PTR _tc$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN11@kvz_filter
$LN10@kvz_filter:
	mov	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv94[ebp], edx
$LN11@kvz_filter:
	mov	eax, DWORD PTR _tc$[ebp]
	neg	eax
	cmp	eax, DWORD PTR tv94[ebp]
	jle	SHORT $LN14@kvz_filter
	mov	ecx, DWORD PTR _tc$[ebp]
	neg	ecx
	mov	DWORD PTR tv131[ebp], ecx
	jmp	SHORT $LN15@kvz_filter
$LN14@kvz_filter:
	mov	edx, DWORD PTR _tc$[ebp]
	cmp	edx, DWORD PTR _delta$[ebp]
	jge	SHORT $LN12@kvz_filter
	mov	eax, DWORD PTR _tc$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN13@kvz_filter
$LN12@kvz_filter:
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv130[ebp], ecx
$LN13@kvz_filter:
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv131[ebp], edx
$LN15@kvz_filter:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR _delta$[ebp], eax

; 147  :     line[3] = CLIP(0, (1 << encoder->bitdepth) - 1, (m3 + delta));

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN16@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN17@kvz_filter
$LN16@kvz_filter:
	movzx	eax, BYTE PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv147[ebp], eax
$LN17@kvz_filter:
	cmp	DWORD PTR tv147[ebp], 0
	jge	SHORT $LN20@kvz_filter
	mov	DWORD PTR tv163[ebp], 0
	jmp	SHORT $LN21@kvz_filter
$LN20@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN18@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv162[ebp], edx
	jmp	SHORT $LN19@kvz_filter
$LN18@kvz_filter:
	movzx	eax, BYTE PTR _m3$[ebp]
	add	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv162[ebp], eax
$LN19@kvz_filter:
	mov	ecx, DWORD PTR tv162[ebp]
	mov	DWORD PTR tv163[ebp], ecx
$LN21@kvz_filter:
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR tv163[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 148  :     line[4] = CLIP(0, (1 << encoder->bitdepth) - 1, (m4 - delta));

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN22@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv180[ebp], edx
	jmp	SHORT $LN23@kvz_filter
$LN22@kvz_filter:
	movzx	eax, BYTE PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv180[ebp], eax
$LN23@kvz_filter:
	cmp	DWORD PTR tv180[ebp], 0
	jge	SHORT $LN26@kvz_filter
	mov	DWORD PTR tv196[ebp], 0
	jmp	SHORT $LN27@kvz_filter
$LN26@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	cmp	edx, eax
	jge	SHORT $LN24@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv195[ebp], edx
	jmp	SHORT $LN25@kvz_filter
$LN24@kvz_filter:
	movzx	eax, BYTE PTR _m4$[ebp]
	sub	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR tv195[ebp], eax
$LN25@kvz_filter:
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv196[ebp], ecx
$LN27@kvz_filter:
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _line$[ebp]
	mov	cl, BYTE PTR tv196[ebp]
	mov	BYTE PTR [eax+edx], cl

; 149  : 
; 150  :     if (p_2nd) {

	movzx	eax, BYTE PTR _p_2nd$[ebp]
	test	eax, eax
	je	$LN4@kvz_filter

; 151  :       int32_t delta1 = CLIP(-tc2, tc2, (((m1 + m3 + 1) >> 1) - m2 + delta) >> 1);

	movzx	eax, BYTE PTR _m1$[ebp]
	movzx	ecx, BYTE PTR _m3$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	sar	edx, 1
	movzx	eax, BYTE PTR _m2$[ebp]
	sub	edx, eax
	add	edx, DWORD PTR _delta$[ebp]
	sar	edx, 1
	cmp	DWORD PTR _tc2$3[ebp], edx
	jge	SHORT $LN28@kvz_filter
	mov	ecx, DWORD PTR _tc2$3[ebp]
	mov	DWORD PTR tv220[ebp], ecx
	jmp	SHORT $LN29@kvz_filter
$LN28@kvz_filter:
	movzx	edx, BYTE PTR _m1$[ebp]
	movzx	eax, BYTE PTR _m3$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	movzx	edx, BYTE PTR _m2$[ebp]
	sub	ecx, edx
	add	ecx, DWORD PTR _delta$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv220[ebp], ecx
$LN29@kvz_filter:
	mov	eax, DWORD PTR _tc2$3[ebp]
	neg	eax
	cmp	eax, DWORD PTR tv220[ebp]
	jle	SHORT $LN32@kvz_filter
	mov	ecx, DWORD PTR _tc2$3[ebp]
	neg	ecx
	mov	DWORD PTR tv243[ebp], ecx
	jmp	SHORT $LN33@kvz_filter
$LN32@kvz_filter:
	movzx	edx, BYTE PTR _m1$[ebp]
	movzx	eax, BYTE PTR _m3$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	movzx	edx, BYTE PTR _m2$[ebp]
	sub	ecx, edx
	add	ecx, DWORD PTR _delta$[ebp]
	sar	ecx, 1
	cmp	DWORD PTR _tc2$3[ebp], ecx
	jge	SHORT $LN30@kvz_filter
	mov	eax, DWORD PTR _tc2$3[ebp]
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN31@kvz_filter
$LN30@kvz_filter:
	movzx	ecx, BYTE PTR _m1$[ebp]
	movzx	edx, BYTE PTR _m3$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	sar	eax, 1
	movzx	ecx, BYTE PTR _m2$[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _delta$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv242[ebp], eax
$LN31@kvz_filter:
	mov	edx, DWORD PTR tv242[ebp]
	mov	DWORD PTR tv243[ebp], edx
$LN33@kvz_filter:
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR _delta1$2[ebp], eax

; 152  :       line[2] = CLIP(0, (1 << encoder->bitdepth) - 1, m2 + delta1);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m2$[ebp]
	add	eax, DWORD PTR _delta1$2[ebp]
	cmp	edx, eax
	jge	SHORT $LN34@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv259[ebp], edx
	jmp	SHORT $LN35@kvz_filter
$LN34@kvz_filter:
	movzx	eax, BYTE PTR _m2$[ebp]
	add	eax, DWORD PTR _delta1$2[ebp]
	mov	DWORD PTR tv259[ebp], eax
$LN35@kvz_filter:
	cmp	DWORD PTR tv259[ebp], 0
	jge	SHORT $LN38@kvz_filter
	mov	DWORD PTR tv275[ebp], 0
	jmp	SHORT $LN39@kvz_filter
$LN38@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m2$[ebp]
	add	eax, DWORD PTR _delta1$2[ebp]
	cmp	edx, eax
	jge	SHORT $LN36@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv274[ebp], edx
	jmp	SHORT $LN37@kvz_filter
$LN36@kvz_filter:
	movzx	eax, BYTE PTR _m2$[ebp]
	add	eax, DWORD PTR _delta1$2[ebp]
	mov	DWORD PTR tv274[ebp], eax
$LN37@kvz_filter:
	mov	ecx, DWORD PTR tv274[ebp]
	mov	DWORD PTR tv275[ebp], ecx
$LN39@kvz_filter:
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _line$[ebp]
	mov	cl, BYTE PTR tv275[ebp]
	mov	BYTE PTR [eax+edx], cl
$LN4@kvz_filter:

; 153  :     }
; 154  :     if (q_2nd) {

	movzx	eax, BYTE PTR _q_2nd$[ebp]
	test	eax, eax
	je	$LN5@kvz_filter

; 155  :       int32_t delta2 = CLIP(-tc2, tc2, (((m6 + m4 + 1) >> 1) - m5 - delta) >> 1);

	movzx	eax, BYTE PTR _m6$[ebp]
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	sar	edx, 1
	movzx	eax, BYTE PTR _m5$[ebp]
	sub	edx, eax
	sub	edx, DWORD PTR _delta$[ebp]
	sar	edx, 1
	cmp	DWORD PTR _tc2$3[ebp], edx
	jge	SHORT $LN40@kvz_filter
	mov	ecx, DWORD PTR _tc2$3[ebp]
	mov	DWORD PTR tv299[ebp], ecx
	jmp	SHORT $LN41@kvz_filter
$LN40@kvz_filter:
	movzx	edx, BYTE PTR _m6$[ebp]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	movzx	edx, BYTE PTR _m5$[ebp]
	sub	ecx, edx
	sub	ecx, DWORD PTR _delta$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv299[ebp], ecx
$LN41@kvz_filter:
	mov	eax, DWORD PTR _tc2$3[ebp]
	neg	eax
	cmp	eax, DWORD PTR tv299[ebp]
	jle	SHORT $LN44@kvz_filter
	mov	ecx, DWORD PTR _tc2$3[ebp]
	neg	ecx
	mov	DWORD PTR tv322[ebp], ecx
	jmp	SHORT $LN45@kvz_filter
$LN44@kvz_filter:
	movzx	edx, BYTE PTR _m6$[ebp]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	sar	ecx, 1
	movzx	edx, BYTE PTR _m5$[ebp]
	sub	ecx, edx
	sub	ecx, DWORD PTR _delta$[ebp]
	sar	ecx, 1
	cmp	DWORD PTR _tc2$3[ebp], ecx
	jge	SHORT $LN42@kvz_filter
	mov	eax, DWORD PTR _tc2$3[ebp]
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN43@kvz_filter
$LN42@kvz_filter:
	movzx	ecx, BYTE PTR _m6$[ebp]
	movzx	edx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	sar	eax, 1
	movzx	ecx, BYTE PTR _m5$[ebp]
	sub	eax, ecx
	sub	eax, DWORD PTR _delta$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv321[ebp], eax
$LN43@kvz_filter:
	mov	edx, DWORD PTR tv321[ebp]
	mov	DWORD PTR tv322[ebp], edx
$LN45@kvz_filter:
	mov	eax, DWORD PTR tv322[ebp]
	mov	DWORD PTR _delta2$1[ebp], eax

; 156  :       line[5] = CLIP(0, (1 << encoder->bitdepth) - 1, m5 + delta2);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m5$[ebp]
	add	eax, DWORD PTR _delta2$1[ebp]
	cmp	edx, eax
	jge	SHORT $LN46@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv338[ebp], edx
	jmp	SHORT $LN47@kvz_filter
$LN46@kvz_filter:
	movzx	eax, BYTE PTR _m5$[ebp]
	add	eax, DWORD PTR _delta2$1[ebp]
	mov	DWORD PTR tv338[ebp], eax
$LN47@kvz_filter:
	cmp	DWORD PTR tv338[ebp], 0
	jge	SHORT $LN50@kvz_filter
	mov	DWORD PTR tv354[ebp], 0
	jmp	SHORT $LN51@kvz_filter
$LN50@kvz_filter:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	movzx	eax, BYTE PTR _m5$[ebp]
	add	eax, DWORD PTR _delta2$1[ebp]
	cmp	edx, eax
	jge	SHORT $LN48@kvz_filter
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [ecx+2532]
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR tv353[ebp], edx
	jmp	SHORT $LN49@kvz_filter
$LN48@kvz_filter:
	movzx	eax, BYTE PTR _m5$[ebp]
	add	eax, DWORD PTR _delta2$1[ebp]
	mov	DWORD PTR tv353[ebp], eax
$LN49@kvz_filter:
	mov	ecx, DWORD PTR tv353[ebp]
	mov	DWORD PTR tv354[ebp], ecx
$LN51@kvz_filter:
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR tv354[ebp]
	mov	BYTE PTR [ecx+eax], dl
$LN5@kvz_filter:

; 157  :     }
; 158  :     
; 159  :     if (p_2nd || q_2nd) {

	movzx	eax, BYTE PTR _p_2nd$[ebp]
	test	eax, eax
	jne	SHORT $LN8@kvz_filter
	movzx	eax, BYTE PTR _q_2nd$[ebp]
	test	eax, eax
	je	SHORT $LN6@kvz_filter
$LN8@kvz_filter:

; 160  :       return 2;

	mov	eax, 2
	jmp	SHORT $LN1@kvz_filter

; 161  :     } else {

	jmp	SHORT $LN1@kvz_filter
$LN6@kvz_filter:

; 162  :       return 1;

	mov	eax, 1
$LN1@kvz_filter:

; 163  :     }
; 164  :   }
; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_deblock_luma_weak ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _kvz_filter_deblock_luma_strong
_TEXT	SEGMENT
tv559 = -300						; size = 4
tv480 = -300						; size = 4
tv417 = -300						; size = 4
tv334 = -300						; size = 4
tv251 = -300						; size = 4
tv188 = -300						; size = 4
tv560 = -296						; size = 4
tv481 = -296						; size = 4
tv418 = -296						; size = 4
tv335 = -296						; size = 4
tv252 = -296						; size = 4
tv189 = -296						; size = 4
tv521 = -292						; size = 4
tv450 = -292						; size = 4
tv377 = -292						; size = 4
tv294 = -292						; size = 4
tv221 = -292						; size = 4
tv150 = -292						; size = 4
_m7$ = -89						; size = 1
_m6$ = -77						; size = 1
_m5$ = -65						; size = 1
_m4$ = -53						; size = 1
_m3$ = -41						; size = 1
_m2$ = -29						; size = 1
_m1$ = -17						; size = 1
_m0$ = -5						; size = 1
_line$ = 8						; size = 4
_tc$ = 12						; size = 4
_kvz_filter_deblock_luma_strong PROC			; COMDAT

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 99   :   const kvz_pixel m0 = line[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m0$[ebp], al

; 100  :   const kvz_pixel m1 = line[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m1$[ebp], dl

; 101  :   const kvz_pixel m2 = line[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m2$[ebp], dl

; 102  :   const kvz_pixel m3 = line[3];

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m3$[ebp], al

; 103  :   const kvz_pixel m4 = line[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _line$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _m4$[ebp], dl

; 104  :   const kvz_pixel m5 = line[5];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m5$[ebp], al

; 105  :   const kvz_pixel m6 = line[6];

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m6$[ebp], al

; 106  :   const kvz_pixel m7 = line[7];

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _m7$[ebp], al

; 107  : 
; 108  :   line[1] = CLIP(m1 - 2*tc, m1 + 2*tc, (2*m0 + 3*m1 +   m2 +   m3 +   m4 + 4) >> 3);

	movzx	eax, BYTE PTR _m1$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m0$[ebp]
	movzx	ecx, BYTE PTR _m1$[ebp]
	imul	ecx, ecx, 3
	lea	eax, DWORD PTR [ecx+eax*2]
	movzx	ecx, BYTE PTR _m2$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m3$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [eax+ecx+4]
	sar	eax, 3
	cmp	edx, eax
	jge	SHORT $LN3@kvz_filter
	movzx	ecx, BYTE PTR _m1$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN4@kvz_filter
$LN3@kvz_filter:
	movzx	ecx, BYTE PTR _m0$[ebp]
	movzx	edx, BYTE PTR _m1$[ebp]
	imul	eax, edx, 3
	lea	ecx, DWORD PTR [eax+ecx*2]
	movzx	edx, BYTE PTR _m2$[ebp]
	add	ecx, edx
	movzx	eax, BYTE PTR _m3$[ebp]
	add	ecx, eax
	movzx	edx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	sar	eax, 3
	mov	DWORD PTR tv150[ebp], eax
$LN4@kvz_filter:
	movzx	ecx, BYTE PTR _m1$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv150[ebp]
	jle	SHORT $LN7@kvz_filter
	movzx	eax, BYTE PTR _m1$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN8@kvz_filter
$LN7@kvz_filter:
	movzx	edx, BYTE PTR _m1$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m0$[ebp]
	movzx	eax, BYTE PTR _m1$[ebp]
	imul	eax, eax, 3
	lea	edx, DWORD PTR [eax+edx*2]
	movzx	eax, BYTE PTR _m2$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m3$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [edx+eax+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@kvz_filter
	movzx	eax, BYTE PTR _m1$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv188[ebp], edx
	jmp	SHORT $LN6@kvz_filter
$LN5@kvz_filter:
	movzx	eax, BYTE PTR _m0$[ebp]
	movzx	ecx, BYTE PTR _m1$[ebp]
	imul	edx, ecx, 3
	lea	eax, DWORD PTR [edx+eax*2]
	movzx	ecx, BYTE PTR _m2$[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _m3$[ebp]
	add	eax, edx
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [eax+ecx+4]
	sar	edx, 3
	mov	DWORD PTR tv188[ebp], edx
$LN6@kvz_filter:
	mov	eax, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv189[ebp], eax
$LN8@kvz_filter:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR tv189[ebp]
	mov	BYTE PTR [edx+ecx], al

; 109  :   line[2] = CLIP(m2 - 2*tc, m2 + 2*tc, (  m1 +   m2 +   m3 +   m4        + 2) >> 2);

	movzx	eax, BYTE PTR _m2$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m1$[ebp]
	movzx	ecx, BYTE PTR _m2$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m3$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [eax+ecx+2]
	sar	eax, 2
	cmp	edx, eax
	jge	SHORT $LN9@kvz_filter
	movzx	ecx, BYTE PTR _m2$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv221[ebp], eax
	jmp	SHORT $LN10@kvz_filter
$LN9@kvz_filter:
	movzx	ecx, BYTE PTR _m1$[ebp]
	movzx	edx, BYTE PTR _m2$[ebp]
	add	ecx, edx
	movzx	eax, BYTE PTR _m3$[ebp]
	add	ecx, eax
	movzx	edx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [ecx+edx+2]
	sar	eax, 2
	mov	DWORD PTR tv221[ebp], eax
$LN10@kvz_filter:
	movzx	ecx, BYTE PTR _m2$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv221[ebp]
	jle	SHORT $LN13@kvz_filter
	movzx	eax, BYTE PTR _m2$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv252[ebp], eax
	jmp	SHORT $LN14@kvz_filter
$LN13@kvz_filter:
	movzx	edx, BYTE PTR _m2$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m1$[ebp]
	movzx	eax, BYTE PTR _m2$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m3$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [edx+eax+2]
	sar	edx, 2
	cmp	ecx, edx
	jge	SHORT $LN11@kvz_filter
	movzx	eax, BYTE PTR _m2$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv251[ebp], edx
	jmp	SHORT $LN12@kvz_filter
$LN11@kvz_filter:
	movzx	eax, BYTE PTR _m1$[ebp]
	movzx	ecx, BYTE PTR _m2$[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _m3$[ebp]
	add	eax, edx
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	sar	edx, 2
	mov	DWORD PTR tv251[ebp], edx
$LN12@kvz_filter:
	mov	eax, DWORD PTR tv251[ebp]
	mov	DWORD PTR tv252[ebp], eax
$LN14@kvz_filter:
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR tv252[ebp]
	mov	BYTE PTR [edx+ecx], al

; 110  :   line[3] = CLIP(m3 - 2*tc, m3 + 2*tc, (  m1 + 2*m2 + 2*m3 + 2*m4 +   m5 + 4) >> 3);

	movzx	eax, BYTE PTR _m3$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m1$[ebp]
	movzx	ecx, BYTE PTR _m2$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m3$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m5$[ebp]
	lea	eax, DWORD PTR [eax+ecx+4]
	sar	eax, 3
	cmp	edx, eax
	jge	SHORT $LN15@kvz_filter
	movzx	ecx, BYTE PTR _m3$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv294[ebp], eax
	jmp	SHORT $LN16@kvz_filter
$LN15@kvz_filter:
	movzx	ecx, BYTE PTR _m1$[ebp]
	movzx	edx, BYTE PTR _m2$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	movzx	ecx, BYTE PTR _m3$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m5$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	sar	eax, 3
	mov	DWORD PTR tv294[ebp], eax
$LN16@kvz_filter:
	movzx	ecx, BYTE PTR _m3$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv294[ebp]
	jle	SHORT $LN19@kvz_filter
	movzx	eax, BYTE PTR _m3$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv335[ebp], eax
	jmp	SHORT $LN20@kvz_filter
$LN19@kvz_filter:
	movzx	edx, BYTE PTR _m3$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m1$[ebp]
	movzx	eax, BYTE PTR _m2$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m3$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m5$[ebp]
	lea	edx, DWORD PTR [edx+eax+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN17@kvz_filter
	movzx	eax, BYTE PTR _m3$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv334[ebp], edx
	jmp	SHORT $LN18@kvz_filter
$LN17@kvz_filter:
	movzx	eax, BYTE PTR _m1$[ebp]
	movzx	ecx, BYTE PTR _m2$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m3$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	movzx	ecx, BYTE PTR _m5$[ebp]
	lea	edx, DWORD PTR [eax+ecx+4]
	sar	edx, 3
	mov	DWORD PTR tv334[ebp], edx
$LN18@kvz_filter:
	mov	eax, DWORD PTR tv334[ebp]
	mov	DWORD PTR tv335[ebp], eax
$LN20@kvz_filter:
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _line$[ebp]
	mov	cl, BYTE PTR tv335[ebp]
	mov	BYTE PTR [eax+edx], cl

; 111  :   line[4] = CLIP(m4 - 2*tc, m4 + 2*tc, (  m2 + 2*m3 + 2*m4 + 2*m5 +   m6 + 4) >> 3);

	movzx	eax, BYTE PTR _m4$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m2$[ebp]
	movzx	ecx, BYTE PTR _m3$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m5$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
	movzx	ecx, BYTE PTR _m6$[ebp]
	lea	eax, DWORD PTR [eax+ecx+4]
	sar	eax, 3
	cmp	edx, eax
	jge	SHORT $LN21@kvz_filter
	movzx	ecx, BYTE PTR _m4$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv377[ebp], eax
	jmp	SHORT $LN22@kvz_filter
$LN21@kvz_filter:
	movzx	ecx, BYTE PTR _m2$[ebp]
	movzx	edx, BYTE PTR _m3$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	movzx	ecx, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m5$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m6$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]
	sar	eax, 3
	mov	DWORD PTR tv377[ebp], eax
$LN22@kvz_filter:
	movzx	ecx, BYTE PTR _m4$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv377[ebp]
	jle	SHORT $LN25@kvz_filter
	movzx	eax, BYTE PTR _m4$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv418[ebp], eax
	jmp	SHORT $LN26@kvz_filter
$LN25@kvz_filter:
	movzx	edx, BYTE PTR _m4$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m2$[ebp]
	movzx	eax, BYTE PTR _m3$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m5$[ebp]
	lea	edx, DWORD PTR [edx+eax*2]
	movzx	eax, BYTE PTR _m6$[ebp]
	lea	edx, DWORD PTR [edx+eax+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN23@kvz_filter
	movzx	eax, BYTE PTR _m4$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv417[ebp], edx
	jmp	SHORT $LN24@kvz_filter
$LN23@kvz_filter:
	movzx	eax, BYTE PTR _m2$[ebp]
	movzx	ecx, BYTE PTR _m3$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m4$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m5$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	movzx	ecx, BYTE PTR _m6$[ebp]
	lea	edx, DWORD PTR [eax+ecx+4]
	sar	edx, 3
	mov	DWORD PTR tv417[ebp], edx
$LN24@kvz_filter:
	mov	eax, DWORD PTR tv417[ebp]
	mov	DWORD PTR tv418[ebp], eax
$LN26@kvz_filter:
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _line$[ebp]
	mov	al, BYTE PTR tv418[ebp]
	mov	BYTE PTR [edx+ecx], al

; 112  :   line[5] = CLIP(m5 - 2*tc, m5 + 2*tc, (  m3 +   m4 +   m5 +   m6        + 2) >> 2);

	movzx	eax, BYTE PTR _m5$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m3$[ebp]
	movzx	ecx, BYTE PTR _m4$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m5$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m6$[ebp]
	lea	eax, DWORD PTR [eax+ecx+2]
	sar	eax, 2
	cmp	edx, eax
	jge	SHORT $LN27@kvz_filter
	movzx	ecx, BYTE PTR _m5$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv450[ebp], eax
	jmp	SHORT $LN28@kvz_filter
$LN27@kvz_filter:
	movzx	ecx, BYTE PTR _m3$[ebp]
	movzx	edx, BYTE PTR _m4$[ebp]
	add	ecx, edx
	movzx	eax, BYTE PTR _m5$[ebp]
	add	ecx, eax
	movzx	edx, BYTE PTR _m6$[ebp]
	lea	eax, DWORD PTR [ecx+edx+2]
	sar	eax, 2
	mov	DWORD PTR tv450[ebp], eax
$LN28@kvz_filter:
	movzx	ecx, BYTE PTR _m5$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv450[ebp]
	jle	SHORT $LN31@kvz_filter
	movzx	eax, BYTE PTR _m5$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv481[ebp], eax
	jmp	SHORT $LN32@kvz_filter
$LN31@kvz_filter:
	movzx	edx, BYTE PTR _m5$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m3$[ebp]
	movzx	eax, BYTE PTR _m4$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m5$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m6$[ebp]
	lea	edx, DWORD PTR [edx+eax+2]
	sar	edx, 2
	cmp	ecx, edx
	jge	SHORT $LN29@kvz_filter
	movzx	eax, BYTE PTR _m5$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv480[ebp], edx
	jmp	SHORT $LN30@kvz_filter
$LN29@kvz_filter:
	movzx	eax, BYTE PTR _m3$[ebp]
	movzx	ecx, BYTE PTR _m4$[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _m5$[ebp]
	add	eax, edx
	movzx	ecx, BYTE PTR _m6$[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	sar	edx, 2
	mov	DWORD PTR tv480[ebp], edx
$LN30@kvz_filter:
	mov	eax, DWORD PTR tv480[ebp]
	mov	DWORD PTR tv481[ebp], eax
$LN32@kvz_filter:
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _line$[ebp]
	mov	cl, BYTE PTR tv481[ebp]
	mov	BYTE PTR [eax+edx], cl

; 113  :   line[6] = CLIP(m6 - 2*tc, m6 + 2*tc, (  m3 +   m4 +   m5 + 3*m6 + 2*m7 + 4) >> 3);

	movzx	eax, BYTE PTR _m6$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	movzx	eax, BYTE PTR _m3$[ebp]
	movzx	ecx, BYTE PTR _m4$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m5$[ebp]
	add	eax, ecx
	movzx	ecx, BYTE PTR _m6$[ebp]
	imul	ecx, ecx, 3
	add	eax, ecx
	movzx	ecx, BYTE PTR _m7$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2+4]
	sar	eax, 3
	cmp	edx, eax
	jge	SHORT $LN33@kvz_filter
	movzx	ecx, BYTE PTR _m6$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR tv521[ebp], eax
	jmp	SHORT $LN34@kvz_filter
$LN33@kvz_filter:
	movzx	ecx, BYTE PTR _m3$[ebp]
	movzx	edx, BYTE PTR _m4$[ebp]
	add	ecx, edx
	movzx	eax, BYTE PTR _m5$[ebp]
	add	ecx, eax
	movzx	edx, BYTE PTR _m6$[ebp]
	imul	eax, edx, 3
	add	ecx, eax
	movzx	edx, BYTE PTR _m7$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2+4]
	sar	eax, 3
	mov	DWORD PTR tv521[ebp], eax
$LN34@kvz_filter:
	movzx	ecx, BYTE PTR _m6$[ebp]
	mov	edx, DWORD PTR _tc$[ebp]
	shl	edx, 1
	sub	ecx, edx
	cmp	ecx, DWORD PTR tv521[ebp]
	jle	SHORT $LN37@kvz_filter
	movzx	eax, BYTE PTR _m6$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR tv560[ebp], eax
	jmp	SHORT $LN38@kvz_filter
$LN37@kvz_filter:
	movzx	edx, BYTE PTR _m6$[ebp]
	mov	eax, DWORD PTR _tc$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR _m3$[ebp]
	movzx	eax, BYTE PTR _m4$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m5$[ebp]
	add	edx, eax
	movzx	eax, BYTE PTR _m6$[ebp]
	imul	eax, eax, 3
	add	edx, eax
	movzx	eax, BYTE PTR _m7$[ebp]
	lea	edx, DWORD PTR [edx+eax*2+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN35@kvz_filter
	movzx	eax, BYTE PTR _m6$[ebp]
	mov	ecx, DWORD PTR _tc$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR tv559[ebp], edx
	jmp	SHORT $LN36@kvz_filter
$LN35@kvz_filter:
	movzx	eax, BYTE PTR _m3$[ebp]
	movzx	ecx, BYTE PTR _m4$[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _m5$[ebp]
	add	eax, edx
	movzx	ecx, BYTE PTR _m6$[ebp]
	imul	edx, ecx, 3
	add	eax, edx
	movzx	ecx, BYTE PTR _m7$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+4]
	sar	edx, 3
	mov	DWORD PTR tv559[ebp], edx
$LN36@kvz_filter:
	mov	eax, DWORD PTR tv559[ebp]
	mov	DWORD PTR tv560[ebp], eax
$LN38@kvz_filter:
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _line$[ebp]
	mov	cl, BYTE PTR tv560[ebp]
	mov	BYTE PTR [eax+edx], cl

; 114  : 
; 115  :   return 3;

	mov	eax, 3

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_deblock_luma_strong ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\filter.c
;	COMDAT _kvz_filter_deblock_lcu
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_kvz_filter_deblock_lcu PROC				; COMDAT

; 784  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D9DF5D2E_filter@c
	call	@__CheckForDebuggerJustMyCode@4

; 785  :   assert(!state->encoder_control->cfg.lossless);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2364], 0
	je	SHORT $LN4@kvz_filter
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_filter_deblock_lcu@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GK@NANLLHAI@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@kvz_filter:

; 786  : 
; 787  :   filter_deblock_lcu_inside(state, x_px, y_px, EDGE_VER);

	push	0
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_filter_deblock_lcu_inside
	add	esp, 16					; 00000010H

; 788  :   if (x_px > 0) {

	cmp	DWORD PTR _x_px$[ebp], 0
	jle	SHORT $LN2@kvz_filter

; 789  :     filter_deblock_lcu_rightmost(state, x_px, y_px);

	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_filter_deblock_lcu_rightmost
	add	esp, 12					; 0000000cH
$LN2@kvz_filter:

; 790  :   }
; 791  :   filter_deblock_lcu_inside(state, x_px, y_px, EDGE_HOR);

	push	1
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_filter_deblock_lcu_inside
	add	esp, 16					; 00000010H

; 792  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_filter_deblock_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
END
