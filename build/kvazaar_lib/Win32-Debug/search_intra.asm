; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__96B24618_search_intra@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
?offsets@?3??search_intra_rough@@9@9 DB 02H		; `search_intra_rough'::`4'::offsets
	DB	04H
	DB	08H
	DB	08H
CONST	ENDS
PUBLIC	_kvz_luma_mode_bits
PUBLIC	_kvz_chroma_mode_bits
PUBLIC	_kvz_search_cu_intra_chroma
PUBLIC	_kvz_search_cu_intra
PUBLIC	_kvz_search_intra_chroma_rdo
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??search_intra_trdepth@@9@9	; `search_intra_trdepth'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EI@CDEPLAAM@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@ ; `string'
PUBLIC	??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@ ; `string'
PUBLIC	?__LINE__Var@?0??search_intra_chroma_rough@@9@9	; `search_intra_chroma_rough'::`1'::__LINE__Var
PUBLIC	??_C@_1DA@KAJPAKPK@?$AA?$CB?$AA?$CI?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$CG?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??search_intra_rough@@9@9	; `search_intra_rough'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ffb333333333333
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___wassert:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_intra_get_dir_luma_predictor:PROC
EXTRN	_kvz_intra_build_reference:PROC
EXTRN	_kvz_intra_predict:PROC
EXTRN	_kvz_intra_recon_cu:PROC
EXTRN	_kvz_sort_modes:PROC
EXTRN	_kvz_cu_rd_cost_luma:PROC
EXTRN	_kvz_cu_rd_cost_chroma:PROC
EXTRN	_kvz_lcu_fill_trdepth:PROC
EXTRN	_kvz_pixels_get_satd_func:PROC
EXTRN	_kvz_pixels_get_sad_func:PROC
EXTRN	_kvz_pixels_get_satd_dual_func:PROC
EXTRN	_kvz_pixels_get_sad_dual_func:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_kvz_f_entropy_bits:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ffb333333333333
CONST	SEGMENT
__real@3ffb333333333333 DQ 03ffb333333333333r	; 1.7
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
CONST	SEGMENT
??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@ DB 'l'
	DB	00H, 'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '2', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 'g', 00H, '2', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'5', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??search_intra_rough@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??search_intra_rough@@9@9 DD 018eH	; `search_intra_rough'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@KAJPAKPK@?$AA?$CB?$AA?$CI?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$CG?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DA@KAJPAKPK@?$AA?$CB?$AA?$CI?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$CG?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAy@ DB '!'
	DB	00H, '(', 00H, 'x', 00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, '4', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'y', 00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '4', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??search_intra_chroma_rough@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??search_intra_chroma_rough@@9@9 DD 0144H ; `search_intra_chroma_rough'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@
CONST	SEGMENT
??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'A'
	DB	00H, 'X', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D', 00H, 'T', 00H
	DB	'H', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@CDEPLAAM@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@
CONST	SEGMENT
??_C@_1EI@CDEPLAAM@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@ DB 'd'
	DB	00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'X', 00H, '_'
	DB	00H, 'P', 00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H
	DB	'T', 00H, 'H', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??search_intra_trdepth@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??search_intra_trdepth@@9@9 DD 0b7H	; `search_intra_trdepth'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _kvz_search_intra_chroma_rdo
_TEXT	SEGMENT
tv68 = -316						; size = 4
_mode_bits$1 = -116					; size = 8
_chroma_mode_i$2 = -97					; size = 1
_best_chroma$3 = -88					; size = 16
_chroma$4 = -64						; size = 16
_tr_cu$5 = -40						; size = 4
_lcu_px$6 = -28						; size = 8
_reconstruct_chroma$ = -9				; size = 1
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_intra_mode$ = 24					; size = 1
_modes$ = 28						; size = 4
_num_modes$ = 32					; size = 1
_lcu$ = 36						; size = 4
_kvz_search_intra_chroma_rdo PROC			; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 687  :   const bool reconstruct_chroma = !(x_px & 4 || y_px & 4);

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 4
	jne	SHORT $LN8@kvz_search
	mov	ecx, DWORD PTR _y_px$[ebp]
	and	ecx, 4
	jne	SHORT $LN8@kvz_search
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN9@kvz_search
$LN8@kvz_search:
	mov	DWORD PTR tv68[ebp], 0
$LN9@kvz_search:
	mov	dl, BYTE PTR tv68[ebp]
	mov	BYTE PTR _reconstruct_chroma$[ebp], dl

; 688  : 
; 689  :   if (reconstruct_chroma) {

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	$LN5@kvz_search

; 690  :     const vector2d_t lcu_px = { SUB_SCU(x_px), SUB_SCU(y_px) };

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$6[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$6[ebp+4], eax

; 691  :     cu_info_t *const tr_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$6[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$6[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _tr_cu$5[ebp], eax

; 692  : 
; 693  :     struct {
; 694  :       double cost;
; 695  :       int8_t mode;
; 696  :     } chroma, best_chroma;
; 697  : 
; 698  :     best_chroma.mode = 0;

	mov	BYTE PTR _best_chroma$3[ebp+8], 0

; 699  :     best_chroma.cost = MAX_INT;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _best_chroma$3[ebp], xmm0

; 700  : 
; 701  :     for (int8_t chroma_mode_i = 0; chroma_mode_i < num_modes; ++chroma_mode_i) {

	mov	BYTE PTR _chroma_mode_i$2[ebp], 0
	jmp	SHORT $LN4@kvz_search
$LN2@kvz_search:
	mov	al, BYTE PTR _chroma_mode_i$2[ebp]
	add	al, 1
	mov	BYTE PTR _chroma_mode_i$2[ebp], al
$LN4@kvz_search:
	movsx	eax, BYTE PTR _chroma_mode_i$2[ebp]
	movsx	ecx, BYTE PTR _num_modes$[ebp]
	cmp	eax, ecx
	jge	$LN3@kvz_search

; 702  :       chroma.mode = modes[chroma_mode_i];

	movsx	eax, BYTE PTR _chroma_mode_i$2[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _chroma$4[ebp+8], dl

; 703  : 
; 704  :       kvz_intra_recon_cu(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _chroma$4[ebp+8]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 705  :                          x_px, y_px,
; 706  :                          depth,
; 707  :                          -1, chroma.mode, // skip luma
; 708  :                          NULL, lcu);
; 709  :       chroma.cost = kvz_cu_rd_cost_chroma(state, lcu_px.x, lcu_px.y, depth, tr_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr_cu$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu_px$6[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcu_px$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR _chroma$4[ebp]

; 710  : 
; 711  :       double mode_bits = kvz_chroma_mode_bits(state, chroma.mode, intra_mode);

	movzx	eax, BYTE PTR _intra_mode$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _chroma$4[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_chroma_mode_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _mode_bits$1[ebp]

; 712  :       chroma.cost += mode_bits * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _mode_bits$1[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR _chroma$4[ebp]
	movsd	QWORD PTR _chroma$4[ebp], xmm0

; 713  : 
; 714  :       if (chroma.cost < best_chroma.cost) {

	movsd	xmm0, QWORD PTR _best_chroma$3[ebp]
	comisd	xmm0, QWORD PTR _chroma$4[ebp]
	jbe	SHORT $LN6@kvz_search

; 715  :         best_chroma = chroma;

	mov	eax, DWORD PTR _chroma$4[ebp]
	mov	DWORD PTR _best_chroma$3[ebp], eax
	mov	ecx, DWORD PTR _chroma$4[ebp+4]
	mov	DWORD PTR _best_chroma$3[ebp+4], ecx
	mov	edx, DWORD PTR _chroma$4[ebp+8]
	mov	DWORD PTR _best_chroma$3[ebp+8], edx
	mov	eax, DWORD PTR _chroma$4[ebp+12]
	mov	DWORD PTR _best_chroma$3[ebp+12], eax
$LN6@kvz_search:

; 716  :       }
; 717  :     }

	jmp	$LN2@kvz_search
$LN3@kvz_search:

; 718  : 
; 719  :     return best_chroma.mode;

	mov	al, BYTE PTR _best_chroma$3[ebp+8]
	jmp	SHORT $LN1@kvz_search
$LN5@kvz_search:

; 720  :   }
; 721  : 
; 722  :   return 100;

	mov	al, 100					; 00000064H
$LN1@kvz_search:

; 723  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@kvz_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@kvz_search:
	DD	3
	DD	$LN13@kvz_search
$LN13@kvz_search:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@kvz_search
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN11@kvz_search
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN12@kvz_search
$LN12@kvz_search:
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
$LN11@kvz_search:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
$LN10@kvz_search:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_search_intra_chroma_rdo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _search_intra_rdo
_TEXT	SEGMENT
tv80 = -5816						; size = 4
tv81 = -5812						; size = 4
tv218 = -5808						; size = 4
tv163 = -5808						; size = 4
tv71 = -5808						; size = 4
_pred_cu$1 = -4264					; size = 20
_mode_cost$2 = -4236					; size = 8
_pred_cu$3 = -4220					; size = 20
_rdo_bitcost$4 = -4192					; size = 4
_rdo_mode$5 = -4180					; size = 4
_rdo_mode$6 = -4168					; size = 4
_mode_found$7 = -4156					; size = 4
_pred_mode$8 = -4144					; size = 4
_orig_block$ = -4132					; size = 4097
_width$ = -24						; size = 4
_tr_depth$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_orig$ = 24						; size = 4
_origstride$ = 28					; size = 4
_intra_preds$ = 32					; size = 4
_modes_to_check$ = 36					; size = 4
_modes$ = 40						; size = 4
_costs$ = 44						; size = 4
_lcu$ = 48						; size = 4
_search_intra_rdo PROC					; COMDAT

; 570  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5816				; 000016b8H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5816]
	mov	ecx, 1454				; 000005aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 571  :   const int tr_depth = CLIP(1, MAX_PU_DEPTH, depth + state->encoder_control->cfg.tr_depth_intra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, DWORD PTR [ecx+76]
	cmp	edx, 4
	jle	SHORT $LN17@search_int
	mov	DWORD PTR tv71[ebp], 4
	jmp	SHORT $LN18@search_int
$LN17@search_int:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR tv71[ebp], edx
$LN18@search_int:
	cmp	DWORD PTR tv71[ebp], 1
	jge	SHORT $LN21@search_int
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN22@search_int
$LN21@search_int:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, DWORD PTR [ecx+76]
	cmp	edx, 4
	jle	SHORT $LN19@search_int
	mov	DWORD PTR tv80[ebp], 4
	jmp	SHORT $LN20@search_int
$LN19@search_int:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR tv80[ebp], edx
$LN20@search_int:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN22@search_int:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _tr_depth$[ebp], ecx

; 572  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 573  : 
; 574  :   kvz_pixel orig_block[LCU_WIDTH * LCU_WIDTH + 1];
; 575  : 
; 576  :   kvz_pixels_blit(orig, orig_block, width, width, origstride, width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _origstride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 577  : 
; 578  :   // Check that the predicted modes are in the RDO mode list
; 579  :   if (modes_to_check < 35) {

	cmp	DWORD PTR _modes_to_check$[ebp], 35	; 00000023H
	jge	$LN3@search_int

; 580  :     for (int pred_mode = 0; pred_mode < 3; pred_mode++) {

	mov	DWORD PTR _pred_mode$8[ebp], 0
	jmp	SHORT $LN4@search_int
$LN2@search_int:
	mov	eax, DWORD PTR _pred_mode$8[ebp]
	add	eax, 1
	mov	DWORD PTR _pred_mode$8[ebp], eax
$LN4@search_int:
	cmp	DWORD PTR _pred_mode$8[ebp], 3
	jge	$LN3@search_int

; 581  :       int mode_found = 0;

	mov	DWORD PTR _mode_found$7[ebp], 0

; 582  :       for (int rdo_mode = 0; rdo_mode < modes_to_check; rdo_mode++) {

	mov	DWORD PTR _rdo_mode$6[ebp], 0
	jmp	SHORT $LN7@search_int
$LN5@search_int:
	mov	eax, DWORD PTR _rdo_mode$6[ebp]
	add	eax, 1
	mov	DWORD PTR _rdo_mode$6[ebp], eax
$LN7@search_int:
	mov	eax, DWORD PTR _rdo_mode$6[ebp]
	cmp	eax, DWORD PTR _modes_to_check$[ebp]
	jge	SHORT $LN6@search_int

; 583  :         if (intra_preds[pred_mode] == modes[rdo_mode]) {

	mov	eax, DWORD PTR _intra_preds$[ebp]
	add	eax, DWORD PTR _pred_mode$8[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _modes$[ebp]
	add	edx, DWORD PTR _rdo_mode$6[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN12@search_int

; 584  :           mode_found = 1;

	mov	DWORD PTR _mode_found$7[ebp], 1

; 585  :           break;

	jmp	SHORT $LN6@search_int
$LN12@search_int:

; 586  :         }
; 587  :       }

	jmp	SHORT $LN5@search_int
$LN6@search_int:

; 588  :       // Add this prediction mode to RDO checking
; 589  :       if (!mode_found) {

	cmp	DWORD PTR _mode_found$7[ebp], 0
	jne	SHORT $LN13@search_int

; 590  :         modes[modes_to_check] = intra_preds[pred_mode];

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _modes_to_check$[ebp]
	mov	ecx, DWORD PTR _intra_preds$[ebp]
	add	ecx, DWORD PTR _pred_mode$8[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 591  :         modes_to_check++;

	mov	eax, DWORD PTR _modes_to_check$[ebp]
	add	eax, 1
	mov	DWORD PTR _modes_to_check$[ebp], eax
$LN13@search_int:

; 592  :       }
; 593  :     }

	jmp	$LN2@search_int
$LN3@search_int:

; 594  :   }
; 595  : 
; 596  :   for(int rdo_mode = 0; rdo_mode < modes_to_check; rdo_mode ++) {

	mov	DWORD PTR _rdo_mode$5[ebp], 0
	jmp	SHORT $LN10@search_int
$LN8@search_int:
	mov	eax, DWORD PTR _rdo_mode$5[ebp]
	add	eax, 1
	mov	DWORD PTR _rdo_mode$5[ebp], eax
$LN10@search_int:
	mov	eax, DWORD PTR _rdo_mode$5[ebp]
	cmp	eax, DWORD PTR _modes_to_check$[ebp]
	jge	$LN9@search_int

; 597  :     int rdo_bitcost = kvz_luma_mode_bits(state, modes[rdo_mode], intra_preds);

	mov	eax, DWORD PTR _intra_preds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _modes$[ebp]
	add	ecx, DWORD PTR _rdo_mode$5[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_luma_mode_bits
	add	esp, 12					; 0000000cH
	call	__ftol2_sse
	mov	DWORD PTR _rdo_bitcost$4[ebp], eax

; 598  :     costs[rdo_mode] = rdo_bitcost * (int)(state->lambda + 0.5);

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	imul	ecx, DWORD PTR _rdo_bitcost$4[ebp]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _rdo_mode$5[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	QWORD PTR [eax+edx*8], xmm0

; 599  : 
; 600  :     // Perform transform split search and save mode RD cost for the best one.
; 601  :     cu_info_t pred_cu;
; 602  :     pred_cu.depth = depth;

	mov	al, BYTE PTR _depth$[ebp]
	and	al, 7
	shl	al, 2
	mov	cl, BYTE PTR _pred_cu$3[ebp]
	and	cl, 227					; 000000e3H
	or	cl, al
	mov	BYTE PTR _pred_cu$3[ebp], cl

; 603  :     pred_cu.type = CU_INTRA;

	mov	al, BYTE PTR _pred_cu$3[ebp]
	and	al, 252					; 000000fcH
	or	al, 1
	mov	BYTE PTR _pred_cu$3[ebp], al

; 604  :     pred_cu.part_size = ((depth == MAX_PU_DEPTH) ? SIZE_NxN : SIZE_2Nx2N);

	cmp	DWORD PTR _depth$[ebp], 4
	jne	SHORT $LN23@search_int
	mov	DWORD PTR tv163[ebp], 3
	jmp	SHORT $LN24@search_int
$LN23@search_int:
	mov	DWORD PTR tv163[ebp], 0
$LN24@search_int:
	mov	al, BYTE PTR tv163[ebp]
	and	al, 7
	shl	al, 5
	mov	cl, BYTE PTR _pred_cu$3[ebp]
	and	cl, 31					; 0000001fH
	or	cl, al
	mov	BYTE PTR _pred_cu$3[ebp], cl

; 605  :     pred_cu.intra.mode = modes[rdo_mode];

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _rdo_mode$5[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _pred_cu$3[ebp+8], cl

; 606  :     pred_cu.intra.mode_chroma = modes[rdo_mode];

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _rdo_mode$5[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _pred_cu$3[ebp+9], cl

; 607  :     FILL(pred_cu.cbf, 0);

	push	2
	push	0
	lea	eax, DWORD PTR _pred_cu$3[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 608  : 
; 609  :     // Reset transform split data in lcu.cu for this area.
; 610  :     kvz_lcu_fill_trdepth(lcu, x_px, y_px, depth, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H

; 611  : 
; 612  :     double mode_cost = search_intra_trdepth(state, x_px, y_px, depth, tr_depth, modes[rdo_mode], MAX_INT, &pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pred_cu$3[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	mov	edx, DWORD PTR _modes$[ebp]
	add	edx, DWORD PTR _rdo_mode$5[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _tr_depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_search_intra_trdepth
	add	esp, 36					; 00000024H
	fstp	QWORD PTR _mode_cost$2[ebp]

; 613  :     costs[rdo_mode] += mode_cost;

	mov	eax, DWORD PTR _rdo_mode$5[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	addsd	xmm0, QWORD PTR _mode_cost$2[ebp]
	mov	edx, DWORD PTR _rdo_mode$5[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	QWORD PTR [eax+edx*8], xmm0

; 614  : 
; 615  :     // Early termination if no coefficients has to be coded
; 616  :     if (state->encoder_control->cfg.intra_rdo_et && !cbf_is_set_any(pred_cu.cbf, depth)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2360], 0
	je	SHORT $LN14@search_int
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _pred_cu$3[ebp+4]
	push	ecx
	call	_cbf_is_set_any
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@search_int

; 617  :       modes_to_check = rdo_mode + 1;

	mov	eax, DWORD PTR _rdo_mode$5[ebp]
	add	eax, 1
	mov	DWORD PTR _modes_to_check$[ebp], eax

; 618  :       break;

	jmp	SHORT $LN9@search_int
$LN14@search_int:

; 619  :     }
; 620  :   }

	jmp	$LN8@search_int
$LN9@search_int:

; 621  : 
; 622  :   // Update order according to new costs
; 623  :   kvz_sort_modes(modes, costs, modes_to_check);

	movzx	eax, BYTE PTR _modes_to_check$[ebp]
	push	eax
	mov	ecx, DWORD PTR _costs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _modes$[ebp]
	push	edx
	call	_kvz_sort_modes
	add	esp, 12					; 0000000cH

; 624  : 
; 625  :   // The best transform split hierarchy is not saved anywhere, so to get the
; 626  :   // transform split hierarchy the search has to be performed again with the
; 627  :   // best mode.
; 628  :   if (tr_depth != depth) {

	mov	eax, DWORD PTR _tr_depth$[ebp]
	cmp	eax, DWORD PTR _depth$[ebp]
	je	$LN15@search_int

; 629  :     cu_info_t pred_cu;
; 630  :     pred_cu.depth = depth;

	mov	al, BYTE PTR _depth$[ebp]
	and	al, 7
	shl	al, 2
	mov	cl, BYTE PTR _pred_cu$1[ebp]
	and	cl, 227					; 000000e3H
	or	cl, al
	mov	BYTE PTR _pred_cu$1[ebp], cl

; 631  :     pred_cu.type = CU_INTRA;

	mov	al, BYTE PTR _pred_cu$1[ebp]
	and	al, 252					; 000000fcH
	or	al, 1
	mov	BYTE PTR _pred_cu$1[ebp], al

; 632  :     pred_cu.part_size = ((depth == MAX_PU_DEPTH) ? SIZE_NxN : SIZE_2Nx2N);

	cmp	DWORD PTR _depth$[ebp], 4
	jne	SHORT $LN25@search_int
	mov	DWORD PTR tv218[ebp], 3
	jmp	SHORT $LN26@search_int
$LN25@search_int:
	mov	DWORD PTR tv218[ebp], 0
$LN26@search_int:
	mov	al, BYTE PTR tv218[ebp]
	and	al, 7
	shl	al, 5
	mov	cl, BYTE PTR _pred_cu$1[ebp]
	and	cl, 31					; 0000001fH
	or	cl, al
	mov	BYTE PTR _pred_cu$1[ebp], cl

; 633  :     pred_cu.intra.mode = modes[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _modes$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _pred_cu$1[ebp+8], al

; 634  :     pred_cu.intra.mode_chroma = modes[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _modes$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _pred_cu$1[ebp+9], al

; 635  :     FILL(pred_cu.cbf, 0);

	push	2
	push	0
	lea	eax, DWORD PTR _pred_cu$1[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 636  :     search_intra_trdepth(state, x_px, y_px, depth, tr_depth, modes[0], MAX_INT, &pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pred_cu$1[ebp]
	push	ecx
	push	2147483647				; 7fffffffH
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _modes$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _tr_depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_intra_trdepth
	fstp	ST(0)
	add	esp, 36					; 00000024H
$LN15@search_int:

; 637  :   }
; 638  : 
; 639  :   return modes_to_check;

	mov	al, BYTE PTR _modes_to_check$[ebp]

; 640  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@search_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5816				; 000016b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@search_int:
	DD	3
	DD	$LN30@search_int
$LN30@search_int:
	DD	-4132					; ffffefdcH
	DD	4097					; 00001001H
	DD	$LN27@search_int
	DD	-4220					; ffffef84H
	DD	20					; 00000014H
	DD	$LN28@search_int
	DD	-4264					; ffffef58H
	DD	20					; 00000014H
	DD	$LN29@search_int
$LN29@search_int:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	0
$LN28@search_int:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	0
$LN27@search_int:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_search_intra_rdo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _search_intra_rough
_TEXT	SEGMENT
tv603 = -5136						; size = 8
tv611 = -5128						; size = 8
tv217 = -5128						; size = 8
tv204 = -5128						; size = 8
tv250 = -5124						; size = 4
tv91 = -5124						; size = 4
_mode_i$1 = -3580					; size = 4
_lambda_cost$ = -3568					; size = 4
_mode_i$2 = -3556					; size = 4
_mode$3 = -3541						; size = 1
_has_mode$4 = -3529					; size = 1
_pred_i$5 = -3517					; size = 1
_add_modes$ = -3508					; size = 5
_i$6 = -3492						; size = 4
_i$7 = -3480						; size = 4
_i$8 = -3468						; size = 4
_mode_in_range$9 = -3453				; size = 1
_costs_out$10 = -3444					; size = 16
_test_modes$11 = -3420					; size = 2
_center_node$12 = -3405					; size = 1
_best_cost$ = -3396					; size = 8
_best_mode$ = -3377					; size = 1
_i$13 = -3368						; size = 4
_i$14 = -3356						; size = 4
_costs_out$15 = -3344					; size = 16
_mode$16 = -3320					; size = 4
_offset$ = -3308					; size = 4
_max_cost$ = -3296					; size = 4
_min_cost$ = -3284					; size = 4
_modes_selected$ = -3269				; size = 1
_orig_block$ = -3260					; size = 4
__orig_block$ = -3248					; size = 1056
_preds$ = -2184						; size = 4
__preds$ = -2172					; size = 2080
_filter_boundary$ = -81					; size = 1
_cfg$ = -72						; size = 4
_sad_dual_func$ = -60					; size = 4
_satd_dual_func$ = -48					; size = 4
_sad_func$ = -36					; size = 4
_satd_func$ = -24					; size = 4
_width$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_orig$ = 12						; size = 4
_origstride$ = 16					; size = 4
_refs$ = 20						; size = 4
_log2_width$ = 24					; size = 4
_intra_preds$ = 28					; size = 4
_modes$ = 32						; size = 4
_costs$ = 36						; size = 4
_search_intra_rough PROC				; COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5136				; 00001410H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5136]
	mov	ecx, 1284				; 00000504H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 399  :   #define PARALLEL_BLKS 2 // TODO: use 4 for AVX-512 in the future?
; 400  :   assert(log2_width >= 2 && log2_width <= 5);

	cmp	DWORD PTR _log2_width$[ebp], 2
	jl	SHORT $LN43@search_int
	cmp	DWORD PTR _log2_width$[ebp], 5
	jle	SHORT $LN44@search_int
$LN43@search_int:
	mov	eax, DWORD PTR ?__LINE__Var@?0??search_intra_rough@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EG@JDBFBDE@?$AAl?$AAo?$AAg?$AA2?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN44@search_int:

; 401  :   int_fast8_t width = 1 << log2_width;

	mov	eax, 1
	mov	ecx, DWORD PTR _log2_width$[ebp]
	shl	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 402  :   cost_pixel_nxn_func *satd_func = kvz_pixels_get_satd_func(width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_pixels_get_satd_func
	add	esp, 4
	mov	DWORD PTR _satd_func$[ebp], eax

; 403  :   cost_pixel_nxn_func *sad_func = kvz_pixels_get_sad_func(width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_pixels_get_sad_func
	add	esp, 4
	mov	DWORD PTR _sad_func$[ebp], eax

; 404  :   cost_pixel_nxn_multi_func *satd_dual_func = kvz_pixels_get_satd_dual_func(width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_pixels_get_satd_dual_func
	add	esp, 4
	mov	DWORD PTR _satd_dual_func$[ebp], eax

; 405  :   cost_pixel_nxn_multi_func *sad_dual_func = kvz_pixels_get_sad_dual_func(width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_pixels_get_sad_dual_func
	add	esp, 4
	mov	DWORD PTR _sad_dual_func$[ebp], eax

; 406  : 
; 407  :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 408  :   const bool filter_boundary = !(cfg->lossless && cfg->implicit_rdpcm);

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	je	SHORT $LN45@search_int
	mov	ecx, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [ecx+2392], 0
	je	SHORT $LN45@search_int
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN46@search_int
$LN45@search_int:
	mov	DWORD PTR tv91[ebp], 1
$LN46@search_int:
	mov	dl, BYTE PTR tv91[ebp]
	mov	BYTE PTR _filter_boundary$[ebp], dl

; 409  : 
; 410  :   // Temporary block arrays
; 411  :   kvz_pixel _preds[PARALLEL_BLKS * 32 * 32 + SIMD_ALIGNMENT];
; 412  :   pred_buffer preds = ALIGNED_POINTER(_preds, SIMD_ALIGNMENT);

	lea	eax, DWORD PTR __preds$[ebp+32]
	lea	ecx, DWORD PTR __preds$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN61@search_int
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN61@search_int:
	sub	eax, ecx
	mov	DWORD PTR _preds$[ebp], eax

; 413  :   
; 414  :   kvz_pixel _orig_block[32 * 32 + SIMD_ALIGNMENT];
; 415  :   kvz_pixel *orig_block = ALIGNED_POINTER(_orig_block, SIMD_ALIGNMENT);

	lea	eax, DWORD PTR __orig_block$[ebp+32]
	lea	ecx, DWORD PTR __orig_block$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN62@search_int
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN62@search_int:
	sub	eax, ecx
	mov	DWORD PTR _orig_block$[ebp], eax

; 416  : 
; 417  :   // Store original block for SAD computation
; 418  :   kvz_pixels_blit(orig, orig_block, width, width, origstride, width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _origstride$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _width$[ebp]
	push	edx
	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 419  : 
; 420  :   int8_t modes_selected = 0;

	mov	BYTE PTR _modes_selected$[ebp], 0

; 421  :   // Note: get_cost and get_cost_dual may return negative costs.
; 422  :   int32_t min_cost = INT_MAX;

	mov	DWORD PTR _min_cost$[ebp], 2147483647	; 7fffffffH

; 423  :   int32_t max_cost = INT_MIN;

	mov	DWORD PTR _max_cost$[ebp], -2147483648	; 80000000H

; 424  :   
; 425  :   // Initial offset decides how many modes are tried before moving on to the
; 426  :   // recursive search.
; 427  :   int offset;
; 428  :   if (state->encoder_control->cfg.full_intra_search) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN31@search_int

; 429  :     offset = 1;

	mov	DWORD PTR _offset$[ebp], 1

; 430  :   } else {

	jmp	SHORT $LN32@search_int
$LN31@search_int:

; 431  :     static const int8_t offsets[4] = { 2, 4, 8, 8 };
; 432  :     offset = offsets[log2_width - 2];

	mov	eax, DWORD PTR _log2_width$[ebp]
	movsx	ecx, BYTE PTR ?offsets@?3??search_intra_rough@@9@9[eax-2]
	mov	DWORD PTR _offset$[ebp], ecx
$LN32@search_int:

; 433  :   }
; 434  : 
; 435  :   // Calculate SAD for evenly spaced modes to select the starting point for 
; 436  :   // the recursive search.
; 437  :   for (int mode = 2; mode <= 34; mode += PARALLEL_BLKS * offset) {

	mov	DWORD PTR _mode$16[ebp], 2
	jmp	SHORT $LN4@search_int
$LN2@search_int:
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _mode$16[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _mode$16[ebp], edx
$LN4@search_int:
	cmp	DWORD PTR _mode$16[ebp], 34		; 00000022H
	jg	$LN3@search_int

; 438  :     
; 439  :     double costs_out[PARALLEL_BLKS] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _costs_out$15[ebp], eax
	mov	DWORD PTR _costs_out$15[ebp+4], eax
	mov	DWORD PTR _costs_out$15[ebp+8], eax
	mov	DWORD PTR _costs_out$15[ebp+12], eax

; 440  :     for (int i = 0; i < PARALLEL_BLKS; ++i) {

	mov	DWORD PTR _i$14[ebp], 0
	jmp	SHORT $LN7@search_int
$LN5@search_int:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN7@search_int:
	cmp	DWORD PTR _i$14[ebp], 2
	jge	SHORT $LN6@search_int

; 441  :       if (mode + i * offset <= 34) {

	mov	eax, DWORD PTR _i$14[ebp]
	imul	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _mode$16[ebp]
	cmp	eax, 34					; 00000022H
	jg	SHORT $LN33@search_int

; 442  :         kvz_intra_predict(refs, log2_width, mode + i * offset, COLOR_Y, preds[i], filter_boundary);

	movzx	eax, BYTE PTR _filter_boundary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$14[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _preds$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _i$14[ebp]
	imul	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR _mode$16[ebp]
	push	edx
	movzx	eax, BYTE PTR _log2_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _refs$[ebp]
	push	ecx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H
$LN33@search_int:

; 443  :       }
; 444  :     }

	jmp	SHORT $LN5@search_int
$LN6@search_int:

; 445  :     
; 446  :     //TODO: add generic version of get cost  multi
; 447  :     get_cost_dual(state, preds, orig_block, satd_dual_func, sad_dual_func, width, costs_out);

	lea	eax, DWORD PTR _costs_out$15[ebp]
	push	eax
	movsx	ecx, BYTE PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sad_dual_func$[ebp]
	push	edx
	mov	eax, DWORD PTR _satd_dual_func$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preds$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_get_cost_dual
	add	esp, 28					; 0000001cH

; 448  : 
; 449  :     for (int i = 0; i < PARALLEL_BLKS; ++i) {

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN10@search_int
$LN8@search_int:
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
$LN10@search_int:
	cmp	DWORD PTR _i$13[ebp], 2
	jge	$LN9@search_int

; 450  :       if (mode + i * offset <= 34) {

	mov	eax, DWORD PTR _i$13[ebp]
	imul	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _mode$16[ebp]
	cmp	eax, 34					; 00000022H
	jg	$LN34@search_int

; 451  :         costs[modes_selected] = costs_out[i];

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	edx, DWORD PTR _i$13[ebp]
	movsd	xmm0, QWORD PTR _costs_out$15[ebp+edx*8]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 452  :         modes[modes_selected] = mode + i * offset;

	mov	eax, DWORD PTR _i$13[ebp]
	imul	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR _mode$16[ebp]
	movsx	ecx, BYTE PTR _modes_selected$[ebp]
	mov	edx, DWORD PTR _modes$[ebp]
	mov	BYTE PTR [edx+ecx], al

; 453  :         min_cost = MIN(min_cost, costs[modes_selected]);

	cvtsi2sd xmm0, DWORD PTR _min_cost$[ebp]
	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm1, QWORD PTR [ecx+eax*8]
	comisd	xmm1, xmm0
	jbe	SHORT $LN47@search_int
	cvtsi2sd xmm0, DWORD PTR _min_cost$[ebp]
	movsd	QWORD PTR tv204[ebp], xmm0
	jmp	SHORT $LN48@search_int
$LN47@search_int:
	movsx	edx, BYTE PTR _modes_selected$[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [eax+edx*8]
	movsd	QWORD PTR tv204[ebp], xmm0
$LN48@search_int:
	cvttsd2si ecx, QWORD PTR tv204[ebp]
	mov	DWORD PTR _min_cost$[ebp], ecx

; 454  :         max_cost = MAX(max_cost, costs[modes_selected]);

	cvtsi2sd xmm0, DWORD PTR _max_cost$[ebp]
	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN49@search_int
	cvtsi2sd xmm0, DWORD PTR _max_cost$[ebp]
	movsd	QWORD PTR tv217[ebp], xmm0
	jmp	SHORT $LN50@search_int
$LN49@search_int:
	movsx	edx, BYTE PTR _modes_selected$[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [eax+edx*8]
	movsd	QWORD PTR tv217[ebp], xmm0
$LN50@search_int:
	cvttsd2si ecx, QWORD PTR tv217[ebp]
	mov	DWORD PTR _max_cost$[ebp], ecx

; 455  :         ++modes_selected;

	mov	al, BYTE PTR _modes_selected$[ebp]
	add	al, 1
	mov	BYTE PTR _modes_selected$[ebp], al
$LN34@search_int:

; 456  :       }
; 457  :     }

	jmp	$LN8@search_int
$LN9@search_int:

; 458  :   }

	jmp	$LN2@search_int
$LN3@search_int:

; 459  : 
; 460  :   int8_t best_mode = modes[select_best_mode_index(modes, costs, modes_selected)];

	movzx	eax, BYTE PTR _modes_selected$[ebp]
	push	eax
	mov	ecx, DWORD PTR _costs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _modes$[ebp]
	push	edx
	call	_select_best_mode_index
	add	esp, 12					; 0000000cH
	movzx	eax, al
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _best_mode$[ebp], dl

; 461  :   double best_cost = min_cost;

	cvtsi2sd xmm0, DWORD PTR _min_cost$[ebp]
	movsd	QWORD PTR _best_cost$[ebp], xmm0

; 462  :   
; 463  :   // Skip recursive search if all modes have the same cost.
; 464  :   if (min_cost != max_cost) {

	mov	eax, DWORD PTR _min_cost$[ebp]
	cmp	eax, DWORD PTR _max_cost$[ebp]
	je	$LN12@search_int
$LN11@search_int:

; 465  :     // Do a recursive search to find the best mode, always centering on the
; 466  :     // current best mode.
; 467  :     while (offset > 1) {

	cmp	DWORD PTR _offset$[ebp], 1
	jle	$LN12@search_int

; 468  :       offset >>= 1;

	mov	eax, DWORD PTR _offset$[ebp]
	sar	eax, 1
	mov	DWORD PTR _offset$[ebp], eax

; 469  : 
; 470  :       int8_t center_node = best_mode;

	mov	al, BYTE PTR _best_mode$[ebp]
	mov	BYTE PTR _center_node$12[ebp], al

; 471  :       int8_t test_modes[] = { center_node - offset, center_node + offset };

	movsx	eax, BYTE PTR _center_node$12[ebp]
	sub	eax, DWORD PTR _offset$[ebp]
	mov	BYTE PTR _test_modes$11[ebp], al
	movsx	eax, BYTE PTR _center_node$12[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	BYTE PTR _test_modes$11[ebp+1], al

; 472  : 
; 473  :       double costs_out[PARALLEL_BLKS] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _costs_out$10[ebp], eax
	mov	DWORD PTR _costs_out$10[ebp+4], eax
	mov	DWORD PTR _costs_out$10[ebp+8], eax
	mov	DWORD PTR _costs_out$10[ebp+12], eax

; 474  :       char mode_in_range = 0;

	mov	BYTE PTR _mode_in_range$9[ebp], 0

; 475  : 
; 476  :       for (int i = 0; i < PARALLEL_BLKS; ++i) mode_in_range |= (test_modes[i] >= 2 && test_modes[i] <= 34);

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN15@search_int
$LN13@search_int:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN15@search_int:
	cmp	DWORD PTR _i$8[ebp], 2
	jge	SHORT $LN14@search_int
	mov	eax, DWORD PTR _i$8[ebp]
	movsx	ecx, BYTE PTR _test_modes$11[ebp+eax]
	cmp	ecx, 2
	jl	SHORT $LN51@search_int
	mov	edx, DWORD PTR _i$8[ebp]
	movsx	eax, BYTE PTR _test_modes$11[ebp+edx]
	cmp	eax, 34					; 00000022H
	jg	SHORT $LN51@search_int
	mov	DWORD PTR tv250[ebp], 1
	jmp	SHORT $LN52@search_int
$LN51@search_int:
	mov	DWORD PTR tv250[ebp], 0
$LN52@search_int:
	movsx	ecx, BYTE PTR _mode_in_range$9[ebp]
	or	ecx, DWORD PTR tv250[ebp]
	mov	BYTE PTR _mode_in_range$9[ebp], cl
	jmp	SHORT $LN13@search_int
$LN14@search_int:

; 477  : 
; 478  :       if (mode_in_range) {

	movsx	eax, BYTE PTR _mode_in_range$9[ebp]
	test	eax, eax
	je	$LN20@search_int

; 479  :         for (int i = 0; i < PARALLEL_BLKS; ++i) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN18@search_int
$LN16@search_int:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN18@search_int:
	cmp	DWORD PTR _i$7[ebp], 2
	jge	SHORT $LN17@search_int

; 480  :           if (test_modes[i] >= 2 && test_modes[i] <= 34) {

	mov	eax, DWORD PTR _i$7[ebp]
	movsx	ecx, BYTE PTR _test_modes$11[ebp+eax]
	cmp	ecx, 2
	jl	SHORT $LN37@search_int
	mov	eax, DWORD PTR _i$7[ebp]
	movsx	ecx, BYTE PTR _test_modes$11[ebp+eax]
	cmp	ecx, 34					; 00000022H
	jg	SHORT $LN37@search_int

; 481  :             kvz_intra_predict(refs, log2_width, test_modes[i], COLOR_Y, preds[i], filter_boundary);

	movzx	eax, BYTE PTR _filter_boundary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$7[ebp]
	shl	ecx, 10					; 0000000aH
	add	ecx, DWORD PTR _preds$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _i$7[ebp]
	movzx	eax, BYTE PTR _test_modes$11[ebp+edx]
	push	eax
	movzx	ecx, BYTE PTR _log2_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _refs$[ebp]
	push	edx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H
$LN37@search_int:

; 482  :           }
; 483  :         }

	jmp	SHORT $LN16@search_int
$LN17@search_int:

; 484  : 
; 485  :         //TODO: add generic version of get cost multi
; 486  :         get_cost_dual(state, preds, orig_block, satd_dual_func, sad_dual_func, width, costs_out);

	lea	eax, DWORD PTR _costs_out$10[ebp]
	push	eax
	movsx	ecx, BYTE PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sad_dual_func$[ebp]
	push	edx
	mov	eax, DWORD PTR _satd_dual_func$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preds$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_get_cost_dual
	add	esp, 28					; 0000001cH

; 487  : 
; 488  :         for (int i = 0; i < PARALLEL_BLKS; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN21@search_int
$LN19@search_int:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN21@search_int:
	cmp	DWORD PTR _i$6[ebp], 2
	jge	$LN20@search_int

; 489  :           if (test_modes[i] >= 2 && test_modes[i] <= 34) {

	mov	eax, DWORD PTR _i$6[ebp]
	movsx	ecx, BYTE PTR _test_modes$11[ebp+eax]
	cmp	ecx, 2
	jl	$LN38@search_int
	mov	eax, DWORD PTR _i$6[ebp]
	movsx	ecx, BYTE PTR _test_modes$11[ebp+eax]
	cmp	ecx, 34					; 00000022H
	jg	$LN38@search_int

; 490  :             costs[modes_selected] = costs_out[i];

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	mov	edx, DWORD PTR _i$6[ebp]
	movsd	xmm0, QWORD PTR _costs_out$10[ebp+edx*8]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 491  :             modes[modes_selected] = test_modes[i];

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	edx, DWORD PTR _i$6[ebp]
	mov	dl, BYTE PTR _test_modes$11[ebp+edx]
	mov	BYTE PTR [ecx+eax], dl

; 492  :             if (costs[modes_selected] < best_cost) {

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR _best_cost$[ebp]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN39@search_int

; 493  :               best_cost = costs[modes_selected];

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR _best_cost$[ebp], xmm0

; 494  :               best_mode = modes[modes_selected];

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _best_mode$[ebp], dl
$LN39@search_int:

; 495  :             }
; 496  :             ++modes_selected;

	mov	al, BYTE PTR _modes_selected$[ebp]
	add	al, 1
	mov	BYTE PTR _modes_selected$[ebp], al
$LN38@search_int:

; 497  :           }
; 498  :         }

	jmp	$LN19@search_int
$LN20@search_int:

; 499  :       }
; 500  :     }

	jmp	$LN11@search_int
$LN12@search_int:

; 501  :   }
; 502  : 
; 503  :   int8_t add_modes[5] = {intra_preds[0], intra_preds[1], intra_preds[2], 0, 1};

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _intra_preds$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _add_modes$[ebp], al
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _intra_preds$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _add_modes$[ebp+1], dl
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _intra_preds$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _add_modes$[ebp+2], dl
	mov	BYTE PTR _add_modes$[ebp+3], 0
	mov	BYTE PTR _add_modes$[ebp+4], 1

; 504  : 
; 505  :   // Add DC, planar and missing predicted modes.
; 506  :   for (int8_t pred_i = 0; pred_i < 5; ++pred_i) {

	mov	BYTE PTR _pred_i$5[ebp], 0
	jmp	SHORT $LN24@search_int
$LN22@search_int:
	mov	al, BYTE PTR _pred_i$5[ebp]
	add	al, 1
	mov	BYTE PTR _pred_i$5[ebp], al
$LN24@search_int:
	movsx	eax, BYTE PTR _pred_i$5[ebp]
	cmp	eax, 5
	jge	$LN23@search_int

; 507  :     bool has_mode = false;

	mov	BYTE PTR _has_mode$4[ebp], 0

; 508  :     int8_t mode = add_modes[pred_i];

	movsx	eax, BYTE PTR _pred_i$5[ebp]
	mov	cl, BYTE PTR _add_modes$[ebp+eax]
	mov	BYTE PTR _mode$3[ebp], cl

; 509  : 
; 510  :     for (int mode_i = 0; mode_i < modes_selected; ++mode_i) {

	mov	DWORD PTR _mode_i$2[ebp], 0
	jmp	SHORT $LN27@search_int
$LN25@search_int:
	mov	eax, DWORD PTR _mode_i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _mode_i$2[ebp], eax
$LN27@search_int:
	movsx	eax, BYTE PTR _modes_selected$[ebp]
	cmp	DWORD PTR _mode_i$2[ebp], eax
	jge	SHORT $LN26@search_int

; 511  :       if (modes[mode_i] == add_modes[pred_i]) {

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _mode_i$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _pred_i$5[ebp]
	movsx	eax, BYTE PTR _add_modes$[ebp+edx]
	cmp	ecx, eax
	jne	SHORT $LN40@search_int

; 512  :         has_mode = true;

	mov	BYTE PTR _has_mode$4[ebp], 1

; 513  :         break;

	jmp	SHORT $LN26@search_int
$LN40@search_int:

; 514  :       }
; 515  :     }

	jmp	SHORT $LN25@search_int
$LN26@search_int:

; 516  : 
; 517  :     if (!has_mode) {

	movzx	eax, BYTE PTR _has_mode$4[ebp]
	test	eax, eax
	jne	$LN41@search_int

; 518  :       kvz_intra_predict(refs, log2_width, mode, COLOR_Y, preds[0], filter_boundary);

	movzx	eax, BYTE PTR _filter_boundary$[ebp]
	push	eax
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	push	edx
	push	0
	movzx	eax, BYTE PTR _mode$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _log2_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _refs$[ebp]
	push	edx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H

; 519  :       costs[modes_selected] = get_cost(state, preds[0], orig_block, satd_func, sad_func, width);

	movsx	eax, BYTE PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sad_func$[ebp]
	push	ecx
	mov	edx, DWORD PTR _satd_func$[ebp]
	push	edx
	mov	eax, DWORD PTR _orig_block$[ebp]
	push	eax
	mov	ecx, 1024				; 00000400H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _preds$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_get_cost
	add	esp, 24					; 00000018H
	movsx	ecx, BYTE PTR _modes_selected$[ebp]
	mov	edx, DWORD PTR _costs$[ebp]
	fstp	QWORD PTR [edx+ecx*8]

; 520  :       modes[modes_selected] = mode;

	movsx	eax, BYTE PTR _modes_selected$[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR _mode$3[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 521  :       ++modes_selected;

	mov	al, BYTE PTR _modes_selected$[ebp]
	add	al, 1
	mov	BYTE PTR _modes_selected$[ebp], al
$LN41@search_int:

; 522  :     }
; 523  :   }

	jmp	$LN22@search_int
$LN23@search_int:

; 524  : 
; 525  :   // Add prediction mode coding cost as the last thing. We don't want this
; 526  :   // affecting the halving search.
; 527  :   int lambda_cost = (int)(state->lambda_sqrt + 0.5);

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [eax+304]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _lambda_cost$[ebp], ecx

; 528  :   for (int mode_i = 0; mode_i < modes_selected; ++mode_i) {

	mov	DWORD PTR _mode_i$1[ebp], 0
	jmp	SHORT $LN30@search_int
$LN28@search_int:
	mov	eax, DWORD PTR _mode_i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _mode_i$1[ebp], eax
$LN30@search_int:
	movsx	eax, BYTE PTR _modes_selected$[ebp]
	cmp	DWORD PTR _mode_i$1[ebp], eax
	jge	SHORT $LN29@search_int

; 529  :     costs[mode_i] += lambda_cost * kvz_luma_mode_bits(state, modes[mode_i], intra_preds);

	cvtsi2sd xmm0, DWORD PTR _lambda_cost$[ebp]
	mov	eax, DWORD PTR _intra_preds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _modes$[ebp]
	add	ecx, DWORD PTR _mode_i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	movsd	QWORD PTR tv611[ebp], xmm0
	call	_kvz_luma_mode_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv603[ebp]
	movsd	xmm0, QWORD PTR tv611[ebp]
	mulsd	xmm0, QWORD PTR tv603[ebp]
	mov	ecx, DWORD PTR _mode_i$1[ebp]
	mov	edx, DWORD PTR _costs$[ebp]
	addsd	xmm0, QWORD PTR [edx+ecx*8]
	mov	eax, DWORD PTR _mode_i$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 530  :   }

	jmp	SHORT $LN28@search_int
$LN29@search_int:

; 531  : 
; 532  :   #undef PARALLEL_BLKS
; 533  : 
; 534  :   return modes_selected;

	mov	al, BYTE PTR _modes_selected$[ebp]

; 535  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@search_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5136				; 00001410H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN60@search_int:
	DD	6
	DD	$LN59@search_int
$LN59@search_int:
	DD	-2172					; fffff784H
	DD	2080					; 00000820H
	DD	$LN53@search_int
	DD	-3248					; fffff350H
	DD	1056					; 00000420H
	DD	$LN54@search_int
	DD	-3344					; fffff2f0H
	DD	16					; 00000010H
	DD	$LN55@search_int
	DD	-3420					; fffff2a4H
	DD	2
	DD	$LN56@search_int
	DD	-3444					; fffff28cH
	DD	16					; 00000010H
	DD	$LN57@search_int
	DD	-3508					; fffff24cH
	DD	5
	DD	$LN58@search_int
$LN58@search_int:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN57@search_int:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN56@search_int:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN55@search_int:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN54@search_int:
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN53@search_int:
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_search_intra_rough ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _search_intra_chroma_rough
_TEXT	SEGMENT
tv267 = -3192						; size = 4
tv239 = -3192						; size = 4
tv82 = -3192						; size = 4
tv76 = -3192						; size = 4
_i$1 = -2224						; size = 4
_i$2 = -2212						; size = 4
_orig_block$ = -2200					; size = 4
__orig_block$ = -2188					; size = 1056
_pred$ = -1124						; size = 4
__pred$ = -1112						; size = 1056
_satd_func$ = -48					; size = 4
_i$3 = -36						; size = 4
_log2_width_c$ = -21					; size = 1
_width$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_orig_u$ = 24						; size = 4
_orig_v$ = 28						; size = 4
_origstride$ = 32					; size = 2
_refs_u$ = 36						; size = 4
_refs_v$ = 40						; size = 4
_luma_mode$ = 44					; size = 1
_modes$ = 48						; size = 4
_costs$ = 52						; size = 4
_search_intra_chroma_rough PROC				; COMDAT

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3192				; 00000c78H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3192]
	mov	ecx, 798				; 0000031eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 325  :   assert(!(x_px & 4 || y_px & 4));

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 4
	jne	SHORT $LN14@search_int
	mov	ecx, DWORD PTR _y_px$[ebp]
	and	ecx, 4
	je	SHORT $LN15@search_int
$LN14@search_int:
	mov	edx, DWORD PTR ?__LINE__Var@?0??search_intra_chroma_rough@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@KAJPAKPK@?$AA?$CB?$AA?$CI?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$CG?$AA?5?$AA4?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAy@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@search_int:

; 326  : 
; 327  :   const unsigned width = MAX(LCU_WIDTH_C >> depth, TR_MIN_WIDTH);

	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	cmp	eax, 4
	jle	SHORT $LN16@search_int
	mov	edx, 32					; 00000020H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN17@search_int
$LN16@search_int:
	mov	DWORD PTR tv76[ebp], 4
$LN17@search_int:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 328  :   const int_fast8_t log2_width_c = MAX(LOG2_LCU_WIDTH - (depth + 1), 2);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	mov	ecx, 6
	sub	ecx, eax
	cmp	ecx, 2
	jle	SHORT $LN18@search_int
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	mov	eax, 6
	sub	eax, edx
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN19@search_int
$LN18@search_int:
	mov	DWORD PTR tv82[ebp], 2
$LN19@search_int:
	mov	cl, BYTE PTR tv82[ebp]
	mov	BYTE PTR _log2_width_c$[ebp], cl

; 329  : 
; 330  :   for (int i = 0; i < 5; ++i) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@search_int
$LN2@search_int:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@search_int:
	cmp	DWORD PTR _i$3[ebp], 5
	jge	SHORT $LN3@search_int

; 331  :     costs[i] = 0;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 332  :   }

	jmp	SHORT $LN2@search_int
$LN3@search_int:

; 333  : 
; 334  :   cost_pixel_nxn_func *const satd_func = kvz_pixels_get_satd_func(width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	call	_kvz_pixels_get_satd_func
	add	esp, 4
	mov	DWORD PTR _satd_func$[ebp], eax

; 335  :   //cost_pixel_nxn_func *const sad_func = kvz_pixels_get_sad_func(width);
; 336  : 
; 337  :   kvz_pixel _pred[32 * 32 + SIMD_ALIGNMENT];
; 338  :   kvz_pixel *pred = ALIGNED_POINTER(_pred, SIMD_ALIGNMENT);

	lea	eax, DWORD PTR __pred$[ebp+32]
	lea	ecx, DWORD PTR __pred$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN24@search_int
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN24@search_int:
	sub	eax, ecx
	mov	DWORD PTR _pred$[ebp], eax

; 339  : 
; 340  :   kvz_pixel _orig_block[32 * 32 + SIMD_ALIGNMENT];
; 341  :   kvz_pixel *orig_block = ALIGNED_POINTER(_orig_block, SIMD_ALIGNMENT);

	lea	eax, DWORD PTR __orig_block$[ebp+32]
	lea	ecx, DWORD PTR __orig_block$[ebp]
	and	ecx, -2147483617			; 8000001fH
	jns	SHORT $LN25@search_int
	dec	ecx
	or	ecx, -32				; ffffffe0H
	inc	ecx
$LN25@search_int:
	sub	eax, ecx
	mov	DWORD PTR _orig_block$[ebp], eax

; 342  : 
; 343  :   kvz_pixels_blit(orig_u, orig_block, width, width, origstride, width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	movsx	ecx, WORD PTR _origstride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_u$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 344  :   for (int i = 0; i < 5; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@search_int
$LN5@search_int:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@search_int:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	$LN6@search_int

; 345  :     if (modes[i] == luma_mode) continue;

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _luma_mode$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN11@search_int
	jmp	SHORT $LN5@search_int
$LN11@search_int:

; 346  :     kvz_intra_predict(refs_u, log2_width_c, modes[i], COLOR_U, pred, false);

	push	0
	mov	eax, DWORD PTR _pred$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _modes$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _log2_width_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _refs_u$[ebp]
	push	ecx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H

; 347  :     //costs[i] += get_cost(encoder_state, pred, orig_block, satd_func, sad_func, width);
; 348  :     costs[i] += satd_func(pred, orig_block);

	mov	esi, esp
	mov	eax, DWORD PTR _orig_block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	call	DWORD PTR _satd_func$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv239[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv239[ebp]
	mov	edx, DWORD PTR tv239[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	addsd	xmm0, QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	QWORD PTR [eax+edx*8], xmm0

; 349  :   }

	jmp	$LN5@search_int
$LN6@search_int:

; 350  : 
; 351  :   kvz_pixels_blit(orig_v, orig_block, width, width, origstride, width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	movsx	ecx, WORD PTR _origstride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _orig_v$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 352  :   for (int i = 0; i < 5; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@search_int
$LN8@search_int:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN10@search_int:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	$LN9@search_int

; 353  :     if (modes[i] == luma_mode) continue;

	mov	eax, DWORD PTR _modes$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _luma_mode$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN12@search_int
	jmp	SHORT $LN8@search_int
$LN12@search_int:

; 354  :     kvz_intra_predict(refs_v, log2_width_c, modes[i], COLOR_V, pred, false);

	push	0
	mov	eax, DWORD PTR _pred$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _modes$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _log2_width_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _refs_v$[ebp]
	push	ecx
	call	_kvz_intra_predict
	add	esp, 24					; 00000018H

; 355  :     //costs[i] += get_cost(encoder_state, pred, orig_block, satd_func, sad_func, width);
; 356  :     costs[i] += satd_func(pred, orig_block);

	mov	esi, esp
	mov	eax, DWORD PTR _orig_block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	call	DWORD PTR _satd_func$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv267[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv267[ebp]
	mov	edx, DWORD PTR tv267[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	addsd	xmm0, QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _costs$[ebp]
	movsd	QWORD PTR [eax+edx*8], xmm0

; 357  :   }

	jmp	$LN8@search_int
$LN9@search_int:

; 358  : 
; 359  :   kvz_sort_modes(modes, costs, 5);

	push	5
	mov	eax, DWORD PTR _costs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _modes$[ebp]
	push	ecx
	call	_kvz_sort_modes
	add	esp, 12					; 0000000cH

; 360  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@search_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3192				; 00000c78H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN23@search_int:
	DD	2
	DD	$LN22@search_int
$LN22@search_int:
	DD	-1112					; fffffba8H
	DD	1056					; 00000420H
	DD	$LN20@search_int
	DD	-2188					; fffff774H
	DD	1056					; 00000420H
	DD	$LN21@search_int
$LN21@search_int:
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN20@search_int:
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_search_intra_chroma_rough ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _search_intra_trdepth
_TEXT	SEGMENT
tv579 = -4652						; size = 8
tv565 = -4652						; size = 8
tv551 = -4652						; size = 8
tv537 = -4652						; size = 8
tv502 = -4652						; size = 8
tv491 = -4652						; size = 8
tv95 = -4652						; size = 4
tv156 = -4648						; size = 4
tv93 = -4648						; size = 4
tv74 = -4648						; size = 4
_bits$1 = -3296						; size = 8
_ctx$2 = -3280						; size = 4
_tr_depth$3 = -3265					; size = 1
_ctx$4 = -3256						; size = 4
_cbf_bits$5 = -3244					; size = 8
_tr_split_bit$6 = -3228					; size = 8
_chroma_mode$7 = -3209					; size = 1
_nosplit_cost$ = -3200					; size = 8
_split_cost$ = -3184					; size = 8
_nosplit_cbf$ = -3168					; size = 2
_nosplit_pixels$ = -3156				; size = 3072
_reconstruct_chroma$ = -73				; size = 1
_tr_cu$ = -64						; size = 4
_lcu_px$ = -52						; size = 8
_offset$ = -36						; size = 4
_width_c$ = -24						; size = 4
_width$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_max_depth$ = 24					; size = 4
_intra_mode$ = 28					; size = 4
_cost_treshold$ = 32					; size = 4
_pred_cu$ = 36						; size = 4
_lcu$ = 40						; size = 4
_search_intra_trdepth PROC				; COMDAT

; 183  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 4652				; 0000122cH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4652]
	mov	ecx, 1163				; 0000048bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 184  :   assert(depth >= 0 && depth <= MAX_PU_DEPTH);

	cmp	DWORD PTR _depth$[ebp], 0
	jl	SHORT $LN23@search_int
	cmp	DWORD PTR _depth$[ebp], 4
	jle	SHORT $LN24@search_int
$LN23@search_int:
	mov	eax, DWORD PTR ?__LINE__Var@?0??search_intra_trdepth@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EI@CDEPLAAM@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@search_int:

; 185  : 
; 186  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 187  :   const int width_c = width > TR_MIN_WIDTH ? width / 2 : width;

	cmp	DWORD PTR _width$[ebp], 4
	jle	SHORT $LN25@search_int
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN26@search_int
$LN25@search_int:
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN26@search_int:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _width_c$[ebp], ecx

; 188  : 
; 189  :   const int offset = width / 2;

	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset$[ebp], eax

; 190  :   const vector2d_t lcu_px = { SUB_SCU(x_px), SUB_SCU(y_px) };

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 191  :   cu_info_t *const tr_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _tr_cu$[ebp], eax

; 192  : 
; 193  :   const bool reconstruct_chroma = !(x_px & 4 || y_px & 4) && state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 4
	jne	SHORT $LN27@search_int
	mov	ecx, DWORD PTR _y_px$[ebp]
	and	ecx, 4
	jne	SHORT $LN27@search_int
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+2536], 0
	je	SHORT $LN27@search_int
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN28@search_int
$LN27@search_int:
	mov	DWORD PTR tv93[ebp], 0
$LN28@search_int:
	cmp	DWORD PTR tv93[ebp], 0
	jne	SHORT $LN29@search_int
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN30@search_int
$LN29@search_int:
	mov	DWORD PTR tv95[ebp], 1
$LN30@search_int:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _reconstruct_chroma$[ebp], cl

; 194  : 
; 195  :   struct {
; 196  :     kvz_pixel y[TR_MAX_WIDTH*TR_MAX_WIDTH];
; 197  :     kvz_pixel u[TR_MAX_WIDTH*TR_MAX_WIDTH];
; 198  :     kvz_pixel v[TR_MAX_WIDTH*TR_MAX_WIDTH];
; 199  :   } nosplit_pixels;
; 200  :   uint16_t nosplit_cbf = 0;

	xor	eax, eax
	mov	WORD PTR _nosplit_cbf$[ebp], ax

; 201  : 
; 202  :   double split_cost = INT32_MAX;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _split_cost$[ebp], xmm0

; 203  :   double nosplit_cost = INT32_MAX;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _nosplit_cost$[ebp], xmm0

; 204  : 
; 205  :   if (depth > 0) {

	cmp	DWORD PTR _depth$[ebp], 0
	jle	$LN6@search_int

; 206  :     tr_cu->tr_depth = depth;

	mov	al, BYTE PTR _depth$[ebp]
	and	al, 7
	mov	ecx, DWORD PTR _tr_cu$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	and	dl, 248					; 000000f8H
	or	dl, al
	mov	eax, DWORD PTR _tr_cu$[ebp]
	mov	BYTE PTR [eax+1], dl

; 207  :     pred_cu->tr_depth = depth;

	mov	al, BYTE PTR _depth$[ebp]
	and	al, 7
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	and	dl, 248					; 000000f8H
	or	dl, al
	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	BYTE PTR [eax+1], dl

; 208  : 
; 209  :     nosplit_cost = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _nosplit_cost$[ebp], xmm0

; 210  : 
; 211  :     cbf_clear(&pred_cu->cbf, depth, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 212  :     if (reconstruct_chroma) {

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN3@search_int

; 213  :       cbf_clear(&pred_cu->cbf, depth, COLOR_U);

	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 214  :       cbf_clear(&pred_cu->cbf, depth, COLOR_V);

	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	add	ecx, 4
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH
$LN3@search_int:

; 215  :     }
; 216  : 
; 217  :     const int8_t chroma_mode = reconstruct_chroma ? intra_mode : -1;

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN31@search_int
	mov	ecx, DWORD PTR _intra_mode$[ebp]
	mov	DWORD PTR tv156[ebp], ecx
	jmp	SHORT $LN32@search_int
$LN31@search_int:
	mov	DWORD PTR tv156[ebp], -1
$LN32@search_int:
	mov	dl, BYTE PTR tv156[ebp]
	mov	BYTE PTR _chroma_mode$7[ebp], dl

; 218  :     kvz_intra_recon_cu(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _chroma_mode$7[ebp]
	push	edx
	movzx	eax, BYTE PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 219  :                        x_px, y_px,
; 220  :                        depth,
; 221  :                        intra_mode, chroma_mode,
; 222  :                        pred_cu, lcu);
; 223  : 
; 224  :     nosplit_cost += kvz_cu_rd_cost_luma(state, lcu_px.x, lcu_px.y, depth, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcu_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv491[ebp]
	movsd	xmm0, QWORD PTR tv491[ebp]
	addsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	movsd	QWORD PTR _nosplit_cost$[ebp], xmm0

; 225  :     if (reconstruct_chroma) {

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN4@search_int

; 226  :       nosplit_cost += kvz_cu_rd_cost_chroma(state, lcu_px.x, lcu_px.y, depth, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcu_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv502[ebp]
	movsd	xmm0, QWORD PTR tv502[ebp]
	addsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	movsd	QWORD PTR _nosplit_cost$[ebp], xmm0
$LN4@search_int:

; 227  :     }
; 228  : 
; 229  :     // Early stop codition for the recursive search.
; 230  :     // If the cost of any 1/4th of the transform is already larger than the
; 231  :     // whole transform, assume that splitting further is a bad idea.
; 232  :     if (nosplit_cost >= cost_treshold) {

	cvtsi2sd xmm0, DWORD PTR _cost_treshold$[ebp]
	movsd	xmm1, QWORD PTR _nosplit_cost$[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN5@search_int

; 233  :       return nosplit_cost;

	fld	QWORD PTR _nosplit_cost$[ebp]
	jmp	$LN19@search_int
$LN5@search_int:

; 234  :     }
; 235  : 
; 236  :     nosplit_cbf = pred_cu->cbf;

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR _nosplit_cbf$[ebp], cx

; 237  : 
; 238  :     kvz_pixels_blit(lcu->rec.y, nosplit_pixels.y, width, width, LCU_WIDTH, width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	lea	eax, DWORD PTR _nosplit_pixels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 6540				; 0000198cH
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 239  :     if (reconstruct_chroma) {

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN6@search_int

; 240  :       kvz_pixels_blit(lcu->rec.u, nosplit_pixels.u, width_c, width_c, LCU_WIDTH_C, width_c);

	mov	eax, DWORD PTR _width_c$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width_c$[ebp]
	push	edx
	lea	eax, DWORD PTR _nosplit_pixels$[ebp+1024]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 10636				; 0000298cH
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 241  :       kvz_pixels_blit(lcu->rec.v, nosplit_pixels.v, width_c, width_c, LCU_WIDTH_C, width_c);

	mov	eax, DWORD PTR _width_c$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width_c$[ebp]
	push	edx
	lea	eax, DWORD PTR _nosplit_pixels$[ebp+2048]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 11660				; 00002d8cH
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN6@search_int:

; 242  :     }
; 243  :   }
; 244  : 
; 245  :   // Recurse further if all of the following:
; 246  :   // - Current depth is less than maximum depth of the search (max_depth).
; 247  :   //   - Maximum transform hierarchy depth is constrained by clipping
; 248  :   //     max_depth.
; 249  :   // - Min transform size hasn't been reached (MAX_PU_DEPTH).
; 250  :   if (depth < max_depth && depth < MAX_PU_DEPTH) {

	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _max_depth$[ebp]
	jge	$LN7@search_int
	cmp	DWORD PTR _depth$[ebp], 4
	jge	$LN7@search_int

; 251  :     split_cost = 3 * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR __real@4008000000000000
	mulsd	xmm0, QWORD PTR [eax+296]
	movsd	QWORD PTR _split_cost$[ebp], xmm0

; 252  : 
; 253  :     split_cost += search_intra_trdepth(state, x_px, y_px, depth + 1, max_depth, intra_mode, nosplit_cost, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	cvttsd2si edx, QWORD PTR _nosplit_cost$[ebp]
	push	edx
	mov	eax, DWORD PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max_depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_search_intra_trdepth
	add	esp, 36					; 00000024H
	fstp	QWORD PTR tv537[ebp]
	movsd	xmm0, QWORD PTR tv537[ebp]
	addsd	xmm0, QWORD PTR _split_cost$[ebp]
	movsd	QWORD PTR _split_cost$[ebp], xmm0

; 254  :     if (split_cost < nosplit_cost) {

	movsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$[ebp]
	jbe	SHORT $LN9@search_int

; 255  :       split_cost += search_intra_trdepth(state, x_px + offset, y_px, depth + 1, max_depth, intra_mode, nosplit_cost, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	cvttsd2si edx, QWORD PTR _nosplit_cost$[ebp]
	push	edx
	mov	eax, DWORD PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max_depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_search_intra_trdepth
	add	esp, 36					; 00000024H
	fstp	QWORD PTR tv551[ebp]
	movsd	xmm0, QWORD PTR tv551[ebp]
	addsd	xmm0, QWORD PTR _split_cost$[ebp]
	movsd	QWORD PTR _split_cost$[ebp], xmm0
$LN9@search_int:

; 256  :     }
; 257  :     if (split_cost < nosplit_cost) {

	movsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$[ebp]
	jbe	SHORT $LN10@search_int

; 258  :       split_cost += search_intra_trdepth(state, x_px, y_px + offset, depth + 1, max_depth, intra_mode, nosplit_cost, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	cvttsd2si edx, QWORD PTR _nosplit_cost$[ebp]
	push	edx
	mov	eax, DWORD PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max_depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_search_intra_trdepth
	add	esp, 36					; 00000024H
	fstp	QWORD PTR tv565[ebp]
	movsd	xmm0, QWORD PTR tv565[ebp]
	addsd	xmm0, QWORD PTR _split_cost$[ebp]
	movsd	QWORD PTR _split_cost$[ebp], xmm0
$LN10@search_int:

; 259  :     }
; 260  :     if (split_cost < nosplit_cost) {

	movsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$[ebp]
	jbe	SHORT $LN11@search_int

; 261  :       split_cost += search_intra_trdepth(state, x_px + offset, y_px + offset, depth + 1, max_depth, intra_mode, nosplit_cost, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	cvttsd2si edx, QWORD PTR _nosplit_cost$[ebp]
	push	edx
	mov	eax, DWORD PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _max_depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_search_intra_trdepth
	add	esp, 36					; 00000024H
	fstp	QWORD PTR tv579[ebp]
	movsd	xmm0, QWORD PTR tv579[ebp]
	addsd	xmm0, QWORD PTR _split_cost$[ebp]
	movsd	QWORD PTR _split_cost$[ebp], xmm0
$LN11@search_int:

; 262  :     }
; 263  : 
; 264  :     double tr_split_bit = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _tr_split_bit$6[ebp], xmm0

; 265  :     double cbf_bits = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _cbf_bits$5[ebp], xmm0

; 266  : 
; 267  :     // Add bits for split_transform_flag = 1, because transform depth search bypasses
; 268  :     // the normal recursion in the cost functions.
; 269  :     if (depth >= 1 && depth <= 3) {

	cmp	DWORD PTR _depth$[ebp], 1
	jl	SHORT $LN12@search_int
	cmp	DWORD PTR _depth$[ebp], 3
	jg	SHORT $LN12@search_int

; 270  :       const cabac_ctx_t *ctx = &(state->cabac.ctx.trans_subdiv_model[5 - (6 - depth)]);

	mov	eax, 6
	sub	eax, DWORD PTR _depth$[ebp]
	mov	ecx, 5
	sub	ecx, eax
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx+109]
	mov	DWORD PTR _ctx$4[ebp], eax

; 271  :       tr_split_bit += CTX_ENTROPY_FBITS(ctx, 1);

	mov	eax, DWORD PTR _ctx$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	addsd	xmm0, QWORD PTR _tr_split_bit$6[ebp]
	movsd	QWORD PTR _tr_split_bit$6[ebp], xmm0
$LN12@search_int:

; 272  :     }
; 273  : 
; 274  :     // Add cost of cbf chroma bits on transform tree.
; 275  :     // All cbf bits are accumulated to pred_cu.cbf and cbf_is_set returns true
; 276  :     // if cbf is set at any level >= depth, so cbf chroma is assumed to be 0
; 277  :     // if this and any previous transform block has no chroma coefficients.
; 278  :     // When searching the first block we don't actually know the real values,
; 279  :     // so this will code cbf as 0 and not code the cbf at all for descendants.
; 280  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN16@search_int

; 281  :       const uint8_t tr_depth = depth - pred_cu->depth;

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, edx
	mov	BYTE PTR _tr_depth$3[ebp], al

; 282  : 
; 283  :       const cabac_ctx_t *ctx = &(state->cabac.ctx.qt_cbf_model_chroma[tr_depth]);

	movzx	eax, BYTE PTR _tr_depth$3[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax+116]
	mov	DWORD PTR _ctx$2[ebp], edx

; 284  :       if (tr_depth == 0 || cbf_is_set(pred_cu->cbf, depth - 1, COLOR_U)) {

	movzx	eax, BYTE PTR _tr_depth$3[ebp]
	test	eax, eax
	je	SHORT $LN15@search_int
	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN14@search_int
$LN15@search_int:

; 285  :         cbf_bits += CTX_ENTROPY_FBITS(ctx, cbf_is_set(pred_cu->cbf, depth, COLOR_U));

	mov	eax, DWORD PTR _ctx$2[ebp]
	movzx	esi, BYTE PTR [eax]
	push	1
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_cu$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	xor	esi, eax
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[esi*4]
	addsd	xmm0, QWORD PTR _cbf_bits$5[ebp]
	movsd	QWORD PTR _cbf_bits$5[ebp], xmm0
$LN14@search_int:

; 286  :       }
; 287  :       if (tr_depth == 0 || cbf_is_set(pred_cu->cbf, depth - 1, COLOR_V)) {

	movzx	eax, BYTE PTR _tr_depth$3[ebp]
	test	eax, eax
	je	SHORT $LN17@search_int
	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN16@search_int
$LN17@search_int:

; 288  :         cbf_bits += CTX_ENTROPY_FBITS(ctx, cbf_is_set(pred_cu->cbf, depth, COLOR_V));

	mov	eax, DWORD PTR _ctx$2[ebp]
	movzx	esi, BYTE PTR [eax]
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_cu$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	xor	esi, eax
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[esi*4]
	addsd	xmm0, QWORD PTR _cbf_bits$5[ebp]
	movsd	QWORD PTR _cbf_bits$5[ebp], xmm0
$LN16@search_int:

; 289  :       }
; 290  :     }
; 291  : 
; 292  :     double bits = tr_split_bit + cbf_bits;

	movsd	xmm0, QWORD PTR _tr_split_bit$6[ebp]
	addsd	xmm0, QWORD PTR _cbf_bits$5[ebp]
	movsd	QWORD PTR _bits$1[ebp], xmm0

; 293  :     split_cost += bits * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _bits$1[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR _split_cost$[ebp]
	movsd	QWORD PTR _split_cost$[ebp], xmm0

; 294  :   } else {

	jmp	SHORT $LN33@search_int
$LN7@search_int:

; 295  :     assert(width <= TR_MAX_WIDTH);

	cmp	DWORD PTR _width$[ebp], 32		; 00000020H
	jle	SHORT $LN33@search_int
	mov	eax, DWORD PTR ?__LINE__Var@?0??search_intra_trdepth@@9@9
	add	eax, 112				; 00000070H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@NAMJEIHN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@search_int:

; 296  :   }
; 297  : 
; 298  :   if (depth == 0 || split_cost < nosplit_cost) {

	cmp	DWORD PTR _depth$[ebp], 0
	je	SHORT $LN20@search_int
	movsd	xmm0, QWORD PTR _nosplit_cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$[ebp]
	jbe	SHORT $LN18@search_int
$LN20@search_int:

; 299  :     return split_cost;

	fld	QWORD PTR _split_cost$[ebp]
	jmp	$LN19@search_int

; 300  :   } else {

	jmp	$LN19@search_int
$LN18@search_int:

; 301  :     kvz_lcu_fill_trdepth(lcu, x_px, y_px, depth, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H

; 302  : 
; 303  :     pred_cu->cbf = nosplit_cbf;

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cx, WORD PTR _nosplit_cbf$[ebp]
	mov	WORD PTR [eax+4], cx

; 304  : 
; 305  :     // We only restore the pixel data and not coefficients or cbf data.
; 306  :     // The only thing we really need are the border pixels.kvz_intra_get_dir_luma_predictor
; 307  :     kvz_pixels_blit(nosplit_pixels.y, lcu->rec.y, width, width, width, LCU_WIDTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 6540				; 0000198cH
	push	eax
	lea	ecx, DWORD PTR _nosplit_pixels$[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 308  :     if (reconstruct_chroma) {

	movzx	eax, BYTE PTR _reconstruct_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN21@search_int

; 309  :       kvz_pixels_blit(nosplit_pixels.u, lcu->rec.u, width_c, width_c, width_c, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _width_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width_c$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 10636				; 0000298cH
	push	eax
	lea	ecx, DWORD PTR _nosplit_pixels$[ebp+1024]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 310  :       kvz_pixels_blit(nosplit_pixels.v, lcu->rec.v, width_c, width_c, width_c, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _width_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width_c$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 11660				; 00002d8cH
	push	eax
	lea	ecx, DWORD PTR _nosplit_pixels$[ebp+2048]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN21@search_int:

; 311  :     }
; 312  : 
; 313  :     return nosplit_cost;

	fld	QWORD PTR _nosplit_cost$[ebp]
$LN19@search_int:

; 314  :   }
; 315  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@search_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 4652				; 0000122cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN37@search_int:
	DD	2
	DD	$LN36@search_int
$LN36@search_int:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN34@search_int
	DD	-3156					; fffff3acH
	DD	3072					; 00000c00H
	DD	$LN35@search_int
$LN35@search_int:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN34@search_int:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_search_intra_trdepth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _get_cost_dual
_TEXT	SEGMENT
tv243 = -292						; size = 4
tv233 = -292						; size = 4
tv200 = -292						; size = 4
tv192 = -292						; size = 4
_i$1 = -92						; size = 4
_sad_costs$2 = -80					; size = 16
_unsigned_sad_costs$3 = -56				; size = 8
_trskip_bits$4 = -40					; size = 8
_ctx$5 = -24						; size = 4
_satd_costs$ = -12					; size = 8
_state$ = 8						; size = 4
_preds$ = 12						; size = 4
_orig_block$ = 16					; size = 4
_satd_twin_func$ = 20					; size = 4
_sad_twin_func$ = 24					; size = 4
_width$ = 28						; size = 4
_costs_out$ = 32					; size = 4
_get_cost_dual PROC					; COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 131  :   #define PARALLEL_BLKS 2
; 132  :   unsigned satd_costs[PARALLEL_BLKS] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _satd_costs$[ebp], eax
	mov	DWORD PTR _satd_costs$[ebp+4], eax

; 133  :   satd_twin_func(preds, orig_block, PARALLEL_BLKS, satd_costs);

	mov	esi, esp
	lea	eax, DWORD PTR _satd_costs$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preds$[ebp]
	push	edx
	call	DWORD PTR _satd_twin_func$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  :   costs_out[0] = (double)satd_costs[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _satd_costs$[ebp+ecx]
	mov	DWORD PTR tv192[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv192[ebp]
	mov	eax, DWORD PTR tv192[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _costs_out$[ebp]
	movsd	QWORD PTR [eax+edx], xmm0

; 135  :   costs_out[1] = (double)satd_costs[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _satd_costs$[ebp+eax]
	mov	DWORD PTR tv200[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv200[ebp]
	mov	edx, DWORD PTR tv200[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _costs_out$[ebp]
	movsd	QWORD PTR [ecx+eax], xmm0

; 136  : 
; 137  :   if (TRSKIP_RATIO != 0 && width == 4 && state->encoder_control->cfg.trskip_enable) {

	mov	eax, 1
	test	eax, eax
	je	$LN3@get_cost_d
	cmp	DWORD PTR _width$[ebp], 4
	jne	$LN3@get_cost_d
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+72], 0
	je	$LN3@get_cost_d

; 138  :     // If the mode looks better with SAD than SATD it might be a good
; 139  :     // candidate for transform skip. How much better SAD has to be is
; 140  :     // controlled by TRSKIP_RATIO.
; 141  : 
; 142  :     // Add the offset bit costs of signaling 'luma and chroma use trskip',
; 143  :     // versus signaling 'luma and chroma don't use trskip' to the SAD cost.
; 144  :     const cabac_ctx_t *ctx = &state->cabac.ctx.transform_skip_model_luma;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 278				; 00000116H
	mov	DWORD PTR _ctx$5[ebp], eax

; 145  :     double trskip_bits = CTX_ENTROPY_FBITS(ctx, 1) - CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$5[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR _ctx$5[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, 0
	movss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	subss	xmm0, DWORD PTR _kvz_f_entropy_bits[eax*4]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _trskip_bits$4[ebp], xmm0

; 146  : 
; 147  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN6@get_cost_d

; 148  :       ctx = &state->cabac.ctx.transform_skip_model_chroma;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 279				; 00000117H
	mov	DWORD PTR _ctx$5[ebp], eax

; 149  :       trskip_bits += 2.0 * (CTX_ENTROPY_FBITS(ctx, 1) - CTX_ENTROPY_FBITS(ctx, 0));

	mov	eax, DWORD PTR _ctx$5[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR _ctx$5[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, 0
	movss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	subss	xmm0, DWORD PTR _kvz_f_entropy_bits[eax*4]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	addsd	xmm0, QWORD PTR _trskip_bits$4[ebp]
	movsd	QWORD PTR _trskip_bits$4[ebp], xmm0
$LN6@get_cost_d:

; 150  :     }
; 151  : 
; 152  :     unsigned unsigned_sad_costs[PARALLEL_BLKS] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _unsigned_sad_costs$3[ebp], eax
	mov	DWORD PTR _unsigned_sad_costs$3[ebp+4], eax

; 153  :     double sad_costs[PARALLEL_BLKS] = { 0 };

	xor	eax, eax
	mov	DWORD PTR _sad_costs$2[ebp], eax
	mov	DWORD PTR _sad_costs$2[ebp+4], eax
	mov	DWORD PTR _sad_costs$2[ebp+8], eax
	mov	DWORD PTR _sad_costs$2[ebp+12], eax

; 154  :     sad_twin_func(preds, orig_block, PARALLEL_BLKS, unsigned_sad_costs);

	mov	esi, esp
	lea	eax, DWORD PTR _unsigned_sad_costs$3[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _orig_block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preds$[ebp]
	push	edx
	call	DWORD PTR _sad_twin_func$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 155  :     for (int i = 0; i < PARALLEL_BLKS; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@get_cost_d
$LN2@get_cost_d:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@get_cost_d:
	cmp	DWORD PTR _i$1[ebp], 2
	jge	$LN3@get_cost_d

; 156  :       sad_costs[i] = TRSKIP_RATIO * (double)unsigned_sad_costs[i] + state->lambda_sqrt * trskip_bits;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _unsigned_sad_costs$3[ebp+eax*4]
	mov	DWORD PTR tv233[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv233[ebp]
	mov	edx, DWORD PTR tv233[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm0, QWORD PTR __real@3ffb333333333333
	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm1, QWORD PTR [eax+304]
	mulsd	xmm1, QWORD PTR _trskip_bits$4[ebp]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _i$1[ebp]
	movsd	QWORD PTR _sad_costs$2[ebp+ecx*8], xmm0

; 157  :       if (sad_costs[i] < (double)satd_costs[i]) {

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _satd_costs$[ebp+eax*4]
	mov	DWORD PTR tv243[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv243[ebp]
	mov	edx, DWORD PTR tv243[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, DWORD PTR _i$1[ebp]
	comisd	xmm0, QWORD PTR _sad_costs$2[ebp+eax*8]
	jbe	SHORT $LN7@get_cost_d

; 158  :         costs_out[i] = sad_costs[i];

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _costs_out$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	movsd	xmm0, QWORD PTR _sad_costs$2[ebp+edx*8]
	movsd	QWORD PTR [ecx+eax*8], xmm0
$LN7@get_cost_d:

; 159  :       }
; 160  :     }

	jmp	$LN2@get_cost_d
$LN3@get_cost_d:

; 161  :   }
; 162  : 
; 163  :   #undef PARALLEL_BLKS
; 164  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_cost_d
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@get_cost_d:
	DD	3
	DD	$LN12@get_cost_d
$LN12@get_cost_d:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN9@get_cost_d
	DD	-56					; ffffffc8H
	DD	8
	DD	$LN10@get_cost_d
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN11@get_cost_d
$LN11@get_cost_d:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN10@get_cost_d:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN9@get_cost_d:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_get_cost_dual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _get_cost
_TEXT	SEGMENT
tv176 = -256						; size = 4
tv154 = -256						; size = 4
_sad_cost$1 = -56					; size = 8
_trskip_bits$2 = -40					; size = 8
_ctx$3 = -24						; size = 4
_satd_cost$ = -12					; size = 8
_state$ = 8						; size = 4
_pred$ = 12						; size = 4
_orig_block$ = 16					; size = 4
_satd_func$ = 20					; size = 4
_sad_func$ = 24						; size = 4
_width$ = 28						; size = 4
_get_cost PROC						; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   :   double satd_cost = satd_func(pred, orig_block);

	mov	esi, esp
	mov	eax, DWORD PTR _orig_block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	call	DWORD PTR _satd_func$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv154[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR tv154[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR _satd_cost$[ebp], xmm0

; 94   :   if (TRSKIP_RATIO != 0 && width == 4 && state->encoder_control->cfg.trskip_enable) {

	mov	eax, 1
	test	eax, eax
	je	$LN4@get_cost
	cmp	DWORD PTR _width$[ebp], 4
	jne	$LN4@get_cost
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+72], 0
	je	$LN4@get_cost

; 95   :     // If the mode looks better with SAD than SATD it might be a good
; 96   :     // candidate for transform skip. How much better SAD has to be is
; 97   :     // controlled by TRSKIP_RATIO.
; 98   : 
; 99   :     // Add the offset bit costs of signaling 'luma and chroma use trskip',
; 100  :     // versus signaling 'luma and chroma don't use trskip' to the SAD cost.
; 101  :     const cabac_ctx_t *ctx = &state->cabac.ctx.transform_skip_model_luma;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 278				; 00000116H
	mov	DWORD PTR _ctx$3[ebp], eax

; 102  :     double trskip_bits = CTX_ENTROPY_FBITS(ctx, 1) - CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$3[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR _ctx$3[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, 0
	movss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	subss	xmm0, DWORD PTR _kvz_f_entropy_bits[eax*4]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _trskip_bits$2[ebp], xmm0

; 103  : 
; 104  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN3@get_cost

; 105  :       ctx = &state->cabac.ctx.transform_skip_model_chroma;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 279				; 00000117H
	mov	DWORD PTR _ctx$3[ebp], eax

; 106  :       trskip_bits += 2.0 * (CTX_ENTROPY_FBITS(ctx, 1) - CTX_ENTROPY_FBITS(ctx, 0));

	mov	eax, DWORD PTR _ctx$3[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	mov	edx, DWORD PTR _ctx$3[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, 0
	movss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	subss	xmm0, DWORD PTR _kvz_f_entropy_bits[eax*4]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	addsd	xmm0, QWORD PTR _trskip_bits$2[ebp]
	movsd	QWORD PTR _trskip_bits$2[ebp], xmm0
$LN3@get_cost:

; 107  :     }
; 108  : 
; 109  :     double sad_cost = TRSKIP_RATIO * sad_func(pred, orig_block) + state->lambda_sqrt * trskip_bits;

	mov	esi, esp
	mov	eax, DWORD PTR _orig_block$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred$[ebp]
	push	ecx
	call	DWORD PTR _sad_func$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv176[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv176[ebp]
	mov	edx, DWORD PTR tv176[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm0, QWORD PTR __real@3ffb333333333333
	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm1, QWORD PTR [eax+304]
	mulsd	xmm1, QWORD PTR _trskip_bits$2[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _sad_cost$1[ebp], xmm0

; 110  :     if (sad_cost < satd_cost) {

	movsd	xmm0, QWORD PTR _satd_cost$[ebp]
	comisd	xmm0, QWORD PTR _sad_cost$1[ebp]
	jbe	SHORT $LN4@get_cost

; 111  :       return sad_cost;

	fld	QWORD PTR _sad_cost$1[ebp]
	jmp	SHORT $LN1@get_cost
$LN4@get_cost:

; 112  :     }
; 113  :   }
; 114  :   return satd_cost;

	fld	QWORD PTR _satd_cost$[ebp]
$LN1@get_cost:

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_cost ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _select_best_mode_index
_TEXT	SEGMENT
_i$1 = -33						; size = 1
_best_cost$ = -24					; size = 8
_best_index$ = -5					; size = 1
_modes$ = 8						; size = 4
_costs$ = 12						; size = 4
_length$ = 16						; size = 1
_select_best_mode_index PROC				; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 61   :   uint8_t best_index = 0;

	mov	BYTE PTR _best_index$[ebp], 0

; 62   :   double best_cost = costs[0];

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx]
	movsd	QWORD PTR _best_cost$[ebp], xmm0

; 63   :   
; 64   :   for (uint8_t i = 1; i < length; ++i) {

	mov	BYTE PTR _i$1[ebp], 1
	jmp	SHORT $LN4@select_bes
$LN2@select_bes:
	mov	al, BYTE PTR _i$1[ebp]
	add	al, 1
	mov	BYTE PTR _i$1[ebp], al
$LN4@select_bes:
	movzx	eax, BYTE PTR _i$1[ebp]
	movzx	ecx, BYTE PTR _length$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN3@select_bes

; 65   :     if (costs[i] < best_cost) {

	movzx	eax, BYTE PTR _i$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR _best_cost$[ebp]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN5@select_bes

; 66   :       best_cost = costs[i];

	movzx	eax, BYTE PTR _i$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR _best_cost$[ebp], xmm0

; 67   :       best_index = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _best_index$[ebp], al
$LN5@select_bes:

; 68   :     }
; 69   :   }

	jmp	SHORT $LN2@select_bes
$LN3@select_bes:

; 70   : 
; 71   :   return best_index;

	mov	al, BYTE PTR _best_index$[ebp]

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_select_best_mode_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _kvz_search_cu_intra
_TEXT	SEGMENT
tv161 = -1216						; size = 4
tv232 = -1212						; size = 4
tv228 = -1212						; size = 4
tv159 = -1212						; size = 4
_best_mode_i$ = -817					; size = 1
_num_modes_to_check$1 = -808				; size = 4
_number_of_modes_to_search$2 = -796			; size = 4
_rdo_level$ = -784					; size = 4
_i$3 = -772						; size = 4
_skip_rough_search$ = -757				; size = 1
_number_of_modes$ = -745				; size = 1
_ref_pixels$ = -736					; size = 4
_costs$ = -724						; size = 280
_modes$ = -436						; size = 35
_pic_px$4 = -392					; size = 8
_luma_px$5 = -376					; size = 8
_above_cu$ = -360					; size = 4
_left_cu$ = -348					; size = 4
_candidate_modes$ = -336				; size = 3
_refs$ = -324						; size = 261
_cur_cu$ = -52						; size = 4
_log2_width$ = -37					; size = 1
_cu_width$ = -25					; size = 1
_lcu_px$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_lcu$ = 24						; size = 4
_mode_out$ = 28						; size = 4
_cost_out$ = 32						; size = 4
_kvz_search_cu_intra PROC				; COMDAT

; 793  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1216				; 000004c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1216]
	mov	ecx, 304				; 00000130H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 794  :   const vector2d_t lcu_px = { SUB_SCU(x_px), SUB_SCU(y_px) };

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 795  :   const int8_t cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	BYTE PTR _cu_width$[ebp], al

; 796  :   const int_fast8_t log2_width = LOG2_LCU_WIDTH - depth;

	mov	eax, 6
	sub	eax, DWORD PTR _depth$[ebp]
	mov	BYTE PTR _log2_width$[ebp], al

; 797  : 
; 798  :   cu_info_t *cur_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cur_cu$[ebp], eax

; 799  : 
; 800  :   kvz_intra_references refs;
; 801  : 
; 802  :   int8_t candidate_modes[3];
; 803  : 
; 804  :   cu_info_t *left_cu = 0;

	mov	DWORD PTR _left_cu$[ebp], 0

; 805  :   cu_info_t *above_cu = 0;

	mov	DWORD PTR _above_cu$[ebp], 0

; 806  : 
; 807  :   // Select left and top CUs if they are available.
; 808  :   // Top CU is not available across LCU boundary.
; 809  :   if (x_px >= SCU_WIDTH) {

	cmp	DWORD PTR _x_px$[ebp], 4
	jl	SHORT $LN5@kvz_search

; 810  :     left_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x - 1, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sub	eax, 1
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _left_cu$[ebp], eax
$LN5@kvz_search:

; 811  :   }
; 812  :   if (y_px >= SCU_WIDTH && lcu_px.y > 0) {

	cmp	DWORD PTR _y_px$[ebp], 4
	jl	SHORT $LN6@kvz_search
	cmp	DWORD PTR _lcu_px$[ebp+4], 0
	jle	SHORT $LN6@kvz_search

; 813  :     above_cu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y - 1);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sub	ecx, 1
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _above_cu$[ebp], eax
$LN6@kvz_search:

; 814  :   }
; 815  :   kvz_intra_get_dir_luma_predictor(x_px, y_px, candidate_modes, cur_cu, left_cu, above_cu);

	mov	eax, DWORD PTR _above_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	lea	eax, DWORD PTR _candidate_modes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_px$[ebp]
	push	edx
	call	_kvz_intra_get_dir_luma_predictor
	add	esp, 24					; 00000018H

; 816  : 
; 817  :   if (depth > 0) {

	cmp	DWORD PTR _depth$[ebp], 0
	jle	SHORT $LN7@kvz_search

; 818  :     const vector2d_t luma_px = { x_px, y_px };

	mov	eax, DWORD PTR _x_px$[ebp]
	mov	DWORD PTR _luma_px$5[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	mov	DWORD PTR _luma_px$5[ebp+4], eax

; 819  :     const vector2d_t pic_px = { state->tile->frame->width, state->tile->frame->height };

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pic_px$4[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _pic_px$4[ebp+4], eax

; 820  :     kvz_intra_build_reference(log2_width, COLOR_Y, &luma_px, &pic_px, lcu, &refs);

	lea	eax, DWORD PTR _refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pic_px$4[ebp]
	push	edx
	lea	eax, DWORD PTR _luma_px$5[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _log2_width$[ebp]
	push	ecx
	call	_kvz_intra_build_reference
	add	esp, 24					; 00000018H
$LN7@kvz_search:

; 821  :   }
; 822  : 
; 823  :   int8_t modes[35];
; 824  :   double costs[35];
; 825  : 
; 826  :   // Find best intra mode for 2Nx2N.
; 827  :   kvz_pixel *ref_pixels = &lcu->ref.y[lcu_px.x + lcu_px.y * LCU_WIDTH];

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	shl	eax, 6
	add	eax, DWORD PTR _lcu_px$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+392]
	mov	DWORD PTR _ref_pixels$[ebp], edx

; 828  : 
; 829  :   int8_t number_of_modes;
; 830  :   bool skip_rough_search = (depth == 0 || state->encoder_control->cfg.rdo >= 3);

	cmp	DWORD PTR _depth$[ebp], 0
	je	SHORT $LN17@kvz_search
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+64], 3
	jge	SHORT $LN17@kvz_search
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN18@kvz_search
$LN17@kvz_search:
	mov	DWORD PTR tv159[ebp], 1
$LN18@kvz_search:
	cmp	DWORD PTR tv159[ebp], 0
	jne	SHORT $LN19@kvz_search
	mov	DWORD PTR tv161[ebp], 0
	jmp	SHORT $LN20@kvz_search
$LN19@kvz_search:
	mov	DWORD PTR tv161[ebp], 1
$LN20@kvz_search:
	mov	dl, BYTE PTR tv161[ebp]
	mov	BYTE PTR _skip_rough_search$[ebp], dl

; 831  :   if (!skip_rough_search) {

	movzx	eax, BYTE PTR _skip_rough_search$[ebp]
	test	eax, eax
	jne	SHORT $LN8@kvz_search

; 832  :     number_of_modes = search_intra_rough(state,

	lea	eax, DWORD PTR _costs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _modes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _candidate_modes$[ebp]
	push	edx
	movsx	eax, BYTE PTR _log2_width$[ebp]
	push	eax
	lea	ecx, DWORD PTR _refs$[ebp]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _ref_pixels$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_search_intra_rough
	add	esp, 32					; 00000020H
	mov	BYTE PTR _number_of_modes$[ebp], al

; 833  :                                          ref_pixels, LCU_WIDTH,
; 834  :                                          &refs,
; 835  :                                          log2_width, candidate_modes,
; 836  :                                          modes, costs);
; 837  :   } else {

	jmp	SHORT $LN3@kvz_search
$LN8@kvz_search:

; 838  :     number_of_modes = 35;

	mov	BYTE PTR _number_of_modes$[ebp], 35	; 00000023H

; 839  :     for (int i = 0; i < number_of_modes; ++i) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@kvz_search
$LN2@kvz_search:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@kvz_search:
	movsx	eax, BYTE PTR _number_of_modes$[ebp]
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN3@kvz_search

; 840  :       modes[i] = i;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	cl, BYTE PTR _i$3[ebp]
	mov	BYTE PTR _modes$[ebp+eax], cl

; 841  :       costs[i] = MAX_INT;

	mov	eax, DWORD PTR _i$3[ebp]
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _costs$[ebp+eax*8], xmm0

; 842  :     }

	jmp	SHORT $LN2@kvz_search
$LN3@kvz_search:

; 843  :   }
; 844  : 
; 845  :   // Set transform depth to current depth, meaning no transform splits.
; 846  :   kvz_lcu_fill_trdepth(lcu, x_px, y_px, depth, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H

; 847  :   // Refine results with slower search or get some results if rough search was skipped.
; 848  :   const int32_t rdo_level = state->encoder_control->cfg.rdo;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _rdo_level$[ebp], edx

; 849  :   if (rdo_level >= 2 || skip_rough_search) {

	cmp	DWORD PTR _rdo_level$[ebp], 2
	jge	SHORT $LN11@kvz_search
	movzx	eax, BYTE PTR _skip_rough_search$[ebp]
	test	eax, eax
	je	$LN10@kvz_search
$LN11@kvz_search:

; 850  :     int number_of_modes_to_search;
; 851  :     if (rdo_level == 3) {

	cmp	DWORD PTR _rdo_level$[ebp], 3
	jne	SHORT $LN12@kvz_search

; 852  :       number_of_modes_to_search = 35;

	mov	DWORD PTR _number_of_modes_to_search$2[ebp], 35 ; 00000023H
	jmp	SHORT $LN15@kvz_search
$LN12@kvz_search:

; 853  :     } else if (rdo_level == 2) {

	cmp	DWORD PTR _rdo_level$[ebp], 2
	jne	SHORT $LN14@kvz_search

; 854  :       number_of_modes_to_search = (cu_width == 4) ? 3 : 2;

	movsx	eax, BYTE PTR _cu_width$[ebp]
	cmp	eax, 4
	jne	SHORT $LN21@kvz_search
	mov	DWORD PTR tv228[ebp], 3
	jmp	SHORT $LN22@kvz_search
$LN21@kvz_search:
	mov	DWORD PTR tv228[ebp], 2
$LN22@kvz_search:
	mov	ecx, DWORD PTR tv228[ebp]
	mov	DWORD PTR _number_of_modes_to_search$2[ebp], ecx

; 855  :     } else {

	jmp	SHORT $LN15@kvz_search
$LN14@kvz_search:

; 856  :       // Check only the predicted modes.
; 857  :       number_of_modes_to_search = 0;

	mov	DWORD PTR _number_of_modes_to_search$2[ebp], 0
$LN15@kvz_search:

; 858  :     }
; 859  :     int num_modes_to_check = MIN(number_of_modes, number_of_modes_to_search);

	movsx	eax, BYTE PTR _number_of_modes$[ebp]
	cmp	eax, DWORD PTR _number_of_modes_to_search$2[ebp]
	jge	SHORT $LN23@kvz_search
	movsx	ecx, BYTE PTR _number_of_modes$[ebp]
	mov	DWORD PTR tv232[ebp], ecx
	jmp	SHORT $LN24@kvz_search
$LN23@kvz_search:
	mov	edx, DWORD PTR _number_of_modes_to_search$2[ebp]
	mov	DWORD PTR tv232[ebp], edx
$LN24@kvz_search:
	mov	eax, DWORD PTR tv232[ebp]
	mov	DWORD PTR _num_modes_to_check$1[ebp], eax

; 860  : 
; 861  :     kvz_sort_modes(modes, costs, number_of_modes);

	movzx	eax, BYTE PTR _number_of_modes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _costs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modes$[ebp]
	push	edx
	call	_kvz_sort_modes
	add	esp, 12					; 0000000cH

; 862  :     number_of_modes = search_intra_rdo(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	lea	ecx, DWORD PTR _costs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modes$[ebp]
	push	edx
	mov	eax, DWORD PTR _num_modes_to_check$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _candidate_modes$[ebp]
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _ref_pixels$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_search_intra_rdo
	add	esp, 44					; 0000002cH
	mov	BYTE PTR _number_of_modes$[ebp], al
$LN10@kvz_search:

; 863  :                       x_px, y_px, depth,
; 864  :                       ref_pixels, LCU_WIDTH,
; 865  :                       candidate_modes,
; 866  :                       num_modes_to_check,
; 867  :                       modes, costs, lcu);
; 868  :   }
; 869  : 
; 870  :   uint8_t best_mode_i = select_best_mode_index(modes, costs, number_of_modes);

	movzx	eax, BYTE PTR _number_of_modes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _costs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modes$[ebp]
	push	edx
	call	_select_best_mode_index
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _best_mode_i$[ebp], al

; 871  : 
; 872  :   *mode_out = modes[best_mode_i];

	movzx	eax, BYTE PTR _best_mode_i$[ebp]
	mov	ecx, DWORD PTR _mode_out$[ebp]
	mov	dl, BYTE PTR _modes$[ebp+eax]
	mov	BYTE PTR [ecx], dl

; 873  :   *cost_out = costs[best_mode_i];

	movzx	eax, BYTE PTR _best_mode_i$[ebp]
	mov	ecx, DWORD PTR _cost_out$[ebp]
	movsd	xmm0, QWORD PTR _costs$[ebp+eax*8]
	movsd	QWORD PTR [ecx], xmm0

; 874  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@kvz_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1216				; 000004c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN33@kvz_search:
	DD	7
	DD	$LN32@kvz_search
$LN32@kvz_search:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN25@kvz_search
	DD	-324					; fffffebcH
	DD	261					; 00000105H
	DD	$LN26@kvz_search
	DD	-336					; fffffeb0H
	DD	3
	DD	$LN27@kvz_search
	DD	-376					; fffffe88H
	DD	8
	DD	$LN28@kvz_search
	DD	-392					; fffffe78H
	DD	8
	DD	$LN29@kvz_search
	DD	-436					; fffffe4cH
	DD	35					; 00000023H
	DD	$LN30@kvz_search
	DD	-724					; fffffd2cH
	DD	280					; 00000118H
	DD	$LN31@kvz_search
$LN31@kvz_search:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN30@kvz_search:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN29@kvz_search:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN28@kvz_search:
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN27@kvz_search:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN26@kvz_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN25@kvz_search:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_search_cu_intra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _kvz_search_cu_intra_chroma
_TEXT	SEGMENT
tv162 = -1164						; size = 4
_intra_mode_chroma$ = -769				; size = 1
_ref_v$1 = -760						; size = 4
_ref_u$2 = -748						; size = 4
_lcu_cpx$3 = -736					; size = 8
_refs_v$4 = -720					; size = 261
_refs_u$5 = -448					; size = 261
_luma_px$6 = -176					; size = 8
_pic_px$7 = -160					; size = 8
_log2_width_c$8 = -141					; size = 1
_num_modes$ = -132					; size = 4
_modes_in_depth$ = -120					; size = 5
_modes$ = -104						; size = 5
_costs$ = -88						; size = 40
_intra_mode$ = -37					; size = 1
_cur_pu$ = -28						; size = 4
_lcu_px$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_lcu$ = 24						; size = 4
_kvz_search_cu_intra_chroma PROC			; COMDAT

; 729  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1164				; 0000048cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1164]
	mov	ecx, 291				; 00000123H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 730  :   const vector2d_t lcu_px = { SUB_SCU(x_px), SUB_SCU(y_px) };

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 731  : 
; 732  :   cu_info_t *cur_pu = LCU_GET_CU_AT_PX(lcu, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_px$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cur_pu$[ebp], eax

; 733  :   int8_t intra_mode = cur_pu->intra.mode;

	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax+8]
	mov	BYTE PTR _intra_mode$[ebp], cl

; 734  : 
; 735  :   double costs[5];
; 736  :   int8_t modes[5] = { 0, 26, 10, 1, 34 };

	mov	BYTE PTR _modes$[ebp], 0
	mov	BYTE PTR _modes$[ebp+1], 26		; 0000001aH
	mov	BYTE PTR _modes$[ebp+2], 10		; 0000000aH
	mov	BYTE PTR _modes$[ebp+3], 1
	mov	BYTE PTR _modes$[ebp+4], 34		; 00000022H

; 737  :   if (intra_mode != 0 && intra_mode != 26 && intra_mode != 10 && intra_mode != 1) {

	movsx	eax, BYTE PTR _intra_mode$[ebp]
	test	eax, eax
	je	SHORT $LN2@kvz_search
	movsx	eax, BYTE PTR _intra_mode$[ebp]
	cmp	eax, 26					; 0000001aH
	je	SHORT $LN2@kvz_search
	movsx	eax, BYTE PTR _intra_mode$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN2@kvz_search
	movsx	eax, BYTE PTR _intra_mode$[ebp]
	cmp	eax, 1
	je	SHORT $LN2@kvz_search

; 738  :     modes[4] = intra_mode;

	mov	eax, 1
	shl	eax, 2
	mov	cl, BYTE PTR _intra_mode$[ebp]
	mov	BYTE PTR _modes$[ebp+eax], cl
$LN2@kvz_search:

; 739  :   }
; 740  : 
; 741  :   // The number of modes to select for slower chroma search. Luma mode
; 742  :   // is always one of the modes, so 2 means the final decision is made
; 743  :   // between luma mode and one other mode that looks the best
; 744  :   // according to search_intra_chroma_rough.
; 745  :   const int8_t modes_in_depth[5] = { 1, 1, 1, 1, 2 };

	mov	BYTE PTR _modes_in_depth$[ebp], 1
	mov	BYTE PTR _modes_in_depth$[ebp+1], 1
	mov	BYTE PTR _modes_in_depth$[ebp+2], 1
	mov	BYTE PTR _modes_in_depth$[ebp+3], 1
	mov	BYTE PTR _modes_in_depth$[ebp+4], 2

; 746  :   int num_modes = modes_in_depth[depth];

	mov	eax, DWORD PTR _depth$[ebp]
	movsx	ecx, BYTE PTR _modes_in_depth$[ebp+eax]
	mov	DWORD PTR _num_modes$[ebp], ecx

; 747  : 
; 748  :   if (state->encoder_control->cfg.rdo == 3) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+64], 3
	jne	SHORT $LN3@kvz_search

; 749  :     num_modes = 5;

	mov	DWORD PTR _num_modes$[ebp], 5
$LN3@kvz_search:

; 750  :   }
; 751  : 
; 752  :   // Don't do rough mode search if all modes are selected.
; 753  :   // FIXME: It might make more sense to only disable rough search if
; 754  :   // num_modes is 0.is 0.
; 755  :   if (num_modes != 1 && num_modes != 5) {

	cmp	DWORD PTR _num_modes$[ebp], 1
	je	$LN4@kvz_search
	cmp	DWORD PTR _num_modes$[ebp], 5
	je	$LN4@kvz_search

; 756  :     const int_fast8_t log2_width_c = MAX(LOG2_LCU_WIDTH - depth - 1, 2);

	mov	eax, 6
	sub	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	cmp	eax, 2
	jle	SHORT $LN7@kvz_search
	mov	ecx, 6
	sub	ecx, DWORD PTR _depth$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv162[ebp], ecx
	jmp	SHORT $LN8@kvz_search
$LN7@kvz_search:
	mov	DWORD PTR tv162[ebp], 2
$LN8@kvz_search:
	mov	dl, BYTE PTR tv162[ebp]
	mov	BYTE PTR _log2_width_c$8[ebp], dl

; 757  :     const vector2d_t pic_px = { state->tile->frame->width, state->tile->frame->height };

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pic_px$7[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _pic_px$7[ebp+4], eax

; 758  :     const vector2d_t luma_px = { x_px, y_px };

	mov	eax, DWORD PTR _x_px$[ebp]
	mov	DWORD PTR _luma_px$6[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	mov	DWORD PTR _luma_px$6[ebp+4], eax

; 759  : 
; 760  :     kvz_intra_references refs_u;
; 761  :     kvz_intra_build_reference(log2_width_c, COLOR_U, &luma_px, &pic_px, lcu, &refs_u);

	lea	eax, DWORD PTR _refs_u$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pic_px$7[ebp]
	push	edx
	lea	eax, DWORD PTR _luma_px$6[ebp]
	push	eax
	push	1
	movzx	ecx, BYTE PTR _log2_width_c$8[ebp]
	push	ecx
	call	_kvz_intra_build_reference
	add	esp, 24					; 00000018H

; 762  : 
; 763  :     kvz_intra_references refs_v;
; 764  :     kvz_intra_build_reference(log2_width_c, COLOR_V, &luma_px, &pic_px, lcu, &refs_v);

	lea	eax, DWORD PTR _refs_v$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pic_px$7[ebp]
	push	edx
	lea	eax, DWORD PTR _luma_px$6[ebp]
	push	eax
	push	2
	movzx	ecx, BYTE PTR _log2_width_c$8[ebp]
	push	ecx
	call	_kvz_intra_build_reference
	add	esp, 24					; 00000018H

; 765  : 
; 766  :     vector2d_t lcu_cpx = { lcu_px.x / 2, lcu_px.y / 2 };

	mov	eax, DWORD PTR _lcu_px$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _lcu_cpx$3[ebp], eax
	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _lcu_cpx$3[ebp+4], eax

; 767  :     kvz_pixel *ref_u = &lcu->ref.u[lcu_cpx.x + lcu_cpx.y * LCU_WIDTH_C];

	mov	eax, DWORD PTR _lcu_cpx$3[ebp+4]
	shl	eax, 5
	add	eax, DWORD PTR _lcu_cpx$3[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4488]
	mov	DWORD PTR _ref_u$2[ebp], edx

; 768  :     kvz_pixel *ref_v = &lcu->ref.v[lcu_cpx.x + lcu_cpx.y * LCU_WIDTH_C];

	mov	eax, DWORD PTR _lcu_cpx$3[ebp+4]
	shl	eax, 5
	add	eax, DWORD PTR _lcu_cpx$3[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5512]
	mov	DWORD PTR _ref_v$1[ebp], edx

; 769  : 
; 770  :     search_intra_chroma_rough(state, x_px, y_px, depth,

	lea	eax, DWORD PTR _costs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _modes$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _intra_mode$[ebp]
	push	edx
	lea	eax, DWORD PTR _refs_v$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _refs_u$5[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _ref_v$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_u$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_intra_chroma_rough
	add	esp, 48					; 00000030H
$LN4@kvz_search:

; 771  :                               ref_u, ref_v, LCU_WIDTH_C,
; 772  :                               &refs_u, &refs_v,
; 773  :                               intra_mode, modes, costs);
; 774  :   }
; 775  : 
; 776  :   int8_t intra_mode_chroma = intra_mode;

	mov	al, BYTE PTR _intra_mode$[ebp]
	mov	BYTE PTR _intra_mode_chroma$[ebp], al

; 777  :   if (num_modes > 1) {

	cmp	DWORD PTR _num_modes$[ebp], 1
	jle	SHORT $LN5@kvz_search

; 778  :     intra_mode_chroma = kvz_search_intra_chroma_rdo(state, x_px, y_px, depth, intra_mode, modes, num_modes, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _num_modes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modes$[ebp]
	push	edx
	movzx	eax, BYTE PTR _intra_mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_search_intra_chroma_rdo
	add	esp, 32					; 00000020H
	mov	BYTE PTR _intra_mode_chroma$[ebp], al
$LN5@kvz_search:

; 779  :   }
; 780  : 
; 781  :   return intra_mode_chroma;

	mov	al, BYTE PTR _intra_mode_chroma$[ebp]

; 782  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@kvz_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1164				; 0000048cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@kvz_search:
	DD	9
	DD	$LN18@kvz_search
$LN18@kvz_search:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@kvz_search
	DD	-88					; ffffffa8H
	DD	40					; 00000028H
	DD	$LN10@kvz_search
	DD	-104					; ffffff98H
	DD	5
	DD	$LN11@kvz_search
	DD	-120					; ffffff88H
	DD	5
	DD	$LN12@kvz_search
	DD	-160					; ffffff60H
	DD	8
	DD	$LN13@kvz_search
	DD	-176					; ffffff50H
	DD	8
	DD	$LN14@kvz_search
	DD	-448					; fffffe40H
	DD	261					; 00000105H
	DD	$LN15@kvz_search
	DD	-720					; fffffd30H
	DD	261					; 00000105H
	DD	$LN16@kvz_search
	DD	-736					; fffffd20H
	DD	8
	DD	$LN17@kvz_search
$LN17@kvz_search:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN16@kvz_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN15@kvz_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN14@kvz_search:
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN13@kvz_search:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
$LN12@kvz_search:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN11@kvz_search:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN10@kvz_search:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN9@kvz_search:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_search_cu_intra_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _kvz_chroma_mode_bits
_TEXT	SEGMENT
_mode_bits$ = -24					; size = 8
_ctx$ = -8						; size = 4
_state$ = 8						; size = 4
_chroma_mode$ = 12					; size = 1
_luma_mode$ = 16					; size = 1
_kvz_chroma_mode_bits PROC				; COMDAT

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 669  :   const cabac_ctx_t *ctx = &(state->cabac.ctx.chroma_pred_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx+102]
	mov	DWORD PTR _ctx$[ebp], eax

; 670  :   double mode_bits;
; 671  :   if (chroma_mode == luma_mode) {

	movsx	eax, BYTE PTR _chroma_mode$[ebp]
	movsx	ecx, BYTE PTR _luma_mode$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@kvz_chroma

; 672  :     mode_bits = CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movsd	QWORD PTR _mode_bits$[ebp], xmm0

; 673  :   } else {

	jmp	SHORT $LN3@kvz_chroma
$LN2@kvz_chroma:

; 674  :     mode_bits = 2.0 + CTX_ENTROPY_FBITS(ctx, 1);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _mode_bits$[ebp], xmm0
$LN3@kvz_chroma:

; 675  :   }
; 676  : 
; 677  :   return mode_bits;

	fld	QWORD PTR _mode_bits$[ebp]

; 678  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_chroma_mode_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search_intra.c
;	COMDAT _kvz_luma_mode_bits
_TEXT	SEGMENT
tv86 = -248						; size = 4
_ctx$ = -48						; size = 4
_i$1 = -36						; size = 4
_mode_in_preds$ = -21					; size = 1
_mode_bits$ = -12					; size = 8
_state$ = 8						; size = 4
_luma_mode$ = 12					; size = 1
_intra_preds$ = 16					; size = 4
_kvz_luma_mode_bits PROC				; COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __96B24618_search_intra@c
	call	@__CheckForDebuggerJustMyCode@4

; 645  :   double mode_bits;
; 646  : 
; 647  :   bool mode_in_preds = false;

	mov	BYTE PTR _mode_in_preds$[ebp], 0

; 648  :   for (int i = 0; i < 3; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_luma_m
$LN2@kvz_luma_m:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_luma_m:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN3@kvz_luma_m

; 649  :     if (luma_mode == intra_preds[i]) {

	movsx	eax, BYTE PTR _luma_mode$[ebp]
	mov	ecx, DWORD PTR _intra_preds$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN5@kvz_luma_m

; 650  :       mode_in_preds = true;

	mov	BYTE PTR _mode_in_preds$[ebp], 1
$LN5@kvz_luma_m:

; 651  :     }
; 652  :   }

	jmp	SHORT $LN2@kvz_luma_m
$LN3@kvz_luma_m:

; 653  : 
; 654  :   const cabac_ctx_t *ctx = &(state->cabac.ctx.intra_mode_model);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 101				; 00000065H
	mov	DWORD PTR _ctx$[ebp], eax

; 655  :   mode_bits = CTX_ENTROPY_FBITS(ctx, mode_in_preds);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _mode_in_preds$[ebp]
	xor	ecx, edx
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movsd	QWORD PTR _mode_bits$[ebp], xmm0

; 656  : 
; 657  :   if (mode_in_preds) {

	movzx	eax, BYTE PTR _mode_in_preds$[ebp]
	test	eax, eax
	je	SHORT $LN6@kvz_luma_m

; 658  :     mode_bits += ((luma_mode == intra_preds[0]) ? 1 : 2);

	movsx	eax, BYTE PTR _luma_mode$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _intra_preds$[ebp]
	movsx	edx, BYTE PTR [ecx+edx]
	cmp	eax, edx
	jne	SHORT $LN9@kvz_luma_m
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN10@kvz_luma_m
$LN9@kvz_luma_m:
	mov	DWORD PTR tv86[ebp], 2
$LN10@kvz_luma_m:
	cvtsi2sd xmm0, DWORD PTR tv86[ebp]
	addsd	xmm0, QWORD PTR _mode_bits$[ebp]
	movsd	QWORD PTR _mode_bits$[ebp], xmm0

; 659  :   } else {

	jmp	SHORT $LN7@kvz_luma_m
$LN6@kvz_luma_m:

; 660  :     mode_bits += 5;

	movsd	xmm0, QWORD PTR _mode_bits$[ebp]
	addsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR _mode_bits$[ebp], xmm0
$LN7@kvz_luma_m:

; 661  :   }
; 662  : 
; 663  :   return mode_bits;

	fld	QWORD PTR _mode_bits$[ebp]

; 664  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_luma_mode_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_clear
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_clear PROC						; COMDAT

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	mov	eax, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[eax*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _cbf$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, edx
	mov	edx, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [edx], cx

; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set_any
_TEXT	SEGMENT
tv79 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_cbf_is_set_any PROC					; COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 526  :   return cbf_is_set(cbf, depth, COLOR_Y) ||

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cbf$[ebp]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	1
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	movzx	eax, WORD PTR _cbf$[ebp]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv79[ebp], 1
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv79[ebp]

; 527  :          cbf_is_set(cbf, depth, COLOR_U) ||
; 528  :          cbf_is_set(cbf, depth, COLOR_V);
; 529  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
END
