; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__40DF0D2D_ctype@h DB 01H
__C5A167BB_basetsd@h DB 01H
__D24F4925_winnt@h DB 01H
__56CF70A3_processthreadsapi@h DB 01H
__4FC5969A_memoryapi@h DB 01H
__7D439CBC_winerror@h DB 01H
__41E0877F_winbase@h DB 01H
__08182E14_stralign@h DB 01H
__8FD04514_threads@h DB 01H
__9112994A_threadqueue@c DB 01H
msvcjmc	ENDS
PUBLIC	_kvz_threadqueue_init
PUBLIC	_kvz_threadqueue_job_create
PUBLIC	_kvz_threadqueue_submit
PUBLIC	_kvz_threadqueue_job_dep_add
PUBLIC	_kvz_threadqueue_copy_ref
PUBLIC	_kvz_threadqueue_free_job
PUBLIC	_kvz_threadqueue_waitfor
PUBLIC	_kvz_threadqueue_stop
PUBLIC	_kvz_threadqueue_free
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??threadqueue_push_job@@9@9	; `threadqueue_push_job'::`1'::__LINE__Var
PUBLIC	??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CG@PECLADJO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd?$AAs?$AA?5?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??threadqueue_pop_job@@9@9	; `threadqueue_pop_job'::`1'::__LINE__Var
PUBLIC	??_C@_1DG@NBKHGELB@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAf?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??threadqueue_worker@@9@9	; `threadqueue_worker'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@	; `string'
PUBLIC	??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_0BM@GFDKEBKL@?$CGthreadqueue?9?$DOjob_available@ ; `string'
PUBLIC	??_C@_0CJ@IEPOFDPD@pthread_cond_wait?$CI?$CFs?$DN?$CFp?0?5?$CFs?$DN?$CFp?$CJ@ ; `string'
PUBLIC	??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@		; `string'
PUBLIC	??_C@_1FE@IHCDHMCL@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ ; `string'
PUBLIC	??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@ ; `string'
PUBLIC	??_C@_1FI@KLIDNBIO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ ; `string'
PUBLIC	??_C@_0BH@NPKCIKON@?$CGthreadqueue?9?$DOjob_done@ ; `string'
PUBLIC	??_C@_0CE@JJHPJKJK@pthread_cond_signal?$CI?$CFs?$DN?$CFp?$CJ?5fail@ ; `string'
PUBLIC	??_C@_0O@CPKPLFPC@?$CGdepjob?9?$DOlock@		; `string'
PUBLIC	??_C@_1MA@CILPAJDO@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN@ ; `string'
PUBLIC	??_C@_1CK@JMNOOCPM@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_init@@9@9	; `kvz_threadqueue_init'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@HIMFGFND@pthread_mutex_init?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_0BL@OMHDKFFL@pthread_cond_init?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_0CI@FOHADHPI@Could?5not?5malloc?5threadqueue?9?$DOt@ ; `string'
PUBLIC	??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_0BG@LJHKKGBE@Could?5not?5alloc?5job?$CB?6@ ; `string'
PUBLIC	??_C@_0CB@OHFOAGLG@pthread_mutex_init?$CIjob?$CJ?5failed?$CB@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_submit@@9@9	; `kvz_threadqueue_submit'::`1'::__LINE__Var
PUBLIC	??_C@_1FG@PFPCKMKF@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9 ; `kvz_threadqueue_job_dep_add'::`1'::__LINE__Var
PUBLIC	??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@	; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_copy_ref@@9@9	; `kvz_threadqueue_copy_ref'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_free_job@@9@9	; `kvz_threadqueue_free_job'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9	; `kvz_threadqueue_waitfor'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??kvz_threadqueue_stop@@9@9	; `kvz_threadqueue_stop'::`1'::__LINE__Var
PUBLIC	??_C@_1EO@DJPPPMHK@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAt?$AAh@ ; `string'
PUBLIC	??_C@_0CH@CJMCPDDL@pthread_cond_broadcast?$CI?$CFs?$DN?$CFp?$CJ?5f@ ; `string'
PUBLIC	??_C@_0BG@DMJOJJP@pthread_join?5failed?$CB?6@	; `string'
PUBLIC	??_C@_0BP@DKJFEBPG@pthread_mutex_destroy?5failed?$CB?6@ ; `string'
PUBLIC	??_C@_0BO@DMELMKKN@pthread_cond_destroy?5failed?$CB?6@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__realloc:PROC
EXTRN	_pthread_cond_broadcast:PROC
EXTRN	_pthread_cond_destroy:PROC
EXTRN	_pthread_cond_init:PROC
EXTRN	_pthread_cond_signal:PROC
EXTRN	_pthread_cond_wait:PROC
EXTRN	_pthread_create:PROC
EXTRN	_pthread_join:PROC
EXTRN	_pthread_mutex_destroy:PROC
EXTRN	_pthread_mutex_init:PROC
EXTRN	_pthread_mutex_lock:PROC
EXTRN	_pthread_mutex_unlock:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@DMELMKKN@pthread_cond_destroy?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BO@DMELMKKN@pthread_cond_destroy?5failed?$CB?6@ DB 'pthread_cond_d'
	DB	'estroy failed!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DKJFEBPG@pthread_mutex_destroy?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BP@DKJFEBPG@pthread_mutex_destroy?5failed?$CB?6@ DB 'pthread_mutex'
	DB	'_destroy failed!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DMJOJJP@pthread_join?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BG@DMJOJJP@pthread_join?5failed?$CB?6@ DB 'pthread_join failed!', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CJMCPDDL@pthread_cond_broadcast?$CI?$CFs?$DN?$CFp?$CJ?5f@
CONST	SEGMENT
??_C@_0CH@CJMCPDDL@pthread_cond_broadcast?$CI?$CFs?$DN?$CFp?$CJ?5f@ DB 'p'
	DB	'thread_cond_broadcast(%s=%p) failed!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@DJPPPMHK@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAt?$AAh@
CONST	SEGMENT
??_C@_1EO@DJPPPMHK@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAt?$AAh@ DB 't'
	DB	00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'q', 00H
	DB	'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H, 't'
	DB	00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_', 00H
	DB	'r', 00H, 'u', 00H, 'n', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_stop@@9@9 DD 0245H	; `kvz_threadqueue_stop'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9 DD 0232H	; `kvz_threadqueue_waitfor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_free_job@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_free_job@@9@9 DD 0214H	; `kvz_threadqueue_free_job'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_copy_ref@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_copy_ref@@9@9 DD 0202H	; `kvz_threadqueue_copy_ref'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@
CONST	SEGMENT
??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@ DB '&dependency->lock', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9 DD 01dfH ; `kvz_threadqueue_job_dep_add'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FG@PFPCKMKF@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
CONST	SEGMENT
??_C@_1FG@PFPCKMKF@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ DB 'j'
	DB	00H, 'o', 00H, 'b', 00H, '-', 00H, '>', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H
	DB	'Q', 00H, 'U', 00H, 'E', 00H, 'U', 00H, 'E', 00H, '_', 00H, 'J'
	DB	00H, 'O', 00H, 'B', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'T', 00H, 'E', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'U', 00H, 'S'
	DB	00H, 'E', 00H, 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_submit@@9@9 DD 01bfH	; `kvz_threadqueue_submit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@OHFOAGLG@pthread_mutex_init?$CIjob?$CJ?5failed?$CB@
CONST	SEGMENT
??_C@_0CB@OHFOAGLG@pthread_mutex_init?$CIjob?$CJ?5failed?$CB@ DB 'pthread'
	DB	'_mutex_init(job) failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJHKKGBE@Could?5not?5alloc?5job?$CB?6@
CONST	SEGMENT
??_C@_0BG@LJHKKGBE@Could?5not?5alloc?5job?$CB?6@ DB 'Could not alloc job!'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@ DB 'pthread_create faile'
	DB	'd!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FOHADHPI@Could?5not?5malloc?5threadqueue?9?$DOt@
CONST	SEGMENT
??_C@_0CI@FOHADHPI@Could?5not?5malloc?5threadqueue?9?$DOt@ DB 'Could not '
	DB	'malloc threadqueue->threads!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OMHDKFFL@pthread_cond_init?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BL@OMHDKFFL@pthread_cond_init?5failed?$CB?6@ DB 'pthread_cond_init'
	DB	' failed!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HIMFGFND@pthread_mutex_init?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BM@HIMFGFND@pthread_mutex_init?5failed?$CB?6@ DB 'pthread_mutex_in'
	DB	'it failed!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_threadqueue_init@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_threadqueue_init@@9@9 DD 0166H	; `kvz_threadqueue_init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@JMNOOCPM@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd@
CONST	SEGMENT
??_C@_1CK@JMNOOCPM@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd@ DB 'd'
	DB	00H, 'e', 00H, 'p', 00H, 'j', 00H, 'o', 00H, 'b', 00H, '-', 00H
	DB	'>', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, 's', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@CILPAJDO@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1MA@CILPAJDO@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN@ DB 'd'
	DB	00H, 'e', 00H, 'p', 00H, 'j', 00H, 'o', 00H, 'b', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'H', 00H, 'R', 00H
	DB	'E', 00H, 'A', 00H, 'D', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'U'
	DB	00H, 'E', 00H, '_', 00H, 'J', 00H, 'O', 00H, 'B', 00H, '_', 00H
	DB	'S', 00H, 'T', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'W'
	DB	00H, 'A', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'p'
	DB	00H, 'j', 00H, 'o', 00H, 'b', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'A', 00H
	DB	'D', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'U', 00H, 'E', 00H, '_'
	DB	00H, 'J', 00H, 'O', 00H, 'B', 00H, '_', 00H, 'S', 00H, 'T', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'U'
	DB	00H, 'S', 00H, 'E', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CPKPLFPC@?$CGdepjob?9?$DOlock@
CONST	SEGMENT
??_C@_0O@CPKPLFPC@?$CGdepjob?9?$DOlock@ DB '&depjob->lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JJHPJKJK@pthread_cond_signal?$CI?$CFs?$DN?$CFp?$CJ?5fail@
CONST	SEGMENT
??_C@_0CE@JJHPJKJK@pthread_cond_signal?$CI?$CFs?$DN?$CFp?$CJ?5fail@ DB 'p'
	DB	'thread_cond_signal(%s=%p) failed!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NPKCIKON@?$CGthreadqueue?9?$DOjob_done@
CONST	SEGMENT
??_C@_0BH@NPKCIKON@?$CGthreadqueue?9?$DOjob_done@ DB '&threadqueue->job_d'
	DB	'one', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@KLIDNBIO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
CONST	SEGMENT
??_C@_1FI@KLIDNBIO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ DB 'j'
	DB	00H, 'o', 00H, 'b', 00H, '-', 00H, '>', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H
	DB	'Q', 00H, 'U', 00H, 'E', 00H, 'U', 00H, 'E', 00H, '_', 00H, 'J'
	DB	00H, 'O', 00H, 'B', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'T', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'U', 00H, 'N', 00H, 'N'
	DB	00H, 'I', 00H, 'N', 00H, 'G', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
CONST	SEGMENT
??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@ DB 'pthread'
	DB	'_mutex_unlock(%s) failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@IHCDHMCL@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
CONST	SEGMENT
??_C@_1FE@IHCDHMCL@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@ DB 'j'
	DB	00H, 'o', 00H, 'b', 00H, '-', 00H, '>', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H
	DB	'Q', 00H, 'U', 00H, 'E', 00H, 'U', 00H, 'E', 00H, '_', 00H, 'J'
	DB	00H, 'O', 00H, 'B', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'T', 00H, 'E', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D'
	DB	00H, 'Y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
CONST	SEGMENT
??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@ DB '&job->lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IEPOFDPD@pthread_cond_wait?$CI?$CFs?$DN?$CFp?0?5?$CFs?$DN?$CFp?$CJ@
CONST	SEGMENT
??_C@_0CJ@IEPOFDPD@pthread_cond_wait?$CI?$CFs?$DN?$CFp?0?5?$CFs?$DN?$CFp?$CJ@ DB 'p'
	DB	'thread_cond_wait(%s=%p, %s=%p) failed!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GFDKEBKL@?$CGthreadqueue?9?$DOjob_available@
CONST	SEGMENT
??_C@_0BM@GFDKEBKL@?$CGthreadqueue?9?$DOjob_available@ DB '&threadqueue->'
	DB	'job_available', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
CONST	SEGMENT
??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@ DB 'pth'
	DB	'read_mutex_lock(%s) failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
CONST	SEGMENT
??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@ DB '&threadqueue->lock', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??threadqueue_worker@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??threadqueue_worker@@9@9 DD 0114H	; `threadqueue_worker'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@NBKHGELB@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAf?$AAi@
CONST	SEGMENT
??_C@_1DG@NBKHGELB@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAf?$AAi@ DB 't'
	DB	00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'q', 00H
	DB	'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '-', 00H, '>', 00H, 'f'
	DB	00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??threadqueue_pop_job@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??threadqueue_pop_job@@9@9 DD 0101H	; `threadqueue_pop_job'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CG@PECLADJO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd?$AAs?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1CG@PECLADJO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd?$AAs?$AA?5?$AA?$DN@ DB 'j'
	DB	00H, 'o', 00H, 'b', 00H, '-', 00H, '>', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 's', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 't', 00H, 'h', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'u', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??threadqueue_push_job@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??threadqueue_push_job@@9@9 DD 0ebH	; `threadqueue_push_job'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _threadqueue_worker
_TEXT	SEGMENT
_i$1 = -68						; size = 4
_depjob$2 = -56						; size = 4
_i$3 = -44						; size = 4
_num_new_jobs$4 = -32					; size = 4
_job$5 = -20						; size = 4
_threadqueue$ = -8					; size = 4
_threadqueue_opaque$ = 8				; size = 4
_threadqueue_worker PROC				; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  :   threadqueue_queue_t * const threadqueue = (threadqueue_queue_t *) threadqueue_opaque;

	mov	eax, DWORD PTR _threadqueue_opaque$[ebp]
	mov	DWORD PTR _threadqueue$[ebp], eax

; 278  : 
; 279  :   PTHREAD_LOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@threadqueu
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN28@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN5@threadqueu:

; 280  : 
; 281  :   for (;;) {
; 282  :     while (!threadqueue->stop && threadqueue->first == NULL) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	$LN6@threadqueu
	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN6@threadqueu

; 283  :       // Wait until there is something to do in the queue.
; 284  :       PTHREAD_COND_WAIT(&threadqueue->job_available, &threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	add	ecx, 4
	push	ecx
	call	_pthread_cond_wait
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@threadqueu
	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_0BM@GFDKEBKL@?$CGthreadqueue?9?$DOjob_available@
	push	OFFSET ??_C@_0CJ@IEPOFDPD@pthread_cond_wait?$CI?$CFs?$DN?$CFp?0?5?$CFs?$DN?$CFp?$CJ@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H
	xor	eax, eax
	jne	SHORT $LN29@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 8
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN29@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN14@threadqueu:

; 285  :     }

	jmp	$LN5@threadqueu
$LN6@threadqueu:

; 286  : 
; 287  :     if (threadqueue->stop) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN15@threadqueu

; 288  :       break;

	jmp	$LN3@threadqueu
$LN15@threadqueu:

; 289  :     }
; 290  : 
; 291  :     // Get a job and remove it from the queue.
; 292  :     threadqueue_job_t *job = threadqueue_pop_job(threadqueue);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_threadqueue_pop_job
	add	esp, 4
	mov	DWORD PTR _job$5[ebp], eax

; 293  : 
; 294  :     PTHREAD_LOCK(&job->lock);

	mov	eax, DWORD PTR _job$5[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN16@threadqueu
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN30@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 18					; 00000012H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN16@threadqueu:

; 295  :     assert(job->state == THREADQUEUE_JOB_STATE_READY);

	mov	eax, DWORD PTR _job$5[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN31@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 19					; 00000013H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FE@IHCDHMCL@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@threadqueu:

; 296  :     job->state = THREADQUEUE_JOB_STATE_RUNNING;

	mov	eax, DWORD PTR _job$5[ebp]
	mov	DWORD PTR [eax+4], 3

; 297  :     PTHREAD_UNLOCK(&job->lock);

	mov	eax, DWORD PTR _job$5[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@threadqueu
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN32@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 21					; 00000015H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN17@threadqueu:

; 298  :     PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@threadqueu
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN33@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN18@threadqueu:

; 299  : 
; 300  :     job->fptr(job->arg);

	mov	esi, esp
	mov	eax, DWORD PTR _job$5[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _job$5[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 301  : 
; 302  :     PTHREAD_LOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@threadqueu
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN34@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 26					; 0000001aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN19@threadqueu:

; 303  :     PTHREAD_LOCK(&job->lock);

	mov	eax, DWORD PTR _job$5[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN20@threadqueu
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN35@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 27					; 0000001bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN20@threadqueu:

; 304  :     assert(job->state == THREADQUEUE_JOB_STATE_RUNNING);

	mov	eax, DWORD PTR _job$5[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $LN36@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 28					; 0000001cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FI@KLIDNBIO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@threadqueu:

; 305  :     job->state = THREADQUEUE_JOB_STATE_DONE;

	mov	eax, DWORD PTR _job$5[ebp]
	mov	DWORD PTR [eax+4], 4

; 306  : 
; 307  :     PTHREAD_COND_SIGNAL(&threadqueue->job_done);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 8
	push	eax
	call	_pthread_cond_signal
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@threadqueu
	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0BH@NPKCIKON@?$CGthreadqueue?9?$DOjob_done@
	push	OFFSET ??_C@_0CE@JJHPJKJK@pthread_cond_signal?$CI?$CFs?$DN?$CFp?$CJ?5fail@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
	xor	eax, eax
	jne	SHORT $LN37@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 31					; 0000001fH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN37@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN21@threadqueu:

; 308  : 
; 309  :     // Go through all the jobs that depend on this one, decreasing their
; 310  :     // ndepends. Count how many jobs can now start executing so we know how
; 311  :     // many threads to wake up.
; 312  :     int num_new_jobs = 0;

	mov	DWORD PTR _num_new_jobs$4[ebp], 0

; 313  :     for (int i = 0; i < job->rdepends_count; ++i) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN9@threadqueu
$LN7@threadqueu:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN9@threadqueu:
	mov	eax, DWORD PTR _job$5[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN8@threadqueu

; 314  :       threadqueue_job_t * const depjob = job->rdepends[i];

	mov	eax, DWORD PTR _job$5[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _depjob$2[ebp], eax

; 315  :       // The dependency (job) is locked before the job depending on it.
; 316  :       // This must be the same order as in kvz_threadqueue_job_dep_add.
; 317  :       PTHREAD_LOCK(&depjob->lock);

	mov	eax, DWORD PTR _depjob$2[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN22@threadqueu
	push	OFFSET ??_C@_0O@CPKPLFPC@?$CGdepjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN38@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 41					; 00000029H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN22@threadqueu:

; 318  : 
; 319  :       assert(depjob->state == THREADQUEUE_JOB_STATE_WAITING ||

	mov	eax, DWORD PTR _depjob$2[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN39@threadqueu
	mov	ecx, DWORD PTR _depjob$2[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN39@threadqueu
	mov	edx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	edx, 44					; 0000002cH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1MA@CILPAJDO@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@threadqueu:

; 320  :              depjob->state == THREADQUEUE_JOB_STATE_PAUSED);
; 321  :       assert(depjob->ndepends > 0);

	mov	eax, DWORD PTR _depjob$2[ebp]
	cmp	DWORD PTR [eax+8], 0
	jg	SHORT $LN40@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 45					; 0000002dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CK@JMNOOCPM@?$AAd?$AAe?$AAp?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@threadqueu:

; 322  :       depjob->ndepends--;

	mov	eax, DWORD PTR _depjob$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _depjob$2[ebp]
	mov	DWORD PTR [edx+8], ecx

; 323  : 
; 324  :       if (depjob->ndepends == 0 && depjob->state == THREADQUEUE_JOB_STATE_WAITING) {

	mov	eax, DWORD PTR _depjob$2[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN23@threadqueu
	mov	eax, DWORD PTR _depjob$2[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN23@threadqueu

; 325  :         // Move the job to ready jobs.
; 326  :         threadqueue_push_job(threadqueue, kvz_threadqueue_copy_ref(depjob));

	mov	eax, DWORD PTR _depjob$2[ebp]
	push	eax
	call	_kvz_threadqueue_copy_ref
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	push	ecx
	call	_threadqueue_push_job
	add	esp, 8

; 327  :         num_new_jobs++;

	mov	eax, DWORD PTR _num_new_jobs$4[ebp]
	add	eax, 1
	mov	DWORD PTR _num_new_jobs$4[ebp], eax
$LN23@threadqueu:

; 328  :       }
; 329  : 
; 330  :       // Clear this reference to the job.
; 331  :       PTHREAD_UNLOCK(&depjob->lock);

	mov	eax, DWORD PTR _depjob$2[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN24@threadqueu
	push	OFFSET ??_C@_0O@CPKPLFPC@?$CGdepjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN41@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 55					; 00000037H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN41@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN24@threadqueu:

; 332  :       kvz_threadqueue_free_job(&job->rdepends[i]);

	mov	eax, DWORD PTR _job$5[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 333  :     }

	jmp	$LN7@threadqueu
$LN8@threadqueu:

; 334  :     job->rdepends_count = 0;

	mov	eax, DWORD PTR _job$5[ebp]
	mov	DWORD PTR [eax+16], 0

; 335  : 
; 336  :     PTHREAD_UNLOCK(&job->lock);

	mov	eax, DWORD PTR _job$5[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN25@threadqueu
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN42@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 60					; 0000003cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN42@threadqueu:
	xor	eax, eax
	jmp	$LN1@threadqueu
$LN25@threadqueu:

; 337  :     kvz_threadqueue_free_job(&job);

	lea	eax, DWORD PTR _job$5[ebp]
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 338  : 
; 339  :     // The current thread will process one of the new jobs so we wake up
; 340  :     // one threads less than the the number of new jobs.
; 341  :     for (int i = 0; i < num_new_jobs - 1; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN12@threadqueu
$LN10@threadqueu:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN12@threadqueu:
	mov	eax, DWORD PTR _num_new_jobs$4[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN11@threadqueu

; 342  :       pthread_cond_signal(&threadqueue->job_available);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	call	_pthread_cond_signal
	add	esp, 4

; 343  :     }

	jmp	SHORT $LN10@threadqueu
$LN11@threadqueu:

; 344  :   }

	jmp	$LN5@threadqueu
$LN3@threadqueu:

; 345  : 
; 346  :   threadqueue->thread_running_count--;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	edx, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 347  :   PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN26@threadqueu
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN43@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_worker@@9@9
	add	ecx, 71					; 00000047H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@threadqueu:
	xor	eax, eax
	jmp	SHORT $LN1@threadqueu
$LN26@threadqueu:

; 348  :   return NULL;

	xor	eax, eax
$LN1@threadqueu:

; 349  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@threadqueu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN46@threadqueu:
	DD	1
	DD	$LN45@threadqueu
$LN45@threadqueu:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN44@threadqueu
$LN44@threadqueu:
	DB	106					; 0000006aH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	0
_threadqueue_worker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _threadqueue_pop_job
_TEXT	SEGMENT
_job$ = -8						; size = 4
_threadqueue$ = 8					; size = 4
_threadqueue_pop_job PROC				; COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 258  :   assert(threadqueue->first != NULL);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_pop_job@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DG@NBKHGELB@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAf?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@threadqueu:

; 259  : 
; 260  :   threadqueue_job_t *job = threadqueue->first;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _job$[ebp], ecx

; 261  :   threadqueue->first = job->next;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR _job$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 262  :   job->next = NULL;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+36], 0

; 263  : 
; 264  :   if (threadqueue->first == NULL) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@threadqueu

; 265  :     threadqueue->last = NULL;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN2@threadqueu:

; 266  :   }
; 267  : 
; 268  :   return job;

	mov	eax, DWORD PTR _job$[ebp]

; 269  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_threadqueue_pop_job ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _threadqueue_push_job
_TEXT	SEGMENT
_threadqueue$ = 8					; size = 4
_job$ = 12						; size = 4
_threadqueue_push_job PROC				; COMDAT

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 236  :   assert(job->ndepends == 0);

	mov	eax, DWORD PTR _job$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@threadqueu
	mov	ecx, DWORD PTR ?__LINE__Var@?0??threadqueue_push_job@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CG@PECLADJO@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAn?$AAd?$AAe?$AAp?$AAe?$AAn?$AAd?$AAs?$AA?5?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@threadqueu:

; 237  :   job->state = THREADQUEUE_JOB_STATE_READY;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+4], 2

; 238  : 
; 239  :   if (threadqueue->first == NULL) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@threadqueu

; 240  :     threadqueue->first = job;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 241  :   } else {

	jmp	SHORT $LN3@threadqueu
$LN2@threadqueu:

; 242  :     threadqueue->last->next = job;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _job$[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN3@threadqueu:

; 243  :   }
; 244  : 
; 245  :   threadqueue->last = job;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 246  :   job->next = NULL;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+36], 0

; 247  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_threadqueue_push_job ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_free
_TEXT	SEGMENT
_next$1 = -8						; size = 4
_threadqueue$ = 8					; size = 4
_kvz_threadqueue_free PROC				; COMDAT

; 614  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 615  :   if (threadqueue == NULL) return;

	cmp	DWORD PTR _threadqueue$[ebp], 0
	jne	SHORT $LN4@kvz_thread
	jmp	$LN1@kvz_thread
$LN4@kvz_thread:

; 616  : 
; 617  :   kvz_threadqueue_stop(threadqueue);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_kvz_threadqueue_stop
	add	esp, 4
$LN2@kvz_thread:

; 618  : 
; 619  :   // Free all jobs.
; 620  :   while (threadqueue->first) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@kvz_thread

; 621  :     threadqueue_job_t *next = threadqueue->first->next;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _next$1[ebp], edx

; 622  :     kvz_threadqueue_free_job(&threadqueue->first);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 623  :     threadqueue->first = next;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR _next$1[ebp]
	mov	DWORD PTR [eax+28], ecx

; 624  :   }

	jmp	SHORT $LN2@kvz_thread
$LN3@kvz_thread:

; 625  :   threadqueue->last = NULL;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+32], 0

; 626  : 
; 627  :   FREE_POINTER(threadqueue->threads);

	mov	esi, esp
	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+12], 0

; 628  :   threadqueue->thread_count = 0;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+16], 0

; 629  : 
; 630  :   if (pthread_mutex_destroy(&threadqueue->lock) != 0) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_destroy
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@kvz_thread

; 631  :     fprintf(stderr, "pthread_mutex_destroy failed!\n");

	push	OFFSET ??_C@_0BP@DKJFEBPG@pthread_mutex_destroy?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN5@kvz_thread:

; 632  :   }
; 633  : 
; 634  :   if (pthread_cond_destroy(&threadqueue->job_available) != 0) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	call	_pthread_cond_destroy
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@kvz_thread

; 635  :     fprintf(stderr, "pthread_cond_destroy failed!\n");

	push	OFFSET ??_C@_0BO@DMELMKKN@pthread_cond_destroy?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN6@kvz_thread:

; 636  :   }
; 637  : 
; 638  :   if (pthread_cond_destroy(&threadqueue->job_done) != 0) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 8
	push	eax
	call	_pthread_cond_destroy
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@kvz_thread

; 639  :     fprintf(stderr, "pthread_cond_destroy failed!\n");

	push	OFFSET ??_C@_0BO@DMELMKKN@pthread_cond_destroy?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN7@kvz_thread:

; 640  :   }
; 641  : 
; 642  :   FREE_POINTER(threadqueue);

	mov	esi, esp
	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _threadqueue$[ebp], 0
$LN1@kvz_thread:

; 643  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_stop
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_threadqueue$ = 8					; size = 4
_kvz_threadqueue_stop PROC				; COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 582  :   PTHREAD_LOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN12@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN5@kvz_thread:

; 583  : 
; 584  :   if (threadqueue->stop) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	$LN6@kvz_thread

; 585  :     // The threadqueue should have stopped already.
; 586  :     assert(threadqueue->thread_running_count == 0);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN13@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
	add	ecx, 5
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EO@DJPPPMHK@?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?9?$AA?$DO?$AAt?$AAh@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@kvz_thread:

; 587  :     PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN14@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
	add	ecx, 6
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN7@kvz_thread:

; 588  :     return 1;

	mov	eax, 1
	jmp	$LN1@kvz_thread
$LN6@kvz_thread:

; 589  :   }
; 590  : 
; 591  :   // Tell all threads to stop.
; 592  :   threadqueue->stop = true;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	BYTE PTR [eax+24], 1

; 593  :   PTHREAD_COND_BROADCAST(&threadqueue->job_available);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	call	_pthread_cond_broadcast
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@kvz_thread
	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0BM@GFDKEBKL@?$CGthreadqueue?9?$DOjob_available@
	push	OFFSET ??_C@_0CH@CJMCPDDL@pthread_cond_broadcast?$CI?$CFs?$DN?$CFp?$CJ?5f@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
	xor	eax, eax
	jne	SHORT $LN15@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN8@kvz_thread:

; 594  :   PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN16@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_stop@@9@9
	add	ecx, 13					; 0000000dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN9@kvz_thread:

; 595  : 
; 596  :   // Wait for them to stop.
; 597  :   for (int i = 0; i < threadqueue->thread_count; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_thread
$LN2@kvz_thread:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_thread:
	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN3@kvz_thread

; 598  :     if (pthread_join(threadqueue->threads[i], NULL) != 0) {

	push	0
	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_pthread_join
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@kvz_thread

; 599  :       fprintf(stderr, "pthread_join failed!\n");

	push	OFFSET ??_C@_0BG@DMJOJJP@pthread_join?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 600  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN10@kvz_thread:

; 601  :     }
; 602  :   }

	jmp	SHORT $LN2@kvz_thread
$LN3@kvz_thread:

; 603  : 
; 604  :   return 1;

	mov	eax, 1
$LN1@kvz_thread:

; 605  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_stop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_waitfor
_TEXT	SEGMENT
_threadqueue$ = 8					; size = 4
_job$ = 12						; size = 4
_kvz_threadqueue_waitfor PROC				; COMDAT

; 562  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 563  :   PTHREAD_LOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN8@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN2@kvz_thread:

; 564  :   while (job->state != THREADQUEUE_JOB_STATE_DONE) {

	mov	eax, DWORD PTR _job$[ebp]
	cmp	DWORD PTR [eax+4], 4
	je	$LN3@kvz_thread

; 565  :     PTHREAD_COND_WAIT(&threadqueue->job_done, &job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	add	ecx, 8
	push	ecx
	call	_pthread_cond_wait
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@kvz_thread
	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_0BH@NPKCIKON@?$CGthreadqueue?9?$DOjob_done@
	push	OFFSET ??_C@_0CJ@IEPOFDPD@pthread_cond_wait?$CI?$CFs?$DN?$CFp?0?5?$CFs?$DN?$CFp?$CJ@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 24					; 00000018H
	xor	eax, eax
	jne	SHORT $LN9@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN5@kvz_thread:

; 566  :   }

	jmp	$LN2@kvz_thread
$LN3@kvz_thread:

; 567  :   PTHREAD_UNLOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN10@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_waitfor@@9@9
	add	ecx, 5
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN6@kvz_thread:

; 568  : 
; 569  :   return 1;

	mov	eax, 1
$LN1@kvz_thread:

; 570  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_waitfor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_free_job
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_new_refcount$ = -20					; size = 4
_job$ = -8						; size = 4
_job_ptr$ = 8						; size = 4
_kvz_threadqueue_free_job PROC				; COMDAT

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 533  :   threadqueue_job_t *job = *job_ptr;

	mov	eax, DWORD PTR _job_ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _job$[ebp], ecx

; 534  :   if (job == NULL) return;

	cmp	DWORD PTR _job$[ebp], 0
	jne	SHORT $LN5@kvz_thread
	jmp	$LN1@kvz_thread
$LN5@kvz_thread:

; 535  :   *job_ptr = NULL;

	mov	eax, DWORD PTR _job_ptr$[ebp]
	mov	DWORD PTR [eax], 0

; 536  : 
; 537  :   int new_refcount = KVZ_ATOMIC_DEC(&job->refcount);

	mov	eax, DWORD PTR _job$[ebp]
	add	eax, 24					; 00000018H
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 538  :   if (new_refcount > 0) {

	cmp	DWORD PTR _new_refcount$[ebp], 0
	jle	SHORT $LN6@kvz_thread

; 539  :     // There are still references so we don't free the data yet.
; 540  :     return;

	jmp	$LN1@kvz_thread
$LN6@kvz_thread:

; 541  :   }
; 542  : 
; 543  :   assert(new_refcount == 0);

	cmp	DWORD PTR _new_refcount$[ebp], 0
	je	SHORT $LN8@kvz_thread
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_free_job@@9@9
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_thread:

; 544  : 
; 545  :   for (int i = 0; i < job->rdepends_count; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_thread
$LN2@kvz_thread:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_thread:
	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	SHORT $LN3@kvz_thread

; 546  :     kvz_threadqueue_free_job(&job->rdepends[i]);

	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 547  :   }

	jmp	SHORT $LN2@kvz_thread
$LN3@kvz_thread:

; 548  :   job->rdepends_count = 0;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+16], 0

; 549  : 
; 550  :   FREE_POINTER(job->rdepends);

	mov	esi, esp
	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+12], 0

; 551  :   pthread_mutex_destroy(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_destroy
	add	esp, 4

; 552  :   FREE_POINTER(job);

	mov	esi, esp
	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _job$[ebp], 0
$LN1@kvz_thread:

; 553  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_free_job ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_copy_ref
_TEXT	SEGMENT
_new_refcount$ = -8					; size = 4
_job$ = 8						; size = 4
_kvz_threadqueue_copy_ref PROC				; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 515  :   int32_t new_refcount = KVZ_ATOMIC_INC(&job->refcount);

	mov	eax, DWORD PTR _job$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx
	inc	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 516  :   // The caller should have had another reference and we added one
; 517  :   // reference so refcount should be at least 2.
; 518  :   assert(new_refcount >= 2);

	cmp	DWORD PTR _new_refcount$[ebp], 2
	jge	SHORT $LN3@kvz_thread
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_copy_ref@@9@9
	add	eax, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_thread:

; 519  :   return job;

	mov	eax, DWORD PTR _job$[ebp]

; 520  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_copy_ref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_job_dep_add
_TEXT	SEGMENT
_bytes$1 = -8						; size = 4
_job$ = 8						; size = 4
_dependency$ = 12					; size = 4
_kvz_threadqueue_job_dep_add PROC			; COMDAT

; 479  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 480  :   // Lock the dependency first and then the job depending on it.
; 481  :   // This must be the same order as in threadqueue_worker.
; 482  :   PTHREAD_LOCK(&dependency->lock);

	mov	eax, DWORD PTR _dependency$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@kvz_thread
	push	OFFSET ??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN10@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN2@kvz_thread:

; 483  : 
; 484  :   if (dependency->state == THREADQUEUE_JOB_STATE_DONE) {

	mov	eax, DWORD PTR _dependency$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN3@kvz_thread

; 485  :     // The dependency has been completed already so there is nothing to do.
; 486  :     PTHREAD_UNLOCK(&dependency->lock);

	mov	eax, DWORD PTR _dependency$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@kvz_thread
	push	OFFSET ??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN11@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
	add	ecx, 7
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN4@kvz_thread:

; 487  :     return 1;

	mov	eax, 1
	jmp	$LN1@kvz_thread
$LN3@kvz_thread:

; 488  :   }
; 489  : 
; 490  :   PTHREAD_LOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN12@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
	add	ecx, 11					; 0000000bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN5@kvz_thread:

; 491  :   job->ndepends++;

	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _job$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 492  :   PTHREAD_UNLOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN13@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
	add	ecx, 13					; 0000000dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN6@kvz_thread:

; 493  : 
; 494  :   // Add the reverse dependency
; 495  :   if (dependency->rdepends_count >= dependency->rdepends_size) {

	mov	eax, DWORD PTR _dependency$[ebp]
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN7@kvz_thread

; 496  :     dependency->rdepends_size += THREADQUEUE_LIST_REALLOC_SIZE;

	mov	eax, DWORD PTR _dependency$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _dependency$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 497  :     size_t bytes = dependency->rdepends_size * sizeof(threadqueue_job_t*);

	mov	eax, DWORD PTR _dependency$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shl	ecx, 2
	mov	DWORD PTR _bytes$1[ebp], ecx

; 498  :     dependency->rdepends = realloc(dependency->rdepends, bytes);

	mov	esi, esp
	mov	eax, DWORD PTR _bytes$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN7@kvz_thread:

; 499  :   }
; 500  :   dependency->rdepends[dependency->rdepends_count++] = kvz_threadqueue_copy_ref(job);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_kvz_threadqueue_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR _dependency$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _dependency$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 501  : 
; 502  :   PTHREAD_UNLOCK(&dependency->lock);

	mov	eax, DWORD PTR _dependency$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@kvz_thread
	push	OFFSET ??_C@_0BC@CBBBDMI@?$CGdependency?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN14@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_job_dep_add@@9@9
	add	ecx, 23					; 00000017H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN8@kvz_thread:

; 503  : 
; 504  :   return 1;

	mov	eax, 1
$LN1@kvz_thread:

; 505  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_job_dep_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_submit
_TEXT	SEGMENT
_threadqueue$ = 8					; size = 4
_job$ = 12						; size = 4
_kvz_threadqueue_submit PROC				; COMDAT

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 448  :   PTHREAD_LOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN11@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN2@kvz_thread:

; 449  :   PTHREAD_LOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN12@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
	add	ecx, 2
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN3@kvz_thread:

; 450  :   assert(job->state == THREADQUEUE_JOB_STATE_PAUSED);

	mov	eax, DWORD PTR _job$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN13@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FG@PFPCKMKF@?$AAj?$AAo?$AAb?$AA?9?$AA?$DO?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAT@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@kvz_thread:

; 451  : 
; 452  :   if (threadqueue->thread_count == 0) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@kvz_thread

; 453  :     // When not using threads, run the job immediately.
; 454  :     job->fptr(job->arg);

	mov	esi, esp
	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _job$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 455  :     job->state = THREADQUEUE_JOB_STATE_DONE;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+4], 4
	jmp	SHORT $LN5@kvz_thread
$LN4@kvz_thread:

; 456  :   } else if (job->ndepends == 0) {

	mov	eax, DWORD PTR _job$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN6@kvz_thread

; 457  :     threadqueue_push_job(threadqueue, kvz_threadqueue_copy_ref(job));

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_kvz_threadqueue_copy_ref
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	push	ecx
	call	_threadqueue_push_job
	add	esp, 8

; 458  :     pthread_cond_signal(&threadqueue->job_available);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	call	_pthread_cond_signal
	add	esp, 4

; 459  :   } else {

	jmp	SHORT $LN5@kvz_thread
$LN6@kvz_thread:

; 460  :     job->state = THREADQUEUE_JOB_STATE_WAITING;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+4], 1
$LN5@kvz_thread:

; 461  :   }
; 462  :   PTHREAD_UNLOCK(&job->lock);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@kvz_thread
	push	OFFSET ??_C@_0L@EOIFPCAA@?$CGjob?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN14@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
	add	ecx, 15					; 0000000fH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN8@kvz_thread:

; 463  :   PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN15@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_submit@@9@9
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN9@kvz_thread:

; 464  : 
; 465  :   return 1;

	mov	eax, 1
$LN1@kvz_thread:

; 466  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_submit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_job_create
_TEXT	SEGMENT
_job$ = -8						; size = 4
_fptr$ = 8						; size = 4
_arg$ = 12						; size = 4
_kvz_threadqueue_job_create PROC			; COMDAT

; 421  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 422  :   threadqueue_job_t *job = MALLOC(threadqueue_job_t, 1);

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _job$[ebp], eax

; 423  :   if (!job) {

	cmp	DWORD PTR _job$[ebp], 0
	jne	SHORT $LN2@kvz_thread

; 424  :     fprintf(stderr, "Could not alloc job!\n");

	push	OFFSET ??_C@_0BG@LJHKKGBE@Could?5not?5alloc?5job?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 425  :     return NULL;

	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN2@kvz_thread:

; 426  :   }
; 427  : 
; 428  :   if (pthread_mutex_init(&job->lock, NULL) != 0) {

	push	0
	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_pthread_mutex_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@kvz_thread

; 429  :     fprintf(stderr, "pthread_mutex_init(job) failed!\n");

	push	OFFSET ??_C@_0CB@OHFOAGLG@pthread_mutex_init?$CIjob?$CJ?5failed?$CB@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 430  :     return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN3@kvz_thread:

; 431  :   }
; 432  : 
; 433  :   job->state = THREADQUEUE_JOB_STATE_PAUSED;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+4], 0

; 434  :   job->ndepends       = 0;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+8], 0

; 435  :   job->rdepends       = NULL;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+12], 0

; 436  :   job->rdepends_count = 0;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+16], 0

; 437  :   job->rdepends_size  = 0;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+20], 0

; 438  :   job->refcount       = 1;

	mov	eax, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+24], 1

; 439  :   job->fptr           = fptr;

	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR _fptr$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 440  :   job->arg            = arg;

	mov	eax, DWORD PTR _job$[ebp]
	mov	ecx, DWORD PTR _arg$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 441  : 
; 442  :   return job;

	mov	eax, DWORD PTR _job$[ebp]
$LN1@kvz_thread:

; 443  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_job_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\threadqueue.c
;	COMDAT _kvz_threadqueue_init
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_threadqueue$ = -8					; size = 4
_thread_count$ = 8					; size = 4
_kvz_threadqueue_init PROC				; COMDAT

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9112994A_threadqueue@c
	call	@__CheckForDebuggerJustMyCode@4

; 359  :   threadqueue_queue_t *threadqueue = MALLOC(threadqueue_queue_t, 1);

	mov	esi, esp
	push	36					; 00000024H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _threadqueue$[ebp], eax

; 360  :   if (!threadqueue) {

	cmp	DWORD PTR _threadqueue$[ebp], 0
	jne	SHORT $LN5@kvz_thread

; 361  :     goto failed;

	jmp	$failed$16
$LN5@kvz_thread:

; 362  :   }
; 363  : 
; 364  :   if (pthread_mutex_init(&threadqueue->lock, NULL) != 0) {

	push	0
	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@kvz_thread

; 365  :     fprintf(stderr, "pthread_mutex_init failed!\n");

	push	OFFSET ??_C@_0BM@HIMFGFND@pthread_mutex_init?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 366  :     goto failed;

	jmp	$failed$16
$LN6@kvz_thread:

; 367  :   }
; 368  : 
; 369  :   if (pthread_cond_init(&threadqueue->job_available, NULL) != 0) {

	push	0
	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 4
	push	eax
	call	_pthread_cond_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@kvz_thread

; 370  :     fprintf(stderr, "pthread_cond_init failed!\n");

	push	OFFSET ??_C@_0BL@OMHDKFFL@pthread_cond_init?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 371  :     goto failed;

	jmp	$failed$16
$LN7@kvz_thread:

; 372  :   }
; 373  : 
; 374  :   if (pthread_cond_init(&threadqueue->job_done, NULL) != 0) {

	push	0
	mov	eax, DWORD PTR _threadqueue$[ebp]
	add	eax, 8
	push	eax
	call	_pthread_cond_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@kvz_thread

; 375  :     fprintf(stderr, "pthread_cond_init failed!\n");

	push	OFFSET ??_C@_0BL@OMHDKFFL@pthread_cond_init?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 376  :     goto failed;

	jmp	$failed$16
$LN8@kvz_thread:

; 377  :   }
; 378  : 
; 379  :   threadqueue->threads = MALLOC(pthread_t, thread_count);

	mov	eax, DWORD PTR _thread_count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 380  :   if (!threadqueue->threads) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN9@kvz_thread

; 381  :     fprintf(stderr, "Could not malloc threadqueue->threads!\n");

	push	OFFSET ??_C@_0CI@FOHADHPI@Could?5not?5malloc?5threadqueue?9?$DOt@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 382  :     goto failed;

	jmp	$failed$16
$LN9@kvz_thread:

; 383  :   }
; 384  :   threadqueue->thread_count = 0;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+16], 0

; 385  :   threadqueue->thread_running_count = 0;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+20], 0

; 386  : 
; 387  :   threadqueue->stop = false;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	BYTE PTR [eax+24], 0

; 388  : 
; 389  :   threadqueue->first              = NULL;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+28], 0

; 390  :   threadqueue->last               = NULL;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [eax+32], 0

; 391  : 
; 392  :   // Lock the queue before creating threads, to ensure they all have correct information.
; 393  :   PTHREAD_LOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_lock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CA@GKIKFONO@pthread_mutex_lock?$CI?$CFs?$CJ?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN14@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_init@@9@9
	add	ecx, 35					; 00000023H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@kvz_thread:
	xor	eax, eax
	jmp	$LN1@kvz_thread
$LN10@kvz_thread:

; 394  :   for (int i = 0; i < thread_count; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_thread
$LN2@kvz_thread:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_thread:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _thread_count$[ebp]
	jge	SHORT $LN3@kvz_thread

; 395  :     if (pthread_create(&threadqueue->threads[i], NULL, threadqueue_worker, threadqueue) != 0) {

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	push	OFFSET _threadqueue_worker
	push	0
	mov	ecx, DWORD PTR _threadqueue$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_pthread_create
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@kvz_thread

; 396  :         fprintf(stderr, "pthread_create failed!\n");

	push	OFFSET ??_C@_0BI@EKNPILFE@pthread_create?5failed?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 397  :         goto failed;

	jmp	$failed$16
$LN11@kvz_thread:

; 398  :     }
; 399  :     threadqueue->thread_count++;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 400  :     threadqueue->thread_running_count++;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _threadqueue$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 401  :   }

	jmp	SHORT $LN2@kvz_thread
$LN3@kvz_thread:

; 402  :   PTHREAD_UNLOCK(&threadqueue->lock);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_pthread_mutex_unlock
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@kvz_thread
	push	OFFSET ??_C@_0BD@HJBDPDBK@?$CGthreadqueue?9?$DOlock@
	push	OFFSET ??_C@_0CC@NNKLMNLE@pthread_mutex_unlock?$CI?$CFs?$CJ?5failed@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
	xor	eax, eax
	jne	SHORT $LN15@kvz_thread
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_threadqueue_init@@9@9
	add	ecx, 44					; 0000002cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HE@JJFCCHA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@kvz_thread:
	xor	eax, eax
	jmp	SHORT $LN1@kvz_thread
$LN12@kvz_thread:

; 403  : 
; 404  :   return threadqueue;

	mov	eax, DWORD PTR _threadqueue$[ebp]
	jmp	SHORT $LN1@kvz_thread
$failed$16:

; 405  : 
; 406  : failed:
; 407  :   kvz_threadqueue_free(threadqueue);

	mov	eax, DWORD PTR _threadqueue$[ebp]
	push	eax
	call	_kvz_threadqueue_free
	add	esp, 4

; 408  :   return NULL;

	xor	eax, eax
$LN1@kvz_thread:

; 409  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_threadqueue_init ENDP
_TEXT	ENDS
END
