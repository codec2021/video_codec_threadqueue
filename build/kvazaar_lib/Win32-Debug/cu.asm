; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\cu.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_kvz_part_mode_num_parts
PUBLIC	_kvz_part_mode_offsets
PUBLIC	_kvz_part_mode_sizes
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__40DF0D2D_ctype@h DB 01H
__C5A167BB_basetsd@h DB 01H
__D24F4925_winnt@h DB 01H
__56CF70A3_processthreadsapi@h DB 01H
__4FC5969A_memoryapi@h DB 01H
__7D439CBC_winerror@h DB 01H
__41E0877F_winbase@h DB 01H
__08182E14_stralign@h DB 01H
__8FD04514_threads@h DB 01H
__FBB77ABE_cu@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_kvz_part_mode_num_parts DB 01H
	DB	02H
	DB	02H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
_kvz_part_mode_offsets DB 00H
	DB	00H
	ORG $+6
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+4
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	ORG $+4
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+4
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	ORG $+4
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	ORG $+4
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	ORG $+4
_kvz_part_mode_sizes DB 04H
	DB	04H
	ORG $+6
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	ORG $+4
	DB	02H
	DB	04H
	DB	02H
	DB	04H
	ORG $+4
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	01H
	DB	04H
	DB	03H
	ORG $+4
	DB	04H
	DB	03H
	DB	04H
	DB	01H
	ORG $+4
	DB	01H
	DB	04H
	DB	03H
	DB	04H
	ORG $+4
	DB	03H
	DB	04H
	DB	01H
	DB	04H
	ORG $+4
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
CONST	ENDS
PUBLIC	_kvz_cu_array_at
PUBLIC	_kvz_cu_array_at_const
PUBLIC	_kvz_cu_array_alloc
PUBLIC	_kvz_cu_subarray
PUBLIC	_kvz_cu_array_free
PUBLIC	_kvz_cu_array_copy_ref
PUBLIC	_kvz_cu_array_copy_from_lcu
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_cu_array_at_const@@9@9	; `kvz_cu_array_at_const'::`1'::__LINE__Var
PUBLIC	??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CE@ECIAIPNG@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAw?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1CG@PBFGAMOC@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAh?$AAe?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cu_subarray@@9@9		; `kvz_cu_subarray'::`1'::__LINE__Var
PUBLIC	??_C@_1EA@MKLFKAED@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@ ; `string'
PUBLIC	??_C@_1EE@LCLKBPHB@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cu_array_free@@9@9		; `kvz_cu_array_free'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cu_array_copy_ref@@9@9	; `kvz_cu_array_copy_ref'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
EXTRN	_memcpy:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___wassert:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_array_copy_ref@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_array_copy_ref@@9@9 DD 0c6H	; `kvz_cu_array_copy_ref'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_array_free@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_array_free@@9@9 DD 0a8H		; `kvz_cu_array_free'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@LCLKBPHB@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@
CONST	SEGMENT
??_C@_1EE@LCLKBPHB@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@ DB 'y'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'h', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@MKLFKAED@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@
CONST	SEGMENT
??_C@_1EA@MKLFKAED@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@ DB 'x'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '-', 00H, '>', 00H, 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_subarray@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_subarray@@9@9 DD 08aH		; `kvz_cu_subarray'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CG@PBFGAMOC@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAh?$AAe?$AAi@
CONST	SEGMENT
??_C@_1CG@PBFGAMOC@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAh?$AAe?$AAi@ DB 'y'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'c', 00H, 'u', 00H, 'a', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@ECIAIPNG@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAw?$AAi?$AAd@
CONST	SEGMENT
??_C@_1CE@ECIAIPNG@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAw?$AAi?$AAd@ DB 'x'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'c', 00H, 'u', 00H, 'a', 00H, '-', 00H, '>', 00H, 'w', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H, 'u', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_array_at_const@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_array_at_const@@9@9 DD 064H	; `kvz_cu_array_at_const'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_copy_from_lcu
_TEXT	SEGMENT
_to_cu$1 = -80						; size = 4
_y_scu$2 = -68						; size = 4
_x_scu$3 = -56						; size = 4
_from_cu$4 = -44					; size = 4
_x$5 = -32						; size = 4
_y$6 = -20						; size = 4
_dst_stride$ = -8					; size = 4
_dst$ = 8						; size = 4
_dst_x$ = 12						; size = 4
_dst_y$ = 16						; size = 4
_src$ = 20						; size = 4
_kvz_cu_array_copy_from_lcu PROC			; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 219  :   const int dst_stride = dst->stride >> 2;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sar	ecx, 2
	mov	DWORD PTR _dst_stride$[ebp], ecx

; 220  :   for (int y = 0; y < LCU_WIDTH; y += SCU_WIDTH) {

	mov	DWORD PTR _y$6[ebp], 0
	jmp	SHORT $LN4@kvz_cu_arr
$LN2@kvz_cu_arr:
	mov	eax, DWORD PTR _y$6[ebp]
	add	eax, 4
	mov	DWORD PTR _y$6[ebp], eax
$LN4@kvz_cu_arr:
	cmp	DWORD PTR _y$6[ebp], 64			; 00000040H
	jge	$LN1@kvz_cu_arr

; 221  :     for (int x = 0; x < LCU_WIDTH; x += SCU_WIDTH) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN7@kvz_cu_arr
$LN5@kvz_cu_arr:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 4
	mov	DWORD PTR _x$5[ebp], eax
$LN7@kvz_cu_arr:
	cmp	DWORD PTR _x$5[ebp], 64			; 00000040H
	jge	SHORT $LN6@kvz_cu_arr

; 222  :       const cu_info_t *from_cu = LCU_GET_CU_AT_PX(src, x, y);

	mov	eax, DWORD PTR _x$5[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y$6[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _src$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _from_cu$4[ebp], eax

; 223  :       const int x_scu = (dst_x + x) >> 2;

	mov	eax, DWORD PTR _dst_x$[ebp]
	add	eax, DWORD PTR _x$5[ebp]
	sar	eax, 2
	mov	DWORD PTR _x_scu$3[ebp], eax

; 224  :       const int y_scu = (dst_y + y) >> 2;

	mov	eax, DWORD PTR _dst_y$[ebp]
	add	eax, DWORD PTR _y$6[ebp]
	sar	eax, 2
	mov	DWORD PTR _y_scu$2[ebp], eax

; 225  :       cu_info_t *to_cu = &dst->data[x_scu + y_scu * dst_stride];

	mov	eax, DWORD PTR _y_scu$2[ebp]
	imul	eax, DWORD PTR _dst_stride$[ebp]
	add	eax, DWORD PTR _x_scu$3[ebp]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _to_cu$1[ebp], ecx

; 226  :       memcpy(to_cu,                  from_cu, sizeof(*to_cu));

	push	20					; 00000014H
	mov	eax, DWORD PTR _from_cu$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_cu$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 227  :     }

	jmp	SHORT $LN5@kvz_cu_arr
$LN6@kvz_cu_arr:

; 228  :   }

	jmp	$LN2@kvz_cu_arr
$LN1@kvz_cu_arr:

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_copy_from_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_copy_ref
_TEXT	SEGMENT
_new_refcount$ = -8					; size = 4
_cua$ = 8						; size = 4
_kvz_cu_array_copy_ref PROC				; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 199  :   int32_t new_refcount = KVZ_ATOMIC_INC(&cua->refcount);

	mov	eax, DWORD PTR _cua$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx
	inc	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 200  :   // The caller should have had another reference and we added one
; 201  :   // reference so refcount should be at least 2.
; 202  :   assert(new_refcount >= 2);

	cmp	DWORD PTR _new_refcount$[ebp], 2
	jge	SHORT $LN3@kvz_cu_arr
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_array_copy_ref@@9@9
	add	eax, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_cu_arr:

; 203  :   return cua;

	mov	eax, DWORD PTR _cua$[ebp]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_copy_ref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_free
_TEXT	SEGMENT
_new_refcount$ = -20					; size = 4
_cua$ = -8						; size = 4
_cua_ptr$ = 8						; size = 4
_kvz_cu_array_free PROC					; COMDAT

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 169  :   cu_array_t *cua = *cua_ptr;

	mov	eax, DWORD PTR _cua_ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cua$[ebp], ecx

; 170  :   if (cua == NULL) return;

	cmp	DWORD PTR _cua$[ebp], 0
	jne	SHORT $LN2@kvz_cu_arr
	jmp	$LN1@kvz_cu_arr
$LN2@kvz_cu_arr:

; 171  :   *cua_ptr = NULL;

	mov	eax, DWORD PTR _cua_ptr$[ebp]
	mov	DWORD PTR [eax], 0

; 172  : 
; 173  :   int new_refcount = KVZ_ATOMIC_DEC(&cua->refcount);

	mov	eax, DWORD PTR _cua$[ebp]
	add	eax, 20					; 00000014H
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 174  :   if (new_refcount > 0) {

	cmp	DWORD PTR _new_refcount$[ebp], 0
	jle	SHORT $LN3@kvz_cu_arr

; 175  :     // Still we have some references, do nothing.
; 176  :     return;

	jmp	$LN1@kvz_cu_arr
$LN3@kvz_cu_arr:

; 177  :   }
; 178  : 
; 179  :   assert(new_refcount == 0);

	cmp	DWORD PTR _new_refcount$[ebp], 0
	je	SHORT $LN7@kvz_cu_arr
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_array_free@@9@9
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@EMPGFCAP@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@kvz_cu_arr:

; 180  : 
; 181  :   if (!cua->base) {

	mov	eax, DWORD PTR _cua$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@kvz_cu_arr

; 182  :     FREE_POINTER(cua->data);

	mov	esi, esp
	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [eax+4], 0

; 183  :   } else {

	jmp	SHORT $LN5@kvz_cu_arr
$LN4@kvz_cu_arr:

; 184  :     kvz_cu_array_free(&cua->base);

	mov	eax, DWORD PTR _cua$[ebp]
	push	eax
	call	_kvz_cu_array_free
	add	esp, 4

; 185  :     cua->data = NULL;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN5@kvz_cu_arr:

; 186  :   }
; 187  : 
; 188  :   FREE_POINTER(cua);

	mov	esi, esp
	mov	eax, DWORD PTR _cua$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cua$[ebp], 0
$LN1@kvz_cu_arr:

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_subarray
_TEXT	SEGMENT
_real_base$ = -20					; size = 4
_cua$ = -8						; size = 4
_base$ = 8						; size = 4
_x_offset$ = 12						; size = 4
_y_offset$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_kvz_cu_subarray PROC					; COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 139  :   assert(x_offset + width <= base->width);

	mov	eax, DWORD PTR _x_offset$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _base$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jbe	SHORT $LN6@kvz_cu_sub
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_cu_subarray@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EA@MKLFKAED@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_cu_sub:

; 140  :   assert(y_offset + height <= base->height);

	mov	eax, DWORD PTR _y_offset$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _base$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jbe	SHORT $LN7@kvz_cu_sub
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_cu_subarray@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EE@LCLKBPHB@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@kvz_cu_sub:

; 141  : 
; 142  :   if (x_offset == 0 &&
; 143  :       y_offset == 0 &&
; 144  :       width == base->width &&

	cmp	DWORD PTR _x_offset$[ebp], 0
	jne	SHORT $LN4@kvz_cu_sub
	cmp	DWORD PTR _y_offset$[ebp], 0
	jne	SHORT $LN4@kvz_cu_sub
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN4@kvz_cu_sub
	mov	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN4@kvz_cu_sub

; 145  :       height == base->height)
; 146  :   {
; 147  :     return kvz_cu_array_copy_ref(base);

	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_kvz_cu_array_copy_ref
	add	esp, 4
	jmp	$LN1@kvz_cu_sub
$LN4@kvz_cu_sub:

; 148  :   }
; 149  : 
; 150  :   cu_array_t *cua = MALLOC(cu_array_t, 1);

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cua$[ebp], eax

; 151  : 
; 152  :   // Find the real base array.
; 153  :   cu_array_t *real_base = base;

	mov	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR _real_base$[ebp], eax
$LN2@kvz_cu_sub:

; 154  :   while (real_base->base) {

	mov	eax, DWORD PTR _real_base$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@kvz_cu_sub

; 155  :     real_base = real_base->base;

	mov	eax, DWORD PTR _real_base$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _real_base$[ebp], ecx

; 156  :   }

	jmp	SHORT $LN2@kvz_cu_sub
$LN3@kvz_cu_sub:

; 157  :   cua->base     = kvz_cu_array_copy_ref(real_base);

	mov	eax, DWORD PTR _real_base$[ebp]
	push	eax
	call	_kvz_cu_array_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [ecx], eax

; 158  :   cua->data     = kvz_cu_array_at(base, x_offset, y_offset);

	mov	eax, DWORD PTR _y_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 159  :   cua->width    = width;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 160  :   cua->height   = height;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 161  :   cua->stride   = base->stride;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 162  :   cua->refcount = 1;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [eax+20], 1

; 163  : 
; 164  :   return cua;

	mov	eax, DWORD PTR _cua$[ebp]
$LN1@kvz_cu_sub:

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_subarray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_alloc
_TEXT	SEGMENT
_cu_array_size$ = -44					; size = 4
_height_scu$ = -32					; size = 4
_width_scu$ = -20					; size = 4
_cua$ = -8						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_kvz_cu_array_alloc PROC				; COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 115  :   cu_array_t *cua = MALLOC(cu_array_t, 1);

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cua$[ebp], eax

; 116  : 
; 117  :   // Round up to a multiple of LCU width and divide by cell width.
; 118  :   const int width_scu  = CEILDIV(width,  LCU_WIDTH) * LCU_WIDTH / SCU_WIDTH;

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	shl	eax, 6
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _width_scu$[ebp], eax

; 119  :   const int height_scu = CEILDIV(height, LCU_WIDTH) * LCU_WIDTH / SCU_WIDTH;

	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	shl	eax, 6
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _height_scu$[ebp], eax

; 120  :   const unsigned cu_array_size = width_scu * height_scu;

	mov	eax, DWORD PTR _width_scu$[ebp]
	imul	eax, DWORD PTR _height_scu$[ebp]
	mov	DWORD PTR _cu_array_size$[ebp], eax

; 121  : 
; 122  :   cua->base     = NULL;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [eax], 0

; 123  :   cua->data     = calloc(cu_array_size, sizeof(cu_info_t));

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _cu_array_size$[ebp]
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 124  :   cua->width    = width_scu  * SCU_WIDTH;

	mov	eax, DWORD PTR _width_scu$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 125  :   cua->height   = height_scu * SCU_WIDTH;

	mov	eax, DWORD PTR _height_scu$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 126  :   cua->stride   = cua->width;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _cua$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx

; 127  :   cua->refcount = 1;

	mov	eax, DWORD PTR _cua$[ebp]
	mov	DWORD PTR [eax+20], 1

; 128  : 
; 129  :   return cua;

	mov	eax, DWORD PTR _cua$[ebp]

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_at_const
_TEXT	SEGMENT
_cua$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_kvz_cu_array_at_const PROC				; COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 101  :   assert(x_px < cua->width);

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _x_px$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@kvz_cu_arr
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_cu_array_at_const@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@ECIAIPNG@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAw?$AAi?$AAd@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_cu_arr:

; 102  :   assert(y_px < cua->height);

	mov	eax, DWORD PTR _cua$[ebp]
	mov	ecx, DWORD PTR _y_px$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN4@kvz_cu_arr
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_cu_array_at_const@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@IAIIIGIN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CG@PBFGAMOC@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAa?$AA?9?$AA?$DO?$AAh?$AAe?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@kvz_cu_arr:

; 103  :   return &(cua)->data[(x_px >> 2) + (y_px >> 2) * ((cua)->stride >> 2)];

	mov	eax, DWORD PTR _x_px$[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _y_px$[ebp]
	shr	ecx, 2
	mov	edx, DWORD PTR _cua$[ebp]
	mov	edx, DWORD PTR [edx+16]
	sar	edx, 2
	imul	ecx, edx
	add	eax, ecx
	imul	eax, eax, 20
	mov	ecx, DWORD PTR _cua$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_at_const ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.c
;	COMDAT _kvz_cu_array_at
_TEXT	SEGMENT
_cua$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_kvz_cu_array_at PROC					; COMDAT

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FBB77ABE_cu@c
	call	@__CheckForDebuggerJustMyCode@4

; 95   :   return (cu_info_t*) kvz_cu_array_at_const(cua, x_px, y_px);

	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_array_at ENDP
_TEXT	ENDS
END
