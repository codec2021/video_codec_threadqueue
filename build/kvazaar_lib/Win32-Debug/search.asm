; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\search.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__2D209711_search@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_INTRA_THRESHOLD DD 08H
?mp_modes@?8??search_cu@@9@9 DD 01H			; `search_cu'::`9'::mp_modes
	DD	02H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
CONST	ENDS
PUBLIC	_kvz_sort_modes
PUBLIC	_kvz_search_lcu
PUBLIC	_kvz_cu_rd_cost_luma
PUBLIC	_kvz_cu_rd_cost_chroma
PUBLIC	_kvz_lcu_fill_trdepth
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??xy_to_zorder@@9@9		; `xy_to_zorder'::`1'::__LINE__Var
PUBLIC	??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ ; `string'
PUBLIC	??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ ; `string'
PUBLIC	??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cu_rd_cost_luma@@9@9	; `kvz_cu_rd_cost_luma'::`1'::__LINE__Var
PUBLIC	??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1DM@LEPPLIOA@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA_@ ; `string'
PUBLIC	??_C@_1DM@FKKOGHFJ@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_cu_rd_cost_chroma@@9@9	; `kvz_cu_rd_cost_chroma'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??calc_mode_bits@@9@9		; `calc_mode_bits'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@PFKAJOBP@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??search_cu@@9@9			; `search_cu'::`1'::__LINE__Var
PUBLIC	??_C@_1IC@EAICHMBM@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAt?$AA_?$AAs?$AAi@ ; `string'
PUBLIC	??_C@_1DE@OCDOJJLF@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_search_lcu@@9@9		; `kvz_search_lcu'::`1'::__LINE__Var
PUBLIC	??_C@_1CG@GPPDGMKJ@?$AAx?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@ ; `string'
PUBLIC	??_C@_1CG@OCHLJBEL@?$AAy?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_cu_array_at_const:PROC
EXTRN	_kvz_cu_array_copy_from_lcu:PROC
EXTRN	_kvz_get_scan_order:PROC
EXTRN	_kvz_get_lcu_stats:PROC
EXTRN	_kvz_lcu_luma_depth_pred:PROC
EXTRN	_kvz_inter_recon_cu:PROC
EXTRN	_kvz_intra_get_dir_luma_predictor:PROC
EXTRN	_kvz_intra_recon_cu:PROC
EXTRN	_kvz_search_cu_inter:PROC
EXTRN	_kvz_search_cu_smp:PROC
EXTRN	_kvz_get_coeff_cost:PROC
EXTRN	_kvz_luma_mode_bits:PROC
EXTRN	_kvz_chroma_mode_bits:PROC
EXTRN	_kvz_search_cu_intra_chroma:PROC
EXTRN	_kvz_search_cu_intra:PROC
EXTRN	_kvz_quantize_lcu_residual:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_kvz_part_mode_num_parts:BYTE
EXTRN	_kvz_part_mode_offsets:BYTE
EXTRN	_kvz_part_mode_sizes:BYTE
EXTRN	_kvz_f_entropy_bits:BYTE
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@OCHLJBEL@?$AAy?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1CG@OCHLJBEL@?$AAy?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@ DB 'y'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, 'L', 00H, 'C', 00H, 'U', 00H
	DB	'_', 00H, 'W', 00H, 'I', 00H, 'D', 00H, 'T', 00H, 'H', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPPDGMKJ@?$AAx?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1CG@GPPDGMKJ@?$AAx?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@ DB 'x'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, 'L', 00H, 'C', 00H, 'U', 00H
	DB	'_', 00H, 'W', 00H, 'I', 00H, 'D', 00H, 'T', 00H, 'H', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_search_lcu@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_search_lcu@@9@9 DD 03bfH		; `kvz_search_lcu'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DE@OCDOJJLF@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN@
CONST	SEGMENT
??_C@_1DE@OCDOJJLF@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'u', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, 'C', 00H, 'U', 00H, '_', 00H, 'N', 00H
	DB	'O', 00H, 'T', 00H, 'S', 00H, 'E', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@EAICHMBM@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAt?$AA_?$AAs?$AAi@
CONST	SEGMENT
??_C@_1IC@EAICHMBM@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAt?$AA_?$AAs?$AAi@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'u', 00H, '-', 00H
	DB	'>', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, '_', 00H, '2'
	DB	00H, 'N', 00H, 'x', 00H, '2', 00H, 'N', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'c', 00H, 'u', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'u', 00H, '-', 00H, '>', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, '_', 00H, 'N', 00H, 'x', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??search_cu@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??search_cu@@9@9 DD 01cdH		; `search_cu'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@PFKAJOBP@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1DC@PFKAJOBP@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'u', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'C', 00H, 'U', 00H, '_', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calc_mode_bits@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??calc_mode_bits@@9@9 DD 018bH		; `calc_mode_bits'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_rd_cost_chroma@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_rd_cost_chroma@@9@9 DD 0144H	; `kvz_cu_rd_cost_chroma'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@FKKOGHFJ@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA_@
CONST	SEGMENT
??_C@_1DM@FKKOGHFJ@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA_@ DB 'y'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'y'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'L', 00H, 'C', 00H, 'U', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D'
	DB	00H, 'T', 00H, 'H', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LEPPLIOA@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA_@
CONST	SEGMENT
??_C@_1DM@LEPPLIOA@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA_@ DB 'x'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x'
	DB	00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'L', 00H, 'C', 00H, 'U', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D'
	DB	00H, 'T', 00H, 'H', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_cu_rd_cost_luma@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_cu_rd_cost_luma@@9@9 DD 0fcH	; `kvz_cu_rd_cost_luma'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ DB 'y'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'y', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
CONST	SEGMENT
??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ DB 'x'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H, 'u', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??xy_to_zorder@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??xy_to_zorder@@9@9 DD 0182H		; `xy_to_zorder'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _copy_lcu_to_cu_data
_TEXT	SEGMENT
tv84 = -244						; size = 4
tv77 = -244						; size = 4
_y_max$1 = -44						; size = 4
_x_max$2 = -32						; size = 4
_pic_width$3 = -20					; size = 4
_pic$4 = -8						; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_lcu$ = 20						; size = 4
_copy_lcu_to_cu_data PROC				; COMDAT

; 930  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 931  :   // Copy non-reference CUs to picture.
; 932  :   kvz_cu_array_copy_from_lcu(state->tile->frame->cu_array, x_px, y_px, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_px$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_copy_from_lcu
	add	esp, 16					; 00000010H

; 933  : 
; 934  :   // Copy pixels to picture.
; 935  :   {
; 936  :     videoframe_t * const pic = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pic$4[ebp], edx

; 937  :     const int pic_width = pic->width;

	mov	eax, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pic_width$3[ebp], ecx

; 938  :     const int x_max = MIN(x_px + LCU_WIDTH, pic_width) - x_px;

	mov	eax, DWORD PTR _x_px$[ebp]
	add	eax, 64					; 00000040H
	cmp	eax, DWORD PTR _pic_width$3[ebp]
	jge	SHORT $LN4@copy_lcu_t
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN5@copy_lcu_t
$LN4@copy_lcu_t:
	mov	edx, DWORD PTR _pic_width$3[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN5@copy_lcu_t:
	mov	eax, DWORD PTR tv77[ebp]
	sub	eax, DWORD PTR _x_px$[ebp]
	mov	DWORD PTR _x_max$2[ebp], eax

; 939  :     const int y_max = MIN(y_px + LCU_WIDTH, pic->height) - y_px;

	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _pic$4[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN6@copy_lcu_t
	mov	edx, DWORD PTR _y_px$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN7@copy_lcu_t
$LN6@copy_lcu_t:
	mov	eax, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv84[ebp], ecx
$LN7@copy_lcu_t:
	mov	edx, DWORD PTR tv84[ebp]
	sub	edx, DWORD PTR _y_px$[ebp]
	mov	DWORD PTR _y_max$1[ebp], edx

; 940  : 
; 941  :     kvz_pixels_blit(lcu->rec.y, &pic->rec->y[x_px + y_px * pic->rec->stride],

	mov	eax, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _y_max$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_max$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pic$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _y_px$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _x_px$[ebp]
	mov	edx, DWORD PTR [eax+8]
	add	edx, ecx
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 6540				; 0000198cH
	push	eax
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 942  :                         x_max, y_max, LCU_WIDTH, pic->rec->stride);
; 943  : 
; 944  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN1@copy_lcu_t

; 945  :       kvz_pixels_blit(lcu->rec.u, &pic->rec->u[(x_px / 2) + (y_px / 2) * (pic->rec->stride / 2)],

	mov	eax, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	32					; 00000020H
	mov	eax, DWORD PTR _y_max$1[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _x_max$2[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _x_px$[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	eax, DWORD PTR _y_px$[ebp]
	cdq
	sub	eax, edx
	mov	edi, eax
	sar	edi, 1
	mov	edx, DWORD PTR _pic$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	edi, eax
	add	esi, edi
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, esi
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	add	edx, 10636				; 0000298cH
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 946  :                       x_max / 2, y_max / 2, LCU_WIDTH / 2, pic->rec->stride / 2);
; 947  :       kvz_pixels_blit(lcu->rec.v, &pic->rec->v[(x_px / 2) + (y_px / 2) * (pic->rec->stride / 2)],

	mov	eax, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	32					; 00000020H
	mov	eax, DWORD PTR _y_max$1[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _x_max$2[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _pic$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _x_px$[ebp]
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	mov	eax, DWORD PTR _y_px$[ebp]
	cdq
	sub	eax, edx
	mov	edi, eax
	sar	edi, 1
	mov	edx, DWORD PTR _pic$4[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	edi, eax
	add	esi, edi
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, esi
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	add	edx, 11660				; 00002d8cH
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN1@copy_lcu_t:

; 948  :                       x_max / 2, y_max / 2, LCU_WIDTH / 2, pic->rec->stride / 2);
; 949  :     }
; 950  :   }
; 951  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_lcu_to_cu_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _init_lcu_t
_TEXT	SEGMENT
tv303 = -556						; size = 4
tv296 = -556						; size = 4
tv238 = -556						; size = 4
tv184 = -556						; size = 4
tv182 = -556						; size = 4
_y_max_c$1 = -356					; size = 4
_x_max_c$2 = -344					; size = 4
_y_c$3 = -332						; size = 4
_x_c$4 = -320						; size = 4
_y_max$5 = -308						; size = 4
_x_max$6 = -296						; size = 4
_frame$7 = -284						; size = 4
_chroma_bytes$8 = -272					; size = 4
_luma_bytes$9 = -260					; size = 4
_chroma_offset$10 = -248				; size = 4
_luma_offset$11 = -236					; size = 4
_y_min_in_lcu$12 = -224					; size = 4
_chroma_bytes$13 = -212					; size = 4
_luma_bytes$14 = -200					; size = 4
_chroma_offset$15 = -188				; size = 4
_luma_offset$16 = -176					; size = 4
_x_min_in_lcu$17 = -164					; size = 4
_x_max$18 = -152					; size = 4
_pic_width$19 = -140					; size = 4
_to_cu$20 = -128					; size = 4
_from_cu$21 = -116					; size = 4
_to_cu$22 = -104					; size = 4
_from_cu$23 = -92					; size = 4
_to_cu$24 = -80						; size = 4
_from_cu$25 = -68					; size = 4
_i$26 = -56						; size = 4
_to_cu$27 = -44						; size = 4
_from_cu$28 = -32					; size = 4
_i$29 = -20						; size = 4
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lcu$ = 20						; size = 4
_hor_buf$ = 24						; size = 4
_ver_buf$ = 28						; size = 4
_init_lcu_t PROC					; COMDAT

; 827  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 828  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 829  : 
; 830  :   FILL(*lcu, 0);

	push	30776					; 00007838H
	push	0
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 831  :   
; 832  :   lcu->rec.chroma_format = state->encoder_control->chroma_format;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [ecx+2536]
	mov	DWORD PTR [edx+12684], eax

; 833  :   lcu->ref.chroma_format = state->encoder_control->chroma_format;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [ecx+2536]
	mov	DWORD PTR [edx+6536], eax

; 834  : 
; 835  :   // Copy reference cu_info structs from neighbouring LCUs.
; 836  : 
; 837  :   // Copy top CU row.
; 838  :   if (y > 0) {

	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN8@init_lcu_t

; 839  :     for (int i = 0; i < LCU_WIDTH; i += SCU_WIDTH) {

	mov	DWORD PTR _i$29[ebp], 0
	jmp	SHORT $LN4@init_lcu_t
$LN2@init_lcu_t:
	mov	eax, DWORD PTR _i$29[ebp]
	add	eax, 4
	mov	DWORD PTR _i$29[ebp], eax
$LN4@init_lcu_t:
	cmp	DWORD PTR _i$29[ebp], 64		; 00000040H
	jge	SHORT $LN8@init_lcu_t

; 840  :       const cu_info_t *from_cu = kvz_cu_array_at_const(frame->cu_array, x + i, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _i$29[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _from_cu$28[ebp], eax

; 841  :       cu_info_t *to_cu = LCU_GET_CU_AT_PX(lcu, i, -1);

	mov	eax, DWORD PTR _i$29[ebp]
	sar	eax, 2
	add	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _to_cu$27[ebp], eax

; 842  :       memcpy(to_cu, from_cu, sizeof(*to_cu));

	push	20					; 00000014H
	mov	eax, DWORD PTR _from_cu$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_cu$27[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 843  :     }

	jmp	SHORT $LN2@init_lcu_t
$LN8@init_lcu_t:

; 844  :   }
; 845  :   // Copy left CU column.
; 846  :   if (x > 0) {

	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN9@init_lcu_t

; 847  :     for (int i = 0; i < LCU_WIDTH; i += SCU_WIDTH) {

	mov	DWORD PTR _i$26[ebp], 0
	jmp	SHORT $LN7@init_lcu_t
$LN5@init_lcu_t:
	mov	eax, DWORD PTR _i$26[ebp]
	add	eax, 4
	mov	DWORD PTR _i$26[ebp], eax
$LN7@init_lcu_t:
	cmp	DWORD PTR _i$26[ebp], 64		; 00000040H
	jge	SHORT $LN9@init_lcu_t

; 848  :       const cu_info_t *from_cu = kvz_cu_array_at_const(frame->cu_array, x - 1, y + i);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _i$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _from_cu$25[ebp], eax

; 849  :       cu_info_t *to_cu = LCU_GET_CU_AT_PX(lcu, -1, i);

	mov	eax, DWORD PTR _i$26[ebp]
	sar	eax, 2
	imul	ecx, eax, 17
	add	ecx, 17					; 00000011H
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _lcu$[ebp]
	lea	ecx, DWORD PTR [eax+edx+24976]
	mov	DWORD PTR _to_cu$24[ebp], ecx

; 850  :       memcpy(to_cu, from_cu, sizeof(*to_cu));

	push	20					; 00000014H
	mov	eax, DWORD PTR _from_cu$25[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_cu$24[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 851  :     }

	jmp	SHORT $LN5@init_lcu_t
$LN9@init_lcu_t:

; 852  :   }
; 853  :   // Copy top-left CU.
; 854  :   if (x > 0 && y > 0) {

	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN10@init_lcu_t
	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN10@init_lcu_t

; 855  :     const cu_info_t *from_cu = kvz_cu_array_at_const(frame->cu_array, x - 1, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _from_cu$23[ebp], eax

; 856  :     cu_info_t *to_cu = LCU_GET_CU_AT_PX(lcu, -1, -1);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _to_cu$22[ebp], eax

; 857  :     memcpy(to_cu, from_cu, sizeof(*to_cu));

	push	20					; 00000014H
	mov	eax, DWORD PTR _from_cu$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_cu$22[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN10@init_lcu_t:

; 858  :   }
; 859  : 
; 860  :   // Copy top-right CU.
; 861  :   if (y > 0 && x + LCU_WIDTH < frame->width) {

	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN11@init_lcu_t
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN11@init_lcu_t

; 862  :     const cu_info_t *from_cu = kvz_cu_array_at_const(frame->cu_array, x + LCU_WIDTH, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _from_cu$21[ebp], eax

; 863  :     cu_info_t *to_cu = LCU_GET_TOP_RIGHT_CU(lcu);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 289
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _to_cu$20[ebp], eax

; 864  :     memcpy(to_cu, from_cu, sizeof(*to_cu));

	push	20					; 00000014H
	mov	eax, DWORD PTR _from_cu$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _to_cu$20[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN11@init_lcu_t:

; 865  :   }
; 866  : 
; 867  :   // Copy reference pixels.
; 868  :   {
; 869  :     const int pic_width = frame->width;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pic_width$19[ebp], ecx

; 870  :     // Copy top reference pixels.
; 871  :     if (y > 0) {

	cmp	DWORD PTR _y$[ebp], 0
	jle	$LN12@init_lcu_t

; 872  :       // hor_buf is of size pic_width so there might not be LCU_REF_PX_WIDTH
; 873  :       // number of allocated pixels left.
; 874  :       int x_max = MIN(LCU_REF_PX_WIDTH, pic_width - x);

	mov	eax, DWORD PTR _pic_width$19[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	cmp	eax, 96					; 00000060H
	jle	SHORT $LN18@init_lcu_t
	mov	DWORD PTR tv182[ebp], 96		; 00000060H
	jmp	SHORT $LN19@init_lcu_t
$LN18@init_lcu_t:
	mov	ecx, DWORD PTR _pic_width$19[ebp]
	sub	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv182[ebp], ecx
$LN19@init_lcu_t:
	mov	edx, DWORD PTR tv182[ebp]
	mov	DWORD PTR _x_max$18[ebp], edx

; 875  :       int x_min_in_lcu = (x>0) ? 0 : 1;

	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN20@init_lcu_t
	mov	DWORD PTR tv184[ebp], 0
	jmp	SHORT $LN21@init_lcu_t
$LN20@init_lcu_t:
	mov	DWORD PTR tv184[ebp], 1
$LN21@init_lcu_t:
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR _x_min_in_lcu$17[ebp], eax

; 876  :       int luma_offset = OFFSET_HOR_BUF(x, y, frame, x_min_in_lcu - 1);

	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _x_min_in_lcu$17[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	sub	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [edx+8]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _luma_offset$16[ebp], eax

; 877  :       int chroma_offset = OFFSET_HOR_BUF_C(x, y, frame, x_min_in_lcu - 1);

	mov	eax, DWORD PTR _x$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	add	ecx, DWORD PTR _x_min_in_lcu$17[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	sub	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [edx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _chroma_offset$15[ebp], eax

; 878  :       int luma_bytes = (x_max + (1 - x_min_in_lcu))*sizeof(kvz_pixel);

	mov	eax, 1
	sub	eax, DWORD PTR _x_min_in_lcu$17[ebp]
	add	eax, DWORD PTR _x_max$18[ebp]
	mov	DWORD PTR _luma_bytes$14[ebp], eax

; 879  :       int chroma_bytes = (x_max / 2 + (1 - x_min_in_lcu))*sizeof(kvz_pixel);

	mov	eax, DWORD PTR _x_max$18[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	sub	ecx, DWORD PTR _x_min_in_lcu$17[ebp]
	add	eax, ecx
	mov	DWORD PTR _chroma_bytes$13[ebp], eax

; 880  : 
; 881  :       memcpy(&lcu->top_ref.y[x_min_in_lcu], &hor_buf->y[luma_offset], luma_bytes);

	mov	eax, DWORD PTR _luma_bytes$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _luma_offset$16[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, DWORD PTR _x_min_in_lcu$17[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 882  :       if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN12@init_lcu_t

; 883  :         memcpy(&lcu->top_ref.u[x_min_in_lcu], &hor_buf->u[chroma_offset], chroma_bytes);

	mov	eax, DWORD PTR _chroma_bytes$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _chroma_offset$15[ebp]
	push	edx
	mov	eax, DWORD PTR _x_min_in_lcu$17[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+97]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 884  :         memcpy(&lcu->top_ref.v[x_min_in_lcu], &hor_buf->v[chroma_offset], chroma_bytes);

	mov	eax, DWORD PTR _chroma_bytes$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _chroma_offset$15[ebp]
	push	edx
	mov	eax, DWORD PTR _x_min_in_lcu$17[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+146]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN12@init_lcu_t:

; 885  :       }
; 886  :     }
; 887  :     // Copy left reference pixels.
; 888  :     if (x > 0) {

	cmp	DWORD PTR _x$[ebp], 0
	jle	$LN14@init_lcu_t

; 889  :       int y_min_in_lcu = (y>0) ? 0 : 1;

	cmp	DWORD PTR _y$[ebp], 0
	jle	SHORT $LN22@init_lcu_t
	mov	DWORD PTR tv238[ebp], 0
	jmp	SHORT $LN23@init_lcu_t
$LN22@init_lcu_t:
	mov	DWORD PTR tv238[ebp], 1
$LN23@init_lcu_t:
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR _y_min_in_lcu$12[ebp], eax

; 890  :       int luma_offset = OFFSET_VER_BUF(x, y, frame, y_min_in_lcu - 1);

	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _y_min_in_lcu$12[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	sub	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [edx+12]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _luma_offset$11[ebp], eax

; 891  :       int chroma_offset = OFFSET_VER_BUF_C(x, y, frame, y_min_in_lcu - 1);

	mov	eax, DWORD PTR _y$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	add	ecx, DWORD PTR _y_min_in_lcu$12[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	sub	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [edx+12]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _chroma_offset$10[ebp], eax

; 892  :       int luma_bytes = (LCU_WIDTH + (1 - y_min_in_lcu)) * sizeof(kvz_pixel);

	mov	eax, 1
	sub	eax, DWORD PTR _y_min_in_lcu$12[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _luma_bytes$9[ebp], eax

; 893  :       int chroma_bytes = (LCU_WIDTH / 2 + (1 - y_min_in_lcu)) * sizeof(kvz_pixel);

	mov	eax, 1
	sub	eax, DWORD PTR _y_min_in_lcu$12[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _chroma_bytes$8[ebp], eax

; 894  : 
; 895  :       memcpy(&lcu->left_ref.y[y_min_in_lcu], &ver_buf->y[luma_offset], luma_bytes);

	mov	eax, DWORD PTR _luma_bytes$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _ver_buf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _luma_offset$11[ebp]
	push	edx
	mov	eax, DWORD PTR _y_min_in_lcu$12[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+195]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 896  :       if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN14@init_lcu_t

; 897  :         memcpy(&lcu->left_ref.u[y_min_in_lcu], &ver_buf->u[chroma_offset], chroma_bytes);

	mov	eax, DWORD PTR _chroma_bytes$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _ver_buf$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _chroma_offset$10[ebp]
	push	edx
	mov	eax, DWORD PTR _y_min_in_lcu$12[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+292]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 898  :         memcpy(&lcu->left_ref.v[y_min_in_lcu], &ver_buf->v[chroma_offset], chroma_bytes);

	mov	eax, DWORD PTR _chroma_bytes$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _ver_buf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _chroma_offset$10[ebp]
	push	edx
	mov	eax, DWORD PTR _y_min_in_lcu$12[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+341]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN14@init_lcu_t:

; 899  :       }
; 900  :     }
; 901  :   }
; 902  : 
; 903  :   // Copy LCU pixels.
; 904  :   {
; 905  :     const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$7[ebp], edx

; 906  :     int x_max = MIN(x + LCU_WIDTH, frame->width) - x;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$7[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN24@init_lcu_t
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv296[ebp], edx
	jmp	SHORT $LN25@init_lcu_t
$LN24@init_lcu_t:
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv296[ebp], ecx
$LN25@init_lcu_t:
	mov	edx, DWORD PTR tv296[ebp]
	sub	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x_max$6[ebp], edx

; 907  :     int y_max = MIN(y + LCU_WIDTH, frame->height) - y;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$7[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN26@init_lcu_t
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv303[ebp], edx
	jmp	SHORT $LN27@init_lcu_t
$LN26@init_lcu_t:
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv303[ebp], ecx
$LN27@init_lcu_t:
	mov	edx, DWORD PTR tv303[ebp]
	sub	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y_max$5[ebp], edx

; 908  : 
; 909  :     int x_c = x / 2;

	mov	eax, DWORD PTR _x$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _x_c$4[ebp], eax

; 910  :     int y_c = y / 2;

	mov	eax, DWORD PTR _y$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _y_c$3[ebp], eax

; 911  :     int x_max_c = x_max / 2;

	mov	eax, DWORD PTR _x_max$6[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _x_max_c$2[ebp], eax

; 912  :     int y_max_c = y_max / 2;

	mov	eax, DWORD PTR _y_max$5[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _y_max_c$1[ebp], eax

; 913  : 
; 914  :     kvz_pixels_blit(&frame->source->y[x + y * frame->source->stride], lcu->ref.y,

	push	64					; 00000040H
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _y_max$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_max$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	add	edx, 392				; 00000188H
	push	edx
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _frame$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR [eax+40]
	add	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, edx
	push	eax
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 915  :                         x_max, y_max, frame->source->stride, LCU_WIDTH);
; 916  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN1@init_lcu_t

; 917  :       kvz_pixels_blit(&frame->source->u[x_c + y_c * frame->source->stride / 2], lcu->ref.u,

	push	32					; 00000020H
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _y_max_c$1[ebp]
	push	edx
	mov	eax, DWORD PTR _x_max_c$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 4488				; 00001188H
	push	ecx
	mov	edx, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _frame$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _y_c$3[ebp]
	imul	edx, DWORD PTR [eax+40]
	mov	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _x_c$4[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, eax
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 918  :                       x_max_c, y_max_c, frame->source->stride / 2, LCU_WIDTH / 2);
; 919  :       kvz_pixels_blit(&frame->source->v[x_c + y_c * frame->source->stride / 2], lcu->ref.v,

	push	32					; 00000020H
	mov	eax, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _y_max_c$1[ebp]
	push	edx
	mov	eax, DWORD PTR _x_max_c$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 5512				; 00001588H
	push	ecx
	mov	edx, DWORD PTR _frame$7[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _frame$7[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _y_c$3[ebp]
	imul	edx, DWORD PTR [eax+40]
	mov	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _x_c$4[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN1@init_lcu_t:

; 920  :                       x_max_c, y_max_c, frame->source->stride / 2, LCU_WIDTH / 2);
; 921  :     }
; 922  :   }
; 923  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_init_lcu_t ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _search_cu
_TEXT	SEGMENT
tv1211 = -948						; size = 4
tv1485 = -944						; size = 8
tv1474 = -944						; size = 8
tv1413 = -944						; size = 8
tv1402 = -944						; size = 8
tv1391 = -944						; size = 8
tv1380 = -944						; size = 8
tv1271 = -944						; size = 8
tv1209 = -944						; size = 8
tv835 = -944						; size = 4
tv663 = -944						; size = 4
tv496 = -944						; size = 4
tv374 = -944						; size = 4
tv355 = -944						; size = 4
tv246 = -944						; size = 4
tv1283 = -940						; size = 4
tv841 = -940						; size = 4
tv833 = -940						; size = 4
tv661 = -940						; size = 4
tv494 = -940						; size = 4
tv479 = -940						; size = 4
tv394 = -940						; size = 4
tv372 = -940						; size = 4
tv353 = -940						; size = 4
tv276 = -940						; size = 4
tv272 = -940						; size = 4
tv244 = -940						; size = 4
tv205 = -940						; size = 4
tv196 = -940						; size = 4
tv185 = -940						; size = 4
tv174 = -940						; size = 4
tv163 = -940						; size = 4
tv152 = -940						; size = 4
tv88 = -940						; size = 4
_mode_bits$1 = -548					; size = 8
_ctx$2 = -532						; size = 4
_split_model$3 = -517					; size = 1
_mode_chroma$4 = -505					; size = 1
_has_chroma$5 = -493					; size = 1
_cu_d1$6 = -484						; size = 4
_ctx$7 = -472						; size = 4
_ctx$8 = -460						; size = 4
_split_model$9 = -445					; size = 1
_cbf$10 = -436						; size = 4
_split_cost$11 = -424					; size = 8
_half_cu$12 = -408					; size = 4
_can_split_cu$ = -393					; size = 1
_mode_bits$13 = -384					; size = 8
_cbf$14 = -368						; size = 4
_has_chroma$15 = -353					; size = 1
_tr_depth$16 = -344					; size = 4
_intra_cost$17 = -332					; size = 8
_intra_mode$18 = -313					; size = 1
_can_use_intra$19 = -301				; size = 1
_cu_width_intra_min$20 = -292				; size = 4
_skip_intra$21 = -277					; size = 1
_i$22 = -268						; size = 4
_last_mode$23 = -256					; size = 4
_first_mode$24 = -244					; size = 4
_mode_bitcost$25 = -232					; size = 4
_mode_cost$26 = -220					; size = 8
_can_use_inter$27 = -201				; size = 1
_cu_width_inter_min$28 = -192				; size = 4
_constr$ = -180						; size = 4
_gop_layer$ = -168					; size = 4
_y_local$ = -156					; size = 4
_x_local$ = -144					; size = 4
_lcu$ = -132						; size = 4
_pu_depth_intra$ = -120					; size = 8
_pu_depth_inter$ = -104					; size = 8
_cur_cu$ = -88						; size = 4
_inter_bitcost$ = -76					; size = 4
_inter_zero_coeff_cost$ = -64				; size = 8
_cost$ = -48						; size = 8
_cu_width$ = -32					; size = 4
_frame$ = -20						; size = 4
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_work_tree$ = 24					; size = 4
_search_cu PROC						; COMDAT

; 461  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 948				; 000003b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-948]
	mov	ecx, 237				; 000000edH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 462  :   const encoder_control_t* ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 463  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 464  :   int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 465  :   double cost = MAX_INT;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _cost$[ebp], xmm0

; 466  :   double inter_zero_coeff_cost = MAX_INT;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _inter_zero_coeff_cost$[ebp], xmm0

; 467  :   uint32_t inter_bitcost = MAX_INT;

	mov	DWORD PTR _inter_bitcost$[ebp], 2147483647 ; 7fffffffH

; 468  :   cu_info_t *cur_cu;
; 469  : 
; 470  :   struct {
; 471  :     int32_t min;
; 472  :     int32_t max;
; 473  :   } pu_depth_inter, pu_depth_intra;
; 474  : 
; 475  :   lcu_t *const lcu = &work_tree[depth];

	imul	eax, DWORD PTR _depth$[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	mov	DWORD PTR _lcu$[ebp], eax

; 476  : 
; 477  :   int x_local = SUB_SCU(x);

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 478  :   int y_local = SUB_SCU(y);

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 479  : 
; 480  :   // Stop recursion if the CU is completely outside the frame.
; 481  :   if (x >= frame->width || y >= frame->height) {

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN6@search_cu
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN5@search_cu
$LN6@search_cu:

; 482  :     // Return zero cost because this CU does not have to be coded.
; 483  :     return 0;

	fldz
	jmp	$LN1@search_cu
$LN5@search_cu:

; 484  :   }
; 485  : 
; 486  :   int gop_layer = ctrl->cfg.gop_len != 0 ? ctrl->cfg.gop[state->frame->gop_offset].layer - 1 : 0;

	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN54@search_cu
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+16]
	shl	ecx, 6
	mov	edx, DWORD PTR _ctrl$[ebp]
	movsx	eax, BYTE PTR [edx+ecx+290]
	sub	eax, 1
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN55@search_cu
$LN54@search_cu:
	mov	DWORD PTR tv88[ebp], 0
$LN55@search_cu:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _gop_layer$[ebp], ecx

; 487  : 
; 488  :   // Assign correct depth limit
; 489  :   constraint_t* constr = state->constraint;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _constr$[ebp], ecx

; 490  :  if(constr->ml_intra_depth_ctu) {

	mov	eax, DWORD PTR _constr$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@search_cu

; 491  :     pu_depth_intra.min = constr->ml_intra_depth_ctu->_mat_upper_depth[(x_local >> 3) + (y_local >> 3) * 8];

	mov	eax, DWORD PTR _constr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _x_local$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _y_local$[ebp]
	sar	eax, 3
	lea	edx, DWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR [ecx+4]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _pu_depth_intra$[ebp], ecx

; 492  :     pu_depth_intra.max = constr->ml_intra_depth_ctu->_mat_lower_depth[(x_local >> 3) + (y_local >> 3) * 8];

	mov	eax, DWORD PTR _constr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _x_local$[ebp]
	sar	edx, 3
	mov	eax, DWORD PTR _y_local$[ebp]
	sar	eax, 3
	lea	edx, DWORD PTR [edx+eax*8]
	mov	eax, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _pu_depth_intra$[ebp+4], ecx

; 493  :   }

	jmp	$LN8@search_cu
$LN7@search_cu:

; 494  :   else {
; 495  :     pu_depth_intra.min = ctrl->cfg.pu_depth_intra.min[gop_layer] >= 0 ? ctrl->cfg.pu_depth_intra.min[gop_layer] : ctrl->cfg.pu_depth_intra.min[0];

	mov	eax, DWORD PTR _gop_layer$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+eax*4+224], 0
	jl	SHORT $LN56@search_cu
	mov	edx, DWORD PTR _gop_layer$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+224]
	mov	DWORD PTR tv152[ebp], ecx
	jmp	SHORT $LN57@search_cu
$LN56@search_cu:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+224]
	mov	DWORD PTR tv152[ebp], edx
$LN57@search_cu:
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR _pu_depth_intra$[ebp], eax

; 496  :     pu_depth_intra.max = ctrl->cfg.pu_depth_intra.max[gop_layer] >= 0 ? ctrl->cfg.pu_depth_intra.max[gop_layer] : ctrl->cfg.pu_depth_intra.max[0];

	mov	eax, DWORD PTR _gop_layer$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+eax*4+248], 0
	jl	SHORT $LN58@search_cu
	mov	edx, DWORD PTR _gop_layer$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+248]
	mov	DWORD PTR tv163[ebp], ecx
	jmp	SHORT $LN59@search_cu
$LN58@search_cu:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+248]
	mov	DWORD PTR tv163[ebp], edx
$LN59@search_cu:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR _pu_depth_intra$[ebp+4], eax
$LN8@search_cu:

; 497  :   }
; 498  :   pu_depth_inter.min = ctrl->cfg.pu_depth_inter.min[gop_layer] >= 0 ? ctrl->cfg.pu_depth_inter.min[gop_layer] : ctrl->cfg.pu_depth_inter.min[0];

	mov	eax, DWORD PTR _gop_layer$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+eax*4+176], 0
	jl	SHORT $LN60@search_cu
	mov	edx, DWORD PTR _gop_layer$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+176]
	mov	DWORD PTR tv174[ebp], ecx
	jmp	SHORT $LN61@search_cu
$LN60@search_cu:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+176]
	mov	DWORD PTR tv174[ebp], edx
$LN61@search_cu:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR _pu_depth_inter$[ebp], eax

; 499  :   pu_depth_inter.max = ctrl->cfg.pu_depth_inter.max[gop_layer] >= 0 ? ctrl->cfg.pu_depth_inter.max[gop_layer] : ctrl->cfg.pu_depth_inter.max[0];

	mov	eax, DWORD PTR _gop_layer$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+eax*4+200], 0
	jl	SHORT $LN62@search_cu
	mov	edx, DWORD PTR _gop_layer$[ebp]
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200]
	mov	DWORD PTR tv185[ebp], ecx
	jmp	SHORT $LN63@search_cu
$LN62@search_cu:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctrl$[ebp]
	mov	edx, DWORD PTR [ecx+eax+200]
	mov	DWORD PTR tv185[ebp], edx
$LN63@search_cu:
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR _pu_depth_inter$[ebp+4], eax

; 500  : 
; 501  :   cur_cu = LCU_GET_CU_AT_PX(lcu, x_local, y_local);

	mov	eax, DWORD PTR _x_local$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cur_cu$[ebp], eax

; 502  :   // Assign correct depth
; 503  :   cur_cu->depth = depth > MAX_DEPTH ? MAX_DEPTH : depth;

	cmp	DWORD PTR _depth$[ebp], 3
	jle	SHORT $LN64@search_cu
	mov	DWORD PTR tv196[ebp], 3
	jmp	SHORT $LN65@search_cu
$LN64@search_cu:
	mov	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv196[ebp], eax
$LN65@search_cu:
	mov	cl, BYTE PTR tv196[ebp]
	and	cl, 7
	shl	cl, 2
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 227					; 000000e3H
	or	al, cl
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [ecx], al

; 504  :   cur_cu->tr_depth = depth > 0 ? depth : 1;

	cmp	DWORD PTR _depth$[ebp], 0
	jle	SHORT $LN66@search_cu
	mov	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN67@search_cu
$LN66@search_cu:
	mov	DWORD PTR tv205[ebp], 1
$LN67@search_cu:
	mov	cl, BYTE PTR tv205[ebp]
	and	cl, 7
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx+1]
	and	al, 248					; 000000f8H
	or	al, cl
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [ecx+1], al

; 505  :   cur_cu->type = CU_NOTSET;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 252					; 000000fcH
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl

; 506  :   cur_cu->part_size = SIZE_2Nx2N;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 31					; 0000001fH
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl

; 507  :   cur_cu->qp = state->qp;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+312]
	mov	BYTE PTR [eax+6], dl

; 508  : 
; 509  :   // If the CU is completely inside the frame at this depth, search for
; 510  :   // prediction modes at this depth.
; 511  :   if (x + cu_width <= frame->width &&

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jg	$LN21@search_cu
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jg	$LN21@search_cu

; 512  :       y + cu_width <= frame->height)
; 513  :   {
; 514  :     int cu_width_inter_min = LCU_WIDTH >> pu_depth_inter.max;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _pu_depth_inter$[ebp+4]
	sar	eax, cl
	mov	DWORD PTR _cu_width_inter_min$28[ebp], eax

; 515  :     bool can_use_inter =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	SHORT $LN68@search_cu
	cmp	DWORD PTR _depth$[ebp], 3
	jg	SHORT $LN68@search_cu
	mov	edx, DWORD PTR _pu_depth_inter$[ebp]
	cmp	edx, DWORD PTR _depth$[ebp]
	jg	SHORT $LN69@search_cu
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _pu_depth_inter$[ebp+4]
	jle	SHORT $LN70@search_cu
$LN69@search_cu:
	mov	ecx, DWORD PTR _cu_width_inter_min$28[ebp]
	sub	ecx, 1
	not	ecx
	and	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _cu_width_inter_min$28[ebp]
	mov	edx, DWORD PTR _frame$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	jg	SHORT $LN70@search_cu
	mov	eax, DWORD PTR _cu_width_inter_min$28[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width_inter_min$28[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jle	SHORT $LN68@search_cu
$LN70@search_cu:
	mov	DWORD PTR tv244[ebp], 1
	jmp	SHORT $LN71@search_cu
$LN68@search_cu:
	mov	DWORD PTR tv244[ebp], 0
$LN71@search_cu:
	cmp	DWORD PTR tv244[ebp], 0
	jne	SHORT $LN72@search_cu
	mov	DWORD PTR tv246[ebp], 0
	jmp	SHORT $LN73@search_cu
$LN72@search_cu:
	mov	DWORD PTR tv246[ebp], 1
$LN73@search_cu:
	mov	dl, BYTE PTR tv246[ebp]
	mov	BYTE PTR _can_use_inter$27[ebp], dl

; 516  :       state->frame->slicetype != KVZ_SLICE_I &&
; 517  :       depth <= MAX_DEPTH &&
; 518  :       (
; 519  :         WITHIN(depth, pu_depth_inter.min, pu_depth_inter.max) ||
; 520  :         // When the split was forced because the CTU is partially outside the
; 521  :         // frame, we permit inter coding even if pu_depth_inter would
; 522  :         // otherwise forbid it.
; 523  :         (x & ~(cu_width_inter_min - 1)) + cu_width_inter_min > frame->width ||
; 524  :         (y & ~(cu_width_inter_min - 1)) + cu_width_inter_min > frame->height
; 525  :       );
; 526  : 
; 527  :     if (can_use_inter) {

	movzx	eax, BYTE PTR _can_use_inter$27[ebp]
	test	eax, eax
	je	$LN3@search_cu

; 528  :       double mode_cost;
; 529  :       uint32_t mode_bitcost;
; 530  :       kvz_search_cu_inter(state,

	lea	eax, DWORD PTR _mode_bitcost$25[ebp]
	push	eax
	lea	ecx, DWORD PTR _mode_cost$26[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_search_cu_inter
	add	esp, 28					; 0000001cH

; 531  :                           x, y,
; 532  :                           depth,
; 533  :                           lcu,
; 534  :                           &mode_cost, &mode_bitcost);
; 535  :       if (mode_cost < cost) {

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _mode_cost$26[ebp]
	jbe	SHORT $LN11@search_cu

; 536  :         cost = mode_cost;

	movsd	xmm0, QWORD PTR _mode_cost$26[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 537  :         inter_bitcost = mode_bitcost;

	mov	eax, DWORD PTR _mode_bitcost$25[ebp]
	mov	DWORD PTR _inter_bitcost$[ebp], eax

; 538  :         cur_cu->type = CU_INTER;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 252					; 000000fcH
	or	cl, 2
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl
$LN11@search_cu:

; 539  :       }
; 540  : 
; 541  :       if (!(ctrl->cfg.early_skip && cur_cu->skipped)) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+2442]
	test	ecx, ecx
	je	SHORT $LN13@search_cu
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	$LN3@search_cu
$LN13@search_cu:

; 542  :         // Try SMP and AMP partitioning.
; 543  :         static const part_mode_t mp_modes[] = {
; 544  :           // SMP
; 545  :           SIZE_2NxN, SIZE_Nx2N,
; 546  :           // AMP
; 547  :           SIZE_2NxnU, SIZE_2NxnD,
; 548  :           SIZE_nLx2N, SIZE_nRx2N,
; 549  :         };
; 550  : 
; 551  :         const int first_mode = ctrl->cfg.smp_enable ? 0 : 2;

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN74@search_cu
	mov	DWORD PTR tv272[ebp], 0
	jmp	SHORT $LN75@search_cu
$LN74@search_cu:
	mov	DWORD PTR tv272[ebp], 2
$LN75@search_cu:
	mov	ecx, DWORD PTR tv272[ebp]
	mov	DWORD PTR _first_mode$24[ebp], ecx

; 552  :         const int last_mode = (ctrl->cfg.amp_enable && cu_width >= 16) ? 5 : 1;

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN76@search_cu
	cmp	DWORD PTR _cu_width$[ebp], 16		; 00000010H
	jl	SHORT $LN76@search_cu
	mov	DWORD PTR tv276[ebp], 5
	jmp	SHORT $LN77@search_cu
$LN76@search_cu:
	mov	DWORD PTR tv276[ebp], 1
$LN77@search_cu:
	mov	ecx, DWORD PTR tv276[ebp]
	mov	DWORD PTR _last_mode$23[ebp], ecx

; 553  :         for (int i = first_mode; i <= last_mode; ++i) {

	mov	eax, DWORD PTR _first_mode$24[ebp]
	mov	DWORD PTR _i$22[ebp], eax
	jmp	SHORT $LN4@search_cu
$LN2@search_cu:
	mov	eax, DWORD PTR _i$22[ebp]
	add	eax, 1
	mov	DWORD PTR _i$22[ebp], eax
$LN4@search_cu:
	mov	eax, DWORD PTR _i$22[ebp]
	cmp	eax, DWORD PTR _last_mode$23[ebp]
	jg	$LN3@search_cu

; 554  :           kvz_search_cu_smp(state,

	lea	eax, DWORD PTR _mode_bitcost$25[ebp]
	push	eax
	lea	ecx, DWORD PTR _mode_cost$26[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	imul	eax, edx, 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$22[ebp]
	mov	edx, DWORD PTR ?mp_modes@?8??search_cu@@9@9[ecx*4]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_search_cu_smp
	add	esp, 32					; 00000020H

; 555  :                             x, y,
; 556  :                             depth,
; 557  :                             mp_modes[i],
; 558  :                             &work_tree[depth + 1],
; 559  :                             &mode_cost, &mode_bitcost);
; 560  :           if (mode_cost < cost) {

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _mode_cost$26[ebp]
	jbe	SHORT $LN14@search_cu

; 561  :             cost = mode_cost;

	movsd	xmm0, QWORD PTR _mode_cost$26[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 562  :             inter_bitcost = mode_bitcost;

	mov	eax, DWORD PTR _mode_bitcost$25[ebp]
	mov	DWORD PTR _inter_bitcost$[ebp], eax

; 563  :             // Copy inter prediction info to current level.
; 564  :             copy_cu_info(x_local, y_local, cu_width, &work_tree[depth + 1], lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	imul	edx, ecx, 30776
	add	edx, DWORD PTR _work_tree$[ebp]
	push	edx
	mov	eax, DWORD PTR _cu_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_info
	add	esp, 20					; 00000014H
$LN14@search_cu:

; 565  :           }
; 566  :         }

	jmp	$LN2@search_cu
$LN3@search_cu:

; 567  :       }
; 568  :     }
; 569  : 
; 570  :     // Try to skip intra search in rd==0 mode.
; 571  :     // This can be quite severe on bdrate. It might be better to do this
; 572  :     // decision after reconstructing the inter frame.
; 573  :     bool skip_intra = (state->encoder_control->cfg.rdo == 0

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN78@search_cu
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 3
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN78@search_cu
	mov	edx, DWORD PTR _cu_width$[ebp]
	imul	edx, DWORD PTR _cu_width$[ebp]
	cvtsi2sd xmm0, edx
	movsd	xmm1, QWORD PTR _cost$[ebp]
	divsd	xmm1, xmm0
	cvtsi2sd xmm0, DWORD PTR _INTRA_THRESHOLD
	comisd	xmm0, xmm1
	ja	SHORT $LN80@search_cu
$LN78@search_cu:
	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+2442]
	test	ecx, ecx
	je	SHORT $LN79@search_cu
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx+1]
	shr	al, 3
	and	al, 1
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN80@search_cu
$LN79@search_cu:
	mov	DWORD PTR tv353[ebp], 0
	jmp	SHORT $LN81@search_cu
$LN80@search_cu:
	mov	DWORD PTR tv353[ebp], 1
$LN81@search_cu:
	cmp	DWORD PTR tv353[ebp], 0
	jne	SHORT $LN82@search_cu
	mov	DWORD PTR tv355[ebp], 0
	jmp	SHORT $LN83@search_cu
$LN82@search_cu:
	mov	DWORD PTR tv355[ebp], 1
$LN83@search_cu:
	mov	dl, BYTE PTR tv355[ebp]
	mov	BYTE PTR _skip_intra$21[ebp], dl

; 574  :                       && cur_cu->type != CU_NOTSET
; 575  :                       && cost / (cu_width * cu_width) < INTRA_THRESHOLD)
; 576  :                       || (ctrl->cfg.early_skip && cur_cu->skipped);
; 577  : 
; 578  :     int32_t cu_width_intra_min = LCU_WIDTH >> pu_depth_intra.max;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _pu_depth_intra$[ebp+4]
	sar	eax, cl
	mov	DWORD PTR _cu_width_intra_min$20[ebp], eax

; 579  :     bool can_use_intra =

	mov	eax, DWORD PTR _pu_depth_intra$[ebp]
	cmp	eax, DWORD PTR _depth$[ebp]
	jg	SHORT $LN84@search_cu
	mov	ecx, DWORD PTR _depth$[ebp]
	cmp	ecx, DWORD PTR _pu_depth_intra$[ebp+4]
	jle	SHORT $LN85@search_cu
$LN84@search_cu:
	mov	edx, DWORD PTR _cu_width_intra_min$20[ebp]
	sub	edx, 1
	not	edx
	and	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _cu_width_intra_min$20[ebp]
	mov	eax, DWORD PTR _frame$[ebp]
	cmp	edx, DWORD PTR [eax+8]
	jg	SHORT $LN85@search_cu
	mov	ecx, DWORD PTR _cu_width_intra_min$20[ebp]
	sub	ecx, 1
	not	ecx
	and	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _cu_width_intra_min$20[ebp]
	mov	edx, DWORD PTR _frame$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jg	SHORT $LN85@search_cu
	mov	DWORD PTR tv372[ebp], 0
	jmp	SHORT $LN86@search_cu
$LN85@search_cu:
	mov	DWORD PTR tv372[ebp], 1
$LN86@search_cu:
	cmp	DWORD PTR tv372[ebp], 0
	jne	SHORT $LN87@search_cu
	mov	DWORD PTR tv374[ebp], 0
	jmp	SHORT $LN88@search_cu
$LN87@search_cu:
	mov	DWORD PTR tv374[ebp], 1
$LN88@search_cu:
	mov	al, BYTE PTR tv374[ebp]
	mov	BYTE PTR _can_use_intra$19[ebp], al

; 580  :         WITHIN(depth, pu_depth_intra.min, pu_depth_intra.max) ||
; 581  :         // When the split was forced because the CTU is partially outside
; 582  :         // the frame, we permit intra coding even if pu_depth_intra would
; 583  :         // otherwise forbid it.
; 584  :         (x & ~(cu_width_intra_min - 1)) + cu_width_intra_min > frame->width ||
; 585  :         (y & ~(cu_width_intra_min - 1)) + cu_width_intra_min > frame->height;
; 586  : 
; 587  :     if (can_use_intra && !skip_intra) {

	movzx	eax, BYTE PTR _can_use_intra$19[ebp]
	test	eax, eax
	je	$LN16@search_cu
	movzx	eax, BYTE PTR _skip_intra$21[ebp]
	test	eax, eax
	jne	$LN16@search_cu

; 588  :       int8_t intra_mode;
; 589  :       double intra_cost;
; 590  :       kvz_search_cu_intra(state, x, y, depth, lcu,

	lea	eax, DWORD PTR _intra_cost$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _intra_mode$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_search_cu_intra
	add	esp, 28					; 0000001cH

; 591  :                           &intra_mode, &intra_cost);
; 592  :       if (intra_cost < cost) {

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _intra_cost$17[ebp]
	jbe	SHORT $LN16@search_cu

; 593  :         cost = intra_cost;

	movsd	xmm0, QWORD PTR _intra_cost$17[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 594  :         cur_cu->type = CU_INTRA;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 252					; 000000fcH
	or	cl, 1
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl

; 595  :         cur_cu->part_size = depth > MAX_DEPTH ? SIZE_NxN : SIZE_2Nx2N;

	cmp	DWORD PTR _depth$[ebp], 3
	jle	SHORT $LN89@search_cu
	mov	DWORD PTR tv394[ebp], 3
	jmp	SHORT $LN90@search_cu
$LN89@search_cu:
	mov	DWORD PTR tv394[ebp], 0
$LN90@search_cu:
	mov	al, BYTE PTR tv394[ebp]
	and	al, 7
	shl	al, 5
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	dl, BYTE PTR [ecx]
	and	dl, 31					; 0000001fH
	or	dl, al
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [eax], dl

; 596  :         cur_cu->intra.mode = intra_mode;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR _intra_mode$18[ebp]
	mov	BYTE PTR [eax+8], cl
$LN16@search_cu:

; 597  :       }
; 598  :     }
; 599  : 
; 600  :     // Reconstruct best mode because we need the reconstructed pixels for
; 601  :     // mode search of adjacent CUs.
; 602  :     if (cur_cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	$LN17@search_cu

; 603  :       assert(cur_cu->part_size == SIZE_2Nx2N || cur_cu->part_size == SIZE_NxN);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN91@search_cu
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 3
	je	SHORT $LN91@search_cu
	mov	eax, DWORD PTR ?__LINE__Var@?0??search_cu@@9@9
	add	eax, 142				; 0000008eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1IC@EAICHMBM@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAt?$AA_?$AAs?$AAi@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN91@search_cu:

; 604  :       cur_cu->intra.mode_chroma = cur_cu->intra.mode;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+9], dl

; 605  :       lcu_fill_cu_info(lcu, x_local, y_local, cu_width, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	call	_lcu_fill_cu_info
	add	esp, 24					; 00000018H

; 606  :       kvz_intra_recon_cu(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	push	-1
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 607  :                          x, y,
; 608  :                          depth,
; 609  :                          cur_cu->intra.mode, -1, // skip chroma
; 610  :                          NULL, lcu);
; 611  : 
; 612  :       if (x % 8 == 0 && y % 8 == 0 && state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN118@search_cu
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN118@search_cu:
	test	eax, eax
	jne	$LN19@search_cu
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN119@search_cu
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN119@search_cu:
	test	eax, eax
	jne	$LN19@search_cu
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN19@search_cu

; 613  :         // There is almost no benefit to doing the chroma mode search for
; 614  :         // rd2. Possibly because the luma mode search already takes chroma
; 615  :         // into account, so there is less of a chanse of luma mode being
; 616  :         // really bad for chroma.
; 617  :         if (ctrl->cfg.rdo == 3) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+64], 3
	jne	SHORT $LN20@search_cu

; 618  :           cur_cu->intra.mode_chroma = kvz_search_cu_intra_chroma(state, x, y, depth, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_search_cu_intra_chroma
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx+9], al

; 619  :           lcu_fill_cu_info(lcu, x_local, y_local, cu_width, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	call	_lcu_fill_cu_info
	add	esp, 24					; 00000018H
$LN20@search_cu:

; 620  :         }
; 621  : 
; 622  :         kvz_intra_recon_cu(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	push	edx
	push	-1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H
$LN19@search_cu:

; 623  :                            x, y,
; 624  :                            depth,
; 625  :                            -1, cur_cu->intra.mode_chroma, // skip luma
; 626  :                            NULL, lcu);
; 627  :       }

	jmp	$LN21@search_cu
$LN17@search_cu:

; 628  :     } else if (cur_cu->type == CU_INTER) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	$LN21@search_cu

; 629  : 
; 630  :       if (!cur_cu->skipped) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	$LN26@search_cu

; 631  :         // Reset transform depth because intra messes with them.
; 632  :         // This will no longer be necessary if the transform depths are not shared.
; 633  :         int tr_depth = MAX(1, depth);

	cmp	DWORD PTR _depth$[ebp], 1
	jge	SHORT $LN92@search_cu
	mov	DWORD PTR tv479[ebp], 1
	jmp	SHORT $LN93@search_cu
$LN92@search_cu:
	mov	eax, DWORD PTR _depth$[ebp]
	mov	DWORD PTR tv479[ebp], eax
$LN93@search_cu:
	mov	ecx, DWORD PTR tv479[ebp]
	mov	DWORD PTR _tr_depth$16[ebp], ecx

; 634  :         if (cur_cu->part_size != SIZE_2Nx2N) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN23@search_cu

; 635  :           tr_depth = depth + 1;

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	mov	DWORD PTR _tr_depth$16[ebp], eax
$LN23@search_cu:

; 636  :         }
; 637  :         kvz_lcu_fill_trdepth(lcu, x, y, depth, tr_depth);

	mov	eax, DWORD PTR _tr_depth$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H

; 638  : 
; 639  :         const bool has_chroma = state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN94@search_cu
	mov	DWORD PTR tv494[ebp], 1
	jmp	SHORT $LN95@search_cu
$LN94@search_cu:
	mov	DWORD PTR tv494[ebp], 0
$LN95@search_cu:
	cmp	DWORD PTR tv494[ebp], 0
	jne	SHORT $LN96@search_cu
	mov	DWORD PTR tv496[ebp], 0
	jmp	SHORT $LN97@search_cu
$LN96@search_cu:
	mov	DWORD PTR tv496[ebp], 1
$LN97@search_cu:
	mov	dl, BYTE PTR tv496[ebp]
	mov	BYTE PTR _has_chroma$15[ebp], dl

; 640  :         kvz_inter_recon_cu(state, lcu, x, y, cu_width, true, has_chroma);

	movzx	eax, BYTE PTR _has_chroma$15[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_inter_recon_cu
	add	esp, 28					; 0000001cH

; 641  : 
; 642  :         if (ctrl->cfg.zero_coeff_rdo && !ctrl->cfg.lossless && !ctrl->cfg.rdoq_enable) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+2450]
	test	ecx, ecx
	je	SHORT $LN24@search_cu
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	jne	SHORT $LN24@search_cu
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN24@search_cu

; 643  :           //Calculate cost for zero coeffs
; 644  :           inter_zero_coeff_cost = cu_zero_coeff_cost(state, work_tree, x, y, depth) + inter_bitcost * state->lambda;

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_cu_zero_coeff_cost
	add	esp, 20					; 00000014H
	fstp	QWORD PTR tv1209[ebp]
	movsd	xmm0, QWORD PTR tv1209[ebp]
	mov	edx, DWORD PTR _inter_bitcost$[ebp]
	mov	DWORD PTR tv1211[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv1211[ebp]
	mov	eax, DWORD PTR tv1211[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mov	ecx, DWORD PTR _state$[ebp]
	mulsd	xmm1, QWORD PTR [ecx+296]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _inter_zero_coeff_cost$[ebp], xmm0
$LN24@search_cu:

; 645  : 
; 646  :         }
; 647  : 
; 648  :         kvz_quantize_lcu_residual(state,

	push	0
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _has_chroma$15[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_quantize_lcu_residual
	add	esp, 36					; 00000024H

; 649  :           true, has_chroma,
; 650  :           x, y, depth,
; 651  :           NULL,
; 652  :           lcu,
; 653  :           false);
; 654  : 
; 655  :         int cbf = cbf_is_set_any(cur_cu->cbf, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set_any
	add	esp, 8
	mov	DWORD PTR _cbf$14[ebp], eax

; 656  : 
; 657  :         if (cur_cu->merged && !cbf && cur_cu->part_size == SIZE_2Nx2N) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN26@search_cu
	cmp	DWORD PTR _cbf$14[ebp], 0
	jne	SHORT $LN26@search_cu
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN26@search_cu

; 658  :           cur_cu->merged = 0;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 239					; 000000efH
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx+1], cl

; 659  :           cur_cu->skipped = 1;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	or	cl, 8
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx+1], cl

; 660  :           // Selecting skip reduces bits needed to code the CU
; 661  :           if (inter_bitcost > 1) {

	cmp	DWORD PTR _inter_bitcost$[ebp], 1
	jbe	SHORT $LN26@search_cu

; 662  :             inter_bitcost -= 1;

	mov	eax, DWORD PTR _inter_bitcost$[ebp]
	sub	eax, 1
	mov	DWORD PTR _inter_bitcost$[ebp], eax
$LN26@search_cu:

; 663  :           }
; 664  :         }
; 665  :       }
; 666  :       lcu_fill_inter(lcu, x_local, y_local, cu_width);

	mov	eax, DWORD PTR _cu_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	call	_lcu_fill_inter
	add	esp, 16					; 00000010H

; 667  :       lcu_fill_cbf(lcu, x_local, y_local, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_lcu_fill_cbf
	add	esp, 20					; 00000014H
$LN21@search_cu:

; 668  :     }
; 669  :   }
; 670  : 
; 671  :   if (cur_cu->type == CU_INTRA || cur_cu->type == CU_INTER) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN28@search_cu
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	$LN32@search_cu
$LN28@search_cu:

; 672  :     cost = kvz_cu_rd_cost_luma(state, x_local, y_local, depth, cur_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR _cost$[ebp]

; 673  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN29@search_cu

; 674  :       cost += kvz_cu_rd_cost_chroma(state, x_local, y_local, depth, cur_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv1271[ebp]
	movsd	xmm0, QWORD PTR tv1271[ebp]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0
$LN29@search_cu:

; 675  :     }
; 676  : 
; 677  :     double mode_bits;
; 678  :     if (cur_cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN30@search_cu

; 679  :       mode_bits = calc_mode_bits(state, lcu, cur_cu, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_calc_mode_bits
	add	esp, 20					; 00000014H
	fstp	QWORD PTR _mode_bits$13[ebp]

; 680  :     } else {

	jmp	SHORT $LN31@search_cu
$LN30@search_cu:

; 681  :       mode_bits = inter_bitcost;

	mov	eax, DWORD PTR _inter_bitcost$[ebp]
	mov	DWORD PTR tv1283[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1283[ebp]
	mov	ecx, DWORD PTR tv1283[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR _mode_bits$13[ebp], xmm0
$LN31@search_cu:

; 682  :     }
; 683  : 
; 684  :     cost += mode_bits * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _mode_bits$13[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 685  : 
; 686  :     if (ctrl->cfg.zero_coeff_rdo && inter_zero_coeff_cost <= cost) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	movzx	ecx, BYTE PTR [eax+2450]
	test	ecx, ecx
	je	$LN32@search_cu
	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _inter_zero_coeff_cost$[ebp]
	jb	$LN32@search_cu

; 687  :       cost = inter_zero_coeff_cost;

	movsd	xmm0, QWORD PTR _inter_zero_coeff_cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 688  : 
; 689  :       // Restore saved pixels from lower level of the working tree.
; 690  :       copy_cu_pixels(x_local, y_local, cu_width, &work_tree[depth + 1], lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	imul	edx, ecx, 30776
	add	edx, DWORD PTR _work_tree$[ebp]
	push	edx
	mov	eax, DWORD PTR _cu_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_pixels
	add	esp, 20					; 00000014H

; 691  : 
; 692  :       if (cur_cu->merged && cur_cu->part_size == SIZE_2Nx2N) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN33@search_cu
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN33@search_cu

; 693  :         cur_cu->merged = 0;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 239					; 000000efH
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx+1], cl

; 694  :         cur_cu->skipped = 1;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	or	cl, 8
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx+1], cl

; 695  :         lcu_fill_cu_info(lcu, x_local, y_local, cu_width, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	call	_lcu_fill_cu_info
	add	esp, 24					; 00000018H
$LN33@search_cu:

; 696  :       }
; 697  : 
; 698  :       if (cur_cu->tr_depth != depth) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	cmp	edx, DWORD PTR _depth$[ebp]
	je	SHORT $LN34@search_cu

; 699  :         // Reset transform depth since there are no coefficients. This
; 700  :         // ensures that CBF is cleared for the whole area of the CU.
; 701  :         kvz_lcu_fill_trdepth(lcu, x, y, depth, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H
$LN34@search_cu:

; 702  :       }
; 703  : 
; 704  :       cur_cu->cbf = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	WORD PTR [ecx+4], ax

; 705  :       lcu_fill_cbf(lcu, x_local, y_local, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	call	_lcu_fill_cbf
	add	esp, 20					; 00000014H
$LN32@search_cu:

; 706  :     }
; 707  :   }
; 708  : 
; 709  :   bool can_split_cu =

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN98@search_cu
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _pu_depth_intra$[ebp+4]
	jl	SHORT $LN98@search_cu
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+84], 2
	je	SHORT $LN99@search_cu
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _pu_depth_inter$[ebp+4]
	jl	SHORT $LN98@search_cu
$LN99@search_cu:
	mov	DWORD PTR tv661[ebp], 0
	jmp	SHORT $LN100@search_cu
$LN98@search_cu:
	mov	DWORD PTR tv661[ebp], 1
$LN100@search_cu:
	cmp	DWORD PTR tv661[ebp], 0
	jne	SHORT $LN101@search_cu
	mov	DWORD PTR tv663[ebp], 0
	jmp	SHORT $LN102@search_cu
$LN101@search_cu:
	mov	DWORD PTR tv663[ebp], 1
$LN102@search_cu:
	mov	cl, BYTE PTR tv663[ebp]
	mov	BYTE PTR _can_split_cu$[ebp], cl

; 710  :     // If the CU is partially outside the frame, we need to split it even
; 711  :     // if pu_depth_intra and pu_depth_inter would not permit it.
; 712  :     cur_cu->type == CU_NOTSET ||
; 713  :     depth < pu_depth_intra.max ||
; 714  :     (state->frame->slicetype != KVZ_SLICE_I &&
; 715  :       depth < pu_depth_inter.max);
; 716  : 
; 717  :   // Recursively split all the way to max search depth.
; 718  :   if (can_split_cu) {

	movzx	eax, BYTE PTR _can_split_cu$[ebp]
	test	eax, eax
	je	$LN35@search_cu

; 719  :     int half_cu = cu_width / 2;

	mov	eax, DWORD PTR _cu_width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _half_cu$12[ebp], eax

; 720  :     double split_cost = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _split_cost$11[ebp], xmm0

; 721  :     int cbf = cbf_is_set_any(cur_cu->cbf, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set_any
	add	esp, 8
	mov	DWORD PTR _cbf$10[ebp], eax

; 722  : 
; 723  :     if (depth < MAX_DEPTH) {

	cmp	DWORD PTR _depth$[ebp], 3
	jge	$LN37@search_cu

; 724  :       // Add cost of cu_split_flag.
; 725  :       uint8_t split_model = get_ctx_cu_split_model(lcu, x, y, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	call	_get_ctx_cu_split_model
	add	esp, 16					; 00000010H
	mov	BYTE PTR _split_model$9[ebp], al

; 726  :       const cabac_ctx_t *ctx = &(state->cabac.ctx.split_flag_model[split_model]);

	movzx	eax, BYTE PTR _split_model$9[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax+98]
	mov	DWORD PTR _ctx$8[ebp], edx

; 727  :       cost += CTX_ENTROPY_FBITS(ctx, 0) * state->lambda;

	mov	eax, DWORD PTR _ctx$8[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	mov	edx, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [edx+296]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 728  :       split_cost += CTX_ENTROPY_FBITS(ctx, 1) * state->lambda;

	mov	eax, DWORD PTR _ctx$8[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	mov	edx, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [edx+296]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN37@search_cu:

; 729  :     }
; 730  : 
; 731  :     if (cur_cu->type == CU_INTRA && depth == MAX_DEPTH) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN38@search_cu
	cmp	DWORD PTR _depth$[ebp], 3
	jne	SHORT $LN38@search_cu

; 732  :       // Add cost of intra part_size.
; 733  :       const cabac_ctx_t *ctx = &(state->cabac.ctx.part_size_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx+124]
	mov	DWORD PTR _ctx$7[ebp], eax

; 734  :       cost += CTX_ENTROPY_FBITS(ctx, 1) * state->lambda;  // 2Nx2N

	mov	eax, DWORD PTR _ctx$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	mov	edx, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [edx+296]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 735  :       split_cost += CTX_ENTROPY_FBITS(ctx, 0) * state->lambda;  // NxN

	mov	eax, DWORD PTR _ctx$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	mov	edx, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [edx+296]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN38@search_cu:

; 736  :     }
; 737  : 
; 738  :     // If skip mode was selected for the block, skip further search.
; 739  :     // Skip mode means there's no coefficients in the block, so splitting
; 740  :     // might not give any better results but takes more time to do.
; 741  :     // It is ok to interrupt the search as soon as it is known that
; 742  :     // the split costs at least as much as not splitting.
; 743  :     if (cur_cu->type == CU_NOTSET || cbf || state->encoder_control->cfg.cu_split_termination == KVZ_CU_SPLIT_TERMINATION_OFF) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN41@search_cu
	cmp	DWORD PTR _cbf$10[ebp], 0
	jne	SHORT $LN41@search_cu
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2344], 1
	jne	$LN39@search_cu
$LN41@search_cu:

; 744  :       if (split_cost < cost) split_cost += search_cu(state, x,           y,           depth + 1, work_tree);

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$11[ebp]
	jbe	SHORT $LN42@search_cu
	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_cu
	add	esp, 20					; 00000014H
	fstp	QWORD PTR tv1380[ebp]
	movsd	xmm0, QWORD PTR tv1380[ebp]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN42@search_cu:

; 745  :       if (split_cost < cost) split_cost += search_cu(state, x + half_cu, y,           depth + 1, work_tree);

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$11[ebp]
	jbe	SHORT $LN43@search_cu
	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _half_cu$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_cu
	add	esp, 20					; 00000014H
	fstp	QWORD PTR tv1391[ebp]
	movsd	xmm0, QWORD PTR tv1391[ebp]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN43@search_cu:

; 746  :       if (split_cost < cost) split_cost += search_cu(state, x,           y + half_cu, depth + 1, work_tree);

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$11[ebp]
	jbe	SHORT $LN44@search_cu
	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _half_cu$12[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_cu
	add	esp, 20					; 00000014H
	fstp	QWORD PTR tv1402[ebp]
	movsd	xmm0, QWORD PTR tv1402[ebp]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN44@search_cu:

; 747  :       if (split_cost < cost) split_cost += search_cu(state, x + half_cu, y + half_cu, depth + 1, work_tree);

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$11[ebp]
	jbe	SHORT $LN45@search_cu
	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _half_cu$12[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _half_cu$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_search_cu
	add	esp, 20					; 00000014H
	fstp	QWORD PTR tv1413[ebp]
	movsd	xmm0, QWORD PTR tv1413[ebp]
	addsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN45@search_cu:

; 748  :     } else {

	jmp	SHORT $LN40@search_cu
$LN39@search_cu:

; 749  :       split_cost = INT_MAX;

	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	movsd	QWORD PTR _split_cost$11[ebp], xmm0
$LN40@search_cu:

; 750  :     }
; 751  : 
; 752  :     // If no search is not performed for this depth, try just the best mode
; 753  :     // of the top left CU from the next depth. This should ensure that 64x64
; 754  :     // gets used, at least in the most obvious cases, while avoiding any
; 755  :     // searching.
; 756  :     if (cur_cu->type == CU_NOTSET && depth < MAX_PU_DEPTH
; 757  :         && x + cu_width <= frame->width && y + cu_width <= frame->height)

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	test	edx, edx
	jne	$LN47@search_cu
	cmp	DWORD PTR _depth$[ebp], 4
	jge	$LN47@search_cu
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jg	$LN47@search_cu
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jg	$LN47@search_cu

; 758  :     {
; 759  :       cu_info_t *cu_d1 = LCU_GET_CU_AT_PX(&work_tree[depth + 1], x_local, y_local);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	imul	ecx, eax, 30776
	add	ecx, DWORD PTR _work_tree$[ebp]
	mov	edx, DWORD PTR _x_local$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR _y_local$[ebp]
	sar	eax, 2
	imul	eax, eax, 17
	lea	edx, DWORD PTR [edx+eax+18]
	imul	eax, edx, 20
	lea	ecx, DWORD PTR [ecx+eax+24976]
	mov	DWORD PTR _cu_d1$6[ebp], ecx

; 760  : 
; 761  :       // If the best CU in depth+1 is intra and the biggest it can be, try it.
; 762  :       if (cu_d1->type == CU_INTRA && cu_d1->depth == depth + 1) {

	mov	eax, DWORD PTR _cu_d1$6[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	$LN47@search_cu
	mov	eax, DWORD PTR _cu_d1$6[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	cmp	edx, eax
	jne	$LN47@search_cu

; 763  :         cost = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _cost$[ebp], xmm0

; 764  : 
; 765  :         cur_cu->intra = cu_d1->intra;

	mov	eax, DWORD PTR _cu_d1$6[ebp]
	mov	cx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	WORD PTR [edx+8], cx

; 766  :         cur_cu->type = CU_INTRA;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 252					; 000000fcH
	or	cl, 1
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl

; 767  :         cur_cu->part_size = SIZE_2Nx2N;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 31					; 0000001fH
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	BYTE PTR [edx], cl

; 768  : 
; 769  :         kvz_lcu_fill_trdepth(lcu, x, y, depth, cur_cu->tr_depth);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	call	_kvz_lcu_fill_trdepth
	add	esp, 20					; 00000014H

; 770  :         lcu_fill_cu_info(lcu, x_local, y_local, cu_width, cu_width, cur_cu);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cu_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cu_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	call	_lcu_fill_cu_info
	add	esp, 24					; 00000018H

; 771  : 
; 772  :         const bool has_chroma = state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN103@search_cu
	mov	DWORD PTR tv833[ebp], 1
	jmp	SHORT $LN104@search_cu
$LN103@search_cu:
	mov	DWORD PTR tv833[ebp], 0
$LN104@search_cu:
	cmp	DWORD PTR tv833[ebp], 0
	jne	SHORT $LN105@search_cu
	mov	DWORD PTR tv835[ebp], 0
	jmp	SHORT $LN106@search_cu
$LN105@search_cu:
	mov	DWORD PTR tv835[ebp], 1
$LN106@search_cu:
	mov	dl, BYTE PTR tv835[ebp]
	mov	BYTE PTR _has_chroma$5[ebp], dl

; 773  :         const int8_t mode_chroma = has_chroma ? cur_cu->intra.mode_chroma : -1;

	movzx	eax, BYTE PTR _has_chroma$5[ebp]
	test	eax, eax
	je	SHORT $LN107@search_cu
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	mov	DWORD PTR tv841[ebp], edx
	jmp	SHORT $LN108@search_cu
$LN107@search_cu:
	mov	DWORD PTR tv841[ebp], -1
$LN108@search_cu:
	mov	al, BYTE PTR tv841[ebp]
	mov	BYTE PTR _mode_chroma$4[ebp], al

; 774  :         kvz_intra_recon_cu(state,

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _mode_chroma$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_intra_recon_cu
	add	esp, 32					; 00000020H

; 775  :                            x, y,
; 776  :                            depth,
; 777  :                            cur_cu->intra.mode, mode_chroma,
; 778  :                            NULL, lcu);
; 779  : 
; 780  :         cost += kvz_cu_rd_cost_luma(state, x_local, y_local, depth, cur_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv1474[ebp]
	movsd	xmm0, QWORD PTR tv1474[ebp]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 781  :         if (has_chroma) {

	movzx	eax, BYTE PTR _has_chroma$5[ebp]
	test	eax, eax
	je	SHORT $LN48@search_cu

; 782  :           cost += kvz_cu_rd_cost_chroma(state, x_local, y_local, depth, cur_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv1485[ebp]
	movsd	xmm0, QWORD PTR tv1485[ebp]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0
$LN48@search_cu:

; 783  :         }
; 784  : 
; 785  :         // Add the cost of coding no-split.
; 786  :         uint8_t split_model = get_ctx_cu_split_model(lcu, x, y, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	call	_get_ctx_cu_split_model
	add	esp, 16					; 00000010H
	mov	BYTE PTR _split_model$3[ebp], al

; 787  :         const cabac_ctx_t *ctx = &(state->cabac.ctx.split_flag_model[split_model]);

	movzx	eax, BYTE PTR _split_model$3[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax+98]
	mov	DWORD PTR _ctx$2[ebp], edx

; 788  :         cost += CTX_ENTROPY_FBITS(ctx, 0) * state->lambda;

	mov	eax, DWORD PTR _ctx$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	mov	edx, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [edx+296]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 789  : 
; 790  :         // Add the cost of coding intra mode only once.
; 791  :         double mode_bits = calc_mode_bits(state, lcu, cur_cu, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_calc_mode_bits
	add	esp, 20					; 00000014H
	fstp	QWORD PTR _mode_bits$1[ebp]

; 792  :         cost += mode_bits * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _mode_bits$1[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR _cost$[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0
$LN47@search_cu:

; 793  :       }
; 794  :     }
; 795  : 
; 796  :     if (split_cost < cost) {

	movsd	xmm0, QWORD PTR _cost$[ebp]
	comisd	xmm0, QWORD PTR _split_cost$11[ebp]
	jbe	SHORT $LN49@search_cu

; 797  :       // Copy split modes to this depth.
; 798  :       cost = split_cost;

	movsd	xmm0, QWORD PTR _split_cost$11[ebp]
	movsd	QWORD PTR _cost$[ebp], xmm0

; 799  :       work_tree_copy_up(x_local, y_local, depth, work_tree);

	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_local$[ebp]
	push	eax
	call	_work_tree_copy_up
	add	esp, 16					; 00000010H
	jmp	SHORT $LN51@search_cu
$LN49@search_cu:

; 800  : #if KVZ_DEBUG
; 801  :       debug_split = 1;
; 802  : #endif
; 803  :     } else if (depth > 0) {

	cmp	DWORD PTR _depth$[ebp], 0
	jle	SHORT $LN51@search_cu

; 804  :       // Copy this CU's mode all the way down for use in adjacent CUs mode
; 805  :       // search.
; 806  :       work_tree_copy_down(x_local, y_local, depth, work_tree);

	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_local$[ebp]
	push	eax
	call	_work_tree_copy_down
	add	esp, 16					; 00000010H
$LN51@search_cu:

; 807  :     }

	jmp	SHORT $LN52@search_cu
$LN35@search_cu:

; 808  :   } else if (depth >= 0 && depth < MAX_PU_DEPTH) {

	cmp	DWORD PTR _depth$[ebp], 0
	jl	SHORT $LN52@search_cu
	cmp	DWORD PTR _depth$[ebp], 4
	jge	SHORT $LN52@search_cu

; 809  :     // Need to copy modes down since the lower level of the work tree is used
; 810  :     // when searching SMP and AMP blocks.
; 811  :     work_tree_copy_down(x_local, y_local, depth, work_tree);

	mov	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_local$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_local$[ebp]
	push	eax
	call	_work_tree_copy_down
	add	esp, 16					; 00000010H
$LN52@search_cu:

; 812  :   }
; 813  : 
; 814  :   assert(cur_cu->type != CU_NOTSET);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN109@search_cu
	mov	eax, DWORD PTR ?__LINE__Var@?0??search_cu@@9@9
	add	eax, 353				; 00000161H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DE@OCDOJJLF@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN109@search_cu:

; 815  : 
; 816  :   return cost;

	fld	QWORD PTR _cost$[ebp]
$LN1@search_cu:

; 817  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN117@search_cu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 948				; 000003b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN117@search_cu:
	DD	6
	DD	$LN116@search_cu
$LN116@search_cu:
	DD	-104					; ffffff98H
	DD	8
	DD	$LN110@search_cu
	DD	-120					; ffffff88H
	DD	8
	DD	$LN111@search_cu
	DD	-220					; ffffff24H
	DD	8
	DD	$LN112@search_cu
	DD	-232					; ffffff18H
	DD	4
	DD	$LN113@search_cu
	DD	-313					; fffffec7H
	DD	1
	DD	$LN114@search_cu
	DD	-332					; fffffeb4H
	DD	8
	DD	$LN115@search_cu
$LN115@search_cu:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN114@search_cu:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN113@search_cu:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN112@search_cu:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN111@search_cu:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN110@search_cu:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_search_cu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _get_ctx_cu_split_model
_TEXT	SEGMENT
tv134 = -240						; size = 4
tv83 = -240						; size = 4
tv132 = -236						; size = 4
tv81 = -236						; size = 4
_condL$ = -33						; size = 1
_condA$ = -21						; size = 1
_lcu_cu$ = -12						; size = 8
_lcu$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_get_ctx_cu_split_model PROC				; COMDAT

; 443  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 444  :   vector2d_t lcu_cu = { SUB_SCU(x), SUB_SCU(y) };

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_cu$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _lcu_cu$[ebp+4], eax

; 445  :   bool condA = x >= 8 && LCU_GET_CU_AT_PX(lcu, lcu_cu.x - 1, lcu_cu.y    )->depth > depth;

	cmp	DWORD PTR _x$[ebp], 8
	jl	SHORT $LN3@get_ctx_cu
	mov	eax, DWORD PTR _lcu_cu$[ebp]
	sub	eax, 1
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_cu$[ebp+4]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	al, BYTE PTR [edx+ecx+24976]
	shr	al, 2
	and	al, 7
	movzx	ecx, al
	cmp	ecx, DWORD PTR _depth$[ebp]
	jle	SHORT $LN3@get_ctx_cu
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN4@get_ctx_cu
$LN3@get_ctx_cu:
	mov	DWORD PTR tv81[ebp], 0
$LN4@get_ctx_cu:
	cmp	DWORD PTR tv81[ebp], 0
	jne	SHORT $LN5@get_ctx_cu
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN6@get_ctx_cu
$LN5@get_ctx_cu:
	mov	DWORD PTR tv83[ebp], 1
$LN6@get_ctx_cu:
	mov	dl, BYTE PTR tv83[ebp]
	mov	BYTE PTR _condA$[ebp], dl

; 446  :   bool condL = y >= 8 && LCU_GET_CU_AT_PX(lcu, lcu_cu.x,     lcu_cu.y - 1)->depth > depth;

	cmp	DWORD PTR _y$[ebp], 8
	jl	SHORT $LN7@get_ctx_cu
	mov	eax, DWORD PTR _lcu_cu$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _lcu_cu$[ebp+4]
	sub	ecx, 1
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	al, BYTE PTR [edx+ecx+24976]
	shr	al, 2
	and	al, 7
	movzx	ecx, al
	cmp	ecx, DWORD PTR _depth$[ebp]
	jle	SHORT $LN7@get_ctx_cu
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN8@get_ctx_cu
$LN7@get_ctx_cu:
	mov	DWORD PTR tv132[ebp], 0
$LN8@get_ctx_cu:
	cmp	DWORD PTR tv132[ebp], 0
	jne	SHORT $LN9@get_ctx_cu
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN10@get_ctx_cu
$LN9@get_ctx_cu:
	mov	DWORD PTR tv134[ebp], 1
$LN10@get_ctx_cu:
	mov	dl, BYTE PTR tv134[ebp]
	mov	BYTE PTR _condL$[ebp], dl

; 447  :   return condA + condL;

	movzx	eax, BYTE PTR _condA$[ebp]
	movzx	ecx, BYTE PTR _condL$[ebp]
	add	eax, ecx

; 448  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@get_ctx_cu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@get_ctx_cu:
	DD	1
	DD	$LN12@get_ctx_cu
$LN12@get_ctx_cu:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN11@get_ctx_cu
$LN11@get_ctx_cu:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	0
_get_ctx_cu_split_model ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _calc_mode_bits
_TEXT	SEGMENT
tv198 = -276						; size = 8
tv128 = -272						; size = 4
tv85 = -272						; size = 4
_mode_bits$ = -72					; size = 8
_above_cu$1 = -56					; size = 4
_left_cu$2 = -44					; size = 4
_candidate_modes$ = -32					; size = 3
_y_local$ = -20						; size = 4
_x_local$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_cur_cu$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_calc_mode_bits PROC					; COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 396  :   int x_local = SUB_SCU(x);

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 397  :   int y_local = SUB_SCU(y);

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 398  : 
; 399  :   assert(cur_cu->type == CU_INTRA);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN4@calc_mode_
	mov	eax, DWORD PTR ?__LINE__Var@?0??calc_mode_bits@@9@9
	add	eax, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@PFKAJOBP@?$AAc?$AAu?$AAr?$AA_?$AAc?$AAu?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@calc_mode_:

; 400  : 
; 401  :   int8_t candidate_modes[3];
; 402  :   {
; 403  :     const cu_info_t *left_cu  = ((x >= SCU_WIDTH) ? LCU_GET_CU_AT_PX(lcu, x_local - SCU_WIDTH, y_local) : NULL);

	cmp	DWORD PTR _x$[ebp], 4
	jl	SHORT $LN5@calc_mode_
	mov	eax, DWORD PTR _x_local$[ebp]
	sub	eax, 4
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN6@calc_mode_
$LN5@calc_mode_:
	mov	DWORD PTR tv85[ebp], 0
$LN6@calc_mode_:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _left_cu$2[ebp], ecx

; 404  :     const cu_info_t *above_cu = ((y >= SCU_WIDTH) ? LCU_GET_CU_AT_PX(lcu, x_local, y_local - SCU_WIDTH) : NULL);

	cmp	DWORD PTR _y$[ebp], 4
	jl	SHORT $LN7@calc_mode_
	mov	eax, DWORD PTR _x_local$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sub	ecx, 4
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN8@calc_mode_
$LN7@calc_mode_:
	mov	DWORD PTR tv128[ebp], 0
$LN8@calc_mode_:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _above_cu$1[ebp], ecx

; 405  :     kvz_intra_get_dir_luma_predictor(x, y, candidate_modes, cur_cu, left_cu, above_cu);

	mov	eax, DWORD PTR _above_cu$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_cu$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	lea	eax, DWORD PTR _candidate_modes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	_kvz_intra_get_dir_luma_predictor
	add	esp, 24					; 00000018H

; 406  :   }
; 407  : 
; 408  :   double mode_bits = kvz_luma_mode_bits(state, cur_cu->intra.mode, candidate_modes);

	lea	eax, DWORD PTR _candidate_modes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_luma_mode_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _mode_bits$[ebp]

; 409  : 
; 410  :   if (x % 8 == 0 && y % 8 == 0 && state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN12@calc_mode_
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN12@calc_mode_:
	test	eax, eax
	jne	SHORT $LN2@calc_mode_
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN13@calc_mode_
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN13@calc_mode_:
	test	eax, eax
	jne	SHORT $LN2@calc_mode_
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN2@calc_mode_

; 411  :     mode_bits += kvz_chroma_mode_bits(state, cur_cu->intra.mode_chroma, cur_cu->intra.mode);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_chroma_mode_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv198[ebp]
	movsd	xmm0, QWORD PTR tv198[ebp]
	addsd	xmm0, QWORD PTR _mode_bits$[ebp]
	movsd	QWORD PTR _mode_bits$[ebp], xmm0
$LN2@calc_mode_:

; 412  :   }
; 413  : 
; 414  :   return mode_bits;

	fld	QWORD PTR _mode_bits$[ebp]

; 415  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@calc_mode_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@calc_mode_:
	DD	1
	DD	$LN10@calc_mode_
$LN10@calc_mode_:
	DD	-32					; ffffffe0H
	DD	3
	DD	$LN9@calc_mode_
$LN9@calc_mode_:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_calc_mode_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _cu_zero_coeff_cost
_TEXT	SEGMENT
tv235 = -284						; size = 4
tv217 = -284						; size = 4
tv196 = -284						; size = 4
_ssd$ = -84						; size = 8
_chroma_index$ = -68					; size = 4
_luma_index$ = -56					; size = 4
_lcu$ = -44						; size = 4
_cu_width$ = -32					; size = 4
_y_local$ = -20						; size = 4
_x_local$ = -8						; size = 4
_state$ = 8						; size = 4
_work_tree$ = 12					; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_depth$ = 24						; size = 4
_cu_zero_coeff_cost PROC				; COMDAT

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 209  :   int x_local = SUB_SCU(x);

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 210  :   int y_local = SUB_SCU(y);

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 211  :   int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 212  :   lcu_t *const lcu = &work_tree[depth];

	imul	eax, DWORD PTR _depth$[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	mov	DWORD PTR _lcu$[ebp], eax

; 213  : 
; 214  :   const int luma_index = y_local * LCU_WIDTH + x_local;

	mov	eax, DWORD PTR _y_local$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _luma_index$[ebp], eax

; 215  :   const int chroma_index = (y_local / 2) * LCU_WIDTH_C + (x_local / 2);

	mov	eax, DWORD PTR _y_local$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	shl	ecx, 5
	mov	eax, DWORD PTR _x_local$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _chroma_index$[ebp], ecx

; 216  : 
; 217  :   double ssd = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _ssd$[ebp], xmm0

; 218  :   ssd += LUMA_MULT * kvz_pixels_calc_ssd(

	mov	esi, esp
	mov	eax, DWORD PTR _cu_width$[ebp]
	push	eax
	push	64					; 00000040H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _luma_index$[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+6540]
	push	eax
	mov	ecx, DWORD PTR _luma_index$[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+392]
	push	eax
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv196[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv196[ebp]
	mov	ecx, DWORD PTR tv196[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@3fe999999999999a
	addsd	xmm0, QWORD PTR _ssd$[ebp]
	movsd	QWORD PTR _ssd$[ebp], xmm0

; 219  :     &lcu->ref.y[luma_index], &lcu->rec.y[luma_index],
; 220  :     LCU_WIDTH, LCU_WIDTH, cu_width
; 221  :     );
; 222  :   if (x % 8 == 0 && y % 8 == 0 && state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN4@cu_zero_co
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN4@cu_zero_co:
	test	eax, eax
	jne	$LN2@cu_zero_co
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN5@cu_zero_co
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN5@cu_zero_co:
	test	eax, eax
	jne	$LN2@cu_zero_co
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN2@cu_zero_co

; 223  :     ssd += CHROMA_MULT * kvz_pixels_calc_ssd(

	mov	eax, DWORD PTR _cu_width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, esp
	push	eax
	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	push	edx
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4488]
	push	edx
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv217[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR tv217[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR __real@3ff8000000000000
	addsd	xmm0, QWORD PTR _ssd$[ebp]
	movsd	QWORD PTR _ssd$[ebp], xmm0

; 224  :       &lcu->ref.u[chroma_index], &lcu->rec.u[chroma_index],
; 225  :       LCU_WIDTH_C, LCU_WIDTH_C, cu_width / 2
; 226  :       );
; 227  :     ssd += CHROMA_MULT * kvz_pixels_calc_ssd(

	mov	eax, DWORD PTR _cu_width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, esp
	push	eax
	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	push	edx
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+5512]
	push	edx
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv235[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv235[ebp]
	mov	eax, DWORD PTR tv235[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR __real@3ff8000000000000
	addsd	xmm0, QWORD PTR _ssd$[ebp]
	movsd	QWORD PTR _ssd$[ebp], xmm0
$LN2@cu_zero_co:

; 228  :       &lcu->ref.v[chroma_index], &lcu->rec.v[chroma_index],
; 229  :       LCU_WIDTH_C, LCU_WIDTH_C, cu_width / 2
; 230  :       );
; 231  :   }
; 232  :   // Save the pixels at a lower level of the working tree.
; 233  :   copy_cu_pixels(x_local, y_local, cu_width, lcu, &work_tree[depth + 1]);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	imul	ecx, eax, 30776
	add	ecx, DWORD PTR _work_tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	mov	eax, DWORD PTR _cu_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_pixels
	add	esp, 20					; 00000014H

; 234  : 
; 235  :   return ssd;

	fld	QWORD PTR _ssd$[ebp]

; 236  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cu_zero_coeff_cost ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _lcu_fill_cbf
_TEXT	SEGMENT
_cu_to$1 = -68						; size = 4
_cu_from$2 = -56					; size = 4
_x$3 = -44						; size = 4
_y$4 = -32						; size = 4
_mask$ = -20						; size = 4
_tr_split$ = -8						; size = 4
_lcu$ = 8						; size = 4
_x_local$ = 12						; size = 4
_y_local$ = 16						; size = 4
_width$ = 20						; size = 4
_cur_cu$ = 24						; size = 4
_lcu_fill_cbf PROC					; COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 187  :   const uint32_t tr_split = cur_cu->tr_depth - cur_cu->depth;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	eax, cl
	sub	edx, eax
	mov	DWORD PTR _tr_split$[ebp], edx

; 188  :   const uint32_t mask = ~((width >> tr_split)-1);

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _tr_split$[ebp]
	sar	eax, cl
	sub	eax, 1
	not	eax
	mov	DWORD PTR _mask$[ebp], eax

; 189  : 
; 190  :   // Set coeff flags in every CU covered by part_mode in this depth.
; 191  :   for (uint32_t y = y_local; y < y_local + width; y += SCU_WIDTH) {

	mov	eax, DWORD PTR _y_local$[ebp]
	mov	DWORD PTR _y$4[ebp], eax
	jmp	SHORT $LN4@lcu_fill_c
$LN2@lcu_fill_c:
	mov	eax, DWORD PTR _y$4[ebp]
	add	eax, 4
	mov	DWORD PTR _y$4[ebp], eax
$LN4@lcu_fill_c:
	mov	eax, DWORD PTR _y_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _y$4[ebp], eax
	jae	$LN1@lcu_fill_c

; 192  :     for (uint32_t x = x_local; x < x_local + width; x += SCU_WIDTH) {

	mov	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _x$3[ebp], eax
	jmp	SHORT $LN7@lcu_fill_c
$LN5@lcu_fill_c:
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, 4
	mov	DWORD PTR _x$3[ebp], eax
$LN7@lcu_fill_c:
	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _x$3[ebp], eax
	jae	SHORT $LN6@lcu_fill_c

; 193  :       // Use TU top-left CU to propagate coeff flags
; 194  :       cu_info_t *cu_from = LCU_GET_CU_AT_PX(lcu, x & mask, y & mask);

	mov	eax, DWORD PTR _x$3[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _y$4[ebp]
	and	ecx, DWORD PTR _mask$[ebp]
	shr	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cu_from$2[ebp], eax

; 195  :       cu_info_t *cu_to   = LCU_GET_CU_AT_PX(lcu, x, y);

	mov	eax, DWORD PTR _x$3[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _y$4[ebp]
	shr	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cu_to$1[ebp], eax

; 196  :       if (cu_from != cu_to) {

	mov	eax, DWORD PTR _cu_from$2[ebp]
	cmp	eax, DWORD PTR _cu_to$1[ebp]
	je	SHORT $LN8@lcu_fill_c

; 197  :         // Chroma coeff data is not used, luma is needed for deblocking
; 198  :         cbf_copy(&cu_to->cbf, cu_from->cbf, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _cu_from$2[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cu_to$1[ebp]
	add	edx, 4
	push	edx
	call	_cbf_copy
	add	esp, 12					; 0000000cH
$LN8@lcu_fill_c:

; 199  :       }
; 200  :     }

	jmp	$LN5@lcu_fill_c
$LN6@lcu_fill_c:

; 201  :   }

	jmp	$LN2@lcu_fill_c
$LN1@lcu_fill_c:

; 202  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lcu_fill_cbf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _lcu_fill_inter
_TEXT	SEGMENT
_pu$1 = -92						; size = 4
_height_pu$2 = -80					; size = 4
_width_pu$3 = -68					; size = 4
_y_pu$4 = -56						; size = 4
_x_pu$5 = -44						; size = 4
_i$6 = -32						; size = 4
_num_pu$ = -20						; size = 4
_part_mode$ = -8					; size = 4
_lcu$ = 8						; size = 4
_x_local$ = 12						; size = 4
_y_local$ = 16						; size = 4
_cu_width$ = 20						; size = 4
_lcu_fill_inter PROC					; COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 170  :   const part_mode_t part_mode = LCU_GET_CU_AT_PX(lcu, x_local, y_local)->part_size;

	mov	eax, DWORD PTR _x_local$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	al, BYTE PTR [edx+ecx+24976]
	shr	al, 5
	and	al, 7
	movzx	ecx, al
	mov	DWORD PTR _part_mode$[ebp], ecx

; 171  :   const int num_pu = kvz_part_mode_num_parts[part_mode];

	mov	eax, DWORD PTR _part_mode$[ebp]
	movzx	ecx, BYTE PTR _kvz_part_mode_num_parts[eax]
	mov	DWORD PTR _num_pu$[ebp], ecx

; 172  : 
; 173  :   for (int i = 0; i < num_pu; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@lcu_fill_i
$LN2@lcu_fill_i:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@lcu_fill_i:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _num_pu$[ebp]
	jge	$LN1@lcu_fill_i

; 174  :     const int x_pu      = PU_GET_X(part_mode, cu_width, x_local, i);

	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _part_mode$[ebp]
	lea	edx, DWORD PTR _kvz_part_mode_offsets[eax+ecx*8]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	eax, BYTE PTR [edx+ecx]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _x_pu$5[ebp], eax

; 175  :     const int y_pu      = PU_GET_Y(part_mode, cu_width, y_local, i);

	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _part_mode$[ebp]
	lea	edx, DWORD PTR _kvz_part_mode_offsets[eax+ecx*8]
	mov	eax, 1
	shl	eax, 0
	movzx	eax, BYTE PTR [edx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _y_local$[ebp]
	mov	DWORD PTR _y_pu$4[ebp], eax

; 176  :     const int width_pu  = PU_GET_W(part_mode, cu_width, i);

	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _part_mode$[ebp]
	lea	edx, DWORD PTR _kvz_part_mode_sizes[eax+ecx*8]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	eax, BYTE PTR [edx+ecx]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _width_pu$3[ebp], eax

; 177  :     const int height_pu = PU_GET_H(part_mode, cu_width, i);

	mov	eax, DWORD PTR _i$6[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _part_mode$[ebp]
	lea	edx, DWORD PTR _kvz_part_mode_sizes[eax+ecx*8]
	mov	eax, 1
	shl	eax, 0
	movzx	eax, BYTE PTR [edx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _height_pu$2[ebp], eax

; 178  : 
; 179  :     cu_info_t *pu  = LCU_GET_CU_AT_PX(lcu, x_pu, y_pu);

	mov	eax, DWORD PTR _x_pu$5[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_pu$4[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _pu$1[ebp], eax

; 180  :     pu->type = CU_INTER;

	mov	eax, DWORD PTR _pu$1[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 252					; 000000fcH
	or	cl, 2
	mov	edx, DWORD PTR _pu$1[ebp]
	mov	BYTE PTR [edx], cl

; 181  :     lcu_fill_cu_info(lcu, x_pu, y_pu, width_pu, height_pu, pu);

	mov	eax, DWORD PTR _pu$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _height_pu$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _width_pu$3[ebp]
	push	edx
	mov	eax, DWORD PTR _y_pu$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_pu$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	call	_lcu_fill_cu_info
	add	esp, 24					; 00000018H

; 182  :   }

	jmp	$LN2@lcu_fill_i
$LN1@lcu_fill_i:

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lcu_fill_inter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _lcu_fill_cu_info
_TEXT	SEGMENT
_to$1 = -32						; size = 4
_x$2 = -20						; size = 4
_y$3 = -8						; size = 4
_lcu$ = 8						; size = 4
_x_local$ = 12						; size = 4
_y_local$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_cu$ = 28						; size = 4
_lcu_fill_cu_info PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 146  :   // Set mode in every CU covered by part_mode in this depth.
; 147  :   for (int y = y_local; y < y_local + height; y += SCU_WIDTH) {

	mov	eax, DWORD PTR _y_local$[ebp]
	mov	DWORD PTR _y$3[ebp], eax
	jmp	SHORT $LN4@lcu_fill_c
$LN2@lcu_fill_c:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 4
	mov	DWORD PTR _y$3[ebp], eax
$LN4@lcu_fill_c:
	mov	eax, DWORD PTR _y_local$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _y$3[ebp], eax
	jge	$LN1@lcu_fill_c

; 148  :     for (int x = x_local; x < x_local + width; x += SCU_WIDTH) {

	mov	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _x$2[ebp], eax
	jmp	SHORT $LN7@lcu_fill_c
$LN5@lcu_fill_c:
	mov	eax, DWORD PTR _x$2[ebp]
	add	eax, 4
	mov	DWORD PTR _x$2[ebp], eax
$LN7@lcu_fill_c:
	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _x$2[ebp], eax
	jge	$LN6@lcu_fill_c

; 149  :       cu_info_t *to = LCU_GET_CU_AT_PX(lcu, x, y);

	mov	eax, DWORD PTR _x$2[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y$3[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _to$1[ebp], eax

; 150  :       to->type      = cu->type;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	and	cl, 3
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 252					; 000000fcH
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx], al

; 151  :       to->depth     = cu->depth;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	and	cl, 7
	shl	cl, 2
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 227					; 000000e3H
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx], al

; 152  :       to->part_size = cu->part_size;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	and	cl, 7
	shl	cl, 5
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 31					; 0000001fH
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx], al

; 153  :       to->qp        = cu->qp;

	mov	eax, DWORD PTR _to$1[ebp]
	mov	ecx, DWORD PTR _cu$[ebp]
	mov	dl, BYTE PTR [ecx+6]
	mov	BYTE PTR [eax+6], dl

; 154  : 
; 155  :       if (cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN8@lcu_fill_c

; 156  :         to->intra.mode        = cu->intra.mode;

	mov	eax, DWORD PTR _to$1[ebp]
	mov	ecx, DWORD PTR _cu$[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax+8], dl

; 157  :         to->intra.mode_chroma = cu->intra.mode_chroma;

	mov	eax, DWORD PTR _to$1[ebp]
	mov	ecx, DWORD PTR _cu$[ebp]
	mov	dl, BYTE PTR [ecx+9]
	mov	BYTE PTR [eax+9], dl

; 158  :       } else {

	jmp	$LN9@lcu_fill_c
$LN8@lcu_fill_c:

; 159  :         to->skipped   = cu->skipped;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	and	cl, 1
	shl	cl, 3
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx+1]
	and	al, 247					; 000000f7H
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx+1], al

; 160  :         to->merged    = cu->merged;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx+1]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx+1], al

; 161  :         to->merge_idx = cu->merge_idx;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 5
	and	cl, 7
	and	cl, 7
	shl	cl, 5
	mov	edx, DWORD PTR _to$1[ebp]
	mov	al, BYTE PTR [edx+1]
	and	al, 31					; 0000001fH
	or	al, cl
	mov	ecx, DWORD PTR _to$1[ebp]
	mov	BYTE PTR [ecx+1], al

; 162  :         to->inter     = cu->inter;

	mov	eax, DWORD PTR _cu$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _to$1[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN9@lcu_fill_c:

; 163  :       }
; 164  :     }

	jmp	$LN5@lcu_fill_c
$LN6@lcu_fill_c:

; 165  :   }

	jmp	$LN2@lcu_fill_c
$LN1@lcu_fill_c:

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lcu_fill_cu_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _work_tree_copy_down
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_width$ = -8						; size = 4
_x_local$ = 8						; size = 4
_y_local$ = 12						; size = 4
_depth$ = 16						; size = 4
_work_tree$ = 20					; size = 4
_work_tree_copy_down PROC				; COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 124  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 125  :   for (int i = depth + 1; i <= MAX_PU_DEPTH; i++) {

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@work_tree_
$LN2@work_tree_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@work_tree_:
	cmp	DWORD PTR _i$1[ebp], 4
	jg	SHORT $LN1@work_tree_

; 126  :     copy_cu_info  (x_local, y_local, width, &work_tree[depth], &work_tree[i]);

	imul	eax, DWORD PTR _i$1[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	imul	ecx, DWORD PTR _depth$[ebp], 30776
	add	ecx, DWORD PTR _work_tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	call	_copy_cu_info
	add	esp, 20					; 00000014H

; 127  :     copy_cu_pixels(x_local, y_local, width, &work_tree[depth], &work_tree[i]);

	imul	eax, DWORD PTR _i$1[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	imul	ecx, DWORD PTR _depth$[ebp], 30776
	add	ecx, DWORD PTR _work_tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	call	_copy_cu_pixels
	add	esp, 20					; 00000014H

; 128  :   }

	jmp	SHORT $LN2@work_tree_
$LN1@work_tree_:

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_work_tree_copy_down ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _work_tree_copy_up
_TEXT	SEGMENT
_width$ = -8						; size = 4
_x_local$ = 8						; size = 4
_y_local$ = 12						; size = 4
_depth$ = 16						; size = 4
_work_tree$ = 20					; size = 4
_work_tree_copy_up PROC					; COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 112  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 113  :   copy_cu_info  (x_local, y_local, width, &work_tree[depth + 1], &work_tree[depth]);

	imul	eax, DWORD PTR _depth$[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	imul	edx, ecx, 30776
	add	edx, DWORD PTR _work_tree$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_info
	add	esp, 20					; 00000014H

; 114  :   copy_cu_pixels(x_local, y_local, width, &work_tree[depth + 1], &work_tree[depth]);

	imul	eax, DWORD PTR _depth$[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	imul	edx, ecx, 30776
	add	edx, DWORD PTR _work_tree$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_pixels
	add	esp, 20					; 00000014H

; 115  :   copy_cu_coeffs(x_local, y_local, width, &work_tree[depth + 1], &work_tree[depth]);

	imul	eax, DWORD PTR _depth$[ebp], 30776
	add	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	imul	edx, ecx, 30776
	add	edx, DWORD PTR _work_tree$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$[ebp]
	push	edx
	call	_copy_cu_coeffs
	add	esp, 20					; 00000014H

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_work_tree_copy_up ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _copy_cu_coeffs
_TEXT	SEGMENT
_chroma_z$1 = -20					; size = 4
_luma_z$ = -8						; size = 4
_x_local$ = 8						; size = 4
_y_local$ = 12						; size = 4
_width$ = 16						; size = 4
_from$ = 20						; size = 4
_to$ = 24						; size = 4
_copy_cu_coeffs PROC					; COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 97   :   const int luma_z = xy_to_zorder(LCU_WIDTH, x_local, y_local);

	mov	eax, DWORD PTR _y_local$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	push	ecx
	push	64					; 00000040H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _luma_z$[ebp], eax

; 98   :   copy_coeffs(&from->coeff.y[luma_z], &to->coeff.y[luma_z], width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _luma_z$[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+12688]
	push	eax
	mov	ecx, DWORD PTR _luma_z$[ebp]
	mov	edx, DWORD PTR _from$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+12688]
	push	eax
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 99   : 
; 100  :   if (from->rec.chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _from$[ebp]
	cmp	DWORD PTR [eax+12684], 0
	je	SHORT $LN1@copy_cu_co

; 101  :     const int chroma_z = xy_to_zorder(LCU_WIDTH_C, x_local >> 1, y_local >> 1);

	mov	eax, DWORD PTR _y_local$[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_local$[ebp]
	sar	ecx, 1
	push	ecx
	push	32					; 00000020H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _chroma_z$1[ebp], eax

; 102  :     copy_coeffs(&from->coeff.u[chroma_z], &to->coeff.u[chroma_z], width >> 1);

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _chroma_z$1[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+20880]
	push	eax
	mov	ecx, DWORD PTR _chroma_z$1[ebp]
	mov	edx, DWORD PTR _from$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+20880]
	push	eax
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 103  :     copy_coeffs(&from->coeff.v[chroma_z], &to->coeff.v[chroma_z], width >> 1);

	mov	eax, DWORD PTR _width$[ebp]
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _chroma_z$1[ebp]
	mov	edx, DWORD PTR _to$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+22928]
	push	eax
	mov	ecx, DWORD PTR _chroma_z$1[ebp]
	mov	edx, DWORD PTR _from$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+22928]
	push	eax
	call	_copy_coeffs
	add	esp, 12					; 0000000cH
$LN1@copy_cu_co:

; 104  :   }
; 105  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_cu_coeffs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _copy_cu_pixels
_TEXT	SEGMENT
_chroma_index$ = -20					; size = 4
_luma_index$ = -8					; size = 4
_x_local$ = 8						; size = 4
_y_local$ = 12						; size = 4
_width$ = 16						; size = 4
_from$ = 20						; size = 4
_to$ = 24						; size = 4
_copy_cu_pixels PROC					; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 82   :   const int luma_index = x_local + y_local * LCU_WIDTH;

	mov	eax, DWORD PTR _y_local$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _luma_index$[ebp], eax

; 83   :   const int chroma_index = (x_local / 2) + (y_local / 2) * (LCU_WIDTH / 2);

	mov	eax, DWORD PTR _x_local$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _y_local$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 5
	add	ecx, eax
	mov	DWORD PTR _chroma_index$[ebp], ecx

; 84   : 
; 85   :   kvz_pixels_blit(&from->rec.y[luma_index], &to->rec.y[luma_index],

	push	64					; 00000040H
	push	64					; 00000040H
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _luma_index$[ebp]
	mov	eax, DWORD PTR _to$[ebp]
	lea	ecx, DWORD PTR [eax+edx+6540]
	push	ecx
	mov	edx, DWORD PTR _luma_index$[ebp]
	mov	eax, DWORD PTR _from$[ebp]
	lea	ecx, DWORD PTR [eax+edx+6540]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 86   :                   width, width, LCU_WIDTH, LCU_WIDTH);
; 87   :   if (from->rec.chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _from$[ebp]
	cmp	DWORD PTR [eax+12684], 0
	je	SHORT $LN1@copy_cu_pi

; 88   :     kvz_pixels_blit(&from->rec.u[chroma_index], &to->rec.u[chroma_index],

	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	push	edx
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 89   :                     width / 2, width / 2, LCU_WIDTH / 2, LCU_WIDTH / 2);
; 90   :     kvz_pixels_blit(&from->rec.v[chroma_index], &to->rec.v[chroma_index],

	push	32					; 00000020H
	push	32					; 00000020H
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _to$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	push	edx
	mov	eax, DWORD PTR _chroma_index$[ebp]
	mov	ecx, DWORD PTR _from$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN1@copy_cu_pi:

; 91   :                     width / 2, width / 2, LCU_WIDTH / 2, LCU_WIDTH / 2);
; 92   :   }
; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_cu_pixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _copy_cu_info
_TEXT	SEGMENT
_x$1 = -20						; size = 4
_y$2 = -8						; size = 4
_x_local$ = 8						; size = 4
_y_local$ = 12						; size = 4
_width$ = 16						; size = 4
_from$ = 20						; size = 4
_to$ = 24						; size = 4
_copy_cu_info PROC					; COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 73   :   for   (int y = y_local; y < y_local + width; y += SCU_WIDTH) {

	mov	eax, DWORD PTR _y_local$[ebp]
	mov	DWORD PTR _y$2[ebp], eax
	jmp	SHORT $LN4@copy_cu_in
$LN2@copy_cu_in:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 4
	mov	DWORD PTR _y$2[ebp], eax
$LN4@copy_cu_in:
	mov	eax, DWORD PTR _y_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _y$2[ebp], eax
	jge	SHORT $LN1@copy_cu_in

; 74   :     for (int x = x_local; x < x_local + width; x += SCU_WIDTH) {

	mov	eax, DWORD PTR _x_local$[ebp]
	mov	DWORD PTR _x$1[ebp], eax
	jmp	SHORT $LN7@copy_cu_in
$LN5@copy_cu_in:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 4
	mov	DWORD PTR _x$1[ebp], eax
$LN7@copy_cu_in:
	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _x$1[ebp], eax
	jge	SHORT $LN6@copy_cu_in

; 75   :       *LCU_GET_CU_AT_PX(to, x, y) = *LCU_GET_CU_AT_PX(from, x, y);

	mov	eax, DWORD PTR _x$1[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y$2[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _from$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	ecx, DWORD PTR _x$1[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _y$2[ebp]
	sar	edx, 2
	imul	edx, edx, 17
	lea	ecx, DWORD PTR [ecx+edx+18]
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _to$[ebp]
	lea	edx, DWORD PTR [ecx+edx+24976]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], eax

; 76   :     }

	jmp	SHORT $LN5@copy_cu_in
$LN6@copy_cu_in:

; 77   :   }

	jmp	$LN2@copy_cu_in
$LN1@copy_cu_in:

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_cu_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _kvz_lcu_fill_trdepth
_TEXT	SEGMENT
_x$1 = -56						; size = 4
_y$2 = -44						; size = 4
_width$ = -32						; size = 4
_y_local$ = -20						; size = 4
_x_local$ = -8						; size = 4
_lcu$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_tr_depth$ = 24						; size = 4
_kvz_lcu_fill_trdepth PROC				; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 133  :   const int x_local = SUB_SCU(x_px);

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 134  :   const int y_local = SUB_SCU(y_px);

	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 135  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 136  : 
; 137  :   for (unsigned y = 0; y < width; y += SCU_WIDTH) {

	mov	DWORD PTR _y$2[ebp], 0
	jmp	SHORT $LN4@kvz_lcu_fi
$LN2@kvz_lcu_fi:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 4
	mov	DWORD PTR _y$2[ebp], eax
$LN4@kvz_lcu_fi:
	mov	eax, DWORD PTR _y$2[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	SHORT $LN1@kvz_lcu_fi

; 138  :     for (unsigned x = 0; x < width; x += SCU_WIDTH) {

	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN7@kvz_lcu_fi
$LN5@kvz_lcu_fi:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 4
	mov	DWORD PTR _x$1[ebp], eax
$LN7@kvz_lcu_fi:
	mov	eax, DWORD PTR _x$1[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jae	SHORT $LN6@kvz_lcu_fi

; 139  :       LCU_GET_CU_AT_PX(lcu, x_local + x, y_local + y)->tr_depth = tr_depth;

	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _x$1[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	add	ecx, DWORD PTR _y$2[ebp]
	shr	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	dl, BYTE PTR _tr_depth$[ebp]
	and	dl, 7
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	cl, BYTE PTR [eax+ecx+24977]
	and	cl, 248					; 000000f8H
	or	cl, dl
	mov	edx, DWORD PTR _y_local$[ebp]
	add	edx, DWORD PTR _y$2[ebp]
	shr	edx, 2
	imul	eax, edx, 17
	mov	edx, DWORD PTR _x_local$[ebp]
	add	edx, DWORD PTR _x$1[ebp]
	shr	edx, 2
	lea	eax, DWORD PTR [edx+eax+18]
	imul	edx, eax, 20
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	BYTE PTR [eax+edx+24977], cl

; 140  :     }

	jmp	SHORT $LN5@kvz_lcu_fi
$LN6@kvz_lcu_fi:

; 141  :   }

	jmp	$LN2@kvz_lcu_fi
$LN1@kvz_lcu_fi:

; 142  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_lcu_fill_trdepth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _kvz_cu_rd_cost_chroma
_TEXT	SEGMENT
tv485 = -408						; size = 8
tv426 = -408						; size = 8
tv422 = -408						; size = 8
tv412 = -408						; size = 8
tv402 = -408						; size = 8
tv392 = -408						; size = 8
tv477 = -404						; size = 4
tv465 = -404						; size = 4
tv70 = -404						; size = 4
_bits$ = -204						; size = 8
_index$1 = -188						; size = 4
_scan_order$2 = -173					; size = 1
_ssd_v$3 = -164						; size = 4
_ssd_u$4 = -152						; size = 4
_index$5 = -140						; size = 4
_ssd$ = -128						; size = 4
_sum$6 = -116						; size = 4
_offset$7 = -104					; size = 4
_ctx$8 = -92						; size = 4
_tr_depth$9 = -80					; size = 4
_coeff_bits$ = -68					; size = 8
_tr_tree_bits$ = -52					; size = 8
_tr_cu$ = -36						; size = 4
_width$ = -24						; size = 4
_lcu_px$ = -12						; size = 8
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_pred_cu$ = 24						; size = 4
_lcu$ = 28						; size = 4
_kvz_cu_rd_cost_chroma PROC				; COMDAT

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 325  :   const vector2d_t lcu_px = { x_px / 2, y_px / 2 };

	mov	eax, DWORD PTR _x_px$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _lcu_px$[ebp], eax
	mov	eax, DWORD PTR _y_px$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _lcu_px$[ebp+4], eax

; 326  :   const int width = (depth <= MAX_DEPTH) ? LCU_WIDTH >> (depth + 1) : LCU_WIDTH >> depth;

	cmp	DWORD PTR _depth$[ebp], 3
	jg	SHORT $LN12@kvz_cu_rd_
	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN13@kvz_cu_rd_
$LN12@kvz_cu_rd_:
	mov	edx, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	edx, cl
	mov	DWORD PTR tv70[ebp], edx
$LN13@kvz_cu_rd_:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _width$[ebp], eax

; 327  :   cu_info_t *const tr_cu = LCU_GET_CU_AT_PX(lcu, x_px, y_px);

	mov	eax, DWORD PTR _x_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_px$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _tr_cu$[ebp], eax

; 328  : 
; 329  :   double tr_tree_bits = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0

; 330  :   double coeff_bits = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _coeff_bits$[ebp], xmm0

; 331  : 
; 332  :   assert(x_px >= 0 && x_px < LCU_WIDTH);

	cmp	DWORD PTR _x_px$[ebp], 0
	jl	SHORT $LN14@kvz_cu_rd_
	cmp	DWORD PTR _x_px$[ebp], 64		; 00000040H
	jl	SHORT $LN15@kvz_cu_rd_
$LN14@kvz_cu_rd_:
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_rd_cost_chroma@@9@9
	add	eax, 8
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@LEPPLIOA@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@kvz_cu_rd_:

; 333  :   assert(y_px >= 0 && y_px < LCU_WIDTH);

	cmp	DWORD PTR _y_px$[ebp], 0
	jl	SHORT $LN16@kvz_cu_rd_
	cmp	DWORD PTR _y_px$[ebp], 64		; 00000040H
	jl	SHORT $LN17@kvz_cu_rd_
$LN16@kvz_cu_rd_:
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_rd_cost_chroma@@9@9
	add	eax, 9
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@FKKOGHFJ@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@kvz_cu_rd_:

; 334  : 
; 335  :   if (x_px % 8 != 0 || y_px % 8 != 0) {

	mov	eax, DWORD PTR _x_px$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN21@kvz_cu_rd_
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN21@kvz_cu_rd_:
	test	eax, eax
	jne	SHORT $LN3@kvz_cu_rd_
	mov	eax, DWORD PTR _y_px$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN22@kvz_cu_rd_
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN22@kvz_cu_rd_:
	test	eax, eax
	je	SHORT $LN2@kvz_cu_rd_
$LN3@kvz_cu_rd_:

; 336  :     // For MAX_PU_DEPTH calculate chroma for previous depth for the first
; 337  :     // block and return 0 cost for all others.
; 338  :     return 0;

	fldz
	jmp	$LN1@kvz_cu_rd_
$LN2@kvz_cu_rd_:

; 339  :   }
; 340  : 
; 341  :   if (depth < MAX_PU_DEPTH) {

	cmp	DWORD PTR _depth$[ebp], 4
	jge	$LN7@kvz_cu_rd_

; 342  :     const int tr_depth = depth - pred_cu->depth;

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, edx
	mov	DWORD PTR _tr_depth$9[ebp], eax

; 343  :     const cabac_ctx_t *ctx = &(state->cabac.ctx.qt_cbf_model_chroma[tr_depth]);

	mov	eax, DWORD PTR _tr_depth$9[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax+116]
	mov	DWORD PTR _ctx$8[ebp], edx

; 344  :     if (tr_depth == 0 || cbf_is_set(pred_cu->cbf, depth - 1, COLOR_U)) {

	cmp	DWORD PTR _tr_depth$9[ebp], 0
	je	SHORT $LN6@kvz_cu_rd_
	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@kvz_cu_rd_
$LN6@kvz_cu_rd_:

; 345  :       tr_tree_bits += CTX_ENTROPY_FBITS(ctx, cbf_is_set(pred_cu->cbf, depth, COLOR_U));

	mov	eax, DWORD PTR _ctx$8[ebp]
	movzx	esi, BYTE PTR [eax]
	push	1
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_cu$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	xor	esi, eax
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[esi*4]
	addsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0
$LN5@kvz_cu_rd_:

; 346  :     }
; 347  :     if (tr_depth == 0 || cbf_is_set(pred_cu->cbf, depth - 1, COLOR_V)) {

	cmp	DWORD PTR _tr_depth$9[ebp], 0
	je	SHORT $LN8@kvz_cu_rd_
	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@kvz_cu_rd_
$LN8@kvz_cu_rd_:

; 348  :       tr_tree_bits += CTX_ENTROPY_FBITS(ctx, cbf_is_set(pred_cu->cbf, depth, COLOR_V));

	mov	eax, DWORD PTR _ctx$8[ebp]
	movzx	esi, BYTE PTR [eax]
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_cu$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	xor	esi, eax
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[esi*4]
	addsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0
$LN7@kvz_cu_rd_:

; 349  :     }
; 350  :   }
; 351  : 
; 352  :   if (tr_cu->tr_depth > depth) {

	mov	eax, DWORD PTR _tr_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	cmp	edx, DWORD PTR _depth$[ebp]
	jle	$LN9@kvz_cu_rd_

; 353  :     int offset = LCU_WIDTH >> (depth + 1);

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	DWORD PTR _offset$7[ebp], eax

; 354  :     int sum = 0;

	mov	DWORD PTR _sum$6[ebp], 0

; 355  : 
; 356  :     sum += kvz_cu_rd_cost_chroma(state, x_px, y_px, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv392[ebp]
	cvtsi2sd xmm0, DWORD PTR _sum$6[ebp]
	addsd	xmm0, QWORD PTR tv392[ebp]
	cvttsd2si eax, xmm0
	mov	DWORD PTR _sum$6[ebp], eax

; 357  :     sum += kvz_cu_rd_cost_chroma(state, x_px + offset, y_px, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv402[ebp]
	cvtsi2sd xmm0, DWORD PTR _sum$6[ebp]
	addsd	xmm0, QWORD PTR tv402[ebp]
	cvttsd2si eax, xmm0
	mov	DWORD PTR _sum$6[ebp], eax

; 358  :     sum += kvz_cu_rd_cost_chroma(state, x_px, y_px + offset, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv412[ebp]
	cvtsi2sd xmm0, DWORD PTR _sum$6[ebp]
	addsd	xmm0, QWORD PTR tv412[ebp]
	cvttsd2si eax, xmm0
	mov	DWORD PTR _sum$6[ebp], eax

; 359  :     sum += kvz_cu_rd_cost_chroma(state, x_px + offset, y_px + offset, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_chroma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv422[ebp]
	cvtsi2sd xmm0, DWORD PTR _sum$6[ebp]
	addsd	xmm0, QWORD PTR tv422[ebp]
	cvttsd2si eax, xmm0
	mov	DWORD PTR _sum$6[ebp], eax

; 360  : 
; 361  :     return sum + tr_tree_bits * state->lambda;

	cvtsi2sd xmm0, DWORD PTR _sum$6[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm1, QWORD PTR _tr_tree_bits$[ebp]
	mulsd	xmm1, QWORD PTR [eax+296]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv426[ebp], xmm0
	fld	QWORD PTR tv426[ebp]
	jmp	$LN1@kvz_cu_rd_
$LN9@kvz_cu_rd_:

; 362  :   }
; 363  : 
; 364  :   // Chroma SSD
; 365  :   int ssd = 0;

	mov	DWORD PTR _ssd$[ebp], 0

; 366  :   if (!state->encoder_control->cfg.lossless) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2364], 0
	jne	$LN10@kvz_cu_rd_

; 367  :     int index = lcu_px.y * LCU_WIDTH_C + lcu_px.x;

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	shl	eax, 5
	add	eax, DWORD PTR _lcu_px$[ebp]
	mov	DWORD PTR _index$5[ebp], eax

; 368  :     int ssd_u = kvz_pixels_calc_ssd(&lcu->ref.u[index], &lcu->rec.u[index],

	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	32					; 00000020H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _index$5[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+10636]
	push	eax
	mov	ecx, DWORD PTR _index$5[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4488]
	push	eax
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ssd_u$4[ebp], eax

; 369  :                                     LCU_WIDTH_C,         LCU_WIDTH_C,
; 370  :                                     width);
; 371  :     int ssd_v = kvz_pixels_calc_ssd(&lcu->ref.v[index], &lcu->rec.v[index],

	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	32					; 00000020H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _index$5[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+11660]
	push	eax
	mov	ecx, DWORD PTR _index$5[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+5512]
	push	eax
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ssd_v$3[ebp], eax

; 372  :                                     LCU_WIDTH_C,        LCU_WIDTH_C,
; 373  :                                     width);
; 374  :     ssd = ssd_u + ssd_v;

	mov	eax, DWORD PTR _ssd_u$4[ebp]
	add	eax, DWORD PTR _ssd_v$3[ebp]
	mov	DWORD PTR _ssd$[ebp], eax
$LN10@kvz_cu_rd_:

; 375  :   }
; 376  : 
; 377  :   {
; 378  :     int8_t scan_order = kvz_get_scan_order(pred_cu->type, pred_cu->intra.mode_chroma, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	call	_kvz_get_scan_order
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _scan_order$2[ebp], al

; 379  :     const int index = xy_to_zorder(LCU_WIDTH_C, lcu_px.x, lcu_px.y);

	mov	eax, DWORD PTR _lcu_px$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _lcu_px$[ebp]
	push	ecx
	push	32					; 00000020H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _index$1[ebp], eax

; 380  : 
; 381  :     coeff_bits += kvz_get_coeff_cost(state, &lcu->coeff.u[index], width, 2, scan_order);

	movzx	eax, BYTE PTR _scan_order$2[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$1[ebp]
	mov	eax, DWORD PTR _lcu$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+20880]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_coeff_cost
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv465[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv465[ebp]
	mov	eax, DWORD PTR tv465[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	addsd	xmm0, QWORD PTR _coeff_bits$[ebp]
	movsd	QWORD PTR _coeff_bits$[ebp], xmm0

; 382  :     coeff_bits += kvz_get_coeff_cost(state, &lcu->coeff.v[index], width, 2, scan_order);

	movzx	eax, BYTE PTR _scan_order$2[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$1[ebp]
	mov	eax, DWORD PTR _lcu$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+22928]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_coeff_cost
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv477[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv477[ebp]
	mov	eax, DWORD PTR tv477[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	addsd	xmm0, QWORD PTR _coeff_bits$[ebp]
	movsd	QWORD PTR _coeff_bits$[ebp], xmm0

; 383  :   }
; 384  : 
; 385  :   double bits = tr_tree_bits + coeff_bits;

	movsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	addsd	xmm0, QWORD PTR _coeff_bits$[ebp]
	movsd	QWORD PTR _bits$[ebp], xmm0

; 386  :   return (double)ssd * CHROMA_MULT + bits * state->lambda;

	cvtsi2sd xmm0, DWORD PTR _ssd$[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff8000000000000
	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm1, QWORD PTR _bits$[ebp]
	mulsd	xmm1, QWORD PTR [eax+296]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv485[ebp], xmm0
	fld	QWORD PTR tv485[ebp]
$LN1@kvz_cu_rd_:

; 387  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@kvz_cu_rd_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@kvz_cu_rd_:
	DD	1
	DD	$LN19@kvz_cu_rd_
$LN19@kvz_cu_rd_:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN18@kvz_cu_rd_
$LN18@kvz_cu_rd_:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	0
_kvz_cu_rd_cost_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _kvz_cu_rd_cost_luma
_TEXT	SEGMENT
tv434 = -396						; size = 8
tv375 = -396						; size = 8
tv369 = -396						; size = 8
tv358 = -396						; size = 8
tv347 = -396						; size = 8
tv336 = -396						; size = 8
tv136 = -396						; size = 4
tv426 = -392						; size = 4
tv224 = -392						; size = 4
tv151 = -392						; size = 4
tv134 = -392						; size = 4
_bits$ = -192						; size = 8
_coeffs$1 = -176					; size = 4
_luma_scan_mode$2 = -161				; size = 1
_index$3 = -152						; size = 4
_ssd$ = -140						; size = 4
_ctx$4 = -128						; size = 4
_sum$5 = -116						; size = 8
_offset$6 = -100					; size = 4
_ctx$7 = -88						; size = 4
_intra_split_flag$ = -73				; size = 1
_tr_depth$ = -61					; size = 1
_tr_tree_bits$ = -52					; size = 8
_coeff_bits$ = -36					; size = 8
_tr_cu$ = -20						; size = 4
_width$ = -8						; size = 4
_state$ = 8						; size = 4
_x_px$ = 12						; size = 4
_y_px$ = 16						; size = 4
_depth$ = 20						; size = 4
_pred_cu$ = 24						; size = 4
_lcu$ = 28						; size = 4
_kvz_cu_rd_cost_luma PROC				; COMDAT

; 252  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 253  :   const int width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _width$[ebp], eax

; 254  : 
; 255  :   // cur_cu is used for TU parameters.
; 256  :   cu_info_t *const tr_cu = LCU_GET_CU_AT_PX(lcu, x_px, y_px);

	mov	eax, DWORD PTR _x_px$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_px$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _tr_cu$[ebp], eax

; 257  : 
; 258  :   double coeff_bits = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _coeff_bits$[ebp], xmm0

; 259  :   double tr_tree_bits = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0

; 260  : 
; 261  :   // Check that lcu is not in 
; 262  :   assert(x_px >= 0 && x_px < LCU_WIDTH);

	cmp	DWORD PTR _x_px$[ebp], 0
	jl	SHORT $LN8@kvz_cu_rd_
	cmp	DWORD PTR _x_px$[ebp], 64		; 00000040H
	jl	SHORT $LN9@kvz_cu_rd_
$LN8@kvz_cu_rd_:
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_rd_cost_luma@@9@9
	add	eax, 10					; 0000000aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@LEPPLIOA@?$AAx?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_cu_rd_:

; 263  :   assert(y_px >= 0 && y_px < LCU_WIDTH);

	cmp	DWORD PTR _y_px$[ebp], 0
	jl	SHORT $LN10@kvz_cu_rd_
	cmp	DWORD PTR _y_px$[ebp], 64		; 00000040H
	jl	SHORT $LN11@kvz_cu_rd_
$LN10@kvz_cu_rd_:
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_cu_rd_cost_luma@@9@9
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@FKKOGHFJ@?$AAy?$AA_?$AAp?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@kvz_cu_rd_:

; 264  : 
; 265  :   const uint8_t tr_depth = tr_cu->tr_depth - depth;

	mov	eax, DWORD PTR _tr_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	sub	edx, DWORD PTR _depth$[ebp]
	mov	BYTE PTR _tr_depth$[ebp], dl

; 266  : 
; 267  :   // Add transform_tree split_transform_flag bit cost.
; 268  :   bool intra_split_flag = pred_cu->type == CU_INTRA && pred_cu->part_size == SIZE_NxN && depth == 3;

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN12@kvz_cu_rd_
	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 3
	jne	SHORT $LN12@kvz_cu_rd_
	cmp	DWORD PTR _depth$[ebp], 3
	jne	SHORT $LN12@kvz_cu_rd_
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN13@kvz_cu_rd_
$LN12@kvz_cu_rd_:
	mov	DWORD PTR tv134[ebp], 0
$LN13@kvz_cu_rd_:
	cmp	DWORD PTR tv134[ebp], 0
	jne	SHORT $LN14@kvz_cu_rd_
	mov	DWORD PTR tv136[ebp], 0
	jmp	SHORT $LN15@kvz_cu_rd_
$LN14@kvz_cu_rd_:
	mov	DWORD PTR tv136[ebp], 1
$LN15@kvz_cu_rd_:
	mov	al, BYTE PTR tv136[ebp]
	mov	BYTE PTR _intra_split_flag$[ebp], al

; 269  :   if (width <= TR_MAX_WIDTH
; 270  :       && width > TR_MIN_WIDTH
; 271  :       && !intra_split_flag)

	cmp	DWORD PTR _width$[ebp], 32		; 00000020H
	jg	SHORT $LN2@kvz_cu_rd_
	cmp	DWORD PTR _width$[ebp], 4
	jle	SHORT $LN2@kvz_cu_rd_
	movzx	eax, BYTE PTR _intra_split_flag$[ebp]
	test	eax, eax
	jne	SHORT $LN2@kvz_cu_rd_

; 272  :   {
; 273  :     const cabac_ctx_t *ctx = &(state->cabac.ctx.trans_subdiv_model[5 - (6 - depth)]);

	mov	eax, 6
	sub	eax, DWORD PTR _depth$[ebp]
	mov	ecx, 5
	sub	ecx, eax
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx+109]
	mov	DWORD PTR _ctx$7[ebp], eax

; 274  :     tr_tree_bits += CTX_ENTROPY_FBITS(ctx, tr_depth > 0);

	movzx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jle	SHORT $LN16@kvz_cu_rd_
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN17@kvz_cu_rd_
$LN16@kvz_cu_rd_:
	mov	DWORD PTR tv151[ebp], 0
$LN17@kvz_cu_rd_:
	mov	ecx, DWORD PTR _ctx$7[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR tv151[ebp]
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[edx*4]
	addsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0
$LN2@kvz_cu_rd_:

; 275  :   }
; 276  : 
; 277  :   if (tr_depth > 0) {

	movzx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jle	$LN3@kvz_cu_rd_

; 278  :     int offset = width / 2;

	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _offset$6[ebp], eax

; 279  :     double sum = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum$5[ebp], xmm0

; 280  : 
; 281  :     sum += kvz_cu_rd_cost_luma(state, x_px, y_px, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv336[ebp]
	movsd	xmm0, QWORD PTR tv336[ebp]
	addsd	xmm0, QWORD PTR _sum$5[ebp]
	movsd	QWORD PTR _sum$5[ebp], xmm0

; 282  :     sum += kvz_cu_rd_cost_luma(state, x_px + offset, y_px, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv347[ebp]
	movsd	xmm0, QWORD PTR tv347[ebp]
	addsd	xmm0, QWORD PTR _sum$5[ebp]
	movsd	QWORD PTR _sum$5[ebp], xmm0

; 283  :     sum += kvz_cu_rd_cost_luma(state, x_px, y_px + offset, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv358[ebp]
	movsd	xmm0, QWORD PTR tv358[ebp]
	addsd	xmm0, QWORD PTR _sum$5[ebp]
	movsd	QWORD PTR _sum$5[ebp], xmm0

; 284  :     sum += kvz_cu_rd_cost_luma(state, x_px + offset, y_px + offset, depth + 1, pred_cu, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y_px$[ebp]
	add	eax, DWORD PTR _offset$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	add	ecx, DWORD PTR _offset$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cu_rd_cost_luma
	add	esp, 24					; 00000018H
	fstp	QWORD PTR tv369[ebp]
	movsd	xmm0, QWORD PTR tv369[ebp]
	addsd	xmm0, QWORD PTR _sum$5[ebp]
	movsd	QWORD PTR _sum$5[ebp], xmm0

; 285  : 
; 286  :     return sum + tr_tree_bits * state->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR _sum$5[ebp]
	movsd	QWORD PTR tv375[ebp], xmm0
	fld	QWORD PTR tv375[ebp]
	jmp	$LN1@kvz_cu_rd_
$LN3@kvz_cu_rd_:

; 287  :   }
; 288  : 
; 289  :   // Add transform_tree cbf_luma bit cost.
; 290  :   if (pred_cu->type == CU_INTRA ||
; 291  :       tr_depth > 0 ||
; 292  :       cbf_is_set(tr_cu->cbf, depth, COLOR_U) ||

	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN5@kvz_cu_rd_
	movzx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jg	SHORT $LN5@kvz_cu_rd_
	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@kvz_cu_rd_
	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@kvz_cu_rd_
$LN5@kvz_cu_rd_:

; 293  :       cbf_is_set(tr_cu->cbf, depth, COLOR_V))
; 294  :   {
; 295  :     const cabac_ctx_t *ctx = &(state->cabac.ctx.qt_cbf_model_luma[!tr_depth]);

	movzx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jne	SHORT $LN18@kvz_cu_rd_
	mov	DWORD PTR tv224[ebp], 1
	jmp	SHORT $LN19@kvz_cu_rd_
$LN18@kvz_cu_rd_:
	mov	DWORD PTR tv224[ebp], 0
$LN19@kvz_cu_rd_:
	mov	ecx, DWORD PTR tv224[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx+112]
	mov	DWORD PTR _ctx$4[ebp], eax

; 296  :     tr_tree_bits += CTX_ENTROPY_FBITS(ctx, cbf_is_set(pred_cu->cbf, depth, COLOR_Y));

	mov	eax, DWORD PTR _ctx$4[ebp]
	movzx	esi, BYTE PTR [eax]
	push	0
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pred_cu$[ebp]
	movzx	eax, WORD PTR [edx+4]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	xor	esi, eax
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[esi*4]
	addsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	movsd	QWORD PTR _tr_tree_bits$[ebp], xmm0
$LN4@kvz_cu_rd_:

; 297  :   }
; 298  : 
; 299  :   // SSD between reconstruction and original
; 300  :   int ssd = 0;

	mov	DWORD PTR _ssd$[ebp], 0

; 301  :   if (!state->encoder_control->cfg.lossless) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2364], 0
	jne	SHORT $LN6@kvz_cu_rd_

; 302  :     int index = y_px * LCU_WIDTH + x_px;

	mov	eax, DWORD PTR _y_px$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _x_px$[ebp]
	mov	DWORD PTR _index$3[ebp], eax

; 303  :     ssd = kvz_pixels_calc_ssd(&lcu->ref.y[index], &lcu->rec.y[index],

	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	64					; 00000040H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _index$3[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+6540]
	push	eax
	mov	ecx, DWORD PTR _index$3[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+392]
	push	eax
	call	DWORD PTR _kvz_pixels_calc_ssd
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ssd$[ebp], eax
$LN6@kvz_cu_rd_:

; 304  :                                         LCU_WIDTH,          LCU_WIDTH,
; 305  :                                         width);
; 306  :   }
; 307  : 
; 308  :   {
; 309  :     int8_t luma_scan_mode = kvz_get_scan_order(pred_cu->type, pred_cu->intra.mode, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pred_cu$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pred_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	call	_kvz_get_scan_order
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _luma_scan_mode$2[ebp], al

; 310  :     const coeff_t *coeffs = &lcu->coeff.y[xy_to_zorder(LCU_WIDTH, x_px, y_px)];

	mov	eax, DWORD PTR _y_px$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_px$[ebp]
	push	ecx
	push	64					; 00000040H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+eax*2+12688]
	mov	DWORD PTR _coeffs$1[ebp], eax

; 311  : 
; 312  :     coeff_bits += kvz_get_coeff_cost(state, coeffs, width, 0, luma_scan_mode);

	movzx	eax, BYTE PTR _luma_scan_mode$2[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coeffs$1[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_get_coeff_cost
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv426[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv426[ebp]
	mov	ecx, DWORD PTR tv426[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	addsd	xmm0, QWORD PTR _coeff_bits$[ebp]
	movsd	QWORD PTR _coeff_bits$[ebp], xmm0

; 313  :   }
; 314  : 
; 315  :   double bits = tr_tree_bits + coeff_bits;

	movsd	xmm0, QWORD PTR _tr_tree_bits$[ebp]
	addsd	xmm0, QWORD PTR _coeff_bits$[ebp]
	movsd	QWORD PTR _bits$[ebp], xmm0

; 316  :   return (double)ssd * LUMA_MULT + bits * state->lambda;

	cvtsi2sd xmm0, DWORD PTR _ssd$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe999999999999a
	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm1, QWORD PTR _bits$[ebp]
	mulsd	xmm1, QWORD PTR [eax+296]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv434[ebp], xmm0
	fld	QWORD PTR tv434[ebp]
$LN1@kvz_cu_rd_:

; 317  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_cu_rd_cost_luma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _kvz_search_lcu
_TEXT	SEGMENT
tv254 = -155480						; size = 8
_cost$ = -153928					; size = 8
_constr$ = -153912					; size = 4
_depth$1 = -153900					; size = 4
_work_tree$ = -153888					; size = 153880
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_hor_buf$ = 20						; size = 4
_ver_buf$ = 24						; size = 4
_kvz_search_lcu PROC					; COMDAT

; 959  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -8					; fffffff8H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 155480				; 00025f58H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-155480]
	mov	ecx, 38870				; 000097d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 960  :   assert(x % LCU_WIDTH == 0);

	mov	eax, DWORD PTR _x$[ebx]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN13@kvz_search
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN13@kvz_search:
	test	eax, eax
	je	SHORT $LN8@kvz_search
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_search_lcu@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CG@GPPDGMKJ@?$AAx?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_search:

; 961  :   assert(y % LCU_WIDTH == 0);

	mov	eax, DWORD PTR _y$[ebx]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN14@kvz_search
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN14@kvz_search:
	test	eax, eax
	je	SHORT $LN9@kvz_search
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_search_lcu@@9@9
	add	ecx, 2
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GK@FACNBCA@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CG@OCHLJBEL@?$AAy?$AA?5?$AA?$CF?$AA?5?$AAL?$AAC?$AAU?$AA_?$AAW?$AAI?$AAD?$AAT?$AAH?$AA?5?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_search:

; 962  : 
; 963  :   // Initialize the same starting state to every depth. The search process
; 964  :   // will use these as temporary storage for predictions before making
; 965  :   // a decision on which to use, and they get updated during the search
; 966  :   // process.
; 967  :   lcu_t work_tree[MAX_PU_DEPTH + 1];
; 968  :   init_lcu_t(state, x, y, &work_tree[0], hor_buf, ver_buf);

	mov	eax, DWORD PTR _ver_buf$[ebx]
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebx]
	push	ecx
	mov	edx, 30776				; 00007838H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _work_tree$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebx]
	push	edx
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	push	ecx
	call	_init_lcu_t
	add	esp, 24					; 00000018H

; 969  :   for (int depth = 1; depth <= MAX_PU_DEPTH; ++depth) {

	mov	DWORD PTR _depth$1[ebp], 1
	jmp	SHORT $LN4@kvz_search
$LN2@kvz_search:
	mov	eax, DWORD PTR _depth$1[ebp]
	add	eax, 1
	mov	DWORD PTR _depth$1[ebp], eax
$LN4@kvz_search:
	cmp	DWORD PTR _depth$1[ebp], 4
	jg	SHORT $LN3@kvz_search

; 970  :     work_tree[depth] = work_tree[0];

	mov	eax, 30776				; 00007838H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _work_tree$[ebp+ecx]
	imul	eax, DWORD PTR _depth$1[ebp], 30776
	lea	ecx, DWORD PTR _work_tree$[ebp+eax]
	push	30776					; 00007838H
	push	edx
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 971  :   }

	jmp	SHORT $LN2@kvz_search
$LN3@kvz_search:

; 972  : 
; 973  :   // If the ML depth prediction is enabled, 
; 974  :   // generate the depth prediction interval 
; 975  :   // for the current lcu
; 976  :   constraint_t* constr = state->constraint;

	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR _constr$[ebp], ecx

; 977  :   if (constr->ml_intra_depth_ctu) {

	mov	eax, DWORD PTR _constr$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@kvz_search

; 978  :     kvz_lcu_luma_depth_pred(constr->ml_intra_depth_ctu, work_tree[0].ref.y, state->qp);

	mov	eax, DWORD PTR _state$[ebx]
	movzx	ecx, BYTE PTR [eax+312]
	push	ecx
	mov	edx, 30776				; 00007838H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _work_tree$[ebp+eax+392]
	push	ecx
	mov	edx, DWORD PTR _constr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_kvz_lcu_luma_depth_pred
	add	esp, 12					; 0000000cH
$LN5@kvz_search:

; 979  :   }
; 980  : 
; 981  :   // Start search from depth 0.
; 982  :   double cost = search_cu(state, x, y, 0, work_tree);

	lea	eax, DWORD PTR _work_tree$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _y$[ebx]
	push	ecx
	mov	edx, DWORD PTR _x$[ebx]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	call	_search_cu
	add	esp, 20					; 00000014H
	fstp	QWORD PTR _cost$[ebp]

; 983  : 
; 984  :   // Save squared cost for rate control.
; 985  :   if(state->encoder_control->cfg.rc_algorithm == KVZ_LAMBDA) {

	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2452]
	cmp	edx, 1
	jne	SHORT $LN6@kvz_search

; 986  :     kvz_get_lcu_stats(state, x / LCU_WIDTH, y / LCU_WIDTH)->weight = cost * cost;

	movsd	xmm0, QWORD PTR _cost$[ebp]
	mulsd	xmm0, QWORD PTR _cost$[ebp]
	mov	eax, DWORD PTR _y$[ebx]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	push	eax
	mov	eax, DWORD PTR _x$[ebx]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	push	eax
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	movsd	QWORD PTR tv254[ebp], xmm0
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	movsd	xmm0, QWORD PTR tv254[ebp]
	movsd	QWORD PTR [eax+8], xmm0
$LN6@kvz_search:

; 987  :   }
; 988  : 
; 989  :   // The best decisions through out the LCU got propagated back to depth 0,
; 990  :   // so copy those back to the frame.
; 991  :   copy_lcu_to_cu_data(state, x, y, &work_tree[0]);

	mov	eax, 30776				; 00007838H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _work_tree$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _y$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	mov	edx, DWORD PTR _state$[ebx]
	push	edx
	call	_copy_lcu_to_cu_data
	add	esp, 16					; 00000010H

; 992  : 
; 993  :   // Copy coeffs to encoder state.
; 994  :   copy_coeffs(work_tree[0].coeff.y, state->coeff->y, LCU_WIDTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	edx, 30776				; 00007838H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _work_tree$[ebp+eax+12688]
	push	ecx
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 995  :   copy_coeffs(work_tree[0].coeff.u, state->coeff->u, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax+316]
	add	ecx, 8192				; 00002000H
	push	ecx
	mov	edx, 30776				; 00007838H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _work_tree$[ebp+eax+20880]
	push	ecx
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 996  :   copy_coeffs(work_tree[0].coeff.v, state->coeff->v, LCU_WIDTH_C);

	push	32					; 00000020H
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax+316]
	add	ecx, 10240				; 00002800H
	push	ecx
	mov	edx, 30776				; 00007838H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _work_tree$[ebp+eax+22928]
	push	ecx
	call	_copy_coeffs
	add	esp, 12					; 0000000cH

; 997  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@kvz_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN12@kvz_search:
	DD	1
	DD	$LN11@kvz_search
$LN11@kvz_search:
	DD	-153888					; fffda6e0H
	DD	153880					; 00025918H
	DD	$LN10@kvz_search
$LN10@kvz_search:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
_kvz_search_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\search.c
;	COMDAT _kvz_sort_modes
_TEXT	SEGMENT
_j$1 = -45						; size = 1
_cur_mode$2 = -33					; size = 1
_cur_cost$3 = -24					; size = 8
_i$4 = -5						; size = 1
_modes$ = 8						; size = 4
_costs$ = 12						; size = 4
_length$ = 16						; size = 1
_kvz_sort_modes PROC					; COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2D209711_search@c
	call	@__CheckForDebuggerJustMyCode@4

; 423  :   // Length for intra is always between 5 and 23, and is either 21, 17, 9 or 8 about
; 424  :   // 60% of the time, so there should be no need for anything more complex
; 425  :   // than insertion sort.
; 426  :   // Length for merge is 5 or less.
; 427  :   for (uint8_t i = 1; i < length; ++i) {

	mov	BYTE PTR _i$4[ebp], 1
	jmp	SHORT $LN4@kvz_sort_m
$LN2@kvz_sort_m:
	mov	al, BYTE PTR _i$4[ebp]
	add	al, 1
	mov	BYTE PTR _i$4[ebp], al
$LN4@kvz_sort_m:
	movzx	eax, BYTE PTR _i$4[ebp]
	movzx	ecx, BYTE PTR _length$[ebp]
	cmp	eax, ecx
	jge	$LN3@kvz_sort_m

; 428  :     const double cur_cost = costs[i];

	movzx	eax, BYTE PTR _i$4[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	movsd	QWORD PTR _cur_cost$3[ebp], xmm0

; 429  :     const int8_t cur_mode = modes[i];

	movzx	eax, BYTE PTR _i$4[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _cur_mode$2[ebp], dl

; 430  :     uint8_t j = i;

	mov	al, BYTE PTR _i$4[ebp]
	mov	BYTE PTR _j$1[ebp], al
$LN5@kvz_sort_m:

; 431  :     while (j > 0 && cur_cost < costs[j - 1]) {

	movzx	eax, BYTE PTR _j$1[ebp]
	test	eax, eax
	jle	SHORT $LN6@kvz_sort_m
	movzx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8-8]
	comisd	xmm0, QWORD PTR _cur_cost$3[ebp]
	jbe	SHORT $LN6@kvz_sort_m

; 432  :       costs[j] = costs[j - 1];

	movzx	eax, BYTE PTR _j$1[ebp]
	movzx	ecx, BYTE PTR _j$1[ebp]
	mov	edx, DWORD PTR _costs$[ebp]
	mov	esi, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR [esi+eax*8-8]
	movsd	QWORD PTR [edx+ecx*8], xmm0

; 433  :       modes[j] = modes[j - 1];

	movzx	eax, BYTE PTR _j$1[ebp]
	movzx	ecx, BYTE PTR _j$1[ebp]
	mov	edx, DWORD PTR _modes$[ebp]
	mov	esi, DWORD PTR _modes$[ebp]
	mov	al, BYTE PTR [esi+eax-1]
	mov	BYTE PTR [edx+ecx], al

; 434  :       --j;

	mov	al, BYTE PTR _j$1[ebp]
	sub	al, 1
	mov	BYTE PTR _j$1[ebp], al

; 435  :     }

	jmp	SHORT $LN5@kvz_sort_m
$LN6@kvz_sort_m:

; 436  :     costs[j] = cur_cost;

	movzx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _costs$[ebp]
	movsd	xmm0, QWORD PTR _cur_cost$3[ebp]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 437  :     modes[j] = cur_mode;

	movzx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _modes$[ebp]
	mov	dl, BYTE PTR _cur_mode$2[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 438  :   }

	jmp	$LN2@kvz_sort_m
$LN3@kvz_sort_m:

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sort_modes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_copy
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_src$ = 12						; size = 2
_plane$ = 16						; size = 4
_cbf_copy PROC						; COMDAT

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 567  :   cbf_clear(cbf, 0, plane);

	mov	eax, DWORD PTR _plane$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cbf$[ebp]
	push	ecx
	call	_cbf_clear
	add	esp, 12					; 0000000cH

; 568  :   *cbf |= src & (cbf_masks[0] << (NUM_CBF_DEPTHS * plane));

	movzx	eax, WORD PTR _src$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	edx, WORD PTR _cbf_masks[edx]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	mov	ecx, DWORD PTR _cbf$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [eax], dx

; 569  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_clear
_TEXT	SEGMENT
_cbf$ = 8						; size = 4
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_clear PROC						; COMDAT

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 559  :   *cbf &= ~(cbf_masks[depth] << (NUM_CBF_DEPTHS * plane));

	mov	eax, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[eax*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _cbf$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, edx
	mov	edx, DWORD PTR _cbf$[ebp]
	mov	WORD PTR [edx], cx

; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set_any
_TEXT	SEGMENT
tv79 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_cbf_is_set_any PROC					; COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 526  :   return cbf_is_set(cbf, depth, COLOR_Y) ||

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cbf$[ebp]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	1
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	movzx	eax, WORD PTR _cbf$[ebp]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv79[ebp], 1
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv79[ebp]

; 527  :          cbf_is_set(cbf, depth, COLOR_U) ||
; 528  :          cbf_is_set(cbf, depth, COLOR_V);
; 529  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _xy_to_zorder
_TEXT	SEGMENT
tv89 = -208						; size = 4
_result$ = -8						; size = 4
_width$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xy_to_zorder PROC					; COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 387  :   assert(width % 4 == 0 && width >= 4 && width <= 64);

	mov	eax, DWORD PTR _width$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 4
	jb	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 64		; 00000040H
	jbe	SHORT $LN11@xy_to_zord
$LN10@xy_to_zord:
	mov	edx, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xy_to_zord:

; 388  :   assert(x % 4 == 0 && x < width);

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN12@xy_to_zord
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN13@xy_to_zord
$LN12@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xy_to_zord:

; 389  :   assert(y % 4 == 0 && y < width);

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN14@xy_to_zord
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN15@xy_to_zord
$LN14@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@xy_to_zord:

; 390  : 
; 391  :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 392  : 
; 393  :   switch (width) {

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 56			; 00000038H
	ja	$LN2@xy_to_zord
	mov	edx, DWORD PTR tv89[ebp]
	movzx	eax, BYTE PTR $LN16@xy_to_zord[edx]
	jmp	DWORD PTR $LN17@xy_to_zord[eax*4]
$LN4@xy_to_zord:

; 394  :     case 64:
; 395  :       result += x / 32 * (32*32);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 5
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 396  :       result += y / 32 * (64*32);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 5
	shl	eax, 11					; 0000000bH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 397  :       x %= 32;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 398  :       y %= 32;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN5@xy_to_zord:

; 399  :       // fallthrough
; 400  :     case 32:
; 401  :       result += x / 16 * (16*16);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 4
	shl	eax, 8
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 402  :       result += y / 16 * (32*16);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 4
	shl	eax, 9
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 403  :       x %= 16;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 404  :       y %= 16;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN6@xy_to_zord:

; 405  :       // fallthrough
; 406  :     case 16:
; 407  :       result += x / 8 * ( 8*8);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 3
	shl	eax, 6
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 408  :       result += y / 8 * (16*8);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 3
	shl	eax, 7
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 409  :       x %= 8;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 410  :       y %= 8;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN7@xy_to_zord:

; 411  :       // fallthrough
; 412  :     case 8:
; 413  :       result += x / 4 * (4*4);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 2
	shl	eax, 4
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 414  :       result += y / 4 * (8*4);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 2
	shl	eax, 5
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN2@xy_to_zord:

; 415  :       // fallthrough
; 416  :     case 4:
; 417  :       break;
; 418  :   }
; 419  : 
; 420  :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@xy_to_zord:
	DD	$LN7@xy_to_zord
	DD	$LN6@xy_to_zord
	DD	$LN5@xy_to_zord
	DD	$LN4@xy_to_zord
	DD	$LN2@xy_to_zord
$LN16@xy_to_zord:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_xy_to_zorder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _copy_coeffs
_TEXT	SEGMENT
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
_width$ = 16						; size = 4
_copy_coeffs PROC					; COMDAT

; 369  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 370  :   memcpy(dest, src, width * width * sizeof(coeff_t));

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 371  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_copy_coeffs ENDP
_TEXT	ENDS
END
