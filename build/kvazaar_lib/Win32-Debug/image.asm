; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\image.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__40DF0D2D_ctype@h DB 01H
__C5A167BB_basetsd@h DB 01H
__D24F4925_winnt@h DB 01H
__56CF70A3_processthreadsapi@h DB 01H
__4FC5969A_memoryapi@h DB 01H
__7D439CBC_winerror@h DB 01H
__41E0877F_winbase@h DB 01H
__08182E14_stralign@h DB 01H
__8FD04514_threads@h DB 01H
__C081D3C0_image@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+4
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
CONST	ENDS
PUBLIC	_kvz_image_alloc_420
PUBLIC	_kvz_image_alloc
PUBLIC	_kvz_image_free
PUBLIC	_kvz_image_copy_ref
PUBLIC	_kvz_image_make_subimage
PUBLIC	_kvz_yuv_t_alloc
PUBLIC	_kvz_yuv_t_free
PUBLIC	_kvz_image_calc_sad
PUBLIC	_kvz_image_calc_satd
PUBLIC	_kvz_pixels_blit
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_image_alloc@@9@9		; `kvz_image_alloc'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CC@BMBKFAEJ@?$AA?$CI?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1CE@POJLMCPA@?$AA?$CI?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_image_copy_ref@@9@9	; `kvz_image_copy_ref'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_image_make_subimage@@9@9	; `kvz_image_make_subimage'::`1'::__LINE__Var
PUBLIC	??_C@_1CI@JFJLNFKK@?$AA?$CI?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	??_C@_1CI@BIBDCIEI@?$AA?$CI?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	??_C@_1EM@PNHMJFCF@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@ ; `string'
PUBLIC	??_C@_1FA@GIEMIKPP@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_image_calc_sad@@9@9	; `kvz_image_calc_sad'::`1'::__LINE__Var
PUBLIC	??_C@_1GA@LFGGFFDK@?$AAp?$AAi?$AAc?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ ; `string'
PUBLIC	??_C@_1GE@OOKLCBMP@?$AAp?$AAi?$AAc?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_image_calc_satd@@9@9	; `kvz_image_calc_satd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??kvz_pixels_blit@@9@9		; `kvz_pixels_blit'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@EONKIN@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs@ ; `string'
PUBLIC	??_C@_1CI@MHDPBLKC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA_?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1DE@FGBGNIOO@?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1FC@LAHJNBGJ@?$AAo?$AAr?$AAi?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FC@LAHJNBGJ@?$AAo?$AAr?$AAi?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
CONST	SEGMENT
??_C@_1FC@LAHJNBGJ@?$AAo?$AAr?$AAi?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ DB 'o'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'd', 00H, 's', 00H, 't', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@FGBGNIOO@?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1DE@FGBGNIOO@?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'o'
	DB	00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@MHDPBLKC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA_?$AAs?$AAt@
CONST	SEGMENT
??_C@_1CI@MHDPBLKC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA_?$AAs?$AAt@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EONKIN@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs@
CONST	SEGMENT
??_C@_1CK@EONKIN@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_pixels_blit@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_pixels_blit@@9@9 DD 021fH		; `kvz_pixels_blit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_image_calc_satd@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_image_calc_satd@@9@9 DD 01c4H	; `kvz_image_calc_satd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@OOKLCBMP@?$AAp?$AAi?$AAc?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
CONST	SEGMENT
??_C@_1GE@OOKLCBMP@?$AAp?$AAi?$AAc?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ DB 'p'
	DB	00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, '_', 00H, 'h', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@LFGGFFDK@?$AAp?$AAi?$AAc?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
CONST	SEGMENT
??_C@_1GA@LFGGFFDK@?$AAp?$AAi?$AAc?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ DB 'p'
	DB	00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'p', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '-', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_image_calc_sad@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_image_calc_sad@@9@9 DD 0199H	; `kvz_image_calc_sad'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FA@GIEMIKPP@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@
CONST	SEGMENT
??_C@_1FA@GIEMIKPP@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@ DB 'y'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'h', 00H, 'e', 00H, 'i'
	DB	00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H, 'i'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@PNHMJFCF@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@
CONST	SEGMENT
??_C@_1EM@PNHMJFCF@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@ DB 'x'
	DB	00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'o', 00H, 'r', 00H, 'i', 00H, 'g', 00H, '_', 00H, 'i', 00H, 'm'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, '-', 00H, '>', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@BIBDCIEI@?$AA?$CI?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1CI@BIBDCIEI@?$AA?$CI?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@ DB '('
	DB	00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JFJLNFKK@?$AA?$CI?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1CI@JFJLNFKK@?$AA?$CI?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@ DB '('
	DB	00H, 'x', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_image_make_subimage@@9@9 DD 09fH	; `kvz_image_make_subimage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_image_copy_ref@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_image_copy_ref@@9@9 DD 092H	; `kvz_image_copy_ref'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@POJLMCPA@?$AA?$CI?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@POJLMCPA@?$AA?$CI?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN@ DB '('
	DB	00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@BMBKFAEJ@?$AA?$CI?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CC@BMBKFAEJ@?$AA?$CI?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB '('
	DB	00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'%', 00H, ' ', 00H, '2', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_image_alloc@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_image_alloc@@9@9 DD 039H		; `kvz_image_alloc'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _image_interpolated_sad
_TEXT	SEGMENT
tv95 = -280						; size = 4
tv88 = -280						; size = 4
tv81 = -280						; size = 4
tv78 = -280						; size = 4
_result$ = -80						; size = 4
_bottom$ = -68						; size = 4
_top$ = -56						; size = 4
_right$ = -44						; size = 4
_left$ = -32						; size = 4
_ref_data$ = -20					; size = 4
_pic_data$ = -8						; size = 4
_pic$ = 8						; size = 4
_ref$ = 12						; size = 4
_pic_x$ = 16						; size = 4
_pic_y$ = 20						; size = 4
_ref_x$ = 24						; size = 4
_ref_y$ = 28						; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_optimized_sad$ = 40					; size = 4
_image_interpolated_sad PROC				; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  :   kvz_pixel *pic_data, *ref_data;
; 278  : 
; 279  :   int left, right, top, bottom;
; 280  :   int result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 281  : 
; 282  :   // Change the movement vector to point right next to the frame. This doesn't
; 283  :   // affect the result but removes some special cases.
; 284  :   if (ref_x > ref->width)            ref_x = ref->width;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref_x$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jle	SHORT $LN2@image_inte
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _ref_x$[ebp], ecx
$LN2@image_inte:

; 285  :   if (ref_y > ref->height)           ref_y = ref->height;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref_y$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jle	SHORT $LN3@image_inte
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _ref_y$[ebp], ecx
$LN3@image_inte:

; 286  :   if (ref_x + block_width < 0)  ref_x = -block_width;

	mov	eax, DWORD PTR _ref_x$[ebp]
	add	eax, DWORD PTR _block_width$[ebp]
	jns	SHORT $LN4@image_inte
	mov	eax, DWORD PTR _block_width$[ebp]
	neg	eax
	mov	DWORD PTR _ref_x$[ebp], eax
$LN4@image_inte:

; 287  :   if (ref_y + block_height < 0) ref_y = -block_height;

	mov	eax, DWORD PTR _ref_y$[ebp]
	add	eax, DWORD PTR _block_height$[ebp]
	jns	SHORT $LN5@image_inte
	mov	eax, DWORD PTR _block_height$[ebp]
	neg	eax
	mov	DWORD PTR _ref_y$[ebp], eax
$LN5@image_inte:

; 288  : 
; 289  :   // These are the number of pixels by how far the movement vector points
; 290  :   // outside the frame. They are always >= 0. If all of them are 0, the
; 291  :   // movement vector doesn't point outside the frame.
; 292  :   left   = (ref_x < 0) ? -ref_x : 0;

	cmp	DWORD PTR _ref_x$[ebp], 0
	jge	SHORT $LN21@image_inte
	mov	eax, DWORD PTR _ref_x$[ebp]
	neg	eax
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN22@image_inte
$LN21@image_inte:
	mov	DWORD PTR tv78[ebp], 0
$LN22@image_inte:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _left$[ebp], ecx

; 293  :   top    = (ref_y < 0) ? -ref_y : 0;

	cmp	DWORD PTR _ref_y$[ebp], 0
	jge	SHORT $LN23@image_inte
	mov	eax, DWORD PTR _ref_y$[ebp]
	neg	eax
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN24@image_inte
$LN23@image_inte:
	mov	DWORD PTR tv81[ebp], 0
$LN24@image_inte:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _top$[ebp], ecx

; 294  :   right  = (ref_x + block_width  > ref->width)  ? ref_x + block_width  - ref->width  : 0;

	mov	eax, DWORD PTR _ref_x$[ebp]
	add	eax, DWORD PTR _block_width$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jle	SHORT $LN25@image_inte
	mov	edx, DWORD PTR _ref_x$[ebp]
	add	edx, DWORD PTR _block_width$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	sub	edx, DWORD PTR [eax+32]
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN26@image_inte
$LN25@image_inte:
	mov	DWORD PTR tv88[ebp], 0
$LN26@image_inte:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _right$[ebp], ecx

; 295  :   bottom = (ref_y + block_height > ref->height) ? ref_y + block_height - ref->height : 0;

	mov	eax, DWORD PTR _ref_y$[ebp]
	add	eax, DWORD PTR _block_height$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	eax, DWORD PTR [ecx+36]
	jle	SHORT $LN27@image_inte
	mov	edx, DWORD PTR _ref_y$[ebp]
	add	edx, DWORD PTR _block_height$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	sub	edx, DWORD PTR [eax+36]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN28@image_inte
$LN27@image_inte:
	mov	DWORD PTR tv95[ebp], 0
$LN28@image_inte:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _bottom$[ebp], ecx

; 296  : 
; 297  :   // Center picture to the current block and reference to the point where
; 298  :   // movement vector is pointing to. That point might be outside the buffer,
; 299  :   // but that is ok because we project the movement vector to the buffer
; 300  :   // before dereferencing the pointer.
; 301  :   pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR _pic_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pic_x$[ebp]
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _pic_data$[ebp], eax

; 302  :   ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _ref_x$[ebp]
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _ref_data$[ebp], eax

; 303  : 
; 304  :   // The handling of movement vectors that point outside the picture is done
; 305  :   // in the following way.
; 306  :   // - Correct the index of ref_data so that it points to the top-left
; 307  :   //   of the area we want to compare against.
; 308  :   // - Correct the index of pic_data to point inside the current block, so
; 309  :   //   that we compare the right part of the block to the ref_data.
; 310  :   // - Reduce block_width and block_height so that the the size of the area
; 311  :   //   being compared is correct.
; 312  :   //
; 313  :   // NOTE: No more correct since hor_sad was modified to be a separate
; 314  :   // strategy
; 315  :   if (top && left) {

	cmp	DWORD PTR _top$[ebp], 0
	je	$LN6@image_inte
	cmp	DWORD PTR _left$[ebp], 0
	je	$LN6@image_inte

; 316  :     result += cor_sad(pic_data,

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _left$[ebp]
	add	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_cor_sad
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 317  :                       &ref_data[top * ref->stride + left],
; 318  :                       left, top, pic->stride);
; 319  :     result += kvz_ver_sad(&pic_data[left],

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _left$[ebp]
	add	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	add	eax, DWORD PTR _left$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 320  :                       &ref_data[top * ref->stride + left],
; 321  :                       block_width - left, top, pic->stride);
; 322  : 
; 323  :     result += kvz_hor_sad(pic_data + top * pic->stride,

	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _top$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR _top$[ebp]
	imul	eax, DWORD PTR [edx+40]
	add	eax, DWORD PTR _ref_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	DWORD PTR _kvz_hor_sad
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN7@image_inte
$LN6@image_inte:

; 324  :                           ref_data + top * ref->stride,
; 325  :                           block_width, block_height - top,
; 326  :                           pic->stride, ref->stride,
; 327  :                           left, right);
; 328  : 
; 329  :   } else if (top && right) {

	cmp	DWORD PTR _top$[ebp], 0
	je	$LN8@image_inte
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN8@image_inte

; 330  :     result += kvz_ver_sad(pic_data,

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 331  :                       &ref_data[top * ref->stride],
; 332  :                       block_width - right, top, pic->stride);
; 333  :     result += cor_sad(&pic_data[block_width - right],

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, DWORD PTR _right$[ebp]
	add	eax, DWORD PTR _ref_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	sub	edx, DWORD PTR _right$[ebp]
	add	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	_cor_sad
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 334  :                       &ref_data[top * ref->stride + (block_width - right - 1)],
; 335  :                       right, top, pic->stride);
; 336  : 
; 337  :     result += kvz_hor_sad(pic_data + top * pic->stride,

	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _top$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR _top$[ebp]
	imul	eax, DWORD PTR [edx+40]
	add	eax, DWORD PTR _ref_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	DWORD PTR _kvz_hor_sad
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN7@image_inte
$LN8@image_inte:

; 338  :                           ref_data + top * ref->stride,
; 339  :                           block_width, block_height - top,
; 340  :                           pic->stride, ref->stride,
; 341  :                           left, right);
; 342  : 
; 343  :   } else if (bottom && left) {

	cmp	DWORD PTR _bottom$[ebp], 0
	je	$LN10@image_inte
	cmp	DWORD PTR _left$[ebp], 0
	je	$LN10@image_inte

; 344  :     result += kvz_hor_sad(pic_data, ref_data, block_width, block_height - bottom,

	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_hor_sad
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 345  :                           pic->stride, ref->stride, left, right);
; 346  : 
; 347  :     result += cor_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	sub	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _ref$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	imul	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_cor_sad
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 348  :                       &ref_data[(block_height - bottom - 1) * ref->stride + left],
; 349  :                       left, bottom, pic->stride);
; 350  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride + left],

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	sub	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _ref$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	imul	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN7@image_inte
$LN10@image_inte:

; 351  :                       &ref_data[(block_height - bottom - 1) * ref->stride + left],
; 352  :                       block_width - left, bottom, pic->stride);
; 353  :   } else if (bottom && right) {

	cmp	DWORD PTR _bottom$[ebp], 0
	je	$LN12@image_inte
	cmp	DWORD PTR _right$[ebp], 0
	je	$LN12@image_inte

; 354  :     result += kvz_hor_sad(pic_data, ref_data, block_width, block_height - bottom,

	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_hor_sad
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 355  :                           pic->stride, ref->stride, left, right);
; 356  : 
; 357  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	sub	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	sub	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _ref$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	imul	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 358  :                       &ref_data[(block_height - bottom - 1) * ref->stride],
; 359  :                       block_width - right, bottom, pic->stride);
; 360  :     result += cor_sad(&pic_data[(block_height - bottom) * pic->stride + block_width - right],

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	sub	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _ref$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _block_width$[ebp]
	sub	ecx, DWORD PTR _right$[ebp]
	mov	eax, DWORD PTR _ref_data$[ebp]
	lea	ecx, DWORD PTR [eax+ecx-1]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	sub	edx, DWORD PTR _bottom$[ebp]
	mov	eax, DWORD PTR _pic$[ebp]
	imul	edx, DWORD PTR [eax+40]
	add	edx, DWORD PTR _block_width$[ebp]
	sub	edx, DWORD PTR _right$[ebp]
	add	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	_cor_sad
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN7@image_inte
$LN12@image_inte:

; 361  :                       &ref_data[(block_height - bottom - 1) * ref->stride + block_width - right - 1],
; 362  :                       right, bottom, pic->stride);
; 363  :   } else if (top) {

	cmp	DWORD PTR _top$[ebp], 0
	je	$LN14@image_inte

; 364  :     result += kvz_ver_sad(pic_data,

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 365  :                       &ref_data[top * ref->stride],
; 366  :                       block_width, top, pic->stride);
; 367  :     result += reg_sad_maybe_optimized(&pic_data[top * pic->stride],

	mov	eax, DWORD PTR _optimized_sad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	sub	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR _top$[ebp]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR _top$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pic_data$[ebp]
	push	ecx
	call	_reg_sad_maybe_optimized
	add	esp, 28					; 0000001cH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	$LN7@image_inte
$LN14@image_inte:

; 368  :                       &ref_data[top * ref->stride],
; 369  :                       block_width, block_height - top, pic->stride, ref->stride,
; 370  :                       optimized_sad);
; 371  :   } else if (bottom) {

	cmp	DWORD PTR _bottom$[ebp], 0
	je	$LN16@image_inte

; 372  :     result += reg_sad_maybe_optimized(pic_data,

	mov	eax, DWORD PTR _optimized_sad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	sub	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	_reg_sad_maybe_optimized
	add	esp, 28					; 0000001cH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 373  :                       ref_data,
; 374  :                       block_width, block_height - bottom, pic->stride, ref->stride,
; 375  :                       optimized_sad);
; 376  :     result += kvz_ver_sad(&pic_data[(block_height - bottom) * pic->stride],

	mov	esi, esp
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	sub	ecx, DWORD PTR _bottom$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _ref$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	eax, DWORD PTR _block_height$[ebp]
	sub	eax, DWORD PTR _bottom$[ebp]
	mov	ecx, DWORD PTR _pic$[ebp]
	imul	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_ver_sad
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN7@image_inte
$LN16@image_inte:

; 377  :                       &ref_data[(block_height - bottom - 1) * ref->stride],
; 378  :                       block_width, bottom, pic->stride);
; 379  :   } else if (left | right) {

	mov	eax, DWORD PTR _left$[ebp]
	or	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN18@image_inte

; 380  :     result += kvz_hor_sad(pic_data, ref_data,

	mov	esi, esp
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	DWORD PTR _kvz_hor_sad
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 381  :                           block_width, block_height, pic->stride,
; 382  :                           ref->stride, left, right);
; 383  :   } else {

	jmp	SHORT $LN7@image_inte
$LN18@image_inte:

; 384  :     result += reg_sad_maybe_optimized(pic_data, ref_data,

	mov	eax, DWORD PTR _optimized_sad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$[ebp]
	push	edx
	call	_reg_sad_maybe_optimized
	add	esp, 28					; 0000001cH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN7@image_inte:

; 385  :                                       block_width, block_height,
; 386  :                                       pic->stride, ref->stride,
; 387  :                                       optimized_sad);
; 388  :   }
; 389  :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_image_interpolated_sad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _cor_sad
_TEXT	SEGMENT
_sad$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_ref$ = -5						; size = 1
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_block_width$ = 16					; size = 4
_block_height$ = 20					; size = 4
_pic_stride$ = 24					; size = 4
_cor_sad PROC						; COMDAT

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 245  :   kvz_pixel ref = *ref_data;

	mov	eax, DWORD PTR _ref_data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _ref$[ebp], cl

; 246  :   int x, y;
; 247  :   unsigned sad = 0;

	mov	DWORD PTR _sad$[ebp], 0

; 248  : 
; 249  :   for (y = 0; y < block_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@cor_sad
$LN2@cor_sad:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@cor_sad:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _block_height$[ebp]
	jge	SHORT $LN3@cor_sad

; 250  :     for (x = 0; x < block_width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@cor_sad
$LN5@cor_sad:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@cor_sad:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _block_width$[ebp]
	jge	SHORT $LN6@cor_sad

; 251  :       sad += abs(pic_data[y * pic_stride + x] - ref);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pic_data$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	movzx	eax, BYTE PTR _ref$[ebp]
	sub	edx, eax
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sad$[ebp]
	mov	DWORD PTR _sad$[ebp], eax

; 252  :     }

	jmp	SHORT $LN5@cor_sad
$LN6@cor_sad:

; 253  :   }

	jmp	SHORT $LN2@cor_sad
$LN3@cor_sad:

; 254  : 
; 255  :   return sad;

	mov	eax, DWORD PTR _sad$[ebp]

; 256  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cor_sad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _reg_sad_maybe_optimized
_TEXT	SEGMENT
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride1$ = 24						; size = 4
_stride2$ = 28						; size = 4
_optimized_sad$ = 32					; size = 4
_reg_sad_maybe_optimized PROC				; COMDAT

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 225  :   if (optimized_sad != NULL)

	cmp	DWORD PTR _optimized_sad$[ebp], 0
	je	SHORT $LN2@reg_sad_ma

; 226  :     return optimized_sad(data1, data2, height, stride1, stride2);

	mov	esi, esp
	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	DWORD PTR _optimized_sad$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN1@reg_sad_ma
	jmp	SHORT $LN1@reg_sad_ma
$LN2@reg_sad_ma:

; 227  :   else
; 228  :     return kvz_reg_sad(data1, data2, width, height, stride1, stride2);

	mov	esi, esp
	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data1$[ebp]
	push	edx
	call	DWORD PTR _kvz_reg_sad
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@reg_sad_ma:

; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reg_sad_maybe_optimized ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_pixels_blit
_TEXT	SEGMENT
tv84 = -220						; size = 4
tv83 = -220						; size = 4
_nxn_width$ = -20					; size = 4
_y$ = -8						; size = 4
_orig$ = 8						; size = 4
_dst$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_orig_stride$ = 24					; size = 4
_dst_stride$ = 28					; size = 4
_kvz_pixels_blit PROC					; COMDAT

; 543  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 544  :   unsigned y;
; 545  :   //There is absolutely no reason to have a width greater than the source or the destination stride.
; 546  :   assert(width <= orig_stride);

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _orig_stride$[ebp]
	jbe	SHORT $LN31@kvz_pixels
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_pixels_blit@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CK@EONKIN@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@kvz_pixels:

; 547  :   assert(width <= dst_stride);

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _dst_stride$[ebp]
	jbe	SHORT $LN32@kvz_pixels
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_pixels_blit@@9@9
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CI@MHDPBLKC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA_?$AAs?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@kvz_pixels:

; 548  : 
; 549  : #ifdef CHECKPOINTS
; 550  :   char *buffer = malloc((3 * width + 1) * sizeof(char));
; 551  :   for (y = 0; y < height; ++y) {
; 552  :     int p;
; 553  :     for (p = 0; p < width; ++p) {
; 554  :       sprintf((buffer + 3*p), "%02X ", orig[y*orig_stride]);
; 555  :     }
; 556  :     buffer[3*width] = 0;
; 557  :     CHECKPOINT("kvz_pixels_blit_avx2: %04d: %s", y, buffer);
; 558  :   }
; 559  :   FREE_POINTER(buffer);
; 560  : #endif //CHECKPOINTS
; 561  : 
; 562  :   if (width == orig_stride && width == dst_stride) {

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _orig_stride$[ebp]
	jne	SHORT $LN22@kvz_pixels
	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _dst_stride$[ebp]
	jne	SHORT $LN22@kvz_pixels

; 563  :     memcpy(dst, orig, width * height * sizeof(kvz_pixel));

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _orig$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 564  :     return;

	jmp	$LN1@kvz_pixels
$LN22@kvz_pixels:

; 565  :   }
; 566  : 
; 567  :   int nxn_width = (width == height) ? width : 0;

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jne	SHORT $LN33@kvz_pixels
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN34@kvz_pixels
$LN33@kvz_pixels:
	mov	DWORD PTR tv83[ebp], 0
$LN34@kvz_pixels:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _nxn_width$[ebp], edx

; 568  :   switch (nxn_width) {

	mov	eax, DWORD PTR _nxn_width$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv84[ebp], ecx
	cmp	DWORD PTR tv84[ebp], 60			; 0000003cH
	ja	$LN28@kvz_pixels
	mov	edx, DWORD PTR tv84[ebp]
	movzx	eax, BYTE PTR $LN37@kvz_pixels[edx]
	jmp	DWORD PTR $LN38@kvz_pixels[eax*4]
$LN23@kvz_pixels:

; 569  :     BLIT_PIXELS_CASE(4)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN6@kvz_pixels
$LN4@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN6@kvz_pixels:
	cmp	DWORD PTR _y$[ebp], 4
	jae	SHORT $LN5@kvz_pixels
	push	4
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@kvz_pixels
$LN5@kvz_pixels:
	jmp	$LN1@kvz_pixels
$LN24@kvz_pixels:

; 570  :     BLIT_PIXELS_CASE(8)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN9@kvz_pixels
$LN7@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN9@kvz_pixels:
	cmp	DWORD PTR _y$[ebp], 8
	jae	SHORT $LN8@kvz_pixels
	push	8
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@kvz_pixels
$LN8@kvz_pixels:
	jmp	$LN1@kvz_pixels
$LN25@kvz_pixels:

; 571  :     BLIT_PIXELS_CASE(16)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN12@kvz_pixels
$LN10@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN12@kvz_pixels:
	cmp	DWORD PTR _y$[ebp], 16			; 00000010H
	jae	SHORT $LN11@kvz_pixels
	push	16					; 00000010H
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN10@kvz_pixels
$LN11@kvz_pixels:
	jmp	$LN1@kvz_pixels
$LN26@kvz_pixels:

; 572  :     BLIT_PIXELS_CASE(32)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN15@kvz_pixels
$LN13@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN15@kvz_pixels:
	cmp	DWORD PTR _y$[ebp], 32			; 00000020H
	jae	SHORT $LN14@kvz_pixels
	push	32					; 00000020H
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN13@kvz_pixels
$LN14@kvz_pixels:
	jmp	$LN1@kvz_pixels
$LN27@kvz_pixels:

; 573  :     BLIT_PIXELS_CASE(64)

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN18@kvz_pixels
$LN16@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN18@kvz_pixels:
	cmp	DWORD PTR _y$[ebp], 64			; 00000040H
	jae	SHORT $LN17@kvz_pixels
	push	64					; 00000040H
	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _orig_stride$[ebp]
	add	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN16@kvz_pixels
$LN17@kvz_pixels:
	jmp	$LN1@kvz_pixels
$LN28@kvz_pixels:

; 574  :   default:
; 575  : 
; 576  :     if (orig == dst) {

	mov	eax, DWORD PTR _orig$[ebp]
	cmp	eax, DWORD PTR _dst$[ebp]
	jne	SHORT $LN29@kvz_pixels

; 577  :       //If we have the same array, then we should have the same stride
; 578  :       assert(orig_stride == dst_stride);

	mov	eax, DWORD PTR _orig_stride$[ebp]
	cmp	eax, DWORD PTR _dst_stride$[ebp]
	je	SHORT $LN35@kvz_pixels
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_pixels_blit@@9@9
	add	ecx, 35					; 00000023H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DE@FGBGNIOO@?$AAo?$AAr?$AAi?$AAg?$AA_?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@kvz_pixels:

; 579  :       return;

	jmp	SHORT $LN1@kvz_pixels
$LN29@kvz_pixels:

; 580  :     }
; 581  :     assert(orig != dst || orig_stride == dst_stride);

	mov	eax, DWORD PTR _orig$[ebp]
	cmp	eax, DWORD PTR _dst$[ebp]
	jne	SHORT $LN36@kvz_pixels
	mov	ecx, DWORD PTR _orig_stride$[ebp]
	cmp	ecx, DWORD PTR _dst_stride$[ebp]
	je	SHORT $LN36@kvz_pixels
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_pixels_blit@@9@9
	add	edx, 38					; 00000026H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FC@LAHJNBGJ@?$AAo?$AAr?$AAi?$AAg?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAd?$AAs?$AAt?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@kvz_pixels:

; 582  : 
; 583  :     for (y = 0; y < height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN21@kvz_pixels
$LN19@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN21@kvz_pixels:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jae	SHORT $LN1@kvz_pixels

; 584  :       memcpy(&dst[y*dst_stride], &orig[y*orig_stride], width * sizeof(kvz_pixel));

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _orig_stride$[ebp]
	add	ecx, DWORD PTR _orig$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _dst_stride$[ebp]
	add	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 585  :     }

	jmp	SHORT $LN19@kvz_pixels
$LN1@kvz_pixels:

; 586  :     break;
; 587  :   }
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@kvz_pixels:
	DD	$LN23@kvz_pixels
	DD	$LN24@kvz_pixels
	DD	$LN25@kvz_pixels
	DD	$LN26@kvz_pixels
	DD	$LN27@kvz_pixels
	DD	$LN28@kvz_pixels
$LN37@kvz_pixels:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_kvz_pixels_blit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_calc_satd
_TEXT	SEGMENT
_satd$1 = -4264						; size = 4
_pic_data$2 = -4252					; size = 4
_epol_args$3 = -4240					; size = 68
_ext_s$4 = -4164					; size = 4
_ext_origin$5 = -4152					; size = 4
_ext$6 = -4140						; size = 4
_ext_buffer$7 = -4128					; size = 4096
_ref_data$8 = -24					; size = 4
_pic_data$9 = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_pic$ = 8						; size = 4
_ref$ = 12						; size = 4
_pic_x$ = 16						; size = 4
_pic_y$ = 20						; size = 4
_ref_x$ = 24						; size = 4
_ref_y$ = 28						; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_kvz_image_calc_satd PROC				; COMDAT

; 452  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5804				; 000016acH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5804]
	mov	ecx, 1451				; 000005abH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 453  :   assert(pic_x >= 0 && pic_x <= pic->width - block_width);

	cmp	DWORD PTR _pic_x$[ebp], 0
	jl	SHORT $LN5@kvz_image_
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _block_width$[ebp]
	cmp	DWORD PTR _pic_x$[ebp], ecx
	jle	SHORT $LN6@kvz_image_
$LN5@kvz_image_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_calc_satd@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GA@LFGGFFDK@?$AAp?$AAi?$AAc?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_image_:

; 454  :   assert(pic_y >= 0 && pic_y <= pic->height - block_height);

	cmp	DWORD PTR _pic_y$[ebp], 0
	jl	SHORT $LN7@kvz_image_
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _block_height$[ebp]
	cmp	DWORD PTR _pic_y$[ebp], ecx
	jle	SHORT $LN8@kvz_image_
$LN7@kvz_image_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_calc_satd@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GE@OOKLCBMP@?$AAp?$AAi?$AAc?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_image_:

; 455  : 
; 456  :   if (ref_x >= 0 && ref_x <= ref->width  - block_width &&
; 457  :       ref_y >= 0 && ref_y <= ref->height - block_height)

	cmp	DWORD PTR _ref_x$[ebp], 0
	jl	$LN2@kvz_image_
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _block_width$[ebp]
	cmp	DWORD PTR _ref_x$[ebp], ecx
	jg	SHORT $LN2@kvz_image_
	cmp	DWORD PTR _ref_y$[ebp], 0
	jl	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _block_height$[ebp]
	cmp	DWORD PTR _ref_y$[ebp], ecx
	jg	SHORT $LN2@kvz_image_

; 458  :   {
; 459  :     // Reference block is completely inside the frame, so just calculate the
; 460  :     // SAD directly. This is the most common case, which is why it's first.
; 461  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR _pic_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pic_x$[ebp]
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _pic_data$9[ebp], eax

; 462  :     const kvz_pixel *ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _ref_x$[ebp]
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _ref_data$8[ebp], eax

; 463  :     return kvz_satd_any_size(block_width,

	mov	esi, esp
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _ref_data$8[ebp]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _pic_data$9[ebp]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	call	DWORD PTR _kvz_satd_any_size
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@kvz_image_

; 464  :                              block_height,
; 465  :                              pic_data,
; 466  :                              pic->stride,
; 467  :                              ref_data,
; 468  :                              ref->stride) >> (KVZ_BIT_DEPTH - 8);
; 469  :   } else {

	jmp	$LN1@kvz_image_
$LN2@kvz_image_:

; 470  :     // Extrapolate pixels from outside the frame.
; 471  : 
; 472  :     // Space for extrapolated pixels and the part from the picture
; 473  :     // The extrapolation function will set the pointers and stride.
; 474  :     kvz_pixel ext_buffer[LCU_LUMA_SIZE];
; 475  :     kvz_pixel *ext = NULL;

	mov	DWORD PTR _ext$6[ebp], 0

; 476  :     kvz_pixel *ext_origin = NULL;

	mov	DWORD PTR _ext_origin$5[ebp], 0

; 477  :     int ext_s = 0;

	mov	DWORD PTR _ext_s$4[ebp], 0

; 478  :     kvz_epol_args epol_args = {

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _epol_args$3[ebp], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _epol_args$3[ebp+4], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _epol_args$3[ebp+8], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _epol_args$3[ebp+12], ecx
	mov	eax, DWORD PTR _ref_x$[ebp]
	mov	DWORD PTR _epol_args$3[ebp+16], eax
	mov	eax, DWORD PTR _ref_y$[ebp]
	mov	DWORD PTR _epol_args$3[ebp+20], eax
	mov	eax, DWORD PTR _block_width$[ebp]
	mov	DWORD PTR _epol_args$3[ebp+24], eax
	mov	eax, DWORD PTR _block_height$[ebp]
	mov	DWORD PTR _epol_args$3[ebp+28], eax
	mov	DWORD PTR _epol_args$3[ebp+32], 0
	mov	DWORD PTR _epol_args$3[ebp+36], 0
	mov	DWORD PTR _epol_args$3[ebp+40], 0
	mov	DWORD PTR _epol_args$3[ebp+44], 0
	mov	DWORD PTR _epol_args$3[ebp+48], 0
	mov	DWORD PTR _epol_args$3[ebp+52], 0
	mov	DWORD PTR _epol_args$3[ebp+56], 0
	mov	DWORD PTR _epol_args$3[ebp+60], 0
	mov	DWORD PTR _epol_args$3[ebp+64], 0

; 479  :       .src = ref->y,
; 480  :       .src_w = ref->width,
; 481  :       .src_h = ref->height,
; 482  :       .src_s = ref->stride,
; 483  :       .blk_x = ref_x,
; 484  :       .blk_y = ref_y,
; 485  :       .blk_w = block_width,
; 486  :       .blk_h = block_height,
; 487  :       .pad_l = 0,
; 488  :       .pad_r = 0,
; 489  :       .pad_t = 0,
; 490  :       .pad_b = 0,
; 491  :       .pad_b_simd = 0,
; 492  :     };
; 493  : 
; 494  :     // Initialize separately. Gets rid of warning
; 495  :     // about using nonstandard extension.
; 496  :     epol_args.buf = ext_buffer;

	lea	eax, DWORD PTR _ext_buffer$7[ebp]
	mov	DWORD PTR _epol_args$3[ebp+52], eax

; 497  :     epol_args.ext = &ext;

	lea	eax, DWORD PTR _ext$6[ebp]
	mov	DWORD PTR _epol_args$3[ebp+56], eax

; 498  :     epol_args.ext_origin = &ext_origin;

	lea	eax, DWORD PTR _ext_origin$5[ebp]
	mov	DWORD PTR _epol_args$3[ebp+60], eax

; 499  :     epol_args.ext_s = &ext_s;

	lea	eax, DWORD PTR _ext_s$4[ebp]
	mov	DWORD PTR _epol_args$3[ebp+64], eax

; 500  : 
; 501  :     kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$3[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 502  : 
; 503  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR _pic_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pic_x$[ebp]
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _pic_data$2[ebp], eax

; 504  : 
; 505  :     unsigned satd = kvz_satd_any_size(block_width,

	mov	esi, esp
	mov	eax, DWORD PTR _ext_s$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _ext_origin$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _pic_data$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	call	DWORD PTR _kvz_satd_any_size
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _satd$1[ebp], eax

; 506  :       block_height,
; 507  :       pic_data,
; 508  :       pic->stride,
; 509  :       ext_origin,
; 510  :       ext_s) >> (KVZ_BIT_DEPTH - 8);
; 511  : 
; 512  :     return satd;

	mov	eax, DWORD PTR _satd$1[ebp]
$LN1@kvz_image_:

; 513  :   }
; 514  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@kvz_image_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5804				; 000016acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@kvz_image_:
	DD	5
	DD	$LN14@kvz_image_
$LN14@kvz_image_:
	DD	-4128					; ffffefe0H
	DD	4096					; 00001000H
	DD	$LN9@kvz_image_
	DD	-4140					; ffffefd4H
	DD	4
	DD	$LN10@kvz_image_
	DD	-4152					; ffffefc8H
	DD	4
	DD	$LN11@kvz_image_
	DD	-4164					; ffffefbcH
	DD	4
	DD	$LN12@kvz_image_
	DD	-4240					; ffffef70H
	DD	68					; 00000044H
	DD	$LN13@kvz_image_
$LN13@kvz_image_:
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN12@kvz_image_:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	0
$LN11@kvz_image_:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN10@kvz_image_:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN9@kvz_image_:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_kvz_image_calc_satd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_calc_sad
_TEXT	SEGMENT
_ref_data$1 = -32					; size = 4
_pic_data$2 = -20					; size = 4
_res$ = -8						; size = 4
_pic$ = 8						; size = 4
_ref$ = 12						; size = 4
_pic_x$ = 16						; size = 4
_pic_y$ = 20						; size = 4
_ref_x$ = 24						; size = 4
_ref_y$ = 28						; size = 4
_block_width$ = 32					; size = 4
_block_height$ = 36					; size = 4
_optimized_sad$ = 40					; size = 4
_kvz_image_calc_sad PROC				; COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 410  :   assert(pic_x >= 0 && pic_x <= pic->width - block_width);

	cmp	DWORD PTR _pic_x$[ebp], 0
	jl	SHORT $LN5@kvz_image_
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _block_width$[ebp]
	cmp	DWORD PTR _pic_x$[ebp], ecx
	jle	SHORT $LN6@kvz_image_
$LN5@kvz_image_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_calc_sad@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GA@LFGGFFDK@?$AAp?$AAi?$AAc?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_image_:

; 411  :   assert(pic_y >= 0 && pic_y <= pic->height - block_height);

	cmp	DWORD PTR _pic_y$[ebp], 0
	jl	SHORT $LN7@kvz_image_
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _block_height$[ebp]
	cmp	DWORD PTR _pic_y$[ebp], ecx
	jle	SHORT $LN8@kvz_image_
$LN7@kvz_image_:
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_calc_sad@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GE@OOKLCBMP@?$AAp?$AAi?$AAc?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_image_:

; 412  : 
; 413  :   uint32_t res;
; 414  : 
; 415  :   if (ref_x >= 0 && ref_x <= ref->width  - block_width &&
; 416  :       ref_y >= 0 && ref_y <= ref->height - block_height)

	cmp	DWORD PTR _ref_x$[ebp], 0
	jl	$LN2@kvz_image_
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _block_width$[ebp]
	cmp	DWORD PTR _ref_x$[ebp], ecx
	jg	SHORT $LN2@kvz_image_
	cmp	DWORD PTR _ref_y$[ebp], 0
	jl	SHORT $LN2@kvz_image_
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _block_height$[ebp]
	cmp	DWORD PTR _ref_y$[ebp], ecx
	jg	SHORT $LN2@kvz_image_

; 417  :   {
; 418  :     // Reference block is completely inside the frame, so just calculate the
; 419  :     // SAD directly. This is the most common case, which is why it's first.
; 420  :     const kvz_pixel *pic_data = &pic->y[pic_y * pic->stride + pic_x];

	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR _pic_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _pic_x$[ebp]
	mov	edx, DWORD PTR _pic$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _pic_data$2[ebp], eax

; 421  :     const kvz_pixel *ref_data = &ref->y[ref_y * ref->stride + ref_x];

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _ref_y$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _ref_x$[ebp]
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR _ref_data$1[ebp], eax

; 422  : 
; 423  :     res = reg_sad_maybe_optimized(pic_data,

	mov	eax, DWORD PTR _optimized_sad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _pic$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_data$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_data$2[ebp]
	push	edx
	call	_reg_sad_maybe_optimized
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _res$[ebp], eax

; 424  :                                   ref_data,
; 425  :                                   block_width,
; 426  :                                   block_height,
; 427  :                                   pic->stride,
; 428  :                                   ref->stride,
; 429  :                                   optimized_sad);
; 430  :   } else {

	jmp	SHORT $LN3@kvz_image_
$LN2@kvz_image_:

; 431  :     // Call a routine that knows how to interpolate pixels outside the frame.
; 432  :     res = image_interpolated_sad(pic, ref, pic_x, pic_y, ref_x, ref_y, block_width, block_height, optimized_sad);

	mov	eax, DWORD PTR _optimized_sad$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref_x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic$[ebp]
	push	edx
	call	_image_interpolated_sad
	add	esp, 36					; 00000024H
	mov	DWORD PTR _res$[ebp], eax
$LN3@kvz_image_:

; 433  :   }
; 434  :   return res >> (KVZ_BIT_DEPTH - 8);

	mov	eax, DWORD PTR _res$[ebp]

; 435  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_image_calc_sad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_yuv_t_free
_TEXT	SEGMENT
_yuv$ = 8						; size = 4
_kvz_yuv_t_free PROC					; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 213  :   if (yuv) {

	cmp	DWORD PTR _yuv$[ebp], 0
	je	SHORT $LN2@kvz_yuv_t_

; 214  :     FREE_POINTER(yuv->y);

	mov	esi, esp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [eax+4], 0

; 215  :     FREE_POINTER(yuv->u);

	mov	esi, esp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [eax+8], 0

; 216  :     FREE_POINTER(yuv->v);

	mov	esi, esp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@kvz_yuv_t_:

; 217  :   }
; 218  :   FREE_POINTER(yuv);

	mov	esi, esp
	mov	eax, DWORD PTR _yuv$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _yuv$[ebp], 0

; 219  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_yuv_t_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_yuv_t_alloc
_TEXT	SEGMENT
_yuv$ = -8						; size = 4
_luma_size$ = 8						; size = 4
_chroma_size$ = 12					; size = 4
_kvz_yuv_t_alloc PROC					; COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 194  :   yuv_t *yuv = (yuv_t *)malloc(sizeof(*yuv));

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _yuv$[ebp], eax

; 195  :   yuv->size = luma_size;

	mov	eax, DWORD PTR _yuv$[ebp]
	mov	ecx, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 196  : 
; 197  :   // Get buffers with separate mallocs in order to take advantage of
; 198  :   // automatic buffer overrun checks.
; 199  :   yuv->y = (kvz_pixel *)malloc(luma_size * sizeof(*yuv->y));

	mov	esi, esp
	mov	eax, DWORD PTR _luma_size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 200  :   if (chroma_size == 0) {

	cmp	DWORD PTR _chroma_size$[ebp], 0
	jne	SHORT $LN2@kvz_yuv_t_

; 201  :     yuv->u = NULL;

	mov	eax, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [eax+8], 0

; 202  :     yuv->v = NULL;

	mov	eax, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [eax+12], 0

; 203  :   } else {

	jmp	SHORT $LN3@kvz_yuv_t_
$LN2@kvz_yuv_t_:

; 204  :     yuv->u = (kvz_pixel *)malloc(chroma_size * sizeof(*yuv->u));

	mov	esi, esp
	mov	eax, DWORD PTR _chroma_size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 205  :     yuv->v = (kvz_pixel *)malloc(chroma_size * sizeof(*yuv->v));

	mov	esi, esp
	mov	eax, DWORD PTR _chroma_size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _yuv$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@kvz_yuv_t_:

; 206  :   }
; 207  :   
; 208  :   return yuv;

	mov	eax, DWORD PTR _yuv$[ebp]

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_yuv_t_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_make_subimage
_TEXT	SEGMENT
tv194 = -208						; size = 4
tv181 = -208						; size = 4
tv166 = -208						; size = 4
_im$ = -8						; size = 4
_orig_image$ = 8					; size = 4
_x_offset$ = 12						; size = 4
_y_offset$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_kvz_image_make_subimage PROC				; COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 160  :   // Assert that we have a well defined image
; 161  :   assert((width % 2) == 0);

	mov	eax, DWORD PTR _width$[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	je	SHORT $LN5@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CC@BMBKFAEJ@?$AA?$CI?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@kvz_image_:

; 162  :   assert((height % 2) == 0);

	mov	eax, DWORD PTR _height$[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	je	SHORT $LN6@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 3
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@POJLMCPA@?$AA?$CI?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_image_:

; 163  : 
; 164  :   assert((x_offset % 2) == 0);

	mov	eax, DWORD PTR _x_offset$[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	je	SHORT $LN7@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 5
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CI@JFJLNFKK@?$AA?$CI?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@kvz_image_:

; 165  :   assert((y_offset % 2) == 0);

	mov	eax, DWORD PTR _y_offset$[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	je	SHORT $LN8@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 6
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CI@BIBDCIEI@?$AA?$CI?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_image_:

; 166  : 
; 167  :   assert(x_offset + width <= orig_image->width);

	mov	eax, DWORD PTR _x_offset$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _orig_image$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jbe	SHORT $LN9@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 8
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EM@PNHMJFCF@?$AAx?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAw?$AAi?$AAd?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_image_:

; 168  :   assert(y_offset + height <= orig_image->height);

	mov	eax, DWORD PTR _y_offset$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _orig_image$[ebp]
	cmp	eax, DWORD PTR [ecx+36]
	jbe	SHORT $LN10@kvz_image_
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_image_make_subimage@@9@9
	add	edx, 9
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FA@GIEMIKPP@?$AAy?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CL?$AA?5?$AAh?$AAe?$AAi?$AAg@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_image_:

; 169  : 
; 170  :   kvz_picture *im = MALLOC(kvz_picture, 1);

	mov	esi, esp
	push	144					; 00000090H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _im$[ebp], eax

; 171  :   if (!im) return NULL;

	cmp	DWORD PTR _im$[ebp], 0
	jne	SHORT $LN2@kvz_image_
	xor	eax, eax
	jmp	$LN1@kvz_image_
$LN2@kvz_image_:

; 172  : 
; 173  :   im->base_image = kvz_image_copy_ref(orig_image->base_image);

	mov	eax, DWORD PTR _orig_image$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_kvz_image_copy_ref
	add	esp, 4
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx+44], eax

; 174  :   im->refcount = 1; // We give a reference to caller

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+48], 1

; 175  :   im->width = width;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 176  :   im->height = height;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 177  :   im->stride = orig_image->stride;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _orig_image$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx

; 178  :   im->chroma_format = orig_image->chroma_format;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _orig_image$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], edx

; 179  : 
; 180  :   im->y = im->data[COLOR_Y] = &orig_image->y[x_offset + y_offset * orig_image->stride];

	mov	eax, DWORD PTR _orig_image$[ebp]
	mov	ecx, DWORD PTR _y_offset$[ebp]
	imul	ecx, DWORD PTR [eax+40]
	add	ecx, DWORD PTR _x_offset$[ebp]
	mov	edx, DWORD PTR _orig_image$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, ecx
	mov	DWORD PTR tv166[ebp], eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR [eax+edx+20], ecx
	mov	edx, DWORD PTR _im$[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR [edx+8], eax

; 181  :   if (orig_image->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _orig_image$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN3@kvz_image_

; 182  :     im->u = im->data[COLOR_U] = &orig_image->u[x_offset / 2 + y_offset / 2 * orig_image->stride / 2];

	mov	eax, DWORD PTR _x_offset$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _y_offset$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _orig_image$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	shr	ecx, 1
	add	eax, ecx
	mov	ecx, DWORD PTR _orig_image$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, eax
	mov	DWORD PTR tv181[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _im$[ebp]
	mov	edx, DWORD PTR tv181[ebp]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR [eax+12], ecx

; 183  :     im->v = im->data[COLOR_V] = &orig_image->v[x_offset / 2 + y_offset / 2 * orig_image->stride / 2];

	mov	eax, DWORD PTR _x_offset$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _y_offset$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _orig_image$[ebp]
	imul	ecx, DWORD PTR [edx+40]
	shr	ecx, 1
	add	eax, ecx
	mov	ecx, DWORD PTR _orig_image$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, eax
	mov	DWORD PTR tv194[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _im$[ebp]
	mov	edx, DWORD PTR tv194[ebp]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv194[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN3@kvz_image_:

; 184  :   }
; 185  : 
; 186  :   im->pts = 0;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0

; 187  :   im->dts = 0;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0

; 188  : 
; 189  :   return im;

	mov	eax, DWORD PTR _im$[ebp]
$LN1@kvz_image_:

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_image_make_subimage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_copy_ref
_TEXT	SEGMENT
_new_refcount$ = -8					; size = 4
_im$ = 8						; size = 4
_kvz_image_copy_ref PROC				; COMDAT

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 147  :   int32_t new_refcount = KVZ_ATOMIC_INC(&im->refcount);

	mov	eax, DWORD PTR _im$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx
	inc	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 148  :   // The caller should have had another reference and we added one
; 149  :   // reference so refcount should be at least 2.
; 150  :   assert(new_refcount >= 2);

	cmp	DWORD PTR _new_refcount$[ebp], 2
	jge	SHORT $LN3@kvz_image_
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_image_copy_ref@@9@9
	add	eax, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@NMICBIH@?$AAn?$AAe?$AAw?$AA_?$AAr?$AAe?$AAf?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_image_:

; 151  :   return im;

	mov	eax, DWORD PTR _im$[ebp]

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_image_copy_ref ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_free
_TEXT	SEGMENT
_new_refcount$ = -8					; size = 4
_im$ = 8						; size = 4
_kvz_image_free PROC					; COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 116  :   if (im == NULL) return;

	cmp	DWORD PTR _im$[ebp], 0
	jne	SHORT $LN2@kvz_image_
	jmp	$LN1@kvz_image_
$LN2@kvz_image_:

; 117  : 
; 118  :   int32_t new_refcount = KVZ_ATOMIC_DEC(&(im->refcount));

	mov	eax, DWORD PTR _im$[ebp]
	add	eax, 48					; 00000030H
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	mov	DWORD PTR _new_refcount$[ebp], ecx

; 119  :   if (new_refcount > 0) {

	cmp	DWORD PTR _new_refcount$[ebp], 0
	jle	SHORT $LN3@kvz_image_

; 120  :     // There are still references so we don't free the data yet.
; 121  :     return;

	jmp	$LN1@kvz_image_
$LN3@kvz_image_:

; 122  :   }
; 123  : 
; 124  :   if (im->base_image != im) {

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	ecx, DWORD PTR _im$[ebp]
	je	SHORT $LN4@kvz_image_

; 125  :     // Free our reference to the base image.
; 126  :     kvz_image_free(im->base_image);

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_kvz_image_free
	add	esp, 4

; 127  :   } else {

	jmp	SHORT $LN5@kvz_image_
$LN4@kvz_image_:

; 128  :     free(im->fulldata_buf);

	mov	esi, esp
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@kvz_image_:

; 129  :   }
; 130  : 
; 131  :   // Make sure freed data won't be used.
; 132  :   im->base_image = NULL;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+44], 0

; 133  :   im->fulldata_buf = NULL;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax], 0

; 134  :   im->fulldata = NULL;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+4], 0

; 135  :   im->y = im->u = im->v = NULL;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx+8], 0

; 136  :   im->data[COLOR_Y] = im->data[COLOR_U] = im->data[COLOR_V] = NULL;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [ecx+eax+20], 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+edx+20], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+edx+20], 0

; 137  :   free(im);

	mov	esi, esp
	mov	eax, DWORD PTR _im$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@kvz_image_:

; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_alloc
_TEXT	SEGMENT
tv174 = -272						; size = 4
tv166 = -272						; size = 4
tv150 = -272						; size = 4
_chroma_size$ = -72					; size = 4
_chroma_sizes$ = -60					; size = 16
_luma_size$ = -36					; size = 4
_im$ = -24						; size = 4
_simd_padding_width$ = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_chroma_format$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_kvz_image_alloc PROC					; COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 58   :   //Assert that we have a well defined image
; 59   :   assert((width % 2) == 0);

	mov	eax, DWORD PTR _width$[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN12@kvz_image_
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN12@kvz_image_:
	test	eax, eax
	je	SHORT $LN7@kvz_image_
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_image_alloc@@9@9
	add	ecx, 2
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CC@BMBKFAEJ@?$AA?$CI?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@kvz_image_:

; 60   :   assert((height % 2) == 0);

	mov	eax, DWORD PTR _height$[ebp]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN13@kvz_image_
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN13@kvz_image_:
	test	eax, eax
	je	SHORT $LN8@kvz_image_
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_image_alloc@@9@9
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GI@DDCKEFJJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CE@POJLMCPA@?$AA?$CI?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$CF?$AA?5?$AA2?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_image_:

; 61   : 
; 62   :   const size_t simd_padding_width = 64;

	mov	DWORD PTR _simd_padding_width$[ebp], 64	; 00000040H

; 63   : 
; 64   :   kvz_picture *im = MALLOC(kvz_picture, 1);

	mov	esi, esp
	push	144					; 00000090H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _im$[ebp], eax

; 65   :   if (!im) return NULL;

	cmp	DWORD PTR _im$[ebp], 0
	jne	SHORT $LN2@kvz_image_
	xor	eax, eax
	jmp	$LN1@kvz_image_
$LN2@kvz_image_:

; 66   : 
; 67   :   unsigned int luma_size = width * height;

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _luma_size$[ebp], eax

; 68   :   unsigned chroma_sizes[] = { 0, luma_size / 4, luma_size / 2, luma_size };

	mov	DWORD PTR _chroma_sizes$[ebp], 0
	mov	eax, DWORD PTR _luma_size$[ebp]
	shr	eax, 2
	mov	DWORD PTR _chroma_sizes$[ebp+4], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	shr	eax, 1
	mov	DWORD PTR _chroma_sizes$[ebp+8], eax
	mov	eax, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR _chroma_sizes$[ebp+12], eax

; 69   :   unsigned chroma_size = chroma_sizes[chroma_format];

	mov	eax, DWORD PTR _chroma_format$[ebp]
	mov	ecx, DWORD PTR _chroma_sizes$[ebp+eax*4]
	mov	DWORD PTR _chroma_size$[ebp], ecx

; 70   : 
; 71   :   im->chroma_format = chroma_format;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _chroma_format$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 72   : 
; 73   :   //Allocate memory, pad the full data buffer from both ends
; 74   :   im->fulldata_buf = MALLOC_SIMD_PADDED(kvz_pixel, (luma_size + 2 * chroma_size), simd_padding_width * 2);

	mov	eax, DWORD PTR _chroma_size$[ebp]
	mov	ecx, DWORD PTR _luma_size$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _simd_padding_width$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx], eax

; 75   :   if (!im->fulldata_buf) {

	mov	eax, DWORD PTR _im$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@kvz_image_

; 76   :     free(im);

	mov	esi, esp
	mov	eax, DWORD PTR _im$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 77   :     return NULL;

	xor	eax, eax
	jmp	$LN1@kvz_image_
$LN3@kvz_image_:

; 78   :   }
; 79   :   im->fulldata = im->fulldata_buf + simd_padding_width / sizeof(kvz_pixel);

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _simd_padding_width$[ebp]
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 80   : 
; 81   :   im->base_image = im;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 82   :   im->refcount = 1; //We give a reference to caller

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+48], 1

; 83   :   im->width = width;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 84   :   im->height = height;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 85   :   im->stride = width;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 86   :   im->chroma_format = chroma_format;

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR _chroma_format$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 87   : 
; 88   :   im->y = im->data[COLOR_Y] = &im->fulldata[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _im$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, ecx
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax+edx+20], ecx
	mov	edx, DWORD PTR _im$[ebp]
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR [edx+8], eax

; 89   : 
; 90   :   if (chroma_format == KVZ_CSP_400) {

	cmp	DWORD PTR _chroma_format$[ebp], 0
	jne	SHORT $LN4@kvz_image_

; 91   :     im->u = im->data[COLOR_U] = NULL;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [ecx+eax+20], 0
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx+12], 0

; 92   :     im->v = im->data[COLOR_V] = NULL;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [ecx+eax+20], 0
	mov	edx, DWORD PTR _im$[ebp]
	mov	DWORD PTR [edx+16], 0

; 93   :   } else {

	jmp	SHORT $LN5@kvz_image_
$LN4@kvz_image_:

; 94   :     im->u = im->data[COLOR_U] = &im->fulldata[luma_size];

	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _luma_size$[ebp]
	mov	DWORD PTR tv166[ebp], ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv166[ebp]
	mov	DWORD PTR [eax+edx+20], ecx
	mov	edx, DWORD PTR _im$[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR [edx+12], eax

; 95   :     im->v = im->data[COLOR_V] = &im->fulldata[luma_size + chroma_size];

	mov	eax, DWORD PTR _luma_size$[ebp]
	add	eax, DWORD PTR _chroma_size$[ebp]
	mov	ecx, DWORD PTR _im$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	DWORD PTR tv174[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _im$[ebp]
	mov	edx, DWORD PTR tv174[ebp]
	mov	DWORD PTR [ecx+eax+20], edx
	mov	eax, DWORD PTR _im$[ebp]
	mov	ecx, DWORD PTR tv174[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN5@kvz_image_:

; 96   :   }
; 97   : 
; 98   :   im->pts = 0;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0

; 99   :   im->dts = 0;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0

; 100  : 
; 101  :   im->interlacing = KVZ_INTERLACING_NONE;

	mov	eax, DWORD PTR _im$[ebp]
	mov	DWORD PTR [eax+72], 0

; 102  : 
; 103  :   return im;

	mov	eax, DWORD PTR _im$[ebp]
$LN1@kvz_image_:

; 104  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@kvz_image_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@kvz_image_:
	DD	1
	DD	$LN10@kvz_image_
$LN10@kvz_image_:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN9@kvz_image_
$LN9@kvz_image_:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_kvz_image_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\image.c
;	COMDAT _kvz_image_alloc_420
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_kvz_image_alloc_420 PROC				; COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C081D3C0_image@c
	call	@__CheckForDebuggerJustMyCode@4

; 49   :   return kvz_image_alloc(KVZ_CSP_420, width, height);

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	1
	call	_kvz_image_alloc
	add	esp, 12					; 0000000cH

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_image_alloc_420 ENDP
_TEXT	ENDS
END
