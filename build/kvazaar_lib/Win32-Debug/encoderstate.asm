; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__FC331F14_encoderstate@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_kvz_encode_one_frame
PUBLIC	_kvz_encoder_prepare
PUBLIC	_kvz_encoder_state_match_children_of_previous_frame
PUBLIC	_kvz_get_scan_order
PUBLIC	_kvz_encoder_create_ref_lists
PUBLIC	_kvz_get_lcu_stats
PUBLIC	_kvz_get_cu_ref_qp
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_encoder_state_match_children_of_previous_frame@@9@9 ; `kvz_encoder_state_match_children_of_previous_frame'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1HG@MHNMGNLG@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AAi?$AAo?$AAu?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_worker_encode_lcu@@9@9 ; `encoder_state_worker_encode_lcu'::`1'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_encode_leaf@@9@9	; `encoder_state_encode_leaf'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@GLEBALIJ@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAl?$AAe?$AAa?$AAf@ ; `string'
PUBLIC	??_C@_1DG@ODPMOOO@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc?$AAu?$AA_?$AAo?$AAr?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_1CO@JEMCMGIB@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAr?$AAe?$AAc@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_worker_encode_children@@9@9 ; `encoder_state_worker_encode_children'::`1'::__LINE__Var
PUBLIC	??_C@_1EE@EMJENLEH@?$AA?$CB?$AAs?$AAu?$AAb?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_encode@@9@9	; `encoder_state_encode'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@PDPDEBCD@Unsupported?5leaf?5type?5?$CFc?$CB?6@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_remove_refs@@9@9	; `encoder_state_remove_refs'::`1'::__LINE__Var
PUBLIC	??_C@_1FO@GLGPILKE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_set_source_picture@@9@9 ; `encoder_set_source_picture'::`1'::__LINE__Var
PUBLIC	??_C@_1DI@KGBGGKIA@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ ; `string'
PUBLIC	??_C@_1DC@MIMKPNAK@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_init_new_frame@@9@9 ; `encoder_state_init_new_frame'::`1'::__LINE__Var
PUBLIC	??_C@_1EO@JFNLEKPE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@LIFLOPCP@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_encode_one_frame@@9@9	; `kvz_encode_one_frame'::`1'::__LINE__Var
PUBLIC	??_C@_1DM@KIHMAPEG@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAb?$AAi?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_encoder_prepare@@9@9	; `kvz_encoder_prepare'::`1'::__LINE__Var
PUBLIC	??_C@_1CG@CCMCAJBH@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAd@ ; `string'
PUBLIC	__real@3fb999999999999a
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_kvz_bitstream_tell:PROC
EXTRN	_kvz_bitstream_clear:PROC
EXTRN	_kvz_bitstream_put:PROC
EXTRN	_kvz_bitstream_align_zero:PROC
EXTRN	_kvz_cabac_start:PROC
EXTRN	_kvz_cabac_encode_bin:PROC
EXTRN	_kvz_cabac_encode_bin_ep:PROC
EXTRN	_kvz_cabac_encode_bins_ep:PROC
EXTRN	_kvz_cabac_encode_bin_trm:PROC
EXTRN	_kvz_cabac_finish:PROC
EXTRN	_kvz_cabac_write_unary_max_symbol_ep:PROC
EXTRN	_kvz_image_alloc:PROC
EXTRN	_kvz_image_free:PROC
EXTRN	_kvz_image_copy_ref:PROC
EXTRN	_kvz_image_make_subimage:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_cu_array_at:PROC
EXTRN	_kvz_cu_array_at_const:PROC
EXTRN	_kvz_cu_array_alloc:PROC
EXTRN	_kvz_cu_subarray:PROC
EXTRN	_kvz_cu_array_free:PROC
EXTRN	_pthread_mutex_lock:PROC
EXTRN	_pthread_mutex_unlock:PROC
EXTRN	_kvz_threadqueue_job_create:PROC
EXTRN	_kvz_threadqueue_submit:PROC
EXTRN	_kvz_threadqueue_job_dep_add:PROC
EXTRN	_kvz_threadqueue_copy_ref:PROC
EXTRN	_kvz_threadqueue_free_job:PROC
EXTRN	_kvz_image_list_add:PROC
EXTRN	_kvz_image_list_rem:PROC
EXTRN	_kvz_image_list_copy_contents:PROC
EXTRN	_kvz_videoframe_set_poc:PROC
EXTRN	_log:PROC
EXTRN	_kvz_init_contexts:PROC
EXTRN	_kvz_context_copy:PROC
EXTRN	_kvz_encode_coding_tree:PROC
EXTRN	_kvz_encoder_state_worker_write_bitstream:PROC
EXTRN	_kvz_filter_deblock_lcu:PROC
EXTRN	_kvz_set_picture_lambda_and_qp:PROC
EXTRN	_kvz_set_lcu_lambda_and_qp:PROC
EXTRN	_kvz_set_ctu_qp_lambda:PROC
EXTRN	_kvz_estimate_pic_lambda:PROC
EXTRN	_kvz_sao_reconstruct:PROC
EXTRN	_kvz_sao_search_lcu:PROC
EXTRN	_kvz_search_lcu:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_pixel_var:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@CCMCAJBH@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAd@
CONST	SEGMENT
??_C@_1CG@CCMCAJBH@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAd@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encoder_prepare@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encoder_prepare@@9@9 DD 05e6H	; `kvz_encoder_prepare'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@KIHMAPEG@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAb?$AAi?$AAt@
CONST	SEGMENT
??_C@_1DM@KIHMAPEG@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAb?$AAi?$AAt@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'q', 00H, 'j', 00H, '_', 00H, 'b', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'm', 00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 't'
	DB	00H, 'e', 00H, 'n', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encode_one_frame@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encode_one_frame@@9@9 DD 05c9H	; `kvz_encode_one_frame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@LIFLOPCP@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
CONST	SEGMENT
??_C@_1DM@LIFLOPCP@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JFNLEKPE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1EO@JFNLEKPE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'E', 00H, 'N', 00H, 'C', 00H, 'O', 00H, 'D', 00H
	DB	'E', 00H, 'R', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'T'
	DB	00H, 'E', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'_', 00H, 'M', 00H, 'A', 00H, 'I', 00H, 'N', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_init_new_frame@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_init_new_frame@@9@9 DD 04e7H ; `encoder_state_init_new_frame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@MIMKPNAK@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
CONST	SEGMENT
??_C@_1DC@MIMKPNAK@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@KGBGGKIA@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
CONST	SEGMENT
??_C@_1DI@KGBGGKIA@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_set_source_picture@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_set_source_picture@@9@9 DD 049fH ; `encoder_set_source_picture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FO@GLGPILKE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAr@
CONST	SEGMENT
??_C@_1FO@GLGPILKE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAr@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'r', 00H, 'e', 00H, 'f', 00H, '-', 00H, '>', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'f', 00H, '_', 00H, 'n', 00H, 'u', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_remove_refs@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_remove_refs@@9@9 DD 0454H ; `encoder_state_remove_refs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@PDPDEBCD@Unsupported?5leaf?5type?5?$CFc?$CB?6@
CONST	SEGMENT
??_C@_0BL@PDPDEBCD@Unsupported?5leaf?5type?5?$CFc?$CB?6@ DB 'Unsupported '
	DB	'leaf type %c!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_encode@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_encode@@9@9 DD 039bH	; `encoder_state_encode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@EMJENLEH@?$AA?$CB?$AAs?$AAu?$AAb?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj@
CONST	SEGMENT
??_C@_1EE@EMJENLEH@?$AA?$CB?$AAs?$AAu?$AAb?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj@ DB '!'
	DB	00H, 's', 00H, 'u', 00H, 'b', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 't', 00H, 'q'
	DB	00H, 'j', 00H, '_', 00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 't', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_worker_encode_children@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_worker_encode_children@@9@9 DD 0382H ; `encoder_state_worker_encode_children'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@JEMCMGIB@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAr?$AAe?$AAc@
CONST	SEGMENT
??_C@_1CO@JEMCMGIB@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAr?$AAe?$AAc@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 't', 00H, 'q', 00H, 'j', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'n', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@ODPMOOO@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc?$AAu?$AA_?$AAo?$AAr?$AAd?$AAe@
CONST	SEGMENT
??_C@_1DG@ODPMOOO@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc?$AAu?$AA_?$AAo?$AAr?$AAd?$AAe@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'c', 00H, 'u', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GLEBALIJ@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAl?$AAe?$AAa?$AAf@
CONST	SEGMENT
??_C@_1BO@GLEBALIJ@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAl?$AAe?$AAa?$AAf@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'i', 00H, 's', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'f'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_encode_leaf@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_encode_leaf@@9@9 DD 02fcH ; `encoder_state_encode_leaf'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_worker_encode_lcu@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_worker_encode_lcu@@9@9 DD 0273H ; `encoder_state_worker_encode_lcu'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HG@MHNMGNLG@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AAi?$AAo?$AAu?$AAs@
CONST	SEGMENT
??_C@_1HG@MHNMGNLG@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AAi?$AAo?$AAu?$AAs@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'o', 00H, 'u'
	DB	00H, 's', 00H, '_', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 'n', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '.', 00H, 'e', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encoder_state_match_children_of_previous_frame@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encoder_state_match_children_of_previous_frame@@9@9 DD 037H ; `kvz_encoder_state_match_children_of_previous_frame'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT __encode_one_frame_add_bitstream_deps
_TEXT	SEGMENT
_i$ = -8						; size = 4
_state$ = 8						; size = 4
_job$ = 12						; size = 4
__encode_one_frame_add_bitstream_deps PROC		; COMDAT

; 1466 : static void _encode_one_frame_add_bitstream_deps(const encoder_state_t * const state, threadqueue_job_t * const job) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1467 :   int i;
; 1468 :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@encode_one
$LN2@encode_one:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@encode_one:
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN3@encode_one

; 1469 :     _encode_one_frame_add_bitstream_deps(&state->children[i], job);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 336
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	__encode_one_frame_add_bitstream_deps
	add	esp, 8

; 1470 :   }

	jmp	SHORT $LN2@encode_one
$LN3@encode_one:

; 1471 :   if (state->tqj_bitstream_written) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+324], 0
	je	SHORT $LN5@encode_one

; 1472 :     kvz_threadqueue_job_dep_add(job, state->tqj_bitstream_written);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	edx, DWORD PTR _job$[ebp]
	push	edx
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN5@encode_one:

; 1473 :   }
; 1474 :   if (state->tqj_recon_done) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+320], 0
	je	SHORT $LN1@encode_one

; 1475 :     kvz_threadqueue_job_dep_add(job, state->tqj_recon_done);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	mov	edx, DWORD PTR _job$[ebp]
	push	edx
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN1@encode_one:

; 1476 :   }
; 1477 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__encode_one_frame_add_bitstream_deps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_init_new_frame
_TEXT	SEGMENT
tv1068 = -8212						; size = 8
tv1200 = -8204						; size = 8
tv435 = -8200						; size = 4
tv413 = -8200						; size = 4
tv273 = -8200						; size = 4
tv255 = -8200						; size = 4
tv1062 = -8196						; size = 8
tv1055 = -8196						; size = 8
tv1047 = -8196						; size = 8
tv885 = -8196						; size = 8
tv875 = -8196						; size = 8
tv617 = -8196						; size = 4
tv436 = -8196						; size = 4
tv414 = -8196						; size = 4
tv274 = -8196						; size = 4
tv256 = -8196						; size = 4
tv135 = -8196						; size = 4
tv688 = -8192						; size = 4
tv615 = -8192						; size = 4
tv491 = -8192						; size = 4
tv424 = -8192						; size = 4
tv402 = -8192						; size = 4
tv319 = -8192						; size = 4
tv310 = -8192						; size = 4
tv264 = -8192						; size = 4
tv246 = -8192						; size = 4
tv197 = -8192						; size = 4
tv190 = -8192						; size = 4
tv133 = -8192						; size = 4
_poc_offset$1 = -6648					; size = 4
_poc_offset$2 = -6636					; size = 4
_framenum$3 = -6624					; size = 4
_layer$ = -6612						; size = 4
_owf$ = -6600						; size = 4
_previous$ = -6588					; size = 4
_is_closed_normal_gop$ = -6573				; size = 1
_src_x$4 = -6564					; size = 4
_src_y$5 = -6552					; size = 4
_x$6 = -6540						; size = 4
_y$7 = -6528						; size = 4
_c_y_max$8 = -6516					; size = 4
_c_x_max$9 = -6504					; size = 4
_c_pxl_y$10 = -6492					; size = 4
_c_pxl_x$11 = -6480					; size = 4
_lcu_chroma_width$12 = -6468				; size = 4
_chromav_tmp$13 = -6456					; size = 1024
_chromau_tmp$14 = -5424					; size = 1024
_c_stride$15 = -4392					; size = 4
_lcu_var$16 = -4380					; size = 8
_src_x$17 = -4364					; size = 4
_src_y$18 = -4352					; size = 4
_x$19 = -4340						; size = 4
_y$20 = -4328						; size = 4
_ydiv64$21 = -4313					; size = 1
_xdiv64$22 = -4301					; size = 1
_y_max$23 = -4292					; size = 4
_x_max$24 = -4280					; size = 4
_pxl_y$25 = -4268					; size = 4
_pxl_x$26 = -4256					; size = 4
_tmp$27 = -4244						; size = 4096
_x$28 = -140						; size = 4
_y$29 = -128						; size = 4
_id$30 = -116						; size = 4
_y_lim$31 = -104					; size = 4
_x_lim$32 = -92						; size = 4
_frame_var$33 = -80					; size = 8
_c_len$34 = -64						; size = 4
_len$35 = -52						; size = 4
_d$36 = -40						; size = 8
_has_chroma$37 = -21					; size = 1
_cfg$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_frame$ = 12						; size = 4
_encoder_state_init_new_frame PROC			; COMDAT

; 1255 : static void encoder_state_init_new_frame(encoder_state_t * const state, kvz_picture* frame) {

	push	ebp
	mov	ebp, esp
	mov	eax, 8212				; 00002014H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-8212]
	mov	ecx, 2053				; 00000805H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1256 :   assert(state->type == ENCODER_STATE_TYPE_MAIN);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 77			; 0000004dH
	je	SHORT $LN65@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_init_new_frame@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EO@JFNLEKPE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN65@encoder_st:

; 1257 : 
; 1258 :   const kvz_config * const cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 1259 : 
; 1260 :   encoder_set_source_picture(state, frame);

	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encoder_set_source_picture
	add	esp, 8

; 1261 : 
; 1262 :   assert(!state->tile->frame->cu_array);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN66@encoder_st
	mov	eax, DWORD PTR ?__LINE__Var@?0??encoder_state_init_new_frame@@9@9
	add	eax, 7
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@LIFLOPCP@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN66@encoder_st:

; 1263 :   state->tile->frame->cu_array = kvz_cu_array_alloc(

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_kvz_cu_array_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax

; 1264 :       state->tile->frame->width,
; 1265 :       state->tile->frame->height
; 1266 :   );
; 1267 : 
; 1268 :   // Variance adaptive quantization
; 1269 :   if (cfg->vaq) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2436], 0
	je	$LN3@encoder_st

; 1270 :     const bool has_chroma = state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN67@encoder_st
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $LN68@encoder_st
$LN67@encoder_st:
	mov	DWORD PTR tv133[ebp], 0
$LN68@encoder_st:
	cmp	DWORD PTR tv133[ebp], 0
	jne	SHORT $LN69@encoder_st
	mov	DWORD PTR tv135[ebp], 0
	jmp	SHORT $LN70@encoder_st
$LN69@encoder_st:
	mov	DWORD PTR tv135[ebp], 1
$LN70@encoder_st:
	mov	dl, BYTE PTR tv135[ebp]
	mov	BYTE PTR _has_chroma$37[ebp], dl

; 1271 :     double d = cfg->vaq * 0.1; // Empirically decided constant. Affects delta-QP strength

	mov	eax, DWORD PTR _cfg$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+2436]
	mulsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR _d$36[ebp], xmm0

; 1272 :     
; 1273 :     // Calculate frame pixel variance
; 1274 :     uint32_t len = state->tile->frame->width * state->tile->frame->height;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _len$35[ebp], ecx

; 1275 :     uint32_t c_len = len / 4;

	mov	eax, DWORD PTR _len$35[ebp]
	shr	eax, 2
	mov	DWORD PTR _c_len$34[ebp], eax

; 1276 :     double frame_var = kvz_pixel_var(state->tile->frame->source->y, len);

	mov	esi, esp
	mov	eax, DWORD PTR _len$35[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _frame_var$33[ebp]

; 1277 :     if (has_chroma) {

	movzx	eax, BYTE PTR _has_chroma$37[ebp]
	test	eax, eax
	je	SHORT $LN25@encoder_st

; 1278 :       frame_var += kvz_pixel_var(state->tile->frame->source->u, c_len);

	mov	esi, esp
	mov	eax, DWORD PTR _c_len$34[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv875[ebp]
	movsd	xmm0, QWORD PTR tv875[ebp]
	addsd	xmm0, QWORD PTR _frame_var$33[ebp]
	movsd	QWORD PTR _frame_var$33[ebp], xmm0

; 1279 :       frame_var += kvz_pixel_var(state->tile->frame->source->v, c_len);

	mov	esi, esp
	mov	eax, DWORD PTR _c_len$34[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv885[ebp]
	movsd	xmm0, QWORD PTR tv885[ebp]
	addsd	xmm0, QWORD PTR _frame_var$33[ebp]
	movsd	QWORD PTR _frame_var$33[ebp], xmm0
$LN25@encoder_st:

; 1280 :     }
; 1281 : 
; 1282 :     // Loop through LCUs
; 1283 :     // For each LCU calculate: D * (log(LCU pixel variance) - log(frame pixel variance))
; 1284 :     unsigned x_lim = state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _x_lim$32[ebp], eax

; 1285 :     unsigned y_lim = state->tile->frame->height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _y_lim$31[ebp], eax

; 1286 :     
; 1287 :     unsigned id = 0;

	mov	DWORD PTR _id$30[ebp], 0

; 1288 :     for (int y = 0; y < y_lim; ++y) {

	mov	DWORD PTR _y$29[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _y$29[ebp]
	add	eax, 1
	mov	DWORD PTR _y$29[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _y$29[ebp]
	cmp	eax, DWORD PTR _y_lim$31[ebp]
	jae	$LN3@encoder_st

; 1289 :       for (int x = 0; x < x_lim; ++x) {

	mov	DWORD PTR _x$28[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _x$28[ebp]
	add	eax, 1
	mov	DWORD PTR _x$28[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _x$28[ebp]
	cmp	eax, DWORD PTR _x_lim$32[ebp]
	jae	$LN6@encoder_st

; 1290 :         kvz_pixel tmp[LCU_LUMA_SIZE];
; 1291 :         int pxl_x = x * LCU_WIDTH;

	mov	eax, DWORD PTR _x$28[ebp]
	shl	eax, 6
	mov	DWORD PTR _pxl_x$26[ebp], eax

; 1292 :         int pxl_y = y * LCU_WIDTH;

	mov	eax, DWORD PTR _y$29[ebp]
	shl	eax, 6
	mov	DWORD PTR _pxl_y$25[ebp], eax

; 1293 :         int x_max = MIN(pxl_x + LCU_WIDTH, frame->width) - pxl_x;

	mov	eax, DWORD PTR _pxl_x$26[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jge	SHORT $LN71@encoder_st
	mov	edx, DWORD PTR _pxl_x$26[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv190[ebp], edx
	jmp	SHORT $LN72@encoder_st
$LN71@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR tv190[ebp], ecx
$LN72@encoder_st:
	mov	edx, DWORD PTR tv190[ebp]
	sub	edx, DWORD PTR _pxl_x$26[ebp]
	mov	DWORD PTR _x_max$24[ebp], edx

; 1294 :         int y_max = MIN(pxl_y + LCU_WIDTH, frame->height) - pxl_y;

	mov	eax, DWORD PTR _pxl_y$25[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+36]
	jge	SHORT $LN73@encoder_st
	mov	edx, DWORD PTR _pxl_y$25[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv197[ebp], edx
	jmp	SHORT $LN74@encoder_st
$LN73@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv197[ebp], ecx
$LN74@encoder_st:
	mov	edx, DWORD PTR tv197[ebp]
	sub	edx, DWORD PTR _pxl_y$25[ebp]
	mov	DWORD PTR _y_max$23[ebp], edx

; 1295 :         
; 1296 :         bool xdiv64 = false;

	mov	BYTE PTR _xdiv64$22[ebp], 0

; 1297 :         bool ydiv64 = false;

	mov	BYTE PTR _ydiv64$21[ebp], 0

; 1298 :         if (frame->width % 64 == 0) xdiv64 = true;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN115@encoder_st
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN115@encoder_st:
	test	ecx, ecx
	jne	SHORT $LN26@encoder_st
	mov	BYTE PTR _xdiv64$22[ebp], 1
$LN26@encoder_st:

; 1299 :         if (frame->height % 64 == 0) ydiv64 = true;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	and	ecx, -2147483585			; 8000003fH
	jns	SHORT $LN116@encoder_st
	dec	ecx
	or	ecx, -64				; ffffffc0H
	inc	ecx
$LN116@encoder_st:
	test	ecx, ecx
	jne	SHORT $LN27@encoder_st
	mov	BYTE PTR _ydiv64$21[ebp], 1
$LN27@encoder_st:

; 1300 : 
; 1301 :         // Luma variance
; 1302 :         if (!edge_lcu(id, x_lim, y_lim, xdiv64, ydiv64)) {

	movzx	eax, BYTE PTR _ydiv64$21[ebp]
	push	eax
	movzx	ecx, BYTE PTR _xdiv64$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_lim$31[ebp]
	push	edx
	mov	eax, DWORD PTR _x_lim$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$30[ebp]
	push	ecx
	call	_edge_lcu
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN28@encoder_st

; 1303 :           kvz_pixels_blit(&state->tile->frame->source->y[pxl_x + pxl_y * state->tile->frame->source->stride], tmp,

	push	64					; 00000040H
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _y_max$23[ebp]
	push	edx
	mov	eax, DWORD PTR _x_max$24[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp$27[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _pxl_y$25[ebp]
	imul	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR _pxl_x$26[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, eax
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 1304 :             x_max, y_max, state->tile->frame->source->stride, LCU_WIDTH);
; 1305 :         } else {

	jmp	$LN9@encoder_st
$LN28@encoder_st:

; 1306 :           // Extend edge pixels for edge lcus
; 1307 :           for (int y = 0; y < LCU_WIDTH; y++) {

	mov	DWORD PTR _y$20[ebp], 0
	jmp	SHORT $LN10@encoder_st
$LN8@encoder_st:
	mov	eax, DWORD PTR _y$20[ebp]
	add	eax, 1
	mov	DWORD PTR _y$20[ebp], eax
$LN10@encoder_st:
	cmp	DWORD PTR _y$20[ebp], 64		; 00000040H
	jge	$LN9@encoder_st

; 1308 :             for (int x = 0; x < LCU_WIDTH; x++) {

	mov	DWORD PTR _x$19[ebp], 0
	jmp	SHORT $LN13@encoder_st
$LN11@encoder_st:
	mov	eax, DWORD PTR _x$19[ebp]
	add	eax, 1
	mov	DWORD PTR _x$19[ebp], eax
$LN13@encoder_st:
	cmp	DWORD PTR _x$19[ebp], 64		; 00000040H
	jge	$LN12@encoder_st

; 1309 :               int src_y = CLIP(0, frame->height - 1, pxl_y + y);

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR _pxl_y$25[ebp]
	add	edx, DWORD PTR _y$20[ebp]
	cmp	ecx, edx
	jge	SHORT $LN75@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	DWORD PTR tv246[ebp], ecx
	jmp	SHORT $LN76@encoder_st
$LN75@encoder_st:
	mov	edx, DWORD PTR _pxl_y$25[ebp]
	add	edx, DWORD PTR _y$20[ebp]
	mov	DWORD PTR tv246[ebp], edx
$LN76@encoder_st:
	cmp	DWORD PTR tv246[ebp], 0
	jge	SHORT $LN79@encoder_st
	mov	DWORD PTR tv256[ebp], 0
	jmp	SHORT $LN80@encoder_st
$LN79@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR _pxl_y$25[ebp]
	add	edx, DWORD PTR _y$20[ebp]
	cmp	ecx, edx
	jge	SHORT $LN77@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	DWORD PTR tv255[ebp], ecx
	jmp	SHORT $LN78@encoder_st
$LN77@encoder_st:
	mov	edx, DWORD PTR _pxl_y$25[ebp]
	add	edx, DWORD PTR _y$20[ebp]
	mov	DWORD PTR tv255[ebp], edx
$LN78@encoder_st:
	mov	eax, DWORD PTR tv255[ebp]
	mov	DWORD PTR tv256[ebp], eax
$LN80@encoder_st:
	mov	ecx, DWORD PTR tv256[ebp]
	mov	DWORD PTR _src_y$18[ebp], ecx

; 1310 :               int src_x = CLIP(0, frame->width - 1, pxl_x + x);

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _pxl_x$26[ebp]
	add	edx, DWORD PTR _x$19[ebp]
	cmp	ecx, edx
	jge	SHORT $LN81@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	DWORD PTR tv264[ebp], ecx
	jmp	SHORT $LN82@encoder_st
$LN81@encoder_st:
	mov	edx, DWORD PTR _pxl_x$26[ebp]
	add	edx, DWORD PTR _x$19[ebp]
	mov	DWORD PTR tv264[ebp], edx
$LN82@encoder_st:
	cmp	DWORD PTR tv264[ebp], 0
	jge	SHORT $LN85@encoder_st
	mov	DWORD PTR tv274[ebp], 0
	jmp	SHORT $LN86@encoder_st
$LN85@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _pxl_x$26[ebp]
	add	edx, DWORD PTR _x$19[ebp]
	cmp	ecx, edx
	jge	SHORT $LN83@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	DWORD PTR tv273[ebp], ecx
	jmp	SHORT $LN84@encoder_st
$LN83@encoder_st:
	mov	edx, DWORD PTR _pxl_x$26[ebp]
	add	edx, DWORD PTR _x$19[ebp]
	mov	DWORD PTR tv273[ebp], edx
$LN84@encoder_st:
	mov	eax, DWORD PTR tv273[ebp]
	mov	DWORD PTR tv274[ebp], eax
$LN86@encoder_st:
	mov	ecx, DWORD PTR tv274[ebp]
	mov	DWORD PTR _src_x$17[ebp], ecx

; 1311 :               tmp[y * LCU_WIDTH + x] = state->tile->frame->source->y[src_y * state->tile->frame->source->stride + src_x];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _src_y$18[ebp]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _src_x$17[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _y$20[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _x$19[ebp]
	mov	cl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _tmp$27[ebp+eax], cl

; 1312 :             }

	jmp	$LN11@encoder_st
$LN12@encoder_st:

; 1313 :           }

	jmp	$LN8@encoder_st
$LN9@encoder_st:

; 1314 :         }
; 1315 :         
; 1316 :         double lcu_var = kvz_pixel_var(tmp, LCU_LUMA_SIZE);

	mov	esi, esp
	push	4096					; 00001000H
	lea	eax, DWORD PTR _tmp$27[ebp]
	push	eax
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR _lcu_var$16[ebp]

; 1317 : 
; 1318 :         if (has_chroma) {

	movzx	eax, BYTE PTR _has_chroma$37[ebp]
	test	eax, eax
	je	$LN30@encoder_st

; 1319 :           // Add chroma variance if not monochrome
; 1320 :           int32_t c_stride = state->tile->frame->source->stride >> 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+40]
	sar	ecx, 1
	mov	DWORD PTR _c_stride$15[ebp], ecx

; 1321 :           kvz_pixel chromau_tmp[LCU_CHROMA_SIZE];
; 1322 :           kvz_pixel chromav_tmp[LCU_CHROMA_SIZE];
; 1323 :           int lcu_chroma_width = LCU_WIDTH >> 1;

	mov	DWORD PTR _lcu_chroma_width$12[ebp], 32	; 00000020H

; 1324 :           int c_pxl_x = x * lcu_chroma_width;

	mov	eax, DWORD PTR _x$28[ebp]
	imul	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	DWORD PTR _c_pxl_x$11[ebp], eax

; 1325 :           int c_pxl_y = y * lcu_chroma_width;

	mov	eax, DWORD PTR _y$29[ebp]
	imul	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	DWORD PTR _c_pxl_y$10[ebp], eax

; 1326 :           int c_x_max = MIN(c_pxl_x + lcu_chroma_width, frame->width >> 1) - c_pxl_x;

	mov	eax, DWORD PTR _c_pxl_x$11[ebp]
	add	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sar	edx, 1
	cmp	eax, edx
	jge	SHORT $LN87@encoder_st
	mov	eax, DWORD PTR _c_pxl_x$11[ebp]
	add	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	DWORD PTR tv310[ebp], eax
	jmp	SHORT $LN88@encoder_st
$LN87@encoder_st:
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sar	edx, 1
	mov	DWORD PTR tv310[ebp], edx
$LN88@encoder_st:
	mov	eax, DWORD PTR tv310[ebp]
	sub	eax, DWORD PTR _c_pxl_x$11[ebp]
	mov	DWORD PTR _c_x_max$9[ebp], eax

; 1327 :           int c_y_max = MIN(c_pxl_y + lcu_chroma_width, frame->height >> 1) - c_pxl_y;

	mov	eax, DWORD PTR _c_pxl_y$10[ebp]
	add	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sar	edx, 1
	cmp	eax, edx
	jge	SHORT $LN89@encoder_st
	mov	eax, DWORD PTR _c_pxl_y$10[ebp]
	add	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN90@encoder_st
$LN89@encoder_st:
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sar	edx, 1
	mov	DWORD PTR tv319[ebp], edx
$LN90@encoder_st:
	mov	eax, DWORD PTR tv319[ebp]
	sub	eax, DWORD PTR _c_pxl_y$10[ebp]
	mov	DWORD PTR _c_y_max$8[ebp], eax

; 1328 : 
; 1329 :           if (!edge_lcu(id, x_lim, y_lim, xdiv64, ydiv64)) {

	movzx	eax, BYTE PTR _ydiv64$21[ebp]
	push	eax
	movzx	ecx, BYTE PTR _xdiv64$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_lim$31[ebp]
	push	edx
	mov	eax, DWORD PTR _x_lim$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$30[ebp]
	push	ecx
	call	_edge_lcu
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	jne	$LN31@encoder_st

; 1330 :             kvz_pixels_blit(&state->tile->frame->source->u[c_pxl_x + c_pxl_y * c_stride], chromau_tmp, c_x_max, c_y_max, c_stride, lcu_chroma_width);

	mov	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _c_stride$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _c_y_max$8[ebp]
	push	edx
	mov	eax, DWORD PTR _c_x_max$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _chromau_tmp$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _c_pxl_y$10[ebp]
	imul	eax, DWORD PTR _c_stride$15[ebp]
	add	eax, DWORD PTR _c_pxl_x$11[ebp]
	mov	ecx, DWORD PTR [edx+12]
	add	ecx, eax
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 1331 :             kvz_pixels_blit(&state->tile->frame->source->v[c_pxl_x + c_pxl_y * c_stride], chromav_tmp, c_x_max, c_y_max, c_stride, lcu_chroma_width);

	mov	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _c_stride$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _c_y_max$8[ebp]
	push	edx
	mov	eax, DWORD PTR _c_x_max$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _chromav_tmp$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _c_pxl_y$10[ebp]
	imul	eax, DWORD PTR _c_stride$15[ebp]
	add	eax, DWORD PTR _c_pxl_x$11[ebp]
	mov	ecx, DWORD PTR [edx+16]
	add	ecx, eax
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 1332 :           }

	jmp	$LN15@encoder_st
$LN31@encoder_st:

; 1333 :           else {
; 1334 :             for (int y = 0; y < lcu_chroma_width; y++) {

	mov	DWORD PTR _y$7[ebp], 0
	jmp	SHORT $LN16@encoder_st
$LN14@encoder_st:
	mov	eax, DWORD PTR _y$7[ebp]
	add	eax, 1
	mov	DWORD PTR _y$7[ebp], eax
$LN16@encoder_st:
	mov	eax, DWORD PTR _y$7[ebp]
	cmp	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	jge	$LN15@encoder_st

; 1335 :               for (int x = 0; x < lcu_chroma_width; x++) {

	mov	DWORD PTR _x$6[ebp], 0
	jmp	SHORT $LN19@encoder_st
$LN17@encoder_st:
	mov	eax, DWORD PTR _x$6[ebp]
	add	eax, 1
	mov	DWORD PTR _x$6[ebp], eax
$LN19@encoder_st:
	mov	eax, DWORD PTR _x$6[ebp]
	cmp	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	jge	$LN18@encoder_st

; 1336 :                 int src_y = CLIP(0, (frame->height >> 1) - 1, c_pxl_y + y);

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _c_pxl_y$10[ebp]
	add	edx, DWORD PTR _y$7[ebp]
	cmp	ecx, edx
	jge	SHORT $LN91@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR tv402[ebp], ecx
	jmp	SHORT $LN92@encoder_st
$LN91@encoder_st:
	mov	edx, DWORD PTR _c_pxl_y$10[ebp]
	add	edx, DWORD PTR _y$7[ebp]
	mov	DWORD PTR tv402[ebp], edx
$LN92@encoder_st:
	cmp	DWORD PTR tv402[ebp], 0
	jge	SHORT $LN95@encoder_st
	mov	DWORD PTR tv414[ebp], 0
	jmp	SHORT $LN96@encoder_st
$LN95@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _c_pxl_y$10[ebp]
	add	edx, DWORD PTR _y$7[ebp]
	cmp	ecx, edx
	jge	SHORT $LN93@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR tv413[ebp], ecx
	jmp	SHORT $LN94@encoder_st
$LN93@encoder_st:
	mov	edx, DWORD PTR _c_pxl_y$10[ebp]
	add	edx, DWORD PTR _y$7[ebp]
	mov	DWORD PTR tv413[ebp], edx
$LN94@encoder_st:
	mov	eax, DWORD PTR tv413[ebp]
	mov	DWORD PTR tv414[ebp], eax
$LN96@encoder_st:
	mov	ecx, DWORD PTR tv414[ebp]
	mov	DWORD PTR _src_y$5[ebp], ecx

; 1337 :                 int src_x = CLIP(0, (frame->width >> 1) - 1, c_pxl_x + x);

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _c_pxl_x$11[ebp]
	add	edx, DWORD PTR _x$6[ebp]
	cmp	ecx, edx
	jge	SHORT $LN97@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR tv424[ebp], ecx
	jmp	SHORT $LN98@encoder_st
$LN97@encoder_st:
	mov	edx, DWORD PTR _c_pxl_x$11[ebp]
	add	edx, DWORD PTR _x$6[ebp]
	mov	DWORD PTR tv424[ebp], edx
$LN98@encoder_st:
	cmp	DWORD PTR tv424[ebp], 0
	jge	SHORT $LN101@encoder_st
	mov	DWORD PTR tv436[ebp], 0
	jmp	SHORT $LN102@encoder_st
$LN101@encoder_st:
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 1
	sub	ecx, 1
	mov	edx, DWORD PTR _c_pxl_x$11[ebp]
	add	edx, DWORD PTR _x$6[ebp]
	cmp	ecx, edx
	jge	SHORT $LN99@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR tv435[ebp], ecx
	jmp	SHORT $LN100@encoder_st
$LN99@encoder_st:
	mov	edx, DWORD PTR _c_pxl_x$11[ebp]
	add	edx, DWORD PTR _x$6[ebp]
	mov	DWORD PTR tv435[ebp], edx
$LN100@encoder_st:
	mov	eax, DWORD PTR tv435[ebp]
	mov	DWORD PTR tv436[ebp], eax
$LN102@encoder_st:
	mov	ecx, DWORD PTR tv436[ebp]
	mov	DWORD PTR _src_x$4[ebp], ecx

; 1338 :                 chromau_tmp[y * lcu_chroma_width + x] = state->tile->frame->source->u[src_y * c_stride + src_x];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _src_y$5[ebp]
	imul	ecx, DWORD PTR _c_stride$15[ebp]
	add	ecx, DWORD PTR _src_x$4[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _y$7[ebp]
	imul	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	add	eax, DWORD PTR _x$6[ebp]
	mov	cl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _chromau_tmp$14[ebp+eax], cl

; 1339 :                 chromav_tmp[y * lcu_chroma_width + x] = state->tile->frame->source->v[src_y * c_stride + src_x];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _src_y$5[ebp]
	imul	ecx, DWORD PTR _c_stride$15[ebp]
	add	ecx, DWORD PTR _src_x$4[ebp]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _y$7[ebp]
	imul	eax, DWORD PTR _lcu_chroma_width$12[ebp]
	add	eax, DWORD PTR _x$6[ebp]
	mov	cl, BYTE PTR [edx+ecx]
	mov	BYTE PTR _chromav_tmp$13[ebp+eax], cl

; 1340 :               }

	jmp	$LN17@encoder_st
$LN18@encoder_st:

; 1341 :             }

	jmp	$LN14@encoder_st
$LN15@encoder_st:

; 1342 :           }
; 1343 :           lcu_var += kvz_pixel_var(chromau_tmp, LCU_CHROMA_SIZE);

	mov	esi, esp
	push	1024					; 00000400H
	lea	eax, DWORD PTR _chromau_tmp$14[ebp]
	push	eax
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv1047[ebp]
	movsd	xmm0, QWORD PTR tv1047[ebp]
	addsd	xmm0, QWORD PTR _lcu_var$16[ebp]
	movsd	QWORD PTR _lcu_var$16[ebp], xmm0

; 1344 :           lcu_var += kvz_pixel_var(chromav_tmp, LCU_CHROMA_SIZE);

	mov	esi, esp
	push	1024					; 00000400H
	lea	eax, DWORD PTR _chromav_tmp$13[ebp]
	push	eax
	call	DWORD PTR _kvz_pixel_var
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	QWORD PTR tv1055[ebp]
	movsd	xmm0, QWORD PTR tv1055[ebp]
	addsd	xmm0, QWORD PTR _lcu_var$16[ebp]
	movsd	QWORD PTR _lcu_var$16[ebp], xmm0
$LN30@encoder_st:

; 1345 :         }
; 1346 :                 
; 1347 :         state->frame->aq_offsets[id] = d * (log(lcu_var) - log(frame_var));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lcu_var$16[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv1062[ebp]
	movsd	xmm0, QWORD PTR tv1062[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _frame_var$33[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv1200[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv1068[ebp]
	movsd	xmm0, QWORD PTR tv1200[ebp]
	subsd	xmm0, QWORD PTR tv1068[ebp]
	mulsd	xmm0, QWORD PTR _d$36[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _id$30[ebp]
	movsd	QWORD PTR [edx+eax*8], xmm0

; 1348 :         id++; 

	mov	eax, DWORD PTR _id$30[ebp]
	add	eax, 1
	mov	DWORD PTR _id$30[ebp], eax

; 1349 :       }

	jmp	$LN5@encoder_st
$LN6@encoder_st:

; 1350 :     }

	jmp	$LN2@encoder_st
$LN3@encoder_st:

; 1351 :   }
; 1352 :   // Variance adaptive quantization - END
; 1353 : 
; 1354 :   // Use this flag to handle closed gop irap picture selection.
; 1355 :   // If set to true, irap is already set and we avoid
; 1356 :   // setting it based on the intra period
; 1357 :   bool is_closed_normal_gop = false;

	mov	BYTE PTR _is_closed_normal_gop$[ebp], 0

; 1358 : 
; 1359 :   encoder_state_t *previous = state->previous_encoder_state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _previous$[ebp], ecx

; 1360 :   int owf = MIN(state->encoder_control->cfg.owf, state->frame->num);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+156]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN103@encoder_st
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR tv491[ebp], ecx
	jmp	SHORT $LN104@encoder_st
$LN103@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv491[ebp], ecx
$LN104@encoder_st:
	mov	edx, DWORD PTR tv491[ebp]
	mov	DWORD PTR _owf$[ebp], edx

; 1361 : 
; 1362 :   const int layer = state->encoder_control->cfg.gop[state->frame->gop_offset].layer;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	edx, BYTE PTR [eax+16]
	shl	edx, 6
	movsx	eax, BYTE PTR [ecx+edx+290]
	mov	DWORD PTR _layer$[ebp], eax
$LN20@encoder_st:

; 1363 : 
; 1364 :   while (--owf > 0 && layer != state->encoder_control->cfg.gop[previous->frame->gop_offset].layer) {

	mov	eax, DWORD PTR _owf$[ebp]
	sub	eax, 1
	mov	DWORD PTR _owf$[ebp], eax
	cmp	DWORD PTR _owf$[ebp], 0
	jle	SHORT $LN21@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _previous$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	edx, BYTE PTR [eax+16]
	shl	edx, 6
	movsx	eax, BYTE PTR [ecx+edx+290]
	cmp	DWORD PTR _layer$[ebp], eax
	je	SHORT $LN21@encoder_st

; 1365 :     previous = previous->previous_encoder_state;

	mov	eax, DWORD PTR _previous$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _previous$[ebp], ecx

; 1366 :   }

	jmp	SHORT $LN20@encoder_st
$LN21@encoder_st:

; 1367 : 
; 1368 :   if (owf == 0) previous = state;

	cmp	DWORD PTR _owf$[ebp], 0
	jne	SHORT $LN33@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR _previous$[ebp], eax
$LN33@encoder_st:

; 1369 :   state->frame->previous_layer_state = previous;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _previous$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 1370 :   // Set POC.
; 1371 :   if (state->frame->num == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN34@encoder_st

; 1372 :     state->frame->poc = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], 0
	jmp	$LN43@encoder_st
$LN34@encoder_st:

; 1373 :   } else if (cfg->gop_len && !cfg->gop_lowdelay) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	$LN36@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	jne	$LN36@encoder_st

; 1374 : 
; 1375 :     int32_t framenum = state->frame->num - 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR _framenum$3[ebp], edx

; 1376 :     // Handle closed GOP
; 1377 :     // Closed GOP structure has an extra IDR between the GOPs
; 1378 :     if (cfg->intra_period > 0 && !cfg->open_gop) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	$LN38@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	$LN38@encoder_st

; 1379 :       is_closed_normal_gop = true;

	mov	BYTE PTR _is_closed_normal_gop$[ebp], 1

; 1380 :       if (framenum % (cfg->intra_period + 1) == cfg->intra_period) {

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	eax, DWORD PTR _framenum$3[ebp]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN40@encoder_st

; 1381 :         // Insert IDR before each new GOP after intra period in closed GOP configuration
; 1382 :         state->frame->poc = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], 0

; 1383 :       } else {

	jmp	SHORT $LN41@encoder_st
$LN40@encoder_st:

; 1384 :         // Calculate frame number again and use that for the POC
; 1385 :         framenum = framenum % (cfg->intra_period + 1);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	eax, DWORD PTR _framenum$3[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _framenum$3[ebp], edx

; 1386 :         int32_t poc_offset = cfg->gop[state->frame->gop_offset].poc_offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+289]
	mov	DWORD PTR _poc_offset$2[ebp], ecx

; 1387 :         state->frame->poc = framenum - framenum % cfg->gop_len + poc_offset;

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	mov	eax, DWORD PTR _framenum$3[ebp]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _framenum$3[ebp]
	sub	eax, edx
	add	eax, DWORD PTR _poc_offset$2[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+12], eax

; 1388 :         // This should not be an irap picture in closed GOP
; 1389 :         state->frame->is_irap = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+79], 0
$LN41@encoder_st:

; 1390 :       }
; 1391 :     } else { // Open GOP

	jmp	SHORT $LN39@encoder_st
$LN38@encoder_st:

; 1392 :       // Calculate POC according to the global frame counter and GOP structure
; 1393 :       int32_t poc_offset = cfg->gop[state->frame->gop_offset].poc_offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+289]
	mov	DWORD PTR _poc_offset$1[ebp], ecx

; 1394 :       state->frame->poc = framenum - framenum % cfg->gop_len + poc_offset;

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	mov	eax, DWORD PTR _framenum$3[ebp]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _framenum$3[ebp]
	sub	eax, edx
	add	eax, DWORD PTR _poc_offset$1[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+12], eax
$LN39@encoder_st:

; 1395 :     }
; 1396 :     
; 1397 :     kvz_videoframe_set_poc(state->tile->frame, state->frame->poc);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_kvz_videoframe_set_poc
	add	esp, 8
	jmp	SHORT $LN43@encoder_st
$LN36@encoder_st:

; 1398 :   } else if (cfg->intra_period > 0) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN42@encoder_st

; 1399 :     state->frame->poc = state->frame->num % cfg->intra_period;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cdq
	idiv	DWORD PTR [esi+4]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], edx

; 1400 :   } else {

	jmp	SHORT $LN43@encoder_st
$LN42@encoder_st:

; 1401 :     state->frame->poc = state->frame->num;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], ecx
$LN43@encoder_st:

; 1402 :   }
; 1403 : 
; 1404 :   // Check whether the frame is a keyframe or not.
; 1405 :   if (state->frame->num == 0 || state->frame->poc == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN46@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN44@encoder_st
$LN46@encoder_st:

; 1406 :     state->frame->is_irap = true;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+79], 1
	jmp	SHORT $LN47@encoder_st
$LN44@encoder_st:

; 1407 :   } else if(!is_closed_normal_gop) { // In closed-GOP IDR frames are poc==0 so skip this check

	movzx	eax, BYTE PTR _is_closed_normal_gop$[ebp]
	test	eax, eax
	jne	SHORT $LN47@encoder_st

; 1408 :     state->frame->is_irap =

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN105@encoder_st
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cdq
	idiv	DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN105@encoder_st
	mov	DWORD PTR tv615[ebp], 1
	jmp	SHORT $LN106@encoder_st
$LN105@encoder_st:
	mov	DWORD PTR tv615[ebp], 0
$LN106@encoder_st:
	cmp	DWORD PTR tv615[ebp], 0
	jne	SHORT $LN107@encoder_st
	mov	DWORD PTR tv617[ebp], 0
	jmp	SHORT $LN108@encoder_st
$LN107@encoder_st:
	mov	DWORD PTR tv617[ebp], 1
$LN108@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	cl, BYTE PTR tv617[ebp]
	mov	BYTE PTR [eax+79], cl
$LN47@encoder_st:

; 1409 :       cfg->intra_period > 0 &&
; 1410 :       (state->frame->poc % cfg->intra_period) == 0;
; 1411 :   }
; 1412 :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN48@encoder_st

; 1413 :     state->frame->irap_poc = state->frame->poc;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+20], ecx
$LN48@encoder_st:

; 1414 :   }
; 1415 : 
; 1416 :   // Set pictype.
; 1417 :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN49@encoder_st

; 1418 :     if (state->frame->num == 0 ||
; 1419 :         cfg->intra_period == 1 ||
; 1420 :         cfg->gop_len == 0 ||
; 1421 :         cfg->gop_lowdelay ||

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN53@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN53@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN53@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	jne	SHORT $LN53@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN51@encoder_st
$LN53@encoder_st:

; 1422 :         !cfg->open_gop) // Closed GOP uses IDR pictures
; 1423 :     {
; 1424 :       state->frame->pictype = KVZ_NAL_IDR_W_RADL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+80], 19			; 00000013H

; 1425 :     } else {

	jmp	SHORT $LN52@encoder_st
$LN51@encoder_st:

; 1426 :       state->frame->pictype = KVZ_NAL_CRA_NUT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+80], 21			; 00000015H
$LN52@encoder_st:

; 1427 :     }

	jmp	SHORT $LN55@encoder_st
$LN49@encoder_st:

; 1428 :   } else if (state->frame->poc < state->frame->irap_poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+12]
	cmp	ecx, DWORD PTR [eax+20]
	jge	SHORT $LN54@encoder_st

; 1429 :     state->frame->pictype = KVZ_NAL_RASL_R;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+80], 9

; 1430 :   } else {

	jmp	SHORT $LN55@encoder_st
$LN54@encoder_st:

; 1431 :     state->frame->pictype = KVZ_NAL_TRAIL_R;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+80], 1
$LN55@encoder_st:

; 1432 :   }
; 1433 : 
; 1434 :   encoder_state_remove_refs(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_remove_refs
	add	esp, 4

; 1435 :   kvz_encoder_create_ref_lists(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encoder_create_ref_lists
	add	esp, 4

; 1436 : 
; 1437 :   // Set slicetype.
; 1438 :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN56@encoder_st

; 1439 :     state->frame->slicetype = KVZ_SLICE_I;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+84], 2
	jmp	SHORT $LN59@encoder_st
$LN56@encoder_st:

; 1440 :   } else if (state->frame->ref_LX_size[1] > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	test	eax, eax
	jle	SHORT $LN58@encoder_st

; 1441 :     state->frame->slicetype = KVZ_SLICE_B;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+84], 0

; 1442 :   } else {

	jmp	SHORT $LN59@encoder_st
$LN58@encoder_st:

; 1443 :     state->frame->slicetype = KVZ_SLICE_P;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+84], 1
$LN59@encoder_st:

; 1444 :   }
; 1445 : 
; 1446 :   if (cfg->target_bitrate > 0 && state->frame->num > cfg->owf) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2328], 0
	jle	SHORT $LN60@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+156]
	jle	SHORT $LN60@encoder_st

; 1447 :     normalize_lcu_weights(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_normalize_lcu_weights
	add	esp, 4
$LN60@encoder_st:

; 1448 :   }
; 1449 :   state->frame->cur_frame_bits_coded = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+104], 0
	mov	DWORD PTR [ecx+108], 0

; 1450 : 
; 1451 :   switch (state->encoder_control->cfg.rc_algorithm) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+2452]
	mov	BYTE PTR tv688[ebp], dl
	cmp	BYTE PTR tv688[ebp], 0
	jl	SHORT $LN63@encoder_st
	cmp	BYTE PTR tv688[ebp], 1
	jle	SHORT $LN61@encoder_st
	cmp	BYTE PTR tv688[ebp], 2
	je	SHORT $LN62@encoder_st
	jmp	SHORT $LN63@encoder_st
$LN61@encoder_st:

; 1452 :     case KVZ_NO_RC:
; 1453 :     case KVZ_LAMBDA:
; 1454 :       kvz_set_picture_lambda_and_qp(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_set_picture_lambda_and_qp
	add	esp, 4

; 1455 :       break;

	jmp	SHORT $LN22@encoder_st
$LN62@encoder_st:

; 1456 :     case KVZ_OBA:
; 1457 :       kvz_estimate_pic_lambda(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_estimate_pic_lambda
	add	esp, 4

; 1458 :       break;

	jmp	SHORT $LN22@encoder_st
$LN63@encoder_st:

; 1459 :     default:
; 1460 :       assert(0);

	xor	eax, eax
	jne	SHORT $LN109@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_init_new_frame@@9@9
	add	ecx, 205				; 000000cdH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN109@encoder_st:
$LN22@encoder_st:

; 1461 :   }
; 1462 :  
; 1463 :   encoder_state_init_children(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_init_children
	add	esp, 4

; 1464 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN114@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 8212				; 00002014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN114@encoder_st:
	DD	3
	DD	$LN113@encoder_st
$LN113@encoder_st:
	DD	-4244					; ffffef6cH
	DD	4096					; 00001000H
	DD	$LN110@encoder_st
	DD	-5424					; ffffead0H
	DD	1024					; 00000400H
	DD	$LN111@encoder_st
	DD	-6456					; ffffe6c8H
	DD	1024					; 00000400H
	DD	$LN112@encoder_st
$LN112@encoder_st:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN111@encoder_st:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN110@encoder_st:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_encoder_state_init_new_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _edge_lcu
_TEXT	SEGMENT
_last_row_first_id$ = -8				; size = 4
_id$ = 8						; size = 4
_lcus_x$ = 12						; size = 4
_lcus_y$ = 16						; size = 4
_xdiv64$ = 20						; size = 1
_ydiv64$ = 24						; size = 1
_edge_lcu PROC						; COMDAT

; 1242 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1243 :   if (xdiv64 && ydiv64) {

	movzx	eax, BYTE PTR _xdiv64$[ebp]
	test	eax, eax
	je	SHORT $LN2@edge_lcu
	movzx	eax, BYTE PTR _ydiv64$[ebp]
	test	eax, eax
	je	SHORT $LN2@edge_lcu

; 1244 :     return false;

	xor	al, al
	jmp	SHORT $LN1@edge_lcu
$LN2@edge_lcu:

; 1245 :   }
; 1246 :   int last_row_first_id = (lcus_y - 1) * lcus_x;

	mov	eax, DWORD PTR _lcus_y$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _lcus_x$[ebp]
	mov	DWORD PTR _last_row_first_id$[ebp], eax

; 1247 :   if ((id % lcus_x == lcus_x - 1 && !xdiv64) || (id >= last_row_first_id && !ydiv64)) {

	mov	eax, DWORD PTR _id$[ebp]
	cdq
	idiv	DWORD PTR _lcus_x$[ebp]
	mov	eax, DWORD PTR _lcus_x$[ebp]
	sub	eax, 1
	cmp	edx, eax
	jne	SHORT $LN6@edge_lcu
	movzx	eax, BYTE PTR _xdiv64$[ebp]
	test	eax, eax
	je	SHORT $LN5@edge_lcu
$LN6@edge_lcu:
	mov	eax, DWORD PTR _id$[ebp]
	cmp	eax, DWORD PTR _last_row_first_id$[ebp]
	jl	SHORT $LN3@edge_lcu
	movzx	eax, BYTE PTR _ydiv64$[ebp]
	test	eax, eax
	jne	SHORT $LN3@edge_lcu
$LN5@edge_lcu:

; 1248 :     return true;

	mov	al, 1
	jmp	SHORT $LN1@edge_lcu

; 1249 :   }

	jmp	SHORT $LN1@edge_lcu
$LN3@edge_lcu:

; 1250 :   else {
; 1251 :     return false;

	xor	al, al
$LN1@edge_lcu:

; 1252 :   }
; 1253 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_edge_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _normalize_lcu_weights
_TEXT	SEGMENT
_i$1 = -48						; size = 4
_i$2 = -36						; size = 4
_sum$ = -24						; size = 8
_num_lcus$ = -8						; size = 4
_state$ = 8						; size = 4
_normalize_lcu_weights PROC				; COMDAT

; 1225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1226 :   if (state->frame->num == 0) return;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@normalize_
	jmp	$LN6@normalize_
$LN8@normalize_:

; 1227 : 
; 1228 :   const uint32_t num_lcus = state->encoder_control->in.width_in_lcu *

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2488]
	imul	ecx, DWORD PTR [eax+2492]
	mov	DWORD PTR _num_lcus$[ebp], ecx

; 1229 :                             state->encoder_control->in.height_in_lcu;
; 1230 :   double sum = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _sum$[ebp], xmm0

; 1231 :   for (uint32_t i = 0; i < num_lcus; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@normalize_
$LN2@normalize_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@normalize_:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _num_lcus$[ebp]
	jae	SHORT $LN3@normalize_

; 1232 :     sum += state->frame->lcu_stats[i].weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$2[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR _sum$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx+8]
	movsd	QWORD PTR _sum$[ebp], xmm0

; 1233 :   }

	jmp	SHORT $LN2@normalize_
$LN3@normalize_:

; 1234 : 
; 1235 :   for (uint32_t i = 0; i < num_lcus; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@normalize_
$LN5@normalize_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@normalize_:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _num_lcus$[ebp]
	jae	SHORT $LN6@normalize_

; 1236 :     state->frame->lcu_stats[i].weight /= sum;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$1[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+8]
	divsd	xmm0, QWORD PTR _sum$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR _i$1[ebp], 72
	mov	ecx, DWORD PTR [edx+148]
	movsd	QWORD PTR [ecx+eax+8], xmm0

; 1237 :   }

	jmp	SHORT $LN5@normalize_
$LN6@normalize_:

; 1238 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_normalize_lcu_weights ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_init_children
_TEXT	SEGMENT
tv80 = -208						; size = 4
_i$1 = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_init_children PROC			; COMDAT

; 1200 : static void encoder_state_init_children(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1201 :   kvz_bitstream_clear(&state->stream);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_clear
	add	esp, 4

; 1202 : 
; 1203 :   if (state->is_leaf) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@encoder_st

; 1204 :     //Leaf states have cabac and context
; 1205 :     kvz_cabac_start(&state->cabac);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_kvz_cabac_start
	add	esp, 4

; 1206 :     kvz_init_contexts(state, state->encoder_control->cfg.set_qp_in_cu ? 26 : state->frame->QP, state->frame->slicetype);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2431]
	test	edx, edx
	je	SHORT $LN7@encoder_st
	mov	DWORD PTR tv80[ebp], 26			; 0000001aH
	jmp	SHORT $LN8@encoder_st
$LN7@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	mov	DWORD PTR tv80[ebp], edx
$LN8@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+84]
	push	edx
	movzx	eax, BYTE PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_init_contexts
	add	esp, 12					; 0000000cH
$LN5@encoder_st:

; 1207 :   }
; 1208 : 
; 1209 :   //Clear the jobs
; 1210 :   kvz_threadqueue_free_job(&state->tqj_bitstream_written);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 1211 :   kvz_threadqueue_free_job(&state->tqj_recon_done);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 320				; 00000140H
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 1212 : 
; 1213 :   //Copy the constraint pointer
; 1214 :   // TODO: Try to do it in the if (state->is_leaf)
; 1215 :   //if (state->parent != NULL) {
; 1216 :     // state->constraint = state->parent->constraint;
; 1217 :   //}
; 1218 : 
; 1219 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN1@encoder_st

; 1220 :     encoder_state_init_children(&state->children[i]);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_encoder_state_init_children
	add	esp, 4

; 1221 :   }

	jmp	SHORT $LN2@encoder_st
$LN1@encoder_st:

; 1222 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_init_children ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_set_source_picture
_TEXT	SEGMENT
_state$ = 8						; size = 4
_frame$ = 12						; size = 4
_encoder_set_source_picture PROC			; COMDAT

; 1183 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1184 :   assert(!state->tile->frame->source);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@encoder_se
	mov	eax, DWORD PTR ?__LINE__Var@?0??encoder_set_source_picture@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DI@KGBGGKIA@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@encoder_se:

; 1185 :   assert(!state->tile->frame->rec);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN6@encoder_se
	mov	eax, DWORD PTR ?__LINE__Var@?0??encoder_set_source_picture@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@MIMKPNAK@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@encoder_se:

; 1186 : 
; 1187 :   state->tile->frame->source = frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _frame$[ebp]
	mov	DWORD PTR [edx], eax

; 1188 :   if (state->encoder_control->cfg.lossless) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2364], 0
	je	SHORT $LN2@encoder_se

; 1189 :     // In lossless mode, the reconstruction is equal to the source frame.
; 1190 :     state->tile->frame->rec = kvz_image_copy_ref(frame);

	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	call	_kvz_image_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1191 :   } else {

	jmp	SHORT $LN3@encoder_se
$LN2@encoder_se:

; 1192 :     state->tile->frame->rec = kvz_image_alloc(state->encoder_control->chroma_format, frame->width, frame->height);

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+2536]
	push	eax
	call	_kvz_image_alloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1193 :     state->tile->frame->rec->dts = frame->dts;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx

; 1194 :     state->tile->frame->rec->pts = frame->pts;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
$LN3@encoder_se:

; 1195 :   }
; 1196 : 
; 1197 :   kvz_videoframe_set_poc(state->tile->frame, state->frame->poc);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_kvz_videoframe_set_poc
	add	esp, 8

; 1198 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_set_source_picture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_remove_refs
_TEXT	SEGMENT
_oldest_ref$1 = -137					; size = 1
_ref_relative_poc$2 = -128				; size = 4
_i$3 = -116						; size = 4
_ref_relative_poc$4 = -104				; size = 4
_i$5 = -92						; size = 4
_ref_poc$6 = -80					; size = 4
_is_referenced$7 = -65					; size = 1
_ref$8 = -56						; size = 4
_target_ref_num$ = -44					; size = 4
_pos_refs$ = -32					; size = 4
_neg_refs$ = -20					; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_remove_refs PROC				; COMDAT

; 1108 : static void encoder_state_remove_refs(encoder_state_t *state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1109 :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 1110 : 
; 1111 :   int neg_refs = encoder->cfg.gop[state->frame->gop_offset].ref_neg_count;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+309]
	mov	DWORD PTR _neg_refs$[ebp], ecx

; 1112 :   int pos_refs = encoder->cfg.gop[state->frame->gop_offset].ref_pos_count;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+292]
	mov	DWORD PTR _pos_refs$[ebp], ecx

; 1113 : 
; 1114 :   unsigned target_ref_num;
; 1115 :   if (encoder->cfg.gop_len) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN13@encoder_st

; 1116 :     target_ref_num = neg_refs + pos_refs;

	mov	eax, DWORD PTR _neg_refs$[ebp]
	add	eax, DWORD PTR _pos_refs$[ebp]
	mov	DWORD PTR _target_ref_num$[ebp], eax

; 1117 :   } else {

	jmp	SHORT $LN14@encoder_st
$LN13@encoder_st:

; 1118 :     target_ref_num = encoder->cfg.ref_frames;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _target_ref_num$[ebp], ecx
$LN14@encoder_st:

; 1119 :   }
; 1120 : 
; 1121 :   if (state->frame->pictype == KVZ_NAL_IDR_W_RADL ||

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 19					; 00000013H
	je	SHORT $LN16@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 20					; 00000014H
	jne	SHORT $LN15@encoder_st
$LN16@encoder_st:

; 1122 :       state->frame->pictype == KVZ_NAL_IDR_N_LP)
; 1123 :   {
; 1124 :     target_ref_num = 0;

	mov	DWORD PTR _target_ref_num$[ebp], 0
$LN15@encoder_st:

; 1125 :   }
; 1126 : 
; 1127 :   if (encoder->cfg.gop_len && target_ref_num > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	$LN11@encoder_st
	cmp	DWORD PTR _target_ref_num$[ebp], 0
	jbe	$LN11@encoder_st

; 1128 :     // With GOP in use, go through all the existing reference pictures and
; 1129 :     // remove any picture that is not referenced by the current picture.
; 1130 : 
; 1131 :     for (int ref = state->frame->ref->used_size - 1; ref >= 0; --ref) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	mov	DWORD PTR _ref$8[ebp], eax
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _ref$8[ebp]
	sub	eax, 1
	mov	DWORD PTR _ref$8[ebp], eax
$LN4@encoder_st:
	cmp	DWORD PTR _ref$8[ebp], 0
	jl	$LN3@encoder_st

; 1132 :       bool is_referenced = false;

	mov	BYTE PTR _is_referenced$7[ebp], 0

; 1133 : 
; 1134 :       int ref_poc = state->frame->ref->pocs[ref];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ref$8[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ref_poc$6[ebp], edx

; 1135 : 
; 1136 :       for (int i = 0; i < neg_refs; i++) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _neg_refs$[ebp]
	jge	SHORT $LN6@encoder_st

; 1137 :         int ref_relative_poc = -encoder->cfg.gop[state->frame->gop_offset].ref_neg[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	edx, DWORD PTR _i$5[ebp]
	movsx	eax, BYTE PTR [ecx+edx+30]
	neg	eax
	mov	DWORD PTR _ref_relative_poc$4[ebp], eax

; 1138 :         if (ref_poc == state->frame->poc + ref_relative_poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _ref_relative_poc$4[ebp]
	cmp	DWORD PTR _ref_poc$6[ebp], edx
	jne	SHORT $LN19@encoder_st

; 1139 :           is_referenced = true;

	mov	BYTE PTR _is_referenced$7[ebp], 1

; 1140 :           break;

	jmp	SHORT $LN6@encoder_st
$LN19@encoder_st:

; 1141 :         }
; 1142 :       }

	jmp	SHORT $LN5@encoder_st
$LN6@encoder_st:

; 1143 : 
; 1144 :       for (int i = 0; i < pos_refs; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN10@encoder_st
$LN8@encoder_st:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN10@encoder_st:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _pos_refs$[ebp]
	jge	SHORT $LN9@encoder_st

; 1145 :         int ref_relative_poc = encoder->cfg.gop[state->frame->gop_offset].ref_pos[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	edx, DWORD PTR _i$3[ebp]
	movsx	eax, BYTE PTR [ecx+edx+13]
	mov	DWORD PTR _ref_relative_poc$2[ebp], eax

; 1146 :         if (ref_poc == state->frame->poc + ref_relative_poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _ref_relative_poc$2[ebp]
	cmp	DWORD PTR _ref_poc$6[ebp], edx
	jne	SHORT $LN20@encoder_st

; 1147 :           is_referenced = true;

	mov	BYTE PTR _is_referenced$7[ebp], 1

; 1148 :           break;

	jmp	SHORT $LN9@encoder_st
$LN20@encoder_st:

; 1149 :         }
; 1150 :       }

	jmp	SHORT $LN8@encoder_st
$LN9@encoder_st:

; 1151 : 
; 1152 :       if (ref_poc < state->frame->irap_poc &&

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ref_poc$6[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jge	SHORT $LN21@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN21@encoder_st

; 1153 :           state->frame->irap_poc < state->frame->poc)
; 1154 :       {
; 1155 :         // Trailing frames cannot refer to leading frames.
; 1156 :         is_referenced = false;

	mov	BYTE PTR _is_referenced$7[ebp], 0
$LN21@encoder_st:

; 1157 :       }
; 1158 : 
; 1159 :       if (encoder->cfg.intra_period > 0 &&

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN22@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR _ref_poc$6[ebp], eax
	jge	SHORT $LN22@encoder_st

; 1160 :           ref_poc < state->frame->irap_poc - encoder->cfg.intra_period)
; 1161 :       {
; 1162 :         // No frame can refer past the two preceding IRAP frames.
; 1163 :         is_referenced = false;

	mov	BYTE PTR _is_referenced$7[ebp], 0
$LN22@encoder_st:

; 1164 :       }
; 1165 : 
; 1166 :       if (!is_referenced) {

	movzx	eax, BYTE PTR _is_referenced$7[ebp]
	test	eax, eax
	jne	SHORT $LN23@encoder_st

; 1167 :         // This reference is not referred to by this frame, it must be removed.
; 1168 :         kvz_image_list_rem(state->frame->ref, ref);

	mov	eax, DWORD PTR _ref$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_kvz_image_list_rem
	add	esp, 8
$LN23@encoder_st:

; 1169 :       }
; 1170 :     }

	jmp	$LN2@encoder_st
$LN3@encoder_st:

; 1171 :   } else {

	jmp	SHORT $LN18@encoder_st
$LN11@encoder_st:

; 1172 :     // Without GOP, remove the oldest picture.
; 1173 :     while (state->frame->ref->used_size > target_ref_num) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _target_ref_num$[ebp]
	jbe	SHORT $LN18@encoder_st

; 1174 :       int8_t oldest_ref = state->frame->ref->used_size - 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	mov	BYTE PTR _oldest_ref$1[ebp], al

; 1175 :       kvz_image_list_rem(state->frame->ref, oldest_ref);

	movsx	eax, BYTE PTR _oldest_ref$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_kvz_image_list_rem
	add	esp, 8

; 1176 :     }

	jmp	SHORT $LN11@encoder_st
$LN18@encoder_st:

; 1177 :   }
; 1178 : 
; 1179 :   assert(state->frame->ref->used_size <= target_ref_num);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _target_ref_num$[ebp]
	jbe	SHORT $LN1@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_remove_refs@@9@9
	add	ecx, 71					; 00000047H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FO@GLGPILKE@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@encoder_st:

; 1180 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_remove_refs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_ref_insertion_sort
_TEXT	SEGMENT
_j$1 = -41						; size = 1
_cur_poc$2 = -32					; size = 4
_cur_idx$3 = -17					; size = 1
_i$4 = -5						; size = 1
_state$ = 8						; size = 4
_reflist$ = 12						; size = 4
_length$ = 16						; size = 1
_reverse$ = 20						; size = 1
_encoder_ref_insertion_sort PROC			; COMDAT

; 1032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1033 : 
; 1034 :   for (uint8_t i = 1; i < length; ++i) {

	mov	BYTE PTR _i$4[ebp], 1
	jmp	SHORT $LN4@encoder_re
$LN2@encoder_re:
	mov	al, BYTE PTR _i$4[ebp]
	add	al, 1
	mov	BYTE PTR _i$4[ebp], al
$LN4@encoder_re:
	movzx	eax, BYTE PTR _i$4[ebp]
	movzx	ecx, BYTE PTR _length$[ebp]
	cmp	eax, ecx
	jge	$LN1@encoder_re

; 1035 :     const uint8_t cur_idx = reflist[i];

	movzx	eax, BYTE PTR _i$4[ebp]
	mov	ecx, DWORD PTR _reflist$[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _cur_idx$3[ebp], dl

; 1036 :     const int32_t cur_poc = state->frame->ref->pocs[cur_idx];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR _cur_idx$3[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cur_poc$2[ebp], edx

; 1037 :     int8_t j = i;

	mov	al, BYTE PTR _i$4[ebp]
	mov	BYTE PTR _j$1[ebp], al
$LN5@encoder_re:

; 1038 :     while ((j > 0 && !reverse && cur_poc > state->frame->ref->pocs[reflist[j - 1]]) ||

	movsx	eax, BYTE PTR _j$1[ebp]
	test	eax, eax
	jle	SHORT $LN8@encoder_re
	movzx	eax, BYTE PTR _reverse$[ebp]
	test	eax, eax
	jne	SHORT $LN8@encoder_re
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	movsx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _reflist$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-1]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _cur_poc$2[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jg	SHORT $LN7@encoder_re
$LN8@encoder_re:
	movsx	eax, BYTE PTR _j$1[ebp]
	test	eax, eax
	jle	SHORT $LN6@encoder_re
	movzx	eax, BYTE PTR _reverse$[ebp]
	test	eax, eax
	je	SHORT $LN6@encoder_re
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	movsx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _reflist$[ebp]
	movzx	eax, BYTE PTR [ecx+eax-1]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _cur_poc$2[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jge	SHORT $LN6@encoder_re
$LN7@encoder_re:

; 1039 :            (j > 0 &&  reverse && cur_poc < state->frame->ref->pocs[reflist[j - 1]]))
; 1040 :     {
; 1041 :       reflist[j] = reflist[j - 1];

	movsx	eax, BYTE PTR _j$1[ebp]
	movsx	ecx, BYTE PTR _j$1[ebp]
	mov	edx, DWORD PTR _reflist$[ebp]
	mov	esi, DWORD PTR _reflist$[ebp]
	mov	al, BYTE PTR [esi+eax-1]
	mov	BYTE PTR [edx+ecx], al

; 1042 :       --j;

	mov	al, BYTE PTR _j$1[ebp]
	sub	al, 1
	mov	BYTE PTR _j$1[ebp], al

; 1043 :     }

	jmp	SHORT $LN5@encoder_re
$LN6@encoder_re:

; 1044 :     reflist[j] = cur_idx;

	movsx	eax, BYTE PTR _j$1[ebp]
	mov	ecx, DWORD PTR _reflist$[ebp]
	mov	dl, BYTE PTR _cur_idx$3[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 1045 :   }

	jmp	$LN2@encoder_re
$LN1@encoder_re:

; 1046 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_ref_insertion_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_tree_is_a_chain
_TEXT	SEGMENT
_state$ = 8						; size = 4
_encoder_state_tree_is_a_chain PROC			; COMDAT

; 917  : static int encoder_state_tree_is_a_chain(const encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 918  :   if (!state->children[0].encoder_control) return 1;

	mov	eax, 336				; 00000150H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx], 0
	jne	SHORT $LN2@encoder_st
	mov	eax, 1
	jmp	SHORT $LN1@encoder_st
$LN2@encoder_st:

; 919  :   if (state->children[1].encoder_control) return 0;

	mov	eax, 336				; 00000150H
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN3@encoder_st
	xor	eax, eax
	jmp	SHORT $LN1@encoder_st
$LN3@encoder_st:

; 920  :   return encoder_state_tree_is_a_chain(&state->children[0]);

	mov	eax, 336				; 00000150H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	_encoder_state_tree_is_a_chain
	add	esp, 4
$LN1@encoder_st:

; 921  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_tree_is_a_chain ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_worker_encode_children
_TEXT	SEGMENT
_end_of_row$1 = -44					; size = 4
_tile_width$2 = -32					; size = 4
_wpp_row$3 = -20					; size = 4
_sub_state$ = -8					; size = 4
_opaque$ = 8						; size = 4
_encoder_state_worker_encode_children PROC		; COMDAT

; 898  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 899  :   encoder_state_t *sub_state = opaque;

	mov	eax, DWORD PTR _opaque$[ebp]
	mov	DWORD PTR _sub_state$[ebp], eax

; 900  :   encoder_state_encode(sub_state);

	mov	eax, DWORD PTR _sub_state$[ebp]
	push	eax
	call	_encoder_state_encode
	add	esp, 4

; 901  : 
; 902  :   if (sub_state->is_leaf && sub_state->type == ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	mov	eax, DWORD PTR _sub_state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN1@encoder_st
	mov	eax, DWORD PTR _sub_state$[ebp]
	cmp	DWORD PTR [eax+4], 87			; 00000057H
	jne	$LN1@encoder_st

; 903  :     // Set the last wavefront job of this row as the job that completes
; 904  :     // the bitstream for this wavefront row state.
; 905  : 
; 906  :     int wpp_row = sub_state->wfrow->lcu_offset_y;

	mov	eax, DWORD PTR _sub_state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _wpp_row$3[ebp], edx

; 907  :     int tile_width = sub_state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _sub_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _tile_width$2[ebp], eax

; 908  :     int end_of_row = (wpp_row + 1) * tile_width - 1;

	mov	eax, DWORD PTR _wpp_row$3[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _tile_width$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _end_of_row$1[ebp], eax

; 909  :     assert(!sub_state->tqj_bitstream_written);

	mov	eax, DWORD PTR _sub_state$[ebp]
	cmp	DWORD PTR [eax+324], 0
	je	SHORT $LN5@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_worker_encode_children@@9@9
	add	ecx, 11					; 0000000bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EE@EMJENLEH@?$AA?$CB?$AAs?$AAu?$AAb?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@encoder_st:

; 910  :     if (sub_state->tile->wf_jobs[end_of_row]) {

	mov	eax, DWORD PTR _sub_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _end_of_row$1[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN1@encoder_st

; 911  :       sub_state->tqj_bitstream_written =

	mov	eax, DWORD PTR _sub_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _end_of_row$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_kvz_threadqueue_copy_ref
	add	esp, 4
	mov	edx, DWORD PTR _sub_state$[ebp]
	mov	DWORD PTR [edx+324], eax
$LN1@encoder_st:

; 912  :         kvz_threadqueue_copy_ref(sub_state->tile->wf_jobs[end_of_row]);
; 913  :     }
; 914  :   }
; 915  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_worker_encode_children ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_encode
_TEXT	SEGMENT
tv317 = -316						; size = 4
tv228 = -316						; size = 4
tv158 = -316						; size = 4
tv140 = -316						; size = 4
tv74 = -316						; size = 4
_i$1 = -116						; size = 4
_child_id$2 = -104					; size = 4
_i$3 = -92						; size = 4
_height$4 = -80						; size = 4
_width$5 = -68						; size = 4
_offset_y$6 = -56					; size = 4
_offset_x$7 = -44					; size = 4
_sub_state$8 = -32					; size = 4
_i$9 = -20						; size = 4
_node_is_the_last_split_in_tree$10 = -8			; size = 4
_main_state$ = 8					; size = 4
_encoder_state_encode PROC				; COMDAT

; 923  : static void encoder_state_encode(encoder_state_t * const main_state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 924  :   //If we have children, encode at child level
; 925  :   if (main_state->children[0].encoder_control) {

	mov	eax, 336				; 00000150H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _main_state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx], 0
	je	$LN16@encoder_st

; 926  :     //If we have only one child, than it cannot be the last split in tree
; 927  :     int node_is_the_last_split_in_tree = (main_state->children[1].encoder_control != 0);

	mov	eax, 336				; 00000150H
	shl	eax, 0
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN27@encoder_st
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN28@encoder_st
$LN27@encoder_st:
	mov	DWORD PTR tv74[ebp], 0
$LN28@encoder_st:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR _node_is_the_last_split_in_tree$10[ebp], eax

; 928  : 
; 929  :     for (int i = 0; main_state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$9[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN3@encoder_st

; 930  :       encoder_state_t *sub_state = &(main_state->children[i]);

	imul	eax, DWORD PTR _i$9[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _sub_state$8[ebp], eax

; 931  : 
; 932  :       if (sub_state->tile != main_state->tile) {

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN18@encoder_st

; 933  :         const int offset_x = sub_state->tile->offset_x;

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _offset_x$7[ebp], edx

; 934  :         const int offset_y = sub_state->tile->offset_y;

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset_y$6[ebp], edx

; 935  :         const int width = MIN(sub_state->tile->frame->width_in_lcu * LCU_WIDTH, main_state->tile->frame->width - offset_x);

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 6
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _offset_x$7[ebp]
	cmp	eax, edx
	jge	SHORT $LN29@encoder_st
	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 6
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN30@encoder_st
$LN29@encoder_st:
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _offset_x$7[ebp]
	mov	DWORD PTR tv140[ebp], ecx
$LN30@encoder_st:
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR _width$5[ebp], edx

; 936  :         const int height = MIN(sub_state->tile->frame->height_in_lcu * LCU_WIDTH, main_state->tile->frame->height - offset_y);

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 6
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _offset_y$6[ebp]
	cmp	eax, edx
	jge	SHORT $LN31@encoder_st
	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 6
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN32@encoder_st
$LN31@encoder_st:
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _offset_y$6[ebp]
	mov	DWORD PTR tv158[ebp], ecx
$LN32@encoder_st:
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR _height$4[ebp], edx

; 937  : 
; 938  :         kvz_image_free(sub_state->tile->frame->source);

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 939  :         sub_state->tile->frame->source = NULL;

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 940  : 
; 941  :         kvz_image_free(sub_state->tile->frame->rec);

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 942  :         sub_state->tile->frame->rec = NULL;

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 943  : 
; 944  :         kvz_cu_array_free(&sub_state->tile->frame->cu_array);

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	push	edx
	call	_kvz_cu_array_free
	add	esp, 4

; 945  : 
; 946  :         sub_state->tile->frame->source = kvz_image_make_subimage(

	mov	eax, DWORD PTR _height$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset_y$6[ebp]
	push	edx
	mov	eax, DWORD PTR _offset_x$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_image_make_subimage
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 947  :             main_state->tile->frame->source,
; 948  :             offset_x,
; 949  :             offset_y,
; 950  :             width,
; 951  :             height
; 952  :         );
; 953  :         sub_state->tile->frame->rec = kvz_image_make_subimage(

	mov	eax, DWORD PTR _height$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset_y$6[ebp]
	push	edx
	mov	eax, DWORD PTR _offset_x$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_kvz_image_make_subimage
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 954  :             main_state->tile->frame->rec,
; 955  :             offset_x,
; 956  :             offset_y,
; 957  :             width,
; 958  :             height
; 959  :         );
; 960  :         sub_state->tile->frame->cu_array = kvz_cu_subarray(

	mov	eax, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 6
	push	eax
	mov	ecx, DWORD PTR _sub_state$8[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	shl	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _offset_y$6[ebp]
	push	edx
	mov	eax, DWORD PTR _offset_x$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_kvz_cu_subarray
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _sub_state$8[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
$LN18@encoder_st:

; 961  :             main_state->tile->frame->cu_array,
; 962  :             offset_x,
; 963  :             offset_y,
; 964  :             sub_state->tile->frame->width_in_lcu * LCU_WIDTH,
; 965  :             sub_state->tile->frame->height_in_lcu * LCU_WIDTH
; 966  :         );
; 967  :       }
; 968  : 
; 969  :       //To be the last split, we require that every child is a chain
; 970  :       node_is_the_last_split_in_tree =

	cmp	DWORD PTR _node_is_the_last_split_in_tree$10[ebp], 0
	je	SHORT $LN33@encoder_st
	imul	eax, DWORD PTR _i$9[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_encoder_state_tree_is_a_chain
	add	esp, 4
	test	eax, eax
	je	SHORT $LN33@encoder_st
	mov	DWORD PTR tv228[ebp], 1
	jmp	SHORT $LN34@encoder_st
$LN33@encoder_st:
	mov	DWORD PTR tv228[ebp], 0
$LN34@encoder_st:
	mov	edx, DWORD PTR tv228[ebp]
	mov	DWORD PTR _node_is_the_last_split_in_tree$10[ebp], edx

; 971  :         node_is_the_last_split_in_tree &&
; 972  :         encoder_state_tree_is_a_chain(&main_state->children[i]);
; 973  :     }

	jmp	$LN2@encoder_st
$LN3@encoder_st:

; 974  :     //If it's the latest split point
; 975  :     if (node_is_the_last_split_in_tree) {

	cmp	DWORD PTR _node_is_the_last_split_in_tree$10[ebp], 0
	je	$LN19@encoder_st

; 976  :       for (int i = 0; main_state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@encoder_st:
	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN6@encoder_st

; 977  :         //If we don't have wavefronts, parallelize encoding of children.
; 978  :         if (main_state->children[i].type != ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+4], 87		; 00000057H
	je	$LN21@encoder_st

; 979  :           kvz_threadqueue_free_job(&main_state->children[i].tqj_recon_done);

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+320]
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 980  :           main_state->children[i].tqj_recon_done =

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	push	OFFSET _encoder_state_worker_encode_children
	call	_kvz_threadqueue_job_create
	add	esp, 8
	imul	edx, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+edx+320], eax

; 981  :             kvz_threadqueue_job_create(encoder_state_worker_encode_children, &main_state->children[i]);
; 982  :           if (main_state->children[i].previous_encoder_state != &main_state->children[i] &&
; 983  :               main_state->children[i].previous_encoder_state->tqj_recon_done &&

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	ecx, DWORD PTR _i$3[ebp], 336
	mov	esi, DWORD PTR _main_state$[ebp]
	add	ecx, DWORD PTR [esi+8]
	cmp	DWORD PTR [edx+eax+16], ecx
	je	$LN23@encoder_st
	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+16]
	cmp	DWORD PTR [eax+320], 0
	je	SHORT $LN23@encoder_st
	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+20]
	movzx	ecx, BYTE PTR [eax+79]
	test	ecx, ecx
	jne	SHORT $LN23@encoder_st

; 984  :               !main_state->children[i].frame->is_irap)
; 985  :           {
; 986  : #if 0
; 987  :             // Disabled due to non-determinism.
; 988  :             if (main_state->encoder_control->cfg->mv_constraint == KVZ_MV_CONSTRAIN_FRAME_AND_TILE_MARGIN)
; 989  :             {
; 990  :               // When MV's don't cross tile boundaries, add dependancy only to the same tile.
; 991  :               kvz_threadqueue_job_dep_add(main_state->children[i].tqj_recon_done, main_state->children[i].previous_encoder_state->tqj_recon_done);
; 992  :             } else 
; 993  : #endif      
; 994  :             {
; 995  :               // Add dependancy to each child in the previous frame.
; 996  :               for (int child_id = 0; main_state->children[child_id].encoder_control; ++child_id) {

	mov	DWORD PTR _child_id$2[ebp], 0
	jmp	SHORT $LN10@encoder_st
$LN8@encoder_st:
	mov	eax, DWORD PTR _child_id$2[ebp]
	add	eax, 1
	mov	DWORD PTR _child_id$2[ebp], eax
$LN10@encoder_st:
	imul	eax, DWORD PTR _child_id$2[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN23@encoder_st

; 997  :                 kvz_threadqueue_job_dep_add(main_state->children[i].tqj_recon_done, main_state->children[child_id].previous_encoder_state->tqj_recon_done);

	imul	eax, DWORD PTR _child_id$2[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+16]
	mov	ecx, DWORD PTR [eax+320]
	push	ecx
	imul	edx, DWORD PTR _i$3[ebp], 336
	mov	eax, DWORD PTR _main_state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+320]
	push	edx
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8

; 998  :               }

	jmp	SHORT $LN8@encoder_st
$LN23@encoder_st:

; 999  :             }
; 1000 :           }
; 1001 :           kvz_threadqueue_submit(main_state->encoder_control->threadqueue, main_state->children[i].tqj_recon_done);

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+320]
	push	eax
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4516]
	push	eax
	call	_kvz_threadqueue_submit
	add	esp, 8

; 1002 :         } else {

	jmp	SHORT $LN22@encoder_st
$LN21@encoder_st:

; 1003 :           //Wavefront rows have parallelism at LCU level, so we should not launch multiple threads here!
; 1004 :           //FIXME: add an assert: we can only have wavefront children
; 1005 :           encoder_state_worker_encode_children(&(main_state->children[i]));

	imul	eax, DWORD PTR _i$3[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_encoder_state_worker_encode_children
	add	esp, 4
$LN22@encoder_st:

; 1006 :         }
; 1007 :       }

	jmp	$LN5@encoder_st
$LN6@encoder_st:

; 1008 :     } else {

	jmp	SHORT $LN20@encoder_st
$LN19@encoder_st:

; 1009 :       for (int i = 0; main_state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN13@encoder_st
$LN11@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@encoder_st:
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN20@encoder_st

; 1010 :         encoder_state_worker_encode_children(&(main_state->children[i]));

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _main_state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_encoder_state_worker_encode_children
	add	esp, 4

; 1011 :       }

	jmp	SHORT $LN11@encoder_st
$LN20@encoder_st:

; 1012 :     }
; 1013 :   } else {

	jmp	$LN1@encoder_st
$LN16@encoder_st:

; 1014 :     switch (main_state->type) {

	mov	eax, DWORD PTR _main_state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv317[ebp], ecx
	cmp	DWORD PTR tv317[ebp], 83		; 00000053H
	jl	SHORT $LN25@encoder_st
	cmp	DWORD PTR tv317[ebp], 84		; 00000054H
	jle	SHORT $LN24@encoder_st
	cmp	DWORD PTR tv317[ebp], 87		; 00000057H
	je	SHORT $LN24@encoder_st
	jmp	SHORT $LN25@encoder_st
$LN24@encoder_st:

; 1015 :       case ENCODER_STATE_TYPE_TILE:
; 1016 :       case ENCODER_STATE_TYPE_SLICE:
; 1017 :       case ENCODER_STATE_TYPE_WAVEFRONT_ROW:
; 1018 :         encoder_state_encode_leaf(main_state);

	mov	eax, DWORD PTR _main_state$[ebp]
	push	eax
	call	_encoder_state_encode_leaf
	add	esp, 4

; 1019 :         break;

	jmp	SHORT $LN1@encoder_st
$LN25@encoder_st:

; 1020 :       default:
; 1021 :         fprintf(stderr, "Unsupported leaf type %c!\n", main_state->type);

	mov	eax, DWORD PTR _main_state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BL@PDPDEBCD@Unsupported?5leaf?5type?5?$CFc?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1022 :         assert(0);

	xor	eax, eax
	jne	SHORT $LN1@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_encode@@9@9
	add	ecx, 99					; 00000063H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@encoder_st:

; 1023 :     }
; 1024 :   }
; 1025 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_encode_leaf
_TEXT	SEGMENT
tv143 = -356						; size = 4
tv131 = -356						; size = 4
tv141 = -352						; size = 4
tv129 = -352						; size = 4
tv87 = -352						; size = 4
_i$1 = -152						; size = 4
_i$2 = -140						; size = 4
_dep_lcu$3 = -128					; size = 4
_job$4 = -116						; size = 4
_lcu$5 = -104						; size = 4
_i$6 = -92						; size = 4
_ref_neg$7 = -80					; size = 4
_ref_state$8 = -68					; size = 4
_i$9 = -56						; size = 4
_use_parallel_encoding$ = -41				; size = 1
_wavefront$ = -29					; size = 1
_cfg$ = -20						; size = 4
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_encode_leaf PROC				; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 765  :   assert(state->is_leaf);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN37@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_encode_leaf@@9@9
	add	ecx, 1
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BO@GLEBALIJ@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAl?$AAe?$AAa?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN37@encoder_st:

; 766  :   assert(state->lcu_order_count > 0);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+44], 0
	ja	SHORT $LN38@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_encode_leaf@@9@9
	add	ecx, 2
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DG@ODPMOOO@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAl?$AAc?$AAu?$AA_?$AAo?$AAr?$AAd?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@encoder_st:

; 767  : 
; 768  :   const encoder_control_t *ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 769  :   const kvz_config *cfg = &ctrl->cfg;

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	DWORD PTR _cfg$[ebp], eax

; 770  : 
; 771  :   // Signaled slice QP may be different to frame QP with set-qp-in-cu enabled.
; 772  :   state->last_qp = ctrl->cfg.set_qp_in_cu ? 26 : state->frame->QP;

	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+2431]
	test	ecx, ecx
	je	SHORT $LN39@encoder_st
	mov	DWORD PTR tv87[ebp], 26			; 0000001aH
	jmp	SHORT $LN40@encoder_st
$LN39@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	mov	DWORD PTR tv87[ebp], ecx
$LN40@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	al, BYTE PTR tv87[ebp]
	mov	BYTE PTR [edx+314], al

; 773  : 
; 774  :   if (cfg->crypto_features) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2348], 0
	je	SHORT $LN18@encoder_st

; 775  :     state->crypto_hdl = kvz_crypto_create(cfg);

	mov	eax, DWORD PTR _cfg$[ebp]
	push	eax
	call	_kvz_crypto_create
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+280], eax

; 776  :     state->crypto_prev_pos = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+284], 0
$LN18@encoder_st:

; 777  :   }
; 778  : 
; 779  :   // Select whether to encode the frame/tile in current thread or to define
; 780  :   // wavefront jobs for other threads to handle.
; 781  :   bool wavefront = state->type == ENCODER_STATE_TYPE_WAVEFRONT_ROW;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 87			; 00000057H
	jne	SHORT $LN41@encoder_st
	mov	DWORD PTR tv129[ebp], 1
	jmp	SHORT $LN42@encoder_st
$LN41@encoder_st:
	mov	DWORD PTR tv129[ebp], 0
$LN42@encoder_st:
	cmp	DWORD PTR tv129[ebp], 0
	jne	SHORT $LN43@encoder_st
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN44@encoder_st
$LN43@encoder_st:
	mov	DWORD PTR tv131[ebp], 1
$LN44@encoder_st:
	mov	cl, BYTE PTR tv131[ebp]
	mov	BYTE PTR _wavefront$[ebp], cl

; 782  :   bool use_parallel_encoding = (wavefront && state->parent->children[1].encoder_control);

	movzx	eax, BYTE PTR _wavefront$[ebp]
	test	eax, eax
	je	SHORT $LN45@encoder_st
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, 336				; 00000150H
	shl	eax, 0
	mov	ecx, DWORD PTR [edx+8]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN45@encoder_st
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN46@encoder_st
$LN45@encoder_st:
	mov	DWORD PTR tv141[ebp], 0
$LN46@encoder_st:
	cmp	DWORD PTR tv141[ebp], 0
	jne	SHORT $LN47@encoder_st
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN48@encoder_st
$LN47@encoder_st:
	mov	DWORD PTR tv143[ebp], 1
$LN48@encoder_st:
	mov	dl, BYTE PTR tv143[ebp]
	mov	BYTE PTR _use_parallel_encoding$[ebp], dl

; 783  :   if (!use_parallel_encoding) {

	movzx	eax, BYTE PTR _use_parallel_encoding$[ebp]
	test	eax, eax
	jne	SHORT $LN19@encoder_st

; 784  :     // Encode every LCU in order and perform SAO reconstruction after every
; 785  :     // frame is encoded. Deblocking and SAO search is done during LCU encoding.
; 786  : 
; 787  :     for (int i = 0; i < state->lcu_order_count; ++i) {

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jae	SHORT $LN3@encoder_st

; 788  :       encoder_state_worker_encode_lcu(&state->lcu_order[i]);

	imul	eax, DWORD PTR _i$9[ebp], 68
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+40]
	push	eax
	call	_encoder_state_worker_encode_lcu
	add	esp, 4

; 789  :     }

	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 790  :   } else {

	jmp	$LN1@encoder_st
$LN19@encoder_st:

; 791  :     // Add each LCU in the wavefront row as it's own job to the queue.
; 792  : 
; 793  :     // Select which frame dependancies should be set to.
; 794  :     const encoder_state_t * ref_state = NULL;

	mov	DWORD PTR _ref_state$8[ebp], 0

; 795  : 
; 796  :     if (state->frame->slicetype == KVZ_SLICE_I) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	jne	SHORT $LN21@encoder_st

; 797  :       // I-frames have no references.
; 798  :       ref_state = NULL;

	mov	DWORD PTR _ref_state$8[ebp], 0

; 799  :     } else if (cfg->gop_lowdelay &&

	jmp	$LN22@encoder_st
$LN21@encoder_st:

; 800  :                cfg->gop_len > 0 &&

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	SHORT $LN23@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jle	SHORT $LN23@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _state$[ebp]
	je	SHORT $LN23@encoder_st

; 801  :                state->previous_encoder_state != state)
; 802  :     {
; 803  :       // For LP-gop, depend on the state of the first reference.
; 804  :       int ref_neg = cfg->gop[state->frame->gop_offset].ref_neg[0];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _cfg$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR [ecx+eax+30]
	mov	DWORD PTR _ref_neg$7[ebp], ecx

; 805  :       if (ref_neg > cfg->owf) {

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR _ref_neg$7[ebp]
	cmp	ecx, DWORD PTR [eax+156]
	jle	SHORT $LN25@encoder_st

; 806  :         // If frame is not within OWF range, it's already done.
; 807  :         ref_state = NULL;

	mov	DWORD PTR _ref_state$8[ebp], 0

; 808  :       } else {

	jmp	SHORT $LN26@encoder_st
$LN25@encoder_st:

; 809  :         ref_state = state->previous_encoder_state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ref_state$8[ebp], ecx
$LN5@encoder_st:

; 810  :         while (ref_neg > 1) {

	cmp	DWORD PTR _ref_neg$7[ebp], 1
	jle	SHORT $LN26@encoder_st

; 811  :           ref_neg -= 1;

	mov	eax, DWORD PTR _ref_neg$7[ebp]
	sub	eax, 1
	mov	DWORD PTR _ref_neg$7[ebp], eax

; 812  :           ref_state = ref_state->previous_encoder_state;

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ref_state$8[ebp], ecx

; 813  :         }

	jmp	SHORT $LN5@encoder_st
$LN26@encoder_st:

; 814  :       }
; 815  :     } else {

	jmp	SHORT $LN22@encoder_st
$LN23@encoder_st:

; 816  :       // Otherwise, depend on the previous frame.
; 817  :       ref_state = state->previous_encoder_state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ref_state$8[ebp], ecx
$LN22@encoder_st:

; 818  :     }
; 819  : 
; 820  :     for (int i = 0; i < state->lcu_order_count; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN9@encoder_st
$LN7@encoder_st:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN9@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jae	$LN1@encoder_st

; 821  :       const lcu_order_element_t * const lcu = &state->lcu_order[i];

	imul	eax, DWORD PTR _i$6[ebp], 68
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+40]
	mov	DWORD PTR _lcu$5[ebp], eax

; 822  : 
; 823  :       kvz_threadqueue_free_job(&state->tile->wf_jobs[lcu->id]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 824  :       state->tile->wf_jobs[lcu->id] = kvz_threadqueue_job_create(encoder_state_worker_encode_lcu, (void*)lcu);

	mov	eax, DWORD PTR _lcu$5[ebp]
	push	eax
	push	OFFSET _encoder_state_worker_encode_lcu
	call	_kvz_threadqueue_job_create
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _lcu$5[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+44]
	mov	DWORD PTR [edx+ecx*4], eax

; 825  :       threadqueue_job_t **job = &state->tile->wf_jobs[lcu->id];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _job$4[ebp], edx

; 826  : 
; 827  :       // If job object was returned, add dependancies and allow it to run.
; 828  :       if (job[0]) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _job$4[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	je	$LN27@encoder_st

; 829  :         // Add inter frame dependancies when ecoding more than one frame at
; 830  :         // once. The added dependancy is for the first LCU of each wavefront
; 831  :         // row to depend on the reconstruction status of the row below in the
; 832  :         // previous frame.
; 833  :         if (ref_state != NULL &&
; 834  :             state->previous_encoder_state->tqj_recon_done &&

	cmp	DWORD PTR _ref_state$8[ebp], 0
	je	$LN28@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+320], 0
	je	$LN28@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	$LN28@encoder_st

; 835  :             state->frame->slicetype != KVZ_SLICE_I)
; 836  :         {
; 837  :           // We need to wait until the CTUs whose pixels we refer to are
; 838  :           // done before we can start this CTU.
; 839  :           const lcu_order_element_t *dep_lcu = lcu;

	mov	eax, DWORD PTR _lcu$5[ebp]
	mov	DWORD PTR _dep_lcu$3[ebp], eax

; 840  :           for (int i = 0; dep_lcu->below && i < ctrl->max_inter_ref_lcu.down; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@encoder_st
$LN10@encoder_st:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN12@encoder_st:
	mov	eax, DWORD PTR _dep_lcu$3[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN11@encoder_st
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+4600]
	jge	SHORT $LN11@encoder_st

; 841  :             dep_lcu = dep_lcu->below;

	mov	eax, DWORD PTR _dep_lcu$3[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _dep_lcu$3[ebp], ecx

; 842  :           }

	jmp	SHORT $LN10@encoder_st
$LN11@encoder_st:

; 843  :           for (int i = 0; dep_lcu->right && i < ctrl->max_inter_ref_lcu.right; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN15@encoder_st
$LN13@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN15@encoder_st:
	mov	eax, DWORD PTR _dep_lcu$3[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN14@encoder_st
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+4596]
	jge	SHORT $LN14@encoder_st

; 844  :             dep_lcu = dep_lcu->right;

	mov	eax, DWORD PTR _dep_lcu$3[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _dep_lcu$3[ebp], ecx

; 845  :           }

	jmp	SHORT $LN13@encoder_st
$LN14@encoder_st:

; 846  :           kvz_threadqueue_job_dep_add(job[0], ref_state->tile->wf_jobs[dep_lcu->id]);

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _dep_lcu$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _job$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8

; 847  : 
; 848  :           //TODO: Preparation for the lock free implementation of the new rc
; 849  :           if (ref_state->frame->slicetype == KVZ_SLICE_I && ref_state->frame->num != 0 && state->encoder_control->cfg.owf > 1 && true) {

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	jne	SHORT $LN29@encoder_st
	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN29@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+156], 1
	jle	SHORT $LN29@encoder_st
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN29@encoder_st

; 850  :             kvz_threadqueue_job_dep_add(job[0], ref_state->previous_encoder_state->tile->wf_jobs[dep_lcu->id]);

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _dep_lcu$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _job$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN29@encoder_st:

; 851  :           }
; 852  : 
; 853  :           // Very spesific bug that happens when owf length is longer than the
; 854  :           // gop length. Takes care of that.
; 855  :           if(!state->encoder_control->cfg.gop_lowdelay &&
; 856  :              state->encoder_control->cfg.open_gop &&
; 857  :              state->encoder_control->cfg.gop_len != 0 &&
; 858  :              state->encoder_control->cfg.owf > state->encoder_control->cfg.gop_len &&
; 859  :              ref_state->frame->slicetype == KVZ_SLICE_I &&

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+277]
	test	edx, edx
	jne	$LN28@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2432]
	test	edx, edx
	je	$LN28@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+276]
	test	edx, edx
	je	$LN28@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, BYTE PTR [eax+276]
	cmp	DWORD PTR [ecx+156], edx
	jle	SHORT $LN28@encoder_st
	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	jne	SHORT $LN28@encoder_st
	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN28@encoder_st
$LN16@encoder_st:

; 860  :              ref_state->frame->num != 0){
; 861  : 
; 862  :             while (ref_state->frame->poc != state->frame->poc - state->encoder_control->cfg.gop_len){

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx]
	movsx	edx, BYTE PTR [edx+276]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, edx
	cmp	DWORD PTR [ecx+12], eax
	je	SHORT $LN17@encoder_st

; 863  :               ref_state = ref_state->previous_encoder_state;

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ref_state$8[ebp], ecx

; 864  :             }

	jmp	SHORT $LN16@encoder_st
$LN17@encoder_st:

; 865  :             kvz_threadqueue_job_dep_add(job[0], ref_state->tile->wf_jobs[dep_lcu->id]);

	mov	eax, DWORD PTR _ref_state$8[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _dep_lcu$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _job$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN28@encoder_st:

; 866  :           }
; 867  :         }
; 868  : 
; 869  :         // Add local WPP dependancy to the LCU on the left.
; 870  :         if (lcu->left) {

	mov	eax, DWORD PTR _lcu$5[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN31@encoder_st

; 871  :           kvz_threadqueue_job_dep_add(job[0], job[-1]);

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _job$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _job$4[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN31@encoder_st:

; 872  :         }
; 873  :         // Add local WPP dependancy to the LCU on the top right.
; 874  :         if (lcu->above) {

	mov	eax, DWORD PTR _lcu$5[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN32@encoder_st

; 875  :           if (lcu->above->right) {

	mov	eax, DWORD PTR _lcu$5[ebp]
	mov	ecx, DWORD PTR [eax+52]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN33@encoder_st

; 876  :             kvz_threadqueue_job_dep_add(job[0], job[-state->tile->frame->width_in_lcu + 1]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	neg	eax
	mov	ecx, DWORD PTR _job$4[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _job$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8

; 877  :           } else {

	jmp	SHORT $LN32@encoder_st
$LN33@encoder_st:

; 878  :             kvz_threadqueue_job_dep_add(job[0], job[-state->tile->frame->width_in_lcu]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	neg	eax
	mov	ecx, DWORD PTR _job$4[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _job$4[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN32@encoder_st:

; 879  :           }
; 880  :         }
; 881  : 
; 882  :         kvz_threadqueue_submit(state->encoder_control->threadqueue, state->tile->wf_jobs[lcu->id]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4516]
	push	edx
	call	_kvz_threadqueue_submit
	add	esp, 8

; 883  : 
; 884  :         // The wavefront row is done when the last LCU in the row is done.
; 885  :         if (i + 1 == state->lcu_order_count) {

	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	eax, DWORD PTR [ecx+44]
	jne	SHORT $LN27@encoder_st

; 886  :           assert(!state->tqj_recon_done);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+320], 0
	je	SHORT $LN49@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_encode_leaf@@9@9
	add	ecx, 122				; 0000007aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CO@JEMCMGIB@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAr?$AAe?$AAc@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN49@encoder_st:

; 887  :           state->tqj_recon_done =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu$5[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_kvz_threadqueue_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+320], eax
$LN27@encoder_st:

; 888  :             kvz_threadqueue_copy_ref(state->tile->wf_jobs[lcu->id]);
; 889  :         }
; 890  :       }
; 891  :     }

	jmp	$LN7@encoder_st
$LN1@encoder_st:

; 892  :   }
; 893  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_encode_leaf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_worker_encode_lcu
_TEXT	SEGMENT
tv326 = -14056						; size = 8
tv274 = -14052						; size = 4
tv266 = -14052						; size = 4
tv255 = -14052						; size = 4
tv245 = -14052						; size = 4
tv234 = -14052						; size = 4
tv377 = -14048						; size = 4
tv364 = -14048						; size = 4
tv317 = -14048						; size = 4
tv272 = -14048						; size = 4
tv264 = -14048						; size = 4
tv253 = -14048						; size = 4
tv243 = -14048						; size = 4
tv232 = -14048						; size = 4
tv222 = -14048						; size = 4
tv70 = -14048						; size = 4
_j$1 = -12504						; size = 4
_x$2 = -12492						; size = 4
_y$3 = -12480						; size = 4
_not_skip$ = -12465					; size = 1
_bits$ = -12456						; size = 4
_end_of_wpp_row$4 = -12441				; size = 1
_end_of_tile$5 = -12429					; size = 1
_is_last_tile$6 = -12417				; size = 1
_last_tile_id$7 = -12408				; size = 4
_end_of_slice_segment_flag$ = -12393			; size = 1
_existing_bits$ = -12384				; size = 8
_prev_qp$8 = -12368					; size = 4
_last_qp$9 = -12356					; size = 4
_coeff$ = -12344					; size = 12288
_frame$ = -48						; size = 4
_encoder$ = -36						; size = 4
_state$ = -24						; size = 4
_lcu$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_opaque$ = 8						; size = 4
_encoder_state_worker_encode_lcu PROC			; COMDAT

; 627  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -8					; fffffff8H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 14056				; 000036e8H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-14056]
	mov	ecx, 3514				; 00000dbaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 628  :   const lcu_order_element_t * const lcu = opaque;

	mov	eax, DWORD PTR _opaque$[ebx]
	mov	DWORD PTR _lcu$[ebp], eax

; 629  :   encoder_state_t *state = lcu->encoder_state;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _state$[ebp], ecx

; 630  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 631  :   videoframe_t* const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 632  : 
; 633  :   switch (encoder->cfg.rc_algorithm) {

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	cl, BYTE PTR [eax+2452]
	mov	BYTE PTR tv70[ebp], cl
	cmp	BYTE PTR tv70[ebp], 0
	jl	SHORT $LN15@encoder_st
	cmp	BYTE PTR tv70[ebp], 1
	jle	SHORT $LN13@encoder_st
	cmp	BYTE PTR tv70[ebp], 2
	je	SHORT $LN14@encoder_st
	jmp	SHORT $LN15@encoder_st
$LN13@encoder_st:

; 634  :     case KVZ_NO_RC:
; 635  :     case KVZ_LAMBDA:
; 636  :       kvz_set_lcu_lambda_and_qp(state, lcu->position);

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_set_lcu_lambda_and_qp
	add	esp, 12					; 0000000cH

; 637  :       break;

	jmp	SHORT $LN2@encoder_st
$LN14@encoder_st:

; 638  :     case KVZ_OBA:
; 639  :       kvz_set_ctu_qp_lambda(state, lcu->position);

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_set_ctu_qp_lambda
	add	esp, 12					; 0000000cH

; 640  :       break;

	jmp	SHORT $LN2@encoder_st
$LN15@encoder_st:

; 641  :     default:
; 642  :       assert(0);

	xor	eax, eax
	jne	SHORT $LN30@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_worker_encode_lcu@@9@9
	add	ecx, 15					; 0000000fH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@encoder_st:
$LN2@encoder_st:

; 643  :   }
; 644  : 
; 645  :   lcu_coeff_t coeff;
; 646  :   state->coeff = &coeff;

	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR _coeff$[ebp]
	mov	DWORD PTR [eax+316], ecx

; 647  : 
; 648  :   //This part doesn't write to bitstream, it's only search, deblock and sao
; 649  :   kvz_search_lcu(state, lcu->position_px.x, lcu->position_px.y, state->tile->hor_buf_search, state->tile->ver_buf_search);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_search_lcu
	add	esp, 20					; 00000014H

; 650  : 
; 651  :   encoder_state_recdata_to_bufs(state, lcu, state->tile->hor_buf_search, state->tile->ver_buf_search);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encoder_state_recdata_to_bufs
	add	esp, 16					; 00000010H

; 652  : 
; 653  :   if (encoder->max_qp_delta_depth >= 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4584]
	test	ecx, ecx
	jl	SHORT $LN16@encoder_st

; 654  :     int last_qp = state->last_qp;

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+314]
	mov	DWORD PTR _last_qp$9[ebp], ecx

; 655  :     int prev_qp = -1;

	mov	DWORD PTR _prev_qp$8[ebp], -1

; 656  :     set_cu_qps(state, lcu->position_px.x, lcu->position_px.y, 0, &last_qp, &prev_qp);

	lea	eax, DWORD PTR _prev_qp$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _last_qp$9[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_set_cu_qps
	add	esp, 24					; 00000018H
$LN16@encoder_st:

; 657  :   }
; 658  : 
; 659  :   if (encoder->cfg.deblock_enable) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN17@encoder_st

; 660  :     kvz_filter_deblock_lcu(state, lcu->position_px.x, lcu->position_px.y);

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_filter_deblock_lcu
	add	esp, 12					; 0000000cH
$LN17@encoder_st:

; 661  :   }
; 662  : 
; 663  :   if (encoder->cfg.sao_type) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN18@encoder_st

; 664  :     // Save the post-deblocking but pre-SAO pixels of the LCU to a buffer
; 665  :     // so that they can be used in SAO reconstruction later.
; 666  :     encoder_state_recdata_before_sao_to_bufs(state,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encoder_state_recdata_before_sao_to_bufs
	add	esp, 16					; 00000010H

; 667  :                                              lcu,
; 668  :                                              state->tile->hor_buf_before_sao,
; 669  :                                              state->tile->ver_buf_before_sao);
; 670  :     kvz_sao_search_lcu(state, lcu->position.x, lcu->position.y);

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_sao_search_lcu
	add	esp, 12					; 0000000cH

; 671  :     encoder_sao_reconstruct(state, lcu);

	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encoder_sao_reconstruct
	add	esp, 8
$LN18@encoder_st:

; 672  :   }
; 673  : 
; 674  :   //Now write data to bitstream (required to have a correct CABAC state)
; 675  :   const uint64_t existing_bits = kvz_bitstream_tell(&state->stream);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	mov	DWORD PTR _existing_bits$[ebp], eax
	mov	DWORD PTR _existing_bits$[ebp+4], edx

; 676  : 
; 677  :   //Encode SAO
; 678  :   if (encoder->cfg.sao_type) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN19@encoder_st

; 679  :     encode_sao(state, lcu->position.x, lcu->position.y, &frame->sao_luma[lcu->position.y * frame->width_in_lcu + lcu->position.x], &frame->sao_chroma[lcu->position.y * frame->width_in_lcu + lcu->position.x]);

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _lcu$[ebp]
	add	edx, DWORD PTR [eax+12]
	imul	ecx, edx, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+32]
	push	ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _lcu$[ebp]
	add	edx, DWORD PTR [eax+12]
	imul	ecx, edx, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+28]
	push	ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encode_sao
	add	esp, 20					; 00000014H
$LN19@encoder_st:

; 680  :   }
; 681  : 
; 682  :   //Encode coding tree
; 683  :   kvz_encode_coding_tree(state, lcu->position.x * LCU_WIDTH, lcu->position.y * LCU_WIDTH, 0);

	push	0
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shl	eax, 6
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_encode_coding_tree
	add	esp, 16					; 00000010H

; 684  : 
; 685  :   // Coeffs are not needed anymore.
; 686  :   state->coeff = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+316], 0

; 687  : 
; 688  :   bool end_of_slice_segment_flag;
; 689  :   if (state->encoder_control->cfg.slices & KVZ_SLICES_WPP) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2408]
	and	edx, 2
	je	SHORT $LN20@encoder_st

; 690  :     // Slice segments end after each WPP row.
; 691  :     end_of_slice_segment_flag = lcu->last_column;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN31@encoder_st
	mov	DWORD PTR tv222[ebp], 0
	jmp	SHORT $LN32@encoder_st
$LN31@encoder_st:
	mov	DWORD PTR tv222[ebp], 1
$LN32@encoder_st:
	mov	cl, BYTE PTR tv222[ebp]
	mov	BYTE PTR _end_of_slice_segment_flag$[ebp], cl
	jmp	$LN23@encoder_st
$LN20@encoder_st:

; 692  :   } else if (state->encoder_control->cfg.slices & KVZ_SLICES_TILES) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2408]
	and	edx, 1
	je	SHORT $LN22@encoder_st

; 693  :     // Slices end after each tile.
; 694  :     end_of_slice_segment_flag = lcu->last_column && lcu->last_row;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN33@encoder_st
	mov	ecx, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN33@encoder_st
	mov	DWORD PTR tv232[ebp], 1
	jmp	SHORT $LN34@encoder_st
$LN33@encoder_st:
	mov	DWORD PTR tv232[ebp], 0
$LN34@encoder_st:
	cmp	DWORD PTR tv232[ebp], 0
	jne	SHORT $LN35@encoder_st
	mov	DWORD PTR tv234[ebp], 0
	jmp	SHORT $LN36@encoder_st
$LN35@encoder_st:
	mov	DWORD PTR tv234[ebp], 1
$LN36@encoder_st:
	mov	dl, BYTE PTR tv234[ebp]
	mov	BYTE PTR _end_of_slice_segment_flag$[ebp], dl

; 695  :   } else {

	jmp	$LN23@encoder_st
$LN22@encoder_st:

; 696  :     // Slice ends after the last row of the last tile.
; 697  :     int last_tile_id = -1 + encoder->cfg.tiles_width_count * encoder->cfg.tiles_height_count;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+136]
	imul	edx, DWORD PTR [ecx+140]
	sub	edx, 1
	mov	DWORD PTR _last_tile_id$7[ebp], edx

; 698  :     bool is_last_tile = state->tile->id == last_tile_id;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _last_tile_id$7[ebp]
	jne	SHORT $LN37@encoder_st
	mov	DWORD PTR tv243[ebp], 1
	jmp	SHORT $LN38@encoder_st
$LN37@encoder_st:
	mov	DWORD PTR tv243[ebp], 0
$LN38@encoder_st:
	cmp	DWORD PTR tv243[ebp], 0
	jne	SHORT $LN39@encoder_st
	mov	DWORD PTR tv245[ebp], 0
	jmp	SHORT $LN40@encoder_st
$LN39@encoder_st:
	mov	DWORD PTR tv245[ebp], 1
$LN40@encoder_st:
	mov	al, BYTE PTR tv245[ebp]
	mov	BYTE PTR _is_last_tile$6[ebp], al

; 699  :     end_of_slice_segment_flag = is_last_tile && lcu->last_column && lcu->last_row;

	movzx	eax, BYTE PTR _is_last_tile$6[ebp]
	test	eax, eax
	je	SHORT $LN41@encoder_st
	mov	ecx, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN41@encoder_st
	mov	edx, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN41@encoder_st
	mov	DWORD PTR tv253[ebp], 1
	jmp	SHORT $LN42@encoder_st
$LN41@encoder_st:
	mov	DWORD PTR tv253[ebp], 0
$LN42@encoder_st:
	cmp	DWORD PTR tv253[ebp], 0
	jne	SHORT $LN43@encoder_st
	mov	DWORD PTR tv255[ebp], 0
	jmp	SHORT $LN44@encoder_st
$LN43@encoder_st:
	mov	DWORD PTR tv255[ebp], 1
$LN44@encoder_st:
	mov	al, BYTE PTR tv255[ebp]
	mov	BYTE PTR _end_of_slice_segment_flag$[ebp], al
$LN23@encoder_st:

; 700  :   }
; 701  :   kvz_cabac_encode_bin_trm(&state->cabac, end_of_slice_segment_flag);

	movzx	eax, BYTE PTR _end_of_slice_segment_flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_kvz_cabac_encode_bin_trm
	add	esp, 8

; 702  : 
; 703  :   {
; 704  :     const bool end_of_tile = lcu->last_column && lcu->last_row;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN45@encoder_st
	mov	ecx, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN45@encoder_st
	mov	DWORD PTR tv264[ebp], 1
	jmp	SHORT $LN46@encoder_st
$LN45@encoder_st:
	mov	DWORD PTR tv264[ebp], 0
$LN46@encoder_st:
	cmp	DWORD PTR tv264[ebp], 0
	jne	SHORT $LN47@encoder_st
	mov	DWORD PTR tv266[ebp], 0
	jmp	SHORT $LN48@encoder_st
$LN47@encoder_st:
	mov	DWORD PTR tv266[ebp], 1
$LN48@encoder_st:
	mov	dl, BYTE PTR tv266[ebp]
	mov	BYTE PTR _end_of_tile$5[ebp], dl

; 705  :     const bool end_of_wpp_row = encoder->cfg.wpp && lcu->last_column;

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN49@encoder_st
	mov	ecx, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN49@encoder_st
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN50@encoder_st
$LN49@encoder_st:
	mov	DWORD PTR tv272[ebp], 0
$LN50@encoder_st:
	cmp	DWORD PTR tv272[ebp], 0
	jne	SHORT $LN51@encoder_st
	mov	DWORD PTR tv274[ebp], 0
	jmp	SHORT $LN52@encoder_st
$LN51@encoder_st:
	mov	DWORD PTR tv274[ebp], 1
$LN52@encoder_st:
	mov	dl, BYTE PTR tv274[ebp]
	mov	BYTE PTR _end_of_wpp_row$4[ebp], dl

; 706  : 
; 707  : 
; 708  :     if (end_of_tile || end_of_wpp_row) {

	movzx	eax, BYTE PTR _end_of_tile$5[ebp]
	test	eax, eax
	jne	SHORT $LN25@encoder_st
	movzx	eax, BYTE PTR _end_of_wpp_row$4[ebp]
	test	eax, eax
	je	SHORT $LN24@encoder_st
$LN25@encoder_st:

; 709  :       if (!end_of_slice_segment_flag) {

	movzx	eax, BYTE PTR _end_of_slice_segment_flag$[ebp]
	test	eax, eax
	jne	SHORT $LN26@encoder_st

; 710  :         // end_of_sub_stream_one_bit
; 711  :         kvz_cabac_encode_bin_trm(&state->cabac, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_kvz_cabac_encode_bin_trm
	add	esp, 8
$LN26@encoder_st:

; 712  :       }
; 713  : 
; 714  :       // Finish the substream by writing out remaining state.
; 715  :       kvz_cabac_finish(&state->cabac);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_kvz_cabac_finish
	add	esp, 4

; 716  : 
; 717  :       // Write a rbsp_trailing_bits or a byte_alignment. The first one is used
; 718  :       // for ending a slice_segment_layer_rbsp and the second one for ending
; 719  :       // a substream. They are identical and align the byte stream.
; 720  :       kvz_bitstream_put(state->cabac.stream, 1, 1);

	push	1
	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 721  :       kvz_bitstream_align_zero(state->cabac.stream);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	call	_kvz_bitstream_align_zero
	add	esp, 4

; 722  : 
; 723  :       kvz_cabac_start(&state->cabac);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_kvz_cabac_start
	add	esp, 4

; 724  : 
; 725  :       kvz_crypto_delete(&state->crypto_hdl);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	call	_kvz_crypto_delete
	add	esp, 4
$LN24@encoder_st:

; 726  :     }
; 727  :   }
; 728  : 
; 729  :   pthread_mutex_lock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_lock
	add	esp, 4

; 730  :   const uint32_t bits = kvz_bitstream_tell(&state->stream) - existing_bits;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	sub	eax, DWORD PTR _existing_bits$[ebp]
	mov	DWORD PTR _bits$[ebp], eax

; 731  :   state->frame->cur_frame_bits_coded += bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _bits$[ebp]
	xor	eax, eax
	add	edx, DWORD PTR [ecx+104]
	adc	eax, DWORD PTR [ecx+108]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [ecx+104], edx
	mov	DWORD PTR [ecx+108], eax

; 732  :   // This variable is used differently by intra and inter frames and shouldn't
; 733  :   // be touched in intra frames here
; 734  :   state->frame->remaining_weight -= !state->frame->is_irap ?

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN53@encoder_st
	mov	DWORD PTR tv317[ebp], 1
	jmp	SHORT $LN54@encoder_st
$LN53@encoder_st:
	mov	DWORD PTR tv317[ebp], 0
$LN54@encoder_st:
	cmp	DWORD PTR tv317[ebp], 0
	je	SHORT $LN55@encoder_st
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR tv326[ebp], xmm0
	jmp	SHORT $LN56@encoder_st
$LN55@encoder_st:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv326[ebp], xmm0
$LN56@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	xmm0, QWORD PTR [eax+184]
	subsd	xmm0, QWORD PTR tv326[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsd	QWORD PTR [edx+184], xmm0

; 735  :     kvz_get_lcu_stats(state, lcu->position.x, lcu->position.y)->original_weight :
; 736  :     0;
; 737  :   pthread_mutex_unlock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_unlock
	add	esp, 4

; 738  :   kvz_get_lcu_stats(state, lcu->position.x, lcu->position.y)->bits = bits;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [eax], edx

; 739  : 
; 740  :   uint8_t not_skip = false;

	mov	BYTE PTR _not_skip$[ebp], 0

; 741  :   for(int y = 0; y < 64 && !not_skip; y+=8) {

	mov	DWORD PTR _y$3[ebp], 0
	jmp	SHORT $LN6@encoder_st
$LN4@encoder_st:
	mov	eax, DWORD PTR _y$3[ebp]
	add	eax, 8
	mov	DWORD PTR _y$3[ebp], eax
$LN6@encoder_st:
	cmp	DWORD PTR _y$3[ebp], 64			; 00000040H
	jge	$LN5@encoder_st
	movzx	eax, BYTE PTR _not_skip$[ebp]
	test	eax, eax
	jne	$LN5@encoder_st

; 742  :     for(int x = 0; x < 64 && !not_skip; x+=8) {

	mov	DWORD PTR _x$2[ebp], 0
	jmp	SHORT $LN9@encoder_st
$LN7@encoder_st:
	mov	eax, DWORD PTR _x$2[ebp]
	add	eax, 8
	mov	DWORD PTR _x$2[ebp], eax
$LN9@encoder_st:
	cmp	DWORD PTR _x$2[ebp], 64			; 00000040H
	jge	SHORT $LN8@encoder_st
	movzx	eax, BYTE PTR _not_skip$[ebp]
	test	eax, eax
	jne	SHORT $LN8@encoder_st

; 743  :       not_skip |= !kvz_cu_array_at_const(state->tile->frame->cu_array,

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _y$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax+1]
	shr	dl, 3
	and	dl, 1
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN57@encoder_st
	mov	DWORD PTR tv364[ebp], 1
	jmp	SHORT $LN58@encoder_st
$LN57@encoder_st:
	mov	DWORD PTR tv364[ebp], 0
$LN58@encoder_st:
	movzx	ecx, BYTE PTR _not_skip$[ebp]
	or	ecx, DWORD PTR tv364[ebp]
	mov	BYTE PTR _not_skip$[ebp], cl

; 744  :         lcu->position_px.x + x,
; 745  :         lcu->position_px.y + y)->skipped;
; 746  :     }

	jmp	$LN7@encoder_st
$LN8@encoder_st:

; 747  :   }

	jmp	$LN4@encoder_st
$LN5@encoder_st:

; 748  :   kvz_get_lcu_stats(state, lcu->position.x, lcu->position.y)->skipped = !not_skip;

	movzx	eax, BYTE PTR _not_skip$[ebp]
	test	eax, eax
	jne	SHORT $LN59@encoder_st
	mov	DWORD PTR tv377[ebp], 1
	jmp	SHORT $LN60@encoder_st
$LN59@encoder_st:
	mov	DWORD PTR tv377[ebp], 0
$LN60@encoder_st:
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR tv377[ebp]
	mov	BYTE PTR [eax+70], cl

; 749  : 
; 750  :   //Wavefronts need the context to be copied to the next row
; 751  :   if (state->type == ENCODER_STATE_TYPE_WAVEFRONT_ROW && lcu->index == 1) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 87			; 00000057H
	jne	$LN11@encoder_st
	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN11@encoder_st

; 752  :     int j;
; 753  :     //Find next encoder (next row)
; 754  :     for (j=0; state->parent->children[j].encoder_control; ++j) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN12@encoder_st
$LN10@encoder_st:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN12@encoder_st:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$1[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN11@encoder_st

; 755  :       if (state->parent->children[j].wfrow->lcu_offset_y == state->wfrow->lcu_offset_y + 1) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR _j$1[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [eax+edx+32]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax]
	add	edx, 1
	cmp	DWORD PTR [ecx], edx
	jne	SHORT $LN28@encoder_st

; 756  :         //And copy context
; 757  :         kvz_context_copy(&state->parent->children[j], state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	imul	eax, DWORD PTR _j$1[ebp], 336
	add	eax, DWORD PTR [edx+8]
	push	eax
	call	_kvz_context_copy
	add	esp, 8
$LN28@encoder_st:

; 758  :       }
; 759  :     }

	jmp	SHORT $LN10@encoder_st
$LN11@encoder_st:

; 760  :   }
; 761  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN65@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN65@encoder_st:
	DD	3
	DD	$LN64@encoder_st
$LN64@encoder_st:
	DD	-12344					; ffffcfc8H
	DD	12288					; 00003000H
	DD	$LN61@encoder_st
	DD	-12356					; ffffcfbcH
	DD	4
	DD	$LN62@encoder_st
	DD	-12368					; ffffcfb0H
	DD	4
	DD	$LN63@encoder_st
$LN63@encoder_st:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	112					; 00000070H
	DB	0
$LN62@encoder_st:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	112					; 00000070H
	DB	0
$LN61@encoder_st:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_encoder_state_worker_encode_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _set_cu_qps
_TEXT	SEGMENT
tv157 = -332						; size = 4
tv155 = -328						; size = 4
_x_scu$1 = -128						; size = 4
_y_scu$2 = -116						; size = 4
_qp$3 = -101						; size = 1
_tu$4 = -92						; size = 4
_x_scu$5 = -80						; size = 4
_y_scu$6 = -68						; size = 4
_tu_width$7 = -56					; size = 4
_cbf_found$8 = -41					; size = 1
_d$9 = -32						; size = 4
_cu_width$ = -20					; size = 4
_cu$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_last_qp$ = 24						; size = 4
_prev_qp$ = 28						; size = 4
_set_cu_qps PROC					; COMDAT

; 565  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 566  : 
; 567  :   // Stop recursion if the CU is completely outside the frame.
; 568  :   if (x >= state->tile->frame->width || y >= state->tile->frame->height) return;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN15@set_cu_qps
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jl	SHORT $LN14@set_cu_qps
$LN15@set_cu_qps:
	jmp	$LN1@set_cu_qps
$LN14@set_cu_qps:

; 569  : 
; 570  :   cu_info_t *cu = kvz_cu_array_at(state->tile->frame->cu_array, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cu$[ebp], eax

; 571  :   const int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 572  : 
; 573  :   if (depth <= state->encoder_control->max_qp_delta_depth) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+4584]
	cmp	DWORD PTR _depth$[ebp], edx
	jg	SHORT $LN16@set_cu_qps

; 574  :     *prev_qp = -1;

	mov	eax, DWORD PTR _prev_qp$[ebp]
	mov	DWORD PTR [eax], -1
$LN16@set_cu_qps:

; 575  :   }
; 576  : 
; 577  :   if (cu->depth > depth) {

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	cmp	edx, DWORD PTR _depth$[ebp]
	jle	$LN17@set_cu_qps

; 578  :     // Recursively process sub-CUs.
; 579  :     const int d = cu_width >> 1;

	mov	eax, DWORD PTR _cu_width$[ebp]
	sar	eax, 1
	mov	DWORD PTR _d$9[ebp], eax

; 580  :     set_cu_qps(state, x,     y,     depth + 1, last_qp, prev_qp);

	mov	eax, DWORD PTR _prev_qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_set_cu_qps
	add	esp, 24					; 00000018H

; 581  :     set_cu_qps(state, x + d, y,     depth + 1, last_qp, prev_qp);

	mov	eax, DWORD PTR _prev_qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _d$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_set_cu_qps
	add	esp, 24					; 00000018H

; 582  :     set_cu_qps(state, x,     y + d, depth + 1, last_qp, prev_qp);

	mov	eax, DWORD PTR _prev_qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _d$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_set_cu_qps
	add	esp, 24					; 00000018H

; 583  :     set_cu_qps(state, x + d, y + d, depth + 1, last_qp, prev_qp);

	mov	eax, DWORD PTR _prev_qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _last_qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _d$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _d$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_set_cu_qps
	add	esp, 24					; 00000018H

; 584  : 
; 585  :   } else {

	jmp	$LN1@set_cu_qps
$LN17@set_cu_qps:

; 586  :     bool cbf_found = *prev_qp >= 0;

	mov	eax, DWORD PTR _prev_qp$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN27@set_cu_qps
	mov	DWORD PTR tv155[ebp], 1
	jmp	SHORT $LN28@set_cu_qps
$LN27@set_cu_qps:
	mov	DWORD PTR tv155[ebp], 0
$LN28@set_cu_qps:
	cmp	DWORD PTR tv155[ebp], 0
	jne	SHORT $LN29@set_cu_qps
	mov	DWORD PTR tv157[ebp], 0
	jmp	SHORT $LN30@set_cu_qps
$LN29@set_cu_qps:
	mov	DWORD PTR tv157[ebp], 1
$LN30@set_cu_qps:
	mov	cl, BYTE PTR tv157[ebp]
	mov	BYTE PTR _cbf_found$8[ebp], cl

; 587  : 
; 588  :     if (cu->tr_depth > depth) {

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	cmp	edx, DWORD PTR _depth$[ebp]
	jle	$LN19@set_cu_qps

; 589  :       // The CU is split into smaller transform units. Check whether coded
; 590  :       // block flag is set for any of the TUs.
; 591  :       const int tu_width = LCU_WIDTH >> cu->tr_depth;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	ecx, cl
	mov	edx, 64					; 00000040H
	sar	edx, cl
	mov	DWORD PTR _tu_width$7[ebp], edx

; 592  :       for (int y_scu = y; !cbf_found && y_scu < y + cu_width; y_scu += tu_width) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y_scu$6[ebp], eax
	jmp	SHORT $LN4@set_cu_qps
$LN2@set_cu_qps:
	mov	eax, DWORD PTR _y_scu$6[ebp]
	add	eax, DWORD PTR _tu_width$7[ebp]
	mov	DWORD PTR _y_scu$6[ebp], eax
$LN4@set_cu_qps:
	movzx	eax, BYTE PTR _cbf_found$8[ebp]
	test	eax, eax
	jne	SHORT $LN3@set_cu_qps
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	cmp	DWORD PTR _y_scu$6[ebp], eax
	jge	SHORT $LN3@set_cu_qps

; 593  :         for (int x_scu = x; !cbf_found && x_scu < x + cu_width; x_scu += tu_width) {

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x_scu$5[ebp], eax
	jmp	SHORT $LN7@set_cu_qps
$LN5@set_cu_qps:
	mov	eax, DWORD PTR _x_scu$5[ebp]
	add	eax, DWORD PTR _tu_width$7[ebp]
	mov	DWORD PTR _x_scu$5[ebp], eax
$LN7@set_cu_qps:
	movzx	eax, BYTE PTR _cbf_found$8[ebp]
	test	eax, eax
	jne	SHORT $LN6@set_cu_qps
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	cmp	DWORD PTR _x_scu$5[ebp], eax
	jge	SHORT $LN6@set_cu_qps

; 594  :           cu_info_t *tu = kvz_cu_array_at(state->tile->frame->cu_array, x_scu, y_scu);

	mov	eax, DWORD PTR _y_scu$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_scu$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tu$4[ebp], eax

; 595  :           if (cbf_is_set_any(tu->cbf, cu->depth)) {

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _tu$4[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	call	_cbf_is_set_any
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@set_cu_qps

; 596  :             cbf_found = true;

	mov	BYTE PTR _cbf_found$8[ebp], 1
$LN21@set_cu_qps:

; 597  :           }
; 598  :         }

	jmp	SHORT $LN5@set_cu_qps
$LN6@set_cu_qps:

; 599  :       }

	jmp	$LN2@set_cu_qps
$LN3@set_cu_qps:

; 600  :     } else if (cbf_is_set_any(cu->cbf, cu->depth)) {

	jmp	SHORT $LN20@set_cu_qps
$LN19@set_cu_qps:
	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _cu$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	call	_cbf_is_set_any
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@set_cu_qps

; 601  :       cbf_found = true;

	mov	BYTE PTR _cbf_found$8[ebp], 1
$LN20@set_cu_qps:

; 602  :     }
; 603  : 
; 604  :     int8_t qp;
; 605  :     if (cbf_found) {

	movzx	eax, BYTE PTR _cbf_found$8[ebp]
	test	eax, eax
	je	SHORT $LN23@set_cu_qps

; 606  :       *prev_qp = qp = cu->qp;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+6]
	mov	BYTE PTR _qp$3[ebp], cl
	movsx	edx, BYTE PTR _qp$3[ebp]
	mov	eax, DWORD PTR _prev_qp$[ebp]
	mov	DWORD PTR [eax], edx

; 607  :     } else {

	jmp	SHORT $LN24@set_cu_qps
$LN23@set_cu_qps:

; 608  :       qp = kvz_get_cu_ref_qp(state, x, y, *last_qp);

	mov	eax, DWORD PTR _last_qp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_get_cu_ref_qp
	add	esp, 16					; 00000010H
	mov	BYTE PTR _qp$3[ebp], al
$LN24@set_cu_qps:

; 609  :     }
; 610  : 
; 611  :     // Set the correct QP for all state->tile->frame->cu_array elements in
; 612  :     // the area covered by the CU.
; 613  :     for (int y_scu = y; y_scu < y + cu_width; y_scu += SCU_WIDTH) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y_scu$2[ebp], eax
	jmp	SHORT $LN10@set_cu_qps
$LN8@set_cu_qps:
	mov	eax, DWORD PTR _y_scu$2[ebp]
	add	eax, 4
	mov	DWORD PTR _y_scu$2[ebp], eax
$LN10@set_cu_qps:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	cmp	DWORD PTR _y_scu$2[ebp], eax
	jge	SHORT $LN9@set_cu_qps

; 614  :       for (int x_scu = x; x_scu < x + cu_width; x_scu += SCU_WIDTH) {

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x_scu$1[ebp], eax
	jmp	SHORT $LN13@set_cu_qps
$LN11@set_cu_qps:
	mov	eax, DWORD PTR _x_scu$1[ebp]
	add	eax, 4
	mov	DWORD PTR _x_scu$1[ebp], eax
$LN13@set_cu_qps:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	cmp	DWORD PTR _x_scu$1[ebp], eax
	jge	SHORT $LN12@set_cu_qps

; 615  :         kvz_cu_array_at(state->tile->frame->cu_array, x_scu, y_scu)->qp = qp;

	mov	eax, DWORD PTR _y_scu$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_scu$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_kvz_cu_array_at
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR _qp$3[ebp]
	mov	BYTE PTR [eax+6], cl

; 616  :       }

	jmp	SHORT $LN11@set_cu_qps
$LN12@set_cu_qps:

; 617  :     }

	jmp	SHORT $LN8@set_cu_qps
$LN9@set_cu_qps:

; 618  : 
; 619  :     if (is_last_cu_in_qg(state, x, y, depth)) {

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_is_last_cu_in_qg
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@set_cu_qps

; 620  :       *last_qp = cu->qp;

	mov	eax, DWORD PTR _cu$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	mov	edx, DWORD PTR _last_qp$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@set_cu_qps:

; 621  :     }
; 622  :   }
; 623  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_set_cu_qps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encode_sao
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x_lcu$ = 12						; size = 4
_y_lcu$ = 16						; size = 2
_sao_luma$ = 20						; size = 4
_sao_chroma$ = 24					; size = 4
_encode_sao PROC					; COMDAT

; 530  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 531  :   // TODO: transmit merge flags outside sao_info
; 532  :   encode_sao_merge_flags(state, sao_luma, x_lcu, y_lcu);

	movzx	eax, WORD PTR _y_lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_sao_merge_flags
	add	esp, 16					; 00000010H

; 533  : 
; 534  :   // If SAO is merged, nothing else needs to be coded.
; 535  :   if (!sao_luma->merge_left_flag && !sao_luma->merge_up_flag) {

	mov	eax, DWORD PTR _sao_luma$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN1@encode_sao
	mov	eax, DWORD PTR _sao_luma$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN1@encode_sao

; 536  :     encode_sao_color(state, sao_luma, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _sao_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encode_sao_color
	add	esp, 12					; 0000000cH

; 537  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN1@encode_sao

; 538  :       encode_sao_color(state, sao_chroma, COLOR_U);

	push	1
	mov	eax, DWORD PTR _sao_chroma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encode_sao_color
	add	esp, 12					; 0000000cH

; 539  :       encode_sao_color(state, sao_chroma, COLOR_V);

	push	2
	mov	eax, DWORD PTR _sao_chroma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encode_sao_color
	add	esp, 12					; 0000000cH
$LN1@encode_sao:

; 540  :     }
; 541  :   }
; 542  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_sao ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encode_sao_merge_flags
_TEXT	SEGMENT
_cabac$ = -8						; size = 4
_state$ = 8						; size = 4
_sao$ = 12						; size = 4
_x_ctb$ = 16						; size = 4
_y_ctb$ = 20						; size = 4
_encode_sao_merge_flags PROC				; COMDAT

; 510  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 511  :   cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 512  :   // SAO merge flags are not present for the first row and column.
; 513  :   if (x_ctb > 0) {

	cmp	DWORD PTR _x_ctb$[ebp], 0
	jbe	SHORT $LN2@encode_sao

; 514  :     cabac->cur_ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 515  :     CABAC_BIN(cabac, sao->merge_left_flag, "sao_merge_left_flag");

	mov	eax, DWORD PTR _sao$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN2@encode_sao:

; 516  :   }
; 517  :   if (y_ctb > 0 && !sao->merge_left_flag) {

	cmp	DWORD PTR _y_ctb$[ebp], 0
	jbe	SHORT $LN1@encode_sao
	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN1@encode_sao

; 518  :     cabac->cur_ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 519  :     CABAC_BIN(cabac, sao->merge_up_flag, "sao_merge_up_flag");

	mov	eax, DWORD PTR _sao$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN1@encode_sao:

; 520  :   }
; 521  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_sao_merge_flags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encode_sao_color
_TEXT	SEGMENT
tv152 = -232						; size = 4
tv146 = -232						; size = 4
tv76 = -232						; size = 4
tv66 = -232						; size = 4
_offset_index$ = -32					; size = 4
_i$ = -20						; size = 4
_cabac$ = -8						; size = 4
_state$ = 8						; size = 4
_sao$ = 12						; size = 4
_color_i$ = 16						; size = 4
_encode_sao_color PROC					; COMDAT

; 459  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 460  :   cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 461  :   sao_eo_cat i;
; 462  :   int offset_index = (color_i == COLOR_V) ? 5 : 0;

	cmp	DWORD PTR _color_i$[ebp], 2
	jne	SHORT $LN20@encode_sao
	mov	DWORD PTR tv66[ebp], 5
	jmp	SHORT $LN21@encode_sao
$LN20@encode_sao:
	mov	DWORD PTR tv66[ebp], 0
$LN21@encode_sao:
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR _offset_index$[ebp], eax

; 463  : 
; 464  :   // Skip colors with no SAO.
; 465  :   //FIXME: for now, we always have SAO for all channels
; 466  :   if (color_i == COLOR_Y && 0) return;

	cmp	DWORD PTR _color_i$[ebp], 0
	jne	SHORT $LN8@encode_sao
	xor	eax, eax
	je	SHORT $LN8@encode_sao
	jmp	$LN1@encode_sao
$LN8@encode_sao:

; 467  :   if (color_i != COLOR_Y && 0) return;

	cmp	DWORD PTR _color_i$[ebp], 0
	je	SHORT $LN9@encode_sao
	xor	eax, eax
	je	SHORT $LN9@encode_sao
	jmp	$LN1@encode_sao
$LN9@encode_sao:

; 468  : 
; 469  :   /// sao_type_idx_luma:   TR, cMax = 2, cRiceParam = 0, bins = {0, bypass}
; 470  :   /// sao_type_idx_chroma: TR, cMax = 2, cRiceParam = 0, bins = {0, bypass}
; 471  :   // Encode sao_type_idx for Y and U+V.
; 472  :   if (color_i != COLOR_V) {

	cmp	DWORD PTR _color_i$[ebp], 2
	je	SHORT $LN10@encode_sao

; 473  :     cabac->cur_ctx = &(cabac->ctx.sao_type_idx_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 33					; 00000021H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 474  :     CABAC_BIN(cabac, sao->type != SAO_TYPE_NONE, "sao_type_idx");

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN22@encode_sao
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN23@encode_sao
$LN22@encode_sao:
	mov	DWORD PTR tv76[ebp], 0
$LN23@encode_sao:
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 475  :     if (sao->type == SAO_TYPE_BAND) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN11@encode_sao

; 476  :       CABAC_BIN_EP(cabac, 0, "sao_type_idx_ep");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
	jmp	SHORT $LN10@encode_sao
$LN11@encode_sao:

; 477  :     } else if (sao->type == SAO_TYPE_EDGE) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN10@encode_sao

; 478  :       CABAC_BIN_EP(cabac, 1, "sao_type_idx_ep");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN10@encode_sao:

; 479  :     }
; 480  :   }
; 481  : 
; 482  :   if (sao->type == SAO_TYPE_NONE) return;

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN14@encode_sao
	jmp	$LN1@encode_sao
$LN14@encode_sao:

; 483  : 
; 484  :   /// sao_offset_abs[][][][]: TR, cMax = (1 << (Min(bitDepth, 10) - 5)) - 1,
; 485  :   ///                         cRiceParam = 0, bins = {bypass x N}
; 486  :   for (i = SAO_EO_CAT1; i <= SAO_EO_CAT4; ++i) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@encode_sao
$LN2@encode_sao:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@encode_sao:
	cmp	DWORD PTR _i$[ebp], 4
	jg	SHORT $LN3@encode_sao

; 487  :     kvz_cabac_write_unary_max_symbol_ep(cabac, abs(sao->offsets[i + offset_index]), SAO_ABS_OFFSET_MAX);

	push	7
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset_index$[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+28]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_write_unary_max_symbol_ep
	add	esp, 12					; 0000000cH

; 488  :   }

	jmp	SHORT $LN2@encode_sao
$LN3@encode_sao:

; 489  : 
; 490  :   /// sao_offset_sign[][][][]: FL, cMax = 1, bins = {bypass}
; 491  :   /// sao_band_position[][][]: FL, cMax = 31, bins = {bypass x N}
; 492  :   /// sao_eo_class_luma:       FL, cMax = 3, bins = {bypass x 3}
; 493  :   /// sao_eo_class_chroma:     FL, cMax = 3, bins = {bypass x 3}
; 494  :   if (sao->type == SAO_TYPE_BAND) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN15@encode_sao

; 495  :     for (i = SAO_EO_CAT1; i <= SAO_EO_CAT4; ++i) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@encode_sao
$LN5@encode_sao:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@encode_sao:
	cmp	DWORD PTR _i$[ebp], 4
	jg	SHORT $LN6@encode_sao

; 496  :       // Positive sign is coded as 0.
; 497  :       if (sao->offsets[i + offset_index] != 0) {

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset_index$[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [ecx+eax*4+28], 0
	je	SHORT $LN17@encode_sao

; 498  :         CABAC_BIN_EP(cabac, sao->offsets[i + offset_index] < 0 ? 1 : 0, "sao_offset_sign");

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _offset_index$[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [ecx+eax*4+28], 0
	jge	SHORT $LN24@encode_sao
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN25@encode_sao
$LN24@encode_sao:
	mov	DWORD PTR tv146[ebp], 0
$LN25@encode_sao:
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN17@encode_sao:

; 499  :       }
; 500  :     }

	jmp	SHORT $LN5@encode_sao
$LN6@encode_sao:

; 501  :     // TODO: sao_band_position
; 502  :     // FL cMax=31 (5 bits)
; 503  :     CABAC_BINS_EP(cabac, sao->band_position[color_i == COLOR_V ? 1:0], 5, "sao_band_position");

	cmp	DWORD PTR _color_i$[ebp], 2
	jne	SHORT $LN26@encode_sao
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN27@encode_sao
$LN26@encode_sao:
	mov	DWORD PTR tv152[ebp], 0
$LN27@encode_sao:
	push	5
	mov	eax, DWORD PTR tv152[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@encode_sao
$LN15@encode_sao:

; 504  :   } else if (color_i != COLOR_V) {

	cmp	DWORD PTR _color_i$[ebp], 2
	je	SHORT $LN1@encode_sao

; 505  :     CABAC_BINS_EP(cabac, sao->eo_class, 2, "sao_eo_class");

	push	2
	mov	eax, DWORD PTR _sao$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN1@encode_sao:

; 506  :   }
; 507  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_sao_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_sao_reconstruct
_TEXT	SEGMENT
tv131 = -10528						; size = 4
tv128 = -10528						; size = 4
tv93 = -10528						; size = 4
tv90 = -10528						; size = 4
tv86 = -10528						; size = 4
tv82 = -10528						; size = 4
tv78 = -10528						; size = 4
tv74 = -10528						; size = 4
_y_c$1 = -8984						; size = 4
_x_c$2 = -8972						; size = 4
_sao_chroma$3 = -8960					; size = 4
_sao_luma$4 = -8948					; size = 4
_lcu_index$5 = -8936					; size = 4
_lcu_y$6 = -8924					; size = 4
_lcu_x$7 = -8912					; size = 4
_height$8 = -8900					; size = 4
_width$9 = -8888					; size = 4
_y$10 = -8876						; size = 4
_x$11 = -8864						; size = 4
_x_offset_index$12 = -8852				; size = 4
_y_offset_index$13 = -8840				; size = 4
_to_index_c$14 = -8828					; size = 4
_from_index_c$15 = -8816				; size = 4
_to_index$ = -8804					; size = 4
_from_index$ = -8792					; size = 4
_from_index_c$16 = -8780				; size = 4
_from_index$17 = -8768					; size = 4
_from_index_c$18 = -8756				; size = 4
_from_index$19 = -8744					; size = 4
_height$ = -8732					; size = 4
_width$ = -8720						; size = 4
_border_index_c$ = -8708				; size = 4
_border_index$ = -8696					; size = 4
_border_below$ = -8684					; size = 4
_border_above$ = -8672					; size = 4
_border_right$ = -8660					; size = 4
_border_left$ = -8648					; size = 4
_y_offsets$ = -8636					; size = 12
_x_offsets$ = -8616					; size = 12
_sao_buf_v$ = -8596					; size = 4
_sao_buf_u$ = -8584					; size = 4
_sao_buf_y$ = -8572					; size = 4
_sao_buf_v_array$ = -8560				; size = 1446
_sao_buf_u_array$ = -7104				; size = 1446
_sao_buf_y_array$ = -5648				; size = 5627
_frame$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_encoder_sao_reconstruct PROC				; COMDAT

; 261  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 10528				; 00002920H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-10528]
	mov	ecx, 2632				; 00000a48H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 262  :   videoframe_t *const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 263  : 
; 264  : 
; 265  :   // Temporary buffers for SAO input pixels. The buffers cover the pixels
; 266  :   // inside the LCU (LCU_WIDTH x LCU_WIDTH), SAO_DELAY_PX wide bands to the
; 267  :   // left and above the LCU, and one pixel border on the left and top
; 268  :   // sides. We add two extra pixels to the buffers because the AVX2 SAO
; 269  :   // reconstruction reads up to two extra bytes when using edge SAO in the
; 270  :   // horizontal direction.
; 271  : #define SAO_BUF_WIDTH   (1 + SAO_DELAY_PX   + LCU_WIDTH)
; 272  : #define SAO_BUF_WIDTH_C (1 + SAO_DELAY_PX/2 + LCU_WIDTH_C)
; 273  :   kvz_pixel sao_buf_y_array[SAO_BUF_WIDTH   * SAO_BUF_WIDTH   + 2];
; 274  :   kvz_pixel sao_buf_u_array[SAO_BUF_WIDTH_C * SAO_BUF_WIDTH_C + 2];
; 275  :   kvz_pixel sao_buf_v_array[SAO_BUF_WIDTH_C * SAO_BUF_WIDTH_C + 2];
; 276  : 
; 277  :   // Pointers to the top-left pixel of the LCU in the buffers.
; 278  :   kvz_pixel *const sao_buf_y = &sao_buf_y_array[(SAO_DELAY_PX + 1) * (SAO_BUF_WIDTH + 1)];

	mov	eax, 1
	imul	ecx, eax, 836
	lea	edx, DWORD PTR _sao_buf_y_array$[ebp+ecx]
	mov	DWORD PTR _sao_buf_y$[ebp], edx

; 279  :   kvz_pixel *const sao_buf_u = &sao_buf_u_array[(SAO_DELAY_PX/2 + 1) * (SAO_BUF_WIDTH_C + 1)];

	mov	eax, 1
	imul	ecx, eax, 234
	lea	edx, DWORD PTR _sao_buf_u_array$[ebp+ecx]
	mov	DWORD PTR _sao_buf_u$[ebp], edx

; 280  :   kvz_pixel *const sao_buf_v = &sao_buf_v_array[(SAO_DELAY_PX/2 + 1) * (SAO_BUF_WIDTH_C + 1)];

	mov	eax, 1
	imul	ecx, eax, 234
	lea	edx, DWORD PTR _sao_buf_v_array$[ebp+ecx]
	mov	DWORD PTR _sao_buf_v$[ebp], edx

; 281  : 
; 282  :   const int x_offsets[3] = {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN17@encoder_sa
	mov	DWORD PTR tv74[ebp], -10		; fffffff6H
	jmp	SHORT $LN18@encoder_sa
$LN17@encoder_sa:
	mov	DWORD PTR tv74[ebp], 0
$LN18@encoder_sa:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _x_offsets$[ebp], ecx
	mov	DWORD PTR _x_offsets$[ebp+4], 0
	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN19@encoder_sa
	mov	DWORD PTR tv78[ebp], 10			; 0000000aH
	jmp	SHORT $LN20@encoder_sa
$LN19@encoder_sa:
	mov	DWORD PTR tv78[ebp], 0
$LN20@encoder_sa:
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	sub	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _x_offsets$[ebp+8], edx

; 283  :     // If there is an lcu to the left, we need to filter its rightmost
; 284  :     // pixels.
; 285  :     lcu->left ? -SAO_DELAY_PX : 0,
; 286  :     0,
; 287  :     // If there is an lcu to the right, the rightmost pixels of this LCU
; 288  :     // are filtered when filtering that LCU. Otherwise we filter them now.
; 289  :     lcu->size.x - (lcu->right ? SAO_DELAY_PX : 0),
; 290  :   };
; 291  : 
; 292  :   const int y_offsets[3] = {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN21@encoder_sa
	mov	DWORD PTR tv82[ebp], -10		; fffffff6H
	jmp	SHORT $LN22@encoder_sa
$LN21@encoder_sa:
	mov	DWORD PTR tv82[ebp], 0
$LN22@encoder_sa:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _y_offsets$[ebp], ecx
	mov	DWORD PTR _y_offsets$[ebp+4], 0
	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN23@encoder_sa
	mov	DWORD PTR tv86[ebp], 10			; 0000000aH
	jmp	SHORT $LN24@encoder_sa
$LN23@encoder_sa:
	mov	DWORD PTR tv86[ebp], 0
$LN24@encoder_sa:
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _y_offsets$[ebp+8], edx

; 293  :     // If there is an lcu above, we need to filter its bottommost pixels.
; 294  :     lcu->above ? -SAO_DELAY_PX : 0,
; 295  :     0,
; 296  :     // If there is an lcu below, the bottommost pixels of this LCU are
; 297  :     // filtered when filtering that LCU. Otherwise we filter them now.
; 298  :     lcu->size.y - (lcu->below ? SAO_DELAY_PX : 0),
; 299  :   };
; 300  : 
; 301  :   // Number of pixels around the block that need to be copied to the
; 302  :   // buffers.
; 303  :   const int border_left  = lcu->left  ? 1 : 0;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN25@encoder_sa
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN26@encoder_sa
$LN25@encoder_sa:
	mov	DWORD PTR tv90[ebp], 0
$LN26@encoder_sa:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _border_left$[ebp], ecx

; 304  :   const int border_right = lcu->right ? 1 : 0;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN27@encoder_sa
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN28@encoder_sa
$LN27@encoder_sa:
	mov	DWORD PTR tv93[ebp], 0
$LN28@encoder_sa:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _border_right$[ebp], ecx

; 305  :   const int border_above = lcu->above ? 1 : 0;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN29@encoder_sa
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN30@encoder_sa
$LN29@encoder_sa:
	mov	DWORD PTR tv128[ebp], 0
$LN30@encoder_sa:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _border_above$[ebp], ecx

; 306  :   const int border_below = lcu->below ? 1 : 0;

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN31@encoder_sa
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN32@encoder_sa
$LN31@encoder_sa:
	mov	DWORD PTR tv131[ebp], 0
$LN32@encoder_sa:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _border_below$[ebp], ecx

; 307  : 
; 308  :   // Index of the pixel at the intersection of the top and left borders.
; 309  :   const int border_index = (x_offsets[0] - border_left) +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _x_offsets$[ebp+ecx]
	sub	edx, DWORD PTR _border_left$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _y_offsets$[ebp+ecx]
	sub	eax, DWORD PTR _border_above$[ebp]
	imul	ecx, eax, 75
	add	edx, ecx
	mov	DWORD PTR _border_index$[ebp], edx

; 310  :                            (y_offsets[0] - border_above) * SAO_BUF_WIDTH;
; 311  :   const int border_index_c = (x_offsets[0]/2 - border_left) +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _x_offsets$[ebp+ecx]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	sub	ecx, DWORD PTR _border_left$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	eax, DWORD PTR _y_offsets$[ebp+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, DWORD PTR _border_above$[ebp]
	imul	edx, eax, 38
	add	ecx, edx
	mov	DWORD PTR _border_index_c$[ebp], ecx

; 312  :                              (y_offsets[0]/2 - border_above) * SAO_BUF_WIDTH_C;
; 313  :   // Width and height of the whole area to filter.
; 314  :   const int width  = x_offsets[2] - x_offsets[0];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _x_offsets$[ebp+eax]
	sub	eax, DWORD PTR _x_offsets$[ebp+edx]
	mov	DWORD PTR _width$[ebp], eax

; 315  :   const int height = y_offsets[2] - y_offsets[0];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _y_offsets$[ebp+eax]
	sub	eax, DWORD PTR _y_offsets$[ebp+edx]
	mov	DWORD PTR _height$[ebp], eax

; 316  : 
; 317  :   // Copy bordering pixels from above and left to buffers.
; 318  :   if (lcu->above) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	$LN8@encoder_sa

; 319  :     const int from_index = (lcu->position_px.x + x_offsets[0] - border_left) +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x_offsets$[ebp+ecx]
	sub	eax, DWORD PTR _border_left$[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 1
	mov	ecx, DWORD PTR _frame$[ebp]
	imul	edx, DWORD PTR [ecx+8]
	add	eax, edx
	mov	DWORD PTR _from_index$19[ebp], eax

; 320  :                            (lcu->position.y - 1) * frame->width;
; 321  :     kvz_pixels_blit(&state->tile->hor_buf_before_sao->y[from_index],

	push	75					; 0000004bH
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	mov	edx, DWORD PTR _width$[ebp]
	add	edx, DWORD PTR _border_left$[ebp]
	add	edx, DWORD PTR _border_right$[ebp]
	push	edx
	mov	eax, DWORD PTR _sao_buf_y$[ebp]
	add	eax, DWORD PTR _border_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _from_index$19[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 322  :                     &sao_buf_y[border_index],
; 323  :                     width + border_left + border_right,
; 324  :                     1,
; 325  :                     frame->width,
; 326  :                     SAO_BUF_WIDTH);
; 327  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN8@encoder_sa

; 328  :       const int from_index_c = (lcu->position_px.x + x_offsets[0])/2 - border_left +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x_offsets$[ebp+ecx]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	sub	ecx, DWORD PTR _border_left$[ebp]
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [edx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index_c$18[ebp], ecx

; 329  :                                (lcu->position.y - 1) * frame->width/2;
; 330  :       kvz_pixels_blit(&state->tile->hor_buf_before_sao->u[from_index_c],

	push	38					; 00000026H
	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_left$[ebp]
	add	eax, DWORD PTR _border_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_buf_u$[ebp]
	add	ecx, DWORD PTR _border_index_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _from_index_c$18[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 331  :                       &sao_buf_u[border_index_c],
; 332  :                       width/2 + border_left + border_right,
; 333  :                       1,
; 334  :                       frame->width/2,
; 335  :                       SAO_BUF_WIDTH_C);
; 336  :       kvz_pixels_blit(&state->tile->hor_buf_before_sao->v[from_index_c],

	push	38					; 00000026H
	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_left$[ebp]
	add	eax, DWORD PTR _border_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_buf_v$[ebp]
	add	ecx, DWORD PTR _border_index_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _from_index_c$18[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN8@encoder_sa:

; 337  :                       &sao_buf_v[border_index_c],
; 338  :                       width/2 + border_left + border_right,
; 339  :                       1,
; 340  :                       frame->width/2,
; 341  :                       SAO_BUF_WIDTH_C);
; 342  :     }
; 343  :   }
; 344  :   if (lcu->left) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	$LN10@encoder_sa

; 345  :     const int from_index = (lcu->position.x - 1) * frame->height +

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _frame$[ebp]
	imul	ecx, DWORD PTR [edx+12]
	mov	eax, 4
	imul	edx, eax, 0
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+24]
	add	eax, DWORD PTR _y_offsets$[ebp+edx]
	sub	eax, DWORD PTR _border_above$[ebp]
	add	ecx, eax
	mov	DWORD PTR _from_index$17[ebp], ecx

; 346  :                            (lcu->position_px.y + y_offsets[0] - border_above);
; 347  :     kvz_pixels_blit(&state->tile->ver_buf_before_sao->y[from_index],

	push	75					; 0000004bH
	push	1
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, DWORD PTR _border_above$[ebp]
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _sao_buf_y$[ebp]
	add	ecx, DWORD PTR _border_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _from_index$17[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 348  :                     &sao_buf_y[border_index],
; 349  :                     1,
; 350  :                     height + border_above + border_below,
; 351  :                     1,
; 352  :                     SAO_BUF_WIDTH);
; 353  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN10@encoder_sa

; 354  :       const int from_index_c = (lcu->position.x - 1) * frame->height/2 +

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, 1
	mov	ecx, DWORD PTR _frame$[ebp]
	imul	eax, DWORD PTR [ecx+12]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [edx+24]
	add	edx, DWORD PTR _y_offsets$[ebp+eax]
	mov	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	sub	ecx, DWORD PTR _border_above$[ebp]
	mov	DWORD PTR _from_index_c$16[ebp], ecx

; 355  :                                (lcu->position_px.y + y_offsets[0])/2 - border_above;
; 356  :       kvz_pixels_blit(&state->tile->ver_buf_before_sao->u[from_index_c],

	push	38					; 00000026H
	push	1
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_above$[ebp]
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	push	1
	mov	eax, DWORD PTR _sao_buf_u$[ebp]
	add	eax, DWORD PTR _border_index_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _from_index_c$16[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 357  :                       &sao_buf_u[border_index_c],
; 358  :                       1,
; 359  :                       height/2 + border_above + border_below,
; 360  :                       1,
; 361  :                       SAO_BUF_WIDTH_C);
; 362  :       kvz_pixels_blit(&state->tile->ver_buf_before_sao->v[from_index_c],

	push	38					; 00000026H
	push	1
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_above$[ebp]
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	push	1
	mov	eax, DWORD PTR _sao_buf_v$[ebp]
	add	eax, DWORD PTR _border_index_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _from_index_c$16[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN10@encoder_sa:

; 363  :                       &sao_buf_v[border_index_c],
; 364  :                       1,
; 365  :                       height/2 + border_above + border_below,
; 366  :                       1,
; 367  :                       SAO_BUF_WIDTH_C);
; 368  :     }
; 369  :   }
; 370  :   // Copy pixels that will be filtered and bordering pixels from right and
; 371  :   // below.
; 372  :   const int from_index = (lcu->position_px.x + x_offsets[0]) +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x_offsets$[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	add	ecx, DWORD PTR _y_offsets$[ebp+edx]
	mov	edx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [edx+4]
	imul	ecx, DWORD PTR [edx+40]
	add	eax, ecx
	mov	DWORD PTR _from_index$[ebp], eax

; 373  :                          (lcu->position_px.y + y_offsets[0]) * frame->rec->stride;
; 374  :   const int to_index = x_offsets[0] + y_offsets[0] * SAO_BUF_WIDTH;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	imul	edx, DWORD PTR _y_offsets$[ebp+eax], 75
	add	edx, DWORD PTR _x_offsets$[ebp+ecx]
	mov	DWORD PTR _to_index$[ebp], edx

; 375  :   kvz_pixels_blit(&frame->rec->y[from_index],

	push	75					; 0000004bH
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	add	ecx, DWORD PTR _border_right$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_buf_y$[ebp]
	add	edx, DWORD PTR _to_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _from_index$[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 376  :                   &sao_buf_y[to_index],
; 377  :                   width + border_right,
; 378  :                   height + border_below,
; 379  :                   frame->rec->stride,
; 380  :                   SAO_BUF_WIDTH);
; 381  :   if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN12@encoder_sa

; 382  :     const int from_index_c = (lcu->position_px.x + x_offsets[0])/2 +

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x_offsets$[ebp+ecx]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [edx+24]
	add	edx, DWORD PTR _y_offsets$[ebp+eax]
	mov	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [edx+4]
	imul	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index_c$15[ebp], ecx

; 383  :                              (lcu->position_px.y + y_offsets[0])/2 * frame->rec->stride/2;
; 384  :     const int to_index_c = x_offsets[0]/2 + y_offsets[0]/2 * SAO_BUF_WIDTH_C;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _x_offsets$[ebp+ecx]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	eax, DWORD PTR _y_offsets$[ebp+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	edx, eax, 38
	add	ecx, edx
	mov	DWORD PTR _to_index_c$14[ebp], ecx

; 385  :     kvz_pixels_blit(&frame->rec->u[from_index_c],

	push	38					; 00000026H
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_right$[ebp]
	push	eax
	mov	edx, DWORD PTR _sao_buf_u$[ebp]
	add	edx, DWORD PTR _to_index_c$14[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _from_index_c$15[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 386  :                     &sao_buf_u[to_index_c],
; 387  :                     width/2 + border_right,
; 388  :                     height/2 + border_below,
; 389  :                     frame->rec->stride/2,
; 390  :                     SAO_BUF_WIDTH_C);
; 391  :     kvz_pixels_blit(&frame->rec->v[from_index_c],

	push	38					; 00000026H
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_below$[ebp]
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _border_right$[ebp]
	push	eax
	mov	edx, DWORD PTR _sao_buf_v$[ebp]
	add	edx, DWORD PTR _to_index_c$14[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _from_index_c$15[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN12@encoder_sa:

; 392  :                     &sao_buf_v[to_index_c],
; 393  :                     width/2 + border_right,
; 394  :                     height/2 + border_below,
; 395  :                     frame->rec->stride/2,
; 396  :                     SAO_BUF_WIDTH_C);
; 397  :   }
; 398  : 
; 399  :   // We filter the pixels in four parts:
; 400  :   //  1. Pixels that belong to the LCU above and to the left
; 401  :   //  2. Pixels that belong to the LCU above
; 402  :   //  3. Pixels that belong to the LCU to the left
; 403  :   //  4. Pixels that belong to the current LCU
; 404  :   for (int y_offset_index = 0; y_offset_index < 2; y_offset_index++) {

	mov	DWORD PTR _y_offset_index$13[ebp], 0
	jmp	SHORT $LN4@encoder_sa
$LN2@encoder_sa:
	mov	eax, DWORD PTR _y_offset_index$13[ebp]
	add	eax, 1
	mov	DWORD PTR _y_offset_index$13[ebp], eax
$LN4@encoder_sa:
	cmp	DWORD PTR _y_offset_index$13[ebp], 2
	jge	$LN1@encoder_sa

; 405  :     for (int x_offset_index = 0; x_offset_index < 2; x_offset_index++) {

	mov	DWORD PTR _x_offset_index$12[ebp], 0
	jmp	SHORT $LN7@encoder_sa
$LN5@encoder_sa:
	mov	eax, DWORD PTR _x_offset_index$12[ebp]
	add	eax, 1
	mov	DWORD PTR _x_offset_index$12[ebp], eax
$LN7@encoder_sa:
	cmp	DWORD PTR _x_offset_index$12[ebp], 2
	jge	$LN6@encoder_sa

; 406  :       const int x = x_offsets[x_offset_index];

	mov	eax, DWORD PTR _x_offset_index$12[ebp]
	mov	ecx, DWORD PTR _x_offsets$[ebp+eax*4]
	mov	DWORD PTR _x$11[ebp], ecx

; 407  :       const int y = y_offsets[y_offset_index];

	mov	eax, DWORD PTR _y_offset_index$13[ebp]
	mov	ecx, DWORD PTR _y_offsets$[ebp+eax*4]
	mov	DWORD PTR _y$10[ebp], ecx

; 408  :       const int width = x_offsets[x_offset_index + 1] - x;

	mov	eax, DWORD PTR _x_offset_index$12[ebp]
	mov	ecx, DWORD PTR _x_offsets$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _x$11[ebp]
	mov	DWORD PTR _width$9[ebp], ecx

; 409  :       const int height = y_offsets[y_offset_index + 1] - y;

	mov	eax, DWORD PTR _y_offset_index$13[ebp]
	mov	ecx, DWORD PTR _y_offsets$[ebp+eax*4+4]
	sub	ecx, DWORD PTR _y$10[ebp]
	mov	DWORD PTR _height$8[ebp], ecx

; 410  : 
; 411  :       if (width == 0 || height == 0) continue;

	cmp	DWORD PTR _width$9[ebp], 0
	je	SHORT $LN14@encoder_sa
	cmp	DWORD PTR _height$8[ebp], 0
	jne	SHORT $LN13@encoder_sa
$LN14@encoder_sa:
	jmp	$LN5@encoder_sa
$LN13@encoder_sa:

; 412  : 
; 413  :       const int lcu_x = (lcu->position_px.x + x) >> LOG2_LCU_WIDTH;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _x$11[ebp]
	sar	ecx, 6
	mov	DWORD PTR _lcu_x$7[ebp], ecx

; 414  :       const int lcu_y = (lcu->position_px.y + y) >> LOG2_LCU_WIDTH;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _y$10[ebp]
	sar	ecx, 6
	mov	DWORD PTR _lcu_y$6[ebp], ecx

; 415  :       const int lcu_index = lcu_x + lcu_y * frame->width_in_lcu;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR _lcu_y$6[ebp]
	imul	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _lcu_x$7[ebp]
	mov	DWORD PTR _lcu_index$5[ebp], ecx

; 416  :       const sao_info_t *sao_luma   = &frame->sao_luma[lcu_index];

	imul	eax, DWORD PTR _lcu_index$5[ebp], 68
	mov	ecx, DWORD PTR _frame$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _sao_luma$4[ebp], eax

; 417  :       const sao_info_t *sao_chroma = &frame->sao_chroma[lcu_index];

	imul	eax, DWORD PTR _lcu_index$5[ebp], 68
	mov	ecx, DWORD PTR _frame$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _sao_chroma$3[ebp], eax

; 418  : 
; 419  :       kvz_sao_reconstruct(state,

	push	0
	mov	eax, DWORD PTR _sao_luma$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$9[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _y$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _x$11[ebp]
	push	eax
	push	75					; 0000004bH
	imul	ecx, DWORD PTR _y$10[ebp], 75
	add	ecx, DWORD PTR _x$11[ebp]
	add	ecx, DWORD PTR _sao_buf_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_sao_reconstruct
	add	esp, 36					; 00000024H

; 420  :                           &sao_buf_y[x + y * SAO_BUF_WIDTH],
; 421  :                           SAO_BUF_WIDTH,
; 422  :                           lcu->position_px.x + x,
; 423  :                           lcu->position_px.y + y,
; 424  :                           width,
; 425  :                           height,
; 426  :                           sao_luma,
; 427  :                           COLOR_Y);
; 428  : 
; 429  :       if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN15@encoder_sa

; 430  :         // Coordinates in chroma pixels.
; 431  :         int x_c = x >> 1;

	mov	eax, DWORD PTR _x$11[ebp]
	sar	eax, 1
	mov	DWORD PTR _x_c$2[ebp], eax

; 432  :         int y_c = y >> 1;

	mov	eax, DWORD PTR _y$10[ebp]
	sar	eax, 1
	mov	DWORD PTR _y_c$1[ebp], eax

; 433  : 
; 434  :         kvz_sao_reconstruct(state,

	push	1
	mov	eax, DWORD PTR _sao_chroma$3[ebp]
	push	eax
	mov	eax, DWORD PTR _height$8[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _width$9[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _y_c$1[ebp]
	push	eax
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _x_c$2[ebp]
	push	eax
	push	38					; 00000026H
	imul	eax, DWORD PTR _y_c$1[ebp], 38
	add	eax, DWORD PTR _x_c$2[ebp]
	add	eax, DWORD PTR _sao_buf_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_sao_reconstruct
	add	esp, 36					; 00000024H

; 435  :                             &sao_buf_u[x_c + y_c * SAO_BUF_WIDTH_C],
; 436  :                             SAO_BUF_WIDTH_C,
; 437  :                             lcu->position_px.x / 2 + x_c,
; 438  :                             lcu->position_px.y / 2 + y_c,
; 439  :                             width / 2,
; 440  :                             height / 2,
; 441  :                             sao_chroma,
; 442  :                             COLOR_U);
; 443  :         kvz_sao_reconstruct(state,

	push	2
	mov	eax, DWORD PTR _sao_chroma$3[ebp]
	push	eax
	mov	eax, DWORD PTR _height$8[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _width$9[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _y_c$1[ebp]
	push	eax
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _x_c$2[ebp]
	push	eax
	push	38					; 00000026H
	imul	eax, DWORD PTR _y_c$1[ebp], 38
	add	eax, DWORD PTR _x_c$2[ebp]
	add	eax, DWORD PTR _sao_buf_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_sao_reconstruct
	add	esp, 36					; 00000024H
$LN15@encoder_sa:

; 444  :                             &sao_buf_v[x_c + y_c * SAO_BUF_WIDTH_C],
; 445  :                             SAO_BUF_WIDTH_C,
; 446  :                             lcu->position_px.x / 2 + x_c,
; 447  :                             lcu->position_px.y / 2 + y_c,
; 448  :                             width / 2,
; 449  :                             height / 2,
; 450  :                             sao_chroma,
; 451  :                             COLOR_V);
; 452  :       }
; 453  :     }

	jmp	$LN5@encoder_sa
$LN6@encoder_sa:

; 454  :   }

	jmp	$LN2@encoder_sa
$LN1@encoder_sa:

; 455  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@encoder_sa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 10528				; 00002920H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN39@encoder_sa:
	DD	5
	DD	$LN38@encoder_sa
$LN38@encoder_sa:
	DD	-5648					; ffffe9f0H
	DD	5627					; 000015fbH
	DD	$LN33@encoder_sa
	DD	-7104					; ffffe440H
	DD	1446					; 000005a6H
	DD	$LN34@encoder_sa
	DD	-8560					; ffffde90H
	DD	1446					; 000005a6H
	DD	$LN35@encoder_sa
	DD	-8616					; ffffde58H
	DD	12					; 0000000cH
	DD	$LN36@encoder_sa
	DD	-8636					; ffffde44H
	DD	12					; 0000000cH
	DD	$LN37@encoder_sa
$LN37@encoder_sa:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN36@encoder_sa:
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN35@encoder_sa:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN34@encoder_sa:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN33@encoder_sa:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
_encoder_sao_reconstruct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_recdata_to_bufs
_TEXT	SEGMENT
_to_index$1 = -136					; size = 4
_from_index$2 = -124					; size = 4
_left$3 = -112						; size = 8
_lcu_col$4 = -96					; size = 4
_to_index_c$5 = -84					; size = 4
_from_index_c$6 = -72					; size = 4
_to_index$7 = -60					; size = 4
_from_index$8 = -48					; size = 4
_lcu_row$9 = -36					; size = 4
_bottom$10 = -24					; size = 8
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_hor_buf$ = 16						; size = 4
_ver_buf$ = 20						; size = 4
_encoder_state_recdata_to_bufs PROC			; COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 187  :   videoframe_t* const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 188  :   
; 189  :   if (hor_buf) {

	cmp	DWORD PTR _hor_buf$[ebp], 0
	je	$LN2@encoder_st

; 190  :     //Copy the bottom row of this LCU to the horizontal buffer
; 191  :     vector2d_t bottom = { lcu->position_px.x, lcu->position_px.y + lcu->size.y - 1 };

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _bottom$10[ebp], ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _bottom$10[ebp+4], ecx

; 192  :     const int lcu_row = lcu->position.y;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lcu_row$9[ebp], ecx

; 193  : 
; 194  :     unsigned from_index = bottom.y * frame->rec->stride + bottom.x;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _bottom$10[ebp+4]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _bottom$10[ebp]
	mov	DWORD PTR _from_index$8[ebp], edx

; 195  :     unsigned to_index = lcu->position_px.x + lcu_row * frame->width;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR _lcu_row$9[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _lcu$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _to_index$7[ebp], ecx

; 196  :     
; 197  :     kvz_pixels_blit(&frame->rec->y[from_index],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	1
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _to_index$7[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _from_index$8[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 198  :                     &hor_buf->y[to_index],
; 199  :                     lcu->size.x, 1,
; 200  :                     frame->rec->stride, frame->width);
; 201  : 
; 202  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN2@encoder_st

; 203  :       unsigned from_index_c = (bottom.y / 2) * frame->rec->stride / 2 + (bottom.x / 2);

	mov	eax, DWORD PTR _bottom$10[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _bottom$10[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index_c$6[ebp], ecx

; 204  :       unsigned to_index_c = lcu->position_px.x / 2 + lcu_row * frame->width / 2;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+20]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR _lcu_row$9[ebp]
	imul	eax, DWORD PTR [edx+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _to_index_c$5[ebp], ecx

; 205  : 
; 206  :       kvz_pixels_blit(&frame->rec->u[from_index_c],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _to_index_c$5[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _from_index_c$6[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 207  :                       &hor_buf->u[to_index_c],
; 208  :                       lcu->size.x / 2, 1, 
; 209  :                       frame->rec->stride / 2, frame->width / 2);
; 210  :       kvz_pixels_blit(&frame->rec->v[from_index_c],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+28]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hor_buf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _to_index_c$5[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _from_index_c$6[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN2@encoder_st:

; 211  :                       &hor_buf->v[to_index_c],
; 212  :                       lcu->size.x / 2, 1,
; 213  :                       frame->rec->stride / 2, frame->width / 2);
; 214  :     }
; 215  :   }
; 216  :   
; 217  :   if (ver_buf) {

	cmp	DWORD PTR _ver_buf$[ebp], 0
	je	$LN1@encoder_st

; 218  :     //Copy the right row of this LCU to the vertical buffer.
; 219  :     
; 220  :     const int lcu_col = lcu->position.x;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _lcu_col$4[ebp], ecx

; 221  :     vector2d_t left = { lcu->position_px.x + lcu->size.x - 1, lcu->position_px.y };

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+28]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _left$3[ebp], ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _left$3[ebp+4], ecx

; 222  :     
; 223  :     kvz_pixels_blit(&frame->rec->y[left.y * frame->rec->stride + left.x],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR _lcu_col$4[ebp]
	imul	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, eax
	mov	eax, DWORD PTR _ver_buf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, edx
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _left$3[ebp+4]
	imul	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR _left$3[ebp]
	mov	edx, DWORD PTR [eax+8]
	add	edx, ecx
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 224  :                     &ver_buf->y[lcu->position_px.y + lcu_col * frame->height],
; 225  :                     1, lcu->size.y,
; 226  :                     frame->rec->stride, 1);
; 227  : 
; 228  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN1@encoder_st

; 229  :       unsigned from_index = (left.y / 2) * frame->rec->stride / 2 + (left.x / 2);

	mov	eax, DWORD PTR _left$3[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _left$3[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index$2[ebp], ecx

; 230  :       unsigned to_index = lcu->position_px.y / 2 + lcu_col * frame->height / 2;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [eax+24]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR _lcu_col$4[ebp]
	imul	eax, DWORD PTR [edx+12]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _to_index$1[ebp], ecx

; 231  : 
; 232  :       kvz_pixels_blit(&frame->rec->u[from_index],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _ver_buf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _to_index$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _from_index$2[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 233  :                       &ver_buf->u[to_index],
; 234  :                       1, lcu->size.y / 2,
; 235  :                       frame->rec->stride / 2, 1);
; 236  :       kvz_pixels_blit(&frame->rec->v[from_index],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _ver_buf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _to_index$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _from_index$2[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN1@encoder_st:

; 237  :                       &ver_buf->v[to_index],
; 238  :                       1, lcu->size.y / 2,
; 239  :                       frame->rec->stride / 2, 1);
; 240  :     }
; 241  :   }
; 242  :   
; 243  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@encoder_st:
	DD	2
	DD	$LN9@encoder_st
$LN9@encoder_st:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN7@encoder_st
	DD	-112					; ffffff90H
	DD	8
	DD	$LN8@encoder_st
$LN8@encoder_st:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN7@encoder_st:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
_encoder_state_recdata_to_bufs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _encoder_state_recdata_before_sao_to_bufs
_TEXT	SEGMENT
_to_index_c$1 = -160					; size = 4
_from_index_c$2 = -148					; size = 4
_to_index$3 = -136					; size = 4
_from_index$4 = -124					; size = 4
_length$5 = -112					; size = 4
_pos$6 = -100						; size = 8
_to_index_c$7 = -84					; size = 4
_from_index_c$8 = -72					; size = 4
_to_index$9 = -60					; size = 4
_from_index$10 = -48					; size = 4
_length$11 = -36					; size = 4
_pos$12 = -24						; size = 8
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_hor_buf$ = 16						; size = 4
_ver_buf$ = 20						; size = 4
_encoder_state_recdata_before_sao_to_bufs PROC		; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 82   :   videoframe_t* const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 83   : 
; 84   :   if (hor_buf && lcu->below) {

	cmp	DWORD PTR _hor_buf$[ebp], 0
	je	$LN2@encoder_st
	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$LN2@encoder_st

; 85   :     // Copy the bottommost row that will be filtered with SAO to the
; 86   :     // horizontal buffer.
; 87   :     vector2d_t pos = {

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pos$12[ebp], ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 53					; 00000035H
	mov	DWORD PTR _pos$12[ebp+4], ecx

; 88   :       .x = lcu->position_px.x,
; 89   :       .y = lcu->position_px.y + LCU_WIDTH - SAO_DELAY_PX - 1,
; 90   :     };
; 91   :     // Copy all pixels that have been deblocked.
; 92   :     int length = lcu->size.x - DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 8
	mov	DWORD PTR _length$11[ebp], ecx

; 93   : 
; 94   :     if (!lcu->right) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@encoder_st

; 95   :       // If there is no LCU to the right, the last pixels will be
; 96   :       // filtered too.
; 97   :       length += DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _length$11[ebp]
	add	eax, 8
	mov	DWORD PTR _length$11[ebp], eax
$LN3@encoder_st:

; 98   :     }
; 99   : 
; 100  :     if (lcu->left) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN4@encoder_st

; 101  :       // The rightmost pixels of the CTU to the left will also be filtered.
; 102  :       pos.x -= DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _pos$12[ebp]
	sub	eax, 8
	mov	DWORD PTR _pos$12[ebp], eax

; 103  :       length += DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _length$11[ebp]
	add	eax, 8
	mov	DWORD PTR _length$11[ebp], eax
$LN4@encoder_st:

; 104  :     }
; 105  : 
; 106  :     const unsigned from_index = pos.x + pos.y * frame->rec->stride;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pos$12[ebp+4]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _pos$12[ebp]
	mov	DWORD PTR _from_index$10[ebp], edx

; 107  :     // NOTE: The horizontal buffer is indexed by
; 108  :     //    x_px + y_lcu * frame->width
; 109  :     // where x_px is in pixels and y_lcu in number of LCUs.
; 110  :     const unsigned to_index = pos.x + lcu->position.y * frame->width;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _pos$12[ebp]
	mov	DWORD PTR _to_index$9[ebp], edx

; 111  : 
; 112  :     kvz_pixels_blit(&frame->rec->y[from_index],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	1
	mov	edx, DWORD PTR _length$11[ebp]
	push	edx
	mov	eax, DWORD PTR _hor_buf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _to_index$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _from_index$10[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 113  :                     &hor_buf->y[to_index],
; 114  :                     length, 1,
; 115  :                     frame->rec->stride,
; 116  :                     frame->width);
; 117  : 
; 118  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN2@encoder_st

; 119  :       const unsigned from_index_c = (pos.x / 2) + (pos.y / 2) * frame->rec->stride / 2;

	mov	eax, DWORD PTR _pos$12[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _pos$12[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [edx+4]
	imul	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index_c$8[ebp], ecx

; 120  :       const unsigned to_index_c = (pos.x / 2) + lcu->position.y * frame->width / 2;

	mov	eax, DWORD PTR _pos$12[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	edx, DWORD PTR _lcu$[ebp]
	mov	eax, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [edx+16]
	imul	edx, DWORD PTR [eax+8]
	mov	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _to_index_c$7[ebp], ecx

; 121  : 
; 122  :       kvz_pixels_blit(&frame->rec->u[from_index_c],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _length$11[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _hor_buf$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _to_index_c$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _from_index_c$8[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 123  :                       &hor_buf->u[to_index_c],
; 124  :                       length / 2, 1,
; 125  :                       frame->rec->stride / 2,
; 126  :                       frame->width / 2);
; 127  :       kvz_pixels_blit(&frame->rec->v[from_index_c],

	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	eax, DWORD PTR _length$11[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _hor_buf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _to_index_c$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _from_index_c$8[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN2@encoder_st:

; 128  :                       &hor_buf->v[to_index_c],
; 129  :                       length / 2, 1,
; 130  :                       frame->rec->stride / 2,
; 131  :                       frame->width / 2);
; 132  :     }
; 133  :   }
; 134  : 
; 135  :   if (ver_buf && lcu->right) {

	cmp	DWORD PTR _ver_buf$[ebp], 0
	je	$LN1@encoder_st
	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	$LN1@encoder_st

; 136  :     // Copy the rightmost column that will be filtered with SAO to the
; 137  :     // vertical buffer.
; 138  :     vector2d_t pos = {

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 53					; 00000035H
	mov	DWORD PTR _pos$6[ebp], ecx
	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _pos$6[ebp+4], ecx

; 139  :       .x = lcu->position_px.x + LCU_WIDTH - SAO_DELAY_PX - 1,
; 140  :       .y = lcu->position_px.y,
; 141  :     };
; 142  :     int length = lcu->size.y - DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 8
	mov	DWORD PTR _length$5[ebp], ecx

; 143  : 
; 144  :     if (!lcu->below) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN7@encoder_st

; 145  :       // If there is no LCU below, the last pixels will be filtered too.
; 146  :       length += DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _length$5[ebp]
	add	eax, 8
	mov	DWORD PTR _length$5[ebp], eax
$LN7@encoder_st:

; 147  :     }
; 148  : 
; 149  :     if (lcu->above) {

	mov	eax, DWORD PTR _lcu$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN8@encoder_st

; 150  :       // The bottommost pixels of the CTU above will also be filtered.
; 151  :       pos.y -= DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _pos$6[ebp+4]
	sub	eax, 8
	mov	DWORD PTR _pos$6[ebp+4], eax

; 152  :       length += DEBLOCK_DELAY_PX;

	mov	eax, DWORD PTR _length$5[ebp]
	add	eax, 8
	mov	DWORD PTR _length$5[ebp], eax
$LN8@encoder_st:

; 153  :     }
; 154  : 
; 155  :     const unsigned from_index = pos.x + pos.y * frame->rec->stride;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pos$6[ebp+4]
	imul	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR _pos$6[ebp]
	mov	DWORD PTR _from_index$4[ebp], edx

; 156  :     // NOTE: The vertical buffer is indexed by
; 157  :     //    x_lcu * frame->height + y_px
; 158  :     // where x_lcu is in number of LCUs and y_px in pixels.
; 159  :     const unsigned to_index = lcu->position.x * frame->height + pos.y;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _pos$6[ebp+4]
	mov	DWORD PTR _to_index$3[ebp], edx

; 160  : 
; 161  :     kvz_pixels_blit(&frame->rec->y[from_index],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _length$5[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _ver_buf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _to_index$3[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _from_index$4[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 162  :                     &ver_buf->y[to_index],
; 163  :                     1, length,
; 164  :                     frame->rec->stride, 1);
; 165  : 
; 166  :     if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN1@encoder_st

; 167  :       const unsigned from_index_c = (pos.x / 2) + (pos.y / 2) * frame->rec->stride / 2;

	mov	eax, DWORD PTR _pos$6[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _pos$6[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [edx+4]
	imul	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _from_index_c$2[ebp], ecx

; 168  :       const unsigned to_index_c = lcu->position.x * frame->height / 2 + pos.y / 2;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+12]
	imul	eax, DWORD PTR [ecx+12]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	mov	eax, DWORD PTR _pos$6[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _to_index_c$1[ebp], ecx

; 169  : 
; 170  :       kvz_pixels_blit(&frame->rec->u[from_index_c],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _length$5[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	edx, DWORD PTR _ver_buf$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _to_index_c$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _from_index_c$2[ebp]
	push	eax
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 171  :                       &ver_buf->u[to_index_c],
; 172  :                       1, length / 2,
; 173  :                       frame->rec->stride / 2, 1);
; 174  :       kvz_pixels_blit(&frame->rec->v[from_index_c],

	push	1
	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _length$5[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	push	1
	mov	edx, DWORD PTR _ver_buf$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _to_index_c$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _from_index_c$2[ebp]
	push	eax
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN1@encoder_st:

; 175  :                       &ver_buf->v[to_index_c],
; 176  :                       1, length / 2,
; 177  :                       frame->rec->stride / 2, 1);
; 178  :     }
; 179  :   }
; 180  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@encoder_st:
	DD	2
	DD	$LN13@encoder_st
$LN13@encoder_st:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN11@encoder_st
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN12@encoder_st
$LN12@encoder_st:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN11@encoder_st:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
_encoder_state_recdata_before_sao_to_bufs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
;	COMDAT _is_last_cu_in_qg
_TEXT	SEGMENT
tv89 = -248						; size = 4
tv87 = -244						; size = 4
_bottom$ = -44						; size = 4
_right$ = -32						; size = 4
_qg_width$ = -20					; size = 4
_cu_width$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_is_last_cu_in_qg PROC					; COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6BE1C69C_encoderstate@h
	call	@__CheckForDebuggerJustMyCode@4

; 383  :   if (state->encoder_control->max_qp_delta_depth < 0) return false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+4584]
	test	edx, edx
	jge	SHORT $LN2@is_last_cu
	xor	al, al
	jmp	$LN1@is_last_cu
$LN2@is_last_cu:

; 384  : 
; 385  :   const int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 386  :   const int qg_width = LCU_WIDTH >> state->encoder_control->max_qp_delta_depth;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	ecx, BYTE PTR [ecx+4584]
	mov	edx, 64					; 00000040H
	sar	edx, cl
	mov	DWORD PTR _qg_width$[ebp], edx

; 387  :   const int right  = x + cu_width;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	DWORD PTR _right$[ebp], eax

; 388  :   const int bottom = y + cu_width;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	DWORD PTR _bottom$[ebp], eax

; 389  :   return (right % qg_width == 0 || right >= state->tile->frame->width) &&

	mov	eax, DWORD PTR _right$[ebp]
	cdq
	idiv	DWORD PTR _qg_width$[ebp]
	test	edx, edx
	je	SHORT $LN4@is_last_cu
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _right$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN6@is_last_cu
$LN4@is_last_cu:
	mov	eax, DWORD PTR _bottom$[ebp]
	cdq
	idiv	DWORD PTR _qg_width$[ebp]
	test	edx, edx
	je	SHORT $LN5@is_last_cu
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _bottom$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN6@is_last_cu
$LN5@is_last_cu:
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN7@is_last_cu
$LN6@is_last_cu:
	mov	DWORD PTR tv87[ebp], 0
$LN7@is_last_cu:
	cmp	DWORD PTR tv87[ebp], 0
	jne	SHORT $LN8@is_last_cu
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN9@is_last_cu
$LN8@is_last_cu:
	mov	DWORD PTR tv89[ebp], 1
$LN9@is_last_cu:
	mov	al, BYTE PTR tv89[ebp]
$LN1@is_last_cu:

; 390  :          (bottom % qg_width == 0 || bottom >= state->tile->frame->height);
; 391  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_last_cu_in_qg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_get_cu_ref_qp
_TEXT	SEGMENT
tv89 = -280						; size = 4
_qp_pred_b$ = -80					; size = 4
_qp_pred_a$ = -68					; size = 4
_y_qg$ = -56						; size = 4
_x_qg$ = -44						; size = 4
_qg_width$ = -32					; size = 4
_cua$ = -20						; size = 4
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_last_qp$ = 20						; size = 4
_kvz_get_cu_ref_qp PROC					; COMDAT

; 1605 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1606 :   const encoder_control_t *ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 1607 :   const cu_array_t *cua = state->tile->frame->cu_array;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cua$[ebp], eax

; 1608 :   // Quantization group width
; 1609 :   const int qg_width = LCU_WIDTH >> MIN(ctrl->max_qp_delta_depth, kvz_cu_array_at_const(cua, x, y)->depth);

	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	esi, BYTE PTR [eax+4584]
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _cua$[ebp]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	cmp	esi, edx
	jge	SHORT $LN5@kvz_get_cu
	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+4584]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN6@kvz_get_cu
$LN5@kvz_get_cu:
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cua$[ebp]
	push	ecx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax]
	shr	dl, 2
	and	dl, 7
	movzx	eax, dl
	mov	DWORD PTR tv89[ebp], eax
$LN6@kvz_get_cu:
	mov	edx, 64					; 00000040H
	mov	ecx, DWORD PTR tv89[ebp]
	sar	edx, cl
	mov	DWORD PTR _qg_width$[ebp], edx

; 1610 : 
; 1611 :   // Coordinates of the top-left corner of the quantization group
; 1612 :   const int x_qg = x & ~(qg_width - 1);

	mov	eax, DWORD PTR _qg_width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x_qg$[ebp], eax

; 1613 :   const int y_qg = y & ~(qg_width - 1);

	mov	eax, DWORD PTR _qg_width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y_qg$[ebp], eax

; 1614 : 
; 1615 :   int qp_pred_a = last_qp;

	mov	eax, DWORD PTR _last_qp$[ebp]
	mov	DWORD PTR _qp_pred_a$[ebp], eax

; 1616 :   if (x_qg % LCU_WIDTH > 0) {

	mov	eax, DWORD PTR _x_qg$[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN7@kvz_get_cu
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN7@kvz_get_cu:
	test	eax, eax
	jle	SHORT $LN2@kvz_get_cu

; 1617 :     qp_pred_a = kvz_cu_array_at_const(cua, x_qg - 1, y_qg)->qp;

	mov	eax, DWORD PTR _y_qg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_qg$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR [eax+6]
	mov	DWORD PTR _qp_pred_a$[ebp], eax
$LN2@kvz_get_cu:

; 1618 :   }
; 1619 : 
; 1620 :   int qp_pred_b = last_qp;

	mov	eax, DWORD PTR _last_qp$[ebp]
	mov	DWORD PTR _qp_pred_b$[ebp], eax

; 1621 :   if (y_qg % LCU_WIDTH > 0) {

	mov	eax, DWORD PTR _y_qg$[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN8@kvz_get_cu
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN8@kvz_get_cu:
	test	eax, eax
	jle	SHORT $LN3@kvz_get_cu

; 1622 :     qp_pred_b = kvz_cu_array_at_const(cua, x_qg, y_qg - 1)->qp;

	mov	eax, DWORD PTR _y_qg$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x_qg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR [eax+6]
	mov	DWORD PTR _qp_pred_b$[ebp], eax
$LN3@kvz_get_cu:

; 1623 :   }
; 1624 : 
; 1625 :   return ((qp_pred_a + qp_pred_b + 1) >> 1);

	mov	eax, DWORD PTR _qp_pred_b$[ebp]
	mov	ecx, DWORD PTR _qp_pred_a$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	sar	eax, 1

; 1626 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_get_cu_ref_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_get_lcu_stats
_TEXT	SEGMENT
_index$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu_x$ = 12						; size = 4
_lcu_y$ = 16						; size = 4
_kvz_get_lcu_stats PROC					; COMDAT

; 1597 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1598 :   const int index = lcu_x + state->tile->lcu_offset_x +

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _lcu_x$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR _lcu_y$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx]
	imul	eax, DWORD PTR [ecx+2488]
	add	edx, eax
	mov	DWORD PTR _index$[ebp], edx

; 1599 :                     (lcu_y + state->tile->lcu_offset_y) *
; 1600 :                     state->encoder_control->in.width_in_lcu;
; 1601 :   return &state->frame->lcu_stats[index];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	eax, DWORD PTR _index$[ebp], 72
	add	eax, DWORD PTR [ecx+148]

; 1602 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_get_lcu_stats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_encoder_create_ref_lists
_TEXT	SEGMENT
tv149 = -308						; size = 4
tv147 = -304						; size = 4
_i$1 = -104						; size = 4
_i$2 = -92						; size = 4
_i$3 = -80						; size = 4
_l1_negative_refs$ = -65				; size = 1
_i$4 = -56						; size = 4
_num_positive$ = -44					; size = 4
_num_negative$ = -32					; size = 4
_temp_ptr$5 = -20					; size = 4
_cfg$ = -8						; size = 4
_state$ = 8						; size = 4
_kvz_encoder_create_ref_lists PROC			; COMDAT

; 1054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1055 :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 1056 : 
; 1057 :   FILL_ARRAY(state->frame->ref_LX_size, 0, 2);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 77					; 0000004dH
	mov	DWORD PTR _temp_ptr$5[ebp], ecx
	push	2
	push	0
	mov	eax, DWORD PTR _temp_ptr$5[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1058 : 
; 1059 :   int num_negative = 0;

	mov	DWORD PTR _num_negative$[ebp], 0

; 1060 :   int num_positive = 0;

	mov	DWORD PTR _num_positive$[ebp], 0

; 1061 : 
; 1062 :   // Add positive references to L1 list
; 1063 :   for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN3@kvz_encode

; 1064 :     if (state->frame->ref->pocs[i] > state->frame->poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [edx+12]
	jle	SHORT $LN14@kvz_encode

; 1065 :       state->frame->ref_LX[1][state->frame->ref_LX_size[1]] = i;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [edx+ecx+77]
	mov	cl, BYTE PTR _i$4[ebp]
	mov	BYTE PTR [eax+edx], cl

; 1066 :       state->frame->ref_LX_size[1] += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	add	eax, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [edx+ecx+77], al

; 1067 :       num_positive++;

	mov	eax, DWORD PTR _num_positive$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_positive$[ebp], eax
$LN14@kvz_encode:

; 1068 :     }
; 1069 :   }

	jmp	$LN2@kvz_encode
$LN3@kvz_encode:

; 1070 : 
; 1071 :   // Add negative references to L1 list when bipred is enabled and GOP is
; 1072 :   // either disabled or does not use picture reordering.
; 1073 :   bool l1_negative_refs =

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN20@kvz_encode
	mov	ecx, DWORD PTR _cfg$[ebp]
	movsx	edx, BYTE PTR [ecx+276]
	test	edx, edx
	je	SHORT $LN19@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	SHORT $LN20@kvz_encode
$LN19@kvz_encode:
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN21@kvz_encode
$LN20@kvz_encode:
	mov	DWORD PTR tv147[ebp], 0
$LN21@kvz_encode:
	cmp	DWORD PTR tv147[ebp], 0
	jne	SHORT $LN22@kvz_encode
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN23@kvz_encode
$LN22@kvz_encode:
	mov	DWORD PTR tv149[ebp], 1
$LN23@kvz_encode:
	mov	dl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _l1_negative_refs$[ebp], dl

; 1074 :     (cfg->bipred && (cfg->gop_len == 0 || cfg->gop_lowdelay));
; 1075 : 
; 1076 :   // Add negative references to L0 and L1 lists.
; 1077 :   for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	$LN6@kvz_encode

; 1078 :     if (state->frame->ref->pocs[i] < state->frame->poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [edx+12]
	jge	$LN15@kvz_encode

; 1079 :       state->frame->ref_LX[0][state->frame->ref_LX_size[0]] = i;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, 1
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [eax+edx+77]
	mov	dl, BYTE PTR _i$3[ebp]
	mov	BYTE PTR [ecx+eax], dl

; 1080 :       state->frame->ref_LX_size[0] += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax+77]
	add	ecx, 1
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [edx+eax+77], cl

; 1081 :       if (l1_negative_refs) {

	movzx	eax, BYTE PTR _l1_negative_refs$[ebp]
	test	eax, eax
	je	SHORT $LN16@kvz_encode

; 1082 :         state->frame->ref_LX[1][state->frame->ref_LX_size[1]] = i;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [edx+ecx+77]
	mov	cl, BYTE PTR _i$3[ebp]
	mov	BYTE PTR [eax+edx], cl

; 1083 :         state->frame->ref_LX_size[1] += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	add	eax, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	BYTE PTR [edx+ecx+77], al
$LN16@kvz_encode:

; 1084 :       }
; 1085 :       num_negative++;

	mov	eax, DWORD PTR _num_negative$[ebp]
	add	eax, 1
	mov	DWORD PTR _num_negative$[ebp], eax
$LN15@kvz_encode:

; 1086 :     }
; 1087 :   }

	jmp	$LN5@kvz_encode
$LN6@kvz_encode:

; 1088 : 
; 1089 :   // Fill the rest with -1.
; 1090 :   for (int i = state->frame->ref_LX_size[0]; i < 16; i++) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax+77]
	mov	DWORD PTR _i$2[ebp], ecx
	jmp	SHORT $LN10@kvz_encode
$LN8@kvz_encode:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@kvz_encode:
	cmp	DWORD PTR _i$2[ebp], 16			; 00000010H
	jge	SHORT $LN9@kvz_encode

; 1091 :     state->frame->ref_LX[0][i] = 0xff;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [ecx+edx], 255			; 000000ffH

; 1092 :   }

	jmp	SHORT $LN8@kvz_encode
$LN9@kvz_encode:

; 1093 :   for (int i = state->frame->ref_LX_size[1]; i < 16; i++) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN13@kvz_encode
$LN11@kvz_encode:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@kvz_encode:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jge	SHORT $LN12@kvz_encode

; 1094 :     state->frame->ref_LX[1][i] = 0xff;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax+ecx], 255			; 000000ffH

; 1095 :   }

	jmp	SHORT $LN11@kvz_encode
$LN12@kvz_encode:

; 1096 : 
; 1097 :   // Sort reference lists.
; 1098 :   encoder_ref_insertion_sort(state, state->frame->ref_LX[0], num_negative, false);

	push	0
	movzx	eax, BYTE PTR _num_negative$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR [edx+ecx+45]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_ref_insertion_sort
	add	esp, 16					; 00000010H

; 1099 :   encoder_ref_insertion_sort(state, state->frame->ref_LX[1], num_positive, true);

	push	1
	movzx	eax, BYTE PTR _num_positive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+45]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_encoder_ref_insertion_sort
	add	esp, 16					; 00000010H

; 1100 :   if (l1_negative_refs) {

	movzx	eax, BYTE PTR _l1_negative_refs$[ebp]
	test	eax, eax
	je	SHORT $LN1@kvz_encode

; 1101 :     encoder_ref_insertion_sort(state, state->frame->ref_LX[1] + num_positive, num_negative, false);

	push	0
	movzx	eax, BYTE PTR _num_negative$[ebp]
	push	eax
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _num_positive$[ebp]
	add	eax, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [ecx+eax+45]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_encoder_ref_insertion_sort
	add	esp, 16					; 00000010H
$LN1@kvz_encode:

; 1102 :   }
; 1103 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_create_ref_lists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_get_scan_order
_TEXT	SEGMENT
_cu_type$ = 8						; size = 1
_intra_mode$ = 12					; size = 4
_depth$ = 16						; size = 4
_kvz_get_scan_order PROC				; COMDAT

; 1581 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1582 :   // Scan mode is diagonal, except for 4x4+8x8 luma and 4x4 chroma, where:
; 1583 :   // - angular 6-14 = vertical
; 1584 :   // - angular 22-30 = horizontal
; 1585 :   if (cu_type == CU_INTRA && depth >= 3) {

	movsx	eax, BYTE PTR _cu_type$[ebp]
	cmp	eax, 1
	jne	SHORT $LN2@kvz_get_sc
	cmp	DWORD PTR _depth$[ebp], 3
	jl	SHORT $LN2@kvz_get_sc

; 1586 :     if (intra_mode >= 6 && intra_mode <= 14) {

	cmp	DWORD PTR _intra_mode$[ebp], 6
	jl	SHORT $LN3@kvz_get_sc
	cmp	DWORD PTR _intra_mode$[ebp], 14		; 0000000eH
	jg	SHORT $LN3@kvz_get_sc

; 1587 :       return SCAN_VER;

	mov	eax, 2
	jmp	SHORT $LN1@kvz_get_sc
	jmp	SHORT $LN2@kvz_get_sc
$LN3@kvz_get_sc:

; 1588 :     } else if (intra_mode >= 22 && intra_mode <= 30) {

	cmp	DWORD PTR _intra_mode$[ebp], 22		; 00000016H
	jl	SHORT $LN2@kvz_get_sc
	cmp	DWORD PTR _intra_mode$[ebp], 30		; 0000001eH
	jg	SHORT $LN2@kvz_get_sc

; 1589 :       return SCAN_HOR;

	mov	eax, 1
	jmp	SHORT $LN1@kvz_get_sc
$LN2@kvz_get_sc:

; 1590 :     }
; 1591 :   }
; 1592 : 
; 1593 :   return SCAN_DIAG;

	xor	eax, eax
$LN1@kvz_get_sc:

; 1594 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_get_scan_order ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_encoder_state_match_children_of_previous_frame
_TEXT	SEGMENT
_i$ = -8						; size = 4
_state$ = 8						; size = 4
_kvz_encoder_state_match_children_of_previous_frame PROC ; COMDAT

; 55   : int kvz_encoder_state_match_children_of_previous_frame(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 56   :   int i;
; 57   :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@kvz_encode:
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	SHORT $LN3@kvz_encode

; 58   :     //Child should also exist for previous encoder
; 59   :     assert(state->previous_encoder_state->children[i].encoder_control);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR _i$[ebp], 336
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax+edx], 0
	jne	SHORT $LN6@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_match_children_of_previous_frame@@9@9
	add	ecx, 4
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1HG@MHNMGNLG@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AAi?$AAo?$AAu?$AAs@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_encode:

; 60   :     state->children[i].previous_encoder_state = &state->previous_encoder_state->children[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	edx, DWORD PTR _i$[ebp], 336
	add	edx, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+eax+16], edx

; 61   :     kvz_encoder_state_match_children_of_previous_frame(&state->children[i]);

	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_kvz_encoder_state_match_children_of_previous_frame
	add	esp, 4

; 62   :   }

	jmp	$LN2@kvz_encode
$LN3@kvz_encode:

; 63   :   return 1;

	mov	eax, 1

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_match_children_of_previous_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_encoder_prepare
_TEXT	SEGMENT
_width$1 = -68						; size = 4
_height$2 = -56						; size = 4
_height$3 = -44						; size = 4
_width$4 = -32						; size = 4
_prev_state$ = -20					; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_kvz_encoder_prepare PROC				; COMDAT

; 1510 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1511 :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 1512 : 
; 1513 :   // The previous frame must be done before the next one is started.
; 1514 :   assert(state->frame->done);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+145]
	test	edx, edx
	jne	SHORT $LN7@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_prepare@@9@9
	add	eax, 4
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CG@CCMCAJBH@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAd@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@kvz_encode:

; 1515 : 
; 1516 :   if (state->frame->num == -1) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], -1
	jne	$LN2@kvz_encode

; 1517 :     // We're at the first frame, so don't care about all this stuff.
; 1518 :     state->frame->num = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+8], 0

; 1519 :     state->frame->poc = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], 0

; 1520 :     state->frame->irap_poc = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], 0

; 1521 :     assert(!state->tile->frame->source);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN8@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_prepare@@9@9
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DI@KGBGGKIA@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_encode:

; 1522 :     assert(!state->tile->frame->rec);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN9@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_prepare@@9@9
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@MIMKPNAK@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@kvz_encode:

; 1523 :     assert(!state->tile->frame->cu_array);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN10@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_prepare@@9@9
	add	eax, 13					; 0000000dH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@LIFLOPCP@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAi?$AAl?$AAe?$AA?9?$AA?$DO?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@kvz_encode:

; 1524 :     state->frame->prepared = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+144], 1

; 1525 : 
; 1526 :     return;

	jmp	$LN1@kvz_encode
$LN2@kvz_encode:

; 1527 :   }
; 1528 : 
; 1529 :   // NOTE: prev_state is equal to state when OWF is zero
; 1530 :   encoder_state_t *prev_state = state->previous_encoder_state;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _prev_state$[ebp], ecx

; 1531 : 
; 1532 :   if (state->previous_encoder_state != state) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _state$[ebp]
	je	SHORT $LN3@kvz_encode

; 1533 :     kvz_cu_array_free(&state->tile->frame->cu_array);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	push	edx
	call	_kvz_cu_array_free
	add	esp, 4

; 1534 :     unsigned width  = state->tile->frame->width_in_lcu  * LCU_WIDTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 6
	mov	DWORD PTR _width$4[ebp], eax

; 1535 :     unsigned height = state->tile->frame->height_in_lcu * LCU_WIDTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 6
	mov	DWORD PTR _height$3[ebp], eax

; 1536 :     state->tile->frame->cu_array = kvz_cu_array_alloc(width, height);

	mov	eax, DWORD PTR _height$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$4[ebp]
	push	ecx
	call	_kvz_cu_array_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax

; 1537 : 
; 1538 :     kvz_image_list_copy_contents(state->frame->ref, prev_state->frame->ref);

	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_kvz_image_list_copy_contents
	add	esp, 8

; 1539 :     kvz_encoder_create_ref_lists(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encoder_create_ref_lists
	add	esp, 4
$LN3@kvz_encode:

; 1540 :   }
; 1541 : 
; 1542 :   if (!encoder->cfg.gop_len ||
; 1543 :       !prev_state->frame->poc ||

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN5@kvz_encode
	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@kvz_encode
	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+291]
	test	ecx, ecx
	je	$LN4@kvz_encode
$LN5@kvz_encode:

; 1544 :       encoder->cfg.gop[prev_state->frame->gop_offset].is_ref) {
; 1545 : 
; 1546 :     // Store current list of POCs for use in TMVP derivation
; 1547 :     memcpy(prev_state->tile->frame->rec->ref_pocs, state->frame->ref->pocs, sizeof(int32_t)*state->frame->ref->used_size);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _prev_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 80					; 00000050H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1548 : 
; 1549 :     // Add previous reconstructed picture as a reference
; 1550 :     kvz_image_list_add(state->frame->ref,

	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 45					; 0000002dH
	push	ecx
	mov	edx, DWORD PTR _prev_state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _prev_state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_kvz_image_list_add
	add	esp, 20					; 00000014H

; 1551 :                    prev_state->tile->frame->rec,
; 1552 :                    prev_state->tile->frame->cu_array,
; 1553 :                    prev_state->frame->poc,
; 1554 :                    prev_state->frame->ref_LX);
; 1555 :     kvz_cu_array_free(&state->tile->frame->cu_array);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	push	edx
	call	_kvz_cu_array_free
	add	esp, 4

; 1556 :     unsigned height = state->tile->frame->height_in_lcu * LCU_WIDTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 6
	mov	DWORD PTR _height$2[ebp], eax

; 1557 :     unsigned width  = state->tile->frame->width_in_lcu  * LCU_WIDTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 6
	mov	DWORD PTR _width$1[ebp], eax

; 1558 :     state->tile->frame->cu_array = kvz_cu_array_alloc(width, height);

	mov	eax, DWORD PTR _height$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$1[ebp]
	push	ecx
	call	_kvz_cu_array_alloc
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+24], eax
$LN4@kvz_encode:

; 1559 :   }
; 1560 : 
; 1561 :   // Remove source and reconstructed picture.
; 1562 :   kvz_image_free(state->tile->frame->source);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 1563 :   state->tile->frame->source = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 1564 : 
; 1565 :   kvz_image_free(state->tile->frame->rec);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 1566 :   state->tile->frame->rec = NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 1567 : 
; 1568 :   kvz_cu_array_free(&state->tile->frame->cu_array);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	push	edx
	call	_kvz_cu_array_free
	add	esp, 4

; 1569 : 
; 1570 :   // Update POC and frame count.
; 1571 :   state->frame->num = prev_state->frame->num + 1;

	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+8], edx

; 1572 :   state->frame->poc = prev_state->frame->poc + 1;

	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+12], edx

; 1573 :   state->frame->irap_poc = prev_state->frame->irap_poc;

	mov	eax, DWORD PTR _prev_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx

; 1574 : 
; 1575 :   state->frame->prepared = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+144], 1
$LN1@kvz_encode:

; 1576 : 
; 1577 : 
; 1578 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_prepare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.c
;	COMDAT _kvz_encode_one_frame
_TEXT	SEGMENT
_job$ = -8						; size = 4
_state$ = 8						; size = 4
_frame$ = 12						; size = 4
_kvz_encode_one_frame PROC				; COMDAT

; 1481 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __FC331F14_encoderstate@c
	call	@__CheckForDebuggerJustMyCode@4

; 1482 :   encoder_state_init_new_frame(state, frame);

	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encoder_state_init_new_frame
	add	esp, 8

; 1483 :   encoder_state_encode(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_encode
	add	esp, 4

; 1484 : 
; 1485 :   threadqueue_job_t *job =

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	push	OFFSET _kvz_encoder_state_worker_write_bitstream
	call	_kvz_threadqueue_job_create
	add	esp, 8
	mov	DWORD PTR _job$[ebp], eax

; 1486 :     kvz_threadqueue_job_create(kvz_encoder_state_worker_write_bitstream, state);
; 1487 : 
; 1488 :   _encode_one_frame_add_bitstream_deps(state, job);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	__encode_one_frame_add_bitstream_deps
	add	esp, 8

; 1489 :   if (state->previous_encoder_state != state && state->previous_encoder_state->tqj_bitstream_written) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _state$[ebp]
	je	SHORT $LN2@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+324], 0
	je	SHORT $LN2@kvz_encode

; 1490 :     //We need to depend on previous bitstream generation
; 1491 :     kvz_threadqueue_job_dep_add(job, state->previous_encoder_state->tqj_bitstream_written);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+324]
	push	edx
	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	call	_kvz_threadqueue_job_dep_add
	add	esp, 8
$LN2@kvz_encode:

; 1492 :   }
; 1493 :   kvz_threadqueue_submit(state->encoder_control->threadqueue, job);

	mov	eax, DWORD PTR _job$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4516]
	push	eax
	call	_kvz_threadqueue_submit
	add	esp, 8

; 1494 :   assert(!state->tqj_bitstream_written);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+324], 0
	je	SHORT $LN4@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encode_one_frame@@9@9
	add	ecx, 13					; 0000000dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@LAICOLDG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DM@KIHMAPEG@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAt?$AAq?$AAj?$AA_?$AAb?$AAi?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@kvz_encode:

; 1495 :   state->tqj_bitstream_written = job;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _job$[ebp]
	mov	DWORD PTR [eax+324], ecx

; 1496 : 
; 1497 :   state->frame->done = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+145], 0

; 1498 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encode_one_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
;	COMDAT _kvz_crypto_delete
_TEXT	SEGMENT
_hdl$ = 8						; size = 4
_kvz_crypto_delete PROC					; COMDAT

; 61   : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __546CF5FC_crypto@h
	call	@__CheckForDebuggerJustMyCode@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_crypto_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
;	COMDAT _kvz_crypto_create
_TEXT	SEGMENT
_cfg$ = 8						; size = 4
_kvz_crypto_create PROC					; COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __546CF5FC_crypto@h
	call	@__CheckForDebuggerJustMyCode@4

; 51   :   return NULL;

	xor	eax, eax

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_crypto_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set_any
_TEXT	SEGMENT
tv79 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_cbf_is_set_any PROC					; COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 526  :   return cbf_is_set(cbf, depth, COLOR_Y) ||

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cbf$[ebp]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	1
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	movzx	eax, WORD PTR _cbf$[ebp]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv79[ebp], 1
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv79[ebp]

; 527  :          cbf_is_set(cbf, depth, COLOR_U) ||
; 528  :          cbf_is_set(cbf, depth, COLOR_V);
; 529  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
