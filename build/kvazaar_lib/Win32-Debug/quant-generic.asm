; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__2064FBD0_quant-generic@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategy_register_quant_generic
PUBLIC	_kvz_quant_generic
PUBLIC	_kvz_quantize_residual_generic
PUBLIC	_kvz_dequant_generic
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04BIJMKPLJ@?$AA?$AD?$AB?$AC@		; `string'
PUBLIC	?__LINE__Var@?0??kvz_quantize_residual_generic@@9@9 ; `kvz_quantize_residual_generic'::`1'::__LINE__Var
PUBLIC	??_C@_1JO@EBPHFOHG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@ ; `string'
PUBLIC	??_C@_1CM@EPFPLKPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAI?$AAN@ ; `string'
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_rdoq:PROC
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	_kvz_transformskip:PROC
EXTRN	_kvz_itransformskip:PROC
EXTRN	_kvz_transform2d:PROC
EXTRN	_kvz_itransform2d:PROC
EXTRN	_kvz_get_scaled_qp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allmul:PROC
EXTRN	__allshr:PROC
EXTRN	__aullshr:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_g_sig_last_scan:BYTE
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	_kvz_g_inv_quant_scales:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@EPFPLKPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAI?$AAN@
CONST	SEGMENT
??_C@_1CM@EPFPLKPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAI?$AAN@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'I'
	DB	00H, 'N', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D', 00H, 'T', 00H
	DB	'H', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@
CONST	SEGMENT
??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'A'
	DB	00H, 'X', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'D', 00H, 'T', 00H
	DB	'H', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@EBPHFOHG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1JO@EBPHFOHG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'e'
	DB	00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'i', 00H, 'c', 00H, '\', 00H, 'q', 00H, 'u', 00H, 'a'
	DB	00H, 'n', 00H, 't', 00H, '-', 00H, 'g', 00H, 'e', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'c', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_quantize_residual_generic@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_quantize_residual_generic@@9@9 DD 0cdH ; `kvz_quantize_residual_generic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04BIJMKPLJ@?$AA?$AD?$AB?$AC@
CONST	SEGMENT
??_C@_04BIJMKPLJ@?$AA?$AD?$AB?$AC@ DB 00H, 03H, 01H, 02H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _fast_coeff_cost_generic
_TEXT	SEGMENT
_curr_abs$1 = -64					; size = 4
_curr$2 = -52						; size = 2
_i$3 = -40						; size = 4
_weights_unpacked$ = -28				; size = 8
_sum$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_coeff$ = 8						; size = 4
_width$ = 12						; size = 4
_weights$ = 16						; size = 8
_fast_coeff_cost_generic PROC				; COMDAT

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 361  :   uint32_t sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 362  :   uint16_t weights_unpacked[4];
; 363  : 
; 364  :   get_coeff_weights(weights, weights_unpacked);

	lea	eax, DWORD PTR _weights_unpacked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _weights$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _weights$[ebp]
	push	edx
	call	_get_coeff_weights
	add	esp, 12					; 0000000cH

; 365  : 
; 366  :   for (int32_t i = 0; i < width * width; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@fast_coeff
$LN2@fast_coeff:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@fast_coeff:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN3@fast_coeff

; 367  :      int16_t curr = coeff[i];

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _coeff$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _curr$2[ebp], dx

; 368  :     uint32_t curr_abs = abs(curr);

	movsx	eax, WORD PTR _curr$2[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _curr_abs$1[ebp], eax

; 369  :     if (curr_abs > 3) {

	cmp	DWORD PTR _curr_abs$1[ebp], 3
	jbe	SHORT $LN5@fast_coeff

; 370  :       curr_abs = 3;

	mov	DWORD PTR _curr_abs$1[ebp], 3
$LN5@fast_coeff:

; 371  :     }
; 372  :     sum += weights_unpacked[curr_abs];

	mov	eax, DWORD PTR _curr_abs$1[ebp]
	movzx	ecx, WORD PTR _weights_unpacked$[ebp+eax*2]
	add	ecx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx

; 373  :   }

	jmp	SHORT $LN2@fast_coeff
$LN3@fast_coeff:

; 374  :   return (sum + (1 << 7)) >> 8;

	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, 128				; 00000080H
	shr	eax, 8

; 375  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@fast_coeff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@fast_coeff:
	DD	1
	DD	$LN8@fast_coeff
$LN8@fast_coeff:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN7@fast_coeff
$LN7@fast_coeff:
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_fast_coeff_cost_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _get_coeff_weights
_TEXT	SEGMENT
_wts_packed$ = 8					; size = 8
_weights$ = 16						; size = 4
_get_coeff_weights PROC					; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 353  :   weights[0] = (wts_packed >>  0) & 0xffff;

	mov	eax, DWORD PTR _wts_packed$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _weights$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 354  :   weights[1] = (wts_packed >> 16) & 0xffff;

	mov	eax, DWORD PTR _wts_packed$[ebp]
	mov	edx, DWORD PTR _wts_packed$[ebp+4]
	mov	cl, 16					; 00000010H
	call	__aullshr
	and	eax, 65535				; 0000ffffH
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _weights$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 355  :   weights[2] = (wts_packed >> 32) & 0xffff;

	mov	eax, DWORD PTR _wts_packed$[ebp]
	mov	edx, DWORD PTR _wts_packed$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	and	eax, 65535				; 0000ffffH
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _weights$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 356  :   weights[3] = (wts_packed >> 48) & 0xffff;

	mov	eax, DWORD PTR _wts_packed$[ebp]
	mov	edx, DWORD PTR _wts_packed$[ebp+4]
	mov	cl, 48					; 00000030H
	call	__aullshr
	and	eax, 65535				; 0000ffffH
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _weights$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 357  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_coeff_weights ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _coeff_abs_sum_generic
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_sum$ = -8						; size = 4
_coeffs$ = 8						; size = 4
_length$ = 12						; size = 4
_coeff_abs_sum_generic PROC				; COMDAT

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 344  :   uint32_t sum = 0;

	mov	DWORD PTR _sum$[ebp], 0

; 345  :   for (int i = 0; i < length; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@coeff_abs_
$LN2@coeff_abs_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@coeff_abs_:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jae	SHORT $LN3@coeff_abs_

; 346  :     sum += abs(coeffs[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _coeffs$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _sum$[ebp]
	mov	DWORD PTR _sum$[ebp], eax

; 347  :   }

	jmp	SHORT $LN2@coeff_abs_
$LN3@coeff_abs_:

; 348  :   return sum;

	mov	eax, DWORD PTR _sum$[ebp]

; 349  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_coeff_abs_sum_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _kvz_dequant_generic
_TEXT	SEGMENT
tv246 = -336						; size = 4
tv220 = -336						; size = 4
tv200 = -336						; size = 4
tv166 = -336						; size = 4
tv247 = -332						; size = 4
tv221 = -332						; size = 4
tv201 = -332						; size = 4
tv167 = -332						; size = 4
tv243 = -328						; size = 4
tv211 = -328						; size = 4
tv185 = -328						; size = 4
tv163 = -328						; size = 4
tv93 = -328						; size = 4
_scale$1 = -128						; size = 4
_dequant_coef$2 = -116					; size = 4
_scalinglist_type$3 = -104				; size = 4
_log2_tr_size$4 = -92					; size = 4
_qp_scaled$ = -80					; size = 4
_transform_shift$ = -68					; size = 4
_n$ = -56						; size = 4
_coeff_q$ = -44						; size = 4
_add$ = -32						; size = 4
_shift$ = -20						; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_q_coef$ = 12						; size = 4
_coef$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_type$ = 28						; size = 1
_block_type$ = 32					; size = 1
_kvz_dequant_generic PROC				; COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 300  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 301  :   int32_t shift,add,coeff_q;
; 302  :   int32_t n;
; 303  :   int32_t transform_shift = 15 - encoder->bitdepth - (kvz_g_convert_to_bit[ width ] + 2);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 15					; 0000000fH
	sub	edx, ecx
	mov	eax, DWORD PTR _width$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	sub	edx, ecx
	mov	DWORD PTR _transform_shift$[ebp], edx

; 304  : 
; 305  :   int32_t qp_scaled = kvz_get_scaled_qp(type, state->qp, (encoder->bitdepth-8)*6);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	imul	edx, ecx, 6
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+312]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	call	_kvz_get_scaled_qp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _qp_scaled$[ebp], eax

; 306  : 
; 307  :   shift = 20 - QUANT_SHIFT - transform_shift;

	mov	eax, 6
	sub	eax, DWORD PTR _transform_shift$[ebp]
	mov	DWORD PTR _shift$[ebp], eax

; 308  : 
; 309  :   if (encoder->scaling_list.enable)

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2552]
	test	ecx, ecx
	je	$LN11@kvz_dequan

; 310  :   {
; 311  :     uint32_t log2_tr_size = kvz_g_convert_to_bit[ width ] + 2;

	mov	eax, DWORD PTR _width$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_tr_size$4[ebp], ecx

; 312  :     int32_t scalinglist_type = (block_type == CU_INTRA ? 0 : 3) + (int8_t)("\0\3\1\2"[type]);

	movsx	eax, BYTE PTR _block_type$[ebp]
	cmp	eax, 1
	jne	SHORT $LN16@kvz_dequan
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN17@kvz_dequan
$LN16@kvz_dequan:
	mov	DWORD PTR tv93[ebp], 3
$LN17@kvz_dequan:
	movsx	ecx, BYTE PTR _type$[ebp]
	movsx	edx, BYTE PTR ??_C@_04BIJMKPLJ@?$AA?$AD?$AB?$AC@[ecx]
	add	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _scalinglist_type$3[ebp], edx

; 313  : 
; 314  :     const int32_t *dequant_coef = encoder->scaling_list.de_quant_coeff[log2_tr_size-2][scalinglist_type][qp_scaled%6];

	mov	eax, DWORD PTR _log2_tr_size$4[ebp]
	sub	eax, 2
	imul	ecx, eax, 144
	mov	edx, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+3324]
	imul	edx, DWORD PTR _scalinglist_type$3[ebp], 24
	add	ecx, edx
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _dequant_coef$2[ebp], eax

; 315  :     shift += 4;

	mov	eax, DWORD PTR _shift$[ebp]
	add	eax, 4
	mov	DWORD PTR _shift$[ebp], eax

; 316  : 
; 317  :     if (shift >qp_scaled / 6) {

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	cmp	DWORD PTR _shift$[ebp], eax
	jle	$LN13@kvz_dequan

; 318  :       add = 1 << (shift - qp_scaled/6 - 1);

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, eax
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _add$[ebp], edx

; 319  : 
; 320  :       for (n = 0; n < width * height; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN4@kvz_dequan
$LN2@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN4@kvz_dequan:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN3@kvz_dequan

; 321  :         coeff_q = ((q_coef[n] * dequant_coef[n]) + add ) >> (shift -  qp_scaled/6);

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	esi, WORD PTR [ecx+eax*2]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _dequant_coef$2[ebp]
	imul	esi, DWORD PTR [eax+edx*4]
	add	esi, DWORD PTR _add$[ebp]
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, eax
	sar	esi, cl
	mov	DWORD PTR _coeff_q$[ebp], esi

; 322  :         coef[n] = (coeff_t)CLIP(-32768,32767,coeff_q);

	cmp	DWORD PTR _coeff_q$[ebp], 32767		; 00007fffH
	jle	SHORT $LN18@kvz_dequan
	mov	DWORD PTR tv163[ebp], 32767		; 00007fffH
	jmp	SHORT $LN19@kvz_dequan
$LN18@kvz_dequan:
	mov	eax, DWORD PTR _coeff_q$[ebp]
	mov	DWORD PTR tv163[ebp], eax
$LN19@kvz_dequan:
	cmp	DWORD PTR tv163[ebp], -32768		; ffff8000H
	jge	SHORT $LN22@kvz_dequan
	mov	DWORD PTR tv167[ebp], -32768		; ffff8000H
	jmp	SHORT $LN23@kvz_dequan
$LN22@kvz_dequan:
	cmp	DWORD PTR _coeff_q$[ebp], 32767		; 00007fffH
	jle	SHORT $LN20@kvz_dequan
	mov	DWORD PTR tv166[ebp], 32767		; 00007fffH
	jmp	SHORT $LN21@kvz_dequan
$LN20@kvz_dequan:
	mov	ecx, DWORD PTR _coeff_q$[ebp]
	mov	DWORD PTR tv166[ebp], ecx
$LN21@kvz_dequan:
	mov	edx, DWORD PTR tv166[ebp]
	mov	DWORD PTR tv167[ebp], edx
$LN23@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	mov	dx, WORD PTR tv167[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 323  :       }

	jmp	$LN2@kvz_dequan
$LN3@kvz_dequan:

; 324  :     } else {

	jmp	$LN14@kvz_dequan
$LN13@kvz_dequan:

; 325  :       for (n = 0; n < width * height; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN7@kvz_dequan
$LN5@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@kvz_dequan:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN14@kvz_dequan

; 326  :         // Clip to avoid possible overflow in following shift left operation
; 327  :         coeff_q   = CLIP(-32768, 32767, q_coef[n] * dequant_coef[n]);

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _dequant_coef$2[ebp]
	imul	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN24@kvz_dequan
	mov	DWORD PTR tv185[ebp], 32767		; 00007fffH
	jmp	SHORT $LN25@kvz_dequan
$LN24@kvz_dequan:
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _dequant_coef$2[ebp]
	imul	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv185[ebp], ecx
$LN25@kvz_dequan:
	cmp	DWORD PTR tv185[ebp], -32768		; ffff8000H
	jge	SHORT $LN28@kvz_dequan
	mov	DWORD PTR tv201[ebp], -32768		; ffff8000H
	jmp	SHORT $LN29@kvz_dequan
$LN28@kvz_dequan:
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _q_coef$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _dequant_coef$2[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, 32767				; 00007fffH
	jle	SHORT $LN26@kvz_dequan
	mov	DWORD PTR tv200[ebp], 32767		; 00007fffH
	jmp	SHORT $LN27@kvz_dequan
$LN26@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _dequant_coef$2[ebp]
	imul	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv200[ebp], edx
$LN27@kvz_dequan:
	mov	edx, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv201[ebp], edx
$LN29@kvz_dequan:
	mov	eax, DWORD PTR tv201[ebp]
	mov	DWORD PTR _coeff_q$[ebp], eax

; 328  :         coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q << (qp_scaled/6 - shift));

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	sub	eax, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _coeff_q$[ebp]
	mov	ecx, eax
	shl	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN30@kvz_dequan
	mov	DWORD PTR tv211[ebp], 32767		; 00007fffH
	jmp	SHORT $LN31@kvz_dequan
$LN30@kvz_dequan:
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	sub	eax, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _coeff_q$[ebp]
	mov	ecx, eax
	shl	edx, cl
	mov	DWORD PTR tv211[ebp], edx
$LN31@kvz_dequan:
	cmp	DWORD PTR tv211[ebp], -32768		; ffff8000H
	jge	SHORT $LN34@kvz_dequan
	mov	DWORD PTR tv221[ebp], -32768		; ffff8000H
	jmp	SHORT $LN35@kvz_dequan
$LN34@kvz_dequan:
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	sub	eax, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _coeff_q$[ebp]
	mov	ecx, eax
	shl	edx, cl
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN32@kvz_dequan
	mov	DWORD PTR tv220[ebp], 32767		; 00007fffH
	jmp	SHORT $LN33@kvz_dequan
$LN32@kvz_dequan:
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	sub	eax, DWORD PTR _shift$[ebp]
	mov	edx, DWORD PTR _coeff_q$[ebp]
	mov	ecx, eax
	shl	edx, cl
	mov	DWORD PTR tv220[ebp], edx
$LN33@kvz_dequan:
	mov	eax, DWORD PTR tv220[ebp]
	mov	DWORD PTR tv221[ebp], eax
$LN35@kvz_dequan:
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _coef$[ebp]
	mov	ax, WORD PTR tv221[ebp]
	mov	WORD PTR [edx+ecx*2], ax

; 329  :       }

	jmp	$LN5@kvz_dequan
$LN14@kvz_dequan:

; 330  :     }
; 331  :   } else {

	jmp	$LN1@kvz_dequan
$LN11@kvz_dequan:

; 332  :     int32_t scale = kvz_g_inv_quant_scales[qp_scaled%6] << (qp_scaled/6);

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	movsx	esi, WORD PTR _kvz_g_inv_quant_scales[edx*2]
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	ecx, eax
	shl	esi, cl
	mov	DWORD PTR _scale$1[ebp], esi

; 333  :     add = 1 << (shift-1);

	mov	ecx, DWORD PTR _shift$[ebp]
	sub	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR _add$[ebp], eax

; 334  : 
; 335  :     for (n = 0; n < width*height; n++) {

	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN10@kvz_dequan
$LN8@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN10@kvz_dequan:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _n$[ebp], eax
	jge	$LN1@kvz_dequan

; 336  :       coeff_q   = (q_coef[n] * scale + add) >> shift;

	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	imul	edx, DWORD PTR _scale$1[ebp]
	add	edx, DWORD PTR _add$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _coeff_q$[ebp], edx

; 337  :       coef[n] = (coeff_t)CLIP(-32768, 32767, coeff_q);

	cmp	DWORD PTR _coeff_q$[ebp], 32767		; 00007fffH
	jle	SHORT $LN36@kvz_dequan
	mov	DWORD PTR tv243[ebp], 32767		; 00007fffH
	jmp	SHORT $LN37@kvz_dequan
$LN36@kvz_dequan:
	mov	eax, DWORD PTR _coeff_q$[ebp]
	mov	DWORD PTR tv243[ebp], eax
$LN37@kvz_dequan:
	cmp	DWORD PTR tv243[ebp], -32768		; ffff8000H
	jge	SHORT $LN40@kvz_dequan
	mov	DWORD PTR tv247[ebp], -32768		; ffff8000H
	jmp	SHORT $LN41@kvz_dequan
$LN40@kvz_dequan:
	cmp	DWORD PTR _coeff_q$[ebp], 32767		; 00007fffH
	jle	SHORT $LN38@kvz_dequan
	mov	DWORD PTR tv246[ebp], 32767		; 00007fffH
	jmp	SHORT $LN39@kvz_dequan
$LN38@kvz_dequan:
	mov	ecx, DWORD PTR _coeff_q$[ebp]
	mov	DWORD PTR tv246[ebp], ecx
$LN39@kvz_dequan:
	mov	edx, DWORD PTR tv246[ebp]
	mov	DWORD PTR tv247[ebp], edx
$LN41@kvz_dequan:
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	mov	dx, WORD PTR tv247[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 338  :     }

	jmp	$LN8@kvz_dequan
$LN1@kvz_dequan:

; 339  :   }
; 340  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_dequant_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _kvz_quantize_residual_generic
_TEXT	SEGMENT
tv264 = -5896						; size = 4
tv265 = -5892						; size = 4
tv212 = -5892						; size = 4
tv259 = -5888						; size = 4
tv213 = -5888						; size = 4
tv189 = -5888						; size = 4
tv175 = -5888						; size = 4
tv165 = -5888						; size = 4
_x$1 = -4344						; size = 4
_y$2 = -4332						; size = 4
_val$3 = -4320						; size = 2
_x$4 = -4308						; size = 4
_y$5 = -4296						; size = 4
_i$6 = -4284						; size = 4
_tr_depth$7 = -4269					; size = 1
_x$8 = -4260						; size = 4
_y$9 = -4248						; size = 4
_has_coeffs$ = -4236					; size = 4
_coeff$ = -4224						; size = 2048
_residual$ = -2112					; size = 2048
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_cur_cu$ = 12						; size = 4
_width$ = 16						; size = 4
_color$ = 20						; size = 4
_scan_order$ = 24					; size = 4
_use_trskip$ = 28					; size = 4
_in_stride$ = 32					; size = 4
_out_stride$ = 36					; size = 4
_ref_in$ = 40						; size = 4
_pred_in$ = 44						; size = 4
_rec_out$ = 48						; size = 4
_coeff_out$ = 52					; size = 4
_early_skip$ = 56					; size = 1
_kvz_quantize_residual_generic PROC			; COMDAT

; 205  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -64				; ffffffc0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 5944				; 00001738H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5944]
	mov	ecx, 1486				; 000005ceH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 206  :   // Temporary arrays to pass data to and from kvz_quant and transform functions.
; 207  :   ALIGNED(64) int16_t residual[TR_MAX_WIDTH * TR_MAX_WIDTH];
; 208  :   ALIGNED(64) coeff_t coeff[TR_MAX_WIDTH * TR_MAX_WIDTH];
; 209  : 
; 210  :   int has_coeffs = 0;

	mov	DWORD PTR _has_coeffs$[ebp], 0

; 211  : 
; 212  :   assert(width <= TR_MAX_WIDTH);

	cmp	DWORD PTR _width$[ebx], 32		; 00000020H
	jle	SHORT $LN35@kvz_quanti
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_quantize_residual_generic@@9@9
	add	eax, 7
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JO@EBPHFOHG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CM@NFHNEOJC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAA?$AAX@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@kvz_quanti:

; 213  :   assert(width >= TR_MIN_WIDTH);

	cmp	DWORD PTR _width$[ebx], 4
	jge	SHORT $LN36@kvz_quanti
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_quantize_residual_generic@@9@9
	add	eax, 8
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JO@EBPHFOHG@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CM@EPFPLKPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAT?$AAR?$AA_?$AAM?$AAI?$AAN@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@kvz_quanti:

; 214  : 
; 215  :   // Get residual. (ref_in - pred_in -> residual)
; 216  :   {
; 217  :     int y, x;
; 218  :     for (y = 0; y < width; ++y) {

	mov	DWORD PTR _y$9[ebp], 0
	jmp	SHORT $LN4@kvz_quanti
$LN2@kvz_quanti:
	mov	eax, DWORD PTR _y$9[ebp]
	add	eax, 1
	mov	DWORD PTR _y$9[ebp], eax
$LN4@kvz_quanti:
	mov	eax, DWORD PTR _y$9[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	SHORT $LN3@kvz_quanti

; 219  :       for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$8[ebp], 0
	jmp	SHORT $LN7@kvz_quanti
$LN5@kvz_quanti:
	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, 1
	mov	DWORD PTR _x$8[ebp], eax
$LN7@kvz_quanti:
	mov	eax, DWORD PTR _x$8[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	SHORT $LN6@kvz_quanti

; 220  :         residual[x + y * width] = (int16_t)(ref_in[x + y * in_stride] - pred_in[x + y * in_stride]);

	mov	eax, DWORD PTR _y$9[ebp]
	imul	eax, DWORD PTR _in_stride$[ebx]
	add	eax, DWORD PTR _x$8[ebp]
	mov	ecx, DWORD PTR _ref_in$[ebx]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _y$9[ebp]
	imul	eax, DWORD PTR _in_stride$[ebx]
	add	eax, DWORD PTR _x$8[ebp]
	mov	ecx, DWORD PTR _pred_in$[ebx]
	movzx	eax, BYTE PTR [ecx+eax]
	sub	edx, eax
	mov	ecx, DWORD PTR _y$9[ebp]
	imul	ecx, DWORD PTR _width$[ebx]
	add	ecx, DWORD PTR _x$8[ebp]
	mov	WORD PTR _residual$[ebp+ecx*2], dx

; 221  :       }

	jmp	SHORT $LN5@kvz_quanti
$LN6@kvz_quanti:

; 222  :     }

	jmp	$LN2@kvz_quanti
$LN3@kvz_quanti:

; 223  :   }
; 224  : 
; 225  :   // Transform residual. (residual -> coeff)
; 226  :   if (use_trskip) {

	cmp	DWORD PTR _use_trskip$[ebx], 0
	je	SHORT $LN23@kvz_quanti

; 227  :     kvz_transformskip(state->encoder_control, residual, coeff, width);

	movzx	eax, BYTE PTR _width$[ebx]
	push	eax
	lea	ecx, DWORD PTR _coeff$[ebp]
	push	ecx
	lea	edx, DWORD PTR _residual$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_transformskip
	add	esp, 16					; 00000010H

; 228  :   }

	jmp	SHORT $LN24@kvz_quanti
$LN23@kvz_quanti:

; 229  :   else {
; 230  :     kvz_transform2d(state->encoder_control, residual, coeff, width, color, cur_cu->type);

	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _color$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _width$[ebx]
	push	ecx
	lea	edx, DWORD PTR _coeff$[ebp]
	push	edx
	lea	eax, DWORD PTR _residual$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_kvz_transform2d
	add	esp, 24					; 00000018H
$LN24@kvz_quanti:

; 231  :   }
; 232  : 
; 233  :   // Quantize coeffs. (coeff -> coeff_out)
; 234  :   if (state->encoder_control->cfg.rdoq_enable &&

	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN25@kvz_quanti
	cmp	DWORD PTR _width$[ebx], 4
	jg	SHORT $LN27@kvz_quanti
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2372], 0
	jne	$LN25@kvz_quanti
$LN27@kvz_quanti:

; 235  :       (width > 4 || !state->encoder_control->cfg.rdoq_skip))
; 236  :   {
; 237  :     int8_t tr_depth = cur_cu->tr_depth - cur_cu->depth;

	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	eax, cl
	sub	edx, eax
	mov	BYTE PTR _tr_depth$7[ebp], dl

; 238  :     tr_depth += (cur_cu->part_size == SIZE_NxN ? 1 : 0);

	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 3
	jne	SHORT $LN37@kvz_quanti
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN38@kvz_quanti
$LN37@kvz_quanti:
	mov	DWORD PTR tv165[ebp], 0
$LN38@kvz_quanti:
	movsx	eax, BYTE PTR _tr_depth$7[ebp]
	add	eax, DWORD PTR tv165[ebp]
	mov	BYTE PTR _tr_depth$7[ebp], al

; 239  :     kvz_rdoq(state, coeff, coeff_out, width, width, (color == COLOR_Y ? 0 : 2),

	cmp	DWORD PTR _color$[ebx], 0
	jne	SHORT $LN39@kvz_quanti
	mov	DWORD PTR tv175[ebp], 0
	jmp	SHORT $LN40@kvz_quanti
$LN39@kvz_quanti:
	mov	DWORD PTR tv175[ebp], 2
$LN40@kvz_quanti:
	movzx	eax, BYTE PTR _tr_depth$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebx]
	mov	dl, BYTE PTR [ecx]
	and	dl, 3
	movzx	eax, dl
	push	eax
	movzx	ecx, BYTE PTR _scan_order$[ebx]
	push	ecx
	movzx	edx, BYTE PTR tv175[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _width$[ebx]
	push	ecx
	mov	edx, DWORD PTR _coeff_out$[ebx]
	push	edx
	lea	eax, DWORD PTR _coeff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	push	ecx
	call	_kvz_rdoq
	add	esp, 36					; 00000024H

; 240  :       scan_order, cur_cu->type, tr_depth);
; 241  :   } else {

	jmp	SHORT $LN26@kvz_quanti
$LN25@kvz_quanti:

; 242  :     kvz_quant(state, coeff, coeff_out, width, width, (color == COLOR_Y ? 0 : 2),

	cmp	DWORD PTR _color$[ebx], 0
	jne	SHORT $LN41@kvz_quanti
	mov	DWORD PTR tv189[ebp], 0
	jmp	SHORT $LN42@kvz_quanti
$LN41@kvz_quanti:
	mov	DWORD PTR tv189[ebp], 2
$LN42@kvz_quanti:
	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	mov	esi, esp
	movzx	edx, cl
	push	edx
	movzx	eax, BYTE PTR _scan_order$[ebx]
	push	eax
	movzx	ecx, BYTE PTR tv189[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebx]
	push	edx
	mov	eax, DWORD PTR _width$[ebx]
	push	eax
	mov	ecx, DWORD PTR _coeff_out$[ebx]
	push	ecx
	lea	edx, DWORD PTR _coeff$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	call	DWORD PTR _kvz_quant
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@kvz_quanti:

; 243  :       scan_order, cur_cu->type);
; 244  :   }
; 245  : 
; 246  :   // Check if there are any non-zero coefficients.
; 247  :   {
; 248  :     int i;
; 249  :     for (i = 0; i < width * width; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN10@kvz_quanti
$LN8@kvz_quanti:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN10@kvz_quanti:
	mov	eax, DWORD PTR _width$[ebx]
	imul	eax, DWORD PTR _width$[ebx]
	cmp	DWORD PTR _i$6[ebp], eax
	jge	SHORT $LN9@kvz_quanti

; 250  :       if (coeff_out[i] != 0) {

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _coeff_out$[ebx]
	movsx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	je	SHORT $LN28@kvz_quanti

; 251  :         has_coeffs = 1;

	mov	DWORD PTR _has_coeffs$[ebp], 1

; 252  :         break;

	jmp	SHORT $LN9@kvz_quanti
$LN28@kvz_quanti:

; 253  :       }
; 254  :     }

	jmp	SHORT $LN8@kvz_quanti
$LN9@kvz_quanti:

; 255  :   }
; 256  : 
; 257  :   // Do the inverse quantization and transformation and the reconstruction to
; 258  :   // rec_out.
; 259  :   if (has_coeffs && !early_skip) {

	cmp	DWORD PTR _has_coeffs$[ebp], 0
	je	$LN29@kvz_quanti
	movzx	eax, BYTE PTR _early_skip$[ebx]
	test	eax, eax
	jne	$LN29@kvz_quanti

; 260  :     int y, x;
; 261  : 
; 262  :     // Get quantized residual. (coeff_out -> coeff -> residual)
; 263  :     kvz_dequant(state, coeff_out, coeff, width, width, (color == COLOR_Y ? 0 : (color == COLOR_U ? 2 : 3)), cur_cu->type);

	cmp	DWORD PTR _color$[ebx], 0
	jne	SHORT $LN45@kvz_quanti
	mov	DWORD PTR tv213[ebp], 0
	jmp	SHORT $LN46@kvz_quanti
$LN45@kvz_quanti:
	cmp	DWORD PTR _color$[ebx], 1
	jne	SHORT $LN43@kvz_quanti
	mov	DWORD PTR tv212[ebp], 2
	jmp	SHORT $LN44@kvz_quanti
$LN43@kvz_quanti:
	mov	DWORD PTR tv212[ebp], 3
$LN44@kvz_quanti:
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR tv213[ebp], eax
$LN46@kvz_quanti:
	mov	ecx, DWORD PTR _cur_cu$[ebx]
	mov	dl, BYTE PTR [ecx]
	and	dl, 3
	mov	esi, esp
	movzx	eax, dl
	push	eax
	movzx	ecx, BYTE PTR tv213[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebx]
	push	edx
	mov	eax, DWORD PTR _width$[ebx]
	push	eax
	lea	ecx, DWORD PTR _coeff$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coeff_out$[ebx]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	call	DWORD PTR _kvz_dequant
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  :     if (use_trskip) {

	cmp	DWORD PTR _use_trskip$[ebx], 0
	je	SHORT $LN31@kvz_quanti

; 265  :       kvz_itransformskip(state->encoder_control, residual, coeff, width);

	movzx	eax, BYTE PTR _width$[ebx]
	push	eax
	lea	ecx, DWORD PTR _coeff$[ebp]
	push	ecx
	lea	edx, DWORD PTR _residual$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_itransformskip
	add	esp, 16					; 00000010H

; 266  :     }

	jmp	SHORT $LN32@kvz_quanti
$LN31@kvz_quanti:

; 267  :     else {
; 268  :       kvz_itransform2d(state->encoder_control, residual, coeff, width, color, cur_cu->type);

	mov	eax, DWORD PTR _cur_cu$[ebx]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _color$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _width$[ebx]
	push	ecx
	lea	edx, DWORD PTR _coeff$[ebp]
	push	edx
	lea	eax, DWORD PTR _residual$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebx]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_kvz_itransform2d
	add	esp, 24					; 00000018H
$LN32@kvz_quanti:

; 269  :     }
; 270  : 
; 271  :     // Get quantized reconstruction. (residual + pred_in -> rec_out)
; 272  :     for (y = 0; y < width; ++y) {

	mov	DWORD PTR _y$5[ebp], 0
	jmp	SHORT $LN13@kvz_quanti
$LN11@kvz_quanti:
	mov	eax, DWORD PTR _y$5[ebp]
	add	eax, 1
	mov	DWORD PTR _y$5[ebp], eax
$LN13@kvz_quanti:
	mov	eax, DWORD PTR _y$5[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	$LN12@kvz_quanti

; 273  :       for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$4[ebp], 0
	jmp	SHORT $LN16@kvz_quanti
$LN14@kvz_quanti:
	mov	eax, DWORD PTR _x$4[ebp]
	add	eax, 1
	mov	DWORD PTR _x$4[ebp], eax
$LN16@kvz_quanti:
	mov	eax, DWORD PTR _x$4[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	$LN15@kvz_quanti

; 274  :         int16_t val = residual[x + y * width] + pred_in[x + y * in_stride];

	mov	eax, DWORD PTR _y$5[ebp]
	imul	eax, DWORD PTR _width$[ebx]
	add	eax, DWORD PTR _x$4[ebp]
	movsx	ecx, WORD PTR _residual$[ebp+eax*2]
	mov	edx, DWORD PTR _y$5[ebp]
	imul	edx, DWORD PTR _in_stride$[ebx]
	add	edx, DWORD PTR _x$4[ebp]
	mov	eax, DWORD PTR _pred_in$[ebx]
	movzx	edx, BYTE PTR [eax+edx]
	add	ecx, edx
	mov	WORD PTR _val$3[ebp], cx

; 275  :         rec_out[x + y * out_stride] = (kvz_pixel)CLIP(0, PIXEL_MAX, val);

	movsx	eax, WORD PTR _val$3[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN47@kvz_quanti
	mov	DWORD PTR tv259[ebp], 255		; 000000ffH
	jmp	SHORT $LN48@kvz_quanti
$LN47@kvz_quanti:
	movsx	ecx, WORD PTR _val$3[ebp]
	mov	DWORD PTR tv259[ebp], ecx
$LN48@kvz_quanti:
	cmp	DWORD PTR tv259[ebp], 0
	jge	SHORT $LN51@kvz_quanti
	mov	DWORD PTR tv265[ebp], 0
	jmp	SHORT $LN52@kvz_quanti
$LN51@kvz_quanti:
	movsx	edx, WORD PTR _val$3[ebp]
	cmp	edx, 255				; 000000ffH
	jle	SHORT $LN49@kvz_quanti
	mov	DWORD PTR tv264[ebp], 255		; 000000ffH
	jmp	SHORT $LN50@kvz_quanti
$LN49@kvz_quanti:
	movsx	eax, WORD PTR _val$3[ebp]
	mov	DWORD PTR tv264[ebp], eax
$LN50@kvz_quanti:
	mov	ecx, DWORD PTR tv264[ebp]
	mov	DWORD PTR tv265[ebp], ecx
$LN52@kvz_quanti:
	mov	edx, DWORD PTR _y$5[ebp]
	imul	edx, DWORD PTR _out_stride$[ebx]
	add	edx, DWORD PTR _x$4[ebp]
	mov	eax, DWORD PTR _rec_out$[ebx]
	mov	cl, BYTE PTR tv265[ebp]
	mov	BYTE PTR [eax+edx], cl

; 276  :       }

	jmp	$LN14@kvz_quanti
$LN15@kvz_quanti:

; 277  :     }

	jmp	$LN11@kvz_quanti
$LN12@kvz_quanti:

; 278  :   }

	jmp	$LN30@kvz_quanti
$LN29@kvz_quanti:

; 279  :   else if (rec_out != pred_in) {

	mov	eax, DWORD PTR _rec_out$[ebx]
	cmp	eax, DWORD PTR _pred_in$[ebx]
	je	SHORT $LN30@kvz_quanti

; 280  :     // With no coeffs and rec_out == pred_int we skip copying the coefficients
; 281  :     // because the reconstruction is just the prediction.
; 282  :     int y, x;
; 283  : 
; 284  :     for (y = 0; y < width; ++y) {

	mov	DWORD PTR _y$2[ebp], 0
	jmp	SHORT $LN19@kvz_quanti
$LN17@kvz_quanti:
	mov	eax, DWORD PTR _y$2[ebp]
	add	eax, 1
	mov	DWORD PTR _y$2[ebp], eax
$LN19@kvz_quanti:
	mov	eax, DWORD PTR _y$2[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	SHORT $LN30@kvz_quanti

; 285  :       for (x = 0; x < width; ++x) {

	mov	DWORD PTR _x$1[ebp], 0
	jmp	SHORT $LN22@kvz_quanti
$LN20@kvz_quanti:
	mov	eax, DWORD PTR _x$1[ebp]
	add	eax, 1
	mov	DWORD PTR _x$1[ebp], eax
$LN22@kvz_quanti:
	mov	eax, DWORD PTR _x$1[ebp]
	cmp	eax, DWORD PTR _width$[ebx]
	jge	SHORT $LN21@kvz_quanti

; 286  :         rec_out[x + y * out_stride] = pred_in[x + y * in_stride];

	mov	eax, DWORD PTR _y$2[ebp]
	imul	eax, DWORD PTR _in_stride$[ebx]
	add	eax, DWORD PTR _x$1[ebp]
	mov	ecx, DWORD PTR _y$2[ebp]
	imul	ecx, DWORD PTR _out_stride$[ebx]
	add	ecx, DWORD PTR _x$1[ebp]
	mov	edx, DWORD PTR _rec_out$[ebx]
	mov	esi, DWORD PTR _pred_in$[ebx]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [edx+ecx], al

; 287  :       }

	jmp	SHORT $LN20@kvz_quanti
$LN21@kvz_quanti:

; 288  :     }

	jmp	SHORT $LN17@kvz_quanti
$LN30@kvz_quanti:

; 289  :   }
; 290  : 
; 291  :   return has_coeffs;

	mov	eax, DWORD PTR _has_coeffs$[ebp]

; 292  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@kvz_quanti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN56@kvz_quanti:
	DD	2
	DD	$LN55@kvz_quanti
$LN55@kvz_quanti:
	DD	-2112					; fffff7c0H
	DD	2048					; 00000800H
	DD	$LN53@kvz_quanti
	DD	-4224					; ffffef80H
	DD	2048					; 00000800H
	DD	$LN54@kvz_quanti
$LN54@kvz_quanti:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN53@kvz_quanti:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_kvz_quantize_residual_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _kvz_quant_generic
_TEXT	SEGMENT
tv179 = -6084						; size = 4
tv180 = -6080						; size = 4
tv322 = -6076						; size = 4
tv292 = -6076						; size = 4
tv288 = -6076						; size = 4
tv176 = -6076						; size = 4
tv162 = -6076						; size = 4
tv148 = -6076						; size = 4
tv91 = -6076						; size = 4
_blkPos$1 = -4532					; size = 4
_cur_change$2 = -4520					; size = 2
_final_change$3 = -4508					; size = 2
_cur_cost$4 = -4496					; size = 4
_min_pos$5 = -4484					; size = 4
_min_cost_inc$6 = -4472					; size = 4
_signbit$7 = -4460					; size = 4
_last_nz_pos_in_cg$8 = -4448				; size = 4
_first_nz_pos_in_cg$9 = -4436				; size = 4
_subpos$10 = -4424					; size = 4
_subset$11 = -4412					; size = 4
_abssum$12 = -4400					; size = 4
_last_cg$13 = -4388					; size = 4
_n$14 = -4376						; size = 4
_curr_quant_coeff$15 = -4364				; size = 4
_abs_level$16 = -4352					; size = 8
_level$17 = -4336					; size = 4
_n$18 = -4324						; size = 4
_delta_u$ = -4312					; size = 4096
_curr_quant_coeff$19 = -208				; size = 4
_sign$20 = -196						; size = 4
_abs_level$21 = -184					; size = 8
_level$22 = -168					; size = 4
_n$23 = -156						; size = 4
_ac_sum$ = -144						; size = 4
_q_bits8$ = -132					; size = 4
_add$ = -120						; size = 4
_q_bits$ = -108						; size = 4
_transform_shift$ = -96					; size = 4
_quant_coeff$ = -84					; size = 4
_scalinglist_type$ = -72				; size = 4
_log2_tr_size$ = -60					; size = 4
_qp_scaled$ = -48					; size = 4
_scan$ = -36						; size = 4
_log2_block_size$ = -24					; size = 4
_encoder$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_coef$ = 12						; size = 4
_q_coef$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_type$ = 28						; size = 1
_scan_idx$ = 32						; size = 1
_block_type$ = 36					; size = 1
_kvz_quant_generic PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 6084				; 000017c4H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-6084]
	mov	ecx, 1521				; 000005f1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 54   :   const uint32_t log2_block_size = kvz_g_convert_to_bit[width] + 2;

	mov	eax, DWORD PTR _width$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_block_size$[ebp], ecx

; 55   :   const uint32_t * const scan = kvz_g_sig_last_scan[scan_idx][log2_block_size - 1];

	movsx	eax, BYTE PTR _scan_idx$[ebp]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _log2_block_size$[ebp]
	mov	eax, DWORD PTR _kvz_g_sig_last_scan[ecx+edx*4-4]
	mov	DWORD PTR _scan$[ebp], eax

; 56   : 
; 57   :   int32_t qp_scaled = kvz_get_scaled_qp(type, state->qp, (encoder->bitdepth - 8) * 6);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	imul	edx, ecx, 6
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+312]
	push	ecx
	movzx	edx, BYTE PTR _type$[ebp]
	push	edx
	call	_kvz_get_scaled_qp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _qp_scaled$[ebp], eax

; 58   :   const uint32_t log2_tr_size = kvz_g_convert_to_bit[width] + 2;

	mov	eax, DWORD PTR _width$[ebp]
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	mov	DWORD PTR _log2_tr_size$[ebp], ecx

; 59   :   const int32_t scalinglist_type = (block_type == CU_INTRA ? 0 : 3) + (int8_t)("\0\3\1\2"[type]);

	movsx	eax, BYTE PTR _block_type$[ebp]
	cmp	eax, 1
	jne	SHORT $LN46@kvz_quant_
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $LN47@kvz_quant_
$LN46@kvz_quant_:
	mov	DWORD PTR tv91[ebp], 3
$LN47@kvz_quant_:
	movsx	ecx, BYTE PTR _type$[ebp]
	movsx	edx, BYTE PTR ??_C@_04BIJMKPLJ@?$AA?$AD?$AB?$AC@[ecx]
	add	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _scalinglist_type$[ebp], edx

; 60   :   const int32_t *quant_coeff = encoder->scaling_list.quant_coeff[log2_tr_size - 2][scalinglist_type][qp_scaled % 6];

	mov	eax, DWORD PTR _log2_tr_size$[ebp]
	sub	eax, 2
	imul	ecx, eax, 144
	mov	edx, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+2748]
	imul	edx, DWORD PTR _scalinglist_type$[ebp], 24
	add	ecx, edx
	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	esi, 6
	idiv	esi
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _quant_coeff$[ebp], eax

; 61   :   const int32_t transform_shift = MAX_TR_DYNAMIC_RANGE - encoder->bitdepth - log2_tr_size; //!< Represents scaling through forward transform

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 15					; 0000000fH
	sub	edx, ecx
	sub	edx, DWORD PTR _log2_tr_size$[ebp]
	mov	DWORD PTR _transform_shift$[ebp], edx

; 62   :   const int32_t q_bits = QUANT_SHIFT + qp_scaled / 6 + transform_shift;

	mov	eax, DWORD PTR _qp_scaled$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	edx, DWORD PTR _transform_shift$[ebp]
	lea	eax, DWORD PTR [eax+edx+14]
	mov	DWORD PTR _q_bits$[ebp], eax

; 63   :   const int32_t add = ((state->frame->slicetype == KVZ_SLICE_I) ? 171 : 85) << (q_bits - 9);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	jne	SHORT $LN48@kvz_quant_
	mov	DWORD PTR tv148[ebp], 171		; 000000abH
	jmp	SHORT $LN49@kvz_quant_
$LN48@kvz_quant_:
	mov	DWORD PTR tv148[ebp], 85		; 00000055H
$LN49@kvz_quant_:
	mov	ecx, DWORD PTR _q_bits$[ebp]
	sub	ecx, 9
	mov	edx, DWORD PTR tv148[ebp]
	shl	edx, cl
	mov	DWORD PTR _add$[ebp], edx

; 64   :   const int32_t q_bits8 = q_bits - 8;

	mov	eax, DWORD PTR _q_bits$[ebp]
	sub	eax, 8
	mov	DWORD PTR _q_bits8$[ebp], eax

; 65   : 
; 66   :   uint32_t ac_sum = 0;

	mov	DWORD PTR _ac_sum$[ebp], 0

; 67   : 
; 68   :   for (int32_t n = 0; n < width * height; n++) {

	mov	DWORD PTR _n$23[ebp], 0
	jmp	SHORT $LN4@kvz_quant_
$LN2@kvz_quant_:
	mov	eax, DWORD PTR _n$23[ebp]
	add	eax, 1
	mov	DWORD PTR _n$23[ebp], eax
$LN4@kvz_quant_:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _n$23[ebp], eax
	jge	$LN3@kvz_quant_

; 69   :     int32_t level = coef[n];

	mov	eax, DWORD PTR _n$23[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _level$22[ebp], edx

; 70   :     int64_t abs_level = (int64_t)abs(level);

	mov	eax, DWORD PTR _level$22[ebp]
	push	eax
	call	_abs
	add	esp, 4
	cdq
	mov	DWORD PTR _abs_level$21[ebp], eax
	mov	DWORD PTR _abs_level$21[ebp+4], edx

; 71   :     int32_t  sign;
; 72   : 
; 73   :     sign = (level < 0 ? -1 : 1);

	cmp	DWORD PTR _level$22[ebp], 0
	jge	SHORT $LN50@kvz_quant_
	mov	DWORD PTR tv162[ebp], -1
	jmp	SHORT $LN51@kvz_quant_
$LN50@kvz_quant_:
	mov	DWORD PTR tv162[ebp], 1
$LN51@kvz_quant_:
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR _sign$20[ebp], eax

; 74   : 
; 75   :     int32_t curr_quant_coeff = quant_coeff[n];

	mov	eax, DWORD PTR _n$23[ebp]
	mov	ecx, DWORD PTR _quant_coeff$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _curr_quant_coeff$19[ebp], edx

; 76   :     level = (abs_level * curr_quant_coeff + add) >> q_bits;

	mov	eax, DWORD PTR _curr_quant_coeff$19[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _abs_level$21[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abs_level$21[ebp]
	push	ecx
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _add$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, ecx
	mov	edx, esi
	mov	ecx, DWORD PTR _q_bits$[ebp]
	call	__allshr
	mov	DWORD PTR _level$22[ebp], eax

; 77   :     ac_sum += level;

	mov	eax, DWORD PTR _ac_sum$[ebp]
	add	eax, DWORD PTR _level$22[ebp]
	mov	DWORD PTR _ac_sum$[ebp], eax

; 78   : 
; 79   :     level *= sign;

	mov	eax, DWORD PTR _level$22[ebp]
	imul	eax, DWORD PTR _sign$20[ebp]
	mov	DWORD PTR _level$22[ebp], eax

; 80   :     q_coef[n] = (coeff_t)(CLIP(-32768, 32767, level));

	cmp	DWORD PTR _level$22[ebp], 32767		; 00007fffH
	jle	SHORT $LN52@kvz_quant_
	mov	DWORD PTR tv176[ebp], 32767		; 00007fffH
	jmp	SHORT $LN53@kvz_quant_
$LN52@kvz_quant_:
	mov	eax, DWORD PTR _level$22[ebp]
	mov	DWORD PTR tv176[ebp], eax
$LN53@kvz_quant_:
	cmp	DWORD PTR tv176[ebp], -32768		; ffff8000H
	jge	SHORT $LN56@kvz_quant_
	mov	DWORD PTR tv180[ebp], -32768		; ffff8000H
	jmp	SHORT $LN57@kvz_quant_
$LN56@kvz_quant_:
	cmp	DWORD PTR _level$22[ebp], 32767		; 00007fffH
	jle	SHORT $LN54@kvz_quant_
	mov	DWORD PTR tv179[ebp], 32767		; 00007fffH
	jmp	SHORT $LN55@kvz_quant_
$LN54@kvz_quant_:
	mov	ecx, DWORD PTR _level$22[ebp]
	mov	DWORD PTR tv179[ebp], ecx
$LN55@kvz_quant_:
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR tv180[ebp], edx
$LN57@kvz_quant_:
	mov	eax, DWORD PTR _n$23[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	mov	dx, WORD PTR tv180[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 81   : 
; 82   :   }

	jmp	$LN2@kvz_quant_
$LN3@kvz_quant_:

; 83   : 
; 84   :   if (!encoder->cfg.signhide_enable || ac_sum < 2) return;

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN24@kvz_quant_
	cmp	DWORD PTR _ac_sum$[ebp], 2
	jae	SHORT $LN23@kvz_quant_
$LN24@kvz_quant_:
	jmp	$LN1@kvz_quant_
$LN23@kvz_quant_:

; 85   : 
; 86   :   int32_t delta_u[LCU_WIDTH*LCU_WIDTH >> 2];
; 87   : 
; 88   :   for (int32_t n = 0; n < width * height; n++) {

	mov	DWORD PTR _n$18[ebp], 0
	jmp	SHORT $LN7@kvz_quant_
$LN5@kvz_quant_:
	mov	eax, DWORD PTR _n$18[ebp]
	add	eax, 1
	mov	DWORD PTR _n$18[ebp], eax
$LN7@kvz_quant_:
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _n$18[ebp], eax
	jge	$LN6@kvz_quant_

; 89   :     int32_t level = coef[n];

	mov	eax, DWORD PTR _n$18[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _level$17[ebp], edx

; 90   :     int64_t abs_level = (int64_t)abs(level);

	mov	eax, DWORD PTR _level$17[ebp]
	push	eax
	call	_abs
	add	esp, 4
	cdq
	mov	DWORD PTR _abs_level$16[ebp], eax
	mov	DWORD PTR _abs_level$16[ebp+4], edx

; 91   :     int32_t curr_quant_coeff = quant_coeff[n];

	mov	eax, DWORD PTR _n$18[ebp]
	mov	ecx, DWORD PTR _quant_coeff$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _curr_quant_coeff$15[ebp], edx

; 92   : 
; 93   :     level = (abs_level * curr_quant_coeff + add) >> q_bits;

	mov	eax, DWORD PTR _curr_quant_coeff$15[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _abs_level$16[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abs_level$16[ebp]
	push	ecx
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	mov	eax, DWORD PTR _add$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, ecx
	mov	edx, esi
	mov	ecx, DWORD PTR _q_bits$[ebp]
	call	__allshr
	mov	DWORD PTR _level$17[ebp], eax

; 94   :     delta_u[n] = (int32_t)((abs_level * curr_quant_coeff - (level << q_bits)) >> q_bits8);

	mov	eax, DWORD PTR _curr_quant_coeff$15[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _abs_level$16[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _abs_level$16[ebp]
	push	ecx
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	mov	eax, DWORD PTR _level$17[ebp]
	mov	ecx, DWORD PTR _q_bits$[ebp]
	shl	eax, cl
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	eax, esi
	mov	edx, edi
	mov	ecx, DWORD PTR _q_bits8$[ebp]
	call	__allshr
	mov	edx, DWORD PTR _n$18[ebp]
	mov	DWORD PTR _delta_u$[ebp+edx*4], eax

; 95   :   }

	jmp	$LN5@kvz_quant_
$LN6@kvz_quant_:

; 96   : 
; 97   :   if (ac_sum >= 2) {

	cmp	DWORD PTR _ac_sum$[ebp], 2
	jb	$LN1@kvz_quant_

; 98   : #define SCAN_SET_SIZE 16
; 99   : #define LOG2_SCAN_SET_SIZE 4
; 100  :     int32_t n, last_cg = -1, abssum = 0, subset, subpos;

	mov	DWORD PTR _last_cg$13[ebp], -1
	mov	DWORD PTR _abssum$12[ebp], 0

; 101  :     for (subset = (width*height - 1) >> LOG2_SCAN_SET_SIZE; subset >= 0; subset--) {

	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	sar	eax, 4
	mov	DWORD PTR _subset$11[ebp], eax
	jmp	SHORT $LN10@kvz_quant_
$LN8@kvz_quant_:
	mov	eax, DWORD PTR _subset$11[ebp]
	sub	eax, 1
	mov	DWORD PTR _subset$11[ebp], eax
$LN10@kvz_quant_:
	cmp	DWORD PTR _subset$11[ebp], 0
	jl	$LN1@kvz_quant_

; 102  :       int32_t first_nz_pos_in_cg = SCAN_SET_SIZE, last_nz_pos_in_cg = -1;

	mov	DWORD PTR _first_nz_pos_in_cg$9[ebp], 16 ; 00000010H
	mov	DWORD PTR _last_nz_pos_in_cg$8[ebp], -1

; 103  :       subpos = subset << LOG2_SCAN_SET_SIZE;

	mov	eax, DWORD PTR _subset$11[ebp]
	shl	eax, 4
	mov	DWORD PTR _subpos$10[ebp], eax

; 104  :       abssum = 0;

	mov	DWORD PTR _abssum$12[ebp], 0

; 105  : 
; 106  :       // Find last coeff pos
; 107  :       for (n = SCAN_SET_SIZE - 1; n >= 0; n--)  {

	mov	DWORD PTR _n$14[ebp], 15		; 0000000fH
	jmp	SHORT $LN13@kvz_quant_
$LN11@kvz_quant_:
	mov	eax, DWORD PTR _n$14[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$14[ebp], eax
$LN13@kvz_quant_:
	cmp	DWORD PTR _n$14[ebp], 0
	jl	SHORT $LN12@kvz_quant_

; 108  :         if (q_coef[scan[n + subpos]])  {

	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, DWORD PTR _subpos$10[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	test	ecx, ecx
	je	SHORT $LN26@kvz_quant_

; 109  :           last_nz_pos_in_cg = n;

	mov	eax, DWORD PTR _n$14[ebp]
	mov	DWORD PTR _last_nz_pos_in_cg$8[ebp], eax

; 110  :           break;

	jmp	SHORT $LN12@kvz_quant_
$LN26@kvz_quant_:

; 111  :         }
; 112  :       }

	jmp	SHORT $LN11@kvz_quant_
$LN12@kvz_quant_:

; 113  : 
; 114  :       // First coeff pos
; 115  :       for (n = 0; n <SCAN_SET_SIZE; n++) {

	mov	DWORD PTR _n$14[ebp], 0
	jmp	SHORT $LN16@kvz_quant_
$LN14@kvz_quant_:
	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, 1
	mov	DWORD PTR _n$14[ebp], eax
$LN16@kvz_quant_:
	cmp	DWORD PTR _n$14[ebp], 16		; 00000010H
	jge	SHORT $LN15@kvz_quant_

; 116  :         if (q_coef[scan[n + subpos]]) {

	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, DWORD PTR _subpos$10[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	test	ecx, ecx
	je	SHORT $LN27@kvz_quant_

; 117  :           first_nz_pos_in_cg = n;

	mov	eax, DWORD PTR _n$14[ebp]
	mov	DWORD PTR _first_nz_pos_in_cg$9[ebp], eax

; 118  :           break;

	jmp	SHORT $LN15@kvz_quant_
$LN27@kvz_quant_:

; 119  :         }
; 120  :       }

	jmp	SHORT $LN14@kvz_quant_
$LN15@kvz_quant_:

; 121  : 
; 122  :       // Sum all kvz_quant coeffs between first and last
; 123  :       for (n = first_nz_pos_in_cg; n <= last_nz_pos_in_cg; n++) {

	mov	eax, DWORD PTR _first_nz_pos_in_cg$9[ebp]
	mov	DWORD PTR _n$14[ebp], eax
	jmp	SHORT $LN19@kvz_quant_
$LN17@kvz_quant_:
	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, 1
	mov	DWORD PTR _n$14[ebp], eax
$LN19@kvz_quant_:
	mov	eax, DWORD PTR _n$14[ebp]
	cmp	eax, DWORD PTR _last_nz_pos_in_cg$8[ebp]
	jg	SHORT $LN18@kvz_quant_

; 124  :         abssum += q_coef[scan[n + subpos]];

	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, DWORD PTR _subpos$10[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	add	ecx, DWORD PTR _abssum$12[ebp]
	mov	DWORD PTR _abssum$12[ebp], ecx

; 125  :       }

	jmp	SHORT $LN17@kvz_quant_
$LN18@kvz_quant_:

; 126  : 
; 127  :       if (last_nz_pos_in_cg >= 0 && last_cg == -1) {

	cmp	DWORD PTR _last_nz_pos_in_cg$8[ebp], 0
	jl	SHORT $LN28@kvz_quant_
	cmp	DWORD PTR _last_cg$13[ebp], -1
	jne	SHORT $LN28@kvz_quant_

; 128  :         last_cg = 1;

	mov	DWORD PTR _last_cg$13[ebp], 1
$LN28@kvz_quant_:

; 129  :       }
; 130  : 
; 131  :       if (last_nz_pos_in_cg - first_nz_pos_in_cg >= 4) {

	mov	eax, DWORD PTR _last_nz_pos_in_cg$8[ebp]
	sub	eax, DWORD PTR _first_nz_pos_in_cg$9[ebp]
	cmp	eax, 4
	jl	$LN29@kvz_quant_

; 132  :         int32_t signbit = (q_coef[scan[subpos + first_nz_pos_in_cg]] > 0 ? 0 : 1);

	mov	eax, DWORD PTR _subpos$10[ebp]
	add	eax, DWORD PTR _first_nz_pos_in_cg$9[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2]
	test	ecx, ecx
	jle	SHORT $LN58@kvz_quant_
	mov	DWORD PTR tv288[ebp], 0
	jmp	SHORT $LN59@kvz_quant_
$LN58@kvz_quant_:
	mov	DWORD PTR tv288[ebp], 1
$LN59@kvz_quant_:
	mov	edx, DWORD PTR tv288[ebp]
	mov	DWORD PTR _signbit$7[ebp], edx

; 133  :         if (signbit != (abssum & 0x1)) { // compare signbit with sum_parity

	mov	eax, DWORD PTR _abssum$12[ebp]
	and	eax, 1
	cmp	DWORD PTR _signbit$7[ebp], eax
	je	$LN29@kvz_quant_

; 134  :           int32_t min_cost_inc = 0x7fffffff, min_pos = -1, cur_cost = 0x7fffffff;

	mov	DWORD PTR _min_cost_inc$6[ebp], 2147483647 ; 7fffffffH
	mov	DWORD PTR _min_pos$5[ebp], -1
	mov	DWORD PTR _cur_cost$4[ebp], 2147483647	; 7fffffffH

; 135  :           int16_t final_change = 0, cur_change = 0;

	xor	eax, eax
	mov	WORD PTR _final_change$3[ebp], ax
	xor	eax, eax
	mov	WORD PTR _cur_change$2[ebp], ax

; 136  :           for (n = (last_cg == 1 ? last_nz_pos_in_cg : SCAN_SET_SIZE - 1); n >= 0; n--) {

	cmp	DWORD PTR _last_cg$13[ebp], 1
	jne	SHORT $LN60@kvz_quant_
	mov	eax, DWORD PTR _last_nz_pos_in_cg$8[ebp]
	mov	DWORD PTR tv292[ebp], eax
	jmp	SHORT $LN61@kvz_quant_
$LN60@kvz_quant_:
	mov	DWORD PTR tv292[ebp], 15		; 0000000fH
$LN61@kvz_quant_:
	mov	ecx, DWORD PTR tv292[ebp]
	mov	DWORD PTR _n$14[ebp], ecx
	jmp	SHORT $LN22@kvz_quant_
$LN20@kvz_quant_:
	mov	eax, DWORD PTR _n$14[ebp]
	sub	eax, 1
	mov	DWORD PTR _n$14[ebp], eax
$LN22@kvz_quant_:
	cmp	DWORD PTR _n$14[ebp], 0
	jl	$LN21@kvz_quant_

; 137  :             uint32_t blkPos = scan[n + subpos];

	mov	eax, DWORD PTR _n$14[ebp]
	add	eax, DWORD PTR _subpos$10[ebp]
	mov	ecx, DWORD PTR _scan$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _blkPos$1[ebp], edx

; 138  :             if (q_coef[blkPos] != 0) {

	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	je	$LN31@kvz_quant_

; 139  :               if (delta_u[blkPos] > 0) {

	mov	eax, DWORD PTR _blkPos$1[ebp]
	cmp	DWORD PTR _delta_u$[ebp+eax*4], 0
	jle	SHORT $LN33@kvz_quant_

; 140  :                 cur_cost = -delta_u[blkPos];

	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _delta_u$[ebp+eax*4]
	neg	ecx
	mov	DWORD PTR _cur_cost$4[ebp], ecx

; 141  :                 cur_change = 1;

	mov	eax, 1
	mov	WORD PTR _cur_change$2[ebp], ax

; 142  :               }

	jmp	SHORT $LN34@kvz_quant_
$LN33@kvz_quant_:

; 143  :               else if (n == first_nz_pos_in_cg && abs(q_coef[blkPos]) == 1) {

	mov	eax, DWORD PTR _n$14[ebp]
	cmp	eax, DWORD PTR _first_nz_pos_in_cg$9[ebp]
	jne	SHORT $LN35@kvz_quant_
	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	push	edx
	call	_abs
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN35@kvz_quant_

; 144  :                 cur_cost = 0x7fffffff;

	mov	DWORD PTR _cur_cost$4[ebp], 2147483647	; 7fffffffH

; 145  :               }

	jmp	SHORT $LN34@kvz_quant_
$LN35@kvz_quant_:

; 146  :               else {
; 147  :                 cur_cost = delta_u[blkPos];

	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _delta_u$[ebp+eax*4]
	mov	DWORD PTR _cur_cost$4[ebp], ecx

; 148  :                 cur_change = -1;

	or	eax, -1
	mov	WORD PTR _cur_change$2[ebp], ax
$LN34@kvz_quant_:

; 149  :               }
; 150  :             }

	jmp	SHORT $LN32@kvz_quant_
$LN31@kvz_quant_:

; 151  :             else if (n < first_nz_pos_in_cg && ((coef[blkPos] >= 0) ? 0 : 1) != signbit) {

	mov	eax, DWORD PTR _n$14[ebp]
	cmp	eax, DWORD PTR _first_nz_pos_in_cg$9[ebp]
	jge	SHORT $LN37@kvz_quant_
	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jl	SHORT $LN62@kvz_quant_
	mov	DWORD PTR tv322[ebp], 0
	jmp	SHORT $LN63@kvz_quant_
$LN62@kvz_quant_:
	mov	DWORD PTR tv322[ebp], 1
$LN63@kvz_quant_:
	mov	eax, DWORD PTR tv322[ebp]
	cmp	eax, DWORD PTR _signbit$7[ebp]
	je	SHORT $LN37@kvz_quant_

; 152  :               cur_cost = 0x7fffffff;

	mov	DWORD PTR _cur_cost$4[ebp], 2147483647	; 7fffffffH

; 153  :             }

	jmp	SHORT $LN32@kvz_quant_
$LN37@kvz_quant_:

; 154  :             else {
; 155  :               cur_cost = -delta_u[blkPos];

	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	ecx, DWORD PTR _delta_u$[ebp+eax*4]
	neg	ecx
	mov	DWORD PTR _cur_cost$4[ebp], ecx

; 156  :               cur_change = 1;

	mov	eax, 1
	mov	WORD PTR _cur_change$2[ebp], ax
$LN32@kvz_quant_:

; 157  :             }
; 158  : 
; 159  :             if (cur_cost < min_cost_inc) {

	mov	eax, DWORD PTR _cur_cost$4[ebp]
	cmp	eax, DWORD PTR _min_cost_inc$6[ebp]
	jge	SHORT $LN39@kvz_quant_

; 160  :               min_cost_inc = cur_cost;

	mov	eax, DWORD PTR _cur_cost$4[ebp]
	mov	DWORD PTR _min_cost_inc$6[ebp], eax

; 161  :               final_change = cur_change;

	mov	ax, WORD PTR _cur_change$2[ebp]
	mov	WORD PTR _final_change$3[ebp], ax

; 162  :               min_pos = blkPos;

	mov	eax, DWORD PTR _blkPos$1[ebp]
	mov	DWORD PTR _min_pos$5[ebp], eax
$LN39@kvz_quant_:

; 163  :             }
; 164  :           } // CG loop

	jmp	$LN20@kvz_quant_
$LN21@kvz_quant_:

; 165  : 
; 166  :           if (q_coef[min_pos] == 32767 || q_coef[min_pos] == -32768) {

	mov	eax, DWORD PTR _min_pos$5[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 32767				; 00007fffH
	je	SHORT $LN41@kvz_quant_
	mov	eax, DWORD PTR _min_pos$5[ebp]
	mov	ecx, DWORD PTR _q_coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, -32768				; ffff8000H
	jne	SHORT $LN40@kvz_quant_
$LN41@kvz_quant_:

; 167  :             final_change = -1;

	or	eax, -1
	mov	WORD PTR _final_change$3[ebp], ax
$LN40@kvz_quant_:

; 168  :           }
; 169  : 
; 170  :           if (coef[min_pos] >= 0) q_coef[min_pos] += final_change;

	mov	eax, DWORD PTR _min_pos$5[ebp]
	mov	ecx, DWORD PTR _coef$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	test	edx, edx
	jl	SHORT $LN42@kvz_quant_
	movsx	eax, WORD PTR _final_change$3[ebp]
	mov	ecx, DWORD PTR _min_pos$5[ebp]
	mov	edx, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	add	ecx, eax
	mov	edx, DWORD PTR _min_pos$5[ebp]
	mov	eax, DWORD PTR _q_coef$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN29@kvz_quant_
$LN42@kvz_quant_:

; 171  :           else q_coef[min_pos] -= final_change;

	movsx	eax, WORD PTR _final_change$3[ebp]
	mov	ecx, DWORD PTR _min_pos$5[ebp]
	mov	edx, DWORD PTR _q_coef$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	sub	ecx, eax
	mov	edx, DWORD PTR _min_pos$5[ebp]
	mov	eax, DWORD PTR _q_coef$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN29@kvz_quant_:

; 172  :         } // Hide
; 173  :       }
; 174  :       if (last_cg == 1) last_cg = 0;

	cmp	DWORD PTR _last_cg$13[ebp], 1
	jne	SHORT $LN44@kvz_quant_
	mov	DWORD PTR _last_cg$13[ebp], 0
$LN44@kvz_quant_:

; 175  :     }

	jmp	$LN8@kvz_quant_
$LN1@kvz_quant_:

; 176  : 
; 177  : #undef SCAN_SET_SIZE
; 178  : #undef LOG2_SCAN_SET_SIZE
; 179  :   }
; 180  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN66@kvz_quant_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 6084				; 000017c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN66@kvz_quant_:
	DD	1
	DD	$LN65@kvz_quant_
$LN65@kvz_quant_:
	DD	-4312					; ffffef28H
	DD	4096					; 00001000H
	DD	$LN64@kvz_quant_
$LN64@kvz_quant_:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
_kvz_quant_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\generic\quant-generic.c
;	COMDAT _kvz_strategy_register_quant_generic
_TEXT	SEGMENT
tv149 = -208						; size = 4
tv138 = -208						; size = 4
tv95 = -208						; size = 4
tv84 = -208						; size = 4
tv73 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_quant_generic PROC		; COMDAT

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __2064FBD0_quant-generic@c
	call	@__CheckForDebuggerJustMyCode@4

; 379  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 380  : 
; 381  :   success &= kvz_strategyselector_register(opaque, "quant", "generic", 0, &kvz_quant_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_quant_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_05DFPBCFDJ@quant@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN3@kvz_strate
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@kvz_strate
$LN3@kvz_strate:
	mov	DWORD PTR tv73[ebp], 1
$LN4@kvz_strate:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 382  :   success &= kvz_strategyselector_register(opaque, "quantize_residual", "generic", 0, &kvz_quantize_residual_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_quantize_residual_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BC@MPMPMGJB@quantize_residual@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN5@kvz_strate
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN6@kvz_strate
$LN5@kvz_strate:
	mov	DWORD PTR tv84[ebp], 1
$LN6@kvz_strate:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 383  :   success &= kvz_strategyselector_register(opaque, "dequant", "generic", 0, &kvz_dequant_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_dequant_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_07GMDOJGPA@dequant@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN7@kvz_strate
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN8@kvz_strate
$LN7@kvz_strate:
	mov	DWORD PTR tv95[ebp], 1
$LN8@kvz_strate:
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 384  :   success &= kvz_strategyselector_register(opaque, "coeff_abs_sum", "generic", 0, &coeff_abs_sum_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _coeff_abs_sum_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0O@ECIHPEON@coeff_abs_sum@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN9@kvz_strate
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN10@kvz_strate
$LN9@kvz_strate:
	mov	DWORD PTR tv138[ebp], 1
$LN10@kvz_strate:
	mov	cl, BYTE PTR tv138[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 385  :   success &= kvz_strategyselector_register(opaque, "fast_coeff_cost", "generic", 0, &fast_coeff_cost_generic);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _fast_coeff_cost_generic
	push	0
	push	OFFSET ??_C@_07DCLBNMLN@generic@
	push	OFFSET ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN11@kvz_strate
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $LN12@kvz_strate
$LN11@kvz_strate:
	mov	DWORD PTR tv149[ebp], 1
$LN12@kvz_strate:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 386  : 
; 387  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 388  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_quant_generic ENDP
_TEXT	ENDS
END
