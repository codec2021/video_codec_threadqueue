; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__22DED5B7_input_frame_buffer@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+4
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
CONST	ENDS
PUBLIC	_kvz_init_input_frame_buffer
PUBLIC	_kvz_encoder_feed_frame
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9	; `kvz_encoder_feed_frame'::`1'::__LINE__Var
PUBLIC	??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EO@EPLCLDEH@?$AAb?$AAu?$AAf?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	??_C@_1EC@HPBDNODO@?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAp?$AAi?$AAc?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1GE@DCJMLMDO@?$AAg?$AAo?$AAp?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAf@ ; `string'
PUBLIC	??_C@_1CC@IDONLOGO@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAp?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_image_copy_ref:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allrem:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CC@IDONLOGO@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAp?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL@
CONST	SEGMENT
??_C@_1CC@IDONLOGO@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAp?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL@ DB 'n'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'p', 00H, 'i', 00H
	DB	'c', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@DCJMLMDO@?$AAg?$AAo?$AAp?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAf@
CONST	SEGMENT
??_C@_1GE@DCJMLMDO@?$AAg?$AAo?$AAp?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAf@ DB 'g'
	DB	00H, 'o', 00H, 'p', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'c'
	DB	00H, 'f', 00H, 'g', 00H, '-', 00H, '>', 00H, 'g', 00H, 'o', 00H
	DB	'p', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, '_', 00H, 'c', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'g', 00H, 'o'
	DB	00H, 'p', 00H, ' ', 00H, '?', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	':', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@HPBDNODO@?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAp?$AAi?$AAc?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EC@HPBDNODO@?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAp?$AAi?$AAc?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr@ DB 'b'
	DB	00H, 'u', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H, 'i', 00H
	DB	'c', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, '[', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H
	DB	'i', 00H, 'd', 00H, 'x', 00H, ']', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EPLCLDEH@?$AAb?$AAu?$AAf?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1EO@EPLCLDEH@?$AAb?$AAu?$AAf?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ DB 'b'
	DB	00H, 'u', 00H, 'f', 00H, '_', 00H, 'i', 00H, 'd', 00H, 'x', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H
	DB	'i', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'g'
	DB	00H, 'o', 00H, 'p', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9 DD 046H	; `kvz_encoder_feed_frame'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
;	COMDAT _kvz_encoder_feed_frame
_TEXT	SEGMENT
tv835 = -440						; size = 8
tv224 = -440						; size = 4
tv204 = -440						; size = 4
tv195 = -440						; size = 4
tv887 = -436						; size = 8
tv619 = -436						; size = 8
tv577 = -436						; size = 8
tv558 = -436						; size = 8
tv868 = -432						; size = 8
tv832 = -432						; size = 8
tv601 = -432						; size = 4
tv930 = -428						; size = 4
tv902 = -428						; size = 4
tv886 = -428						; size = 4
tv787 = -428						; size = 4
tv678 = -428						; size = 4
tv618 = -428						; size = 4
tv600 = -428						; size = 4
tv576 = -428						; size = 4
tv557 = -428						; size = 4
tv306 = -428						; size = 4
_next_pic$ = -228					; size = 4
_buf_idx$ = -216					; size = 4
_dts_idx$1 = -204					; size = 4
_dts_idx$2 = -192					; size = 4
_gop_start_idx$3 = -180					; size = 4
_num_extra_frames$4 = -168				; size = 4
_gop_offset$ = -156					; size = 4
_dts_out$ = -144					; size = 8
_idx_out$ = -128					; size = 8
_last_pic_idx$5 = -112					; size = 4
_first_pic_idx$6 = -100					; size = 4
_buf_idx$7 = -88					; size = 4
_idx_in$8 = -76						; size = 8
_frame_num$9 = -60					; size = 8
_is_closed_gop$ = -41					; size = 1
_gop_buf_size$ = -32					; size = 4
_cfg$ = -20						; size = 4
_encoder$ = -8						; size = 4
_buf$ = 8						; size = 4
_state$ = 12						; size = 4
_img_in$ = 16						; size = 4
_first_done$ = 20					; size = 4
_kvz_encoder_feed_frame PROC				; COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __22DED5B7_input_frame_buffer@c
	call	@__CheckForDebuggerJustMyCode@4

; 71   :   const encoder_control_t* const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 72   :   const kvz_config* const cfg = &encoder->cfg;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR _cfg$[ebp], eax

; 73   : 
; 74   :   const int gop_buf_size = 3 * cfg->gop_len;

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	imul	edx, ecx, 3
	mov	DWORD PTR _gop_buf_size$[ebp], edx

; 75   : 
; 76   :   bool is_closed_gop = false;

	mov	BYTE PTR _is_closed_gop$[ebp], 0

; 77   : 
; 78   :   // Check for closed gop, we need an extra frame in the buffer in this case
; 79   :   if (!cfg->open_gop && cfg->intra_period > 0 && cfg->gop_len > 0) is_closed_gop = true;

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN5@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN5@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jle	SHORT $LN5@kvz_encode
	mov	BYTE PTR _is_closed_gop$[ebp], 1
$LN5@kvz_encode:

; 80   : 
; 81   :   if (cfg->gop_len == 0 || cfg->gop_lowdelay) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN7@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	$LN6@kvz_encode
$LN7@kvz_encode:

; 82   :     // No reordering of output pictures necessary.
; 83   : 
; 84   :     if (img_in == NULL) return NULL;

	cmp	DWORD PTR _img_in$[ebp], 0
	jne	SHORT $LN8@kvz_encode
	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN8@kvz_encode:

; 85   : 
; 86   :     img_in->dts = img_in->pts;

	mov	eax, DWORD PTR _img_in$[ebp]
	mov	ecx, DWORD PTR _img_in$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], ecx

; 87   :     state->frame->gop_offset = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+16], 0

; 88   :     if (cfg->gop_len > 0) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jle	SHORT $LN9@kvz_encode

; 89   :       // Using a low delay GOP structure.
; 90   :       uint64_t frame_num = buf->num_out;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	mov	DWORD PTR _frame_num$9[ebp], ecx
	mov	edx, DWORD PTR [eax+1164]
	mov	DWORD PTR _frame_num$9[ebp+4], edx

; 91   :       if (cfg->intra_period) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN10@kvz_encode

; 92   :         frame_num %= cfg->intra_period;

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _frame_num$9[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _frame_num$9[ebp]
	push	edx
	call	__aullrem
	mov	DWORD PTR _frame_num$9[ebp], eax
	mov	DWORD PTR _frame_num$9[ebp+4], edx
$LN10@kvz_encode:

; 93   :       }
; 94   :       state->frame->gop_offset = (frame_num + cfg->gop_len - 1) % cfg->gop_len;

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	cdq
	mov	ecx, eax
	mov	esi, edx
	add	ecx, DWORD PTR _frame_num$9[ebp]
	adc	esi, DWORD PTR _frame_num$9[ebp+4]
	sub	ecx, 1
	sbb	esi, 0
	mov	edx, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aullrem
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+16], al
$LN9@kvz_encode:

; 95   :     }
; 96   :     buf->num_in++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1152]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+1156]
	adc	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+1152], ecx
	mov	DWORD PTR [eax+1156], edx

; 97   :     buf->num_out++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+1164]
	adc	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+1160], ecx
	mov	DWORD PTR [eax+1164], edx

; 98   :     return kvz_image_copy_ref(img_in);

	mov	eax, DWORD PTR _img_in$[ebp]
	push	eax
	call	_kvz_image_copy_ref
	add	esp, 4
	jmp	$LN1@kvz_encode
$LN6@kvz_encode:

; 99   :   }
; 100  :   
; 101  :   if (img_in != NULL) {

	cmp	DWORD PTR _img_in$[ebp], 0
	je	$LN11@kvz_encode

; 102  :     // Index of the next input picture, in range [-1, +inf). Values
; 103  :     // i and j refer to the same indices in buf->pic_buffer iff
; 104  :     // i === j (mod gop_buf_size).
; 105  :     int64_t idx_in = buf->num_in - 1;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1152]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+1156]
	sbb	edx, 0
	mov	DWORD PTR _idx_in$8[ebp], ecx
	mov	DWORD PTR _idx_in$8[ebp+4], edx

; 106  : 
; 107  :     // Index in buf->pic_buffer and buf->pts_buffer.
; 108  :     int buf_idx = (idx_in + gop_buf_size) % gop_buf_size;

	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	mov	ecx, eax
	mov	esi, edx
	add	ecx, DWORD PTR _idx_in$8[ebp]
	adc	esi, DWORD PTR _idx_in$8[ebp+4]
	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__allrem
	mov	DWORD PTR _buf_idx$7[ebp], eax

; 109  : 
; 110  :     // Save the input image in the buffer.
; 111  :     assert(buf_idx >= 0 && buf_idx < gop_buf_size);

	cmp	DWORD PTR _buf_idx$7[ebp], 0
	jl	SHORT $LN28@kvz_encode
	mov	eax, DWORD PTR _buf_idx$7[ebp]
	cmp	eax, DWORD PTR _gop_buf_size$[ebp]
	jl	SHORT $LN29@kvz_encode
$LN28@kvz_encode:
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9
	add	ecx, 41					; 00000029H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EO@EPLCLDEH@?$AAb?$AAu?$AAf?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN29@kvz_encode:

; 112  :     assert(buf->pic_buffer[buf_idx] == NULL);

	mov	eax, DWORD PTR _buf_idx$7[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN30@kvz_encode
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9
	add	edx, 42					; 0000002aH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EC@HPBDNODO@?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAp?$AAi?$AAc?$AA_?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@kvz_encode:

; 113  :     buf->pic_buffer[buf_idx] = kvz_image_copy_ref(img_in);

	mov	eax, DWORD PTR _img_in$[ebp]
	push	eax
	call	_kvz_image_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _buf_idx$7[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 114  :     buf->pts_buffer[buf_idx] = img_in->pts;

	mov	eax, DWORD PTR _buf_idx$7[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _img_in$[ebp]
	mov	esi, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+eax*8+384], esi
	mov	edx, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+eax*8+388], edx

; 115  :     buf->num_in++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1152]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+1156]
	adc	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+1152], ecx
	mov	DWORD PTR [eax+1156], edx

; 116  : 
; 117  :     if (buf->num_in < cfg->gop_len + is_closed_gop ? 1 : 0) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	movzx	ecx, BYTE PTR _is_closed_gop$[ebp]
	add	eax, ecx
	cdq
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv557[ebp], ecx
	mov	DWORD PTR tv558[ebp], eax
	mov	DWORD PTR tv558[ebp+4], edx
	mov	edx, DWORD PTR tv557[ebp]
	mov	eax, DWORD PTR [edx+1156]
	cmp	eax, DWORD PTR tv558[ebp+4]
	ja	SHORT $LN31@kvz_encode
	jb	SHORT $LN41@kvz_encode
	mov	ecx, DWORD PTR tv557[ebp]
	mov	edx, DWORD PTR [ecx+1152]
	cmp	edx, DWORD PTR tv558[ebp]
	jae	SHORT $LN31@kvz_encode
$LN41@kvz_encode:
	mov	DWORD PTR tv195[ebp], 1
	jmp	SHORT $LN32@kvz_encode
$LN31@kvz_encode:
	mov	DWORD PTR tv195[ebp], 0
$LN32@kvz_encode:
	cmp	DWORD PTR tv195[ebp], 0
	je	SHORT $LN12@kvz_encode

; 118  :       // Not enough frames to start output.
; 119  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_encode
	jmp	$LN11@kvz_encode
$LN12@kvz_encode:

; 120  : 
; 121  :     } else if (buf->num_in == cfg->gop_len + is_closed_gop ? 1 : 0) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	movzx	ecx, BYTE PTR _is_closed_gop$[ebp]
	add	eax, ecx
	cdq
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv576[ebp], ecx
	mov	DWORD PTR tv577[ebp], eax
	mov	DWORD PTR tv577[ebp+4], edx
	mov	edx, DWORD PTR tv576[ebp]
	mov	eax, DWORD PTR [edx+1152]
	cmp	eax, DWORD PTR tv577[ebp]
	jne	SHORT $LN33@kvz_encode
	mov	ecx, DWORD PTR tv576[ebp]
	mov	edx, DWORD PTR [ecx+1156]
	cmp	edx, DWORD PTR tv577[ebp+4]
	jne	SHORT $LN33@kvz_encode
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN34@kvz_encode
$LN33@kvz_encode:
	mov	DWORD PTR tv204[ebp], 0
$LN34@kvz_encode:
	cmp	DWORD PTR tv204[ebp], 0
	je	SHORT $LN11@kvz_encode

; 122  :       // Now we known the PTSs that are needed to compute the delay.
; 123  :       buf->delay = buf->pts_buffer[gop_buf_size - 1] - img_in->pts;

	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _img_in$[ebp]
	mov	esi, DWORD PTR [ecx+eax*8+376]
	sub	esi, DWORD PTR [edx+56]
	mov	eax, DWORD PTR [ecx+eax*8+380]
	sbb	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+1168], esi
	mov	DWORD PTR [ecx+1172], eax
$LN11@kvz_encode:

; 124  :     }
; 125  :   }
; 126  : 
; 127  :   if (buf->num_out == buf->num_in) {

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv600[ebp], eax
	mov	DWORD PTR tv601[ebp], ecx
	mov	edx, DWORD PTR tv600[ebp]
	mov	eax, DWORD PTR tv601[ebp]
	mov	ecx, DWORD PTR [edx+1160]
	cmp	ecx, DWORD PTR [eax+1152]
	jne	SHORT $LN15@kvz_encode
	mov	edx, DWORD PTR tv600[ebp]
	mov	eax, DWORD PTR tv601[ebp]
	mov	ecx, DWORD PTR [edx+1164]
	cmp	ecx, DWORD PTR [eax+1156]
	jne	SHORT $LN15@kvz_encode

; 128  :     // All frames returned.
; 129  :     return NULL;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN15@kvz_encode:

; 130  :   }
; 131  : 
; 132  :   if (img_in == NULL && buf->num_in < cfg->gop_len + is_closed_gop ? 1 : 0) {

	cmp	DWORD PTR _img_in$[ebp], 0
	jne	SHORT $LN35@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	movzx	ecx, BYTE PTR _is_closed_gop$[ebp]
	add	eax, ecx
	cdq
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv618[ebp], ecx
	mov	DWORD PTR tv619[ebp], eax
	mov	DWORD PTR tv619[ebp+4], edx
	mov	edx, DWORD PTR tv618[ebp]
	mov	eax, DWORD PTR [edx+1156]
	cmp	eax, DWORD PTR tv619[ebp+4]
	ja	SHORT $LN35@kvz_encode
	jb	SHORT $LN42@kvz_encode
	mov	ecx, DWORD PTR tv618[ebp]
	mov	edx, DWORD PTR [ecx+1152]
	cmp	edx, DWORD PTR tv619[ebp]
	jae	SHORT $LN35@kvz_encode
$LN42@kvz_encode:
	mov	DWORD PTR tv224[ebp], 1
	jmp	SHORT $LN36@kvz_encode
$LN35@kvz_encode:
	mov	DWORD PTR tv224[ebp], 0
$LN36@kvz_encode:
	cmp	DWORD PTR tv224[ebp], 0
	je	SHORT $LN16@kvz_encode

; 133  :     // End of the sequence but we have less than a single GOP of frames. Use
; 134  :     // the difference between the PTSs of the first and the last frame as the
; 135  :     // delay.
; 136  :     int first_pic_idx = gop_buf_size - 1;

	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _first_pic_idx$6[ebp], eax

; 137  :     int last_pic_idx  = (buf->num_in - 2 + gop_buf_size) % gop_buf_size;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1152]
	sub	ecx, 2
	mov	esi, DWORD PTR [eax+1156]
	sbb	esi, 0
	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aullrem
	mov	DWORD PTR _last_pic_idx$5[ebp], eax

; 138  :     buf->delay = buf->pts_buffer[first_pic_idx] - buf->pts_buffer[last_pic_idx];

	mov	eax, DWORD PTR _first_pic_idx$6[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _last_pic_idx$5[ebp]
	mov	esi, DWORD PTR _buf$[ebp]
	mov	edi, DWORD PTR [ecx+eax*8+384]
	sub	edi, DWORD PTR [esi+edx*8+384]
	mov	eax, DWORD PTR [ecx+eax*8+388]
	sbb	eax, DWORD PTR [esi+edx*8+388]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+1168], edi
	mov	DWORD PTR [ecx+1172], eax
$LN16@kvz_encode:

; 139  :   }
; 140  : 
; 141  :   // Index of the next output picture, in range [-1, +inf). Values
; 142  :   // i and j refer to the same indices in buf->pic_buffer iff
; 143  :   // i === j (mod gop_buf_size).
; 144  :   int64_t idx_out;
; 145  : 
; 146  :   // DTS of the output picture.
; 147  :   int64_t dts_out;
; 148  : 
; 149  :   // Number of the next output picture in the GOP.
; 150  :   int gop_offset;
; 151  : 
; 152  :   if (buf->num_out == 0) {

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv678[ebp], eax
	mov	ecx, DWORD PTR tv678[ebp]
	mov	edx, DWORD PTR tv678[ebp]
	mov	eax, DWORD PTR [ecx+1160]
	or	eax, DWORD PTR [edx+1164]
	jne	SHORT $LN17@kvz_encode

; 153  :     // Output the first frame.
; 154  :     idx_out = -1;

	mov	DWORD PTR _idx_out$[ebp], -1
	mov	DWORD PTR _idx_out$[ebp+4], -1

; 155  :     dts_out = buf->pts_buffer[gop_buf_size - 1] + buf->delay;

	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	esi, DWORD PTR [ecx+eax*8+376]
	add	esi, DWORD PTR [edx+1168]
	mov	eax, DWORD PTR [ecx+eax*8+380]
	adc	eax, DWORD PTR [edx+1172]
	mov	DWORD PTR _dts_out$[ebp], esi
	mov	DWORD PTR _dts_out$[ebp+4], eax

; 156  :     gop_offset = 0; // highest quality picture

	mov	DWORD PTR _gop_offset$[ebp], 0
	jmp	$LN18@kvz_encode
$LN17@kvz_encode:

; 157  : 
; 158  :   } else if(first_done) {

	cmp	DWORD PTR _first_done$[ebp], 0
	je	$LN19@kvz_encode

; 159  :     gop_offset = (buf->num_out - 1) % cfg->gop_len;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	esi, DWORD PTR [eax+1164]
	sbb	esi, 0
	mov	edx, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aullrem
	mov	DWORD PTR _gop_offset$[ebp], eax

; 160  :     
; 161  :     // For closed gop, calculate the gop_offset again
; 162  :     if (!cfg->open_gop && cfg->intra_period > 0) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN21@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN21@kvz_encode

; 163  :       // Offset the GOP position for each extra I-frame added to the structure
; 164  :       // in closed gop case
; 165  :       int num_extra_frames = (buf->num_out - 1) / (cfg->intra_period + 1);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	esi, DWORD PTR [eax+1164]
	sbb	esi, 0
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _num_extra_frames$4[ebp], eax

; 166  :       gop_offset = (buf->num_out - 1 - num_extra_frames) % cfg->gop_len;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	esi, DWORD PTR [eax+1164]
	sbb	esi, 0
	mov	eax, DWORD PTR _num_extra_frames$4[ebp]
	cdq
	sub	ecx, eax
	sbb	esi, edx
	mov	edx, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aullrem
	mov	DWORD PTR _gop_offset$[ebp], eax
$LN21@kvz_encode:

; 167  :     }
; 168  : 
; 169  :     // Index of the first picture in the GOP that is being output.
; 170  :     int gop_start_idx = buf->num_out - 1 - gop_offset;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	eax, DWORD PTR _gop_offset$[ebp]
	cdq
	sub	ecx, eax
	mov	DWORD PTR _gop_start_idx$3[ebp], ecx

; 171  : 
; 172  :     // Skip pictures until we find an available one.
; 173  :     gop_offset += buf->gop_skipped;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _gop_offset$[ebp]
	add	ecx, DWORD PTR [eax+1176]
	mov	DWORD PTR _gop_offset$[ebp], ecx

; 174  : 
; 175  :     // Every closed-gop IRAP handled here
; 176  :     if (is_closed_gop && (!cfg->open_gop && ((buf->num_out - 1) % (cfg->intra_period + 1)) == cfg->intra_period)) {

	movzx	eax, BYTE PTR _is_closed_gop$[ebp]
	test	eax, eax
	je	$LN4@kvz_encode
	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN4@kvz_encode
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	esi, DWORD PTR [eax+1164]
	sbb	esi, 0
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__aullrem
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cdq
	mov	DWORD PTR tv832[ebp], ecx
	mov	DWORD PTR tv832[ebp+4], esi
	mov	DWORD PTR tv835[ebp], eax
	mov	DWORD PTR tv835[ebp+4], edx
	mov	eax, DWORD PTR tv832[ebp]
	cmp	eax, DWORD PTR tv835[ebp]
	jne	SHORT $LN4@kvz_encode
	mov	ecx, DWORD PTR tv832[ebp+4]
	cmp	ecx, DWORD PTR tv835[ebp+4]
	jne	SHORT $LN4@kvz_encode

; 177  :       idx_out = gop_start_idx;

	mov	eax, DWORD PTR _gop_start_idx$3[ebp]
	cdq
	mov	DWORD PTR _idx_out$[ebp], eax
	mov	DWORD PTR _idx_out$[ebp+4], edx

; 178  :     } else {

	jmp	$LN23@kvz_encode
$LN4@kvz_encode:

; 179  :       for (;;) {
; 180  :         assert(gop_offset < cfg->gop_len + is_closed_gop ? 1 : 0);

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	movzx	edx, BYTE PTR _is_closed_gop$[ebp]
	add	ecx, edx
	cmp	DWORD PTR _gop_offset$[ebp], ecx
	jge	SHORT $LN37@kvz_encode
	mov	DWORD PTR tv306[ebp], 1
	jmp	SHORT $LN38@kvz_encode
$LN37@kvz_encode:
	mov	DWORD PTR tv306[ebp], 0
$LN38@kvz_encode:
	cmp	DWORD PTR tv306[ebp], 0
	jne	SHORT $LN39@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9
	add	eax, 110				; 0000006eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GE@DCJMLMDO@?$AAg?$AAo?$AAp?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAc?$AAf@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@kvz_encode:

; 181  :         idx_out = gop_start_idx + cfg->gop[gop_offset].poc_offset - 1;

	mov	eax, DWORD PTR _gop_offset$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _cfg$[ebp]
	movsx	edx, BYTE PTR [ecx+eax+289]
	mov	eax, DWORD PTR _gop_start_idx$3[ebp]
	lea	eax, DWORD PTR [eax+edx-1]
	cdq
	mov	DWORD PTR _idx_out$[ebp], eax
	mov	DWORD PTR _idx_out$[ebp+4], edx

; 182  :         if (idx_out < buf->num_in - 1) {

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1152]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+1156]
	sbb	edx, 0
	mov	DWORD PTR tv868[ebp], ecx
	mov	DWORD PTR tv868[ebp+4], edx
	mov	eax, DWORD PTR _idx_out$[ebp+4]
	cmp	eax, DWORD PTR tv868[ebp+4]
	ja	SHORT $LN24@kvz_encode
	jb	SHORT $LN43@kvz_encode
	mov	ecx, DWORD PTR _idx_out$[ebp]
	cmp	ecx, DWORD PTR tv868[ebp]
	jae	SHORT $LN24@kvz_encode
$LN43@kvz_encode:

; 183  :           // An available picture found.
; 184  :           break;

	jmp	SHORT $LN23@kvz_encode
$LN24@kvz_encode:

; 185  :         }
; 186  :         buf->gop_skipped++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1176]
	add	ecx, 1
	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [edx+1176], ecx

; 187  :         gop_offset++;

	mov	eax, DWORD PTR _gop_offset$[ebp]
	add	eax, 1
	mov	DWORD PTR _gop_offset$[ebp], eax

; 188  :       }

	jmp	$LN4@kvz_encode
$LN23@kvz_encode:

; 189  :     }
; 190  : 
; 191  :     if (buf->num_out < cfg->gop_len - 1) {

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	sub	eax, 1
	cdq
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv886[ebp], ecx
	mov	DWORD PTR tv887[ebp], eax
	mov	DWORD PTR tv887[ebp+4], edx
	mov	edx, DWORD PTR tv886[ebp]
	mov	eax, DWORD PTR [edx+1164]
	cmp	eax, DWORD PTR tv887[ebp+4]
	ja	SHORT $LN25@kvz_encode
	jb	SHORT $LN44@kvz_encode
	mov	ecx, DWORD PTR tv886[ebp]
	mov	edx, DWORD PTR [ecx+1160]
	cmp	edx, DWORD PTR tv887[ebp]
	jae	SHORT $LN25@kvz_encode
$LN44@kvz_encode:

; 192  :       // This picture needs a DTS that is less than the PTS of the first
; 193  :       // frame so the delay must be applied.
; 194  :       int dts_idx = buf->num_out - 1;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	sub	ecx, 1
	mov	DWORD PTR _dts_idx$2[ebp], ecx

; 195  :       dts_out = buf->pts_buffer[dts_idx % gop_buf_size] + buf->delay;

	mov	eax, DWORD PTR _dts_idx$2[ebp]
	cdq
	idiv	DWORD PTR _gop_buf_size$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	esi, DWORD PTR [eax+edx*8+384]
	add	esi, DWORD PTR [ecx+1168]
	mov	edx, DWORD PTR [eax+edx*8+388]
	adc	edx, DWORD PTR [ecx+1172]
	mov	DWORD PTR _dts_out$[ebp], esi
	mov	DWORD PTR _dts_out$[ebp+4], edx

; 196  :     } else {

	jmp	SHORT $LN26@kvz_encode
$LN25@kvz_encode:

; 197  :       int dts_idx = buf->num_out - (cfg->gop_len - 1);

	mov	eax, DWORD PTR _cfg$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	sub	eax, 1
	cdq
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+1160]
	sub	edx, eax
	mov	DWORD PTR _dts_idx$1[ebp], edx

; 198  :       dts_out = buf->pts_buffer[dts_idx % gop_buf_size] - 1;

	mov	eax, DWORD PTR _dts_idx$1[ebp]
	cdq
	idiv	DWORD PTR _gop_buf_size$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+384]
	sub	ecx, 1
	mov	edx, DWORD PTR [eax+edx*8+388]
	sbb	edx, 0
	mov	DWORD PTR _dts_out$[ebp], ecx
	mov	DWORD PTR _dts_out$[ebp+4], edx
$LN26@kvz_encode:

; 199  :     }
; 200  :   }

	jmp	SHORT $LN18@kvz_encode
$LN19@kvz_encode:

; 201  :   else {
; 202  :     return NULL;

	xor	eax, eax
	jmp	$LN1@kvz_encode
$LN18@kvz_encode:

; 203  :   }
; 204  : 
; 205  :   // Index in buf->pic_buffer and buf->pts_buffer.
; 206  :   int buf_idx = (idx_out + gop_buf_size) % gop_buf_size;

	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	mov	ecx, eax
	mov	esi, edx
	add	ecx, DWORD PTR _idx_out$[ebp]
	adc	esi, DWORD PTR _idx_out$[ebp+4]
	mov	eax, DWORD PTR _gop_buf_size$[ebp]
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	__allrem
	mov	DWORD PTR _buf_idx$[ebp], eax

; 207  : 
; 208  :   kvz_picture* next_pic = buf->pic_buffer[buf_idx];

	mov	eax, DWORD PTR _buf_idx$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _next_pic$[ebp], edx

; 209  :   assert(next_pic != NULL);

	cmp	DWORD PTR _next_pic$[ebp], 0
	jne	SHORT $LN40@kvz_encode
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_encoder_feed_frame@@9@9
	add	eax, 139				; 0000008bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1IC@NGBLFIML@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1CC@IDONLOGO@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAp?$AAi?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@kvz_encode:

; 210  :   next_pic->dts = dts_out;

	mov	eax, DWORD PTR _next_pic$[ebp]
	mov	ecx, DWORD PTR _dts_out$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _dts_out$[ebp+4]
	mov	DWORD PTR [eax+68], edx

; 211  :   buf->pic_buffer[buf_idx] = NULL;

	mov	eax, DWORD PTR _buf_idx$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 212  :   state->frame->gop_offset = gop_offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	dl, BYTE PTR _gop_offset$[ebp]
	mov	BYTE PTR [ecx+16], dl

; 213  : 
; 214  :   buf->num_out++;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+1160]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+1164]
	adc	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+1160], ecx
	mov	DWORD PTR [eax+1164], edx

; 215  :   return next_pic;

	mov	eax, DWORD PTR _next_pic$[ebp]
$LN1@kvz_encode:

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_feed_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\input_frame_buffer.c
;	COMDAT _kvz_init_input_frame_buffer
_TEXT	SEGMENT
_input_buffer$ = 8					; size = 4
_kvz_init_input_frame_buffer PROC			; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __22DED5B7_input_frame_buffer@c
	call	@__CheckForDebuggerJustMyCode@4

; 42   :   FILL(input_buffer->pic_buffer, 0);

	push	384					; 00000180H
	push	0
	mov	eax, DWORD PTR _input_buffer$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 43   :   FILL(input_buffer->pts_buffer, 0);

	push	768					; 00000300H
	push	0
	mov	eax, DWORD PTR _input_buffer$[ebp]
	add	eax, 384				; 00000180H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 44   :   input_buffer->num_in = 0;

	mov	eax, DWORD PTR _input_buffer$[ebp]
	mov	DWORD PTR [eax+1152], 0
	mov	DWORD PTR [eax+1156], 0

; 45   :   input_buffer->num_out = 0;

	mov	eax, DWORD PTR _input_buffer$[ebp]
	mov	DWORD PTR [eax+1160], 0
	mov	DWORD PTR [eax+1164], 0

; 46   :   input_buffer->delay = 0;

	mov	eax, DWORD PTR _input_buffer$[ebp]
	mov	DWORD PTR [eax+1168], 0
	mov	DWORD PTR [eax+1172], 0

; 47   :   input_buffer->gop_skipped = 0;

	mov	eax, DWORD PTR _input_buffer$[ebp]
	mov	DWORD PTR [eax+1176], 0

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_init_input_frame_buffer ENDP
_TEXT	ENDS
END
