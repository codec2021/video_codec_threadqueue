; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
_DATA	SEGMENT
COMM	_kvz_g_hardware_flags:BYTE:038H
COMM	_kvz_g_strategies_in_use:BYTE:038H
COMM	_kvz_g_strategies_available:BYTE:038H
_DATA	ENDS
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__40DF0D2D_ctype@h DB 01H
__C5A167BB_basetsd@h DB 01H
__D24F4925_winnt@h DB 01H
__56CF70A3_processthreadsapi@h DB 01H
__4FC5969A_memoryapi@h DB 01H
__7D439CBC_winerror@h DB 01H
__41E0877F_winbase@h DB 01H
__08182E14_stralign@h DB 01H
__614D3496_malloc@h DB 01H
__4DF1518D_xmmintrin@h DB 01H
__A2BD402B_strategyselector@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_strategyselector_init
PUBLIC	_kvz_strategyselector_register
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CH@EKNONNEC@kvz_strategy_register_picture?5f@ ; `string'
PUBLIC	??_C@_0CD@LAPKDFAA@kvz_strategy_register_nal?5faile@ ; `string'
PUBLIC	??_C@_0CD@HCKLOIDH@kvz_strategy_register_dct?5faile@ ; `string'
PUBLIC	??_C@_0CE@KJGKMJLC@kvz_strategy_register_ipol?5fail@ ; `string'
PUBLIC	??_C@_0CF@PKHOAGIF@kvz_strategy_register_quant?5fai@ ; `string'
PUBLIC	??_C@_0CF@CHIEIPPB@kvz_strategy_register_intra?5fai@ ; `string'
PUBLIC	??_C@_0CD@NKDDJFKF@kvz_strategy_register_sao?5faile@ ; `string'
PUBLIC	??_C@_0CG@KMBNLILI@kvz_strategy_register_encode?5fa@ ; `string'
PUBLIC	??_C@_0CD@EJBJEFNP@Could?5not?5find?5a?5strategy?5for?5?$CF@ ; `string'
PUBLIC	??_C@_0M@PEGFIHGD@Available?3?5@		; `string'
PUBLIC	??_C@_08BDNEGGFL@avx?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_09BFCCGCHA@avx2?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_08NEDBLIDC@mmx?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_08NPALPPMG@sse?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_09JLFAFCBA@sse2?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_09DNCHFJKE@sse3?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_0L@DCDGNEG@sse41?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_0L@DCMLHHNL@sse42?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_0L@NCOKLEMM@ssse3?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_09ODGPPMLI@neon?$CI?$CFd?$CJ?5@		; `string'
PUBLIC	??_C@_0N@DINBMJKK@altivec?$CI?$CFd?$CJ?5@	; `string'
PUBLIC	??_C@_0BG@OAPKBJGO@no?5SIMD?5optimizations@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_08DEAGJAKA@In?5use?3?5@			; `string'
PUBLIC	??_C@_0CK@LEAOAEBD@Could?5not?5increase?5strategies?5l@ ; `string'
PUBLIC	??_C@_03OKLLFHJJ@avx@				; `string'
PUBLIC	??_C@_0M@HCLEBGM@x86_asm_avx@			; `string'
PUBLIC	??_C@_04GEEJMEMG@avx2@				; `string'
PUBLIC	??_C@_03LABOKELA@mmx@				; `string'
PUBLIC	??_C@_03OJAMGGHK@sse@				; `string'
PUBLIC	??_C@_04FNEJMADF@sse2@				; `string'
PUBLIC	??_C@_04EEFCPBHE@sse3@				; `string'
PUBLIC	??_C@_05JEDOPGOD@sse41@				; `string'
PUBLIC	??_C@_05LPBDKFCA@sse42@				; `string'
PUBLIC	??_C@_05LOAENIKF@ssse3@				; `string'
PUBLIC	??_C@_07IAIDDCCG@altivec@			; `string'
PUBLIC	??_C@_04KLNCAMML@neon@				; `string'
PUBLIC	?__LINE__Var@?0??strategyselector_choose_for@@9@9 ; `strategyselector_choose_for'::`1'::__LINE__Var
PUBLIC	??_C@_1HO@LOGOAHHJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1HE@EMBIHEHB@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAs?$AAt?$AAr?$AAa?$AAt?$AAe?$AAg?$AAy@ ; `string'
PUBLIC	??_C@_0BE@JPCADMJM@KVAZAAR_OVERRIDE_?$CFs@	; `string'
PUBLIC	??_C@_0DB@MMIPDOLG@?$CFs?5environment?5variable?5present@ ; `string'
PUBLIC	??_C@_0EA@FODNMCOC@?$CFs?5environment?5variable?5present@ ; `string'
PUBLIC	??_C@_0BI@NGHEKHIE@Compiled?3?5INTEL?0?5flags?3@ ; `string'
PUBLIC	??_C@_04JLECGOMJ@?5MMX@				; `string'
PUBLIC	??_C@_04MCFAKMAD@?5SSE@				; `string'
PUBLIC	??_C@_05HELLFFGH@?5SSE2@			; `string'
PUBLIC	??_C@_06DAFFMAI@?5SSSE3@			; `string'
PUBLIC	??_C@_06BBHCDEKO@?5SSE41@			; `string'
PUBLIC	??_C@_06DKFPGHGN@?5SSE42@			; `string'
PUBLIC	??_C@_0BJ@HAINGKIA@?6Detected?3?5INTEL?0?5flags?3@ ; `string'
PUBLIC	??_C@_05GNKAGECG@?5SSE3@			; `string'
PUBLIC	??_C@_04MBOHJNOA@?5AVX@				; `string'
PUBLIC	??_C@_05ENLLFBJE@?5AVX2@			; `string'
EXTRN	__imp___wassert:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp__getenv:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_kvz_strategy_register_nal:PROC
EXTRN	_kvz_strategy_register_picture:PROC
EXTRN	_kvz_strategy_register_dct:PROC
EXTRN	_kvz_strategy_register_ipol:PROC
EXTRN	_kvz_strategy_register_quant:PROC
EXTRN	_kvz_strategy_register_intra:PROC
EXTRN	_kvz_strategy_register_sao:PROC
EXTRN	_kvz_strategy_register_encode:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05ENLLFBJE@?5AVX2@
CONST	SEGMENT
??_C@_05ENLLFBJE@?5AVX2@ DB ' AVX2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MBOHJNOA@?5AVX@
CONST	SEGMENT
??_C@_04MBOHJNOA@?5AVX@ DB ' AVX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNKAGECG@?5SSE3@
CONST	SEGMENT
??_C@_05GNKAGECG@?5SSE3@ DB ' SSE3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAINGKIA@?6Detected?3?5INTEL?0?5flags?3@
CONST	SEGMENT
??_C@_0BJ@HAINGKIA@?6Detected?3?5INTEL?0?5flags?3@ DB 0aH, 'Detected: INT'
	DB	'EL, flags:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKFPGHGN@?5SSE42@
CONST	SEGMENT
??_C@_06DKFPGHGN@?5SSE42@ DB ' SSE42', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBHCDEKO@?5SSE41@
CONST	SEGMENT
??_C@_06BBHCDEKO@?5SSE41@ DB ' SSE41', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DAFFMAI@?5SSSE3@
CONST	SEGMENT
??_C@_06DAFFMAI@?5SSSE3@ DB ' SSSE3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HELLFFGH@?5SSE2@
CONST	SEGMENT
??_C@_05HELLFFGH@?5SSE2@ DB ' SSE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCFAKMAD@?5SSE@
CONST	SEGMENT
??_C@_04MCFAKMAD@?5SSE@ DB ' SSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLECGOMJ@?5MMX@
CONST	SEGMENT
??_C@_04JLECGOMJ@?5MMX@ DB ' MMX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NGHEKHIE@Compiled?3?5INTEL?0?5flags?3@
CONST	SEGMENT
??_C@_0BI@NGHEKHIE@Compiled?3?5INTEL?0?5flags?3@ DB 'Compiled: INTEL, fla'
	DB	'gs:', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FODNMCOC@?$CFs?5environment?5variable?5present@
CONST	SEGMENT
??_C@_0EA@FODNMCOC@?$CFs?5environment?5variable?5present@ DB '%s environm'
	DB	'ent variable present, but no strategy %s was found!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MMIPDOLG@?$CFs?5environment?5variable?5present@
CONST	SEGMENT
??_C@_0DB@MMIPDOLG@?$CFs?5environment?5variable?5present@ DB '%s environm'
	DB	'ent variable present, choosing %s:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JPCADMJM@KVAZAAR_OVERRIDE_?$CFs@
CONST	SEGMENT
??_C@_0BE@JPCADMJM@KVAZAAR_OVERRIDE_?$CFs@ DB 'KVAZAAR_OVERRIDE_%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@EMBIHEHB@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAs?$AAt?$AAr?$AAa?$AAt?$AAe?$AAg?$AAy@
CONST	SEGMENT
??_C@_1HE@EMBIHEHB@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAs?$AAt?$AAr?$AAa?$AAt?$AAe?$AAg?$AAy@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g'
	DB	00H, 'y', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	')', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H, '6'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '"', 00H, 'K', 00H, 'V'
	DB	00H, 'A', 00H, 'Z', 00H, 'A', 00H, 'A', 00H, 'R', 00H, '_', 00H
	DB	'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'I', 00H, 'D'
	DB	00H, 'E', 00H, '_', 00H, '"', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@LOGOAHHJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HO@LOGOAHHJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'y', 00H, 's'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??strategyselector_choose_for@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??strategyselector_choose_for@@9@9 DD 0113H ; `strategyselector_choose_for'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KLNCAMML@neon@
CONST	SEGMENT
??_C@_04KLNCAMML@neon@ DB 'neon', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IAIDDCCG@altivec@
CONST	SEGMENT
??_C@_07IAIDDCCG@altivec@ DB 'altivec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOAENIKF@ssse3@
CONST	SEGMENT
??_C@_05LOAENIKF@ssse3@ DB 'ssse3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPBDKFCA@sse42@
CONST	SEGMENT
??_C@_05LPBDKFCA@sse42@ DB 'sse42', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JEDOPGOD@sse41@
CONST	SEGMENT
??_C@_05JEDOPGOD@sse41@ DB 'sse41', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEFCPBHE@sse3@
CONST	SEGMENT
??_C@_04EEFCPBHE@sse3@ DB 'sse3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNEJMADF@sse2@
CONST	SEGMENT
??_C@_04FNEJMADF@sse2@ DB 'sse2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJAMGGHK@sse@
CONST	SEGMENT
??_C@_03OJAMGGHK@sse@ DB 'sse', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LABOKELA@mmx@
CONST	SEGMENT
??_C@_03LABOKELA@mmx@ DB 'mmx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GEEJMEMG@avx2@
CONST	SEGMENT
??_C@_04GEEJMEMG@avx2@ DB 'avx2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCLEBGM@x86_asm_avx@
CONST	SEGMENT
??_C@_0M@HCLEBGM@x86_asm_avx@ DB 'x86_asm_avx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OKLLFHJJ@avx@
CONST	SEGMENT
??_C@_03OKLLFHJJ@avx@ DB 'avx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LEAOAEBD@Could?5not?5increase?5strategies?5l@
CONST	SEGMENT
??_C@_0CK@LEAOAEBD@Could?5not?5increase?5strategies?5l@ DB 'Could not inc'
	DB	'rease strategies list size!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEAGJAKA@In?5use?3?5@
CONST	SEGMENT
??_C@_08DEAGJAKA@In?5use?3?5@ DB 'In use: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OAPKBJGO@no?5SIMD?5optimizations@
CONST	SEGMENT
??_C@_0BG@OAPKBJGO@no?5SIMD?5optimizations@ DB 'no SIMD optimizations', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DINBMJKK@altivec?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0N@DINBMJKK@altivec?$CI?$CFd?$CJ?5@ DB 'altivec(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODGPPMLI@neon?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_09ODGPPMLI@neon?$CI?$CFd?$CJ?5@ DB 'neon(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NCOKLEMM@ssse3?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0L@NCOKLEMM@ssse3?$CI?$CFd?$CJ?5@ DB 'ssse3(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCMLHHNL@sse42?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0L@DCMLHHNL@sse42?$CI?$CFd?$CJ?5@ DB 'sse42(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCDGNEG@sse41?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0L@DCDGNEG@sse41?$CI?$CFd?$CJ?5@ DB 'sse41(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DNCHFJKE@sse3?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_09DNCHFJKE@sse3?$CI?$CFd?$CJ?5@ DB 'sse3(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLFAFCBA@sse2?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_09JLFAFCBA@sse2?$CI?$CFd?$CJ?5@ DB 'sse2(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPALPPMG@sse?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_08NPALPPMG@sse?$CI?$CFd?$CJ?5@ DB 'sse(%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEDBLIDC@mmx?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_08NEDBLIDC@mmx?$CI?$CFd?$CJ?5@ DB 'mmx(%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BFCCGCHA@avx2?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_09BFCCGCHA@avx2?$CI?$CFd?$CJ?5@ DB 'avx2(%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BDNEGGFL@avx?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_08BDNEGGFL@avx?$CI?$CFd?$CJ?5@ DB 'avx(%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PEGFIHGD@Available?3?5@
CONST	SEGMENT
??_C@_0M@PEGFIHGD@Available?3?5@ DB 'Available: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EJBJEFNP@Could?5not?5find?5a?5strategy?5for?5?$CF@
CONST	SEGMENT
??_C@_0CD@EJBJEFNP@Could?5not?5find?5a?5strategy?5for?5?$CF@ DB 'Could no'
	DB	't find a strategy for %s!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KMBNLILI@kvz_strategy_register_encode?5fa@
CONST	SEGMENT
??_C@_0CG@KMBNLILI@kvz_strategy_register_encode?5fa@ DB 'kvz_strategy_reg'
	DB	'ister_encode failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NKDDJFKF@kvz_strategy_register_sao?5faile@
CONST	SEGMENT
??_C@_0CD@NKDDJFKF@kvz_strategy_register_sao?5faile@ DB 'kvz_strategy_reg'
	DB	'ister_sao failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CHIEIPPB@kvz_strategy_register_intra?5fai@
CONST	SEGMENT
??_C@_0CF@CHIEIPPB@kvz_strategy_register_intra?5fai@ DB 'kvz_strategy_reg'
	DB	'ister_intra failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PKHOAGIF@kvz_strategy_register_quant?5fai@
CONST	SEGMENT
??_C@_0CF@PKHOAGIF@kvz_strategy_register_quant?5fai@ DB 'kvz_strategy_reg'
	DB	'ister_quant failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KJGKMJLC@kvz_strategy_register_ipol?5fail@
CONST	SEGMENT
??_C@_0CE@KJGKMJLC@kvz_strategy_register_ipol?5fail@ DB 'kvz_strategy_reg'
	DB	'ister_ipol failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HCKLOIDH@kvz_strategy_register_dct?5faile@
CONST	SEGMENT
??_C@_0CD@HCKLOIDH@kvz_strategy_register_dct?5faile@ DB 'kvz_strategy_reg'
	DB	'ister_dct failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LAPKDFAA@kvz_strategy_register_nal?5faile@
CONST	SEGMENT
??_C@_0CD@LAPKDFAA@kvz_strategy_register_nal?5faile@ DB 'kvz_strategy_reg'
	DB	'ister_nal failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EKNONNEC@kvz_strategy_register_picture?5f@
CONST	SEGMENT
??_C@_0CH@EKNONNEC@kvz_strategy_register_picture?5f@ DB 'kvz_strategy_reg'
	DB	'ister_picture failed!', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
;	COMDAT _get_cpuid
_TEXT	SEGMENT
_ms_cpu_info$ = -48					; size = 16
_vendor_info$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_level$ = 8						; size = 4
_sublevel$ = 12						; size = 4
_cpu_info$ = 16						; size = 4
_get_cpuid PROC						; COMDAT

; 364  : static INLINE int get_cpuid(unsigned level, unsigned sublevel, cpuid_t *cpu_info) {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A2BD402B_strategyselector@c
	call	@__CheckForDebuggerJustMyCode@4

; 365  :   int vendor_info[4] = { 0, 0, 0, 0 };

	mov	DWORD PTR _vendor_info$[ebp], 0
	mov	DWORD PTR _vendor_info$[ebp+4], 0
	mov	DWORD PTR _vendor_info$[ebp+8], 0
	mov	DWORD PTR _vendor_info$[ebp+12], 0

; 366  :   __cpuidex(vendor_info, 0, 0);

	lea	esi, DWORD PTR _vendor_info$[ebp]
	xor	eax, eax
	xor	ecx, ecx
	cpuid
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], edx

; 367  : 
; 368  :   // Check highest supported function.
; 369  :   if (level > vendor_info[0]) return 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _level$[ebp]
	cmp	edx, DWORD PTR _vendor_info$[ebp+ecx]
	jbe	SHORT $LN2@get_cpuid
	xor	eax, eax
	jmp	$LN1@get_cpuid
$LN2@get_cpuid:

; 370  :   
; 371  :   int ms_cpu_info[4] = { cpu_info->eax, cpu_info->ebx, cpu_info->ecx, cpu_info->edx };

	mov	eax, DWORD PTR _cpu_info$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ms_cpu_info$[ebp], ecx
	mov	eax, DWORD PTR _cpu_info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ms_cpu_info$[ebp+4], ecx
	mov	eax, DWORD PTR _cpu_info$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ms_cpu_info$[ebp+8], ecx
	mov	eax, DWORD PTR _cpu_info$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ms_cpu_info$[ebp+12], ecx

; 372  :   __cpuidex(ms_cpu_info, level, sublevel);

	lea	esi, DWORD PTR _ms_cpu_info$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	mov	ecx, DWORD PTR _sublevel$[ebp]
	cpuid
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], edx

; 373  :   cpu_info->eax = ms_cpu_info[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cpu_info$[ebp]
	mov	eax, DWORD PTR _ms_cpu_info$[ebp+ecx]
	mov	DWORD PTR [edx], eax

; 374  :   cpu_info->ebx = ms_cpu_info[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cpu_info$[ebp]
	mov	edx, DWORD PTR _ms_cpu_info$[ebp+eax]
	mov	DWORD PTR [ecx+4], edx

; 375  :   cpu_info->ecx = ms_cpu_info[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _cpu_info$[ebp]
	mov	edx, DWORD PTR _ms_cpu_info$[ebp+eax]
	mov	DWORD PTR [ecx+8], edx

; 376  :   cpu_info->edx = ms_cpu_info[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cpu_info$[ebp]
	mov	eax, DWORD PTR _ms_cpu_info$[ebp+ecx]
	mov	DWORD PTR [edx+12], eax

; 377  : 
; 378  :   return 1;

	mov	eax, 1
$LN1@get_cpuid:

; 379  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@get_cpuid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@get_cpuid:
	DD	2
	DD	$LN6@get_cpuid
$LN6@get_cpuid:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@get_cpuid
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN5@get_cpuid
$LN5@get_cpuid:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN4@get_cpuid:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_get_cpuid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
;	COMDAT _strategyselector_choose_for
_TEXT	SEGMENT
_i$ = -312						; size = 4
_override$ = -300					; size = 4
_buffer$ = -288						; size = 256
_max_priority_i$ = -24					; size = 4
_max_priority$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_strategies$ = 8					; size = 4
_strategy_type$ = 12					; size = 4
_strategyselector_choose_for PROC			; COMDAT

; 275  : static void* strategyselector_choose_for(const strategy_list_t * const strategies, const char * const strategy_type) {

	push	ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A2BD402B_strategyselector@c
	call	@__CheckForDebuggerJustMyCode@4

; 276  :   unsigned int max_priority = 0;

	mov	DWORD PTR _max_priority$[ebp], 0

; 277  :   int max_priority_i = -1;

	mov	DWORD PTR _max_priority_i$[ebp], -1

; 278  :   char buffer[256];
; 279  :   char *override = NULL;

	mov	DWORD PTR _override$[ebp], 0

; 280  :   int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 281  :   
; 282  :   // Because VS doesn't support snprintf, let's assert that there is
; 283  :   // enough room in the buffer. Max length for strategy type is
; 284  :   // buffersize (256) - prefix including terminating zero.
; 285  :   assert(strlen(strategy_type) < 256 - sizeof("KVAZAAR_OVERRIDE_") );

	mov	eax, DWORD PTR _strategy_type$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	cmp	eax, 238				; 000000eeH
	jb	SHORT $LN23@strategyse
	mov	ecx, DWORD PTR ?__LINE__Var@?0??strategyselector_choose_for@@9@9
	add	ecx, 10					; 0000000aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HO@LOGOAHHJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1HE@EMBIHEHB@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AAs?$AAt?$AAr?$AAa?$AAt?$AAe?$AAg?$AAy@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@strategyse:

; 286  :   sprintf(buffer, "KVAZAAR_OVERRIDE_%s", strategy_type);

	mov	eax, DWORD PTR _strategy_type$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@JPCADMJM@KVAZAAR_OVERRIDE_?$CFs@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 287  : 
; 288  :   override = getenv(buffer);

	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__getenv
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _override$[ebp], eax

; 289  :   
; 290  :   for (i=0; i < strategies->count; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@strategyse
$LN2@strategyse:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@strategyse:
	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN3@strategyse

; 291  :     if (strcmp(strategies->strategies[i].type, strategy_type) == 0) {

	mov	eax, DWORD PTR _strategy_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _strategies$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN5@strategyse

; 292  :       if (override && strcmp(strategies->strategies[i].strategy_name, override) == 0) {

	cmp	DWORD PTR _override$[ebp], 0
	je	$LN6@strategyse
	mov	eax, DWORD PTR _override$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _strategies$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+4]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@strategyse

; 293  :         fprintf(stderr, "%s environment variable present, choosing %s:%s\n", buffer, strategy_type, strategies->strategies[i].strategy_name);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _strategy_type$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	OFFSET ??_C@_0DB@MMIPDOLG@?$CFs?5environment?5variable?5present@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 20					; 00000014H

; 294  :         return strategies->strategies[i].fptr;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+12]
	jmp	$LN1@strategyse
$LN6@strategyse:

; 295  :       }
; 296  :       if (strategies->strategies[i].priority >= max_priority) {

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+8]
	cmp	eax, DWORD PTR _max_priority$[ebp]
	jb	SHORT $LN5@strategyse

; 297  :         max_priority_i = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _max_priority_i$[ebp], eax

; 298  :         max_priority = strategies->strategies[i].priority;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR _max_priority$[ebp], eax
$LN5@strategyse:

; 299  :       }
; 300  :     }
; 301  :   }

	jmp	$LN2@strategyse
$LN3@strategyse:

; 302  :   
; 303  :   if (override) {

	cmp	DWORD PTR _override$[ebp], 0
	je	SHORT $LN8@strategyse

; 304  :     fprintf(stderr, "%s environment variable present, but no strategy %s was found!\n", buffer, override);

	mov	eax, DWORD PTR _override$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EA@FODNMCOC@?$CFs?5environment?5variable?5present@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H

; 305  :     return NULL;

	xor	eax, eax
	jmp	$LN1@strategyse
$LN8@strategyse:

; 306  :   }
; 307  : 
; 308  : #ifdef DEBUG_STRATEGYSELECTOR
; 309  :   fprintf(stderr, "Choosing strategy for %s:\n", strategy_type);
; 310  :   for (i=0; i < strategies->count; ++i) {
; 311  :     if (strcmp(strategies->strategies[i].type, strategy_type) == 0) {
; 312  :       if (i != max_priority_i) {
; 313  :         fprintf(stderr, "- %s (%d, %p)\n", strategies->strategies[i].strategy_name, strategies->strategies[i].priority, strategies->strategies[i].fptr);
; 314  :       } else {
; 315  :         fprintf(stderr, "> %s (%d, %p)\n", strategies->strategies[i].strategy_name, strategies->strategies[i].priority, strategies->strategies[i].fptr);
; 316  :       }
; 317  :     }
; 318  :   }
; 319  : #endif //DEBUG_STRATEGYSELECTOR
; 320  :   
; 321  :   
; 322  :   if (max_priority_i == -1) {

	cmp	DWORD PTR _max_priority_i$[ebp], -1
	jne	SHORT $LN9@strategyse

; 323  :     return NULL;

	xor	eax, eax
	jmp	$LN1@strategyse
$LN9@strategyse:

; 324  :   }
; 325  : 
; 326  :   //Check what strategy we are going to use
; 327  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "avx") == 0) kvz_g_strategies_in_use.intel_flags.avx++;

	push	OFFSET ??_C@_03OKLLFHJJ@avx@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+28
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+28, eax
$LN10@strategyse:

; 328  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "x86_asm_avx") == 0) kvz_g_strategies_in_use.intel_flags.avx++;

	push	OFFSET ??_C@_0M@HCLEBGM@x86_asm_avx@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+28
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+28, eax
$LN11@strategyse:

; 329  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "avx2") == 0) kvz_g_strategies_in_use.intel_flags.avx2++;

	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+32
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+32, eax
$LN12@strategyse:

; 330  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "mmx") == 0) kvz_g_strategies_in_use.intel_flags.mmx++;

	push	OFFSET ??_C@_03LABOKELA@mmx@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use, eax
$LN13@strategyse:

; 331  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse") == 0) kvz_g_strategies_in_use.intel_flags.sse++;

	push	OFFSET ??_C@_03OJAMGGHK@sse@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+4
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+4, eax
$LN14@strategyse:

; 332  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse2") == 0) kvz_g_strategies_in_use.intel_flags.sse2++;

	push	OFFSET ??_C@_04FNEJMADF@sse2@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+8
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+8, eax
$LN15@strategyse:

; 333  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse3") == 0) kvz_g_strategies_in_use.intel_flags.sse3++;

	push	OFFSET ??_C@_04EEFCPBHE@sse3@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+12
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+12, eax
$LN16@strategyse:

; 334  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse41") == 0) kvz_g_strategies_in_use.intel_flags.sse41++;

	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+20
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+20, eax
$LN17@strategyse:

; 335  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "sse42") == 0) kvz_g_strategies_in_use.intel_flags.sse42++;

	push	OFFSET ??_C@_05LPBDKFCA@sse42@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+24
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+24, eax
$LN18@strategyse:

; 336  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "ssse3") == 0) kvz_g_strategies_in_use.intel_flags.ssse3++;

	push	OFFSET ??_C@_05LOAENIKF@ssse3@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+16
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+16, eax
$LN19@strategyse:

; 337  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "altivec") == 0) kvz_g_strategies_in_use.powerpc_flags.altivec++;

	push	OFFSET ??_C@_07IAIDDCCG@altivec@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+40
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+40, eax
$LN20@strategyse:

; 338  :   if (strcmp(strategies->strategies[max_priority_i].strategy_name, "neon") == 0) kvz_g_strategies_in_use.arm_flags.neon++;

	push	OFFSET ??_C@_04KLNCAMML@neon@
	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@strategyse
	mov	eax, DWORD PTR _kvz_g_strategies_in_use+44
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_in_use+44, eax
$LN21@strategyse:

; 339  :   
; 340  :   return strategies->strategies[max_priority_i].fptr;

	mov	eax, DWORD PTR _max_priority_i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+12]
$LN1@strategyse:

; 341  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@strategyse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@strategyse:
	DD	1
	DD	$LN25@strategyse
$LN25@strategyse:
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN24@strategyse
$LN24@strategyse:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_strategyselector_choose_for ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
;	COMDAT _set_hardware_flags
_TEXT	SEGMENT
tv148 = -356						; size = 4
tv141 = -356						; size = 4
tv146 = -352						; size = 4
tv139 = -352						; size = 4
tv322 = -348						; size = 8
tv310 = -348						; size = 8
tv134 = -348						; size = 4
tv132 = -344						; size = 4
tv74 = -344						; size = 4
_cpuid7$1 = -144					; size = 16
_ymm_support$2 = -117					; size = 1
_xmm_support$3 = -105					; size = 1
_avx_support$4 = -93					; size = 1
_xcr0$5 = -84						; size = 8
_systeminfo$6 = -68					; size = 36
_cpuid1$7 = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cpuid$ = 8						; size = 4
_set_hardware_flags PROC				; COMDAT

; 452  : static void set_hardware_flags(int32_t cpuid) {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __A2BD402B_strategyselector@c
	call	@__CheckForDebuggerJustMyCode@4

; 453  :   FILL(kvz_g_hardware_flags, 0);

	push	56					; 00000038H
	push	0
	push	OFFSET _kvz_g_hardware_flags
	call	_memset
	add	esp, 12					; 0000000cH

; 454  : 
; 455  : #if COMPILE_INTEL
; 456  :   if (cpuid) {

	cmp	DWORD PTR _cpuid$[ebp], 0
	je	$LN2@set_hardwa

; 457  :     cpuid_t cpuid1 = { 0, 0, 0, 0 };

	mov	DWORD PTR _cpuid1$7[ebp], 0
	mov	DWORD PTR _cpuid1$7[ebp+4], 0
	mov	DWORD PTR _cpuid1$7[ebp+8], 0
	mov	DWORD PTR _cpuid1$7[ebp+12], 0

; 458  :     /* CPU feature bits */
; 459  :     enum {
; 460  :       CPUID1_EDX_MMX = 1 << 23,
; 461  :       CPUID1_EDX_SSE = 1 << 25,
; 462  :       CPUID1_EDX_SSE2 = 1 << 26,
; 463  :       CPUID1_EDX_HYPER_THREADING = 1 << 28,
; 464  :     };
; 465  :     enum {
; 466  :       CPUID1_ECX_SSE3 = 1 << 0,
; 467  :       CPUID1_ECX_SSSE3 = 1 << 9,
; 468  :       CPUID1_ECX_SSE41 = 1 << 19,
; 469  :       CPUID1_ECX_SSE42 = 1 << 20,
; 470  :       CPUID1_ECX_XSAVE = 1 << 26,
; 471  :       CPUID1_ECX_OSXSAVE = 1 << 27,
; 472  :       CPUID1_ECX_AVX = 1 << 28,
; 473  :     };
; 474  :     enum {
; 475  :       CPUID7_EBX_AVX2 = 1 << 5,
; 476  :     };
; 477  :     enum {
; 478  :       XGETBV_XCR0_XMM = 1 << 1,
; 479  :       XGETBV_XCR0_YMM = 1 << 2,
; 480  :     };
; 481  : 
; 482  :     // Dig CPU features with cpuid
; 483  :     get_cpuid(1, 0, &cpuid1);

	lea	eax, DWORD PTR _cpuid1$7[ebp]
	push	eax
	push	0
	push	1
	call	_get_cpuid
	add	esp, 12					; 0000000cH

; 484  : 
; 485  : #ifdef _WIN32
; 486  :     SYSTEM_INFO systeminfo;
; 487  :     GetSystemInfo(&systeminfo);

	mov	esi, esp
	lea	eax, DWORD PTR _systeminfo$6[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemInfo@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 488  : 
; 489  :     kvz_g_hardware_flags.logical_cpu_count = systeminfo.dwNumberOfProcessors;

	mov	eax, DWORD PTR _systeminfo$6[ebp+20]
	mov	DWORD PTR _kvz_g_hardware_flags+48, eax

; 490  : #else
; 491  :     kvz_g_hardware_flags.logical_cpu_count = sysconf(_SC_NPROCESSORS_ONLN);
; 492  : #endif
; 493  : 
; 494  :     kvz_g_hardware_flags.physical_cpu_count = kvz_g_hardware_flags.logical_cpu_count;

	mov	eax, DWORD PTR _kvz_g_hardware_flags+48
	mov	DWORD PTR _kvz_g_hardware_flags+52, eax

; 495  :     kvz_g_hardware_flags.intel_flags.hyper_threading = cpuid1.edx & CPUID1_EDX_HYPER_THREADING;

	mov	eax, DWORD PTR _cpuid1$7[ebp+12]
	and	eax, 268435456				; 10000000H
	jne	SHORT $LN25@set_hardwa
	mov	DWORD PTR tv74[ebp], 0
	jmp	SHORT $LN26@set_hardwa
$LN25@set_hardwa:
	mov	DWORD PTR tv74[ebp], 1
$LN26@set_hardwa:
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _kvz_g_hardware_flags+36, cl

; 496  :     if (kvz_g_hardware_flags.intel_flags.hyper_threading) {

	movzx	eax, BYTE PTR _kvz_g_hardware_flags+36
	test	eax, eax
	je	SHORT $LN3@set_hardwa

; 497  :       kvz_g_hardware_flags.physical_cpu_count /= 2;

	mov	eax, DWORD PTR _kvz_g_hardware_flags+52
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _kvz_g_hardware_flags+52, eax
$LN3@set_hardwa:

; 498  :     }
; 499  :     
; 500  :     // EDX
; 501  :     if (cpuid1.edx & CPUID1_EDX_MMX)   kvz_g_hardware_flags.intel_flags.mmx = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+12]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN4@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags, 1
$LN4@set_hardwa:

; 502  :     if (cpuid1.edx & CPUID1_EDX_SSE)   kvz_g_hardware_flags.intel_flags.sse = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+12]
	and	eax, 33554432				; 02000000H
	je	SHORT $LN5@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+4, 1
$LN5@set_hardwa:

; 503  :     if (cpuid1.edx & CPUID1_EDX_SSE2)  kvz_g_hardware_flags.intel_flags.sse2 = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+12]
	and	eax, 67108864				; 04000000H
	je	SHORT $LN6@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+8, 1
$LN6@set_hardwa:

; 504  :     // ECX
; 505  :     if (cpuid1.ecx & CPUID1_ECX_SSE3)  kvz_g_hardware_flags.intel_flags.sse3 = 1;;

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 1
	je	SHORT $LN7@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+12, 1
$LN7@set_hardwa:

; 506  :     if (cpuid1.ecx & CPUID1_ECX_SSSE3) kvz_g_hardware_flags.intel_flags.ssse3 = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 512				; 00000200H
	je	SHORT $LN8@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+16, 1
$LN8@set_hardwa:

; 507  :     if (cpuid1.ecx & CPUID1_ECX_SSE41) kvz_g_hardware_flags.intel_flags.sse41 = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 524288				; 00080000H
	je	SHORT $LN9@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+20, 1
$LN9@set_hardwa:

; 508  :     if (cpuid1.ecx & CPUID1_ECX_SSE42) kvz_g_hardware_flags.intel_flags.sse42 = 1;

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 1048576				; 00100000H
	je	SHORT $LN10@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+24, 1
$LN10@set_hardwa:

; 509  :     
; 510  :     // Check hardware and OS support for xsave and xgetbv.
; 511  :     if (cpuid1.ecx & (CPUID1_ECX_XSAVE | CPUID1_ECX_OSXSAVE)) {

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 201326592				; 0c000000H
	je	$LN2@set_hardwa

; 512  :       uint64_t xcr0 = 0;

	xorps	xmm0, xmm0
	movlpd	QWORD PTR _xcr0$5[ebp], xmm0

; 513  :       // Use _XCR_XFEATURE_ENABLED_MASK to check if _xgetbv intrinsic is
; 514  :       // supported by the compiler.
; 515  : #ifdef _XCR_XFEATURE_ENABLED_MASK
; 516  :       xcr0 = _xgetbv(_XCR_XFEATURE_ENABLED_MASK);

	xor	ecx, ecx
	xgetbv
	mov	DWORD PTR _xcr0$5[ebp], eax
	mov	DWORD PTR _xcr0$5[ebp+4], edx

; 517  : #elif defined(__GNUC__)
; 518  :       unsigned eax = 0, edx = 0;
; 519  :       asm("xgetbv" : "=a"(eax), "=d"(edx) : "c" (0));
; 520  :       xcr0 = (uint64_t)edx << 32 | eax;
; 521  : #endif
; 522  :       bool avx_support = cpuid1.ecx & CPUID1_ECX_AVX || false;

	mov	eax, DWORD PTR _cpuid1$7[ebp+8]
	and	eax, 268435456				; 10000000H
	jne	SHORT $LN27@set_hardwa
	xor	ecx, ecx
	jne	SHORT $LN27@set_hardwa
	mov	DWORD PTR tv132[ebp], 0
	jmp	SHORT $LN28@set_hardwa
$LN27@set_hardwa:
	mov	DWORD PTR tv132[ebp], 1
$LN28@set_hardwa:
	cmp	DWORD PTR tv132[ebp], 0
	jne	SHORT $LN29@set_hardwa
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN30@set_hardwa
$LN29@set_hardwa:
	mov	DWORD PTR tv134[ebp], 1
$LN30@set_hardwa:
	mov	dl, BYTE PTR tv134[ebp]
	mov	BYTE PTR _avx_support$4[ebp], dl

; 523  :       bool xmm_support = xcr0 & XGETBV_XCR0_XMM || false;

	mov	eax, DWORD PTR _xcr0$5[ebp]
	and	eax, 2
	mov	ecx, DWORD PTR _xcr0$5[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv310[ebp], eax
	mov	DWORD PTR tv310[ebp+4], ecx
	mov	edx, DWORD PTR tv310[ebp]
	or	edx, DWORD PTR tv310[ebp+4]
	jne	SHORT $LN31@set_hardwa
	xor	eax, eax
	jne	SHORT $LN31@set_hardwa
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN32@set_hardwa
$LN31@set_hardwa:
	mov	DWORD PTR tv139[ebp], 1
$LN32@set_hardwa:
	cmp	DWORD PTR tv139[ebp], 0
	jne	SHORT $LN33@set_hardwa
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN34@set_hardwa
$LN33@set_hardwa:
	mov	DWORD PTR tv141[ebp], 1
$LN34@set_hardwa:
	mov	cl, BYTE PTR tv141[ebp]
	mov	BYTE PTR _xmm_support$3[ebp], cl

; 524  :       bool ymm_support = xcr0 & XGETBV_XCR0_YMM || false;

	mov	eax, DWORD PTR _xcr0$5[ebp]
	and	eax, 4
	mov	ecx, DWORD PTR _xcr0$5[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv322[ebp], eax
	mov	DWORD PTR tv322[ebp+4], ecx
	mov	edx, DWORD PTR tv322[ebp]
	or	edx, DWORD PTR tv322[ebp+4]
	jne	SHORT $LN35@set_hardwa
	xor	eax, eax
	jne	SHORT $LN35@set_hardwa
	mov	DWORD PTR tv146[ebp], 0
	jmp	SHORT $LN36@set_hardwa
$LN35@set_hardwa:
	mov	DWORD PTR tv146[ebp], 1
$LN36@set_hardwa:
	cmp	DWORD PTR tv146[ebp], 0
	jne	SHORT $LN37@set_hardwa
	mov	DWORD PTR tv148[ebp], 0
	jmp	SHORT $LN38@set_hardwa
$LN37@set_hardwa:
	mov	DWORD PTR tv148[ebp], 1
$LN38@set_hardwa:
	mov	cl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _ymm_support$2[ebp], cl

; 525  : 
; 526  :       if (avx_support && xmm_support && ymm_support) {

	movzx	eax, BYTE PTR _avx_support$4[ebp]
	test	eax, eax
	je	SHORT $LN12@set_hardwa
	movzx	eax, BYTE PTR _xmm_support$3[ebp]
	test	eax, eax
	je	SHORT $LN12@set_hardwa
	movzx	eax, BYTE PTR _ymm_support$2[ebp]
	test	eax, eax
	je	SHORT $LN12@set_hardwa

; 527  :         kvz_g_hardware_flags.intel_flags.avx = 1;

	mov	DWORD PTR _kvz_g_hardware_flags+28, 1
$LN12@set_hardwa:

; 528  :       }
; 529  : 
; 530  :       if (kvz_g_hardware_flags.intel_flags.avx) {

	cmp	DWORD PTR _kvz_g_hardware_flags+28, 0
	je	SHORT $LN2@set_hardwa

; 531  :         cpuid_t cpuid7 = { 0, 0, 0, 0 };

	mov	DWORD PTR _cpuid7$1[ebp], 0
	mov	DWORD PTR _cpuid7$1[ebp+4], 0
	mov	DWORD PTR _cpuid7$1[ebp+8], 0
	mov	DWORD PTR _cpuid7$1[ebp+12], 0

; 532  :         get_cpuid(7, 0, &cpuid7);

	lea	eax, DWORD PTR _cpuid7$1[ebp]
	push	eax
	push	0
	push	7
	call	_get_cpuid
	add	esp, 12					; 0000000cH

; 533  :         if (cpuid7.ebx & CPUID7_EBX_AVX2)  kvz_g_hardware_flags.intel_flags.avx2 = 1;

	mov	eax, DWORD PTR _cpuid7$1[ebp+4]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@set_hardwa
	mov	DWORD PTR _kvz_g_hardware_flags+32, 1
$LN2@set_hardwa:

; 534  :       }
; 535  :     }
; 536  :   }
; 537  : 
; 538  :   fprintf(stderr, "Compiled: INTEL, flags:");

	push	OFFSET ??_C@_0BI@NGHEKHIE@Compiled?3?5INTEL?0?5flags?3@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 539  : #if COMPILE_INTEL_MMX
; 540  :   fprintf(stderr, " MMX");

	push	OFFSET ??_C@_04JLECGOMJ@?5MMX@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 541  : #endif
; 542  : #if COMPILE_INTEL_SSE
; 543  :   fprintf(stderr, " SSE");

	push	OFFSET ??_C@_04MCFAKMAD@?5SSE@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 544  : #endif
; 545  : #if COMPILE_INTEL_SSE2
; 546  :   fprintf(stderr, " SSE2");

	push	OFFSET ??_C@_05HELLFFGH@?5SSE2@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 547  : #endif
; 548  : #if COMPILE_INTEL_SSE3
; 549  :   fprintf(stderr, " SSE3");
; 550  : #endif
; 551  : #if COMPILE_INTEL_SSSE3
; 552  :   fprintf(stderr, " SSSE3");

	push	OFFSET ??_C@_06DAFFMAI@?5SSSE3@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 553  : #endif
; 554  : #if COMPILE_INTEL_SSE41
; 555  :   fprintf(stderr, " SSE41");

	push	OFFSET ??_C@_06BBHCDEKO@?5SSE41@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 556  : #endif
; 557  : #if COMPILE_INTEL_SSE42
; 558  :   fprintf(stderr, " SSE42");

	push	OFFSET ??_C@_06DKFPGHGN@?5SSE42@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 559  : #endif
; 560  : #if COMPILE_INTEL_AVX
; 561  :   fprintf(stderr, " AVX");
; 562  : #endif
; 563  : #if COMPILE_INTEL_AVX2
; 564  :   fprintf(stderr, " AVX2");
; 565  : #endif
; 566  :   fprintf(stderr, "\nDetected: INTEL, flags:");

	push	OFFSET ??_C@_0BJ@HAINGKIA@?6Detected?3?5INTEL?0?5flags?3@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 567  :   if (kvz_g_hardware_flags.intel_flags.mmx) fprintf(stderr, " MMX");

	cmp	DWORD PTR _kvz_g_hardware_flags, 0
	je	SHORT $LN15@set_hardwa
	push	OFFSET ??_C@_04JLECGOMJ@?5MMX@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN15@set_hardwa:

; 568  :   if (kvz_g_hardware_flags.intel_flags.sse) fprintf(stderr, " SSE");

	cmp	DWORD PTR _kvz_g_hardware_flags+4, 0
	je	SHORT $LN16@set_hardwa
	push	OFFSET ??_C@_04MCFAKMAD@?5SSE@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN16@set_hardwa:

; 569  :   if (kvz_g_hardware_flags.intel_flags.sse2) fprintf(stderr, " SSE2");

	cmp	DWORD PTR _kvz_g_hardware_flags+8, 0
	je	SHORT $LN17@set_hardwa
	push	OFFSET ??_C@_05HELLFFGH@?5SSE2@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN17@set_hardwa:

; 570  :   if (kvz_g_hardware_flags.intel_flags.sse3) fprintf(stderr, " SSE3");

	cmp	DWORD PTR _kvz_g_hardware_flags+12, 0
	je	SHORT $LN18@set_hardwa
	push	OFFSET ??_C@_05GNKAGECG@?5SSE3@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN18@set_hardwa:

; 571  :   if (kvz_g_hardware_flags.intel_flags.ssse3) fprintf(stderr, " SSSE3");

	cmp	DWORD PTR _kvz_g_hardware_flags+16, 0
	je	SHORT $LN19@set_hardwa
	push	OFFSET ??_C@_06DAFFMAI@?5SSSE3@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN19@set_hardwa:

; 572  :   if (kvz_g_hardware_flags.intel_flags.sse41) fprintf(stderr, " SSE41");

	cmp	DWORD PTR _kvz_g_hardware_flags+20, 0
	je	SHORT $LN20@set_hardwa
	push	OFFSET ??_C@_06BBHCDEKO@?5SSE41@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN20@set_hardwa:

; 573  :   if (kvz_g_hardware_flags.intel_flags.sse42) fprintf(stderr, " SSE42");

	cmp	DWORD PTR _kvz_g_hardware_flags+24, 0
	je	SHORT $LN21@set_hardwa
	push	OFFSET ??_C@_06DKFPGHGN@?5SSE42@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN21@set_hardwa:

; 574  :   if (kvz_g_hardware_flags.intel_flags.avx) fprintf(stderr, " AVX");

	cmp	DWORD PTR _kvz_g_hardware_flags+28, 0
	je	SHORT $LN22@set_hardwa
	push	OFFSET ??_C@_04MBOHJNOA@?5AVX@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN22@set_hardwa:

; 575  :   if (kvz_g_hardware_flags.intel_flags.avx2) fprintf(stderr, " AVX2");

	cmp	DWORD PTR _kvz_g_hardware_flags+32, 0
	je	SHORT $LN23@set_hardwa
	push	OFFSET ??_C@_05ENLLFBJE@?5AVX2@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN23@set_hardwa:

; 576  :   fprintf(stderr, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 577  : #endif //COMPILE_INTEL
; 578  : 
; 579  : #if COMPILE_POWERPC
; 580  :   if (cpuid) {
; 581  :     kvz_g_hardware_flags.powerpc_flags.altivec = altivec_available();
; 582  :   }
; 583  :   
; 584  :   fprintf(stderr, "Compiled: PowerPC, flags:");
; 585  : #if COMPILE_POWERPC_ALTIVEC
; 586  :   fprintf(stderr, " AltiVec");
; 587  : #endif
; 588  :   fprintf(stderr, "\nDetected: PowerPC, flags:");
; 589  :   if (kvz_g_hardware_flags.powerpc_flags.altivec) fprintf(stderr, " AltiVec");
; 590  :   fprintf(stderr, "\n");
; 591  : #endif
; 592  :   
; 593  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@set_hardwa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN43@set_hardwa:
	DD	3
	DD	$LN42@set_hardwa
$LN42@set_hardwa:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN39@set_hardwa
	DD	-68					; ffffffbcH
	DD	36					; 00000024H
	DD	$LN40@set_hardwa
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN41@set_hardwa
$LN41@set_hardwa:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	55					; 00000037H
	DB	0
$LN40@set_hardwa:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN39@set_hardwa:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	49					; 00000031H
	DB	0
_set_hardware_flags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1793 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1395 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
;	COMDAT _kvz_strategyselector_register
_TEXT	SEGMENT
_new_strategy$1 = -32					; size = 4
_new_strategies$2 = -20					; size = 4
_strategies$ = -8					; size = 4
_opaque$ = 8						; size = 4
_type$ = 12						; size = 4
_strategy_name$ = 16					; size = 4
_priority$ = 20						; size = 4
_fptr$ = 24						; size = 4
_kvz_strategyselector_register PROC			; COMDAT

; 233  : int kvz_strategyselector_register(void * const opaque, const char * const type, const char * const strategy_name, int priority, void * const fptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2BD402B_strategyselector@c
	call	@__CheckForDebuggerJustMyCode@4

; 234  :   strategy_list_t * const strategies = opaque;

	mov	eax, DWORD PTR _opaque$[ebp]
	mov	DWORD PTR _strategies$[ebp], eax

; 235  :   
; 236  :   if (strategies->allocated == strategies->count) {

	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR _strategies$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@kvz_strate

; 237  :     strategy_t* new_strategies = realloc(strategies->strategies, sizeof(strategy_t) * (strategies->allocated + STRATEGY_LIST_ALLOC_SIZE));

	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 16					; 00000010H
	shl	ecx, 4
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _strategies$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _new_strategies$2[ebp], eax

; 238  :     if (!new_strategies) {

	cmp	DWORD PTR _new_strategies$2[ebp], 0
	jne	SHORT $LN3@kvz_strate

; 239  :       fprintf(stderr, "Could not increase strategies list size!\n");

	push	OFFSET ??_C@_0CK@LEAOAEBD@Could?5not?5increase?5strategies?5l@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 240  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN3@kvz_strate:

; 241  :     }
; 242  :     strategies->strategies = new_strategies;

	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR _new_strategies$2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 243  :     strategies->allocated += STRATEGY_LIST_ALLOC_SIZE;

	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _strategies$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@kvz_strate:

; 244  :   }
; 245  :   
; 246  :   {
; 247  :     strategy_t *new_strategy = &strategies->strategies[strategies->count++];

	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _strategies$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _new_strategy$1[ebp], ecx
	mov	eax, DWORD PTR _strategies$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _strategies$[ebp]
	mov	DWORD PTR [edx], ecx

; 248  :     new_strategy->type = type;

	mov	eax, DWORD PTR _new_strategy$1[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx

; 249  :     new_strategy->strategy_name = strategy_name;

	mov	eax, DWORD PTR _new_strategy$1[ebp]
	mov	ecx, DWORD PTR _strategy_name$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 250  :     new_strategy->priority = priority;

	mov	eax, DWORD PTR _new_strategy$1[ebp]
	mov	ecx, DWORD PTR _priority$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 251  :     new_strategy->fptr = fptr;

	mov	eax, DWORD PTR _new_strategy$1[ebp]
	mov	ecx, DWORD PTR _fptr$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 252  :   }
; 253  : 
; 254  :   //Check what strategies are available when they are registered
; 255  :   if (strcmp(strategy_name, "avx") == 0) kvz_g_strategies_available.intel_flags.avx++;

	push	OFFSET ??_C@_03OKLLFHJJ@avx@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+28
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+28, eax
$LN4@kvz_strate:

; 256  :   if (strcmp(strategy_name, "x86_asm_avx") == 0) kvz_g_strategies_available.intel_flags.avx++;

	push	OFFSET ??_C@_0M@HCLEBGM@x86_asm_avx@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+28
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+28, eax
$LN5@kvz_strate:

; 257  :   if (strcmp(strategy_name, "avx2") == 0) kvz_g_strategies_available.intel_flags.avx2++;

	push	OFFSET ??_C@_04GEEJMEMG@avx2@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+32
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+32, eax
$LN6@kvz_strate:

; 258  :   if (strcmp(strategy_name, "mmx") == 0) kvz_g_strategies_available.intel_flags.mmx++;

	push	OFFSET ??_C@_03LABOKELA@mmx@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available, eax
$LN7@kvz_strate:

; 259  :   if (strcmp(strategy_name, "sse") == 0) kvz_g_strategies_available.intel_flags.sse++;

	push	OFFSET ??_C@_03OJAMGGHK@sse@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+4
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+4, eax
$LN8@kvz_strate:

; 260  :   if (strcmp(strategy_name, "sse2") == 0) kvz_g_strategies_available.intel_flags.sse2++;

	push	OFFSET ??_C@_04FNEJMADF@sse2@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+8
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+8, eax
$LN9@kvz_strate:

; 261  :   if (strcmp(strategy_name, "sse3") == 0) kvz_g_strategies_available.intel_flags.sse3++;

	push	OFFSET ??_C@_04EEFCPBHE@sse3@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+12
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+12, eax
$LN10@kvz_strate:

; 262  :   if (strcmp(strategy_name, "sse41") == 0) kvz_g_strategies_available.intel_flags.sse41++;

	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+20
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+20, eax
$LN11@kvz_strate:

; 263  :   if (strcmp(strategy_name, "sse42") == 0) kvz_g_strategies_available.intel_flags.sse42++;

	push	OFFSET ??_C@_05LPBDKFCA@sse42@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+24
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+24, eax
$LN12@kvz_strate:

; 264  :   if (strcmp(strategy_name, "ssse3") == 0) kvz_g_strategies_available.intel_flags.ssse3++;

	push	OFFSET ??_C@_05LOAENIKF@ssse3@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+16
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+16, eax
$LN13@kvz_strate:

; 265  :   if (strcmp(strategy_name, "altivec") == 0) kvz_g_strategies_available.powerpc_flags.altivec++;

	push	OFFSET ??_C@_07IAIDDCCG@altivec@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+40
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+40, eax
$LN14@kvz_strate:

; 266  :   if (strcmp(strategy_name, "neon") == 0) kvz_g_strategies_available.arm_flags.neon++;

	push	OFFSET ??_C@_04KLNCAMML@neon@
	mov	eax, DWORD PTR _strategy_name$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@kvz_strate
	mov	eax, DWORD PTR _kvz_g_strategies_available+44
	add	eax, 1
	mov	DWORD PTR _kvz_g_strategies_available+44, eax
$LN15@kvz_strate:

; 267  : 
; 268  : #ifdef DEBUG_STRATEGYSELECTOR
; 269  :   fprintf(stderr, "Registered strategy %s:%s with priority %d (%p)\n", type, strategy_name, priority, fptr);
; 270  : #endif //DEBUG_STRATEGYSELECTOR
; 271  :   
; 272  :   return 1;

	mov	eax, 1
$LN1@kvz_strate:

; 273  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategyselector_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategyselector.c
;	COMDAT _kvz_strategyselector_init
_TEXT	SEGMENT
_strategies_in_use$1 = -49				; size = 1
_strategies_available$2 = -37				; size = 1
_strategies$ = -28					; size = 12
_cur_strategy_to_select$ = -8				; size = 4
_cpuid$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategyselector_init PROC				; COMDAT

; 55   : int kvz_strategyselector_init(int32_t cpuid, uint8_t bitdepth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A2BD402B_strategyselector@c
	call	@__CheckForDebuggerJustMyCode@4

; 56   :   const strategy_to_select_t *cur_strategy_to_select = strategies_to_select;

	mov	DWORD PTR _cur_strategy_to_select$[ebp], OFFSET _strategies_to_select

; 57   :   strategy_list_t strategies;
; 58   :   
; 59   :   strategies.allocated = 0;

	mov	DWORD PTR _strategies$[ebp+4], 0

; 60   :   strategies.count = 0;

	mov	DWORD PTR _strategies$[ebp], 0

; 61   :   strategies.strategies = NULL;

	mov	DWORD PTR _strategies$[ebp+8], 0

; 62   :   
; 63   :   set_hardware_flags(cpuid);

	mov	eax, DWORD PTR _cpuid$[ebp]
	push	eax
	call	_set_hardware_flags
	add	esp, 4

; 64   :   
; 65   :   //Add new register function here
; 66   :   if (!kvz_strategy_register_picture(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_picture
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@kvz_strate

; 67   :     fprintf(stderr, "kvz_strategy_register_picture failed!\n");

	push	OFFSET ??_C@_0CH@EKNONNEC@kvz_strategy_register_picture?5f@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 68   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN4@kvz_strate:

; 69   :   }
; 70   :   
; 71   :   if (!kvz_strategy_register_nal(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_nal
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@kvz_strate

; 72   :     fprintf(stderr, "kvz_strategy_register_nal failed!\n");

	push	OFFSET ??_C@_0CD@LAPKDFAA@kvz_strategy_register_nal?5faile@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 73   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN5@kvz_strate:

; 74   :   }
; 75   : 
; 76   :   if (!kvz_strategy_register_dct(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_dct
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@kvz_strate

; 77   :     fprintf(stderr, "kvz_strategy_register_dct failed!\n");

	push	OFFSET ??_C@_0CD@HCKLOIDH@kvz_strategy_register_dct?5faile@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 78   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN6@kvz_strate:

; 79   :   }
; 80   : 
; 81   :   if (!kvz_strategy_register_ipol(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_ipol
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@kvz_strate

; 82   :     fprintf(stderr, "kvz_strategy_register_ipol failed!\n");

	push	OFFSET ??_C@_0CE@KJGKMJLC@kvz_strategy_register_ipol?5fail@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 83   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN7@kvz_strate:

; 84   :   }
; 85   : 
; 86   :   if (!kvz_strategy_register_quant(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_quant
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@kvz_strate

; 87   :     fprintf(stderr, "kvz_strategy_register_quant failed!\n");

	push	OFFSET ??_C@_0CF@PKHOAGIF@kvz_strategy_register_quant?5fai@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 88   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN8@kvz_strate:

; 89   :   }
; 90   : 
; 91   :   if (!kvz_strategy_register_intra(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_intra
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@kvz_strate

; 92   :     fprintf(stderr, "kvz_strategy_register_intra failed!\n");

	push	OFFSET ??_C@_0CF@CHIEIPPB@kvz_strategy_register_intra?5fai@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 93   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN9@kvz_strate:

; 94   :   }
; 95   : 
; 96   :   if (!kvz_strategy_register_sao(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_sao
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@kvz_strate

; 97   :     fprintf(stderr, "kvz_strategy_register_sao failed!\n");

	push	OFFSET ??_C@_0CD@NKDDJFKF@kvz_strategy_register_sao?5faile@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 98   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN10@kvz_strate:

; 99   :   }
; 100  :   
; 101  :   if (!kvz_strategy_register_encode(&strategies, bitdepth)) {

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strategies$[ebp]
	push	ecx
	call	_kvz_strategy_register_encode
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@kvz_strate

; 102  :     fprintf(stderr, "kvz_strategy_register_encode failed!\n");

	push	OFFSET ??_C@_0CG@KMBNLILI@kvz_strategy_register_encode?5fa@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 103  :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN2@kvz_strate:

; 104  :   }
; 105  :   
; 106  :   while(cur_strategy_to_select->fptr) {

	mov	eax, DWORD PTR _cur_strategy_to_select$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@kvz_strate

; 107  :     *(cur_strategy_to_select->fptr) = strategyselector_choose_for(&strategies, cur_strategy_to_select->strategy_type);

	mov	eax, DWORD PTR _cur_strategy_to_select$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _strategies$[ebp]
	push	edx
	call	_strategyselector_choose_for
	add	esp, 8
	mov	ecx, DWORD PTR _cur_strategy_to_select$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax

; 108  :     
; 109  :     if (!(*(cur_strategy_to_select->fptr))) {

	mov	eax, DWORD PTR _cur_strategy_to_select$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN12@kvz_strate

; 110  :       fprintf(stderr, "Could not find a strategy for %s!\n", cur_strategy_to_select->strategy_type);

	mov	eax, DWORD PTR _cur_strategy_to_select$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CD@EJBJEFNP@Could?5not?5find?5a?5strategy?5for?5?$CF@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 111  :       return 0;

	xor	eax, eax
	jmp	$LN1@kvz_strate
$LN12@kvz_strate:

; 112  :     }
; 113  :     ++cur_strategy_to_select;

	mov	eax, DWORD PTR _cur_strategy_to_select$[ebp]
	add	eax, 8
	mov	DWORD PTR _cur_strategy_to_select$[ebp], eax

; 114  :   }

	jmp	SHORT $LN2@kvz_strate
$LN3@kvz_strate:

; 115  : 
; 116  :   //We can free the structure now, as all strategies are statically set to pointers
; 117  :   if (strategies.allocated) {

	cmp	DWORD PTR _strategies$[ebp+4], 0
	je	$LN13@kvz_strate

; 118  :     //Also check what optimizations are available and what are in use
; 119  :     //SIMD optimizations available
; 120  :     bool strategies_available = false;

	mov	BYTE PTR _strategies_available$2[ebp], 0

; 121  :     fprintf(stderr, "Available: ");

	push	OFFSET ??_C@_0M@PEGFIHGD@Available?3?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 122  :     if (kvz_g_strategies_available.intel_flags.avx != 0){

	cmp	DWORD PTR _kvz_g_strategies_available+28, 0
	je	SHORT $LN14@kvz_strate

; 123  :       fprintf(stderr, "avx(%d) ", kvz_g_strategies_available.intel_flags.avx);

	mov	eax, DWORD PTR _kvz_g_strategies_available+28
	push	eax
	push	OFFSET ??_C@_08BDNEGGFL@avx?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 124  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN14@kvz_strate:

; 125  :     }
; 126  :     if (kvz_g_strategies_available.intel_flags.avx2 != 0){

	cmp	DWORD PTR _kvz_g_strategies_available+32, 0
	je	SHORT $LN15@kvz_strate

; 127  :       fprintf(stderr, "avx2(%d) ", kvz_g_strategies_available.intel_flags.avx2);

	mov	eax, DWORD PTR _kvz_g_strategies_available+32
	push	eax
	push	OFFSET ??_C@_09BFCCGCHA@avx2?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 128  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN15@kvz_strate:

; 129  :     }
; 130  :     if (kvz_g_strategies_available.intel_flags.mmx != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available, 0
	je	SHORT $LN16@kvz_strate

; 131  :       fprintf(stderr, "mmx(%d) ", kvz_g_strategies_available.intel_flags.mmx);

	mov	eax, DWORD PTR _kvz_g_strategies_available
	push	eax
	push	OFFSET ??_C@_08NEDBLIDC@mmx?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 132  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN16@kvz_strate:

; 133  :     }
; 134  :     if (kvz_g_strategies_available.intel_flags.sse != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+4, 0
	je	SHORT $LN17@kvz_strate

; 135  :       fprintf(stderr, "sse(%d) ", kvz_g_strategies_available.intel_flags.sse);

	mov	eax, DWORD PTR _kvz_g_strategies_available+4
	push	eax
	push	OFFSET ??_C@_08NPALPPMG@sse?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 136  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN17@kvz_strate:

; 137  :     }
; 138  :     if (kvz_g_strategies_available.intel_flags.sse2 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+8, 0
	je	SHORT $LN18@kvz_strate

; 139  :       fprintf(stderr, "sse2(%d) ", kvz_g_strategies_available.intel_flags.sse2);

	mov	eax, DWORD PTR _kvz_g_strategies_available+8
	push	eax
	push	OFFSET ??_C@_09JLFAFCBA@sse2?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 140  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN18@kvz_strate:

; 141  :     }
; 142  :     if (kvz_g_strategies_available.intel_flags.sse3 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+12, 0
	je	SHORT $LN19@kvz_strate

; 143  :       fprintf(stderr, "sse3(%d) ", kvz_g_strategies_available.intel_flags.sse3);

	mov	eax, DWORD PTR _kvz_g_strategies_available+12
	push	eax
	push	OFFSET ??_C@_09DNCHFJKE@sse3?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 144  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN19@kvz_strate:

; 145  :     }
; 146  :     if (kvz_g_strategies_available.intel_flags.sse41 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+20, 0
	je	SHORT $LN20@kvz_strate

; 147  :       fprintf(stderr, "sse41(%d) ", kvz_g_strategies_available.intel_flags.sse41);

	mov	eax, DWORD PTR _kvz_g_strategies_available+20
	push	eax
	push	OFFSET ??_C@_0L@DCDGNEG@sse41?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 148  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN20@kvz_strate:

; 149  :     }
; 150  :     if (kvz_g_strategies_available.intel_flags.sse42 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+24, 0
	je	SHORT $LN21@kvz_strate

; 151  :       fprintf(stderr, "sse42(%d) ", kvz_g_strategies_available.intel_flags.sse42);

	mov	eax, DWORD PTR _kvz_g_strategies_available+24
	push	eax
	push	OFFSET ??_C@_0L@DCMLHHNL@sse42?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 152  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN21@kvz_strate:

; 153  :     }
; 154  :     if (kvz_g_strategies_available.intel_flags.ssse3 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+16, 0
	je	SHORT $LN22@kvz_strate

; 155  :       fprintf(stderr, "ssse3(%d) ", kvz_g_strategies_available.intel_flags.ssse3);

	mov	eax, DWORD PTR _kvz_g_strategies_available+16
	push	eax
	push	OFFSET ??_C@_0L@NCOKLEMM@ssse3?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 156  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN22@kvz_strate:

; 157  :     }
; 158  :     if (kvz_g_strategies_available.arm_flags.neon != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+44, 0
	je	SHORT $LN23@kvz_strate

; 159  :       fprintf(stderr, "neon(%d) ", kvz_g_strategies_available.arm_flags.neon);

	mov	eax, DWORD PTR _kvz_g_strategies_available+44
	push	eax
	push	OFFSET ??_C@_09ODGPPMLI@neon?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 160  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN23@kvz_strate:

; 161  :     }
; 162  :     if (kvz_g_strategies_available.powerpc_flags.altivec != 0) {

	cmp	DWORD PTR _kvz_g_strategies_available+40, 0
	je	SHORT $LN24@kvz_strate

; 163  :       fprintf(stderr, "altivec(%d) ", kvz_g_strategies_available.powerpc_flags.altivec);

	mov	eax, DWORD PTR _kvz_g_strategies_available+40
	push	eax
	push	OFFSET ??_C@_0N@DINBMJKK@altivec?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 164  :       strategies_available = true;

	mov	BYTE PTR _strategies_available$2[ebp], 1
$LN24@kvz_strate:

; 165  :     }
; 166  :     //If there is no strategies available
; 167  :     if (!strategies_available){

	movzx	eax, BYTE PTR _strategies_available$2[ebp]
	test	eax, eax
	jne	SHORT $LN25@kvz_strate

; 168  :       fprintf(stderr, "no SIMD optimizations");

	push	OFFSET ??_C@_0BG@OAPKBJGO@no?5SIMD?5optimizations@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN25@kvz_strate:

; 169  :     }
; 170  :     fprintf(stderr, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 171  : 
; 172  :     //SIMD optimizations in use
; 173  :     bool strategies_in_use = false;

	mov	BYTE PTR _strategies_in_use$1[ebp], 0

; 174  :     fprintf(stderr, "In use: ");

	push	OFFSET ??_C@_08DEAGJAKA@In?5use?3?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 175  :     if (kvz_g_strategies_in_use.intel_flags.avx != 0){

	cmp	DWORD PTR _kvz_g_strategies_in_use+28, 0
	je	SHORT $LN26@kvz_strate

; 176  :       fprintf(stderr, "avx(%d) ", kvz_g_strategies_in_use.intel_flags.avx);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+28
	push	eax
	push	OFFSET ??_C@_08BDNEGGFL@avx?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 177  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN26@kvz_strate:

; 178  :     }
; 179  :     if (kvz_g_strategies_in_use.intel_flags.avx2 != 0){ 

	cmp	DWORD PTR _kvz_g_strategies_in_use+32, 0
	je	SHORT $LN27@kvz_strate

; 180  :       fprintf(stderr, "avx2(%d) ", kvz_g_strategies_in_use.intel_flags.avx2);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+32
	push	eax
	push	OFFSET ??_C@_09BFCCGCHA@avx2?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 181  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN27@kvz_strate:

; 182  :     }
; 183  :     if (kvz_g_strategies_in_use.intel_flags.mmx != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use, 0
	je	SHORT $LN28@kvz_strate

; 184  :       fprintf(stderr, "mmx(%d) ", kvz_g_strategies_in_use.intel_flags.mmx);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use
	push	eax
	push	OFFSET ??_C@_08NEDBLIDC@mmx?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 185  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN28@kvz_strate:

; 186  :     }
; 187  :     if (kvz_g_strategies_in_use.intel_flags.sse != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+4, 0
	je	SHORT $LN29@kvz_strate

; 188  :       fprintf(stderr, "sse(%d) ", kvz_g_strategies_in_use.intel_flags.sse);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+4
	push	eax
	push	OFFSET ??_C@_08NPALPPMG@sse?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 189  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN29@kvz_strate:

; 190  :     }
; 191  :     if (kvz_g_strategies_in_use.intel_flags.sse2 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+8, 0
	je	SHORT $LN30@kvz_strate

; 192  :       fprintf(stderr, "sse2(%d) ", kvz_g_strategies_in_use.intel_flags.sse2);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+8
	push	eax
	push	OFFSET ??_C@_09JLFAFCBA@sse2?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 193  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN30@kvz_strate:

; 194  :     }
; 195  :     if (kvz_g_strategies_in_use.intel_flags.sse3 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+12, 0
	je	SHORT $LN31@kvz_strate

; 196  :       fprintf(stderr, "sse3(%d) ", kvz_g_strategies_in_use.intel_flags.sse3);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+12
	push	eax
	push	OFFSET ??_C@_09DNCHFJKE@sse3?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 197  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN31@kvz_strate:

; 198  :     }
; 199  :     if (kvz_g_strategies_in_use.intel_flags.sse41 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+20, 0
	je	SHORT $LN32@kvz_strate

; 200  :       fprintf(stderr, "sse41(%d) ", kvz_g_strategies_in_use.intel_flags.sse41);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+20
	push	eax
	push	OFFSET ??_C@_0L@DCDGNEG@sse41?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 201  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN32@kvz_strate:

; 202  :     }
; 203  :     if (kvz_g_strategies_in_use.intel_flags.sse42 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+24, 0
	je	SHORT $LN33@kvz_strate

; 204  :       fprintf(stderr, "sse42(%d) ", kvz_g_strategies_in_use.intel_flags.sse42);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+24
	push	eax
	push	OFFSET ??_C@_0L@DCMLHHNL@sse42?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 205  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN33@kvz_strate:

; 206  :     }
; 207  :     if (kvz_g_strategies_in_use.intel_flags.ssse3 != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+16, 0
	je	SHORT $LN34@kvz_strate

; 208  :       fprintf(stderr, "ssse3(%d) ", kvz_g_strategies_in_use.intel_flags.ssse3);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+16
	push	eax
	push	OFFSET ??_C@_0L@NCOKLEMM@ssse3?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 209  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN34@kvz_strate:

; 210  :     }
; 211  :     if (kvz_g_strategies_in_use.arm_flags.neon != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+44, 0
	je	SHORT $LN35@kvz_strate

; 212  :       fprintf(stderr, "neon(%d) ", kvz_g_strategies_in_use.arm_flags.neon);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+44
	push	eax
	push	OFFSET ??_C@_09ODGPPMLI@neon?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 213  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN35@kvz_strate:

; 214  :     }
; 215  :     if (kvz_g_strategies_in_use.powerpc_flags.altivec != 0) {

	cmp	DWORD PTR _kvz_g_strategies_in_use+40, 0
	je	SHORT $LN36@kvz_strate

; 216  :       fprintf(stderr, "altivec(%d) ", kvz_g_strategies_in_use.powerpc_flags.altivec);

	mov	eax, DWORD PTR _kvz_g_strategies_in_use+40
	push	eax
	push	OFFSET ??_C@_0N@DINBMJKK@altivec?$CI?$CFd?$CJ?5@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 217  :       strategies_in_use = true;

	mov	BYTE PTR _strategies_in_use$1[ebp], 1
$LN36@kvz_strate:

; 218  :     }
; 219  :     //If there is no strategies in use
; 220  :     if (!strategies_in_use){

	movzx	eax, BYTE PTR _strategies_in_use$1[ebp]
	test	eax, eax
	jne	SHORT $LN37@kvz_strate

; 221  :       fprintf(stderr, "no SIMD optimizations");

	push	OFFSET ??_C@_0BG@OAPKBJGO@no?5SIMD?5optimizations@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8
$LN37@kvz_strate:

; 222  :     }
; 223  :     fprintf(stderr, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 224  : 
; 225  :     //Free memory
; 226  :     free(strategies.strategies);

	mov	esi, esp
	mov	eax, DWORD PTR _strategies$[ebp+8]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@kvz_strate:

; 227  :   }
; 228  : 
; 229  :   return 1;

	mov	eax, 1
$LN1@kvz_strate:

; 230  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@kvz_strate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@kvz_strate:
	DD	1
	DD	$LN40@kvz_strate
$LN40@kvz_strate:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN39@kvz_strate
$LN39@kvz_strate:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_kvz_strategyselector_init ENDP
_TEXT	ENDS
END
