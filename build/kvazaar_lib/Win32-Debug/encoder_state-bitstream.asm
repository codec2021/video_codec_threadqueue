; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__C4AC213E_kvz_math@h DB 01H
__3C032D02_encoder_state-bitstream@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
?sar@?2??encoder_state_write_bitstream_VUI@@9@9 DB 01H	; `encoder_state_write_bitstream_VUI'::`3'::sar
	DB	01H
	DB	01H
	DB	0cH
	DB	0bH
	DB	02H
	DB	0aH
	DB	0bH
	DB	03H
	DB	010H
	DB	0bH
	DB	04H
	DB	028H
	DB	021H
	DB	05H
	DB	018H
	DB	0bH
	DB	06H
	DB	014H
	DB	0bH
	DB	07H
	DB	020H
	DB	0bH
	DB	08H
	DB	050H
	DB	021H
	DB	09H
	DB	012H
	DB	0bH
	DB	0aH
	DB	0fH
	DB	0bH
	DB	0bH
	DB	040H
	DB	021H
	DB	0cH
	DB	0a0H
	DB	063H
	DB	0dH
	DB	04H
	DB	03H
	DB	0eH
	DB	03H
	DB	02H
	DB	0fH
	DB	02H
	DB	01H
	DB	010H
	DB	00H
	DB	00H
	DB	0ffH
	ORG $+1
?uuid@?1??encoder_state_write_bitstream_prefix_sei_version@@9@9 DB 032H ; `encoder_state_write_bitstream_prefix_sei_version'::`2'::uuid
	DB	0feH
	DB	046H
	DB	06cH
	DB	098H
	DB	041H
	DB	042H
	DB	069H
	DB	0aeH
	DB	035H
	DB	06aH
	DB	091H
	DB	054H
	DB	09eH
	DB	0f3H
	DB	0f1H
CONST	ENDS
PUBLIC	_kvz_encoder_state_write_bitstream_slice_header
PUBLIC	_kvz_encoder_state_write_bitstream
PUBLIC	_kvz_encoder_state_worker_write_bitstream
PUBLIC	_kvz_encoder_state_write_parameter_sets
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_math_floor_log2@@9@9	; `kvz_math_floor_log2'::`1'::__LINE__Var
PUBLIC	??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_math_ceil_log2@@9@9	; `kvz_math_ceil_log2'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??encoder_state_write_bitstream_seq_parameter_set@@9@9 ; `encoder_state_write_bitstream_seq_parameter_set'::`1'::__LINE__Var
PUBLIC	??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1DC@ELCHBKFA@?$AA?$CB?$AA?$CI?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?9?$AA?$DO?$AAi?$AAn?$AA?4?$AAw@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_write_bitstream_prefix_sei_version@@9@9 ; `encoder_state_write_bitstream_prefix_sei_version'::`1'::__LINE__Var
PUBLIC	??_C@_0FN@ELJLADAF@Kvazaar?5HEVC?5Encoder?5v?4?52?41?40?5?9@ ; `string'
PUBLIC	??_C@_06HGBPOMO@?5?$CFdx?$CFd@			; `string'
PUBLIC	??_C@_0BC@FJPGAPBH@?5deblock?$DN?$CFd?3?$CFd?3?$CFd@ ; `string'
PUBLIC	??_C@_07FLLHLOMB@?5sao?$DN?$CFd@		; `string'
PUBLIC	??_C@_0BB@JKLOKGBN@?5intra_period?$DN?$CFd@	; `string'
PUBLIC	??_C@_06KJNECNGC@?5qp?$DN?$CFd@			; `string'
PUBLIC	??_C@_07GLEBJFBC@?5ref?$DN?$CFd@		; `string'
PUBLIC	??_C@_1DC@FPBMINMI@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAS?$AAT?$AAR?$AA_?$AAB?$AAU@ ; `string'
PUBLIC	?__LINE__Var@?0??encoder_state_write_picture_timing_sei_message@@9@9 ; `encoder_state_write_picture_timing_sei_message'::`1'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_0BO@MGDOLLFI@Failure?0?5reference?5not?5found?$CB@ ; `string'
PUBLIC	?__LINE__Var@?0??add_checksum@@9@9		; `add_checksum'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??kvz_encoder_state_write_bitstream@@9@9 ; `kvz_encoder_state_write_bitstream'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@ODPDELMK@Unsupported?5node?5type?5?$CFc?$CB?6@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	__imp__exit:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_kvz_bitstream_tell:PROC
EXTRN	_kvz_bitstream_move:PROC
EXTRN	_kvz_bitstream_put:PROC
EXTRN	_kvz_bitstream_put_ue:PROC
EXTRN	_kvz_bitstream_put_se:PROC
EXTRN	_kvz_bitstream_add_rbsp_trailing_bits:PROC
EXTRN	_kvz_bitstream_align:PROC
EXTRN	_kvz_scalinglist_get_default:PROC
EXTRN	_kvz_nal_write:PROC
EXTRN	_kvz_image_checksum:PROC
EXTRN	_kvz_image_md5:PROC
EXTRN	_kvz_update_after_picture:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullshr:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_g_scaling_list_num:DWORD
EXTRN	_kvz_g_scaling_list_size:QWORD
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BL@ODPDELMK@Unsupported?5node?5type?5?$CFc?$CB?6@
CONST	SEGMENT
??_C@_0BL@ODPDELMK@Unsupported?5node?5type?5?$CFc?$CB?6@ DB 'Unsupported '
	DB	'node type %c!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encoder_state_write_bitstream@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encoder_state_write_bitstream@@9@9 DD 0452H ; `kvz_encoder_state_write_bitstream'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??add_checksum@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??add_checksum@@9@9 DD 03b4H		; `add_checksum'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@MGDOLLFI@Failure?0?5reference?5not?5found?$CB@
CONST	SEGMENT
??_C@_0BO@MGDOLLFI@Failure?0?5reference?5not?5found?$CB@ DB 'Failure, ref'
	DB	'erence not found!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_write_picture_timing_sei_message@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_write_picture_timing_sei_message@@9@9 DD 0292H ; `encoder_state_write_picture_timing_sei_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@FPBMINMI@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAS?$AAT?$AAR?$AA_?$AAB?$AAU@
CONST	SEGMENT
??_C@_1DC@FPBMINMI@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAS?$AAT?$AAR?$AA_?$AAB?$AAU@ DB 'l'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'R', 00H, '_', 00H, 'B'
	DB	00H, 'U', 00H, 'F', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'N', 00H
	DB	' ', 00H, '/', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLEBJFBC@?5ref?$DN?$CFd@
CONST	SEGMENT
??_C@_07GLEBJFBC@?5ref?$DN?$CFd@ DB ' ref=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJNECNGC@?5qp?$DN?$CFd@
CONST	SEGMENT
??_C@_06KJNECNGC@?5qp?$DN?$CFd@ DB ' qp=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JKLOKGBN@?5intra_period?$DN?$CFd@
CONST	SEGMENT
??_C@_0BB@JKLOKGBN@?5intra_period?$DN?$CFd@ DB ' intra_period=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLLHLOMB@?5sao?$DN?$CFd@
CONST	SEGMENT
??_C@_07FLLHLOMB@?5sao?$DN?$CFd@ DB ' sao=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FJPGAPBH@?5deblock?$DN?$CFd?3?$CFd?3?$CFd@
CONST	SEGMENT
??_C@_0BC@FJPGAPBH@?5deblock?$DN?$CFd?3?$CFd?3?$CFd@ DB ' deblock=%d:%d:%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGBPOMO@?5?$CFdx?$CFd@
CONST	SEGMENT
??_C@_06HGBPOMO@?5?$CFdx?$CFd@ DB ' %dx%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@ELJLADAF@Kvazaar?5HEVC?5Encoder?5v?4?52?41?40?5?9@
CONST	SEGMENT
??_C@_0FN@ELJLADAF@Kvazaar?5HEVC?5Encoder?5v?4?52?41?40?5?9@ DB 'Kvazaar '
	DB	'HEVC Encoder v. 2.1.0 - Copyleft 2012-2015 - http://ultravide'
	DB	'o.cs.tut.fi/ - options:', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_write_bitstream_prefix_sei_version@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_write_bitstream_prefix_sei_version@@9@9 DD 023eH ; `encoder_state_write_bitstream_prefix_sei_version'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ELCHBKFA@?$AA?$CB?$AA?$CI?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?9?$AA?$DO?$AAi?$AAn?$AA?4?$AAw@
CONST	SEGMENT
??_C@_1DC@ELCHBKFA@?$AA?$CB?$AA?$CI?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?9?$AA?$DO?$AAi?$AAn?$AA?4?$AAw@ DB '!'
	DB	00H, '(', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H, '.'
	DB	00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'%', 00H, ' ', 00H, '2', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 't', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'm', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encoder_state_write_bitstream_seq_parameter_set@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encoder_state_write_bitstream_seq_parameter_set@@9@9 DD 016aH ; `encoder_state_write_bitstream_seq_parameter_set'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_math_ceil_log2@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_math_ceil_log2@@9@9 DD 03cH	; `kvz_math_ceil_log2'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H, 'v', 00H
	DB	'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_math_floor_log2@@9@9 DD 02cH	; `kvz_math_floor_log2'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_main
_TEXT	SEGMENT
_newpos$ = -52						; size = 8
_curpos$ = -36						; size = 8
_stream$ = -20						; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_write_bitstream_main PROC		; COMDAT

; 1036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1037 :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 1038 :   bitstream_t * const stream = &state->stream;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _stream$[ebp], eax

; 1039 :   uint64_t curpos = kvz_bitstream_tell(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	mov	DWORD PTR _curpos$[ebp], eax
	mov	DWORD PTR _curpos$[ebp+4], edx

; 1040 : 
; 1041 :   // The first NAL unit of the access unit must use a long start code.
; 1042 :   state->frame->first_nal = true;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 1

; 1043 : 
; 1044 :   // Access Unit Delimiter (AUD)
; 1045 :   if (encoder->cfg.aud_enable) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN2@encoder_st

; 1046 :     state->frame->first_nal = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 0

; 1047 :     encoder_state_write_bitstream_aud(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_bitstream_aud
	add	esp, 4
$LN2@encoder_st:

; 1048 :   }
; 1049 : 
; 1050 :   if (encoder_state_must_write_vps(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_must_write_vps
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@encoder_st

; 1051 :     state->frame->first_nal = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 0

; 1052 :     kvz_encoder_state_write_parameter_sets(&state->stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_kvz_encoder_state_write_parameter_sets
	add	esp, 8
$LN3@encoder_st:

; 1053 :   }
; 1054 : 
; 1055 :   // Send Kvazaar version information only in the first frame.
; 1056 :   if (state->frame->num == 0 && encoder->cfg.add_encoder_info) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN4@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN4@encoder_st

; 1057 :     kvz_nal_write(stream, KVZ_NAL_PREFIX_SEI_NUT, 0, state->frame->first_nal);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+168]
	push	edx
	push	0
	push	39					; 00000027H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1058 :     state->frame->first_nal = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 0

; 1059 :     encoder_state_write_bitstream_prefix_sei_version(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_bitstream_prefix_sei_version
	add	esp, 4

; 1060 : 
; 1061 :     // spec:sei_rbsp() rbsp_trailing_bits
; 1062 :     kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4
$LN4@encoder_st:

; 1063 :   }
; 1064 : 
; 1065 :   //SEI messages for interlacing
; 1066 :   if (encoder->vui.frame_field_info_present_flag) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2549]
	test	ecx, ecx
	je	SHORT $LN5@encoder_st

; 1067 :     // These should be optional, needed for earlier versions
; 1068 :     // of HM decoder to accept bitstream
; 1069 :     //kvz_nal_write(stream, KVZ_NAL_PREFIX_SEI_NUT, 0, 0);
; 1070 :     //encoder_state_write_active_parameter_sets_sei_message(state);
; 1071 :     //kvz_bitstream_rbsp_trailing_bits(stream);
; 1072 : 
; 1073 :     kvz_nal_write(stream, KVZ_NAL_PREFIX_SEI_NUT, 0, state->frame->first_nal);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+168]
	push	edx
	push	0
	push	39					; 00000027H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1074 :     state->frame->first_nal = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 0

; 1075 :     encoder_state_write_picture_timing_sei_message(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_picture_timing_sei_message
	add	esp, 4

; 1076 : 
; 1077 :     // spec:sei_rbsp() rbsp_trailing_bits
; 1078 :     kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4
$LN5@encoder_st:

; 1079 :   }
; 1080 : 
; 1081 :   encoder_state_write_bitstream_children(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_bitstream_children
	add	esp, 4

; 1082 : 
; 1083 :   if (state->encoder_control->cfg.hash != KVZ_HASH_NONE) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2340], 0
	je	SHORT $LN6@encoder_st

; 1084 :     // Calculate checksum
; 1085 :     add_checksum(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_add_checksum
	add	esp, 4
$LN6@encoder_st:

; 1086 :   }
; 1087 : 
; 1088 :   //Get bitstream length for stats
; 1089 :   uint64_t newpos = kvz_bitstream_tell(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	mov	DWORD PTR _newpos$[ebp], eax
	mov	DWORD PTR _newpos$[ebp+4], edx

; 1090 :   state->stats_bitstream_length = (newpos >> 3) - (curpos >> 3);

	mov	eax, DWORD PTR _newpos$[ebp]
	mov	edx, DWORD PTR _newpos$[ebp+4]
	mov	cl, 3
	call	__aullshr
	mov	esi, eax
	mov	eax, DWORD PTR _curpos$[ebp]
	mov	edx, DWORD PTR _curpos$[ebp+4]
	mov	cl, 3
	call	__aullshr
	sub	esi, eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+288], esi

; 1091 : 
; 1092 :   if (state->frame->num > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jle	SHORT $LN7@encoder_st

; 1093 :     state->frame->total_bits_coded = state->previous_encoder_state->frame->total_bits_coded;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [ecx+88], eax
	mov	edx, DWORD PTR [edx+92]
	mov	DWORD PTR [ecx+92], edx
$LN7@encoder_st:

; 1094 :   }
; 1095 :   state->frame->total_bits_coded += newpos - curpos;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _newpos$[ebp]
	sub	edx, DWORD PTR _curpos$[ebp]
	mov	eax, DWORD PTR _newpos$[ebp+4]
	sbb	eax, DWORD PTR _curpos$[ebp+4]
	add	edx, DWORD PTR [ecx+88]
	adc	eax, DWORD PTR [ecx+92]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [ecx+88], edx
	mov	DWORD PTR [ecx+92], eax

; 1096 :   if(state->encoder_control->cfg.rc_algorithm == KVZ_OBA || state->encoder_control->cfg.stats_file_prefix) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2452]
	cmp	edx, 2
	je	SHORT $LN9@encoder_st
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2460], 0
	je	SHORT $LN8@encoder_st
$LN9@encoder_st:

; 1097 :     kvz_update_after_picture(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_update_after_picture
	add	esp, 4
$LN8@encoder_st:

; 1098 :   }
; 1099 : 
; 1100 :   if(state->frame->gop_offset)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN10@encoder_st

; 1101 :     state->frame->cur_gop_bits_coded = state->previous_encoder_state->frame->cur_gop_bits_coded;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	edx, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], edx
$LN10@encoder_st:

; 1102 :   state->frame->cur_gop_bits_coded += newpos - curpos;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _newpos$[ebp]
	sub	edx, DWORD PTR _curpos$[ebp]
	mov	eax, DWORD PTR _newpos$[ebp+4]
	sbb	eax, DWORD PTR _curpos$[ebp+4]
	add	edx, DWORD PTR [ecx+96]
	adc	eax, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [ecx+96], edx
	mov	DWORD PTR [ecx+100], eax

; 1103 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_children
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_write_bitstream_children PROC		; COMDAT

; 1018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1019 :   // Write Slice headers to the parent stream instead of the child stream
; 1020 :   // in case the child stream is a leaf with something in it already.
; 1021 :   for (int i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN1@encoder_st

; 1022 :     if (state->children[i].type == ENCODER_STATE_TYPE_SLICE) {

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+4], 83		; 00000053H
	jne	SHORT $LN5@encoder_st

; 1023 :       encoder_state_write_slice_header(&state->stream, &state->children[i], true);

	push	1
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_encoder_state_write_slice_header
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:

; 1024 :     } else if (state->children[i].type == ENCODER_STATE_TYPE_WAVEFRONT_ROW) {

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+4], 87		; 00000057H
	jne	SHORT $LN6@encoder_st

; 1025 :       if ((state->encoder_control->cfg.slices & KVZ_SLICES_WPP) && i != 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2408]
	and	edx, 2
	je	SHORT $LN6@encoder_st
	cmp	DWORD PTR _i$1[ebp], 0
	je	SHORT $LN6@encoder_st

; 1026 :         // Add header for dependent WPP row slice.
; 1027 :         encoder_state_write_slice_header(&state->stream, &state->children[i], false);

	push	0
	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	_encoder_state_write_slice_header
	add	esp, 12					; 0000000cH
$LN6@encoder_st:

; 1028 :       }
; 1029 :     }
; 1030 :     kvz_encoder_state_write_bitstream(&state->children[i]);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_kvz_encoder_state_write_bitstream
	add	esp, 4

; 1031 :     kvz_bitstream_move(&state->stream, &state->children[i].stream);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+48]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_kvz_bitstream_move
	add	esp, 8

; 1032 :   }

	jmp	$LN2@encoder_st
$LN1@encoder_st:

; 1033 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_children ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_slice_header
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_independent$ = 16					; size = 1
_encoder_state_write_slice_header PROC			; COMDAT

; 1006 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1007 :   kvz_nal_write(stream, state->frame->pictype, 0, state->frame->first_nal);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+168]
	push	edx
	push	0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1008 :   state->frame->first_nal = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+168], 0

; 1009 : 
; 1010 :   kvz_encoder_state_write_bitstream_slice_header(stream, state, independent);

	movzx	eax, BYTE PTR _independent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_encoder_state_write_bitstream_slice_header
	add	esp, 12					; 0000000cH

; 1011 :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 1012 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_slice_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _add_checksum
_TEXT	SEGMENT
tv80 = -340						; size = 4
tv77 = -340						; size = 4
_b$1 = -140						; size = 4
_i$2 = -128						; size = 4
_checksum_val$3 = -116					; size = 4
_i$4 = -104						; size = 4
_num_colors$ = -92					; size = 4
_checksum$ = -80					; size = 48
_frame$ = -24						; size = 4
_stream$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_add_checksum PROC					; COMDAT

; 948  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 949  :   bitstream_t * const stream = &state->stream;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _stream$[ebp], eax

; 950  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 951  :   unsigned char checksum[3][SEI_HASH_MAX_LENGTH];
; 952  : 
; 953  :   kvz_nal_write(stream, KVZ_NAL_SUFFIX_SEI_NUT, 0, 0);

	push	0
	push	0
	push	40					; 00000028H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 954  : 
; 955  :   WRITE_U(stream, 132, 8, "sei_type");

	push	8
	push	132					; 00000084H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 956  : 
; 957  :   int num_colors = (state->encoder_control->chroma_format == KVZ_CSP_400 ? 1 : 3);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	jne	SHORT $LN17@add_checks
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN18@add_checks
$LN17@add_checks:
	mov	DWORD PTR tv77[ebp], 3
$LN18@add_checks:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _num_colors$[ebp], edx

; 958  : 
; 959  :   switch (state->encoder_control->cfg.hash)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2340]
	mov	DWORD PTR tv80[ebp], edx
	cmp	DWORD PTR tv80[ebp], 0
	je	$LN15@add_checks
	cmp	DWORD PTR tv80[ebp], 1
	je	SHORT $LN13@add_checks
	cmp	DWORD PTR tv80[ebp], 2
	je	$LN14@add_checks
	jmp	$LN2@add_checks
$LN13@add_checks:

; 960  :   {
; 961  :   case KVZ_HASH_CHECKSUM:
; 962  :     kvz_image_checksum(frame->rec, checksum, state->encoder_control->bitdepth);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+2532]
	push	edx
	lea	eax, DWORD PTR _checksum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_kvz_image_checksum
	add	esp, 12					; 0000000cH

; 963  : 
; 964  :     WRITE_U(stream, 1 + num_colors * 4, 8, "size");

	push	8
	mov	eax, DWORD PTR _num_colors$[ebp]
	lea	ecx, DWORD PTR [eax*4+1]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 965  :     WRITE_U(stream, 2, 8, "hash_type");  // 2 = checksum

	push	8
	push	2
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 966  : 
; 967  :     for (int i = 0; i < num_colors; ++i) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN6@add_checks
$LN4@add_checks:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN6@add_checks:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _num_colors$[ebp]
	jge	$LN5@add_checks

; 968  :       uint32_t checksum_val = (

	mov	eax, DWORD PTR _i$4[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _checksum$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _i$4[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _checksum$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	shl	eax, 16					; 00000010H
	add	ecx, eax
	mov	edx, DWORD PTR _i$4[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _checksum$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx]
	shl	eax, 8
	add	ecx, eax
	mov	edx, DWORD PTR _i$4[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _checksum$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	add	ecx, eax
	mov	DWORD PTR _checksum_val$3[ebp], ecx

; 969  :         (checksum[i][0] << 24) + (checksum[i][1] << 16) +
; 970  :         (checksum[i][2] << 8) + (checksum[i][3]));
; 971  :       WRITE_U(stream, checksum_val, 32, "picture_checksum");

	push	32					; 00000020H
	mov	eax, DWORD PTR _checksum_val$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 972  :       CHECKPOINT("checksum[%d] = %u", i, checksum_val);
; 973  :     }

	jmp	$LN4@add_checks
$LN5@add_checks:

; 974  : 
; 975  :     break;

	jmp	$LN2@add_checks
$LN14@add_checks:

; 976  : 
; 977  :   case KVZ_HASH_MD5:
; 978  :     kvz_image_md5(frame->rec, checksum, state->encoder_control->bitdepth);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+2532]
	push	edx
	lea	eax, DWORD PTR _checksum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_kvz_image_md5
	add	esp, 12					; 0000000cH

; 979  : 
; 980  :     WRITE_U(stream, 1 + num_colors * 16, 8, "size");

	push	8
	mov	eax, DWORD PTR _num_colors$[ebp]
	shl	eax, 4
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 981  :     WRITE_U(stream, 0, 8, "hash_type");  // 0 = md5

	push	8
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 982  : 
; 983  :     for (int i = 0; i < num_colors; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN9@add_checks
$LN7@add_checks:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN9@add_checks:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _num_colors$[ebp]
	jge	SHORT $LN8@add_checks

; 984  :       for (int b = 0; b < 16; ++b) {

	mov	DWORD PTR _b$1[ebp], 0
	jmp	SHORT $LN12@add_checks
$LN10@add_checks:
	mov	eax, DWORD PTR _b$1[ebp]
	add	eax, 1
	mov	DWORD PTR _b$1[ebp], eax
$LN12@add_checks:
	cmp	DWORD PTR _b$1[ebp], 16			; 00000010H
	jge	SHORT $LN11@add_checks

; 985  :         WRITE_U(stream, checksum[i][b], 8, "picture_md5");

	push	8
	mov	eax, DWORD PTR _i$2[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _checksum$[ebp+eax]
	mov	edx, DWORD PTR _b$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 986  :       }

	jmp	SHORT $LN10@add_checks
$LN11@add_checks:

; 987  :     }

	jmp	SHORT $LN7@add_checks
$LN8@add_checks:

; 988  : 
; 989  :     break;

	jmp	SHORT $LN2@add_checks
$LN15@add_checks:

; 990  : 
; 991  :   case KVZ_HASH_NONE:
; 992  :     // Means we shouldn't be writing this SEI.
; 993  :     assert(0);

	xor	eax, eax
	jne	SHORT $LN2@add_checks
	mov	ecx, DWORD PTR ?__LINE__Var@?0??add_checksum@@9@9
	add	ecx, 45					; 0000002dH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@add_checks:

; 994  :   }
; 995  : 
; 996  :   kvz_bitstream_align(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_align
	add	esp, 4

; 997  : 
; 998  :   // spec:sei_rbsp() rbsp_trailing_bits
; 999  :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 1000 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@add_checks
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@add_checks:
	DD	1
	DD	$LN21@add_checks
$LN21@add_checks:
	DD	-80					; ffffffb0H
	DD	48					; 00000030H
	DD	$LN20@add_checks
$LN20@add_checks:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
_add_checksum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _kvz_encoder_state_write_bitstream_slice_header_independent
_TEXT	SEGMENT
tv356 = -392						; size = 4
tv364 = -388						; size = 4
tv354 = -388						; size = 4
tv323 = -388						; size = 4
tv304 = -388						; size = 4
tv272 = -388						; size = 4
tv264 = -388						; size = 4
tv255 = -388						; size = 4
tv204 = -388						; size = 4
tv195 = -388						; size = 4
_slice_qp_delta$1 = -188				; size = 4
_signal_qp_in_slice_header$2 = -173			; size = 1
_max_merge_cands$3 = -161				; size = 1
_i$4 = -152						; size = 4
_found$5 = -137						; size = 1
_delta_poc$6 = -125					; size = 1
_i$7 = -116						; size = 4
_found$8 = -101						; size = 1
_delta_poc$9 = -89					; size = 1
_poc_shift$10 = -80					; size = 4
_last_poc$11 = -68					; size = 4
_poc_lsb$12 = -56					; size = 4
_ref_positive$ = -44					; size = 4
_ref_negative$ = -32					; size = 4
_j$ = -20						; size = 4
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_kvz_encoder_state_write_bitstream_slice_header_independent PROC ; COMDAT

; 731  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 392				; 00000188H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 732  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 733  : 
; 734  :   int j;
; 735  :   int ref_negative = 0;

	mov	DWORD PTR _ref_negative$[ebp], 0

; 736  :   int ref_positive = 0;

	mov	DWORD PTR _ref_positive$[ebp], 0

; 737  :   if (encoder->cfg.gop_len) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN23@kvz_encode

; 738  :     for (j = 0; j < state->frame->ref->used_size; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN3@kvz_encode

; 739  :       if (state->frame->ref->pocs[j] < state->frame->poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN25@kvz_encode

; 740  :         ref_negative++;

	mov	eax, DWORD PTR _ref_negative$[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_negative$[ebp], eax

; 741  :       } else {

	jmp	SHORT $LN26@kvz_encode
$LN25@kvz_encode:

; 742  :         ref_positive++;

	mov	eax, DWORD PTR _ref_positive$[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_positive$[ebp], eax
$LN26@kvz_encode:

; 743  :       }
; 744  :     }

	jmp	SHORT $LN2@kvz_encode
$LN3@kvz_encode:

; 745  :   } else ref_negative = state->frame->ref->used_size;

	jmp	SHORT $LN24@kvz_encode
$LN23@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ref_negative$[ebp], eax
$LN24@kvz_encode:

; 746  : 
; 747  :   WRITE_UE(stream, state->frame->slicetype, "slice_type");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 748  : 
; 749  :   if (state->frame->pictype != KVZ_NAL_IDR_W_RADL
; 750  :       && state->frame->pictype != KVZ_NAL_IDR_N_LP)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 19					; 00000013H
	je	$LN27@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 20					; 00000014H
	je	$LN27@kvz_encode

; 751  :   {
; 752  :     const int poc_lsb = state->frame->poc & ((1 << encoder->poc_lsb_bits) - 1);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	esi, 1
	mov	ecx, DWORD PTR [eax+4604]
	shl	esi, cl
	sub	esi, 1
	and	esi, DWORD PTR [edx+12]
	mov	DWORD PTR _poc_lsb$12[ebp], esi

; 753  :     WRITE_U(stream, poc_lsb, encoder->poc_lsb_bits, "pic_order_cnt_lsb");

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+4604]
	push	ecx
	mov	edx, DWORD PTR _poc_lsb$12[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 754  : 
; 755  :     int last_poc = 0;

	mov	DWORD PTR _last_poc$11[ebp], 0

; 756  :     int poc_shift = 0;

	mov	DWORD PTR _poc_shift$10[ebp], 0

; 757  : 
; 758  :     WRITE_U(stream, 0, 1, "short_term_ref_pic_set_sps_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 759  :     WRITE_UE(stream, ref_negative, "num_negative_pics");

	mov	eax, DWORD PTR _ref_negative$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 760  :     WRITE_UE(stream, ref_positive, "num_positive_pics");

	mov	eax, DWORD PTR _ref_positive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 761  :     for (j = 0; j < ref_negative; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@kvz_encode:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _ref_negative$[ebp]
	jge	$LN6@kvz_encode

; 762  :       int8_t delta_poc = 0;

	mov	BYTE PTR _delta_poc$9[ebp], 0

; 763  : 
; 764  :       if (encoder->cfg.gop_len) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	$LN28@kvz_encode

; 765  :         int8_t found = 0;

	mov	BYTE PTR _found$8[ebp], 0
$LN10@kvz_encode:

; 766  :         do {
; 767  :           delta_poc = encoder->cfg.gop[state->frame->gop_offset].ref_neg[j + poc_shift];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _poc_shift$10[ebp]
	mov	al, BYTE PTR [ecx+edx+30]
	mov	BYTE PTR _delta_poc$9[ebp], al

; 768  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN13@kvz_encode
$LN11@kvz_encode:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN13@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN12@kvz_encode

; 769  :             if (state->frame->ref->pocs[i] == state->frame->poc - delta_poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	ecx, BYTE PTR _delta_poc$9[ebp]
	mov	edx, DWORD PTR [edx+12]
	sub	edx, ecx
	mov	ecx, DWORD PTR _i$7[ebp]
	cmp	DWORD PTR [eax+ecx*4], edx
	jne	SHORT $LN29@kvz_encode

; 770  :               found = 1;

	mov	BYTE PTR _found$8[ebp], 1

; 771  :               break;

	jmp	SHORT $LN12@kvz_encode
$LN29@kvz_encode:

; 772  :             }
; 773  :           }

	jmp	SHORT $LN11@kvz_encode
$LN12@kvz_encode:

; 774  :           if (!found) poc_shift++;

	movsx	eax, BYTE PTR _found$8[ebp]
	test	eax, eax
	jne	SHORT $LN30@kvz_encode
	mov	eax, DWORD PTR _poc_shift$10[ebp]
	add	eax, 1
	mov	DWORD PTR _poc_shift$10[ebp], eax
$LN30@kvz_encode:

; 775  :           if (j + poc_shift == ref_negative) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _poc_shift$10[ebp]
	cmp	eax, DWORD PTR _ref_negative$[ebp]
	jne	SHORT $LN8@kvz_encode

; 776  :             fprintf(stderr, "Failure, reference not found!");

	push	OFFSET ??_C@_0BO@MGDOLLFI@Failure?0?5reference?5not?5found?$CB@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 777  :             exit(EXIT_FAILURE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@kvz_encode:

; 778  :           }
; 779  :         } while (!found);

	movsx	eax, BYTE PTR _found$8[ebp]
	test	eax, eax
	je	$LN10@kvz_encode
$LN28@kvz_encode:

; 780  :       }
; 781  : 
; 782  :       WRITE_UE(stream, encoder->cfg.gop_len?delta_poc - last_poc - 1:0, "delta_poc_s0_minus1");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN46@kvz_encode
	movsx	edx, BYTE PTR _delta_poc$9[ebp]
	sub	edx, DWORD PTR _last_poc$11[ebp]
	sub	edx, 1
	mov	DWORD PTR tv195[ebp], edx
	jmp	SHORT $LN47@kvz_encode
$LN46@kvz_encode:
	mov	DWORD PTR tv195[ebp], 0
$LN47@kvz_encode:
	mov	eax, DWORD PTR tv195[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 783  :       last_poc = delta_poc;

	movsx	eax, BYTE PTR _delta_poc$9[ebp]
	mov	DWORD PTR _last_poc$11[ebp], eax

; 784  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s0_flag");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN48@kvz_encode
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN49@kvz_encode
$LN48@kvz_encode:
	mov	DWORD PTR tv204[ebp], 0
$LN49@kvz_encode:
	push	1
	mov	eax, DWORD PTR tv204[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 785  :     }

	jmp	$LN5@kvz_encode
$LN6@kvz_encode:

; 786  :     last_poc = 0;

	mov	DWORD PTR _last_poc$11[ebp], 0

; 787  :     poc_shift = 0;

	mov	DWORD PTR _poc_shift$10[ebp], 0

; 788  :     for (j = 0; j < ref_positive; j++) {      

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@kvz_encode
$LN14@kvz_encode:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@kvz_encode:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _ref_positive$[ebp]
	jge	$LN15@kvz_encode

; 789  :       int8_t delta_poc = 0;

	mov	BYTE PTR _delta_poc$6[ebp], 0

; 790  :       
; 791  :       if (encoder->cfg.gop_len) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	$LN32@kvz_encode

; 792  :         int8_t found = 0;

	mov	BYTE PTR _found$5[ebp], 0
$LN19@kvz_encode:

; 793  :         do {
; 794  :           delta_poc = encoder->cfg.gop[state->frame->gop_offset].ref_pos[j + poc_shift];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _poc_shift$10[ebp]
	mov	al, BYTE PTR [ecx+edx+13]
	mov	BYTE PTR _delta_poc$6[ebp], al

; 795  :           for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN22@kvz_encode
$LN20@kvz_encode:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN22@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN21@kvz_encode

; 796  :             if (state->frame->ref->pocs[i] == state->frame->poc + delta_poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	ecx, BYTE PTR _delta_poc$6[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	DWORD PTR [eax+edx*4], ecx
	jne	SHORT $LN33@kvz_encode

; 797  :               found = 1;

	mov	BYTE PTR _found$5[ebp], 1

; 798  :               break;

	jmp	SHORT $LN21@kvz_encode
$LN33@kvz_encode:

; 799  :             }
; 800  :           }

	jmp	SHORT $LN20@kvz_encode
$LN21@kvz_encode:

; 801  :           if (!found) poc_shift++;

	movsx	eax, BYTE PTR _found$5[ebp]
	test	eax, eax
	jne	SHORT $LN34@kvz_encode
	mov	eax, DWORD PTR _poc_shift$10[ebp]
	add	eax, 1
	mov	DWORD PTR _poc_shift$10[ebp], eax
$LN34@kvz_encode:

; 802  :           if (j + poc_shift == ref_positive) {

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _poc_shift$10[ebp]
	cmp	eax, DWORD PTR _ref_positive$[ebp]
	jne	SHORT $LN17@kvz_encode

; 803  :             fprintf(stderr, "Failure, reference not found!");

	push	OFFSET ??_C@_0BO@MGDOLLFI@Failure?0?5reference?5not?5found?$CB@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 804  :             exit(EXIT_FAILURE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@kvz_encode:

; 805  :           }
; 806  :         } while (!found);

	movsx	eax, BYTE PTR _found$5[ebp]
	test	eax, eax
	je	$LN19@kvz_encode
$LN32@kvz_encode:

; 807  :       }
; 808  :       
; 809  :       WRITE_UE(stream, encoder->cfg.gop_len ? delta_poc - last_poc - 1 : 0, "delta_poc_s1_minus1");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN50@kvz_encode
	movsx	edx, BYTE PTR _delta_poc$6[ebp]
	sub	edx, DWORD PTR _last_poc$11[ebp]
	sub	edx, 1
	mov	DWORD PTR tv255[ebp], edx
	jmp	SHORT $LN51@kvz_encode
$LN50@kvz_encode:
	mov	DWORD PTR tv255[ebp], 0
$LN51@kvz_encode:
	mov	eax, DWORD PTR tv255[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 810  :       last_poc = delta_poc;

	movsx	eax, BYTE PTR _delta_poc$6[ebp]
	mov	DWORD PTR _last_poc$11[ebp], eax

; 811  :       WRITE_U(stream, !state->frame->is_irap, 1, "used_by_curr_pic_s1_flag");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN52@kvz_encode
	mov	DWORD PTR tv264[ebp], 1
	jmp	SHORT $LN53@kvz_encode
$LN52@kvz_encode:
	mov	DWORD PTR tv264[ebp], 0
$LN53@kvz_encode:
	push	1
	mov	eax, DWORD PTR tv264[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 812  :     }

	jmp	$LN14@kvz_encode
$LN15@kvz_encode:

; 813  :     //WRITE_UE(stream, 0, "short_term_ref_pic_set_idx");
; 814  :     
; 815  :     if (state->encoder_control->cfg.tmvp_enable) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2368], 0
	je	SHORT $LN27@kvz_encode

; 816  :       WRITE_U(stream, ref_negative ? 1 : 0, 1, "slice_temporal_mvp_enabled_flag");

	cmp	DWORD PTR _ref_negative$[ebp], 0
	je	SHORT $LN54@kvz_encode
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN55@kvz_encode
$LN54@kvz_encode:
	mov	DWORD PTR tv272[ebp], 0
$LN55@kvz_encode:
	push	1
	mov	eax, DWORD PTR tv272[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN27@kvz_encode:

; 817  :     }
; 818  :   }
; 819  : 
; 820  :     //end if
; 821  :   //end if
; 822  : 
; 823  : 
; 824  :   if (encoder->cfg.sao_type) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN37@kvz_encode

; 825  :     WRITE_U(stream, 1, 1, "slice_sao_luma_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 826  :     if (encoder->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2536], 0
	je	SHORT $LN37@kvz_encode

; 827  :       WRITE_U(stream, 1, 1, "slice_sao_chroma_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN37@kvz_encode:

; 828  :     }
; 829  :   }
; 830  : 
; 831  :   if (state->frame->slicetype != KVZ_SLICE_I) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	$LN39@kvz_encode

; 832  :       WRITE_U(stream, 1, 1, "num_ref_idx_active_override_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 833  :       WRITE_UE(stream, MAX(0, ((int)state->frame->ref_LX_size[0]) - 1), "num_ref_idx_l0_active_minus1");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax+77]
	sub	ecx, 1
	jns	SHORT $LN56@kvz_encode
	mov	DWORD PTR tv304[ebp], 0
	jmp	SHORT $LN57@kvz_encode
$LN56@kvz_encode:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx+77]
	sub	eax, 1
	mov	DWORD PTR tv304[ebp], eax
$LN57@kvz_encode:
	mov	ecx, DWORD PTR tv304[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 834  :       if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN40@kvz_encode

; 835  :         WRITE_UE(stream, MAX(0, ((int)state->frame->ref_LX_size[1]) - 1), "num_ref_idx_l1_active_minus1");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	sub	eax, 1
	jns	SHORT $LN58@kvz_encode
	mov	DWORD PTR tv323[ebp], 0
	jmp	SHORT $LN59@kvz_encode
$LN58@kvz_encode:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax+77]
	sub	ecx, 1
	mov	DWORD PTR tv323[ebp], ecx
$LN59@kvz_encode:
	mov	edx, DWORD PTR tv323[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 836  :         WRITE_U(stream, 0, 1, "mvd_l1_zero_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN40@kvz_encode:

; 837  :       }
; 838  : 
; 839  :       // Temporal Motion Vector Prediction flags
; 840  :       if (state->encoder_control->cfg.tmvp_enable && ref_negative > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2368], 0
	je	SHORT $LN41@kvz_encode
	cmp	DWORD PTR _ref_negative$[ebp], 0
	jle	SHORT $LN41@kvz_encode

; 841  :         if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN42@kvz_encode

; 842  :           // Always use L0 for prediction
; 843  :           WRITE_U(stream, 1, 1, "collocated_from_l0_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN42@kvz_encode:

; 844  :         }
; 845  : 
; 846  :         if (ref_negative > 1) {

	cmp	DWORD PTR _ref_negative$[ebp], 1
	jle	SHORT $LN41@kvz_encode

; 847  :           // Use first reference from L0
; 848  :           // ToDo: use better reference
; 849  :           WRITE_UE(stream, 0, "collocated_ref_idx");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8
$LN41@kvz_encode:

; 850  :         }
; 851  :       }
; 852  :       const uint8_t max_merge_cands = state->encoder_control->cfg.max_merge;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+2441]
	mov	BYTE PTR _max_merge_cands$3[ebp], dl

; 853  :       WRITE_UE(stream, 5- max_merge_cands, "five_minus_max_num_merge_cand");

	movzx	eax, BYTE PTR _max_merge_cands$3[ebp]
	mov	ecx, 5
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8
$LN39@kvz_encode:

; 854  :   }
; 855  : 
; 856  :   {
; 857  :     // If tiles are enabled, signal the full QP here (relative to the base value of 26)
; 858  :     // If QP is to be set only at CU level, force slice_qp_delta zero
; 859  :     bool signal_qp_in_slice_header = (encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2408]
	and	ecx, 1
	je	SHORT $LN60@kvz_encode
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+4476]
	test	eax, eax
	je	SHORT $LN60@kvz_encode
	mov	DWORD PTR tv354[ebp], 1
	jmp	SHORT $LN61@kvz_encode
$LN60@kvz_encode:
	mov	DWORD PTR tv354[ebp], 0
$LN61@kvz_encode:
	cmp	DWORD PTR tv354[ebp], 0
	jne	SHORT $LN62@kvz_encode
	mov	DWORD PTR tv356[ebp], 0
	jmp	SHORT $LN63@kvz_encode
$LN62@kvz_encode:
	mov	DWORD PTR tv356[ebp], 1
$LN63@kvz_encode:
	mov	cl, BYTE PTR tv356[ebp]
	mov	BYTE PTR _signal_qp_in_slice_header$2[ebp], cl

; 860  :     int slice_qp_delta = state->frame->QP - (signal_qp_in_slice_header ? 26 : encoder->cfg.qp);

	movzx	eax, BYTE PTR _signal_qp_in_slice_header$2[ebp]
	test	eax, eax
	je	SHORT $LN64@kvz_encode
	mov	DWORD PTR tv364[ebp], 26		; 0000001aH
	jmp	SHORT $LN65@kvz_encode
$LN64@kvz_encode:
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv364[ebp], edx
$LN65@kvz_encode:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	sub	edx, DWORD PTR tv364[ebp]
	mov	DWORD PTR _slice_qp_delta$1[ebp], edx

; 861  :     if(encoder->cfg.set_qp_in_cu) slice_qp_delta = 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2431]
	test	ecx, ecx
	je	SHORT $LN44@kvz_encode
	mov	DWORD PTR _slice_qp_delta$1[ebp], 0
$LN44@kvz_encode:

; 862  :     WRITE_SE(stream, slice_qp_delta, "slice_qp_delta");

	mov	eax, DWORD PTR _slice_qp_delta$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_se
	add	esp, 8
$LN45@kvz_encode:

; 863  :   }
; 864  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_write_bitstream_slice_header_independent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_entry_points_write
_TEXT	SEGMENT
_my_length$1 = -20					; size = 4
_i$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_num_entry_points$ = 16					; size = 4
_write_length$ = 20					; size = 4
_r_count$ = 24						; size = 4
_encoder_state_write_bitstream_entry_points_write PROC	; COMDAT

; 712  : static void encoder_state_write_bitstream_entry_points_write(bitstream_t * const stream, const encoder_state_t * const state, const int num_entry_points, const int write_length, int * const r_count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 713  :   int i;
; 714  :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN1@encoder_st

; 715  :     if (state->children[i].is_leaf) {

	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+36], 0
	je	SHORT $LN5@encoder_st

; 716  :       const int my_length = kvz_bitstream_tell(&state->children[i].stream)/8;

	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+48]
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	push	0
	push	8
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _my_length$1[ebp], eax

; 717  :       ++(*r_count);

	mov	eax, DWORD PTR _r_count$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _r_count$[ebp]
	mov	DWORD PTR [edx], ecx

; 718  :       //Don't write the last one
; 719  :       if (*r_count < num_entry_points) {

	mov	eax, DWORD PTR _r_count$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _num_entry_points$[ebp]
	jge	SHORT $LN7@encoder_st

; 720  :         WRITE_U(stream, my_length - 1, write_length, "entry_point_offset-minus1")

	movzx	eax, BYTE PTR _write_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _my_length$1[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN7@encoder_st:

; 721  :       }
; 722  :     } else {

	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:

; 723  :       encoder_state_write_bitstream_entry_points_write(stream, &state->children[i], num_entry_points, write_length, r_count);

	mov	eax, DWORD PTR _r_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _write_length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_entry_points$[ebp]
	push	edx
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_encoder_state_write_bitstream_entry_points_write
	add	esp, 20					; 00000014H
$LN6@encoder_st:

; 724  :     }
; 725  :   }

	jmp	$LN2@encoder_st
$LN1@encoder_st:

; 726  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_entry_points_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_entry_points_explore
_TEXT	SEGMENT
_my_length$1 = -20					; size = 4
_i$ = -8						; size = 4
_state$ = 8						; size = 4
_r_count$ = 12						; size = 4
_r_max_length$ = 16					; size = 4
_encoder_state_entry_points_explore PROC		; COMDAT

; 697  : static void encoder_state_entry_points_explore(const encoder_state_t * const state, int * const r_count, int * const r_max_length) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 698  :   int i;
; 699  :   for (i = 0; state->children[i].encoder_control; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 0
	je	$LN1@encoder_st

; 700  :     if (state->children[i].is_leaf) {

	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+36], 0
	je	SHORT $LN5@encoder_st

; 701  :       const int my_length = kvz_bitstream_tell(&state->children[i].stream)/8;

	imul	eax, DWORD PTR _i$[ebp], 336
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+48]
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	push	0
	push	8
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _my_length$1[ebp], eax

; 702  :       ++(*r_count);

	mov	eax, DWORD PTR _r_count$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _r_count$[ebp]
	mov	DWORD PTR [edx], ecx

; 703  :       if (my_length > *r_max_length) {

	mov	eax, DWORD PTR _r_max_length$[ebp]
	mov	ecx, DWORD PTR _my_length$1[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN7@encoder_st

; 704  :         *r_max_length = my_length;

	mov	eax, DWORD PTR _r_max_length$[ebp]
	mov	ecx, DWORD PTR _my_length$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@encoder_st:

; 705  :       }
; 706  :     } else {

	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:

; 707  :       encoder_state_entry_points_explore(&state->children[i], r_count, r_max_length);

	mov	eax, DWORD PTR _r_max_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r_count$[ebp]
	push	ecx
	imul	edx, DWORD PTR _i$[ebp], 336
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	call	_encoder_state_entry_points_explore
	add	esp, 12					; 0000000cH
$LN6@encoder_st:

; 708  :     }
; 709  :   }

	jmp	$LN2@encoder_st
$LN1@encoder_st:

; 710  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_entry_points_explore ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_picture_timing_sei_message
_TEXT	SEGMENT
tv84 = -244						; size = 4
tv80 = -244						; size = 4
tv77 = -244						; size = 4
_source_scan_type$1 = -41				; size = 1
_pic_struct$2 = -29					; size = 1
_odd_picture$3 = -17					; size = 1
_stream$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_write_picture_timing_sei_message PROC	; COMDAT

; 658  : static void encoder_state_write_picture_timing_sei_message(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 659  : 
; 660  :   bitstream_t * const stream = &state->stream;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _stream$[ebp], eax

; 661  : 
; 662  :   if (state->encoder_control->vui.frame_field_info_present_flag){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2549]
	test	edx, edx
	je	$LN1@encoder_st

; 663  : 
; 664  :     int8_t odd_picture = state->frame->num % 2;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN15@encoder_st
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN15@encoder_st:
	mov	BYTE PTR _odd_picture$3[ebp], dl

; 665  :     int8_t pic_struct = 0; //0: progressive picture, 1: top field, 2: bottom field, 3...

	mov	BYTE PTR _pic_struct$2[ebp], 0

; 666  :     int8_t source_scan_type = 1; //0: interlaced, 1: progressive

	mov	BYTE PTR _source_scan_type$1[ebp], 1

; 667  : 
; 668  :     switch (state->tile->frame->source->interlacing){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 0
	je	SHORT $LN5@encoder_st
	cmp	DWORD PTR tv77[ebp], 1
	je	SHORT $LN6@encoder_st
	cmp	DWORD PTR tv77[ebp], 2
	je	SHORT $LN7@encoder_st
	jmp	SHORT $LN8@encoder_st
$LN5@encoder_st:

; 669  :     case 0: //Progressive frame
; 670  :       pic_struct = 0;

	mov	BYTE PTR _pic_struct$2[ebp], 0

; 671  :       source_scan_type = 1;

	mov	BYTE PTR _source_scan_type$1[ebp], 1

; 672  :       break;

	jmp	$LN2@encoder_st
$LN6@encoder_st:

; 673  :     case 1: //Top field first
; 674  :       pic_struct = odd_picture ? 2 : 1;

	movsx	eax, BYTE PTR _odd_picture$3[ebp]
	test	eax, eax
	je	SHORT $LN10@encoder_st
	mov	DWORD PTR tv80[ebp], 2
	jmp	SHORT $LN11@encoder_st
$LN10@encoder_st:
	mov	DWORD PTR tv80[ebp], 1
$LN11@encoder_st:
	mov	cl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _pic_struct$2[ebp], cl

; 675  :       source_scan_type = 0;

	mov	BYTE PTR _source_scan_type$1[ebp], 0

; 676  :       break;

	jmp	SHORT $LN2@encoder_st
$LN7@encoder_st:

; 677  :     case 2: //Bottom field first
; 678  :       pic_struct = odd_picture ? 1 : 2;

	movsx	eax, BYTE PTR _odd_picture$3[ebp]
	test	eax, eax
	je	SHORT $LN12@encoder_st
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN13@encoder_st
$LN12@encoder_st:
	mov	DWORD PTR tv84[ebp], 2
$LN13@encoder_st:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _pic_struct$2[ebp], cl

; 679  :       source_scan_type = 0;

	mov	BYTE PTR _source_scan_type$1[ebp], 0

; 680  :       break;

	jmp	SHORT $LN2@encoder_st
$LN8@encoder_st:

; 681  :     default:
; 682  :       assert(0); //Should never execute

	xor	eax, eax
	jne	SHORT $LN2@encoder_st
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encoder_state_write_picture_timing_sei_message@@9@9
	add	ecx, 24					; 00000018H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@encoder_st:

; 683  :       break;
; 684  :     }
; 685  : 
; 686  :     WRITE_U(stream, 1, 8, "last_payload_type_byte"); //pic_timing

	push	8
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 687  :     WRITE_U(stream, 1, 8, "last_payload_size_byte");

	push	8
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 688  :     WRITE_U(stream, pic_struct, 4, "pic_struct");

	push	4
	movsx	eax, BYTE PTR _pic_struct$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 689  :     WRITE_U(stream, source_scan_type, 2, "source_scan_type");

	push	2
	movsx	eax, BYTE PTR _source_scan_type$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 690  :     WRITE_U(stream, 0, 1, "duplicate_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 691  : 
; 692  :     kvz_bitstream_align(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_align
	add	esp, 4
$LN1@encoder_st:

; 693  :   }
; 694  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_picture_timing_sei_message ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_prefix_sei_version
_TEXT	SEGMENT
_cfg$ = -1068						; size = 4
_s$ = -1056						; size = 4
_buf$ = -1044						; size = 1000
_length$ = -36						; size = 4
_i$ = -24						; size = 4
_stream$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_encoder_state_write_bitstream_prefix_sei_version PROC	; COMDAT

; 574  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1648				; 00000670H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1648]
	mov	ecx, 412				; 0000019cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 575  : #define STR_BUF_LEN 1000
; 576  :   bitstream_t * const stream = &state->stream;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _stream$[ebp], eax

; 577  :   int i, length;
; 578  :   char buf[STR_BUF_LEN] = { 0 };

	push	1000					; 000003e8H
	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 579  :   char *s = buf + 16;

	lea	eax, DWORD PTR _buf$[ebp+16]
	mov	DWORD PTR _s$[ebp], eax

; 580  :   const kvz_config * const cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 581  : 
; 582  :   // random uuid_iso_iec_11578 generated with www.famkruithof.net/uuid/uuidgen
; 583  :   static const uint8_t uuid[16] = {
; 584  :     0x32, 0xfe, 0x46, 0x6c, 0x98, 0x41, 0x42, 0x69,
; 585  :     0xae, 0x35, 0x6a, 0x91, 0x54, 0x9e, 0xf3, 0xf1
; 586  :   };
; 587  :   memcpy(buf, uuid, 16);

	push	16					; 00000010H
	push	OFFSET ?uuid@?1??encoder_state_write_bitstream_prefix_sei_version@@9@9
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 588  : 
; 589  :   // user_data_payload_byte
; 590  :   s += sprintf(s, "Kvazaar HEVC Encoder v. " VERSION_STRING " - "

	push	OFFSET ??_C@_0FN@ELJLADAF@Kvazaar?5HEVC?5Encoder?5v?4?52?41?40?5?9@
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 591  :                   "Copyleft 2012-2015 - http://ultravideo.cs.tut.fi/ - options:");
; 592  :   s += sprintf(s, " %dx%d", cfg->width, cfg->height);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET ??_C@_06HGBPOMO@?5?$CFdx?$CFd@
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 593  :   s += sprintf(s, " deblock=%d:%d:%d", cfg->deblock_enable,

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _cfg$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	push	OFFSET ??_C@_0BC@FJPGAPBH@?5deblock?$DN?$CFd?3?$CFd?3?$CFd@
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 594  :                cfg->deblock_beta, cfg->deblock_tc);
; 595  :   s += sprintf(s, " sao=%d", cfg->sao_type);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	push	OFFSET ??_C@_07FLLHLOMB@?5sao?$DN?$CFd@
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 596  :   s += sprintf(s, " intra_period=%d", cfg->intra_period);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BB@JKLOKGBN@?5intra_period?$DN?$CFd@
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 597  :   s += sprintf(s, " qp=%d", cfg->qp);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_06KJNECNGC@?5qp?$DN?$CFd@
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 598  :   s += sprintf(s, " ref=%d", cfg->ref_frames);

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	push	OFFSET ??_C@_07GLEBJFBC@?5ref?$DN?$CFd@
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax

; 599  : 
; 600  :   length = (int)(s - buf + 1);  // length, +1 for \0

	mov	eax, DWORD PTR _s$[ebp]
	lea	ecx, DWORD PTR _buf$[ebp]
	sub	eax, ecx
	add	eax, 1
	mov	DWORD PTR _length$[ebp], eax

; 601  : 
; 602  :   // Assert this so that in the future if the message gets longer, we remember
; 603  :   // to increase the buf len. Divide by 2 for margin.
; 604  :   assert(length < STR_BUF_LEN / 2);

	cmp	DWORD PTR _length$[ebp], 500		; 000001f4H
	jl	SHORT $LN9@encoder_st
	mov	eax, DWORD PTR ?__LINE__Var@?0??encoder_state_write_bitstream_prefix_sei_version@@9@9
	add	eax, 30					; 0000001eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@FPBMINMI@?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAS?$AAT?$AAR?$AA_?$AAB?$AAU@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@encoder_st:

; 605  : 
; 606  :   // payloadType = 5 -> user_data_unregistered
; 607  :   WRITE_U(stream, 5, 8, "last_payload_type_byte");

	push	8
	push	5
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 608  : 
; 609  :   // payloadSize
; 610  :   for (i = 0; i <= length - 255; i += 255)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 255				; 000000ffH
	mov	DWORD PTR _i$[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 255				; 000000ffH
	cmp	DWORD PTR _i$[ebp], eax
	jg	SHORT $LN3@encoder_st

; 611  :     WRITE_U(stream, 255, 8, "ff_byte");

	push	8
	push	255					; 000000ffH
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 612  :   WRITE_U(stream, length - i, 8, "last_payload_size_byte");

	push	8
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 613  : 
; 614  :   for (i = 0; i < length; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN6@encoder_st

; 615  :     WRITE_U(stream, ((uint8_t *)buf)[i], 8, "sei_payload");

	push	8
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@encoder_st
$LN6@encoder_st:

; 616  : 
; 617  :   // The bitstream is already aligned, but align it anyway.
; 618  :   kvz_bitstream_align(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_align
	add	esp, 4

; 619  : 
; 620  : #undef STR_BUF_LEN
; 621  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@encoder_st
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1648				; 00000670H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@encoder_st:
	DD	1
	DD	$LN11@encoder_st
$LN11@encoder_st:
	DD	-1044					; fffffbecH
	DD	1000					; 000003e8H
	DD	$LN10@encoder_st
$LN10@encoder_st:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_encoder_state_write_bitstream_prefix_sei_version ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_pic_parameter_set
_TEXT	SEGMENT
tv134 = -236						; size = 4
tv244 = -232						; size = 4
tv141 = -232						; size = 4
tv132 = -232						; size = 4
_i$1 = -32						; size = 4
_constant_qp_in_pps$ = -17				; size = 1
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_pic_parameter_set PROC	; COMDAT

; 482  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 483  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 484  : #ifdef KVZ_DEBUG
; 485  :   printf("=========== Picture Parameter Set ID: 0 ===========\n");
; 486  : #endif
; 487  :   WRITE_UE(stream, 0, "pic_parameter_set_id");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 488  :   WRITE_UE(stream, 0, "seq_parameter_set_id");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 489  :   WRITE_U(stream, encoder->pps.dependent_slice_segments_enabled_flag, 1, "dependent_slice_segments_enabled_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+4592]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 490  :   WRITE_U(stream, 0, 1, "output_flag_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 491  :   WRITE_U(stream, 0, 3, "num_extra_slice_header_bits");

	push	3
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 492  :   WRITE_U(stream, encoder->cfg.signhide_enable, 1, "sign_data_hiding_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 493  :   WRITE_U(stream, 0, 1, "cabac_init_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 494  : 
; 495  :   WRITE_UE(stream, 0, "num_ref_idx_l0_default_active_minus1");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 496  :   WRITE_UE(stream, 0, "num_ref_idx_l1_default_active_minus1");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 497  :   
; 498  :   // If tiles and slices = tiles is enabled, signal QP in the slice header. Keeping the PPS constant for OMAF etc
; 499  :   // Keep QP constant here also if it will be only set at CU level.
; 500  :   bool constant_qp_in_pps = ((encoder->cfg.slices & KVZ_SLICES_TILES) && encoder->tiles_enable) || encoder->cfg.set_qp_in_cu;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2408]
	and	ecx, 1
	je	SHORT $LN14@encoder_st
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+4476]
	test	eax, eax
	jne	SHORT $LN15@encoder_st
$LN14@encoder_st:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [ecx+2431]
	test	edx, edx
	jne	SHORT $LN15@encoder_st
	mov	DWORD PTR tv132[ebp], 0
	jmp	SHORT $LN16@encoder_st
$LN15@encoder_st:
	mov	DWORD PTR tv132[ebp], 1
$LN16@encoder_st:
	cmp	DWORD PTR tv132[ebp], 0
	jne	SHORT $LN17@encoder_st
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN18@encoder_st
$LN17@encoder_st:
	mov	DWORD PTR tv134[ebp], 1
$LN18@encoder_st:
	mov	al, BYTE PTR tv134[ebp]
	mov	BYTE PTR _constant_qp_in_pps$[ebp], al

; 501  :   WRITE_SE(stream, constant_qp_in_pps ? 0 : (((int8_t)encoder->cfg.qp) - 26), "pic_init_qp_minus26");

	movzx	eax, BYTE PTR _constant_qp_in_pps$[ebp]
	test	eax, eax
	je	SHORT $LN19@encoder_st
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN20@encoder_st
$LN19@encoder_st:
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	edx, 26					; 0000001aH
	mov	DWORD PTR tv141[ebp], edx
$LN20@encoder_st:
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_se
	add	esp, 8

; 502  : 
; 503  :   WRITE_U(stream, 0, 1, "constrained_intra_pred_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 504  :   WRITE_U(stream, encoder->cfg.trskip_enable, 1, "transform_skip_enabled_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 505  : 
; 506  :   if (encoder->max_qp_delta_depth >= 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4584]
	test	ecx, ecx
	jl	SHORT $LN8@encoder_st

; 507  :     // Use separate QP for each LCU when rate control is enabled.
; 508  :     WRITE_U(stream, 1, 1, "cu_qp_delta_enabled_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 509  :     WRITE_UE(stream, encoder->max_qp_delta_depth, "diff_cu_qp_delta_depth");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4584]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 510  :   } else {

	jmp	SHORT $LN9@encoder_st
$LN8@encoder_st:

; 511  :     WRITE_U(stream, 0, 1, "cu_qp_delta_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN9@encoder_st:

; 512  :   }
; 513  : 
; 514  :   //TODO: add QP offsets
; 515  :   WRITE_SE(stream, 0, "pps_cb_qp_offset");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_se
	add	esp, 8

; 516  :   WRITE_SE(stream, 0, "pps_cr_qp_offset");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_se
	add	esp, 8

; 517  :   WRITE_U(stream, 0, 1, "pps_slice_chroma_qp_offsets_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 518  :   WRITE_U(stream, 0, 1, "weighted_pred_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 519  :   WRITE_U(stream, 0, 1, "weighted_bipred_idc");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 520  : 
; 521  :   //WRITE_U(stream, 0, 1, "dependent_slices_enabled_flag");
; 522  :   WRITE_U(stream, encoder->cfg.lossless, 1, "transquant_bypass_enable_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2364]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 523  :   WRITE_U(stream, encoder->tiles_enable, 1, "tiles_enabled_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4476]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 524  :   //wavefronts
; 525  :   WRITE_U(stream, encoder->cfg.wpp, 1, "entropy_coding_sync_enabled_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 526  : 
; 527  :   if (encoder->tiles_enable) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4476]
	test	ecx, ecx
	je	$LN10@encoder_st

; 528  :     WRITE_UE(stream, encoder->cfg.tiles_width_count  - 1, "num_tile_columns_minus1");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 529  :     WRITE_UE(stream, encoder->cfg.tiles_height_count - 1, "num_tile_rows_minus1");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 530  :     
; 531  :     WRITE_U(stream, encoder->tiles_uniform_spacing_flag, 1, "uniform_spacing_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4477]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 532  :     
; 533  :     if (!encoder->tiles_uniform_spacing_flag) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4477]
	test	ecx, ecx
	jne	$LN11@encoder_st

; 534  :       int i;
; 535  :       for (i = 0; i < encoder->cfg.tiles_width_count - 1; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	sub	ecx, 1
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN3@encoder_st

; 536  :         WRITE_UE(stream, encoder->tiles_col_width[i] - 1, "column_width_minus1[...]");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4480]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 537  :       }

	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 538  :       for (i = 0; i < encoder->cfg.tiles_height_count - 1; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	sub	ecx, 1
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN11@encoder_st

; 539  :         WRITE_UE(stream, encoder->tiles_row_height[i] - 1, "row_height_minus1[...]");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4484]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 540  :       }

	jmp	SHORT $LN5@encoder_st
$LN11@encoder_st:

; 541  :     }
; 542  :     WRITE_U(stream, 0, 1, "loop_filter_across_tiles_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN10@encoder_st:

; 543  :     
; 544  :   }
; 545  :   
; 546  :   WRITE_U(stream, 0, 1, "loop_filter_across_slice_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 547  :   WRITE_U(stream, 1, 1, "deblocking_filter_control_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 548  : 
; 549  :   //IF deblocking_filter
; 550  :     WRITE_U(stream, 0, 1, "deblocking_filter_override_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 551  :   WRITE_U(stream, encoder->cfg.deblock_enable ? 0 : 1, 1,

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN21@encoder_st
	mov	DWORD PTR tv244[ebp], 0
	jmp	SHORT $LN22@encoder_st
$LN21@encoder_st:
	mov	DWORD PTR tv244[ebp], 1
$LN22@encoder_st:
	push	1
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 552  :           "pps_disable_deblocking_filter_flag");
; 553  : 
; 554  :     //IF !disabled
; 555  :   if (encoder->cfg.deblock_enable) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN12@encoder_st

; 556  :      WRITE_SE(stream, encoder->cfg.deblock_beta, "beta_offset_div2");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_se
	add	esp, 8

; 557  :      WRITE_SE(stream, encoder->cfg.deblock_tc, "tc_offset_div2");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_se
	add	esp, 8
$LN12@encoder_st:

; 558  :     }
; 559  : 
; 560  :     //ENDIF
; 561  :   //ENDIF
; 562  :   WRITE_U(stream, 0, 1, "pps_scaling_list_data_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 563  :   //IF scaling_list
; 564  :   //ENDIF
; 565  :   WRITE_U(stream, 0, 1, "lists_modification_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 566  :   WRITE_UE(stream, 0, "log2_parallel_merge_level_minus2");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 567  :   WRITE_U(stream, 0, 1, "slice_segment_header_extension_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 568  :   WRITE_U(stream, 0, 1, "pps_extension_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 569  : 
; 570  :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 571  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_pic_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_seq_parameter_set
_TEXT	SEGMENT
tv247 = -232						; size = 4
tv241 = -232						; size = 4
tv230 = -232						; size = 4
_max_reorder$ = -32					; size = 4
_max_buffer$ = -20					; size = 4
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_seq_parameter_set PROC	; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 363  :   const encoder_control_t * encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 364  : 
; 365  : #ifdef KVZ_DEBUG
; 366  :   printf("=========== Sequence Parameter Set ID: 0 ===========\n");
; 367  : #endif
; 368  : 
; 369  :   // TODO: profile IDC and level IDC should be defined later on
; 370  :   WRITE_U(stream, 0, 4, "sps_video_parameter_set_id");

	push	4
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 371  :   WRITE_U(stream, 1, 3, "sps_max_sub_layers_minus1");

	push	3
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 372  :   WRITE_U(stream, 0, 1, "sps_temporal_id_nesting_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 373  : 
; 374  :   encoder_state_write_bitstream_PTL(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_PTL
	add	esp, 8

; 375  : 
; 376  :   WRITE_UE(stream, 0, "sps_seq_parameter_set_id");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 377  :   WRITE_UE(stream, encoder->chroma_format, "chroma_format_idc");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2536]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 378  : 
; 379  :   if (encoder->chroma_format == KVZ_CSP_444) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2536], 3
	jne	SHORT $LN2@encoder_st

; 380  :     WRITE_U(stream, 0, 1, "separate_colour_plane_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN2@encoder_st:

; 381  :   }
; 382  : 
; 383  :   if (encoder->cfg.partial_coding.fullWidth != 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, WORD PTR [eax+2446]
	test	ecx, ecx
	je	SHORT $LN3@encoder_st

; 384  :     WRITE_UE(stream, encoder->cfg.partial_coding.fullWidth, "pic_width_in_luma_samples");

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, WORD PTR [eax+2446]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 385  :     WRITE_UE(stream, encoder->cfg.partial_coding.fullHeight, "pic_height_in_luma_samples");

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, WORD PTR [eax+2448]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 386  :   }

	jmp	SHORT $LN4@encoder_st
$LN3@encoder_st:

; 387  :   else {
; 388  :     WRITE_UE(stream, encoder->in.width, "pic_width_in_luma_samples");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2480]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 389  :     WRITE_UE(stream, encoder->in.height, "pic_height_in_luma_samples");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2484]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8
$LN4@encoder_st:

; 390  :   }
; 391  : 
; 392  :   if (encoder->in.width != encoder->in.real_width || encoder->in.height != encoder->in.real_height) {

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2480]
	cmp	edx, DWORD PTR [ecx+2496]
	jne	SHORT $LN7@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2484]
	cmp	edx, DWORD PTR [ecx+2500]
	je	$LN5@encoder_st
$LN7@encoder_st:

; 393  :     // The standard does not seem to allow setting conf_win values such that
; 394  :     // the number of luma samples is not a multiple of 2. Options are to either
; 395  :     // hide one line or show an extra line of non-video. Neither seems like a
; 396  :     // very good option, so let's not even try.
; 397  :     assert(!(encoder->in.width % 2));

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2480]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN19@encoder_st
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN19@encoder_st:
	test	ecx, ecx
	je	SHORT $LN12@encoder_st
	mov	edx, DWORD PTR ?__LINE__Var@?0??encoder_state_write_bitstream_seq_parameter_set@@9@9
	add	edx, 35					; 00000023H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DC@ELCHBKFA@?$AA?$CB?$AA?$CI?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?9?$AA?$DO?$AAi?$AAn?$AA?4?$AAw@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@encoder_st:

; 398  :     WRITE_U(stream, 1, 1, "conformance_window_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 399  :     WRITE_UE(stream, 0, "conf_win_left_offset");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 400  :     WRITE_UE(stream, (encoder->in.width - encoder->in.real_width) >> 1,

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2480]
	sub	edx, DWORD PTR [ecx+2496]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 401  :              "conf_win_right_offset");
; 402  :     WRITE_UE(stream, 0, "conf_win_top_offset");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 403  :     WRITE_UE(stream, (encoder->in.height - encoder->in.real_height) >> 1,

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2484]
	sub	edx, DWORD PTR [ecx+2500]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 404  :              "conf_win_bottom_offset");
; 405  :   } else {

	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:

; 406  :     WRITE_U(stream, 0, 1, "conformance_window_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN6@encoder_st:

; 407  :   }
; 408  : 
; 409  :   //IF window flag
; 410  :   //END IF
; 411  : 
; 412  :   WRITE_UE(stream, encoder->bitdepth-8, "bit_depth_luma_minus8");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 413  :   WRITE_UE(stream, encoder->bitdepth-8, "bit_depth_chroma_minus8");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 414  :   WRITE_UE(stream, encoder->poc_lsb_bits - 4, "log2_max_pic_order_cnt_lsb_minus4");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4604]
	sub	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 415  : 
; 416  :   WRITE_U(stream, 0, 1, "sps_sub_layer_ordering_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 417  : 
; 418  :   //for each layer
; 419  :   int max_buffer  = max_required_dpb_size(encoder);

	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_max_required_dpb_size
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _max_buffer$[ebp], ecx

; 420  :   int max_reorder = max_num_reorder_pics(encoder);

	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_max_num_reorder_pics
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _max_reorder$[ebp], ecx

; 421  :   if (max_buffer - 1 < max_reorder) max_buffer = max_reorder + 1;

	mov	eax, DWORD PTR _max_buffer$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _max_reorder$[ebp]
	jge	SHORT $LN8@encoder_st
	mov	eax, DWORD PTR _max_reorder$[ebp]
	add	eax, 1
	mov	DWORD PTR _max_buffer$[ebp], eax
$LN8@encoder_st:

; 422  :   WRITE_UE(stream, max_buffer - 1, "sps_max_dec_pic_buffering_minus1");

	mov	eax, DWORD PTR _max_buffer$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 423  :   WRITE_UE(stream, max_reorder, "sps_max_num_reorder_pics");

	mov	eax, DWORD PTR _max_reorder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 424  : 
; 425  :   WRITE_UE(stream, 0, "sps_max_latency_increase_plus1");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 426  :   //end for
; 427  : 
; 428  :   WRITE_UE(stream, MIN_SIZE-3, "log2_min_coding_block_size_minus3");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 429  :   WRITE_UE(stream, MAX_DEPTH, "log2_diff_max_min_coding_block_size");

	push	3
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 430  :   WRITE_UE(stream, 0, "log2_min_transform_block_size_minus2");   // 4x4

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 431  :   WRITE_UE(stream, 3, "log2_diff_max_min_transform_block_size"); // 4x4...32x32

	push	3
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 432  :   WRITE_UE(stream, encoder->tr_depth_inter, "max_transform_hierarchy_depth_inter");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4588]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 433  :   WRITE_UE(stream, encoder->cfg.tr_depth_intra, "max_transform_hierarchy_depth_intra");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 434  : 
; 435  :   // scaling list
; 436  :   WRITE_U(stream, encoder->scaling_list.enable, 1, "scaling_list_enable_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2552]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 437  :   if (encoder->scaling_list.enable) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2552]
	test	ecx, ecx
	je	SHORT $LN9@encoder_st

; 438  :     // Signal scaling list data for custom lists
; 439  :     WRITE_U(stream, (encoder->cfg.scaling_list == KVZ_SCALING_LIST_CUSTOM) ? 1 : 0, 1, "sps_scaling_list_data_present_flag");

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2440]
	cmp	ecx, 1
	jne	SHORT $LN13@encoder_st
	mov	DWORD PTR tv230[ebp], 1
	jmp	SHORT $LN14@encoder_st
$LN13@encoder_st:
	mov	DWORD PTR tv230[ebp], 0
$LN14@encoder_st:
	push	1
	mov	edx, DWORD PTR tv230[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 440  :     if (encoder->cfg.scaling_list == KVZ_SCALING_LIST_CUSTOM) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2440]
	cmp	ecx, 1
	jne	SHORT $LN9@encoder_st

; 441  :       encoder_state_write_bitstream_scaling_list(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_scaling_list
	add	esp, 8
$LN9@encoder_st:

; 442  :     }
; 443  :   }
; 444  : 
; 445  :   WRITE_U(stream, (encoder->cfg.amp_enable ? 1 : 0), 1, "amp_enabled_flag");

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN15@encoder_st
	mov	DWORD PTR tv241[ebp], 1
	jmp	SHORT $LN16@encoder_st
$LN15@encoder_st:
	mov	DWORD PTR tv241[ebp], 0
$LN16@encoder_st:
	push	1
	mov	ecx, DWORD PTR tv241[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 446  : 
; 447  :   WRITE_U(stream, encoder->cfg.sao_type ? 1 : 0, 1,

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN17@encoder_st
	mov	DWORD PTR tv247[ebp], 1
	jmp	SHORT $LN18@encoder_st
$LN17@encoder_st:
	mov	DWORD PTR tv247[ebp], 0
$LN18@encoder_st:
	push	1
	mov	ecx, DWORD PTR tv247[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 448  :           "sample_adaptive_offset_enabled_flag");
; 449  :   WRITE_U(stream, ENABLE_PCM, 1, "pcm_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 450  :   #if ENABLE_PCM == 1
; 451  :     WRITE_U(stream, 7, 4, "pcm_sample_bit_depth_luma_minus1");
; 452  :     WRITE_U(stream, 7, 4, "pcm_sample_bit_depth_chroma_minus1");
; 453  :     WRITE_UE(stream, 0, "log2_min_pcm_coding_block_size_minus3");
; 454  :     WRITE_UE(stream, 2, "log2_diff_max_min_pcm_coding_block_size");
; 455  :     WRITE_U(stream, 1, 1, "pcm_loop_filter_disable_flag");
; 456  :   #endif
; 457  : 
; 458  :   WRITE_UE(stream, 0, "num_short_term_ref_pic_sets");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 459  : 
; 460  :   //IF num short term ref pic sets
; 461  :   //ENDIF
; 462  : 
; 463  :   WRITE_U(stream, 0, 1, "long_term_ref_pics_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 464  : 
; 465  :   //IF long_term_ref_pics_present
; 466  :   //ENDIF
; 467  : 
; 468  :   WRITE_U(stream, state->encoder_control->cfg.tmvp_enable, 1,

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2368]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 469  :           "sps_temporal_mvp_enable_flag");
; 470  :   WRITE_U(stream, 0, 1, "sps_strong_intra_smoothing_enable_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 471  :   WRITE_U(stream, 1, 1, "vui_parameters_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 472  : 
; 473  :   encoder_state_write_bitstream_VUI(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_VUI
	add	esp, 8

; 474  : 
; 475  :   encoder_state_write_bitstream_SPS_extension(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_SPS_extension
	add	esp, 8

; 476  : 
; 477  :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 478  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_seq_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_SPS_extension
_TEXT	SEGMENT
_cfg$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_SPS_extension PROC	; COMDAT

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 337  :   const kvz_config *cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 338  :   if (cfg->implicit_rdpcm && cfg->lossless) {

	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2392], 0
	je	$LN2@encoder_st
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	je	$LN2@encoder_st

; 339  :     WRITE_U(stream, 1, 1, "sps_extension_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 340  : 
; 341  :     WRITE_U(stream, 1, 1, "sps_range_extension_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 342  :     WRITE_U(stream, 0, 1, "sps_multilayer_extension_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 343  :     WRITE_U(stream, 0, 1, "sps_3d_extension_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 344  :     WRITE_U(stream, 0, 5, "sps_extension_5bits");

	push	5
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 345  : 
; 346  :     WRITE_U(stream, 0, 1, "transform_skip_rotation_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 347  :     WRITE_U(stream, 0, 1, "transform_skip_context_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 348  :     WRITE_U(stream, 1, 1, "implicit_rdpcm_enabled_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 349  :     WRITE_U(stream, 0, 1, "explicit_rdpcm_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 350  :     WRITE_U(stream, 0, 1, "extended_precision_processing_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 351  :     WRITE_U(stream, 0, 1, "intra_smoothing_disabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 352  :     WRITE_U(stream, 0, 1, "high_precision_offsets_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 353  :     WRITE_U(stream, 0, 1, "persistent_rice_adaptation_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 354  :     WRITE_U(stream, 0, 1, "cabac_bypass_alignment_enabled_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 355  :   } else {

	jmp	SHORT $LN1@encoder_st
$LN2@encoder_st:

; 356  :     WRITE_U(stream, 0, 1, "sps_extension_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN1@encoder_st:

; 357  :   }
; 358  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_SPS_extension ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_VUI
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_VUI PROC			; COMDAT

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 228  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 229  : #ifdef KVZ_DEBUG
; 230  :   printf("=========== VUI Set ID: 0 ===========\n");
; 231  : #endif
; 232  :   if (encoder->cfg.vui.sar_width > 0 && encoder->cfg.vui.sar_height > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jle	$LN5@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jle	$LN5@encoder_st

; 233  :     int i;
; 234  :     static const struct
; 235  :     {
; 236  :       uint8_t width;
; 237  :       uint8_t height;
; 238  :       uint8_t idc;
; 239  :     } sar[] = {
; 240  :       // aspect_ratio_idc = 0 -> unspecified
; 241  :       {  1,  1, 1 }, { 12, 11, 2 }, { 10, 11, 3 }, { 16, 11, 4 },
; 242  :       { 40, 33, 5 }, { 24, 11, 6 }, { 20, 11, 7 }, { 32, 11, 8 },
; 243  :       { 80, 33, 9 }, { 18, 11, 10}, { 15, 11, 11}, { 64, 33, 12},
; 244  :       {160, 99, 13}, {  4,  3, 14}, {  3,  2, 15}, {  2,  1, 16},
; 245  :       // aspect_ratio_idc = [17..254] -> reserved
; 246  :       { 0, 0, 255 }
; 247  :     };
; 248  : 
; 249  :     for (i = 0; sar[i].idc != 255; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	imul	eax, DWORD PTR _i$1[ebp], 3
	movzx	ecx, BYTE PTR ?sar@?2??encoder_state_write_bitstream_VUI@@9@9[eax+2]
	cmp	ecx, 255				; 000000ffH
	je	SHORT $LN3@encoder_st

; 250  :       if (sar[i].width  == encoder->cfg.vui.sar_width &&

	imul	eax, DWORD PTR _i$1[ebp], 3
	movzx	ecx, BYTE PTR ?sar@?2??encoder_state_write_bitstream_VUI@@9@9[eax]
	mov	edx, DWORD PTR _encoder$[ebp]
	cmp	ecx, DWORD PTR [edx+104]
	jne	SHORT $LN7@encoder_st
	imul	eax, DWORD PTR _i$1[ebp], 3
	movzx	ecx, BYTE PTR ?sar@?2??encoder_state_write_bitstream_VUI@@9@9[eax+1]
	mov	edx, DWORD PTR _encoder$[ebp]
	cmp	ecx, DWORD PTR [edx+108]
	jne	SHORT $LN7@encoder_st

; 251  :           sar[i].height == encoder->cfg.vui.sar_height)
; 252  :         break;

	jmp	SHORT $LN3@encoder_st
$LN7@encoder_st:
	jmp	SHORT $LN2@encoder_st
$LN3@encoder_st:

; 253  : 
; 254  :     WRITE_U(stream, 1, 1, "aspect_ratio_info_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 255  :     WRITE_U(stream, sar[i].idc, 8, "aspect_ratio_idc");

	push	8
	imul	eax, DWORD PTR _i$1[ebp], 3
	movzx	ecx, BYTE PTR ?sar@?2??encoder_state_write_bitstream_VUI@@9@9[eax+2]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 256  :     if (sar[i].idc == 255) {

	imul	eax, DWORD PTR _i$1[ebp], 3
	movzx	ecx, BYTE PTR ?sar@?2??encoder_state_write_bitstream_VUI@@9@9[eax+2]
	cmp	ecx, 255				; 000000ffH
	jne	SHORT $LN8@encoder_st

; 257  :       // EXTENDED_SAR
; 258  :       WRITE_U(stream, encoder->cfg.vui.sar_width, 16, "sar_width");

	push	16					; 00000010H
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 259  :       WRITE_U(stream, encoder->cfg.vui.sar_height, 16, "sar_height");

	push	16					; 00000010H
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN8@encoder_st:

; 260  :     }
; 261  :   } else

	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:

; 262  :     WRITE_U(stream, 0, 1, "aspect_ratio_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN6@encoder_st:

; 263  : 
; 264  :   //IF aspect ratio info
; 265  :   //ENDIF
; 266  : 
; 267  :   if (encoder->cfg.vui.overscan > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+112]
	test	ecx, ecx
	jle	SHORT $LN9@encoder_st

; 268  :     WRITE_U(stream, 1, 1, "overscan_info_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 269  :     WRITE_U(stream, encoder->cfg.vui.overscan - 1, 1, "overscan_appropriate_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+112]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 270  :   } else

	jmp	SHORT $LN10@encoder_st
$LN9@encoder_st:

; 271  :     WRITE_U(stream, 0, 1, "overscan_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN10@encoder_st:

; 272  : 
; 273  :   //IF overscan info
; 274  :   //ENDIF
; 275  : 
; 276  :   if (encoder->cfg.vui.videoformat != 5 ||
; 277  :       encoder->cfg.vui.fullrange   != 0 ||
; 278  :       encoder->cfg.vui.colorprim   != 2 ||
; 279  :       encoder->cfg.vui.transfer    != 2 ||

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+113]
	cmp	ecx, 5
	jne	SHORT $LN13@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+114]
	test	ecx, ecx
	jne	SHORT $LN13@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+115]
	cmp	ecx, 2
	jne	SHORT $LN13@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	cmp	ecx, 2
	jne	SHORT $LN13@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+117]
	cmp	ecx, 2
	je	$LN11@encoder_st
$LN13@encoder_st:

; 280  :       encoder->cfg.vui.colormatrix != 2) {
; 281  :     WRITE_U(stream, 1, 1, "video_signal_type_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 282  :     WRITE_U(stream, encoder->cfg.vui.videoformat, 3, "chroma_format");

	push	3
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+113]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 283  :     WRITE_U(stream, encoder->cfg.vui.fullrange, 1, "video_full_range_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+114]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 284  : 
; 285  :     if (encoder->cfg.vui.colorprim   != 2 ||
; 286  :         encoder->cfg.vui.transfer    != 2 ||

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+115]
	cmp	ecx, 2
	jne	SHORT $LN16@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	cmp	ecx, 2
	jne	SHORT $LN16@encoder_st
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+117]
	cmp	ecx, 2
	je	SHORT $LN14@encoder_st
$LN16@encoder_st:

; 287  :         encoder->cfg.vui.colormatrix != 2) {
; 288  :       WRITE_U(stream, 1, 1, "colour_description_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 289  :       WRITE_U(stream, encoder->cfg.vui.colorprim, 8, "colour_primaries");

	push	8
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+115]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 290  :       WRITE_U(stream, encoder->cfg.vui.transfer, 8, "transfer_characteristics");

	push	8
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 291  :       WRITE_U(stream, encoder->cfg.vui.colormatrix, 8, "matrix_coeffs");

	push	8
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+117]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 292  :     } else

	jmp	SHORT $LN15@encoder_st
$LN14@encoder_st:

; 293  :       WRITE_U(stream, 0, 1, "colour_description_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN15@encoder_st:

; 294  :   } else

	jmp	SHORT $LN12@encoder_st
$LN11@encoder_st:

; 295  :     WRITE_U(stream, 0, 1, "video_signal_type_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN12@encoder_st:

; 296  : 
; 297  :   //IF video type
; 298  :   //ENDIF
; 299  : 
; 300  :   if (encoder->cfg.vui.chroma_loc > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+120], 0
	jle	SHORT $LN17@encoder_st

; 301  :     WRITE_U(stream, 1, 1, "chroma_loc_info_present_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 302  :     WRITE_UE(stream, encoder->cfg.vui.chroma_loc, "chroma_sample_loc_type_top_field");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 303  :     WRITE_UE(stream, encoder->cfg.vui.chroma_loc, "chroma_sample_loc_type_bottom_field");

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 304  :   } else

	jmp	SHORT $LN18@encoder_st
$LN17@encoder_st:

; 305  :     WRITE_U(stream, 0, 1, "chroma_loc_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN18@encoder_st:

; 306  : 
; 307  :   //IF chroma loc info
; 308  :   //ENDIF
; 309  : 
; 310  :   WRITE_U(stream, 0, 1, "neutral_chroma_indication_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 311  :   WRITE_U(stream, encoder->vui.field_seq_flag, 1, "field_seq_flag"); // 0: frames, 1: fields

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2548]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 312  :   WRITE_U(stream, encoder->vui.frame_field_info_present_flag, 1, "frame_field_info_present_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2549]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 313  :   WRITE_U(stream, 0, 1, "default_display_window_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 314  : 
; 315  :   //IF default display window
; 316  :   //ENDIF
; 317  : 
; 318  :   WRITE_U(stream, encoder->vui.timing_info_present_flag, 1, "vui_timing_info_present_flag");

	push	1
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2550]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 319  :   if (encoder->vui.timing_info_present_flag) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2550]
	test	ecx, ecx
	je	SHORT $LN19@encoder_st

; 320  :     WRITE_U(stream, encoder->vui.num_units_in_tick, 32, "vui_num_units_in_tick");

	push	32					; 00000020H
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2540]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 321  :     WRITE_U(stream, encoder->vui.time_scale, 32, "vui_time_scale");

	push	32					; 00000020H
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2544]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 322  : 
; 323  :     WRITE_U(stream, 0, 1, "vui_poc_proportional_to_timing_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 324  :     WRITE_U(stream, 0, 1, "vui_hrd_parameters_present_flag");    

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN19@encoder_st:

; 325  :   }
; 326  :   
; 327  :   WRITE_U(stream, 0, 1, "bitstream_restriction_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 328  : 
; 329  :   //IF bitstream restriction
; 330  :   //ENDIF
; 331  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_VUI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_scaling_list
_TEXT	SEGMENT
tv165 = -352						; size = 4
tv163 = -352						; size = 4
tv92 = -352						; size = 4
tv83 = -352						; size = 4
_coef_list$1 = -152					; size = 4
_next_coef$2 = -140					; size = 4
_scan_cg$3 = -128					; size = 4
_coef_num$4 = -116					; size = 4
_delta$5 = -104						; size = 4
_pred_list$6 = -92					; size = 4
_ref_matrix_id$7 = -80					; size = 4
_i$8 = -68						; size = 4
_pred_list_idx$9 = -56					; size = 4
_scaling_list_pred_mode_flag$10 = -41			; size = 1
_list_id$11 = -32					; size = 4
_size_id$ = -20						; size = 4
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_scaling_list PROC	; COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 170  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 171  :   uint32_t size_id;
; 172  :   for (size_id = 0; size_id < SCALING_LIST_SIZE_NUM; size_id++) {

	mov	DWORD PTR _size_id$[ebp], 0
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _size_id$[ebp]
	add	eax, 1
	mov	DWORD PTR _size_id$[ebp], eax
$LN4@encoder_st:
	cmp	DWORD PTR _size_id$[ebp], 4
	jae	$LN1@encoder_st

; 173  :     int32_t list_id;
; 174  :     for (list_id = 0; list_id < kvz_g_scaling_list_num[size_id]; list_id++) {

	mov	DWORD PTR _list_id$11[ebp], 0
	jmp	SHORT $LN7@encoder_st
$LN5@encoder_st:
	mov	eax, DWORD PTR _list_id$11[ebp]
	add	eax, 1
	mov	DWORD PTR _list_id$11[ebp], eax
$LN7@encoder_st:
	mov	eax, DWORD PTR _size_id$[ebp]
	movzx	ecx, BYTE PTR _kvz_g_scaling_list_num[eax]
	cmp	DWORD PTR _list_id$11[ebp], ecx
	jge	$LN6@encoder_st

; 175  :       uint8_t scaling_list_pred_mode_flag = 1;

	mov	BYTE PTR _scaling_list_pred_mode_flag$10[ebp], 1

; 176  :       int32_t pred_list_idx;
; 177  :       int32_t i;
; 178  :       uint32_t ref_matrix_id = UINT32_MAX;

	mov	DWORD PTR _ref_matrix_id$7[ebp], -1

; 179  : 
; 180  :       for (pred_list_idx = list_id; pred_list_idx >= 0; pred_list_idx--) {

	mov	eax, DWORD PTR _list_id$11[ebp]
	mov	DWORD PTR _pred_list_idx$9[ebp], eax
	jmp	SHORT $LN10@encoder_st
$LN8@encoder_st:
	mov	eax, DWORD PTR _pred_list_idx$9[ebp]
	sub	eax, 1
	mov	DWORD PTR _pred_list_idx$9[ebp], eax
$LN10@encoder_st:
	cmp	DWORD PTR _pred_list_idx$9[ebp], 0
	jl	$LN9@encoder_st

; 181  :         const int32_t * const pred_list  = (list_id == pred_list_idx) ?

	mov	eax, DWORD PTR _list_id$11[ebp]
	cmp	eax, DWORD PTR _pred_list_idx$9[ebp]
	jne	SHORT $LN22@encoder_st
	mov	ecx, DWORD PTR _pred_list_idx$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _size_id$[ebp]
	push	edx
	call	_kvz_scalinglist_get_default
	add	esp, 8
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN23@encoder_st
$LN22@encoder_st:
	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2652]
	mov	eax, DWORD PTR _pred_list_idx$9[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv83[ebp], ecx
$LN23@encoder_st:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _pred_list$6[ebp], edx

; 182  :                                      kvz_scalinglist_get_default(size_id, pred_list_idx) :
; 183  :                                      encoder->scaling_list.scaling_list_coeff[size_id][pred_list_idx];
; 184  : 
; 185  :         if (!memcmp(encoder->scaling_list.scaling_list_coeff[size_id][list_id], pred_list, sizeof(int32_t) * MIN(8, kvz_g_scaling_list_size[size_id])) &&

	mov	eax, DWORD PTR _size_id$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	cmp	ecx, 8
	jle	SHORT $LN24@encoder_st
	mov	DWORD PTR tv92[ebp], 8
	jmp	SHORT $LN25@encoder_st
$LN24@encoder_st:
	mov	edx, DWORD PTR _size_id$[ebp]
	movzx	eax, WORD PTR _kvz_g_scaling_list_size[edx*2]
	mov	DWORD PTR tv92[ebp], eax
$LN25@encoder_st:
	mov	ecx, DWORD PTR tv92[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pred_list$6[ebp]
	push	edx
	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2652]
	mov	eax, DWORD PTR _list_id$11[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@encoder_st
	cmp	DWORD PTR _size_id$[ebp], 2
	jb	SHORT $LN15@encoder_st
	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2556]
	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	eax, DWORD PTR [ecx+eax+2556]
	mov	ecx, DWORD PTR _list_id$11[ebp]
	mov	esi, DWORD PTR _pred_list_idx$9[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	cmp	edx, DWORD PTR [eax+esi*4]
	jne	SHORT $LN14@encoder_st
$LN15@encoder_st:

; 186  :             ((size_id < SCALING_LIST_16x16) ||
; 187  :              (encoder->scaling_list.scaling_list_dc[size_id][list_id] == encoder->scaling_list.scaling_list_dc[size_id][pred_list_idx]))) {
; 188  :           ref_matrix_id = pred_list_idx;

	mov	eax, DWORD PTR _pred_list_idx$9[ebp]
	mov	DWORD PTR _ref_matrix_id$7[ebp], eax

; 189  :           scaling_list_pred_mode_flag = 0;

	mov	BYTE PTR _scaling_list_pred_mode_flag$10[ebp], 0

; 190  :           break;

	jmp	SHORT $LN9@encoder_st
$LN14@encoder_st:

; 191  :         }
; 192  :       }

	jmp	$LN8@encoder_st
$LN9@encoder_st:

; 193  :       WRITE_U(stream, scaling_list_pred_mode_flag, 1, "scaling_list_pred_mode_flag" );

	push	1
	movzx	eax, BYTE PTR _scaling_list_pred_mode_flag$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 194  : 
; 195  :       if (!scaling_list_pred_mode_flag) {

	movzx	eax, BYTE PTR _scaling_list_pred_mode_flag$10[ebp]
	test	eax, eax
	jne	SHORT $LN16@encoder_st

; 196  :         WRITE_UE(stream, list_id - ref_matrix_id, "scaling_list_pred_matrix_id_delta");

	mov	eax, DWORD PTR _list_id$11[ebp]
	sub	eax, DWORD PTR _ref_matrix_id$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 197  :       } else {

	jmp	$LN17@encoder_st
$LN16@encoder_st:

; 198  :         int32_t delta;
; 199  :         const int32_t coef_num = MIN(MAX_MATRIX_COEF_NUM, kvz_g_scaling_list_size[size_id]);

	mov	eax, DWORD PTR _size_id$[ebp]
	movzx	ecx, WORD PTR _kvz_g_scaling_list_size[eax*2]
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN26@encoder_st
	mov	DWORD PTR tv163[ebp], 64		; 00000040H
	jmp	SHORT $LN27@encoder_st
$LN26@encoder_st:
	mov	edx, DWORD PTR _size_id$[ebp]
	movzx	eax, WORD PTR _kvz_g_scaling_list_size[edx*2]
	mov	DWORD PTR tv163[ebp], eax
$LN27@encoder_st:
	mov	ecx, DWORD PTR tv163[ebp]
	mov	DWORD PTR _coef_num$4[ebp], ecx

; 200  :         const uint32_t * const scan_cg = (size_id == 0) ? g_sig_last_scan_16x16 : g_sig_last_scan_32x32;

	cmp	DWORD PTR _size_id$[ebp], 0
	jne	SHORT $LN28@encoder_st
	mov	DWORD PTR tv165[ebp], OFFSET _g_sig_last_scan_16x16
	jmp	SHORT $LN29@encoder_st
$LN28@encoder_st:
	mov	DWORD PTR tv165[ebp], OFFSET _g_sig_last_scan_32x32
$LN29@encoder_st:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _scan_cg$3[ebp], eax

; 201  :         int32_t next_coef = 8;

	mov	DWORD PTR _next_coef$2[ebp], 8

; 202  :         const int32_t * const coef_list = encoder->scaling_list.scaling_list_coeff[size_id][list_id];

	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2652]
	mov	eax, DWORD PTR _list_id$11[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _coef_list$1[ebp], ecx

; 203  : 
; 204  :         if (size_id >= SCALING_LIST_16x16) {

	cmp	DWORD PTR _size_id$[ebp], 2
	jb	SHORT $LN18@encoder_st

; 205  :           WRITE_SE(stream, encoder->scaling_list.scaling_list_dc[size_id][list_id] - 8, "scaling_list_dc_coef_minus8");

	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2556]
	mov	eax, DWORD PTR _list_id$11[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	sub	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put_se
	add	esp, 8

; 206  :           next_coef = encoder->scaling_list.scaling_list_dc[size_id][list_id];

	imul	eax, DWORD PTR _size_id$[ebp], 24
	mov	ecx, DWORD PTR _encoder$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2556]
	mov	eax, DWORD PTR _list_id$11[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _next_coef$2[ebp], ecx
$LN18@encoder_st:

; 207  :         }
; 208  : 
; 209  :         for (i = 0; i < coef_num; i++) {

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN13@encoder_st
$LN11@encoder_st:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN13@encoder_st:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _coef_num$4[ebp]
	jge	SHORT $LN17@encoder_st

; 210  :           delta     = coef_list[scan_cg[i]] - next_coef;

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _scan_cg$3[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _coef_list$1[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	sub	ecx, DWORD PTR _next_coef$2[ebp]
	mov	DWORD PTR _delta$5[ebp], ecx

; 211  :           next_coef = coef_list[scan_cg[i]];

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _scan_cg$3[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _coef_list$1[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _next_coef$2[ebp], ecx

; 212  :           if (delta > 127)

	cmp	DWORD PTR _delta$5[ebp], 127		; 0000007fH
	jle	SHORT $LN19@encoder_st

; 213  :             delta -= 256;

	mov	eax, DWORD PTR _delta$5[ebp]
	sub	eax, 256				; 00000100H
	mov	DWORD PTR _delta$5[ebp], eax
$LN19@encoder_st:

; 214  :           if (delta < -128)

	cmp	DWORD PTR _delta$5[ebp], -128		; ffffff80H
	jge	SHORT $LN20@encoder_st

; 215  :             delta += 256;

	mov	eax, DWORD PTR _delta$5[ebp]
	add	eax, 256				; 00000100H
	mov	DWORD PTR _delta$5[ebp], eax
$LN20@encoder_st:

; 216  : 
; 217  :           WRITE_SE(stream, delta, "scaling_list_delta_coef");

	mov	eax, DWORD PTR _delta$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_se
	add	esp, 8

; 218  :         }

	jmp	SHORT $LN11@encoder_st
$LN17@encoder_st:

; 219  :       }
; 220  :     }

	jmp	$LN5@encoder_st
$LN6@encoder_st:

; 221  :   }

	jmp	$LN2@encoder_st
$LN1@encoder_st:

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_scaling_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_vid_parameter_set
_TEXT	SEGMENT
_max_reorder$ = -32					; size = 4
_max_buffer$ = -20					; size = 4
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_vid_parameter_set PROC	; COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 131  : #ifdef KVZ_DEBUG
; 132  :   printf("=========== Video Parameter Set ID: 0 ===========\n");
; 133  : #endif
; 134  :   const encoder_control_t* encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 135  : 
; 136  :   WRITE_U(stream, 0, 4, "vps_video_parameter_set_id");

	push	4
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 137  :   WRITE_U(stream, 3, 2, "vps_reserved_three_2bits" );

	push	2
	push	3
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 138  :   WRITE_U(stream, 0, 6, "vps_reserved_zero_6bits" );

	push	6
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 139  :   WRITE_U(stream, 1, 3, "vps_max_sub_layers_minus1");

	push	3
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 140  :   WRITE_U(stream, 0, 1, "vps_temporal_id_nesting_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 141  :   WRITE_U(stream, 0xffff, 16, "vps_reserved_ffff_16bits");

	push	16					; 00000010H
	push	65535					; 0000ffffH
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 142  : 
; 143  :   encoder_state_write_bitstream_PTL(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_PTL
	add	esp, 8

; 144  : 
; 145  :   WRITE_U(stream, 0, 1, "vps_sub_layer_ordering_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 146  : 
; 147  :   int max_buffer  = max_required_dpb_size(encoder);

	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_max_required_dpb_size
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _max_buffer$[ebp], ecx

; 148  :   int max_reorder = max_num_reorder_pics(encoder);

	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_max_num_reorder_pics
	add	esp, 4
	movzx	ecx, al
	mov	DWORD PTR _max_reorder$[ebp], ecx

; 149  :   if (max_buffer - 1 < max_reorder) max_buffer = max_reorder + 1;

	mov	eax, DWORD PTR _max_buffer$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _max_reorder$[ebp]
	jge	SHORT $LN2@encoder_st
	mov	eax, DWORD PTR _max_reorder$[ebp]
	add	eax, 1
	mov	DWORD PTR _max_buffer$[ebp], eax
$LN2@encoder_st:

; 150  :   WRITE_UE(stream, max_buffer - 1, "vps_max_dec_pic_buffering_minus1");

	mov	eax, DWORD PTR _max_buffer$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 151  :   WRITE_UE(stream, max_reorder, "vps_max_num_reorder_pics");

	mov	eax, DWORD PTR _max_reorder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 152  : 
; 153  :   WRITE_UE(stream, 0, "vps_max_latency_increase");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 154  : 
; 155  :   WRITE_U(stream, 0, 6, "vps_max_nuh_reserved_zero_layer_id");

	push	6
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 156  :   WRITE_UE(stream, 0, "vps_max_op_sets_minus1");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 157  :   WRITE_U(stream, 0, 1, "vps_timing_info_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 158  : 
; 159  :   //IF timing info
; 160  :   //END IF
; 161  : 
; 162  :   WRITE_U(stream, 0, 1, "vps_extension_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 163  : 
; 164  :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_vid_parameter_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _max_num_reorder_pics
_TEXT	SEGMENT
tv73 = -200						; size = 4
tv75 = -196						; size = 4
_encoder$ = 8						; size = 4
_max_num_reorder_pics PROC				; COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 125  :   return encoder->cfg.gop_lowdelay ? 0 : MAX(encoder->cfg.gop_len - 1, 0);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	SHORT $LN5@max_num_re
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN6@max_num_re
$LN5@max_num_re:
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	sub	eax, 1
	test	eax, eax
	jle	SHORT $LN3@max_num_re
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [ecx+276]
	sub	edx, 1
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN4@max_num_re
$LN3@max_num_re:
	mov	DWORD PTR tv73[ebp], 0
$LN4@max_num_re:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv75[ebp], eax
$LN6@max_num_re:
	mov	al, BYTE PTR tv75[ebp]

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_max_num_reorder_pics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _max_required_dpb_size
_TEXT	SEGMENT
_pos_refs$1 = -44					; size = 4
_neg_refs$2 = -32					; size = 4
_g$3 = -20						; size = 4
_max_buffer$ = -8					; size = 4
_encoder$ = 8						; size = 4
_max_required_dpb_size PROC				; COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 111  :   int max_buffer = 1;

	mov	DWORD PTR _max_buffer$[ebp], 1

; 112  :   for (int g = 0; g < encoder->cfg.gop_len; ++g) {

	mov	DWORD PTR _g$3[ebp], 0
	jmp	SHORT $LN4@max_requir
$LN2@max_requir:
	mov	eax, DWORD PTR _g$3[ebp]
	add	eax, 1
	mov	DWORD PTR _g$3[ebp], eax
$LN4@max_requir:
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	cmp	DWORD PTR _g$3[ebp], ecx
	jge	SHORT $LN3@max_requir

; 113  :     int neg_refs = encoder->cfg.gop[g].ref_neg_count;

	mov	eax, DWORD PTR _g$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [ecx+eax+309]
	mov	DWORD PTR _neg_refs$2[ebp], edx

; 114  :     int pos_refs = encoder->cfg.gop[g].ref_pos_count;

	mov	eax, DWORD PTR _g$3[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [ecx+eax+292]
	mov	DWORD PTR _pos_refs$1[ebp], edx

; 115  :     if (neg_refs + pos_refs + 1 > max_buffer) max_buffer = neg_refs + pos_refs + 1;

	mov	eax, DWORD PTR _pos_refs$1[ebp]
	mov	ecx, DWORD PTR _neg_refs$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, DWORD PTR _max_buffer$[ebp]
	jle	SHORT $LN5@max_requir
	mov	eax, DWORD PTR _pos_refs$1[ebp]
	mov	ecx, DWORD PTR _neg_refs$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _max_buffer$[ebp], edx
$LN5@max_requir:

; 116  :   }

	jmp	SHORT $LN2@max_requir
$LN3@max_requir:

; 117  : 
; 118  :   if (encoder->cfg.gop_len == 0) max_buffer = encoder->cfg.ref_frames + 1;

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jne	SHORT $LN6@max_requir
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, 1
	mov	DWORD PTR _max_buffer$[ebp], ecx
$LN6@max_requir:

; 119  : 
; 120  :   return max_buffer;

	mov	al, BYTE PTR _max_buffer$[ebp]

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_max_required_dpb_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_PTL
_TEXT	SEGMENT
tv92 = -220						; size = 4
tv78 = -220						; size = 4
_i$1 = -20						; size = 4
_level$ = -5						; size = 1
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_encoder_state_write_bitstream_PTL PROC			; COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 73   :   // PTL
; 74   :   // Profile Tier
; 75   :   WRITE_U(stream, 0, 2, "general_profile_space");

	push	2
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 76   :   WRITE_U(stream, state->encoder_control->cfg.high_tier, 1, "general_tier_flag");

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+2418]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 77   :   // Main Profile == 1,  Main 10 profile == 2
; 78   :   WRITE_U(stream, (state->encoder_control->bitdepth == 8) ? 1 : 2, 5, "general_profile_idc");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2532]
	cmp	edx, 8
	jne	SHORT $LN6@encoder_st
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN7@encoder_st
$LN6@encoder_st:
	mov	DWORD PTR tv78[ebp], 2
$LN7@encoder_st:
	push	5
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 79   :   /* Compatibility flags should be set at general_profile_idc
; 80   :    *  (so with general_profile_idc = 1, compatibility_flag[1] should be 1)
; 81   :    * According to specification, when compatibility_flag[1] is set,
; 82   :    *  compatibility_flag[2] should be set too.
; 83   :    */
; 84   :   WRITE_U(stream, 3 << 29, 32, "general_profile_compatibility_flag[]");

	push	32					; 00000020H
	push	1610612736				; 60000000H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 85   : 
; 86   :   WRITE_U(stream, 1, 1, "general_progressive_source_flag");

	push	1
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 87   :   WRITE_U(stream, state->encoder_control->in.source_scan_type != 0, 1, "general_interlaced_source_flag");

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2512]
	test	edx, edx
	je	SHORT $LN8@encoder_st
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@encoder_st
$LN8@encoder_st:
	mov	DWORD PTR tv92[ebp], 0
$LN9@encoder_st:
	push	1
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 88   :   WRITE_U(stream, 0, 1, "general_non_packed_constraint_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 89   :   WRITE_U(stream, 0, 1, "general_frame_only_constraint_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 90   : 
; 91   :   WRITE_U(stream, 0, 32, "XXX_reserved_zero_44bits[0..31]");

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 92   :   WRITE_U(stream, 0, 12, "XXX_reserved_zero_44bits[32..43]");

	push	12					; 0000000cH
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 93   : 
; 94   :   // end Profile Tier
; 95   : 
; 96   :   uint8_t level = state->encoder_control->cfg.level;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+2416]
	mov	BYTE PTR _level$[ebp], dl

; 97   :   WRITE_U(stream, level * 3, 8, "general_level_idc");

	push	8
	movzx	eax, BYTE PTR _level$[ebp]
	imul	ecx, eax, 3
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 98   : 
; 99   :   WRITE_U(stream, 0, 1, "sub_layer_profile_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 100  :   WRITE_U(stream, 0, 1, "sub_layer_level_present_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 101  : 
; 102  :   for (int i = 1; i < 8; i++) {

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN4@encoder_st
$LN2@encoder_st:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@encoder_st:
	cmp	DWORD PTR _i$1[ebp], 8
	jge	SHORT $LN1@encoder_st

; 103  :     WRITE_U(stream, 0, 2, "reserved_zero_2bits");

	push	2
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 104  :   }

	jmp	SHORT $LN2@encoder_st
$LN1@encoder_st:

; 105  : 
; 106  :   // end PTL
; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_PTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _encoder_state_write_bitstream_aud
_TEXT	SEGMENT
tv75 = -224						; size = 4
tv76 = -220						; size = 4
_pic_type$ = -17					; size = 1
_stream$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_write_bitstream_aud PROC			; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :   bitstream_t *const stream = &state->stream;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _stream$[ebp], eax

; 60   :   kvz_nal_write(stream, KVZ_NAL_AUD_NUT, 0, 1);

	push	1
	push	0
	push	35					; 00000023H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 61   : 
; 62   :   uint8_t pic_type = state->frame->slicetype == KVZ_SLICE_I ? 0

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	jne	SHORT $LN5@encoder_st
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+84], 1
	jne	SHORT $LN3@encoder_st
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@encoder_st
$LN3@encoder_st:
	mov	DWORD PTR tv75[ebp], 2
$LN4@encoder_st:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], ecx
$LN6@encoder_st:
	mov	dl, BYTE PTR tv76[ebp]
	mov	BYTE PTR _pic_type$[ebp], dl

; 63   :     : state->frame->slicetype == KVZ_SLICE_P ? 1
; 64   :     : 2;
; 65   :   WRITE_U(stream, pic_type, 3, "pic_type");

	push	3
	movzx	eax, BYTE PTR _pic_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 66   : 
; 67   :   kvz_bitstream_add_rbsp_trailing_bits(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_add_rbsp_trailing_bits
	add	esp, 4

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_write_bitstream_aud ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
;	COMDAT _kvz_math_ceil_log2
_TEXT	SEGMENT
tv75 = -196						; size = 4
_value$ = 8						; size = 4
_kvz_math_ceil_log2 PROC				; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4AC213E_kvz_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 61   :   assert(value > 0);

	cmp	DWORD PTR _value$[ebp], 0
	ja	SHORT $LN3@kvz_math_c
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_math_ceil_log2@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@kvz_math_c:

; 62   : 
; 63   :   // The ceil_log2 is just floor_log2 + 1, except for exact powers of 2.
; 64   :   return kvz_math_floor_log2(value) + ((value & (value - 1)) ? 1 : 0);

	mov	eax, DWORD PTR _value$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _value$[ebp]
	je	SHORT $LN4@kvz_math_c
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@kvz_math_c
$LN4@kvz_math_c:
	mov	DWORD PTR tv75[ebp], 0
$LN5@kvz_math_c:
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_kvz_math_floor_log2
	add	esp, 4
	add	eax, DWORD PTR tv75[ebp]

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_math_ceil_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
;	COMDAT _kvz_math_floor_log2
_TEXT	SEGMENT
tv76 = -244						; size = 4
_shift$1 = -44						; size = 4
_bits$2 = -32						; size = 4
_i$3 = -20						; size = 4
_result$ = -8						; size = 4
_value$ = 8						; size = 4
_kvz_math_floor_log2 PROC				; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4AC213E_kvz_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 45   :   assert(value > 0);

	cmp	DWORD PTR _value$[ebp], 0
	ja	SHORT $LN6@kvz_math_f
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_math_f:

; 46   : 
; 47   :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {

	mov	DWORD PTR _i$3[ebp], 4
	jmp	SHORT $LN4@kvz_math_f
$LN2@kvz_math_f:
	mov	eax, DWORD PTR _i$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@kvz_math_f:
	cmp	DWORD PTR _i$3[ebp], 0
	jl	SHORT $LN3@kvz_math_f

; 50   :     unsigned bits = 1ull << i;

	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _i$3[ebp]
	call	__allshl
	mov	DWORD PTR _bits$2[ebp], eax

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$2[ebp]
	shl	eax, cl
	cmp	DWORD PTR _value$[ebp], eax
	jb	SHORT $LN7@kvz_math_f
	mov	ecx, DWORD PTR _bits$2[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN8@kvz_math_f
$LN7@kvz_math_f:
	mov	DWORD PTR tv76[ebp], 0
$LN8@kvz_math_f:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _shift$1[ebp], edx

; 52   :     result += shift;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _shift$1[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 53   :     value >>= shift;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _shift$1[ebp]
	shr	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 54   :   }

	jmp	SHORT $LN2@kvz_math_f
$LN3@kvz_math_f:

; 55   : 
; 56   :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_math_floor_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
;	COMDAT _encoder_state_must_write_vps
_TEXT	SEGMENT
tv75 = -224						; size = 4
tv73 = -220						; size = 4
_vps_period$ = -20					; size = 4
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_must_write_vps PROC			; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6BE1C69C_encoderstate@h
	call	@__CheckForDebuggerJustMyCode@4

; 363  :   const int32_t frame = state->frame->num;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _frame$[ebp], edx

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _vps_period$[ebp], edx

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	cmp	DWORD PTR _vps_period$[ebp], 0
	jle	SHORT $LN3@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	cdq
	idiv	DWORD PTR _vps_period$[ebp]
	test	edx, edx
	je	SHORT $LN5@encoder_st
$LN3@encoder_st:
	cmp	DWORD PTR _vps_period$[ebp], 0
	jl	SHORT $LN4@encoder_st
	cmp	DWORD PTR _frame$[ebp], 0
	je	SHORT $LN5@encoder_st
$LN4@encoder_st:
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:
	mov	DWORD PTR tv73[ebp], 1
$LN6@encoder_st:
	cmp	DWORD PTR tv73[ebp], 0
	jne	SHORT $LN7@encoder_st
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN8@encoder_st
$LN7@encoder_st:
	mov	DWORD PTR tv75[ebp], 1
$LN8@encoder_st:
	mov	al, BYTE PTR tv75[ebp]

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_must_write_vps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1793 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1395 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _kvz_encoder_state_write_parameter_sets
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_kvz_encoder_state_write_parameter_sets PROC		; COMDAT

; 1130 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1131 :   // Video Parameter Set (VPS)
; 1132 :   kvz_nal_write(stream, KVZ_NAL_VPS_NUT, 0, 1);

	push	1
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1133 :   encoder_state_write_bitstream_vid_parameter_set(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_vid_parameter_set
	add	esp, 8

; 1134 : 
; 1135 :   // Sequence Parameter Set (SPS)
; 1136 :   kvz_nal_write(stream, KVZ_NAL_SPS_NUT, 0, 1);

	push	1
	push	0
	push	33					; 00000021H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1137 :   encoder_state_write_bitstream_seq_parameter_set(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_seq_parameter_set
	add	esp, 8

; 1138 : 
; 1139 :   // Picture Parameter Set (PPS)
; 1140 :   kvz_nal_write(stream, KVZ_NAL_PPS_NUT, 0, 1);

	push	1
	push	0
	push	34					; 00000022H
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_nal_write
	add	esp, 16					; 00000010H

; 1141 :   encoder_state_write_bitstream_pic_parameter_set(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_pic_parameter_set
	add	esp, 8

; 1142 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_write_parameter_sets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _kvz_encoder_state_worker_write_bitstream
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_kvz_encoder_state_worker_write_bitstream PROC		; COMDAT

; 1124 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1125 :   kvz_encoder_state_write_bitstream((encoder_state_t *) opaque);

	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_encoder_state_write_bitstream
	add	esp, 4

; 1126 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_worker_write_bitstream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _kvz_encoder_state_write_bitstream
_TEXT	SEGMENT
tv67 = -196						; size = 4
_state$ = 8						; size = 4
_kvz_encoder_state_write_bitstream PROC			; COMDAT

; 1106 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 1107 :   if (!state->is_leaf) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN1@kvz_encode

; 1108 :     switch (state->type) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 77			; 0000004dH
	je	SHORT $LN5@kvz_encode
	cmp	DWORD PTR tv67[ebp], 82			; 00000052H
	jle	SHORT $LN7@kvz_encode
	cmp	DWORD PTR tv67[ebp], 84			; 00000054H
	jle	SHORT $LN6@kvz_encode
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:

; 1109 :       case ENCODER_STATE_TYPE_MAIN:
; 1110 :         encoder_state_write_bitstream_main(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_bitstream_main
	add	esp, 4

; 1111 :         break;

	jmp	SHORT $LN1@kvz_encode
$LN6@kvz_encode:

; 1112 :       case ENCODER_STATE_TYPE_TILE:
; 1113 :       case ENCODER_STATE_TYPE_SLICE:
; 1114 :         encoder_state_write_bitstream_children(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_write_bitstream_children
	add	esp, 4

; 1115 :         break;

	jmp	SHORT $LN1@kvz_encode
$LN7@kvz_encode:

; 1116 :       default:
; 1117 :         fprintf(stderr, "Unsupported node type %c!\n", state->type);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BL@ODPDELMK@Unsupported?5node?5type?5?$CFc?$CB?6@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1118 :         assert(0);

	xor	eax, eax
	jne	SHORT $LN1@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encoder_state_write_bitstream@@9@9
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IM@ECPKLBPN@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@kvz_encode:

; 1119 :     }
; 1120 :   }
; 1121 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encoder_state_write_bitstream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoder_state-bitstream.c
;	COMDAT _kvz_encoder_state_write_bitstream_slice_header
_TEXT	SEGMENT
tv86 = -320						; size = 4
tv152 = -316						; size = 4
tv84 = -316						; size = 4
_offset_len$1 = -116					; size = 4
_entry_points_written$2 = -104				; size = 4
_num_offsets$3 = -92					; size = 4
_max_length_seen$4 = -80				; size = 4
_num_entry_points$5 = -68				; size = 4
_slice_start_rs$6 = -56					; size = 4
_num_bits$7 = -44					; size = 4
_lcu_cnt$8 = -32					; size = 4
_first_slice_segment_in_pic$ = -17			; size = 1
_encoder$ = -8						; size = 4
_stream$ = 8						; size = 4
_state$ = 12						; size = 4
_independent$ = 16					; size = 1
_kvz_encoder_state_write_bitstream_slice_header PROC	; COMDAT

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C032D02_encoder_state-bitstream@c
	call	@__CheckForDebuggerJustMyCode@4

; 871  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 872  : 
; 873  : #ifdef KVZ_DEBUG
; 874  :   printf("=========== Slice ===========\n");
; 875  : #endif
; 876  : 
; 877  :   if (encoder->cfg.partial_coding.fullWidth != 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, WORD PTR [eax+2446]
	test	ecx, ecx
	je	SHORT $LN2@kvz_encode

; 878  :     state->slice->start_in_rs = encoder->cfg.partial_coding.startCTU_x +

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2444]
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	eax, WORD PTR [edx+2446]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	edx, BYTE PTR [edx+2445]
	imul	eax, edx
	add	ecx, eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+12], ecx
$LN2@kvz_encode:

; 879  :       CEILDIV(encoder->cfg.partial_coding.fullWidth, 64) * encoder->cfg.partial_coding.startCTU_y;
; 880  :   }
; 881  : 
; 882  :   bool first_slice_segment_in_pic = (state->slice->start_in_rs == 0);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN16@kvz_encode
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN17@kvz_encode
$LN16@kvz_encode:
	mov	DWORD PTR tv84[ebp], 0
$LN17@kvz_encode:
	cmp	DWORD PTR tv84[ebp], 0
	jne	SHORT $LN18@kvz_encode
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN19@kvz_encode
$LN18@kvz_encode:
	mov	DWORD PTR tv86[ebp], 1
$LN19@kvz_encode:
	mov	dl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _first_slice_segment_in_pic$[ebp], dl

; 883  :   if ((state->encoder_control->cfg.slices & KVZ_SLICES_WPP)
; 884  :       && state->wfrow->lcu_offset_y > 0)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2408]
	and	edx, 2
	je	SHORT $LN3@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx], 0
	jle	SHORT $LN3@kvz_encode

; 885  :   {
; 886  :     first_slice_segment_in_pic = false;

	mov	BYTE PTR _first_slice_segment_in_pic$[ebp], 0
$LN3@kvz_encode:

; 887  :   }
; 888  : 
; 889  :   WRITE_U(stream, first_slice_segment_in_pic, 1, "first_slice_segment_in_pic_flag");

	push	1
	movzx	eax, BYTE PTR _first_slice_segment_in_pic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH

; 890  : 
; 891  :   if (state->frame->pictype >= KVZ_NAL_BLA_W_LP
; 892  :     && state->frame->pictype <= KVZ_NAL_RSV_IRAP_VCL23) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 16					; 00000010H
	jl	SHORT $LN4@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	cmp	edx, 23					; 00000017H
	jg	SHORT $LN4@kvz_encode

; 893  :     WRITE_U(stream, 0, 1, "no_output_of_prior_pics_flag");

	push	1
	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN4@kvz_encode:

; 894  :   }
; 895  : 
; 896  :   WRITE_UE(stream, 0, "slice_pic_parameter_set_id");

	push	0
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 897  : 
; 898  :   if (!first_slice_segment_in_pic) {

	movzx	eax, BYTE PTR _first_slice_segment_in_pic$[ebp]
	test	eax, eax
	jne	$LN5@kvz_encode

; 899  :     if (encoder->pps.dependent_slice_segments_enabled_flag) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+4592]
	test	ecx, ecx
	je	SHORT $LN6@kvz_encode

; 900  :       WRITE_U(stream, !independent, 1, "dependent_slice_segment_flag");

	movzx	eax, BYTE PTR _independent$[ebp]
	test	eax, eax
	jne	SHORT $LN20@kvz_encode
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN21@kvz_encode
$LN20@kvz_encode:
	mov	DWORD PTR tv152[ebp], 0
$LN21@kvz_encode:
	push	1
	mov	ecx, DWORD PTR tv152[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN6@kvz_encode:

; 901  :     }
; 902  : 
; 903  :     int lcu_cnt = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2488]
	imul	edx, DWORD PTR [ecx+2492]
	mov	DWORD PTR _lcu_cnt$8[ebp], edx

; 904  :     if (encoder->cfg.partial_coding.fullWidth != 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, WORD PTR [eax+2446]
	test	ecx, ecx
	je	SHORT $LN7@kvz_encode

; 905  :       lcu_cnt = CEILDIV(encoder->cfg.partial_coding.fullWidth, 64) * CEILDIV(encoder->cfg.partial_coding.fullHeight, 64);

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	eax, WORD PTR [eax+2446]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 6
	mov	edx, DWORD PTR _encoder$[ebp]
	movzx	eax, WORD PTR [edx+2448]
	add	eax, 63					; 0000003fH
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	imul	ecx, eax
	mov	DWORD PTR _lcu_cnt$8[ebp], ecx
$LN7@kvz_encode:

; 906  :     }
; 907  :     int num_bits = kvz_math_ceil_log2(lcu_cnt);

	mov	eax, DWORD PTR _lcu_cnt$8[ebp]
	push	eax
	call	_kvz_math_ceil_log2
	add	esp, 4
	mov	DWORD PTR _num_bits$7[ebp], eax

; 908  :     int slice_start_rs = state->slice->start_in_rs;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _slice_start_rs$6[ebp], edx

; 909  :     if (state->encoder_control->cfg.slices & KVZ_SLICES_WPP) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2408]
	and	edx, 2
	je	SHORT $LN8@kvz_encode

; 910  :       slice_start_rs += state->wfrow->lcu_offset_y * state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	imul	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _slice_start_rs$6[ebp]
	mov	DWORD PTR _slice_start_rs$6[ebp], eax
$LN8@kvz_encode:

; 911  :     }
; 912  :     WRITE_U(stream, slice_start_rs, num_bits, "slice_segment_address");

	movzx	eax, BYTE PTR _num_bits$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _slice_start_rs$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_kvz_bitstream_put
	add	esp, 12					; 0000000cH
$LN5@kvz_encode:

; 913  :   }
; 914  : 
; 915  :   if (independent) {

	movzx	eax, BYTE PTR _independent$[ebp]
	test	eax, eax
	je	SHORT $LN9@kvz_encode

; 916  :     kvz_encoder_state_write_bitstream_slice_header_independent(stream, state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_encoder_state_write_bitstream_slice_header_independent
	add	esp, 8
$LN9@kvz_encode:

; 917  :   }
; 918  :    
; 919  :   if (encoder->tiles_enable || encoder->cfg.wpp) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+4476]
	test	ecx, ecx
	jne	SHORT $LN11@kvz_encode
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	$LN1@kvz_encode
$LN11@kvz_encode:

; 920  :     int num_entry_points = 0;

	mov	DWORD PTR _num_entry_points$5[ebp], 0

; 921  :     int max_length_seen = 0;

	mov	DWORD PTR _max_length_seen$4[ebp], 0

; 922  :     
; 923  :     if (state->is_leaf) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN12@kvz_encode

; 924  :       num_entry_points = 1;

	mov	DWORD PTR _num_entry_points$5[ebp], 1

; 925  :     } else {

	jmp	SHORT $LN13@kvz_encode
$LN12@kvz_encode:

; 926  :     encoder_state_entry_points_explore(state, &num_entry_points, &max_length_seen);

	lea	eax, DWORD PTR _max_length_seen$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _num_entry_points$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_encoder_state_entry_points_explore
	add	esp, 12					; 0000000cH
$LN13@kvz_encode:

; 927  :     }
; 928  :     
; 929  :     int num_offsets = num_entry_points - 1;

	mov	eax, DWORD PTR _num_entry_points$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _num_offsets$3[ebp], eax

; 930  : 
; 931  :     WRITE_UE(stream, num_offsets, "num_entry_point_offsets");

	mov	eax, DWORD PTR _num_offsets$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 932  :     if (num_offsets > 0) {

	cmp	DWORD PTR _num_offsets$3[ebp], 0
	jle	SHORT $LN1@kvz_encode

; 933  :       int entry_points_written = 0;

	mov	DWORD PTR _entry_points_written$2[ebp], 0

; 934  :       int offset_len = kvz_math_floor_log2(max_length_seen) + 1;

	mov	eax, DWORD PTR _max_length_seen$4[ebp]
	push	eax
	call	_kvz_math_floor_log2
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _offset_len$1[ebp], eax

; 935  :       WRITE_UE(stream, offset_len - 1, "offset_len_minus1");

	mov	eax, DWORD PTR _offset_len$1[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_kvz_bitstream_put_ue
	add	esp, 8

; 936  :       encoder_state_write_bitstream_entry_points_write(stream, state, num_entry_points, offset_len, &entry_points_written); 

	lea	eax, DWORD PTR _entry_points_written$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset_len$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _num_entry_points$5[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_encoder_state_write_bitstream_entry_points_write
	add	esp, 20					; 00000014H
$LN1@kvz_encode:

; 937  :     }
; 938  :   }
; 939  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@kvz_encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@kvz_encode:
	DD	3
	DD	$LN25@kvz_encode
$LN25@kvz_encode:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN22@kvz_encode
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN23@kvz_encode
	DD	-104					; ffffff98H
	DD	4
	DD	$LN24@kvz_encode
$LN24@kvz_encode:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN23@kvz_encode:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN22@kvz_encode:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_kvz_encoder_state_write_bitstream_slice_header ENDP
_TEXT	ENDS
END
