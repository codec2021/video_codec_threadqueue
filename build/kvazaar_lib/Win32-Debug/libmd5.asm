; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__BF14AB7E_libmd5@c DB 01H
msvcjmc	ENDS
PUBLIC	_kvz_md5_init
PUBLIC	_kvz_md5_update
PUBLIC	_kvz_md5_final
PUBLIC	__JustMyCode_Default
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
;	COMDAT _MD5Transform
_TEXT	SEGMENT
_d$ = -44						; size = 4
_c$ = -32						; size = 4
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_buf$ = 8						; size = 4
_in$ = 12						; size = 4
_MD5Transform PROC					; COMDAT

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __BF14AB7E_libmd5@c
	call	@__CheckForDebuggerJustMyCode@4

; 179  :   register uint32_t a, b, c, d;
; 180  : 
; 181  :   a = buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _a$[ebp], eax

; 182  :   b = buf[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _b$[ebp], edx

; 183  :   c = buf[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _c$[ebp], edx

; 184  :   d = buf[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _d$[ebp], eax

; 185  : 
; 186  :   MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-680876936]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 25					; 00000019H
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 187  :   MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-389564586]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 20					; 00000014H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 188  :   MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+606105819]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 15					; 0000000fH
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 189  :   MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-1044525330]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 190  :   MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-176418897]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 191  :   MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax+1200080426]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 192  :   MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1473231341]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 193  :   MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-45705983]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 194  :   MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1770035416]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 25					; 00000019H
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 195  :   MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1958414417]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 196  :   MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-42063]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 197  :   MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-1990404162]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 198  :   MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+1804603682]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 25					; 00000019H
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 199  :   MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-40341101]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 20					; 00000014H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 200  :   MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1502002290]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 201  :   MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax+1236535329]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 10					; 0000000aH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 202  : 
; 203  :   MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-165796510]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 204  :   MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1069501632]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 205  :   MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax+643717713]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 206  :   MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-373897302]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 12					; 0000000cH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 207  :   MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-701558691]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 208  :   MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax+38016083]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 209  :   MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-660478335]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 210  :   MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-405537848]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 211  :   MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+568446438]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 212  :   MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1019803690]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 23					; 00000017H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 213  :   MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-187363961]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 214  :   MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1163531501]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 12					; 0000000cH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 215  :   MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-1444681467]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 216  :   MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-51403784]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 23					; 00000017H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 217  :   MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax+1735328473]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 18					; 00000012H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 218  :   MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-1926607734]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 12					; 0000000cH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 219  : 
; 220  :   MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-378558]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 221  :   MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2022574463]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 222  :   MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax+1839030562]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 223  :   MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-35309556]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 23					; 00000017H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 9
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 224  :   MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1530992060]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 28					; 0000001cH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 225  :   MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1272893353]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 11					; 0000000bH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 21					; 00000015H
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 226  :   MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-155497632]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 227  :   MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-1094730640]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 23					; 00000017H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 9
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 228  :   MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+681279174]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 229  :   MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-358537222]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 21					; 00000015H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 230  :   MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-722521979]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 231  :   MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax+76029189]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 23					; 00000017H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 9
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 232  :   MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);

	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-640364487]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 28					; 0000001cH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 233  :   MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);

	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-421815835]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 21					; 00000015H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 234  :   MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);

	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax+530742520]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 235  :   MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);

	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-995338651]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 9
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 236  : 
; 237  :   MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax-198630844]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 238  :   MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax+1126891415]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 22					; 00000016H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 239  :   MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1416354905]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 240  :   MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-57434055]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 241  :   MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax+1700485571]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 26					; 0000001aH
	or	ecx, edx
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 242  :   MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1894986606]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 22					; 00000016H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 243  :   MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1051523]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 244  :   MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2054922799]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 11					; 0000000bH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], edx

; 245  :   MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1873313359]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 246  :   MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-30611744]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 22					; 00000016H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 247  :   MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [edx+eax-1560198380]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 17					; 00000011H
	or	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 248  :   MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax+1309151649]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 249  :   MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);

	mov	eax, DWORD PTR _d$[ebp]
	not	eax
	or	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax-145523070]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 26					; 0000001aH
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 250  :   MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);

	mov	eax, DWORD PTR _c$[ebp]
	not	eax
	or	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx+eax-1120210379]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 22					; 00000016H
	or	ecx, edx
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _d$[ebp], eax

; 251  :   MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);

	mov	eax, DWORD PTR _b$[ebp]
	not	eax
	or	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+eax+718787259]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 17					; 00000011H
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _c$[ebp], edx

; 252  :   MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);

	mov	eax, DWORD PTR _a$[ebp]
	not	eax
	or	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _in$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	mov	edx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [edx+eax-343485551]
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 21					; 00000015H
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 11					; 0000000bH
	or	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax

; 253  : 
; 254  :   buf[0] += a;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 255  :   buf[1] += b;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 256  :   buf[2] += c;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 257  :   buf[3] += d;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 258  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MD5Transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
;	COMDAT _kvz_md5_final
_TEXT	SEGMENT
_p$ = -20						; size = 4
_count$ = -8						; size = 4
_digest$ = 8						; size = 4
_ctx$ = 12						; size = 4
_kvz_md5_final PROC					; COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __BF14AB7E_libmd5@c
	call	@__CheckForDebuggerJustMyCode@4

; 116  :   unsigned count;
; 117  :   unsigned char *p;
; 118  : 
; 119  :   /* Compute number of bytes mod 64 */
; 120  :   count = (ctx->bits[0] >> 3) & 0x3F;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _count$[ebp], eax

; 121  : 
; 122  :   /* Set the first char of padding to 0x80.  This is safe since there is
; 123  :      always at least one byte free */
; 124  :   p = ctx->in.b8 + count;

	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _p$[ebp], edx

; 125  :   *p++ = 0x80;

	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 126  : 
; 127  :   /* Bytes of padding needed to make 64 bytes */
; 128  :   count = 64 - 1 - count;

	mov	eax, 63					; 0000003fH
	sub	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _count$[ebp], eax

; 129  : 
; 130  :   /* Pad out to 56 mod 64 */
; 131  :   if (count < 8) {

	cmp	DWORD PTR _count$[ebp], 8
	jae	SHORT $LN2@kvz_md5_fi

; 132  :     /* Two lots of padding:  Pad the first block to 64 bytes */
; 133  :     memset(p, 0, count);

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 134  :     byteReverse(ctx->in.b32, 16);
; 135  :     MD5Transform(ctx->buf, ctx->in.b32);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_MD5Transform
	add	esp, 8

; 136  : 
; 137  :     /* Now fill the next block with 56 bytes */
; 138  :     memset(ctx->in.b8, 0, 56);

	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 139  :   } else {

	jmp	SHORT $LN3@kvz_md5_fi
$LN2@kvz_md5_fi:

; 140  :     /* Pad block to 56 bytes */
; 141  :     memset(p, 0, count - 8);

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 8
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN3@kvz_md5_fi:

; 142  :   }
; 143  :   byteReverse(ctx->in.b32, 14);
; 144  : 
; 145  :   /* Append length in bits and transform */
; 146  :   ctx->in.b32[14] = ctx->bits[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	esi, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+16]
	mov	DWORD PTR [edx+eax+24], ecx

; 147  :   ctx->in.b32[15] = ctx->bits[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	esi, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [esi+eax+16]
	mov	DWORD PTR [ecx+edx+24], eax

; 148  : 
; 149  :   MD5Transform(ctx->buf, ctx->in.b32);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_MD5Transform
	add	esp, 8

; 150  :   byteReverse((uint32_t *) ctx->buf, 4);
; 151  :   memcpy(digest, ctx->buf, 16);

	push	16					; 00000010H
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _digest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 152  : 
; 153  :   memset(ctx, 0, sizeof(* ctx));    /* In case it's sensitive */

	push	88					; 00000058H
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 154  :   /* The original version of this code omitted the asterisk. In
; 155  :      effect, only the first part of ctx was wiped with zeros, not
; 156  :      the whole thing. Bug found by Derek Jones. Original line: */
; 157  :   // memset(ctx, 0, sizeof(ctx));    /* In case it's sensitive */
; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_md5_final ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
;	COMDAT _kvz_md5_update
_TEXT	SEGMENT
tv71 = -220						; size = 4
_p$1 = -20						; size = 4
_t$ = -8						; size = 4
_ctx$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_kvz_md5_update PROC					; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __BF14AB7E_libmd5@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   :   uint32_t t;
; 69   : 
; 70   :   /* Update bitcount */
; 71   : 
; 72   :   t = ctx->bits[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _t$[ebp], eax

; 73   :   if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t)

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, eax
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [ecx+eax+16], edx
	mov	eax, DWORD PTR tv71[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jae	SHORT $LN4@kvz_md5_up

; 74   :     ctx->bits[1]++;        /* Carry from low to high */

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	add	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+eax+16], edx
$LN4@kvz_md5_up:

; 75   :   ctx->bits[1] += len >> 29;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 29					; 0000001dH
	mov	edx, DWORD PTR _ctx$[ebp]
	add	ecx, DWORD PTR [edx+eax+16]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+eax+16], ecx

; 76   : 
; 77   :   t = (t >> 3) & 0x3f;    /* Bytes already in shsInfo->data */

	mov	eax, DWORD PTR _t$[ebp]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _t$[ebp], eax

; 78   : 
; 79   :   /* Handle any leading odd-sized chunks */
; 80   : 
; 81   :   if (t) {

	je	SHORT $LN2@kvz_md5_up

; 82   :     unsigned char *p = ctx->in.b8 + t;

	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _p$1[ebp], edx

; 83   : 
; 84   :     t = 64 - t;

	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 85   :     if (len < t) {

	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _t$[ebp]
	jae	SHORT $LN6@kvz_md5_up

; 86   :       memcpy(p, buf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 87   :       return;

	jmp	$LN1@kvz_md5_up
$LN6@kvz_md5_up:

; 88   :     }
; 89   :     memcpy(p, buf, t);

	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 90   :     byteReverse(ctx->in.b32, 16);
; 91   :     MD5Transform(ctx->buf, ctx->in.b32);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_MD5Transform
	add	esp, 8

; 92   :     buf += t;

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _buf$[ebp], eax

; 93   :     len -= t;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN2@kvz_md5_up:

; 94   :   }
; 95   :   /* Process data in 64-byte chunks */
; 96   : 
; 97   :   while (len >= 64) {

	cmp	DWORD PTR _len$[ebp], 64		; 00000040H
	jb	SHORT $LN3@kvz_md5_up

; 98   :     memcpy(ctx->in.b8, buf, 64);

	push	64					; 00000040H
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 99   :     byteReverse(ctx->in.b32, 16);
; 100  :     MD5Transform(ctx->buf, ctx->in.b32);

	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_MD5Transform
	add	esp, 8

; 101  :     buf += 64;

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _buf$[ebp], eax

; 102  :     len -= 64;

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR _len$[ebp], eax

; 103  :   }

	jmp	SHORT $LN2@kvz_md5_up
$LN3@kvz_md5_up:

; 104  : 
; 105  :     /* Handle any remaining bytes of data. */
; 106  : 
; 107  :   memcpy(ctx->in.b8, buf, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@kvz_md5_up:

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_md5_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\libmd5.c
;	COMDAT _kvz_md5_init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_kvz_md5_init PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __BF14AB7E_libmd5@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :   ctx->buf[0] = 0x67452301;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+ecx], 1732584193		; 67452301H

; 54   :   ctx->buf[1] = 0xefcdab89;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+eax], -271733879		; efcdab89H

; 55   :   ctx->buf[2] = 0x98badcfe;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+eax], -1732584194	; 98badcfeH

; 56   :   ctx->buf[3] = 0x10325476;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+ecx], 271733878		; 10325476H

; 57   : 
; 58   :   ctx->bits[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+ecx+16], 0

; 59   :   ctx->bits[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+eax+16], 0

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_md5_init ENDP
_TEXT	ENDS
END
