; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\inter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__5D75C4E2_inter@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
?priorityList0@?6??kvz_inter_get_merge_cand@@9@9 DB 00H	; `kvz_inter_get_merge_cand'::`7'::priorityList0
	DB	01H
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	02H
	DB	03H
?priorityList1@?6??kvz_inter_get_merge_cand@@9@9 DB 01H	; `kvz_inter_get_merge_cand'::`7'::priorityList1
	DB	00H
	DB	02H
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	00H
	DB	03H
	DB	01H
	DB	03H
	DB	02H
CONST	ENDS
PUBLIC	_kvz_inter_recon_cu
PUBLIC	_kvz_inter_pred_pu
PUBLIC	_kvz_inter_recon_bipred
PUBLIC	_kvz_inter_get_mv_cand
PUBLIC	_kvz_inter_get_mv_cand_cua
PUBLIC	_kvz_inter_get_merge_cand
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??add_mvp_candidate@@9@9		; `add_mvp_candidate'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@KJHLBCKB@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1DA@HBALJFNI@?$AAc?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?4?$AAm?$AAv?$AA_@ ; `string'
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	_kvz_cu_array_at_const:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_part_mode_num_parts:BYTE
EXTRN	_kvz_part_mode_offsets:BYTE
EXTRN	_kvz_part_mode_sizes:BYTE
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DA@HBALJFNI@?$AAc?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?4?$AAm?$AAv?$AA_@
CONST	SEGMENT
??_C@_1DA@HBALJFNI@?$AAc?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?4?$AAm?$AAv?$AA_@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, '-', 00H, '>', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'm', 00H, 'v'
	DB	00H, '_', 00H, 'd', 00H, 'i', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@KJHLBCKB@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GI@KJHLBCKB@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??add_mvp_candidate@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??add_mvp_candidate@@9@9 DD 04a8H	; `add_mvp_candidate'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _add_merge_candidate
_TEXT	SEGMENT
_cand$ = 8						; size = 4
_possible_duplicate1$ = 12				; size = 4
_possible_duplicate2$ = 16				; size = 4
_merge_cand_out$ = 20					; size = 4
_candidates$ = 24					; size = 1
_max_num_cands$ = 28					; size = 1
_add_merge_candidate PROC				; COMDAT

; 1409 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1410 :   if (!cand ||
; 1411 :       is_duplicate_candidate(cand, possible_duplicate1) ||
; 1412 :       is_duplicate_candidate(cand, possible_duplicate2) ||

	cmp	DWORD PTR _cand$[ebp], 0
	je	SHORT $LN3@add_merge_
	mov	eax, DWORD PTR _possible_duplicate1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cand$[ebp]
	push	ecx
	call	_is_duplicate_candidate
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@add_merge_
	mov	eax, DWORD PTR _possible_duplicate2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cand$[ebp]
	push	ecx
	call	_is_duplicate_candidate
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@add_merge_
	movzx	eax, BYTE PTR _candidates$[ebp]
	movzx	ecx, BYTE PTR _max_num_cands$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN2@add_merge_
$LN3@add_merge_:

; 1413 :       candidates >= max_num_cands) {
; 1414 :     return false;

	xor	al, al
	jmp	$LN1@add_merge_
$LN2@add_merge_:

; 1415 :   }
; 1416 : 
; 1417 :   merge_cand_out->mv[0][0] = cand->inter.mv[0][0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _merge_cand_out$[ebp]
	lea	ecx, DWORD PTR [esi+ecx+4]
	mov	esi, 2
	imul	esi, esi, 0
	mov	dx, WORD PTR [eax+edx]
	mov	WORD PTR [ecx+esi], dx

; 1418 :   merge_cand_out->mv[0][1] = cand->inter.mv[0][1];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _merge_cand_out$[ebp]
	lea	edx, DWORD PTR [esi+edx+4]
	mov	esi, 2
	shl	esi, 0
	mov	ax, WORD PTR [eax+ecx]
	mov	WORD PTR [edx+esi], ax

; 1419 :   merge_cand_out->mv[1][0] = cand->inter.mv[1][0];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _merge_cand_out$[ebp]
	lea	eax, DWORD PTR [esi+eax+4]
	mov	esi, 2
	imul	esi, esi, 0
	mov	cx, WORD PTR [edx+ecx]
	mov	WORD PTR [eax+esi], cx

; 1420 :   merge_cand_out->mv[1][1] = cand->inter.mv[1][1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _merge_cand_out$[ebp]
	lea	ecx, DWORD PTR [esi+ecx+4]
	mov	esi, 2
	shl	esi, 0
	mov	dx, WORD PTR [edx+eax]
	mov	WORD PTR [ecx+esi], dx

; 1421 :   merge_cand_out->ref[0]   = cand->inter.mv_ref[0]; // L0/L1 references

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _merge_cand_out$[ebp]
	mov	esi, DWORD PTR _cand$[ebp]
	mov	cl, BYTE PTR [esi+ecx+16]
	mov	BYTE PTR [edx+eax+1], cl

; 1422 :   merge_cand_out->ref[1]   = cand->inter.mv_ref[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _merge_cand_out$[ebp]
	mov	esi, DWORD PTR _cand$[ebp]
	mov	al, BYTE PTR [esi+eax+16]
	mov	BYTE PTR [edx+ecx+1], al

; 1423 :   merge_cand_out->dir      = cand->inter.mv_dir;

	mov	eax, DWORD PTR _cand$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	mov	edx, DWORD PTR _merge_cand_out$[ebp]
	mov	BYTE PTR [edx], cl

; 1424 :   return true;

	mov	al, 1
$LN1@add_merge_:

; 1425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_add_merge_candidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _is_duplicate_candidate
_TEXT	SEGMENT
_reflist$1 = -8						; size = 4
_cu1$ = 8						; size = 4
_cu2$ = 12						; size = 4
_is_duplicate_candidate PROC				; COMDAT

; 1386 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1387 :   if (!cu2) return false;

	cmp	DWORD PTR _cu2$[ebp], 0
	jne	SHORT $LN5@is_duplica
	xor	al, al
	jmp	$LN1@is_duplica
$LN5@is_duplica:

; 1388 :   if (cu1->inter.mv_dir != cu2->inter.mv_dir) return false;

	mov	eax, DWORD PTR _cu1$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, DWORD PTR _cu2$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	eax, cl
	cmp	edx, eax
	je	SHORT $LN6@is_duplica
	xor	al, al
	jmp	$LN1@is_duplica
$LN6@is_duplica:

; 1389 : 
; 1390 :   for (int reflist = 0; reflist < 2; reflist++) {

	mov	DWORD PTR _reflist$1[ebp], 0
	jmp	SHORT $LN4@is_duplica
$LN2@is_duplica:
	mov	eax, DWORD PTR _reflist$1[ebp]
	add	eax, 1
	mov	DWORD PTR _reflist$1[ebp], eax
$LN4@is_duplica:
	cmp	DWORD PTR _reflist$1[ebp], 2
	jge	$LN3@is_duplica

; 1391 :     if (cu1->inter.mv_dir & (1 << reflist)) {

	mov	eax, DWORD PTR _cu1$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _reflist$1[ebp]
	shl	eax, cl
	and	edx, eax
	je	SHORT $LN7@is_duplica

; 1392 :       if (cu1->inter.mv[reflist][0]  != cu2->inter.mv[reflist][0]  ||
; 1393 :           cu1->inter.mv[reflist][1]  != cu2->inter.mv[reflist][1]  ||

	mov	eax, DWORD PTR _reflist$1[ebp]
	mov	ecx, DWORD PTR _cu1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	movsx	edx, WORD PTR [edx+ecx]
	mov	eax, DWORD PTR _reflist$1[ebp]
	mov	ecx, DWORD PTR _cu2$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+8]
	mov	ecx, 2
	imul	ecx, ecx, 0
	movsx	eax, WORD PTR [eax+ecx]
	cmp	edx, eax
	jne	SHORT $LN9@is_duplica
	mov	eax, DWORD PTR _reflist$1[ebp]
	mov	ecx, DWORD PTR _cu1$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	movsx	ecx, WORD PTR [edx+eax]
	mov	edx, DWORD PTR _reflist$1[ebp]
	mov	eax, DWORD PTR _cu2$[ebp]
	lea	edx, DWORD PTR [eax+edx*4+8]
	mov	eax, 2
	shl	eax, 0
	movsx	edx, WORD PTR [edx+eax]
	cmp	ecx, edx
	jne	SHORT $LN9@is_duplica
	mov	eax, DWORD PTR _cu1$[ebp]
	add	eax, DWORD PTR _reflist$1[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	mov	edx, DWORD PTR _cu2$[ebp]
	add	edx, DWORD PTR _reflist$1[ebp]
	movzx	eax, BYTE PTR [edx+16]
	cmp	ecx, eax
	je	SHORT $LN7@is_duplica
$LN9@is_duplica:

; 1394 :           cu1->inter.mv_ref[reflist] != cu2->inter.mv_ref[reflist]) {
; 1395 :         return false;

	xor	al, al
	jmp	SHORT $LN1@is_duplica
$LN7@is_duplica:

; 1396 :       }
; 1397 :     }
; 1398 :   }

	jmp	$LN2@is_duplica
$LN3@is_duplica:

; 1399 : 
; 1400 :   return true;

	mov	al, 1
$LN1@is_duplica:

; 1401 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_duplicate_candidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _get_mv_cand_from_candidates
_TEXT	SEGMENT
tv224 = -332						; size = 4
tv236 = -328						; size = 4
tv222 = -328						; size = 4
_can_use_tmvp$ = -125					; size = 1
_i$1 = -116						; size = 4
_i$2 = -104						; size = 4
_i$3 = -92						; size = 4
_i$4 = -80						; size = 4
_b_candidates$ = -65					; size = 1
_candidates$ = -53					; size = 1
_h$ = -44						; size = 4
_c3$ = -32						; size = 4
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_merge_cand$ = 28					; size = 4
_cur_cu$ = 32						; size = 4
_reflist$ = 36						; size = 1
_mv_cand$ = 40						; size = 4
_get_mv_cand_from_candidates PROC			; COMDAT

; 1234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1235 :   const cu_info_t *const *a = merge_cand->a;

	mov	eax, DWORD PTR _merge_cand$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 1236 :   const cu_info_t *const *b = merge_cand->b;

	mov	eax, DWORD PTR _merge_cand$[ebp]
	add	eax, 8
	mov	DWORD PTR _b$[ebp], eax

; 1237 :   const cu_info_t *c3 = merge_cand->c3;

	mov	eax, DWORD PTR _merge_cand$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _c3$[ebp], ecx

; 1238 :   const cu_info_t *h  = merge_cand->h;

	mov	eax, DWORD PTR _merge_cand$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _h$[ebp], ecx

; 1239 : 
; 1240 :   uint8_t candidates = 0;

	mov	BYTE PTR _candidates$[ebp], 0

; 1241 :   uint8_t b_candidates = 0;

	mov	BYTE PTR _b_candidates$[ebp], 0

; 1242 : 
; 1243 :   // Left predictors without scaling
; 1244 :   for (int i = 0; i < 2; i++) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@get_mv_can
$LN2@get_mv_can:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@get_mv_can:
	cmp	DWORD PTR _i$4[ebp], 2
	jge	SHORT $LN3@get_mv_can

; 1245 :     if (add_mvp_candidate(state, cur_cu, a[i], reflist, false, mv_cand[candidates])) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	0
	movzx	eax, BYTE PTR _reflist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_add_mvp_candidate
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@get_mv_can

; 1246 :       candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al

; 1247 :       break;

	jmp	SHORT $LN3@get_mv_can
$LN16@get_mv_can:

; 1248 :     }
; 1249 :   }

	jmp	SHORT $LN2@get_mv_can
$LN3@get_mv_can:

; 1250 : 
; 1251 :   // Left predictors with scaling
; 1252 :   if (candidates == 0) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	test	eax, eax
	jne	SHORT $LN17@get_mv_can

; 1253 :     for (int i = 0; i < 2; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@get_mv_can
$LN5@get_mv_can:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@get_mv_can:
	cmp	DWORD PTR _i$3[ebp], 2
	jge	SHORT $LN17@get_mv_can

; 1254 :       if (add_mvp_candidate(state, cur_cu, a[i], reflist, true, mv_cand[candidates])) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	1
	movzx	eax, BYTE PTR _reflist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_add_mvp_candidate
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@get_mv_can

; 1255 :         candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al

; 1256 :         break;

	jmp	SHORT $LN17@get_mv_can
$LN18@get_mv_can:

; 1257 :       }
; 1258 :     }

	jmp	SHORT $LN5@get_mv_can
$LN17@get_mv_can:

; 1259 :   }
; 1260 : 
; 1261 :   // Top predictors without scaling
; 1262 :   for (int i = 0; i < 3; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@get_mv_can
$LN8@get_mv_can:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@get_mv_can:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	SHORT $LN9@get_mv_can

; 1263 :     if (add_mvp_candidate(state, cur_cu, b[i], reflist, false, mv_cand[candidates])) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	0
	movzx	eax, BYTE PTR _reflist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_add_mvp_candidate
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@get_mv_can

; 1264 :       b_candidates++;

	mov	al, BYTE PTR _b_candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _b_candidates$[ebp], al

; 1265 :       break;

	jmp	SHORT $LN9@get_mv_can
$LN19@get_mv_can:

; 1266 :     }
; 1267 :   }

	jmp	SHORT $LN8@get_mv_can
$LN9@get_mv_can:

; 1268 : 
; 1269 :   candidates += b_candidates;

	movzx	eax, BYTE PTR _b_candidates$[ebp]
	movzx	ecx, BYTE PTR _candidates$[ebp]
	add	ecx, eax
	mov	BYTE PTR _candidates$[ebp], cl

; 1270 : 
; 1271 :   // When a1 or a0 is available, we dont check for secondary B candidates.
; 1272 :   if (a[0] || a[1]) {

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN22@get_mv_can
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [ecx+eax], 0
	je	SHORT $LN20@get_mv_can
$LN22@get_mv_can:

; 1273 :     b_candidates = 1;

	mov	BYTE PTR _b_candidates$[ebp], 1
	jmp	SHORT $LN21@get_mv_can
$LN20@get_mv_can:

; 1274 :   } else if (candidates != 2) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	cmp	eax, 2
	je	SHORT $LN21@get_mv_can

; 1275 :     b_candidates = 0;

	mov	BYTE PTR _b_candidates$[ebp], 0
$LN21@get_mv_can:

; 1276 :   }
; 1277 : 
; 1278 :   if (!b_candidates) {

	movzx	eax, BYTE PTR _b_candidates$[ebp]
	test	eax, eax
	jne	SHORT $LN24@get_mv_can

; 1279 :     // Top predictors with scaling
; 1280 :     for (int i = 0; i < 3; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN13@get_mv_can
$LN11@get_mv_can:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@get_mv_can:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN24@get_mv_can

; 1281 :       if (add_mvp_candidate(state, cur_cu, b[i], reflist, true, mv_cand[candidates])) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	1
	movzx	eax, BYTE PTR _reflist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_add_mvp_candidate
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@get_mv_can

; 1282 :         candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al

; 1283 :         break;

	jmp	SHORT $LN24@get_mv_can
$LN25@get_mv_can:

; 1284 :       }
; 1285 :     }

	jmp	SHORT $LN11@get_mv_can
$LN24@get_mv_can:

; 1286 :   }
; 1287 : 
; 1288 :   // Remove identical candidate
; 1289 :   if (candidates == 2 && mv_cand[0][0] == mv_cand[1][0] && mv_cand[0][1] == mv_cand[1][1]) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	cmp	eax, 2
	jne	SHORT $LN26@get_mv_can
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	eax, 2
	imul	eax, eax, 0
	movsx	edx, WORD PTR [edx+eax]
	cmp	ecx, edx
	jne	SHORT $LN26@get_mv_can
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 2
	shl	edx, 0
	movsx	ecx, WORD PTR [ecx+edx]
	cmp	eax, ecx
	jne	SHORT $LN26@get_mv_can

; 1290 :     candidates = 1;

	mov	BYTE PTR _candidates$[ebp], 1
$LN26@get_mv_can:

; 1291 :   }
; 1292 : 
; 1293 :   // Use Temporal Motion Vector Prediction when enabled.
; 1294 :   // TMVP required at least two sequential P/B-frames.
; 1295 :   bool can_use_tmvp =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2368], 0
	je	SHORT $LN29@get_mv_can
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+12], 1
	jle	SHORT $LN29@get_mv_can
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN29@get_mv_can
	movzx	ecx, BYTE PTR _candidates$[ebp]
	cmp	ecx, 2
	jge	SHORT $LN29@get_mv_can
	cmp	DWORD PTR _h$[ebp], 0
	jne	SHORT $LN30@get_mv_can
	cmp	DWORD PTR _c3$[ebp], 0
	je	SHORT $LN29@get_mv_can
$LN30@get_mv_can:
	mov	DWORD PTR tv222[ebp], 1
	jmp	SHORT $LN31@get_mv_can
$LN29@get_mv_can:
	mov	DWORD PTR tv222[ebp], 0
$LN31@get_mv_can:
	cmp	DWORD PTR tv222[ebp], 0
	jne	SHORT $LN32@get_mv_can
	mov	DWORD PTR tv224[ebp], 0
	jmp	SHORT $LN33@get_mv_can
$LN32@get_mv_can:
	mov	DWORD PTR tv224[ebp], 1
$LN33@get_mv_can:
	mov	dl, BYTE PTR tv224[ebp]
	mov	BYTE PTR _can_use_tmvp$[ebp], dl

; 1296 :     state->encoder_control->cfg.tmvp_enable &&
; 1297 :     state->frame->poc > 1 &&
; 1298 :     state->frame->ref->used_size &&
; 1299 :     candidates < AMVP_MAX_NUM_CANDS &&
; 1300 :     (h != NULL || c3 != NULL);
; 1301 : 
; 1302 :   if (can_use_tmvp && add_temporal_candidate(state,

	movzx	eax, BYTE PTR _can_use_tmvp$[ebp]
	test	eax, eax
	je	SHORT $LN14@get_mv_can
	cmp	DWORD PTR _h$[ebp], 0
	je	SHORT $LN34@get_mv_can
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR tv236[ebp], eax
	jmp	SHORT $LN35@get_mv_can
$LN34@get_mv_can:
	mov	ecx, DWORD PTR _c3$[ebp]
	mov	DWORD PTR tv236[ebp], ecx
$LN35@get_mv_can:
	movzx	edx, BYTE PTR _candidates$[ebp]
	mov	eax, DWORD PTR _mv_cand$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	movsx	edx, BYTE PTR _reflist$[ebp]
	push	edx
	mov	eax, DWORD PTR tv236[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR _reflist$[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR [edx+eax+45]
	movsx	edx, BYTE PTR _reflist$[ebp]
	mov	eax, DWORD PTR _cur_cu$[ebp]
	movzx	edx, BYTE PTR [eax+edx+16]
	movzx	eax, BYTE PTR [ecx+edx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_add_temporal_candidate
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@get_mv_can

; 1303 :                                              state->frame->ref_LX[reflist][cur_cu->inter.mv_ref[reflist]],
; 1304 :                                              (h != NULL) ? h : c3,
; 1305 :                                              reflist,
; 1306 :                                              mv_cand[candidates]))
; 1307 :   {
; 1308 :     candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN14@get_mv_can:

; 1309 :   }
; 1310 : 
; 1311 :   // Fill with (0,0)
; 1312 :   while (candidates < AMVP_MAX_NUM_CANDS) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	cmp	eax, 2
	jge	SHORT $LN1@get_mv_can

; 1313 :     mv_cand[candidates][0] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR [edx+ecx], ax

; 1314 :     mv_cand[candidates][1] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR [edx+eax], cx

; 1315 :     candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al

; 1316 :   }

	jmp	SHORT $LN14@get_mv_can
$LN1@get_mv_can:

; 1317 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_mv_cand_from_candidates ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _add_mvp_candidate
_TEXT	SEGMENT
tv81 = -224						; size = 4
tv82 = -220						; size = 4
_cand_list$1 = -20					; size = 4
_i$2 = -8						; size = 4
_state$ = 8						; size = 4
_cur_cu$ = 12						; size = 4
_cand$ = 16						; size = 4
_reflist$ = 20						; size = 1
_scaling$ = 24						; size = 1
_mv_cand_out$ = 28					; size = 4
_add_mvp_candidate PROC					; COMDAT

; 1192 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1193 :   if (!cand) return false;

	cmp	DWORD PTR _cand$[ebp], 0
	jne	SHORT $LN5@add_mvp_ca
	xor	al, al
	jmp	$LN1@add_mvp_ca
$LN5@add_mvp_ca:

; 1194 : 
; 1195 :   assert(cand->inter.mv_dir != 0);

	mov	eax, DWORD PTR _cand$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN10@add_mvp_ca
	mov	eax, DWORD PTR ?__LINE__Var@?0??add_mvp_candidate@@9@9
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GI@KJHLBCKB@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@HBALJFNI@?$AAc?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?4?$AAm?$AAv?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@add_mvp_ca:

; 1196 : 
; 1197 :   for (int i = 0; i < 2; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@add_mvp_ca
$LN2@add_mvp_ca:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@add_mvp_ca:
	cmp	DWORD PTR _i$2[ebp], 2
	jge	$LN3@add_mvp_ca

; 1198 :     const int cand_list = i == 0 ? reflist : !reflist;

	cmp	DWORD PTR _i$2[ebp], 0
	jne	SHORT $LN13@add_mvp_ca
	movsx	eax, BYTE PTR _reflist$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN14@add_mvp_ca
$LN13@add_mvp_ca:
	movsx	ecx, BYTE PTR _reflist$[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@add_mvp_ca
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN12@add_mvp_ca
$LN11@add_mvp_ca:
	mov	DWORD PTR tv81[ebp], 0
$LN12@add_mvp_ca:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv82[ebp], edx
$LN14@add_mvp_ca:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR _cand_list$1[ebp], eax

; 1199 : 
; 1200 :     if ((cand->inter.mv_dir & (1 << cand_list)) == 0) continue;

	mov	eax, DWORD PTR _cand$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _cand_list$1[ebp]
	shl	eax, cl
	and	edx, eax
	jne	SHORT $LN6@add_mvp_ca
	jmp	SHORT $LN2@add_mvp_ca
$LN6@add_mvp_ca:

; 1201 : 
; 1202 :     if (scaling) {

	movzx	eax, BYTE PTR _scaling$[ebp]
	test	eax, eax
	je	SHORT $LN7@add_mvp_ca

; 1203 :       mv_cand_out[0] = cand->inter.mv[cand_list][0];

	mov	eax, DWORD PTR _cand_list$1[ebp]
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, 2
	imul	eax, eax, 0
	mov	esi, DWORD PTR _mv_cand_out$[ebp]
	mov	cx, WORD PTR [edx+ecx]
	mov	WORD PTR [esi+eax], cx

; 1204 :       mv_cand_out[1] = cand->inter.mv[cand_list][1];

	mov	eax, DWORD PTR _cand_list$1[ebp]
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 2
	shl	ecx, 0
	mov	esi, DWORD PTR _mv_cand_out$[ebp]
	mov	dx, WORD PTR [edx+eax]
	mov	WORD PTR [esi+ecx], dx

; 1205 :       apply_mv_scaling(state, cur_cu, cand, reflist, cand_list, mv_cand_out);

	mov	eax, DWORD PTR _mv_cand_out$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cand_list$1[ebp]
	push	ecx
	movzx	edx, BYTE PTR _reflist$[ebp]
	push	edx
	mov	eax, DWORD PTR _cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_apply_mv_scaling
	add	esp, 24					; 00000018H

; 1206 :       return true;

	mov	al, 1
	jmp	$LN1@add_mvp_ca
$LN7@add_mvp_ca:

; 1207 :     }
; 1208 : 
; 1209 :     if (cand->inter.mv_dir & (1 << cand_list) &&

	mov	eax, DWORD PTR _cand$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _cand_list$1[ebp]
	shl	eax, cl
	and	edx, eax
	je	$LN8@add_mvp_ca
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _cand_list$1[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, DWORD PTR _cand$[ebp]
	add	ecx, DWORD PTR _cand_list$1[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	ecx, BYTE PTR _reflist$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [edx+ecx+45]
	movsx	ecx, BYTE PTR _reflist$[ebp]
	mov	esi, DWORD PTR _cur_cu$[ebp]
	movzx	ecx, BYTE PTR [esi+ecx+16]
	movzx	edx, BYTE PTR [edx+ecx]
	cmp	eax, edx
	jne	SHORT $LN8@add_mvp_ca

; 1210 :         state->frame->ref_LX[cand_list][cand->inter.mv_ref[cand_list]] ==
; 1211 :         state->frame->ref_LX[reflist][cur_cu->inter.mv_ref[reflist]])
; 1212 :     {
; 1213 :       mv_cand_out[0] = cand->inter.mv[cand_list][0];

	mov	eax, DWORD PTR _cand_list$1[ebp]
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, 2
	imul	eax, eax, 0
	mov	esi, DWORD PTR _mv_cand_out$[ebp]
	mov	cx, WORD PTR [edx+ecx]
	mov	WORD PTR [esi+eax], cx

; 1214 :       mv_cand_out[1] = cand->inter.mv[cand_list][1];

	mov	eax, DWORD PTR _cand_list$1[ebp]
	mov	ecx, DWORD PTR _cand$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 2
	shl	ecx, 0
	mov	esi, DWORD PTR _mv_cand_out$[ebp]
	mov	dx, WORD PTR [edx+eax]
	mov	WORD PTR [esi+ecx], dx

; 1215 :       return true;

	mov	al, 1
	jmp	SHORT $LN1@add_mvp_ca
$LN8@add_mvp_ca:

; 1216 :     }
; 1217 :   }

	jmp	$LN2@add_mvp_ca
$LN3@add_mvp_ca:

; 1218 : 
; 1219 :   return false;

	xor	al, al
$LN1@add_mvp_ca:

; 1220 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_add_mvp_candidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _add_temporal_candidate
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_col_list$ = -20					; size = 4
_colocated_ref$ = -8					; size = 4
_state$ = 8						; size = 4
_current_ref$ = 12					; size = 1
_colocated$ = 16					; size = 4
_reflist$ = 20						; size = 4
_mv_out$ = 24						; size = 4
_add_temporal_candidate PROC				; COMDAT

; 1139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1140 :   if (!colocated) return false;

	cmp	DWORD PTR _colocated$[ebp], 0
	jne	SHORT $LN5@add_tempor
	xor	al, al
	jmp	$LN1@add_tempor
$LN5@add_tempor:

; 1141 : 
; 1142 :   int colocated_ref;
; 1143 :   if (state->frame->ref_LX_size[0] > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax+77]
	test	ecx, ecx
	jle	SHORT $LN6@add_tempor

; 1144 :     // get the first reference from L0 if it exists
; 1145 :     colocated_ref = state->frame->ref_LX[0][0];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _colocated_ref$[ebp], ecx

; 1146 :   } else {

	jmp	SHORT $LN7@add_tempor
$LN6@add_tempor:

; 1147 :     // otherwise no candidate added
; 1148 :     return false;

	xor	al, al
	jmp	$LN1@add_tempor
$LN7@add_tempor:

; 1149 :   }
; 1150 : 
; 1151 :   // When there are reference pictures from the future (POC > current POC)
; 1152 :   // in L0 or L1, the primary list for the colocated PU is the inverse of
; 1153 :   // collocated_from_l0_flag. Otherwise it is equal to reflist.
; 1154 :   //
; 1155 :   // Kvazaar always sets collocated_from_l0_flag so the list is L1 when
; 1156 :   // there are future references.
; 1157 :   int col_list = reflist;

	mov	eax, DWORD PTR _reflist$[ebp]
	mov	DWORD PTR _col_list$[ebp], eax

; 1158 :   for (int i = 0; i < state->frame->ref->used_size; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@add_tempor
$LN2@add_tempor:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@add_tempor:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN3@add_tempor

; 1159 :     if (state->frame->ref->pocs[i] > state->frame->poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [edx+12]
	jle	SHORT $LN8@add_tempor

; 1160 :       col_list = 1;

	mov	DWORD PTR _col_list$[ebp], 1

; 1161 :       break;

	jmp	SHORT $LN3@add_tempor
$LN8@add_tempor:

; 1162 :     }
; 1163 :   }

	jmp	SHORT $LN2@add_tempor
$LN3@add_tempor:

; 1164 : 
; 1165 :   if ((colocated->inter.mv_dir & (col_list + 1)) == 0) {

	mov	eax, DWORD PTR _colocated$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, DWORD PTR _col_list$[ebp]
	add	eax, 1
	and	edx, eax
	jne	SHORT $LN9@add_tempor

; 1166 :     // Use the other list if the colocated PU does not have a MV for the
; 1167 :     // primary list.
; 1168 :     col_list = 1 - col_list;

	mov	eax, 1
	sub	eax, DWORD PTR _col_list$[ebp]
	mov	DWORD PTR _col_list$[ebp], eax
$LN9@add_tempor:

; 1169 :   }
; 1170 : 
; 1171 :   mv_out[0] = colocated->inter.mv[col_list][0];

	mov	eax, DWORD PTR _col_list$[ebp]
	mov	ecx, DWORD PTR _colocated$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, 2
	imul	eax, eax, 0
	mov	esi, DWORD PTR _mv_out$[ebp]
	mov	cx, WORD PTR [edx+ecx]
	mov	WORD PTR [esi+eax], cx

; 1172 :   mv_out[1] = colocated->inter.mv[col_list][1];

	mov	eax, DWORD PTR _col_list$[ebp]
	mov	ecx, DWORD PTR _colocated$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 2
	shl	ecx, 0
	mov	esi, DWORD PTR _mv_out$[ebp]
	mov	dx, WORD PTR [edx+eax]
	mov	WORD PTR [esi+ecx], dx

; 1173 :   apply_mv_scaling_pocs(

	mov	eax, DWORD PTR _mv_out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _colocated_ref$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _colocated_ref$[ebp]
	shl	edx, 5
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, edx
	mov	edx, DWORD PTR _col_list$[ebp]
	shl	edx, 4
	add	ecx, edx
	mov	edx, DWORD PTR _colocated$[ebp]
	add	edx, DWORD PTR _col_list$[ebp]
	movzx	edx, BYTE PTR [edx+16]
	movzx	ecx, BYTE PTR [ecx+edx]
	mov	edx, DWORD PTR [eax+ecx*4+80]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _colocated_ref$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR _current_ref$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_apply_mv_scaling_pocs
	add	esp, 20					; 00000014H

; 1174 :     state->frame->poc,
; 1175 :     state->frame->ref->pocs[current_ref],
; 1176 :     state->frame->ref->pocs[colocated_ref],
; 1177 :     state->frame->ref->images[colocated_ref]->ref_pocs[
; 1178 :       state->frame->ref->ref_LXs[colocated_ref]
; 1179 :         [col_list][colocated->inter.mv_ref[col_list]]],
; 1180 :     mv_out
; 1181 :   );
; 1182 : 
; 1183 :   return true;

	mov	al, 1
$LN1@add_tempor:

; 1184 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_add_temporal_candidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _apply_mv_scaling
_TEXT	SEGMENT
_state$ = 8						; size = 4
_current_cu$ = 12					; size = 4
_neighbor_cu$ = 16					; size = 4
_current_reflist$ = 20					; size = 1
_neighbor_reflist$ = 24					; size = 1
_mv_cand$ = 28						; size = 4
_apply_mv_scaling PROC					; COMDAT

; 1111 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1112 :   apply_mv_scaling_pocs(state->frame->poc,

	mov	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	ecx, BYTE PTR _neighbor_reflist$[ebp]
	shl	ecx, 4
	lea	edx, DWORD PTR [edx+ecx+45]
	movsx	ecx, BYTE PTR _neighbor_reflist$[ebp]
	mov	esi, DWORD PTR _neighbor_cu$[ebp]
	movzx	ecx, BYTE PTR [esi+ecx+16]
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	edx, BYTE PTR _current_reflist$[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR [eax+edx+45]
	movsx	edx, BYTE PTR _current_reflist$[ebp]
	mov	esi, DWORD PTR _current_cu$[ebp]
	movzx	edx, BYTE PTR [esi+edx+16]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_apply_mv_scaling_pocs
	add	esp, 20					; 00000014H

; 1113 :                         state->frame->ref->pocs[
; 1114 :                           state->frame->ref_LX[current_reflist][
; 1115 :                             current_cu->inter.mv_ref[current_reflist]]],
; 1116 :                         state->frame->poc,
; 1117 :                         state->frame->ref->pocs[
; 1118 :                           state->frame->ref_LX[neighbor_reflist][
; 1119 :                             neighbor_cu->inter.mv_ref[neighbor_reflist]]],
; 1120 :                         mv_cand);
; 1121 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_apply_mv_scaling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _apply_mv_scaling_pocs
_TEXT	SEGMENT
tv147 = -240						; size = 4
tv77 = -240						; size = 4
tv71 = -240						; size = 4
tv148 = -236						; size = 4
tv78 = -236						; size = 4
tv72 = -236						; size = 4
tv128 = -232						; size = 4
tv74 = -232						; size = 4
tv68 = -232						; size = 4
_scale$ = -32						; size = 4
_diff_neighbor$ = -20					; size = 4
_diff_current$ = -8					; size = 4
_current_poc$ = 8					; size = 4
_current_ref_poc$ = 12					; size = 4
_neighbor_poc$ = 16					; size = 4
_neighbor_ref_poc$ = 20					; size = 4
_mv_cand$ = 24						; size = 4
_apply_mv_scaling_pocs PROC				; COMDAT

; 1089 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1090 :   int32_t diff_current  = current_poc  - current_ref_poc;

	mov	eax, DWORD PTR _current_poc$[ebp]
	sub	eax, DWORD PTR _current_ref_poc$[ebp]
	mov	DWORD PTR _diff_current$[ebp], eax

; 1091 :   int32_t diff_neighbor = neighbor_poc - neighbor_ref_poc;

	mov	eax, DWORD PTR _neighbor_poc$[ebp]
	sub	eax, DWORD PTR _neighbor_ref_poc$[ebp]
	mov	DWORD PTR _diff_neighbor$[ebp], eax

; 1092 : 
; 1093 :   if (diff_current == diff_neighbor) return;

	mov	eax, DWORD PTR _diff_current$[ebp]
	cmp	eax, DWORD PTR _diff_neighbor$[ebp]
	jne	SHORT $LN2@apply_mv_s
	jmp	$LN1@apply_mv_s
$LN2@apply_mv_s:

; 1094 : 
; 1095 :   diff_current  = CLIP(-128, 127, diff_current);

	cmp	DWORD PTR _diff_current$[ebp], 127	; 0000007fH
	jle	SHORT $LN4@apply_mv_s
	mov	DWORD PTR tv68[ebp], 127		; 0000007fH
	jmp	SHORT $LN5@apply_mv_s
$LN4@apply_mv_s:
	mov	eax, DWORD PTR _diff_current$[ebp]
	mov	DWORD PTR tv68[ebp], eax
$LN5@apply_mv_s:
	cmp	DWORD PTR tv68[ebp], -128		; ffffff80H
	jge	SHORT $LN8@apply_mv_s
	mov	DWORD PTR tv72[ebp], -128		; ffffff80H
	jmp	SHORT $LN9@apply_mv_s
$LN8@apply_mv_s:
	cmp	DWORD PTR _diff_current$[ebp], 127	; 0000007fH
	jle	SHORT $LN6@apply_mv_s
	mov	DWORD PTR tv71[ebp], 127		; 0000007fH
	jmp	SHORT $LN7@apply_mv_s
$LN6@apply_mv_s:
	mov	ecx, DWORD PTR _diff_current$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN7@apply_mv_s:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv72[ebp], edx
$LN9@apply_mv_s:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _diff_current$[ebp], eax

; 1096 :   diff_neighbor = CLIP(-128, 127, diff_neighbor);

	cmp	DWORD PTR _diff_neighbor$[ebp], 127	; 0000007fH
	jle	SHORT $LN10@apply_mv_s
	mov	DWORD PTR tv74[ebp], 127		; 0000007fH
	jmp	SHORT $LN11@apply_mv_s
$LN10@apply_mv_s:
	mov	eax, DWORD PTR _diff_neighbor$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN11@apply_mv_s:
	cmp	DWORD PTR tv74[ebp], -128		; ffffff80H
	jge	SHORT $LN14@apply_mv_s
	mov	DWORD PTR tv78[ebp], -128		; ffffff80H
	jmp	SHORT $LN15@apply_mv_s
$LN14@apply_mv_s:
	cmp	DWORD PTR _diff_neighbor$[ebp], 127	; 0000007fH
	jle	SHORT $LN12@apply_mv_s
	mov	DWORD PTR tv77[ebp], 127		; 0000007fH
	jmp	SHORT $LN13@apply_mv_s
$LN12@apply_mv_s:
	mov	ecx, DWORD PTR _diff_neighbor$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN13@apply_mv_s:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN15@apply_mv_s:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _diff_neighbor$[ebp], eax

; 1097 : 
; 1098 :   int scale = CLIP(-4096, 4095,

	mov	eax, DWORD PTR _diff_neighbor$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	sar	eax, 1
	add	eax, 16384				; 00004000H
	cdq
	idiv	DWORD PTR _diff_neighbor$[ebp]
	imul	eax, DWORD PTR _diff_current$[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN16@apply_mv_s
	mov	DWORD PTR tv128[ebp], 4095		; 00000fffH
	jmp	SHORT $LN17@apply_mv_s
$LN16@apply_mv_s:
	mov	ecx, DWORD PTR _diff_neighbor$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	sar	eax, 1
	add	eax, 16384				; 00004000H
	cdq
	idiv	DWORD PTR _diff_neighbor$[ebp]
	imul	eax, DWORD PTR _diff_current$[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	mov	DWORD PTR tv128[ebp], eax
$LN17@apply_mv_s:
	cmp	DWORD PTR tv128[ebp], -4096		; fffff000H
	jge	SHORT $LN20@apply_mv_s
	mov	DWORD PTR tv148[ebp], -4096		; fffff000H
	jmp	SHORT $LN21@apply_mv_s
$LN20@apply_mv_s:
	mov	edx, DWORD PTR _diff_neighbor$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	sar	eax, 1
	add	eax, 16384				; 00004000H
	cdq
	idiv	DWORD PTR _diff_neighbor$[ebp]
	imul	eax, DWORD PTR _diff_current$[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN18@apply_mv_s
	mov	DWORD PTR tv147[ebp], 4095		; 00000fffH
	jmp	SHORT $LN19@apply_mv_s
$LN18@apply_mv_s:
	mov	eax, DWORD PTR _diff_neighbor$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	sar	eax, 1
	add	eax, 16384				; 00004000H
	cdq
	idiv	DWORD PTR _diff_neighbor$[ebp]
	imul	eax, DWORD PTR _diff_current$[ebp]
	add	eax, 32					; 00000020H
	sar	eax, 6
	mov	DWORD PTR tv147[ebp], eax
$LN19@apply_mv_s:
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv148[ebp], ecx
$LN21@apply_mv_s:
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _scale$[ebp], edx

; 1099 :     (diff_current * ((0x4000 + (abs(diff_neighbor) >> 1)) / diff_neighbor) + 32) >> 6);
; 1100 : 
; 1101 :   mv_cand[0] = get_scaled_mv(mv_cand[0], scale);

	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _mv_cand$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	push	ecx
	call	_get_scaled_mv
	add	esp, 8
	mov	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 1102 :   mv_cand[1] = get_scaled_mv(mv_cand[1], scale);

	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mv_cand$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	push	eax
	call	_get_scaled_mv
	add	esp, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	WORD PTR [edx+ecx], ax
$LN1@apply_mv_s:

; 1103 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_apply_mv_scaling_pocs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _get_scaled_mv
_TEXT	SEGMENT
tv87 = -232						; size = 4
tv90 = -228						; size = 4
tv81 = -224						; size = 4
tv91 = -220						; size = 4
tv74 = -216						; size = 4
tv77 = -212						; size = 4
tv68 = -208						; size = 4
_scaled$ = -8						; size = 4
_mv$ = 8						; size = 2
_scale$ = 12						; size = 4
_get_scaled_mv PROC					; COMDAT

; 1079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1080 :   int32_t scaled = scale * mv;

	movsx	eax, WORD PTR _mv$[ebp]
	imul	eax, DWORD PTR _scale$[ebp]
	mov	DWORD PTR _scaled$[ebp], eax

; 1081 :   return CLIP(-32768, 32767, (scaled + 127 + (scaled < 0)) >> 8);

	cmp	DWORD PTR _scaled$[ebp], 0
	jge	SHORT $LN3@get_scaled
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@get_scaled
$LN3@get_scaled:
	mov	DWORD PTR tv68[ebp], 0
$LN4@get_scaled:
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR _scaled$[ebp]
	lea	edx, DWORD PTR [ecx+eax+127]
	sar	edx, 8
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN7@get_scaled
	mov	DWORD PTR tv77[ebp], 32767		; 00007fffH
	jmp	SHORT $LN8@get_scaled
$LN7@get_scaled:
	cmp	DWORD PTR _scaled$[ebp], 0
	jge	SHORT $LN5@get_scaled
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@get_scaled
$LN5@get_scaled:
	mov	DWORD PTR tv74[ebp], 0
$LN6@get_scaled:
	mov	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR _scaled$[ebp]
	lea	edx, DWORD PTR [ecx+eax+127]
	sar	edx, 8
	mov	DWORD PTR tv77[ebp], edx
$LN8@get_scaled:
	cmp	DWORD PTR tv77[ebp], -32768		; ffff8000H
	jge	SHORT $LN15@get_scaled
	mov	DWORD PTR tv91[ebp], -32768		; ffff8000H
	jmp	SHORT $LN16@get_scaled
$LN15@get_scaled:
	cmp	DWORD PTR _scaled$[ebp], 0
	jge	SHORT $LN9@get_scaled
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN10@get_scaled
$LN9@get_scaled:
	mov	DWORD PTR tv81[ebp], 0
$LN10@get_scaled:
	mov	eax, DWORD PTR tv81[ebp]
	mov	ecx, DWORD PTR _scaled$[ebp]
	lea	edx, DWORD PTR [ecx+eax+127]
	sar	edx, 8
	cmp	edx, 32767				; 00007fffH
	jle	SHORT $LN13@get_scaled
	mov	DWORD PTR tv90[ebp], 32767		; 00007fffH
	jmp	SHORT $LN14@get_scaled
$LN13@get_scaled:
	cmp	DWORD PTR _scaled$[ebp], 0
	jge	SHORT $LN11@get_scaled
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN12@get_scaled
$LN11@get_scaled:
	mov	DWORD PTR tv87[ebp], 0
$LN12@get_scaled:
	mov	eax, DWORD PTR tv87[ebp]
	mov	ecx, DWORD PTR _scaled$[ebp]
	lea	edx, DWORD PTR [ecx+eax+127]
	sar	edx, 8
	mov	DWORD PTR tv90[ebp], edx
$LN14@get_scaled:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv91[ebp], eax
$LN16@get_scaled:
	mov	ax, WORD PTR tv91[ebp]

; 1082 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_scaled_mv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _get_spatial_merge_candidates_cua
_TEXT	SEGMENT
_b2$1 = -80						; size = 4
_b1$2 = -68						; size = 4
_b0$3 = -56						; size = 4
_a0$4 = -44						; size = 4
_a1$5 = -32						; size = 4
_y_local$ = -20						; size = 4
_x_local$ = -8						; size = 4
_cua$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_picture_width$ = 28					; size = 4
_picture_height$ = 32					; size = 4
_cand_out$ = 36						; size = 4
_get_spatial_merge_candidates_cua PROC			; COMDAT

; 1023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1024 :   /*
; 1025 :   Predictor block locations
; 1026 :   ____      _______
; 1027 :   |B2|______|B1|B0|
; 1028 :      |         |
; 1029 :      |  Cur CU |
; 1030 :    __|         |
; 1031 :   |A1|_________|
; 1032 :   |A0|
; 1033 :   */
; 1034 :   int32_t x_local = SUB_SCU(x); //!< coordinates from top-left of this LCU

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 1035 :   int32_t y_local = SUB_SCU(y);

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 1036 :   // A0 and A1 availability testing
; 1037 :   if (x != 0) {

	cmp	DWORD PTR _x$[ebp], 0
	je	$LN2@get_spatia

; 1038 :     const cu_info_t *a1 = kvz_cu_array_at_const(cua, x - 1, y + height - 1);

	mov	eax, DWORD PTR _height$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cua$[ebp]
	push	ecx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a1$5[ebp], eax

; 1039 :     // The block above is always coded before the current one.
; 1040 :     if (a1->type == CU_INTER) {

	mov	eax, DWORD PTR _a1$5[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN3@get_spatia

; 1041 :       cand_out->a[1] = a1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _a1$5[ebp]
	mov	DWORD PTR [ecx+eax], edx
$LN3@get_spatia:

; 1042 :     }
; 1043 : 
; 1044 :     if (y_local + height < LCU_WIDTH && y + height < picture_height) {

	mov	eax, DWORD PTR _y_local$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN2@get_spatia
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	cmp	eax, DWORD PTR _picture_height$[ebp]
	jge	SHORT $LN2@get_spatia

; 1045 :       const cu_info_t *a0 = kvz_cu_array_at_const(cua, x - 1, y + height);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _a0$4[ebp], eax

; 1046 :       if (a0->type == CU_INTER && is_a0_cand_coded(x, y, width, height)) {

	mov	eax, DWORD PTR _a0$4[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN2@get_spatia
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_is_a0_cand_coded
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@get_spatia

; 1047 :         cand_out->a[0] = a0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	eax, DWORD PTR _a0$4[ebp]
	mov	DWORD PTR [edx+ecx], eax
$LN2@get_spatia:

; 1048 :       }
; 1049 :     }
; 1050 :   }
; 1051 : 
; 1052 :   // B0, B1 and B2 availability testing
; 1053 :   if (y != 0) {

	cmp	DWORD PTR _y$[ebp], 0
	je	$LN1@get_spatia

; 1054 :     if (x + width < picture_width && (x_local + width < LCU_WIDTH || y_local == 0)) {

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _picture_width$[ebp]
	jge	SHORT $LN7@get_spatia
	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, 64					; 00000040H
	jl	SHORT $LN8@get_spatia
	cmp	DWORD PTR _y_local$[ebp], 0
	jne	SHORT $LN7@get_spatia
$LN8@get_spatia:

; 1055 :       const cu_info_t *b0 = kvz_cu_array_at_const(cua, x + width, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b0$3[ebp], eax

; 1056 :       if (b0->type == CU_INTER && is_b0_cand_coded(x, y, width, height)) {

	mov	eax, DWORD PTR _b0$3[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN7@get_spatia
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_is_b0_cand_coded
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@get_spatia

; 1057 :         cand_out->b[0] = b0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	eax, DWORD PTR _b0$3[ebp]
	mov	DWORD PTR [edx+ecx+8], eax
$LN7@get_spatia:

; 1058 :       }
; 1059 :     }
; 1060 : 
; 1061 :     const cu_info_t *b1 = kvz_cu_array_at_const(cua, x + width - 1, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _cua$[ebp]
	push	ecx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b1$2[ebp], eax

; 1062 :     // The block to the left is always coded before the current one.
; 1063 :     if (b1->type == CU_INTER) {

	mov	eax, DWORD PTR _b1$2[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN10@get_spatia

; 1064 :       cand_out->b[1] = b1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _b1$2[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
$LN10@get_spatia:

; 1065 :     }
; 1066 : 
; 1067 :     if (x != 0) {

	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN1@get_spatia

; 1068 :       const cu_info_t *b2 = kvz_cu_array_at_const(cua, x - 1, y - 1);

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cua$[ebp]
	push	edx
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _b2$1[ebp], eax

; 1069 :       // The block above and to the left is always coded before the current
; 1070 :       // one.
; 1071 :       if (b2->type == CU_INTER) {

	mov	eax, DWORD PTR _b2$1[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN1@get_spatia

; 1072 :         cand_out->b[2] = b2;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _b2$1[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
$LN1@get_spatia:

; 1073 :       }
; 1074 :     }
; 1075 :   }
; 1076 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_spatial_merge_candidates_cua ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _get_spatial_merge_candidates
_TEXT	SEGMENT
_b2$1 = -80						; size = 4
_b1$2 = -68						; size = 4
_b0$3 = -56						; size = 4
_a0$4 = -44						; size = 4
_a1$5 = -32						; size = 4
_y_local$ = -20						; size = 4
_x_local$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_picture_width$ = 24					; size = 4
_picture_height$ = 28					; size = 4
_lcu$ = 32						; size = 4
_cand_out$ = 36						; size = 4
_get_spatial_merge_candidates PROC			; COMDAT

; 930  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 931  :   /*
; 932  :   Predictor block locations
; 933  :   ____      _______
; 934  :   |B2|______|B1|B0|
; 935  :      |         |
; 936  :      |  Cur CU |
; 937  :    __|         |
; 938  :   |A1|_________|
; 939  :   |A0|
; 940  :   */
; 941  :   int32_t x_local = SUB_SCU(x); //!< coordinates from top-left of this LCU

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _x_local$[ebp], eax

; 942  :   int32_t y_local = SUB_SCU(y);

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _y_local$[ebp], eax

; 943  :   // A0 and A1 availability testing
; 944  :   if (x != 0) {

	cmp	DWORD PTR _x$[ebp], 0
	je	$LN2@get_spatia

; 945  :     cu_info_t *a1 = LCU_GET_CU_AT_PX(lcu, x_local - 1, y_local + height - 1);

	mov	eax, DWORD PTR _x_local$[ebp]
	sub	eax, 1
	sar	eax, 2
	mov	ecx, DWORD PTR _height$[ebp]
	mov	edx, DWORD PTR _y_local$[ebp]
	lea	ecx, DWORD PTR [edx+ecx-1]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _a1$5[ebp], eax

; 946  :     // Do not check a1->coded because the block above is always coded before
; 947  :     // the current one and the flag is not set when searching an SMP block.
; 948  :     if (a1->type == CU_INTER) {

	mov	eax, DWORD PTR _a1$5[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN3@get_spatia

; 949  :       inter_clear_cu_unused(a1);

	mov	eax, DWORD PTR _a1$5[ebp]
	push	eax
	call	_inter_clear_cu_unused
	add	esp, 4

; 950  :       cand_out->a[1] = a1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _a1$5[ebp]
	mov	DWORD PTR [ecx+eax], edx
$LN3@get_spatia:

; 951  :     }
; 952  : 
; 953  :     if (y_local + height < LCU_WIDTH && y + height < picture_height) {

	mov	eax, DWORD PTR _y_local$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	cmp	eax, 64					; 00000040H
	jge	$LN2@get_spatia
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	cmp	eax, DWORD PTR _picture_height$[ebp]
	jge	SHORT $LN2@get_spatia

; 954  :       cu_info_t *a0 = LCU_GET_CU_AT_PX(lcu, x_local - 1, y_local + height);

	mov	eax, DWORD PTR _x_local$[ebp]
	sub	eax, 1
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	add	ecx, DWORD PTR _height$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _a0$4[ebp], eax

; 955  :       if (a0->type == CU_INTER && is_a0_cand_coded(x, y, width, height)) {

	mov	eax, DWORD PTR _a0$4[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN2@get_spatia
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_is_a0_cand_coded
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@get_spatia

; 956  :         inter_clear_cu_unused(a0);

	mov	eax, DWORD PTR _a0$4[ebp]
	push	eax
	call	_inter_clear_cu_unused
	add	esp, 4

; 957  :         cand_out->a[0] = a0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	eax, DWORD PTR _a0$4[ebp]
	mov	DWORD PTR [edx+ecx], eax
$LN2@get_spatia:

; 958  :       }
; 959  :     }
; 960  :   }
; 961  : 
; 962  :   // B0, B1 and B2 availability testing
; 963  :   if (y != 0) {

	cmp	DWORD PTR _y$[ebp], 0
	je	$LN1@get_spatia

; 964  :     cu_info_t *b0 = NULL;

	mov	DWORD PTR _b0$3[ebp], 0

; 965  :     if (x + width < picture_width) {

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _picture_width$[ebp]
	jge	SHORT $LN7@get_spatia

; 966  :       if (x_local + width < LCU_WIDTH) {

	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN8@get_spatia

; 967  :         b0 = LCU_GET_CU_AT_PX(lcu, x_local + width, y_local - 1);

	mov	eax, DWORD PTR _x_local$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sub	ecx, 1
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _b0$3[ebp], eax
	jmp	SHORT $LN7@get_spatia
$LN8@get_spatia:

; 968  :       } else if (y_local == 0) {

	cmp	DWORD PTR _y_local$[ebp], 0
	jne	SHORT $LN7@get_spatia

; 969  :         // Special case, top-right CU
; 970  :         b0 = LCU_GET_TOP_RIGHT_CU(lcu);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 289
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _b0$3[ebp], eax
$LN7@get_spatia:

; 971  :       }
; 972  :     }
; 973  :     if (b0 && b0->type == CU_INTER && is_b0_cand_coded(x, y, width, height)) {

	cmp	DWORD PTR _b0$3[ebp], 0
	je	SHORT $LN11@get_spatia
	mov	eax, DWORD PTR _b0$3[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN11@get_spatia
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_is_b0_cand_coded
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@get_spatia

; 974  :       inter_clear_cu_unused(b0);

	mov	eax, DWORD PTR _b0$3[ebp]
	push	eax
	call	_inter_clear_cu_unused
	add	esp, 4

; 975  :       cand_out->b[0] = b0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	eax, DWORD PTR _b0$3[ebp]
	mov	DWORD PTR [edx+ecx+8], eax
$LN11@get_spatia:

; 976  :     }
; 977  : 
; 978  :     cu_info_t *b1 = LCU_GET_CU_AT_PX(lcu, x_local + width - 1, y_local - 1);

	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _x_local$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	sar	edx, 2
	mov	eax, DWORD PTR _y_local$[ebp]
	sub	eax, 1
	sar	eax, 2
	imul	ecx, eax, 17
	lea	edx, DWORD PTR [edx+ecx+18]
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24976]
	mov	DWORD PTR _b1$2[ebp], edx

; 979  :     // Do not check b1->coded because the block to the left is always coded
; 980  :     // before the current one and the flag is not set when searching an SMP
; 981  :     // block.
; 982  :     if (b1->type == CU_INTER) {

	mov	eax, DWORD PTR _b1$2[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN12@get_spatia

; 983  :       inter_clear_cu_unused(b1);

	mov	eax, DWORD PTR _b1$2[ebp]
	push	eax
	call	_inter_clear_cu_unused
	add	esp, 4

; 984  :       cand_out->b[1] = b1;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _b1$2[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
$LN12@get_spatia:

; 985  :     }
; 986  : 
; 987  :     if (x != 0) {

	cmp	DWORD PTR _x$[ebp], 0
	je	SHORT $LN1@get_spatia

; 988  :       cu_info_t *b2 = LCU_GET_CU_AT_PX(lcu, x_local - 1, y_local - 1);

	mov	eax, DWORD PTR _x_local$[ebp]
	sub	eax, 1
	sar	eax, 2
	mov	ecx, DWORD PTR _y_local$[ebp]
	sub	ecx, 1
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _b2$1[ebp], eax

; 989  :       // Do not check b2->coded because the block above and to the left is
; 990  :       // always coded before the current one.
; 991  :       if (b2->type == CU_INTER) {

	mov	eax, DWORD PTR _b2$1[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN1@get_spatia

; 992  :         inter_clear_cu_unused(b2);

	mov	eax, DWORD PTR _b2$1[ebp]
	push	eax
	call	_inter_clear_cu_unused
	add	esp, 4

; 993  :         cand_out->b[2] = b2;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	edx, DWORD PTR _b2$1[ebp]
	mov	DWORD PTR [ecx+eax+8], edx
$LN1@get_spatia:

; 994  :       }
; 995  :     }
; 996  :   }
; 997  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_spatial_merge_candidates ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _get_temporal_merge_candidates
_TEXT	SEGMENT
_C3_offset$1 = -104					; size = 4
_yColCtr$2 = -92					; size = 4
_xColCtr$3 = -80					; size = 4
_H_offset$4 = -68					; size = 4
_yColBr$5 = -56						; size = 4
_xColBr$6 = -44						; size = 4
_cu_per_width$7 = -32					; size = 4
_ref_cu_array$8 = -20					; size = 4
_colocated_ref$9 = -8					; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_ref_list$ = 28						; size = 1
_ref_idx$ = 32						; size = 1
_cand_out$ = 36						; size = 4
_get_temporal_merge_candidates PROC			; COMDAT

; 844  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 845  :   /*
; 846  :   Predictor block locations
; 847  :   _________
; 848  :   |CurrentPU|
; 849  :   | |C0|__  |
; 850  :   |    |C3| |
; 851  :   |_________|_
; 852  :             |H|
; 853  :   */
; 854  : 
; 855  :   cand_out->c3 = cand_out->h = NULL;

	mov	eax, DWORD PTR _cand_out$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _cand_out$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 856  : 
; 857  :   // Find temporal reference
; 858  :   if (state->frame->ref->used_size) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [edx+20], 0
	je	$LN1@get_tempor

; 859  :     uint32_t colocated_ref;
; 860  : 
; 861  :     // Select L0/L1 ref_idx reference
; 862  :     if (state->frame->ref_LX_size[ref_list-1] > ref_idx) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR _ref_list$[ebp]
	movzx	eax, BYTE PTR [ecx+edx+76]
	movzx	ecx, BYTE PTR _ref_idx$[ebp]
	cmp	eax, ecx
	jle	SHORT $LN3@get_tempor

; 863  :       colocated_ref = state->frame->ref_LX[ref_list - 1][ref_idx];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR _ref_list$[ebp]
	sub	edx, 1
	shl	edx, 4
	lea	eax, DWORD PTR [ecx+edx+45]
	movzx	ecx, BYTE PTR _ref_idx$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	DWORD PTR _colocated_ref$9[ebp], edx

; 864  :     } else {

	jmp	SHORT $LN4@get_tempor
$LN3@get_tempor:

; 865  :       // not found
; 866  :       return;

	jmp	$LN1@get_tempor
$LN4@get_tempor:

; 867  :     }
; 868  : 
; 869  :     cu_array_t *ref_cu_array = state->frame->ref->cu_arrays[colocated_ref];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _colocated_ref$9[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ref_cu_array$8[ebp], edx

; 870  :     int cu_per_width = ref_cu_array->width / SCU_WIDTH;

	mov	eax, DWORD PTR _ref_cu_array$8[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _cu_per_width$7[ebp], eax

; 871  : 
; 872  :     uint32_t xColBr = x + width;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _xColBr$6[ebp], eax

; 873  :     uint32_t yColBr = y + height;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _yColBr$5[ebp], eax

; 874  : 
; 875  :     // H must be available
; 876  :     if (xColBr < state->encoder_control->in.width &&

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _xColBr$6[ebp]
	cmp	edx, DWORD PTR [ecx+2480]
	jae	SHORT $LN5@get_tempor
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _yColBr$5[ebp]
	cmp	edx, DWORD PTR [ecx+2484]
	jae	SHORT $LN5@get_tempor

; 877  :         yColBr < state->encoder_control->in.height) {
; 878  :       int32_t H_offset = -1;

	mov	DWORD PTR _H_offset$4[ebp], -1

; 879  : 
; 880  :       // Y inside the current CTU / LCU
; 881  :       if (yColBr % LCU_WIDTH != 0) {

	mov	eax, DWORD PTR _yColBr$5[ebp]
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	ecx
	test	edx, edx
	je	SHORT $LN6@get_tempor

; 882  :         H_offset = ((xColBr >> 4) << 4) / SCU_WIDTH +

	mov	eax, DWORD PTR _xColBr$6[ebp]
	shr	eax, 4
	shl	eax, 4
	shr	eax, 2
	mov	ecx, DWORD PTR _yColBr$5[ebp]
	shr	ecx, 4
	shl	ecx, 4
	shr	ecx, 2
	imul	ecx, DWORD PTR _cu_per_width$7[ebp]
	add	eax, ecx
	mov	DWORD PTR _H_offset$4[ebp], eax
$LN6@get_tempor:

; 883  :                   (((yColBr >> 4) << 4) / SCU_WIDTH) * cu_per_width;
; 884  :       }
; 885  : 
; 886  :       if (H_offset >= 0) {

	cmp	DWORD PTR _H_offset$4[ebp], 0
	jl	SHORT $LN5@get_tempor

; 887  :         // Only use when it's inter block
; 888  :         if (ref_cu_array->data[H_offset].type == CU_INTER) {

	imul	eax, DWORD PTR _H_offset$4[ebp], 20
	mov	ecx, DWORD PTR _ref_cu_array$8[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+eax]
	and	al, 3
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN5@get_tempor

; 889  :           cand_out->h = &ref_cu_array->data[H_offset];

	imul	eax, DWORD PTR _H_offset$4[ebp], 20
	mov	ecx, DWORD PTR _ref_cu_array$8[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN5@get_tempor:

; 890  :         }
; 891  :       }
; 892  :     }
; 893  :     uint32_t xColCtr = x + (width / 2);

	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xColCtr$3[ebp], eax

; 894  :     uint32_t yColCtr = y + (height / 2);

	mov	eax, DWORD PTR _height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yColCtr$2[ebp], eax

; 895  : 
; 896  :     // C3 must be inside the LCU, in the center position of current CU
; 897  :     if (xColCtr < state->encoder_control->in.width && yColCtr < state->encoder_control->in.height) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _xColCtr$3[ebp]
	cmp	edx, DWORD PTR [ecx+2480]
	jae	SHORT $LN1@get_tempor
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _yColCtr$2[ebp]
	cmp	edx, DWORD PTR [ecx+2484]
	jae	SHORT $LN1@get_tempor

; 898  :       uint32_t C3_offset = ((xColCtr >> 4) << 4) / SCU_WIDTH + ((((yColCtr >> 4) << 4) / SCU_WIDTH) * cu_per_width);

	mov	eax, DWORD PTR _xColCtr$3[ebp]
	shr	eax, 4
	shl	eax, 4
	shr	eax, 2
	mov	ecx, DWORD PTR _yColCtr$2[ebp]
	shr	ecx, 4
	shl	ecx, 4
	shr	ecx, 2
	imul	ecx, DWORD PTR _cu_per_width$7[ebp]
	add	eax, ecx
	mov	DWORD PTR _C3_offset$1[ebp], eax

; 899  :       if (ref_cu_array->data[C3_offset].type == CU_INTER) {

	imul	eax, DWORD PTR _C3_offset$1[ebp], 20
	mov	ecx, DWORD PTR _ref_cu_array$8[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+eax]
	and	al, 3
	movzx	ecx, al
	cmp	ecx, 2
	jne	SHORT $LN1@get_tempor

; 900  :         cand_out->c3 = &ref_cu_array->data[C3_offset];

	imul	eax, DWORD PTR _C3_offset$1[ebp], 20
	mov	ecx, DWORD PTR _ref_cu_array$8[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _cand_out$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN1@get_tempor:

; 901  :       }
; 902  :     }
; 903  :   }
; 904  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_temporal_merge_candidates ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _is_b0_cand_coded
_TEXT	SEGMENT
tv87 = -236						; size = 4
tv91 = -232						; size = 4
tv89 = -232						; size = 4
tv77 = -232						; size = 4
_cu_index$1 = -32					; size = 4
_parent_size$2 = -20					; size = 4
_size$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_is_b0_cand_coded PROC					; COMDAT

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 763  :   int size = MIN(width & ~(width - 1), height & ~(height - 1));

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	not	ecx
	and	ecx, DWORD PTR _height$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@is_b0_cand
	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, 1
	not	edx
	and	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN13@is_b0_cand
$LN12@is_b0_cand:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv77[ebp], eax
$LN13@is_b0_cand:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 764  : 
; 765  :   if (width != size) {

	mov	eax, DWORD PTR _width$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN2@is_b0_cand

; 766  :     // For SMP and AMP blocks the situation is equivalent to a square block
; 767  :     // at the upper right corner of the PU.
; 768  :     x = x + width - size;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN2@is_b0_cand:

; 769  :   }
; 770  : 
; 771  :   while (size < LCU_WIDTH) {

	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jge	$LN3@is_b0_cand

; 772  :     const int parent_size = 2 * size;

	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR _parent_size$2[ebp], eax

; 773  :     const int cu_index    = (x % parent_size != 0) + 2 * (y % parent_size != 0);

	mov	eax, DWORD PTR _x$[ebp]
	cdq
	idiv	DWORD PTR _parent_size$2[ebp]
	test	edx, edx
	je	SHORT $LN16@is_b0_cand
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN17@is_b0_cand
$LN16@is_b0_cand:
	mov	DWORD PTR tv89[ebp], 0
$LN17@is_b0_cand:
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	idiv	DWORD PTR _parent_size$2[ebp]
	test	edx, edx
	je	SHORT $LN14@is_b0_cand
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN15@is_b0_cand
$LN14@is_b0_cand:
	mov	DWORD PTR tv87[ebp], 0
$LN15@is_b0_cand:
	mov	eax, DWORD PTR tv87[ebp]
	mov	ecx, DWORD PTR tv89[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _cu_index$1[ebp], edx

; 774  :     switch (cu_index) {

	mov	eax, DWORD PTR _cu_index$1[ebp]
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 3
	ja	SHORT $LN4@is_b0_cand
	mov	ecx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN18@is_b0_cand[ecx*4]
$LN7@is_b0_cand:

; 775  :       case 0:
; 776  :         // B0 is in the CU directly above the parent CU so it has been
; 777  :         // coded already.
; 778  :         //         B0
; 779  :         //    +---+---+
; 780  :         //    | X |   |
; 781  :         //    |---+---+
; 782  :         //    |   |   |
; 783  :         //    +---+---+
; 784  :         return true;

	mov	al, 1
	jmp	SHORT $LN1@is_b0_cand
$LN8@is_b0_cand:

; 785  : 
; 786  :       case 1:
; 787  :         //             B0
; 788  :         //    +---+---+
; 789  :         //    |   | X |
; 790  :         //    |---+---+
; 791  :         //    |   |   |
; 792  :         //    +---+---+
; 793  : 
; 794  :         // Move to the parent block.
; 795  :         x -= size;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _x$[ebp], eax

; 796  :         size = parent_size;

	mov	eax, DWORD PTR _parent_size$2[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 797  :         break;

	jmp	SHORT $LN4@is_b0_cand
$LN9@is_b0_cand:

; 798  : 
; 799  :       case 2:
; 800  :         //    +---+---+
; 801  :         //    |   |B0 |
; 802  :         //    |---+---+
; 803  :         //    | X |   |
; 804  :         //    +---+---+
; 805  :         return true;

	mov	al, 1
	jmp	SHORT $LN1@is_b0_cand
$LN10@is_b0_cand:

; 806  : 
; 807  :       case 3:
; 808  :         // B0 is in the CU directly right of the parent CU so is has not
; 809  :         // been coded yet.
; 810  :         //    +---+---+
; 811  :         //    |   |   | B0
; 812  :         //    |---+---+
; 813  :         //    |   | X |
; 814  :         //    +---+---+
; 815  :         return false;

	xor	al, al
	jmp	SHORT $LN1@is_b0_cand
$LN4@is_b0_cand:

; 816  :     }
; 817  :   }

	jmp	$LN2@is_b0_cand
$LN3@is_b0_cand:

; 818  : 
; 819  :   // The LCU to the right and up of the current LCU has been coded already.
; 820  :   return true;

	mov	al, 1
$LN1@is_b0_cand:

; 821  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@is_b0_cand:
	DD	$LN7@is_b0_cand
	DD	$LN8@is_b0_cand
	DD	$LN9@is_b0_cand
	DD	$LN10@is_b0_cand
_is_b0_cand_coded ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _is_a0_cand_coded
_TEXT	SEGMENT
tv87 = -236						; size = 4
tv91 = -232						; size = 4
tv89 = -232						; size = 4
tv77 = -232						; size = 4
_cu_index$1 = -32					; size = 4
_parent_size$2 = -20					; size = 4
_size$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_is_a0_cand_coded PROC					; COMDAT

; 690  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 691  :   int size = MIN(width & ~(width - 1), height & ~(height - 1));

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	not	ecx
	and	ecx, DWORD PTR _height$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN12@is_a0_cand
	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, 1
	not	edx
	and	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN13@is_a0_cand
$LN12@is_a0_cand:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	not	eax
	and	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR tv77[ebp], eax
$LN13@is_a0_cand:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _size$[ebp], ecx

; 692  : 
; 693  :   if (height != size) {

	mov	eax, DWORD PTR _height$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN2@is_a0_cand

; 694  :     // For SMP and AMP blocks the situation is equivalent to a square block
; 695  :     // at the lower left corner of the PU.
; 696  :     y = y + height - size;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _y$[ebp], eax
$LN2@is_a0_cand:

; 697  :   }
; 698  : 
; 699  :   while (size < LCU_WIDTH) {

	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jge	$LN3@is_a0_cand

; 700  :     const int parent_size = 2 * size;

	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR _parent_size$2[ebp], eax

; 701  :     const int cu_index    = (x % parent_size != 0) + 2 * (y % parent_size != 0);

	mov	eax, DWORD PTR _x$[ebp]
	cdq
	idiv	DWORD PTR _parent_size$2[ebp]
	test	edx, edx
	je	SHORT $LN16@is_a0_cand
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN17@is_a0_cand
$LN16@is_a0_cand:
	mov	DWORD PTR tv89[ebp], 0
$LN17@is_a0_cand:
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	idiv	DWORD PTR _parent_size$2[ebp]
	test	edx, edx
	je	SHORT $LN14@is_a0_cand
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN15@is_a0_cand
$LN14@is_a0_cand:
	mov	DWORD PTR tv87[ebp], 0
$LN15@is_a0_cand:
	mov	eax, DWORD PTR tv87[ebp]
	mov	ecx, DWORD PTR tv89[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _cu_index$1[ebp], edx

; 702  :     switch (cu_index) {

	mov	eax, DWORD PTR _cu_index$1[ebp]
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 3
	ja	SHORT $LN4@is_a0_cand
	mov	ecx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN18@is_a0_cand[ecx*4]
$LN7@is_a0_cand:

; 703  :       case 0:
; 704  :         // A0 is in the CU directly left of the parent CU so it has been
; 705  :         // coded already.
; 706  :         //    +---+---+
; 707  :         //    | X |   |
; 708  :         //    |---+---+
; 709  :         // A0 |   |   |
; 710  :         //    +---+---+
; 711  :         return true;

	mov	al, 1
	jmp	SHORT $LN1@is_a0_cand
$LN8@is_a0_cand:

; 712  : 
; 713  :       case 1:
; 714  :         // A0 is in the CU that will be coded after the current CU.
; 715  :         //    +---+---+
; 716  :         //    |   | X |
; 717  :         //    |---+---+
; 718  :         //    |A0 |   |
; 719  :         //    +---+---+
; 720  :         return false;

	xor	al, al
	jmp	SHORT $LN1@is_a0_cand
$LN9@is_a0_cand:

; 721  : 
; 722  :       case 2:
; 723  :         //    +---+---+
; 724  :         //    |   |   |
; 725  :         //    |---+---+
; 726  :         //    | X |   |
; 727  :         //    +---+---+
; 728  :         // A0
; 729  : 
; 730  :         // Move to the parent block.
; 731  :         y -= size;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 732  :         size = parent_size;

	mov	eax, DWORD PTR _parent_size$2[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 733  :         break;

	jmp	SHORT $LN4@is_a0_cand
$LN10@is_a0_cand:

; 734  : 
; 735  :       case 3:
; 736  :         // A0 is in the CU directly down of the parent CU so is has not
; 737  :         // been coded yet.
; 738  :         //    +---+---+
; 739  :         //    |   |   |
; 740  :         //    |---+---+
; 741  :         //    |   | X |
; 742  :         //    +---+---+
; 743  :         //     A0
; 744  :         return false;

	xor	al, al
	jmp	SHORT $LN1@is_a0_cand
$LN4@is_a0_cand:

; 745  :     }
; 746  :   }

	jmp	$LN2@is_a0_cand
$LN3@is_a0_cand:

; 747  : 
; 748  :   // For 64x64 blocks A0 candidate is located outside the LCU.
; 749  :   return false;

	xor	al, al
$LN1@is_a0_cand:

; 750  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@is_a0_cand:
	DD	$LN7@is_a0_cand
	DD	$LN8@is_a0_cand
	DD	$LN9@is_a0_cand
	DD	$LN10@is_a0_cand
_is_a0_cand_coded ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_clear_cu_unused
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_cu$ = 8						; size = 4
_inter_clear_cu_unused PROC				; COMDAT

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 671  :   for (unsigned i = 0; i < 2; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@inter_clea
$LN2@inter_clea:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@inter_clea:
	cmp	DWORD PTR _i$1[ebp], 2
	jae	SHORT $LN1@inter_clea

; 672  :     if (cu->inter.mv_dir & (1 << i)) continue;

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _i$1[ebp]
	shl	eax, cl
	and	edx, eax
	je	SHORT $LN5@inter_clea
	jmp	SHORT $LN2@inter_clea
$LN5@inter_clea:

; 673  : 
; 674  :     cu->inter.mv[i][0] = 0;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _cu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR [edx+ecx], ax

; 675  :     cu->inter.mv[i][1] = 0;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _cu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR [edx+eax], cx

; 676  :     cu->inter.mv_ref[i] = 255;

	mov	eax, DWORD PTR _cu$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax+16], 255			; 000000ffH

; 677  :   }

	jmp	SHORT $LN2@inter_clea
$LN1@inter_clea:

; 678  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_inter_clear_cu_unused ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_recon_unipred
_TEXT	SEGMENT
tv144 = -320						; size = 4
tv130 = -320						; size = 4
tv90 = -320						; size = 4
tv311 = -316						; size = 4
tv142 = -316						; size = 4
tv128 = -316						; size = 4
tv88 = -316						; size = 4
_frame_mv_index$1 = -116				; size = 4
_int_mv_in_frame_c$2 = -104				; size = 8
_out_stride_c$ = -88					; size = 4
_frame_mv_index$3 = -76					; size = 4
_fractional_luma$ = -61					; size = 1
_fractional_chroma$ = -49				; size = 1
_int_mv_outside_frame$ = -37				; size = 1
_int_mv_in_frame$ = -28					; size = 8
_int_mv$ = -12						; size = 8
_state$ = 8						; size = 4
_ref$ = 12						; size = 4
_pu_x$ = 16						; size = 4
_pu_y$ = 20						; size = 4
_pu_w$ = 24						; size = 4
_pu_h$ = 28						; size = 4
_out_stride_luma$ = 32					; size = 4
_mv_param$ = 36						; size = 4
_yuv_px$ = 40						; size = 4
_yuv_im$ = 44						; size = 4
_predict_luma$ = 48					; size = 1
_predict_chroma$ = 52					; size = 1
_inter_recon_unipred PROC				; COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 387  :   const vector2d_t int_mv = { mv_param[0] >> 2, mv_param[1] >> 2 };

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	sar	eax, 2
	mov	DWORD PTR _int_mv$[ebp], eax
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	sar	edx, 2
	mov	DWORD PTR _int_mv$[ebp+4], edx

; 388  :   const vector2d_t int_mv_in_frame = {

	mov	eax, DWORD PTR _int_mv$[ebp]
	add	eax, DWORD PTR _pu_x$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _int_mv_in_frame$[ebp], eax
	mov	eax, DWORD PTR _int_mv$[ebp+4]
	add	eax, DWORD PTR _pu_y$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _int_mv_in_frame$[ebp+4], eax

; 389  :     int_mv.x + pu_x + state->tile->offset_x,
; 390  :     int_mv.y + pu_y + state->tile->offset_y
; 391  :   };
; 392  : 
; 393  :   const bool int_mv_outside_frame = int_mv_in_frame.x < 0 ||

	cmp	DWORD PTR _int_mv_in_frame$[ebp], 0
	jl	SHORT $LN18@inter_reco
	cmp	DWORD PTR _int_mv_in_frame$[ebp+4], 0
	jl	SHORT $LN18@inter_reco
	mov	eax, DWORD PTR _int_mv_in_frame$[ebp]
	add	eax, DWORD PTR _pu_w$[ebp]
	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	eax, DWORD PTR [ecx+32]
	jg	SHORT $LN18@inter_reco
	mov	edx, DWORD PTR _int_mv_in_frame$[ebp+4]
	add	edx, DWORD PTR _pu_h$[ebp]
	mov	eax, DWORD PTR _ref$[ebp]
	cmp	edx, DWORD PTR [eax+36]
	jg	SHORT $LN18@inter_reco
	mov	DWORD PTR tv88[ebp], 0
	jmp	SHORT $LN19@inter_reco
$LN18@inter_reco:
	mov	DWORD PTR tv88[ebp], 1
$LN19@inter_reco:
	cmp	DWORD PTR tv88[ebp], 0
	jne	SHORT $LN20@inter_reco
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN21@inter_reco
$LN20@inter_reco:
	mov	DWORD PTR tv90[ebp], 1
$LN21@inter_reco:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR _int_mv_outside_frame$[ebp], cl

; 394  :     int_mv_in_frame.y < 0 ||
; 395  :     int_mv_in_frame.x + pu_w > ref->width ||
; 396  :     int_mv_in_frame.y + pu_h > ref->height;
; 397  : 
; 398  :   // With 420, odd coordinates need interpolation.
; 399  :   const bool fractional_chroma = (int_mv.x & 1) || (int_mv.y & 1);

	mov	eax, DWORD PTR _int_mv$[ebp]
	and	eax, 1
	jne	SHORT $LN22@inter_reco
	mov	ecx, DWORD PTR _int_mv$[ebp+4]
	and	ecx, 1
	jne	SHORT $LN22@inter_reco
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN23@inter_reco
$LN22@inter_reco:
	mov	DWORD PTR tv128[ebp], 1
$LN23@inter_reco:
	cmp	DWORD PTR tv128[ebp], 0
	jne	SHORT $LN24@inter_reco
	mov	DWORD PTR tv130[ebp], 0
	jmp	SHORT $LN25@inter_reco
$LN24@inter_reco:
	mov	DWORD PTR tv130[ebp], 1
$LN25@inter_reco:
	mov	dl, BYTE PTR tv130[ebp]
	mov	BYTE PTR _fractional_chroma$[ebp], dl

; 400  :   const bool fractional_luma = (mv_param[0] & 3) || (mv_param[1] & 3);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	jne	SHORT $LN26@inter_reco
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	jne	SHORT $LN26@inter_reco
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN27@inter_reco
$LN26@inter_reco:
	mov	DWORD PTR tv142[ebp], 1
$LN27@inter_reco:
	cmp	DWORD PTR tv142[ebp], 0
	jne	SHORT $LN28@inter_reco
	mov	DWORD PTR tv144[ebp], 0
	jmp	SHORT $LN29@inter_reco
$LN28@inter_reco:
	mov	DWORD PTR tv144[ebp], 1
$LN29@inter_reco:
	mov	cl, BYTE PTR tv144[ebp]
	mov	BYTE PTR _fractional_luma$[ebp], cl

; 401  : 
; 402  :   // Generate prediction for luma.
; 403  :   if (predict_luma) {

	movzx	eax, BYTE PTR _predict_luma$[ebp]
	test	eax, eax
	je	$LN2@inter_reco

; 404  :     if (fractional_luma) {

	movzx	eax, BYTE PTR _fractional_luma$[ebp]
	test	eax, eax
	je	SHORT $LN3@inter_reco

; 405  :       // With a fractional MV, do interpolation.
; 406  :       if (state->encoder_control->cfg.bipred && yuv_im) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN5@inter_reco
	cmp	DWORD PTR _yuv_im$[ebp], 0
	je	SHORT $LN5@inter_reco

; 407  :         inter_recon_frac_luma_hi(state, ref,

	mov	eax, DWORD PTR _out_stride_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yuv_im$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mv_param$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_inter_recon_frac_luma_hi
	add	esp, 36					; 00000024H

; 408  :           pu_x, pu_y,
; 409  :           pu_w, pu_h,
; 410  :           mv_param, yuv_im, out_stride_luma);
; 411  :       }

	jmp	SHORT $LN6@inter_reco
$LN5@inter_reco:

; 412  :       else {
; 413  :         inter_recon_frac_luma(state, ref,

	mov	eax, DWORD PTR _out_stride_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yuv_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mv_param$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_inter_recon_frac_luma
	add	esp, 36					; 00000024H
$LN6@inter_reco:

; 414  :           pu_x, pu_y,
; 415  :           pu_w, pu_h,
; 416  :           mv_param, yuv_px, out_stride_luma);
; 417  :       }
; 418  :     }

	jmp	$LN2@inter_reco
$LN3@inter_reco:

; 419  :     else {
; 420  :       // With an integer MV, copy pixels directly from the reference.
; 421  :       if (int_mv_outside_frame) {

	movzx	eax, BYTE PTR _int_mv_outside_frame$[ebp]
	test	eax, eax
	je	SHORT $LN7@inter_reco

; 422  :         inter_cp_with_ext_border(ref->y, ref->width,

	lea	eax, DWORD PTR _int_mv_in_frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_w$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_stride_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yuv_px$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_inter_cp_with_ext_border
	add	esp, 36					; 00000024H

; 423  :           ref->width, ref->height,
; 424  :           yuv_px->y, out_stride_luma,
; 425  :           pu_w, pu_h,
; 426  :           &int_mv_in_frame);
; 427  :       }

	jmp	SHORT $LN2@inter_reco
$LN7@inter_reco:

; 428  :       else {
; 429  :         const int frame_mv_index = int_mv_in_frame.y * ref->width + int_mv_in_frame.x;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _int_mv_in_frame$[ebp+4]
	imul	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _int_mv_in_frame$[ebp]
	mov	DWORD PTR _frame_mv_index$3[ebp], ecx

; 430  :         kvz_pixels_blit(&ref->y[frame_mv_index],

	mov	eax, DWORD PTR _out_stride_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yuv_px$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _frame_mv_index$3[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN2@inter_reco:

; 431  :           yuv_px->y,
; 432  :           pu_w, pu_h,
; 433  :           ref->width, out_stride_luma);
; 434  :       }
; 435  :     }
; 436  :   }
; 437  : 
; 438  :   if (!predict_chroma) {

	movzx	eax, BYTE PTR _predict_chroma$[ebp]
	test	eax, eax
	jne	SHORT $LN9@inter_reco

; 439  :     return fractional_luma;

	movzx	eax, BYTE PTR _fractional_luma$[ebp]
	jmp	$LN1@inter_reco
$LN9@inter_reco:

; 440  :   }
; 441  : 
; 442  :   const unsigned out_stride_c = out_stride_luma / 2;

	mov	eax, DWORD PTR _out_stride_luma$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _out_stride_c$[ebp], eax

; 443  : 
; 444  :   // Generate prediction for chroma.
; 445  :   if (fractional_luma || fractional_chroma) {

	movzx	eax, BYTE PTR _fractional_luma$[ebp]
	test	eax, eax
	jne	SHORT $LN12@inter_reco
	movzx	eax, BYTE PTR _fractional_chroma$[ebp]
	test	eax, eax
	je	SHORT $LN10@inter_reco
$LN12@inter_reco:

; 446  :     // With a fractional MV, do interpolation.
; 447  :     if (state->encoder_control->cfg.bipred && yuv_im) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN13@inter_reco
	cmp	DWORD PTR _yuv_im$[ebp], 0
	je	SHORT $LN13@inter_reco

; 448  :       inter_recon_frac_chroma_hi(state, ref,

	mov	eax, DWORD PTR _out_stride_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yuv_im$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mv_param$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_inter_recon_frac_chroma_hi
	add	esp, 36					; 00000024H

; 449  :                                     pu_x, pu_y,
; 450  :                                     pu_w, pu_h, 
; 451  :                                     mv_param, yuv_im, out_stride_c);
; 452  :     } else {

	jmp	SHORT $LN14@inter_reco
$LN13@inter_reco:

; 453  :       inter_recon_frac_chroma(state, ref,

	mov	eax, DWORD PTR _out_stride_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yuv_px$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mv_param$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_inter_recon_frac_chroma
	add	esp, 36					; 00000024H
$LN14@inter_reco:

; 454  :                               pu_x, pu_y,
; 455  :                               pu_w, pu_h,
; 456  :                               mv_param, yuv_px, out_stride_c);
; 457  :     }
; 458  :   } else {

	jmp	$LN11@inter_reco
$LN10@inter_reco:

; 459  :     // With an integer MV, copy pixels directly from the reference.
; 460  :     const vector2d_t int_mv_in_frame_c = { int_mv_in_frame.x / 2, int_mv_in_frame.y / 2 };

	mov	eax, DWORD PTR _int_mv_in_frame$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _int_mv_in_frame_c$2[ebp], eax
	mov	eax, DWORD PTR _int_mv_in_frame$[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _int_mv_in_frame_c$2[ebp+4], eax

; 461  : 
; 462  :     if (int_mv_outside_frame) {

	movzx	eax, BYTE PTR _int_mv_outside_frame$[ebp]
	test	eax, eax
	je	$LN15@inter_reco

; 463  :       inter_cp_with_ext_border(ref->u, ref->width / 2,

	lea	eax, DWORD PTR _int_mv_in_frame_c$2[ebp]
	push	eax
	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _out_stride_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yuv_px$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_inter_cp_with_ext_border
	add	esp, 36					; 00000024H

; 464  :                                ref->width / 2, ref->height / 2,
; 465  :                                yuv_px->u, out_stride_c,
; 466  :                                pu_w / 2, pu_h / 2,
; 467  :                                &int_mv_in_frame_c);
; 468  :       inter_cp_with_ext_border(ref->v, ref->width / 2,

	lea	eax, DWORD PTR _int_mv_in_frame_c$2[ebp]
	push	eax
	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _out_stride_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yuv_px$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_inter_cp_with_ext_border
	add	esp, 36					; 00000024H

; 469  :                                ref->width / 2, ref->height / 2,
; 470  :                                yuv_px->v, out_stride_c,
; 471  :                                pu_w / 2, pu_h / 2,
; 472  :                                &int_mv_in_frame_c);
; 473  :     } else {

	jmp	$LN11@inter_reco
$LN15@inter_reco:

; 474  :       const int frame_mv_index = int_mv_in_frame_c.y * ref->width / 2 + int_mv_in_frame_c.x;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR _int_mv_in_frame_c$2[ebp+4]
	imul	ecx, DWORD PTR [eax+32]
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _int_mv_in_frame_c$2[ebp]
	mov	DWORD PTR _frame_mv_index$1[ebp], eax

; 475  : 
; 476  :       kvz_pixels_blit(&ref->u[frame_mv_index],

	mov	eax, DWORD PTR _out_stride_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _yuv_px$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _frame_mv_index$1[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 477  :                       yuv_px->u,
; 478  :                       pu_w / 2, pu_h / 2,
; 479  :                       ref->width / 2, out_stride_c);
; 480  :       kvz_pixels_blit(&ref->v[frame_mv_index],

	mov	eax, DWORD PTR _out_stride_c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	edx, DWORD PTR _yuv_px$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _frame_mv_index$1[ebp]
	push	edx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H
$LN11@inter_reco:

; 481  :                       yuv_px->v,
; 482  :                       pu_w / 2, pu_h / 2,
; 483  :                       ref->width / 2, out_stride_c);
; 484  :     }
; 485  :   }
; 486  : 
; 487  :   return fractional_luma | ((fractional_luma || fractional_chroma) << 1);

	movzx	eax, BYTE PTR _fractional_luma$[ebp]
	test	eax, eax
	jne	SHORT $LN30@inter_reco
	movzx	ecx, BYTE PTR _fractional_chroma$[ebp]
	test	ecx, ecx
	jne	SHORT $LN30@inter_reco
	mov	DWORD PTR tv311[ebp], 0
	jmp	SHORT $LN31@inter_reco
$LN30@inter_reco:
	mov	DWORD PTR tv311[ebp], 1
$LN31@inter_reco:
	movzx	eax, BYTE PTR _fractional_luma$[ebp]
	mov	edx, DWORD PTR tv311[ebp]
	shl	edx, 1
	or	eax, edx
$LN1@inter_reco:

; 488  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@inter_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN36@inter_reco:
	DD	3
	DD	$LN35@inter_reco
$LN35@inter_reco:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN32@inter_reco
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN33@inter_reco
	DD	-104					; ffffff98H
	DD	8
	DD	$LN34@inter_reco
$LN34@inter_reco:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	0
$LN33@inter_reco:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN32@inter_reco:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	118					; 00000076H
	DB	0
_inter_recon_unipred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_cp_with_ext_border
_TEXT	SEGMENT
tv92 = -284						; size = 4
tv82 = -284						; size = 4
tv93 = -280						; size = 4
tv83 = -280						; size = 4
tv87 = -276						; size = 4
tv77 = -276						; size = 4
_frame_index$1 = -76					; size = 4
_pu_index$2 = -64					; size = 4
_in_pu$3 = -52						; size = 8
_in_frame$4 = -36					; size = 8
_x$5 = -20						; size = 4
_y$6 = -8						; size = 4
_ref_buf$ = 8						; size = 4
_ref_stride$ = 12					; size = 4
_ref_width$ = 16					; size = 4
_ref_height$ = 20					; size = 4
_rec_buf$ = 24						; size = 4
_rec_stride$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_mv_in_frame$ = 40					; size = 4
_inter_cp_with_ext_border PROC				; COMDAT

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 341  :   for (int y = mv_in_frame->y; y < mv_in_frame->y + height; ++y) {

	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _y$6[ebp], ecx
	jmp	SHORT $LN4@inter_cp_w
$LN2@inter_cp_w:
	mov	eax, DWORD PTR _y$6[ebp]
	add	eax, 1
	mov	DWORD PTR _y$6[ebp], eax
$LN4@inter_cp_w:
	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _y$6[ebp], ecx
	jge	$LN1@inter_cp_w

; 342  :     for (int x = mv_in_frame->x; x < mv_in_frame->x + width; ++x) {

	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$5[ebp], ecx
	jmp	SHORT $LN7@inter_cp_w
$LN5@inter_cp_w:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x$5[ebp], eax
$LN7@inter_cp_w:
	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _x$5[ebp], ecx
	jge	$LN6@inter_cp_w

; 343  :       vector2d_t in_frame = {

	mov	eax, DWORD PTR _ref_width$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _x$5[ebp]
	jge	SHORT $LN9@inter_cp_w
	mov	ecx, DWORD PTR _ref_width$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN10@inter_cp_w
$LN9@inter_cp_w:
	mov	edx, DWORD PTR _x$5[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN10@inter_cp_w:
	cmp	DWORD PTR tv77[ebp], 0
	jge	SHORT $LN13@inter_cp_w
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN14@inter_cp_w
$LN13@inter_cp_w:
	mov	eax, DWORD PTR _ref_width$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _x$5[ebp]
	jge	SHORT $LN11@inter_cp_w
	mov	ecx, DWORD PTR _ref_width$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN12@inter_cp_w
$LN11@inter_cp_w:
	mov	edx, DWORD PTR _x$5[ebp]
	mov	DWORD PTR tv82[ebp], edx
$LN12@inter_cp_w:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN14@inter_cp_w:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _in_frame$4[ebp], ecx
	mov	eax, DWORD PTR _ref_height$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _y$6[ebp]
	jge	SHORT $LN15@inter_cp_w
	mov	ecx, DWORD PTR _ref_height$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN16@inter_cp_w
$LN15@inter_cp_w:
	mov	edx, DWORD PTR _y$6[ebp]
	mov	DWORD PTR tv87[ebp], edx
$LN16@inter_cp_w:
	cmp	DWORD PTR tv87[ebp], 0
	jge	SHORT $LN19@inter_cp_w
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN20@inter_cp_w
$LN19@inter_cp_w:
	mov	eax, DWORD PTR _ref_height$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _y$6[ebp]
	jge	SHORT $LN17@inter_cp_w
	mov	ecx, DWORD PTR _ref_height$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv92[ebp], ecx
	jmp	SHORT $LN18@inter_cp_w
$LN17@inter_cp_w:
	mov	edx, DWORD PTR _y$6[ebp]
	mov	DWORD PTR tv92[ebp], edx
$LN18@inter_cp_w:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN20@inter_cp_w:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _in_frame$4[ebp+4], ecx

; 344  :         CLIP(0, ref_width - 1, x),
; 345  :         CLIP(0, ref_height - 1, y),
; 346  :       };
; 347  :       vector2d_t in_pu = {

	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR _x$5[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _in_pu$3[ebp], ecx
	mov	eax, DWORD PTR _mv_in_frame$[ebp]
	mov	ecx, DWORD PTR _y$6[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _in_pu$3[ebp+4], ecx

; 348  :         x - mv_in_frame->x,
; 349  :         y - mv_in_frame->y,
; 350  :       };
; 351  :       int pu_index = in_pu.y * rec_stride + in_pu.x;

	mov	eax, DWORD PTR _in_pu$3[ebp+4]
	imul	eax, DWORD PTR _rec_stride$[ebp]
	add	eax, DWORD PTR _in_pu$3[ebp]
	mov	DWORD PTR _pu_index$2[ebp], eax

; 352  :       int frame_index = in_frame.y * ref_stride + in_frame.x;

	mov	eax, DWORD PTR _in_frame$4[ebp+4]
	imul	eax, DWORD PTR _ref_stride$[ebp]
	add	eax, DWORD PTR _in_frame$4[ebp]
	mov	DWORD PTR _frame_index$1[ebp], eax

; 353  :       rec_buf[pu_index] = ref_buf[frame_index];

	mov	eax, DWORD PTR _rec_buf$[ebp]
	add	eax, DWORD PTR _pu_index$2[ebp]
	mov	ecx, DWORD PTR _ref_buf$[ebp]
	add	ecx, DWORD PTR _frame_index$1[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 354  :     }

	jmp	$LN5@inter_cp_w
$LN6@inter_cp_w:

; 355  :   }

	jmp	$LN2@inter_cp_w
$LN1@inter_cp_w:

; 356  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@inter_cp_w
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@inter_cp_w:
	DD	2
	DD	$LN23@inter_cp_w
$LN23@inter_cp_w:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN21@inter_cp_w
	DD	-52					; ffffffccH
	DD	8
	DD	$LN22@inter_cp_w
$LN22@inter_cp_w:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	0
$LN21@inter_cp_w:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_inter_cp_with_ext_border ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_recon_frac_chroma_hi
_TEXT	SEGMENT
_epol_args$ = -1500					; size = 68
_ext_s$ = -1424						; size = 4
_ext_origin$ = -1412					; size = 4
_ext$ = -1400						; size = 4
_ext_buffer$ = -1388					; size = 1331
_pb_h$ = -48						; size = 4
_pb_w$ = -36						; size = 4
_mv_frac_y$ = -24					; size = 4
_mv_frac_x$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_ref$ = 12						; size = 4
_pu_x$ = 16						; size = 4
_pu_y$ = 20						; size = 4
_pu_w$ = 24						; size = 4
_pu_h$ = 28						; size = 4
_mv_param$ = 32						; size = 4
_out$ = 36						; size = 4
_out_stride$ = 40					; size = 4
_inter_recon_frac_chroma_hi PROC			; COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2080				; 00000820H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2080]
	mov	ecx, 520				; 00000208H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 254  :   int mv_frac_x = (mv_param[0] & 7);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 7
	mov	DWORD PTR _mv_frac_x$[ebp], eax

; 255  :   int mv_frac_y = (mv_param[1] & 7);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 7
	mov	DWORD PTR _mv_frac_y$[ebp], edx

; 256  : 
; 257  :   // Take into account chroma subsampling
; 258  :   unsigned pb_w = pu_w / 2;

	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pb_w$[ebp], eax

; 259  :   unsigned pb_h = pu_h / 2;

	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pb_h$[ebp], eax

; 260  : 
; 261  :   // Space for extrapolated pixels and the part from the picture.
; 262  :   // Some extra for AVX2.
; 263  :   // The extrapolation function will set the pointers and stride.
; 264  :   kvz_pixel ext_buffer[KVZ_IPOL_MAX_INPUT_SIZE_CHROMA_SIMD];
; 265  :   kvz_pixel *ext = NULL;

	mov	DWORD PTR _ext$[ebp], 0

; 266  :   kvz_pixel *ext_origin = NULL;

	mov	DWORD PTR _ext_origin$[ebp], 0

; 267  :   int ext_s = 0;

	mov	DWORD PTR _ext_s$[ebp], 0

; 268  : 
; 269  :   // Chroma U
; 270  :   // Divisions by 2 due to 4:2:0 chroma subsampling
; 271  :   kvz_epol_args epol_args = {

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _epol_args$[ebp], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+4], eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+8], eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+12], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx+16]
	add	eax, DWORD PTR _pu_x$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	ecx, WORD PTR [edx+ecx]
	sar	ecx, 3
	add	eax, ecx
	mov	DWORD PTR _epol_args$[ebp+16], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx+20]
	add	eax, DWORD PTR _pu_y$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sar	edx, 3
	add	eax, edx
	mov	DWORD PTR _epol_args$[ebp+20], eax
	mov	eax, DWORD PTR _pb_w$[ebp]
	mov	DWORD PTR _epol_args$[ebp+24], eax
	mov	eax, DWORD PTR _pb_h$[ebp]
	mov	DWORD PTR _epol_args$[ebp+28], eax
	mov	DWORD PTR _epol_args$[ebp+32], 1
	mov	DWORD PTR _epol_args$[ebp+36], 2
	mov	DWORD PTR _epol_args$[ebp+40], 1
	mov	DWORD PTR _epol_args$[ebp+44], 2
	mov	DWORD PTR _epol_args$[ebp+48], 3
	mov	DWORD PTR _epol_args$[ebp+52], 0
	mov	DWORD PTR _epol_args$[ebp+56], 0
	mov	DWORD PTR _epol_args$[ebp+60], 0
	mov	DWORD PTR _epol_args$[ebp+64], 0

; 272  :     .src = ref->u,
; 273  :     .src_w = ref->width / 2,
; 274  :     .src_h = ref->height / 2,
; 275  :     .src_s = ref->stride / 2,
; 276  :     .blk_x = (state->tile->offset_x + pu_x) / 2 + (mv_param[0] >> 3),
; 277  :     .blk_y = (state->tile->offset_y + pu_y) / 2 + (mv_param[1] >> 3),
; 278  :     .blk_w = pb_w,
; 279  :     .blk_h = pb_h,
; 280  :     .pad_l = KVZ_CHROMA_FILTER_OFFSET,
; 281  :     .pad_r = KVZ_EXT_PADDING_CHROMA - KVZ_CHROMA_FILTER_OFFSET,
; 282  :     .pad_t = KVZ_CHROMA_FILTER_OFFSET,
; 283  :     .pad_b = KVZ_EXT_PADDING_CHROMA - KVZ_CHROMA_FILTER_OFFSET,
; 284  :     .pad_b_simd = 3 // Three rows for AVX2
; 285  :   };
; 286  : 
; 287  :   // Initialize separately. Gets rid of warning
; 288  :   // about using nonstandard extension.
; 289  :   epol_args.buf = ext_buffer;

	lea	eax, DWORD PTR _ext_buffer$[ebp]
	mov	DWORD PTR _epol_args$[ebp+52], eax

; 290  :   epol_args.ext = &ext;

	lea	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR _epol_args$[ebp+56], eax

; 291  :   epol_args.ext_origin = &ext_origin;

	lea	eax, DWORD PTR _ext_origin$[ebp]
	mov	DWORD PTR _epol_args$[ebp+60], eax

; 292  :   epol_args.ext_s = &ext_s;

	lea	eax, DWORD PTR _ext_s$[ebp]
	mov	DWORD PTR _epol_args$[ebp+64], eax

; 293  : 
; 294  :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 295  :   kvz_sample_octpel_chroma_hi(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pb_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_octpel_chroma_hi
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 296  :     ext_origin,
; 297  :     ext_s,
; 298  :     pb_w,
; 299  :     pb_h,
; 300  :     out->u,
; 301  :     out_stride,
; 302  :     mv_frac_x,
; 303  :     mv_frac_y,
; 304  :     mv_param);
; 305  : 
; 306  :   // Chroma V
; 307  :   epol_args.src = ref->v;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _epol_args$[ebp], ecx

; 308  :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 309  :   kvz_sample_octpel_chroma_hi(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pb_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_octpel_chroma_hi
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 310  :     ext_origin,
; 311  :     ext_s,
; 312  :     pb_w,
; 313  :     pb_h,
; 314  :     out->v,
; 315  :     out_stride,
; 316  :     mv_frac_x,
; 317  :     mv_frac_y,
; 318  :     mv_param);
; 319  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@inter_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2080				; 00000820H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@inter_reco:
	DD	5
	DD	$LN8@inter_reco
$LN8@inter_reco:
	DD	-1388					; fffffa94H
	DD	1331					; 00000533H
	DD	$LN3@inter_reco
	DD	-1400					; fffffa88H
	DD	4
	DD	$LN4@inter_reco
	DD	-1412					; fffffa7cH
	DD	4
	DD	$LN5@inter_reco
	DD	-1424					; fffffa70H
	DD	4
	DD	$LN6@inter_reco
	DD	-1500					; fffffa24H
	DD	68					; 00000044H
	DD	$LN7@inter_reco
$LN7@inter_reco:
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN6@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	0
$LN5@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN4@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN3@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_inter_recon_frac_chroma_hi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_recon_frac_chroma
_TEXT	SEGMENT
_epol_args$ = -1500					; size = 68
_ext_s$ = -1424						; size = 4
_ext_origin$ = -1412					; size = 4
_ext$ = -1400						; size = 4
_ext_buffer$ = -1388					; size = 1331
_pb_h$ = -48						; size = 4
_pb_w$ = -36						; size = 4
_mv_frac_y$ = -24					; size = 4
_mv_frac_x$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_ref$ = 12						; size = 4
_pu_x$ = 16						; size = 4
_pu_y$ = 20						; size = 4
_pu_w$ = 24						; size = 4
_pu_h$ = 28						; size = 4
_mv_param$ = 32						; size = 4
_out$ = 36						; size = 4
_out_stride$ = 40					; size = 4
_inter_recon_frac_chroma PROC				; COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2080				; 00000820H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2080]
	mov	ecx, 520				; 00000208H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 177  :   int mv_frac_x = (mv_param[0] & 7);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 7
	mov	DWORD PTR _mv_frac_x$[ebp], eax

; 178  :   int mv_frac_y = (mv_param[1] & 7);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 7
	mov	DWORD PTR _mv_frac_y$[ebp], edx

; 179  : 
; 180  :   // Take into account chroma subsampling
; 181  :   unsigned pb_w = pu_w / 2;

	mov	eax, DWORD PTR _pu_w$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pb_w$[ebp], eax

; 182  :   unsigned pb_h = pu_h / 2;

	mov	eax, DWORD PTR _pu_h$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _pb_h$[ebp], eax

; 183  : 
; 184  :   // Space for extrapolated pixels and the part from the picture.
; 185  :   // Some extra for AVX2.
; 186  :   // The extrapolation function will set the pointers and stride.
; 187  :   kvz_pixel ext_buffer[KVZ_IPOL_MAX_INPUT_SIZE_CHROMA_SIMD];
; 188  :   kvz_pixel *ext = NULL;

	mov	DWORD PTR _ext$[ebp], 0

; 189  :   kvz_pixel *ext_origin = NULL;

	mov	DWORD PTR _ext_origin$[ebp], 0

; 190  :   int ext_s = 0;

	mov	DWORD PTR _ext_s$[ebp], 0

; 191  : 
; 192  :   // Chroma U
; 193  :   // Divisions by 2 due to 4:2:0 chroma subsampling
; 194  :   kvz_epol_args epol_args = {

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _epol_args$[ebp], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+32]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+4], eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+8], eax
	mov	eax, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _epol_args$[ebp+12], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx+16]
	add	eax, DWORD PTR _pu_x$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	ecx, WORD PTR [edx+ecx]
	sar	ecx, 3
	add	eax, ecx
	mov	DWORD PTR _epol_args$[ebp+16], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx+20]
	add	eax, DWORD PTR _pu_y$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+edx]
	sar	edx, 3
	add	eax, edx
	mov	DWORD PTR _epol_args$[ebp+20], eax
	mov	eax, DWORD PTR _pb_w$[ebp]
	mov	DWORD PTR _epol_args$[ebp+24], eax
	mov	eax, DWORD PTR _pb_h$[ebp]
	mov	DWORD PTR _epol_args$[ebp+28], eax
	mov	DWORD PTR _epol_args$[ebp+32], 1
	mov	DWORD PTR _epol_args$[ebp+36], 2
	mov	DWORD PTR _epol_args$[ebp+40], 1
	mov	DWORD PTR _epol_args$[ebp+44], 2
	mov	DWORD PTR _epol_args$[ebp+48], 3
	mov	DWORD PTR _epol_args$[ebp+52], 0
	mov	DWORD PTR _epol_args$[ebp+56], 0
	mov	DWORD PTR _epol_args$[ebp+60], 0
	mov	DWORD PTR _epol_args$[ebp+64], 0

; 195  :     .src = ref->u,
; 196  :     .src_w = ref->width / 2,
; 197  :     .src_h = ref->height / 2,
; 198  :     .src_s = ref->stride / 2,
; 199  :     .blk_x = (state->tile->offset_x + pu_x) / 2 + (mv_param[0] >> 3),
; 200  :     .blk_y = (state->tile->offset_y + pu_y) / 2 + (mv_param[1] >> 3),
; 201  :     .blk_w = pb_w,
; 202  :     .blk_h = pb_h,
; 203  :     .pad_l = KVZ_CHROMA_FILTER_OFFSET,
; 204  :     .pad_r = KVZ_EXT_PADDING_CHROMA - KVZ_CHROMA_FILTER_OFFSET,
; 205  :     .pad_t = KVZ_CHROMA_FILTER_OFFSET,
; 206  :     .pad_b = KVZ_EXT_PADDING_CHROMA - KVZ_CHROMA_FILTER_OFFSET,
; 207  :     .pad_b_simd = 3 // Three rows for AVX2
; 208  :   };
; 209  : 
; 210  :   // Initialize separately. Gets rid of warning
; 211  :   // about using nonstandard extension.
; 212  :   epol_args.buf = ext_buffer;

	lea	eax, DWORD PTR _ext_buffer$[ebp]
	mov	DWORD PTR _epol_args$[ebp+52], eax

; 213  :   epol_args.ext = &ext;

	lea	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR _epol_args$[ebp+56], eax

; 214  :   epol_args.ext_origin = &ext_origin;

	lea	eax, DWORD PTR _ext_origin$[ebp]
	mov	DWORD PTR _epol_args$[ebp+60], eax

; 215  :   epol_args.ext_s = &ext_s;

	lea	eax, DWORD PTR _ext_s$[ebp]
	mov	DWORD PTR _epol_args$[ebp+64], eax

; 216  : 
; 217  :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 218  :   kvz_sample_octpel_chroma(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pb_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_octpel_chroma
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 219  :     ext_origin,
; 220  :     ext_s,
; 221  :     pb_w,
; 222  :     pb_h,
; 223  :     out->u,
; 224  :     out_stride,
; 225  :     mv_frac_x,
; 226  :     mv_frac_y,
; 227  :     mv_param);
; 228  : 
; 229  :   // Chroma V
; 230  :   epol_args.src = ref->v;

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _epol_args$[ebp], ecx

; 231  :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 232  :   kvz_sample_octpel_chroma(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pb_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pb_w$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_octpel_chroma
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 233  :     ext_origin,
; 234  :     ext_s,
; 235  :     pb_w,
; 236  :     pb_h,
; 237  :     out->v,
; 238  :     out_stride,
; 239  :     mv_frac_x,
; 240  :     mv_frac_y,
; 241  :     mv_param);
; 242  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@inter_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2080				; 00000820H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@inter_reco:
	DD	5
	DD	$LN8@inter_reco
$LN8@inter_reco:
	DD	-1388					; fffffa94H
	DD	1331					; 00000533H
	DD	$LN3@inter_reco
	DD	-1400					; fffffa88H
	DD	4
	DD	$LN4@inter_reco
	DD	-1412					; fffffa7cH
	DD	4
	DD	$LN5@inter_reco
	DD	-1424					; fffffa70H
	DD	4
	DD	$LN6@inter_reco
	DD	-1500					; fffffa24H
	DD	68					; 00000044H
	DD	$LN7@inter_reco
$LN7@inter_reco:
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN6@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	0
$LN5@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN4@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN3@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_inter_recon_frac_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_recon_frac_luma_hi
_TEXT	SEGMENT
_epol_args$ = -5260					; size = 68
_ext_s$ = -5184						; size = 4
_ext_origin$ = -5172					; size = 4
_ext$ = -5160						; size = 4
_ext_buffer$ = -5148					; size = 5113
_mv_frac_y$ = -24					; size = 4
_mv_frac_x$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_ref$ = 12						; size = 4
_xpos$ = 16						; size = 4
_ypos$ = 20						; size = 4
_block_width$ = 24					; size = 4
_block_height$ = 28					; size = 4
_mv_param$ = 32						; size = 4
_out$ = 36						; size = 4
_out_stride$ = 40					; size = 4
_inter_recon_frac_luma_hi PROC				; COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 6800				; 00001a90H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-6800]
	mov	ecx, 1700				; 000006a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 121  :   int mv_frac_x = (mv_param[0] & 3);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _mv_frac_x$[ebp], eax

; 122  :   int mv_frac_y = (mv_param[1] & 3);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 3
	mov	DWORD PTR _mv_frac_y$[ebp], edx

; 123  : 
; 124  :   // Space for extrapolated pixels and the part from the picture.
; 125  :   // Some extra for AVX2.
; 126  :   // The extrapolation function will set the pointers and stride.
; 127  :   kvz_pixel ext_buffer[KVZ_IPOL_MAX_INPUT_SIZE_LUMA_SIMD];
; 128  :   kvz_pixel *ext = NULL;

	mov	DWORD PTR _ext$[ebp], 0

; 129  :   kvz_pixel *ext_origin = NULL;

	mov	DWORD PTR _ext_origin$[ebp], 0

; 130  :   int ext_s = 0;

	mov	DWORD PTR _ext_s$[ebp], 0

; 131  :   kvz_epol_args epol_args = {

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _epol_args$[ebp], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _epol_args$[ebp+4], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _epol_args$[ebp+8], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _epol_args$[ebp+12], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _xpos$[ebp]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _mv_param$[ebp]
	movsx	ecx, WORD PTR [eax+ecx]
	sar	ecx, 2
	add	edx, ecx
	mov	DWORD PTR _epol_args$[ebp+16], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _ypos$[ebp]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sar	eax, 2
	add	edx, eax
	mov	DWORD PTR _epol_args$[ebp+20], edx
	mov	eax, DWORD PTR _block_width$[ebp]
	mov	DWORD PTR _epol_args$[ebp+24], eax
	mov	eax, DWORD PTR _block_height$[ebp]
	mov	DWORD PTR _epol_args$[ebp+28], eax
	mov	DWORD PTR _epol_args$[ebp+32], 3
	mov	DWORD PTR _epol_args$[ebp+36], 4
	mov	DWORD PTR _epol_args$[ebp+40], 3
	mov	DWORD PTR _epol_args$[ebp+44], 4
	mov	DWORD PTR _epol_args$[ebp+48], 1
	mov	DWORD PTR _epol_args$[ebp+52], 0
	mov	DWORD PTR _epol_args$[ebp+56], 0
	mov	DWORD PTR _epol_args$[ebp+60], 0
	mov	DWORD PTR _epol_args$[ebp+64], 0

; 132  :     .src = ref->y,
; 133  :     .src_w = ref->width,
; 134  :     .src_h = ref->height,
; 135  :     .src_s = ref->stride,
; 136  :     .blk_x = state->tile->offset_x + xpos + (mv_param[0] >> 2),
; 137  :     .blk_y = state->tile->offset_y + ypos + (mv_param[1] >> 2),
; 138  :     .blk_w = block_width,
; 139  :     .blk_h = block_height,
; 140  :     .pad_l = KVZ_LUMA_FILTER_OFFSET,
; 141  :     .pad_r = KVZ_EXT_PADDING_LUMA - KVZ_LUMA_FILTER_OFFSET,
; 142  :     .pad_t = KVZ_LUMA_FILTER_OFFSET,
; 143  :     .pad_b = KVZ_EXT_PADDING_LUMA - KVZ_LUMA_FILTER_OFFSET,
; 144  :     .pad_b_simd = 1 // One row for AVX2
; 145  :   };
; 146  : 
; 147  :   // Initialize separately. Gets rid of warning
; 148  :   // about using nonstandard extension.
; 149  :   epol_args.buf = ext_buffer;

	lea	eax, DWORD PTR _ext_buffer$[ebp]
	mov	DWORD PTR _epol_args$[ebp+52], eax

; 150  :   epol_args.ext = &ext;

	lea	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR _epol_args$[ebp+56], eax

; 151  :   epol_args.ext_origin = &ext_origin;

	lea	eax, DWORD PTR _ext_origin$[ebp]
	mov	DWORD PTR _epol_args$[ebp+60], eax

; 152  :   epol_args.ext_s = &ext_s;

	lea	eax, DWORD PTR _ext_s$[ebp]
	mov	DWORD PTR _epol_args$[ebp+64], eax

; 153  : 
; 154  :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 155  :   kvz_sample_quarterpel_luma_hi(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_quarterpel_luma_hi
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 156  :     ext_origin,
; 157  :     ext_s,
; 158  :     block_width,
; 159  :     block_height,
; 160  :     out->y,
; 161  :     out_stride,
; 162  :     mv_frac_x,
; 163  :     mv_frac_y,
; 164  :     mv_param);
; 165  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@inter_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 6800				; 00001a90H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@inter_reco:
	DD	5
	DD	$LN8@inter_reco
$LN8@inter_reco:
	DD	-5148					; ffffebe4H
	DD	5113					; 000013f9H
	DD	$LN3@inter_reco
	DD	-5160					; ffffebd8H
	DD	4
	DD	$LN4@inter_reco
	DD	-5172					; ffffebccH
	DD	4
	DD	$LN5@inter_reco
	DD	-5184					; ffffebc0H
	DD	4
	DD	$LN6@inter_reco
	DD	-5260					; ffffeb74H
	DD	68					; 00000044H
	DD	$LN7@inter_reco
$LN7@inter_reco:
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN6@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	0
$LN5@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN4@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN3@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_inter_recon_frac_luma_hi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _inter_recon_frac_luma
_TEXT	SEGMENT
_epol_args$ = -5260					; size = 68
_ext_s$ = -5184						; size = 4
_ext_origin$ = -5172					; size = 4
_ext$ = -5160						; size = 4
_ext_buffer$ = -5148					; size = 5113
_mv_frac_y$ = -24					; size = 4
_mv_frac_x$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_ref$ = 12						; size = 4
_xpos$ = 16						; size = 4
_ypos$ = 20						; size = 4
_block_width$ = 24					; size = 4
_block_height$ = 28					; size = 4
_mv_param$ = 32						; size = 4
_out$ = 36						; size = 4
_out_stride$ = 40					; size = 4
_inter_recon_frac_luma PROC				; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 6800				; 00001a90H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-6800]
	mov	ecx, 1700				; 000006a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 65   :   int mv_frac_x = (mv_param[0] & 3);

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	and	eax, 3
	mov	DWORD PTR _mv_frac_x$[ebp], eax

; 66   :   int mv_frac_y = (mv_param[1] & 3);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	and	edx, 3
	mov	DWORD PTR _mv_frac_y$[ebp], edx

; 67   : 
; 68   :   // Space for extrapolated pixels and the part from the picture.
; 69   :   // Some extra for AVX2.
; 70   :   // The extrapolation function will set the pointers and stride.
; 71   :   kvz_pixel ext_buffer[KVZ_IPOL_MAX_INPUT_SIZE_LUMA_SIMD];
; 72   :   kvz_pixel *ext = NULL;

	mov	DWORD PTR _ext$[ebp], 0

; 73   :   kvz_pixel *ext_origin = NULL;

	mov	DWORD PTR _ext_origin$[ebp], 0

; 74   :   int ext_s = 0;

	mov	DWORD PTR _ext_s$[ebp], 0

; 75   :   kvz_epol_args epol_args = {

	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _epol_args$[ebp], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _epol_args$[ebp+4], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _epol_args$[ebp+8], ecx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _epol_args$[ebp+12], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _xpos$[ebp]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _mv_param$[ebp]
	movsx	ecx, WORD PTR [eax+ecx]
	sar	ecx, 2
	add	edx, ecx
	mov	DWORD PTR _epol_args$[ebp+16], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _ypos$[ebp]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _mv_param$[ebp]
	movsx	eax, WORD PTR [ecx+eax]
	sar	eax, 2
	add	edx, eax
	mov	DWORD PTR _epol_args$[ebp+20], edx
	mov	eax, DWORD PTR _block_width$[ebp]
	mov	DWORD PTR _epol_args$[ebp+24], eax
	mov	eax, DWORD PTR _block_height$[ebp]
	mov	DWORD PTR _epol_args$[ebp+28], eax
	mov	DWORD PTR _epol_args$[ebp+32], 3
	mov	DWORD PTR _epol_args$[ebp+36], 4
	mov	DWORD PTR _epol_args$[ebp+40], 3
	mov	DWORD PTR _epol_args$[ebp+44], 4
	mov	DWORD PTR _epol_args$[ebp+48], 1
	mov	DWORD PTR _epol_args$[ebp+52], 0
	mov	DWORD PTR _epol_args$[ebp+56], 0
	mov	DWORD PTR _epol_args$[ebp+60], 0
	mov	DWORD PTR _epol_args$[ebp+64], 0

; 76   :     .src = ref->y,
; 77   :     .src_w = ref->width,
; 78   :     .src_h = ref->height,
; 79   :     .src_s = ref->stride,
; 80   :     .blk_x = state->tile->offset_x + xpos + (mv_param[0] >> 2),
; 81   :     .blk_y = state->tile->offset_y + ypos + (mv_param[1] >> 2),
; 82   :     .blk_w = block_width,
; 83   :     .blk_h = block_height,
; 84   :     .pad_l = KVZ_LUMA_FILTER_OFFSET,
; 85   :     .pad_r = KVZ_EXT_PADDING_LUMA - KVZ_LUMA_FILTER_OFFSET,
; 86   :     .pad_t = KVZ_LUMA_FILTER_OFFSET,
; 87   :     .pad_b = KVZ_EXT_PADDING_LUMA - KVZ_LUMA_FILTER_OFFSET,
; 88   :     .pad_b_simd = 1 // One row for AVX2
; 89   :   };
; 90   : 
; 91   :   // Initialize separately. Gets rid of warning
; 92   :   // about using nonstandard extension.
; 93   :   epol_args.buf = ext_buffer;

	lea	eax, DWORD PTR _ext_buffer$[ebp]
	mov	DWORD PTR _epol_args$[ebp+52], eax

; 94   :   epol_args.ext = &ext;

	lea	eax, DWORD PTR _ext$[ebp]
	mov	DWORD PTR _epol_args$[ebp+56], eax

; 95   :   epol_args.ext_origin = &ext_origin;

	lea	eax, DWORD PTR _ext_origin$[ebp]
	mov	DWORD PTR _epol_args$[ebp+60], eax

; 96   :   epol_args.ext_s = &ext_s;

	lea	eax, DWORD PTR _ext_s$[ebp]
	mov	DWORD PTR _epol_args$[ebp+64], eax

; 97   : 
; 98   :   kvz_get_extended_block(&epol_args);

	mov	esi, esp
	lea	eax, DWORD PTR _epol_args$[ebp]
	push	eax
	call	DWORD PTR _kvz_get_extended_block
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   :   kvz_sample_quarterpel_luma(state->encoder_control,

	mov	esi, esp
	mov	eax, DWORD PTR _mv_param$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _mv_frac_y$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _mv_frac_x$[ebp]
	push	edx
	movzx	eax, WORD PTR _out_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	movzx	edx, WORD PTR _ext_s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ext_origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _kvz_sample_quarterpel_luma
	add	esp, 40					; 00000028H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 100  :     ext_origin,
; 101  :     ext_s,
; 102  :     block_width,
; 103  :     block_height,
; 104  :     out->y,
; 105  :     out_stride,
; 106  :     mv_frac_x,
; 107  :     mv_frac_y,
; 108  :     mv_param);
; 109  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@inter_reco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 6800				; 00001a90H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@inter_reco:
	DD	5
	DD	$LN8@inter_reco
$LN8@inter_reco:
	DD	-5148					; ffffebe4H
	DD	5113					; 000013f9H
	DD	$LN3@inter_reco
	DD	-5160					; ffffebd8H
	DD	4
	DD	$LN4@inter_reco
	DD	-5172					; ffffebccH
	DD	4
	DD	$LN5@inter_reco
	DD	-5184					; ffffebc0H
	DD	4
	DD	$LN6@inter_reco
	DD	-5260					; ffffeb74H
	DD	68					; 00000044H
	DD	$LN7@inter_reco
$LN7@inter_reco:
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN6@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	0
$LN5@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN4@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN3@inter_reco:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_inter_recon_frac_luma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_get_merge_cand
_TEXT	SEGMENT
tv219 = -440						; size = 4
tv574 = -436						; size = 4
tv544 = -436						; size = 4
tv242 = -436						; size = 4
tv230 = -436						; size = 4
tv217 = -436						; size = 4
_ref_positive$1 = -236					; size = 4
_ref_negative$2 = -224					; size = 4
_j$3 = -212						; size = 4
_num_ref$ = -200					; size = 4
_j$4 = -185						; size = 1
_i$5 = -173						; size = 1
_idx$6 = -164						; size = 4
_cutoff$7 = -149					; size = 1
_temporal_cand$8 = -140					; size = 4
_reflist$9 = -128					; size = 4
_max_reflist$10 = -116					; size = 4
_can_use_tmvp$ = -101					; size = 1
_b$ = -92						; size = 4
_a$ = -80						; size = 4
_max_num_cands$ = -65					; size = 1
_merge_cand$ = -56					; size = 28
_zero_idx$ = -17					; size = 1
_candidates$ = -5					; size = 1
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_use_a1$ = 28						; size = 1
_use_b1$ = 32						; size = 1
_mv_cand$ = 36						; size = 4
_lcu$ = 40						; size = 4
_kvz_inter_get_merge_cand PROC				; COMDAT

; 1446 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1447 :   uint8_t candidates = 0;

	mov	BYTE PTR _candidates$[ebp], 0

; 1448 :   int8_t zero_idx = 0;

	mov	BYTE PTR _zero_idx$[ebp], 0

; 1449 : 
; 1450 :   merge_candidates_t merge_cand = { {0, 0}, {0, 0, 0}, 0, 0 };

	mov	DWORD PTR _merge_cand$[ebp], 0
	mov	DWORD PTR _merge_cand$[ebp+4], 0
	mov	DWORD PTR _merge_cand$[ebp+8], 0
	mov	DWORD PTR _merge_cand$[ebp+12], 0
	mov	DWORD PTR _merge_cand$[ebp+16], 0
	mov	DWORD PTR _merge_cand$[ebp+20], 0
	mov	DWORD PTR _merge_cand$[ebp+24], 0

; 1451 :   const uint8_t max_num_cands = state->encoder_control->cfg.max_merge;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+2441]
	mov	BYTE PTR _max_num_cands$[ebp], dl

; 1452 :   get_spatial_merge_candidates(x, y, width, height,

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_get_spatial_merge_candidates
	add	esp, 32					; 00000020H

; 1453 :                                state->tile->frame->width,
; 1454 :                                state->tile->frame->height,
; 1455 :                                lcu,
; 1456 :                                &merge_cand);
; 1457 : 
; 1458 :   const cu_info_t **a = merge_cand.a;

	lea	eax, DWORD PTR _merge_cand$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 1459 :   const cu_info_t **b = merge_cand.b;

	lea	eax, DWORD PTR _merge_cand$[ebp+8]
	mov	DWORD PTR _b$[ebp], eax

; 1460 : 
; 1461 :   if (!use_a1) a[1] = NULL;

	movzx	eax, BYTE PTR _use_a1$[ebp]
	test	eax, eax
	jne	SHORT $LN13@kvz_inter_
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+eax], 0
$LN13@kvz_inter_:

; 1462 :   if (!use_b1) b[1] = NULL;

	movzx	eax, BYTE PTR _use_b1$[ebp]
	test	eax, eax
	jne	SHORT $LN14@kvz_inter_
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+eax], 0
$LN14@kvz_inter_:

; 1463 : 
; 1464 :   if (add_merge_candidate(a[1], NULL, NULL, &mv_cand[candidates], candidates, max_num_cands)) candidates++;

	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _candidates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_add_merge_candidate
	add	esp, 24					; 00000018H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@kvz_inter_
	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN15@kvz_inter_:

; 1465 :   if (add_merge_candidate(b[1], a[1], NULL, &mv_cand[candidates], candidates, max_num_cands)) candidates++;

	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _candidates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	push	0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_add_merge_candidate
	add	esp, 24					; 00000018H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@kvz_inter_
	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN16@kvz_inter_:

; 1466 :   if (add_merge_candidate(b[0], b[1], NULL, &mv_cand[candidates], candidates, max_num_cands)) candidates++;

	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _candidates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	push	0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_add_merge_candidate
	add	esp, 24					; 00000018H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@kvz_inter_
	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN17@kvz_inter_:

; 1467 :   if (add_merge_candidate(a[0], a[1], NULL, &mv_cand[candidates], candidates, max_num_cands)) candidates++;

	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _candidates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	push	0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_add_merge_candidate
	add	esp, 24					; 00000018H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@kvz_inter_
	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN18@kvz_inter_:

; 1468 :   if (candidates < 4 &&

	movzx	eax, BYTE PTR _candidates$[ebp]
	cmp	eax, 4
	jge	SHORT $LN19@kvz_inter_
	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _candidates$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_add_merge_candidate
	add	esp, 24					; 00000018H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@kvz_inter_

; 1469 :       add_merge_candidate(b[2], a[1], b[1], &mv_cand[candidates], candidates, max_num_cands)) candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN19@kvz_inter_:

; 1470 : 
; 1471 :   bool can_use_tmvp =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2368], 0
	je	SHORT $LN34@kvz_inter_
	movzx	edx, BYTE PTR _candidates$[ebp]
	movzx	eax, BYTE PTR _max_num_cands$[ebp]
	cmp	edx, eax
	jge	SHORT $LN34@kvz_inter_
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+40]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN34@kvz_inter_
	mov	DWORD PTR tv217[ebp], 1
	jmp	SHORT $LN35@kvz_inter_
$LN34@kvz_inter_:
	mov	DWORD PTR tv217[ebp], 0
$LN35@kvz_inter_:
	cmp	DWORD PTR tv217[ebp], 0
	jne	SHORT $LN36@kvz_inter_
	mov	DWORD PTR tv219[ebp], 0
	jmp	SHORT $LN37@kvz_inter_
$LN36@kvz_inter_:
	mov	DWORD PTR tv219[ebp], 1
$LN37@kvz_inter_:
	mov	cl, BYTE PTR tv219[ebp]
	mov	BYTE PTR _can_use_tmvp$[ebp], cl

; 1472 :     state->encoder_control->cfg.tmvp_enable &&
; 1473 :     candidates < max_num_cands &&
; 1474 :     state->frame->ref->used_size;
; 1475 : 
; 1476 :   if (can_use_tmvp) {

	movzx	eax, BYTE PTR _can_use_tmvp$[ebp]
	test	eax, eax
	je	$LN20@kvz_inter_

; 1477 :     mv_cand[candidates].dir = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 1478 : 
; 1479 :     const int max_reflist = (state->frame->slicetype == KVZ_SLICE_B ? 1 : 0);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN38@kvz_inter_
	mov	DWORD PTR tv230[ebp], 1
	jmp	SHORT $LN39@kvz_inter_
$LN38@kvz_inter_:
	mov	DWORD PTR tv230[ebp], 0
$LN39@kvz_inter_:
	mov	edx, DWORD PTR tv230[ebp]
	mov	DWORD PTR _max_reflist$10[ebp], edx

; 1480 :     for (int reflist = 0; reflist <= max_reflist; reflist++) {

	mov	DWORD PTR _reflist$9[ebp], 0
	jmp	SHORT $LN4@kvz_inter_
$LN2@kvz_inter_:
	mov	eax, DWORD PTR _reflist$9[ebp]
	add	eax, 1
	mov	DWORD PTR _reflist$9[ebp], eax
$LN4@kvz_inter_:
	mov	eax, DWORD PTR _reflist$9[ebp]
	cmp	eax, DWORD PTR _max_reflist$10[ebp]
	jg	$LN3@kvz_inter_

; 1481 :       // Fetch temporal candidates for the current CU
; 1482 :       get_temporal_merge_candidates(state, x, y, width, height, 1, 0, &merge_cand);

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_temporal_merge_candidates
	add	esp, 32					; 00000020H

; 1483 :       // TODO: enable L1 TMVP candidate
; 1484 :       // get_temporal_merge_candidates(state, x, y, width, height, 2, 0, &merge_cand);
; 1485 : 
; 1486 :       const cu_info_t *temporal_cand =

	cmp	DWORD PTR _merge_cand$[ebp+24], 0
	je	SHORT $LN40@kvz_inter_
	mov	eax, DWORD PTR _merge_cand$[ebp+24]
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN41@kvz_inter_
$LN40@kvz_inter_:
	mov	ecx, DWORD PTR _merge_cand$[ebp+20]
	mov	DWORD PTR tv242[ebp], ecx
$LN41@kvz_inter_:
	mov	edx, DWORD PTR tv242[ebp]
	mov	DWORD PTR _temporal_cand$8[ebp], edx

; 1487 :         (merge_cand.h != NULL) ? merge_cand.h : merge_cand.c3;
; 1488 : 
; 1489 :       if (add_temporal_candidate(state,

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, DWORD PTR _reflist$9[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _reflist$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _temporal_cand$8[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reflist$9[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR [ecx+edx+45]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_add_temporal_candidate
	add	esp, 20					; 00000014H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN21@kvz_inter_

; 1490 :                                  // Reference index 0 is always used for
; 1491 :                                  // the temporal merge candidate.
; 1492 :                                  state->frame->ref_LX[reflist][0],
; 1493 :                                  temporal_cand,
; 1494 :                                  reflist,
; 1495 :                                  mv_cand[candidates].mv[reflist])) {
; 1496 :         mv_cand[candidates].ref[reflist] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, DWORD PTR _reflist$9[ebp]
	mov	BYTE PTR [ecx+edx+1], 0

; 1497 :         mv_cand[candidates].dir |= (1 << reflist);

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	edx, eax, 12
	mov	eax, 1
	mov	ecx, DWORD PTR _reflist$9[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _mv_cand$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	or	edx, eax
	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _mv_cand$[ebp]
	mov	BYTE PTR [eax+ecx], dl
$LN21@kvz_inter_:

; 1498 :       }
; 1499 :     }

	jmp	$LN2@kvz_inter_
$LN3@kvz_inter_:

; 1500 : 
; 1501 :     if (mv_cand[candidates].dir != 0) candidates++;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN20@kvz_inter_
	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN20@kvz_inter_:

; 1502 :   }
; 1503 : 
; 1504 :   if (candidates < max_num_cands && state->frame->slicetype == KVZ_SLICE_B) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	movzx	ecx, BYTE PTR _max_num_cands$[ebp]
	cmp	eax, ecx
	jge	$LN23@kvz_inter_
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	$LN23@kvz_inter_

; 1505 :     #define NUM_PRIORITY_LIST 12;
; 1506 :     static const uint8_t priorityList0[] = { 0, 1, 0, 2, 1, 2, 0, 3, 1, 3, 2, 3 };
; 1507 :     static const uint8_t priorityList1[] = { 1, 0, 2, 0, 2, 1, 3, 0, 3, 1, 3, 2 };
; 1508 :     uint8_t cutoff = candidates;

	mov	al, BYTE PTR _candidates$[ebp]
	mov	BYTE PTR _cutoff$7[ebp], al

; 1509 :     for (int32_t idx = 0; idx<cutoff*(cutoff - 1) && candidates != max_num_cands; idx++) {

	mov	DWORD PTR _idx$6[ebp], 0
	jmp	SHORT $LN7@kvz_inter_
$LN5@kvz_inter_:
	mov	eax, DWORD PTR _idx$6[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$6[ebp], eax
$LN7@kvz_inter_:
	movzx	eax, BYTE PTR _cutoff$7[ebp]
	movzx	ecx, BYTE PTR _cutoff$7[ebp]
	sub	ecx, 1
	imul	eax, ecx
	cmp	DWORD PTR _idx$6[ebp], eax
	jge	$LN23@kvz_inter_
	movzx	eax, BYTE PTR _candidates$[ebp]
	movzx	ecx, BYTE PTR _max_num_cands$[ebp]
	cmp	eax, ecx
	je	$LN23@kvz_inter_

; 1510 :       uint8_t i = priorityList0[idx];

	mov	eax, DWORD PTR _idx$6[ebp]
	mov	cl, BYTE PTR ?priorityList0@?6??kvz_inter_get_merge_cand@@9@9[eax]
	mov	BYTE PTR _i$5[ebp], cl

; 1511 :       uint8_t j = priorityList1[idx];

	mov	eax, DWORD PTR _idx$6[ebp]
	mov	cl, BYTE PTR ?priorityList1@?6??kvz_inter_get_merge_cand@@9@9[eax]
	mov	BYTE PTR _j$4[ebp], cl

; 1512 :       if (i >= candidates || j >= candidates) break;

	movzx	eax, BYTE PTR _i$5[ebp]
	movzx	ecx, BYTE PTR _candidates$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN25@kvz_inter_
	movzx	eax, BYTE PTR _j$4[ebp]
	movzx	ecx, BYTE PTR _candidates$[ebp]
	cmp	eax, ecx
	jl	SHORT $LN24@kvz_inter_
$LN25@kvz_inter_:
	jmp	$LN23@kvz_inter_
$LN24@kvz_inter_:

; 1513 : 
; 1514 :       // Find one L0 and L1 candidate according to the priority list
; 1515 :       if ((mv_cand[i].dir & 0x1) && (mv_cand[j].dir & 0x2)) {

	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 1
	je	$LN26@kvz_inter_
	movzx	eax, BYTE PTR _j$4[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 2
	je	$LN26@kvz_inter_

; 1516 :         mv_cand[candidates].dir = 3;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	BYTE PTR [edx+ecx], 3

; 1517 : 
; 1518 :         // get Mv from cand[i] and cand[j]
; 1519 :         mv_cand[candidates].mv[0][0]  = mv_cand[i].mv[0][0];

	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	imul	eax, edx, 0
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	edx, edx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	lea	edx, DWORD PTR [edx+esi+4]
	mov	esi, 2
	imul	esi, esi, 0
	mov	ax, WORD PTR [ecx+eax]
	mov	WORD PTR [edx+esi], ax

; 1520 :         mv_cand[candidates].mv[0][1]  = mv_cand[i].mv[0][1];

	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	shl	edx, 0
	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	eax, eax, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	mov	esi, 4
	imul	esi, esi, 0
	lea	eax, DWORD PTR [eax+esi+4]
	mov	esi, 2
	shl	esi, 0
	mov	cx, WORD PTR [ecx+edx]
	mov	WORD PTR [eax+esi], cx

; 1521 :         mv_cand[candidates].mv[1][0]  = mv_cand[j].mv[1][0];

	movzx	eax, BYTE PTR _j$4[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	ecx, BYTE PTR _candidates$[ebp]
	imul	ecx, ecx, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 4
	shl	esi, 0
	lea	ecx, DWORD PTR [ecx+esi+4]
	mov	esi, 2
	imul	esi, esi, 0
	mov	dx, WORD PTR [eax+edx]
	mov	WORD PTR [ecx+esi], dx

; 1522 :         mv_cand[candidates].mv[1][1]  = mv_cand[j].mv[1][1];

	movzx	eax, BYTE PTR _j$4[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, 2
	shl	ecx, 0
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	edx, edx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 4
	shl	esi, 0
	lea	edx, DWORD PTR [edx+esi+4]
	mov	esi, 2
	shl	esi, 0
	mov	ax, WORD PTR [eax+ecx]
	mov	WORD PTR [edx+esi], ax

; 1523 :         mv_cand[candidates].ref[0]    = mv_cand[i].ref[0];

	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	edx, edx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 1
	imul	esi, esi, 0
	mov	al, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR [edx+esi+1], al

; 1524 :         mv_cand[candidates].ref[1]    = mv_cand[j].ref[1];

	movzx	eax, BYTE PTR _j$4[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	eax, eax, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	mov	esi, 1
	shl	esi, 0
	mov	cl, BYTE PTR [ecx+edx+1]
	mov	BYTE PTR [eax+esi+1], cl

; 1525 : 
; 1526 :         if (state->frame->ref_LX[0][mv_cand[i].ref[0]] ==
; 1527 :             state->frame->ref_LX[1][mv_cand[j].ref[1]]
; 1528 :             &&
; 1529 :             mv_cand[i].mv[0][0] == mv_cand[j].mv[1][0] && 

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	movzx	edx, BYTE PTR _i$5[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	mov	edx, 1
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [eax+edx+1]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	lea	eax, DWORD PTR [eax+edx+45]
	movzx	edx, BYTE PTR _j$4[ebp]
	imul	edx, edx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 1
	shl	esi, 0
	movzx	edx, BYTE PTR [edx+esi+1]
	movzx	eax, BYTE PTR [eax+edx]
	cmp	ecx, eax
	jne	$LN27@kvz_inter_
	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	imul	eax, edx, 0
	movsx	ecx, WORD PTR [ecx+eax]
	movzx	edx, BYTE PTR _j$4[ebp]
	imul	eax, edx, 12
	add	eax, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR [eax+edx+4]
	mov	edx, 2
	imul	edx, edx, 0
	movsx	eax, WORD PTR [eax+edx]
	cmp	ecx, eax
	jne	SHORT $LN27@kvz_inter_
	movzx	eax, BYTE PTR _i$5[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR [ecx+edx]
	movzx	ecx, BYTE PTR _j$4[ebp]
	imul	edx, ecx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR [edx+ecx+4]
	mov	ecx, 2
	shl	ecx, 0
	movsx	edx, WORD PTR [edx+ecx]
	cmp	eax, edx
	jne	SHORT $LN27@kvz_inter_

; 1530 :             mv_cand[i].mv[0][1] == mv_cand[j].mv[1][1]) {
; 1531 :           // Not a candidate
; 1532 :         } else {

	jmp	SHORT $LN26@kvz_inter_
$LN27@kvz_inter_:

; 1533 :           candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al
$LN26@kvz_inter_:

; 1534 :         }
; 1535 :       }
; 1536 :     }

	jmp	$LN5@kvz_inter_
$LN23@kvz_inter_:

; 1537 :   }
; 1538 : 
; 1539 :   int num_ref = state->frame->ref->used_size;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _num_ref$[ebp], eax

; 1540 : 
; 1541 :   if (candidates < max_num_cands && state->frame->slicetype == KVZ_SLICE_B) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	movzx	ecx, BYTE PTR _max_num_cands$[ebp]
	cmp	eax, ecx
	jge	$LN11@kvz_inter_
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	$LN11@kvz_inter_

; 1542 :     int j;
; 1543 :     int ref_negative = 0;

	mov	DWORD PTR _ref_negative$2[ebp], 0

; 1544 :     int ref_positive = 0;

	mov	DWORD PTR _ref_positive$1[ebp], 0

; 1545 :     for (j = 0; j < state->frame->ref->used_size; j++) {

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN10@kvz_inter_
$LN8@kvz_inter_:
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN10@kvz_inter_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _j$3[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN9@kvz_inter_

; 1546 :       if (state->frame->ref->pocs[j] < state->frame->poc) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _j$3[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN30@kvz_inter_

; 1547 :         ref_negative++;

	mov	eax, DWORD PTR _ref_negative$2[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_negative$2[ebp], eax

; 1548 :       } else {

	jmp	SHORT $LN31@kvz_inter_
$LN30@kvz_inter_:

; 1549 :         ref_positive++;

	mov	eax, DWORD PTR _ref_positive$1[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_positive$1[ebp], eax
$LN31@kvz_inter_:

; 1550 :       }
; 1551 :     }

	jmp	SHORT $LN8@kvz_inter_
$LN9@kvz_inter_:

; 1552 :     num_ref = MIN(ref_negative, ref_positive);

	mov	eax, DWORD PTR _ref_negative$2[ebp]
	cmp	eax, DWORD PTR _ref_positive$1[ebp]
	jge	SHORT $LN42@kvz_inter_
	mov	ecx, DWORD PTR _ref_negative$2[ebp]
	mov	DWORD PTR tv544[ebp], ecx
	jmp	SHORT $LN43@kvz_inter_
$LN42@kvz_inter_:
	mov	edx, DWORD PTR _ref_positive$1[ebp]
	mov	DWORD PTR tv544[ebp], edx
$LN43@kvz_inter_:
	mov	eax, DWORD PTR tv544[ebp]
	mov	DWORD PTR _num_ref$[ebp], eax
$LN11@kvz_inter_:

; 1553 :   }
; 1554 : 
; 1555 :   // Add (0,0) prediction
; 1556 :   while (candidates != max_num_cands) {

	movzx	eax, BYTE PTR _candidates$[ebp]
	movzx	ecx, BYTE PTR _max_num_cands$[ebp]
	cmp	eax, ecx
	je	$LN12@kvz_inter_

; 1557 :     mv_cand[candidates].mv[0][0] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	imul	eax, edx, 0
	xor	edx, edx
	mov	WORD PTR [ecx+eax], dx

; 1558 :     mv_cand[candidates].mv[0][1] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+4]
	mov	edx, 2
	shl	edx, 0
	xor	eax, eax
	mov	WORD PTR [ecx+edx], ax

; 1559 :     mv_cand[candidates].ref[0] = (zero_idx >= num_ref - 1) ? 0 : zero_idx;

	movsx	eax, BYTE PTR _zero_idx$[ebp]
	mov	ecx, DWORD PTR _num_ref$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jl	SHORT $LN44@kvz_inter_
	mov	DWORD PTR tv574[ebp], 0
	jmp	SHORT $LN45@kvz_inter_
$LN44@kvz_inter_:
	movsx	edx, BYTE PTR _zero_idx$[ebp]
	mov	DWORD PTR tv574[ebp], edx
$LN45@kvz_inter_:
	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	mov	dl, BYTE PTR tv574[ebp]
	mov	BYTE PTR [ecx+eax+1], dl

; 1560 :     mv_cand[candidates].ref[1] = mv_cand[candidates].ref[0];

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	edx, BYTE PTR _candidates$[ebp]
	imul	edx, edx, 12
	add	edx, DWORD PTR _mv_cand$[ebp]
	mov	esi, 1
	shl	esi, 0
	mov	al, BYTE PTR [ecx+eax+1]
	mov	BYTE PTR [edx+esi+1], al

; 1561 :     mv_cand[candidates].dir = 1;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	BYTE PTR [edx+ecx], 1

; 1562 :     if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	SHORT $LN32@kvz_inter_

; 1563 :       mv_cand[candidates].mv[1][0] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, 2
	imul	edx, ecx, 0
	xor	ecx, ecx
	mov	WORD PTR [eax+edx], cx

; 1564 :       mv_cand[candidates].mv[1][1] = 0;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _mv_cand$[ebp]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+4]
	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	WORD PTR [eax+ecx], dx

; 1565 :       mv_cand[candidates].dir = 3;

	movzx	eax, BYTE PTR _candidates$[ebp]
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _mv_cand$[ebp]
	mov	BYTE PTR [edx+ecx], 3
$LN32@kvz_inter_:

; 1566 :     }
; 1567 :     zero_idx++;

	mov	al, BYTE PTR _zero_idx$[ebp]
	add	al, 1
	mov	BYTE PTR _zero_idx$[ebp], al

; 1568 :     candidates++;

	mov	al, BYTE PTR _candidates$[ebp]
	add	al, 1
	mov	BYTE PTR _candidates$[ebp], al

; 1569 :   }

	jmp	$LN11@kvz_inter_
$LN12@kvz_inter_:

; 1570 : 
; 1571 :   return candidates;

	mov	al, BYTE PTR _candidates$[ebp]

; 1572 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@kvz_inter_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN48@kvz_inter_:
	DD	1
	DD	$LN47@kvz_inter_
$LN47@kvz_inter_:
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN46@kvz_inter_
$LN46@kvz_inter_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_kvz_inter_get_merge_cand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_get_mv_cand_cua
_TEXT	SEGMENT
_cua$ = -44						; size = 4
_merge_cand$ = -32					; size = 28
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_mv_cand$ = 28						; size = 4
_cur_cu$ = 32						; size = 4
_reflist$ = 36						; size = 1
_kvz_inter_get_mv_cand_cua PROC				; COMDAT

; 1373 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1374 :   merge_candidates_t merge_cand = { {0, 0}, {0, 0, 0}, 0, 0 };

	mov	DWORD PTR _merge_cand$[ebp], 0
	mov	DWORD PTR _merge_cand$[ebp+4], 0
	mov	DWORD PTR _merge_cand$[ebp+8], 0
	mov	DWORD PTR _merge_cand$[ebp+12], 0
	mov	DWORD PTR _merge_cand$[ebp+16], 0
	mov	DWORD PTR _merge_cand$[ebp+20], 0
	mov	DWORD PTR _merge_cand$[ebp+24], 0

; 1375 : 
; 1376 :   const cu_array_t *cua = state->tile->frame->cu_array;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cua$[ebp], eax

; 1377 :   get_spatial_merge_candidates_cua(cua,

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cua$[ebp]
	push	ecx
	call	_get_spatial_merge_candidates_cua
	add	esp, 32					; 00000020H

; 1378 :                                    x, y, width, height,
; 1379 :                                    state->tile->frame->width, state->tile->frame->height,
; 1380 :                                    &merge_cand);
; 1381 :   get_temporal_merge_candidates(state, x, y, width, height, 1, 0, &merge_cand);

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_temporal_merge_candidates
	add	esp, 32					; 00000020H

; 1382 :   get_mv_cand_from_candidates(state, x, y, width, height, &merge_cand, cur_cu, reflist, mv_cand);

	mov	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _reflist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_mv_cand_from_candidates
	add	esp, 36					; 00000024H

; 1383 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@kvz_inter_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@kvz_inter_:
	DD	1
	DD	$LN4@kvz_inter_
$LN4@kvz_inter_:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN3@kvz_inter_
$LN3@kvz_inter_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_kvz_inter_get_mv_cand_cua ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_get_mv_cand
_TEXT	SEGMENT
_merge_cand$ = -32					; size = 28
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_mv_cand$ = 28						; size = 4
_cur_cu$ = 32						; size = 4
_lcu$ = 36						; size = 4
_reflist$ = 40						; size = 1
_kvz_inter_get_mv_cand PROC				; COMDAT

; 1341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1342 :   merge_candidates_t merge_cand = { {0, 0}, {0, 0, 0}, 0, 0 };

	mov	DWORD PTR _merge_cand$[ebp], 0
	mov	DWORD PTR _merge_cand$[ebp+4], 0
	mov	DWORD PTR _merge_cand$[ebp+8], 0
	mov	DWORD PTR _merge_cand$[ebp+12], 0
	mov	DWORD PTR _merge_cand$[ebp+16], 0
	mov	DWORD PTR _merge_cand$[ebp+20], 0
	mov	DWORD PTR _merge_cand$[ebp+24], 0

; 1343 : 
; 1344 :   get_spatial_merge_candidates(x, y, width, height,

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_get_spatial_merge_candidates
	add	esp, 32					; 00000020H

; 1345 :                                state->tile->frame->width,
; 1346 :                                state->tile->frame->height,
; 1347 :                                lcu,
; 1348 :                                &merge_cand);
; 1349 :   get_temporal_merge_candidates(state, x, y, width, height, 1, 0, &merge_cand);

	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_temporal_merge_candidates
	add	esp, 32					; 00000020H

; 1350 :   get_mv_cand_from_candidates(state, x, y, width, height, &merge_cand, cur_cu, reflist, mv_cand);

	mov	eax, DWORD PTR _mv_cand$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _reflist$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_cu$[ebp]
	push	edx
	lea	eax, DWORD PTR _merge_cand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_mv_cand_from_candidates
	add	esp, 36					; 00000024H

; 1351 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@kvz_inter_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@kvz_inter_:
	DD	1
	DD	$LN4@kvz_inter_
$LN4@kvz_inter_:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN3@kvz_inter_
$LN3@kvz_inter_:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_kvz_inter_get_mv_cand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_recon_bipred
_TEXT	SEGMENT
_im_flags_L1$ = -37240					; size = 4
_im_flags_L0$ = -37228					; size = 4
_im_L1$ = -37216					; size = 16
_im_L0$ = -37192					; size = 16
_px_L1$ = -37168					; size = 16
_px_L0$ = -37144					; size = 16
_im_buf_L1$ = -37120					; size = 12288
_im_buf_L0$ = -24768					; size = 12288
_px_buf_L1$ = -12416					; size = 6144
_px_buf_L0$ = -6208					; size = 6144
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_ref1$ = 12						; size = 4
_ref2$ = 16						; size = 4
_pu_x$ = 20						; size = 4
_pu_y$ = 24						; size = 4
_pu_w$ = 28						; size = 4
_pu_h$ = 32						; size = 4
_mv_param$ = 36						; size = 4
_lcu$ = 40						; size = 4
_predict_luma$ = 44					; size = 1
_predict_chroma$ = 48					; size = 1
_kvz_inter_recon_bipred PROC				; COMDAT

; 515  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -64				; ffffffc0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 38840				; 000097b8H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-38840]
	mov	ecx, 9710				; 000025eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 516  :   // Allocate maximum size arrays for interpolated and copied samples
; 517  :   ALIGNED(64) kvz_pixel px_buf_L0[LCU_LUMA_SIZE + 2 * LCU_CHROMA_SIZE];
; 518  :   ALIGNED(64) kvz_pixel px_buf_L1[LCU_LUMA_SIZE + 2 * LCU_CHROMA_SIZE];
; 519  :   ALIGNED(64) kvz_pixel_im im_buf_L0[LCU_LUMA_SIZE + 2 * LCU_CHROMA_SIZE];
; 520  :   ALIGNED(64) kvz_pixel_im im_buf_L1[LCU_LUMA_SIZE + 2 * LCU_CHROMA_SIZE];
; 521  : 
; 522  :   yuv_t px_L0;
; 523  :   px_L0.size = pu_w * pu_h;

	mov	eax, DWORD PTR _pu_w$[ebx]
	imul	eax, DWORD PTR _pu_h$[ebx]
	mov	DWORD PTR _px_L0$[ebp], eax

; 524  :   px_L0.y = &px_buf_L0[0];

	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _px_buf_L0$[ebp+ecx]
	mov	DWORD PTR _px_L0$[ebp+4], edx

; 525  :   px_L0.u = &px_buf_L0[LCU_LUMA_SIZE];

	mov	eax, 1
	shl	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _px_buf_L0$[ebp+eax]
	mov	DWORD PTR _px_L0$[ebp+8], ecx

; 526  :   px_L0.v = &px_buf_L0[LCU_LUMA_SIZE + LCU_CHROMA_SIZE];

	mov	eax, 1
	imul	ecx, eax, 5120
	lea	edx, DWORD PTR _px_buf_L0$[ebp+ecx]
	mov	DWORD PTR _px_L0$[ebp+12], edx

; 527  : 
; 528  :   yuv_t px_L1;
; 529  :   px_L1.size = pu_w * pu_h;

	mov	eax, DWORD PTR _pu_w$[ebx]
	imul	eax, DWORD PTR _pu_h$[ebx]
	mov	DWORD PTR _px_L1$[ebp], eax

; 530  :   px_L1.y = &px_buf_L1[0];

	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _px_buf_L1$[ebp+ecx]
	mov	DWORD PTR _px_L1$[ebp+4], edx

; 531  :   px_L1.u = &px_buf_L1[LCU_LUMA_SIZE];

	mov	eax, 1
	shl	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _px_buf_L1$[ebp+eax]
	mov	DWORD PTR _px_L1$[ebp+8], ecx

; 532  :   px_L1.v = &px_buf_L1[LCU_LUMA_SIZE + LCU_CHROMA_SIZE];

	mov	eax, 1
	imul	ecx, eax, 5120
	lea	edx, DWORD PTR _px_buf_L1$[ebp+ecx]
	mov	DWORD PTR _px_L1$[ebp+12], edx

; 533  : 
; 534  :   yuv_im_t im_L0;
; 535  :   im_L0.size = pu_w * pu_h;

	mov	eax, DWORD PTR _pu_w$[ebx]
	imul	eax, DWORD PTR _pu_h$[ebx]
	mov	DWORD PTR _im_L0$[ebp], eax

; 536  :   im_L0.y = &im_buf_L0[0];

	mov	eax, 2
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _im_buf_L0$[ebp+ecx]
	mov	DWORD PTR _im_L0$[ebp+4], edx

; 537  :   im_L0.u = &im_buf_L0[LCU_LUMA_SIZE];

	mov	eax, 2
	shl	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _im_buf_L0$[ebp+eax]
	mov	DWORD PTR _im_L0$[ebp+8], ecx

; 538  :   im_L0.v = &im_buf_L0[LCU_LUMA_SIZE + LCU_CHROMA_SIZE];

	mov	eax, 2
	imul	ecx, eax, 5120
	lea	edx, DWORD PTR _im_buf_L0$[ebp+ecx]
	mov	DWORD PTR _im_L0$[ebp+12], edx

; 539  : 
; 540  :   yuv_im_t im_L1;
; 541  :   im_L1.size = pu_w * pu_h;

	mov	eax, DWORD PTR _pu_w$[ebx]
	imul	eax, DWORD PTR _pu_h$[ebx]
	mov	DWORD PTR _im_L1$[ebp], eax

; 542  :   im_L1.y = &im_buf_L1[0];

	mov	eax, 2
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _im_buf_L1$[ebp+ecx]
	mov	DWORD PTR _im_L1$[ebp+4], edx

; 543  :   im_L1.u = &im_buf_L1[LCU_LUMA_SIZE];

	mov	eax, 2
	shl	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _im_buf_L1$[ebp+eax]
	mov	DWORD PTR _im_L1$[ebp+8], ecx

; 544  :   im_L1.v = &im_buf_L1[LCU_LUMA_SIZE + LCU_CHROMA_SIZE];

	mov	eax, 2
	imul	ecx, eax, 5120
	lea	edx, DWORD PTR _im_buf_L1$[ebp+ecx]
	mov	DWORD PTR _im_L1$[ebp+12], edx

; 545  : 
; 546  :   // Sample blocks from both reference picture lists.
; 547  :   // Flags state if the outputs were written to high-precision / interpolated sample buffers.
; 548  :   unsigned im_flags_L0 = inter_recon_unipred(state, ref1, pu_x, pu_y, pu_w, pu_h, pu_w, mv_param[0],

	movzx	eax, BYTE PTR _predict_chroma$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _predict_luma$[ebx]
	push	ecx
	lea	edx, DWORD PTR _im_L0$[ebp]
	push	edx
	lea	eax, DWORD PTR _px_L0$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _mv_param$[ebx]
	push	edx
	mov	eax, DWORD PTR _pu_w$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pu_h$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pu_w$[ebx]
	push	edx
	mov	eax, DWORD PTR _pu_y$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pu_x$[ebx]
	push	ecx
	mov	edx, DWORD PTR _ref1$[ebx]
	push	edx
	mov	eax, DWORD PTR _state$[ebx]
	push	eax
	call	_inter_recon_unipred
	add	esp, 48					; 00000030H
	mov	DWORD PTR _im_flags_L0$[ebp], eax

; 549  :                                              &px_L0, &im_L0, predict_luma, predict_chroma);
; 550  :   unsigned im_flags_L1 = inter_recon_unipred(state, ref2, pu_x, pu_y, pu_w, pu_h, pu_w, mv_param[1],

	movzx	eax, BYTE PTR _predict_chroma$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _predict_luma$[ebx]
	push	ecx
	lea	edx, DWORD PTR _im_L1$[ebp]
	push	edx
	lea	eax, DWORD PTR _px_L1$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _mv_param$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pu_w$[ebx]
	push	edx
	mov	eax, DWORD PTR _pu_h$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebx]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebx]
	push	eax
	mov	ecx, DWORD PTR _ref2$[ebx]
	push	ecx
	mov	edx, DWORD PTR _state$[ebx]
	push	edx
	call	_inter_recon_unipred
	add	esp, 48					; 00000030H
	mov	DWORD PTR _im_flags_L1$[ebp], eax

; 551  :                                              &px_L1, &im_L1, predict_luma, predict_chroma);
; 552  : 
; 553  :   // After reconstruction, merge the predictors by taking an average of each pixel
; 554  :   kvz_bipred_average(lcu, &px_L0, &px_L1, &im_L0, &im_L1,

	mov	esi, esp
	movzx	eax, BYTE PTR _predict_chroma$[ebx]
	push	eax
	movzx	ecx, BYTE PTR _predict_luma$[ebx]
	push	ecx
	mov	edx, DWORD PTR _im_flags_L1$[ebp]
	push	edx
	mov	eax, DWORD PTR _im_flags_L0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_h$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pu_w$[ebx]
	push	edx
	mov	eax, DWORD PTR _pu_y$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pu_x$[ebx]
	push	ecx
	lea	edx, DWORD PTR _im_L1$[ebp]
	push	edx
	lea	eax, DWORD PTR _im_L0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _px_L1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _px_L0$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebx]
	push	eax
	call	DWORD PTR _kvz_bipred_average
	add	esp, 52					; 00000034H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 555  :                      pu_x, pu_y, pu_w, pu_h,
; 556  :                      im_flags_L0, im_flags_L1,
; 557  :                      predict_luma, predict_chroma);
; 558  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@kvz_inter_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN12@kvz_inter_:
	DD	8
	DD	$LN11@kvz_inter_
$LN11@kvz_inter_:
	DD	-6208					; ffffe7c0H
	DD	6144					; 00001800H
	DD	$LN3@kvz_inter_
	DD	-12416					; ffffcf80H
	DD	6144					; 00001800H
	DD	$LN4@kvz_inter_
	DD	-24768					; ffff9f40H
	DD	12288					; 00003000H
	DD	$LN5@kvz_inter_
	DD	-37120					; ffff6f00H
	DD	12288					; 00003000H
	DD	$LN6@kvz_inter_
	DD	-37144					; ffff6ee8H
	DD	16					; 00000010H
	DD	$LN7@kvz_inter_
	DD	-37168					; ffff6ed0H
	DD	16					; 00000010H
	DD	$LN8@kvz_inter_
	DD	-37192					; ffff6eb8H
	DD	16					; 00000010H
	DD	$LN9@kvz_inter_
	DD	-37216					; ffff6ea0H
	DD	16					; 00000010H
	DD	$LN10@kvz_inter_
$LN10@kvz_inter_:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	49					; 00000031H
	DB	0
$LN9@kvz_inter_:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	48					; 00000030H
	DB	0
$LN8@kvz_inter_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	49					; 00000031H
	DB	0
$LN7@kvz_inter_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	48					; 00000030H
	DB	0
$LN6@kvz_inter_:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	49					; 00000031H
	DB	0
$LN5@kvz_inter_:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	48					; 00000030H
	DB	0
$LN4@kvz_inter_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	49					; 00000031H
	DB	0
$LN3@kvz_inter_:
	DB	112					; 00000070H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	48					; 00000030H
	DB	0
_kvz_inter_recon_bipred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_pred_pu
_TEXT	SEGMENT
_lcu_adapter$1 = -156					; size = 16
_offset_chroma$2 = -132					; size = 4
_offset_luma$3 = -120					; size = 4
_ref$4 = -108						; size = 4
_mv_idx$5 = -96						; size = 4
_refs$6 = -84						; size = 8
_pu$ = -68						; size = 4
_pu_h$ = -56						; size = 4
_pu_w$ = -44						; size = 4
_pu_y$ = -32						; size = 4
_pu_x$ = -20						; size = 4
_cu$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_predict_luma$ = 28					; size = 1
_predict_chroma$ = 32					; size = 1
_i_pu$ = 36						; size = 4
_kvz_inter_pred_pu PROC					; COMDAT

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 614  :   cu_info_t *cu = LCU_GET_CU_AT_PX(lcu, SUB_SCU(x), SUB_SCU(y));

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	sar	eax, 2
	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, 63					; 0000003fH
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cu$[ebp], eax

; 615  :   const int pu_x = PU_GET_X(cu->part_size, width, x, i_pu);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i_pu$[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	eax, BYTE PTR [ecx+eax]
	imul	eax, DWORD PTR _width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pu_x$[ebp], eax

; 616  :   const int pu_y = PU_GET_Y(cu->part_size, width, y, i_pu);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i_pu$[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	imul	eax, DWORD PTR _width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _pu_y$[ebp], eax

; 617  :   const int pu_w = PU_GET_W(cu->part_size, width, i_pu);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i_pu$[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_sizes[eax+edx*8]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	eax, BYTE PTR [ecx+eax]
	imul	eax, DWORD PTR _width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _pu_w$[ebp], eax

; 618  :   const int pu_h = PU_GET_H(cu->part_size, width, i_pu);

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i_pu$[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_sizes[eax+edx*8]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	imul	eax, DWORD PTR _width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _pu_h$[ebp], eax

; 619  :   cu_info_t *pu = LCU_GET_CU_AT_PX(lcu, SUB_SCU(pu_x), SUB_SCU(pu_y));

	mov	eax, DWORD PTR _pu_x$[ebp]
	and	eax, 63					; 0000003fH
	sar	eax, 2
	mov	ecx, DWORD PTR _pu_y$[ebp]
	and	ecx, 63					; 0000003fH
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _pu$[ebp], eax

; 620  : 
; 621  :   if (pu->inter.mv_dir == 3) {

	mov	eax, DWORD PTR _pu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	jne	$LN2@kvz_inter_

; 622  :     const kvz_picture *const refs[2] = {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	eax, 1
	imul	eax, eax, 0
	mov	esi, DWORD PTR _pu$[ebp]
	movzx	eax, BYTE PTR [esi+eax+16]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _refs$6[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	eax, 1
	shl	eax, 0
	mov	esi, DWORD PTR _pu$[ebp]
	movzx	eax, BYTE PTR [esi+eax+16]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _refs$6[ebp+4], eax

; 623  :       state->frame->ref->images[
; 624  :         state->frame->ref_LX[0][
; 625  :           pu->inter.mv_ref[0]]],
; 626  :       state->frame->ref->images[
; 627  :         state->frame->ref_LX[1][
; 628  :           pu->inter.mv_ref[1]]],
; 629  :     };
; 630  :     kvz_inter_recon_bipred(state,

	movzx	eax, BYTE PTR _predict_chroma$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _predict_luma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _pu_h$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_w$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_x$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _refs$6[ebp+edx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _refs$6[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_inter_recon_bipred
	add	esp, 44					; 0000002cH

; 631  :       refs[0], refs[1],
; 632  :       pu_x, pu_y,
; 633  :       pu_w, pu_h,
; 634  :       pu->inter.mv,
; 635  :       lcu,
; 636  :       predict_luma, predict_chroma);
; 637  :   }

	jmp	$LN1@kvz_inter_
$LN2@kvz_inter_:

; 638  :   else {
; 639  :     const int mv_idx = pu->inter.mv_dir - 1;

	mov	eax, DWORD PTR _pu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	sub	edx, 1
	mov	DWORD PTR _mv_idx$5[ebp], edx

; 640  :     const kvz_picture *const ref =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _mv_idx$5[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	eax, DWORD PTR _pu$[ebp]
	add	eax, DWORD PTR _mv_idx$5[ebp]
	movzx	eax, BYTE PTR [eax+16]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _ref$4[ebp], eax

; 641  :       state->frame->ref->images[
; 642  :         state->frame->ref_LX[mv_idx][
; 643  :           pu->inter.mv_ref[mv_idx]]];
; 644  : 
; 645  :     const unsigned offset_luma = SUB_SCU(pu_y) * LCU_WIDTH + SUB_SCU(pu_x);

	mov	eax, DWORD PTR _pu_y$[ebp]
	and	eax, 63					; 0000003fH
	shl	eax, 6
	mov	ecx, DWORD PTR _pu_x$[ebp]
	and	ecx, 63					; 0000003fH
	add	eax, ecx
	mov	DWORD PTR _offset_luma$3[ebp], eax

; 646  :     const unsigned offset_chroma = SUB_SCU(pu_y) / 2 * LCU_WIDTH_C + SUB_SCU(pu_x) / 2;

	mov	eax, DWORD PTR _pu_y$[ebp]
	and	eax, 63					; 0000003fH
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	shl	ecx, 5
	mov	eax, DWORD PTR _pu_x$[ebp]
	and	eax, 63					; 0000003fH
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _offset_chroma$2[ebp], ecx

; 647  :     yuv_t lcu_adapter;
; 648  :     lcu_adapter.size = pu_w * pu_h;

	mov	eax, DWORD PTR _pu_w$[ebp]
	imul	eax, DWORD PTR _pu_h$[ebp]
	mov	DWORD PTR _lcu_adapter$1[ebp], eax

; 649  :     lcu_adapter.y = lcu->rec.y + offset_luma,
; 650  :     lcu_adapter.u = lcu->rec.u + offset_chroma,
; 651  :     lcu_adapter.v = lcu->rec.v + offset_chroma,

	mov	eax, DWORD PTR _offset_luma$3[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+6540]
	mov	DWORD PTR _lcu_adapter$1[ebp+4], edx
	mov	eax, DWORD PTR _offset_chroma$2[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+10636]
	mov	DWORD PTR _lcu_adapter$1[ebp+8], edx
	mov	eax, DWORD PTR _offset_chroma$2[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	lea	edx, DWORD PTR [ecx+eax+11660]
	mov	DWORD PTR _lcu_adapter$1[ebp+12], edx
	movzx	eax, BYTE PTR _predict_chroma$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _predict_luma$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _lcu_adapter$1[ebp]
	push	edx
	mov	eax, DWORD PTR _mv_idx$5[ebp]
	mov	ecx, DWORD PTR _pu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _pu_h$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_inter_recon_unipred
	add	esp, 48					; 00000030H
$LN1@kvz_inter_:

; 652  : 
; 653  :     inter_recon_unipred(state,
; 654  :       ref,
; 655  :       pu_x, pu_y,
; 656  :       pu_w, pu_h,
; 657  :       LCU_WIDTH,
; 658  :       pu->inter.mv[mv_idx],
; 659  :       &lcu_adapter,
; 660  :       NULL,
; 661  :       predict_luma, predict_chroma);
; 662  :   }
; 663  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@kvz_inter_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@kvz_inter_:
	DD	2
	DD	$LN7@kvz_inter_
$LN7@kvz_inter_:
	DD	-84					; ffffffacH
	DD	8
	DD	$LN5@kvz_inter_
	DD	-156					; ffffff64H
	DD	16					; 00000010H
	DD	$LN6@kvz_inter_
$LN6@kvz_inter_:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@kvz_inter_:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
_kvz_inter_pred_pu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\inter.c
;	COMDAT _kvz_inter_recon_cu
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_num_pu$ = -20						; size = 4
_cu$ = -8						; size = 4
_state$ = 8						; size = 4
_lcu$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_predict_luma$ = 28					; size = 1
_predict_chroma$ = 32					; size = 1
_kvz_inter_recon_cu PROC				; COMDAT

; 582  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __5D75C4E2_inter@c
	call	@__CheckForDebuggerJustMyCode@4

; 583  :   cu_info_t *cu = LCU_GET_CU_AT_PX(lcu, SUB_SCU(x), SUB_SCU(y));

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 63					; 0000003fH
	sar	eax, 2
	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, 63					; 0000003fH
	sar	ecx, 2
	imul	edx, ecx, 17
	lea	eax, DWORD PTR [eax+edx+18]
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _lcu$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24976]
	mov	DWORD PTR _cu$[ebp], eax

; 584  :   const int num_pu = kvz_part_mode_num_parts[cu->part_size];

	mov	eax, DWORD PTR _cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _kvz_part_mode_num_parts[edx]
	mov	DWORD PTR _num_pu$[ebp], eax

; 585  :   for (int i = 0; i < num_pu; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@kvz_inter_
$LN2@kvz_inter_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@kvz_inter_:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _num_pu$[ebp]
	jge	SHORT $LN1@kvz_inter_

; 586  :     kvz_inter_pred_pu(state, lcu, x, y, width, predict_luma, predict_chroma, i);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR _predict_chroma$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _predict_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_inter_pred_pu
	add	esp, 32					; 00000020H

; 587  :   }

	jmp	SHORT $LN2@kvz_inter_
$LN1@kvz_inter_:

; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_inter_recon_cu ENDP
_TEXT	ENDS
END
