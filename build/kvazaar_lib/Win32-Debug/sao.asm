; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\sao.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__738D98E6_sao@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
CONST	ENDS
PUBLIC	_kvz_sao_reconstruct
PUBLIC	_kvz_sao_search_lcu
PUBLIC	_kvz_calc_sao_offset_array
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??kvz_sao_search_lcu@@9@9	; `kvz_sao_search_lcu'::`1'::__LINE__Var
PUBLIC	??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1EA@CPBGKDPN@?$AAs?$AAa?$AAo?$AA_?$AAl?$AAu?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_?$AAc?$AAl@ ; `string'
PUBLIC	??_C@_1EE@ILFLOFOF@?$AAs?$AAa?$AAo?$AA_?$AAc?$AAh?$AAr?$AAo?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_@ ; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___wassert:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_kvz_pixels_blit:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_kvz_f_entropy_bits:BYTE
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EE@ILFLOFOF@?$AAs?$AAa?$AAo?$AA_?$AAc?$AAh?$AAr?$AAo?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_@
CONST	SEGMENT
??_C@_1EE@ILFLOFOF@?$AAs?$AAa?$AAo?$AA_?$AAc?$AAh?$AAr?$AAo?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_@ DB 's'
	DB	00H, 'a', 00H, 'o', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'a', 00H, '-', 00H, '>', 00H, 'e', 00H, 'o'
	DB	00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'S', 00H, 'A', 00H, 'O', 00H, '_'
	DB	00H, 'N', 00H, 'U', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'O', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@CPBGKDPN@?$AAs?$AAa?$AAo?$AA_?$AAl?$AAu?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_?$AAc?$AAl@
CONST	SEGMENT
??_C@_1EA@CPBGKDPN@?$AAs?$AAa?$AAo?$AA_?$AAl?$AAu?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_?$AAc?$AAl@ DB 's'
	DB	00H, 'a', 00H, 'o', 00H, '_', 00H, 'l', 00H, 'u', 00H, 'm', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'e', 00H, 'o', 00H, '_', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'S', 00H, 'A', 00H, 'O', 00H, '_', 00H, 'N', 00H, 'U'
	DB	00H, 'M', 00H, '_', 00H, 'E', 00H, 'O', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@ DB '!'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'o', 00H, 'l', 00H, '-', 00H, '>', 00H, 'c', 00H, 'f'
	DB	00H, 'g', 00H, '.', 00H, 'l', 00H, 'o', 00H, 's', 00H, 's', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 's', 00H, 'a', 00H
	DB	'o', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_sao_search_lcu@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_sao_search_lcu@@9@9 DD 029dH	; `kvz_sao_search_lcu'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_search_luma
_TEXT	SEGMENT
_block_height$ = -8280					; size = 4
_block_width$ = -8268					; size = 4
_recdata$ = -8256					; size = 4
_data$ = -8244						; size = 4
_rec_list$ = -8232					; size = 4
_orig_list$ = -8220					; size = 4
_rec$ = -8208						; size = 4096
_orig$ = -4104						; size = 4096
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_frame$ = 12						; size = 4
_x_ctb$ = 16						; size = 4
_y_ctb$ = 20						; size = 4
_sao$ = 24						; size = 4
_sao_top$ = 28						; size = 4
_sao_left$ = 32						; size = 4
_merge_cost$ = 36					; size = 4
_sao_search_luma PROC					; COMDAT

; 639  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 9820				; 0000265cH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-9820]
	mov	ecx, 2455				; 00000997H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 640  :   kvz_pixel orig[LCU_LUMA_SIZE];
; 641  :   kvz_pixel rec[LCU_LUMA_SIZE];
; 642  :   const kvz_pixel * orig_list[1] = { NULL };

	mov	DWORD PTR _orig_list$[ebp], 0

; 643  :   const kvz_pixel * rec_list[1] = { NULL };

	mov	DWORD PTR _rec_list$[ebp], 0

; 644  :   kvz_pixel *data = &frame->source->y[CU_TO_PIXEL(x_ctb, y_ctb, 0, frame->source->stride)];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _y_ctb$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 6
	add	edx, eax
	mov	ecx, DWORD PTR [ecx+8]
	add	ecx, edx
	mov	DWORD PTR _data$[ebp], ecx

; 645  :   kvz_pixel *recdata = &frame->rec->y[CU_TO_PIXEL(x_ctb, y_ctb, 0, frame->rec->stride)];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _y_ctb$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 6
	add	edx, eax
	mov	ecx, DWORD PTR [ecx+8]
	add	ecx, edx
	mov	DWORD PTR _recdata$[ebp], ecx

; 646  :   int block_width = LCU_WIDTH;

	mov	DWORD PTR _block_width$[ebp], 64	; 00000040H

; 647  :   int block_height = LCU_WIDTH;

	mov	DWORD PTR _block_height$[ebp], 64	; 00000040H

; 648  : 
; 649  :   // Check for right and bottom boundaries.
; 650  :   if (x_ctb * LCU_WIDTH + LCU_WIDTH >= (unsigned)frame->width) {

	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 6
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN2@sao_search

; 651  :     block_width = frame->width - x_ctb * LCU_WIDTH;

	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR _block_width$[ebp], edx
$LN2@sao_search:

; 652  :   }
; 653  :   if (y_ctb * LCU_WIDTH + LCU_WIDTH >= (unsigned)frame->height) {

	mov	eax, DWORD PTR _y_ctb$[ebp]
	shl	eax, 6
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _frame$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jb	SHORT $LN3@sao_search

; 654  :     block_height = frame->height - y_ctb * LCU_WIDTH;

	mov	eax, DWORD PTR _y_ctb$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	mov	DWORD PTR _block_height$[ebp], edx
$LN3@sao_search:

; 655  :   }
; 656  : 
; 657  :   sao->type = SAO_TYPE_EDGE;

	mov	eax, DWORD PTR _sao$[ebp]
	mov	DWORD PTR [eax], 2

; 658  : 
; 659  :   // Fill temporary buffers with picture data.
; 660  :   kvz_pixels_blit(data, orig, block_width, block_height, frame->source->stride, block_width);

	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	lea	eax, DWORD PTR _orig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 661  :   kvz_pixels_blit(recdata, rec, block_width, block_height, frame->rec->stride, block_width);

	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	lea	eax, DWORD PTR _rec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recdata$[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 662  : 
; 663  :   orig_list[0] = orig;

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _orig$[ebp]
	mov	DWORD PTR _orig_list$[ebp+ecx], edx

; 664  :   rec_list[0] = rec;

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR _rec_list$[ebp+ecx], edx

; 665  :   sao_search_best_mode(state, orig_list, rec_list, block_width, block_height, 1, sao, sao_top, sao_left, merge_cost);

	mov	eax, DWORD PTR _merge_cost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	mov	eax, DWORD PTR _sao$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	lea	eax, DWORD PTR _rec_list$[ebp]
	push	eax
	lea	ecx, DWORD PTR _orig_list$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_search_best_mode
	add	esp, 40					; 00000028H

; 666  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sao_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 9820				; 0000265cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@sao_search:
	DD	4
	DD	$LN9@sao_search
$LN9@sao_search:
	DD	-4104					; ffffeff8H
	DD	4096					; 00001000H
	DD	$LN5@sao_search
	DD	-8208					; ffffdff0H
	DD	4096					; 00001000H
	DD	$LN6@sao_search
	DD	-8220					; ffffdfe4H
	DD	4
	DD	$LN7@sao_search
	DD	-8232					; ffffdfd8H
	DD	4
	DD	$LN8@sao_search
$LN8@sao_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN7@sao_search:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN6@sao_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN5@sao_search:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
_sao_search_luma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_search_chroma
_TEXT	SEGMENT
_recdata$1 = -4204					; size = 4
_data$2 = -4192						; size = 4
_color_i$ = -4180					; size = 4
_rec$ = -4168						; size = 2048
_orig$ = -2112						; size = 2048
_rec_list$ = -56					; size = 8
_orig_list$ = -40					; size = 8
_block_height$ = -24					; size = 4
_block_width$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_frame$ = 12						; size = 4
_x_ctb$ = 16						; size = 4
_y_ctb$ = 20						; size = 4
_sao$ = 24						; size = 4
_sao_top$ = 28						; size = 4
_sao_left$ = 32						; size = 4
_merge_cost$ = 36					; size = 4
_sao_search_chroma PROC					; COMDAT

; 603  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 5744				; 00001670H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-5744]
	mov	ecx, 1436				; 0000059cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 604  :   int block_width  = (LCU_WIDTH / 2);

	mov	DWORD PTR _block_width$[ebp], 32	; 00000020H

; 605  :   int block_height = (LCU_WIDTH / 2);

	mov	DWORD PTR _block_height$[ebp], 32	; 00000020H

; 606  :   const kvz_pixel *orig_list[2];
; 607  :   const kvz_pixel *rec_list[2];
; 608  :   kvz_pixel orig[2][LCU_CHROMA_SIZE];
; 609  :   kvz_pixel rec[2][LCU_CHROMA_SIZE];
; 610  :   color_t color_i;
; 611  : 
; 612  :   // Check for right and bottom boundaries.
; 613  :   if (x_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->width / 2) {

	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 5
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shr	edx, 1
	cmp	eax, edx
	jb	SHORT $LN5@sao_search

; 614  :     block_width = (frame->width - x_ctb * LCU_WIDTH) / 2;

	mov	eax, DWORD PTR _x_ctb$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	shr	edx, 1
	mov	DWORD PTR _block_width$[ebp], edx
$LN5@sao_search:

; 615  :   }
; 616  :   if (y_ctb * (LCU_WIDTH / 2) + (LCU_WIDTH / 2) >= (unsigned)frame->height / 2) {

	mov	eax, DWORD PTR _y_ctb$[ebp]
	shl	eax, 5
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shr	edx, 1
	cmp	eax, edx
	jb	SHORT $LN6@sao_search

; 617  :     block_height = (frame->height - y_ctb * LCU_WIDTH) / 2;

	mov	eax, DWORD PTR _y_ctb$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, eax
	shr	edx, 1
	mov	DWORD PTR _block_height$[ebp], edx
$LN6@sao_search:

; 618  :   }
; 619  : 
; 620  :   sao->type = SAO_TYPE_EDGE;

	mov	eax, DWORD PTR _sao$[ebp]
	mov	DWORD PTR [eax], 2

; 621  : 
; 622  :   // Copy data to temporary buffers and init orig and rec lists to point to those buffers.
; 623  :   for (color_i = COLOR_U; color_i <= COLOR_V; ++color_i) {

	mov	DWORD PTR _color_i$[ebp], 1
	jmp	SHORT $LN4@sao_search
$LN2@sao_search:
	mov	eax, DWORD PTR _color_i$[ebp]
	add	eax, 1
	mov	DWORD PTR _color_i$[ebp], eax
$LN4@sao_search:
	cmp	DWORD PTR _color_i$[ebp], 2
	jg	$LN3@sao_search

; 624  :     kvz_pixel *data = &frame->source->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->source->stride / 2)];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR _y_ctb$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	esi, eax
	mov	edx, DWORD PTR _x_ctb$[ebp]
	shl	edx, 5
	add	esi, edx
	mov	eax, DWORD PTR _color_i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+20]
	add	ecx, esi
	mov	DWORD PTR _data$2[ebp], ecx

; 625  :     kvz_pixel *recdata = &frame->rec->data[color_i][CU_TO_PIXEL(x_ctb, y_ctb, 1, frame->rec->stride / 2)];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR _y_ctb$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	esi, eax
	mov	edx, DWORD PTR _x_ctb$[ebp]
	shl	edx, 5
	add	esi, edx
	mov	eax, DWORD PTR _color_i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+20]
	add	ecx, esi
	mov	DWORD PTR _recdata$1[ebp], ecx

; 626  :     kvz_pixels_blit(data, orig[color_i - 1], block_width, block_height,

	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color_i$[ebp]
	sub	edx, 1
	shl	edx, 10					; 0000000aH
	lea	eax, DWORD PTR _orig$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _data$2[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 627  :                         frame->source->stride / 2, block_width);
; 628  :     kvz_pixels_blit(recdata, rec[color_i - 1], block_width, block_height,

	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+40]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _color_i$[ebp]
	sub	edx, 1
	shl	edx, 10					; 0000000aH
	lea	eax, DWORD PTR _rec$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _recdata$1[ebp]
	push	ecx
	call	_kvz_pixels_blit
	add	esp, 24					; 00000018H

; 629  :                         frame->rec->stride / 2, block_width);
; 630  :     orig_list[color_i - 1] = &orig[color_i - 1][0];

	mov	eax, DWORD PTR _color_i$[ebp]
	sub	eax, 1
	shl	eax, 10					; 0000000aH
	lea	ecx, DWORD PTR _orig$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	add	ecx, eax
	mov	edx, DWORD PTR _color_i$[ebp]
	mov	DWORD PTR _orig_list$[ebp+edx*4-4], ecx

; 631  :     rec_list[color_i - 1] = &rec[color_i - 1][0];

	mov	eax, DWORD PTR _color_i$[ebp]
	sub	eax, 1
	shl	eax, 10					; 0000000aH
	lea	ecx, DWORD PTR _rec$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	add	ecx, eax
	mov	edx, DWORD PTR _color_i$[ebp]
	mov	DWORD PTR _rec_list$[ebp+edx*4-4], ecx

; 632  :   }

	jmp	$LN2@sao_search
$LN3@sao_search:

; 633  : 
; 634  :   // Calculate
; 635  :   sao_search_best_mode(state, orig_list, rec_list, block_width, block_height, 2, sao, sao_top, sao_left, merge_cost);

	mov	eax, DWORD PTR _merge_cost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	mov	eax, DWORD PTR _sao$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	lea	eax, DWORD PTR _rec_list$[ebp]
	push	eax
	lea	ecx, DWORD PTR _orig_list$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_search_best_mode
	add	esp, 40					; 00000028H

; 636  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@sao_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 5744				; 00001670H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@sao_search:
	DD	4
	DD	$LN12@sao_search
$LN12@sao_search:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN8@sao_search
	DD	-56					; ffffffc8H
	DD	8
	DD	$LN9@sao_search
	DD	-2112					; fffff7c0H
	DD	2048					; 00000800H
	DD	$LN10@sao_search
	DD	-4168					; ffffefb8H
	DD	2048					; 00000800H
	DD	$LN11@sao_search
$LN11@sao_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN10@sao_search:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN9@sao_search:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN8@sao_search:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_sao_search_chroma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_search_best_mode
_TEXT	SEGMENT
tv423 = -516						; size = 8
tv267 = -512						; size = 4
_ddistortion$1 = -312					; size = 4
_mode_bits$2 = -300					; size = 4
_buf_i$3 = -288						; size = 4
_merge_cand$4 = -276					; size = 4
_i$5 = -264						; size = 4
_merge_sao$6 = -252					; size = 8
_cost_of_nothing$7 = -236				; size = 4
_buf_i$8 = -224						; size = 4
_ddistortion$9 = -212					; size = 4
_mode_bits$10 = -200					; size = 4
_buf_i$11 = -188					; size = 4
_ddistortion$12 = -176					; size = 4
_mode_bits$13 = -164					; size = 4
_band_sao$ = -152					; size = 68
_edge_sao$ = -76					; size = 68
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_recdata$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_buf_cnt$ = 28						; size = 4
_sao_out$ = 32						; size = 4
_sao_top$ = 36						; size = 4
_sao_left$ = 40						; size = 4
_merge_cost$ = 44					; size = 4
_sao_search_best_mode PROC				; COMDAT

; 494  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 495  :   sao_info_t edge_sao;
; 496  :   sao_info_t band_sao;
; 497  : 
; 498  :   init_sao_info(&edge_sao);

	lea	eax, DWORD PTR _edge_sao$[ebp]
	push	eax
	call	_init_sao_info
	add	esp, 4

; 499  :   init_sao_info(&band_sao);

	lea	eax, DWORD PTR _band_sao$[ebp]
	push	eax
	call	_init_sao_info
	add	esp, 4

; 500  :   
; 501  :   //Avoid "random" uninitialized value
; 502  :   edge_sao.band_position[0] = edge_sao.band_position[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _edge_sao$[ebp+eax+20], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR _edge_sao$[ebp+edx+20], 0

; 503  :   edge_sao.eo_class = SAO_EO0;

	mov	DWORD PTR _edge_sao$[ebp+4], 0

; 504  :   band_sao.offsets[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _band_sao$[ebp+ecx+28], 0

; 505  :   band_sao.offsets[5] = 0;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _band_sao$[ebp+ecx+28], 0

; 506  :   band_sao.eo_class = SAO_EO0;

	mov	DWORD PTR _band_sao$[ebp+4], 0

; 507  : 
; 508  :   if (state->encoder_control->cfg.sao_type & 1){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	and	edx, 1
	je	$LN19@sao_search

; 509  :     sao_search_edge_sao(state, data, recdata, block_width, block_height, buf_cnt, &edge_sao, sao_top, sao_left);

	mov	eax, DWORD PTR _sao_left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_top$[ebp]
	push	ecx
	lea	edx, DWORD PTR _edge_sao$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _recdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_search_edge_sao
	add	esp, 36					; 00000024H

; 510  :     float mode_bits = sao_mode_bits_edge(state, edge_sao.eo_class, edge_sao.offsets, sao_top, sao_left, buf_cnt);

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	lea	eax, DWORD PTR _edge_sao$[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _edge_sao$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_mode_bits_edge
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _mode_bits$13[ebp]

; 511  :     int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	cvtss2sd xmm0, DWORD PTR _mode_bits$13[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _ddistortion$12[ebp], ecx

; 512  :     unsigned buf_i;
; 513  :     
; 514  :     for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	mov	DWORD PTR _buf_i$11[ebp], 0
	jmp	SHORT $LN4@sao_search
$LN2@sao_search:
	mov	eax, DWORD PTR _buf_i$11[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_i$11[ebp], eax
$LN4@sao_search:
	mov	eax, DWORD PTR _buf_i$11[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN3@sao_search

; 515  :       ddistortion += kvz_sao_edge_ddistortion(data[buf_i], recdata[buf_i], 

	imul	eax, DWORD PTR _buf_i$11[ebp], 5
	lea	ecx, DWORD PTR _edge_sao$[ebp+eax*4+28]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _edge_sao$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf_i$11[ebp]
	mov	eax, DWORD PTR _recdata$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _buf_i$11[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	DWORD PTR _kvz_sao_edge_ddistortion
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _ddistortion$12[ebp]
	mov	DWORD PTR _ddistortion$12[ebp], eax

; 516  :                                           block_width, block_height,
; 517  :                                           edge_sao.eo_class, &edge_sao.offsets[5 * buf_i]);
; 518  :     }

	jmp	SHORT $LN2@sao_search
$LN3@sao_search:

; 519  :     
; 520  :     edge_sao.ddistortion = ddistortion;

	mov	eax, DWORD PTR _ddistortion$12[ebp]
	mov	DWORD PTR _edge_sao$[ebp+8], eax

; 521  :   }

	jmp	SHORT $LN20@sao_search
$LN19@sao_search:

; 522  :   else{
; 523  :     edge_sao.ddistortion = INT_MAX;

	mov	DWORD PTR _edge_sao$[ebp+8], 2147483647	; 7fffffffH
$LN20@sao_search:

; 524  :   }
; 525  : 
; 526  :   if (state->encoder_control->cfg.sao_type & 2){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	and	edx, 2
	je	$LN21@sao_search

; 527  :     sao_search_band_sao(state, data, recdata, block_width, block_height, buf_cnt, &band_sao, sao_top, sao_left);

	mov	eax, DWORD PTR _sao_left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_top$[ebp]
	push	ecx
	lea	edx, DWORD PTR _band_sao$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _recdata$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_search_band_sao
	add	esp, 36					; 00000024H

; 528  :     float mode_bits = sao_mode_bits_band(state, band_sao.band_position, band_sao.offsets, sao_top, sao_left, buf_cnt);

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	lea	eax, DWORD PTR _band_sao$[ebp+28]
	push	eax
	lea	ecx, DWORD PTR _band_sao$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_mode_bits_band
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _mode_bits$10[ebp]

; 529  :     int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	cvtss2sd xmm0, DWORD PTR _mode_bits$10[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _ddistortion$9[ebp], ecx

; 530  :     unsigned buf_i;
; 531  :     
; 532  :     for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	mov	DWORD PTR _buf_i$8[ebp], 0
	jmp	SHORT $LN7@sao_search
$LN5@sao_search:
	mov	eax, DWORD PTR _buf_i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_i$8[ebp], eax
$LN7@sao_search:
	mov	eax, DWORD PTR _buf_i$8[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN6@sao_search

; 533  :       ddistortion += kvz_sao_band_ddistortion(state, data[buf_i], recdata[buf_i], 

	imul	eax, DWORD PTR _buf_i$8[ebp], 5
	lea	ecx, DWORD PTR _band_sao$[ebp+eax*4+32]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _buf_i$8[ebp]
	mov	eax, DWORD PTR _band_sao$[ebp+edx*4+20]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf_i$8[ebp]
	mov	ecx, DWORD PTR _recdata$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _buf_i$8[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	DWORD PTR _kvz_sao_band_ddistortion
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _ddistortion$9[ebp]
	mov	DWORD PTR _ddistortion$9[ebp], eax

; 534  :                                           block_width, block_height, 
; 535  :                                           band_sao.band_position[buf_i], &band_sao.offsets[1 + 5 * buf_i]);
; 536  :     }

	jmp	SHORT $LN5@sao_search
$LN6@sao_search:

; 537  :     
; 538  :     band_sao.ddistortion = ddistortion;

	mov	eax, DWORD PTR _ddistortion$9[ebp]
	mov	DWORD PTR _band_sao$[ebp+8], eax

; 539  :   }

	jmp	SHORT $LN22@sao_search
$LN21@sao_search:

; 540  :   else{
; 541  :     band_sao.ddistortion = INT_MAX;

	mov	DWORD PTR _band_sao$[ebp+8], 2147483647	; 7fffffffH
$LN22@sao_search:

; 542  :   }
; 543  : 
; 544  :   if (edge_sao.ddistortion <= band_sao.ddistortion) {

	mov	eax, DWORD PTR _edge_sao$[ebp+8]
	cmp	eax, DWORD PTR _band_sao$[ebp+8]
	jg	SHORT $LN23@sao_search

; 545  :     *sao_out = edge_sao;

	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR _edge_sao$[ebp]
	mov	edi, DWORD PTR _sao_out$[ebp]
	rep movsd

; 546  :     merge_cost[0] = edge_sao.ddistortion;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _merge_cost$[ebp]
	mov	eax, DWORD PTR _edge_sao$[ebp+8]
	mov	DWORD PTR [edx+ecx], eax

; 547  :   } else {

	jmp	SHORT $LN24@sao_search
$LN23@sao_search:

; 548  :     *sao_out = band_sao;

	mov	ecx, 17					; 00000011H
	lea	esi, DWORD PTR _band_sao$[ebp]
	mov	edi, DWORD PTR _sao_out$[ebp]
	rep movsd

; 549  :     merge_cost[0] = band_sao.ddistortion;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _merge_cost$[ebp]
	mov	eax, DWORD PTR _band_sao$[ebp+8]
	mov	DWORD PTR [edx+ecx], eax
$LN24@sao_search:

; 550  :   }
; 551  : 
; 552  :   // Choose between SAO and doing nothing, taking into account the
; 553  :   // rate-distortion cost of coding do nothing.
; 554  :   {
; 555  :     int cost_of_nothing = (int)(sao_mode_bits_none(state, sao_top, sao_left) * state->lambda + 0.5);

	mov	eax, DWORD PTR _sao_left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_top$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_mode_bits_none
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv423[ebp]
	movsd	xmm0, QWORD PTR tv423[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _cost_of_nothing$7[ebp], ecx

; 556  :     if (sao_out->ddistortion >= cost_of_nothing) {

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _cost_of_nothing$7[ebp]
	jl	SHORT $LN25@sao_search

; 557  :       sao_out->type = SAO_TYPE_NONE;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax], 0

; 558  :       merge_cost[0] = cost_of_nothing;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _merge_cost$[ebp]
	mov	eax, DWORD PTR _cost_of_nothing$7[ebp]
	mov	DWORD PTR [edx+ecx], eax
$LN25@sao_search:

; 559  :     }
; 560  :   }
; 561  : 
; 562  :   // Calculate merge costs
; 563  :   if (sao_top || sao_left) {

	cmp	DWORD PTR _sao_top$[ebp], 0
	jne	SHORT $LN27@sao_search
	cmp	DWORD PTR _sao_left$[ebp], 0
	je	$LN9@sao_search
$LN27@sao_search:

; 564  :     sao_info_t* merge_sao[2] = { sao_left, sao_top};

	mov	eax, DWORD PTR _sao_left$[ebp]
	mov	DWORD PTR _merge_sao$6[ebp], eax
	mov	eax, DWORD PTR _sao_top$[ebp]
	mov	DWORD PTR _merge_sao$6[ebp+4], eax

; 565  :     int i;
; 566  :     for (i = 0; i < 2; i++) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN10@sao_search
$LN8@sao_search:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN10@sao_search:
	cmp	DWORD PTR _i$5[ebp], 2
	jge	$LN9@sao_search

; 567  :       sao_info_t* merge_cand = merge_sao[i];

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _merge_sao$6[ebp+eax*4]
	mov	DWORD PTR _merge_cand$4[ebp], ecx

; 568  : 
; 569  :       if (merge_cand) {

	cmp	DWORD PTR _merge_cand$4[ebp], 0
	je	$LN11@sao_search

; 570  :         unsigned buf_i;
; 571  :         float mode_bits = sao_mode_bits_merge(state, i + 1);

	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_sao_mode_bits_merge
	add	esp, 8
	fstp	DWORD PTR _mode_bits$2[ebp]

; 572  :         int ddistortion = (int)(mode_bits * state->lambda + 0.5);

	cvtss2sd xmm0, DWORD PTR _mode_bits$2[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _ddistortion$1[ebp], ecx

; 573  : 
; 574  :         switch (merge_cand->type) {

	mov	eax, DWORD PTR _merge_cand$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv267[ebp], ecx
	cmp	DWORD PTR tv267[ebp], 0
	je	$LN31@sao_search
	cmp	DWORD PTR tv267[ebp], 1
	je	$LN30@sao_search
	cmp	DWORD PTR tv267[ebp], 2
	je	SHORT $LN29@sao_search
	jmp	$LN11@sao_search
$LN29@sao_search:

; 575  :           case SAO_TYPE_EDGE:
; 576  :                 for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	mov	DWORD PTR _buf_i$3[ebp], 0
	jmp	SHORT $LN15@sao_search
$LN13@sao_search:
	mov	eax, DWORD PTR _buf_i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_i$3[ebp], eax
$LN15@sao_search:
	mov	eax, DWORD PTR _buf_i$3[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN14@sao_search

; 577  :                   ddistortion += kvz_sao_edge_ddistortion(data[buf_i], recdata[buf_i],

	imul	eax, DWORD PTR _buf_i$3[ebp], 5
	mov	ecx, DWORD PTR _merge_cand$4[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+28]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _merge_cand$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _block_height$[ebp]
	push	edx
	mov	eax, DWORD PTR _block_width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf_i$3[ebp]
	mov	edx, DWORD PTR _recdata$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _buf_i$3[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR _kvz_sao_edge_ddistortion
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _ddistortion$1[ebp]
	mov	DWORD PTR _ddistortion$1[ebp], eax

; 578  :                     block_width, block_height,
; 579  :                     merge_cand->eo_class, &merge_cand->offsets[5 * buf_i]);
; 580  :                 }

	jmp	SHORT $LN13@sao_search
$LN14@sao_search:

; 581  :                 merge_cost[i + 1] = ddistortion;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _merge_cost$[ebp]
	mov	edx, DWORD PTR _ddistortion$1[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 582  :             break;

	jmp	$LN11@sao_search
$LN30@sao_search:

; 583  :           case SAO_TYPE_BAND:
; 584  :               for (buf_i = 0; buf_i < buf_cnt; ++buf_i) {

	mov	DWORD PTR _buf_i$3[ebp], 0
	jmp	SHORT $LN18@sao_search
$LN16@sao_search:
	mov	eax, DWORD PTR _buf_i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_i$3[ebp], eax
$LN18@sao_search:
	mov	eax, DWORD PTR _buf_i$3[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN17@sao_search

; 585  :                 ddistortion += kvz_sao_band_ddistortion(state, data[buf_i], recdata[buf_i],

	imul	eax, DWORD PTR _buf_i$3[ebp], 5
	mov	ecx, DWORD PTR _merge_cand$4[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+32]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _buf_i$3[ebp]
	mov	ecx, DWORD PTR _merge_cand$4[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	mov	eax, DWORD PTR _block_height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf_i$3[ebp]
	mov	eax, DWORD PTR _recdata$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _buf_i$3[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	DWORD PTR _kvz_sao_band_ddistortion
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _ddistortion$1[ebp]
	mov	DWORD PTR _ddistortion$1[ebp], eax

; 586  :                   block_width, block_height,
; 587  :                   merge_cand->band_position[buf_i], &merge_cand->offsets[1 + 5 * buf_i]);
; 588  :               }

	jmp	$LN16@sao_search
$LN17@sao_search:

; 589  :               merge_cost[i + 1] = ddistortion;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _merge_cost$[ebp]
	mov	edx, DWORD PTR _ddistortion$1[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 590  :             break;

	jmp	SHORT $LN11@sao_search
$LN31@sao_search:

; 591  :           case SAO_TYPE_NONE:
; 592  :             merge_cost[i + 1] = ddistortion;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _merge_cost$[ebp]
	mov	edx, DWORD PTR _ddistortion$1[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
$LN11@sao_search:

; 593  :             break;
; 594  :           }
; 595  :       }
; 596  :     }

	jmp	$LN8@sao_search
$LN9@sao_search:

; 597  :   }
; 598  : 
; 599  :   return;
; 600  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@sao_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@sao_search:
	DD	3
	DD	$LN36@sao_search
$LN36@sao_search:
	DD	-76					; ffffffb4H
	DD	68					; 00000044H
	DD	$LN33@sao_search
	DD	-152					; ffffff68H
	DD	68					; 00000044H
	DD	$LN34@sao_search
	DD	-252					; ffffff04H
	DD	8
	DD	$LN35@sao_search
$LN35@sao_search:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	0
$LN34@sao_search:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	0
$LN33@sao_search:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	0
_sao_search_best_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_search_band_sao
_TEXT	SEGMENT
_temp_rate$1 = -348					; size = 4
_ddistortion$2 = -336					; size = 4
_temp_offsets$3 = -324					; size = 40
_sao_bands$4 = -276					; size = 256
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_recdata$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_buf_cnt$ = 28						; size = 4
_sao_out$ = 32						; size = 4
_sao_top$ = 36						; size = 4
_sao_left$ = 40						; size = 4
_sao_search_band_sao PROC				; COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-544]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 447  :   unsigned i;
; 448  : 
; 449  :   sao_out->type = SAO_TYPE_BAND;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax], 1

; 450  :   sao_out->ddistortion = MAX_INT;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax+8], 2147483647		; 7fffffffH

; 451  : 
; 452  :   // Band offset
; 453  :   {
; 454  :     int sao_bands[2][32];
; 455  :     int temp_offsets[10];
; 456  :     int ddistortion = 0;

	mov	DWORD PTR _ddistortion$2[ebp], 0

; 457  :     float temp_rate = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _temp_rate$1[ebp], xmm0

; 458  :     
; 459  :     for (i = 0; i < buf_cnt; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sao_search
$LN2@sao_search:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sao_search:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN3@sao_search

; 460  :       FILL(sao_bands, 0);

	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _sao_bands$4[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 461  :       calc_sao_bands(state, data[i], recdata[i],block_width,

	lea	eax, DWORD PTR _sao_bands$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _recdata$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_calc_sao_bands
	add	esp, 24					; 00000018H

; 462  :                      block_height,sao_bands);
; 463  :     
; 464  : 
; 465  :       ddistortion += calc_sao_band_offsets(sao_bands, &temp_offsets[1+5*i], &sao_out->band_position[i]);      

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _sao_out$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	imul	eax, DWORD PTR _i$[ebp], 5
	lea	ecx, DWORD PTR _temp_offsets$3[ebp+eax*4+4]
	push	ecx
	lea	edx, DWORD PTR _sao_bands$4[ebp]
	push	edx
	call	_calc_sao_band_offsets
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _ddistortion$2[ebp]
	mov	DWORD PTR _ddistortion$2[ebp], eax

; 466  :     }

	jmp	$LN2@sao_search
$LN3@sao_search:

; 467  : 
; 468  :     temp_rate = sao_mode_bits_band(state, sao_out->band_position, temp_offsets, sao_top, sao_left, buf_cnt);

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp_offsets$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_out$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_mode_bits_band
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _temp_rate$1[ebp]

; 469  :     ddistortion += (int)((double)temp_rate*state->lambda + 0.5);

	cvtss2sd xmm0, DWORD PTR _temp_rate$1[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	add	ecx, DWORD PTR _ddistortion$2[ebp]
	mov	DWORD PTR _ddistortion$2[ebp], ecx

; 470  : 
; 471  :     // Select band sao over edge sao when distortion is lower
; 472  :     if (ddistortion < sao_out->ddistortion) {

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR _ddistortion$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN5@sao_search

; 473  :       sao_out->type = SAO_TYPE_BAND;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax], 1

; 474  :       sao_out->ddistortion = ddistortion;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR _ddistortion$2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 475  :       memcpy(&sao_out->offsets[0], &temp_offsets[0], sizeof(int) * buf_cnt * 5);

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	shl	eax, 2
	imul	ecx, eax, 5
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _temp_offsets$3[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _sao_out$[ebp]
	lea	edx, DWORD PTR [ecx+eax+28]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@sao_search:

; 476  :     }
; 477  :   }
; 478  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sao_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 544				; 00000220H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@sao_search:
	DD	2
	DD	$LN9@sao_search
$LN9@sao_search:
	DD	-276					; fffffeecH
	DD	256					; 00000100H
	DD	$LN7@sao_search
	DD	-324					; fffffebcH
	DD	40					; 00000028H
	DD	$LN8@sao_search
$LN8@sao_search:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN7@sao_search:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_sao_search_band_sao ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_search_edge_sao
_TEXT	SEGMENT
tv133 = -400						; size = 4
tv134 = -396						; size = 4
tv130 = -392						; size = 4
_mode_bits$1 = -192					; size = 4
_offset$2 = -180					; size = 4
_cat_cnt$3 = -168					; size = 4
_cat_sum$4 = -156					; size = 4
_edge_cat$5 = -144					; size = 4
_sum_ddistortion$6 = -132				; size = 4
_edge_offset$7 = -120					; size = 40
_i$ = -72						; size = 4
_cat_sum_cnt$ = -60					; size = 40
_edge_class$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_recdata$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_buf_cnt$ = 28						; size = 4
_sao_out$ = 32						; size = 4
_sao_top$ = 36						; size = 4
_sao_left$ = 40						; size = 4
_sao_search_edge_sao PROC				; COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 369  :   sao_eo_class edge_class;
; 370  :   // This array is used to calculate the mean offset used to minimize distortion.
; 371  :   int cat_sum_cnt[2][NUM_SAO_EDGE_CATEGORIES];
; 372  :   unsigned i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 373  :   
; 374  : 
; 375  :   sao_out->type = SAO_TYPE_EDGE;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax], 2

; 376  :   sao_out->ddistortion = INT_MAX;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	DWORD PTR [eax+8], 2147483647		; 7fffffffH

; 377  : 
; 378  :   for (edge_class = SAO_EO0; edge_class <= SAO_EO3; ++edge_class) {

	mov	DWORD PTR _edge_class$[ebp], 0
	jmp	SHORT $LN4@sao_search
$LN2@sao_search:
	mov	eax, DWORD PTR _edge_class$[ebp]
	add	eax, 1
	mov	DWORD PTR _edge_class$[ebp], eax
$LN4@sao_search:
	cmp	DWORD PTR _edge_class$[ebp], 3
	jg	$LN3@sao_search

; 379  :     int edge_offset[NUM_SAO_EDGE_CATEGORIES*2];
; 380  :     int sum_ddistortion = 0;

	mov	DWORD PTR _sum_ddistortion$6[ebp], 0

; 381  :     sao_eo_cat edge_cat;
; 382  : 
; 383  :     // Call calc_sao_edge_dir once for luma and twice for chroma.
; 384  :     for (i = 0; i < buf_cnt; ++i) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sao_search
$LN5@sao_search:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sao_search:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	$LN6@sao_search

; 385  :       FILL(cat_sum_cnt, 0);

	push	40					; 00000028H
	push	0
	lea	eax, DWORD PTR _cat_sum_cnt$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 386  :       kvz_calc_sao_edge_dir(data[i], recdata[i], edge_class,

	mov	esi, esp
	lea	eax, DWORD PTR _cat_sum_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block_height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _block_width$[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_class$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _recdata$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR _kvz_calc_sao_edge_dir
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 387  :                         block_width, block_height, cat_sum_cnt);
; 388  :     
; 389  : 
; 390  :       for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {

	mov	DWORD PTR _edge_cat$5[ebp], 1
	jmp	SHORT $LN10@sao_search
$LN8@sao_search:
	mov	eax, DWORD PTR _edge_cat$5[ebp]
	add	eax, 1
	mov	DWORD PTR _edge_cat$5[ebp], eax
$LN10@sao_search:
	cmp	DWORD PTR _edge_cat$5[ebp], 4
	jg	$LN9@sao_search

; 391  :         int cat_sum = cat_sum_cnt[0][edge_cat];

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _cat_sum_cnt$[ebp+ecx]
	mov	eax, DWORD PTR _edge_cat$5[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _cat_sum$4[ebp], ecx

; 392  :         int cat_cnt = cat_sum_cnt[1][edge_cat];

	mov	eax, 20					; 00000014H
	shl	eax, 0
	lea	ecx, DWORD PTR _cat_sum_cnt$[ebp+eax]
	mov	edx, DWORD PTR _edge_cat$5[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _cat_cnt$3[ebp], eax

; 393  : 
; 394  :         // The optimum offset can be calculated by getting the minima of the
; 395  :         // fast ddistortion estimation formula. The minima is the mean error
; 396  :         // and we round that to the nearest integer.
; 397  :         int offset = 0;

	mov	DWORD PTR _offset$2[ebp], 0

; 398  :         if (cat_cnt != 0) {

	cmp	DWORD PTR _cat_cnt$3[ebp], 0
	je	$LN11@sao_search

; 399  :           offset = (cat_sum + (cat_cnt >> 1)) / cat_cnt;

	mov	eax, DWORD PTR _cat_cnt$3[ebp]
	sar	eax, 1
	add	eax, DWORD PTR _cat_sum$4[ebp]
	cdq
	idiv	DWORD PTR _cat_cnt$3[ebp]
	mov	DWORD PTR _offset$2[ebp], eax

; 400  :           offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	DWORD PTR _offset$2[ebp], 7
	jle	SHORT $LN16@sao_search
	mov	DWORD PTR tv130[ebp], 7
	jmp	SHORT $LN17@sao_search
$LN16@sao_search:
	mov	eax, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR tv130[ebp], eax
$LN17@sao_search:
	cmp	DWORD PTR tv130[ebp], -7		; fffffff9H
	jge	SHORT $LN20@sao_search
	mov	DWORD PTR tv134[ebp], -7		; fffffff9H
	jmp	SHORT $LN21@sao_search
$LN20@sao_search:
	cmp	DWORD PTR _offset$2[ebp], 7
	jle	SHORT $LN18@sao_search
	mov	DWORD PTR tv133[ebp], 7
	jmp	SHORT $LN19@sao_search
$LN18@sao_search:
	mov	ecx, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR tv133[ebp], ecx
$LN19@sao_search:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN21@sao_search:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR _offset$2[ebp], eax
$LN11@sao_search:

; 401  :         }
; 402  : 
; 403  :         // Sharpening edge offsets can't be encoded, so set them to 0 here.
; 404  :         if (edge_cat >= SAO_EO_CAT1 && edge_cat <= SAO_EO_CAT2 && offset < 0) {

	cmp	DWORD PTR _edge_cat$5[ebp], 1
	jl	SHORT $LN12@sao_search
	cmp	DWORD PTR _edge_cat$5[ebp], 2
	jg	SHORT $LN12@sao_search
	cmp	DWORD PTR _offset$2[ebp], 0
	jge	SHORT $LN12@sao_search

; 405  :           offset = 0;

	mov	DWORD PTR _offset$2[ebp], 0
$LN12@sao_search:

; 406  :         }
; 407  :         if (edge_cat >= SAO_EO_CAT3 && edge_cat <= SAO_EO_CAT4 && offset > 0) {

	cmp	DWORD PTR _edge_cat$5[ebp], 3
	jl	SHORT $LN13@sao_search
	cmp	DWORD PTR _edge_cat$5[ebp], 4
	jg	SHORT $LN13@sao_search
	cmp	DWORD PTR _offset$2[ebp], 0
	jle	SHORT $LN13@sao_search

; 408  :           offset = 0;

	mov	DWORD PTR _offset$2[ebp], 0
$LN13@sao_search:

; 409  :         }
; 410  : 
; 411  :         edge_offset[edge_cat+5*i] = offset;

	imul	eax, DWORD PTR _i$[ebp], 5
	add	eax, DWORD PTR _edge_cat$5[ebp]
	mov	ecx, DWORD PTR _offset$2[ebp]
	mov	DWORD PTR _edge_offset$7[ebp+eax*4], ecx

; 412  :         // The ddistortion is amount by which the SSE of data changes. It should
; 413  :         // be negative for all categories, if offset was chosen correctly.
; 414  :         // ddistortion = N * h^2 - 2 * h * E, where N is the number of samples
; 415  :         // and E is the sum of errors.
; 416  :         // It basically says that all pixels that are not improved by offset
; 417  :         // increase increase SSE by h^2 and all pixels that are improved by
; 418  :         // offset decrease SSE by h*E.
; 419  :         sum_ddistortion += cat_cnt * offset * offset - 2 * offset * cat_sum;

	mov	eax, DWORD PTR _cat_cnt$3[ebp]
	imul	eax, DWORD PTR _offset$2[ebp]
	imul	eax, DWORD PTR _offset$2[ebp]
	mov	ecx, DWORD PTR _offset$2[ebp]
	shl	ecx, 1
	imul	ecx, DWORD PTR _cat_sum$4[ebp]
	sub	eax, ecx
	add	eax, DWORD PTR _sum_ddistortion$6[ebp]
	mov	DWORD PTR _sum_ddistortion$6[ebp], eax

; 420  :       }

	jmp	$LN8@sao_search
$LN9@sao_search:

; 421  :     }

	jmp	$LN5@sao_search
$LN6@sao_search:

; 422  : 
; 423  :     {
; 424  :       float mode_bits = sao_mode_bits_edge(state, edge_class, edge_offset, sao_top, sao_left, buf_cnt);

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top$[ebp]
	push	edx
	lea	eax, DWORD PTR _edge_offset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_class$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_sao_mode_bits_edge
	add	esp, 24					; 00000018H
	fstp	DWORD PTR _mode_bits$1[ebp]

; 425  :       sum_ddistortion += (int)((double)mode_bits*state->lambda +0.5);

	cvtss2sd xmm0, DWORD PTR _mode_bits$1[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mulsd	xmm0, QWORD PTR [eax+296]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	add	ecx, DWORD PTR _sum_ddistortion$6[ebp]
	mov	DWORD PTR _sum_ddistortion$6[ebp], ecx

; 426  :     }
; 427  :     // SAO is not applied for category 0.
; 428  :     edge_offset[SAO_EO_CAT0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _edge_offset$7[ebp+ecx], 0

; 429  :     edge_offset[SAO_EO_CAT0 + 5] = 0;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _edge_offset$7[ebp+ecx], 0

; 430  : 
; 431  :     // Choose the offset class that offers the least error after offset.
; 432  :     if (sum_ddistortion < sao_out->ddistortion) {

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR _sum_ddistortion$6[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN14@sao_search

; 433  :       sao_out->eo_class = edge_class;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR _edge_class$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 434  :       sao_out->ddistortion = sum_ddistortion;

	mov	eax, DWORD PTR _sao_out$[ebp]
	mov	ecx, DWORD PTR _sum_ddistortion$6[ebp]
	mov	DWORD PTR [eax+8], ecx

; 435  :       memcpy(sao_out->offsets, edge_offset, sizeof(int) * NUM_SAO_EDGE_CATEGORIES * 2);

	push	40					; 00000028H
	lea	eax, DWORD PTR _edge_offset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_out$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN14@sao_search:

; 436  :     }
; 437  :   }

	jmp	$LN2@sao_search
$LN3@sao_search:

; 438  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@sao_search
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN25@sao_search:
	DD	2
	DD	$LN24@sao_search
$LN24@sao_search:
	DD	-60					; ffffffc4H
	DD	40					; 00000028H
	DD	$LN22@sao_search
	DD	-120					; ffffff88H
	DD	40					; 00000028H
	DD	$LN23@sao_search
$LN23@sao_search:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN22@sao_search:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_sao_search_edge_sao ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _calc_sao_bands
_TEXT	SEGMENT
_sb_index$1 = -53					; size = 1
_curr_pos$2 = -44					; size = 4
_shift$ = -32						; size = 4
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_state$ = 8						; size = 4
_orig_data$ = 12					; size = 4
_rec_data$ = 16						; size = 4
_block_width$ = 20					; size = 4
_block_height$ = 24					; size = 4
_sao_bands$ = 28					; size = 4
_calc_sao_bands PROC					; COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 270  :   int y, x;
; 271  :   int shift = state->encoder_control->bitdepth-5;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2532]
	sub	edx, 5
	mov	DWORD PTR _shift$[ebp], edx

; 272  : 
; 273  :   //Loop pixels and take top 5 bits to classify different bands
; 274  :   for (y = 0; y < block_height; ++y) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@calc_sao_b
$LN2@calc_sao_b:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@calc_sao_b:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _block_height$[ebp]
	jge	$LN1@calc_sao_b

; 275  :     for (x = 0; x < block_width; ++x) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@calc_sao_b
$LN5@calc_sao_b:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@calc_sao_b:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _block_width$[ebp]
	jge	$LN6@calc_sao_b

; 276  :       int32_t curr_pos = y * block_width + x;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _block_width$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _curr_pos$2[ebp], eax

; 277  : 
; 278  :       kvz_pixel sb_index = rec_data[curr_pos] >> shift;

	mov	eax, DWORD PTR _rec_data$[ebp]
	add	eax, DWORD PTR _curr_pos$2[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	BYTE PTR _sb_index$1[ebp], dl

; 279  :       sao_bands[0][sb_index] += orig_data[curr_pos] - rec_data[curr_pos];

	mov	eax, 128				; 00000080H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	movzx	edx, BYTE PTR _sb_index$1[ebp]
	mov	eax, DWORD PTR _orig_data$[ebp]
	add	eax, DWORD PTR _curr_pos$2[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	esi, DWORD PTR _rec_data$[ebp]
	add	esi, DWORD PTR _curr_pos$2[ebp]
	movzx	esi, BYTE PTR [esi]
	sub	eax, esi
	add	eax, DWORD PTR [ecx+edx*4]
	movzx	ecx, BYTE PTR _sb_index$1[ebp]
	mov	edx, 128				; 00000080H
	imul	edx, edx, 0
	add	edx, DWORD PTR _sao_bands$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 280  :       sao_bands[1][sb_index]++;

	movzx	eax, BYTE PTR _sb_index$1[ebp]
	mov	ecx, 128				; 00000080H
	shl	ecx, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 1
	movzx	eax, BYTE PTR _sb_index$1[ebp]
	mov	ecx, 128				; 00000080H
	shl	ecx, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 281  :     }

	jmp	$LN5@calc_sao_b
$LN6@calc_sao_b:

; 282  :   }

	jmp	$LN2@calc_sao_b
$LN1@calc_sao_b:

; 283  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_calc_sao_bands ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _calc_sao_band_offsets
_TEXT	SEGMENT
tv128 = -676						; size = 4
tv129 = -672						; size = 4
tv156 = -668						; size = 4
tv133 = -668						; size = 4
tv93 = -668						; size = 4
_best_dist_pos$ = -468					; size = 4
_temp_rate$ = -456					; size = 128
_temp_offsets$ = -320					; size = 128
_dist$ = -184						; size = 128
_temp_dist$ = -48					; size = 4
_best_dist$ = -36					; size = 4
_offset$ = -24						; size = 4
_band$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sao_bands$ = 8						; size = 4
_offsets$ = 12						; size = 4
_band_position$ = 16					; size = 4
_calc_sao_band_offsets PROC				; COMDAT

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-676]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 210  :   int band;
; 211  :   int offset;
; 212  :   int best_dist;
; 213  :   int temp_dist;
; 214  :   int dist[32];
; 215  :   int temp_offsets[32];
; 216  :   int temp_rate[32];
; 217  :   int best_dist_pos = 0;

	mov	DWORD PTR _best_dist_pos$[ebp], 0

; 218  : 
; 219  :   FILL(dist, 0);

	push	128					; 00000080H
	push	0
	lea	eax, DWORD PTR _dist$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 220  :   FILL(temp_rate, 0);

	push	128					; 00000080H
	push	0
	lea	eax, DWORD PTR _temp_rate$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 221  : 
; 222  :   // Calculate distortion for each band using N*h^2 - 2*h*E
; 223  :   for (band = 0; band < 32; band++) {

	mov	DWORD PTR _band$[ebp], 0
	jmp	SHORT $LN4@calc_sao_b
$LN2@calc_sao_b:
	mov	eax, DWORD PTR _band$[ebp]
	add	eax, 1
	mov	DWORD PTR _band$[ebp], eax
$LN4@calc_sao_b:
	cmp	DWORD PTR _band$[ebp], 32		; 00000020H
	jge	$LN3@calc_sao_b

; 224  :     best_dist = INT_MAX;

	mov	DWORD PTR _best_dist$[ebp], 2147483647	; 7fffffffH

; 225  :     offset = 0;

	mov	DWORD PTR _offset$[ebp], 0

; 226  :     if (sao_bands[1][band] != 0) {

	mov	eax, 128				; 00000080H
	shl	eax, 0
	add	eax, DWORD PTR _sao_bands$[ebp]
	mov	ecx, DWORD PTR _band$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	$LN10@calc_sao_b

; 227  :       offset = (sao_bands[0][band] + (sao_bands[1][band] >> 1)) / sao_bands[1][band];

	mov	eax, 128				; 00000080H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	mov	edx, 128				; 00000080H
	shl	edx, 0
	add	edx, DWORD PTR _sao_bands$[ebp]
	mov	eax, DWORD PTR _band$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sar	edx, 1
	mov	eax, DWORD PTR _band$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	add	eax, edx
	mov	ecx, 128				; 00000080H
	shl	ecx, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	mov	esi, DWORD PTR _band$[ebp]
	cdq
	idiv	DWORD PTR [ecx+esi*4]
	mov	DWORD PTR _offset$[ebp], eax

; 228  :       offset = CLIP(-SAO_ABS_OFFSET_MAX, SAO_ABS_OFFSET_MAX, offset);

	cmp	DWORD PTR _offset$[ebp], 7
	jle	SHORT $LN14@calc_sao_b
	mov	DWORD PTR tv93[ebp], 7
	jmp	SHORT $LN15@calc_sao_b
$LN14@calc_sao_b:
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN15@calc_sao_b:
	cmp	DWORD PTR tv93[ebp], -7			; fffffff9H
	jge	SHORT $LN18@calc_sao_b
	mov	DWORD PTR tv129[ebp], -7		; fffffff9H
	jmp	SHORT $LN19@calc_sao_b
$LN18@calc_sao_b:
	cmp	DWORD PTR _offset$[ebp], 7
	jle	SHORT $LN16@calc_sao_b
	mov	DWORD PTR tv128[ebp], 7
	jmp	SHORT $LN17@calc_sao_b
$LN16@calc_sao_b:
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
$LN17@calc_sao_b:
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv129[ebp], edx
$LN19@calc_sao_b:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN10@calc_sao_b:

; 229  :     }
; 230  :     dist[band] = offset==0?0:INT_MAX;

	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN20@calc_sao_b
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN21@calc_sao_b
$LN20@calc_sao_b:
	mov	DWORD PTR tv133[ebp], 2147483647	; 7fffffffH
$LN21@calc_sao_b:
	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _dist$[ebp+eax*4], ecx

; 231  :     temp_offsets[band] = 0;

	mov	eax, DWORD PTR _band$[ebp]
	mov	DWORD PTR _temp_offsets$[ebp+eax*4], 0
$LN5@calc_sao_b:

; 232  :     while(offset != 0) {

	cmp	DWORD PTR _offset$[ebp], 0
	je	$LN6@calc_sao_b

; 233  :       temp_dist = sao_bands[1][band]*offset*offset - 2*offset*sao_bands[0][band];

	mov	eax, 128				; 00000080H
	shl	eax, 0
	add	eax, DWORD PTR _sao_bands$[ebp]
	mov	ecx, DWORD PTR _band$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	imul	edx, DWORD PTR _offset$[ebp]
	imul	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	shl	eax, 1
	mov	ecx, 128				; 00000080H
	imul	ecx, ecx, 0
	add	ecx, DWORD PTR _sao_bands$[ebp]
	mov	esi, DWORD PTR _band$[ebp]
	imul	eax, DWORD PTR [ecx+esi*4]
	sub	edx, eax
	mov	DWORD PTR _temp_dist$[ebp], edx

; 234  : 
; 235  :       // Store best distortion and offset
; 236  :       if(temp_dist < best_dist) {

	mov	eax, DWORD PTR _temp_dist$[ebp]
	cmp	eax, DWORD PTR _best_dist$[ebp]
	jge	SHORT $LN11@calc_sao_b

; 237  :         dist[band] = temp_dist;

	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR _temp_dist$[ebp]
	mov	DWORD PTR _dist$[ebp+eax*4], ecx

; 238  :         temp_offsets[band] = offset;

	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _temp_offsets$[ebp+eax*4], ecx
$LN11@calc_sao_b:

; 239  :       }
; 240  :       offset += (offset > 0) ? -1:1;

	cmp	DWORD PTR _offset$[ebp], 0
	jle	SHORT $LN22@calc_sao_b
	mov	DWORD PTR tv156[ebp], -1
	jmp	SHORT $LN23@calc_sao_b
$LN22@calc_sao_b:
	mov	DWORD PTR tv156[ebp], 1
$LN23@calc_sao_b:
	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR _offset$[ebp], eax

; 241  :     }

	jmp	$LN5@calc_sao_b
$LN6@calc_sao_b:

; 242  :   }

	jmp	$LN2@calc_sao_b
$LN3@calc_sao_b:

; 243  : 
; 244  :   best_dist = INT_MAX;

	mov	DWORD PTR _best_dist$[ebp], 2147483647	; 7fffffffH

; 245  :   //Find starting pos for best 4 band distortions
; 246  :   for (band = 0; band < 28; band++) {

	mov	DWORD PTR _band$[ebp], 0
	jmp	SHORT $LN9@calc_sao_b
$LN7@calc_sao_b:
	mov	eax, DWORD PTR _band$[ebp]
	add	eax, 1
	mov	DWORD PTR _band$[ebp], eax
$LN9@calc_sao_b:
	cmp	DWORD PTR _band$[ebp], 28		; 0000001cH
	jge	SHORT $LN8@calc_sao_b

; 247  :     temp_dist = dist[band] + dist[band+1] + dist[band+2] + dist[band+3];

	mov	eax, DWORD PTR _band$[ebp]
	mov	ecx, DWORD PTR _dist$[ebp+eax*4]
	mov	edx, DWORD PTR _band$[ebp]
	add	ecx, DWORD PTR _dist$[ebp+edx*4+4]
	mov	eax, DWORD PTR _band$[ebp]
	add	ecx, DWORD PTR _dist$[ebp+eax*4+8]
	mov	edx, DWORD PTR _band$[ebp]
	add	ecx, DWORD PTR _dist$[ebp+edx*4+12]
	mov	DWORD PTR _temp_dist$[ebp], ecx

; 248  :     if(temp_dist < best_dist) {

	mov	eax, DWORD PTR _temp_dist$[ebp]
	cmp	eax, DWORD PTR _best_dist$[ebp]
	jge	SHORT $LN12@calc_sao_b

; 249  :       best_dist = temp_dist;

	mov	eax, DWORD PTR _temp_dist$[ebp]
	mov	DWORD PTR _best_dist$[ebp], eax

; 250  :       best_dist_pos = band;

	mov	eax, DWORD PTR _band$[ebp]
	mov	DWORD PTR _best_dist_pos$[ebp], eax
$LN12@calc_sao_b:

; 251  :     }
; 252  :   }

	jmp	SHORT $LN7@calc_sao_b
$LN8@calc_sao_b:

; 253  :   // Copy best offsets to output
; 254  :   memcpy(offsets, &temp_offsets[best_dist_pos], 4*sizeof(int));

	push	16					; 00000010H
	mov	eax, DWORD PTR _best_dist_pos$[ebp]
	lea	ecx, DWORD PTR _temp_offsets$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _offsets$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 255  : 
; 256  :   *band_position = best_dist_pos;

	mov	eax, DWORD PTR _band_position$[ebp]
	mov	ecx, DWORD PTR _best_dist_pos$[ebp]
	mov	DWORD PTR [eax], ecx

; 257  : 
; 258  :   return best_dist;

	mov	eax, DWORD PTR _best_dist$[ebp]

; 259  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@calc_sao_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 676				; 000002a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@calc_sao_b:
	DD	3
	DD	$LN27@calc_sao_b
$LN27@calc_sao_b:
	DD	-184					; ffffff48H
	DD	128					; 00000080H
	DD	$LN24@calc_sao_b
	DD	-320					; fffffec0H
	DD	128					; 00000080H
	DD	$LN25@calc_sao_b
	DD	-456					; fffffe38H
	DD	128					; 00000080H
	DD	$LN26@calc_sao_b
$LN26@calc_sao_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN25@calc_sao_b:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN24@calc_sao_b:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_calc_sao_band_offsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_mode_bits_band
_TEXT	SEGMENT
tv177 = -268						; size = 4
_abs_offset$1 = -68					; size = 4
_i$2 = -56						; size = 4
_buf_index$3 = -44					; size = 4
_ctx$ = -32						; size = 4
_cabac$ = -20						; size = 4
_mode_bits$ = -8					; size = 4
_state$ = 8						; size = 4
_band_position$ = 12					; size = 4
_offsets$ = 16						; size = 4
_sao_top$ = 20						; size = 4
_sao_left$ = 24						; size = 4
_buf_cnt$ = 28						; size = 4
_sao_mode_bits_band PROC				; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 133  :   float mode_bits = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 134  :   const cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 135  :   const cabac_ctx_t *ctx = NULL;

	mov	DWORD PTR _ctx$[ebp], 0

; 136  :   // FL coded merges.
; 137  :   if (sao_left != NULL) {

	cmp	DWORD PTR _sao_left$[ebp], 0
	je	SHORT $LN8@sao_mode_b

; 138  :     ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 139  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN8@sao_mode_b:

; 140  :   }
; 141  :   if (sao_top != NULL) {

	cmp	DWORD PTR _sao_top$[ebp], 0
	je	SHORT $LN9@sao_mode_b

; 142  :     ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 143  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN9@sao_mode_b:

; 144  :   }
; 145  : 
; 146  :   // TR coded sao_type_idx_, band = 1
; 147  :   ctx = &(cabac->ctx.sao_type_idx_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 33					; 00000021H
	mov	DWORD PTR _ctx$[ebp], eax

; 148  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtss2sd xmm1, DWORD PTR _mode_bits$[ebp]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 149  : 
; 150  :   // TR coded offsets and possible FL coded offset signs.
; 151  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++)

	mov	DWORD PTR _buf_index$3[ebp], 0
	jmp	SHORT $LN4@sao_mode_b
$LN2@sao_mode_b:
	mov	eax, DWORD PTR _buf_index$3[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_index$3[ebp], eax
$LN4@sao_mode_b:
	mov	eax, DWORD PTR _buf_index$3[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	$LN3@sao_mode_b

; 152  :   {
; 153  :     int i;
; 154  :     for (i = 0; i < 4; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@sao_mode_b
$LN5@sao_mode_b:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@sao_mode_b:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN6@sao_mode_b

; 155  :       int abs_offset = abs(offsets[i + 1 + buf_index*5]);

	imul	eax, DWORD PTR _buf_index$3[ebp], 5
	mov	ecx, DWORD PTR _i$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _abs_offset$1[ebp], eax

; 156  :       if (abs_offset == 0) {

	cmp	DWORD PTR _abs_offset$1[ebp], 0
	jne	SHORT $LN10@sao_mode_b

; 157  :         mode_bits += abs_offset + 1;

	mov	eax, DWORD PTR _abs_offset$1[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _mode_bits$[ebp]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
	jmp	SHORT $LN13@sao_mode_b
$LN10@sao_mode_b:

; 158  :       } else if(abs_offset == SAO_ABS_OFFSET_MAX) {

	cmp	DWORD PTR _abs_offset$1[ebp], 7
	jne	SHORT $LN12@sao_mode_b

; 159  :         mode_bits += abs_offset + 1 + 1;

	mov	eax, DWORD PTR _abs_offset$1[ebp]
	add	eax, 2
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _mode_bits$[ebp]
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 160  :       } else {

	jmp	SHORT $LN13@sao_mode_b
$LN12@sao_mode_b:

; 161  :         mode_bits += abs_offset + 2 + 1;

	mov	eax, DWORD PTR _abs_offset$1[ebp]
	add	eax, 3
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _mode_bits$[ebp]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN13@sao_mode_b:

; 162  :       }      
; 163  :     }

	jmp	SHORT $LN5@sao_mode_b
$LN6@sao_mode_b:

; 164  :   }

	jmp	$LN2@sao_mode_b
$LN3@sao_mode_b:

; 165  : 
; 166  :   // FL coded band position.
; 167  :   mode_bits += 5.0 * buf_cnt;

	mov	eax, DWORD PTR _buf_cnt$[ebp]
	mov	DWORD PTR tv177[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR tv177[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@4014000000000000
	cvtss2sd xmm1, DWORD PTR _mode_bits$[ebp]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 168  : 
; 169  :   return mode_bits;

	fld	DWORD PTR _mode_bits$[ebp]

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_mode_bits_band ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_mode_bits_edge
_TEXT	SEGMENT
_abs_offset$1 = -68					; size = 4
_edge_cat$2 = -56					; size = 4
_buf_index$3 = -44					; size = 4
_ctx$ = -32						; size = 4
_cabac$ = -20						; size = 4
_mode_bits$ = -8					; size = 4
_state$ = 8						; size = 4
_edge_class$ = 12					; size = 4
_offsets$ = 16						; size = 4
_sao_top$ = 20						; size = 4
_sao_left$ = 24						; size = 4
_buf_cnt$ = 28						; size = 4
_sao_mode_bits_edge PROC				; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   :   float mode_bits = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 94   :   const cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 95   :   const cabac_ctx_t *ctx = NULL;

	mov	DWORD PTR _ctx$[ebp], 0

; 96   :   // FL coded merges.
; 97   :   if (sao_left != NULL) {

	cmp	DWORD PTR _sao_left$[ebp], 0
	je	SHORT $LN8@sao_mode_b

; 98   :     ctx = &(cabac->ctx.sao_merge_flag_model);   

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 99   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN8@sao_mode_b:

; 100  :   }
; 101  :   if (sao_top != NULL) {

	cmp	DWORD PTR _sao_top$[ebp], 0
	je	SHORT $LN9@sao_mode_b

; 102  :     ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 103  :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN9@sao_mode_b:

; 104  :   }
; 105  : 
; 106  :   // TR coded type_idx_, edge = 2 = cMax
; 107  :   ctx = &(cabac->ctx.sao_type_idx_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 33					; 00000021H
	mov	DWORD PTR _ctx$[ebp], eax

; 108  :   mode_bits += CTX_ENTROPY_FBITS(ctx, 1) + 1.0;

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 1
	cvtss2sd xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtss2sd xmm1, DWORD PTR _mode_bits$[ebp]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 109  : 
; 110  :   // TR coded offsets.
; 111  :   for (unsigned buf_index = 0; buf_index < buf_cnt; buf_index++) {

	mov	DWORD PTR _buf_index$3[ebp], 0
	jmp	SHORT $LN4@sao_mode_b
$LN2@sao_mode_b:
	mov	eax, DWORD PTR _buf_index$3[ebp]
	add	eax, 1
	mov	DWORD PTR _buf_index$3[ebp], eax
$LN4@sao_mode_b:
	mov	eax, DWORD PTR _buf_index$3[ebp]
	cmp	eax, DWORD PTR _buf_cnt$[ebp]
	jae	SHORT $LN3@sao_mode_b

; 112  :     sao_eo_cat edge_cat;
; 113  :     for (edge_cat = SAO_EO_CAT1; edge_cat <= SAO_EO_CAT4; ++edge_cat) {

	mov	DWORD PTR _edge_cat$2[ebp], 1
	jmp	SHORT $LN7@sao_mode_b
$LN5@sao_mode_b:
	mov	eax, DWORD PTR _edge_cat$2[ebp]
	add	eax, 1
	mov	DWORD PTR _edge_cat$2[ebp], eax
$LN7@sao_mode_b:
	cmp	DWORD PTR _edge_cat$2[ebp], 4
	jg	SHORT $LN6@sao_mode_b

; 114  :       int abs_offset = abs(offsets[edge_cat+5*buf_index]);

	imul	eax, DWORD PTR _buf_index$3[ebp], 5
	add	eax, DWORD PTR _edge_cat$2[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _abs_offset$1[ebp], eax

; 115  :       if (abs_offset == 0 || abs_offset == SAO_ABS_OFFSET_MAX) {

	cmp	DWORD PTR _abs_offset$1[ebp], 0
	je	SHORT $LN12@sao_mode_b
	cmp	DWORD PTR _abs_offset$1[ebp], 7
	jne	SHORT $LN10@sao_mode_b
$LN12@sao_mode_b:

; 116  :         mode_bits += abs_offset + 1;

	mov	eax, DWORD PTR _abs_offset$1[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _mode_bits$[ebp]
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 117  :       } else {

	jmp	SHORT $LN11@sao_mode_b
$LN10@sao_mode_b:

; 118  :         mode_bits += abs_offset + 2;

	mov	eax, DWORD PTR _abs_offset$1[ebp]
	add	eax, 2
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR _mode_bits$[ebp]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN11@sao_mode_b:

; 119  :       }
; 120  :     }    

	jmp	SHORT $LN5@sao_mode_b
$LN6@sao_mode_b:

; 121  :   }

	jmp	SHORT $LN2@sao_mode_b
$LN3@sao_mode_b:

; 122  : 
; 123  :   mode_bits += 2.0;

	cvtss2sd xmm0, DWORD PTR _mode_bits$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 124  : 
; 125  :   return mode_bits;

	fld	DWORD PTR _mode_bits$[ebp]

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_mode_bits_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_mode_bits_merge
_TEXT	SEGMENT
tv81 = -232						; size = 4
tv70 = -232						; size = 4
_ctx$ = -32						; size = 4
_cabac$ = -20						; size = 4
_mode_bits$ = -8					; size = 4
_state$ = 8						; size = 4
_merge_cand$ = 12					; size = 1
_sao_mode_bits_merge PROC				; COMDAT

; 75   :                                  int8_t merge_cand) {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 76   :   float mode_bits = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 77   :   const cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 78   :   const cabac_ctx_t *ctx = NULL;

	mov	DWORD PTR _ctx$[ebp], 0

; 79   :   // FL coded merges.
; 80   :   ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 81   : 
; 82   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 1);

	movsx	eax, BYTE PTR _merge_cand$[ebp]
	cmp	eax, 1
	jne	SHORT $LN4@sao_mode_b
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN5@sao_mode_b
$LN4@sao_mode_b:
	mov	DWORD PTR tv70[ebp], 0
$LN5@sao_mode_b:
	mov	ecx, DWORD PTR _ctx$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR tv70[ebp]
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[edx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 83   :   if (merge_cand == 1) return mode_bits;

	movsx	eax, BYTE PTR _merge_cand$[ebp]
	cmp	eax, 1
	jne	SHORT $LN2@sao_mode_b
	fld	DWORD PTR _mode_bits$[ebp]
	jmp	SHORT $LN1@sao_mode_b
$LN2@sao_mode_b:

; 84   :   mode_bits += CTX_ENTROPY_FBITS(ctx, merge_cand == 2);

	movsx	eax, BYTE PTR _merge_cand$[ebp]
	cmp	eax, 2
	jne	SHORT $LN6@sao_mode_b
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN7@sao_mode_b
$LN6@sao_mode_b:
	mov	DWORD PTR tv81[ebp], 0
$LN7@sao_mode_b:
	mov	ecx, DWORD PTR _ctx$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[edx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 85   :   return mode_bits;

	fld	DWORD PTR _mode_bits$[ebp]
$LN1@sao_mode_b:

; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_mode_bits_merge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _sao_mode_bits_none
_TEXT	SEGMENT
_ctx$ = -32						; size = 4
_cabac$ = -20						; size = 4
_mode_bits$ = -8					; size = 4
_state$ = 8						; size = 4
_sao_top$ = 12						; size = 4
_sao_left$ = 16						; size = 4
_sao_mode_bits_none PROC				; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 54   :   float mode_bits = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 55   :   const cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 56   :   const cabac_ctx_t *ctx = NULL;

	mov	DWORD PTR _ctx$[ebp], 0

; 57   :   // FL coded merges.
; 58   :   if (sao_left != NULL) {

	cmp	DWORD PTR _sao_left$[ebp], 0
	je	SHORT $LN2@sao_mode_b

; 59   :     ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 60   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN2@sao_mode_b:

; 61   :   }
; 62   :   if (sao_top != NULL) {    

	cmp	DWORD PTR _sao_top$[ebp], 0
	je	SHORT $LN3@sao_mode_b

; 63   :     ctx = &(cabac->ctx.sao_merge_flag_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ctx$[ebp], eax

; 64   :     mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0
$LN3@sao_mode_b:

; 65   :   }
; 66   : 
; 67   :   // TR coded type_idx_, none = 0
; 68   :   ctx = &(cabac->ctx.sao_type_idx_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 33					; 00000021H
	mov	DWORD PTR _ctx$[ebp], eax

; 69   :   mode_bits += CTX_ENTROPY_FBITS(ctx, 0);

	mov	eax, DWORD PTR _ctx$[ebp]
	movzx	ecx, BYTE PTR [eax]
	xor	ecx, 0
	movss	xmm0, DWORD PTR _mode_bits$[ebp]
	addss	xmm0, DWORD PTR _kvz_f_entropy_bits[ecx*4]
	movss	DWORD PTR _mode_bits$[ebp], xmm0

; 70   : 
; 71   :   return mode_bits;

	fld	DWORD PTR _mode_bits$[ebp]

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sao_mode_bits_none ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _init_sao_info
_TEXT	SEGMENT
_sao$ = 8						; size = 4
_init_sao_info PROC					; COMDAT

; 45   : static void init_sao_info(sao_info_t *sao) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 46   :   sao->type = SAO_TYPE_NONE;

	mov	eax, DWORD PTR _sao$[ebp]
	mov	DWORD PTR [eax], 0

; 47   :   sao->merge_left_flag = 0;

	mov	eax, DWORD PTR _sao$[ebp]
	mov	DWORD PTR [eax+12], 0

; 48   :   sao->merge_up_flag = 0;

	mov	eax, DWORD PTR _sao$[ebp]
	mov	DWORD PTR [eax+16], 0

; 49   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_init_sao_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _kvz_calc_sao_offset_array
_TEXT	SEGMENT
tv130 = -312						; size = 4
tv131 = -308						; size = 4
tv93 = -304						; size = 4
tv71 = -304						; size = 4
_val_unclipped$1 = -104					; size = 4
_offset_id$2 = -92					; size = 4
_cb_minus_cbp$3 = -80					; size = 4
_cur_band$4 = -68					; size = 4
_cur_bp$ = -56						; size = 4
_band_pos$ = -44					; size = 4
_shift$ = -32						; size = 4
_values$ = -20						; size = 4
_val$ = -8						; size = 4
_encoder$ = 8						; size = 4
_sao$ = 12						; size = 4
_offset$ = 16						; size = 4
_color_i$ = 20						; size = 4
_kvz_calc_sao_offset_array PROC				; COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 180  :   int32_t val;
; 181  :   const int32_t values = (1<<encoder->bitdepth);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _values$[ebp], edx

; 182  :   const int32_t shift = encoder->bitdepth-5;

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2532]
	sub	ecx, 5
	mov	DWORD PTR _shift$[ebp], ecx

; 183  :   const int32_t band_pos = (color_i == COLOR_V) ? 1 : 0;

	cmp	DWORD PTR _color_i$[ebp], 2
	jne	SHORT $LN8@kvz_calc_s
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN9@kvz_calc_s
$LN8@kvz_calc_s:
	mov	DWORD PTR tv71[ebp], 0
$LN9@kvz_calc_s:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _band_pos$[ebp], eax

; 184  :   const int32_t cur_bp   = sao->band_position[band_pos];

	mov	eax, DWORD PTR _band_pos$[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	DWORD PTR _cur_bp$[ebp], edx

; 185  : 
; 186  :   // Loop through all intensity values and construct an offset array
; 187  :   for (val = 0; val < values; val++) {

	mov	DWORD PTR _val$[ebp], 0
	jmp	SHORT $LN4@kvz_calc_s
$LN2@kvz_calc_s:
	mov	eax, DWORD PTR _val$[ebp]
	add	eax, 1
	mov	DWORD PTR _val$[ebp], eax
$LN4@kvz_calc_s:
	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR _values$[ebp]
	jge	$LN1@kvz_calc_s

; 188  :     int32_t cur_band     = val >> shift;

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cur_band$4[ebp], eax

; 189  :     int32_t cb_minus_cbp = cur_band - cur_bp;

	mov	eax, DWORD PTR _cur_band$4[ebp]
	sub	eax, DWORD PTR _cur_bp$[ebp]
	mov	DWORD PTR _cb_minus_cbp$3[ebp], eax

; 190  : 
; 191  :     if (cb_minus_cbp >= 0 && cb_minus_cbp <= 3) {

	js	$LN5@kvz_calc_s
	cmp	DWORD PTR _cb_minus_cbp$3[ebp], 3
	jg	$LN5@kvz_calc_s

; 192  :       uint32_t offset_id    = cb_minus_cbp + 1 + 5 * band_pos;

	imul	eax, DWORD PTR _band_pos$[ebp], 5
	mov	ecx, DWORD PTR _cb_minus_cbp$3[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _offset_id$2[ebp], edx

; 193  :       int32_t val_unclipped = val + sao->offsets[offset_id];

	mov	eax, DWORD PTR _offset_id$2[ebp]
	mov	ecx, DWORD PTR _sao$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+28]
	mov	DWORD PTR _val_unclipped$1[ebp], edx

; 194  :       offset[val] = CLIP(0, values - 1, val_unclipped);

	mov	eax, DWORD PTR _values$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _val_unclipped$1[ebp]
	jge	SHORT $LN10@kvz_calc_s
	mov	ecx, DWORD PTR _values$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv93[ebp], ecx
	jmp	SHORT $LN11@kvz_calc_s
$LN10@kvz_calc_s:
	mov	edx, DWORD PTR _val_unclipped$1[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LN11@kvz_calc_s:
	cmp	DWORD PTR tv93[ebp], 0
	jge	SHORT $LN14@kvz_calc_s
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN15@kvz_calc_s
$LN14@kvz_calc_s:
	mov	eax, DWORD PTR _values$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _val_unclipped$1[ebp]
	jge	SHORT $LN12@kvz_calc_s
	mov	ecx, DWORD PTR _values$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv130[ebp], ecx
	jmp	SHORT $LN13@kvz_calc_s
$LN12@kvz_calc_s:
	mov	edx, DWORD PTR _val_unclipped$1[ebp]
	mov	DWORD PTR tv130[ebp], edx
$LN13@kvz_calc_s:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv131[ebp], eax
$LN15@kvz_calc_s:
	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 195  : 
; 196  :     } else {

	jmp	SHORT $LN6@kvz_calc_s
$LN5@kvz_calc_s:

; 197  :       offset[val] = val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN6@kvz_calc_s:

; 198  :     }
; 199  :   }

	jmp	$LN2@kvz_calc_s
$LN1@kvz_calc_s:

; 200  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_calc_sao_offset_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _kvz_sao_search_lcu
_TEXT	SEGMENT
tv143 = -348						; size = 4
tv135 = -348						; size = 4
tv89 = -348						; size = 4
_sao_left_chroma$ = -148				; size = 4
_sao_top_chroma$ = -136					; size = 4
_sao_left_luma$ = -124					; size = 4
_sao_top_luma$ = -112					; size = 4
_enable_chroma$ = -100					; size = 4
_sao_chroma$ = -88					; size = 4
_sao_luma$ = -76					; size = 4
_merge_cost_chroma$ = -64				; size = 12
_merge_cost_luma$ = -44					; size = 12
_stride$ = -24						; size = 4
_frame$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_lcu_x$ = 12						; size = 4
_lcu_y$ = 16						; size = 4
_kvz_sao_search_lcu PROC				; COMDAT

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 670  :   assert(!state->encoder_control->cfg.lossless);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2364], 0
	je	SHORT $LN18@kvz_sao_se
	mov	edx, DWORD PTR ?__LINE__Var@?0??kvz_sao_search_lcu@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EM@GHIHMLBO@?$AA?$CB?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@kvz_sao_se:

; 671  : 
; 672  :   videoframe_t* const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 673  :   const int stride = frame->width_in_lcu;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _stride$[ebp], ecx

; 674  :   int32_t merge_cost_luma[3] = { INT32_MAX };

	mov	DWORD PTR _merge_cost_luma$[ebp], 2147483647 ; 7fffffffH
	xor	eax, eax
	mov	DWORD PTR _merge_cost_luma$[ebp+4], eax
	mov	DWORD PTR _merge_cost_luma$[ebp+8], eax

; 675  :   int32_t merge_cost_chroma[3] = { INT32_MAX };

	mov	DWORD PTR _merge_cost_chroma$[ebp], 2147483647 ; 7fffffffH
	xor	eax, eax
	mov	DWORD PTR _merge_cost_chroma$[ebp+4], eax
	mov	DWORD PTR _merge_cost_chroma$[ebp+8], eax

; 676  :   sao_info_t *sao_luma = &frame->sao_luma[lcu_y * stride + lcu_x];

	mov	eax, DWORD PTR _lcu_y$[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _lcu_x$[ebp]
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _sao_luma$[ebp], ecx

; 677  :   sao_info_t *sao_chroma = NULL;

	mov	DWORD PTR _sao_chroma$[ebp], 0

; 678  :   int enable_chroma = state->encoder_control->chroma_format != KVZ_CSP_400;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN19@kvz_sao_se
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN20@kvz_sao_se
$LN19@kvz_sao_se:
	mov	DWORD PTR tv89[ebp], 0
$LN20@kvz_sao_se:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _enable_chroma$[ebp], edx

; 679  :   if (enable_chroma) {

	cmp	DWORD PTR _enable_chroma$[ebp], 0
	je	SHORT $LN2@kvz_sao_se

; 680  :     sao_chroma = &frame->sao_chroma[lcu_y * stride + lcu_x];

	mov	eax, DWORD PTR _lcu_y$[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _lcu_x$[ebp]
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _sao_chroma$[ebp], ecx
$LN2@kvz_sao_se:

; 681  :   }
; 682  : 
; 683  :   // Merge candidates
; 684  :   sao_info_t *sao_top_luma    = lcu_y != 0 ? &frame->sao_luma  [(lcu_y - 1) * stride + lcu_x] : NULL;

	cmp	DWORD PTR _lcu_y$[ebp], 0
	je	SHORT $LN21@kvz_sao_se
	mov	eax, DWORD PTR _lcu_y$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _lcu_x$[ebp]
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN22@kvz_sao_se
$LN21@kvz_sao_se:
	mov	DWORD PTR tv135[ebp], 0
$LN22@kvz_sao_se:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _sao_top_luma$[ebp], eax

; 685  :   sao_info_t *sao_left_luma   = lcu_x != 0 ? &frame->sao_luma  [lcu_y       * stride + lcu_x - 1] : NULL;

	cmp	DWORD PTR _lcu_x$[ebp], 0
	je	SHORT $LN23@kvz_sao_se
	mov	eax, DWORD PTR _lcu_y$[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	mov	ecx, DWORD PTR _lcu_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	imul	eax, edx, 68
	mov	ecx, DWORD PTR _frame$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN24@kvz_sao_se
$LN23@kvz_sao_se:
	mov	DWORD PTR tv143[ebp], 0
$LN24@kvz_sao_se:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR _sao_left_luma$[ebp], edx

; 686  :   sao_info_t *sao_top_chroma  = NULL;

	mov	DWORD PTR _sao_top_chroma$[ebp], 0

; 687  :   sao_info_t *sao_left_chroma = NULL;

	mov	DWORD PTR _sao_left_chroma$[ebp], 0

; 688  :   if (enable_chroma) {

	cmp	DWORD PTR _enable_chroma$[ebp], 0
	je	SHORT $LN3@kvz_sao_se

; 689  :     if (lcu_y != 0) sao_top_chroma =  &frame->sao_chroma[(lcu_y - 1) * stride + lcu_x];

	cmp	DWORD PTR _lcu_y$[ebp], 0
	je	SHORT $LN4@kvz_sao_se
	mov	eax, DWORD PTR _lcu_y$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _stride$[ebp]
	add	eax, DWORD PTR _lcu_x$[ebp]
	imul	ecx, eax, 68
	mov	edx, DWORD PTR _frame$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR _sao_top_chroma$[ebp], ecx
$LN4@kvz_sao_se:

; 690  :     if (lcu_x != 0) sao_left_chroma = &frame->sao_chroma[lcu_y       * stride + lcu_x - 1];

	cmp	DWORD PTR _lcu_x$[ebp], 0
	je	SHORT $LN3@kvz_sao_se
	mov	eax, DWORD PTR _lcu_y$[ebp]
	imul	eax, DWORD PTR _stride$[ebp]
	mov	ecx, DWORD PTR _lcu_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	imul	eax, edx, 68
	mov	ecx, DWORD PTR _frame$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _sao_left_chroma$[ebp], eax
$LN3@kvz_sao_se:

; 691  :   }
; 692  : 
; 693  :   sao_search_luma(state, frame, lcu_x, lcu_y, sao_luma, sao_top_luma, sao_left_luma, merge_cost_luma);

	lea	eax, DWORD PTR _merge_cost_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left_luma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top_luma$[ebp]
	push	edx
	mov	eax, DWORD PTR _sao_luma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_sao_search_luma
	add	esp, 32					; 00000020H

; 694  :   if (enable_chroma) {

	cmp	DWORD PTR _enable_chroma$[ebp], 0
	je	SHORT $LN6@kvz_sao_se

; 695  :     sao_search_chroma(state, frame, lcu_x, lcu_y, sao_chroma, sao_top_chroma, sao_left_chroma, merge_cost_chroma);

	lea	eax, DWORD PTR _merge_cost_chroma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sao_left_chroma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao_top_chroma$[ebp]
	push	edx
	mov	eax, DWORD PTR _sao_chroma$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcu_x$[ebp]
	push	edx
	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_sao_search_chroma
	add	esp, 32					; 00000020H

; 696  :   } else {

	jmp	SHORT $LN7@kvz_sao_se
$LN6@kvz_sao_se:

; 697  :     merge_cost_chroma[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _merge_cost_chroma$[ebp+ecx], 0

; 698  :     merge_cost_chroma[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _merge_cost_chroma$[ebp+eax], 0

; 699  :     merge_cost_chroma[2] = 0;

	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _merge_cost_chroma$[ebp+eax], 0
$LN7@kvz_sao_se:

; 700  :   }
; 701  : 
; 702  :   sao_luma->merge_up_flag = sao_luma->merge_left_flag = 0;

	mov	eax, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 703  :   // Check merge costs
; 704  :   if (sao_top_luma) {

	cmp	DWORD PTR _sao_top_luma$[ebp], 0
	je	SHORT $LN8@kvz_sao_se

; 705  :     // Merge up if cost is equal or smaller to the searched mode cost
; 706  :     if (merge_cost_luma[2] + merge_cost_chroma[2] <= merge_cost_luma[0] + merge_cost_chroma[0]) {

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _merge_cost_luma$[ebp+eax]
	add	edx, DWORD PTR _merge_cost_chroma$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _merge_cost_luma$[ebp+ecx]
	add	ecx, DWORD PTR _merge_cost_chroma$[ebp+eax]
	cmp	edx, ecx
	jg	SHORT $LN8@kvz_sao_se

; 707  :       *sao_luma = *sao_top_luma;

	mov	ecx, 17					; 00000011H
	mov	esi, DWORD PTR _sao_top_luma$[ebp]
	mov	edi, DWORD PTR _sao_luma$[ebp]
	rep movsd

; 708  :       if (sao_top_chroma) *sao_chroma = *sao_top_chroma;

	cmp	DWORD PTR _sao_top_chroma$[ebp], 0
	je	SHORT $LN10@kvz_sao_se
	mov	ecx, 17					; 00000011H
	mov	esi, DWORD PTR _sao_top_chroma$[ebp]
	mov	edi, DWORD PTR _sao_chroma$[ebp]
	rep movsd
$LN10@kvz_sao_se:

; 709  :       sao_luma->merge_up_flag = 1;

	mov	eax, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [eax+16], 1

; 710  :       sao_luma->merge_left_flag = 0;

	mov	eax, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN8@kvz_sao_se:

; 711  :     }
; 712  :   }
; 713  :   if (sao_left_luma) {

	cmp	DWORD PTR _sao_left_luma$[ebp], 0
	je	$LN11@kvz_sao_se

; 714  :     // Merge left if cost is equal or smaller to the searched mode cost
; 715  :     // AND smaller than merge up cost, if merge up was already chosen
; 716  :     if (merge_cost_luma[1] + merge_cost_chroma[1] <= merge_cost_luma[0] + merge_cost_chroma[0]) {

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _merge_cost_luma$[ebp+eax]
	add	edx, DWORD PTR _merge_cost_chroma$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _merge_cost_luma$[ebp+ecx]
	add	ecx, DWORD PTR _merge_cost_chroma$[ebp+eax]
	cmp	edx, ecx
	jg	SHORT $LN11@kvz_sao_se

; 717  :       if (!sao_luma->merge_up_flag || merge_cost_luma[1] + merge_cost_chroma[1] < merge_cost_luma[2] + merge_cost_chroma[2]) {

	mov	eax, DWORD PTR _sao_luma$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN14@kvz_sao_se
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _merge_cost_luma$[ebp+eax]
	add	edx, DWORD PTR _merge_cost_chroma$[ebp+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	eax, DWORD PTR _merge_cost_luma$[ebp+eax]
	add	eax, DWORD PTR _merge_cost_chroma$[ebp+ecx]
	cmp	edx, eax
	jge	SHORT $LN11@kvz_sao_se
$LN14@kvz_sao_se:

; 718  :         *sao_luma = *sao_left_luma;

	mov	ecx, 17					; 00000011H
	mov	esi, DWORD PTR _sao_left_luma$[ebp]
	mov	edi, DWORD PTR _sao_luma$[ebp]
	rep movsd

; 719  :         if (sao_left_chroma) *sao_chroma = *sao_left_chroma;

	cmp	DWORD PTR _sao_left_chroma$[ebp], 0
	je	SHORT $LN15@kvz_sao_se
	mov	ecx, 17					; 00000011H
	mov	esi, DWORD PTR _sao_left_chroma$[ebp]
	mov	edi, DWORD PTR _sao_chroma$[ebp]
	rep movsd
$LN15@kvz_sao_se:

; 720  :         sao_luma->merge_left_flag = 1;

	mov	eax, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [eax+12], 1

; 721  :         sao_luma->merge_up_flag = 0;

	mov	eax, DWORD PTR _sao_luma$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN11@kvz_sao_se:

; 722  :       }
; 723  :     }
; 724  :   }
; 725  :   assert(sao_luma->eo_class < SAO_NUM_EO);

	mov	eax, DWORD PTR _sao_luma$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jl	SHORT $LN25@kvz_sao_se
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_sao_search_lcu@@9@9
	add	ecx, 56					; 00000038H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EA@CPBGKDPN@?$AAs?$AAa?$AAo?$AA_?$AAl?$AAu?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_?$AAc?$AAl@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@kvz_sao_se:

; 726  :   CHECKPOINT_SAO_INFO("sao_luma", *sao_luma);
; 727  : 
; 728  :   if (sao_chroma) {

	cmp	DWORD PTR _sao_chroma$[ebp], 0
	je	SHORT $LN1@kvz_sao_se

; 729  :     assert(sao_chroma->eo_class < SAO_NUM_EO);

	mov	eax, DWORD PTR _sao_chroma$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jl	SHORT $LN1@kvz_sao_se
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_sao_search_lcu@@9@9
	add	ecx, 60					; 0000003cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GE@NHMJAPNJ@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EE@ILFLOFOF@?$AAs?$AAa?$AAo?$AA_?$AAc?$AAh?$AAr?$AAo?$AAm?$AAa?$AA?9?$AA?$DO?$AAe?$AAo?$AA_@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@kvz_sao_se:

; 730  :     CHECKPOINT_SAO_INFO("sao_chroma", *sao_chroma);
; 731  :   }
; 732  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@kvz_sao_se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@kvz_sao_se:
	DD	2
	DD	$LN29@kvz_sao_se
$LN29@kvz_sao_se:
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN27@kvz_sao_se
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN28@kvz_sao_se
$LN28@kvz_sao_se:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
$LN27@kvz_sao_se:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
_kvz_sao_search_lcu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\sao.c
;	COMDAT _kvz_sao_reconstruct
_TEXT	SEGMENT
tv68 = -292						; size = 4
_offset$1 = -92						; size = 4
_output$ = -80						; size = 4
_frame_stride$ = -68					; size = 4
_frame_height$ = -56					; size = 4
_frame_width$ = -44					; size = 4
_shift$ = -32						; size = 4
_frame$ = -20						; size = 4
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_buffer$ = 12						; size = 4
_stride$ = 16						; size = 4
_frame_x$ = 20						; size = 4
_frame_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_sao$ = 36						; size = 4
_color$ = 40						; size = 4
_kvz_sao_reconstruct PROC				; COMDAT

; 309  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __738D98E6_sao@c
	call	@__CheckForDebuggerJustMyCode@4

; 310  :   const encoder_control_t *const ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 311  :   videoframe_t *const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 312  :   const int shift = color == COLOR_Y ? 0 : 1;

	cmp	DWORD PTR _color$[ebp], 0
	jne	SHORT $LN13@kvz_sao_re
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN14@kvz_sao_re
$LN13@kvz_sao_re:
	mov	DWORD PTR tv68[ebp], 1
$LN14@kvz_sao_re:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _shift$[ebp], eax

; 313  : 
; 314  :   const int frame_width = frame->width >> shift;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _frame_width$[ebp], edx

; 315  :   const int frame_height = frame->height >> shift;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _frame_height$[ebp], edx

; 316  :   const int frame_stride = frame->rec->stride >> shift;

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR _shift$[ebp]
	sar	edx, cl
	mov	DWORD PTR _frame_stride$[ebp], edx

; 317  :   kvz_pixel *output = &frame->rec->data[color][frame_x + frame_y * frame_stride];

	mov	eax, DWORD PTR _frame$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _frame_y$[ebp]
	imul	edx, DWORD PTR _frame_stride$[ebp]
	add	edx, DWORD PTR _frame_x$[ebp]
	mov	eax, DWORD PTR _color$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+20]
	add	ecx, edx
	mov	DWORD PTR _output$[ebp], ecx

; 318  : 
; 319  :   if (sao->type == SAO_TYPE_EDGE) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	$LN2@kvz_sao_re

; 320  :     const vector2d_t *offset = g_sao_edge_offsets[sao->eo_class];

	mov	eax, DWORD PTR _sao$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	add	ecx, OFFSET _g_sao_edge_offsets
	mov	DWORD PTR _offset$1[ebp], ecx

; 321  : 
; 322  :     if (frame_x + width + offset[0].x > frame_width ||

	mov	eax, DWORD PTR _frame_x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _offset$1[ebp]
	add	eax, DWORD PTR [ecx+edx]
	cmp	eax, DWORD PTR _frame_width$[ebp]
	jg	SHORT $LN4@kvz_sao_re
	mov	eax, DWORD PTR _frame_x$[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _offset$1[ebp]
	add	eax, DWORD PTR [edx+ecx]
	cmp	eax, DWORD PTR _frame_width$[ebp]
	jle	SHORT $LN3@kvz_sao_re
$LN4@kvz_sao_re:

; 323  :         frame_x + width + offset[1].x > frame_width)
; 324  :     {
; 325  :       // Nothing to do for the rightmost column.
; 326  :       width -= 1;

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _width$[ebp], eax
$LN3@kvz_sao_re:

; 327  :     }
; 328  :     if (frame_x + offset[0].x < 0 || frame_x + offset[1].x < 0) {

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _offset$1[ebp]
	mov	eax, DWORD PTR _frame_x$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	js	SHORT $LN6@kvz_sao_re
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _offset$1[ebp]
	mov	edx, DWORD PTR _frame_x$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	jns	SHORT $LN5@kvz_sao_re
$LN6@kvz_sao_re:

; 329  :       // Nothing to do for the leftmost column.
; 330  :       buffer += 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer$[ebp], eax

; 331  :       output += 1;

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 332  :       width -= 1;

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	DWORD PTR _width$[ebp], eax
$LN5@kvz_sao_re:

; 333  :     }
; 334  :     if (frame_y + height + offset[0].y > frame_height ||

	mov	eax, DWORD PTR _frame_y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _offset$1[ebp]
	add	eax, DWORD PTR [ecx+edx+4]
	cmp	eax, DWORD PTR _frame_height$[ebp]
	jg	SHORT $LN8@kvz_sao_re
	mov	eax, DWORD PTR _frame_y$[ebp]
	add	eax, DWORD PTR _height$[ebp]
	mov	ecx, 8
	shl	ecx, 0
	mov	edx, DWORD PTR _offset$1[ebp]
	add	eax, DWORD PTR [edx+ecx+4]
	cmp	eax, DWORD PTR _frame_height$[ebp]
	jle	SHORT $LN7@kvz_sao_re
$LN8@kvz_sao_re:

; 335  :         frame_y + height + offset[1].y > frame_height)
; 336  :     {
; 337  :       // Nothing to do for the bottommost row.
; 338  :       height -= 1;

	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	mov	DWORD PTR _height$[ebp], eax
$LN7@kvz_sao_re:

; 339  :     }
; 340  :     if (frame_y + offset[0].y < 0 || frame_y + offset[1].y < 0) {

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _offset$1[ebp]
	mov	eax, DWORD PTR _frame_y$[ebp]
	add	eax, DWORD PTR [edx+ecx+4]
	js	SHORT $LN10@kvz_sao_re
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _offset$1[ebp]
	mov	edx, DWORD PTR _frame_y$[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	jns	SHORT $LN2@kvz_sao_re
$LN10@kvz_sao_re:

; 341  :       // Nothing to do for the topmost row.
; 342  :       buffer += stride;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _stride$[ebp]
	mov	DWORD PTR _buffer$[ebp], eax

; 343  :       output += frame_stride;

	mov	eax, DWORD PTR _output$[ebp]
	add	eax, DWORD PTR _frame_stride$[ebp]
	mov	DWORD PTR _output$[ebp], eax

; 344  :       height -= 1;

	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	mov	DWORD PTR _height$[ebp], eax
$LN2@kvz_sao_re:

; 345  :     }
; 346  :   }
; 347  : 
; 348  :   if (sao->type != SAO_TYPE_NONE) {

	mov	eax, DWORD PTR _sao$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@kvz_sao_re

; 349  :     kvz_sao_reconstruct_color(ctrl,

	mov	esi, esp
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _frame_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sao$[ebp]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctrl$[ebp]
	push	edx
	call	DWORD PTR _kvz_sao_reconstruct_color
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@kvz_sao_re:

; 350  :                               buffer,
; 351  :                               output,
; 352  :                               sao,
; 353  :                               stride,
; 354  :                               frame_stride,
; 355  :                               width,
; 356  :                               height,
; 357  :                               color);
; 358  :   }
; 359  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_sao_reconstruct ENDP
_TEXT	ENDS
END
