; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_bitstream_free_chunks:PROC
EXTRN	_kvz_config_alloc:PROC
EXTRN	_kvz_config_init:PROC
EXTRN	_kvz_config_destroy:PROC
EXTRN	_kvz_config_parse:PROC
EXTRN	_kvz_image_alloc_420:PROC
EXTRN	_kvz_image_alloc:PROC
EXTRN	_kvz_image_free:PROC
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__90E09E3D_kvazaar@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+2
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
	ORG $+4
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
_kvz_8bit_api DD FLAT:_kvz_config_alloc
	DD	FLAT:_kvz_config_destroy
	DD	FLAT:_kvz_config_init
	DD	FLAT:_kvz_config_parse
	DD	FLAT:_kvz_image_alloc_420
	DD	FLAT:_kvz_image_free
	DD	FLAT:_kvz_bitstream_free_chunks
	DD	FLAT:_kvazaar_open
	DD	FLAT:_kvazaar_close
	DD	FLAT:_kvazaar_headers
	DD	FLAT:_kvazaar_field_encoding_adapter
	DD	FLAT:_kvz_image_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_kvz_api_get
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CC@GJPPLHJB@Failed?5to?5initialize?5strategies@ ; `string'
PUBLIC	?__LINE__Var@?0??kvazaar_encode@@9@9		; `kvazaar_encode'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@GGMDDDLK@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1FC@OBGFKADF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAn@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp___wassert:PROC
EXTRN	_kvz_bitstream_init:PROC
EXTRN	_kvz_bitstream_take_chunks:PROC
EXTRN	_kvz_bitstream_finalize:PROC
EXTRN	_kvz_bitstream_tell:PROC
EXTRN	_kvz_threadqueue_free_job:PROC
EXTRN	_kvz_threadqueue_waitfor:PROC
EXTRN	_kvz_threadqueue_stop:PROC
EXTRN	_kvz_encoder_control_init:PROC
EXTRN	_kvz_encoder_control_free:PROC
EXTRN	_kvz_encoder_state_write_parameter_sets:PROC
EXTRN	_kvz_image_copy_ref:PROC
EXTRN	_kvz_encode_one_frame:PROC
EXTRN	_kvz_encoder_prepare:PROC
EXTRN	_kvz_encoder_state_match_children_of_previous_frame:PROC
EXTRN	_kvz_encoder_state_init:PROC
EXTRN	_kvz_encoder_state_finalize:PROC
EXTRN	_kvz_init_input_frame_buffer:PROC
EXTRN	_kvz_encoder_feed_frame:PROC
EXTRN	_kvz_strategyselector_init:PROC
EXTRN	_kvz_get_rc_data:PROC
EXTRN	_kvz_free_rc_data:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aulldiv:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FC@OBGFKADF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAn@
CONST	SEGMENT
??_C@_1FC@OBGFKADF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAn@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'u', 00H, 'm', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H, '-', 00H, '>', 00H, 'f'
	DB	00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@GGMDDDLK@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GM@GGMDDDLK@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H, 'v', 00H
	DB	'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvazaar_encode@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvazaar_encode@@9@9 DD 0fbH		; `kvazaar_encode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@GJPPLHJB@Failed?5to?5initialize?5strategies@
CONST	SEGMENT
??_C@_0CC@GJPPLHJB@Failed?5to?5initialize?5strategies@ DB 'Failed to init'
	DB	'ialize strategies.', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvazaar_field_encoding_adapter
_TEXT	SEGMENT
_chunk$1 = -76						; size = 4
_second$ = -64						; size = 8
_first$ = -48						; size = 8
_second_field$ = -32					; size = 4
_first_field$ = -20					; size = 4
_state$ = -8						; size = 4
_enc$ = 8						; size = 4
_pic_in$ = 12						; size = 4
_data_out$ = 16						; size = 4
_len_out$ = 20						; size = 4
_pic_out$ = 24						; size = 4
_src_out$ = 28						; size = 4
_info_out$ = 32						; size = 4
_kvazaar_field_encoding_adapter PROC			; COMDAT

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 325  :   if (enc->control->cfg.source_scan_type == KVZ_INTERLACING_NONE) {

	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+88]
	test	edx, edx
	jne	SHORT $LN4@kvazaar_fi

; 326  :     // For progressive, simply call the normal encoding function.
; 327  :     return kvazaar_encode(enc, pic_in, data_out, len_out, pic_out, src_out, info_out);

	mov	eax, DWORD PTR _info_out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_out$[ebp]
	push	edx
	mov	eax, DWORD PTR _len_out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data_out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_in$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_kvazaar_encode
	add	esp, 28					; 0000001cH
	jmp	$LN1@kvazaar_fi
$LN4@kvazaar_fi:

; 328  :   }
; 329  : 
; 330  :   // For interlaced, make two fields out of the input frame and call encode on them separately.
; 331  :   encoder_state_t *state = &enc->states[enc->cur_state_num];

	mov	eax, DWORD PTR _enc$[ebp]
	imul	ecx, DWORD PTR [eax+12], 336
	mov	edx, DWORD PTR _enc$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _state$[ebp], ecx

; 332  :   kvz_picture *first_field = NULL, *second_field = NULL;

	mov	DWORD PTR _first_field$[ebp], 0
	mov	DWORD PTR _second_field$[ebp], 0

; 333  :   struct {
; 334  :     kvz_data_chunk* data_out;
; 335  :     uint32_t len_out;
; 336  :   } first = { 0, 0 }, second = { 0, 0 };

	mov	DWORD PTR _first$[ebp], 0
	mov	DWORD PTR _first$[ebp+4], 0
	mov	DWORD PTR _second$[ebp], 0
	mov	DWORD PTR _second$[ebp+4], 0

; 337  : 
; 338  :   if (pic_in != NULL) {

	cmp	DWORD PTR _pic_in$[ebp], 0
	je	$LN5@kvazaar_fi

; 339  :     first_field = kvz_image_alloc(state->encoder_control->chroma_format, state->encoder_control->in.width, state->encoder_control->in.height);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2484]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2480]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2536]
	push	edx
	call	_kvz_image_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _first_field$[ebp], eax

; 340  :     if (first_field == NULL) {

	cmp	DWORD PTR _first_field$[ebp], 0
	jne	SHORT $LN6@kvazaar_fi

; 341  :       goto kvazaar_field_encoding_adapter_failure;

	jmp	$kvazaar_field_encoding_adapter_failure$19
$LN6@kvazaar_fi:

; 342  :     }
; 343  :     second_field = kvz_image_alloc(state->encoder_control->chroma_format, state->encoder_control->in.width, state->encoder_control->in.height);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2484]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2480]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2536]
	push	edx
	call	_kvz_image_alloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _second_field$[ebp], eax

; 344  :     if (second_field == NULL) {

	cmp	DWORD PTR _second_field$[ebp], 0
	jne	SHORT $LN7@kvazaar_fi

; 345  :       goto kvazaar_field_encoding_adapter_failure;

	jmp	$kvazaar_field_encoding_adapter_failure$19
$LN7@kvazaar_fi:

; 346  :     }
; 347  : 
; 348  :     yuv_io_extract_field(pic_in, pic_in->interlacing, 0, first_field);

	mov	eax, DWORD PTR _first_field$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pic_in$[ebp]
	push	eax
	call	_yuv_io_extract_field
	add	esp, 16					; 00000010H

; 349  :     yuv_io_extract_field(pic_in, pic_in->interlacing, 1, second_field);

	mov	eax, DWORD PTR _second_field$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _pic_in$[ebp]
	push	eax
	call	_yuv_io_extract_field
	add	esp, 16					; 00000010H

; 350  :     
; 351  :     first_field->pts = pic_in->pts;

	mov	eax, DWORD PTR _first_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx

; 352  :     first_field->dts = pic_in->dts;

	mov	eax, DWORD PTR _first_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx

; 353  :     first_field->interlacing = pic_in->interlacing;

	mov	eax, DWORD PTR _first_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx

; 354  : 
; 355  :     // Should the second field have higher pts and dts? It shouldn't affect anything.
; 356  :     second_field->pts = pic_in->pts;

	mov	eax, DWORD PTR _second_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx

; 357  :     second_field->dts = pic_in->dts;

	mov	eax, DWORD PTR _second_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx

; 358  :     second_field->interlacing = pic_in->interlacing;

	mov	eax, DWORD PTR _second_field$[ebp]
	mov	ecx, DWORD PTR _pic_in$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
$LN5@kvazaar_fi:

; 359  :   }
; 360  : 
; 361  :   if (!kvazaar_encode(enc, first_field, &first.data_out, &first.len_out, pic_out, NULL, info_out)) {

	mov	eax, DWORD PTR _info_out$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pic_out$[ebp]
	push	ecx
	lea	edx, DWORD PTR _first$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _first_field$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_kvazaar_encode
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN8@kvazaar_fi

; 362  :     goto kvazaar_field_encoding_adapter_failure;

	jmp	$kvazaar_field_encoding_adapter_failure$19
$LN8@kvazaar_fi:

; 363  :   }
; 364  :   if (!kvazaar_encode(enc, second_field, &second.data_out, &second.len_out, NULL, NULL, NULL)) {

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _second$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _second$[ebp]
	push	ecx
	mov	edx, DWORD PTR _second_field$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_kvazaar_encode
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN9@kvazaar_fi

; 365  :     goto kvazaar_field_encoding_adapter_failure;

	jmp	SHORT $kvazaar_field_encoding_adapter_failure$19
$LN9@kvazaar_fi:

; 366  :   }
; 367  : 
; 368  :   kvz_image_free(first_field);

	mov	eax, DWORD PTR _first_field$[ebp]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 369  :   kvz_image_free(second_field);

	mov	eax, DWORD PTR _second_field$[ebp]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 370  : 
; 371  :   // Concatenate bitstreams.
; 372  :   if (len_out != NULL) {

	cmp	DWORD PTR _len_out$[ebp], 0
	je	SHORT $LN10@kvazaar_fi

; 373  :     *len_out = first.len_out + second.len_out;

	mov	eax, DWORD PTR _first$[ebp+4]
	add	eax, DWORD PTR _second$[ebp+4]
	mov	ecx, DWORD PTR _len_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN10@kvazaar_fi:

; 374  :   }
; 375  :   if (data_out != NULL) {

	cmp	DWORD PTR _data_out$[ebp], 0
	je	SHORT $LN13@kvazaar_fi

; 376  :     *data_out = first.data_out;

	mov	eax, DWORD PTR _data_out$[ebp]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR [eax], ecx

; 377  :     if (first.data_out != NULL) {

	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN13@kvazaar_fi

; 378  :       kvz_data_chunk *chunk = first.data_out;

	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _chunk$1[ebp], eax
$LN2@kvazaar_fi:

; 379  :       while (chunk->next != NULL) {

	mov	eax, DWORD PTR _chunk$1[ebp]
	cmp	DWORD PTR [eax+4100], 0
	je	SHORT $LN3@kvazaar_fi

; 380  :         chunk = chunk->next;

	mov	eax, DWORD PTR _chunk$1[ebp]
	mov	ecx, DWORD PTR [eax+4100]
	mov	DWORD PTR _chunk$1[ebp], ecx

; 381  :       }

	jmp	SHORT $LN2@kvazaar_fi
$LN3@kvazaar_fi:

; 382  :       chunk->next = second.data_out;

	mov	eax, DWORD PTR _chunk$1[ebp]
	mov	ecx, DWORD PTR _second$[ebp]
	mov	DWORD PTR [eax+4100], ecx
$LN13@kvazaar_fi:

; 383  :     }
; 384  :   }
; 385  : 
; 386  :   if (src_out != NULL) {
; 387  :     // TODO: deinterlace the fields to one picture.
; 388  :   }
; 389  : 
; 390  :   return 1;

	mov	eax, 1
	jmp	SHORT $LN1@kvazaar_fi
$kvazaar_field_encoding_adapter_failure$19:

; 391  : 
; 392  : kvazaar_field_encoding_adapter_failure:
; 393  :   kvz_image_free(first_field);

	mov	eax, DWORD PTR _first_field$[ebp]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 394  :   kvz_image_free(second_field);

	mov	eax, DWORD PTR _second_field$[ebp]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 395  :   kvz_bitstream_free_chunks(first.data_out);

	mov	eax, DWORD PTR _first$[ebp]
	push	eax
	call	_kvz_bitstream_free_chunks
	add	esp, 4

; 396  :   kvz_bitstream_free_chunks(second.data_out);

	mov	eax, DWORD PTR _second$[ebp]
	push	eax
	call	_kvz_bitstream_free_chunks
	add	esp, 4

; 397  :   return 0;

	xor	eax, eax
$LN1@kvazaar_fi:

; 398  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@kvazaar_fi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@kvazaar_fi:
	DD	2
	DD	$LN17@kvazaar_fi
$LN17@kvazaar_fi:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN15@kvazaar_fi
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN16@kvazaar_fi
$LN16@kvazaar_fi:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN15@kvazaar_fi:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_kvazaar_field_encoding_adapter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvazaar_encode
_TEXT	SEGMENT
tv85 = -232						; size = 4
_output_state$ = -32					; size = 4
_frame$ = -20						; size = 4
_state$ = -8						; size = 4
_enc$ = 8						; size = 4
_pic_in$ = 12						; size = 4
_data_out$ = 16						; size = 4
_len_out$ = 20						; size = 4
_pic_out$ = 24						; size = 4
_src_out$ = 28						; size = 4
_info_out$ = 32						; size = 4
_kvazaar_encode PROC					; COMDAT

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 252  :   if (data_out) *data_out = NULL;

	cmp	DWORD PTR _data_out$[ebp], 0
	je	SHORT $LN2@kvazaar_en
	mov	eax, DWORD PTR _data_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@kvazaar_en:

; 253  :   if (len_out) *len_out = 0;

	cmp	DWORD PTR _len_out$[ebp], 0
	je	SHORT $LN3@kvazaar_en
	mov	eax, DWORD PTR _len_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@kvazaar_en:

; 254  :   if (pic_out) *pic_out = NULL;

	cmp	DWORD PTR _pic_out$[ebp], 0
	je	SHORT $LN4@kvazaar_en
	mov	eax, DWORD PTR _pic_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@kvazaar_en:

; 255  :   if (src_out) *src_out = NULL;

	cmp	DWORD PTR _src_out$[ebp], 0
	je	SHORT $LN5@kvazaar_en
	mov	eax, DWORD PTR _src_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@kvazaar_en:

; 256  : 
; 257  :   encoder_state_t *state = &enc->states[enc->cur_state_num];

	mov	eax, DWORD PTR _enc$[ebp]
	imul	ecx, DWORD PTR [eax+12], 336
	mov	edx, DWORD PTR _enc$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _state$[ebp], ecx

; 258  : 
; 259  :   if (!state->frame->prepared) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+144]
	test	edx, edx
	jne	SHORT $LN7@kvazaar_en

; 260  :     kvz_encoder_prepare(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encoder_prepare
	add	esp, 4
$LN7@kvazaar_en:

; 261  :   }
; 262  : 
; 263  :   if (pic_in != NULL) {
; 264  :     // FIXME: The frame number printed here is wrong when GOP is enabled.
; 265  :     CHECKPOINT_MARK("read source frame: %d", state->frame->num + enc->control->cfg.seek);
; 266  :   }
; 267  : 
; 268  :   kvz_picture* frame = kvz_encoder_feed_frame(

	mov	eax, DWORD PTR _enc$[ebp]
	cmp	DWORD PTR [eax+1212], 0
	jne	SHORT $LN20@kvazaar_en
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+2452]
	cmp	eax, 2
	jne	SHORT $LN20@kvazaar_en
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN21@kvazaar_en
$LN20@kvazaar_en:
	mov	DWORD PTR tv85[ebp], 1
$LN21@kvazaar_en:
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	mov	edx, DWORD PTR _pic_in$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_kvz_encoder_feed_frame
	add	esp, 16					; 00000010H
	mov	DWORD PTR _frame$[ebp], eax

; 269  :     &enc->input_buffer, state, pic_in,
; 270  :     enc->frames_done || state->encoder_control->cfg.rc_algorithm != KVZ_OBA
; 271  :   );
; 272  :   if (frame) {

	cmp	DWORD PTR _frame$[ebp], 0
	je	SHORT $LN8@kvazaar_en

; 273  :     assert(state->frame->num == enc->frames_started);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _enc$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+1208]
	je	SHORT $LN22@kvazaar_en
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvazaar_encode@@9@9
	add	ecx, 22					; 00000016H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1GM@GGMDDDLK@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FC@OBGFKADF@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@kvazaar_en:

; 274  :     // Start encoding.
; 275  :     kvz_encode_one_frame(state, frame);

	mov	eax, DWORD PTR _frame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_encode_one_frame
	add	esp, 8

; 276  :     enc->frames_started += 1;

	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax+1208]
	add	ecx, 1
	mov	edx, DWORD PTR _enc$[ebp]
	mov	DWORD PTR [edx+1208], ecx
$LN8@kvazaar_en:

; 277  :   }
; 278  : 
; 279  :   // If we have finished encoding as many frames as we have started, we are done.
; 280  :   if (enc->frames_done == enc->frames_started) {

	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR _enc$[ebp]
	mov	edx, DWORD PTR [eax+1212]
	cmp	edx, DWORD PTR [ecx+1208]
	jne	SHORT $LN9@kvazaar_en

; 281  :     return 1;

	mov	eax, 1
	jmp	$LN1@kvazaar_en
$LN9@kvazaar_en:

; 282  :   }
; 283  : 
; 284  :   if (!state->frame->done) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+145]
	test	edx, edx
	jne	SHORT $LN10@kvazaar_en

; 285  :     // We started encoding a frame; move to the next encoder state.
; 286  :     enc->cur_state_num = (enc->cur_state_num + 1) % (enc->num_encoder_states);

	mov	eax, DWORD PTR _enc$[ebp]
	mov	eax, DWORD PTR [eax+12]
	add	eax, 1
	mov	ecx, DWORD PTR _enc$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _enc$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN10@kvazaar_en:

; 287  :   }
; 288  : 
; 289  :   encoder_state_t *output_state = &enc->states[enc->out_state_num];

	mov	eax, DWORD PTR _enc$[ebp]
	imul	ecx, DWORD PTR [eax+16], 336
	mov	edx, DWORD PTR _enc$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _output_state$[ebp], ecx

; 290  :   if ((!output_state->frame->done &&
; 291  :        (pic_in == NULL || enc->cur_state_num == enc->out_state_num)) ||

	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+145]
	test	edx, edx
	jne	SHORT $LN13@kvazaar_en
	cmp	DWORD PTR _pic_in$[ebp], 0
	je	SHORT $LN12@kvazaar_en
	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR _enc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN12@kvazaar_en
$LN13@kvazaar_en:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	$LN11@kvazaar_en
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2452]
	cmp	edx, 2
	jne	$LN11@kvazaar_en
$LN12@kvazaar_en:

; 292  :        (state->frame->num == 0  && state->encoder_control->cfg.rc_algorithm == KVZ_OBA)) {
; 293  : 
; 294  :     kvz_threadqueue_waitfor(enc->control->threadqueue, output_state->tqj_bitstream_written);

	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4516]
	push	ecx
	call	_kvz_threadqueue_waitfor
	add	esp, 8

; 295  :     // The job pointer must be set to NULL here since it won't be usable after
; 296  :     // the next frame is done.
; 297  :     kvz_threadqueue_free_job(&output_state->tqj_bitstream_written);

	mov	eax, DWORD PTR _output_state$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_kvz_threadqueue_free_job
	add	esp, 4

; 298  : 
; 299  :     // Get stream length before taking chunks since that clears the stream.
; 300  :     if (len_out) *len_out = kvz_bitstream_tell(&output_state->stream) / 8;

	cmp	DWORD PTR _len_out$[ebp], 0
	je	SHORT $LN14@kvazaar_en
	mov	eax, DWORD PTR _output_state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	push	0
	push	8
	push	edx
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _len_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN14@kvazaar_en:

; 301  :     if (data_out) *data_out = kvz_bitstream_take_chunks(&output_state->stream);

	cmp	DWORD PTR _data_out$[ebp], 0
	je	SHORT $LN15@kvazaar_en
	mov	eax, DWORD PTR _output_state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	_kvz_bitstream_take_chunks
	add	esp, 4
	mov	ecx, DWORD PTR _data_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN15@kvazaar_en:

; 302  :     if (pic_out) *pic_out = kvz_image_copy_ref(output_state->tile->frame->rec);

	cmp	DWORD PTR _pic_out$[ebp], 0
	je	SHORT $LN16@kvazaar_en
	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_kvz_image_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _pic_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN16@kvazaar_en:

; 303  :     if (src_out) *src_out = kvz_image_copy_ref(output_state->tile->frame->source);

	cmp	DWORD PTR _src_out$[ebp], 0
	je	SHORT $LN17@kvazaar_en
	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_kvz_image_copy_ref
	add	esp, 4
	mov	ecx, DWORD PTR _src_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN17@kvazaar_en:

; 304  :     if (info_out) set_frame_info(info_out, output_state);

	cmp	DWORD PTR _info_out$[ebp], 0
	je	SHORT $LN18@kvazaar_en
	mov	eax, DWORD PTR _output_state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _info_out$[ebp]
	push	ecx
	call	_set_frame_info
	add	esp, 8
$LN18@kvazaar_en:

; 305  : 
; 306  :     output_state->frame->done = 1;

	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+145], 1

; 307  :     output_state->frame->prepared = 0;

	mov	eax, DWORD PTR _output_state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	BYTE PTR [ecx+144], 0

; 308  :     enc->frames_done += 1;

	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax+1212]
	add	ecx, 1
	mov	edx, DWORD PTR _enc$[ebp]
	mov	DWORD PTR [edx+1212], ecx

; 309  : 
; 310  :     enc->out_state_num = (enc->out_state_num + 1) % (enc->num_encoder_states);

	mov	eax, DWORD PTR _enc$[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 1
	mov	ecx, DWORD PTR _enc$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _enc$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN11@kvazaar_en:

; 311  :   }
; 312  : 
; 313  :   return 1;

	mov	eax, 1
$LN1@kvazaar_en:

; 314  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvazaar_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _yuv_io_extract_field
_TEXT	SEGMENT
tv178 = -316						; size = 4
tv147 = -316						; size = 4
tv87 = -316						; size = 4
tv73 = -316						; size = 4
tv70 = -316						; size = 4
_row_out$1 = -116					; size = 4
_row_in$2 = -104					; size = 4
_i$3 = -92						; size = 4
_row_out$4 = -80					; size = 4
_row_in$5 = -68						; size = 4
_i$6 = -56						; size = 4
_row_out$7 = -44					; size = 4
_row_in$8 = -32						; size = 4
_i$9 = -20						; size = 4
_offset$ = -8						; size = 4
_frame_in$ = 8						; size = 4
_source_scan_type$ = 12					; size = 4
_field_parity$ = 16					; size = 4
_field_out$ = 20					; size = 4
_yuv_io_extract_field PROC				; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 213  :   if ((source_scan_type != 1) && (source_scan_type != 2)) return 0;

	cmp	DWORD PTR _source_scan_type$[ebp], 1
	je	SHORT $LN11@yuv_io_ext
	cmp	DWORD PTR _source_scan_type$[ebp], 2
	je	SHORT $LN11@yuv_io_ext
	xor	eax, eax
	jmp	$LN1@yuv_io_ext
$LN11@yuv_io_ext:

; 214  :   if ((field_parity != 0)     && (field_parity != 1))     return 0;

	cmp	DWORD PTR _field_parity$[ebp], 0
	je	SHORT $LN12@yuv_io_ext
	cmp	DWORD PTR _field_parity$[ebp], 1
	je	SHORT $LN12@yuv_io_ext
	xor	eax, eax
	jmp	$LN1@yuv_io_ext
$LN12@yuv_io_ext:

; 215  : 
; 216  :   unsigned offset = 0;

	mov	DWORD PTR _offset$[ebp], 0

; 217  :   if (source_scan_type == 1) offset = field_parity ? 1 : 0;

	cmp	DWORD PTR _source_scan_type$[ebp], 1
	jne	SHORT $LN13@yuv_io_ext
	cmp	DWORD PTR _field_parity$[ebp], 0
	je	SHORT $LN17@yuv_io_ext
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN18@yuv_io_ext
$LN17@yuv_io_ext:
	mov	DWORD PTR tv70[ebp], 0
$LN18@yuv_io_ext:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _offset$[ebp], eax
	jmp	SHORT $LN14@yuv_io_ext
$LN13@yuv_io_ext:

; 218  :   else if (source_scan_type == 2) offset = field_parity ? 0 : 1;  

	cmp	DWORD PTR _source_scan_type$[ebp], 2
	jne	SHORT $LN14@yuv_io_ext
	cmp	DWORD PTR _field_parity$[ebp], 0
	je	SHORT $LN19@yuv_io_ext
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN20@yuv_io_ext
$LN19@yuv_io_ext:
	mov	DWORD PTR tv73[ebp], 1
$LN20@yuv_io_ext:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _offset$[ebp], eax
$LN14@yuv_io_ext:

; 219  : 
; 220  :   //Luma
; 221  :   for (int i = 0; i < field_out->height; ++i){

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN4@yuv_io_ext
$LN2@yuv_io_ext:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN4@yuv_io_ext:
	mov	eax, DWORD PTR _field_out$[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN3@yuv_io_ext

; 222  :     kvz_pixel *row_in  = frame_in->y + MIN(frame_in->height - 1, 2 * i + offset) * frame_in->stride;

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [eax+edx*2]
	cmp	ecx, edx
	jae	SHORT $LN21@yuv_io_ext
	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, 1
	mov	DWORD PTR tv87[ebp], ecx
	jmp	SHORT $LN22@yuv_io_ext
$LN21@yuv_io_ext:
	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR tv87[ebp], ecx
$LN22@yuv_io_ext:
	mov	edx, DWORD PTR _frame_in$[ebp]
	mov	eax, DWORD PTR tv87[ebp]
	imul	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _frame_in$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _row_in$8[ebp], eax

; 223  :     kvz_pixel *row_out = field_out->y + i * field_out->stride;

	mov	eax, DWORD PTR _field_out$[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	imul	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _field_out$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _row_out$7[ebp], ecx

; 224  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width);

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _row_in$8[ebp]
	push	edx
	mov	eax, DWORD PTR _row_out$7[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 225  :   }

	jmp	$LN2@yuv_io_ext
$LN3@yuv_io_ext:

; 226  : 
; 227  :   //Chroma
; 228  :   for (int i = 0; i < field_out->height / 2; ++i){

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN7@yuv_io_ext
$LN5@yuv_io_ext:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN7@yuv_io_ext:
	mov	eax, DWORD PTR _field_out$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _i$6[ebp], eax
	jge	$LN6@yuv_io_ext

; 229  :     kvz_pixel *row_in = frame_in->u + MIN(frame_in->height / 2 - 1, 2 * i + offset) * frame_in->stride / 2;

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jae	SHORT $LN23@yuv_io_ext
	mov	edx, DWORD PTR _frame_in$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN24@yuv_io_ext
$LN23@yuv_io_ext:
	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv147[ebp], edx
$LN24@yuv_io_ext:
	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR tv147[ebp]
	imul	ecx, DWORD PTR [eax+40]
	shr	ecx, 1
	mov	edx, DWORD PTR _frame_in$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _row_in$5[ebp], ecx

; 230  :     kvz_pixel *row_out = field_out->u + i * field_out->stride / 2;

	mov	eax, DWORD PTR _field_out$[ebp]
	mov	ecx, DWORD PTR _i$6[ebp]
	imul	ecx, DWORD PTR [eax+40]
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _field_out$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _row_out$4[ebp], eax

; 231  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width / 2);

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shr	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _row_in$5[ebp]
	push	edx
	mov	eax, DWORD PTR _row_out$4[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 232  :   }

	jmp	$LN5@yuv_io_ext
$LN6@yuv_io_ext:

; 233  : 
; 234  :   for (int i = 0; i < field_out->height / 2; ++i){

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN10@yuv_io_ext
$LN8@yuv_io_ext:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN10@yuv_io_ext:
	mov	eax, DWORD PTR _field_out$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN9@yuv_io_ext

; 235  :     kvz_pixel *row_in = frame_in->v + MIN(frame_in->height / 2 - 1, 2 * i + offset) * frame_in->stride / 2;

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	eax, DWORD PTR [eax+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*2]
	cmp	eax, ecx
	jae	SHORT $LN25@yuv_io_ext
	mov	edx, DWORD PTR _frame_in$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN26@yuv_io_ext
$LN25@yuv_io_ext:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR tv178[ebp], edx
$LN26@yuv_io_ext:
	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR tv178[ebp]
	imul	ecx, DWORD PTR [eax+40]
	shr	ecx, 1
	mov	edx, DWORD PTR _frame_in$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR _row_in$2[ebp], ecx

; 236  :     kvz_pixel *row_out = field_out->v + i * field_out->stride / 2;

	mov	eax, DWORD PTR _field_out$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	imul	ecx, DWORD PTR [eax+40]
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR _field_out$[ebp]
	add	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _row_out$1[ebp], eax

; 237  :     memcpy(row_out, row_in, sizeof(kvz_pixel) * frame_in->width / 2);

	mov	eax, DWORD PTR _frame_in$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shr	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _row_in$2[ebp]
	push	edx
	mov	eax, DWORD PTR _row_out$1[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 238  :   }

	jmp	$LN8@yuv_io_ext
$LN9@yuv_io_ext:

; 239  : 
; 240  :   return 1;

	mov	eax, 1
$LN1@yuv_io_ext:

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_yuv_io_extract_field ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvazaar_headers
_TEXT	SEGMENT
_stream$ = -20						; size = 16
_enc$ = 8						; size = 4
_data_out$ = 12						; size = 4
_len_out$ = 16						; size = 4
_kvazaar_headers PROC					; COMDAT

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 184  :   if (data_out) *data_out = NULL;

	cmp	DWORD PTR _data_out$[ebp], 0
	je	SHORT $LN2@kvazaar_he
	mov	eax, DWORD PTR _data_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@kvazaar_he:

; 185  :   if (len_out) *len_out = 0;

	cmp	DWORD PTR _len_out$[ebp], 0
	je	SHORT $LN3@kvazaar_he
	mov	eax, DWORD PTR _len_out$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@kvazaar_he:

; 186  : 
; 187  :   bitstream_t stream;
; 188  :   kvz_bitstream_init(&stream);

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_init
	add	esp, 4

; 189  : 
; 190  :   kvz_encoder_state_write_parameter_sets(&stream, &enc->states[enc->cur_state_num]);

	mov	eax, DWORD PTR _enc$[ebp]
	imul	ecx, DWORD PTR [eax+12], 336
	mov	edx, DWORD PTR _enc$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_encoder_state_write_parameter_sets
	add	esp, 8

; 191  : 
; 192  :   // Get stream length before taking chunks since that clears the stream.
; 193  :   if (len_out) *len_out = kvz_bitstream_tell(&stream) / 8;

	cmp	DWORD PTR _len_out$[ebp], 0
	je	SHORT $LN4@kvazaar_he
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_tell
	add	esp, 4
	push	0
	push	8
	push	edx
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _len_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@kvazaar_he:

; 194  :   if (data_out) *data_out = kvz_bitstream_take_chunks(&stream);

	cmp	DWORD PTR _data_out$[ebp], 0
	je	SHORT $LN5@kvazaar_he
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_take_chunks
	add	esp, 4
	mov	ecx, DWORD PTR _data_out$[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@kvazaar_he:

; 195  : 
; 196  :   kvz_bitstream_finalize(&stream);

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_kvz_bitstream_finalize
	add	esp, 4

; 197  :   return 1;

	mov	eax, 1

; 198  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@kvazaar_he
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@kvazaar_he:
	DD	1
	DD	$LN8@kvazaar_he
$LN8@kvazaar_he:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN7@kvazaar_he
$LN7@kvazaar_he:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_kvazaar_headers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _set_frame_info
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_i$2 = -8						; size = 4
_info$ = 8						; size = 4
_state$ = 12						; size = 4
_set_frame_info PROC					; COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 159  :   info->poc = state->frame->poc,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _info$[ebp]
	mov	cl, BYTE PTR [edx+24]
	mov	BYTE PTR [eax+4], cl

; 160  :   info->qp = state->frame->QP;
; 161  :   info->nal_unit_type = state->frame->pictype;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+80]
	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+8], edx

; 162  :   info->slice_type = state->frame->slicetype;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [edx+12], eax

; 163  : 
; 164  :   memset(info->ref_list[0], 0, 16 * sizeof(int));

	push	64					; 00000040H
	push	0
	mov	eax, 64					; 00000040H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _info$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 165  :   memset(info->ref_list[1], 0, 16 * sizeof(int));

	push	64					; 00000040H
	push	0
	mov	eax, 64					; 00000040H
	shl	eax, 0
	mov	ecx, DWORD PTR _info$[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 166  : 
; 167  :   for (size_t i = 0; i < state->frame->ref_LX_size[0]; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@set_frame_
$LN2@set_frame_:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@set_frame_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax+77]
	cmp	DWORD PTR _i$2[ebp], ecx
	jae	SHORT $LN3@set_frame_

; 168  :     info->ref_list[0][i] = state->frame->ref->pocs[state->frame->ref_LX[0][i]];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, 16					; 00000010H
	imul	eax, eax, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	eax, DWORD PTR _i$2[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+8]
	mov	eax, 64					; 00000040H
	imul	eax, eax, 0
	mov	esi, DWORD PTR _info$[ebp]
	lea	eax, DWORD PTR [esi+eax+16]
	mov	esi, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+esi*4], ecx

; 169  :   }

	jmp	SHORT $LN2@set_frame_
$LN3@set_frame_:

; 170  : 
; 171  :   for (size_t i = 0; i < state->frame->ref_LX_size[1]; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@set_frame_
$LN5@set_frame_:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@set_frame_:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx+77]
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN6@set_frame_

; 172  :     info->ref_list[1][i] = state->frame->ref->pocs[state->frame->ref_LX[1][i]];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	lea	ecx, DWORD PTR [ecx+eax+45]
	mov	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR [edx+8]
	mov	eax, 64					; 00000040H
	shl	eax, 0
	mov	esi, DWORD PTR _info$[ebp]
	lea	eax, DWORD PTR [esi+eax+16]
	mov	esi, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+esi*4], ecx

; 173  :   }

	jmp	SHORT $LN5@set_frame_
$LN6@set_frame_:

; 174  : 
; 175  :   info->ref_list_len[0] = state->frame->ref_LX_size[0];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [ecx+eax+77]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+edx+144], eax

; 176  :   info->ref_list_len[1] = state->frame->ref_LX_size[1];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	movzx	ecx, BYTE PTR [ecx+edx+77]
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+eax+144], ecx

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_set_frame_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvazaar_open
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_i$2 = -20						; size = 4
_encoder$ = -8						; size = 4
_cfg$ = 8						; size = 4
_kvazaar_open PROC					; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :   kvz_encoder *encoder = NULL;

	mov	DWORD PTR _encoder$[ebp], 0

; 93   : 
; 94   :   //Initialize strategies
; 95   :   // TODO: Make strategies non-global
; 96   :   if (!kvz_strategyselector_init(cfg->cpuid, KVZ_BIT_DEPTH)) {

	push	8
	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	call	_kvz_strategyselector_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@kvazaar_op

; 97   :     fprintf(stderr, "Failed to initialize strategies.\n");

	push	OFFSET ??_C@_0CC@GJPPLHJB@Failed?5to?5initialize?5strategies@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 8

; 98   :     goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN8@kvazaar_op:

; 99   :   }
; 100  : 
; 101  :   encoder = calloc(1, sizeof(kvz_encoder));

	mov	esi, esp
	push	1216					; 000004c0H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _encoder$[ebp], eax

; 102  :   if (!encoder) {

	cmp	DWORD PTR _encoder$[ebp], 0
	jne	SHORT $LN9@kvazaar_op

; 103  :     goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN9@kvazaar_op:

; 104  :   }
; 105  : 
; 106  :   encoder->control = kvz_encoder_control_init(cfg);

	mov	eax, DWORD PTR _cfg$[ebp]
	push	eax
	call	_kvz_encoder_control_init
	add	esp, 4
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [ecx], eax

; 107  :   if (!encoder->control) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@kvazaar_op

; 108  :     goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN10@kvazaar_op:

; 109  :   }
; 110  : 
; 111  :   encoder->num_encoder_states = encoder->control->cfg.owf + 1;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 1
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+8], edx

; 112  :   encoder->cur_state_num = 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+12], 0

; 113  :   encoder->out_state_num = 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+16], 0

; 114  :   encoder->frames_started = 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+1208], 0

; 115  :   encoder->frames_done = 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+1212], 0

; 116  : 
; 117  :   // Assure that the rc data allocation was successful
; 118  :   if(!kvz_get_rc_data(encoder->control)) {

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_get_rc_data
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN11@kvazaar_op

; 119  :     goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN11@kvazaar_op:

; 120  :   }
; 121  : 
; 122  :   kvz_init_input_frame_buffer(&encoder->input_buffer);

	mov	eax, DWORD PTR _encoder$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_kvz_init_input_frame_buffer
	add	esp, 4

; 123  : 
; 124  :   encoder->states = calloc(encoder->num_encoder_states, sizeof(encoder_state_t));

	mov	esi, esp
	push	336					; 00000150H
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [edx+4], eax

; 125  :   if (!encoder->states) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@kvazaar_op

; 126  :     goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN12@kvazaar_op:

; 127  :   }
; 128  : 
; 129  :   for (unsigned i = 0; i < encoder->num_encoder_states; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@kvazaar_op
$LN2@kvazaar_op:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@kvazaar_op:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@kvazaar_op

; 130  :     encoder->states[i].encoder_control = encoder->control;

	imul	eax, DWORD PTR _i$2[ebp], 336
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax], ecx

; 131  :     if (!kvz_encoder_state_init(&encoder->states[i], NULL)) {

	push	0
	imul	eax, DWORD PTR _i$2[ebp], 336
	mov	ecx, DWORD PTR _encoder$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	_kvz_encoder_state_init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@kvazaar_op

; 132  :       goto kvazaar_open_failure;

	jmp	$kvazaar_open_failure$17
$LN13@kvazaar_op:

; 133  :     }
; 134  : 
; 135  :     encoder->states[i].frame->QP = (int8_t)cfg->qp;

	imul	eax, DWORD PTR _i$2[ebp], 336
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+20]
	mov	ecx, DWORD PTR _cfg$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+24], dl

; 136  :   }

	jmp	SHORT $LN2@kvazaar_op
$LN3@kvazaar_op:

; 137  : 
; 138  :   for (int i = 0; i < encoder->num_encoder_states; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@kvazaar_op
$LN5@kvazaar_op:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@kvazaar_op:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@kvazaar_op

; 139  :     if (i == 0) {

	cmp	DWORD PTR _i$1[ebp], 0
	jne	SHORT $LN14@kvazaar_op

; 140  :       encoder->states[i].previous_encoder_state = &encoder->states[encoder->num_encoder_states - 1];

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	imul	edx, ecx, 336
	mov	eax, DWORD PTR _encoder$[ebp]
	add	edx, DWORD PTR [eax+4]
	imul	ecx, DWORD PTR _i$1[ebp], 336
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+ecx+16], edx

; 141  :     } else {

	jmp	SHORT $LN15@kvazaar_op
$LN14@kvazaar_op:

; 142  :       encoder->states[i].previous_encoder_state = &encoder->states[(i - 1) % encoder->num_encoder_states];

	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _encoder$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+8]
	imul	edx, edx, 336
	mov	eax, DWORD PTR _encoder$[ebp]
	add	edx, DWORD PTR [eax+4]
	imul	ecx, DWORD PTR _i$1[ebp], 336
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+ecx+16], edx
$LN15@kvazaar_op:

; 143  :     }
; 144  :     kvz_encoder_state_match_children_of_previous_frame(&encoder->states[i]);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _encoder$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	_kvz_encoder_state_match_children_of_previous_frame
	add	esp, 4

; 145  :   }

	jmp	$LN5@kvazaar_op
$LN6@kvazaar_op:

; 146  : 
; 147  :   encoder->states[encoder->cur_state_num].frame->num = -1;

	mov	eax, DWORD PTR _encoder$[ebp]
	imul	ecx, DWORD PTR [eax+12], 336
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR [ecx+8], -1

; 148  : 
; 149  :   return encoder;

	mov	eax, DWORD PTR _encoder$[ebp]
	jmp	SHORT $LN1@kvazaar_op
$kvazaar_open_failure$17:

; 150  : 
; 151  : kvazaar_open_failure:
; 152  :   kvazaar_close(encoder);

	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	_kvazaar_close
	add	esp, 4

; 153  :   return NULL;

	xor	eax, eax
$LN1@kvazaar_op:

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvazaar_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvazaar_close
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_pic$2 = -8						; size = 4
_encoder$ = 8						; size = 4
_kvazaar_close PROC					; COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 58   :   if (encoder) {

	cmp	DWORD PTR _encoder$[ebp], 0
	je	$LN7@kvazaar_cl

; 59   :     // The threadqueue must be stopped before freeing states.
; 60   :     if (encoder->control) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@kvazaar_cl

; 61   :       kvz_threadqueue_stop(encoder->control->threadqueue);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4516]
	push	edx
	call	_kvz_threadqueue_stop
	add	esp, 4
$LN8@kvazaar_cl:

; 62   :     }
; 63   : 
; 64   :     if (encoder->states) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN9@kvazaar_cl

; 65   :       // Flush input frame buffer.
; 66   :       kvz_picture *pic = NULL;

	mov	DWORD PTR _pic$2[ebp], 0
$LN2@kvazaar_cl:

; 67   :       while ((pic = kvz_encoder_feed_frame(&encoder->input_buffer,
; 68   :                                            &encoder->states[0],
; 69   :                                            NULL,
; 70   :                                            1)) != NULL) {

	push	1
	push	0
	mov	eax, 336				; 00000150H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _encoder$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR _encoder$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_kvz_encoder_feed_frame
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pic$2[ebp], eax
	cmp	DWORD PTR _pic$2[ebp], 0
	je	SHORT $LN3@kvazaar_cl

; 71   :         kvz_image_free(pic);

	mov	eax, DWORD PTR _pic$2[ebp]
	push	eax
	call	_kvz_image_free
	add	esp, 4

; 72   :         pic = NULL;

	mov	DWORD PTR _pic$2[ebp], 0

; 73   :       }

	jmp	SHORT $LN2@kvazaar_cl
$LN3@kvazaar_cl:

; 74   : 
; 75   :       for (unsigned i = 0; i < encoder->num_encoder_states; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@kvazaar_cl
$LN4@kvazaar_cl:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@kvazaar_cl:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN9@kvazaar_cl

; 76   :         kvz_encoder_state_finalize(&encoder->states[i]);

	imul	eax, DWORD PTR _i$1[ebp], 336
	mov	ecx, DWORD PTR _encoder$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	call	_kvz_encoder_state_finalize
	add	esp, 4

; 77   :       }

	jmp	SHORT $LN4@kvazaar_cl
$LN9@kvazaar_cl:

; 78   :     }
; 79   :     FREE_POINTER(encoder->states);

	mov	esi, esp
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax+4], 0

; 80   : 
; 81   :     kvz_free_rc_data();

	call	_kvz_free_rc_data

; 82   :     // Discard const from the pointer.
; 83   :     kvz_encoder_control_free((void*) encoder->control);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_kvz_encoder_control_free
	add	esp, 4

; 84   :     encoder->control = NULL;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@kvazaar_cl:

; 85   :   }
; 86   :   FREE_POINTER(encoder);

	mov	esi, esp
	mov	eax, DWORD PTR _encoder$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _encoder$[ebp], 0

; 87   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvazaar_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvazaar.c
;	COMDAT _kvz_api_get
_TEXT	SEGMENT
_bit_depth$ = 8						; size = 4
_kvz_api_get PROC					; COMDAT

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __90E09E3D_kvazaar@c
	call	@__CheckForDebuggerJustMyCode@4

; 423  :   return &kvz_8bit_api;

	mov	eax, OFFSET _kvz_8bit_api

; 424  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_api_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
