; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__614D3496_malloc@h DB 01H
__4DF1518D_xmmintrin@h DB 01H
__9CB4F737_reg_sad_pow2_widths-sse41@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__EE5B5AAC_picture-sse41@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_reg_sad_sse41
PUBLIC	_kvz_strategy_register_picture_sse41
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_05JEDOPGOD@sse41@				; `string'
PUBLIC	__xmm@08080808080808080000000000000000
PUBLIC	__xmm@0c0c0c0c080808080404040400000000
PUBLIC	__xmm@0f0e0d0c0b0a09080706050403020100
EXTRN	_kvz_strategyselector_register:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
;	COMDAT __xmm@0f0e0d0c0b0a09080706050403020100
CONST	SEGMENT
__xmm@0f0e0d0c0b0a09080706050403020100 DB 00H, 01H, 02H, 03H, 04H, 05H, 06H
	DB	07H, 08H, 09H, 0aH, 0bH, 0cH, 0dH, 0eH, 0fH
CONST	ENDS
;	COMDAT __xmm@0c0c0c0c080808080404040400000000
CONST	SEGMENT
__xmm@0c0c0c0c080808080404040400000000 DB 00H, 00H, 00H, 00H, 04H, 04H, 04H
	DB	04H, 08H, 08H, 08H, 08H, 0cH, 0cH, 0cH, 0cH
CONST	ENDS
;	COMDAT __xmm@08080808080808080000000000000000
CONST	SEGMENT
__xmm@08080808080808080000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 08H, 08H, 08H, 08H, 08H, 08H, 08H, 08H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05JEDOPGOD@sse41@
CONST	SEGMENT
??_C@_05JEDOPGOD@sse41@ DB 'sse41', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _hor_sad_sse41
_TEXT	SEGMENT
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_pic_stride$ = 24					; size = 4
_ref_stride$ = 28					; size = 4
_left$ = 32						; size = 4
_right$ = 36						; size = 4
_hor_sad_sse41 PROC					; COMDAT

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 214  :   if (width == 4)

	cmp	DWORD PTR _width$[ebp], 4
	jne	SHORT $LN2@hor_sad_ss

; 215  :     return hor_sad_sse41_w4(pic_data, ref_data, height,

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_hor_sad_sse41_w4
	add	esp, 28					; 0000001cH
	jmp	$LN1@hor_sad_ss
$LN2@hor_sad_ss:

; 216  :                             pic_stride, ref_stride, left, right);
; 217  :   if (width == 8)

	cmp	DWORD PTR _width$[ebp], 8
	jne	SHORT $LN3@hor_sad_ss

; 218  :     return hor_sad_sse41_w8(pic_data, ref_data, height,

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_hor_sad_sse41_w8
	add	esp, 28					; 0000001cH
	jmp	$LN1@hor_sad_ss
$LN3@hor_sad_ss:

; 219  :                             pic_stride, ref_stride, left, right);
; 220  :   if (width == 16)

	cmp	DWORD PTR _width$[ebp], 16		; 00000010H
	jne	SHORT $LN4@hor_sad_ss

; 221  :     return hor_sad_sse41_w16(pic_data, ref_data, height,

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_hor_sad_sse41_w16
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@hor_sad_ss
$LN4@hor_sad_ss:

; 222  :                              pic_stride, ref_stride, left, right);
; 223  :   if (width == 32)

	cmp	DWORD PTR _width$[ebp], 32		; 00000020H
	jne	SHORT $LN5@hor_sad_ss

; 224  :     return hor_sad_sse41_w32(pic_data, ref_data, height,

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_hor_sad_sse41_w32
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN1@hor_sad_ss
	jmp	SHORT $LN1@hor_sad_ss
$LN5@hor_sad_ss:

; 225  :                              pic_stride, ref_stride, left, right);
; 226  :   else
; 227  :     return hor_sad_sse41_arbitrary(pic_data, ref_data, width, height,

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_data$[ebp]
	push	ecx
	call	_hor_sad_sse41_arbitrary
	add	esp, 32					; 00000020H
$LN1@hor_sad_ss:

; 228  :                                    pic_stride, ref_stride, left, right);
; 229  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hor_sad_sse41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _hor_sad_sse41_w32
_TEXT	SEGMENT
_sad$ = -1968						; size = 16
_sse_inc_2$ = -1936					; size = 16
_curr_sads_cd$1 = -1904					; size = 16
_curr_sads_ab$2 = -1872					; size = 16
_d_final$3 = -1840					; size = 16
_b_final$4 = -1808					; size = 16
_d_with_b_data$5 = -1776				; size = 16
_b_with_d_data$6 = -1744				; size = 16
_d_shifted$7 = -1712					; size = 16
_b_shifted$8 = -1680					; size = 16
_d$9 = -1648						; size = 16
_c$10 = -1616						; size = 16
_b$11 = -1584						; size = 16
_a$12 = -1552						; size = 16
_curr_sads_gh$13 = -1520				; size = 16
_curr_sads_ef$14 = -1488				; size = 16
_curr_sads_cd$15 = -1456				; size = 16
_curr_sads_ab$16 = -1424				; size = 16
_h_final$17 = -1392					; size = 16
_f_final$18 = -1360					; size = 16
_d_final$19 = -1328					; size = 16
_b_final$20 = -1296					; size = 16
_h_with_f_data$21 = -1264				; size = 16
_f_with_h_data$22 = -1232				; size = 16
_d_with_b_data$23 = -1200				; size = 16
_b_with_d_data$24 = -1168				; size = 16
_h_shifted$25 = -1136					; size = 16
_f_shifted$26 = -1104					; size = 16
_d_shifted$27 = -1072					; size = 16
_b_shifted$28 = -1040					; size = 16
_h$29 = -1008						; size = 16
_g$30 = -976						; size = 16
_f$31 = -944						; size = 16
_e$32 = -912						; size = 16
_d$33 = -880						; size = 16
_c$34 = -848						; size = 16
_b$35 = -816						; size = 16
_a$36 = -784						; size = 16
_sse_inc$ = -752					; size = 16
_y$ = -728						; size = 4
_ld_offset$ = -716					; size = 4
_move_b_to_d_mask$ = -704				; size = 16
_move_d_to_b_imask$ = -672				; size = 16
_md2bimask$ = -640					; size = 16
_shufmask1$ = -608					; size = 16
_shufmask1_right$ = -576				; size = 16
_ns_for_shufmask$ = -544				; size = 16
_vecwid_for_left$ = -512				; size = 16
_is_left$ = -480					; size = 16
_epol_mask_hi$ = -448					; size = 16
_epol_mask_lo$ = -416					; size = 16
_epol_mask_right_hi$ = -384				; size = 16
_epol_mask_right_lo$ = -352				; size = 16
_rightmost_good_idx$ = -320				; size = 16
_nshi$ = -288						; size = 16
_nslo$ = -256						; size = 16
_rights$ = -224						; size = 16
_lefts$ = -192						; size = 16
_vec_widths$ = -160					; size = 16
_zero$ = -128						; size = 16
_height_residual_lines$ = -92				; size = 4
_height_twoline_groups$ = -80				; size = 4
_right_clamped$ = -68					; size = 4
_left_clamped$ = -56					; size = 4
_right_eq_wid$ = -44					; size = 4
_left_eq_wid$ = -32					; size = 4
_blkwidth_log2$ = -20					; size = 4
_vec_width$ = -8					; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_pic_stride$ = 20					; size = 4
_ref_stride$ = 24					; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_hor_sad_sse41_w32 PROC					; COMDAT

; 104  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2744				; 00000ab8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2744]
	mov	ecx, 686				; 000002aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 105  :   const size_t vec_width       = 16;

	mov	DWORD PTR _vec_width$[ebp], 16		; 00000010H

; 106  :   const uint32_t blkwidth_log2 = 5;

	mov	DWORD PTR _blkwidth_log2$[ebp], 5

; 107  :   const uint32_t left_eq_wid   = left  >> blkwidth_log2;

	mov	eax, DWORD PTR _left$[ebx]
	mov	ecx, DWORD PTR _blkwidth_log2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _left_eq_wid$[ebp], eax

; 108  :   const uint32_t right_eq_wid  = right >> blkwidth_log2;

	mov	eax, DWORD PTR _right$[ebx]
	mov	ecx, DWORD PTR _blkwidth_log2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _right_eq_wid$[ebp], eax

; 109  :   const int32_t  left_clamped  = left  - left_eq_wid;

	mov	eax, DWORD PTR _left$[ebx]
	sub	eax, DWORD PTR _left_eq_wid$[ebp]
	mov	DWORD PTR _left_clamped$[ebp], eax

; 110  :   const int32_t  right_clamped = right - right_eq_wid;

	mov	eax, DWORD PTR _right$[ebx]
	sub	eax, DWORD PTR _right_eq_wid$[ebp]
	mov	DWORD PTR _right_clamped$[ebp], eax

; 111  : 
; 112  :   const int32_t height_twoline_groups = height & ~1;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _height_twoline_groups$[ebp], eax

; 113  :   const int32_t height_residual_lines = height &  1;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 1
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 114  : 
; 115  :   const __m128i zero       = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _zero$[ebp], xmm0

; 116  :   const __m128i vec_widths = _mm_set1_epi8((uint8_t)vec_width);

	movsx	eax, BYTE PTR _vec_width$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _vec_widths$[ebp], xmm0

; 117  :   const __m128i lefts      = _mm_set1_epi8((uint8_t)left_clamped);

	movsx	eax, BYTE PTR _left_clamped$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _lefts$[ebp], xmm0

; 118  :   const __m128i rights     = _mm_set1_epi8((uint8_t)right_clamped);

	movsx	eax, BYTE PTR _right_clamped$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _rights$[ebp], xmm0

; 119  :   const __m128i nslo       = _mm_setr_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _nslo$[ebp], xmm0

; 120  :   const __m128i nshi       = _mm_add_epi8 (nslo, vec_widths);

	movaps	xmm0, XMMWORD PTR _nslo$[ebp]
	paddb	xmm0, XMMWORD PTR _vec_widths$[ebp]
	movaps	XMMWORD PTR _nshi$[ebp], xmm0

; 121  : 
; 122  :   const __m128i rightmost_good_idx = _mm_set1_epi8((uint8_t)((vec_width << 1) - right - 1));

	mov	eax, DWORD PTR _vec_width$[ebp]
	shl	eax, 1
	sub	eax, DWORD PTR _right$[ebx]
	sub	eax, 1
	movsx	ecx, al
	movd	xmm0, ecx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _rightmost_good_idx$[ebp], xmm0

; 123  : 
; 124  :   const __m128i epol_mask_right_lo = _mm_min_epi8  (nslo,            rightmost_good_idx);

	movaps	xmm0, XMMWORD PTR _nslo$[ebp]
	pminsb	xmm0, XMMWORD PTR _rightmost_good_idx$[ebp]
	movaps	XMMWORD PTR _epol_mask_right_lo$[ebp], xmm0

; 125  :   const __m128i epol_mask_right_hi = _mm_min_epi8  (nshi,            rightmost_good_idx);

	movaps	xmm0, XMMWORD PTR _nshi$[ebp]
	pminsb	xmm0, XMMWORD PTR _rightmost_good_idx$[ebp]
	movaps	XMMWORD PTR _epol_mask_right_hi$[ebp], xmm0

; 126  :   const __m128i epol_mask_lo       = _mm_max_epi8  (lefts,           epol_mask_right_lo);

	movaps	xmm0, XMMWORD PTR _lefts$[ebp]
	pmaxsb	xmm0, XMMWORD PTR _epol_mask_right_lo$[ebp]
	movaps	XMMWORD PTR _epol_mask_lo$[ebp], xmm0

; 127  :   const __m128i epol_mask_hi       = _mm_max_epi8  (lefts,           epol_mask_right_hi);

	movaps	xmm0, XMMWORD PTR _lefts$[ebp]
	pmaxsb	xmm0, XMMWORD PTR _epol_mask_right_hi$[ebp]
	movaps	XMMWORD PTR _epol_mask_hi$[ebp], xmm0

; 128  : 
; 129  :   const __m128i is_left            = _mm_cmpeq_epi8(rights,          zero);

	movaps	xmm0, XMMWORD PTR _rights$[ebp]
	pcmpeqb	xmm0, XMMWORD PTR _zero$[ebp]
	movaps	XMMWORD PTR _is_left$[ebp], xmm0

; 130  :   const __m128i vecwid_for_left    = _mm_and_si128 (is_left,         vec_widths);

	movaps	xmm0, XMMWORD PTR _is_left$[ebp]
	pand	xmm0, XMMWORD PTR _vec_widths$[ebp]
	movaps	XMMWORD PTR _vecwid_for_left$[ebp], xmm0

; 131  :   const __m128i ns_for_shufmask    = _mm_or_si128  (nslo,            vecwid_for_left);

	movaps	xmm0, XMMWORD PTR _nslo$[ebp]
	por	xmm0, XMMWORD PTR _vecwid_for_left$[ebp]
	movaps	XMMWORD PTR _ns_for_shufmask$[ebp], xmm0

; 132  : 
; 133  :   const __m128i shufmask1_right    = _mm_add_epi8  (ns_for_shufmask, rights);

	movaps	xmm0, XMMWORD PTR _ns_for_shufmask$[ebp]
	paddb	xmm0, XMMWORD PTR _rights$[ebp]
	movaps	XMMWORD PTR _shufmask1_right$[ebp], xmm0

; 134  :   const __m128i shufmask1          = _mm_sub_epi8  (shufmask1_right, lefts);

	movaps	xmm0, XMMWORD PTR _shufmask1_right$[ebp]
	psubb	xmm0, XMMWORD PTR _lefts$[ebp]
	movaps	XMMWORD PTR _shufmask1$[ebp], xmm0

; 135  : 
; 136  :   const __m128i md2bimask          = _mm_cmpgt_epi8(vec_widths,      shufmask1);

	movaps	xmm0, XMMWORD PTR _vec_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _md2bimask$[ebp], xmm0

; 137  :   const __m128i move_d_to_b_imask  = _mm_or_si128  (is_left,         md2bimask);

	movaps	xmm0, XMMWORD PTR _is_left$[ebp]
	por	xmm0, XMMWORD PTR _md2bimask$[ebp]
	movaps	XMMWORD PTR _move_d_to_b_imask$[ebp], xmm0

; 138  :   const __m128i move_b_to_d_mask   = _mm_cmpgt_epi8(lefts,           nslo);

	movaps	xmm0, XMMWORD PTR _lefts$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _move_b_to_d_mask$[ebp], xmm0

; 139  : 
; 140  :   // If we're straddling the left border, start from the left border instead,
; 141  :   // and if right border, end on the border
; 142  :   const int32_t ld_offset = left - right;

	mov	eax, DWORD PTR _left$[ebx]
	sub	eax, DWORD PTR _right$[ebx]
	mov	DWORD PTR _ld_offset$[ebp], eax

; 143  : 
; 144  :   int32_t y;
; 145  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 146  :   for (y = 0; y < height_twoline_groups; y += 2) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad_ss
$LN2@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_twoline_groups$[ebp]
	jge	$LN3@hor_sad_ss

; 147  :     __m128i a = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride + 0));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$36[ebp], xmm0

; 148  :     __m128i b = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + 0  + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$35[ebp], xmm0

; 149  :     __m128i c = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _c$34[ebp], xmm0

; 150  :     __m128i d = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + 16 + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax+ecx+16]
	movaps	XMMWORD PTR _d$33[ebp], xmm0

; 151  :     __m128i e = _mm_loadu_si128((__m128i *)(pic_data + (y + 1) * pic_stride + 0));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$32[ebp], xmm0

; 152  :     __m128i f = _mm_loadu_si128((__m128i *)(ref_data + (y + 1) * ref_stride + 0  + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _f$31[ebp], xmm0

; 153  :     __m128i g = _mm_loadu_si128((__m128i *)(pic_data + (y + 1) * pic_stride + 16));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _g$30[ebp], xmm0

; 154  :     __m128i h = _mm_loadu_si128((__m128i *)(ref_data + (y + 1) * ref_stride + 16 + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax+ecx+16]
	movaps	XMMWORD PTR _h$29[ebp], xmm0

; 155  : 
; 156  :     __m128i b_shifted         = _mm_shuffle_epi8(b, shufmask1);

	movaps	xmm0, XMMWORD PTR _b$35[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _b_shifted$28[ebp], xmm0

; 157  :     __m128i d_shifted         = _mm_shuffle_epi8(d, shufmask1);

	movaps	xmm0, XMMWORD PTR _d$33[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _d_shifted$27[ebp], xmm0

; 158  :     __m128i f_shifted         = _mm_shuffle_epi8(f, shufmask1);

	movaps	xmm0, XMMWORD PTR _f$31[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _f_shifted$26[ebp], xmm0

; 159  :     __m128i h_shifted         = _mm_shuffle_epi8(h, shufmask1);

	movaps	xmm0, XMMWORD PTR _h$29[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _h_shifted$25[ebp], xmm0

; 160  : 
; 161  :     // TODO: could these be optimized for two-operand efficiency? Only one of
; 162  :     // these ever does useful work, the other should leave the vector untouched,
; 163  :     // so could the first result be used in the second calculation or something?
; 164  :     __m128i b_with_d_data     = _mm_blendv_epi8(d_shifted, b_shifted, move_d_to_b_imask);

	movaps	xmm1, XMMWORD PTR _d_shifted$27[ebp]
	movaps	xmm0, XMMWORD PTR _move_d_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$28[ebp], xmm0
	movaps	XMMWORD PTR _b_with_d_data$24[ebp], xmm1

; 165  :     __m128i d_with_b_data     = _mm_blendv_epi8(d_shifted, b_shifted, move_b_to_d_mask);

	movaps	xmm1, XMMWORD PTR _d_shifted$27[ebp]
	movaps	xmm0, XMMWORD PTR _move_b_to_d_mask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$28[ebp], xmm0
	movaps	XMMWORD PTR _d_with_b_data$23[ebp], xmm1

; 166  :     __m128i f_with_h_data     = _mm_blendv_epi8(h_shifted, f_shifted, move_d_to_b_imask);

	movaps	xmm1, XMMWORD PTR _h_shifted$25[ebp]
	movaps	xmm0, XMMWORD PTR _move_d_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _f_shifted$26[ebp], xmm0
	movaps	XMMWORD PTR _f_with_h_data$22[ebp], xmm1

; 167  :     __m128i h_with_f_data     = _mm_blendv_epi8(h_shifted, f_shifted, move_b_to_d_mask);

	movaps	xmm1, XMMWORD PTR _h_shifted$25[ebp]
	movaps	xmm0, XMMWORD PTR _move_b_to_d_mask$[ebp]
	pblendvb xmm1, XMMWORD PTR _f_shifted$26[ebp], xmm0
	movaps	XMMWORD PTR _h_with_f_data$21[ebp], xmm1

; 168  : 
; 169  :     __m128i b_final           = _mm_shuffle_epi8(b_with_d_data, epol_mask_lo);

	movaps	xmm0, XMMWORD PTR _b_with_d_data$24[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_lo$[ebp]
	movaps	XMMWORD PTR _b_final$20[ebp], xmm0

; 170  :     __m128i d_final           = _mm_shuffle_epi8(d_with_b_data, epol_mask_hi);

	movaps	xmm0, XMMWORD PTR _d_with_b_data$23[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_hi$[ebp]
	movaps	XMMWORD PTR _d_final$19[ebp], xmm0

; 171  :     __m128i f_final           = _mm_shuffle_epi8(f_with_h_data, epol_mask_lo);

	movaps	xmm0, XMMWORD PTR _f_with_h_data$22[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_lo$[ebp]
	movaps	XMMWORD PTR _f_final$18[ebp], xmm0

; 172  :     __m128i h_final           = _mm_shuffle_epi8(h_with_f_data, epol_mask_hi);

	movaps	xmm0, XMMWORD PTR _h_with_f_data$21[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_hi$[ebp]
	movaps	XMMWORD PTR _h_final$17[ebp], xmm0

; 173  : 
; 174  :     __m128i curr_sads_ab      = _mm_sad_epu8    (a, b_final);

	movaps	xmm0, XMMWORD PTR _a$36[ebp]
	psadbw	xmm0, XMMWORD PTR _b_final$20[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$16[ebp], xmm0

; 175  :     __m128i curr_sads_cd      = _mm_sad_epu8    (c, d_final);

	movaps	xmm0, XMMWORD PTR _c$34[ebp]
	psadbw	xmm0, XMMWORD PTR _d_final$19[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$15[ebp], xmm0

; 176  :     __m128i curr_sads_ef      = _mm_sad_epu8    (e, f_final);

	movaps	xmm0, XMMWORD PTR _e$32[ebp]
	psadbw	xmm0, XMMWORD PTR _f_final$18[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$14[ebp], xmm0

; 177  :     __m128i curr_sads_gh      = _mm_sad_epu8    (g, h_final);

	movaps	xmm0, XMMWORD PTR _g$30[ebp]
	psadbw	xmm0, XMMWORD PTR _h_final$17[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$13[ebp], xmm0

; 178  : 
; 179  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$16[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 180  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$15[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 181  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$14[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 182  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$13[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 183  :   }

	jmp	$LN2@hor_sad_ss
$LN3@hor_sad_ss:

; 184  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN5@hor_sad_ss

; 185  :     __m128i a = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride + 0));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$12[ebp], xmm0

; 186  :     __m128i b = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + 0  + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$11[ebp], xmm0

; 187  :     __m128i c = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _c$10[ebp], xmm0

; 188  :     __m128i d = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + 16 + ld_offset));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _ld_offset$[ebp]
	movups	xmm0, XMMWORD PTR [eax+ecx+16]
	movaps	XMMWORD PTR _d$9[ebp], xmm0

; 189  : 
; 190  :     __m128i b_shifted         = _mm_shuffle_epi8(b, shufmask1);

	movaps	xmm0, XMMWORD PTR _b$11[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _b_shifted$8[ebp], xmm0

; 191  :     __m128i d_shifted         = _mm_shuffle_epi8(d, shufmask1);

	movaps	xmm0, XMMWORD PTR _d$9[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _d_shifted$7[ebp], xmm0

; 192  : 
; 193  :     __m128i b_with_d_data     = _mm_blendv_epi8(d_shifted, b_shifted, move_d_to_b_imask);

	movaps	xmm1, XMMWORD PTR _d_shifted$7[ebp]
	movaps	xmm0, XMMWORD PTR _move_d_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$8[ebp], xmm0
	movaps	XMMWORD PTR _b_with_d_data$6[ebp], xmm1

; 194  :     __m128i d_with_b_data     = _mm_blendv_epi8(d_shifted, b_shifted, move_b_to_d_mask);

	movaps	xmm1, XMMWORD PTR _d_shifted$7[ebp]
	movaps	xmm0, XMMWORD PTR _move_b_to_d_mask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$8[ebp], xmm0
	movaps	XMMWORD PTR _d_with_b_data$5[ebp], xmm1

; 195  : 
; 196  :     __m128i b_final           = _mm_shuffle_epi8(b_with_d_data, epol_mask_lo);

	movaps	xmm0, XMMWORD PTR _b_with_d_data$6[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_lo$[ebp]
	movaps	XMMWORD PTR _b_final$4[ebp], xmm0

; 197  :     __m128i d_final           = _mm_shuffle_epi8(d_with_b_data, epol_mask_hi);

	movaps	xmm0, XMMWORD PTR _d_with_b_data$5[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask_hi$[ebp]
	movaps	XMMWORD PTR _d_final$3[ebp], xmm0

; 198  : 
; 199  :     __m128i curr_sads_ab      = _mm_sad_epu8    (a, b_final);

	movaps	xmm0, XMMWORD PTR _a$12[ebp]
	psadbw	xmm0, XMMWORD PTR _b_final$4[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$2[ebp], xmm0

; 200  :     __m128i curr_sads_cd      = _mm_sad_epu8    (c, d_final);

	movaps	xmm0, XMMWORD PTR _c$10[ebp]
	psadbw	xmm0, XMMWORD PTR _d_final$3[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$1[ebp], xmm0

; 201  : 
; 202  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$2[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 203  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0
$LN5@hor_sad_ss:

; 204  :   }
; 205  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 206  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 207  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 208  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_hor_sad_sse41_w32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _ver_sad_sse41
_TEXT	SEGMENT
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride$ = 24						; size = 4
_ver_sad_sse41 PROC					; COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 87   :   if (width == 0)

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN2@ver_sad_ss

; 88   :     return 0;

	xor	eax, eax
	jmp	$LN1@ver_sad_ss
$LN2@ver_sad_ss:

; 89   :   if (width == 4)

	cmp	DWORD PTR _width$[ebp], 4
	jne	SHORT $LN3@ver_sad_ss

; 90   :     return ver_sad_w4(pic_data, ref_data, height, stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_ver_sad_w4
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@ver_sad_ss
$LN3@ver_sad_ss:

; 91   :   if (width == 8)

	cmp	DWORD PTR _width$[ebp], 8
	jne	SHORT $LN4@ver_sad_ss

; 92   :     return ver_sad_w8(pic_data, ref_data, height, stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_ver_sad_w8
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@ver_sad_ss
$LN4@ver_sad_ss:

; 93   :   if (width == 12)

	cmp	DWORD PTR _width$[ebp], 12		; 0000000cH
	jne	SHORT $LN5@ver_sad_ss

; 94   :     return ver_sad_w12(pic_data, ref_data, height, stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_ver_sad_w12
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@ver_sad_ss
$LN5@ver_sad_ss:

; 95   :   if (width == 16)

	cmp	DWORD PTR _width$[ebp], 16		; 00000010H
	jne	SHORT $LN6@ver_sad_ss

; 96   :     return ver_sad_w16(pic_data, ref_data, height, stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pic_data$[ebp]
	push	eax
	call	_ver_sad_w16
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@ver_sad_ss
	jmp	SHORT $LN1@ver_sad_ss
$LN6@ver_sad_ss:

; 97   :   else
; 98   :     return ver_sad_arbitrary(pic_data, ref_data, width, height, stride);

	mov	eax, DWORD PTR _stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pic_data$[ebp]
	push	ecx
	call	_ver_sad_arbitrary
	add	esp, 20					; 00000014H
$LN1@ver_sad_ss:

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ver_sad_sse41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _get_optimized_sad_sse41
_TEXT	SEGMENT
_width$ = 8						; size = 4
_get_optimized_sad_sse41 PROC				; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   :   if (width == 0)

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN2@get_optimi

; 69   :     return reg_sad_w0;

	mov	eax, OFFSET _reg_sad_w0
	jmp	SHORT $LN1@get_optimi
$LN2@get_optimi:

; 70   :   if (width == 4)

	cmp	DWORD PTR _width$[ebp], 4
	jne	SHORT $LN3@get_optimi

; 71   :     return reg_sad_w4;

	mov	eax, OFFSET _reg_sad_w4
	jmp	SHORT $LN1@get_optimi
$LN3@get_optimi:

; 72   :   if (width == 8)

	cmp	DWORD PTR _width$[ebp], 8
	jne	SHORT $LN4@get_optimi

; 73   :     return reg_sad_w8;

	mov	eax, OFFSET _reg_sad_w8
	jmp	SHORT $LN1@get_optimi
$LN4@get_optimi:

; 74   :   if (width == 12)

	cmp	DWORD PTR _width$[ebp], 12		; 0000000cH
	jne	SHORT $LN5@get_optimi

; 75   :     return reg_sad_w12;

	mov	eax, OFFSET _reg_sad_w12
	jmp	SHORT $LN1@get_optimi
$LN5@get_optimi:

; 76   :   if (width == 16)

	cmp	DWORD PTR _width$[ebp], 16		; 00000010H
	jne	SHORT $LN6@get_optimi

; 77   :     return reg_sad_w16;

	mov	eax, OFFSET _reg_sad_w16
	jmp	SHORT $LN1@get_optimi
$LN6@get_optimi:

; 78   :   if (width == 24)

	cmp	DWORD PTR _width$[ebp], 24		; 00000018H
	jne	SHORT $LN7@get_optimi

; 79   :     return reg_sad_w24;

	mov	eax, OFFSET _reg_sad_w24
	jmp	SHORT $LN1@get_optimi
	jmp	SHORT $LN1@get_optimi
$LN7@get_optimi:

; 80   :   else
; 81   :     return NULL;

	xor	eax, eax
$LN1@get_optimi:

; 82   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_optimized_sad_sse41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _hor_sad_sse41_arbitrary
_TEXT	SEGMENT
_sad$ = -3120						; size = 16
_sse_inc_2$ = -3088					; size = 16
_sad_ab$1 = -3056					; size = 16
_b_unread$2 = -3024					; size = 16
_unrd_mask$3 = -2992					; size = 16
_unrd_imask$4 = -2960					; size = 16
_curr_ns$5 = -2928					; size = 16
_startoffs$6 = -2896					; size = 16
_startoff$7 = -2857					; size = 1
_b_with_old$8 = -2848					; size = 16
_b_shifted$9 = -2816					; size = 16
_b$10 = -2784						; size = 16
_a$11 = -2752						; size = 16
_old_b$12 = -2720					; size = 16
_leftoff_with_sign_neg$13 = -2696			; size = 4
_a_off$14 = -2684					; size = 4
_sad_ab$15 = -2672					; size = 16
_b_unread$16 = -2640					; size = 16
_unrd_mask$17 = -2608					; size = 16
_unrd_imask$18 = -2576					; size = 16
_ns$19 = -2544						; size = 16
_startoffs$20 = -2512					; size = 16
_a$21 = -2480						; size = 16
_borderpx_vec$22 = -2448				; size = 16
_sad_gh$23 = -2416					; size = 16
_sad_ef$24 = -2384					; size = 16
_sad_cd$25 = -2352					; size = 16
_sad_ab$26 = -2320					; size = 16
_h_unread$27 = -2288					; size = 16
_f_unread$28 = -2256					; size = 16
_d_unread$29 = -2224					; size = 16
_b_unread$30 = -2192					; size = 16
_unrd_mask$31 = -2160					; size = 16
_unrd_imask$32 = -2128					; size = 16
_curr_ns$33 = -2096					; size = 16
_startoffs$34 = -2064					; size = 16
_startoff$35 = -2025					; size = 1
_h_with_old$36 = -2016					; size = 16
_f_with_old$37 = -1984					; size = 16
_d_with_old$38 = -1952					; size = 16
_b_with_old$39 = -1920					; size = 16
_h_shifted$40 = -1888					; size = 16
_f_shifted$41 = -1856					; size = 16
_d_shifted$42 = -1824					; size = 16
_b_shifted$43 = -1792					; size = 16
_h$44 = -1760						; size = 16
_f$45 = -1728						; size = 16
_d$46 = -1696						; size = 16
_b$47 = -1664						; size = 16
_g$48 = -1632						; size = 16
_e$49 = -1600						; size = 16
_c$50 = -1568						; size = 16
_a$51 = -1536						; size = 16
_old_h$52 = -1504					; size = 16
_old_f$53 = -1472					; size = 16
_old_d$54 = -1440					; size = 16
_old_b$55 = -1408					; size = 16
_leftoff_with_sign_neg$56 = -1384			; size = 4
_a_off$57 = -1372					; size = 4
_sad_gh$58 = -1360					; size = 16
_sad_ef$59 = -1328					; size = 16
_sad_cd$60 = -1296					; size = 16
_sad_ab$61 = -1264					; size = 16
_h_unread$62 = -1232					; size = 16
_f_unread$63 = -1200					; size = 16
_d_unread$64 = -1168					; size = 16
_b_unread$65 = -1136					; size = 16
_unrd_mask$66 = -1104					; size = 16
_unrd_imask$67 = -1072					; size = 16
_ns$68 = -1040						; size = 16
_startoffs$69 = -1008					; size = 16
_g$70 = -976						; size = 16
_e$71 = -944						; size = 16
_c$72 = -912						; size = 16
_a$73 = -880						; size = 16
_borderpx_vec_h$74 = -848				; size = 16
_borderpx_vec_f$75 = -816				; size = 16
_borderpx_vec_d$76 = -784				; size = 16
_borderpx_vec_b$77 = -752				; size = 16
_y$ = -724						; size = 4
_x$ = -712						; size = 4
_outvec_offset$ = -700					; size = 4
_move_old_to_b_imask$ = -688				; size = 16
_mo2bimask_r$ = -656					; size = 16
_mo2bimask_l$ = -624					; size = 16
_mo2bmask_l$ = -592					; size = 16
_shufmask1$ = -560					; size = 16
_ns_for_sm1$ = -528					; size = 16
_offs_for_sm1$ = -496					; size = 16
_offs_neg$ = -464					; size = 16
_vw_for_left$ = -432					; size = 16
_is_left$ = -400					; size = 16
_left_offsets$ = -368					; size = 16
_invec_linc$ = -344					; size = 4
_invec_lend$ = -332					; size = 4
_invec_lstart$ = -320					; size = 4
_border_off$ = -308					; size = 4
_inside_width$ = -296					; size = 4
_outside_width$ = -284					; size = 4
_is_left_bm$ = -272					; size = 4
_left_offset$ = -260					; size = 4
_inside_vecs$ = -248					; size = 4
_outside_vecs$ = -236					; size = 4
_nslo$ = -224						; size = 16
_vec_widths$ = -192					; size = 16
_blk_widths$ = -160					; size = 16
_rights$ = -128						; size = 16
_height_residual_lines$ = -92				; size = 4
_height_fourline_groups$ = -80				; size = 4
_vec_width_log2$ = -68					; size = 4
_vecwid_bitmask$ = -56					; size = 4
_vec_width$ = -44					; size = 4
_sse_inc$ = -32						; size = 16
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_pic_stride$ = 24					; size = 4
_ref_stride$ = 28					; size = 4
_left$ = 32						; size = 4
_right$ = 36						; size = 4
_hor_sad_sse41_arbitrary PROC				; COMDAT

; 842  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 4472				; 00001178H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4472]
	mov	ecx, 1118				; 0000045eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 843  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 844  : 
; 845  :   const size_t vec_width = 16;

	mov	DWORD PTR _vec_width$[ebp], 16		; 00000010H

; 846  :   const size_t vecwid_bitmask = 15;

	mov	DWORD PTR _vecwid_bitmask$[ebp], 15	; 0000000fH

; 847  :   const size_t vec_width_log2 = 4;

	mov	DWORD PTR _vec_width_log2$[ebp], 4

; 848  : 
; 849  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 850  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 851  : 
; 852  :   const __m128i rights     = _mm_set1_epi8((uint8_t)right);

	movsx	eax, BYTE PTR _right$[ebx]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _rights$[ebp], xmm0

; 853  :   const __m128i blk_widths = _mm_set1_epi8((uint8_t)width);

	movsx	eax, BYTE PTR _width$[ebx]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _blk_widths$[ebp], xmm0

; 854  :   const __m128i vec_widths = _mm_set1_epi8((uint8_t)vec_width);

	movsx	eax, BYTE PTR _vec_width$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _vec_widths$[ebp], xmm0

; 855  :   const __m128i nslo       = _mm_setr_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _nslo$[ebp], xmm0

; 856  : 
; 857  :   uint32_t outside_vecs,  inside_vecs,  left_offset, is_left_bm;
; 858  :   int32_t  outside_width, inside_width, border_off,  invec_lstart,
; 859  :            invec_lend,    invec_linc;
; 860  :   if (left) {

	cmp	DWORD PTR _left$[ebx], 0
	je	$LN20@hor_sad_ss

; 861  :     outside_vecs  =    left                              >> vec_width_log2;

	mov	eax, DWORD PTR _left$[ebx]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _outside_vecs$[ebp], eax

; 862  :     inside_vecs   = (( width           + vecwid_bitmask) >> vec_width_log2) - outside_vecs;

	mov	eax, DWORD PTR _width$[ebx]
	add	eax, DWORD PTR _vecwid_bitmask$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shr	eax, cl
	sub	eax, DWORD PTR _outside_vecs$[ebp]
	mov	DWORD PTR _inside_vecs$[ebp], eax

; 863  :     outside_width =    outside_vecs * vec_width;

	mov	eax, DWORD PTR _outside_vecs$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	mov	DWORD PTR _outside_width$[ebp], eax

; 864  :     inside_width  =    inside_vecs  * vec_width;

	mov	eax, DWORD PTR _inside_vecs$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	mov	DWORD PTR _inside_width$[ebp], eax

; 865  :     left_offset   =    left;

	mov	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR _left_offset$[ebp], eax

; 866  :     border_off    =    left;

	mov	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR _border_off$[ebp], eax

; 867  :     invec_lstart  =    0;

	mov	DWORD PTR _invec_lstart$[ebp], 0

; 868  :     invec_lend    =    inside_vecs;

	mov	eax, DWORD PTR _inside_vecs$[ebp]
	mov	DWORD PTR _invec_lend$[ebp], eax

; 869  :     invec_linc    =    1;

	mov	DWORD PTR _invec_linc$[ebp], 1

; 870  :     is_left_bm    =    -1;

	mov	DWORD PTR _is_left_bm$[ebp], -1

; 871  :   } else {

	jmp	$LN21@hor_sad_ss
$LN20@hor_sad_ss:

; 872  :     inside_vecs   =  ((width - right) + vecwid_bitmask)  >> vec_width_log2;

	mov	eax, DWORD PTR _width$[ebx]
	sub	eax, DWORD PTR _right$[ebx]
	add	eax, DWORD PTR _vecwid_bitmask$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _inside_vecs$[ebp], eax

; 873  :     outside_vecs  = (( width          + vecwid_bitmask)  >> vec_width_log2) - inside_vecs;

	mov	eax, DWORD PTR _width$[ebx]
	add	eax, DWORD PTR _vecwid_bitmask$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shr	eax, cl
	sub	eax, DWORD PTR _inside_vecs$[ebp]
	mov	DWORD PTR _outside_vecs$[ebp], eax

; 874  :     outside_width =    outside_vecs * vec_width;

	mov	eax, DWORD PTR _outside_vecs$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	mov	DWORD PTR _outside_width$[ebp], eax

; 875  :     inside_width  =    inside_vecs  * vec_width;

	mov	eax, DWORD PTR _inside_vecs$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	mov	DWORD PTR _inside_width$[ebp], eax

; 876  :     left_offset   =    right - width;

	mov	eax, DWORD PTR _right$[ebx]
	sub	eax, DWORD PTR _width$[ebx]
	mov	DWORD PTR _left_offset$[ebp], eax

; 877  :     border_off    =    width - 1 - right;

	mov	eax, DWORD PTR _width$[ebx]
	sub	eax, 1
	sub	eax, DWORD PTR _right$[ebx]
	mov	DWORD PTR _border_off$[ebp], eax

; 878  :     invec_lstart  =    inside_vecs - 1;

	mov	eax, DWORD PTR _inside_vecs$[ebp]
	sub	eax, 1
	mov	DWORD PTR _invec_lstart$[ebp], eax

; 879  :     invec_lend    =    -1;

	mov	DWORD PTR _invec_lend$[ebp], -1

; 880  :     invec_linc    =    -1;

	mov	DWORD PTR _invec_linc$[ebp], -1

; 881  :     is_left_bm    =    0;

	mov	DWORD PTR _is_left_bm$[ebp], 0
$LN21@hor_sad_ss:

; 882  :   }
; 883  :   left_offset &= vecwid_bitmask;

	mov	eax, DWORD PTR _left_offset$[ebp]
	and	eax, DWORD PTR _vecwid_bitmask$[ebp]
	mov	DWORD PTR _left_offset$[ebp], eax

; 884  : 
; 885  :   const __m128i left_offsets = _mm_set1_epi8 ((uint8_t)left_offset);

	movsx	eax, BYTE PTR _left_offset$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _left_offsets$[ebp], xmm0

; 886  :   const __m128i is_left      = _mm_cmpeq_epi8(rights, _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _rights$[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _is_left$[ebp], xmm1

; 887  :   const __m128i vw_for_left  = _mm_and_si128 (is_left, vec_widths);

	movaps	xmm0, XMMWORD PTR _is_left$[ebp]
	pand	xmm0, XMMWORD PTR _vec_widths$[ebp]
	movaps	XMMWORD PTR _vw_for_left$[ebp], xmm0

; 888  : 
; 889  :   // -x == (x ^ 0xff) + 1 = (x ^ 0xff) - 0xff. Also x == (x ^ 0x00) - 0x00.
; 890  :   // in other words, calculate inverse of left_offsets if is_left is true.
; 891  :   const __m128i offs_neg            = _mm_xor_si128 (left_offsets, is_left);

	movaps	xmm0, XMMWORD PTR _left_offsets$[ebp]
	pxor	xmm0, XMMWORD PTR _is_left$[ebp]
	movaps	XMMWORD PTR _offs_neg$[ebp], xmm0

; 892  :   const __m128i offs_for_sm1        = _mm_sub_epi8  (offs_neg,     is_left);

	movaps	xmm0, XMMWORD PTR _offs_neg$[ebp]
	psubb	xmm0, XMMWORD PTR _is_left$[ebp]
	movaps	XMMWORD PTR _offs_for_sm1$[ebp], xmm0

; 893  : 
; 894  :   const __m128i ns_for_sm1          = _mm_or_si128  (vw_for_left,  nslo);

	movaps	xmm0, XMMWORD PTR _vw_for_left$[ebp]
	por	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _ns_for_sm1$[ebp], xmm0

; 895  :   const __m128i shufmask1           = _mm_add_epi8  (ns_for_sm1,   offs_for_sm1);

	movaps	xmm0, XMMWORD PTR _ns_for_sm1$[ebp]
	paddb	xmm0, XMMWORD PTR _offs_for_sm1$[ebp]
	movaps	XMMWORD PTR _shufmask1$[ebp], xmm0

; 896  : 
; 897  :   const __m128i mo2bmask_l          = _mm_cmpgt_epi8(left_offsets, nslo);

	movaps	xmm0, XMMWORD PTR _left_offsets$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _mo2bmask_l$[ebp], xmm0

; 898  :   const __m128i mo2bimask_l         = _mm_cmpeq_epi8(mo2bmask_l,   _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _mo2bmask_l$[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _mo2bimask_l$[ebp], xmm1

; 899  :   const __m128i mo2bimask_r         = _mm_cmpgt_epi8(vec_widths,   shufmask1);

	movaps	xmm0, XMMWORD PTR _vec_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _mo2bimask_r$[ebp], xmm0

; 900  :   const __m128i move_old_to_b_imask = _mm_blendv_epi8(mo2bimask_r, mo2bimask_l, is_left);

	movaps	xmm1, XMMWORD PTR _mo2bimask_r$[ebp]
	movaps	xmm0, XMMWORD PTR _is_left$[ebp]
	pblendvb xmm1, XMMWORD PTR _mo2bimask_l$[ebp], xmm0
	movaps	XMMWORD PTR _move_old_to_b_imask$[ebp], xmm1

; 901  : 
; 902  :   const int32_t outvec_offset = (~is_left_bm) & inside_width;

	mov	eax, DWORD PTR _is_left_bm$[ebp]
	not	eax
	and	eax, DWORD PTR _inside_width$[ebp]
	mov	DWORD PTR _outvec_offset$[ebp], eax

; 903  :   int32_t x, y;
; 904  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad_ss
$LN2@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@hor_sad_ss

; 905  :     __m128i borderpx_vec_b = _mm_set1_epi8(ref_data[(int32_t)((y + 0) * ref_stride + border_off)]);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _border_off$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebx]
	movsx	edx, BYTE PTR [ecx+eax]
	movd	xmm0, edx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _borderpx_vec_b$77[ebp], xmm0

; 906  :     __m128i borderpx_vec_d = _mm_set1_epi8(ref_data[(int32_t)((y + 1) * ref_stride + border_off)]);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _border_off$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebx]
	movsx	edx, BYTE PTR [ecx+eax]
	movd	xmm0, edx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _borderpx_vec_d$76[ebp], xmm0

; 907  :     __m128i borderpx_vec_f = _mm_set1_epi8(ref_data[(int32_t)((y + 2) * ref_stride + border_off)]);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _border_off$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebx]
	movsx	edx, BYTE PTR [ecx+eax]
	movd	xmm0, edx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _borderpx_vec_f$75[ebp], xmm0

; 908  :     __m128i borderpx_vec_h = _mm_set1_epi8(ref_data[(int32_t)((y + 3) * ref_stride + border_off)]);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _border_off$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebx]
	movsx	edx, BYTE PTR [ecx+eax]
	movd	xmm0, edx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _borderpx_vec_h$74[ebp], xmm0

; 909  : 
; 910  :     for (x = 0; x < outside_vecs; x++) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN7@hor_sad_ss
$LN5@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _outside_vecs$[ebp]
	jae	$LN6@hor_sad_ss

; 911  :       __m128i a = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 0) * pic_stride + outvec_offset));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _outvec_offset$[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _a$73[ebp], xmm0

; 912  :       __m128i c = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 1) * pic_stride + outvec_offset));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _outvec_offset$[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _c$72[ebp], xmm0

; 913  :       __m128i e = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 2) * pic_stride + outvec_offset));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 2
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _outvec_offset$[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _e$71[ebp], xmm0

; 914  :       __m128i g = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 3) * pic_stride + outvec_offset));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 3
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _outvec_offset$[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _g$70[ebp], xmm0

; 915  : 
; 916  :       __m128i startoffs  = _mm_set1_epi8  ((x + inside_vecs) << vec_width_log2);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _inside_vecs$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shl	eax, cl
	movsx	ecx, al
	movd	xmm0, ecx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _startoffs$69[ebp], xmm0

; 917  :       __m128i ns         = _mm_add_epi8   (startoffs, nslo);

	movaps	xmm0, XMMWORD PTR _startoffs$69[ebp]
	paddb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _ns$68[ebp], xmm0

; 918  : 
; 919  :       // Unread imask is (is_left NOR unrd_imask_for_right), do the maths etc
; 920  :       __m128i unrd_imask = _mm_cmpgt_epi8 (blk_widths, ns);

	movaps	xmm0, XMMWORD PTR _blk_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _ns$68[ebp]
	movaps	XMMWORD PTR _unrd_imask$67[ebp], xmm0

; 921  :               unrd_imask = _mm_or_si128   (unrd_imask, is_left);

	movaps	xmm0, XMMWORD PTR _unrd_imask$67[ebp]
	por	xmm0, XMMWORD PTR _is_left$[ebp]
	movaps	XMMWORD PTR _unrd_imask$67[ebp], xmm0

; 922  :       __m128i unrd_mask  = _mm_cmpeq_epi8 (unrd_imask, _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _unrd_imask$67[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _unrd_mask$66[ebp], xmm1

; 923  : 
; 924  :       __m128i b_unread   = _mm_blendv_epi8(borderpx_vec_b, a, unrd_mask);

	movaps	xmm1, XMMWORD PTR _borderpx_vec_b$77[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$66[ebp]
	pblendvb xmm1, XMMWORD PTR _a$73[ebp], xmm0
	movaps	XMMWORD PTR _b_unread$65[ebp], xmm1

; 925  :       __m128i d_unread   = _mm_blendv_epi8(borderpx_vec_d, c, unrd_mask);

	movaps	xmm1, XMMWORD PTR _borderpx_vec_d$76[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$66[ebp]
	pblendvb xmm1, XMMWORD PTR _c$72[ebp], xmm0
	movaps	XMMWORD PTR _d_unread$64[ebp], xmm1

; 926  :       __m128i f_unread   = _mm_blendv_epi8(borderpx_vec_f, e, unrd_mask);

	movaps	xmm1, XMMWORD PTR _borderpx_vec_f$75[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$66[ebp]
	pblendvb xmm1, XMMWORD PTR _e$71[ebp], xmm0
	movaps	XMMWORD PTR _f_unread$63[ebp], xmm1

; 927  :       __m128i h_unread   = _mm_blendv_epi8(borderpx_vec_h, g, unrd_mask);

	movaps	xmm1, XMMWORD PTR _borderpx_vec_h$74[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$66[ebp]
	pblendvb xmm1, XMMWORD PTR _g$70[ebp], xmm0
	movaps	XMMWORD PTR _h_unread$62[ebp], xmm1

; 928  : 
; 929  :       __m128i sad_ab     = _mm_sad_epu8   (a, b_unread);

	movaps	xmm0, XMMWORD PTR _a$73[ebp]
	psadbw	xmm0, XMMWORD PTR _b_unread$65[ebp]
	movaps	XMMWORD PTR _sad_ab$61[ebp], xmm0

; 930  :       __m128i sad_cd     = _mm_sad_epu8   (c, d_unread);

	movaps	xmm0, XMMWORD PTR _c$72[ebp]
	psadbw	xmm0, XMMWORD PTR _d_unread$64[ebp]
	movaps	XMMWORD PTR _sad_cd$60[ebp], xmm0

; 931  :       __m128i sad_ef     = _mm_sad_epu8   (e, f_unread);

	movaps	xmm0, XMMWORD PTR _e$71[ebp]
	psadbw	xmm0, XMMWORD PTR _f_unread$63[ebp]
	movaps	XMMWORD PTR _sad_ef$59[ebp], xmm0

; 932  :       __m128i sad_gh     = _mm_sad_epu8   (g, h_unread);

	movaps	xmm0, XMMWORD PTR _g$70[ebp]
	psadbw	xmm0, XMMWORD PTR _h_unread$62[ebp]
	movaps	XMMWORD PTR _sad_gh$58[ebp], xmm0

; 933  : 
; 934  :       sse_inc = _mm_add_epi64(sse_inc, sad_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ab$61[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 935  :       sse_inc = _mm_add_epi64(sse_inc, sad_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_cd$60[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 936  :       sse_inc = _mm_add_epi64(sse_inc, sad_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ef$59[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 937  :       sse_inc = _mm_add_epi64(sse_inc, sad_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_gh$58[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 938  :     }

	jmp	$LN5@hor_sad_ss
$LN6@hor_sad_ss:

; 939  :     int32_t a_off = outside_width & is_left_bm;

	mov	eax, DWORD PTR _outside_width$[ebp]
	and	eax, DWORD PTR _is_left_bm$[ebp]
	mov	DWORD PTR _a_off$57[ebp], eax

; 940  :     int32_t leftoff_with_sign_neg = (left_offset ^ is_left_bm) - is_left_bm;

	mov	eax, DWORD PTR _left_offset$[ebp]
	xor	eax, DWORD PTR _is_left_bm$[ebp]
	sub	eax, DWORD PTR _is_left_bm$[ebp]
	mov	DWORD PTR _leftoff_with_sign_neg$56[ebp], eax

; 941  : 
; 942  :     __m128i old_b = borderpx_vec_b;

	movaps	xmm0, XMMWORD PTR _borderpx_vec_b$77[ebp]
	movaps	XMMWORD PTR _old_b$55[ebp], xmm0

; 943  :     __m128i old_d = borderpx_vec_d;

	movaps	xmm0, XMMWORD PTR _borderpx_vec_d$76[ebp]
	movaps	XMMWORD PTR _old_d$54[ebp], xmm0

; 944  :     __m128i old_f = borderpx_vec_f;

	movaps	xmm0, XMMWORD PTR _borderpx_vec_f$75[ebp]
	movaps	XMMWORD PTR _old_f$53[ebp], xmm0

; 945  :     __m128i old_h = borderpx_vec_h;

	movaps	xmm0, XMMWORD PTR _borderpx_vec_h$74[ebp]
	movaps	XMMWORD PTR _old_h$52[ebp], xmm0

; 946  : 
; 947  :     for (x = invec_lstart; x != invec_lend; x += invec_linc) {

	mov	eax, DWORD PTR _invec_lstart$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN10@hor_sad_ss
$LN8@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _invec_linc$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN10@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _invec_lend$[ebp]
	je	$LN9@hor_sad_ss

; 948  :       __m128i a = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 0) * pic_stride + a_off));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _a$51[ebp], xmm0

; 949  :       __m128i c = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 1) * pic_stride + a_off));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _c$50[ebp], xmm0

; 950  :       __m128i e = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 2) * pic_stride + a_off));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 2
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _e$49[ebp], xmm0

; 951  :       __m128i g = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 3) * pic_stride + a_off));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 3
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _g$48[ebp], xmm0

; 952  :       __m128i b = _mm_loadu_si128((__m128i *)(ref_data + x * vec_width + (y + 0) * ref_stride + a_off - leftoff_with_sign_neg));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	sub	ecx, DWORD PTR _leftoff_with_sign_neg$56[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _b$47[ebp], xmm0

; 953  :       __m128i d = _mm_loadu_si128((__m128i *)(ref_data + x * vec_width + (y + 1) * ref_stride + a_off - leftoff_with_sign_neg));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	sub	ecx, DWORD PTR _leftoff_with_sign_neg$56[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _d$46[ebp], xmm0

; 954  :       __m128i f = _mm_loadu_si128((__m128i *)(ref_data + x * vec_width + (y + 2) * ref_stride + a_off - leftoff_with_sign_neg));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 2
	imul	ecx, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	sub	ecx, DWORD PTR _leftoff_with_sign_neg$56[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _f$45[ebp], xmm0

; 955  :       __m128i h = _mm_loadu_si128((__m128i *)(ref_data + x * vec_width + (y + 3) * ref_stride + a_off - leftoff_with_sign_neg));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 3
	imul	ecx, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _a_off$57[ebp]
	add	ecx, eax
	sub	ecx, DWORD PTR _leftoff_with_sign_neg$56[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _h$44[ebp], xmm0

; 956  : 
; 957  :       __m128i b_shifted    = _mm_shuffle_epi8(b,     shufmask1);

	movaps	xmm0, XMMWORD PTR _b$47[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _b_shifted$43[ebp], xmm0

; 958  :       __m128i d_shifted    = _mm_shuffle_epi8(d,     shufmask1);

	movaps	xmm0, XMMWORD PTR _d$46[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _d_shifted$42[ebp], xmm0

; 959  :       __m128i f_shifted    = _mm_shuffle_epi8(f,     shufmask1);

	movaps	xmm0, XMMWORD PTR _f$45[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _f_shifted$41[ebp], xmm0

; 960  :       __m128i h_shifted    = _mm_shuffle_epi8(h,     shufmask1);

	movaps	xmm0, XMMWORD PTR _h$44[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _h_shifted$40[ebp], xmm0

; 961  : 
; 962  :       __m128i b_with_old   = _mm_blendv_epi8 (old_b, b_shifted, move_old_to_b_imask);

	movaps	xmm1, XMMWORD PTR _old_b$55[ebp]
	movaps	xmm0, XMMWORD PTR _move_old_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$43[ebp], xmm0
	movaps	XMMWORD PTR _b_with_old$39[ebp], xmm1

; 963  :       __m128i d_with_old   = _mm_blendv_epi8 (old_d, d_shifted, move_old_to_b_imask);

	movaps	xmm1, XMMWORD PTR _old_d$54[ebp]
	movaps	xmm0, XMMWORD PTR _move_old_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _d_shifted$42[ebp], xmm0
	movaps	XMMWORD PTR _d_with_old$38[ebp], xmm1

; 964  :       __m128i f_with_old   = _mm_blendv_epi8 (old_f, f_shifted, move_old_to_b_imask);

	movaps	xmm1, XMMWORD PTR _old_f$53[ebp]
	movaps	xmm0, XMMWORD PTR _move_old_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _f_shifted$41[ebp], xmm0
	movaps	XMMWORD PTR _f_with_old$37[ebp], xmm1

; 965  :       __m128i h_with_old   = _mm_blendv_epi8 (old_h, h_shifted, move_old_to_b_imask);

	movaps	xmm1, XMMWORD PTR _old_h$52[ebp]
	movaps	xmm0, XMMWORD PTR _move_old_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _h_shifted$40[ebp], xmm0
	movaps	XMMWORD PTR _h_with_old$36[ebp], xmm1

; 966  : 
; 967  :       uint8_t startoff     = (x << vec_width_log2) + a_off;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _a_off$57[ebp]
	mov	BYTE PTR _startoff$35[ebp], al

; 968  :       __m128i startoffs    = _mm_set1_epi8   (startoff);

	movsx	eax, BYTE PTR _startoff$35[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _startoffs$34[ebp], xmm0

; 969  :       __m128i curr_ns      = _mm_add_epi8    (startoffs,    nslo);

	movaps	xmm0, XMMWORD PTR _startoffs$34[ebp]
	paddb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _curr_ns$33[ebp], xmm0

; 970  :       __m128i unrd_imask   = _mm_cmpgt_epi8  (blk_widths,   curr_ns);

	movaps	xmm0, XMMWORD PTR _blk_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _curr_ns$33[ebp]
	movaps	XMMWORD PTR _unrd_imask$32[ebp], xmm0

; 971  :       __m128i unrd_mask    = _mm_cmpeq_epi8  (unrd_imask,   _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _unrd_imask$32[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _unrd_mask$31[ebp], xmm1

; 972  : 
; 973  :       __m128i b_unread     = _mm_blendv_epi8 (b_with_old,   a, unrd_mask);

	movaps	xmm1, XMMWORD PTR _b_with_old$39[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$31[ebp]
	pblendvb xmm1, XMMWORD PTR _a$51[ebp], xmm0
	movaps	XMMWORD PTR _b_unread$30[ebp], xmm1

; 974  :       __m128i d_unread     = _mm_blendv_epi8 (d_with_old,   c, unrd_mask);

	movaps	xmm1, XMMWORD PTR _d_with_old$38[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$31[ebp]
	pblendvb xmm1, XMMWORD PTR _c$50[ebp], xmm0
	movaps	XMMWORD PTR _d_unread$29[ebp], xmm1

; 975  :       __m128i f_unread     = _mm_blendv_epi8 (f_with_old,   e, unrd_mask);

	movaps	xmm1, XMMWORD PTR _f_with_old$37[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$31[ebp]
	pblendvb xmm1, XMMWORD PTR _e$49[ebp], xmm0
	movaps	XMMWORD PTR _f_unread$28[ebp], xmm1

; 976  :       __m128i h_unread     = _mm_blendv_epi8 (h_with_old,   g, unrd_mask);

	movaps	xmm1, XMMWORD PTR _h_with_old$36[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$31[ebp]
	pblendvb xmm1, XMMWORD PTR _g$48[ebp], xmm0
	movaps	XMMWORD PTR _h_unread$27[ebp], xmm1

; 977  : 
; 978  :       old_b = b_shifted;

	movaps	xmm0, XMMWORD PTR _b_shifted$43[ebp]
	movaps	XMMWORD PTR _old_b$55[ebp], xmm0

; 979  :       old_d = d_shifted;

	movaps	xmm0, XMMWORD PTR _d_shifted$42[ebp]
	movaps	XMMWORD PTR _old_d$54[ebp], xmm0

; 980  :       old_f = f_shifted;

	movaps	xmm0, XMMWORD PTR _f_shifted$41[ebp]
	movaps	XMMWORD PTR _old_f$53[ebp], xmm0

; 981  :       old_h = h_shifted;

	movaps	xmm0, XMMWORD PTR _h_shifted$40[ebp]
	movaps	XMMWORD PTR _old_h$52[ebp], xmm0

; 982  : 
; 983  :       __m128i sad_ab     = _mm_sad_epu8(a, b_unread);

	movaps	xmm0, XMMWORD PTR _a$51[ebp]
	psadbw	xmm0, XMMWORD PTR _b_unread$30[ebp]
	movaps	XMMWORD PTR _sad_ab$26[ebp], xmm0

; 984  :       __m128i sad_cd     = _mm_sad_epu8(c, d_unread);

	movaps	xmm0, XMMWORD PTR _c$50[ebp]
	psadbw	xmm0, XMMWORD PTR _d_unread$29[ebp]
	movaps	XMMWORD PTR _sad_cd$25[ebp], xmm0

; 985  :       __m128i sad_ef     = _mm_sad_epu8(e, f_unread);

	movaps	xmm0, XMMWORD PTR _e$49[ebp]
	psadbw	xmm0, XMMWORD PTR _f_unread$28[ebp]
	movaps	XMMWORD PTR _sad_ef$24[ebp], xmm0

; 986  :       __m128i sad_gh     = _mm_sad_epu8(g, h_unread);

	movaps	xmm0, XMMWORD PTR _g$48[ebp]
	psadbw	xmm0, XMMWORD PTR _h_unread$27[ebp]
	movaps	XMMWORD PTR _sad_gh$23[ebp], xmm0

; 987  : 
; 988  :       sse_inc = _mm_add_epi64(sse_inc, sad_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ab$26[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 989  :       sse_inc = _mm_add_epi64(sse_inc, sad_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_cd$25[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 990  :       sse_inc = _mm_add_epi64(sse_inc, sad_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ef$24[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 991  :       sse_inc = _mm_add_epi64(sse_inc, sad_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_gh$23[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 992  :     }

	jmp	$LN8@hor_sad_ss
$LN9@hor_sad_ss:

; 993  :   }

	jmp	$LN2@hor_sad_ss
$LN3@hor_sad_ss:

; 994  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN22@hor_sad_ss

; 995  :     for (; y < height; y++) {

	jmp	SHORT $LN13@hor_sad_ss
$LN11@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN13@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	$LN22@hor_sad_ss

; 996  :       __m128i borderpx_vec = _mm_set1_epi8(ref_data[(int32_t)((y + 0) * ref_stride + border_off)]);

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _border_off$[ebp]
	mov	ecx, DWORD PTR _ref_data$[ebx]
	movsx	edx, BYTE PTR [ecx+eax]
	movd	xmm0, edx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _borderpx_vec$22[ebp], xmm0

; 997  :       for (x = 0; x < outside_vecs; x++) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN16@hor_sad_ss
$LN14@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN16@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _outside_vecs$[ebp]
	jae	$LN15@hor_sad_ss

; 998  :         __m128i a = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 0) * pic_stride + outvec_offset));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _outvec_offset$[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _a$21[ebp], xmm0

; 999  : 
; 1000 :         __m128i startoffs  = _mm_set1_epi8  ((x + inside_vecs) << vec_width_log2);

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _inside_vecs$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shl	eax, cl
	movsx	ecx, al
	movd	xmm0, ecx
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _startoffs$20[ebp], xmm0

; 1001 :         __m128i ns         = _mm_add_epi8   (startoffs, nslo);

	movaps	xmm0, XMMWORD PTR _startoffs$20[ebp]
	paddb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _ns$19[ebp], xmm0

; 1002 : 
; 1003 :         // Unread imask is (is_left NOR unrd_imask_for_right), do the maths etc
; 1004 :         __m128i unrd_imask = _mm_cmpgt_epi8 (blk_widths, ns);

	movaps	xmm0, XMMWORD PTR _blk_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _ns$19[ebp]
	movaps	XMMWORD PTR _unrd_imask$18[ebp], xmm0

; 1005 :                 unrd_imask = _mm_or_si128   (unrd_imask, is_left);

	movaps	xmm0, XMMWORD PTR _unrd_imask$18[ebp]
	por	xmm0, XMMWORD PTR _is_left$[ebp]
	movaps	XMMWORD PTR _unrd_imask$18[ebp], xmm0

; 1006 :         __m128i unrd_mask  = _mm_cmpeq_epi8 (unrd_imask, _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _unrd_imask$18[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _unrd_mask$17[ebp], xmm1

; 1007 :         __m128i b_unread   = _mm_blendv_epi8(borderpx_vec, a, unrd_mask);

	movaps	xmm1, XMMWORD PTR _borderpx_vec$22[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$17[ebp]
	pblendvb xmm1, XMMWORD PTR _a$21[ebp], xmm0
	movaps	XMMWORD PTR _b_unread$16[ebp], xmm1

; 1008 : 
; 1009 :         __m128i sad_ab     = _mm_sad_epu8   (a, b_unread);

	movaps	xmm0, XMMWORD PTR _a$21[ebp]
	psadbw	xmm0, XMMWORD PTR _b_unread$16[ebp]
	movaps	XMMWORD PTR _sad_ab$15[ebp], xmm0

; 1010 :         sse_inc = _mm_add_epi64(sse_inc, sad_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ab$15[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 1011 :       }

	jmp	$LN14@hor_sad_ss
$LN15@hor_sad_ss:

; 1012 :       int32_t a_off = outside_width & is_left_bm;

	mov	eax, DWORD PTR _outside_width$[ebp]
	and	eax, DWORD PTR _is_left_bm$[ebp]
	mov	DWORD PTR _a_off$14[ebp], eax

; 1013 :       int32_t leftoff_with_sign_neg = (left_offset ^ is_left_bm) - is_left_bm;

	mov	eax, DWORD PTR _left_offset$[ebp]
	xor	eax, DWORD PTR _is_left_bm$[ebp]
	sub	eax, DWORD PTR _is_left_bm$[ebp]
	mov	DWORD PTR _leftoff_with_sign_neg$13[ebp], eax

; 1014 : 
; 1015 :       __m128i old_b = borderpx_vec;

	movaps	xmm0, XMMWORD PTR _borderpx_vec$22[ebp]
	movaps	XMMWORD PTR _old_b$12[ebp], xmm0

; 1016 :       for (x = invec_lstart; x != invec_lend; x += invec_linc) {

	mov	eax, DWORD PTR _invec_lstart$[ebp]
	mov	DWORD PTR _x$[ebp], eax
	jmp	SHORT $LN19@hor_sad_ss
$LN17@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _invec_linc$[ebp]
	mov	DWORD PTR _x$[ebp], eax
$LN19@hor_sad_ss:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _invec_lend$[ebp]
	je	$LN18@hor_sad_ss

; 1017 :         __m128i a = _mm_loadu_si128((__m128i *)(pic_data + x * vec_width + (y + 0) * pic_stride + a_off));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _pic_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _a_off$14[ebp]
	add	ecx, eax
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _a$11[ebp], xmm0

; 1018 :         __m128i b = _mm_loadu_si128((__m128i *)(ref_data + x * vec_width + (y + 0) * ref_stride + a_off - leftoff_with_sign_neg));

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _vec_width$[ebp]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _a_off$14[ebp]
	add	ecx, eax
	sub	ecx, DWORD PTR _leftoff_with_sign_neg$13[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR _b$10[ebp], xmm0

; 1019 : 
; 1020 :         __m128i b_shifted    = _mm_shuffle_epi8(b,     shufmask1);

	movaps	xmm0, XMMWORD PTR _b$10[ebp]
	pshufb	xmm0, XMMWORD PTR _shufmask1$[ebp]
	movaps	XMMWORD PTR _b_shifted$9[ebp], xmm0

; 1021 :         __m128i b_with_old   = _mm_blendv_epi8 (old_b, b_shifted, move_old_to_b_imask);

	movaps	xmm1, XMMWORD PTR _old_b$12[ebp]
	movaps	xmm0, XMMWORD PTR _move_old_to_b_imask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b_shifted$9[ebp], xmm0
	movaps	XMMWORD PTR _b_with_old$8[ebp], xmm1

; 1022 : 
; 1023 :         uint8_t startoff     = (x << vec_width_log2) + a_off;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _vec_width_log2$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _a_off$14[ebp]
	mov	BYTE PTR _startoff$7[ebp], al

; 1024 :         __m128i startoffs    = _mm_set1_epi8   (startoff);

	movsx	eax, BYTE PTR _startoff$7[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _startoffs$6[ebp], xmm0

; 1025 :         __m128i curr_ns      = _mm_add_epi8    (startoffs,    nslo);

	movaps	xmm0, XMMWORD PTR _startoffs$6[ebp]
	paddb	xmm0, XMMWORD PTR _nslo$[ebp]
	movaps	XMMWORD PTR _curr_ns$5[ebp], xmm0

; 1026 :         __m128i unrd_imask   = _mm_cmpgt_epi8  (blk_widths,   curr_ns);

	movaps	xmm0, XMMWORD PTR _blk_widths$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _curr_ns$5[ebp]
	movaps	XMMWORD PTR _unrd_imask$4[ebp], xmm0

; 1027 :         __m128i unrd_mask    = _mm_cmpeq_epi8  (unrd_imask,   _mm_setzero_si128());

	xorps	xmm0, xmm0
	movaps	xmm1, XMMWORD PTR _unrd_imask$4[ebp]
	pcmpeqb	xmm1, xmm0
	movaps	XMMWORD PTR _unrd_mask$3[ebp], xmm1

; 1028 :         __m128i b_unread     = _mm_blendv_epi8 (b_with_old,   a, unrd_mask);

	movaps	xmm1, XMMWORD PTR _b_with_old$8[ebp]
	movaps	xmm0, XMMWORD PTR _unrd_mask$3[ebp]
	pblendvb xmm1, XMMWORD PTR _a$11[ebp], xmm0
	movaps	XMMWORD PTR _b_unread$2[ebp], xmm1

; 1029 : 
; 1030 :         old_b = b_shifted;

	movaps	xmm0, XMMWORD PTR _b_shifted$9[ebp]
	movaps	XMMWORD PTR _old_b$12[ebp], xmm0

; 1031 : 
; 1032 :         __m128i sad_ab     = _mm_sad_epu8(a, b_unread);

	movaps	xmm0, XMMWORD PTR _a$11[ebp]
	psadbw	xmm0, XMMWORD PTR _b_unread$2[ebp]
	movaps	XMMWORD PTR _sad_ab$1[ebp], xmm0

; 1033 :         sse_inc = _mm_add_epi64(sse_inc, sad_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sad_ab$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 1034 :       }

	jmp	$LN17@hor_sad_ss
$LN18@hor_sad_ss:

; 1035 :     }

	jmp	$LN11@hor_sad_ss
$LN22@hor_sad_ss:

; 1036 :   }
; 1037 :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 1038 :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 1039 :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 1040 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_hor_sad_sse41_arbitrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _hor_sad_sse41_w16
_TEXT	SEGMENT
tv66 = -1608						; size = 4
_sad$ = -1024						; size = 16
_sse_inc_2$ = -992					; size = 16
_curr_sads$1 = -960					; size = 16
_b_epol$2 = -928					; size = 16
_b$3 = -896						; size = 16
_a$4 = -864						; size = 16
_curr_sads_gh$5 = -832					; size = 16
_curr_sads_ef$6 = -800					; size = 16
_curr_sads_cd$7 = -768					; size = 16
_curr_sads_ab$8 = -736					; size = 16
_h_epol$9 = -704					; size = 16
_f_epol$10 = -672					; size = 16
_d_epol$11 = -640					; size = 16
_b_epol$12 = -608					; size = 16
_h$13 = -576						; size = 16
_g$14 = -544						; size = 16
_f$15 = -512						; size = 16
_e$16 = -480						; size = 16
_d$17 = -448						; size = 16
_c$18 = -416						; size = 16
_b$19 = -384						; size = 16
_a$20 = -352						; size = 16
_y$ = -316						; size = 4
_sse_inc$ = -304					; size = 16
_height_residual_lines$ = -280				; size = 4
_height_fourline_groups$ = -268				; size = 4
_epol_mask$ = -256					; size = 16
_mask1$ = -224						; size = 16
_mask_right$ = -192					; size = 16
_left_128$ = -160					; size = 16
_right_border_idxs$ = -128				; size = 16
_leftoff$ = -104					; size = 4
_border_idx_negative$ = -92				; size = 4
_zero$ = -80						; size = 16
_ns$ = -48						; size = 16
_border_idx$ = -20					; size = 4
_right_border_idx$ = -8					; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_pic_stride$ = 20					; size = 4
_ref_stride$ = 24					; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_hor_sad_sse41_w16 PROC					; COMDAT

; 759  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1608				; 00000648H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1608]
	mov	ecx, 402				; 00000192H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 760  :   // right is the number of overhanging pixels in the vector, so it has to be
; 761  :   // handled this way to produce the index of last valid (border) pixel
; 762  :   const int32_t right_border_idx = 15 - right;

	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _right$[ebx]
	mov	DWORD PTR _right_border_idx$[ebp], eax

; 763  :   const int32_t border_idx       = left ? left : right_border_idx;

	cmp	DWORD PTR _left$[ebx], 0
	je	SHORT $LN10@hor_sad_ss
	mov	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN11@hor_sad_ss
$LN10@hor_sad_ss:
	mov	ecx, DWORD PTR _right_border_idx$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN11@hor_sad_ss:
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _border_idx$[ebp], edx

; 764  : 
; 765  :   const __m128i ns               = _mm_setr_epi8(0,  1,  2,  3,  4,  5,  6,  7,

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _ns$[ebp], xmm0

; 766  :                                                  8,  9,  10, 11, 12, 13, 14, 15);
; 767  :   const __m128i zero             = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _zero$[ebp], xmm0

; 768  : 
; 769  :   // Dirty hack alert! If right == block_width (ie. the entire vector is
; 770  :   // outside the frame), move the block offset one pixel to the left (so
; 771  :   // that the leftmost pixel in vector is actually the valid border pixel
; 772  :   // from which we want to extrapolate), and use an epol mask that will
; 773  :   // simply stretch the pixel all over the vector.
; 774  :   //
; 775  :   // To avoid a branch here:
; 776  :   // The mask will be -1 (0xffffffff) for border_idx -1 and 0 for >= 0
; 777  :   const int32_t border_idx_negative = border_idx >> 31;

	mov	eax, DWORD PTR _border_idx$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _border_idx_negative$[ebp], eax

; 778  :   const int32_t leftoff             = border_idx_negative | left;

	mov	eax, DWORD PTR _border_idx_negative$[ebp]
	or	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR _leftoff$[ebp], eax

; 779  : 
; 780  :   __m128i right_border_idxs = _mm_set1_epi8((int8_t)right_border_idx);

	movsx	eax, BYTE PTR _right_border_idx$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _right_border_idxs$[ebp], xmm0

; 781  :   __m128i left_128          = _mm_set1_epi8((int8_t)left);

	movsx	eax, BYTE PTR _left$[ebx]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _left_128$[ebp], xmm0

; 782  : 
; 783  :   // If we're straddling the left border, right_border_idx is 15 and the first
; 784  :   // operation does nothing. If right border, left is 0 and the second
; 785  :   // operation does nothing.
; 786  :   __m128i mask_right        = _mm_min_epi8 (ns,         right_border_idxs);

	movaps	xmm0, XMMWORD PTR _ns$[ebp]
	pminsb	xmm0, XMMWORD PTR _right_border_idxs$[ebp]
	movaps	XMMWORD PTR _mask_right$[ebp], xmm0

; 787  :   __m128i mask1             = _mm_sub_epi8 (mask_right, left_128);

	movaps	xmm0, XMMWORD PTR _mask_right$[ebp]
	psubb	xmm0, XMMWORD PTR _left_128$[ebp]
	movaps	XMMWORD PTR _mask1$[ebp], xmm0

; 788  : 
; 789  :   // If right == 16 (we're completely outside the frame), right_border_idx is
; 790  :   // -1 and so is mask1. Clamp negative values to zero and as discussed
; 791  :   // earlier, adjust the load offset instead to load the "-1'st" pixel and
; 792  :   // using an all-zero shuffle mask, broadcast it all over the vector.
; 793  :   const __m128i epol_mask = _mm_max_epi8(mask1, zero);

	movaps	xmm0, XMMWORD PTR _mask1$[ebp]
	pmaxsb	xmm0, XMMWORD PTR _zero$[ebp]
	movaps	XMMWORD PTR _epol_mask$[ebp], xmm0

; 794  : 
; 795  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 796  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 797  : 
; 798  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 799  :   int32_t y;
; 800  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad_ss
$LN2@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@hor_sad_ss

; 801  :     __m128i a = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$20[ebp], xmm0

; 802  :     __m128i b = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$19[ebp], xmm0

; 803  :     __m128i c = _mm_loadu_si128((__m128i *)(pic_data + (y + 1) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$18[ebp], xmm0

; 804  :     __m128i d = _mm_loadu_si128((__m128i *)(ref_data + (y + 1) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _d$17[ebp], xmm0

; 805  :     __m128i e = _mm_loadu_si128((__m128i *)(pic_data + (y + 2) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$16[ebp], xmm0

; 806  :     __m128i f = _mm_loadu_si128((__m128i *)(ref_data + (y + 2) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _f$15[ebp], xmm0

; 807  :     __m128i g = _mm_loadu_si128((__m128i *)(pic_data + (y + 3) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$14[ebp], xmm0

; 808  :     __m128i h = _mm_loadu_si128((__m128i *)(ref_data + (y + 3) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _h$13[ebp], xmm0

; 809  : 
; 810  :     __m128i b_epol = _mm_shuffle_epi8(b, epol_mask);

	movaps	xmm0, XMMWORD PTR _b$19[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$12[ebp], xmm0

; 811  :     __m128i d_epol = _mm_shuffle_epi8(d, epol_mask);

	movaps	xmm0, XMMWORD PTR _d$17[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _d_epol$11[ebp], xmm0

; 812  :     __m128i f_epol = _mm_shuffle_epi8(f, epol_mask);

	movaps	xmm0, XMMWORD PTR _f$15[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _f_epol$10[ebp], xmm0

; 813  :     __m128i h_epol = _mm_shuffle_epi8(h, epol_mask);

	movaps	xmm0, XMMWORD PTR _h$13[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _h_epol$9[ebp], xmm0

; 814  : 
; 815  :     __m128i curr_sads_ab = _mm_sad_epu8(a, b_epol);

	movaps	xmm0, XMMWORD PTR _a$20[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$12[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$8[ebp], xmm0

; 816  :     __m128i curr_sads_cd = _mm_sad_epu8(c, d_epol);

	movaps	xmm0, XMMWORD PTR _c$18[ebp]
	psadbw	xmm0, XMMWORD PTR _d_epol$11[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$7[ebp], xmm0

; 817  :     __m128i curr_sads_ef = _mm_sad_epu8(e, f_epol);

	movaps	xmm0, XMMWORD PTR _e$16[ebp]
	psadbw	xmm0, XMMWORD PTR _f_epol$10[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$6[ebp], xmm0

; 818  :     __m128i curr_sads_gh = _mm_sad_epu8(g, h_epol);

	movaps	xmm0, XMMWORD PTR _g$14[ebp]
	psadbw	xmm0, XMMWORD PTR _h_epol$9[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$5[ebp], xmm0

; 819  : 
; 820  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$8[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 821  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$7[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 822  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 823  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 824  :   }

	jmp	$LN2@hor_sad_ss
$LN3@hor_sad_ss:

; 825  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN8@hor_sad_ss

; 826  :     for (; y < height; y++) {

	jmp	SHORT $LN7@hor_sad_ss
$LN5@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@hor_sad_ss

; 827  :       __m128i a = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 828  :       __m128i b = _mm_loadu_si128((__m128i *)(ref_data + (y + 0) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 829  :       __m128i b_epol = _mm_shuffle_epi8(b, epol_mask);

	movaps	xmm0, XMMWORD PTR _b$3[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$2[ebp], xmm0

; 830  :       __m128i curr_sads = _mm_sad_epu8(a, b_epol);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 831  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 832  :     }

	jmp	$LN5@hor_sad_ss
$LN8@hor_sad_ss:

; 833  :   }
; 834  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 835  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 836  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 837  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_hor_sad_sse41_w16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _hor_sad_sse41_w8
_TEXT	SEGMENT
tv66 = -1288						; size = 4
_sad$ = -896						; size = 16
_sse_inc_2$ = -864					; size = 16
_curr_sads_ab$1 = -832					; size = 16
_b_epol$2 = -800					; size = 16
_b$3 = -768						; size = 16
_a$4 = -736						; size = 16
_curr_sads_cd$5 = -704					; size = 16
_curr_sads_ab$6 = -672					; size = 16
_d_epol$7 = -640					; size = 16
_b_epol$8 = -608					; size = 16
_d$9 = -576						; size = 16
_c$10 = -544						; size = 16
_b$11 = -512						; size = 16
_a$12 = -480						; size = 16
_d_d$13 = -448						; size = 16
_c_d$14 = -416						; size = 16
_b_d$15 = -384						; size = 16
_a_d$16 = -352						; size = 16
_y$ = -316						; size = 4
_sse_inc$ = -304					; size = 16
_height_residual_lines$ = -280				; size = 4
_height_fourline_groups$ = -268				; size = 4
_epol_mask$ = -256					; size = 16
_mask1$ = -224						; size = 16
_mask_right$ = -192					; size = 16
_left_128$ = -160					; size = 16
_right_border_idxs$ = -128				; size = 16
_leftoff$ = -104					; size = 4
_border_idx_negative$ = -92				; size = 4
_qwbaseids$ = -80					; size = 16
_ns$ = -48						; size = 16
_border_idx$ = -20					; size = 4
_right_border_idx$ = -8					; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_pic_stride$ = 20					; size = 4
_ref_stride$ = 24					; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_hor_sad_sse41_w8 PROC					; COMDAT

; 646  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1288				; 00000508H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1288]
	mov	ecx, 322				; 00000142H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 647  :   // right is the number of overhanging pixels in the vector, so it has to be
; 648  :   // handled this way to produce the index of last valid (border) pixel
; 649  :   const int32_t right_border_idx = 7 - right;

	mov	eax, 7
	sub	eax, DWORD PTR _right$[ebx]
	mov	DWORD PTR _right_border_idx$[ebp], eax

; 650  :   const int32_t border_idx       = left ? left : right_border_idx;

	cmp	DWORD PTR _left$[ebx], 0
	je	SHORT $LN10@hor_sad_ss
	mov	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN11@hor_sad_ss
$LN10@hor_sad_ss:
	mov	ecx, DWORD PTR _right_border_idx$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN11@hor_sad_ss:
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _border_idx$[ebp], edx

; 651  : 
; 652  :   const __m128i ns               = _mm_setr_epi8(0,  1,  2,  3,  4,  5,  6,  7,

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _ns$[ebp], xmm0

; 653  :                                                  8,  9,  10, 11, 12, 13, 14, 15);
; 654  : 
; 655  :   // Quadword (ie. line) base indexes, ie. the edges the lines read will be
; 656  :   // clamped towards; higher qword (lower line) bytes tend towards 8 and lower
; 657  :   // qword (higher line) bytes towards 0
; 658  :   const __m128i qwbaseids   = _mm_setr_epi8(0, 0, 0, 0, 0, 0, 0, 0,

	movaps	xmm0, XMMWORD PTR __xmm@08080808080808080000000000000000
	movaps	XMMWORD PTR _qwbaseids$[ebp], xmm0

; 659  :                                             8, 8, 8, 8, 8, 8, 8, 8);
; 660  : 
; 661  :   // Dirty hack alert! If right == block_width (ie. the entire vector is
; 662  :   // outside the frame), move the block offset one pixel to the left (so
; 663  :   // that the leftmost pixel in vector is actually the valid border pixel
; 664  :   // from which we want to extrapolate), and use an epol mask that will
; 665  :   // simply stretch the pixel all over the vector.
; 666  :   //
; 667  :   // To avoid a branch here:
; 668  :   // The mask will be -1 (0xffffffff) for border_idx -1 and 0 for >= 0
; 669  :   const int32_t border_idx_negative = border_idx >> 31;

	mov	eax, DWORD PTR _border_idx$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _border_idx_negative$[ebp], eax

; 670  :   const int32_t leftoff             = border_idx_negative | left;

	mov	eax, DWORD PTR _border_idx_negative$[ebp]
	or	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR _leftoff$[ebp], eax

; 671  : 
; 672  :   __m128i right_border_idxs = _mm_set1_epi8((int8_t)right_border_idx);

	movsx	eax, BYTE PTR _right_border_idx$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _right_border_idxs$[ebp], xmm0

; 673  :   __m128i left_128          = _mm_set1_epi8((int8_t)left);

	movsx	eax, BYTE PTR _left$[ebx]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _left_128$[ebp], xmm0

; 674  : 
; 675  :   right_border_idxs         = _mm_add_epi8 (right_border_idxs, qwbaseids);

	movaps	xmm0, XMMWORD PTR _right_border_idxs$[ebp]
	paddb	xmm0, XMMWORD PTR _qwbaseids$[ebp]
	movaps	XMMWORD PTR _right_border_idxs$[ebp], xmm0

; 676  : 
; 677  :   // If we're straddling the left border, right_border_idx is 7 and the first
; 678  :   // operation does nothing. If right border, left is 0 and the second
; 679  :   // operation does nothing.
; 680  :   __m128i mask_right        = _mm_min_epi8 (ns,         right_border_idxs);

	movaps	xmm0, XMMWORD PTR _ns$[ebp]
	pminsb	xmm0, XMMWORD PTR _right_border_idxs$[ebp]
	movaps	XMMWORD PTR _mask_right$[ebp], xmm0

; 681  :   __m128i mask1             = _mm_sub_epi8 (mask_right, left_128);

	movaps	xmm0, XMMWORD PTR _mask_right$[ebp]
	psubb	xmm0, XMMWORD PTR _left_128$[ebp]
	movaps	XMMWORD PTR _mask1$[ebp], xmm0

; 682  : 
; 683  :   // If right == 8 (we're completely outside the frame), right_border_idx is
; 684  :   // -1 and so is mask1. Clamp negative values to qwbaseid and as discussed
; 685  :   // earlier, adjust the load offset instead to load the "-1'st" pixels and
; 686  :   // using qwbaseids as the shuffle mask, broadcast it all over the rows.
; 687  :   const __m128i epol_mask = _mm_max_epi8(mask1, qwbaseids);

	movaps	xmm0, XMMWORD PTR _mask1$[ebp]
	pmaxsb	xmm0, XMMWORD PTR _qwbaseids$[ebp]
	movaps	XMMWORD PTR _epol_mask$[ebp], xmm0

; 688  : 
; 689  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 690  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 691  : 
; 692  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 693  :   int32_t y;
; 694  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad_ss
$LN2@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@hor_sad_ss

; 695  :     __m128d a_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _a_d$16[ebp], xmm0

; 696  :     __m128d b_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _b_d$15[ebp], xmm0

; 697  :     __m128d c_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _c_d$14[ebp], xmm0

; 698  :     __m128d d_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _d_d$13[ebp], xmm0

; 699  : 
; 700  :     a_d = _mm_loadl_pd(a_d, (const double *)(pic_data + (y + 0) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$16[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$16[ebp], xmm0

; 701  :     b_d = _mm_loadl_pd(b_d, (const double *)(ref_data + (y + 0) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _b_d$15[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _b_d$15[ebp], xmm0

; 702  :     a_d = _mm_loadh_pd(a_d, (const double *)(pic_data + (y + 1) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$16[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$16[ebp], xmm0

; 703  :     b_d = _mm_loadh_pd(b_d, (const double *)(ref_data + (y + 1) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _b_d$15[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _b_d$15[ebp], xmm0

; 704  : 
; 705  :     c_d = _mm_loadl_pd(c_d, (const double *)(pic_data + (y + 2) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$14[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$14[ebp], xmm0

; 706  :     d_d = _mm_loadl_pd(d_d, (const double *)(ref_data + (y + 2) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _d_d$13[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _d_d$13[ebp], xmm0

; 707  :     c_d = _mm_loadh_pd(c_d, (const double *)(pic_data + (y + 3) * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _pic_stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$14[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$14[ebp], xmm0

; 708  :     d_d = _mm_loadh_pd(d_d, (const double *)(ref_data + (y + 3) * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _d_d$13[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _d_d$13[ebp], xmm0

; 709  : 
; 710  :     __m128i a = _mm_castpd_si128(a_d);

	movaps	xmm0, XMMWORD PTR _a_d$16[ebp]
	movaps	XMMWORD PTR _a$12[ebp], xmm0

; 711  :     __m128i b = _mm_castpd_si128(b_d);

	movaps	xmm0, XMMWORD PTR _b_d$15[ebp]
	movaps	XMMWORD PTR _b$11[ebp], xmm0

; 712  :     __m128i c = _mm_castpd_si128(c_d);

	movaps	xmm0, XMMWORD PTR _c_d$14[ebp]
	movaps	XMMWORD PTR _c$10[ebp], xmm0

; 713  :     __m128i d = _mm_castpd_si128(d_d);

	movaps	xmm0, XMMWORD PTR _d_d$13[ebp]
	movaps	XMMWORD PTR _d$9[ebp], xmm0

; 714  : 
; 715  :     __m128i b_epol = _mm_shuffle_epi8(b, epol_mask);

	movaps	xmm0, XMMWORD PTR _b$11[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$8[ebp], xmm0

; 716  :     __m128i d_epol = _mm_shuffle_epi8(d, epol_mask);

	movaps	xmm0, XMMWORD PTR _d$9[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _d_epol$7[ebp], xmm0

; 717  : 
; 718  :     __m128i curr_sads_ab = _mm_sad_epu8(a, b_epol);

	movaps	xmm0, XMMWORD PTR _a$12[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$8[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$6[ebp], xmm0

; 719  :     __m128i curr_sads_cd = _mm_sad_epu8(c, d_epol);

	movaps	xmm0, XMMWORD PTR _c$10[ebp]
	psadbw	xmm0, XMMWORD PTR _d_epol$7[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$5[ebp], xmm0

; 720  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 721  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 722  :   }

	jmp	$LN2@hor_sad_ss
$LN3@hor_sad_ss:

; 723  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN8@hor_sad_ss

; 724  :     for (; y < height; y++) {

	jmp	SHORT $LN7@hor_sad_ss
$LN5@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@hor_sad_ss

; 725  :       __m128i a = _mm_loadl_epi64((__m128i *)(pic_data + y * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax]
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 726  :       __m128i b = _mm_loadl_epi64((__m128i *)(ref_data + y * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	movq	xmm0, QWORD PTR [eax+ecx]
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 727  : 
; 728  :       __m128i b_epol = _mm_shuffle_epi8(b, epol_mask);

	movaps	xmm0, XMMWORD PTR _b$3[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$2[ebp], xmm0

; 729  : 
; 730  :       __m128i curr_sads_ab = _mm_sad_epu8(a, b_epol);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$2[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$1[ebp], xmm0

; 731  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 732  :     }

	jmp	$LN5@hor_sad_ss
$LN8@hor_sad_ss:

; 733  :   }
; 734  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 735  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 736  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 737  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_hor_sad_sse41_w8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _hor_sad_sse41_w4
_TEXT	SEGMENT
tv66 = -1032						; size = 4
_sad$ = -640						; size = 16
_sse_inc_2$ = -608					; size = 16
_curr_sads$1 = -576					; size = 16
_b_epol$2 = -544					; size = 16
_b$3 = -512						; size = 16
_a$4 = -480						; size = 16
_curr_sads$5 = -448					; size = 16
_b_epol$6 = -416					; size = 16
_b$7 = -384						; size = 16
_a$8 = -352						; size = 16
_y$ = -316						; size = 4
_sse_inc$ = -304					; size = 16
_height_residual_lines$ = -280				; size = 4
_height_fourline_groups$ = -268				; size = 4
_epol_mask$ = -256					; size = 16
_mask1$ = -224						; size = 16
_mask_right$ = -192					; size = 16
_left_128$ = -160					; size = 16
_right_border_idxs$ = -128				; size = 16
_dwbaseids$ = -96					; size = 16
_leftoff$ = -72						; size = 4
_border_idx_negative$ = -60				; size = 4
_ns$ = -48						; size = 16
_border_idx$ = -20					; size = 4
_right_border_idx$ = -8					; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_pic_stride$ = 20					; size = 4
_ref_stride$ = 24					; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_hor_sad_sse41_w4 PROC					; COMDAT

; 582  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1032				; 00000408H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1032]
	mov	ecx, 258				; 00000102H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 583  :   const int32_t right_border_idx = 3 - right;

	mov	eax, 3
	sub	eax, DWORD PTR _right$[ebx]
	mov	DWORD PTR _right_border_idx$[ebp], eax

; 584  :   const int32_t border_idx       = left ? left : right_border_idx;

	cmp	DWORD PTR _left$[ebx], 0
	je	SHORT $LN10@hor_sad_ss
	mov	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN11@hor_sad_ss
$LN10@hor_sad_ss:
	mov	ecx, DWORD PTR _right_border_idx$[ebp]
	mov	DWORD PTR tv66[ebp], ecx
$LN11@hor_sad_ss:
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _border_idx$[ebp], edx

; 585  : 
; 586  :   const __m128i ns               = _mm_setr_epi8(0,  1,  2,  3,  4,  5,  6,  7,

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _ns$[ebp], xmm0

; 587  :                                                  8,  9,  10, 11, 12, 13, 14, 15);
; 588  : 
; 589  :   const int32_t border_idx_negative = border_idx >> 31;

	mov	eax, DWORD PTR _border_idx$[ebp]
	sar	eax, 31					; 0000001fH
	mov	DWORD PTR _border_idx_negative$[ebp], eax

; 590  :   const int32_t leftoff             = border_idx_negative | left;

	mov	eax, DWORD PTR _border_idx_negative$[ebp]
	or	eax, DWORD PTR _left$[ebx]
	mov	DWORD PTR _leftoff$[ebp], eax

; 591  : 
; 592  :   // Dualword (ie. line) base indexes, ie. the edges the lines read will be
; 593  :   // clamped towards
; 594  :   const __m128i dwbaseids   = _mm_setr_epi8(0, 0, 0, 0, 4, 4, 4, 4,

	movaps	xmm0, XMMWORD PTR __xmm@0c0c0c0c080808080404040400000000
	movaps	XMMWORD PTR _dwbaseids$[ebp], xmm0

; 595  :                                             8, 8, 8, 8, 12, 12, 12, 12);
; 596  : 
; 597  :   __m128i right_border_idxs = _mm_set1_epi8((int8_t)right_border_idx);

	movsx	eax, BYTE PTR _right_border_idx$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _right_border_idxs$[ebp], xmm0

; 598  :   __m128i left_128          = _mm_set1_epi8((int8_t)left);

	movsx	eax, BYTE PTR _left$[ebx]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _left_128$[ebp], xmm0

; 599  : 
; 600  :   right_border_idxs         = _mm_add_epi8 (right_border_idxs, dwbaseids);

	movaps	xmm0, XMMWORD PTR _right_border_idxs$[ebp]
	paddb	xmm0, XMMWORD PTR _dwbaseids$[ebp]
	movaps	XMMWORD PTR _right_border_idxs$[ebp], xmm0

; 601  : 
; 602  :   __m128i mask_right        = _mm_min_epi8 (ns,         right_border_idxs);

	movaps	xmm0, XMMWORD PTR _ns$[ebp]
	pminsb	xmm0, XMMWORD PTR _right_border_idxs$[ebp]
	movaps	XMMWORD PTR _mask_right$[ebp], xmm0

; 603  :   __m128i mask1             = _mm_sub_epi8 (mask_right, left_128);

	movaps	xmm0, XMMWORD PTR _mask_right$[ebp]
	psubb	xmm0, XMMWORD PTR _left_128$[ebp]
	movaps	XMMWORD PTR _mask1$[ebp], xmm0

; 604  : 
; 605  :   const __m128i epol_mask   = _mm_max_epi8(mask1, dwbaseids);

	movaps	xmm0, XMMWORD PTR _mask1$[ebp]
	pmaxsb	xmm0, XMMWORD PTR _dwbaseids$[ebp]
	movaps	XMMWORD PTR _epol_mask$[ebp], xmm0

; 606  : 
; 607  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 608  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 609  : 
; 610  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 611  :   int32_t y;
; 612  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@hor_sad_ss
$LN2@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@hor_sad_ss

; 613  :     __m128i a = _mm_cvtsi32_si128(*(const uint32_t *)(pic_data + y * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$8[ebp], xmm0

; 614  :     __m128i b = _mm_cvtsi32_si128(*(const uint32_t *)(ref_data + y * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	mov	edx, DWORD PTR [eax+ecx]
	movd	xmm0, edx
	movaps	XMMWORD PTR _b$7[ebp], xmm0

; 615  : 
; 616  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 1) * pic_stride),           1);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$8[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 1
	movaps	XMMWORD PTR _a$8[ebp], xmm0

; 617  :     b = _mm_insert_epi32(b, *(const uint32_t *)(ref_data + (y + 1) * ref_stride + leftoff), 1);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _b$7[ebp]
	pinsrd	xmm0, DWORD PTR [eax+ecx], 1
	movaps	XMMWORD PTR _b$7[ebp], xmm0

; 618  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 2) * pic_stride),           2);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$8[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 2
	movaps	XMMWORD PTR _a$8[ebp], xmm0

; 619  :     b = _mm_insert_epi32(b, *(const uint32_t *)(ref_data + (y + 2) * ref_stride + leftoff), 2);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _b$7[ebp]
	pinsrd	xmm0, DWORD PTR [eax+ecx], 2
	movaps	XMMWORD PTR _b$7[ebp], xmm0

; 620  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 3) * pic_stride),           3);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$8[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 3
	movaps	XMMWORD PTR _a$8[ebp], xmm0

; 621  :     b = _mm_insert_epi32(b, *(const uint32_t *)(ref_data + (y + 3) * ref_stride + leftoff), 3);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	movaps	xmm0, XMMWORD PTR _b$7[ebp]
	pinsrd	xmm0, DWORD PTR [eax+ecx], 3
	movaps	XMMWORD PTR _b$7[ebp], xmm0

; 622  : 
; 623  :     __m128i b_epol    = _mm_shuffle_epi8(b,       epol_mask);

	movaps	xmm0, XMMWORD PTR _b$7[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$6[ebp], xmm0

; 624  :     __m128i curr_sads = _mm_sad_epu8    (a,       b_epol);

	movaps	xmm0, XMMWORD PTR _a$8[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$6[ebp]
	movaps	XMMWORD PTR _curr_sads$5[ebp], xmm0

; 625  :             sse_inc   = _mm_add_epi64   (sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 626  :   }

	jmp	$LN2@hor_sad_ss
$LN3@hor_sad_ss:

; 627  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN8@hor_sad_ss

; 628  :     for (; y < height; y++) {

	jmp	SHORT $LN7@hor_sad_ss
$LN5@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@hor_sad_ss:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	$LN8@hor_sad_ss

; 629  :       __m128i a = _mm_cvtsi32_si128(*(const uint32_t *)(pic_data + y * pic_stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _pic_stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 630  :       __m128i b = _mm_cvtsi32_si128(*(const uint32_t *)(ref_data + y * ref_stride + leftoff));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _ref_stride$[ebx]
	add	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR _leftoff$[ebp]
	mov	edx, DWORD PTR [eax+ecx]
	movd	xmm0, edx
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 631  : 
; 632  :       __m128i b_epol = _mm_shuffle_epi8(b, epol_mask);

	movaps	xmm0, XMMWORD PTR _b$3[ebp]
	pshufb	xmm0, XMMWORD PTR _epol_mask$[ebp]
	movaps	XMMWORD PTR _b_epol$2[ebp], xmm0

; 633  :       __m128i curr_sads = _mm_sad_epu8 (a, b_epol);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _b_epol$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 634  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 635  :     }

	jmp	$LN5@hor_sad_ss
$LN8@hor_sad_ss:

; 636  :   }
; 637  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 638  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 639  : 
; 640  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 641  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_hor_sad_sse41_w4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _ver_sad_arbitrary
_TEXT	SEGMENT
_sad$ = -1120						; size = 16
_sse_inc_2$ = -1088					; size = 16
_curr_sads$1 = -1056					; size = 16
_a_masked$2 = -1024					; size = 16
_a$3 = -992						; size = 16
_curr_sads_gh$4 = -960					; size = 16
_curr_sads_ef$5 = -928					; size = 16
_curr_sads_cd$6 = -896					; size = 16
_curr_sads_ab$7 = -864					; size = 16
_g_masked$8 = -832					; size = 16
_e_masked$9 = -800					; size = 16
_c_masked$10 = -768					; size = 16
_a_masked$11 = -736					; size = 16
_g$12 = -704						; size = 16
_e$13 = -672						; size = 16
_c$14 = -640						; size = 16
_a$15 = -608						; size = 16
_ref_row$16 = -576					; size = 16
_curr_sads$17 = -544					; size = 16
_a$18 = -512						; size = 16
_curr_sads_gh$19 = -480					; size = 16
_curr_sads_ef$20 = -448					; size = 16
_curr_sads_cd$21 = -416					; size = 16
_curr_sads_ab$22 = -384					; size = 16
_g$23 = -352						; size = 16
_e$24 = -320						; size = 16
_c$25 = -288						; size = 16
_a$26 = -256						; size = 16
_ref_row$27 = -224					; size = 16
_rdmask$ = -192						; size = 16
_ns$ = -160						; size = 16
_rds$ = -128						; size = 16
_height_residual_lines$ = -96				; size = 4
_height_fourline_groups$ = -84				; size = 4
_width_residual_pixels$ = -72				; size = 4
_width_xmms$ = -60					; size = 4
_sse_inc$ = -48						; size = 16
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride$ = 24						; size = 4
_ver_sad_arbitrary PROC					; COMDAT

; 494  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1704				; 000006a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1704]
	mov	ecx, 426				; 000001aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 495  :   int32_t y, x;
; 496  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 497  : 
; 498  :   // Bytes in block in 128-bit blocks per each scanline, and remainder
; 499  :   const int32_t width_xmms             = width  & ~15;

	mov	eax, DWORD PTR _width$[ebx]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _width_xmms$[ebp], eax

; 500  :   const int32_t width_residual_pixels  = width  &  15;

	mov	eax, DWORD PTR _width$[ebx]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _width_residual_pixels$[ebp], eax

; 501  : 
; 502  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 503  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 504  : 
; 505  :   const __m128i rds    = _mm_set1_epi8 (width_residual_pixels);

	movsx	eax, BYTE PTR _width_residual_pixels$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _rds$[ebp], xmm0

; 506  :   const __m128i ns     = _mm_setr_epi8 (0,  1,  2,  3,  4,  5,  6,  7,

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _ns$[ebp], xmm0

; 507  :                                         8,  9,  10, 11, 12, 13, 14, 15);
; 508  :   const __m128i rdmask = _mm_cmpgt_epi8(rds, ns);

	movaps	xmm0, XMMWORD PTR _rds$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _ns$[ebp]
	movaps	XMMWORD PTR _rdmask$[ebp], xmm0

; 509  : 
; 510  :   for (x = 0; x < width_xmms; x += 16) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN4@ver_sad_ar
$LN2@ver_sad_ar:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
$LN4@ver_sad_ar:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width_xmms$[ebp]
	jge	$LN3@ver_sad_ar

; 511  :     const __m128i ref_row = _mm_loadu_si128((__m128i *)(ref_data + x));

	mov	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _ref_row$27[ebp], xmm0

; 512  :     for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN7@ver_sad_ar
$LN5@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN7@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN6@ver_sad_ar

; 513  :       __m128i a = _mm_loadu_si128((const __m128i *)(pic_data + (y + 0) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$26[ebp], xmm0

; 514  :       __m128i c = _mm_loadu_si128((const __m128i *)(pic_data + (y + 1) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$25[ebp], xmm0

; 515  :       __m128i e = _mm_loadu_si128((const __m128i *)(pic_data + (y + 2) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$24[ebp], xmm0

; 516  :       __m128i g = _mm_loadu_si128((const __m128i *)(pic_data + (y + 3) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$23[ebp], xmm0

; 517  : 
; 518  :       __m128i curr_sads_ab = _mm_sad_epu8(ref_row, a);

	movaps	xmm0, XMMWORD PTR _ref_row$27[ebp]
	psadbw	xmm0, XMMWORD PTR _a$26[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$22[ebp], xmm0

; 519  :       __m128i curr_sads_cd = _mm_sad_epu8(ref_row, c);

	movaps	xmm0, XMMWORD PTR _ref_row$27[ebp]
	psadbw	xmm0, XMMWORD PTR _c$25[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$21[ebp], xmm0

; 520  :       __m128i curr_sads_ef = _mm_sad_epu8(ref_row, e);

	movaps	xmm0, XMMWORD PTR _ref_row$27[ebp]
	psadbw	xmm0, XMMWORD PTR _e$24[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$20[ebp], xmm0

; 521  :       __m128i curr_sads_gh = _mm_sad_epu8(ref_row, g);

	movaps	xmm0, XMMWORD PTR _ref_row$27[ebp]
	psadbw	xmm0, XMMWORD PTR _g$23[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$19[ebp], xmm0

; 522  : 
; 523  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$22[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 524  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$21[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 525  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$20[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 526  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$19[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 527  :     }

	jmp	$LN5@ver_sad_ar
$LN6@ver_sad_ar:

; 528  :     if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN17@ver_sad_ar

; 529  :       for (; y < height; y++) {

	jmp	SHORT $LN10@ver_sad_ar
$LN8@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN17@ver_sad_ar

; 530  :         __m128i a = _mm_loadu_si128((const __m128i *)(pic_data + y * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$18[ebp], xmm0

; 531  : 
; 532  :         __m128i curr_sads = _mm_sad_epu8(a, ref_row);

	movaps	xmm0, XMMWORD PTR _a$18[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$27[ebp]
	movaps	XMMWORD PTR _curr_sads$17[ebp], xmm0

; 533  : 
; 534  :         sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$17[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 535  :       }

	jmp	SHORT $LN8@ver_sad_ar
$LN17@ver_sad_ar:

; 536  :     }
; 537  :   }

	jmp	$LN2@ver_sad_ar
$LN3@ver_sad_ar:

; 538  : 
; 539  :   if (width_residual_pixels) {

	cmp	DWORD PTR _width_residual_pixels$[ebp], 0
	je	$LN18@ver_sad_ar

; 540  :     const __m128i ref_row = _mm_loadu_si128((__m128i *)(ref_data + x));

	mov	eax, DWORD PTR _ref_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _ref_row$16[ebp], xmm0

; 541  :     for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@ver_sad_ar
$LN11@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN13@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN12@ver_sad_ar

; 542  :       __m128i a = _mm_loadu_si128((const __m128i *)(pic_data + (y + 0) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$15[ebp], xmm0

; 543  :       __m128i c = _mm_loadu_si128((const __m128i *)(pic_data + (y + 1) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$14[ebp], xmm0

; 544  :       __m128i e = _mm_loadu_si128((const __m128i *)(pic_data + (y + 2) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$13[ebp], xmm0

; 545  :       __m128i g = _mm_loadu_si128((const __m128i *)(pic_data + (y + 3) * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$12[ebp], xmm0

; 546  : 
; 547  :       __m128i a_masked     = _mm_blendv_epi8(ref_row, a, rdmask);

	movaps	xmm1, XMMWORD PTR _ref_row$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _a$15[ebp], xmm0
	movaps	XMMWORD PTR _a_masked$11[ebp], xmm1

; 548  :       __m128i c_masked     = _mm_blendv_epi8(ref_row, c, rdmask);

	movaps	xmm1, XMMWORD PTR _ref_row$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _c$14[ebp], xmm0
	movaps	XMMWORD PTR _c_masked$10[ebp], xmm1

; 549  :       __m128i e_masked     = _mm_blendv_epi8(ref_row, e, rdmask);

	movaps	xmm1, XMMWORD PTR _ref_row$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _e$13[ebp], xmm0
	movaps	XMMWORD PTR _e_masked$9[ebp], xmm1

; 550  :       __m128i g_masked     = _mm_blendv_epi8(ref_row, g, rdmask);

	movaps	xmm1, XMMWORD PTR _ref_row$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _g$12[ebp], xmm0
	movaps	XMMWORD PTR _g_masked$8[ebp], xmm1

; 551  : 
; 552  :       __m128i curr_sads_ab = _mm_sad_epu8   (ref_row, a_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$16[ebp]
	psadbw	xmm0, XMMWORD PTR _a_masked$11[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$7[ebp], xmm0

; 553  :       __m128i curr_sads_cd = _mm_sad_epu8   (ref_row, c_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$16[ebp]
	psadbw	xmm0, XMMWORD PTR _c_masked$10[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$6[ebp], xmm0

; 554  :       __m128i curr_sads_ef = _mm_sad_epu8   (ref_row, e_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$16[ebp]
	psadbw	xmm0, XMMWORD PTR _e_masked$9[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$5[ebp], xmm0

; 555  :       __m128i curr_sads_gh = _mm_sad_epu8   (ref_row, g_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$16[ebp]
	psadbw	xmm0, XMMWORD PTR _g_masked$8[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$4[ebp], xmm0

; 556  : 
; 557  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$7[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 558  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 559  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 560  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 561  :     }

	jmp	$LN11@ver_sad_ar
$LN12@ver_sad_ar:

; 562  :     if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN18@ver_sad_ar

; 563  :       for (; y < height; y++) {

	jmp	SHORT $LN16@ver_sad_ar
$LN14@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN16@ver_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN18@ver_sad_ar

; 564  :         __m128i a = _mm_loadu_si128((const __m128i *)(pic_data + y * stride + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$3[ebp], xmm0

; 565  : 
; 566  :         __m128i a_masked  = _mm_blendv_epi8(ref_row, a, rdmask);

	movaps	xmm1, XMMWORD PTR _ref_row$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _a$3[ebp], xmm0
	movaps	XMMWORD PTR _a_masked$2[ebp], xmm1

; 567  :         __m128i curr_sads = _mm_sad_epu8   (ref_row, a_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$16[ebp]
	psadbw	xmm0, XMMWORD PTR _a_masked$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 568  : 
; 569  :         sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 570  :       }

	jmp	SHORT $LN14@ver_sad_ar
$LN18@ver_sad_ar:

; 571  :     }
; 572  :   }
; 573  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 574  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 575  : 
; 576  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 577  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_ver_sad_arbitrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _ver_sad_w16
_TEXT	SEGMENT
_sad$ = -480						; size = 16
_sse_inc_2$ = -448					; size = 16
_curr_sads$1 = -416					; size = 16
_pic_row$2 = -384					; size = 16
_curr_sads_4$3 = -352					; size = 16
_curr_sads_3$4 = -320					; size = 16
_curr_sads_2$5 = -288					; size = 16
_curr_sads_1$6 = -256					; size = 16
_pic_row_4$7 = -224					; size = 16
_pic_row_3$8 = -192					; size = 16
_pic_row_2$9 = -160					; size = 16
_pic_row_1$10 = -128					; size = 16
_height_residual_lines$ = -100				; size = 4
_height_fourline_groups$ = -88				; size = 4
_y$ = -76						; size = 4
_sse_inc$ = -64						; size = 16
_ref_row$ = -32						; size = 16
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_stride$ = 20						; size = 4
_ver_sad_w16 PROC					; COMDAT

; 454  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 680				; 000002a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-680]
	mov	ecx, 170				; 000000aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 455  :   const __m128i ref_row = _mm_loadu_si128((__m128i *)ref_data);

	mov	eax, DWORD PTR _ref_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _ref_row$[ebp], xmm0

; 456  :   __m128i sse_inc       = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 457  :   int32_t y;
; 458  : 
; 459  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 460  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 461  : 
; 462  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ver_sad_w1
$LN2@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@ver_sad_w1

; 463  :     __m128i pic_row_1   = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _pic_row_1$10[ebp], xmm0

; 464  :     __m128i pic_row_2   = _mm_loadu_si128((__m128i *)(pic_data + (y + 1) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _pic_row_2$9[ebp], xmm0

; 465  :     __m128i pic_row_3   = _mm_loadu_si128((__m128i *)(pic_data + (y + 2) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _pic_row_3$8[ebp], xmm0

; 466  :     __m128i pic_row_4   = _mm_loadu_si128((__m128i *)(pic_data + (y + 3) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _pic_row_4$7[ebp], xmm0

; 467  : 
; 468  :     __m128i curr_sads_1 = _mm_sad_epu8   (pic_row_1, ref_row);

	movaps	xmm0, XMMWORD PTR _pic_row_1$10[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_1$6[ebp], xmm0

; 469  :     __m128i curr_sads_2 = _mm_sad_epu8   (pic_row_2, ref_row);

	movaps	xmm0, XMMWORD PTR _pic_row_2$9[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_2$5[ebp], xmm0

; 470  :     __m128i curr_sads_3 = _mm_sad_epu8   (pic_row_3, ref_row);

	movaps	xmm0, XMMWORD PTR _pic_row_3$8[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_3$4[ebp], xmm0

; 471  :     __m128i curr_sads_4 = _mm_sad_epu8   (pic_row_4, ref_row);

	movaps	xmm0, XMMWORD PTR _pic_row_4$7[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_4$3[ebp], xmm0

; 472  : 
; 473  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_1);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_1$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 474  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_2$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 475  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_3);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_3$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 476  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_4);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_4$3[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 477  :   }

	jmp	$LN2@ver_sad_w1
$LN3@ver_sad_w1:

; 478  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@ver_sad_w1

; 479  :     for (; y < height; y++) {

	jmp	SHORT $LN7@ver_sad_w1
$LN5@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@ver_sad_w1

; 480  :       __m128i pic_row   = _mm_loadu_si128((__m128i *)(pic_data + (y + 0) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _pic_row$2[ebp], xmm0

; 481  :       __m128i curr_sads = _mm_sad_epu8   (pic_row, ref_row);

	movaps	xmm0, XMMWORD PTR _pic_row$2[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 482  : 
; 483  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 484  :     }

	jmp	SHORT $LN5@ver_sad_w1
$LN8@ver_sad_w1:

; 485  :   }
; 486  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 487  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 488  : 
; 489  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 490  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_ver_sad_w16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _ver_sad_w12
_TEXT	SEGMENT
_sad$ = -240						; size = 16
_sse_inc_2$ = -208					; size = 16
_curr_sads$1 = -176					; size = 16
_a_masked$2 = -144					; size = 16
_a$3 = -112						; size = 16
_y$ = -76						; size = 4
_sse_inc$ = -64						; size = 16
_ref_row$ = -32						; size = 16
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_stride$ = 20						; size = 4
_ver_sad_w12 PROC					; COMDAT

; 435  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 436  :   const __m128i ref_row = _mm_loadu_si128((__m128i *)ref_data);

	mov	eax, DWORD PTR _ref_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _ref_row$[ebp], xmm0

; 437  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 438  :   int32_t y;
; 439  : 
; 440  :   for (y = 0; y < height; y++) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ver_sad_w1
$LN2@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@ver_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN3@ver_sad_w1

; 441  :     __m128i a = _mm_loadu_si128((const __m128i *)(pic_data + y * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$3[ebp], xmm0

; 442  : 
; 443  :     __m128i a_masked  = _mm_blend_epi16(ref_row, a, 0x3f);

	movaps	xmm0, XMMWORD PTR _ref_row$[ebp]
	pblendw	xmm0, XMMWORD PTR _a$3[ebp], 63		; 0000003fH
	movaps	XMMWORD PTR _a_masked$2[ebp], xmm0

; 444  :     __m128i curr_sads = _mm_sad_epu8   (ref_row, a_masked);

	movaps	xmm0, XMMWORD PTR _ref_row$[ebp]
	psadbw	xmm0, XMMWORD PTR _a_masked$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 445  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 446  :   }

	jmp	SHORT $LN2@ver_sad_w1
$LN3@ver_sad_w1:

; 447  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 448  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 449  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 450  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_ver_sad_w12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _ver_sad_w8
_TEXT	SEGMENT
_sad$ = -448						; size = 16
_sse_inc_2$ = -416					; size = 16
_curr_sads_ab$1 = -384					; size = 16
_a$2 = -352						; size = 16
_b$3 = -320						; size = 16
_curr_sads_cd$4 = -288					; size = 16
_curr_sads_ab$5 = -256					; size = 16
_c$6 = -224						; size = 16
_a$7 = -192						; size = 16
_c_d$8 = -160						; size = 16
_a_d$9 = -128						; size = 16
_height_residual_lines$ = -100				; size = 4
_height_fourline_groups$ = -88				; size = 4
_y$ = -76						; size = 4
_sse_inc$ = -64						; size = 16
_ref_row$ = -32						; size = 16
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_stride$ = 20						; size = 4
_ver_sad_w8 PROC					; COMDAT

; 391  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 648				; 00000288H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-648]
	mov	ecx, 162				; 000000a2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 392  :   const __m128i ref_row = _mm_set1_epi64x(*(const uint64_t *)ref_data);

	mov	eax, DWORD PTR _ref_data$[ebx]
	movq	xmm0, QWORD PTR [eax]
	movq	xmm0, xmm0
	movaps	xmm1, xmm0
	punpcklqdq xmm1, xmm0
	movaps	XMMWORD PTR _ref_row$[ebp], xmm1

; 393  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 394  :   int32_t y;
; 395  : 
; 396  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 397  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 398  : 
; 399  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ver_sad_w8
$LN2@ver_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@ver_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@ver_sad_w8

; 400  :     __m128d a_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _a_d$9[ebp], xmm0

; 401  :     __m128d c_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _c_d$8[ebp], xmm0

; 402  : 
; 403  :     a_d = _mm_loadl_pd(a_d, (const double *)(pic_data + (y + 0) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$9[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$9[ebp], xmm0

; 404  :     a_d = _mm_loadh_pd(a_d, (const double *)(pic_data + (y + 1) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$9[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$9[ebp], xmm0

; 405  : 
; 406  :     c_d = _mm_loadl_pd(c_d, (const double *)(pic_data + (y + 2) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$8[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$8[ebp], xmm0

; 407  :     c_d = _mm_loadh_pd(c_d, (const double *)(pic_data + (y + 3) * stride));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride$[ebx]
	add	eax, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$8[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$8[ebp], xmm0

; 408  : 
; 409  :     __m128i a = _mm_castpd_si128(a_d);

	movaps	xmm0, XMMWORD PTR _a_d$9[ebp]
	movaps	XMMWORD PTR _a$7[ebp], xmm0

; 410  :     __m128i c = _mm_castpd_si128(c_d);

	movaps	xmm0, XMMWORD PTR _c_d$8[ebp]
	movaps	XMMWORD PTR _c$6[ebp], xmm0

; 411  : 
; 412  :     __m128i curr_sads_ab = _mm_sad_epu8(a, ref_row);

	movaps	xmm0, XMMWORD PTR _a$7[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$5[ebp], xmm0

; 413  :     __m128i curr_sads_cd = _mm_sad_epu8(c, ref_row);

	movaps	xmm0, XMMWORD PTR _c$6[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$4[ebp], xmm0

; 414  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 415  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 416  :   }

	jmp	$LN2@ver_sad_w8
$LN3@ver_sad_w8:

; 417  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@ver_sad_w8

; 418  :     __m128i b = _mm_move_epi64(ref_row);

	movq	xmm0, QWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 419  : 
; 420  :     for (; y < height; y++) {

	jmp	SHORT $LN7@ver_sad_w8
$LN5@ver_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@ver_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@ver_sad_w8

; 421  :       __m128i a = _mm_loadl_epi64((__m128i *)(pic_data + y * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax]
	movaps	XMMWORD PTR _a$2[ebp], xmm0

; 422  : 
; 423  :       __m128i curr_sads_ab = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$2[ebp]
	psadbw	xmm0, XMMWORD PTR _b$3[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$1[ebp], xmm0

; 424  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 425  :     }

	jmp	SHORT $LN5@ver_sad_w8
$LN8@ver_sad_w8:

; 426  :   }
; 427  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 428  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 429  : 
; 430  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 431  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_ver_sad_w8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _ver_sad_w4
_TEXT	SEGMENT
_sad$ = -288						; size = 16
_sse_inc_2$ = -256					; size = 16
_curr_sads$1 = -224					; size = 16
_a$2 = -192						; size = 16
_curr_sads$3 = -160					; size = 16
_a$4 = -128						; size = 16
_height_residual_lines$ = -100				; size = 4
_height_fourline_groups$ = -88				; size = 4
_y$ = -76						; size = 4
_sse_inc$ = -64						; size = 16
_ref_row$ = -32						; size = 16
_pic_data$ = 8						; size = 4
_ref_data$ = 12						; size = 4
_height$ = 16						; size = 4
_stride$ = 20						; size = 4
_ver_sad_w4 PROC					; COMDAT

; 354  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-488]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 355  :   __m128i ref_row = _mm_set1_epi32(*(const uint32_t *)ref_data);

	mov	eax, DWORD PTR _ref_data$[ebx]
	mov	ecx, DWORD PTR [eax]
	movd	xmm0, ecx
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _ref_row$[ebp], xmm0

; 356  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 357  :   int32_t y;
; 358  : 
; 359  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 360  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 361  : 
; 362  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ver_sad_w4
$LN2@ver_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@ver_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@ver_sad_w4

; 363  :     __m128i a = _mm_cvtsi32_si128(*(uint32_t *)(pic_data + y * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 364  : 
; 365  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 1) * stride), 1);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 1
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 366  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 2) * stride), 2);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 2
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 367  :     a = _mm_insert_epi32(a, *(const uint32_t *)(pic_data + (y + 3) * stride), 3);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 3
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 368  : 
; 369  :     __m128i curr_sads = _mm_sad_epu8(a, ref_row);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads$3[ebp], xmm0

; 370  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$3[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 371  :   }

	jmp	$LN2@ver_sad_w4
$LN3@ver_sad_w4:

; 372  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@ver_sad_w4

; 373  :     // Only pick the last dword, because we're comparing single dwords (lines)
; 374  :     ref_row = _mm_bsrli_si128(ref_row, 12);

	movaps	xmm0, XMMWORD PTR _ref_row$[ebp]
	psrldq	xmm0, 12				; 0000000cH
	movaps	XMMWORD PTR _ref_row$[ebp], xmm0

; 375  : 
; 376  :     for (; y < height; y++) {

	jmp	SHORT $LN7@ver_sad_w4
$LN5@ver_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@ver_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@ver_sad_w4

; 377  :       __m128i a = _mm_cvtsi32_si128(*(const uint32_t *)(pic_data + y * stride));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride$[ebx]
	mov	ecx, DWORD PTR _pic_data$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$2[ebp], xmm0

; 378  : 
; 379  :       __m128i curr_sads = _mm_sad_epu8(a, ref_row);

	movaps	xmm0, XMMWORD PTR _a$2[ebp]
	psadbw	xmm0, XMMWORD PTR _ref_row$[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 380  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 381  :     }

	jmp	SHORT $LN5@ver_sad_w4
$LN8@ver_sad_w4:

; 382  :   }
; 383  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 384  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 385  : 
; 386  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 387  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_ver_sad_w4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_arbitrary
_TEXT	SEGMENT
_sad$ = -1376						; size = 16
_sse_inc_2$ = -1344					; size = 16
_curr_sads$1 = -1312					; size = 16
_b_masked$2 = -1280					; size = 16
_b$3 = -1248						; size = 16
_a$4 = -1216						; size = 16
_curr_sads_gh$5 = -1184					; size = 16
_curr_sads_ef$6 = -1152					; size = 16
_curr_sads_cd$7 = -1120					; size = 16
_curr_sads_ab$8 = -1088					; size = 16
_h_masked$9 = -1056					; size = 16
_f_masked$10 = -1024					; size = 16
_d_masked$11 = -992					; size = 16
_b_masked$12 = -960					; size = 16
_h$13 = -928						; size = 16
_g$14 = -896						; size = 16
_f$15 = -864						; size = 16
_e$16 = -832						; size = 16
_d$17 = -800						; size = 16
_c$18 = -768						; size = 16
_b$19 = -736						; size = 16
_a$20 = -704						; size = 16
_curr_sads$21 = -672					; size = 16
_b$22 = -640						; size = 16
_a$23 = -608						; size = 16
_curr_sads_gh$24 = -576					; size = 16
_curr_sads_ef$25 = -544					; size = 16
_curr_sads_cd$26 = -512					; size = 16
_curr_sads_ab$27 = -480					; size = 16
_h$28 = -448						; size = 16
_g$29 = -416						; size = 16
_f$30 = -384						; size = 16
_e$31 = -352						; size = 16
_d$32 = -320						; size = 16
_c$33 = -288						; size = 16
_b$34 = -256						; size = 16
_a$35 = -224						; size = 16
_rdmask$ = -192						; size = 16
_ns$ = -160						; size = 16
_rds$ = -128						; size = 16
_height_residual_lines$ = -96				; size = 4
_height_fourline_groups$ = -84				; size = 4
_width_residual_pixels$ = -72				; size = 4
_width_xmms$ = -60					; size = 4
_sse_inc$ = -48						; size = 16
_x$ = -20						; size = 4
_y$ = -8						; size = 4
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride1$ = 24						; size = 4
_stride2$ = 28						; size = 4
_reg_sad_arbitrary PROC					; COMDAT

; 259  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1960				; 000007a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1960]
	mov	ecx, 490				; 000001eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 260  :   int32_t y, x;
; 261  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 262  :   
; 263  :   // Bytes in block in 128-bit blocks per each scanline, and remainder
; 264  :   const int32_t width_xmms             = width  & ~15;

	mov	eax, DWORD PTR _width$[ebx]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _width_xmms$[ebp], eax

; 265  :   const int32_t width_residual_pixels  = width  &  15;

	mov	eax, DWORD PTR _width$[ebx]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _width_residual_pixels$[ebp], eax

; 266  : 
; 267  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 268  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 269  : 
; 270  :   const __m128i rds    = _mm_set1_epi8 (width_residual_pixels);

	movsx	eax, BYTE PTR _width_residual_pixels$[ebp]
	movd	xmm0, eax
	punpcklbw xmm0, xmm0
	punpcklwd xmm0, xmm0
	pshufd	xmm0, xmm0, 0
	movaps	XMMWORD PTR _rds$[ebp], xmm0

; 271  :   const __m128i ns     = _mm_setr_epi8 (0,  1,  2,  3,  4,  5,  6,  7,

	movaps	xmm0, XMMWORD PTR __xmm@0f0e0d0c0b0a09080706050403020100
	movaps	XMMWORD PTR _ns$[ebp], xmm0

; 272  :                                         8,  9,  10, 11, 12, 13, 14, 15);
; 273  :   const __m128i rdmask = _mm_cmpgt_epi8(rds, ns);

	movaps	xmm0, XMMWORD PTR _rds$[ebp]
	pcmpgtb	xmm0, XMMWORD PTR _ns$[ebp]
	movaps	XMMWORD PTR _rdmask$[ebp], xmm0

; 274  : 
; 275  :   for (x = 0; x < width_xmms; x += 16) {

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN4@reg_sad_ar
$LN2@reg_sad_ar:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
$LN4@reg_sad_ar:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _width_xmms$[ebp]
	jge	$LN3@reg_sad_ar

; 276  :     for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN7@reg_sad_ar
$LN5@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN7@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN6@reg_sad_ar

; 277  :       __m128i a = _mm_loadu_si128((const __m128i *)(data1 + (y + 0) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$35[ebp], xmm0

; 278  :       __m128i b = _mm_loadu_si128((const __m128i *)(data2 + (y + 0) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$34[ebp], xmm0

; 279  :       __m128i c = _mm_loadu_si128((const __m128i *)(data1 + (y + 1) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$33[ebp], xmm0

; 280  :       __m128i d = _mm_loadu_si128((const __m128i *)(data2 + (y + 1) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _d$32[ebp], xmm0

; 281  :       __m128i e = _mm_loadu_si128((const __m128i *)(data1 + (y + 2) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$31[ebp], xmm0

; 282  :       __m128i f = _mm_loadu_si128((const __m128i *)(data2 + (y + 2) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _f$30[ebp], xmm0

; 283  :       __m128i g = _mm_loadu_si128((const __m128i *)(data1 + (y + 3) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$29[ebp], xmm0

; 284  :       __m128i h = _mm_loadu_si128((const __m128i *)(data2 + (y + 3) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _h$28[ebp], xmm0

; 285  : 
; 286  :       __m128i curr_sads_ab = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$35[ebp]
	psadbw	xmm0, XMMWORD PTR _b$34[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$27[ebp], xmm0

; 287  :       __m128i curr_sads_cd = _mm_sad_epu8(c, d);

	movaps	xmm0, XMMWORD PTR _c$33[ebp]
	psadbw	xmm0, XMMWORD PTR _d$32[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$26[ebp], xmm0

; 288  :       __m128i curr_sads_ef = _mm_sad_epu8(e, f);

	movaps	xmm0, XMMWORD PTR _e$31[ebp]
	psadbw	xmm0, XMMWORD PTR _f$30[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$25[ebp], xmm0

; 289  :       __m128i curr_sads_gh = _mm_sad_epu8(g, h);

	movaps	xmm0, XMMWORD PTR _g$29[ebp]
	psadbw	xmm0, XMMWORD PTR _h$28[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$24[ebp], xmm0

; 290  : 
; 291  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$27[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 292  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$26[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 293  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$25[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 294  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$24[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 295  :     }

	jmp	$LN5@reg_sad_ar
$LN6@reg_sad_ar:

; 296  :     if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN17@reg_sad_ar

; 297  :       for (; y < height; y++) {

	jmp	SHORT $LN10@reg_sad_ar
$LN8@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN10@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN17@reg_sad_ar

; 298  :         __m128i a = _mm_loadu_si128((const __m128i *)(data1 + y * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$23[ebp], xmm0

; 299  :         __m128i b = _mm_loadu_si128((const __m128i *)(data2 + y * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$22[ebp], xmm0

; 300  : 
; 301  :         __m128i curr_sads = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$23[ebp]
	psadbw	xmm0, XMMWORD PTR _b$22[ebp]
	movaps	XMMWORD PTR _curr_sads$21[ebp], xmm0

; 302  : 
; 303  :         sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$21[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 304  :       }

	jmp	SHORT $LN8@reg_sad_ar
$LN17@reg_sad_ar:

; 305  :     }
; 306  :   }

	jmp	$LN2@reg_sad_ar
$LN3@reg_sad_ar:

; 307  : 
; 308  :   if (width_residual_pixels) {

	cmp	DWORD PTR _width_residual_pixels$[ebp], 0
	je	$LN18@reg_sad_ar

; 309  :     for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@reg_sad_ar
$LN11@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN13@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN12@reg_sad_ar

; 310  :       __m128i a = _mm_loadu_si128((const __m128i *)(data1 + (y + 0) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$20[ebp], xmm0

; 311  :       __m128i b = _mm_loadu_si128((const __m128i *)(data2 + (y + 0) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$19[ebp], xmm0

; 312  :       __m128i c = _mm_loadu_si128((const __m128i *)(data1 + (y + 1) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$18[ebp], xmm0

; 313  :       __m128i d = _mm_loadu_si128((const __m128i *)(data2 + (y + 1) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _d$17[ebp], xmm0

; 314  :       __m128i e = _mm_loadu_si128((const __m128i *)(data1 + (y + 2) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$16[ebp], xmm0

; 315  :       __m128i f = _mm_loadu_si128((const __m128i *)(data2 + (y + 2) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _f$15[ebp], xmm0

; 316  :       __m128i g = _mm_loadu_si128((const __m128i *)(data1 + (y + 3) * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$14[ebp], xmm0

; 317  :       __m128i h = _mm_loadu_si128((const __m128i *)(data2 + (y + 3) * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _h$13[ebp], xmm0

; 318  : 
; 319  :       __m128i b_masked     = _mm_blendv_epi8(a, b, rdmask);

	movaps	xmm1, XMMWORD PTR _a$20[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b$19[ebp], xmm0
	movaps	XMMWORD PTR _b_masked$12[ebp], xmm1

; 320  :       __m128i d_masked     = _mm_blendv_epi8(c, d, rdmask);

	movaps	xmm1, XMMWORD PTR _c$18[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _d$17[ebp], xmm0
	movaps	XMMWORD PTR _d_masked$11[ebp], xmm1

; 321  :       __m128i f_masked     = _mm_blendv_epi8(e, f, rdmask);

	movaps	xmm1, XMMWORD PTR _e$16[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _f$15[ebp], xmm0
	movaps	XMMWORD PTR _f_masked$10[ebp], xmm1

; 322  :       __m128i h_masked     = _mm_blendv_epi8(g, h, rdmask);

	movaps	xmm1, XMMWORD PTR _g$14[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _h$13[ebp], xmm0
	movaps	XMMWORD PTR _h_masked$9[ebp], xmm1

; 323  : 
; 324  :       __m128i curr_sads_ab = _mm_sad_epu8   (a, b_masked);

	movaps	xmm0, XMMWORD PTR _a$20[ebp]
	psadbw	xmm0, XMMWORD PTR _b_masked$12[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$8[ebp], xmm0

; 325  :       __m128i curr_sads_cd = _mm_sad_epu8   (c, d_masked);

	movaps	xmm0, XMMWORD PTR _c$18[ebp]
	psadbw	xmm0, XMMWORD PTR _d_masked$11[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$7[ebp], xmm0

; 326  :       __m128i curr_sads_ef = _mm_sad_epu8   (e, f_masked);

	movaps	xmm0, XMMWORD PTR _e$16[ebp]
	psadbw	xmm0, XMMWORD PTR _f_masked$10[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$6[ebp], xmm0

; 327  :       __m128i curr_sads_gh = _mm_sad_epu8   (g, h_masked);

	movaps	xmm0, XMMWORD PTR _g$14[ebp]
	psadbw	xmm0, XMMWORD PTR _h_masked$9[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$5[ebp], xmm0

; 328  : 
; 329  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$8[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 330  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$7[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 331  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 332  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 333  :     }

	jmp	$LN11@reg_sad_ar
$LN12@reg_sad_ar:

; 334  :     if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	$LN18@reg_sad_ar

; 335  :       for (; y < height; y++) {

	jmp	SHORT $LN16@reg_sad_ar
$LN14@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN16@reg_sad_ar:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN18@reg_sad_ar

; 336  :         __m128i a = _mm_loadu_si128((const __m128i *)(data1 + y * stride1 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 337  :         __m128i b = _mm_loadu_si128((const __m128i *)(data2 + y * stride2 + x));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	add	eax, DWORD PTR _x$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 338  : 
; 339  :         __m128i b_masked  = _mm_blendv_epi8(a, b, rdmask);

	movaps	xmm1, XMMWORD PTR _a$4[ebp]
	movaps	xmm0, XMMWORD PTR _rdmask$[ebp]
	pblendvb xmm1, XMMWORD PTR _b$3[ebp], xmm0
	movaps	XMMWORD PTR _b_masked$2[ebp], xmm1

; 340  :         __m128i curr_sads = _mm_sad_epu8   (a, b_masked);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _b_masked$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 341  : 
; 342  :         sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 343  :       }

	jmp	$LN14@reg_sad_ar
$LN18@reg_sad_ar:

; 344  :     }
; 345  :   }
; 346  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 347  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 348  : 
; 349  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 350  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_arbitrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w24
_TEXT	SEGMENT
_sad$ = -672						; size = 16
_sse_inc_2$ = -640					; size = 16
_curr_sads_2$1 = -608					; size = 16
_curr_sads_1$2 = -576					; size = 16
_d$3 = -544						; size = 16
_c$4 = -512						; size = 16
_b$5 = -480						; size = 16
_a$6 = -448						; size = 16
_curr_sads_3$7 = -416					; size = 16
_curr_sads_2$8 = -384					; size = 16
_curr_sads_1$9 = -352					; size = 16
_f$10 = -320						; size = 16
_e$11 = -288						; size = 16
_f_d$12 = -256						; size = 16
_e_d$13 = -224						; size = 16
_d$14 = -192						; size = 16
_c$15 = -160						; size = 16
_b$16 = -128						; size = 16
_a$17 = -96						; size = 16
_height_parity$ = -68					; size = 4
_height_doublelines$ = -56				; size = 4
_y$ = -44						; size = 4
_sse_inc$ = -32						; size = 16
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w24 PROC					; COMDAT

; 207  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1064				; 00000428H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1064]
	mov	ecx, 266				; 0000010aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 208  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 209  :   int32_t y;
; 210  : 
; 211  :   const int32_t height_doublelines = height & ~1;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _height_doublelines$[ebp], eax

; 212  :   const int32_t height_parity      = height &  1;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 1
	mov	DWORD PTR _height_parity$[ebp], eax

; 213  : 
; 214  :   for (y = 0; y < height_doublelines; y += 2) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_w2
$LN2@reg_sad_w2:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_w2:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_doublelines$[ebp]
	jge	$LN3@reg_sad_w2

; 215  :     __m128i a = _mm_loadu_si128((const __m128i *)(data1 + (y + 0) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$17[ebp], xmm0

; 216  :     __m128i b = _mm_loadu_si128((const __m128i *)(data2 + (y + 0) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$16[ebp], xmm0

; 217  :     __m128i c = _mm_loadu_si128((const __m128i *)(data1 + (y + 1) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$15[ebp], xmm0

; 218  :     __m128i d = _mm_loadu_si128((const __m128i *)(data2 + (y + 1) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _d$14[ebp], xmm0

; 219  : 
; 220  :     __m128d e_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _e_d$13[ebp], xmm0

; 221  :     __m128d f_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _f_d$12[ebp], xmm0

; 222  : 
; 223  :     e_d = _mm_loadl_pd(e_d, (const double *)(data1 + (y + 0) * stride1 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _e_d$13[ebp]
	movlpd	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _e_d$13[ebp], xmm0

; 224  :     f_d = _mm_loadl_pd(f_d, (const double *)(data2 + (y + 0) * stride2 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _f_d$12[ebp]
	movlpd	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _f_d$12[ebp], xmm0

; 225  :     e_d = _mm_loadh_pd(e_d, (const double *)(data1 + (y + 1) * stride1 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _e_d$13[ebp]
	movhpd	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _e_d$13[ebp], xmm0

; 226  :     f_d = _mm_loadh_pd(f_d, (const double *)(data2 + (y + 1) * stride2 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _f_d$12[ebp]
	movhpd	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _f_d$12[ebp], xmm0

; 227  : 
; 228  :     __m128i e = _mm_castpd_si128(e_d);

	movaps	xmm0, XMMWORD PTR _e_d$13[ebp]
	movaps	XMMWORD PTR _e$11[ebp], xmm0

; 229  :     __m128i f = _mm_castpd_si128(f_d);

	movaps	xmm0, XMMWORD PTR _f_d$12[ebp]
	movaps	XMMWORD PTR _f$10[ebp], xmm0

; 230  : 
; 231  :     __m128i curr_sads_1 = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$17[ebp]
	psadbw	xmm0, XMMWORD PTR _b$16[ebp]
	movaps	XMMWORD PTR _curr_sads_1$9[ebp], xmm0

; 232  :     __m128i curr_sads_2 = _mm_sad_epu8(c, d);

	movaps	xmm0, XMMWORD PTR _c$15[ebp]
	psadbw	xmm0, XMMWORD PTR _d$14[ebp]
	movaps	XMMWORD PTR _curr_sads_2$8[ebp], xmm0

; 233  :     __m128i curr_sads_3 = _mm_sad_epu8(e, f);

	movaps	xmm0, XMMWORD PTR _e$11[ebp]
	psadbw	xmm0, XMMWORD PTR _f$10[ebp]
	movaps	XMMWORD PTR _curr_sads_3$7[ebp], xmm0

; 234  : 
; 235  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_1);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_1$9[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 236  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_2$8[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 237  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_3);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_3$7[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 238  :   }

	jmp	$LN2@reg_sad_w2
$LN3@reg_sad_w2:

; 239  :   if (height_parity) {

	cmp	DWORD PTR _height_parity$[ebp], 0
	je	$LN5@reg_sad_w2

; 240  :     __m128i a = _mm_loadu_si128   ((const __m128i *)(data1 + y * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$6[ebp], xmm0

; 241  :     __m128i b = _mm_loadu_si128   ((const __m128i *)(data2 + y * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$5[ebp], xmm0

; 242  :     __m128i c = _mm_loadl_epi64   ((const __m128i *)(data1 + y * stride1 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _c$4[ebp], xmm0

; 243  :     __m128i d = _mm_loadl_epi64   ((const __m128i *)(data2 + y * stride2 + 16));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax+16]
	movaps	XMMWORD PTR _d$3[ebp], xmm0

; 244  : 
; 245  :     __m128i curr_sads_1 = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$6[ebp]
	psadbw	xmm0, XMMWORD PTR _b$5[ebp]
	movaps	XMMWORD PTR _curr_sads_1$2[ebp], xmm0

; 246  :     __m128i curr_sads_2 = _mm_sad_epu8(c, d);

	movaps	xmm0, XMMWORD PTR _c$4[ebp]
	psadbw	xmm0, XMMWORD PTR _d$3[ebp]
	movaps	XMMWORD PTR _curr_sads_2$1[ebp], xmm0

; 247  : 
; 248  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_1);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_1$2[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 249  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_2$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0
$LN5@reg_sad_w2:

; 250  :   }
; 251  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 252  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 253  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 254  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_w24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w16
_TEXT	SEGMENT
_sad$ = -608						; size = 16
_sse_inc_2$ = -576					; size = 16
_curr_sads$1 = -544					; size = 16
_b$2 = -512						; size = 16
_a$3 = -480						; size = 16
_curr_sads_gh$4 = -448					; size = 16
_curr_sads_ef$5 = -416					; size = 16
_curr_sads_cd$6 = -384					; size = 16
_curr_sads_ab$7 = -352					; size = 16
_h$8 = -320						; size = 16
_g$9 = -288						; size = 16
_f$10 = -256						; size = 16
_e$11 = -224						; size = 16
_d$12 = -192						; size = 16
_c$13 = -160						; size = 16
_b$14 = -128						; size = 16
_a$15 = -96						; size = 16
_height_residual_lines$ = -68				; size = 4
_height_fourline_groups$ = -56				; size = 4
_y$ = -44						; size = 4
_sse_inc$ = -32						; size = 16
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w16 PROC					; COMDAT

; 162  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1000				; 000003e8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1000]
	mov	ecx, 250				; 000000faH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 163  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 164  :   int32_t y;
; 165  : 
; 166  :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 167  :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 168  : 
; 169  :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_w1
$LN2@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@reg_sad_w1

; 170  :     __m128i a = _mm_loadu_si128((const __m128i *)(data1 + (y + 0) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$15[ebp], xmm0

; 171  :     __m128i b = _mm_loadu_si128((const __m128i *)(data2 + (y + 0) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$14[ebp], xmm0

; 172  :     __m128i c = _mm_loadu_si128((const __m128i *)(data1 + (y + 1) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _c$13[ebp], xmm0

; 173  :     __m128i d = _mm_loadu_si128((const __m128i *)(data2 + (y + 1) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _d$12[ebp], xmm0

; 174  :     __m128i e = _mm_loadu_si128((const __m128i *)(data1 + (y + 2) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _e$11[ebp], xmm0

; 175  :     __m128i f = _mm_loadu_si128((const __m128i *)(data2 + (y + 2) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _f$10[ebp], xmm0

; 176  :     __m128i g = _mm_loadu_si128((const __m128i *)(data1 + (y + 3) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _g$9[ebp], xmm0

; 177  :     __m128i h = _mm_loadu_si128((const __m128i *)(data2 + (y + 3) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _h$8[ebp], xmm0

; 178  : 
; 179  :     __m128i curr_sads_ab = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$15[ebp]
	psadbw	xmm0, XMMWORD PTR _b$14[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$7[ebp], xmm0

; 180  :     __m128i curr_sads_cd = _mm_sad_epu8(c, d);

	movaps	xmm0, XMMWORD PTR _c$13[ebp]
	psadbw	xmm0, XMMWORD PTR _d$12[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$6[ebp], xmm0

; 181  :     __m128i curr_sads_ef = _mm_sad_epu8(e, f);

	movaps	xmm0, XMMWORD PTR _e$11[ebp]
	psadbw	xmm0, XMMWORD PTR _f$10[ebp]
	movaps	XMMWORD PTR _curr_sads_ef$5[ebp], xmm0

; 182  :     __m128i curr_sads_gh = _mm_sad_epu8(g, h);

	movaps	xmm0, XMMWORD PTR _g$9[ebp]
	psadbw	xmm0, XMMWORD PTR _h$8[ebp]
	movaps	XMMWORD PTR _curr_sads_gh$4[ebp], xmm0

; 183  : 
; 184  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$7[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 185  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$6[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 186  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ef);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ef$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 187  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_gh);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_gh$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 188  :   }

	jmp	$LN2@reg_sad_w1
$LN3@reg_sad_w1:

; 189  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@reg_sad_w1

; 190  :     for (; y < height; y++) {

	jmp	SHORT $LN7@reg_sad_w1
$LN5@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@reg_sad_w1

; 191  :       __m128i a = _mm_loadu_si128((const __m128i *)(data1 + (y + 0) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$3[ebp], xmm0

; 192  :       __m128i b = _mm_loadu_si128((const __m128i *)(data2 + (y + 0) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$2[ebp], xmm0

; 193  : 
; 194  :       __m128i curr_sads = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$3[ebp]
	psadbw	xmm0, XMMWORD PTR _b$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 195  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 196  :     }

	jmp	SHORT $LN5@reg_sad_w1
$LN8@reg_sad_w1:

; 197  :   }
; 198  : 
; 199  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 200  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 201  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 202  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_w16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w12
_TEXT	SEGMENT
_sad$ = -240						; size = 16
_sse_inc_2$ = -208					; size = 16
_curr_sads$1 = -176					; size = 16
_b_masked$2 = -144					; size = 16
_b$3 = -112						; size = 16
_a$4 = -80						; size = 16
_y$ = -44						; size = 4
_sse_inc$ = -32						; size = 16
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w12 PROC					; COMDAT

; 143  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 440				; 000001b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 144  :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 145  :   int32_t y;
; 146  :   for (y = 0; y < height; y++) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_w1
$LN2@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_w1:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN3@reg_sad_w1

; 147  :     __m128i a = _mm_loadu_si128((const __m128i *)(data1 + y * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _a$4[ebp], xmm0

; 148  :     __m128i b = _mm_loadu_si128((const __m128i *)(data2 + y * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR _b$3[ebp], xmm0

; 149  : 
; 150  :     __m128i b_masked  = _mm_blend_epi16(a, b, 0x3f);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	pblendw	xmm0, XMMWORD PTR _b$3[ebp], 63		; 0000003fH
	movaps	XMMWORD PTR _b_masked$2[ebp], xmm0

; 151  :     __m128i curr_sads = _mm_sad_epu8   (a, b_masked);

	movaps	xmm0, XMMWORD PTR _a$4[ebp]
	psadbw	xmm0, XMMWORD PTR _b_masked$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 152  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 153  :   }

	jmp	SHORT $LN2@reg_sad_w1
$LN3@reg_sad_w1:

; 154  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 155  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 156  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 157  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_w12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w8
_TEXT	SEGMENT
_sad$ = -544						; size = 16
_sse_inc_2$ = -512					; size = 16
_curr_sads_ab$1 = -480					; size = 16
_b$2 = -448						; size = 16
_a$3 = -416						; size = 16
_curr_sads_cd$4 = -384					; size = 16
_curr_sads_ab$5 = -352					; size = 16
_d$6 = -320						; size = 16
_c$7 = -288						; size = 16
_b$8 = -256						; size = 16
_a$9 = -224						; size = 16
_d_d$10 = -192						; size = 16
_c_d$11 = -160						; size = 16
_b_d$12 = -128						; size = 16
_a_d$13 = -96						; size = 16
_height_residual_lines$ = -68				; size = 4
_height_fourline_groups$ = -56				; size = 4
_y$ = -44						; size = 4
_sse_inc$ = -32						; size = 16
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w8 PROC					; COMDAT

; 92   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 936				; 000003a8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-936]
	mov	ecx, 234				; 000000eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 93   :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 94   :   int32_t y;
; 95   : 
; 96   :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 97   :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 98   : 
; 99   :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_w8
$LN2@reg_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@reg_sad_w8

; 100  :     __m128d a_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _a_d$13[ebp], xmm0

; 101  :     __m128d b_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _b_d$12[ebp], xmm0

; 102  :     __m128d c_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _c_d$11[ebp], xmm0

; 103  :     __m128d d_d = _mm_setzero_pd();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _d_d$10[ebp], xmm0

; 104  : 
; 105  :     a_d = _mm_loadl_pd(a_d, (const double *)(data1 + (y + 0) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$13[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$13[ebp], xmm0

; 106  :     b_d = _mm_loadl_pd(b_d, (const double *)(data2 + (y + 0) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _b_d$12[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _b_d$12[ebp], xmm0

; 107  :     a_d = _mm_loadh_pd(a_d, (const double *)(data1 + (y + 1) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _a_d$13[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _a_d$13[ebp], xmm0

; 108  :     b_d = _mm_loadh_pd(b_d, (const double *)(data2 + (y + 1) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _b_d$12[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _b_d$12[ebp], xmm0

; 109  : 
; 110  :     c_d = _mm_loadl_pd(c_d, (const double *)(data1 + (y + 2) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$11[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$11[ebp], xmm0

; 111  :     d_d = _mm_loadl_pd(d_d, (const double *)(data2 + (y + 2) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _d_d$10[ebp]
	movlpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _d_d$10[ebp], xmm0

; 112  :     c_d = _mm_loadh_pd(c_d, (const double *)(data1 + (y + 3) * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride1$[ebx]
	add	eax, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _c_d$11[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _c_d$11[ebp], xmm0

; 113  :     d_d = _mm_loadh_pd(d_d, (const double *)(data2 + (y + 3) * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride2$[ebx]
	add	eax, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _d_d$10[ebp]
	movhpd	xmm0, QWORD PTR [eax]
	movaps	XMMWORD PTR _d_d$10[ebp], xmm0

; 114  : 
; 115  :     __m128i a = _mm_castpd_si128(a_d);

	movaps	xmm0, XMMWORD PTR _a_d$13[ebp]
	movaps	XMMWORD PTR _a$9[ebp], xmm0

; 116  :     __m128i b = _mm_castpd_si128(b_d);

	movaps	xmm0, XMMWORD PTR _b_d$12[ebp]
	movaps	XMMWORD PTR _b$8[ebp], xmm0

; 117  :     __m128i c = _mm_castpd_si128(c_d);

	movaps	xmm0, XMMWORD PTR _c_d$11[ebp]
	movaps	XMMWORD PTR _c$7[ebp], xmm0

; 118  :     __m128i d = _mm_castpd_si128(d_d);

	movaps	xmm0, XMMWORD PTR _d_d$10[ebp]
	movaps	XMMWORD PTR _d$6[ebp], xmm0

; 119  : 
; 120  :     __m128i curr_sads_ab = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$9[ebp]
	psadbw	xmm0, XMMWORD PTR _b$8[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$5[ebp], xmm0

; 121  :     __m128i curr_sads_cd = _mm_sad_epu8(c, d);

	movaps	xmm0, XMMWORD PTR _c$7[ebp]
	psadbw	xmm0, XMMWORD PTR _d$6[ebp]
	movaps	XMMWORD PTR _curr_sads_cd$4[ebp], xmm0

; 122  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$5[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 123  :     sse_inc = _mm_add_epi64(sse_inc, curr_sads_cd);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_cd$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 124  :   }

	jmp	$LN2@reg_sad_w8
$LN3@reg_sad_w8:

; 125  :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@reg_sad_w8

; 126  :     for (; y < height; y++) {

	jmp	SHORT $LN7@reg_sad_w8
$LN5@reg_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@reg_sad_w8:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@reg_sad_w8

; 127  :       __m128i a = _mm_loadl_epi64((__m128i *)(data1 + y * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax]
	movaps	XMMWORD PTR _a$3[ebp], xmm0

; 128  :       __m128i b = _mm_loadl_epi64((__m128i *)(data2 + y * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movq	xmm0, QWORD PTR [ecx+eax]
	movaps	XMMWORD PTR _b$2[ebp], xmm0

; 129  : 
; 130  :       __m128i curr_sads_ab = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$3[ebp]
	psadbw	xmm0, XMMWORD PTR _b$2[ebp]
	movaps	XMMWORD PTR _curr_sads_ab$1[ebp], xmm0

; 131  :       sse_inc = _mm_add_epi64(sse_inc, curr_sads_ab);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads_ab$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 132  :     }

	jmp	SHORT $LN5@reg_sad_w8
$LN8@reg_sad_w8:

; 133  :   }
; 134  :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 135  :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 136  : 
; 137  :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 138  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_w8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w4
_TEXT	SEGMENT
_sad$ = -320						; size = 16
_sse_inc_2$ = -288					; size = 16
_curr_sads$1 = -256					; size = 16
_b$2 = -224						; size = 16
_a$3 = -192						; size = 16
_curr_sads$4 = -160					; size = 16
_b$5 = -128						; size = 16
_a$6 = -96						; size = 16
_height_residual_lines$ = -68				; size = 4
_height_fourline_groups$ = -56				; size = 4
_y$ = -44						; size = 4
_sse_inc$ = -32						; size = 16
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w4 PROC					; COMDAT

; 53   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 54   :   __m128i sse_inc = _mm_setzero_si128();

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 55   :   int32_t y;
; 56   : 
; 57   :   const int32_t height_fourline_groups = height & ~3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _height_fourline_groups$[ebp], eax

; 58   :   const int32_t height_residual_lines  = height &  3;

	mov	eax, DWORD PTR _height$[ebx]
	and	eax, 3
	mov	DWORD PTR _height_residual_lines$[ebp], eax

; 59   : 
; 60   :   for (y = 0; y < height_fourline_groups; y += 4) {

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@reg_sad_w4
$LN2@reg_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 4
	mov	DWORD PTR _y$[ebp], eax
$LN4@reg_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height_fourline_groups$[ebp]
	jge	$LN3@reg_sad_w4

; 61   :     __m128i a = _mm_cvtsi32_si128(*(uint32_t *)(data1 + y * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$6[ebp], xmm0

; 62   :     __m128i b = _mm_cvtsi32_si128(*(uint32_t *)(data2 + y * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _b$5[ebp], xmm0

; 63   : 
; 64   :     a = _mm_insert_epi32(a, *(const uint32_t *)(data1 + (y + 1) * stride1), 1);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _a$6[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 1
	movaps	XMMWORD PTR _a$6[ebp], xmm0

; 65   :     b = _mm_insert_epi32(b, *(const uint32_t *)(data2 + (y + 1) * stride2), 1);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _b$5[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 1
	movaps	XMMWORD PTR _b$5[ebp], xmm0

; 66   :     a = _mm_insert_epi32(a, *(const uint32_t *)(data1 + (y + 2) * stride1), 2);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _a$6[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 2
	movaps	XMMWORD PTR _a$6[ebp], xmm0

; 67   :     b = _mm_insert_epi32(b, *(const uint32_t *)(data2 + (y + 2) * stride2), 2);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 2
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _b$5[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 2
	movaps	XMMWORD PTR _b$5[ebp], xmm0

; 68   :     a = _mm_insert_epi32(a, *(const uint32_t *)(data1 + (y + 3) * stride1), 3);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	movaps	xmm0, XMMWORD PTR _a$6[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 3
	movaps	XMMWORD PTR _a$6[ebp], xmm0

; 69   :     b = _mm_insert_epi32(b, *(const uint32_t *)(data2 + (y + 3) * stride2), 3);

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 3
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	movaps	xmm0, XMMWORD PTR _b$5[ebp]
	pinsrd	xmm0, DWORD PTR [ecx+eax], 3
	movaps	XMMWORD PTR _b$5[ebp], xmm0

; 70   : 
; 71   :     __m128i curr_sads = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$6[ebp]
	psadbw	xmm0, XMMWORD PTR _b$5[ebp]
	movaps	XMMWORD PTR _curr_sads$4[ebp], xmm0

; 72   :     sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$4[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 73   :   }

	jmp	$LN2@reg_sad_w4
$LN3@reg_sad_w4:

; 74   :   if (height_residual_lines) {

	cmp	DWORD PTR _height_residual_lines$[ebp], 0
	je	SHORT $LN8@reg_sad_w4

; 75   :     for (; y < height; y++) {

	jmp	SHORT $LN7@reg_sad_w4
$LN5@reg_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN7@reg_sad_w4:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebx]
	jge	SHORT $LN8@reg_sad_w4

; 76   :       __m128i a = _mm_cvtsi32_si128(*(const uint32_t *)(data1 + y * stride1));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride1$[ebx]
	mov	ecx, DWORD PTR _data1$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _a$3[ebp], xmm0

; 77   :       __m128i b = _mm_cvtsi32_si128(*(const uint32_t *)(data2 + y * stride2));

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _stride2$[ebx]
	mov	ecx, DWORD PTR _data2$[ebx]
	mov	edx, DWORD PTR [ecx+eax]
	movd	xmm0, edx
	movaps	XMMWORD PTR _b$2[ebp], xmm0

; 78   : 
; 79   :       __m128i curr_sads = _mm_sad_epu8(a, b);

	movaps	xmm0, XMMWORD PTR _a$3[ebp]
	psadbw	xmm0, XMMWORD PTR _b$2[ebp]
	movaps	XMMWORD PTR _curr_sads$1[ebp], xmm0

; 80   :       sse_inc = _mm_add_epi64(sse_inc, curr_sads);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _curr_sads$1[ebp]
	movaps	XMMWORD PTR _sse_inc$[ebp], xmm0

; 81   :     }

	jmp	SHORT $LN5@reg_sad_w4
$LN8@reg_sad_w4:

; 82   :   }
; 83   :   __m128i sse_inc_2 = _mm_shuffle_epi32(sse_inc, _MM_SHUFFLE(1, 0, 3, 2));

	pshufd	xmm0, XMMWORD PTR _sse_inc$[ebp], 78	; 0000004eH
	movaps	XMMWORD PTR _sse_inc_2$[ebp], xmm0

; 84   :   __m128i sad       = _mm_add_epi64    (sse_inc, sse_inc_2);

	movaps	xmm0, XMMWORD PTR _sse_inc$[ebp]
	paddq	xmm0, XMMWORD PTR _sse_inc_2$[ebp]
	movaps	XMMWORD PTR _sad$[ebp], xmm0

; 85   : 
; 86   :   return _mm_cvtsi128_si32(sad);

	movaps	xmm0, XMMWORD PTR _sad$[ebp]
	movd	eax, xmm0

; 87   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
_reg_sad_w4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\reg_sad_pow2_widths-sse41.h
;	COMDAT _reg_sad_w0
_TEXT	SEGMENT
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_height$ = 16						; size = 4
_stride1$ = 20						; size = 4
_stride2$ = 24						; size = 4
_reg_sad_w0 PROC					; COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9CB4F737_reg_sad_pow2_widths-sse41@h
	call	@__CheckForDebuggerJustMyCode@4

; 47   :   return 0;

	xor	eax, eax

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reg_sad_w0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _kvz_strategy_register_picture_sse41
_TEXT	SEGMENT
tv140 = -208						; size = 4
tv129 = -208						; size = 4
tv86 = -208						; size = 4
tv75 = -208						; size = 4
_success$ = -5						; size = 1
_opaque$ = 8						; size = 4
_bitdepth$ = 12						; size = 1
_kvz_strategy_register_picture_sse41 PROC		; COMDAT

; 235  : int kvz_strategy_register_picture_sse41(void* opaque, uint8_t bitdepth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 236  :   bool success = true;

	mov	BYTE PTR _success$[ebp], 1

; 237  : #if COMPILE_INTEL_SSE41
; 238  : #if KVZ_BIT_DEPTH == 8
; 239  :   if (bitdepth == 8){

	movzx	eax, BYTE PTR _bitdepth$[ebp]
	cmp	eax, 8
	jne	$LN2@kvz_strate

; 240  :     success &= kvz_strategyselector_register(opaque, "reg_sad", "sse41", 20, &kvz_reg_sad_sse41);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _kvz_reg_sad_sse41
	push	20					; 00000014H
	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	push	OFFSET ??_C@_07DDJKLCAH@reg_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN4@kvz_strate
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN5@kvz_strate
$LN4@kvz_strate:
	mov	DWORD PTR tv75[ebp], 1
$LN5@kvz_strate:
	mov	cl, BYTE PTR tv75[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 241  :     success &= kvz_strategyselector_register(opaque, "get_optimized_sad", "sse41", 20, &get_optimized_sad_sse41);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _get_optimized_sad_sse41
	push	20					; 00000014H
	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	push	OFFSET ??_C@_0BC@IMILIHON@get_optimized_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN6@kvz_strate
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN7@kvz_strate
$LN6@kvz_strate:
	mov	DWORD PTR tv86[ebp], 1
$LN7@kvz_strate:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 242  :     success &= kvz_strategyselector_register(opaque, "ver_sad", "sse41", 20, &ver_sad_sse41);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _ver_sad_sse41
	push	20					; 00000014H
	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	push	OFFSET ??_C@_07OEMLCPNF@ver_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN8@kvz_strate
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN9@kvz_strate
$LN8@kvz_strate:
	mov	DWORD PTR tv129[ebp], 1
$LN9@kvz_strate:
	mov	cl, BYTE PTR tv129[ebp]
	mov	BYTE PTR _success$[ebp], cl

; 243  :     success &= kvz_strategyselector_register(opaque, "hor_sad", "sse41", 20, &hor_sad_sse41);

	movzx	esi, BYTE PTR _success$[ebp]
	push	OFFSET _hor_sad_sse41
	push	20					; 00000014H
	push	OFFSET ??_C@_05JEDOPGOD@sse41@
	push	OFFSET ??_C@_07CJIKFDIC@hor_sad@
	mov	eax, DWORD PTR _opaque$[ebp]
	push	eax
	call	_kvz_strategyselector_register
	add	esp, 20					; 00000014H
	and	esi, eax
	jne	SHORT $LN10@kvz_strate
	mov	DWORD PTR tv140[ebp], 0
	jmp	SHORT $LN11@kvz_strate
$LN10@kvz_strate:
	mov	DWORD PTR tv140[ebp], 1
$LN11@kvz_strate:
	mov	cl, BYTE PTR tv140[ebp]
	mov	BYTE PTR _success$[ebp], cl
$LN2@kvz_strate:

; 244  :   }
; 245  : #endif // KVZ_BIT_DEPTH == 8
; 246  : #endif
; 247  :   return success;

	movzx	eax, BYTE PTR _success$[ebp]

; 248  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_strategy_register_picture_sse41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\strategies\sse41\picture-sse41.c
;	COMDAT _kvz_reg_sad_sse41
_TEXT	SEGMENT
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_stride1$ = 24						; size = 4
_stride2$ = 28						; size = 4
_kvz_reg_sad_sse41 PROC					; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EE5B5AAC_picture-sse41@c
	call	@__CheckForDebuggerJustMyCode@4

; 50   :   if (width == 0)

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN2@kvz_reg_sa

; 51   :     return 0;

	xor	eax, eax
	jmp	$LN1@kvz_reg_sa
$LN2@kvz_reg_sa:

; 52   :   if (width == 4)

	cmp	DWORD PTR _width$[ebp], 4
	jne	SHORT $LN3@kvz_reg_sa

; 53   :     return reg_sad_w4(data1, data2, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	_reg_sad_w4
	add	esp, 20					; 00000014H
	jmp	$LN1@kvz_reg_sa
$LN3@kvz_reg_sa:

; 54   :   if (width == 8)

	cmp	DWORD PTR _width$[ebp], 8
	jne	SHORT $LN4@kvz_reg_sa

; 55   :     return reg_sad_w8(data1, data2, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	_reg_sad_w8
	add	esp, 20					; 00000014H
	jmp	$LN1@kvz_reg_sa
$LN4@kvz_reg_sa:

; 56   :   if (width == 12)

	cmp	DWORD PTR _width$[ebp], 12		; 0000000cH
	jne	SHORT $LN5@kvz_reg_sa

; 57   :     return reg_sad_w12(data1, data2, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	_reg_sad_w12
	add	esp, 20					; 00000014H
	jmp	SHORT $LN1@kvz_reg_sa
$LN5@kvz_reg_sa:

; 58   :   if (width == 16)

	cmp	DWORD PTR _width$[ebp], 16		; 00000010H
	jne	SHORT $LN6@kvz_reg_sa

; 59   :     return reg_sad_w16(data1, data2, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	_reg_sad_w16
	add	esp, 20					; 00000014H
	jmp	SHORT $LN1@kvz_reg_sa
$LN6@kvz_reg_sa:

; 60   :   if (width == 24)

	cmp	DWORD PTR _width$[ebp], 24		; 00000018H
	jne	SHORT $LN7@kvz_reg_sa

; 61   :     return reg_sad_w24(data1, data2, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _data2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data1$[ebp]
	push	ecx
	call	_reg_sad_w24
	add	esp, 20					; 00000014H
	jmp	SHORT $LN1@kvz_reg_sa
	jmp	SHORT $LN1@kvz_reg_sa
$LN7@kvz_reg_sa:

; 62   :   else
; 63   :     return reg_sad_arbitrary(data1, data2, width, height, stride1, stride2);

	mov	eax, DWORD PTR _stride2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data1$[ebp]
	push	edx
	call	_reg_sad_arbitrary
	add	esp, 24					; 00000018H
$LN1@kvz_reg_sa:

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_reg_sad_sse41 ENDP
_TEXT	ENDS
END
