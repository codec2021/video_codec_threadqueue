; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@FIMIKDEG@array_checksum@		; `string'
PUBLIC	??_C@_09INHMEIKP@array_md5@			; `string'
PUBLIC	??_C@_07DDJKLCAH@reg_sad@			; `string'
PUBLIC	??_C@_07CCGEEBAL@sad_4x4@			; `string'
PUBLIC	??_C@_07MEAHLBLP@sad_8x8@			; `string'
PUBLIC	??_C@_09CIFGAEGF@sad_16x16@			; `string'
PUBLIC	??_C@_09PHPGBCME@sad_32x32@			; `string'
PUBLIC	??_C@_09HIOKBDLK@sad_64x64@			; `string'
PUBLIC	??_C@_08GDBJPAOD@satd_4x4@			; `string'
PUBLIC	??_C@_08IFHKAAFH@satd_8x8@			; `string'
PUBLIC	??_C@_0L@CJHLPOG@satd_16x16@			; `string'
PUBLIC	??_C@_0L@NNDHKJEH@satd_32x32@			; `string'
PUBLIC	??_C@_0L@FCCLKIDJ@satd_64x64@			; `string'
PUBLIC	??_C@_0O@FHJAMJMP@satd_any_size@		; `string'
PUBLIC	??_C@_0N@PBMCJFCI@sad_4x4_dual@			; `string'
PUBLIC	??_C@_0N@NAFGAMEI@sad_8x8_dual@			; `string'
PUBLIC	??_C@_0P@KGAKCNHP@sad_16x16_dual@		; `string'
PUBLIC	??_C@_0P@EBOHBHKK@sad_32x32_dual@		; `string'
PUBLIC	??_C@_0P@BGJOPAPB@sad_64x64_dual@		; `string'
PUBLIC	??_C@_0O@PJODLFIO@satd_4x4_dual@		; `string'
PUBLIC	??_C@_0O@NIHHCMOO@satd_8x8_dual@		; `string'
PUBLIC	??_C@_0BA@GFDJBOPJ@satd_16x16_dual@		; `string'
PUBLIC	??_C@_0BA@ICNECECM@satd_32x32_dual@		; `string'
PUBLIC	??_C@_0BA@NFKNMDHH@satd_64x64_dual@		; `string'
PUBLIC	??_C@_0BD@EFOGIBKC@satd_any_size_quad@		; `string'
PUBLIC	??_C@_0BA@BPDFDAFM@pixels_calc_ssd@		; `string'
PUBLIC	??_C@_0P@FIKELBGI@bipred_average@		; `string'
PUBLIC	??_C@_0BC@IMILIHON@get_optimized_sad@		; `string'
PUBLIC	??_C@_07OEMLCPNF@ver_sad@			; `string'
PUBLIC	??_C@_07CJIKFDIC@hor_sad@			; `string'
PUBLIC	??_C@_09GDPKBOJB@pixel_var@			; `string'
PUBLIC	??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@	; `string'
PUBLIC	??_C@_07MAFDGKIL@dct_4x4@			; `string'
PUBLIC	??_C@_07CGDAJKDP@dct_8x8@			; `string'
PUBLIC	??_C@_09LPGJIHFJ@dct_16x16@			; `string'
PUBLIC	??_C@_09GAMJJBPI@dct_32x32@			; `string'
PUBLIC	??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@	; `string'
PUBLIC	??_C@_08LDLIJGLD@idct_4x4@			; `string'
PUBLIC	??_C@_08FFNLGGAH@idct_8x8@			; `string'
PUBLIC	??_C@_0L@BMPNPGHO@idct_16x16@			; `string'
PUBLIC	??_C@_0L@MDFNOANP@idct_32x32@			; `string'
PUBLIC	??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ ; `string'
PUBLIC	??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ ; `string'
PUBLIC	??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@	; `string'
PUBLIC	??_C@_0BF@HOLGGLNK@sample_octpel_chroma@	; `string'
PUBLIC	??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@	; `string'
PUBLIC	??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@	; `string'
PUBLIC	??_C@_0BD@MPANGNDO@get_extended_block@		; `string'
PUBLIC	??_C@_05DFPBCFDJ@quant@				; `string'
PUBLIC	??_C@_0BC@MPMPMGJB@quantize_residual@		; `string'
PUBLIC	??_C@_07GMDOJGPA@dequant@			; `string'
PUBLIC	??_C@_0O@ECIHPEON@coeff_abs_sum@		; `string'
PUBLIC	??_C@_0BA@HMNKAKOO@fast_coeff_cost@		; `string'
PUBLIC	??_C@_0N@NMFCEONC@angular_pred@			; `string'
PUBLIC	??_C@_0BC@KPOCLILL@intra_pred_planar@		; `string'
PUBLIC	??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@	; `string'
PUBLIC	??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@	; `string'
PUBLIC	??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@		; `string'
PUBLIC	??_C@_0BG@IJPOOFFG@sao_reconstruct_color@	; `string'
PUBLIC	??_C@_0BF@HDNLAKN@sao_band_ddistortion@		; `string'
PUBLIC	??_C@_0BB@GDIDDFDB@encode_coeff_nxn@		; `string'
EXTRN	_kvz_array_checksum:DWORD
EXTRN	_kvz_array_md5:DWORD
EXTRN	_kvz_reg_sad:DWORD
EXTRN	_kvz_sad_4x4:DWORD
EXTRN	_kvz_sad_8x8:DWORD
EXTRN	_kvz_sad_16x16:DWORD
EXTRN	_kvz_sad_32x32:DWORD
EXTRN	_kvz_sad_64x64:DWORD
EXTRN	_kvz_satd_4x4:DWORD
EXTRN	_kvz_satd_8x8:DWORD
EXTRN	_kvz_satd_16x16:DWORD
EXTRN	_kvz_satd_32x32:DWORD
EXTRN	_kvz_satd_64x64:DWORD
EXTRN	_kvz_satd_any_size:DWORD
EXTRN	_kvz_sad_4x4_dual:DWORD
EXTRN	_kvz_sad_8x8_dual:DWORD
EXTRN	_kvz_sad_16x16_dual:DWORD
EXTRN	_kvz_sad_32x32_dual:DWORD
EXTRN	_kvz_sad_64x64_dual:DWORD
EXTRN	_kvz_satd_4x4_dual:DWORD
EXTRN	_kvz_satd_8x8_dual:DWORD
EXTRN	_kvz_satd_16x16_dual:DWORD
EXTRN	_kvz_satd_32x32_dual:DWORD
EXTRN	_kvz_satd_64x64_dual:DWORD
EXTRN	_kvz_satd_any_size_quad:DWORD
EXTRN	_kvz_pixels_calc_ssd:DWORD
EXTRN	_kvz_bipred_average:DWORD
EXTRN	_kvz_get_optimized_sad:DWORD
EXTRN	_kvz_ver_sad:DWORD
EXTRN	_kvz_hor_sad:DWORD
EXTRN	_kvz_pixel_var:DWORD
EXTRN	_kvz_fast_forward_dst_4x4:DWORD
EXTRN	_kvz_dct_4x4:DWORD
EXTRN	_kvz_dct_8x8:DWORD
EXTRN	_kvz_dct_16x16:DWORD
EXTRN	_kvz_dct_32x32:DWORD
EXTRN	_kvz_fast_inverse_dst_4x4:DWORD
EXTRN	_kvz_idct_4x4:DWORD
EXTRN	_kvz_idct_8x8:DWORD
EXTRN	_kvz_idct_16x16:DWORD
EXTRN	_kvz_idct_32x32:DWORD
EXTRN	_kvz_filter_hpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_hpel_blocks_diag_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_hor_ver_luma:DWORD
EXTRN	_kvz_filter_qpel_blocks_diag_luma:DWORD
EXTRN	_kvz_get_extended_block:DWORD
EXTRN	_kvz_sample_quarterpel_luma:DWORD
EXTRN	_kvz_sample_octpel_chroma:DWORD
EXTRN	_kvz_sample_quarterpel_luma_hi:DWORD
EXTRN	_kvz_sample_octpel_chroma_hi:DWORD
EXTRN	_kvz_quant:DWORD
EXTRN	_kvz_quantize_residual:DWORD
EXTRN	_kvz_dequant:DWORD
EXTRN	_kvz_coeff_abs_sum:DWORD
EXTRN	_kvz_fast_coeff_cost:DWORD
EXTRN	_kvz_angular_pred:DWORD
EXTRN	_kvz_intra_pred_planar:DWORD
EXTRN	_kvz_intra_pred_filtered_dc:DWORD
EXTRN	_kvz_sao_edge_ddistortion:DWORD
EXTRN	_kvz_calc_sao_edge_dir:DWORD
EXTRN	_kvz_sao_reconstruct_color:DWORD
EXTRN	_kvz_sao_band_ddistortion:DWORD
EXTRN	_kvz_encode_coeff_nxn:DWORD
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__C4AC213E_kvz_math@h DB 01H
__611E9FE5_encode_coding_tree@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
CONST	SEGMENT
??_C@_0BB@GDIDDFDB@encode_coeff_nxn@ DB 'encode_coeff_nxn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDNLAKN@sao_band_ddistortion@
CONST	SEGMENT
??_C@_0BF@HDNLAKN@sao_band_ddistortion@ DB 'sao_band_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
CONST	SEGMENT
??_C@_0BG@IJPOOFFG@sao_reconstruct_color@ DB 'sao_reconstruct_color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
CONST	SEGMENT
??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@ DB 'calc_sao_edge_dir', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
CONST	SEGMENT
??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@ DB 'sao_edge_ddistortion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
CONST	SEGMENT
??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@ DB 'intra_pred_filtered_dc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPOCLILL@intra_pred_planar@
CONST	SEGMENT
??_C@_0BC@KPOCLILL@intra_pred_planar@ DB 'intra_pred_planar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMFCEONC@angular_pred@
CONST	SEGMENT
??_C@_0N@NMFCEONC@angular_pred@ DB 'angular_pred', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HMNKAKOO@fast_coeff_cost@
CONST	SEGMENT
??_C@_0BA@HMNKAKOO@fast_coeff_cost@ DB 'fast_coeff_cost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECIHPEON@coeff_abs_sum@
CONST	SEGMENT
??_C@_0O@ECIHPEON@coeff_abs_sum@ DB 'coeff_abs_sum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMDOJGPA@dequant@
CONST	SEGMENT
??_C@_07GMDOJGPA@dequant@ DB 'dequant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MPMPMGJB@quantize_residual@
CONST	SEGMENT
??_C@_0BC@MPMPMGJB@quantize_residual@ DB 'quantize_residual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFPBCFDJ@quant@
CONST	SEGMENT
??_C@_05DFPBCFDJ@quant@ DB 'quant', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPANGNDO@get_extended_block@
CONST	SEGMENT
??_C@_0BD@MPANGNDO@get_extended_block@ DB 'get_extended_block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
CONST	SEGMENT
??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@ DB 'sample_octpel_chroma_hi', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
CONST	SEGMENT
??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@ DB 'sample_quarterpel_luma_'
	DB	'hi', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
CONST	SEGMENT
??_C@_0BF@HOLGGLNK@sample_octpel_chroma@ DB 'sample_octpel_chroma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
CONST	SEGMENT
??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@ DB 'sample_quarterpel_luma', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@ DB 'filter_qpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@ DB 'filter_qpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
CONST	SEGMENT
??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@ DB 'filter_hpel_blocks_d'
	DB	'iag_luma', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
CONST	SEGMENT
??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@ DB 'filter_hpel_block'
	DB	's_hor_ver_luma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDFNOANP@idct_32x32@
CONST	SEGMENT
??_C@_0L@MDFNOANP@idct_32x32@ DB 'idct_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMPNPGHO@idct_16x16@
CONST	SEGMENT
??_C@_0L@BMPNPGHO@idct_16x16@ DB 'idct_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFNLGGAH@idct_8x8@
CONST	SEGMENT
??_C@_08FFNLGGAH@idct_8x8@ DB 'idct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDLIJGLD@idct_4x4@
CONST	SEGMENT
??_C@_08LDLIJGLD@idct_4x4@ DB 'idct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
CONST	SEGMENT
??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@ DB 'fast_inverse_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMJJBPI@dct_32x32@
CONST	SEGMENT
??_C@_09GAMJJBPI@dct_32x32@ DB 'dct_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPGJIHFJ@dct_16x16@
CONST	SEGMENT
??_C@_09LPGJIHFJ@dct_16x16@ DB 'dct_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGDAJKDP@dct_8x8@
CONST	SEGMENT
??_C@_07CGDAJKDP@dct_8x8@ DB 'dct_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFDGKIL@dct_4x4@
CONST	SEGMENT
??_C@_07MAFDGKIL@dct_4x4@ DB 'dct_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
CONST	SEGMENT
??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@ DB 'fast_forward_dst_4x4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GDPKBOJB@pixel_var@
CONST	SEGMENT
??_C@_09GDPKBOJB@pixel_var@ DB 'pixel_var', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CJIKFDIC@hor_sad@
CONST	SEGMENT
??_C@_07CJIKFDIC@hor_sad@ DB 'hor_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEMLCPNF@ver_sad@
CONST	SEGMENT
??_C@_07OEMLCPNF@ver_sad@ DB 'ver_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMILIHON@get_optimized_sad@
CONST	SEGMENT
??_C@_0BC@IMILIHON@get_optimized_sad@ DB 'get_optimized_sad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIKELBGI@bipred_average@
CONST	SEGMENT
??_C@_0P@FIKELBGI@bipred_average@ DB 'bipred_average', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
CONST	SEGMENT
??_C@_0BA@BPDFDAFM@pixels_calc_ssd@ DB 'pixels_calc_ssd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EFOGIBKC@satd_any_size_quad@
CONST	SEGMENT
??_C@_0BD@EFOGIBKC@satd_any_size_quad@ DB 'satd_any_size_quad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NFKNMDHH@satd_64x64_dual@
CONST	SEGMENT
??_C@_0BA@NFKNMDHH@satd_64x64_dual@ DB 'satd_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICNECECM@satd_32x32_dual@
CONST	SEGMENT
??_C@_0BA@ICNECECM@satd_32x32_dual@ DB 'satd_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
CONST	SEGMENT
??_C@_0BA@GFDJBOPJ@satd_16x16_dual@ DB 'satd_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIHHCMOO@satd_8x8_dual@
CONST	SEGMENT
??_C@_0O@NIHHCMOO@satd_8x8_dual@ DB 'satd_8x8_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PJODLFIO@satd_4x4_dual@
CONST	SEGMENT
??_C@_0O@PJODLFIO@satd_4x4_dual@ DB 'satd_4x4_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGJOPAPB@sad_64x64_dual@
CONST	SEGMENT
??_C@_0P@BGJOPAPB@sad_64x64_dual@ DB 'sad_64x64_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EBOHBHKK@sad_32x32_dual@
CONST	SEGMENT
??_C@_0P@EBOHBHKK@sad_32x32_dual@ DB 'sad_32x32_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGAKCNHP@sad_16x16_dual@
CONST	SEGMENT
??_C@_0P@KGAKCNHP@sad_16x16_dual@ DB 'sad_16x16_dual', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAFGAMEI@sad_8x8_dual@
CONST	SEGMENT
??_C@_0N@NAFGAMEI@sad_8x8_dual@ DB 'sad_8x8_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBMCJFCI@sad_4x4_dual@
CONST	SEGMENT
??_C@_0N@PBMCJFCI@sad_4x4_dual@ DB 'sad_4x4_dual', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHJAMJMP@satd_any_size@
CONST	SEGMENT
??_C@_0O@FHJAMJMP@satd_any_size@ DB 'satd_any_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCCLKIDJ@satd_64x64@
CONST	SEGMENT
??_C@_0L@FCCLKIDJ@satd_64x64@ DB 'satd_64x64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNDHKJEH@satd_32x32@
CONST	SEGMENT
??_C@_0L@NNDHKJEH@satd_32x32@ DB 'satd_32x32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJHLPOG@satd_16x16@
CONST	SEGMENT
??_C@_0L@CJHLPOG@satd_16x16@ DB 'satd_16x16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFHKAAFH@satd_8x8@
CONST	SEGMENT
??_C@_08IFHKAAFH@satd_8x8@ DB 'satd_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDBJPAOD@satd_4x4@
CONST	SEGMENT
??_C@_08GDBJPAOD@satd_4x4@ DB 'satd_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIOKBDLK@sad_64x64@
CONST	SEGMENT
??_C@_09HIOKBDLK@sad_64x64@ DB 'sad_64x64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHPGBCME@sad_32x32@
CONST	SEGMENT
??_C@_09PHPGBCME@sad_32x32@ DB 'sad_32x32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CIFGAEGF@sad_16x16@
CONST	SEGMENT
??_C@_09CIFGAEGF@sad_16x16@ DB 'sad_16x16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEAHLBLP@sad_8x8@
CONST	SEGMENT
??_C@_07MEAHLBLP@sad_8x8@ DB 'sad_8x8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCGEEBAL@sad_4x4@
CONST	SEGMENT
??_C@_07CCGEEBAL@sad_4x4@ DB 'sad_4x4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDJKLCAH@reg_sad@
CONST	SEGMENT
??_C@_07DDJKLCAH@reg_sad@ DB 'reg_sad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHMEIKP@array_md5@
CONST	SEGMENT
??_C@_09INHMEIKP@array_md5@ DB 'array_md5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FIMIKDEG@array_checksum@
CONST	SEGMENT
??_C@_0P@FIMIKDEG@array_checksum@ DB 'array_checksum', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+6
_g_sao_edge_offsets DD 0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
	DD	01H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	01H
_strategies_to_select DD FLAT:??_C@_0P@FIMIKDEG@array_checksum@
	DD	FLAT:_kvz_array_checksum
	DD	FLAT:??_C@_09INHMEIKP@array_md5@
	DD	FLAT:_kvz_array_md5
	DD	FLAT:??_C@_07DDJKLCAH@reg_sad@
	DD	FLAT:_kvz_reg_sad
	DD	FLAT:??_C@_07CCGEEBAL@sad_4x4@
	DD	FLAT:_kvz_sad_4x4
	DD	FLAT:??_C@_07MEAHLBLP@sad_8x8@
	DD	FLAT:_kvz_sad_8x8
	DD	FLAT:??_C@_09CIFGAEGF@sad_16x16@
	DD	FLAT:_kvz_sad_16x16
	DD	FLAT:??_C@_09PHPGBCME@sad_32x32@
	DD	FLAT:_kvz_sad_32x32
	DD	FLAT:??_C@_09HIOKBDLK@sad_64x64@
	DD	FLAT:_kvz_sad_64x64
	DD	FLAT:??_C@_08GDBJPAOD@satd_4x4@
	DD	FLAT:_kvz_satd_4x4
	DD	FLAT:??_C@_08IFHKAAFH@satd_8x8@
	DD	FLAT:_kvz_satd_8x8
	DD	FLAT:??_C@_0L@CJHLPOG@satd_16x16@
	DD	FLAT:_kvz_satd_16x16
	DD	FLAT:??_C@_0L@NNDHKJEH@satd_32x32@
	DD	FLAT:_kvz_satd_32x32
	DD	FLAT:??_C@_0L@FCCLKIDJ@satd_64x64@
	DD	FLAT:_kvz_satd_64x64
	DD	FLAT:??_C@_0O@FHJAMJMP@satd_any_size@
	DD	FLAT:_kvz_satd_any_size
	DD	FLAT:??_C@_0N@PBMCJFCI@sad_4x4_dual@
	DD	FLAT:_kvz_sad_4x4_dual
	DD	FLAT:??_C@_0N@NAFGAMEI@sad_8x8_dual@
	DD	FLAT:_kvz_sad_8x8_dual
	DD	FLAT:??_C@_0P@KGAKCNHP@sad_16x16_dual@
	DD	FLAT:_kvz_sad_16x16_dual
	DD	FLAT:??_C@_0P@EBOHBHKK@sad_32x32_dual@
	DD	FLAT:_kvz_sad_32x32_dual
	DD	FLAT:??_C@_0P@BGJOPAPB@sad_64x64_dual@
	DD	FLAT:_kvz_sad_64x64_dual
	DD	FLAT:??_C@_0O@PJODLFIO@satd_4x4_dual@
	DD	FLAT:_kvz_satd_4x4_dual
	DD	FLAT:??_C@_0O@NIHHCMOO@satd_8x8_dual@
	DD	FLAT:_kvz_satd_8x8_dual
	DD	FLAT:??_C@_0BA@GFDJBOPJ@satd_16x16_dual@
	DD	FLAT:_kvz_satd_16x16_dual
	DD	FLAT:??_C@_0BA@ICNECECM@satd_32x32_dual@
	DD	FLAT:_kvz_satd_32x32_dual
	DD	FLAT:??_C@_0BA@NFKNMDHH@satd_64x64_dual@
	DD	FLAT:_kvz_satd_64x64_dual
	DD	FLAT:??_C@_0BD@EFOGIBKC@satd_any_size_quad@
	DD	FLAT:_kvz_satd_any_size_quad
	DD	FLAT:??_C@_0BA@BPDFDAFM@pixels_calc_ssd@
	DD	FLAT:_kvz_pixels_calc_ssd
	DD	FLAT:??_C@_0P@FIKELBGI@bipred_average@
	DD	FLAT:_kvz_bipred_average
	DD	FLAT:??_C@_0BC@IMILIHON@get_optimized_sad@
	DD	FLAT:_kvz_get_optimized_sad
	DD	FLAT:??_C@_07OEMLCPNF@ver_sad@
	DD	FLAT:_kvz_ver_sad
	DD	FLAT:??_C@_07CJIKFDIC@hor_sad@
	DD	FLAT:_kvz_hor_sad
	DD	FLAT:??_C@_09GDPKBOJB@pixel_var@
	DD	FLAT:_kvz_pixel_var
	DD	FLAT:??_C@_0BF@BJKPGPEP@fast_forward_dst_4x4@
	DD	FLAT:_kvz_fast_forward_dst_4x4
	DD	FLAT:??_C@_07MAFDGKIL@dct_4x4@
	DD	FLAT:_kvz_dct_4x4
	DD	FLAT:??_C@_07CGDAJKDP@dct_8x8@
	DD	FLAT:_kvz_dct_8x8
	DD	FLAT:??_C@_09LPGJIHFJ@dct_16x16@
	DD	FLAT:_kvz_dct_16x16
	DD	FLAT:??_C@_09GAMJJBPI@dct_32x32@
	DD	FLAT:_kvz_dct_32x32
	DD	FLAT:??_C@_0BF@LGIDMEOF@fast_inverse_dst_4x4@
	DD	FLAT:_kvz_fast_inverse_dst_4x4
	DD	FLAT:??_C@_08LDLIJGLD@idct_4x4@
	DD	FLAT:_kvz_idct_4x4
	DD	FLAT:??_C@_08FFNLGGAH@idct_8x8@
	DD	FLAT:_kvz_idct_8x8
	DD	FLAT:??_C@_0L@BMPNPGHO@idct_16x16@
	DD	FLAT:_kvz_idct_16x16
	DD	FLAT:??_C@_0L@MDFNOANP@idct_32x32@
	DD	FLAT:_kvz_idct_32x32
	DD	FLAT:??_C@_0CA@KBMGLOML@filter_hpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LGIFMJCD@filter_hpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_hpel_blocks_diag_luma
	DD	FLAT:??_C@_0CA@HAFBJKBM@filter_qpel_blocks_hor_ver_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_hor_ver_luma
	DD	FLAT:??_C@_0BN@LBBJMBKC@filter_qpel_blocks_diag_luma@
	DD	FLAT:_kvz_filter_qpel_blocks_diag_luma
	DD	FLAT:??_C@_0BH@DGLFPIPB@sample_quarterpel_luma@
	DD	FLAT:_kvz_sample_quarterpel_luma
	DD	FLAT:??_C@_0BF@HOLGGLNK@sample_octpel_chroma@
	DD	FLAT:_kvz_sample_octpel_chroma
	DD	FLAT:??_C@_0BK@LCPNGAOF@sample_quarterpel_luma_hi@
	DD	FLAT:_kvz_sample_quarterpel_luma_hi
	DD	FLAT:??_C@_0BI@EFIAEBMP@sample_octpel_chroma_hi@
	DD	FLAT:_kvz_sample_octpel_chroma_hi
	DD	FLAT:??_C@_0BD@MPANGNDO@get_extended_block@
	DD	FLAT:_kvz_get_extended_block
	DD	FLAT:??_C@_05DFPBCFDJ@quant@
	DD	FLAT:_kvz_quant
	DD	FLAT:??_C@_0BC@MPMPMGJB@quantize_residual@
	DD	FLAT:_kvz_quantize_residual
	DD	FLAT:??_C@_07GMDOJGPA@dequant@
	DD	FLAT:_kvz_dequant
	DD	FLAT:??_C@_0O@ECIHPEON@coeff_abs_sum@
	DD	FLAT:_kvz_coeff_abs_sum
	DD	FLAT:??_C@_0BA@HMNKAKOO@fast_coeff_cost@
	DD	FLAT:_kvz_fast_coeff_cost
	DD	FLAT:??_C@_0N@NMFCEONC@angular_pred@
	DD	FLAT:_kvz_angular_pred
	DD	FLAT:??_C@_0BC@KPOCLILL@intra_pred_planar@
	DD	FLAT:_kvz_intra_pred_planar
	DD	FLAT:??_C@_0BH@EAOLFJGL@intra_pred_filtered_dc@
	DD	FLAT:_kvz_intra_pred_filtered_dc
	DD	FLAT:??_C@_0BF@LGILOHOJ@sao_edge_ddistortion@
	DD	FLAT:_kvz_sao_edge_ddistortion
	DD	FLAT:??_C@_0BC@OCNKGNNI@calc_sao_edge_dir@
	DD	FLAT:_kvz_calc_sao_edge_dir
	DD	FLAT:??_C@_0BG@IJPOOFFG@sao_reconstruct_color@
	DD	FLAT:_kvz_sao_reconstruct_color
	DD	FLAT:??_C@_0BF@HDNLAKN@sao_band_ddistortion@
	DD	FLAT:_kvz_sao_band_ddistortion
	DD	FLAT:??_C@_0BB@GDIDDFDB@encode_coeff_nxn@
	DD	FLAT:_kvz_encode_coeff_nxn
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	_kvz_encode_coding_tree
PUBLIC	_kvz_encode_mvd
PUBLIC	_kvz_encode_last_significant_xy
PUBLIC	__JustMyCode_Default
PUBLIC	?__LINE__Var@?0??xy_to_zorder@@9@9		; `xy_to_zorder'::`1'::__LINE__Var
PUBLIC	??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ ; `string'
PUBLIC	??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ ; `string'
PUBLIC	??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_math_floor_log2@@9@9	; `kvz_math_floor_log2'::`1'::__LINE__Var
PUBLIC	??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??encode_transform_unit@@9@9	; `encode_transform_unit'::`1'::__LINE__Var
PUBLIC	??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1EI@CCOKBJLK@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?0??encode_transform_coeff@@9@9	; `encode_transform_coeff'::`1'::__LINE__Var
PUBLIC	??_C@_0BN@BBIINLOO@QP?5delta?5not?5in?5valid?5range?4@ ; `string'
PUBLIC	??_C@_1LO@DGNBFNMJ@?$AAq?$AAp?$AA_?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAK?$AAV?$AAZ@ ; `string'
PUBLIC	?__LINE__Var@?0??encode_intra_coding_unit@@9@9	; `encode_intra_coding_unit'::`1'::__LINE__Var
PUBLIC	??_C@_1BM@EHEGCICI@?$AAp?$AAu?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BM@FAGOEMOI@?$AAp?$AAu?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1BO@LGIDPCFB@?$AAp?$AAr?$AAe?$AAd?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA5@ ; `string'
PUBLIC	?__LINE__Var@?0??kvz_encode_coding_tree@@9@9	; `kvz_encode_coding_tree'::`1'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
EXTRN	__imp___wassert:PROC
EXTRN	__imp__exit:PROC
EXTRN	_abs:PROC
EXTRN	_kvz_cabac_encode_bin:PROC
EXTRN	_kvz_cabac_encode_bin_ep:PROC
EXTRN	_kvz_cabac_encode_bins_ep:PROC
EXTRN	_kvz_cabac_write_ep_ex_golomb:PROC
EXTRN	_kvz_cabac_write_unary_max_symbol:PROC
EXTRN	_kvz_cu_array_at_const:PROC
EXTRN	_kvz_get_scan_order:PROC
EXTRN	_kvz_get_cu_ref_qp:PROC
EXTRN	_kvz_inter_get_mv_cand_cua:PROC
EXTRN	_kvz_intra_get_dir_luma_predictor:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	_kvz_part_mode_num_parts:BYTE
EXTRN	_kvz_part_mode_offsets:BYTE
EXTRN	_kvz_part_mode_sizes:BYTE
EXTRN	_kvz_g_convert_to_bit:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_encode_coding_tree@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_encode_coding_tree@@9@9 DD 02d9H	; `kvz_encode_coding_tree'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BO@LGIDPCFB@?$AAp?$AAr?$AAe?$AAd?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA5@
CONST	SEGMENT
??_C@_1BO@LGIDPCFB@?$AAp?$AAr?$AAe?$AAd?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA5@ DB 'p'
	DB	00H, 'r', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '5'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FAGOEMOI@?$AAp?$AAu?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BM@FAGOEMOI@?$AAp?$AAu?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'p'
	DB	00H, 'u', 00H, '_', 00H, 'y', 00H, ' ', 00H, '>', 00H, '>', 00H
	DB	' ', 00H, '2', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@EHEGCICI@?$AAp?$AAu?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BM@EHEGCICI@?$AAp?$AAu?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'p'
	DB	00H, 'u', 00H, '_', 00H, 'x', 00H, ' ', 00H, '>', 00H, '>', 00H
	DB	' ', 00H, '2', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encode_intra_coding_unit@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encode_intra_coding_unit@@9@9 DD 01ccH	; `encode_intra_coding_unit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LO@DGNBFNMJ@?$AAq?$AAp?$AA_?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAK?$AAV?$AAZ@
CONST	SEGMENT
??_C@_1LO@DGNBFNMJ@?$AAq?$AAp?$AA_?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAK?$AAV?$AAZ@ DB 'q'
	DB	00H, 'p', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 't', 00H
	DB	'a', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'K', 00H, 'V'
	DB	00H, 'Z', 00H, '_', 00H, 'Q', 00H, 'P', 00H, '_', 00H, 'D', 00H
	DB	'E', 00H, 'L', 00H, 'T', 00H, 'A', 00H, '_', 00H, 'M', 00H, 'I'
	DB	00H, 'N', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'q', 00H
	DB	'p', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 't', 00H, 'a'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'K', 00H, 'V', 00H
	DB	'Z', 00H, '_', 00H, 'Q', 00H, 'P', 00H, '_', 00H, 'D', 00H, 'E'
	DB	00H, 'L', 00H, 'T', 00H, 'A', 00H, '_', 00H, 'M', 00H, 'A', 00H
	DB	'X', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'Q'
	DB	00H, 'P', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 't', 00H
	DB	'a', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BBIINLOO@QP?5delta?5not?5in?5valid?5range?4@
CONST	SEGMENT
??_C@_0BN@BBIINLOO@QP?5delta?5not?5in?5valid?5range?4@ DB 'QP delta not i'
	DB	'n valid range.', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encode_transform_coeff@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encode_transform_coeff@@9@9 DD 0c8H	; `encode_transform_coeff'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@CCOKBJLK@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@
CONST	SEGMENT
??_C@_1EI@CCOKBJLK@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@ DB 'd'
	DB	00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'X', 00H, '_'
	DB	00H, 'P', 00H, 'U', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'P', 00H
	DB	'T', 00H, 'H', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'e', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??encode_transform_unit@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??encode_transform_unit@@9@9 DD 077H	; `encode_transform_unit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'k', 00H, 'v', 00H
	DB	'z', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'h', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??kvz_math_floor_log2@@9@9 DD 02cH	; `kvz_math_floor_log2'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@ DB 'y'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'y', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
CONST	SEGMENT
??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@ DB 'x'
	DB	00H, ' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'c', 00H, 'u', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??xy_to_zorder@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??xy_to_zorder@@9@9 DD 0182H		; `xy_to_zorder'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _encode_part_mode
_TEXT	SEGMENT
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_cur_cu$ = 16						; size = 4
_depth$ = 20						; size = 4
_encode_part_mode PROC					; COMDAT

; 646  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 647  :   // Binarization from Table 9-34 of the HEVC spec:
; 648  :   //
; 649  :   //                |   log2CbSize >     |    log2CbSize ==
; 650  :   //                |   MinCbLog2SizeY   |    MinCbLog2SizeY
; 651  :   // -------+-------+----------+---------+-----------+----------
; 652  :   //  pred  | part  | AMP      | AMP     |           |
; 653  :   //  mode  | mode  | disabled | enabled | size == 8 | size > 8
; 654  :   // -------+-------+----------+---------+-----------+----------
; 655  :   //  intra | 2Nx2N |        -         - |         1          1
; 656  :   //        |   NxN |        -         - |         0          0
; 657  :   // -------+-------+--------------------+----------------------
; 658  :   //  inter | 2Nx2N |        1         1 |         1          1
; 659  :   //        |  2NxN |       01       011 |        01         01
; 660  :   //        |  Nx2N |       00       001 |        00        001
; 661  :   //        |   NxN |        -         - |         -        000
; 662  :   //        | 2NxnU |        -      0100 |         -          -
; 663  :   //        | 2NxnD |        -      0101 |         -          -
; 664  :   //        | nLx2N |        -      0000 |         -          -
; 665  :   //        | nRx2N |        -      0001 |         -          -
; 666  :   // -------+-------+--------------------+----------------------
; 667  :   //
; 668  :   //
; 669  :   // Context indices from Table 9-37 of the HEVC spec:
; 670  :   //
; 671  :   //                                      binIdx
; 672  :   //                               |  0  1  2       3
; 673  :   // ------------------------------+------------------
; 674  :   //  log2CbSize == MinCbLog2SizeY |  0  1  2  bypass
; 675  :   //  log2CbSize >  MinCbLog2SizeY |  0  1  3  bypass
; 676  :   // ------------------------------+------------------
; 677  : 
; 678  :   if (cur_cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN2@encode_par

; 679  :     if (depth == MAX_DEPTH) {

	cmp	DWORD PTR _depth$[ebp], 3
	jne	SHORT $LN4@encode_par

; 680  :       cabac->cur_ctx = &(cabac->ctx.part_size_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+60]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 681  :       if (cur_cu->part_size == SIZE_2Nx2N) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN5@encode_par

; 682  :         CABAC_BIN(cabac, 1, "part_mode 2Nx2N");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 683  :       } else {

	jmp	SHORT $LN4@encode_par
$LN5@encode_par:

; 684  :         CABAC_BIN(cabac, 0, "part_mode NxN");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN4@encode_par:

; 685  :       }
; 686  :     }
; 687  :   } else {

	jmp	$LN1@encode_par
$LN2@encode_par:

; 688  : 
; 689  :     cabac->cur_ctx = &(cabac->ctx.part_size_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+60]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 690  :     if (cur_cu->part_size == SIZE_2Nx2N) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN7@encode_par

; 691  :       CABAC_BIN(cabac, 1, "part_mode 2Nx2N");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 692  :       return;

	jmp	$LN1@encode_par
$LN7@encode_par:

; 693  :     }
; 694  :     CABAC_BIN(cabac, 0, "part_mode split");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 695  : 
; 696  :     cabac->cur_ctx = &(cabac->ctx.part_size_model[1]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+60]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 697  :     if (cur_cu->part_size == SIZE_2NxN ||
; 698  :         cur_cu->part_size == SIZE_2NxnU ||

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN10@encode_par
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 4
	je	SHORT $LN10@encode_par
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 5
	jne	SHORT $LN8@encode_par
$LN10@encode_par:

; 699  :         cur_cu->part_size == SIZE_2NxnD) {
; 700  :       CABAC_BIN(cabac, 1, "part_mode vertical");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 701  :     } else {

	jmp	SHORT $LN9@encode_par
$LN8@encode_par:

; 702  :       CABAC_BIN(cabac, 0, "part_mode horizontal");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN9@encode_par:

; 703  :     }
; 704  : 
; 705  :     if (state->encoder_control->cfg.amp_enable && depth < MAX_DEPTH) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+60], 0
	je	$LN1@encode_par
	cmp	DWORD PTR _depth$[ebp], 3
	jge	$LN1@encode_par

; 706  :       cabac->cur_ctx = &(cabac->ctx.part_size_model[3]);

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+60]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 707  : 
; 708  :       if (cur_cu->part_size == SIZE_2NxN ||

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN13@encode_par
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 2
	jne	SHORT $LN12@encode_par
$LN13@encode_par:

; 709  :           cur_cu->part_size == SIZE_Nx2N) {
; 710  :         CABAC_BIN(cabac, 1, "part_mode SMP");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 711  :         return;

	jmp	SHORT $LN1@encode_par
$LN12@encode_par:

; 712  :       }
; 713  :       CABAC_BIN(cabac, 0, "part_mode AMP");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 714  : 
; 715  :       if (cur_cu->part_size == SIZE_2NxnU ||

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 4
	je	SHORT $LN16@encode_par
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 6
	jne	SHORT $LN14@encode_par
$LN16@encode_par:

; 716  :           cur_cu->part_size == SIZE_nLx2N) {
; 717  :         CABAC_BINS_EP(cabac, 0, 1, "part_mode AMP");

	push	1
	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH

; 718  :       } else {

	jmp	SHORT $LN1@encode_par
$LN14@encode_par:

; 719  :         CABAC_BINS_EP(cabac, 1, 1, "part_mode AMP");

	push	1
	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN1@encode_par:

; 720  :       }
; 721  :     }
; 722  :   }
; 723  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_part_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _encode_intra_coding_unit
_TEXT	SEGMENT
tv403 = -580						; size = 4
tv307 = -580						; size = 4
tv296 = -580						; size = 4
tv246 = -580						; size = 4
_i$1 = -380						; size = 4
_i$2 = -368						; size = 4
_chroma_pred_modes$3 = -356				; size = 16
_pred_mode$4 = -332					; size = 4
_i$5 = -320						; size = 4
_tempval$6 = -305					; size = 1
_tempval$7 = -293					; size = 1
_tempval$8 = -281					; size = 1
_tmp_pred$9 = -272					; size = 4
_j$10 = -260						; size = 4
_j$11 = -248						; size = 4
_i$12 = -236						; size = 4
_above_pu$13 = -224					; size = 4
_left_pu$14 = -212					; size = 4
_cur_pu$15 = -200					; size = 4
_pu_y$16 = -188						; size = 4
_pu_x$17 = -176						; size = 4
_j$18 = -164						; size = 4
_cu_width$ = -152					; size = 4
_num_pred_units$ = -140					; size = 4
_flag$ = -128						; size = 16
_mpm_preds$ = -104					; size = 4
_intra_preds$ = -92					; size = 12
_intra_pred_mode_chroma$ = -69				; size = 1
_intra_pred_mode_encry$ = -60				; size = 4
_do_crypto$ = -45					; size = 1
_intra_pred_mode$ = -36					; size = 4
_intra_pred_mode_actual$ = -24				; size = 4
_frame$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_cur_cu$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_depth$ = 28						; size = 4
_encode_intra_coding_unit PROC				; COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-580]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 461  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 462  :   uint8_t intra_pred_mode_actual[4];
; 463  :   uint8_t *intra_pred_mode = intra_pred_mode_actual;

	lea	eax, DWORD PTR _intra_pred_mode_actual$[ebp]
	mov	DWORD PTR _intra_pred_mode$[ebp], eax

; 464  : 
; 465  : #if KVZ_SEL_ENCRYPTION
; 466  :   const bool do_crypto =
; 467  :     !state->cabac.only_count &&
; 468  :     state->encoder_control->cfg.crypto_features & KVZ_CRYPTO_INTRA_MODE;
; 469  : #else
; 470  :   const bool do_crypto = false;

	mov	BYTE PTR _do_crypto$[ebp], 0

; 471  : #endif
; 472  : 
; 473  :   uint8_t intra_pred_mode_encry[4] = {-1, -1, -1, -1};

	mov	BYTE PTR _intra_pred_mode_encry$[ebp], 255 ; 000000ffH
	mov	BYTE PTR _intra_pred_mode_encry$[ebp+1], 255 ; 000000ffH
	mov	BYTE PTR _intra_pred_mode_encry$[ebp+2], 255 ; 000000ffH
	mov	BYTE PTR _intra_pred_mode_encry$[ebp+3], 255 ; 000000ffH

; 474  :   if (do_crypto) {

	movzx	eax, BYTE PTR _do_crypto$[ebp]
	test	eax, eax
	je	SHORT $LN23@encode_int

; 475  :     intra_pred_mode = intra_pred_mode_encry;

	lea	eax, DWORD PTR _intra_pred_mode_encry$[ebp]
	mov	DWORD PTR _intra_pred_mode$[ebp], eax
$LN23@encode_int:

; 476  :   }
; 477  : 
; 478  :   uint8_t intra_pred_mode_chroma = cur_cu->intra.mode_chroma;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+9]
	mov	BYTE PTR _intra_pred_mode_chroma$[ebp], cl

; 479  :   int8_t intra_preds[4][3] = {{-1, -1, -1},{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}};

	mov	BYTE PTR _intra_preds$[ebp], -1
	mov	BYTE PTR _intra_preds$[ebp+1], -1
	mov	BYTE PTR _intra_preds$[ebp+2], -1
	mov	BYTE PTR _intra_preds$[ebp+3], -1
	mov	BYTE PTR _intra_preds$[ebp+4], -1
	mov	BYTE PTR _intra_preds$[ebp+5], -1
	mov	BYTE PTR _intra_preds$[ebp+6], -1
	mov	BYTE PTR _intra_preds$[ebp+7], -1
	mov	BYTE PTR _intra_preds$[ebp+8], -1
	mov	BYTE PTR _intra_preds$[ebp+9], -1
	mov	BYTE PTR _intra_preds$[ebp+10], -1
	mov	BYTE PTR _intra_preds$[ebp+11], -1

; 480  :   int8_t mpm_preds[4] = {-1, -1, -1, -1};

	mov	BYTE PTR _mpm_preds$[ebp], -1
	mov	BYTE PTR _mpm_preds$[ebp+1], -1
	mov	BYTE PTR _mpm_preds$[ebp+2], -1
	mov	BYTE PTR _mpm_preds$[ebp+3], -1

; 481  :   uint32_t flag[4];
; 482  : 
; 483  :   #if ENABLE_PCM == 1
; 484  :   // Code must start after variable initialization
; 485  :   kvz_cabac_encode_bin_trm(cabac, 0); // IPCMFlag == 0
; 486  :   #endif
; 487  : 
; 488  :   // PREDINFO CODING
; 489  :   // If intra prediction mode is found from the predictors,
; 490  :   // it can be signaled with two EP's. Otherwise we can send
; 491  :   // 5 EP bins with the full predmode
; 492  :   const int num_pred_units = kvz_part_mode_num_parts[cur_cu->part_size];

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _kvz_part_mode_num_parts[edx]
	mov	DWORD PTR _num_pred_units$[ebp], eax

; 493  :   const int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 494  : 
; 495  :   for (int j = 0; j < num_pred_units; ++j) {

	mov	DWORD PTR _j$18[ebp], 0
	jmp	SHORT $LN4@encode_int
$LN2@encode_int:
	mov	eax, DWORD PTR _j$18[ebp]
	add	eax, 1
	mov	DWORD PTR _j$18[ebp], eax
$LN4@encode_int:
	mov	eax, DWORD PTR _j$18[ebp]
	cmp	eax, DWORD PTR _num_pred_units$[ebp]
	jge	$LN3@encode_int

; 496  :     const int pu_x = PU_GET_X(cur_cu->part_size, cu_width, x, j);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _j$18[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	eax, BYTE PTR [ecx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pu_x$17[ebp], eax

; 497  :     const int pu_y = PU_GET_Y(cur_cu->part_size, cu_width, y, j);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _j$18[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _pu_y$16[ebp], eax

; 498  :     const cu_info_t *cur_pu = kvz_cu_array_at_const(frame->cu_array, pu_x, pu_y);

	mov	eax, DWORD PTR _pu_y$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_x$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_pu$15[ebp], eax

; 499  : 
; 500  :     const cu_info_t *left_pu = NULL;

	mov	DWORD PTR _left_pu$14[ebp], 0

; 501  :     const cu_info_t *above_pu = NULL;

	mov	DWORD PTR _above_pu$13[ebp], 0

; 502  : 
; 503  :     if (pu_x > 0) {

	cmp	DWORD PTR _pu_x$17[ebp], 0
	jle	SHORT $LN24@encode_int

; 504  :       assert(pu_x >> 2 > 0);

	mov	eax, DWORD PTR _pu_x$17[ebp]
	sar	eax, 2
	test	eax, eax
	jg	SHORT $LN46@encode_int
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encode_intra_coding_unit@@9@9
	add	ecx, 44					; 0000002cH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BM@EHEGCICI@?$AAp?$AAu?$AA_?$AAx?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@encode_int:

; 505  :       left_pu = kvz_cu_array_at_const(frame->cu_array, pu_x - 1, pu_y);

	mov	eax, DWORD PTR _pu_y$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_x$17[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _left_pu$14[ebp], eax
$LN24@encode_int:

; 506  :     }
; 507  :     // Don't take the above PU across the LCU boundary.
; 508  :     if (pu_y % LCU_WIDTH > 0 && pu_y > 0) {

	mov	eax, DWORD PTR _pu_y$16[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN65@encode_int
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN65@encode_int:
	test	eax, eax
	jle	SHORT $LN25@encode_int
	cmp	DWORD PTR _pu_y$16[ebp], 0
	jle	SHORT $LN25@encode_int

; 509  :       assert(pu_y >> 2 > 0);

	mov	eax, DWORD PTR _pu_y$16[ebp]
	sar	eax, 2
	test	eax, eax
	jg	SHORT $LN47@encode_int
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encode_intra_coding_unit@@9@9
	add	ecx, 49					; 00000031H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BM@FAGOEMOI@?$AAp?$AAu?$AA_?$AAy?$AA?5?$AA?$DO?$AA?$DO?$AA?5?$AA2?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN47@encode_int:

; 510  :       above_pu = kvz_cu_array_at_const(frame->cu_array, pu_x, pu_y - 1);

	mov	eax, DWORD PTR _pu_y$16[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pu_x$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _above_pu$13[ebp], eax
$LN25@encode_int:

; 511  :     }
; 512  : 
; 513  :     if (do_crypto) {

	movzx	eax, BYTE PTR _do_crypto$[ebp]
	test	eax, eax
	je	SHORT $LN26@encode_int

; 514  : #if KVZ_SEL_ENCRYPTION
; 515  :       // Need to wrap in preprocessor directives because this function is
; 516  :       // only defined when KVZ_SEL_ENCRYPTION is defined.
; 517  :       kvz_intra_get_dir_luma_predictor_encry(pu_x, pu_y,
; 518  :                                              intra_preds[j],
; 519  :                                              cur_pu,
; 520  :                                              left_pu, above_pu);
; 521  : #endif
; 522  :     } else {

	jmp	SHORT $LN27@encode_int
$LN26@encode_int:

; 523  :       kvz_intra_get_dir_luma_predictor(pu_x, pu_y,

	mov	eax, DWORD PTR _above_pu$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_pu$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$15[ebp]
	push	edx
	imul	eax, DWORD PTR _j$18[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _pu_y$16[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_x$17[ebp]
	push	eax
	call	_kvz_intra_get_dir_luma_predictor
	add	esp, 24					; 00000018H
$LN27@encode_int:

; 524  :                                        intra_preds[j],
; 525  :                                        cur_pu,
; 526  :                                        left_pu, above_pu);
; 527  :     }
; 528  : 
; 529  :     intra_pred_mode_actual[j] = cur_pu->intra.mode;

	mov	eax, DWORD PTR _j$18[ebp]
	mov	ecx, DWORD PTR _cur_pu$15[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR _intra_pred_mode_actual$[ebp+eax], dl

; 530  :     if (do_crypto) {

	movzx	eax, BYTE PTR _do_crypto$[ebp]
	test	eax, eax
	je	SHORT $LN28@encode_int

; 531  :       intra_pred_mode_encry[j] = intra_mode_encryption(state, cur_pu->intra.mode);

	mov	eax, DWORD PTR _cur_pu$15[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_intra_mode_encryption
	add	esp, 8
	mov	ecx, DWORD PTR _j$18[ebp]
	mov	BYTE PTR _intra_pred_mode_encry$[ebp+ecx], al
$LN28@encode_int:

; 532  :     }
; 533  : 
; 534  :     for (int i = 0; i < 3; i++) {

	mov	DWORD PTR _i$12[ebp], 0
	jmp	SHORT $LN7@encode_int
$LN5@encode_int:
	mov	eax, DWORD PTR _i$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$12[ebp], eax
$LN7@encode_int:
	cmp	DWORD PTR _i$12[ebp], 3
	jge	SHORT $LN6@encode_int

; 535  :       if (intra_preds[j][i] == intra_pred_mode[j]) {

	imul	eax, DWORD PTR _j$18[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, DWORD PTR _i$12[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	ecx, DWORD PTR _intra_pred_mode$[ebp]
	add	ecx, DWORD PTR _j$18[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN29@encode_int

; 536  :         mpm_preds[j] = (int8_t)i;

	mov	eax, DWORD PTR _j$18[ebp]
	mov	cl, BYTE PTR _i$12[ebp]
	mov	BYTE PTR _mpm_preds$[ebp+eax], cl

; 537  :         break;

	jmp	SHORT $LN6@encode_int
$LN29@encode_int:

; 538  :       }
; 539  :     }

	jmp	SHORT $LN5@encode_int
$LN6@encode_int:

; 540  :     flag[j] = (mpm_preds[j] == -1) ? 0 : 1;

	mov	eax, DWORD PTR _j$18[ebp]
	movsx	ecx, BYTE PTR _mpm_preds$[ebp+eax]
	cmp	ecx, -1
	jne	SHORT $LN48@encode_int
	mov	DWORD PTR tv246[ebp], 0
	jmp	SHORT $LN49@encode_int
$LN48@encode_int:
	mov	DWORD PTR tv246[ebp], 1
$LN49@encode_int:
	mov	edx, DWORD PTR _j$18[ebp]
	mov	eax, DWORD PTR tv246[ebp]
	mov	DWORD PTR _flag$[ebp+edx*4], eax

; 541  : 
; 542  : #if KVZ_SEL_ENCRYPTION
; 543  :     // Need to wrap in preprocessor directives because
; 544  :     // cu_info_t.intra.mode_encry is only defined when KVZ_SEL_ENCRYPTION
; 545  :     // is defined.
; 546  :     if (do_crypto) {
; 547  :       // Set the modified intra_pred_mode of the current pu here to make it
; 548  :       // available from its neighbours for mpm decision.
; 549  : 
; 550  :       // FIXME: there might be a more efficient way to propagate mode_encry
; 551  :       // for future use from left and above PUs
; 552  :       const int pu_width = PU_GET_W(cur_cu->part_size, cu_width, j);
; 553  :       for (int y = pu_y; y < pu_y + pu_width; y += 4 ) {
; 554  :         for (int x = pu_x; x < pu_x + pu_width; x += 4) {
; 555  :           cu_info_t *cu = kvz_cu_array_at(frame->cu_array, x, y);
; 556  :           cu->intra.mode_encry = intra_pred_mode_encry[j];
; 557  :         }
; 558  :       }
; 559  :     }
; 560  : #endif
; 561  :   }

	jmp	$LN2@encode_int
$LN3@encode_int:

; 562  : 
; 563  :   cabac->cur_ctx = &(cabac->ctx.intra_mode_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 37					; 00000025H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 564  :   for (int j = 0; j < num_pred_units; ++j) {

	mov	DWORD PTR _j$11[ebp], 0
	jmp	SHORT $LN10@encode_int
$LN8@encode_int:
	mov	eax, DWORD PTR _j$11[ebp]
	add	eax, 1
	mov	DWORD PTR _j$11[ebp], eax
$LN10@encode_int:
	mov	eax, DWORD PTR _j$11[ebp]
	cmp	eax, DWORD PTR _num_pred_units$[ebp]
	jge	SHORT $LN9@encode_int

; 565  :     CABAC_BIN(cabac, flag[j], "prev_intra_luma_pred_flag");

	mov	eax, DWORD PTR _j$11[ebp]
	mov	ecx, DWORD PTR _flag$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 566  :   }

	jmp	SHORT $LN8@encode_int
$LN9@encode_int:

; 567  : 
; 568  :   for (int j = 0; j < num_pred_units; ++j) {

	mov	DWORD PTR _j$10[ebp], 0
	jmp	SHORT $LN13@encode_int
$LN11@encode_int:
	mov	eax, DWORD PTR _j$10[ebp]
	add	eax, 1
	mov	DWORD PTR _j$10[ebp], eax
$LN13@encode_int:
	mov	eax, DWORD PTR _j$10[ebp]
	cmp	eax, DWORD PTR _num_pred_units$[ebp]
	jge	$LN12@encode_int

; 569  :     // Signal index of the prediction mode in the prediction list.
; 570  :     if (flag[j]) {

	mov	eax, DWORD PTR _j$10[ebp]
	cmp	DWORD PTR _flag$[ebp+eax*4], 0
	je	$LN30@encode_int

; 571  :       CABAC_BIN_EP(cabac, (mpm_preds[j] == 0 ? 0 : 1), "mpm_idx");

	mov	eax, DWORD PTR _j$10[ebp]
	movsx	ecx, BYTE PTR _mpm_preds$[ebp+eax]
	test	ecx, ecx
	jne	SHORT $LN50@encode_int
	mov	DWORD PTR tv296[ebp], 0
	jmp	SHORT $LN51@encode_int
$LN50@encode_int:
	mov	DWORD PTR tv296[ebp], 1
$LN51@encode_int:
	mov	edx, DWORD PTR tv296[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8

; 572  :       if (mpm_preds[j] != 0) {

	mov	eax, DWORD PTR _j$10[ebp]
	movsx	ecx, BYTE PTR _mpm_preds$[ebp+eax]
	test	ecx, ecx
	je	SHORT $LN32@encode_int

; 573  :         CABAC_BIN_EP(cabac, (mpm_preds[j] == 1 ? 0 : 1), "mpm_idx");

	mov	eax, DWORD PTR _j$10[ebp]
	movsx	ecx, BYTE PTR _mpm_preds$[ebp+eax]
	cmp	ecx, 1
	jne	SHORT $LN52@encode_int
	mov	DWORD PTR tv307[ebp], 0
	jmp	SHORT $LN53@encode_int
$LN52@encode_int:
	mov	DWORD PTR tv307[ebp], 1
$LN53@encode_int:
	mov	edx, DWORD PTR tv307[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN32@encode_int:

; 574  :       }
; 575  :     } else {

	jmp	$LN31@encode_int
$LN30@encode_int:

; 576  :       // Signal the actual prediction mode.
; 577  :       int32_t tmp_pred = intra_pred_mode[j];

	mov	eax, DWORD PTR _intra_pred_mode$[ebp]
	add	eax, DWORD PTR _j$10[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _tmp_pred$9[ebp], ecx

; 578  : 
; 579  :       // Sort prediction list from lowest to highest.
; 580  :       if (intra_preds[j][0] > intra_preds[j][1]) SWAP(intra_preds[j][0], intra_preds[j][1], int8_t);

	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR [ecx+eax]
	imul	edx, DWORD PTR _j$10[ebp], 3
	lea	eax, DWORD PTR _intra_preds$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movsx	eax, BYTE PTR [eax+edx]
	cmp	ecx, eax
	jle	SHORT $LN33@encode_int
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _tempval$8[ebp], cl
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	eax, DWORD PTR _intra_preds$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 0
	mov	cl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+esi], cl
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	mov	al, BYTE PTR _tempval$8[ebp]
	mov	BYTE PTR [ecx+edx], al
$LN33@encode_int:

; 581  :       if (intra_preds[j][0] > intra_preds[j][2]) SWAP(intra_preds[j][0], intra_preds[j][2], int8_t);

	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR [ecx+eax]
	imul	edx, DWORD PTR _j$10[ebp], 3
	lea	eax, DWORD PTR _intra_preds$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movsx	eax, BYTE PTR [eax+edx]
	cmp	ecx, eax
	jle	SHORT $LN34@encode_int
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _tempval$7[ebp], cl
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	eax, DWORD PTR _intra_preds$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 0
	mov	cl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+esi], cl
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	mov	al, BYTE PTR _tempval$7[ebp]
	mov	BYTE PTR [ecx+edx], al
$LN34@encode_int:

; 582  :       if (intra_preds[j][1] > intra_preds[j][2]) SWAP(intra_preds[j][1], intra_preds[j][2], int8_t);

	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movsx	eax, BYTE PTR [ecx+edx]
	imul	ecx, DWORD PTR _j$10[ebp], 3
	lea	edx, DWORD PTR _intra_preds$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	movsx	edx, BYTE PTR [edx+ecx]
	cmp	eax, edx
	jle	SHORT $LN35@encode_int
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _tempval$6[ebp], al
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	eax, DWORD PTR _intra_preds$[ebp+eax]
	mov	esi, 1
	shl	esi, 0
	mov	cl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax+esi], cl
	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	mov	al, BYTE PTR _tempval$6[ebp]
	mov	BYTE PTR [ecx+edx], al
$LN35@encode_int:

; 583  : 
; 584  :       // Reduce the index of the signaled prediction mode according to the
; 585  :       // prediction list, as it has been already signaled that it's not one
; 586  :       // of the prediction modes.
; 587  :       for (int i = 2; i >= 0; i--) {

	mov	DWORD PTR _i$5[ebp], 2
	jmp	SHORT $LN16@encode_int
$LN14@encode_int:
	mov	eax, DWORD PTR _i$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN16@encode_int:
	cmp	DWORD PTR _i$5[ebp], 0
	jl	SHORT $LN15@encode_int

; 588  :         tmp_pred = (tmp_pred > intra_preds[j][i] ? tmp_pred - 1 : tmp_pred);

	imul	eax, DWORD PTR _j$10[ebp], 3
	lea	ecx, DWORD PTR _intra_preds$[ebp+eax]
	mov	edx, DWORD PTR _i$5[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	cmp	DWORD PTR _tmp_pred$9[ebp], eax
	jle	SHORT $LN54@encode_int
	mov	ecx, DWORD PTR _tmp_pred$9[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv403[ebp], ecx
	jmp	SHORT $LN55@encode_int
$LN54@encode_int:
	mov	edx, DWORD PTR _tmp_pred$9[ebp]
	mov	DWORD PTR tv403[ebp], edx
$LN55@encode_int:
	mov	eax, DWORD PTR tv403[ebp]
	mov	DWORD PTR _tmp_pred$9[ebp], eax

; 589  :       }

	jmp	SHORT $LN14@encode_int
$LN15@encode_int:

; 590  : 
; 591  :       CABAC_BINS_EP(cabac, tmp_pred, 5, "rem_intra_luma_pred_mode");

	push	5
	mov	eax, DWORD PTR _tmp_pred$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN31@encode_int:

; 592  :     }
; 593  :   }

	jmp	$LN11@encode_int
$LN12@encode_int:

; 594  : 
; 595  :   // Code chroma prediction mode.
; 596  :   if (state->encoder_control->chroma_format != KVZ_CSP_400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	$LN36@encode_int

; 597  :     unsigned pred_mode = 5;

	mov	DWORD PTR _pred_mode$4[ebp], 5

; 598  :     unsigned chroma_pred_modes[4] = {0, 26, 10, 1};

	mov	DWORD PTR _chroma_pred_modes$3[ebp], 0
	mov	DWORD PTR _chroma_pred_modes$3[ebp+4], 26 ; 0000001aH
	mov	DWORD PTR _chroma_pred_modes$3[ebp+8], 10 ; 0000000aH
	mov	DWORD PTR _chroma_pred_modes$3[ebp+12], 1

; 599  : 
; 600  :     if (intra_pred_mode_chroma == intra_pred_mode_actual[0]) {

	movzx	eax, BYTE PTR _intra_pred_mode_chroma$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	ecx, BYTE PTR _intra_pred_mode_actual$[ebp+edx]
	cmp	eax, ecx
	jne	SHORT $LN37@encode_int

; 601  :       pred_mode = 4;

	mov	DWORD PTR _pred_mode$4[ebp], 4
	jmp	$LN38@encode_int
$LN37@encode_int:

; 602  :     } else if (intra_pred_mode_chroma == 34) {

	movzx	eax, BYTE PTR _intra_pred_mode_chroma$[ebp]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN39@encode_int

; 603  :       // Angular 34 mode is possible only if intra pred mode is one of the
; 604  :       // possible chroma pred modes, in which case it is signaled with that
; 605  :       // duplicate mode.
; 606  :       for (int i = 0; i < 4; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN19@encode_int
$LN17@encode_int:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN19@encode_int:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN18@encode_int

; 607  :         if (intra_pred_mode_actual[0] == chroma_pred_modes[i]) pred_mode = i;

	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR _intra_pred_mode_actual$[ebp+ecx]
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _chroma_pred_modes$3[ebp+eax*4]
	jne	SHORT $LN41@encode_int
	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _pred_mode$4[ebp], eax
$LN41@encode_int:

; 608  :       }

	jmp	SHORT $LN17@encode_int
$LN18@encode_int:

; 609  :     } else {

	jmp	SHORT $LN38@encode_int
$LN39@encode_int:

; 610  :       for (int i = 0; i < 4; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN22@encode_int
$LN20@encode_int:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN22@encode_int:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN38@encode_int

; 611  :         if (intra_pred_mode_chroma == chroma_pred_modes[i]) pred_mode = i;

	movzx	eax, BYTE PTR _intra_pred_mode_chroma$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _chroma_pred_modes$3[ebp+ecx*4]
	jne	SHORT $LN42@encode_int
	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR _pred_mode$4[ebp], eax
$LN42@encode_int:

; 612  :       }

	jmp	SHORT $LN20@encode_int
$LN38@encode_int:

; 613  :     }
; 614  : 
; 615  :     // pred_mode == 5 mean intra_pred_mode_chroma is something that can't
; 616  :     // be coded.
; 617  :     assert(pred_mode != 5);

	cmp	DWORD PTR _pred_mode$4[ebp], 5
	jne	SHORT $LN56@encode_int
	mov	eax, DWORD PTR ?__LINE__Var@?0??encode_intra_coding_unit@@9@9
	add	eax, 157				; 0000009dH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BO@LGIDPCFB@?$AAp?$AAr?$AAe?$AAd?$AA_?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN56@encode_int:

; 618  : 
; 619  :     /**
; 620  :      * Table 9-35 - Binarization for intra_chroma_pred_mode
; 621  :      *   intra_chroma_pred_mode  bin_string
; 622  :      *                        4           0
; 623  :      *                        0         100
; 624  :      *                        1         101
; 625  :      *                        2         110
; 626  :      *                        3         111
; 627  :      * Table 9-37 - Assignment of ctxInc to syntax elements with context coded bins
; 628  :      *   intra_chroma_pred_mode[][] = 0, bypass, bypass
; 629  :      */
; 630  :     cabac->cur_ctx = &(cabac->ctx.chroma_pred_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+38]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 631  :     if (pred_mode == 4) {

	cmp	DWORD PTR _pred_mode$4[ebp], 4
	jne	SHORT $LN43@encode_int

; 632  :       CABAC_BIN(cabac, 0, "intra_chroma_pred_mode");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 633  :     } else {

	jmp	SHORT $LN36@encode_int
$LN43@encode_int:

; 634  :       CABAC_BIN(cabac, 1, "intra_chroma_pred_mode");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 635  :       CABAC_BINS_EP(cabac, pred_mode, 2, "intra_chroma_pred_mode");

	push	2
	mov	eax, DWORD PTR _pred_mode$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN36@encode_int:

; 636  :     }
; 637  :   }
; 638  : 
; 639  :   encode_transform_coeff(state, x, y, depth, 0, 0, 0);

	push	0
	push	0
	push	0
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH

; 640  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN64@encode_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 580				; 00000244H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN64@encode_int:
	DD	6
	DD	$LN63@encode_int
$LN63@encode_int:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN57@encode_int
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN58@encode_int
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN59@encode_int
	DD	-104					; ffffff98H
	DD	4
	DD	$LN60@encode_int
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN61@encode_int
	DD	-356					; fffffe9cH
	DD	16					; 00000010H
	DD	$LN62@encode_int
$LN62@encode_int:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN61@encode_int:
	DB	102					; 00000066H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN60@encode_int:
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN59@encode_int:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN58@encode_int:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN57@encode_int:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_encode_intra_coding_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _intra_mode_encryption
_TEXT	SEGMENT
_i$1 = -120						; size = 4
_elem_idx$2 = -105					; size = 1
_scan_dir$3 = -93					; size = 1
_keybits$4 = -81					; size = 1
_nb_elems$ = -72					; size = 3
_sets$ = -60						; size = 51
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_intra_pred_mode$ = 12					; size = 1
_intra_mode_encryption PROC				; COMDAT

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 415  :   const uint8_t sets[3][17] =

	mov	BYTE PTR _sets$[ebp], 0
	mov	BYTE PTR _sets$[ebp+1], 1
	mov	BYTE PTR _sets$[ebp+2], 2
	mov	BYTE PTR _sets$[ebp+3], 3
	mov	BYTE PTR _sets$[ebp+4], 4
	mov	BYTE PTR _sets$[ebp+5], 5
	mov	BYTE PTR _sets$[ebp+6], 15		; 0000000fH
	mov	BYTE PTR _sets$[ebp+7], 16		; 00000010H
	mov	BYTE PTR _sets$[ebp+8], 17		; 00000011H
	mov	BYTE PTR _sets$[ebp+9], 18		; 00000012H
	mov	BYTE PTR _sets$[ebp+10], 19		; 00000013H
	mov	BYTE PTR _sets$[ebp+11], 20		; 00000014H
	mov	BYTE PTR _sets$[ebp+12], 21		; 00000015H
	mov	BYTE PTR _sets$[ebp+13], 31		; 0000001fH
	mov	BYTE PTR _sets$[ebp+14], 32		; 00000020H
	mov	BYTE PTR _sets$[ebp+15], 33		; 00000021H
	mov	BYTE PTR _sets$[ebp+16], 34		; 00000022H
	mov	BYTE PTR _sets$[ebp+17], 22		; 00000016H
	mov	BYTE PTR _sets$[ebp+18], 23		; 00000017H
	mov	BYTE PTR _sets$[ebp+19], 24		; 00000018H
	mov	BYTE PTR _sets$[ebp+20], 25		; 00000019H
	mov	BYTE PTR _sets$[ebp+21], 27		; 0000001bH
	mov	BYTE PTR _sets$[ebp+22], 28		; 0000001cH
	mov	BYTE PTR _sets$[ebp+23], 29		; 0000001dH
	mov	BYTE PTR _sets$[ebp+24], 30		; 0000001eH
	mov	BYTE PTR _sets$[ebp+25], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+26], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+27], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+28], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+29], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+30], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+31], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+32], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+33], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+34], 6
	mov	BYTE PTR _sets$[ebp+35], 7
	mov	BYTE PTR _sets$[ebp+36], 8
	mov	BYTE PTR _sets$[ebp+37], 9
	mov	BYTE PTR _sets$[ebp+38], 11		; 0000000bH
	mov	BYTE PTR _sets$[ebp+39], 12		; 0000000cH
	mov	BYTE PTR _sets$[ebp+40], 13		; 0000000dH
	mov	BYTE PTR _sets$[ebp+41], 14		; 0000000eH
	mov	BYTE PTR _sets$[ebp+42], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+43], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+44], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+45], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+46], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+47], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+48], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+49], 255		; 000000ffH
	mov	BYTE PTR _sets$[ebp+50], 255		; 000000ffH

; 416  :   {
; 417  :     {  0,  1,  2,  3,  4,  5, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34},  /* 17 */
; 418  :     { 22, 23, 24, 25, 27, 28, 29, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1},  /* 9  */
; 419  :     {  6,  7,  8,  9, 11, 12, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1}   /* 9  */
; 420  :   };
; 421  : 
; 422  :   const uint8_t nb_elems[3] = {17, 8, 8};

	mov	BYTE PTR _nb_elems$[ebp], 17		; 00000011H
	mov	BYTE PTR _nb_elems$[ebp+1], 8
	mov	BYTE PTR _nb_elems$[ebp+2], 8

; 423  : 
; 424  :   if (intra_pred_mode == 26 || intra_pred_mode == 10) {

	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 26					; 0000001aH
	je	SHORT $LN7@intra_mode
	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@intra_mode
$LN7@intra_mode:

; 425  :     // correct chroma intra prediction mode
; 426  :     return intra_pred_mode;

	mov	al, BYTE PTR _intra_pred_mode$[ebp]
	jmp	$LN1@intra_mode

; 427  : 
; 428  :   } else {

	jmp	$LN1@intra_mode
$LN5@intra_mode:

; 429  :     uint8_t keybits, scan_dir, elem_idx=0;

	mov	BYTE PTR _elem_idx$2[ebp], 0

; 430  : 
; 431  :     keybits = kvz_crypto_get_key(state->crypto_hdl, 5);

	push	5
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	mov	BYTE PTR _keybits$4[ebp], al

; 432  : 
; 433  :     scan_dir = SCAN_DIAG;

	mov	BYTE PTR _scan_dir$3[ebp], 0

; 434  :     if (intra_pred_mode > 5  && intra_pred_mode < 15) {

	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 5
	jle	SHORT $LN8@intra_mode
	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 15					; 0000000fH
	jge	SHORT $LN8@intra_mode

; 435  :       scan_dir = SCAN_VER;

	mov	BYTE PTR _scan_dir$3[ebp], 2
$LN8@intra_mode:

; 436  :     }
; 437  :     if (intra_pred_mode > 21 && intra_pred_mode < 31) {

	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 21					; 00000015H
	jle	SHORT $LN9@intra_mode
	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	cmp	eax, 31					; 0000001fH
	jge	SHORT $LN9@intra_mode

; 438  :       scan_dir = SCAN_HOR;

	mov	BYTE PTR _scan_dir$3[ebp], 1
$LN9@intra_mode:

; 439  :     }
; 440  : 
; 441  :     for (int i = 0; i < nb_elems[scan_dir]; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@intra_mode
$LN2@intra_mode:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@intra_mode:
	movzx	eax, BYTE PTR _scan_dir$3[ebp]
	movzx	ecx, BYTE PTR _nb_elems$[ebp+eax]
	cmp	DWORD PTR _i$1[ebp], ecx
	jge	SHORT $LN3@intra_mode

; 442  :       if (intra_pred_mode == sets[scan_dir][i]) {

	movzx	eax, BYTE PTR _intra_pred_mode$[ebp]
	movzx	ecx, BYTE PTR _scan_dir$3[ebp]
	imul	edx, ecx, 17
	lea	ecx, DWORD PTR _sets$[ebp+edx]
	mov	edx, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [ecx+edx]
	cmp	eax, ecx
	jne	SHORT $LN10@intra_mode

; 443  :         elem_idx = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _elem_idx$2[ebp], al

; 444  :         break;

	jmp	SHORT $LN3@intra_mode
$LN10@intra_mode:

; 445  :       }
; 446  :     }

	jmp	SHORT $LN2@intra_mode
$LN3@intra_mode:

; 447  : 
; 448  :     keybits = keybits % nb_elems[scan_dir];

	movzx	eax, BYTE PTR _keybits$4[ebp]
	movzx	ecx, BYTE PTR _scan_dir$3[ebp]
	movzx	ecx, BYTE PTR _nb_elems$[ebp+ecx]
	cdq
	idiv	ecx
	mov	BYTE PTR _keybits$4[ebp], dl

; 449  :     keybits = (elem_idx + keybits) % nb_elems[scan_dir];

	movzx	eax, BYTE PTR _elem_idx$2[ebp]
	movzx	ecx, BYTE PTR _keybits$4[ebp]
	add	eax, ecx
	movzx	edx, BYTE PTR _scan_dir$3[ebp]
	movzx	ecx, BYTE PTR _nb_elems$[ebp+edx]
	cdq
	idiv	ecx
	mov	BYTE PTR _keybits$4[ebp], dl

; 450  : 
; 451  :     return sets[scan_dir][keybits];

	movzx	eax, BYTE PTR _scan_dir$3[ebp]
	imul	ecx, eax, 17
	lea	edx, DWORD PTR _sets$[ebp+ecx]
	movzx	eax, BYTE PTR _keybits$4[ebp]
	mov	al, BYTE PTR [edx+eax]
$LN1@intra_mode:

; 452  :   }
; 453  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@intra_mode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@intra_mode:
	DD	2
	DD	$LN14@intra_mode
$LN14@intra_mode:
	DD	-60					; ffffffc4H
	DD	51					; 00000033H
	DD	$LN12@intra_mode
	DD	-72					; ffffffb8H
	DD	3
	DD	$LN13@intra_mode
$LN13@intra_mode:
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN12@intra_mode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_intra_mode_encryption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _encode_inter_prediction_unit
_TEXT	SEGMENT
tv278 = -372						; size = 4
tv236 = -372						; size = 4
tv200 = -372						; size = 4
tv190 = -372						; size = 4
tv154 = -372						; size = 4
tv91 = -372						; size = 4
_mvd_ver$1 = -172					; size = 4
_mvd_hor$2 = -160					; size = 4
_cu_mv_cand$3 = -145					; size = 1
_mv_cand$4 = -136					; size = 8
_symbol$5 = -120					; size = 4
_i$6 = -108						; size = 4
_ref_num$7 = -96					; size = 4
_ref_frame$8 = -84					; size = 4
_ref_LX_size$9 = -69					; size = 1
_ref_list_idx$10 = -60					; size = 4
_inter_dir$11 = -45					; size = 1
_symbol$12 = -36					; size = 4
_ui$13 = -24						; size = 4
_num_cand$ = -12					; size = 2
__$ArrayPad$ = -4					; size = 4
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_cur_cu$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_depth$ = 36						; size = 4
_encode_inter_prediction_unit PROC			; COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 317  :   // Mergeflag
; 318  :   int16_t num_cand = 0;

	xor	eax, eax
	mov	WORD PTR _num_cand$[ebp], ax

; 319  :   cabac->cur_ctx = &(cabac->ctx.cu_merge_flag_ext_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 205				; 000000cdH
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 320  :   CABAC_BIN(cabac, cur_cu->merged, "MergeFlag");

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 321  :   num_cand = state->encoder_control->cfg.max_merge;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR [ecx+2441]
	mov	WORD PTR _num_cand$[ebp], dx

; 322  :   if (cur_cu->merged) { //merge

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN11@encode_int

; 323  :     if (num_cand > 1) {

	movsx	eax, WORD PTR _num_cand$[ebp]
	cmp	eax, 1
	jle	$LN13@encode_int

; 324  :       int32_t ui;
; 325  :       for (ui = 0; ui < num_cand - 1; ui++) {

	mov	DWORD PTR _ui$13[ebp], 0
	jmp	SHORT $LN4@encode_int
$LN2@encode_int:
	mov	eax, DWORD PTR _ui$13[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$13[ebp], eax
$LN4@encode_int:
	movsx	eax, WORD PTR _num_cand$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _ui$13[ebp], eax
	jge	SHORT $LN13@encode_int

; 326  :         int32_t symbol = (ui != cur_cu->merge_idx);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	DWORD PTR _ui$13[ebp], edx
	je	SHORT $LN30@encode_int
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN31@encode_int
$LN30@encode_int:
	mov	DWORD PTR tv91[ebp], 0
$LN31@encode_int:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR _symbol$12[ebp], eax

; 327  :         if (ui == 0) {

	cmp	DWORD PTR _ui$13[ebp], 0
	jne	SHORT $LN14@encode_int

; 328  :           cabac->cur_ctx = &(cabac->ctx.cu_merge_idx_ext_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 204				; 000000ccH
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 329  :           CABAC_BIN(cabac, symbol, "MergeIndex");

	mov	eax, DWORD PTR _symbol$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 330  :         } else {

	jmp	SHORT $LN15@encode_int
$LN14@encode_int:

; 331  :           CABAC_BIN_EP(cabac,symbol,"MergeIndex");

	mov	eax, DWORD PTR _symbol$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN15@encode_int:

; 332  :         }
; 333  :         if (symbol == 0) break;

	cmp	DWORD PTR _symbol$12[ebp], 0
	jne	SHORT $LN16@encode_int
	jmp	SHORT $LN13@encode_int
$LN16@encode_int:

; 334  :       }

	jmp	$LN2@encode_int
$LN13@encode_int:

; 335  :     }
; 336  :   } else {

	jmp	$LN1@encode_int
$LN11@encode_int:

; 337  :     if (state->frame->slicetype == KVZ_SLICE_B) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 0
	jne	$LN17@encode_int

; 338  :       // Code Inter Dir
; 339  :       uint8_t inter_dir = cur_cu->inter.mv_dir-1;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	sub	edx, 1
	mov	BYTE PTR _inter_dir$11[ebp], dl

; 340  : 
; 341  :       if (cur_cu->part_size == SIZE_2Nx2N || (LCU_WIDTH >> depth) != 8) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN19@encode_int
	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	cmp	eax, 8
	je	SHORT $LN18@encode_int
$LN19@encode_int:

; 342  :         cabac->cur_ctx = &(cabac->ctx.inter_dir[depth]);

	mov	eax, DWORD PTR _depth$[ebp]
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+40]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 343  :         CABAC_BIN(cabac, (inter_dir == 2), "inter_pred_idc");

	movzx	eax, BYTE PTR _inter_dir$11[ebp]
	cmp	eax, 2
	jne	SHORT $LN32@encode_int
	mov	DWORD PTR tv154[ebp], 1
	jmp	SHORT $LN33@encode_int
$LN32@encode_int:
	mov	DWORD PTR tv154[ebp], 0
$LN33@encode_int:
	mov	ecx, DWORD PTR tv154[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN18@encode_int:

; 344  :       }
; 345  :       if (inter_dir < 2) {

	movzx	eax, BYTE PTR _inter_dir$11[ebp]
	cmp	eax, 2
	jge	SHORT $LN17@encode_int

; 346  :         cabac->cur_ctx = &(cabac->ctx.inter_dir[4]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+40]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 347  :         CABAC_BIN(cabac, inter_dir, "inter_pred_idc");

	movzx	eax, BYTE PTR _inter_dir$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN17@encode_int:

; 348  :       }
; 349  :     }
; 350  : 
; 351  :     for (uint32_t ref_list_idx = 0; ref_list_idx < 2; ref_list_idx++) {

	mov	DWORD PTR _ref_list_idx$10[ebp], 0
	jmp	SHORT $LN7@encode_int
$LN5@encode_int:
	mov	eax, DWORD PTR _ref_list_idx$10[ebp]
	add	eax, 1
	mov	DWORD PTR _ref_list_idx$10[ebp], eax
$LN7@encode_int:
	cmp	DWORD PTR _ref_list_idx$10[ebp], 2
	jae	$LN1@encode_int

; 352  :       if (!(cur_cu->inter.mv_dir & (1 << ref_list_idx))) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _ref_list_idx$10[ebp]
	shl	eax, cl
	and	edx, eax
	jne	SHORT $LN21@encode_int

; 353  :         continue;

	jmp	SHORT $LN5@encode_int
$LN21@encode_int:

; 354  :       }
; 355  : 
; 356  :       // size of the current reference index list (L0/L1)
; 357  :       uint8_t ref_LX_size = state->frame->ref_LX_size[ref_list_idx];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ref_list_idx$10[ebp]
	mov	al, BYTE PTR [ecx+edx+77]
	mov	BYTE PTR _ref_LX_size$9[ebp], al

; 358  : 
; 359  :       if (ref_LX_size > 1) {

	movzx	eax, BYTE PTR _ref_LX_size$9[ebp]
	cmp	eax, 1
	jle	$LN22@encode_int

; 360  :         // parseRefFrmIdx
; 361  :         int32_t ref_frame = cur_cu->inter.mv_ref[ref_list_idx];

	mov	eax, DWORD PTR _cur_cu$[ebp]
	add	eax, DWORD PTR _ref_list_idx$10[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	mov	DWORD PTR _ref_frame$8[ebp], ecx

; 362  : 
; 363  :         cabac->cur_ctx = &(cabac->ctx.cu_ref_pic_model[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+209]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 364  :         CABAC_BIN(cabac, (ref_frame != 0), "ref_idx_lX");

	cmp	DWORD PTR _ref_frame$8[ebp], 0
	je	SHORT $LN34@encode_int
	mov	DWORD PTR tv190[ebp], 1
	jmp	SHORT $LN35@encode_int
$LN34@encode_int:
	mov	DWORD PTR tv190[ebp], 0
$LN35@encode_int:
	mov	eax, DWORD PTR tv190[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 365  : 
; 366  :         if (ref_frame > 0) {

	cmp	DWORD PTR _ref_frame$8[ebp], 0
	jle	$LN22@encode_int

; 367  :           ref_frame--;

	mov	eax, DWORD PTR _ref_frame$8[ebp]
	sub	eax, 1
	mov	DWORD PTR _ref_frame$8[ebp], eax

; 368  : 
; 369  :           int32_t ref_num = ref_LX_size - 2;

	movzx	eax, BYTE PTR _ref_LX_size$9[ebp]
	sub	eax, 2
	mov	DWORD PTR _ref_num$7[ebp], eax

; 370  : 
; 371  :           for (int32_t i = 0; i < ref_num; ++i) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN10@encode_int
$LN8@encode_int:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN10@encode_int:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _ref_num$7[ebp]
	jge	SHORT $LN22@encode_int

; 372  :             const uint32_t symbol = (i == ref_frame) ? 0 : 1;

	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _ref_frame$8[ebp]
	jne	SHORT $LN36@encode_int
	mov	DWORD PTR tv200[ebp], 0
	jmp	SHORT $LN37@encode_int
$LN36@encode_int:
	mov	DWORD PTR tv200[ebp], 1
$LN37@encode_int:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR _symbol$5[ebp], ecx

; 373  : 
; 374  :             if (i == 0) {

	cmp	DWORD PTR _i$6[ebp], 0
	jne	SHORT $LN24@encode_int

; 375  :               cabac->cur_ctx = &cabac->ctx.cu_ref_pic_model[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+209]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 376  :               CABAC_BIN(cabac, symbol, "ref_idx_lX");

	mov	eax, DWORD PTR _symbol$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 377  :             } else {

	jmp	SHORT $LN25@encode_int
$LN24@encode_int:

; 378  :               CABAC_BIN_EP(cabac, symbol, "ref_idx_lX");

	mov	eax, DWORD PTR _symbol$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN25@encode_int:

; 379  :             }
; 380  :             if (symbol == 0) break;

	cmp	DWORD PTR _symbol$5[ebp], 0
	jne	SHORT $LN26@encode_int
	jmp	SHORT $LN22@encode_int
$LN26@encode_int:

; 381  :           }

	jmp	$LN8@encode_int
$LN22@encode_int:

; 382  :         }
; 383  :       }
; 384  : 
; 385  :       if (state->frame->ref_list != REF_PIC_LIST_1 || cur_cu->inter.mv_dir != 3) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+44]
	cmp	edx, 1
	jne	SHORT $LN28@encode_int
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 6
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 3
	je	$LN27@encode_int
$LN28@encode_int:

; 386  : 
; 387  :         int16_t mv_cand[2][2];
; 388  :         kvz_inter_get_mv_cand_cua(

	movzx	eax, BYTE PTR _ref_list_idx$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mv_cand$4[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_inter_get_mv_cand_cua
	add	esp, 32					; 00000020H

; 389  :             state,
; 390  :             x, y, width, height,
; 391  :             mv_cand, cur_cu, ref_list_idx);
; 392  : 
; 393  :         uint8_t cu_mv_cand = CU_GET_MV_CAND(cur_cu, ref_list_idx);

	cmp	DWORD PTR _ref_list_idx$10[ebp], 0
	jne	SHORT $LN38@encode_int
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	and	cl, 7
	movzx	edx, cl
	mov	DWORD PTR tv236[ebp], edx
	jmp	SHORT $LN39@encode_int
$LN38@encode_int:
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 3
	and	cl, 7
	movzx	edx, cl
	mov	DWORD PTR tv236[ebp], edx
$LN39@encode_int:
	mov	al, BYTE PTR tv236[ebp]
	mov	BYTE PTR _cu_mv_cand$3[ebp], al

; 394  :         const int32_t mvd_hor = cur_cu->inter.mv[ref_list_idx][0] - mv_cand[cu_mv_cand][0];

	mov	eax, DWORD PTR _ref_list_idx$10[ebp]
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	imul	ecx, eax, 0
	movsx	edx, WORD PTR [edx+ecx]
	movzx	eax, BYTE PTR _cu_mv_cand$3[ebp]
	lea	ecx, DWORD PTR _mv_cand$4[ebp+eax*4]
	mov	eax, 2
	imul	eax, eax, 0
	movsx	ecx, WORD PTR [ecx+eax]
	sub	edx, ecx
	mov	DWORD PTR _mvd_hor$2[ebp], edx

; 395  :         const int32_t mvd_ver = cur_cu->inter.mv[ref_list_idx][1] - mv_cand[cu_mv_cand][1];

	mov	eax, DWORD PTR _ref_list_idx$10[ebp]
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, 2
	shl	eax, 0
	movsx	ecx, WORD PTR [edx+eax]
	movzx	edx, BYTE PTR _cu_mv_cand$3[ebp]
	lea	eax, DWORD PTR _mv_cand$4[ebp+edx*4]
	mov	edx, 2
	shl	edx, 0
	movsx	eax, WORD PTR [eax+edx]
	sub	ecx, eax
	mov	DWORD PTR _mvd_ver$1[ebp], ecx

; 396  : 
; 397  :         kvz_encode_mvd(state, cabac, mvd_hor, mvd_ver);

	mov	eax, DWORD PTR _mvd_ver$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _mvd_hor$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encode_mvd
	add	esp, 16					; 00000010H
$LN27@encode_int:

; 398  :       }
; 399  : 
; 400  :       // Signal which candidate MV to use
; 401  :       kvz_cabac_write_unary_max_symbol(cabac,

	cmp	DWORD PTR _ref_list_idx$10[ebp], 0
	jne	SHORT $LN40@encode_int
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	and	cl, 7
	movzx	edx, cl
	mov	DWORD PTR tv278[ebp], edx
	jmp	SHORT $LN41@encode_int
$LN40@encode_int:
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+18]
	shr	cl, 3
	and	cl, 7
	movzx	edx, cl
	mov	DWORD PTR tv278[ebp], edx
$LN41@encode_int:
	push	1
	push	1
	mov	eax, DWORD PTR tv278[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	add	ecx, 211				; 000000d3H
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_write_unary_max_symbol
	add	esp, 20					; 00000014H

; 402  :                                        cabac->ctx.mvp_idx_model,
; 403  :                                        CU_GET_MV_CAND(cur_cu, ref_list_idx),
; 404  :                                        1,
; 405  :                                        AMVP_MAX_NUM_CANDS - 1);
; 406  : 
; 407  :     } // for ref_list

	jmp	$LN5@encode_int
$LN1@encode_int:

; 408  :   } // if !merge
; 409  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@encode_int
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN44@encode_int:
	DD	1
	DD	$LN43@encode_int
$LN43@encode_int:
	DD	-136					; ffffff78H
	DD	8
	DD	$LN42@encode_int
$LN42@encode_int:
	DB	109					; 0000006dH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_encode_inter_prediction_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _encode_transform_coeff
_TEXT	SEGMENT
tv328 = -436						; size = 4
tv315 = -436						; size = 4
tv306 = -436						; size = 4
tv275 = -436						; size = 4
tv136 = -436						; size = 4
tv91 = -436						; size = 4
_cabac$1 = -236						; size = 4
_qp_delta_abs$2 = -224					; size = 4
_qp_delta$3 = -212					; size = 4
_qp_pred$4 = -200					; size = 4
_y2$5 = -188						; size = 4
_x2$6 = -176						; size = 4
_offset$7 = -161					; size = 1
_cb_flag_v$ = -152					; size = 4
_cb_flag_u$ = -140					; size = 4
_cb_flag_y$ = -128					; size = 4
_split$ = -113						; size = 1
_max_tr_depth$ = -104					; size = 4
_intra_split_flag$ = -92				; size = 4
_cur_cu$ = -80						; size = 4
_y_cu$ = -68						; size = 4
_x_cu$ = -56						; size = 4
_cur_pu$ = -44						; size = 4
_frame$ = -32						; size = 4
_ctrl$ = -20						; size = 4
_cabac$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 1
_tr_depth$ = 24						; size = 1
_parent_coeff_u$ = 28					; size = 1
_parent_coeff_v$ = 32					; size = 1
_encode_transform_coeff PROC				; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 201  :   cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 202  :   const encoder_control_t *const ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 203  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 204  : 
; 205  :   const cu_info_t *cur_pu = kvz_cu_array_at_const(frame->cu_array, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_pu$[ebp], eax

; 206  :   // Round coordinates down to a multiple of 8 to get the location of the
; 207  :   // containing CU.
; 208  :   const int x_cu = 8 * (x / 8);

	mov	eax, DWORD PTR _x$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	shl	eax, 3
	mov	DWORD PTR _x_cu$[ebp], eax

; 209  :   const int y_cu = 8 * (y / 8);

	mov	eax, DWORD PTR _y$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	shl	eax, 3
	mov	DWORD PTR _y_cu$[ebp], eax

; 210  :   const cu_info_t *cur_cu = kvz_cu_array_at_const(frame->cu_array, x_cu, y_cu);

	mov	eax, DWORD PTR _y_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_cu$[ebp], eax

; 211  : 
; 212  :   // NxN signifies implicit transform split at the first transform level.
; 213  :   // There is a similar implicit split for inter, but it is only used when
; 214  :   // transform hierarchy is not in use.
; 215  :   int intra_split_flag = (cur_cu->type == CU_INTRA && cur_cu->part_size == SIZE_NxN);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN19@encode_tra
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	edx, 3
	jne	SHORT $LN19@encode_tra
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN20@encode_tra
$LN19@encode_tra:
	mov	DWORD PTR tv91[ebp], 0
$LN20@encode_tra:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR _intra_split_flag$[ebp], eax

; 216  : 
; 217  :   // The implicit split by intra NxN is not counted towards max_tr_depth.
; 218  :   int max_tr_depth;
; 219  :   if (cur_cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN2@encode_tra

; 220  :     max_tr_depth = ctrl->cfg.tr_depth_intra + intra_split_flag;

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, DWORD PTR _intra_split_flag$[ebp]
	mov	DWORD PTR _max_tr_depth$[ebp], ecx

; 221  :   } else {

	jmp	SHORT $LN3@encode_tra
$LN2@encode_tra:

; 222  :     max_tr_depth = ctrl->tr_depth_inter;

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+4588]
	mov	DWORD PTR _max_tr_depth$[ebp], ecx
$LN3@encode_tra:

; 223  :   }
; 224  : 
; 225  :   int8_t split = (cur_cu->tr_depth > depth);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	and	cl, 7
	movzx	edx, cl
	movsx	eax, BYTE PTR _depth$[ebp]
	cmp	edx, eax
	jle	SHORT $LN21@encode_tra
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN22@encode_tra
$LN21@encode_tra:
	mov	DWORD PTR tv136[ebp], 0
$LN22@encode_tra:
	mov	cl, BYTE PTR tv136[ebp]
	mov	BYTE PTR _split$[ebp], cl

; 226  : 
; 227  :   const int cb_flag_y = cbf_is_set(cur_pu->cbf, depth, COLOR_Y);

	push	0
	movsx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cb_flag_y$[ebp], eax

; 228  :   const int cb_flag_u = cbf_is_set(cur_cu->cbf, depth, COLOR_U);

	push	1
	movsx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cb_flag_u$[ebp], eax

; 229  :   const int cb_flag_v = cbf_is_set(cur_cu->cbf, depth, COLOR_V);

	push	2
	movsx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cb_flag_v$[ebp], eax

; 230  : 
; 231  :   // The split_transform_flag is not signaled when:
; 232  :   // - transform size is greater than 32 (depth == 0)
; 233  :   // - transform size is 4 (depth == MAX_PU_DEPTH)
; 234  :   // - transform depth is max
; 235  :   // - cu is intra NxN and it's the first split
; 236  :   if (depth > 0 &&
; 237  :       depth < MAX_PU_DEPTH &&
; 238  :       tr_depth < max_tr_depth &&

	movsx	eax, BYTE PTR _depth$[ebp]
	test	eax, eax
	jle	SHORT $LN4@encode_tra
	movsx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 4
	jge	SHORT $LN4@encode_tra
	movsx	eax, BYTE PTR _tr_depth$[ebp]
	cmp	eax, DWORD PTR _max_tr_depth$[ebp]
	jge	SHORT $LN4@encode_tra
	cmp	DWORD PTR _intra_split_flag$[ebp], 0
	je	SHORT $LN5@encode_tra
	movsx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	je	SHORT $LN4@encode_tra
$LN5@encode_tra:

; 239  :       !(intra_split_flag && tr_depth == 0))
; 240  :   {
; 241  :     cabac->cur_ctx = &(cabac->ctx.trans_subdiv_model[5 - ((kvz_g_convert_to_bit[LCU_WIDTH] + 2) - depth)]);

	mov	eax, 1
	shl	eax, 6
	movsx	ecx, BYTE PTR _kvz_g_convert_to_bit[eax]
	add	ecx, 2
	movsx	edx, BYTE PTR _depth$[ebp]
	sub	ecx, edx
	mov	eax, 5
	sub	eax, ecx
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+45]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 242  :     CABAC_BIN(cabac, split, "split_transform_flag");

	movsx	eax, BYTE PTR _split$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN4@encode_tra:

; 243  :   }
; 244  : 
; 245  :   // Chroma cb flags are not signaled when one of the following:
; 246  :   // - transform size is 4 (2x2 chroma transform doesn't exist)
; 247  :   // - they have already been signaled to 0 previously
; 248  :   // When they are not present they are inferred to be 0, except for size 4
; 249  :   // when the flags from previous level are used.
; 250  :   if (depth < MAX_PU_DEPTH && state->encoder_control->chroma_format != KVZ_CSP_400) {

	movsx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 4
	jge	SHORT $LN6@encode_tra
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+2536], 0
	je	SHORT $LN6@encode_tra

; 251  :     cabac->cur_ctx = &(cabac->ctx.qt_cbf_model_chroma[tr_depth]);

	movsx	eax, BYTE PTR _tr_depth$[ebp]
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+52]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 252  :     if (tr_depth == 0 || parent_coeff_u) {

	movsx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	je	SHORT $LN8@encode_tra
	movzx	eax, BYTE PTR _parent_coeff_u$[ebp]
	test	eax, eax
	je	SHORT $LN7@encode_tra
$LN8@encode_tra:

; 253  :       CABAC_BIN(cabac, cb_flag_u, "cbf_cb");

	mov	eax, DWORD PTR _cb_flag_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN7@encode_tra:

; 254  :     }
; 255  :     if (tr_depth == 0 || parent_coeff_v) {

	movsx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	je	SHORT $LN10@encode_tra
	movzx	eax, BYTE PTR _parent_coeff_v$[ebp]
	test	eax, eax
	je	SHORT $LN6@encode_tra
$LN10@encode_tra:

; 256  :       CABAC_BIN(cabac, cb_flag_v, "cbf_cr");

	mov	eax, DWORD PTR _cb_flag_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN6@encode_tra:

; 257  :     }
; 258  :   }
; 259  : 
; 260  :   if (split) {

	movsx	eax, BYTE PTR _split$[ebp]
	test	eax, eax
	je	$LN11@encode_tra

; 261  :     uint8_t offset = LCU_WIDTH >> (depth + 1);

	movsx	ecx, BYTE PTR _depth$[ebp]
	add	ecx, 1
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	BYTE PTR _offset$7[ebp], al

; 262  :     int x2 = x + offset;

	movzx	eax, BYTE PTR _offset$7[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _x2$6[ebp], eax

; 263  :     int y2 = y + offset;

	movzx	eax, BYTE PTR _offset$7[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _y2$5[ebp], eax

; 264  :     encode_transform_coeff(state, x,  y,  depth + 1, tr_depth + 1, cb_flag_u, cb_flag_v);

	movzx	eax, BYTE PTR _cb_flag_v$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cb_flag_u$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _tr_depth$[ebp]
	add	edx, 1
	push	edx
	movsx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH

; 265  :     encode_transform_coeff(state, x2, y,  depth + 1, tr_depth + 1, cb_flag_u, cb_flag_v);

	movzx	eax, BYTE PTR _cb_flag_v$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cb_flag_u$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _tr_depth$[ebp]
	add	edx, 1
	push	edx
	movsx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$6[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH

; 266  :     encode_transform_coeff(state, x,  y2, depth + 1, tr_depth + 1, cb_flag_u, cb_flag_v);

	movzx	eax, BYTE PTR _cb_flag_v$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cb_flag_u$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _tr_depth$[ebp]
	add	edx, 1
	push	edx
	movsx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y2$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH

; 267  :     encode_transform_coeff(state, x2, y2, depth + 1, tr_depth + 1, cb_flag_u, cb_flag_v);

	movzx	eax, BYTE PTR _cb_flag_v$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cb_flag_u$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _tr_depth$[ebp]
	add	edx, 1
	push	edx
	movsx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _y2$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _x2$6[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH

; 268  :     return;

	jmp	$LN1@encode_tra
$LN11@encode_tra:

; 269  :   }
; 270  : 
; 271  :   // Luma coded block flag is signaled when one of the following:
; 272  :   // - prediction mode is intra
; 273  :   // - transform depth > 0
; 274  :   // - we have chroma coefficients at this level
; 275  :   // When it is not present, it is inferred to be 1.
; 276  :   if (cur_cu->type == CU_INTRA || tr_depth > 0 || cb_flag_u || cb_flag_v) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	je	SHORT $LN13@encode_tra
	movsx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jg	SHORT $LN13@encode_tra
	cmp	DWORD PTR _cb_flag_u$[ebp], 0
	jne	SHORT $LN13@encode_tra
	cmp	DWORD PTR _cb_flag_v$[ebp], 0
	je	SHORT $LN12@encode_tra
$LN13@encode_tra:

; 277  :       cabac->cur_ctx = &(cabac->ctx.qt_cbf_model_luma[!tr_depth]);

	movsx	eax, BYTE PTR _tr_depth$[ebp]
	test	eax, eax
	jne	SHORT $LN23@encode_tra
	mov	DWORD PTR tv275[ebp], 1
	jmp	SHORT $LN24@encode_tra
$LN23@encode_tra:
	mov	DWORD PTR tv275[ebp], 0
$LN24@encode_tra:
	mov	ecx, DWORD PTR tv275[ebp]
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+48]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 278  :       CABAC_BIN(cabac, cb_flag_y, "cbf_luma");

	mov	eax, DWORD PTR _cb_flag_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN12@encode_tra:

; 279  :   }
; 280  : 
; 281  :   if (cb_flag_y | cb_flag_u | cb_flag_v) {

	mov	eax, DWORD PTR _cb_flag_y$[ebp]
	or	eax, DWORD PTR _cb_flag_u$[ebp]
	or	eax, DWORD PTR _cb_flag_v$[ebp]
	je	$LN1@encode_tra

; 282  :     if (state->must_code_qp_delta) {

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax+313]
	test	ecx, ecx
	je	$LN15@encode_tra

; 283  :       const int qp_pred      = kvz_get_cu_ref_qp(state, x_cu, y_cu, state->last_qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+314]
	push	ecx
	mov	edx, DWORD PTR _y_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _x_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_kvz_get_cu_ref_qp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _qp_pred$4[ebp], eax

; 284  :       const int qp_delta     = cur_cu->qp - qp_pred;

	mov	eax, DWORD PTR _cur_cu$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	sub	ecx, DWORD PTR _qp_pred$4[ebp]
	mov	DWORD PTR _qp_delta$3[ebp], ecx

; 285  :       // Possible deltaQP range depends on bit depth as stated in HEVC specification.
; 286  :       assert(qp_delta >= KVZ_QP_DELTA_MIN && qp_delta <= KVZ_QP_DELTA_MAX && "QP delta not in valid range.");

	cmp	DWORD PTR _qp_delta$3[ebp], -26		; ffffffe6H
	jl	SHORT $LN25@encode_tra
	cmp	DWORD PTR _qp_delta$3[ebp], 25		; 00000019H
	jg	SHORT $LN25@encode_tra
	mov	eax, OFFSET ??_C@_0BN@BBIINLOO@QP?5delta?5not?5in?5valid?5range?4@
	test	eax, eax
	jne	SHORT $LN26@encode_tra
$LN25@encode_tra:
	mov	ecx, DWORD PTR ?__LINE__Var@?0??encode_transform_coeff@@9@9
	add	ecx, 86					; 00000056H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1LO@DGNBFNMJ@?$AAq?$AAp?$AA_?$AAd?$AAe?$AAl?$AAt?$AAa?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAK?$AAV?$AAZ@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@encode_tra:

; 287  : 
; 288  :       const int qp_delta_abs = ABS(qp_delta);

	cmp	DWORD PTR _qp_delta$3[ebp], 0
	jl	SHORT $LN27@encode_tra
	mov	eax, DWORD PTR _qp_delta$3[ebp]
	mov	DWORD PTR tv306[ebp], eax
	jmp	SHORT $LN28@encode_tra
$LN27@encode_tra:
	mov	ecx, DWORD PTR _qp_delta$3[ebp]
	neg	ecx
	mov	DWORD PTR tv306[ebp], ecx
$LN28@encode_tra:
	mov	edx, DWORD PTR tv306[ebp]
	mov	DWORD PTR _qp_delta_abs$2[ebp], edx

; 289  :       cabac_data_t* cabac    = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$1[ebp], eax

; 290  : 
; 291  :       // cu_qp_delta_abs prefix
; 292  :       cabac->cur_ctx = &cabac->ctx.cu_qp_delta_abs[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+56]
	mov	ecx, DWORD PTR _cabac$1[ebp]
	mov	DWORD PTR [ecx], eax

; 293  :       kvz_cabac_write_unary_max_symbol(cabac, cabac->ctx.cu_qp_delta_abs, MIN(qp_delta_abs, 5), 1, 5);

	cmp	DWORD PTR _qp_delta_abs$2[ebp], 5
	jge	SHORT $LN29@encode_tra
	mov	eax, DWORD PTR _qp_delta_abs$2[ebp]
	mov	DWORD PTR tv315[ebp], eax
	jmp	SHORT $LN30@encode_tra
$LN29@encode_tra:
	mov	DWORD PTR tv315[ebp], 5
$LN30@encode_tra:
	push	5
	push	1
	mov	ecx, DWORD PTR tv315[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$1[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR _cabac$1[ebp]
	push	eax
	call	_kvz_cabac_write_unary_max_symbol
	add	esp, 20					; 00000014H

; 294  : 
; 295  :       if (qp_delta_abs >= 5) {

	cmp	DWORD PTR _qp_delta_abs$2[ebp], 5
	jl	SHORT $LN16@encode_tra

; 296  :         // cu_qp_delta_abs suffix
; 297  :         kvz_cabac_write_ep_ex_golomb(state, cabac, qp_delta_abs - 5, 0);

	push	0
	mov	eax, DWORD PTR _qp_delta_abs$2[ebp]
	sub	eax, 5
	push	eax
	mov	ecx, DWORD PTR _cabac$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cabac_write_ep_ex_golomb
	add	esp, 16					; 00000010H
$LN16@encode_tra:

; 298  :       }
; 299  : 
; 300  :       if (qp_delta != 0) {

	cmp	DWORD PTR _qp_delta$3[ebp], 0
	je	SHORT $LN17@encode_tra

; 301  :         CABAC_BIN_EP(cabac, (qp_delta >= 0 ? 0 : 1), "qp_delta_sign_flag");

	cmp	DWORD PTR _qp_delta$3[ebp], 0
	jl	SHORT $LN31@encode_tra
	mov	DWORD PTR tv328[ebp], 0
	jmp	SHORT $LN32@encode_tra
$LN31@encode_tra:
	mov	DWORD PTR tv328[ebp], 1
$LN32@encode_tra:
	mov	eax, DWORD PTR tv328[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$1[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN17@encode_tra:

; 302  :       }
; 303  : 
; 304  :       state->must_code_qp_delta = false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+313], 0
$LN15@encode_tra:

; 305  :     }
; 306  : 
; 307  :     encode_transform_unit(state, x, y, depth);

	movsx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_unit
	add	esp, 16					; 00000010H
$LN1@encode_tra:

; 308  :   }
; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_transform_coeff ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _encode_transform_unit
_TEXT	SEGMENT
tv179 = -368						; size = 4
tv177 = -364						; size = 4
tv79 = -364						; size = 4
_coeff_v$1 = -164					; size = 4
_coeff_u$2 = -152					; size = 4
_y_local$3 = -140					; size = 4
_x_local$4 = -128					; size = 4
_chroma_cbf_set$ = -113					; size = 1
_coeff_y$5 = -104					; size = 4
_y_local$6 = -92					; size = 4
_x_local$7 = -80					; size = 4
_cbf_y$ = -68						; size = 4
_scan_idx$ = -53					; size = 1
_cur_pu$ = -44						; size = 4
_width_c$ = -29						; size = 1
_width$ = -17						; size = 1
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_encode_transform_unit PROC				; COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 120  :   assert(depth >= 1 && depth <= MAX_PU_DEPTH);

	cmp	DWORD PTR _depth$[ebp], 1
	jl	SHORT $LN11@encode_tra
	cmp	DWORD PTR _depth$[ebp], 4
	jle	SHORT $LN12@encode_tra
$LN11@encode_tra:
	mov	eax, DWORD PTR ?__LINE__Var@?0??encode_transform_unit@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1EI@CCOKBJLK@?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@encode_tra:

; 121  : 
; 122  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 123  :   const uint8_t width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	BYTE PTR _width$[ebp], al

; 124  :   const uint8_t width_c = (depth == MAX_PU_DEPTH ? width : width / 2);

	cmp	DWORD PTR _depth$[ebp], 4
	jne	SHORT $LN13@encode_tra
	movzx	eax, BYTE PTR _width$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN14@encode_tra
$LN13@encode_tra:
	movzx	eax, BYTE PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv79[ebp], eax
$LN14@encode_tra:
	mov	cl, BYTE PTR tv79[ebp]
	mov	BYTE PTR _width_c$[ebp], cl

; 125  : 
; 126  :   const cu_info_t *cur_pu = kvz_cu_array_at_const(frame->cu_array, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_pu$[ebp], eax

; 127  : 
; 128  :   int8_t scan_idx = kvz_get_scan_order(cur_pu->type, cur_pu->intra.mode, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movsx	edx, BYTE PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	call	_kvz_get_scan_order
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _scan_idx$[ebp], al

; 129  : 
; 130  :   int cbf_y = cbf_is_set(cur_pu->cbf, depth, COLOR_Y);

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cbf_y$[ebp], eax

; 131  : 
; 132  :   if (cbf_y) {

	cmp	DWORD PTR _cbf_y$[ebp], 0
	je	SHORT $LN2@encode_tra

; 133  :     int x_local = x % LCU_WIDTH;

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN19@encode_tra
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN19@encode_tra:
	mov	DWORD PTR _x_local$7[ebp], eax

; 134  :     int y_local = y % LCU_WIDTH;

	mov	eax, DWORD PTR _y$[ebp]
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN20@encode_tra
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN20@encode_tra:
	mov	DWORD PTR _y_local$6[ebp], eax

; 135  :     const coeff_t *coeff_y = &state->coeff->y[xy_to_zorder(LCU_WIDTH, x_local, y_local)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	esi, DWORD PTR [eax+316]
	mov	ecx, DWORD PTR _y_local$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$7[ebp]
	push	edx
	push	64					; 00000040H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _coeff_y$5[ebp], eax

; 136  : 
; 137  :     // CoeffNxN
; 138  :     // Residual Coding
; 139  :     kvz_encode_coeff_nxn(state,

	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax+2]
	and	cl, 1
	mov	esi, esp
	movzx	edx, cl
	push	edx
	movzx	eax, BYTE PTR _scan_idx$[ebp]
	push	eax
	push	0
	movzx	ecx, BYTE PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coeff_y$5[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	DWORD PTR _kvz_encode_coeff_nxn
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@encode_tra:

; 140  :                          &state->cabac,
; 141  :                          coeff_y,
; 142  :                          width,
; 143  :                          0,
; 144  :                          scan_idx,
; 145  :                          cur_pu->tr_skip);
; 146  :   }
; 147  : 
; 148  :   if (depth == MAX_DEPTH + 1) {

	cmp	DWORD PTR _depth$[ebp], 4
	jne	SHORT $LN3@encode_tra

; 149  :     // For size 4x4 luma transform the corresponding chroma transforms are
; 150  :     // also of size 4x4 covering 8x8 luma pixels. The residual is coded in
; 151  :     // the last transform unit.
; 152  :     if (x % 8 == 0 || y % 8 == 0) {

	mov	eax, DWORD PTR _x$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN21@encode_tra
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN21@encode_tra:
	test	eax, eax
	je	SHORT $LN6@encode_tra
	mov	eax, DWORD PTR _y$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN22@encode_tra
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN22@encode_tra:
	test	eax, eax
	jne	SHORT $LN4@encode_tra
$LN6@encode_tra:

; 153  :       // Not the last luma transform block so there is nothing more to do.
; 154  :       return;

	jmp	$LN1@encode_tra

; 155  :     } else {

	jmp	SHORT $LN3@encode_tra
$LN4@encode_tra:

; 156  :       // Time to to code the chroma transform blocks. Move to the top-left
; 157  :       // corner of the block.
; 158  :       x -= 4;

	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 4
	mov	DWORD PTR _x$[ebp], eax

; 159  :       y -= 4;

	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, 4
	mov	DWORD PTR _y$[ebp], eax

; 160  :       cur_pu = kvz_cu_array_at_const(frame->cu_array, x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_pu$[ebp], eax
$LN3@encode_tra:

; 161  :     }
; 162  :   }
; 163  : 
; 164  :   bool chroma_cbf_set = cbf_is_set(cur_pu->cbf, depth, COLOR_U) ||

	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@encode_tra
	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@encode_tra
	mov	DWORD PTR tv177[ebp], 0
	jmp	SHORT $LN16@encode_tra
$LN15@encode_tra:
	mov	DWORD PTR tv177[ebp], 1
$LN16@encode_tra:
	cmp	DWORD PTR tv177[ebp], 0
	jne	SHORT $LN17@encode_tra
	mov	DWORD PTR tv179[ebp], 0
	jmp	SHORT $LN18@encode_tra
$LN17@encode_tra:
	mov	DWORD PTR tv179[ebp], 1
$LN18@encode_tra:
	mov	al, BYTE PTR tv179[ebp]
	mov	BYTE PTR _chroma_cbf_set$[ebp], al

; 165  :                         cbf_is_set(cur_pu->cbf, depth, COLOR_V);
; 166  :   if (chroma_cbf_set) {

	movzx	eax, BYTE PTR _chroma_cbf_set$[ebp]
	test	eax, eax
	je	$LN1@encode_tra

; 167  :     int x_local = (x >> 1) % LCU_WIDTH_C;

	mov	eax, DWORD PTR _x$[ebp]
	sar	eax, 1
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN23@encode_tra
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN23@encode_tra:
	mov	DWORD PTR _x_local$4[ebp], eax

; 168  :     int y_local = (y >> 1) % LCU_WIDTH_C;

	mov	eax, DWORD PTR _y$[ebp]
	sar	eax, 1
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN24@encode_tra
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN24@encode_tra:
	mov	DWORD PTR _y_local$3[ebp], eax

; 169  :     scan_idx = kvz_get_scan_order(cur_pu->type, cur_pu->intra.mode_chroma, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movsx	edx, BYTE PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _cur_pu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	push	edx
	call	_kvz_get_scan_order
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _scan_idx$[ebp], al

; 170  : 
; 171  :     const coeff_t *coeff_u = &state->coeff->u[xy_to_zorder(LCU_WIDTH_C, x_local, y_local)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	esi, DWORD PTR [eax+316]
	mov	ecx, DWORD PTR _y_local$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$4[ebp]
	push	edx
	push	32					; 00000020H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+eax*2+8192]
	mov	DWORD PTR _coeff_u$2[ebp], eax

; 172  :     const coeff_t *coeff_v = &state->coeff->v[xy_to_zorder(LCU_WIDTH_C, x_local, y_local)];

	mov	eax, DWORD PTR _state$[ebp]
	mov	esi, DWORD PTR [eax+316]
	mov	ecx, DWORD PTR _y_local$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_local$4[ebp]
	push	edx
	push	32					; 00000020H
	call	_xy_to_zorder
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+eax*2+10240]
	mov	DWORD PTR _coeff_v$1[ebp], eax

; 173  : 
; 174  :     if (cbf_is_set(cur_pu->cbf, depth, COLOR_U)) {

	push	1
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN8@encode_tra

; 175  :       kvz_encode_coeff_nxn(state, &state->cabac, coeff_u, width_c, 2, scan_idx, 0);

	mov	esi, esp
	push	0
	movzx	eax, BYTE PTR _scan_idx$[ebp]
	push	eax
	push	2
	movzx	ecx, BYTE PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coeff_u$2[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	DWORD PTR _kvz_encode_coeff_nxn
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@encode_tra:

; 176  :     }
; 177  : 
; 178  :     if (cbf_is_set(cur_pu->cbf, depth, COLOR_V)) {

	push	2
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_pu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@encode_tra

; 179  :       kvz_encode_coeff_nxn(state, &state->cabac, coeff_v, width_c, 2, scan_idx, 0);

	mov	esi, esp
	push	0
	movzx	eax, BYTE PTR _scan_idx$[ebp]
	push	eax
	push	2
	movzx	ecx, BYTE PTR _width_c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coeff_v$1[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	DWORD PTR _kvz_encode_coeff_nxn
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@encode_tra:

; 180  :     }
; 181  :   }
; 182  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 368				; 00000170H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encode_transform_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\kvz_math.h
;	COMDAT _kvz_math_floor_log2
_TEXT	SEGMENT
tv76 = -244						; size = 4
_shift$1 = -44						; size = 4
_bits$2 = -32						; size = 4
_i$3 = -20						; size = 4
_result$ = -8						; size = 4
_value$ = 8						; size = 4
_kvz_math_floor_log2 PROC				; COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4AC213E_kvz_math@h
	call	@__CheckForDebuggerJustMyCode@4

; 45   :   assert(value > 0);

	cmp	DWORD PTR _value$[ebp], 0
	ja	SHORT $LN6@kvz_math_f
	mov	eax, DWORD PTR ?__LINE__Var@?0??kvz_math_floor_log2@@9@9
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GO@JKKFCEKE@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1BE@NLJBPLFJ@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@kvz_math_f:

; 46   : 
; 47   :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 48   : 
; 49   :   for (int i = 4; i >= 0; --i) {

	mov	DWORD PTR _i$3[ebp], 4
	jmp	SHORT $LN4@kvz_math_f
$LN2@kvz_math_f:
	mov	eax, DWORD PTR _i$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@kvz_math_f:
	cmp	DWORD PTR _i$3[ebp], 0
	jl	SHORT $LN3@kvz_math_f

; 50   :     unsigned bits = 1ull << i;

	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _i$3[ebp]
	call	__allshl
	mov	DWORD PTR _bits$2[ebp], eax

; 51   :     unsigned shift = value >= (1 << bits) ? bits : 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _bits$2[ebp]
	shl	eax, cl
	cmp	DWORD PTR _value$[ebp], eax
	jb	SHORT $LN7@kvz_math_f
	mov	ecx, DWORD PTR _bits$2[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN8@kvz_math_f
$LN7@kvz_math_f:
	mov	DWORD PTR tv76[ebp], 0
$LN8@kvz_math_f:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _shift$1[ebp], edx

; 52   :     result += shift;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, DWORD PTR _shift$1[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 53   :     value >>= shift;

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _shift$1[ebp]
	shr	eax, cl
	mov	DWORD PTR _value$[ebp], eax

; 54   :   }

	jmp	SHORT $LN2@kvz_math_f
$LN3@kvz_math_f:

; 55   : 
; 56   :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_math_floor_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _kvz_encode_last_significant_xy
_TEXT	SEGMENT
tv91 = -364						; size = 4
tv86 = -364						; size = 4
tv80 = -364						; size = 4
tv74 = -364						; size = 4
_bits$1 = -164						; size = 4
_suffix$2 = -152					; size = 4
_bits$3 = -140						; size = 4
_suffix$4 = -128					; size = 4
_last_y$5 = -116					; size = 4
_last_x$6 = -104					; size = 4
_group_idx_y$ = -92					; size = 4
_group_idx_x$ = -80					; size = 4
_tempval$7 = -65					; size = 1
_base_ctx_y$ = -56					; size = 4
_base_ctx_x$ = -44					; size = 4
_shift$ = -29						; size = 1
_ctx_offset$ = -17					; size = 1
_index$ = -8						; size = 4
_cabac$ = 8						; size = 4
_lastpos_x$ = 12					; size = 1
_lastpos_y$ = 16					; size = 1
_width$ = 20						; size = 1
_height$ = 24						; size = 1
_type$ = 28						; size = 1
_scan$ = 32						; size = 1
_kvz_encode_last_significant_xy PROC			; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   :   const int index = kvz_math_floor_log2(width) - 2;

	movzx	eax, BYTE PTR _width$[ebp]
	push	eax
	call	_kvz_math_floor_log2
	add	esp, 4
	sub	eax, 2
	mov	DWORD PTR _index$[ebp], eax

; 69   :   uint8_t ctx_offset = type ? 0 : (index * 3 + (index + 1) / 4);

	movzx	eax, BYTE PTR _type$[ebp]
	test	eax, eax
	je	SHORT $LN14@kvz_encode
	mov	DWORD PTR tv74[ebp], 0
	jmp	SHORT $LN15@kvz_encode
$LN14@kvz_encode:
	imul	ecx, DWORD PTR _index$[ebp], 3
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	ecx, eax
	mov	DWORD PTR tv74[ebp], ecx
$LN15@kvz_encode:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _ctx_offset$[ebp], dl

; 70   :   uint8_t shift = type ? index : (index + 3) / 4;

	movzx	eax, BYTE PTR _type$[ebp]
	test	eax, eax
	je	SHORT $LN16@kvz_encode
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN17@kvz_encode
$LN16@kvz_encode:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR tv80[ebp], eax
$LN17@kvz_encode:
	mov	dl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _shift$[ebp], dl

; 71   : 
; 72   :   cabac_ctx_t *base_ctx_x = (type ? cabac->ctx.cu_ctx_last_x_chroma : cabac->ctx.cu_ctx_last_x_luma);

	movzx	eax, BYTE PTR _type$[ebp]
	test	eax, eax
	je	SHORT $LN18@kvz_encode
	mov	ecx, DWORD PTR _cabac$[ebp]
	add	ecx, 155				; 0000009bH
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN19@kvz_encode
$LN18@kvz_encode:
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 140				; 0000008cH
	mov	DWORD PTR tv86[ebp], edx
$LN19@kvz_encode:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _base_ctx_x$[ebp], eax

; 73   :   cabac_ctx_t *base_ctx_y = (type ? cabac->ctx.cu_ctx_last_y_chroma : cabac->ctx.cu_ctx_last_y_luma);

	movzx	eax, BYTE PTR _type$[ebp]
	test	eax, eax
	je	SHORT $LN20@kvz_encode
	mov	ecx, DWORD PTR _cabac$[ebp]
	add	ecx, 125				; 0000007dH
	mov	DWORD PTR tv91[ebp], ecx
	jmp	SHORT $LN21@kvz_encode
$LN20@kvz_encode:
	mov	edx, DWORD PTR _cabac$[ebp]
	add	edx, 110				; 0000006eH
	mov	DWORD PTR tv91[ebp], edx
$LN21@kvz_encode:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR _base_ctx_y$[ebp], eax

; 74   : 
; 75   :   if (scan == SCAN_VER) {

	movzx	eax, BYTE PTR _scan$[ebp]
	cmp	eax, 2
	jne	SHORT $LN8@kvz_encode

; 76   :     SWAP(lastpos_x, lastpos_y, uint8_t);

	mov	al, BYTE PTR _lastpos_x$[ebp]
	mov	BYTE PTR _tempval$7[ebp], al
	mov	al, BYTE PTR _lastpos_y$[ebp]
	mov	BYTE PTR _lastpos_x$[ebp], al
	mov	al, BYTE PTR _tempval$7[ebp]
	mov	BYTE PTR _lastpos_y$[ebp], al
$LN8@kvz_encode:

; 77   :   }
; 78   : 
; 79   :   const int group_idx_x = g_group_idx[lastpos_x];

	movzx	eax, BYTE PTR _lastpos_x$[ebp]
	movzx	ecx, BYTE PTR _g_group_idx[eax]
	mov	DWORD PTR _group_idx_x$[ebp], ecx

; 80   :   const int group_idx_y = g_group_idx[lastpos_y];

	movzx	eax, BYTE PTR _lastpos_y$[ebp]
	movzx	ecx, BYTE PTR _g_group_idx[eax]
	mov	DWORD PTR _group_idx_y$[ebp], ecx

; 81   : 
; 82   :   // x prefix
; 83   :   for (int last_x = 0; last_x < group_idx_x; last_x++) {

	mov	DWORD PTR _last_x$6[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _last_x$6[ebp]
	add	eax, 1
	mov	DWORD PTR _last_x$6[ebp], eax
$LN4@kvz_encode:
	mov	eax, DWORD PTR _last_x$6[ebp]
	cmp	eax, DWORD PTR _group_idx_x$[ebp]
	jge	SHORT $LN3@kvz_encode

; 84   :     cabac->cur_ctx = &base_ctx_x[ctx_offset + (last_x >> shift)];

	movzx	eax, BYTE PTR _ctx_offset$[ebp]
	movzx	ecx, BYTE PTR _shift$[ebp]
	mov	edx, DWORD PTR _last_x$6[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _base_ctx_x$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 85   :     CABAC_BIN(cabac, 1, "last_sig_coeff_x_prefix");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 86   :   }

	jmp	SHORT $LN2@kvz_encode
$LN3@kvz_encode:

; 87   :   if (group_idx_x < g_group_idx[width - 1]) {

	movzx	eax, BYTE PTR _width$[ebp]
	movzx	ecx, BYTE PTR _g_group_idx[eax-1]
	cmp	DWORD PTR _group_idx_x$[ebp], ecx
	jge	SHORT $LN9@kvz_encode

; 88   :     cabac->cur_ctx = &base_ctx_x[ctx_offset + (group_idx_x >> shift)];

	movzx	eax, BYTE PTR _ctx_offset$[ebp]
	movzx	ecx, BYTE PTR _shift$[ebp]
	mov	edx, DWORD PTR _group_idx_x$[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _base_ctx_x$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 89   :     CABAC_BIN(cabac, 0, "last_sig_coeff_x_prefix");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN9@kvz_encode:

; 90   :   }
; 91   : 
; 92   :   // y prefix
; 93   :   for (int last_y = 0; last_y < group_idx_y; last_y++) {

	mov	DWORD PTR _last_y$5[ebp], 0
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:
	mov	eax, DWORD PTR _last_y$5[ebp]
	add	eax, 1
	mov	DWORD PTR _last_y$5[ebp], eax
$LN7@kvz_encode:
	mov	eax, DWORD PTR _last_y$5[ebp]
	cmp	eax, DWORD PTR _group_idx_y$[ebp]
	jge	SHORT $LN6@kvz_encode

; 94   :     cabac->cur_ctx = &base_ctx_y[ctx_offset + (last_y >> shift)];

	movzx	eax, BYTE PTR _ctx_offset$[ebp]
	movzx	ecx, BYTE PTR _shift$[ebp]
	mov	edx, DWORD PTR _last_y$5[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _base_ctx_y$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 95   :     CABAC_BIN(cabac, 1, "last_sig_coeff_y_prefix");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 96   :   }

	jmp	SHORT $LN5@kvz_encode
$LN6@kvz_encode:

; 97   :   if (group_idx_y < g_group_idx[height - 1]) {

	movzx	eax, BYTE PTR _height$[ebp]
	movzx	ecx, BYTE PTR _g_group_idx[eax-1]
	cmp	DWORD PTR _group_idx_y$[ebp], ecx
	jge	SHORT $LN10@kvz_encode

; 98   :     cabac->cur_ctx = &base_ctx_y[ctx_offset + (group_idx_y >> shift)];

	movzx	eax, BYTE PTR _ctx_offset$[ebp]
	movzx	ecx, BYTE PTR _shift$[ebp]
	mov	edx, DWORD PTR _group_idx_y$[ebp]
	sar	edx, cl
	add	edx, DWORD PTR _base_ctx_y$[ebp]
	add	edx, eax
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 99   :     CABAC_BIN(cabac, 0, "last_sig_coeff_y_prefix");

	push	0
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN10@kvz_encode:

; 100  :   }
; 101  : 
; 102  :   // last_sig_coeff_x_suffix
; 103  :   if (group_idx_x > 3) {

	cmp	DWORD PTR _group_idx_x$[ebp], 3
	jle	SHORT $LN11@kvz_encode

; 104  :     const int suffix = lastpos_x - g_min_in_group[group_idx_x];

	movzx	eax, BYTE PTR _lastpos_x$[ebp]
	mov	ecx, DWORD PTR _group_idx_x$[ebp]
	movzx	edx, BYTE PTR _g_min_in_group[ecx]
	sub	eax, edx
	mov	DWORD PTR _suffix$4[ebp], eax

; 105  :     const int bits = (group_idx_x - 2) / 2;

	mov	eax, DWORD PTR _group_idx_x$[ebp]
	sub	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _bits$3[ebp], eax

; 106  :     CABAC_BINS_EP(cabac, suffix, bits, "last_sig_coeff_x_suffix");

	mov	eax, DWORD PTR _bits$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _suffix$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN11@kvz_encode:

; 107  :   }
; 108  : 
; 109  :   // last_sig_coeff_y_suffix
; 110  :   if (group_idx_y > 3) {

	cmp	DWORD PTR _group_idx_y$[ebp], 3
	jle	SHORT $LN1@kvz_encode

; 111  :     const int suffix = lastpos_y - g_min_in_group[group_idx_y];

	movzx	eax, BYTE PTR _lastpos_y$[ebp]
	mov	ecx, DWORD PTR _group_idx_y$[ebp]
	movzx	edx, BYTE PTR _g_min_in_group[ecx]
	sub	eax, edx
	mov	DWORD PTR _suffix$2[ebp], eax

; 112  :     const int bits = (group_idx_y - 2) / 2;

	mov	eax, DWORD PTR _group_idx_y$[ebp]
	sub	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _bits$1[ebp], eax

; 113  :     CABAC_BINS_EP(cabac, suffix, bits, "last_sig_coeff_y_suffix");

	mov	eax, DWORD PTR _bits$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _suffix$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	call	_kvz_cabac_encode_bins_ep
	add	esp, 12					; 0000000cH
$LN1@kvz_encode:

; 114  :   }
; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encode_last_significant_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _kvz_encode_mvd
_TEXT	SEGMENT
tv167 = -268						; size = 4
tv143 = -268						; size = 4
tv131 = -268						; size = 4
tv93 = -268						; size = 4
tv83 = -268						; size = 4
tv79 = -268						; size = 4
tv68 = -268						; size = 4
tv65 = -268						; size = 4
_mvd_ver_sign$1 = -68					; size = 4
_mvd_hor_sign$2 = -56					; size = 4
_mvd_ver_abs$ = -44					; size = 4
_mvd_hor_abs$ = -32					; size = 4
_ver_abs_gr0$ = -17					; size = 1
_hor_abs_gr0$ = -5					; size = 1
_state$ = 8						; size = 4
_cabac$ = 12						; size = 4
_mvd_hor$ = 16						; size = 4
_mvd_ver$ = 20						; size = 4
_kvz_encode_mvd PROC					; COMDAT

; 933  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 934  :   const int8_t hor_abs_gr0 = mvd_hor != 0;

	cmp	DWORD PTR _mvd_hor$[ebp], 0
	je	SHORT $LN11@kvz_encode
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN12@kvz_encode
$LN11@kvz_encode:
	mov	DWORD PTR tv65[ebp], 0
$LN12@kvz_encode:
	mov	al, BYTE PTR tv65[ebp]
	mov	BYTE PTR _hor_abs_gr0$[ebp], al

; 935  :   const int8_t ver_abs_gr0 = mvd_ver != 0;

	cmp	DWORD PTR _mvd_ver$[ebp], 0
	je	SHORT $LN13@kvz_encode
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN14@kvz_encode
$LN13@kvz_encode:
	mov	DWORD PTR tv68[ebp], 0
$LN14@kvz_encode:
	mov	al, BYTE PTR tv68[ebp]
	mov	BYTE PTR _ver_abs_gr0$[ebp], al

; 936  :   const uint32_t mvd_hor_abs = abs(mvd_hor);

	mov	eax, DWORD PTR _mvd_hor$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _mvd_hor_abs$[ebp], eax

; 937  :   const uint32_t mvd_ver_abs = abs(mvd_ver);

	mov	eax, DWORD PTR _mvd_ver$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _mvd_ver_abs$[ebp], eax

; 938  : 
; 939  :   cabac->cur_ctx = &cabac->ctx.cu_mvd_model[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cabac$[ebp]
	lea	eax, DWORD PTR [edx+ecx+207]
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 940  :   CABAC_BIN(cabac, (mvd_hor != 0), "abs_mvd_greater0_flag_hor");

	cmp	DWORD PTR _mvd_hor$[ebp], 0
	je	SHORT $LN15@kvz_encode
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN16@kvz_encode
$LN15@kvz_encode:
	mov	DWORD PTR tv79[ebp], 0
$LN16@kvz_encode:
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 941  :   CABAC_BIN(cabac, (mvd_ver != 0), "abs_mvd_greater0_flag_ver");

	cmp	DWORD PTR _mvd_ver$[ebp], 0
	je	SHORT $LN17@kvz_encode
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN18@kvz_encode
$LN17@kvz_encode:
	mov	DWORD PTR tv83[ebp], 0
$LN18@kvz_encode:
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 942  : 
; 943  :   cabac->cur_ctx = &cabac->ctx.cu_mvd_model[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+207]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 944  :   if (hor_abs_gr0) {

	movsx	eax, BYTE PTR _hor_abs_gr0$[ebp]
	test	eax, eax
	je	SHORT $LN2@kvz_encode

; 945  :     CABAC_BIN(cabac, (mvd_hor_abs>1), "abs_mvd_greater1_flag_hor");

	cmp	DWORD PTR _mvd_hor_abs$[ebp], 1
	jbe	SHORT $LN19@kvz_encode
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN20@kvz_encode
$LN19@kvz_encode:
	mov	DWORD PTR tv93[ebp], 0
$LN20@kvz_encode:
	mov	eax, DWORD PTR tv93[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN2@kvz_encode:

; 946  :   }
; 947  :   if (ver_abs_gr0) {

	movsx	eax, BYTE PTR _ver_abs_gr0$[ebp]
	test	eax, eax
	je	SHORT $LN3@kvz_encode

; 948  :     CABAC_BIN(cabac, (mvd_ver_abs>1), "abs_mvd_greater1_flag_ver");

	cmp	DWORD PTR _mvd_ver_abs$[ebp], 1
	jbe	SHORT $LN21@kvz_encode
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN22@kvz_encode
$LN21@kvz_encode:
	mov	DWORD PTR tv131[ebp], 0
$LN22@kvz_encode:
	mov	eax, DWORD PTR tv131[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN3@kvz_encode:

; 949  :   }
; 950  : 
; 951  :   if (hor_abs_gr0) {

	movsx	eax, BYTE PTR _hor_abs_gr0$[ebp]
	test	eax, eax
	je	$LN4@kvz_encode

; 952  :     if (mvd_hor_abs > 1) {

	cmp	DWORD PTR _mvd_hor_abs$[ebp], 1
	jbe	SHORT $LN5@kvz_encode

; 953  :       kvz_cabac_write_ep_ex_golomb(state, cabac, mvd_hor_abs - 2, 1);

	push	1
	mov	eax, DWORD PTR _mvd_hor_abs$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cabac_write_ep_ex_golomb
	add	esp, 16					; 00000010H
$LN5@kvz_encode:

; 954  :     }
; 955  :     uint32_t mvd_hor_sign = (mvd_hor > 0) ? 0 : 1;

	cmp	DWORD PTR _mvd_hor$[ebp], 0
	jle	SHORT $LN23@kvz_encode
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN24@kvz_encode
$LN23@kvz_encode:
	mov	DWORD PTR tv143[ebp], 1
$LN24@kvz_encode:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR _mvd_hor_sign$2[ebp], eax

; 956  :     if (!state->cabac.only_count &&

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	jne	SHORT $LN6@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2348]
	and	edx, 2
	je	SHORT $LN6@kvz_encode

; 957  :         state->encoder_control->cfg.crypto_features & KVZ_CRYPTO_MV_SIGNS)
; 958  :     {
; 959  :       mvd_hor_sign = mvd_hor_sign ^ kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	xor	eax, DWORD PTR _mvd_hor_sign$2[ebp]
	mov	DWORD PTR _mvd_hor_sign$2[ebp], eax
$LN6@kvz_encode:

; 960  :     }
; 961  :     CABAC_BIN_EP(cabac, mvd_hor_sign, "mvd_sign_flag_hor");

	mov	eax, DWORD PTR _mvd_hor_sign$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN4@kvz_encode:

; 962  :   }
; 963  :   if (ver_abs_gr0) {

	movsx	eax, BYTE PTR _ver_abs_gr0$[ebp]
	test	eax, eax
	je	$LN1@kvz_encode

; 964  :     if (mvd_ver_abs > 1) {

	cmp	DWORD PTR _mvd_ver_abs$[ebp], 1
	jbe	SHORT $LN8@kvz_encode

; 965  :       kvz_cabac_write_ep_ex_golomb(state, cabac, mvd_ver_abs - 2, 1);

	push	1
	mov	eax, DWORD PTR _mvd_ver_abs$[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_cabac_write_ep_ex_golomb
	add	esp, 16					; 00000010H
$LN8@kvz_encode:

; 966  :     }
; 967  :     uint32_t mvd_ver_sign = mvd_ver > 0 ? 0 : 1;

	cmp	DWORD PTR _mvd_ver$[ebp], 0
	jle	SHORT $LN25@kvz_encode
	mov	DWORD PTR tv167[ebp], 0
	jmp	SHORT $LN26@kvz_encode
$LN25@kvz_encode:
	mov	DWORD PTR tv167[ebp], 1
$LN26@kvz_encode:
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR _mvd_ver_sign$1[ebp], eax

; 968  :     if (!state->cabac.only_count &&

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	jne	SHORT $LN9@kvz_encode
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+2348]
	and	edx, 2
	je	SHORT $LN9@kvz_encode

; 969  :         state->encoder_control->cfg.crypto_features & KVZ_CRYPTO_MV_SIGNS)
; 970  :     {
; 971  :       mvd_ver_sign = mvd_ver_sign^kvz_crypto_get_key(state->crypto_hdl, 1);

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	call	_kvz_crypto_get_key
	add	esp, 8
	xor	eax, DWORD PTR _mvd_ver_sign$1[ebp]
	mov	DWORD PTR _mvd_ver_sign$1[ebp], eax
$LN9@kvz_encode:

; 972  :     }
; 973  :     CABAC_BIN_EP(cabac, mvd_ver_sign, "mvd_sign_flag_ver");

	mov	eax, DWORD PTR _mvd_ver_sign$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN1@kvz_encode:

; 974  :   }
; 975  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encode_mvd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encode_coding_tree.c
;	COMDAT _kvz_encode_coding_tree
_TEXT	SEGMENT
tv188 = -548						; size = 4
tv180 = -548						; size = 4
tv171 = -548						; size = 4
tv162 = -548						; size = 4
tv154 = -548						; size = 4
tv356 = -544						; size = 4
tv338 = -544						; size = 4
tv216 = -544						; size = 4
tv206 = -544						; size = 4
tv186 = -544						; size = 4
tv178 = -544						; size = 4
tv169 = -544						; size = 4
tv160 = -544						; size = 4
tv152 = -544						; size = 4
tv136 = -544						; size = 4
_cbf$1 = -344						; size = 4
_cur_pu$2 = -332					; size = 4
_pu_h$3 = -320						; size = 4
_pu_w$4 = -308						; size = 4
_pu_y$5 = -296						; size = 4
_pu_x$6 = -284						; size = 4
_i$7 = -272						; size = 4
_num_pu$8 = -260					; size = 4
_symbol$9 = -248					; size = 4
_ui$10 = -236						; size = 4
_num_cand$11 = -224					; size = 2
_ctx_skip$12 = -209					; size = 1
_border$ = -197						; size = 1
_border_split_y$ = -185					; size = 1
_border_split_x$ = -173					; size = 1
_border_y$ = -161					; size = 1
_border_x$ = -149					; size = 1
_abs_y$ = -140						; size = 2
_abs_x$ = -128						; size = 2
_split_model$ = -113					; size = 1
_split_flag$ = -101					; size = 1
_above_cu$ = -92					; size = 4
_left_cu$ = -80						; size = 4
_half_cu$ = -68						; size = 4
_cu_width$ = -56					; size = 4
_cur_cu$ = -44						; size = 4
_frame$ = -32						; size = 4
_ctrl$ = -20						; size = 4
_cabac$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 2
_y$ = 16						; size = 2
_depth$ = 20						; size = 1
_kvz_encode_coding_tree PROC				; COMDAT

; 729  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-548]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __611E9FE5_encode_coding_tree@c
	call	@__CheckForDebuggerJustMyCode@4

; 730  :   cabac_data_t * const cabac = &state->cabac;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _cabac$[ebp], eax

; 731  :   const encoder_control_t * const ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 732  :   const videoframe_t * const frame = state->tile->frame;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _frame$[ebp], edx

; 733  :   const cu_info_t *cur_cu   = kvz_cu_array_at_const(frame->cu_array, x, y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_cu$[ebp], eax

; 734  : 
; 735  :   const int cu_width = LCU_WIDTH >> depth;

	movzx	ecx, BYTE PTR _depth$[ebp]
	mov	eax, 64					; 00000040H
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 736  :   const int half_cu  = cu_width >> 1;

	mov	eax, DWORD PTR _cu_width$[ebp]
	sar	eax, 1
	mov	DWORD PTR _half_cu$[ebp], eax

; 737  : 
; 738  :   const cu_info_t *left_cu  = NULL;

	mov	DWORD PTR _left_cu$[ebp], 0

; 739  :   if (x > 0) {

	movzx	eax, WORD PTR _x$[ebp]
	test	eax, eax
	jle	SHORT $LN8@kvz_encode

; 740  :     left_cu = kvz_cu_array_at_const(frame->cu_array, x - 1, y);

	movzx	eax, WORD PTR _y$[ebp]
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _left_cu$[ebp], eax
$LN8@kvz_encode:

; 741  :   }
; 742  :   const cu_info_t *above_cu = NULL;

	mov	DWORD PTR _above_cu$[ebp], 0

; 743  :   if (y > 0) {

	movzx	eax, WORD PTR _y$[ebp]
	test	eax, eax
	jle	SHORT $LN9@kvz_encode

; 744  :     above_cu = kvz_cu_array_at_const(frame->cu_array, x, y - 1);

	movzx	eax, WORD PTR _y$[ebp]
	sub	eax, 1
	push	eax
	movzx	ecx, WORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _above_cu$[ebp], eax
$LN9@kvz_encode:

; 745  :   }
; 746  : 
; 747  :   uint8_t split_flag = GET_SPLITDATA(cur_cu, depth);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	edx, eax
	jle	SHORT $LN42@kvz_encode
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN43@kvz_encode
$LN42@kvz_encode:
	mov	DWORD PTR tv136[ebp], 0
$LN43@kvz_encode:
	mov	cl, BYTE PTR tv136[ebp]
	mov	BYTE PTR _split_flag$[ebp], cl

; 748  :   uint8_t split_model = 0;

	mov	BYTE PTR _split_model$[ebp], 0

; 749  : 
; 750  :   // Absolute coordinates
; 751  :   uint16_t abs_x = x + state->tile->offset_x;

	movzx	eax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+16]
	mov	WORD PTR _abs_x$[ebp], ax

; 752  :   uint16_t abs_y = y + state->tile->offset_y;

	movzx	eax, WORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+20]
	mov	WORD PTR _abs_y$[ebp], ax

; 753  : 
; 754  :   // Check for slice border
; 755  :   bool border_x = ctrl->in.width  < abs_x + cu_width;

	movzx	eax, WORD PTR _abs_x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+2480], eax
	jge	SHORT $LN44@kvz_encode
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN45@kvz_encode
$LN44@kvz_encode:
	mov	DWORD PTR tv152[ebp], 0
$LN45@kvz_encode:
	cmp	DWORD PTR tv152[ebp], 0
	jne	SHORT $LN46@kvz_encode
	mov	DWORD PTR tv154[ebp], 0
	jmp	SHORT $LN47@kvz_encode
$LN46@kvz_encode:
	mov	DWORD PTR tv154[ebp], 1
$LN47@kvz_encode:
	mov	dl, BYTE PTR tv154[ebp]
	mov	BYTE PTR _border_x$[ebp], dl

; 756  :   bool border_y = ctrl->in.height < abs_y + cu_width;

	movzx	eax, WORD PTR _abs_y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [ecx+2484], eax
	jge	SHORT $LN48@kvz_encode
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN49@kvz_encode
$LN48@kvz_encode:
	mov	DWORD PTR tv160[ebp], 0
$LN49@kvz_encode:
	cmp	DWORD PTR tv160[ebp], 0
	jne	SHORT $LN50@kvz_encode
	mov	DWORD PTR tv162[ebp], 0
	jmp	SHORT $LN51@kvz_encode
$LN50@kvz_encode:
	mov	DWORD PTR tv162[ebp], 1
$LN51@kvz_encode:
	mov	dl, BYTE PTR tv162[ebp]
	mov	BYTE PTR _border_y$[ebp], dl

; 757  :   bool border_split_x = ctrl->in.width  >= abs_x + (LCU_WIDTH >> MAX_DEPTH) + half_cu;

	movzx	eax, WORD PTR _abs_x$[ebp]
	mov	ecx, DWORD PTR _half_cu$[ebp]
	lea	edx, DWORD PTR [eax+ecx+8]
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2480], edx
	jl	SHORT $LN52@kvz_encode
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN53@kvz_encode
$LN52@kvz_encode:
	mov	DWORD PTR tv169[ebp], 0
$LN53@kvz_encode:
	cmp	DWORD PTR tv169[ebp], 0
	jne	SHORT $LN54@kvz_encode
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN55@kvz_encode
$LN54@kvz_encode:
	mov	DWORD PTR tv171[ebp], 1
$LN55@kvz_encode:
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _border_split_x$[ebp], cl

; 758  :   bool border_split_y = ctrl->in.height >= abs_y + (LCU_WIDTH >> MAX_DEPTH) + half_cu;

	movzx	eax, WORD PTR _abs_y$[ebp]
	mov	ecx, DWORD PTR _half_cu$[ebp]
	lea	edx, DWORD PTR [eax+ecx+8]
	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2484], edx
	jl	SHORT $LN56@kvz_encode
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN57@kvz_encode
$LN56@kvz_encode:
	mov	DWORD PTR tv178[ebp], 0
$LN57@kvz_encode:
	cmp	DWORD PTR tv178[ebp], 0
	jne	SHORT $LN58@kvz_encode
	mov	DWORD PTR tv180[ebp], 0
	jmp	SHORT $LN59@kvz_encode
$LN58@kvz_encode:
	mov	DWORD PTR tv180[ebp], 1
$LN59@kvz_encode:
	mov	cl, BYTE PTR tv180[ebp]
	mov	BYTE PTR _border_split_y$[ebp], cl

; 759  :   bool border = border_x || border_y; /*!< are we in any border CU */

	movzx	eax, BYTE PTR _border_x$[ebp]
	test	eax, eax
	jne	SHORT $LN60@kvz_encode
	movzx	ecx, BYTE PTR _border_y$[ebp]
	test	ecx, ecx
	jne	SHORT $LN60@kvz_encode
	mov	DWORD PTR tv186[ebp], 0
	jmp	SHORT $LN61@kvz_encode
$LN60@kvz_encode:
	mov	DWORD PTR tv186[ebp], 1
$LN61@kvz_encode:
	cmp	DWORD PTR tv186[ebp], 0
	jne	SHORT $LN62@kvz_encode
	mov	DWORD PTR tv188[ebp], 0
	jmp	SHORT $LN63@kvz_encode
$LN62@kvz_encode:
	mov	DWORD PTR tv188[ebp], 1
$LN63@kvz_encode:
	mov	dl, BYTE PTR tv188[ebp]
	mov	BYTE PTR _border$[ebp], dl

; 760  : 
; 761  :   if (depth <= ctrl->max_qp_delta_depth) {

	movzx	eax, BYTE PTR _depth$[ebp]
	mov	ecx, DWORD PTR _ctrl$[ebp]
	movsx	edx, BYTE PTR [ecx+4584]
	cmp	eax, edx
	jg	SHORT $LN10@kvz_encode

; 762  :     state->must_code_qp_delta = true;

	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+313], 1
$LN10@kvz_encode:

; 763  :   }
; 764  : 
; 765  :   // When not in MAX_DEPTH, insert split flag and split the blocks if needed
; 766  :   if (depth != MAX_DEPTH) {

	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	eax, 3
	je	$LN11@kvz_encode

; 767  :     // Implisit split flag when on border
; 768  :     if (!border) {

	movzx	eax, BYTE PTR _border$[ebp]
	test	eax, eax
	jne	$LN12@kvz_encode

; 769  :       // Get left and top block split_flags and if they are present and true, increase model number
; 770  :       if (left_cu && GET_SPLITDATA(left_cu, depth) == 1) {

	cmp	DWORD PTR _left_cu$[ebp], 0
	je	SHORT $LN13@kvz_encode
	mov	eax, DWORD PTR _left_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	edx, eax
	jle	SHORT $LN64@kvz_encode
	mov	DWORD PTR tv206[ebp], 1
	jmp	SHORT $LN65@kvz_encode
$LN64@kvz_encode:
	mov	DWORD PTR tv206[ebp], 0
$LN65@kvz_encode:
	cmp	DWORD PTR tv206[ebp], 1
	jne	SHORT $LN13@kvz_encode

; 771  :         split_model++;

	mov	al, BYTE PTR _split_model$[ebp]
	add	al, 1
	mov	BYTE PTR _split_model$[ebp], al
$LN13@kvz_encode:

; 772  :       }
; 773  : 
; 774  :       if (above_cu && GET_SPLITDATA(above_cu, depth) == 1) {

	cmp	DWORD PTR _above_cu$[ebp], 0
	je	SHORT $LN14@kvz_encode
	mov	eax, DWORD PTR _above_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 2
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _depth$[ebp]
	cmp	edx, eax
	jle	SHORT $LN66@kvz_encode
	mov	DWORD PTR tv216[ebp], 1
	jmp	SHORT $LN67@kvz_encode
$LN66@kvz_encode:
	mov	DWORD PTR tv216[ebp], 0
$LN67@kvz_encode:
	cmp	DWORD PTR tv216[ebp], 1
	jne	SHORT $LN14@kvz_encode

; 775  :         split_model++;

	mov	al, BYTE PTR _split_model$[ebp]
	add	al, 1
	mov	BYTE PTR _split_model$[ebp], al
$LN14@kvz_encode:

; 776  :       }
; 777  : 
; 778  :       cabac->cur_ctx = &(cabac->ctx.split_flag_model[split_model]);

	movzx	eax, BYTE PTR _split_model$[ebp]
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+34]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 779  :       CABAC_BIN(cabac, split_flag, "SplitFlag");

	movzx	eax, BYTE PTR _split_flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN12@kvz_encode:

; 780  :     }
; 781  : 
; 782  :     if (split_flag || border) {

	movzx	eax, BYTE PTR _split_flag$[ebp]
	test	eax, eax
	jne	SHORT $LN16@kvz_encode
	movzx	eax, BYTE PTR _border$[ebp]
	test	eax, eax
	je	$LN11@kvz_encode
$LN16@kvz_encode:

; 783  :       // Split blocks and remember to change x and y block positions
; 784  :       kvz_encode_coding_tree(state, x, y, depth + 1);

	movzx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encode_coding_tree
	add	esp, 16					; 00000010H

; 785  : 
; 786  :       if (!border_x || border_split_x) {

	movzx	eax, BYTE PTR _border_x$[ebp]
	test	eax, eax
	je	SHORT $LN18@kvz_encode
	movzx	eax, BYTE PTR _border_split_x$[ebp]
	test	eax, eax
	je	SHORT $LN17@kvz_encode
$LN18@kvz_encode:

; 787  :         kvz_encode_coding_tree(state, x + half_cu, y, depth + 1);

	movzx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	add	edx, DWORD PTR _half_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encode_coding_tree
	add	esp, 16					; 00000010H
$LN17@kvz_encode:

; 788  :       }
; 789  :       if (!border_y || border_split_y) {

	movzx	eax, BYTE PTR _border_y$[ebp]
	test	eax, eax
	je	SHORT $LN20@kvz_encode
	movzx	eax, BYTE PTR _border_split_y$[ebp]
	test	eax, eax
	je	SHORT $LN19@kvz_encode
$LN20@kvz_encode:

; 790  :         kvz_encode_coding_tree(state, x, y + half_cu, depth + 1);

	movzx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	add	ecx, DWORD PTR _half_cu$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encode_coding_tree
	add	esp, 16					; 00000010H
$LN19@kvz_encode:

; 791  :       }
; 792  :       if (!border || (border_split_x && border_split_y)) {

	movzx	eax, BYTE PTR _border$[ebp]
	test	eax, eax
	je	SHORT $LN22@kvz_encode
	movzx	eax, BYTE PTR _border_split_x$[ebp]
	test	eax, eax
	je	SHORT $LN21@kvz_encode
	movzx	eax, BYTE PTR _border_split_y$[ebp]
	test	eax, eax
	je	SHORT $LN21@kvz_encode
$LN22@kvz_encode:

; 793  :         kvz_encode_coding_tree(state, x + half_cu, y + half_cu, depth + 1);

	movzx	eax, BYTE PTR _depth$[ebp]
	add	eax, 1
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	add	ecx, DWORD PTR _half_cu$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	add	edx, DWORD PTR _half_cu$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_encode_coding_tree
	add	esp, 16					; 00000010H
$LN21@kvz_encode:

; 794  :       }
; 795  :       return;

	jmp	$LN41@kvz_encode
$LN11@kvz_encode:

; 796  :     }
; 797  :   }
; 798  : 
; 799  :   if (ctrl->cfg.lossless) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2364], 0
	je	SHORT $LN23@kvz_encode

; 800  :     cabac->cur_ctx = &cabac->ctx.cu_transquant_bypass;

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 206				; 000000ceH
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 801  :     CABAC_BIN(cabac, 1, "cu_transquant_bypass_flag");

	push	1
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN23@kvz_encode:

; 802  :   }
; 803  : 
; 804  :   // Encode skip flag
; 805  :   if (state->frame->slicetype != KVZ_SLICE_I) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	$LN24@kvz_encode

; 806  :     // uiCtxSkip = aboveskipped + leftskipped;
; 807  :     int8_t ctx_skip = 0;

	mov	BYTE PTR _ctx_skip$12[ebp], 0

; 808  : 
; 809  :     if (left_cu && left_cu->skipped) {

	cmp	DWORD PTR _left_cu$[ebp], 0
	je	SHORT $LN25@kvz_encode
	mov	eax, DWORD PTR _left_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN25@kvz_encode

; 810  :       ctx_skip++;

	mov	al, BYTE PTR _ctx_skip$12[ebp]
	add	al, 1
	mov	BYTE PTR _ctx_skip$12[ebp], al
$LN25@kvz_encode:

; 811  :     }
; 812  :     if (above_cu && above_cu->skipped) {

	cmp	DWORD PTR _above_cu$[ebp], 0
	je	SHORT $LN26@kvz_encode
	mov	eax, DWORD PTR _above_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN26@kvz_encode

; 813  :       ctx_skip++;

	mov	al, BYTE PTR _ctx_skip$12[ebp]
	add	al, 1
	mov	BYTE PTR _ctx_skip$12[ebp], al
$LN26@kvz_encode:

; 814  :     }
; 815  : 
; 816  :     cabac->cur_ctx = &(cabac->ctx.cu_skip_flag_model[ctx_skip]);

	movsx	eax, BYTE PTR _ctx_skip$12[ebp]
	mov	ecx, DWORD PTR _cabac$[ebp]
	lea	edx, DWORD PTR [ecx+eax+201]
	mov	eax, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [eax], edx

; 817  :     CABAC_BIN(cabac, cur_cu->skipped, "SkipFlag");

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 818  : 
; 819  :     if (cur_cu->skipped) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN24@kvz_encode

; 820  :       int16_t num_cand = state->encoder_control->cfg.max_merge;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR [ecx+2441]
	mov	WORD PTR _num_cand$11[ebp], dx

; 821  :       if (num_cand > 1) {

	movsx	eax, WORD PTR _num_cand$11[ebp]
	cmp	eax, 1
	jle	$LN28@kvz_encode

; 822  :         for (int ui = 0; ui < num_cand - 1; ui++) {

	mov	DWORD PTR _ui$10[ebp], 0
	jmp	SHORT $LN4@kvz_encode
$LN2@kvz_encode:
	mov	eax, DWORD PTR _ui$10[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$10[ebp], eax
$LN4@kvz_encode:
	movsx	eax, WORD PTR _num_cand$11[ebp]
	sub	eax, 1
	cmp	DWORD PTR _ui$10[ebp], eax
	jge	$LN28@kvz_encode

; 823  :           int32_t symbol = (ui != cur_cu->merge_idx);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	cmp	DWORD PTR _ui$10[ebp], edx
	je	SHORT $LN68@kvz_encode
	mov	DWORD PTR tv338[ebp], 1
	jmp	SHORT $LN69@kvz_encode
$LN68@kvz_encode:
	mov	DWORD PTR tv338[ebp], 0
$LN69@kvz_encode:
	mov	eax, DWORD PTR tv338[ebp]
	mov	DWORD PTR _symbol$9[ebp], eax

; 824  :           if (ui == 0) {

	cmp	DWORD PTR _ui$10[ebp], 0
	jne	SHORT $LN29@kvz_encode

; 825  :             cabac->cur_ctx = &(cabac->ctx.cu_merge_idx_ext_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 204				; 000000ccH
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 826  :             CABAC_BIN(cabac, symbol, "MergeIndex");

	mov	eax, DWORD PTR _symbol$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8

; 827  :           } else {

	jmp	SHORT $LN30@kvz_encode
$LN29@kvz_encode:

; 828  :             CABAC_BIN_EP(cabac,symbol,"MergeIndex");

	mov	eax, DWORD PTR _symbol$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin_ep
	add	esp, 8
$LN30@kvz_encode:

; 829  :           }
; 830  :           if (symbol == 0) {

	cmp	DWORD PTR _symbol$9[ebp], 0
	jne	SHORT $LN31@kvz_encode

; 831  :             break;

	jmp	SHORT $LN28@kvz_encode
$LN31@kvz_encode:

; 832  :           }
; 833  :         }

	jmp	$LN2@kvz_encode
$LN28@kvz_encode:

; 834  :       }
; 835  :       goto end;

	jmp	$end$73
$LN24@kvz_encode:

; 836  :     }
; 837  :   }
; 838  : 
; 839  :   // Prediction mode
; 840  :   if (state->frame->slicetype != KVZ_SLICE_I) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	SHORT $LN32@kvz_encode

; 841  :     cabac->cur_ctx = &(cabac->ctx.cu_pred_mode_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 200				; 000000c8H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 842  :     CABAC_BIN(cabac, (cur_cu->type == CU_INTRA), "PredMode");

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN70@kvz_encode
	mov	DWORD PTR tv356[ebp], 1
	jmp	SHORT $LN71@kvz_encode
$LN70@kvz_encode:
	mov	DWORD PTR tv356[ebp], 0
$LN71@kvz_encode:
	mov	eax, DWORD PTR tv356[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN32@kvz_encode:

; 843  :   }
; 844  : 
; 845  :   // part_mode
; 846  :   encode_part_mode(state, cabac, cur_cu, depth);

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cabac$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_part_mode
	add	esp, 16					; 00000010H

; 847  : 
; 848  :   if (cur_cu->type == CU_INTER) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 2
	jne	$LN33@kvz_encode

; 849  :     const int num_pu = kvz_part_mode_num_parts[cur_cu->part_size];

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	movzx	eax, BYTE PTR _kvz_part_mode_num_parts[edx]
	mov	DWORD PTR _num_pu$8[ebp], eax

; 850  : 
; 851  :     for (int i = 0; i < num_pu; ++i) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN7@kvz_encode
$LN5@kvz_encode:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN7@kvz_encode:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _num_pu$8[ebp]
	jge	$LN6@kvz_encode

; 852  :       const int pu_x = PU_GET_X(cur_cu->part_size, cu_width, x, i);

	movzx	ecx, WORD PTR _x$[ebp]
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx]
	shr	al, 5
	and	al, 7
	movzx	edx, al
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 1
	lea	edx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	eax, 1
	imul	eax, eax, 0
	movzx	eax, BYTE PTR [edx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	ecx, eax
	mov	DWORD PTR _pu_x$6[ebp], ecx

; 853  :       const int pu_y = PU_GET_Y(cur_cu->part_size, cu_width, y, i);

	movzx	ecx, WORD PTR _y$[ebp]
	mov	edx, DWORD PTR _cur_cu$[ebp]
	mov	al, BYTE PTR [edx]
	shr	al, 5
	and	al, 7
	movzx	edx, al
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 1
	lea	edx, DWORD PTR _kvz_part_mode_offsets[eax+edx*8]
	mov	eax, 1
	shl	eax, 0
	movzx	eax, BYTE PTR [edx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	ecx, eax
	mov	DWORD PTR _pu_y$5[ebp], ecx

; 854  :       const int pu_w = PU_GET_W(cur_cu->part_size, cu_width, i);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_sizes[eax+edx*8]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	eax, BYTE PTR [ecx+eax]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _pu_w$4[ebp], eax

; 855  :       const int pu_h = PU_GET_H(cur_cu->part_size, cu_width, i);

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 1
	lea	ecx, DWORD PTR _kvz_part_mode_sizes[eax+edx*8]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	imul	eax, DWORD PTR _cu_width$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _pu_h$3[ebp], eax

; 856  :       const cu_info_t *cur_pu = kvz_cu_array_at_const(frame->cu_array, pu_x, pu_y);

	mov	eax, DWORD PTR _pu_y$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_x$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _frame$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_kvz_cu_array_at_const
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur_pu$2[ebp], eax

; 857  : 
; 858  :       encode_inter_prediction_unit(state, cabac, cur_pu, pu_x, pu_y, pu_w, pu_h, depth);

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_h$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _pu_w$4[ebp]
	push	edx
	mov	eax, DWORD PTR _pu_y$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pu_x$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_pu$2[ebp]
	push	edx
	mov	eax, DWORD PTR _cabac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_encode_inter_prediction_unit
	add	esp, 32					; 00000020H

; 859  :     }

	jmp	$LN5@kvz_encode
$LN6@kvz_encode:

; 860  : 
; 861  :     {
; 862  :       int cbf = cbf_is_set_any(cur_cu->cbf, depth);

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	call	_cbf_is_set_any
	add	esp, 8
	mov	DWORD PTR _cbf$1[ebp], eax

; 863  :       // Only need to signal coded block flag if not skipped or merged
; 864  :       // skip = no coded residual, merge = coded residual
; 865  :       if (cur_cu->part_size != SIZE_2Nx2N || !cur_cu->merged) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 5
	and	cl, 7
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN36@kvz_encode
	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN35@kvz_encode
$LN36@kvz_encode:

; 866  :         cabac->cur_ctx = &(cabac->ctx.cu_qt_root_cbf_model);

	mov	eax, DWORD PTR _cabac$[ebp]
	add	eax, 213				; 000000d5H
	mov	ecx, DWORD PTR _cabac$[ebp]
	mov	DWORD PTR [ecx], eax

; 867  :         CABAC_BIN(cabac, cbf, "rqt_root_cbf");

	mov	eax, DWORD PTR _cbf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	call	_kvz_cabac_encode_bin
	add	esp, 8
$LN35@kvz_encode:

; 868  :       }
; 869  :       // Code (possible) coeffs to bitstream
; 870  : 
; 871  :       if (cbf) {

	cmp	DWORD PTR _cbf$1[ebp], 0
	je	SHORT $LN37@kvz_encode

; 872  :         encode_transform_coeff(state, x, y, depth, 0, 0, 0);

	push	0
	push	0
	push	0
	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encode_transform_coeff
	add	esp, 28					; 0000001cH
$LN37@kvz_encode:

; 873  :       }

	jmp	SHORT $end$73
$LN33@kvz_encode:

; 874  :     }
; 875  :   } else if (cur_cu->type == CU_INTRA) {

	mov	eax, DWORD PTR _cur_cu$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 3
	movzx	edx, cl
	cmp	edx, 1
	jne	SHORT $LN38@kvz_encode

; 876  :     encode_intra_coding_unit(state, cabac, cur_cu, x, y, depth);

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_cu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cabac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_encode_intra_coding_unit
	add	esp, 24					; 00000018H

; 877  :   }

	jmp	SHORT $end$73
$LN38@kvz_encode:

; 878  : 
; 879  : #if ENABLE_PCM
; 880  :   // Code IPCM block
; 881  :   else if (cur_cu->type == CU_PCM) {
; 882  :     kvz_cabac_encode_bin_trm(cabac, 1); // IPCMFlag == 1
; 883  :     kvz_cabac_finish(cabac);
; 884  :     kvz_bitstream_add_rbsp_trailing_bits(cabac.stream);
; 885  : 
; 886  :     // PCM sample
; 887  :     pixel *base_y = &cur_pic->y_data[x     + y * encoder->in.width];
; 888  :     pixel *base_u = &cur_pic->u_data[x / 2 + y / 2 * encoder->in.width / 2];
; 889  :     pixel *base_v = &cur_pic->v_data[x / 2 + y / 2 * encoder->in.width / 2];
; 890  : 
; 891  :     // Luma
; 892  :     for (unsigned y_px = 0; y_px < LCU_WIDTH >> depth; y_px++) {
; 893  :       for (unsigned  x_px = 0; x_px < LCU_WIDTH >> depth; x_px++) {
; 894  :         kvz_bitstream_put(cabac.stream, base_y[x_px + y_px * encoder->in.width], 8);
; 895  :       }
; 896  :     }
; 897  : 
; 898  :     // Chroma
; 899  :     if (encoder->in.video_format != FORMAT_400) {
; 900  :       for (unsigned y_px = 0; y_px < LCU_WIDTH >> (depth + 1); y_px++) {
; 901  :         for (unsigned x_px = 0; x_px < LCU_WIDTH >> (depth + 1); x_px++) {
; 902  :           kvz_bitstream_put(cabac.stream, base_u[x_px + y_px * (encoder->in.width >> 1)], 8);
; 903  :         }
; 904  :       }
; 905  :       for (unsigned y_px = 0; y_px < LCU_WIDTH >> (depth + 1); y_px++) {
; 906  :         for (unsigned x_px = 0; x_px < LCU_WIDTH >> (depth + 1); x_px++) {
; 907  :           kvz_bitstream_put(cabac.stream, base_v[x_px + y_px * (encoder->in.width >> 1)], 8);
; 908  :         }
; 909  :       }
; 910  :     }
; 911  :     kvz_cabac_start(cabac);
; 912  :   }
; 913  : #endif
; 914  : 
; 915  :   else {
; 916  :     // CU type not set. Should not happen.
; 917  :     assert(0);

	xor	eax, eax
	jne	SHORT $LN72@kvz_encode
	mov	ecx, DWORD PTR ?__LINE__Var@?0??kvz_encode_coding_tree@@9@9
	add	ecx, 188				; 000000bcH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1IC@ECDAJGDF@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN72@kvz_encode:

; 918  :     exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$end$73:

; 919  :   }
; 920  : 
; 921  : end:
; 922  : 
; 923  :   if (is_last_cu_in_qg(state, x, y, depth)) {

	movzx	eax, BYTE PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _y$[ebp]
	push	ecx
	movzx	edx, WORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_is_last_cu_in_qg
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@kvz_encode

; 924  :     state->last_qp = cur_cu->qp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _cur_cu$[ebp]
	mov	dl, BYTE PTR [ecx+6]
	mov	BYTE PTR [eax+314], dl
$LN41@kvz_encode:

; 925  :   }
; 926  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 548				; 00000224H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_encode_coding_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
;	COMDAT _is_last_cu_in_qg
_TEXT	SEGMENT
tv89 = -248						; size = 4
tv87 = -244						; size = 4
_bottom$ = -44						; size = 4
_right$ = -32						; size = 4
_qg_width$ = -20					; size = 4
_cu_width$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_depth$ = 20						; size = 4
_is_last_cu_in_qg PROC					; COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6BE1C69C_encoderstate@h
	call	@__CheckForDebuggerJustMyCode@4

; 383  :   if (state->encoder_control->max_qp_delta_depth < 0) return false;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+4584]
	test	edx, edx
	jge	SHORT $LN2@is_last_cu
	xor	al, al
	jmp	$LN1@is_last_cu
$LN2@is_last_cu:

; 384  : 
; 385  :   const int cu_width = LCU_WIDTH >> depth;

	mov	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _depth$[ebp]
	sar	eax, cl
	mov	DWORD PTR _cu_width$[ebp], eax

; 386  :   const int qg_width = LCU_WIDTH >> state->encoder_control->max_qp_delta_depth;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	ecx, BYTE PTR [ecx+4584]
	mov	edx, 64					; 00000040H
	sar	edx, cl
	mov	DWORD PTR _qg_width$[ebp], edx

; 387  :   const int right  = x + cu_width;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	DWORD PTR _right$[ebp], eax

; 388  :   const int bottom = y + cu_width;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _cu_width$[ebp]
	mov	DWORD PTR _bottom$[ebp], eax

; 389  :   return (right % qg_width == 0 || right >= state->tile->frame->width) &&

	mov	eax, DWORD PTR _right$[ebp]
	cdq
	idiv	DWORD PTR _qg_width$[ebp]
	test	edx, edx
	je	SHORT $LN4@is_last_cu
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _right$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN6@is_last_cu
$LN4@is_last_cu:
	mov	eax, DWORD PTR _bottom$[ebp]
	cdq
	idiv	DWORD PTR _qg_width$[ebp]
	test	edx, edx
	je	SHORT $LN5@is_last_cu
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _bottom$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jl	SHORT $LN6@is_last_cu
$LN5@is_last_cu:
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN7@is_last_cu
$LN6@is_last_cu:
	mov	DWORD PTR tv87[ebp], 0
$LN7@is_last_cu:
	cmp	DWORD PTR tv87[ebp], 0
	jne	SHORT $LN8@is_last_cu
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN9@is_last_cu
$LN8@is_last_cu:
	mov	DWORD PTR tv89[ebp], 1
$LN9@is_last_cu:
	mov	al, BYTE PTR tv89[ebp]
$LN1@is_last_cu:

; 390  :          (bottom % qg_width == 0 || bottom >= state->tile->frame->height);
; 391  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_is_last_cu_in_qg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\extras\crypto.h
;	COMDAT _kvz_crypto_get_key
_TEXT	SEGMENT
_hdl$ = 8						; size = 4
_num_bits$ = 12						; size = 4
_kvz_crypto_get_key PROC				; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __546CF5FC_crypto@h
	call	@__CheckForDebuggerJustMyCode@4

; 66   :   return 0;

	xor	eax, eax

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_crypto_get_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set_any
_TEXT	SEGMENT
tv79 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_cbf_is_set_any PROC					; COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 526  :   return cbf_is_set(cbf, depth, COLOR_Y) ||

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	movzx	ecx, WORD PTR _cbf$[ebp]
	push	ecx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	1
	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	movzx	eax, WORD PTR _cbf$[ebp]
	push	eax
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	push	2
	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	movzx	edx, WORD PTR _cbf$[ebp]
	push	edx
	call	_cbf_is_set
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv79[ebp], 1
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv79[ebp]

; 527  :          cbf_is_set(cbf, depth, COLOR_U) ||
; 528  :          cbf_is_set(cbf, depth, COLOR_V);
; 529  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _cbf_is_set
_TEXT	SEGMENT
tv72 = -196						; size = 4
_cbf$ = 8						; size = 2
_depth$ = 12						; size = 4
_plane$ = 16						; size = 4
_cbf_is_set PROC					; COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 518  :   return (cbf & (cbf_masks[depth] << (NUM_CBF_DEPTHS * plane))) != 0;

	movzx	eax, WORD PTR _cbf$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	movzx	edx, WORD PTR _cbf_masks[ecx*2]
	imul	ecx, DWORD PTR _plane$[ebp], 5
	shl	edx, cl
	and	eax, edx
	je	SHORT $LN3@cbf_is_set
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@cbf_is_set
$LN3@cbf_is_set:
	mov	DWORD PTR tv72[ebp], 0
$LN4@cbf_is_set:
	mov	eax, DWORD PTR tv72[ebp]

; 519  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cbf_is_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\cu.h
;	COMDAT _xy_to_zorder
_TEXT	SEGMENT
tv89 = -208						; size = 4
_result$ = -8						; size = 4
_width$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_xy_to_zorder PROC					; COMDAT

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6C65A336_cu@h
	call	@__CheckForDebuggerJustMyCode@4

; 387  :   assert(width % 4 == 0 && width >= 4 && width <= 64);

	mov	eax, DWORD PTR _width$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 4
	jb	SHORT $LN10@xy_to_zord
	cmp	DWORD PTR _width$[ebp], 64		; 00000040H
	jbe	SHORT $LN11@xy_to_zord
$LN10@xy_to_zord:
	mov	edx, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1FI@MLHKFCOJ@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xy_to_zord:

; 388  :   assert(x % 4 == 0 && x < width);

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN12@xy_to_zord
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN13@xy_to_zord
$LN12@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 2
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@GFFKHJMH@?$AAx?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xy_to_zord:

; 389  :   assert(y % 4 == 0 && y < width);

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	jne	SHORT $LN14@xy_to_zord
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jb	SHORT $LN15@xy_to_zord
$LN14@xy_to_zord:
	mov	eax, DWORD PTR ?__LINE__Var@?0??xy_to_zorder@@9@9
	add	eax, 3
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1GC@FHIJABIM@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1DA@DNIMKOFN@?$AAy?$AA?5?$AA?$CF?$AA?5?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@xy_to_zord:

; 390  : 
; 391  :   unsigned result = 0;

	mov	DWORD PTR _result$[ebp], 0

; 392  : 
; 393  :   switch (width) {

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 56			; 00000038H
	ja	$LN2@xy_to_zord
	mov	edx, DWORD PTR tv89[ebp]
	movzx	eax, BYTE PTR $LN16@xy_to_zord[edx]
	jmp	DWORD PTR $LN17@xy_to_zord[eax*4]
$LN4@xy_to_zord:

; 394  :     case 64:
; 395  :       result += x / 32 * (32*32);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 5
	shl	eax, 10					; 0000000aH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 396  :       result += y / 32 * (64*32);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 5
	shl	eax, 11					; 0000000bH
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 397  :       x %= 32;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 398  :       y %= 32;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN5@xy_to_zord:

; 399  :       // fallthrough
; 400  :     case 32:
; 401  :       result += x / 16 * (16*16);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 4
	shl	eax, 8
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 402  :       result += y / 16 * (32*16);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 4
	shl	eax, 9
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 403  :       x %= 16;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 404  :       y %= 16;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN6@xy_to_zord:

; 405  :       // fallthrough
; 406  :     case 16:
; 407  :       result += x / 8 * ( 8*8);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 3
	shl	eax, 6
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 408  :       result += y / 8 * (16*8);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 3
	shl	eax, 7
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 409  :       x %= 8;

	mov	eax, DWORD PTR _x$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _x$[ebp], edx

; 410  :       y %= 8;

	mov	eax, DWORD PTR _y$[ebp]
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR _y$[ebp], edx
$LN7@xy_to_zord:

; 411  :       // fallthrough
; 412  :     case 8:
; 413  :       result += x / 4 * (4*4);

	mov	eax, DWORD PTR _x$[ebp]
	shr	eax, 2
	shl	eax, 4
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 414  :       result += y / 4 * (8*4);

	mov	eax, DWORD PTR _y$[ebp]
	shr	eax, 2
	shl	eax, 5
	add	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _result$[ebp], eax
$LN2@xy_to_zord:

; 415  :       // fallthrough
; 416  :     case 4:
; 417  :       break;
; 418  :   }
; 419  : 
; 420  :   return result;

	mov	eax, DWORD PTR _result$[ebp]

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@xy_to_zord:
	DD	$LN7@xy_to_zord
	DD	$LN6@xy_to_zord
	DD	$LN5@xy_to_zord
	DD	$LN4@xy_to_zord
	DD	$LN2@xy_to_zord
$LN16@xy_to_zord:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_xy_to_zorder ENDP
_TEXT	ENDS
END
