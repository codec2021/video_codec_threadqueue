; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__6C65A336_cu@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__546CF5FC_crypto@h DB 01H
__6BE1C69C_encoderstate@h DB 01H
__EF24DF88_rate_control@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_cbf_masks DW	01fH
	DW	0fH
	DW	07H
	DW	03H
	DW	01H
	ORG $+6
_default_fast_coeff_cost_wts DD 03e282e88r	; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e282e88r			; 0.16424
	DD	040852b41r			; 4.16153
	DD	0406093ffr			; 3.50903
	DD	040ddb290r			; 6.92805
	DD	03e26c094r			; 0.162844
	DD	04081ca43r			; 4.05594
	DD	04064203ar			; 3.56447
	DD	040db915ar			; 6.86149
	DD	03e03d189r			; 0.128729
	DD	04089fbafr			; 4.31197
	DD	0407c5771r			; 3.94284
	DD	040ddeed2r			; 6.9354
	DD	03de33ce6r			; 0.110956
	DD	0408ddcb1r			; 4.43319
	DD	0407c8738r			; 3.94575
	DD	040dc1618r			; 6.8777
	DD	03dc29cfer			; 0.095026
	DD	0408f7938r			; 4.48355
	DD	0408636aar			; 4.19417
	DD	040d90260r			; 6.78154
	DD	03d99b1b8r			; 0.075046
	DD	04094474cr			; 4.6337
	DD	04082b1b6r			; 4.08419
	DD	040d65aeer			; 6.6986
	DD	03d56bca5r			; 0.052426
	DD	0409ef37er			; 4.96722
	DD	04080dee8r			; 4.02721
	DD	040d19306r			; 6.5492
	DD	03d24bcaer			; 0.040219
	DD	040a489car			; 5.14182
	DD	0407ee3bdr			; 3.98265
	DD	040cec513r			; 6.46156
	DD	03d0fba88r			; 0.03509
	DD	040a628e7r			; 5.19249
	DD	040752e49r			; 3.83095
	DD	040cd642ar			; 6.41848
	DD	03cf47d80r			; 0.029845
	DD	040a6c5d0r			; 5.21165
	DD	040743073r			; 3.81546
	DD	040cb0dd8r			; 6.34544
	DD	03cc0b136r			; 0.023522
	DD	040aa4f92r			; 5.32221
	DD	040744224r			; 3.81654
	DD	040cb8aaar			; 6.36068
	DD	03cae87d3r			; 0.021305
	DD	040a73ac3r			; 5.22592
	DD	04075eeccr			; 3.8427
	DD	040ca6cd9r			; 6.32579
	DD	03c821294r			; 0.015878
	DD	040a5dbe0r			; 5.18309
	DD	0407d2f27r			; 3.956
	DD	040ca8cbdr			; 6.32968
	DD	03c2ae297r			; 0.01043
	DD	040a32ce4r			; 5.09923
	DD	04085a85fr			; 4.1768
	DD	040c9c5d6r			; 6.3054
	DD	03c0a2a91r			; 0.008433
	DD	040a0f7der			; 5.03026
	DD	040879a50r			; 4.23759
	DD	040c8a4eer			; 6.27013
	DD	03bd4fdf4r			; 0.0065
	DD	0409f0412r			; 4.96925
	DD	0408adc57r			; 4.3394
	DD	040c6f870r			; 6.21783
	DD	03ba18373r			; 0.004929
	DD	0409d8d50r			; 4.9235
	DD	0408e283fr			; 4.44241
	DD	040c5df6cr			; 6.18352
	DD	03b73775cr			; 0.003715
	DD	0409d4c75r			; 4.91558
	DD	0408dbb1br			; 4.42909
	DD	040c4029fr			; 6.12532
	DD	03b4a70d2r			; 0.003089
	DD	0409c48f7r			; 4.88391
	DD	040920260r			; 4.56279
	DD	040c5019dr			; 6.15645
	DD	03b219c9dr			; 0.002466
	DD	0409c31abr			; 4.88106
	DD	040942800r			; 4.62988
	DD	040c49088r			; 6.14264
	DD	03b0e25c8r			; 0.002169
	DD	0409c3d62r			; 4.88249
	DD	04094ae99r			; 4.64631
	DD	040c415d1r			; 6.12766
	DD	03b26dacbr			; 0.002546
	DD	040996304r			; 4.79334
	DD	0409acc16r			; 4.83741
	DD	040c6606br			; 6.19927
	DD	03aac3a86r			; 0.001314
	DD	04099e220r			; 4.80885
	DD	0409a81bdr			; 4.82834
	DD	040c7ca3cr			; 6.24344
	DD	03a9741d1r			; 0.001154
	DD	0409b9a72r			; 4.8626
	DD	0409b19aar			; 4.84688
	DD	040c693a5r			; 6.20552
	DD	03a80f990r			; 0.000984
	DD	0409bb993r			; 4.8664
	DD	0409b7fa2r			; 4.85933
	DD	040c7b565r			; 6.24089
	DD	03a551f82r			; 0.000813
	DD	0409b698ar			; 4.85663
	DD	0409d95bar			; 4.92453
	DD	040c963a4r			; 6.29341
	DD	03a91c087r			; 0.001112
	DD	04099419er			; 4.78926
	DD	040a050f0r			; 5.00988
	DD	040cddf8fr			; 6.43354
	DD	03a10b418r			; 0.000552
	DD	04098580ar			; 4.76075
	DD	040a2e4f1r			; 5.09045
	DD	040d32e1fr			; 6.59938
	DD	039ccff22r			; 0.000391
	DD	0409ec42cr			; 4.96145
	DD	040a38d95r			; 5.11103
	DD	040d8342fr			; 6.75637
	DD	039ae1049r			; 0.000332
	DD	0409f63f8r			; 4.98095
	DD	040a46b89r			; 5.13813
	DD	040dbc1e8r			; 6.86742
	DD	03952c387r			; 0.000201
	DD	040a5d297r			; 5.18196
	DD	04097af64r			; 4.74016
	DD	040cec07dr			; 6.461
	DD	0397ba882r			; 0.00024
	DD	040a5eeb7r			; 5.18539
	DD	0409bfeb0r			; 4.87484
	DD	040da3603r			; 6.81909
	DD	03908509cr			; 0.00013
	DD	040a8a6b5r			; 5.27035
	DD	040977eacr			; 4.73421
	DD	040da708fr			; 6.82624
	DD	038da1a93r			; 0.000104
	DD	040abe6e8r			; 5.37194
	DD	040930af4r			; 4.59509
	DD	040d5189ar			; 6.65925
	DD	038ae1049r			; 8.3e-05
	DD	040ab9581r			; 5.362
	DD	04093c250r			; 4.61747
	DD	040dacf03r			; 6.83777
	DD	03890b418r			; 6.9e-05
	DD	040a926e3r			; 5.286
	DD	0409828e7r			; 4.75499
	DD	040e516e1r			; 7.15904
	DD	0384d8559r			; 4.9e-05
	DD	040afa18cr			; 5.48847
	DD	0408cace9r			; 4.39611
	DD	040d74682r			; 6.72736
	DD	038734507r			; 5.8e-05
	DD	0409eafa3r			; 4.95894
	DD	040929321r			; 4.58046
	DD	040cf49a5r			; 6.47774
	DD	037eae18br			; 2.8e-05
	DD	040b0ae1br			; 5.52125
	DD	0408e1885r			; 4.44049
	DD	040e68f80r			; 7.20502
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0379f6230r			; 1.9e-05
	DD	040b9f5d8r			; 5.81126
	DD	0408cc582r			; 4.39911
	DD	040eac30dr			; 7.33631
_g_sig_last_scan_8x8 DD 00H
	DD	02H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	03H
_g_sig_last_scan_16x16 DD 00H
	DD	04H
	DD	01H
	DD	08H
	DD	05H
	DD	02H
	DD	0cH
	DD	09H
	DD	06H
	DD	03H
	DD	0dH
	DD	0aH
	DD	07H
	DD	0eH
	DD	0bH
	DD	0fH
_g_sig_last_scan_32x32 DD 00H
	DD	08H
	DD	01H
	DD	010H
	DD	09H
	DD	02H
	DD	018H
	DD	011H
	DD	0aH
	DD	03H
	DD	020H
	DD	019H
	DD	012H
	DD	0bH
	DD	04H
	DD	028H
	DD	021H
	DD	01aH
	DD	013H
	DD	0cH
	DD	05H
	DD	030H
	DD	029H
	DD	022H
	DD	01bH
	DD	014H
	DD	0dH
	DD	06H
	DD	038H
	DD	031H
	DD	02aH
	DD	023H
	DD	01cH
	DD	015H
	DD	0eH
	DD	07H
	DD	039H
	DD	032H
	DD	02bH
	DD	024H
	DD	01dH
	DD	016H
	DD	0fH
	DD	03aH
	DD	033H
	DD	02cH
	DD	025H
	DD	01eH
	DD	017H
	DD	03bH
	DD	034H
	DD	02dH
	DD	026H
	DD	01fH
	DD	03cH
	DD	035H
	DD	02eH
	DD	027H
	DD	03dH
	DD	036H
	DD	02fH
	DD	03eH
	DD	037H
	DD	03fH
_g_sig_last_scan_cg DD FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_8x8
	DD	FLAT:_g_sig_last_scan_8x8+16
	DD	FLAT:_g_sig_last_scan_8x8+32
	DD	FLAT:_g_sig_last_scan_16x16
	DD	00H
	DD	00H
	DD	FLAT:_g_sig_last_scan_32x32
	DD	00H
	DD	00H
_g_group_idx DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
_g_min_in_group DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	0cH
	DB	010H
	DB	018H
	ORG $+2
_MIN_SMOOTHING_WINDOW DD 028H
_MIN_LAMBDA DQ	03fb999999999999ar		; 0.1
_MAX_LAMBDA DQ	040c3880000000000r		; 10000
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_kvz_get_rc_data
PUBLIC	_kvz_free_rc_data
PUBLIC	_kvz_set_picture_lambda_and_qp
PUBLIC	_kvz_set_lcu_lambda_and_qp
PUBLIC	_kvz_set_ctu_qp_lambda
PUBLIC	_kvz_update_after_picture
PUBLIC	_kvz_estimate_pic_lambda
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0L@NNHAOJEM@?$CFsbits?4txt@		; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0L@HGMIJOPA@?$CFsdist?4txt@		; `string'
PUBLIC	??_C@_08DJGPEPCE@?$CFsqp?4txt@			; `string'
PUBLIC	??_C@_0N@GBELCPKG@?$CFslambda?4txt@		; `string'
PUBLIC	?__LINE__Var@?0??solve_cubic_equation@@9@9	; `solve_cubic_equation'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@KJNPMKED@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ ; `string'
PUBLIC	??_C@_1GM@IAFIILEN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AA_?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??calc_poc@@9@9			; `calc_poc'::`1'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@		; `string'
PUBLIC	??_C@_03JAIJOMNP@?$CFf?5@			; `string'
PUBLIC	??_C@_03JDANDILB@?$CFd?5@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe1dcc63f141206
PUBLIC	__real@3fe23d70a3d70a3d
PUBLIC	__real@3fe428a2f98d728b
PUBLIC	__real@3fe965fea53d6e3d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff406f694467382
PUBLIC	__real@3ff428a2f98d728b
PUBLIC	__real@3ff965fea53d6e3c
PUBLIC	__real@3ffc9374bc6a7efa
PUBLIC	__real@4000000000000000
PUBLIC	__real@4003eb851eb851ec
PUBLIC	__real@4008000000000000
PUBLIC	__real@400aaaaaaaaaaaab
PUBLIC	__real@4010000000000000
PUBLIC	__real@4010cd4fdf3b645a
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@401b044d013a92a3
PUBLIC	__real@4022000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@402b6ca57a786c22
PUBLIC	__real@402b71d14e3bcd36
PUBLIC	__real@4034000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40c3880000000000
PUBLIC	__real@4197d78400000000
PUBLIC	__real@bf50624dd2f1a9fc
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfc0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@c00aaaaaaaaaaaab
PUBLIC	__real@c014000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp___wassert:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_abs:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_pthread_mutex_destroy:PROC
EXTRN	_pthread_mutex_init:PROC
EXTRN	_pthread_mutex_lock:PROC
EXTRN	_pthread_mutex_unlock:PROC
EXTRN	_pthread_rwlock_init:PROC
EXTRN	_pthread_rwlock_destroy:PROC
EXTRN	_pthread_rwlock_rdlock:PROC
EXTRN	_pthread_rwlock_wrlock:PROC
EXTRN	_pthread_rwlock_unlock:PROC
EXTRN	__imp___dclass:PROC
EXTRN	_exp:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	_pow:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp__round:PROC
EXTRN	_kvz_get_lcu_stats:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__ltod3:PROC
EXTRN	__ultod3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_data	DD	01H DUP (?)
_dist_file DD	01H DUP (?)
_bits_file DD	01H DUP (?)
_qp_file DD	01H DUP (?)
_lambda_file DD	01H DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@c00aaaaaaaaaaaab
CONST	SEGMENT
__real@c00aaaaaaaaaaaab DQ 0c00aaaaaaaaaaaabr	; -3.33333
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfc0000000000000
CONST	SEGMENT
__real@bfc0000000000000 DQ 0bfc0000000000000r	; -0.125
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bf50624dd2f1a9fc
CONST	SEGMENT
__real@bf50624dd2f1a9fc DQ 0bf50624dd2f1a9fcr	; -0.001
CONST	ENDS
;	COMDAT __real@4197d78400000000
CONST	SEGMENT
__real@4197d78400000000 DQ 04197d78400000000r	; 1e+08
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@402b71d14e3bcd36
CONST	SEGMENT
__real@402b71d14e3bcd36 DQ 0402b71d14e3bcd36r	; 13.7223
CONST	ENDS
;	COMDAT __real@402b6ca57a786c22
CONST	SEGMENT
__real@402b6ca57a786c22 DQ 0402b6ca57a786c22r	; 13.7122
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@401b044d013a92a3
CONST	SEGMENT
__real@401b044d013a92a3 DQ 0401b044d013a92a3r	; 6.7542
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010cd4fdf3b645a
CONST	SEGMENT
__real@4010cd4fdf3b645a DQ 04010cd4fdf3b645ar	; 4.2005
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400aaaaaaaaaaaab
CONST	SEGMENT
__real@400aaaaaaaaaaaab DQ 0400aaaaaaaaaaaabr	; 3.33333
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4003eb851eb851ec
CONST	SEGMENT
__real@4003eb851eb851ec DQ 04003eb851eb851ecr	; 2.49
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ffc9374bc6a7efa
CONST	SEGMENT
__real@3ffc9374bc6a7efa DQ 03ffc9374bc6a7efar	; 1.786
CONST	ENDS
;	COMDAT __real@3ff965fea53d6e3c
CONST	SEGMENT
__real@3ff965fea53d6e3c DQ 03ff965fea53d6e3cr	; 1.5874
CONST	ENDS
;	COMDAT __real@3ff428a2f98d728b
CONST	SEGMENT
__real@3ff428a2f98d728b DQ 03ff428a2f98d728br	; 1.25992
CONST	ENDS
;	COMDAT __real@3ff406f694467382
CONST	SEGMENT
__real@3ff406f694467382 DQ 03ff406f694467382r	; 1.2517
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe965fea53d6e3d
CONST	SEGMENT
__real@3fe965fea53d6e3d DQ 03fe965fea53d6e3dr	; 0.793701
CONST	ENDS
;	COMDAT __real@3fe428a2f98d728b
CONST	SEGMENT
__real@3fe428a2f98d728b DQ 03fe428a2f98d728br	; 0.629961
CONST	ENDS
;	COMDAT __real@3fe23d70a3d70a3d
CONST	SEGMENT
__real@3fe23d70a3d70a3d DQ 03fe23d70a3d70a3dr	; 0.57
CONST	ENDS
;	COMDAT __real@3fe1dcc63f141206
CONST	SEGMENT
__real@3fe1dcc63f141206 DQ 03fe1dcc63f141206r	; 0.5582
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5@ DB '%d ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JAIJOMNP@?$CFf?5@
CONST	SEGMENT
??_C@_03JAIJOMNP@?$CFf?5@ DB '%f ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@
CONST	SEGMENT
??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@ DB '%d %d %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??calc_poc@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??calc_poc@@9@9 DD 0378H			; `calc_poc'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GM@IAFIILEN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AA_?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1GM@IAFIILEN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AA_?$AAp?$AAa?$AAr@ DB '!'
	DB	00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, '[', 00H, 'i', 00H, ']', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '0', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'k', 00H, '_', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, '[', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ')', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@KJNPMKED@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
CONST	SEGMENT
??_C@_1HG@KJNPMKED@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@ DB 'F'
	DB	00H, ':', 00H, '\', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, '_'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'n', 00H, '_', 00H
	DB	'2', 00H, '0', 00H, '2', 00H, '1', 00H, '\', 00H, 'k', 00H, 'v'
	DB	00H, 'a', 00H, 'z', 00H, 'a', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'm', 00H, 'a', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 'r', 00H, 'o', 00H, 'l', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??solve_cubic_equation@@9@9
_DATA	SEGMENT
?__LINE__Var@?0??solve_cubic_equation@@9@9 DD 0194H	; `solve_cubic_equation'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@GBELCPKG@?$CFslambda?4txt@
CONST	SEGMENT
??_C@_0N@GBELCPKG@?$CFslambda?4txt@ DB '%slambda.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DJGPEPCE@?$CFsqp?4txt@
CONST	SEGMENT
??_C@_08DJGPEPCE@?$CFsqp?4txt@ DB '%sqp.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HGMIJOPA@?$CFsdist?4txt@
CONST	SEGMENT
??_C@_0L@HGMIJOPA@?$CFsdist?4txt@ DB '%sdist.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNHAOJEM@?$CFsbits?4txt@
CONST	SEGMENT
??_C@_0L@NNHAOJEM@?$CFsbits?4txt@ DB '%sbits.txt', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
_smoothing_window DD 028H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _lcu_allocate_bits
_TEXT	SEGMENT
tv85 = -244						; size = 8
tv136 = -240						; size = 4
_lcu_target_bits$ = -40					; size = 8
_num_lcus$1 = -24					; size = 4
_lcu_weight$ = -12					; size = 8
_state$ = 8						; size = 4
_pos$ = 12						; size = 8
_lcu_allocate_bits PROC					; COMDAT

; 1065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 1066 :   double lcu_weight;
; 1067 :   if (state->frame->num > state->encoder_control->cfg.owf) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+8]
	cmp	ecx, DWORD PTR [eax+156]
	jle	SHORT $LN2@lcu_alloca

; 1068 :     lcu_weight = kvz_get_lcu_stats(state, pos.x, pos.y)->weight;

	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR _lcu_weight$[ebp], xmm0

; 1069 :   } else {

	jmp	SHORT $LN3@lcu_alloca
$LN2@lcu_alloca:

; 1070 :     const uint32_t num_lcus = state->encoder_control->in.width_in_lcu *

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2488]
	imul	ecx, DWORD PTR [eax+2492]
	mov	DWORD PTR _num_lcus$1[ebp], ecx

; 1071 :                               state->encoder_control->in.height_in_lcu;
; 1072 :     lcu_weight = 1.0 / num_lcus;

	mov	eax, DWORD PTR _num_lcus$1[ebp]
	mov	DWORD PTR tv136[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv136[ebp]
	mov	ecx, DWORD PTR tv136[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _lcu_weight$[ebp], xmm1
$LN3@lcu_alloca:

; 1073 :   }
; 1074 : 
; 1075 :   // Target number of bits for the current LCU.
; 1076 :   const double lcu_target_bits = state->frame->cur_pic_target_bits * lcu_weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+120]
	mulsd	xmm0, QWORD PTR _lcu_weight$[ebp]
	movsd	QWORD PTR _lcu_target_bits$[ebp], xmm0

; 1077 : 
; 1078 :   // Allocate at least one bit for each LCU.
; 1079 :   return MAX(1, lcu_target_bits);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, QWORD PTR _lcu_target_bits$[ebp]
	jbe	SHORT $LN5@lcu_alloca
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN6@lcu_alloca
$LN5@lcu_alloca:
	movsd	xmm0, QWORD PTR _lcu_target_bits$[ebp]
	movsd	QWORD PTR tv85[ebp], xmm0
$LN6@lcu_alloca:
	fld	QWORD PTR tv85[ebp]

; 1080 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lcu_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _calc_poc
_TEXT	SEGMENT
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_calc_poc PROC						; COMDAT

; 888  : static int calc_poc(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 889  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 890  :   if((encoder->cfg.open_gop && !encoder->cfg.gop_lowdelay) || !encoder->cfg.intra_period) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	je	SHORT $LN4@calc_poc
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	SHORT $LN3@calc_poc
$LN4@calc_poc:
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@calc_poc
$LN3@calc_poc:

; 891  :     return state->frame->poc;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx+12]
	jmp	$LN1@calc_poc
$LN2@calc_poc:

; 892  :   }
; 893  :   if(!encoder->cfg.gop_len || encoder->cfg.open_gop || encoder->cfg.intra_period == 1 || encoder->cfg.gop_lowdelay) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN6@calc_poc
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN6@calc_poc
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN6@calc_poc
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	je	SHORT $LN5@calc_poc
$LN6@calc_poc:

; 894  :     return state->frame->poc + state->frame->num / encoder->cfg.intra_period * encoder->cfg.intra_period;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	esi, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [eax+8]
	cdq
	idiv	DWORD PTR [esi+4]
	mov	edx, DWORD PTR _encoder$[ebp]
	imul	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN1@calc_poc
$LN5@calc_poc:

; 895  :   }
; 896  :   if (!encoder->cfg.gop_lowdelay && !encoder->cfg.open_gop) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+277]
	test	ecx, ecx
	jne	SHORT $LN7@calc_poc
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2432]
	test	ecx, ecx
	jne	SHORT $LN7@calc_poc

; 897  :     return state->frame->poc + state->frame->num / (encoder->cfg.intra_period + 1) * (encoder->cfg.intra_period + 1);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, 1
	mov	eax, DWORD PTR [eax+8]
	cdq
	idiv	esi
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [edx+4]
	add	edx, 1
	imul	eax, edx
	add	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN1@calc_poc
$LN7@calc_poc:

; 898  :   }
; 899  :   assert(0);

	xor	eax, eax
	jne	SHORT $LN9@calc_poc
	mov	ecx, DWORD PTR ?__LINE__Var@?0??calc_poc@@9@9
	add	ecx, 11					; 0000000bH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1HG@KJNPMKED@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_13COJANIEC@?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@calc_poc:

; 900  :   return -1;

	or	eax, -1
$LN1@calc_poc:

; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_calc_poc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _update_ck
_TEXT	SEGMENT
tv151 = -308						; size = 8
tv141 = -308						; size = 8
tv132 = -308						; size = 8
tv152 = -300						; size = 8
tv142 = -300						; size = 8
tv133 = -300						; size = 8
tv281 = -292						; size = 8
tv238 = -292						; size = 4
tv148 = -292						; size = 8
tv138 = -292						; size = 8
tv129 = -292						; size = 8
tv95 = -292						; size = 8
tv232 = -288						; size = 4
_i$1 = -88						; size = 4
_new_c$ = -76						; size = 8
_new_k$ = -60						; size = 8
_lambda$ = -44						; size = 8
_distortion$ = -28					; size = 8
_bpp$ = -12						; size = 8
_state$ = 8						; size = 4
_ctu_index$ = 12					; size = 4
_layer$ = 16						; size = 4
_update_ck PROC						; COMDAT

; 858  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 859  :   double bpp = (double)state->frame->lcu_stats[ctu_index].bits / state->frame->lcu_stats[ctu_index].pixels;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _ctu_index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv232[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv232[ebp]
	mov	edx, DWORD PTR tv232[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _ctu_index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv238[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv238[ebp]
	mov	edx, DWORD PTR tv238[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _bpp$[ebp], xmm0

; 860  :   double distortion = state->frame->lcu_stats[ctu_index].distortion;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _ctu_index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+56]
	movsd	QWORD PTR _distortion$[ebp], xmm0

; 861  :   double lambda = state->frame->lcu_stats[ctu_index].lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _ctu_index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+24]
	movsd	QWORD PTR _lambda$[ebp], xmm0

; 862  : 
; 863  :   double new_k = 0, new_c = -1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _new_k$[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _new_c$[ebp], xmm0

; 864  :   if (!state->frame->lcu_stats[ctu_index].skipped) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _ctu_index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movzx	ecx, BYTE PTR [eax+edx+70]
	test	ecx, ecx
	jne	$LN7@update_ck

; 865  :     distortion = MAX(distortion, 0.0001);

	movsd	xmm0, QWORD PTR _distortion$[ebp]
	comisd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	jbe	SHORT $LN10@update_ck
	movsd	xmm0, QWORD PTR _distortion$[ebp]
	movsd	QWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN11@update_ck
$LN10@update_ck:
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR tv95[ebp], xmm0
$LN11@update_ck:
	movsd	xmm0, QWORD PTR tv95[ebp]
	movsd	QWORD PTR _distortion$[ebp], xmm0

; 866  : 
; 867  :     bpp = CLIP(0.0001, 10.0, bpp);

	movsd	xmm0, QWORD PTR _bpp$[ebp]
	comisd	xmm0, QWORD PTR __real@4024000000000000
	jbe	SHORT $LN12@update_ck
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN13@update_ck
$LN12@update_ck:
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR tv129[ebp], xmm0
$LN13@update_ck:
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	comisd	xmm0, QWORD PTR tv129[ebp]
	jbe	SHORT $LN16@update_ck
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN17@update_ck
$LN16@update_ck:
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	comisd	xmm0, QWORD PTR __real@4024000000000000
	jbe	SHORT $LN14@update_ck
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN15@update_ck
$LN14@update_ck:
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR tv132[ebp], xmm0
$LN15@update_ck:
	movsd	xmm0, QWORD PTR tv132[ebp]
	movsd	QWORD PTR tv133[ebp], xmm0
$LN17@update_ck:
	movsd	xmm0, QWORD PTR tv133[ebp]
	movsd	QWORD PTR _bpp$[ebp], xmm0

; 868  :     new_k = -bpp * lambda / distortion;

	movsd	xmm0, QWORD PTR _bpp$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _lambda$[ebp]
	divsd	xmm0, QWORD PTR _distortion$[ebp]
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 869  :     new_k = CLIP(-3.0, -0.001, new_k);

	movsd	xmm0, QWORD PTR _new_k$[ebp]
	comisd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	jbe	SHORT $LN18@update_ck
	movsd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	QWORD PTR tv138[ebp], xmm0
	jmp	SHORT $LN19@update_ck
$LN18@update_ck:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR tv138[ebp], xmm0
$LN19@update_ck:
	movsd	xmm0, QWORD PTR __real@c008000000000000
	comisd	xmm0, QWORD PTR tv138[ebp]
	jbe	SHORT $LN22@update_ck
	movsd	xmm0, QWORD PTR __real@c008000000000000
	movsd	QWORD PTR tv142[ebp], xmm0
	jmp	SHORT $LN23@update_ck
$LN22@update_ck:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	comisd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	jbe	SHORT $LN20@update_ck
	movsd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	QWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN21@update_ck
$LN20@update_ck:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR tv141[ebp], xmm0
$LN21@update_ck:
	movsd	xmm0, QWORD PTR tv141[ebp]
	movsd	QWORD PTR tv142[ebp], xmm0
$LN23@update_ck:
	movsd	xmm0, QWORD PTR tv142[ebp]
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 870  :     new_c = distortion / pow(bpp, new_k);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv281[ebp]
	movsd	xmm0, QWORD PTR _distortion$[ebp]
	divsd	xmm0, QWORD PTR tv281[ebp]
	movsd	QWORD PTR _new_c$[ebp], xmm0

; 871  :     
; 872  :     new_c = CLIP(+.1, 100.0, new_c);

	movsd	xmm0, QWORD PTR _new_c$[ebp]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jbe	SHORT $LN24@update_ck
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN25@update_ck
$LN24@update_ck:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR tv148[ebp], xmm0
$LN25@update_ck:
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR tv148[ebp]
	jbe	SHORT $LN28@update_ck
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN29@update_ck
$LN28@update_ck:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jbe	SHORT $LN26@update_ck
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv151[ebp], xmm0
	jmp	SHORT $LN27@update_ck
$LN26@update_ck:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR tv151[ebp], xmm0
$LN27@update_ck:
	movsd	xmm0, QWORD PTR tv151[ebp]
	movsd	QWORD PTR tv152[ebp], xmm0
$LN29@update_ck:
	movsd	xmm0, QWORD PTR tv152[ebp]
	movsd	QWORD PTR _new_c$[ebp], xmm0

; 873  : 
; 874  :     if (state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN8@update_ck
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, BYTE PTR [eax+2451]
	mov	eax, 4
	sub	eax, edx
	cmp	DWORD PTR [ecx+8], eax
	jg	SHORT $LN6@update_ck
$LN8@update_ck:

; 875  :       for (int i = 1; i < 5; i++) {

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN4@update_ck
$LN2@update_ck:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@update_ck:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN3@update_ck

; 876  :         state->frame->new_ratecontrol->c_para[i][ctu_index] = new_c;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ctu_index$[ebp]
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR [ecx+edx*8], xmm0

; 877  :         state->frame->new_ratecontrol->k_para[i][ctu_index] = new_k;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+24]
	mov	edx, DWORD PTR _ctu_index$[ebp]
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [ecx+edx*8], xmm0

; 878  :       }

	jmp	SHORT $LN2@update_ck
$LN3@update_ck:

; 879  :     }

	jmp	SHORT $LN7@update_ck
$LN6@update_ck:

; 880  :     else {
; 881  :       state->frame->new_ratecontrol->c_para[layer][ctu_index] = new_c;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ctu_index$[ebp]
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR [ecx+edx*8], xmm0

; 882  :       state->frame->new_ratecontrol->k_para[layer][ctu_index] = new_k;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+24]
	mov	edx, DWORD PTR _ctu_index$[ebp]
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [ecx+edx*8], xmm0
$LN7@update_ck:

; 883  :     }
; 884  :   }
; 885  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_update_ck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _update_pic_ck
_TEXT	SEGMENT
tv209 = -260						; size = 8
tv133 = -260						; size = 8
tv95 = -260						; size = 8
tv267 = -252						; size = 8
tv134 = -252						; size = 8
tv128 = -252						; size = 8
tv227 = -244						; size = 8
tv217 = -244						; size = 8
tv202 = -244						; size = 8
tv130 = -244						; size = 8
tv92 = -244						; size = 8
_i$1 = -40						; size = 4
_new_c$ = -28						; size = 8
_new_k$ = -12						; size = 8
_state$ = 8						; size = 4
_bpp$ = 12						; size = 8
_distortion$ = 20					; size = 8
_lambda$ = 28						; size = 8
_layer$ = 36						; size = 4
_update_pic_ck PROC					; COMDAT

; 831  : static void update_pic_ck(encoder_state_t * const state, double bpp, double distortion, double lambda, int layer) {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 832  :   double new_k = 0, new_c;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 833  :   if(state->frame->num == 1) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 1
	jne	$LN5@update_pic

; 834  :     new_k = log(distortion / state->frame->new_ratecontrol->intra_pic_distortion) /

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR _distortion$[ebp]
	divsd	xmm0, QWORD PTR [edx+216]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv202[ebp]
	movsd	xmm0, QWORD PTR tv202[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm1, QWORD PTR _bpp$[ebp]
	divsd	xmm1, QWORD PTR [edx+224]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv267[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv209[ebp]
	movsd	xmm0, QWORD PTR tv267[ebp]
	divsd	xmm0, QWORD PTR tv209[ebp]
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 835  :       log(bpp / state->frame->new_ratecontrol->intra_pic_bpp);
; 836  :     new_c = distortion / pow(bpp, new_k);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv217[ebp]
	movsd	xmm0, QWORD PTR _distortion$[ebp]
	divsd	xmm0, QWORD PTR tv217[ebp]
	movsd	QWORD PTR _new_c$[ebp], xmm0
$LN5@update_pic:

; 837  :   }
; 838  :   new_k = -bpp * lambda / distortion;

	movsd	xmm0, QWORD PTR _bpp$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _lambda$[ebp]
	divsd	xmm0, QWORD PTR _distortion$[ebp]
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 839  :   new_c = distortion / pow(bpp, new_k);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv227[ebp]
	movsd	xmm0, QWORD PTR _distortion$[ebp]
	divsd	xmm0, QWORD PTR tv227[ebp]
	movsd	QWORD PTR _new_c$[ebp], xmm0

; 840  : 
; 841  :   new_c = CLIP(+.1, 100.0, new_c);

	movsd	xmm0, QWORD PTR _new_c$[ebp]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jbe	SHORT $LN10@update_pic
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv92[ebp], xmm0
	jmp	SHORT $LN11@update_pic
$LN10@update_pic:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR tv92[ebp], xmm0
$LN11@update_pic:
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR tv92[ebp]
	jbe	SHORT $LN14@update_pic
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN15@update_pic
$LN14@update_pic:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	comisd	xmm0, QWORD PTR __real@4059000000000000
	jbe	SHORT $LN12@update_pic
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN13@update_pic
$LN12@update_pic:
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR tv95[ebp], xmm0
$LN13@update_pic:
	movsd	xmm0, QWORD PTR tv95[ebp]
	movsd	QWORD PTR tv128[ebp], xmm0
$LN15@update_pic:
	movsd	xmm0, QWORD PTR tv128[ebp]
	movsd	QWORD PTR _new_c$[ebp], xmm0

; 842  :   new_k = CLIP(-3.0, -0.001, new_k);

	movsd	xmm0, QWORD PTR _new_k$[ebp]
	comisd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	jbe	SHORT $LN16@update_pic
	movsd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	QWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN17@update_pic
$LN16@update_pic:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR tv130[ebp], xmm0
$LN17@update_pic:
	movsd	xmm0, QWORD PTR __real@c008000000000000
	comisd	xmm0, QWORD PTR tv130[ebp]
	jbe	SHORT $LN20@update_pic
	movsd	xmm0, QWORD PTR __real@c008000000000000
	movsd	QWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN21@update_pic
$LN20@update_pic:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	comisd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	jbe	SHORT $LN18@update_pic
	movsd	xmm0, QWORD PTR __real@bf50624dd2f1a9fc
	movsd	QWORD PTR tv133[ebp], xmm0
	jmp	SHORT $LN19@update_pic
$LN18@update_pic:
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR tv133[ebp], xmm0
$LN19@update_pic:
	movsd	xmm0, QWORD PTR tv133[ebp]
	movsd	QWORD PTR tv134[ebp], xmm0
$LN21@update_pic:
	movsd	xmm0, QWORD PTR tv134[ebp]
	movsd	QWORD PTR _new_k$[ebp], xmm0

; 843  : 
; 844  :   if(state->frame->is_irap || state->frame->num <= (4 - state->encoder_control->cfg.frame_allocation)) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN8@update_pic
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	edx, BYTE PTR [eax+2451]
	mov	eax, 4
	sub	eax, edx
	cmp	DWORD PTR [ecx+8], eax
	jg	SHORT $LN6@update_pic
$LN8@update_pic:

; 845  :     for(int i = 1; i < 5; i++) {

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN4@update_pic
$LN2@update_pic:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@update_pic:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN3@update_pic

; 846  :       state->frame->new_ratecontrol->pic_c_para[i] = new_c;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$1[ebp]
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR [edx+eax*8+48], xmm0

; 847  :       state->frame->new_ratecontrol->pic_k_para[i] = new_k;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$1[ebp]
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [edx+eax*8+96], xmm0

; 848  :     }

	jmp	SHORT $LN2@update_pic
$LN3@update_pic:

; 849  :   }

	jmp	SHORT $LN7@update_pic
$LN6@update_pic:

; 850  :   else {
; 851  :     state->frame->new_ratecontrol->pic_c_para[layer] = new_c;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR _new_c$[ebp]
	movsd	QWORD PTR [edx+eax*8+48], xmm0

; 852  :     state->frame->new_ratecontrol->pic_k_para[layer] = new_k;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR _new_k$[ebp]
	movsd	QWORD PTR [edx+eax*8+96], xmm0
$LN7@update_pic:

; 853  :   }
; 854  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_update_pic_ck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _qp_to_lambda
_TEXT	SEGMENT
tv79 = -228						; size = 8
_lambda$ = -24						; size = 8
_shift_qp$ = -8						; size = 4
_state$ = 8						; size = 4
_qp$ = 12						; size = 4
_qp_to_lambda PROC					; COMDAT

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 680  :   const int shift_qp = 12;

	mov	DWORD PTR _shift_qp$[ebp], 12		; 0000000cH

; 681  :   double lambda = 0.57 * pow(2.0, (qp - shift_qp) / 3.0);

	mov	eax, DWORD PTR _qp$[ebp]
	sub	eax, DWORD PTR _shift_qp$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv79[ebp]
	movsd	xmm0, QWORD PTR tv79[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe23d70a3d70a3d
	movsd	QWORD PTR _lambda$[ebp], xmm0

; 682  : 
; 683  :   // NOTE: HM adjusts lambda for inter according to Hadamard usage in ME.
; 684  :   //       SATD is currently always enabled for ME, so this has no effect.
; 685  :   // bool hadamard_me = true;
; 686  :   // if (!hadamard_me && state->frame->slicetype != KVZ_SLICE_I) {
; 687  :   //   lambda *= 0.95;
; 688  :   // }
; 689  : 
; 690  :   return lambda;

	fld	QWORD PTR _lambda$[ebp]

; 691  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_qp_to_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _get_ctu_bits
_TEXT	SEGMENT
tv246 = -600						; size = 8
tv604 = -596						; size = 8
tv566 = -596						; size = 8
tv635 = -592						; size = 8
tv370 = -592						; size = 8
tv639 = -588						; size = 8
tv637 = -588						; size = 8
tv200 = -588						; size = 4
tv633 = -584						; size = 8
tv629 = -584						; size = 8
tv615 = -584						; size = 8
tv584 = -584						; size = 8
tv576 = -584						; size = 8
tv202 = -584						; size = 4
tv595 = -580						; size = 4
tv557 = -580						; size = 4
tv481 = -580						; size = 4
tv192 = -580						; size = 4
tv85 = -580						; size = 4
_b$1 = -380						; size = 8
_a$2 = -364						; size = 8
_k_ctu$3 = -348						; size = 8
_c_ctu$4 = -332						; size = 8
_b$5 = -316						; size = 8
_a$6 = -300						; size = 8
_KLCU$7 = -284						; size = 8
_CLCU$8 = -268						; size = 8
_i$9 = -252						; size = 4
_i$10 = -240						; size = 4
_last_ctu$11 = -228					; size = 4
_iter$12 = -216						; size = 4
_taylor_e3$13 = -204					; size = 8
_temp_lambda$14 = -188					; size = 8
_best_lambda$15 = -172					; size = 8
_target_bits$16 = -156					; size = 4
_used_ctu_count$17 = -144				; size = 4
_total_weight$18 = -132					; size = 8
_weighted_bits_left$19 = -116				; size = 8
_bits_left$20 = -100					; size = 8
_mad$21 = -84						; size = 8
_window$22 = -68					; size = 4
_cus_left$23 = -56					; size = 4
_index$ = -44						; size = 4
_num_ctu$ = -32						; size = 4
_encoder$ = -20						; size = 4
_avg_bits$ = -8						; size = 4
_state$ = 8						; size = 4
_pos$ = 12						; size = 8
_get_ctu_bits PROC					; COMDAT

; 600  : static double get_ctu_bits(encoder_state_t * const state, vector2d_t pos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 600				; 00000258H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 601  :   int avg_bits;
; 602  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 603  :   
; 604  :   int num_ctu = state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2488]
	imul	ecx, DWORD PTR [eax+2492]
	mov	DWORD PTR _num_ctu$[ebp], ecx

; 605  :   const int index = pos.x + pos.y * state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pos$[ebp+4]
	imul	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _index$[ebp], eax

; 606  : 
; 607  :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN11@get_ctu_bi

; 608  :     if(encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	$LN13@get_ctu_bi

; 609  :       int cus_left = num_ctu - index + 1;

	mov	eax, DWORD PTR _num_ctu$[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _cus_left$23[ebp], eax

; 610  :       int window = MIN(4, cus_left);

	cmp	DWORD PTR _cus_left$23[ebp], 4
	jle	SHORT $LN18@get_ctu_bi
	mov	DWORD PTR tv85[ebp], 4
	jmp	SHORT $LN19@get_ctu_bi
$LN18@get_ctu_bi:
	mov	eax, DWORD PTR _cus_left$23[ebp]
	mov	DWORD PTR tv85[ebp], eax
$LN19@get_ctu_bi:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _window$22[ebp], ecx

; 611  :       double mad = kvz_get_lcu_stats(state, pos.x, pos.y)->i_cost;

	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	cvtsi2sd xmm0, DWORD PTR [eax+64]
	movsd	QWORD PTR _mad$21[ebp], xmm0

; 612  : 
; 613  :       pthread_mutex_lock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_lock
	add	esp, 4

; 614  :       double bits_left = state->frame->cur_pic_target_bits - state->frame->cur_frame_bits_coded;

	mov	eax, DWORD PTR _state$[ebp]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR [edx+104]
	mov	edx, DWORD PTR [edx+108]
	call	__ultod3
	movsd	xmm1, QWORD PTR [esi+120]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _bits_left$20[ebp], xmm1

; 615  :       double weighted_bits_left = (bits_left * window + (bits_left - state->frame->i_bits_left)*cus_left) / window;

	cvtsi2sd xmm0, DWORD PTR _window$22[ebp]
	mulsd	xmm0, QWORD PTR _bits_left$20[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm1, QWORD PTR _bits_left$20[ebp]
	subsd	xmm1, QWORD PTR [ecx+192]
	cvtsi2sd xmm2, DWORD PTR _cus_left$23[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	cvtsi2sd xmm1, DWORD PTR _window$22[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _weighted_bits_left$19[ebp], xmm0

; 616  :       avg_bits = mad * weighted_bits_left / state->frame->remaining_weight;

	movsd	xmm0, QWORD PTR _mad$21[ebp]
	mulsd	xmm0, QWORD PTR _weighted_bits_left$19[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	divsd	xmm0, QWORD PTR [ecx+184]
	cvttsd2si edx, xmm0
	mov	DWORD PTR _avg_bits$[ebp], edx

; 617  :       state->frame->remaining_weight -= mad;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+184]
	subsd	xmm0, QWORD PTR _mad$21[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	QWORD PTR [eax+184], xmm0

; 618  :       state->frame->i_bits_left -= state->frame->cur_pic_target_bits * mad / state->frame->icost;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	xmm0, QWORD PTR [eax+120]
	mulsd	xmm0, QWORD PTR _mad$21[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	divsd	xmm0, QWORD PTR [eax+176]
	movsd	xmm1, QWORD PTR [ecx+192]
	subsd	xmm1, xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsd	QWORD PTR [edx+192], xmm1

; 619  :       pthread_mutex_unlock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_unlock
	add	esp, 4

; 620  :     }

	jmp	SHORT $LN14@get_ctu_bi
$LN13@get_ctu_bi:

; 621  :     else {
; 622  :       avg_bits = state->frame->cur_pic_target_bits * ((double)state->frame->lcu_stats[index].pixels /

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [eax+148]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv481[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv481[ebp]
	mov	eax, DWORD PTR tv481[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+2484]
	imul	eax, DWORD PTR [edx+2480]
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	mulsd	xmm0, QWORD PTR [ecx+120]
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _avg_bits$[ebp], ecx
$LN14@get_ctu_bi:

; 623  :         (state->encoder_control->in.height * state->encoder_control->in.width));
; 624  :     }
; 625  :   }

	jmp	$LN12@get_ctu_bi
$LN11@get_ctu_bi:

; 626  :   else {
; 627  :     double total_weight = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _total_weight$18[ebp], xmm0

; 628  :     // In case wpp is used only the ctus of the current frame are safe to use
; 629  :     const int used_ctu_count = MIN(4, (encoder->cfg.wpp ? (pos.y + 1) * encoder->in.width_in_lcu : num_ctu) - index);

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN20@get_ctu_bi
	mov	ecx, DWORD PTR _pos$[ebp+4]
	add	ecx, 1
	mov	edx, DWORD PTR _encoder$[ebp]
	imul	ecx, DWORD PTR [edx+2488]
	mov	DWORD PTR tv192[ebp], ecx
	jmp	SHORT $LN21@get_ctu_bi
$LN20@get_ctu_bi:
	mov	eax, DWORD PTR _num_ctu$[ebp]
	mov	DWORD PTR tv192[ebp], eax
$LN21@get_ctu_bi:
	mov	ecx, DWORD PTR tv192[ebp]
	sub	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, 4
	jle	SHORT $LN24@get_ctu_bi
	mov	DWORD PTR tv202[ebp], 4
	jmp	SHORT $LN25@get_ctu_bi
$LN24@get_ctu_bi:
	mov	edx, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [edx+152], 0
	je	SHORT $LN22@get_ctu_bi
	mov	eax, DWORD PTR _pos$[ebp+4]
	add	eax, 1
	mov	ecx, DWORD PTR _encoder$[ebp]
	imul	eax, DWORD PTR [ecx+2488]
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN23@get_ctu_bi
$LN22@get_ctu_bi:
	mov	edx, DWORD PTR _num_ctu$[ebp]
	mov	DWORD PTR tv200[ebp], edx
$LN23@get_ctu_bi:
	mov	eax, DWORD PTR tv200[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv202[ebp], eax
$LN25@get_ctu_bi:
	mov	ecx, DWORD PTR tv202[ebp]
	mov	DWORD PTR _used_ctu_count$17[ebp], ecx

; 630  :     int target_bits = 0;

	mov	DWORD PTR _target_bits$16[ebp], 0

; 631  :     double best_lambda = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _best_lambda$15[ebp], xmm0

; 632  :     double temp_lambda = state->frame->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR _temp_lambda$14[ebp], xmm0

; 633  :     double taylor_e3 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _taylor_e3$13[ebp], xmm0

; 634  :     int iter = 0;

	mov	DWORD PTR _iter$12[ebp], 0

; 635  : 
; 636  :     int last_ctu = index + used_ctu_count;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, DWORD PTR _used_ctu_count$17[ebp]
	mov	DWORD PTR _last_ctu$11[ebp], eax

; 637  :     for (int i = index; i < last_ctu; i++) {

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$10[ebp], eax
	jmp	SHORT $LN4@get_ctu_bi
$LN2@get_ctu_bi:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN4@get_ctu_bi:
	mov	eax, DWORD PTR _i$10[ebp]
	cmp	eax, DWORD PTR _last_ctu$11[ebp]
	jge	SHORT $LN3@get_ctu_bi

; 638  :       target_bits += state->frame->lcu_stats[i].weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$10[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	cvtsi2sd xmm0, DWORD PTR _target_bits$16[ebp]
	addsd	xmm0, QWORD PTR [eax+edx+8]
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _target_bits$16[ebp], ecx

; 639  :     }

	jmp	SHORT $LN2@get_ctu_bi
$LN3@get_ctu_bi:

; 640  : 
; 641  :     pthread_mutex_lock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_lock
	add	esp, 4

; 642  :     total_weight = state->frame->remaining_weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+184]
	movsd	QWORD PTR _total_weight$18[ebp], xmm0

; 643  :     target_bits = MAX(target_bits + state->frame->cur_pic_target_bits - state->frame->cur_frame_bits_coded - (int)total_weight, 10);

	cvtsi2sd xmm0, DWORD PTR _target_bits$16[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	addsd	xmm0, QWORD PTR [ecx+120]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [eax+108]
	movsd	QWORD PTR tv633[ebp], xmm0
	call	__ultod3
	movsd	xmm1, QWORD PTR tv633[ebp]
	subsd	xmm1, xmm0
	cvttsd2si ecx, QWORD PTR _total_weight$18[ebp]
	cvtsi2sd xmm0, ecx
	subsd	xmm1, xmm0
	comisd	xmm1, QWORD PTR __real@4024000000000000
	jbe	SHORT $LN26@get_ctu_bi
	cvtsi2sd xmm0, DWORD PTR _target_bits$16[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	addsd	xmm0, QWORD PTR [eax+120]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR [edx+104]
	mov	edx, DWORD PTR [edx+108]
	movsd	QWORD PTR tv635[ebp], xmm0
	call	__ultod3
	movsd	xmm1, QWORD PTR tv635[ebp]
	subsd	xmm1, xmm0
	cvttsd2si eax, QWORD PTR _total_weight$18[ebp]
	cvtsi2sd xmm0, eax
	subsd	xmm1, xmm0
	movsd	QWORD PTR tv246[ebp], xmm1
	jmp	SHORT $LN27@get_ctu_bi
$LN26@get_ctu_bi:
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR tv246[ebp], xmm0
$LN27@get_ctu_bi:
	cvttsd2si ecx, QWORD PTR tv246[ebp]
	mov	DWORD PTR _target_bits$16[ebp], ecx

; 644  :     pthread_mutex_unlock(&state->frame->rc_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_pthread_mutex_unlock
	add	esp, 4
$LN7@get_ctu_bi:

; 645  : 
; 646  :     //just similar with the process at frame level, details can refer to the function kvz_estimate_pic_lambda
; 647  :     do {
; 648  :       taylor_e3 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _taylor_e3$13[ebp], xmm0

; 649  :       best_lambda = solve_cubic_equation(state->frame, index, last_ctu, temp_lambda, target_bits);

	cvtsi2sd xmm0, DWORD PTR _target_bits$16[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _temp_lambda$14[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _last_ctu$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_solve_cubic_equation
	add	esp, 28					; 0000001cH
	fstp	QWORD PTR _best_lambda$15[ebp]

; 650  :       temp_lambda = best_lambda;

	movsd	xmm0, QWORD PTR _best_lambda$15[ebp]
	movsd	QWORD PTR _temp_lambda$14[ebp], xmm0

; 651  :       for (int i = index; i < last_ctu; i++) {

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN10@get_ctu_bi
$LN8@get_ctu_bi:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN10@get_ctu_bi:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _last_ctu$11[ebp]
	jge	$LN9@get_ctu_bi

; 652  :         double CLCU = state->frame->c_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _i$9[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _CLCU$8[ebp], xmm0

; 653  :         double KLCU = state->frame->k_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _i$9[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _KLCU$7[ebp], xmm0

; 654  :         double a = -CLCU * KLCU / pow((double)state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	movsd	xmm0, QWORD PTR _CLCU$8[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _KLCU$7[ebp]
	movsd	xmm1, QWORD PTR _KLCU$7[ebp]
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$9[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv557[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv557[ebp]
	mov	edx, DWORD PTR tv557[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv637[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv566[ebp]
	movsd	xmm0, QWORD PTR tv637[ebp]
	divsd	xmm0, QWORD PTR tv566[ebp]
	movsd	QWORD PTR _a$6[ebp], xmm0

; 655  :         double b = -1.0 / (KLCU - 1.0);

	movsd	xmm0, QWORD PTR _KLCU$7[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _b$5[ebp], xmm1

; 656  :         taylor_e3 += pow(a / best_lambda, b);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$5[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$6[ebp]
	divsd	xmm0, QWORD PTR _best_lambda$15[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv576[ebp]
	movsd	xmm0, QWORD PTR tv576[ebp]
	addsd	xmm0, QWORD PTR _taylor_e3$13[ebp]
	movsd	QWORD PTR _taylor_e3$13[ebp], xmm0

; 657  :       }

	jmp	$LN8@get_ctu_bi
$LN9@get_ctu_bi:

; 658  :       iter++;

	mov	eax, DWORD PTR _iter$12[ebp]
	add	eax, 1
	mov	DWORD PTR _iter$12[ebp], eax

; 659  :     } while (fabs(taylor_e3 - target_bits) > 0.01 && iter < 5);

	cvtsi2sd xmm0, DWORD PTR _target_bits$16[ebp]
	movsd	xmm1, QWORD PTR _taylor_e3$13[ebp]
	subsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv584[ebp]
	movsd	xmm0, QWORD PTR tv584[ebp]
	comisd	xmm0, QWORD PTR __real@3f847ae147ae147b
	jbe	SHORT $LN15@get_ctu_bi
	cmp	DWORD PTR _iter$12[ebp], 5
	jl	$LN7@get_ctu_bi
$LN15@get_ctu_bi:

; 660  : 
; 661  :     double c_ctu = state->frame->c_para[index];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _index$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _c_ctu$4[ebp], xmm0

; 662  :     double k_ctu = state->frame->k_para[index];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _index$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _k_ctu$3[ebp], xmm0

; 663  :     double a = -c_ctu * k_ctu / pow(((double)state->frame->lcu_stats[index].pixels), k_ctu - 1.0);

	movsd	xmm0, QWORD PTR _c_ctu$4[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _k_ctu$3[ebp]
	movsd	xmm1, QWORD PTR _k_ctu$3[ebp]
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv595[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv595[ebp]
	mov	edx, DWORD PTR tv595[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv639[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv604[ebp]
	movsd	xmm0, QWORD PTR tv639[ebp]
	divsd	xmm0, QWORD PTR tv604[ebp]
	movsd	QWORD PTR _a$2[ebp], xmm0

; 664  :     double b = -1.0 / (k_ctu - 1.0);

	movsd	xmm0, QWORD PTR _k_ctu$3[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _b$1[ebp], xmm1

; 665  : 
; 666  :     state->frame->lcu_stats[index].weight = MAX(pow(a / best_lambda, b), 0.01);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$2[ebp]
	divsd	xmm0, QWORD PTR _best_lambda$15[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv615[ebp]
	movsd	xmm0, QWORD PTR tv615[ebp]
	comisd	xmm0, QWORD PTR __real@3f847ae147ae147b
	jbe	SHORT $LN28@get_ctu_bi
	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$2[ebp]
	divsd	xmm0, QWORD PTR _best_lambda$15[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv370[ebp]
	jmp	SHORT $LN29@get_ctu_bi
$LN28@get_ctu_bi:
	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	movsd	QWORD PTR tv370[ebp], xmm0
$LN29@get_ctu_bi:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR tv370[ebp]
	movsd	QWORD PTR [eax+edx+8], xmm0

; 667  : 
; 668  :     avg_bits = (int)(state->frame->lcu_stats[index].weight + 0.5);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+8]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _avg_bits$[ebp], ecx
$LN12@get_ctu_bi:

; 669  :   }
; 670  : 
; 671  :   if (avg_bits < 1) {

	cmp	DWORD PTR _avg_bits$[ebp], 1
	jge	SHORT $LN16@get_ctu_bi

; 672  :     avg_bits = 1;

	mov	DWORD PTR _avg_bits$[ebp], 1
$LN16@get_ctu_bi:

; 673  :   }
; 674  : 
; 675  :   return avg_bits;

	fild	DWORD PTR _avg_bits$[ebp]
	fstp	QWORD PTR tv629[ebp]
	fld	QWORD PTR tv629[ebp]

; 676  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get_ctu_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _calculate_weights
_TEXT	SEGMENT
tv193 = -304						; size = 8
tv215 = -296						; size = 8
tv132 = -292						; size = 8
tv184 = -288						; size = 4
_b$1 = -88						; size = 8
_a$2 = -72						; size = 8
_k_lcu$3 = -56						; size = 8
_c_lcu$4 = -40						; size = 8
_i$5 = -24						; size = 4
_total_weight$ = -12					; size = 8
_state$ = 8						; size = 4
_ctu_count$ = 12					; size = 4
_est_lambda$ = 16					; size = 8
_calculate_weights PROC					; COMDAT

; 475  : static INLINE double calculate_weights(encoder_state_t* const state, const int ctu_count, double est_lambda) {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 476  :   double total_weight = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _total_weight$[ebp], xmm0

; 477  :   for(int i = 0; i < ctu_count; i++) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN4@calculate_
$LN2@calculate_:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN4@calculate_:
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR _ctu_count$[ebp]
	jge	$LN3@calculate_

; 478  :     double c_lcu = state->frame->c_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _i$5[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _c_lcu$4[ebp], xmm0

; 479  :     double k_lcu = state->frame->k_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _i$5[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _k_lcu$3[ebp], xmm0

; 480  :     double a = -c_lcu * k_lcu / pow(state->frame->lcu_stats[i].pixels, k_lcu - 1.0);

	movsd	xmm0, QWORD PTR _c_lcu$4[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _k_lcu$3[ebp]
	movsd	xmm1, QWORD PTR _k_lcu$3[ebp]
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv184[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv184[ebp]
	mov	edx, DWORD PTR tv184[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv215[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv193[ebp]
	movsd	xmm0, QWORD PTR tv215[ebp]
	divsd	xmm0, QWORD PTR tv193[ebp]
	movsd	QWORD PTR _a$2[ebp], xmm0

; 481  :     double b = -1.0 / (k_lcu - 1.0);

	movsd	xmm0, QWORD PTR _k_lcu$3[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _b$1[ebp], xmm1

; 482  :     state->frame->lcu_stats[i].original_weight = state->frame->lcu_stats[i].weight = pow(a / est_lambda, b);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$2[ebp]
	divsd	xmm0, QWORD PTR _est_lambda$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv132[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR tv132[ebp]
	movsd	QWORD PTR [eax+edx+8], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR _i$5[ebp], 72
	mov	ecx, DWORD PTR [edx+148]
	movsd	xmm0, QWORD PTR tv132[ebp]
	movsd	QWORD PTR [ecx+eax+16], xmm0

; 483  :     if (state->frame->lcu_stats[i].weight < 0.01) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	comisd	xmm0, QWORD PTR [eax+edx+8]
	jbe	SHORT $LN5@calculate_

; 484  :       state->frame->lcu_stats[i].weight = 0.01;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	movsd	QWORD PTR [eax+edx+8], xmm0
$LN5@calculate_:

; 485  :     }
; 486  :     total_weight += state->frame->lcu_stats[i].weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR _total_weight$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx+8]
	movsd	QWORD PTR _total_weight$[ebp], xmm0

; 487  :   }

	jmp	$LN2@calculate_
$LN3@calculate_:

; 488  :   return total_weight;

	fld	QWORD PTR _total_weight$[ebp]

; 489  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_calculate_weights ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _solve_cubic_equation
_TEXT	SEGMENT
tv501 = -596						; size = 8
tv603 = -588						; size = 8
tv489 = -580						; size = 8
tv452 = -580						; size = 8
tv601 = -572						; size = 8
tv595 = -572						; size = 8
tv481 = -564						; size = 8
tv446 = -564						; size = 8
tv417 = -564						; size = 8
tv599 = -556						; size = 8
tv593 = -556						; size = 8
tv589 = -556						; size = 8
tv566 = -556						; size = 8
tv540 = -556						; size = 8
tv529 = -556						; size = 8
tv619 = -548						; size = 8
tv615 = -548						; size = 8
tv609 = -548						; size = 8
tv469 = -548						; size = 8
tv438 = -548						; size = 8
tv411 = -548						; size = 8
tv271 = -548						; size = 8
tv376 = -544						; size = 8
tv613 = -540						; size = 8
tv607 = -540						; size = 8
tv597 = -540						; size = 8
tv591 = -540						; size = 8
tv587 = -540						; size = 8
tv557 = -540						; size = 8
tv272 = -540						; size = 8
tv585 = -536						; size = 8
tv617 = -532						; size = 8
tv611 = -532						; size = 8
tv605 = -532						; size = 8
tv459 = -532						; size = 8
tv426 = -532						; size = 8
tv403 = -532						; size = 8
tv393 = -532						; size = 8
tv268 = -532						; size = 8
tv367 = -528						; size = 4
_flag2$1 = -328						; size = 8
_flag1$2 = -312						; size = 8
_part2$3 = -296						; size = 8
_part1$4 = -280						; size = 8
_temp_x$5 = -264					; size = 8
_KLCU$6 = -248						; size = 8
_CLCU$7 = -232						; size = 8
_d$8 = -216						; size = 8
_c$9 = -200						; size = 8
_b$10 = -184						; size = 8
_a$11 = -168						; size = 8
_i$12 = -152						; size = 4
_para_cc$ = -140					; size = 8
_para_bb$ = -124					; size = 8
_para_aa$ = -108					; size = 8
_delta$ = -92						; size = 8
_para_d$ = -76						; size = 8
_para_c$ = -60						; size = 8
_para_b$ = -44						; size = 8
_para_a$ = -28						; size = 8
_best_lambda$ = -12					; size = 8
_state$ = 8						; size = 4
_ctu_index$ = 12					; size = 4
_last_ctu$ = 16						; size = 4
_est_lambda$ = 20					; size = 8
_target_bits$ = 28					; size = 8
_solve_cubic_equation PROC				; COMDAT

; 404  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-596]
	mov	ecx, 149				; 00000095H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 405  :   double best_lambda = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _best_lambda$[ebp], xmm0

; 406  :   double para_a = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_a$[ebp], xmm0

; 407  :   double para_b = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_b$[ebp], xmm0

; 408  :   double para_c = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_c$[ebp], xmm0

; 409  :   double para_d = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_d$[ebp], xmm0

; 410  :   double delta = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _delta$[ebp], xmm0

; 411  :   double para_aa = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_aa$[ebp], xmm0

; 412  :   double para_bb = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_bb$[ebp], xmm0

; 413  :   double para_cc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _para_cc$[ebp], xmm0

; 414  :   for (int i = ctu_index; i < last_ctu; i++)

	mov	eax, DWORD PTR _ctu_index$[ebp]
	mov	DWORD PTR _i$12[ebp], eax
	jmp	SHORT $LN4@solve_cubi
$LN2@solve_cubi:
	mov	eax, DWORD PTR _i$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$12[ebp], eax
$LN4@solve_cubi:
	mov	eax, DWORD PTR _i$12[ebp]
	cmp	eax, DWORD PTR _last_ctu$[ebp]
	jge	$LN3@solve_cubi

; 415  :   {
; 416  :     double a = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _a$11[ebp], xmm0

; 417  :     double b = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _b$10[ebp], xmm0

; 418  :     double c = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _c$9[ebp], xmm0

; 419  :     double d = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _d$8[ebp], xmm0

; 420  :     assert(!((state->c_para[i] <= 0) || (state->k_para[i] >= 0))); //Check C and K during each solution 

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _i$12[ebp]
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR [ecx+edx*8]
	jae	SHORT $LN12@solve_cubi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _i$12[ebp]
	movsd	xmm0, QWORD PTR [ecx+edx*8]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN13@solve_cubi
$LN12@solve_cubi:
	mov	eax, DWORD PTR ?__LINE__Var@?0??solve_cubic_equation@@9@9
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1HG@KJNPMKED@?$AAF?$AA?3?$AA?2?$AAo?$AAp?$AAe?$AAn?$AA_?$AAc?$AAo?$AAd?$AAe?$AAc?$AA_?$AAl@
	push	OFFSET ??_C@_1GM@IAFIILEN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AA_?$AAp?$AAa?$AAr@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@solve_cubi:

; 421  : 
; 422  :     double CLCU = state->c_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	edx, DWORD PTR _i$12[ebp]
	movsd	xmm0, QWORD PTR [ecx+edx*8]
	movsd	QWORD PTR _CLCU$7[ebp], xmm0

; 423  :     double KLCU = state->k_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR _i$12[ebp]
	movsd	xmm0, QWORD PTR [ecx+edx*8]
	movsd	QWORD PTR _KLCU$6[ebp], xmm0

; 424  :     a = -CLCU * KLCU / pow(state->lcu_stats[i].pixels, KLCU - 1.0);

	movsd	xmm0, QWORD PTR _CLCU$7[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _KLCU$6[ebp]
	movsd	xmm1, QWORD PTR _KLCU$6[ebp]
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	imul	eax, DWORD PTR _i$12[ebp], 72
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR [edx+eax+4]
	mov	DWORD PTR tv367[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv367[ebp]
	mov	ecx, DWORD PTR tv367[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv585[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv376[ebp]
	movsd	xmm0, QWORD PTR tv585[ebp]
	divsd	xmm0, QWORD PTR tv376[ebp]
	movsd	QWORD PTR _a$11[ebp], xmm0

; 425  :     b = -1.0 / (KLCU - 1.0);

	movsd	xmm0, QWORD PTR _KLCU$6[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _b$10[ebp], xmm1

; 426  :     d = est_lambda;

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR _d$8[ebp], xmm0

; 427  :     c = pow(a / d, b);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$11[ebp]
	divsd	xmm0, QWORD PTR _d$8[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _c$9[ebp]

; 428  :     para_a = para_a - c * pow(b, 3.0) / 6.0;

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv393[ebp]
	movsd	xmm0, QWORD PTR tv393[ebp]
	mulsd	xmm0, QWORD PTR _c$9[ebp]
	divsd	xmm0, QWORD PTR __real@4018000000000000
	movsd	xmm1, QWORD PTR _para_a$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _para_a$[ebp], xmm1

; 429  :     para_b = para_b + (pow(b, 2.0) / 2.0 + pow(b, 3.0)*log(d) / 2.0)*c;

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv403[ebp]
	movsd	xmm0, QWORD PTR tv403[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv587[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv411[ebp]
	movsd	xmm0, QWORD PTR tv411[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv589[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv417[ebp]
	movsd	xmm0, QWORD PTR tv589[ebp]
	mulsd	xmm0, QWORD PTR tv417[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR tv587[ebp]
	addsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _c$9[ebp]
	addsd	xmm1, QWORD PTR _para_b$[ebp]
	movsd	QWORD PTR _para_b$[ebp], xmm1

; 430  :     para_c = para_c - (pow(b, 3.0) / 2.0*pow(log(d), 2.0) + pow(b, 2.0)*log(d) + b)*c;

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv426[ebp]
	movsd	xmm0, QWORD PTR tv426[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv591[ebp], xmm0
	call	_log
	fstp	QWORD PTR [esp]
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv438[ebp]
	movsd	xmm0, QWORD PTR tv591[ebp]
	mulsd	xmm0, QWORD PTR tv438[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv593[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv446[ebp]
	movsd	xmm0, QWORD PTR tv446[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv595[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv452[ebp]
	movsd	xmm0, QWORD PTR tv595[ebp]
	mulsd	xmm0, QWORD PTR tv452[ebp]
	movsd	xmm1, QWORD PTR tv593[ebp]
	addsd	xmm1, xmm0
	addsd	xmm1, QWORD PTR _b$10[ebp]
	mulsd	xmm1, QWORD PTR _c$9[ebp]
	movsd	xmm0, QWORD PTR _para_c$[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _para_c$[ebp], xmm0

; 431  :     para_d = para_d + c * (1 + b * log(d) + pow(b, 2.0) / 2 * pow(log(d), 2.0) + pow(b, 3.0) / 6 * pow(log(d), 3.0));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv459[ebp]
	movsd	xmm0, QWORD PTR tv459[ebp]
	mulsd	xmm0, QWORD PTR _b$10[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv597[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv469[ebp]
	movsd	xmm0, QWORD PTR tv469[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv599[ebp], xmm0
	call	_log
	fstp	QWORD PTR [esp]
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv481[ebp]
	movsd	xmm0, QWORD PTR tv599[ebp]
	mulsd	xmm0, QWORD PTR tv481[ebp]
	movsd	xmm1, QWORD PTR tv597[ebp]
	addsd	xmm1, xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR tv601[ebp], xmm1
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv489[ebp]
	movsd	xmm0, QWORD PTR tv489[ebp]
	divsd	xmm0, QWORD PTR __real@4018000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _d$8[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv603[ebp], xmm0
	call	_log
	fstp	QWORD PTR [esp]
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv501[ebp]
	movsd	xmm0, QWORD PTR tv603[ebp]
	mulsd	xmm0, QWORD PTR tv501[ebp]
	movsd	xmm1, QWORD PTR tv601[ebp]
	addsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _c$9[ebp]
	addsd	xmm1, QWORD PTR _para_d$[ebp]
	movsd	QWORD PTR _para_d$[ebp], xmm1

; 432  :   }

	jmp	$LN2@solve_cubi
$LN3@solve_cubi:

; 433  : 
; 434  :   para_d = para_d - target_bits;

	movsd	xmm0, QWORD PTR _para_d$[ebp]
	subsd	xmm0, QWORD PTR _target_bits$[ebp]
	movsd	QWORD PTR _para_d$[ebp], xmm0

; 435  :   para_aa = para_b * para_b - 3 * para_a*para_c;

	movsd	xmm0, QWORD PTR _para_b$[ebp]
	mulsd	xmm0, QWORD PTR _para_b$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	mulsd	xmm1, QWORD PTR _para_a$[ebp]
	mulsd	xmm1, QWORD PTR _para_c$[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _para_aa$[ebp], xmm0

; 436  :   para_bb = para_b * para_c - 9 * para_a*para_d;

	movsd	xmm0, QWORD PTR _para_b$[ebp]
	mulsd	xmm0, QWORD PTR _para_c$[ebp]
	movsd	xmm1, QWORD PTR __real@4022000000000000
	mulsd	xmm1, QWORD PTR _para_a$[ebp]
	mulsd	xmm1, QWORD PTR _para_d$[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _para_bb$[ebp], xmm0

; 437  :   para_cc = para_c * para_c - 3 * para_b*para_d;

	movsd	xmm0, QWORD PTR _para_c$[ebp]
	mulsd	xmm0, QWORD PTR _para_c$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	mulsd	xmm1, QWORD PTR _para_b$[ebp]
	mulsd	xmm1, QWORD PTR _para_d$[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _para_cc$[ebp], xmm0

; 438  : 
; 439  :   delta = para_bb * para_bb - 4 * para_aa*para_cc;

	movsd	xmm0, QWORD PTR _para_bb$[ebp]
	mulsd	xmm0, QWORD PTR _para_bb$[ebp]
	movsd	xmm1, QWORD PTR __real@4010000000000000
	mulsd	xmm1, QWORD PTR _para_aa$[ebp]
	mulsd	xmm1, QWORD PTR _para_cc$[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _delta$[ebp], xmm0

; 440  : 
; 441  :   if (delta > 0.0)  //Check whether delta is right

	movsd	xmm0, QWORD PTR _delta$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN5@solve_cubi

; 442  :   {
; 443  :     double temp_x = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _temp_x$5[ebp], xmm0

; 444  :     double part1 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _part1$4[ebp], xmm0

; 445  :     double part2 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _part2$3[ebp], xmm0

; 446  :     double flag1 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _flag1$2[ebp], xmm0

; 447  :     double flag2 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _flag2$1[ebp], xmm0

; 448  :     part1 = para_aa * para_b + 3 * para_a*(-para_bb - pow(delta, 0.5)) / 2.0;

	movsd	xmm0, QWORD PTR _para_aa$[ebp]
	mulsd	xmm0, QWORD PTR _para_b$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	mulsd	xmm1, QWORD PTR _para_a$[ebp]
	movsd	xmm2, QWORD PTR _para_bb$[ebp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	sub	esp, 8
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [esp], xmm3
	sub	esp, 8
	movsd	xmm3, QWORD PTR _delta$[ebp]
	movsd	QWORD PTR [esp], xmm3
	movsd	QWORD PTR tv605[ebp], xmm0
	movsd	QWORD PTR tv607[ebp], xmm1
	movsd	QWORD PTR tv609[ebp], xmm2
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv529[ebp]
	movsd	xmm0, QWORD PTR tv609[ebp]
	subsd	xmm0, QWORD PTR tv529[ebp]
	movsd	xmm1, QWORD PTR tv607[ebp]
	mulsd	xmm1, xmm0
	divsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	xmm0, QWORD PTR tv605[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _part1$4[ebp], xmm0

; 449  :     part2 = para_aa * para_b + 3 * para_a*(-para_bb + pow(delta, 0.5)) / 2.0;

	movsd	xmm0, QWORD PTR _para_aa$[ebp]
	mulsd	xmm0, QWORD PTR _para_b$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	mulsd	xmm1, QWORD PTR _para_a$[ebp]
	movsd	xmm2, QWORD PTR _para_bb$[ebp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	sub	esp, 8
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [esp], xmm3
	sub	esp, 8
	movsd	xmm3, QWORD PTR _delta$[ebp]
	movsd	QWORD PTR [esp], xmm3
	movsd	QWORD PTR tv611[ebp], xmm0
	movsd	QWORD PTR tv613[ebp], xmm1
	movsd	QWORD PTR tv615[ebp], xmm2
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv540[ebp]
	movsd	xmm0, QWORD PTR tv615[ebp]
	addsd	xmm0, QWORD PTR tv540[ebp]
	movsd	xmm1, QWORD PTR tv613[ebp]
	mulsd	xmm1, xmm0
	divsd	xmm1, QWORD PTR __real@4000000000000000
	movsd	xmm0, QWORD PTR tv611[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _part2$3[ebp], xmm0

; 450  :     if (part1 < 0.0) {

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _part1$4[ebp]
	jbe	SHORT $LN7@solve_cubi

; 451  :       part1 = -part1;

	movsd	xmm0, QWORD PTR _part1$4[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _part1$4[ebp], xmm0

; 452  :       flag1 = -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _flag1$2[ebp], xmm0

; 453  :     }

	jmp	SHORT $LN8@solve_cubi
$LN7@solve_cubi:

; 454  :     else {
; 455  :       flag1 = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _flag1$2[ebp], xmm0
$LN8@solve_cubi:

; 456  :     }
; 457  :     if (part2 < 0.0) {

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _part2$3[ebp]
	jbe	SHORT $LN9@solve_cubi

; 458  :       part2 = -part2;

	movsd	xmm0, QWORD PTR _part2$3[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _part2$3[ebp], xmm0

; 459  :       flag2 = -1.0;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _flag2$1[ebp], xmm0

; 460  :     }

	jmp	SHORT $LN10@solve_cubi
$LN9@solve_cubi:

; 461  :     else {
; 462  :       flag2 = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _flag2$1[ebp], xmm0
$LN10@solve_cubi:

; 463  :     }
; 464  :     temp_x = (-para_b - flag1 * pow(part1, 1.0 / 3.0) - flag2 * pow(part2, 1.0 / 3.0)) / 3 / para_a;

	movsd	xmm0, QWORD PTR _para_b$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR __real@3fd5555555555555
	movsd	QWORD PTR [esp], xmm1
	sub	esp, 8
	movsd	xmm1, QWORD PTR _part1$4[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv617[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv557[ebp]
	movsd	xmm0, QWORD PTR tv557[ebp]
	mulsd	xmm0, QWORD PTR _flag1$2[ebp]
	movsd	xmm1, QWORD PTR tv617[ebp]
	subsd	xmm1, xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fd5555555555555
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _part2$3[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	QWORD PTR tv619[ebp], xmm1
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv566[ebp]
	movsd	xmm0, QWORD PTR tv566[ebp]
	mulsd	xmm0, QWORD PTR _flag2$1[ebp]
	movsd	xmm1, QWORD PTR tv619[ebp]
	subsd	xmm1, xmm0
	divsd	xmm1, QWORD PTR __real@4008000000000000
	divsd	xmm1, QWORD PTR _para_a$[ebp]
	movsd	QWORD PTR _temp_x$5[ebp], xmm1

; 465  :     best_lambda = exp(temp_x);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _temp_x$5[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _best_lambda$[ebp]

; 466  :   }

	jmp	SHORT $LN6@solve_cubi
$LN5@solve_cubi:

; 467  :   else {
; 468  :     best_lambda = est_lambda;  //Use the original picture estimated lambda for the current CTU

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR _best_lambda$[ebp], xmm0
$LN6@solve_cubi:

; 469  :   }
; 470  :   best_lambda = CLIP(0.001, 100000000.0, best_lambda);

	movsd	xmm0, QWORD PTR _best_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@4197d78400000000
	jbe	SHORT $LN14@solve_cubi
	movsd	xmm0, QWORD PTR __real@4197d78400000000
	movsd	QWORD PTR tv268[ebp], xmm0
	jmp	SHORT $LN15@solve_cubi
$LN14@solve_cubi:
	movsd	xmm0, QWORD PTR _best_lambda$[ebp]
	movsd	QWORD PTR tv268[ebp], xmm0
$LN15@solve_cubi:
	movsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	comisd	xmm0, QWORD PTR tv268[ebp]
	jbe	SHORT $LN18@solve_cubi
	movsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR tv272[ebp], xmm0
	jmp	SHORT $LN19@solve_cubi
$LN18@solve_cubi:
	movsd	xmm0, QWORD PTR _best_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@4197d78400000000
	jbe	SHORT $LN16@solve_cubi
	movsd	xmm0, QWORD PTR __real@4197d78400000000
	movsd	QWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN17@solve_cubi
$LN16@solve_cubi:
	movsd	xmm0, QWORD PTR _best_lambda$[ebp]
	movsd	QWORD PTR tv271[ebp], xmm0
$LN17@solve_cubi:
	movsd	xmm0, QWORD PTR tv271[ebp]
	movsd	QWORD PTR tv272[ebp], xmm0
$LN19@solve_cubi:
	movsd	xmm0, QWORD PTR tv272[ebp]
	movsd	QWORD PTR _best_lambda$[ebp], xmm0

; 471  : 
; 472  :   return best_lambda;

	fld	QWORD PTR _best_lambda$[ebp]

; 473  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 596				; 00000254H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_solve_cubic_equation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _lambda_to_qp
_TEXT	SEGMENT
tv78 = -216						; size = 4
tv87 = -212						; size = 8
tv79 = -212						; size = 4
tv73 = -208						; size = 4
_qp$ = -5						; size = 1
_lambda$ = 8						; size = 8
_lambda_to_qp PROC					; COMDAT

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 395  :   const int8_t qp = 4.2005 * log(lambda) + 13.7223 + 0.5;

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv87[ebp]
	movsd	xmm0, QWORD PTR tv87[ebp]
	mulsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	addsd	xmm0, QWORD PTR __real@402b71d14e3bcd36
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _qp$[ebp], al

; 396  :   return CLIP_TO_QP(qp);

	movsx	eax, BYTE PTR _qp$[ebp]
	cmp	eax, 51					; 00000033H
	jle	SHORT $LN3@lambda_to_
	mov	DWORD PTR tv73[ebp], 51			; 00000033H
	jmp	SHORT $LN4@lambda_to_
$LN3@lambda_to_:
	movsx	ecx, BYTE PTR _qp$[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN4@lambda_to_:
	cmp	DWORD PTR tv73[ebp], 0
	jge	SHORT $LN7@lambda_to_
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN8@lambda_to_
$LN7@lambda_to_:
	movsx	edx, BYTE PTR _qp$[ebp]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN5@lambda_to_
	mov	DWORD PTR tv78[ebp], 51			; 00000033H
	jmp	SHORT $LN6@lambda_to_
$LN5@lambda_to_:
	movsx	eax, BYTE PTR _qp$[ebp]
	mov	DWORD PTR tv78[ebp], eax
$LN6@lambda_to_:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv79[ebp], ecx
$LN8@lambda_to_:
	mov	al, BYTE PTR tv79[ebp]

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_lambda_to_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _pic_allocate_bits
_TEXT	SEGMENT
tv329 = -356						; size = 8
tv197 = -348						; size = 8
tv355 = -340						; size = 8
tv317 = -340						; size = 8
tv223 = -340						; size = 8
tv167 = -336						; size = 4
tv152 = -336						; size = 4
_pic_target_bits$ = -136				; size = 8
_pic_weight$ = -120					; size = 8
_beta$1 = -104						; size = 8
_alpha$2 = -88						; size = 8
_bits$3 = -72						; size = 8
_cost$4 = -56						; size = 4
_x$5 = -44						; size = 4
_y$6 = -32						; size = 4
_total_cost$7 = -20					; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_pic_allocate_bits PROC					; COMDAT

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 89					; 00000059H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 344  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 345  : 
; 346  :   if (encoder->cfg.gop_len == 0 ||
; 347  :       state->frame->gop_offset == 0 ||

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN10@pic_alloca
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN10@pic_alloca
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@pic_alloca
$LN10@pic_alloca:

; 348  :       state->frame->num == 0)
; 349  :   {
; 350  :     // A new GOP starts at this frame.
; 351  :     state->frame->cur_gop_target_bits = gop_allocate_bits(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_gop_allocate_bits
	add	esp, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fstp	QWORD PTR [edx+112]

; 352  :     state->frame->cur_gop_bits_coded  = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+96], 0
	mov	DWORD PTR [ecx+100], 0

; 353  :   } else {

	jmp	SHORT $LN9@pic_alloca
$LN8@pic_alloca:

; 354  :     state->frame->cur_gop_target_bits =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [edx+112]
	movsd	QWORD PTR [ecx+112], xmm0
$LN9@pic_alloca:

; 355  :       state->previous_encoder_state->frame->cur_gop_target_bits;
; 356  :   }
; 357  : 
; 358  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN11@pic_alloca
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	$LN11@pic_alloca

; 359  :     int total_cost = 0;

	mov	DWORD PTR _total_cost$7[ebp], 0

; 360  :     for (int y = 0; y < encoder->cfg.height; y += 8) {

	mov	DWORD PTR _y$6[ebp], 0
	jmp	SHORT $LN4@pic_alloca
$LN2@pic_alloca:
	mov	eax, DWORD PTR _y$6[ebp]
	add	eax, 8
	mov	DWORD PTR _y$6[ebp], eax
$LN4@pic_alloca:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _y$6[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jge	$LN3@pic_alloca

; 361  :       for (int x = 0; x < encoder->cfg.width; x += 8) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN7@pic_alloca
$LN5@pic_alloca:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 8
	mov	DWORD PTR _x$5[ebp], eax
$LN7@pic_alloca:
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _x$5[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN6@pic_alloca

; 362  :         int cost = xCalcHADs8x8_ISlice(state->tile->frame->source->y + x, y, state->tile->frame->source->stride);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _y$6[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _x$5[ebp]
	push	ecx
	call	_xCalcHADs8x8_ISlice
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cost$4[ebp], eax

; 363  :         total_cost += cost;

	mov	eax, DWORD PTR _total_cost$7[ebp]
	add	eax, DWORD PTR _cost$4[ebp]
	mov	DWORD PTR _total_cost$7[ebp], eax

; 364  :         kvz_get_lcu_stats(state, x / 64, y / 64)->i_cost += cost;

	mov	eax, DWORD PTR _y$6[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	push	eax
	mov	eax, DWORD PTR _x$5[ebp]
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	push	eax
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	add	eax, 64					; 00000040H
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _cost$4[ebp]
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR [eax], edx

; 365  :       }

	jmp	$LN5@pic_alloca
$LN6@pic_alloca:

; 366  :     }

	jmp	$LN2@pic_alloca
$LN3@pic_alloca:

; 367  :     state->frame->icost = total_cost;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cvtsi2sd xmm0, DWORD PTR _total_cost$7[ebp]
	movsd	QWORD PTR [ecx+176], xmm0

; 368  :     state->frame->remaining_weight = total_cost;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cvtsi2sd xmm0, DWORD PTR _total_cost$7[ebp]
	movsd	QWORD PTR [ecx+184], xmm0

; 369  : 
; 370  :     double bits = state->frame->cur_gop_target_bits / MAX(encoder->cfg.gop_len, 1);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	cmp	ecx, 1
	jle	SHORT $LN16@pic_alloca
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	mov	DWORD PTR tv167[ebp], eax
	jmp	SHORT $LN17@pic_alloca
$LN16@pic_alloca:
	mov	DWORD PTR tv167[ebp], 1
$LN17@pic_alloca:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cvtsi2sd xmm0, DWORD PTR tv167[ebp]
	movsd	xmm1, QWORD PTR [edx+112]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _bits$3[ebp], xmm1

; 371  :     double alpha, beta = 0.5582;

	movsd	xmm0, QWORD PTR __real@3fe1dcc63f141206
	movsd	QWORD PTR _beta$1[ebp], xmm0

; 372  :     if (bits * 40 < encoder->cfg.width * encoder->cfg.height) {

	movsd	xmm0, QWORD PTR _bits$3[ebp]
	mulsd	xmm0, QWORD PTR __real@4044000000000000
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR [ecx+16]
	cvtsi2sd xmm1, edx
	comisd	xmm1, xmm0
	jbe	SHORT $LN12@pic_alloca

; 373  :       alpha = 0.25;

	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	movsd	QWORD PTR _alpha$2[ebp], xmm0

; 374  :     }

	jmp	SHORT $LN13@pic_alloca
$LN12@pic_alloca:

; 375  :     else {
; 376  :       alpha = 0.3;

	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR _alpha$2[ebp], xmm0
$LN13@pic_alloca:

; 377  :     }
; 378  :     return MAX(100, alpha*pow(state->frame->icost * 4 / bits, beta)*bits);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _beta$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+176]
	mulsd	xmm0, QWORD PTR __real@4010000000000000
	divsd	xmm0, QWORD PTR _bits$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv317[ebp]
	movsd	xmm0, QWORD PTR tv317[ebp]
	mulsd	xmm0, QWORD PTR _alpha$2[ebp]
	mulsd	xmm0, QWORD PTR _bits$3[ebp]
	movsd	xmm1, QWORD PTR __real@4059000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN18@pic_alloca
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv197[ebp], xmm0
	jmp	SHORT $LN19@pic_alloca
$LN18@pic_alloca:
	sub	esp, 8
	movsd	xmm0, QWORD PTR _beta$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	xmm0, QWORD PTR [eax+176]
	mulsd	xmm0, QWORD PTR __real@4010000000000000
	divsd	xmm0, QWORD PTR _bits$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv329[ebp]
	movsd	xmm0, QWORD PTR tv329[ebp]
	mulsd	xmm0, QWORD PTR _alpha$2[ebp]
	mulsd	xmm0, QWORD PTR _bits$3[ebp]
	movsd	QWORD PTR tv197[ebp], xmm0
$LN19@pic_alloca:
	fld	QWORD PTR tv197[ebp]
	jmp	$LN1@pic_alloca
$LN11@pic_alloca:

; 379  :   }
; 380  : 
; 381  :   if (encoder->cfg.gop_len <= 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jg	SHORT $LN14@pic_alloca

; 382  :     return state->frame->cur_gop_target_bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	fld	QWORD PTR [ecx+112]
	jmp	$LN1@pic_alloca
$LN14@pic_alloca:

; 383  :   }
; 384  : 
; 385  :   const double pic_weight = encoder->gop_layer_weights[

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+290]
	mov	edx, DWORD PTR _encoder$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx*8+4528]
	movsd	QWORD PTR _pic_weight$[ebp], xmm0

; 386  :     encoder->cfg.gop[state->frame->gop_offset].layer - 1];
; 387  :   const double pic_target_bits =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+112]
	mulsd	xmm0, QWORD PTR _pic_weight$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	movsd	QWORD PTR tv355[ebp], xmm0
	call	_pic_header_bits
	add	esp, 4
	mov	ecx, eax
	call	__ultod3
	movsd	xmm1, QWORD PTR tv355[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _pic_target_bits$[ebp], xmm1

; 388  :     state->frame->cur_gop_target_bits * pic_weight - pic_header_bits(state);
; 389  :   // Allocate at least 100 bits for each picture like HM does.
; 390  :   return MAX(100, pic_target_bits);

	movsd	xmm0, QWORD PTR __real@4059000000000000
	comisd	xmm0, QWORD PTR _pic_target_bits$[ebp]
	jbe	SHORT $LN20@pic_alloca
	movsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR tv223[ebp], xmm0
	jmp	SHORT $LN21@pic_alloca
$LN20@pic_alloca:
	movsd	xmm0, QWORD PTR _pic_target_bits$[ebp]
	movsd	QWORD PTR tv223[ebp], xmm0
$LN21@pic_alloca:
	fld	QWORD PTR tv223[ebp]
$LN1@pic_alloca:

; 391  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pic_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _pic_header_bits
_TEXT	SEGMENT
tv72 = -224						; size = 4
_bits$ = -24						; size = 8
_cfg$ = -8						; size = 4
_state$ = 8						; size = 4
_pic_header_bits PROC					; COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 305  :   const kvz_config* cfg = &state->encoder_control->cfg;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cfg$[ebp], ecx

; 306  : 
; 307  :   // nal type and slice header
; 308  :   uint64_t bits = 48 + 24;

	mov	DWORD PTR _bits$[ebp], 72		; 00000048H
	mov	DWORD PTR _bits$[ebp+4], 0

; 309  : 
; 310  :   // entry points
; 311  :   bits += 12 * state->encoder_control->in.height_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	eax, DWORD PTR [ecx+2492], 12
	cdq
	add	eax, DWORD PTR _bits$[ebp]
	adc	edx, DWORD PTR _bits$[ebp+4]
	mov	DWORD PTR _bits$[ebp], eax
	mov	DWORD PTR _bits$[ebp+4], edx

; 312  : 
; 313  :   switch (cfg->hash) {

	mov	eax, DWORD PTR _cfg$[ebp]
	mov	ecx, DWORD PTR [eax+2340]
	mov	DWORD PTR tv72[ebp], ecx
	cmp	DWORD PTR tv72[ebp], 1
	je	SHORT $LN4@pic_header
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN5@pic_header
	jmp	SHORT $LN2@pic_header
$LN4@pic_header:

; 314  :     case KVZ_HASH_CHECKSUM:
; 315  :       bits += 168;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR _bits$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _bits$[ebp], eax
	mov	DWORD PTR _bits$[ebp+4], ecx

; 316  :       break;

	jmp	SHORT $LN2@pic_header
$LN5@pic_header:

; 317  : 
; 318  :     case KVZ_HASH_MD5:
; 319  :       bits += 456;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 456				; 000001c8H
	mov	ecx, DWORD PTR _bits$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _bits$[ebp], eax
	mov	DWORD PTR _bits$[ebp+4], ecx
$LN2@pic_header:

; 320  :       break;
; 321  : 
; 322  :     case KVZ_HASH_NONE:
; 323  :       break;
; 324  :   }
; 325  : 
; 326  :   if (encoder_state_must_write_vps(state)) {

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_encoder_state_must_write_vps
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@pic_header

; 327  :     bits += 613;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 613				; 00000265H
	mov	ecx, DWORD PTR _bits$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _bits$[ebp], eax
	mov	DWORD PTR _bits$[ebp+4], ecx
$LN7@pic_header:

; 328  :   }
; 329  : 
; 330  :   if (state->frame->num == 0 && cfg->add_encoder_info) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@pic_header
	mov	eax, DWORD PTR _cfg$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN8@pic_header

; 331  :     bits += 1392;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 1392				; 00000570H
	mov	ecx, DWORD PTR _bits$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _bits$[ebp], eax
	mov	DWORD PTR _bits$[ebp+4], ecx
$LN8@pic_header:

; 332  :   }
; 333  : 
; 334  :   return bits;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	edx, DWORD PTR _bits$[ebp+4]

; 335  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pic_header_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _xCalcHADs8x8_ISlice
_TEXT	SEGMENT
_jj$1 = -1116						; size = 4
_k$2 = -1104						; size = 4
_iSumHad$ = -1092					; size = 4
_m3$ = -1080						; size = 256
_m2$ = -816						; size = 256
_m1$ = -552						; size = 256
_diff$ = -288						; size = 256
_j$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_piOrg$ = 8						; size = 4
_y$ = 12						; size = 4
_iStrideOrg$ = 16					; size = 4
_xCalcHADs8x8_ISlice PROC				; COMDAT

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1696				; 000006a0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1696]
	mov	ecx, 424				; 000001a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 210  :   piOrg += y * iStrideOrg;

	mov	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _iStrideOrg$[ebp]
	add	eax, DWORD PTR _piOrg$[ebp]
	mov	DWORD PTR _piOrg$[ebp], eax

; 211  :   int i, j;
; 212  :   int diff[64], m1[8][8], m2[8][8], m3[8][8], iSumHad = 0;

	mov	DWORD PTR _iSumHad$[ebp], 0

; 213  : 
; 214  :   for (int k = 0; k < 64; k += 8) {

	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN4@xCalcHADs8
$LN2@xCalcHADs8:
	mov	eax, DWORD PTR _k$2[ebp]
	add	eax, 8
	mov	DWORD PTR _k$2[ebp], eax
$LN4@xCalcHADs8:
	cmp	DWORD PTR _k$2[ebp], 64			; 00000040H
	jge	$LN3@xCalcHADs8

; 215  :     diff[k + 0] = piOrg[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4], eax

; 216  :     diff[k + 1] = piOrg[1];

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+eax*4+4], edx

; 217  :     diff[k + 2] = piOrg[2];

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+eax*4+8], edx

; 218  :     diff[k + 3] = piOrg[3];

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+12], eax

; 219  :     diff[k + 4] = piOrg[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _piOrg$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+eax*4+16], edx

; 220  :     diff[k + 5] = piOrg[5];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+20], eax

; 221  :     diff[k + 6] = piOrg[6];

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+24], eax

; 222  :     diff[k + 7] = piOrg[7];

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _piOrg$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _k$2[ebp]
	mov	DWORD PTR _diff$[ebp+ecx*4+28], eax

; 223  : 
; 224  :     piOrg += iStrideOrg;

	mov	eax, DWORD PTR _piOrg$[ebp]
	add	eax, DWORD PTR _iStrideOrg$[ebp]
	mov	DWORD PTR _piOrg$[ebp], eax

; 225  :   }

	jmp	$LN2@xCalcHADs8
$LN3@xCalcHADs8:

; 226  : 
; 227  :   //horizontal
; 228  :   for (j = 0; j < 8; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@xCalcHADs8
$LN5@xCalcHADs8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@xCalcHADs8:
	cmp	DWORD PTR _j$[ebp], 8
	jge	$LN6@xCalcHADs8

; 229  :     int jj = j << 3;

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 3
	mov	DWORD PTR _jj$1[ebp], eax

; 230  :     m2[j][0] = diff[jj] + diff[jj + 4];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4]
	mov	edx, DWORD PTR _jj$1[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+16]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	DWORD PTR [edx+eax], ecx

; 231  :     m2[j][1] = diff[jj + 1] + diff[jj + 5];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+4]
	mov	edx, DWORD PTR _jj$1[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+20]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax], ecx

; 232  :     m2[j][2] = diff[jj + 2] + diff[jj + 6];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+8]
	mov	edx, DWORD PTR _jj$1[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+24]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR [edx+eax], ecx

; 233  :     m2[j][3] = diff[jj + 3] + diff[jj + 7];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _diff$[ebp+eax*4+12]
	mov	edx, DWORD PTR _jj$1[ebp]
	add	ecx, DWORD PTR _diff$[ebp+edx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	DWORD PTR [edx+eax], ecx

; 234  :     m2[j][4] = diff[jj] - diff[jj + 4];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _jj$1[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+16]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR [ecx+eax], edx

; 235  :     m2[j][5] = diff[jj + 1] - diff[jj + 5];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _jj$1[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+4]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+20]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 5
	mov	DWORD PTR [ecx+eax], edx

; 236  :     m2[j][6] = diff[jj + 2] - diff[jj + 6];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _jj$1[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+8]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+24]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	DWORD PTR [ecx+eax], edx

; 237  :     m2[j][7] = diff[jj + 3] - diff[jj + 7];

	mov	eax, DWORD PTR _jj$1[ebp]
	mov	ecx, DWORD PTR _jj$1[ebp]
	mov	edx, DWORD PTR _diff$[ebp+eax*4+12]
	sub	edx, DWORD PTR _diff$[ebp+ecx*4+28]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, 4
	imul	eax, eax, 7
	mov	DWORD PTR [ecx+eax], edx

; 238  : 
; 239  :     m1[j][0] = m2[j][0] + m2[j][2];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 240  :     m1[j][1] = m2[j][1] + m2[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [eax+edx], ecx

; 241  :     m1[j][2] = m2[j][0] - m2[j][2];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	shl	esi, 1
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR [edx+ecx], eax

; 242  :     m1[j][3] = m2[j][1] - m2[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	DWORD PTR [eax+edx], ecx

; 243  :     m1[j][4] = m2[j][4] + m2[j][6];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [eax+edx], ecx

; 244  :     m1[j][5] = m2[j][5] + m2[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 5
	mov	DWORD PTR [edx+ecx], eax

; 245  :     m1[j][6] = m2[j][4] - m2[j][6];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m2$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 6
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 6
	mov	DWORD PTR [eax+edx], ecx

; 246  :     m1[j][7] = m2[j][5] - m2[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m2$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	mov	DWORD PTR [edx+ecx], eax

; 247  : 
; 248  :     m2[j][0] = m1[j][0] + m1[j][1];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 249  :     m2[j][1] = m1[j][0] - m1[j][1];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	shl	esi, 0
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [edx+ecx], eax

; 250  :     m2[j][2] = m1[j][2] + m1[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR [eax+edx], ecx

; 251  :     m2[j][3] = m1[j][2] - m1[j][3];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 3
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	DWORD PTR [eax+edx], ecx

; 252  :     m2[j][4] = m1[j][4] + m1[j][5];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR [ecx+edx]
	add	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	shl	edx, 2
	mov	DWORD PTR [eax+edx], ecx

; 253  :     m2[j][5] = m1[j][4] - m1[j][5];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	eax, DWORD PTR _m1$[ebp+eax]
	mov	esi, 4
	imul	esi, esi, 5
	mov	ecx, DWORD PTR [ecx+edx]
	sub	ecx, DWORD PTR [eax+esi]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	DWORD PTR [eax+edx], ecx

; 254  :     m2[j][6] = m1[j][6] + m1[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	add	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	DWORD PTR [edx+ecx], eax

; 255  :     m2[j][7] = m1[j][6] - m1[j][7];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	lea	edx, DWORD PTR _m1$[ebp+edx]
	mov	esi, 4
	imul	esi, esi, 7
	mov	eax, DWORD PTR [ecx+eax]
	sub	eax, DWORD PTR [edx+esi]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 7
	mov	DWORD PTR [edx+ecx], eax

; 256  :   }

	jmp	$LN5@xCalcHADs8
$LN6@xCalcHADs8:

; 257  : 
; 258  :   //vertical
; 259  :   for (i = 0; i < 8; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@xCalcHADs8
$LN8@xCalcHADs8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@xCalcHADs8:
	cmp	DWORD PTR _i$[ebp], 8
	jge	$LN9@xCalcHADs8

; 260  :     m3[0][i] = m2[0][i] + m2[4][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 261  :     m3[1][i] = m2[1][i] + m2[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 0
	lea	eax, DWORD PTR _m3$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 262  :     m3[2][i] = m2[2][i] + m2[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 1
	lea	eax, DWORD PTR _m3$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 263  :     m3[3][i] = m2[3][i] + m2[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 264  :     m3[4][i] = m2[0][i] - m2[4][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 265  :     m3[5][i] = m2[1][i] - m2[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 266  :     m3[6][i] = m2[2][i] - m2[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 267  :     m3[7][i] = m2[3][i] - m2[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 268  : 
; 269  :     m1[0][i] = m3[0][i] + m3[2][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 270  :     m1[1][i] = m3[1][i] + m3[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 0
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 271  :     m1[2][i] = m3[0][i] - m3[2][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 272  :     m1[3][i] = m3[1][i] - m3[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 273  :     m1[4][i] = m3[4][i] + m3[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 2
	lea	eax, DWORD PTR _m1$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 274  :     m1[5][i] = m3[5][i] + m3[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 275  :     m1[6][i] = m3[4][i] - m3[6][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m3$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m3$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 6
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 276  :     m1[7][i] = m3[5][i] - m3[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 5
	lea	edx, DWORD PTR _m3$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m3$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 277  : 
; 278  :     m2[0][i] = m1[0][i] + m1[1][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, 32					; 00000020H
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 279  :     m2[1][i] = m1[0][i] - m1[1][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	sub	edx, DWORD PTR [ecx+esi*4]
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 280  :     m2[2][i] = m1[2][i] + m1[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 1
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 281  :     m2[3][i] = m1[2][i] - m1[3][i];

	mov	eax, 32					; 00000020H
	shl	eax, 1
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 282  :     m2[4][i] = m1[4][i] + m1[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 32					; 00000020H
	shl	edx, 2
	lea	eax, DWORD PTR _m2$[ebp+edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 283  :     m2[5][i] = m1[4][i] - m1[5][i];

	mov	eax, 32					; 00000020H
	shl	eax, 2
	lea	ecx, DWORD PTR _m1$[ebp+eax]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m1$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	sub	ecx, DWORD PTR [edx+esi*4]
	mov	edx, 32					; 00000020H
	imul	eax, edx, 5
	lea	edx, DWORD PTR _m2$[ebp+eax]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 284  :     m2[6][i] = m1[6][i] + m1[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 285  :     m2[7][i] = m1[6][i] - m1[7][i];

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 6
	lea	edx, DWORD PTR _m1$[ebp+ecx]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m1$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	sub	edx, DWORD PTR [eax+esi*4]
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 7
	lea	eax, DWORD PTR _m2$[ebp+ecx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 286  :   }

	jmp	$LN8@xCalcHADs8
$LN9@xCalcHADs8:

; 287  : 
; 288  :   for (i = 0; i < 8; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@xCalcHADs8
$LN11@xCalcHADs8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@xCalcHADs8:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN12@xCalcHADs8

; 289  :     for (j = 0; j < 8; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@xCalcHADs8
$LN14@xCalcHADs8:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@xCalcHADs8:
	cmp	DWORD PTR _j$[ebp], 8
	jge	SHORT $LN15@xCalcHADs8

; 290  :       iSumHad += abs(m2[i][j]);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _m2$[ebp+eax]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _iSumHad$[ebp]
	mov	DWORD PTR _iSumHad$[ebp], eax

; 291  :     }

	jmp	SHORT $LN14@xCalcHADs8
$LN15@xCalcHADs8:

; 292  :   }

	jmp	SHORT $LN11@xCalcHADs8
$LN12@xCalcHADs8:

; 293  :   iSumHad -= abs(m2[0][0]);

	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _m2$[ebp+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+ecx]
	push	edx
	call	_abs
	add	esp, 4
	mov	ecx, DWORD PTR _iSumHad$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _iSumHad$[ebp], ecx

; 294  :   iSumHad = (iSumHad + 2) >> 2;

	mov	eax, DWORD PTR _iSumHad$[ebp]
	add	eax, 2
	sar	eax, 2
	mov	DWORD PTR _iSumHad$[ebp], eax

; 295  :   return(iSumHad);

	mov	eax, DWORD PTR _iSumHad$[ebp]

; 296  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@xCalcHADs8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1696				; 000006a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@xCalcHADs8:
	DD	4
	DD	$LN22@xCalcHADs8
$LN22@xCalcHADs8:
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN18@xCalcHADs8
	DD	-552					; fffffdd8H
	DD	256					; 00000100H
	DD	$LN19@xCalcHADs8
	DD	-816					; fffffcd0H
	DD	256					; 00000100H
	DD	$LN20@xCalcHADs8
	DD	-1080					; fffffbc8H
	DD	256					; 00000100H
	DD	$LN21@xCalcHADs8
$LN21@xCalcHADs8:
	DB	109					; 0000006dH
	DB	51					; 00000033H
	DB	0
$LN20@xCalcHADs8:
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN19@xCalcHADs8:
	DB	109					; 0000006dH
	DB	49					; 00000031H
	DB	0
$LN18@xCalcHADs8:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_xCalcHADs8x8_ISlice ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _gop_allocate_bits
_TEXT	SEGMENT
tv269 = -260						; size = 8
tv182 = -256						; size = 8
tv174 = -252						; size = 4
tv159 = -252						; size = 4
tv141 = -252						; size = 4
tv131 = -252						; size = 4
_gop_target_bits$ = -52					; size = 8
_pictures_coded$ = -36					; size = 4
_bits_coded$ = -24					; size = 8
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_gop_allocate_bits PROC					; COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 174  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 175  : 
; 176  :   // At this point, total_bits_coded of the current state contains the
; 177  :   // number of bits written encoder->owf frames before the current frame.
; 178  :   uint64_t bits_coded = state->frame->total_bits_coded;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _bits_coded$[ebp], edx
	mov	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR _bits_coded$[ebp+4], eax

; 179  :   int pictures_coded = 0;

	mov	DWORD PTR _pictures_coded$[ebp], 0

; 180  :   if(encoder->cfg.gop_len) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	$LN4@gop_alloca

; 181  :     pictures_coded = MAX(0, state->frame->num - CEILDIV(encoder->cfg.owf, encoder->cfg.gop_len)*encoder->cfg.gop_len);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [edx+156]
	lea	eax, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	esi, BYTE PTR [edx+276]
	cdq
	idiv	esi
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [edx+276]
	imul	eax, edx
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, eax
	jns	SHORT $LN9@gop_alloca
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN10@gop_alloca
$LN9@gop_alloca:
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [edx+156]
	lea	eax, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	esi, BYTE PTR [edx+276]
	cdq
	idiv	esi
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	edx, BYTE PTR [edx+276]
	imul	eax, edx
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, eax
	mov	DWORD PTR tv131[ebp], ecx
$LN10@gop_alloca:
	mov	edx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _pictures_coded$[ebp], edx

; 182  :   }

	jmp	SHORT $LN5@gop_alloca
$LN4@gop_alloca:

; 183  :   else {
; 184  :     pictures_coded = MAX(0, state->frame->num - encoder->cfg.owf);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+156]
	jns	SHORT $LN11@gop_alloca
	mov	DWORD PTR tv141[ebp], 0
	jmp	SHORT $LN12@gop_alloca
$LN11@gop_alloca:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR tv141[ebp], ecx
$LN12@gop_alloca:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _pictures_coded$[ebp], edx
$LN5@gop_alloca:

; 185  :   }
; 186  :     
; 187  :   if (encoder->cfg.gop_len > 0 && encoder->cfg.owf > 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jle	SHORT $LN6@gop_alloca
	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+156], 0
	jle	SHORT $LN6@gop_alloca

; 188  :     // Subtract number of bits in the partially coded GOP.
; 189  :     bits_coded -= state->frame->cur_gop_bits_coded;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _bits_coded$[ebp]
	sub	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _bits_coded$[ebp+4]
	sbb	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR _bits_coded$[ebp], edx
	mov	DWORD PTR _bits_coded$[ebp+4], eax
$LN6@gop_alloca:

; 190  :   }
; 191  : 
; 192  :   smoothing_window = MAX(MIN_SMOOTHING_WINDOW, smoothing_window - encoder->cfg.gop_len / 2);

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _smoothing_window
	sub	ecx, eax
	cmp	DWORD PTR _MIN_SMOOTHING_WINDOW, ecx
	jle	SHORT $LN13@gop_alloca
	mov	edx, DWORD PTR _MIN_SMOOTHING_WINDOW
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN14@gop_alloca
$LN13@gop_alloca:
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [eax+276]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _smoothing_window
	sub	ecx, eax
	mov	DWORD PTR tv159[ebp], ecx
$LN14@gop_alloca:
	mov	edx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _smoothing_window, edx

; 193  :   double gop_target_bits = -1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _gop_target_bits$[ebp], xmm0
$LN2@gop_alloca:

; 194  : 
; 195  :   while( gop_target_bits < 0 && smoothing_window < 150) {

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _gop_target_bits$[ebp]
	jbe	$LN3@gop_alloca
	cmp	DWORD PTR _smoothing_window, 150	; 00000096H
	jge	$LN3@gop_alloca

; 196  :     // Equation 12 from https://doi.org/10.1109/TIP.2014.2336550
; 197  :     gop_target_bits =

	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	cmp	ecx, 1
	jge	SHORT $LN15@gop_alloca
	mov	DWORD PTR tv174[ebp], 1
	jmp	SHORT $LN16@gop_alloca
$LN15@gop_alloca:
	mov	edx, DWORD PTR _encoder$[ebp]
	movsx	eax, BYTE PTR [edx+276]
	mov	DWORD PTR tv174[ebp], eax
$LN16@gop_alloca:
	mov	ecx, DWORD PTR _pictures_coded$[ebp]
	add	ecx, DWORD PTR _smoothing_window
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mulsd	xmm0, QWORD PTR [edx+4520]
	mov	edx, DWORD PTR _bits_coded$[ebp+4]
	mov	ecx, DWORD PTR _bits_coded$[ebp]
	movsd	QWORD PTR tv269[ebp], xmm0
	call	__ultod3
	movsd	xmm1, QWORD PTR tv269[ebp]
	subsd	xmm1, xmm0
	cvtsi2sd xmm0, DWORD PTR tv174[ebp]
	mulsd	xmm1, xmm0
	cvtsi2sd xmm0, DWORD PTR _smoothing_window
	divsd	xmm1, xmm0
	movsd	QWORD PTR _gop_target_bits$[ebp], xmm1

; 198  :       (encoder->target_avg_bppic * (pictures_coded + smoothing_window) - bits_coded)
; 199  :       * MAX(1, encoder->cfg.gop_len) / smoothing_window;
; 200  :     if(gop_target_bits < 0) {

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _gop_target_bits$[ebp]
	jbe	SHORT $LN7@gop_alloca

; 201  :       smoothing_window += 10;

	mov	eax, DWORD PTR _smoothing_window
	add	eax, 10					; 0000000aH
	mov	DWORD PTR _smoothing_window, eax
$LN7@gop_alloca:

; 202  :     }
; 203  :   }

	jmp	$LN2@gop_alloca
$LN3@gop_alloca:

; 204  :   // Allocate at least 200 bits for each GOP like HM does.
; 205  :   return MAX(200, gop_target_bits);

	movsd	xmm0, QWORD PTR __real@4069000000000000
	comisd	xmm0, QWORD PTR _gop_target_bits$[ebp]
	jbe	SHORT $LN17@gop_alloca
	movsd	xmm0, QWORD PTR __real@4069000000000000
	movsd	QWORD PTR tv182[ebp], xmm0
	jmp	SHORT $LN18@gop_alloca
$LN17@gop_alloca:
	movsd	xmm0, QWORD PTR _gop_target_bits$[ebp]
	movsd	QWORD PTR tv182[ebp], xmm0
$LN18@gop_alloca:
	fld	QWORD PTR tv182[ebp]

; 206  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_gop_allocate_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _update_parameters
_TEXT	SEGMENT
tv140 = -280						; size = 8
tv244 = -272						; size = 8
tv199 = -264						; size = 8
tv148 = -264						; size = 8
tv141 = -264						; size = 8
tv85 = -264						; size = 8
tv273 = -256						; size = 8
tv149 = -256						; size = 8
tv129 = -256						; size = 8
tv86 = -256						; size = 8
tv227 = -248						; size = 8
tv193 = -248						; size = 8
tv182 = -248						; size = 8
tv170 = -248						; size = 4
tv145 = -248						; size = 8
tv82 = -248						; size = 8
tv165 = -244						; size = 4
_lambda_log_ratio$ = -44				; size = 8
_lambda_comp$ = -28					; size = 8
_bpp$ = -12						; size = 8
_bits$ = 8						; size = 4
_pixels$ = 12						; size = 4
_lambda_real$ = 16					; size = 8
_alpha$ = 24						; size = 4
_beta$ = 28						; size = 4
_update_parameters PROC					; COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 156  :   const double bpp              = bits / (double)pixels;

	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR tv165[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv165[ebp]
	mov	ecx, DWORD PTR tv165[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mov	edx, DWORD PTR _pixels$[ebp]
	mov	DWORD PTR tv170[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR tv170[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _bpp$[ebp], xmm0

; 157  :   const double lambda_comp      = clip_lambda(*alpha * pow(bpp, *beta));

	mov	eax, DWORD PTR _beta$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv182[ebp]
	mov	ecx, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR tv182[ebp]
	mulsd	xmm0, QWORD PTR [ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_clip_lambda
	add	esp, 8
	fstp	QWORD PTR _lambda_comp$[ebp]

; 158  :   const double lambda_log_ratio = log(lambda_real) - log(lambda_comp);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda_real$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv193[ebp]
	movsd	xmm0, QWORD PTR tv193[ebp]
	sub	esp, 8
	movsd	xmm1, QWORD PTR _lambda_comp$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv273[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv199[ebp]
	movsd	xmm0, QWORD PTR tv273[ebp]
	subsd	xmm0, QWORD PTR tv199[ebp]
	movsd	QWORD PTR _lambda_log_ratio$[ebp], xmm0

; 159  : 
; 160  :   *alpha += 0.10 * lambda_log_ratio * (*alpha);

	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	mulsd	xmm0, QWORD PTR _lambda_log_ratio$[ebp]
	mov	eax, DWORD PTR _alpha$[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _alpha$[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _alpha$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 161  :   *alpha = CLIP(0.05, 20, *alpha);

	mov	eax, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR __real@4034000000000000
	jbe	SHORT $LN3@update_par
	movsd	xmm0, QWORD PTR __real@4034000000000000
	movsd	QWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN4@update_par
$LN3@update_par:
	mov	ecx, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR tv82[ebp], xmm0
$LN4@update_par:
	movsd	xmm0, QWORD PTR __real@3fa999999999999a
	comisd	xmm0, QWORD PTR tv82[ebp]
	jbe	SHORT $LN7@update_par
	movsd	xmm0, QWORD PTR __real@3fa999999999999a
	movsd	QWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN8@update_par
$LN7@update_par:
	mov	edx, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	comisd	xmm0, QWORD PTR __real@4034000000000000
	jbe	SHORT $LN5@update_par
	movsd	xmm0, QWORD PTR __real@4034000000000000
	movsd	QWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN6@update_par
$LN5@update_par:
	mov	eax, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR tv85[ebp], xmm0
$LN6@update_par:
	movsd	xmm0, QWORD PTR tv85[ebp]
	movsd	QWORD PTR tv86[ebp], xmm0
$LN8@update_par:
	mov	ecx, DWORD PTR _alpha$[ebp]
	movsd	xmm0, QWORD PTR tv86[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 162  : 
; 163  :   *beta  += 0.05 * lambda_log_ratio * CLIP(-5.0, -1.0, log(bpp));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv227[ebp]
	movsd	xmm0, QWORD PTR tv227[ebp]
	comisd	xmm0, QWORD PTR __real@bff0000000000000
	jbe	SHORT $LN9@update_par
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR tv129[ebp], xmm0
	jmp	SHORT $LN10@update_par
$LN9@update_par:
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv129[ebp]
$LN10@update_par:
	movsd	xmm0, QWORD PTR __real@c014000000000000
	comisd	xmm0, QWORD PTR tv129[ebp]
	jbe	SHORT $LN13@update_par
	movsd	xmm0, QWORD PTR __real@c014000000000000
	movsd	QWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN14@update_par
$LN13@update_par:
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv244[ebp]
	movsd	xmm0, QWORD PTR tv244[ebp]
	comisd	xmm0, QWORD PTR __real@bff0000000000000
	jbe	SHORT $LN11@update_par
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR tv140[ebp], xmm0
	jmp	SHORT $LN12@update_par
$LN11@update_par:
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv140[ebp]
$LN12@update_par:
	movsd	xmm0, QWORD PTR tv140[ebp]
	movsd	QWORD PTR tv141[ebp], xmm0
$LN14@update_par:
	movsd	xmm0, QWORD PTR __real@3fa999999999999a
	mulsd	xmm0, QWORD PTR _lambda_log_ratio$[ebp]
	mulsd	xmm0, QWORD PTR tv141[ebp]
	mov	eax, DWORD PTR _beta$[ebp]
	addsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _beta$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 164  :   *beta  = CLIP(-3, -0.1, *beta);

	mov	eax, DWORD PTR _beta$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR __real@bfb999999999999a
	jbe	SHORT $LN15@update_par
	movsd	xmm0, QWORD PTR __real@bfb999999999999a
	movsd	QWORD PTR tv145[ebp], xmm0
	jmp	SHORT $LN16@update_par
$LN15@update_par:
	mov	ecx, DWORD PTR _beta$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR tv145[ebp], xmm0
$LN16@update_par:
	movsd	xmm0, QWORD PTR __real@c008000000000000
	comisd	xmm0, QWORD PTR tv145[ebp]
	jbe	SHORT $LN19@update_par
	movsd	xmm0, QWORD PTR __real@c008000000000000
	movsd	QWORD PTR tv149[ebp], xmm0
	jmp	SHORT $LN20@update_par
$LN19@update_par:
	mov	edx, DWORD PTR _beta$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	comisd	xmm0, QWORD PTR __real@bfb999999999999a
	jbe	SHORT $LN17@update_par
	movsd	xmm0, QWORD PTR __real@bfb999999999999a
	movsd	QWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN18@update_par
$LN17@update_par:
	mov	eax, DWORD PTR _beta$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR tv148[ebp], xmm0
$LN18@update_par:
	movsd	xmm0, QWORD PTR tv148[ebp]
	movsd	QWORD PTR tv149[ebp], xmm0
$LN20@update_par:
	mov	ecx, DWORD PTR _beta$[ebp]
	movsd	xmm0, QWORD PTR tv149[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_update_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _clip_lambda
_TEXT	SEGMENT
tv72 = -216						; size = 8
tv73 = -208						; size = 8
tv69 = -200						; size = 8
_lambda$ = 8						; size = 8
_clip_lambda PROC					; COMDAT

; 58   : static double clip_lambda(double lambda) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :   if (isnan(lambda)) return MAX_LAMBDA;

	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp___dclass
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	cmp	eax, 2
	jne	SHORT $LN2@clip_lambd
	fld	QWORD PTR _MAX_LAMBDA
	jmp	$LN1@clip_lambd
$LN2@clip_lambd:

; 60   :   return CLIP(MIN_LAMBDA, MAX_LAMBDA, lambda);

	movsd	xmm0, QWORD PTR _lambda$[ebp]
	comisd	xmm0, QWORD PTR _MAX_LAMBDA
	jbe	SHORT $LN4@clip_lambd
	movsd	xmm0, QWORD PTR _MAX_LAMBDA
	movsd	QWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN5@clip_lambd
$LN4@clip_lambd:
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
$LN5@clip_lambd:
	movsd	xmm0, QWORD PTR _MIN_LAMBDA
	comisd	xmm0, QWORD PTR tv69[ebp]
	jbe	SHORT $LN8@clip_lambd
	movsd	xmm0, QWORD PTR _MIN_LAMBDA
	movsd	QWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN9@clip_lambd
$LN8@clip_lambd:
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	comisd	xmm0, QWORD PTR _MAX_LAMBDA
	jbe	SHORT $LN6@clip_lambd
	movsd	xmm0, QWORD PTR _MAX_LAMBDA
	movsd	QWORD PTR tv72[ebp], xmm0
	jmp	SHORT $LN7@clip_lambd
$LN6@clip_lambd:
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR tv72[ebp], xmm0
$LN7@clip_lambd:
	movsd	xmm0, QWORD PTR tv72[ebp]
	movsd	QWORD PTR tv73[ebp], xmm0
$LN9@clip_lambd:
	fld	QWORD PTR tv73[ebp]
$LN1@clip_lambd:

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_clip_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_estimate_pic_lambda
_TEXT	SEGMENT
tv312 = -584						; size = 8
tv803 = -576						; size = 8
tv793 = -568						; size = 8
tv930 = -560						; size = 8
tv313 = -560						; size = 8
tv953 = -552						; size = 8
tv784 = -552						; size = 8
tv259 = -552						; size = 8
tv919 = -544						; size = 4
tv775 = -544						; size = 8
tv260 = -544						; size = 8
tv450 = -540						; size = 8
tv728 = -536						; size = 8
tv322 = -536						; size = 8
tv291 = -536						; size = 8
tv270 = -536						; size = 8
tv229 = -536						; size = 8
tv914 = -532						; size = 8
tv872 = -532						; size = 8
tv765 = -528						; size = 8
tv719 = -528						; size = 8
tv675 = -528						; size = 8
tv323 = -528						; size = 8
tv271 = -528						; size = 8
tv230 = -528						; size = 8
tv951 = -524						; size = 8
tv949 = -524						; size = 8
tv947 = -520						; size = 8
tv890 = -520						; size = 8
tv882 = -520						; size = 8
tv755 = -520						; size = 8
tv692 = -520						; size = 8
tv683 = -520						; size = 8
tv319 = -520						; size = 8
tv267 = -520						; size = 8
tv244 = -520						; size = 8
tv226 = -520						; size = 8
tv903 = -516						; size = 4
tv863 = -516						; size = 4
tv77 = -516						; size = 4
_i$1 = -316						; size = 4
_i$2 = -304						; size = 4
_b$3 = -292						; size = 8
_a$4 = -276						; size = 8
_KLCU$5 = -260						; size = 8
_CLCU$6 = -244						; size = 8
_i$7 = -228						; size = 4
_iteration_number$8 = -216				; size = 4
_taylor_e3$9 = -204					; size = 8
_best_lambda$10 = -188					; size = 8
_total_weight$ = -172					; size = 8
_temp_lambda$ = -156					; size = 8
_temp$11 = -140						; size = 8
_bpp$ = -124						; size = 8
_num_pixels$ = -108					; size = 4
_est_lambda$ = -96					; size = 8
_bits$ = -80						; size = 8
_beta$ = -64						; size = 8
_alpha$ = -48						; size = 8
_ctu_count$ = -32					; size = 4
_layer$ = -20						; size = 4
_encoder$ = -8						; size = 4
_state$ = 8						; size = 4
_kvz_estimate_pic_lambda PROC				; COMDAT

; 492  : void kvz_estimate_pic_lambda(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 493  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 494  : 
; 495  :   const int layer = encoder->cfg.gop[state->frame->gop_offset].layer - (state->frame->is_irap ? 1 : 0);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN29@kvz_estima
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN30@kvz_estima
$LN29@kvz_estima:
	mov	DWORD PTR tv77[ebp], 0
$LN30@kvz_estima:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+290]
	sub	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _layer$[ebp], ecx

; 496  :   const int ctu_count = state->tile->frame->height_in_lcu * state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	imul	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _ctu_count$[ebp], ecx

; 497  : 
; 498  :   double alpha;
; 499  :   double beta;
; 500  :   if(state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN14@kvz_estima
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	SHORT $LN14@kvz_estima

; 501  :     pthread_mutex_lock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 502  :     alpha = state->frame->new_ratecontrol->intra_alpha;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR [edx+232]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 503  :     beta = state->frame->new_ratecontrol->intra_beta;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR [edx+240]
	movsd	QWORD PTR _beta$[ebp], xmm0

; 504  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4

; 505  :   }

	jmp	$LN17@kvz_estima
$LN14@kvz_estima:

; 506  :   else if(state->frame->poc == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN16@kvz_estima

; 507  :     alpha = state->frame->rc_alpha;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+128]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 508  :     beta = state->frame->rc_beta;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+136]
	movsd	QWORD PTR _beta$[ebp], xmm0

; 509  :   }

	jmp	$LN17@kvz_estima
$LN16@kvz_estima:

; 510  :   else {
; 511  :     pthread_mutex_lock(&state->frame->new_ratecontrol->ck_frame_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 272				; 00000110H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 512  :     alpha = -state->frame->new_ratecontrol->pic_c_para[layer] *

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8+48]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _layer$[ebp]
	mulsd	xmm0, QWORD PTR [eax+ecx*8+96]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 513  :       state->frame->new_ratecontrol->pic_k_para[layer];
; 514  :     beta = state->frame->new_ratecontrol->pic_k_para[layer] - 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8+96]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _beta$[ebp], xmm0

; 515  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->ck_frame_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 272				; 00000110H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4
$LN17@kvz_estima:

; 516  :   }
; 517  :   double bits = pic_allocate_bits(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_pic_allocate_bits
	add	esp, 4
	fstp	QWORD PTR _bits$[ebp]

; 518  :   state->frame->cur_pic_target_bits = bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _bits$[ebp]
	movsd	QWORD PTR [ecx+120], xmm0

; 519  : 
; 520  :   double est_lambda;
; 521  :   int32_t num_pixels = state->encoder_control->cfg.width * state->encoder_control->cfg.height;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+12]
	imul	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _num_pixels$[ebp], ecx

; 522  :   double bpp = bits / num_pixels;

	cvtsi2sd xmm0, DWORD PTR _num_pixels$[ebp]
	movsd	xmm1, QWORD PTR _bits$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _bpp$[ebp], xmm1

; 523  :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN18@kvz_estima

; 524  :     if(encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	$LN20@kvz_estima

; 525  :       state->frame->i_bits_left = bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _bits$[ebp]
	movsd	QWORD PTR [ecx+192], xmm0

; 526  :       double temp = pow(state->frame->icost / num_pixels, BETA1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff406f694467382
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cvtsi2sd xmm0, DWORD PTR _num_pixels$[ebp]
	movsd	xmm1, QWORD PTR [ecx+176]
	divsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _temp$11[ebp]

; 527  :       est_lambda = alpha / 256 * pow(temp/bpp, beta);

	movsd	xmm0, QWORD PTR _alpha$[ebp]
	divsd	xmm0, QWORD PTR __real@4070000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR _beta$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	xmm1, QWORD PTR _temp$11[ebp]
	divsd	xmm1, QWORD PTR _bpp$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv947[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv675[ebp]
	movsd	xmm0, QWORD PTR tv947[ebp]
	mulsd	xmm0, QWORD PTR tv675[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 528  :     }

	jmp	SHORT $LN21@kvz_estima
$LN20@kvz_estima:

; 529  :     else {
; 530  :       // arbitrary reduction to the lambda for intra frames
; 531  :       est_lambda = alpha * pow(bpp, beta) * 0.5;

	sub	esp, 8
	movsd	xmm0, QWORD PTR _beta$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv683[ebp]
	movsd	xmm0, QWORD PTR tv683[ebp]
	mulsd	xmm0, QWORD PTR _alpha$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN21@kvz_estima:

; 532  :     }
; 533  :   }

	jmp	SHORT $LN19@kvz_estima
$LN18@kvz_estima:

; 534  :   else {
; 535  :     est_lambda = alpha * pow(bpp, beta);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _beta$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv692[ebp]
	movsd	xmm0, QWORD PTR tv692[ebp]
	mulsd	xmm0, QWORD PTR _alpha$[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN19@kvz_estima:

; 536  :   }
; 537  : 
; 538  :   double temp_lambda;
; 539  :   pthread_mutex_lock(&state->frame->new_ratecontrol->lambda_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 276				; 00000114H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 540  :   if ((temp_lambda = state->frame->new_ratecontrol->previous_lambdas[layer]) > 0.0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8+144]
	movsd	QWORD PTR _temp_lambda$[ebp], xmm0
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN22@kvz_estima

; 541  :     temp_lambda = CLIP(0.1, 10000.0, temp_lambda);

	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@40c3880000000000
	jbe	SHORT $LN31@kvz_estima
	movsd	xmm0, QWORD PTR __real@40c3880000000000
	movsd	QWORD PTR tv226[ebp], xmm0
	jmp	SHORT $LN32@kvz_estima
$LN31@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv226[ebp], xmm0
$LN32@kvz_estima:
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR tv226[ebp]
	jbe	SHORT $LN35@kvz_estima
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR tv230[ebp], xmm0
	jmp	SHORT $LN36@kvz_estima
$LN35@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@40c3880000000000
	jbe	SHORT $LN33@kvz_estima
	movsd	xmm0, QWORD PTR __real@40c3880000000000
	movsd	QWORD PTR tv229[ebp], xmm0
	jmp	SHORT $LN34@kvz_estima
$LN33@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv229[ebp], xmm0
$LN34@kvz_estima:
	movsd	xmm0, QWORD PTR tv229[ebp]
	movsd	QWORD PTR tv230[ebp], xmm0
$LN36@kvz_estima:
	movsd	xmm0, QWORD PTR tv230[ebp]
	movsd	QWORD PTR _temp_lambda$[ebp], xmm0

; 542  :     est_lambda = CLIP(temp_lambda * pow(2.0, -1), temp_lambda * 2, est_lambda);

	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN37@kvz_estima
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR tv244[ebp], xmm0
	jmp	SHORT $LN38@kvz_estima
$LN37@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv244[ebp], xmm0
$LN38@kvz_estima:
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv719[ebp]
	movsd	xmm0, QWORD PTR tv719[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR tv244[ebp]
	jbe	SHORT $LN41@kvz_estima
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv728[ebp]
	movsd	xmm0, QWORD PTR tv728[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv260[ebp], xmm0
	jmp	SHORT $LN42@kvz_estima
$LN41@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN39@kvz_estima
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR tv259[ebp], xmm0
	jmp	SHORT $LN40@kvz_estima
$LN39@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv259[ebp], xmm0
$LN40@kvz_estima:
	movsd	xmm0, QWORD PTR tv259[ebp]
	movsd	QWORD PTR tv260[ebp], xmm0
$LN42@kvz_estima:
	movsd	xmm0, QWORD PTR tv260[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN22@kvz_estima:

; 543  :   }
; 544  : 
; 545  :   if((temp_lambda = state->frame->new_ratecontrol->previous_frame_lambda) > 0.0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR [edx+200]
	movsd	QWORD PTR _temp_lambda$[ebp], xmm0
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN23@kvz_estima

; 546  :     temp_lambda = CLIP(0.1, 2000.0, temp_lambda);

	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@409f400000000000
	jbe	SHORT $LN43@kvz_estima
	movsd	xmm0, QWORD PTR __real@409f400000000000
	movsd	QWORD PTR tv267[ebp], xmm0
	jmp	SHORT $LN44@kvz_estima
$LN43@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv267[ebp], xmm0
$LN44@kvz_estima:
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR tv267[ebp]
	jbe	SHORT $LN47@kvz_estima
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN48@kvz_estima
$LN47@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@409f400000000000
	jbe	SHORT $LN45@kvz_estima
	movsd	xmm0, QWORD PTR __real@409f400000000000
	movsd	QWORD PTR tv270[ebp], xmm0
	jmp	SHORT $LN46@kvz_estima
$LN45@kvz_estima:
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv270[ebp], xmm0
$LN46@kvz_estima:
	movsd	xmm0, QWORD PTR tv270[ebp]
	movsd	QWORD PTR tv271[ebp], xmm0
$LN48@kvz_estima:
	movsd	xmm0, QWORD PTR tv271[ebp]
	movsd	QWORD PTR _temp_lambda$[ebp], xmm0

; 547  :     est_lambda = CLIP(temp_lambda * pow(2.0, -10.0 / 3.0), temp_lambda * pow(2.0, 10.0 / 3.0), est_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@400aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv755[ebp]
	movsd	xmm0, QWORD PTR tv755[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN49@kvz_estima
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@400aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv765[ebp]
	movsd	xmm0, QWORD PTR tv765[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv291[ebp], xmm0
	jmp	SHORT $LN50@kvz_estima
$LN49@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv291[ebp], xmm0
$LN50@kvz_estima:
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c00aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv775[ebp]
	movsd	xmm0, QWORD PTR tv775[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	comisd	xmm0, QWORD PTR tv291[ebp]
	jbe	SHORT $LN53@kvz_estima
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c00aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv784[ebp]
	movsd	xmm0, QWORD PTR tv784[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv313[ebp], xmm0
	jmp	$LN54@kvz_estima
$LN53@kvz_estima:
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@400aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv793[ebp]
	movsd	xmm0, QWORD PTR tv793[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN51@kvz_estima
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@400aaaaaaaaaaaab
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv803[ebp]
	movsd	xmm0, QWORD PTR tv803[ebp]
	mulsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR tv312[ebp], xmm0
	jmp	SHORT $LN52@kvz_estima
$LN51@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv312[ebp], xmm0
$LN52@kvz_estima:
	movsd	xmm0, QWORD PTR tv312[ebp]
	movsd	QWORD PTR tv313[ebp], xmm0
$LN54@kvz_estima:
	movsd	xmm0, QWORD PTR tv313[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN23@kvz_estima:

; 548  :   }
; 549  :   pthread_mutex_unlock(&state->frame->new_ratecontrol->lambda_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 276				; 00000114H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4

; 550  : 
; 551  :   est_lambda = CLIP(0.1, 10000.0, est_lambda);

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@40c3880000000000
	jbe	SHORT $LN55@kvz_estima
	movsd	xmm0, QWORD PTR __real@40c3880000000000
	movsd	QWORD PTR tv319[ebp], xmm0
	jmp	SHORT $LN56@kvz_estima
$LN55@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv319[ebp], xmm0
$LN56@kvz_estima:
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR tv319[ebp]
	jbe	SHORT $LN59@kvz_estima
	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR tv323[ebp], xmm0
	jmp	SHORT $LN60@kvz_estima
$LN59@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@40c3880000000000
	jbe	SHORT $LN57@kvz_estima
	movsd	xmm0, QWORD PTR __real@40c3880000000000
	movsd	QWORD PTR tv322[ebp], xmm0
	jmp	SHORT $LN58@kvz_estima
$LN57@kvz_estima:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv322[ebp], xmm0
$LN58@kvz_estima:
	movsd	xmm0, QWORD PTR tv322[ebp]
	movsd	QWORD PTR tv323[ebp], xmm0
$LN60@kvz_estima:
	movsd	xmm0, QWORD PTR tv323[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 552  : 
; 553  :   double total_weight = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _total_weight$[ebp], xmm0

; 554  : 
; 555  :   if(!state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	$LN24@kvz_estima

; 556  :     double best_lambda = est_lambda;

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR _best_lambda$10[ebp], xmm0

; 557  :     if(!state->encoder_control->cfg.frame_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2451]
	test	edx, edx
	jne	$LN27@kvz_estima

; 558  :       pthread_rwlock_rdlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_rdlock
	add	esp, 4

; 559  :       memcpy(state->frame->c_para, state->frame->new_ratecontrol->c_para[layer], ctu_count * sizeof(double));

	mov	eax, DWORD PTR _ctu_count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _layer$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 560  :       memcpy(state->frame->k_para, state->frame->new_ratecontrol->k_para[layer], ctu_count * sizeof(double));

	mov	eax, DWORD PTR _ctu_count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _layer$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+24]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 561  :       pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_unlock
	add	esp, 4

; 562  :       temp_lambda = est_lambda;

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR _temp_lambda$[ebp], xmm0

; 563  :       double taylor_e3;
; 564  :       int iteration_number = 0;

	mov	DWORD PTR _iteration_number$8[ebp], 0
$LN4@kvz_estima:

; 565  :       do {
; 566  :         taylor_e3 = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _taylor_e3$9[ebp], xmm0

; 567  :         best_lambda = temp_lambda = solve_cubic_equation(state->frame, 0, ctu_count, temp_lambda, bits);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _bits$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctu_count$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_solve_cubic_equation
	add	esp, 28					; 0000001cH
	fstp	QWORD PTR _temp_lambda$[ebp]
	movsd	xmm0, QWORD PTR _temp_lambda$[ebp]
	movsd	QWORD PTR _best_lambda$10[ebp], xmm0

; 568  :         for (int i = 0; i < ctu_count; ++i) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN7@kvz_estima
$LN5@kvz_estima:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN7@kvz_estima:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _ctu_count$[ebp]
	jge	$LN6@kvz_estima

; 569  :           double CLCU = state->frame->c_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _i$7[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _CLCU$6[ebp], xmm0

; 570  :           double KLCU = state->frame->k_para[i];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _i$7[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR _KLCU$5[ebp], xmm0

; 571  :           double a = -CLCU * KLCU / pow(state->frame->lcu_stats[i].pixels, KLCU - 1.0);

	movsd	xmm0, QWORD PTR _CLCU$6[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _KLCU$5[ebp]
	movsd	xmm1, QWORD PTR _KLCU$5[ebp]
	subsd	xmm1, QWORD PTR __real@3ff0000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$7[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv863[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv863[ebp]
	mov	edx, DWORD PTR tv863[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv949[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv872[ebp]
	movsd	xmm0, QWORD PTR tv949[ebp]
	divsd	xmm0, QWORD PTR tv872[ebp]
	movsd	QWORD PTR _a$4[ebp], xmm0

; 572  :           double b = -1.0 / (KLCU - 1.0);

	movsd	xmm0, QWORD PTR _KLCU$5[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@bff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR _b$3[ebp], xmm1

; 573  :           taylor_e3 += pow(a / best_lambda, b);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _b$3[ebp]
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _a$4[ebp]
	divsd	xmm0, QWORD PTR _best_lambda$10[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv882[ebp]
	movsd	xmm0, QWORD PTR tv882[ebp]
	addsd	xmm0, QWORD PTR _taylor_e3$9[ebp]
	movsd	QWORD PTR _taylor_e3$9[ebp], xmm0

; 574  :         }

	jmp	$LN5@kvz_estima
$LN6@kvz_estima:

; 575  :         iteration_number++;

	mov	eax, DWORD PTR _iteration_number$8[ebp]
	add	eax, 1
	mov	DWORD PTR _iteration_number$8[ebp], eax

; 576  :       }
; 577  :       while (fabs(taylor_e3 - bits) > 0.01 && iteration_number <= 11);

	movsd	xmm0, QWORD PTR _taylor_e3$9[ebp]
	subsd	xmm0, QWORD PTR _bits$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv890[ebp]
	movsd	xmm0, QWORD PTR tv890[ebp]
	comisd	xmm0, QWORD PTR __real@3f847ae147ae147b
	jbe	SHORT $LN27@kvz_estima
	cmp	DWORD PTR _iteration_number$8[ebp], 11	; 0000000bH
	jle	$LN4@kvz_estima
$LN27@kvz_estima:

; 578  :     }
; 579  :     total_weight = calculate_weights(state, ctu_count, best_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _best_lambda$10[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctu_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_calculate_weights
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _total_weight$[ebp]

; 580  :     state->frame->remaining_weight = bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _bits$[ebp]
	movsd	QWORD PTR [ecx+184], xmm0

; 581  :   }

	jmp	$LN9@kvz_estima
$LN24@kvz_estima:

; 582  :   else {
; 583  :     for (int i = 0; i < ctu_count; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@kvz_estima
$LN8@kvz_estima:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@kvz_estima:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _ctu_count$[ebp]
	jge	$LN9@kvz_estima

; 584  :       state->frame->lcu_stats[i].weight = MAX(0.01,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$2[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv903[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv903[ebp]
	mov	edx, DWORD PTR tv903[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, QWORD PTR _beta$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	divsd	xmm1, QWORD PTR _alpha$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv951[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv914[ebp]
	movsd	xmm0, QWORD PTR tv951[ebp]
	mulsd	xmm0, QWORD PTR tv914[ebp]
	movsd	xmm1, QWORD PTR __real@3f847ae147ae147b
	comisd	xmm1, xmm0
	jbe	SHORT $LN61@kvz_estima
	movsd	xmm0, QWORD PTR __real@3f847ae147ae147b
	movsd	QWORD PTR tv450[ebp], xmm0
	jmp	$LN62@kvz_estima
$LN61@kvz_estima:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$2[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	mov	ecx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR tv919[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv919[ebp]
	mov	edx, DWORD PTR tv919[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, QWORD PTR _beta$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	divsd	xmm1, QWORD PTR _alpha$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv953[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv930[ebp]
	movsd	xmm0, QWORD PTR tv953[ebp]
	mulsd	xmm0, QWORD PTR tv930[ebp]
	movsd	QWORD PTR tv450[ebp], xmm0
$LN62@kvz_estima:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$2[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR tv450[ebp]
	movsd	QWORD PTR [eax+edx+8], xmm0

; 585  :         state->frame->lcu_stats[i].pixels * pow(est_lambda / alpha,
; 586  :                                                 1.0 / beta));
; 587  :       total_weight += state->frame->lcu_stats[i].weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$2[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR _total_weight$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx+8]
	movsd	QWORD PTR _total_weight$[ebp], xmm0

; 588  :     }

	jmp	$LN8@kvz_estima
$LN9@kvz_estima:

; 589  :   }
; 590  : 
; 591  :   for(int i = 0; i < ctu_count; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN13@kvz_estima
$LN11@kvz_estima:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@kvz_estima:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _ctu_count$[ebp]
	jge	SHORT $LN12@kvz_estima

; 592  :     state->frame->lcu_stats[i].weight = bits * state->frame->lcu_stats[i].weight / total_weight;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _i$1[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR _bits$[ebp]
	mulsd	xmm0, QWORD PTR [eax+edx+8]
	divsd	xmm0, QWORD PTR _total_weight$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR _i$1[ebp], 72
	mov	ecx, DWORD PTR [edx+148]
	movsd	QWORD PTR [ecx+eax+8], xmm0

; 593  :   }

	jmp	SHORT $LN11@kvz_estima
$LN12@kvz_estima:

; 594  : 
; 595  :   state->frame->lambda = est_lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 596  :   state->frame->QP = lambda_to_qp(est_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_lambda_to_qp
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+24], al

; 597  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 584				; 00000248H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_estimate_pic_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_update_after_picture
_TEXT	SEGMENT
tv637 = -500						; size = 8
tv171 = -500						; size = 8
tv848 = -492						; size = 8
tv172 = -492						; size = 8
tv654 = -484						; size = 8
tv629 = -484						; size = 8
tv338 = -484						; size = 8
tv162 = -484						; size = 8
tv803 = -480						; size = 4
tv731 = -480						; size = 4
tv724 = -480						; size = 4
tv330 = -480						; size = 4
tv266 = -480						; size = 4
tv251 = -480						; size = 4
tv87 = -480						; size = 4
_i$1 = -280						; size = 4
_i$2 = -268						; size = 4
_i$3 = -256						; size = 4
_ctu$4 = -244						; size = 4
_x_ctu$5 = -232						; size = 4
_y_ctu$6 = -220						; size = 4
_temp$7 = -208						; size = 4
_x$8 = -196						; size = 4
_y$9 = -184						; size = 4
_ctu$10 = -172						; size = 4
_ctu_distortion$11 = -160				; size = 4
_x_ctu$12 = -148					; size = 4
_y_ctu$13 = -136					; size = 4
_poc$14 = -124						; size = 4
_diff_lambda$15 = -112					; size = 8
_lnbpp$16 = -96						; size = 8
_layer$ = -80						; size = 4
_encoder$ = -68						; size = 4
_pic_bpp$ = -56						; size = 8
_pixels$ = -40						; size = 4
_lambda$ = -28						; size = 8
_total_distortion$ = -12				; size = 8
_state$ = 8						; size = 4
_kvz_update_after_picture PROC				; COMDAT

; 904  : void kvz_update_after_picture(encoder_state_t * const state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 500				; 000001f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-500]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 905  :   double total_distortion = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _total_distortion$[ebp], xmm0

; 906  :   double lambda = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _lambda$[ebp], xmm0

; 907  :   int32_t pixels = (state->encoder_control->in.width * state->encoder_control->in.height);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2480]
	imul	ecx, DWORD PTR [eax+2484]
	mov	DWORD PTR _pixels$[ebp], ecx

; 908  :   double pic_bpp = (double)state->frame->cur_frame_bits_coded / pixels;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR [ecx+108]
	mov	ecx, eax
	call	__ultod3
	cvtsi2sd xmm1, DWORD PTR _pixels$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _pic_bpp$[ebp], xmm0

; 909  : 
; 910  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 911  :   const int layer = encoder->cfg.gop[state->frame->gop_offset].layer - (state->frame->is_irap ? 1 : 0);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN42@kvz_update
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN43@kvz_update
$LN42@kvz_update:
	mov	DWORD PTR tv87[ebp], 0
$LN43@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+edx+290]
	sub	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _layer$[ebp], ecx

; 912  : 
; 913  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN29@kvz_update
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	$LN29@kvz_update

; 914  :     double lnbpp = log(pow(state->frame->icost / pixels, BETA1));

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff406f694467382
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cvtsi2sd xmm0, DWORD PTR _pixels$[ebp]
	movsd	xmm1, QWORD PTR [ecx+176]
	divsd	xmm1, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	call	_pow
	add	esp, 8
	fstp	QWORD PTR [esp]
	call	_log
	add	esp, 8
	fstp	QWORD PTR _lnbpp$16[ebp]

; 915  :     pthread_mutex_lock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 916  :     double diff_lambda = state->frame->new_ratecontrol->intra_beta * log(state->frame->cur_frame_bits_coded) - log(state->frame->cur_pic_target_bits);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, DWORD PTR [ecx+156]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [eax+108]
	call	__ultod3
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv629[ebp]
	movsd	xmm0, QWORD PTR tv629[ebp]
	mulsd	xmm0, QWORD PTR [esi+240]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	esp, 8
	movsd	xmm1, QWORD PTR [edx+120]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv848[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv637[ebp]
	movsd	xmm0, QWORD PTR tv848[ebp]
	subsd	xmm0, QWORD PTR tv637[ebp]
	movsd	QWORD PTR _diff_lambda$15[ebp], xmm0

; 917  : 
; 918  :     diff_lambda = CLIP(-0.125, 0.125, 0.25*diff_lambda);

	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	comisd	xmm0, QWORD PTR __real@3fc0000000000000
	jbe	SHORT $LN44@kvz_update
	movsd	xmm0, QWORD PTR __real@3fc0000000000000
	movsd	QWORD PTR tv162[ebp], xmm0
	jmp	SHORT $LN45@kvz_update
$LN44@kvz_update:
	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	movsd	QWORD PTR tv162[ebp], xmm0
$LN45@kvz_update:
	movsd	xmm0, QWORD PTR __real@bfc0000000000000
	comisd	xmm0, QWORD PTR tv162[ebp]
	jbe	SHORT $LN48@kvz_update
	movsd	xmm0, QWORD PTR __real@bfc0000000000000
	movsd	QWORD PTR tv172[ebp], xmm0
	jmp	SHORT $LN49@kvz_update
$LN48@kvz_update:
	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	comisd	xmm0, QWORD PTR __real@3fc0000000000000
	jbe	SHORT $LN46@kvz_update
	movsd	xmm0, QWORD PTR __real@3fc0000000000000
	movsd	QWORD PTR tv171[ebp], xmm0
	jmp	SHORT $LN47@kvz_update
$LN46@kvz_update:
	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	movsd	QWORD PTR tv171[ebp], xmm0
$LN47@kvz_update:
	movsd	xmm0, QWORD PTR tv171[ebp]
	movsd	QWORD PTR tv172[ebp], xmm0
$LN49@kvz_update:
	movsd	xmm0, QWORD PTR tv172[ebp]
	movsd	QWORD PTR _diff_lambda$15[ebp], xmm0

; 919  : 
; 920  :     state->frame->new_ratecontrol->intra_alpha *= exp(diff_lambda);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, DWORD PTR [ecx+156]
	sub	esp, 8
	movsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR tv654[ebp]
	movsd	xmm0, QWORD PTR tv654[ebp]
	mulsd	xmm0, QWORD PTR [esi+232]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+156]
	movsd	QWORD PTR [ecx+232], xmm0

; 921  :     state->frame->new_ratecontrol->intra_beta += diff_lambda / lnbpp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR _diff_lambda$15[ebp]
	divsd	xmm0, QWORD PTR _lnbpp$16[ebp]
	addsd	xmm0, QWORD PTR [edx+240]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	QWORD PTR [edx+240], xmm0

; 922  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4
$LN29@kvz_update:

; 923  :   }
; 924  : 
; 925  :   if (encoder->cfg.stats_file_prefix) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2460], 0
	je	$LN30@kvz_update

; 926  :     int poc = calc_poc(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_calc_poc
	add	esp, 4
	mov	DWORD PTR _poc$14[ebp], eax

; 927  :     fprintf(dist_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2492]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2488]
	push	eax
	mov	ecx, DWORD PTR _poc$14[ebp]
	push	ecx
	push	OFFSET ??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@
	mov	edx, DWORD PTR _dist_file
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H

; 928  :     fprintf(bits_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2492]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2488]
	push	eax
	mov	ecx, DWORD PTR _poc$14[ebp]
	push	ecx
	push	OFFSET ??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@
	mov	edx, DWORD PTR _bits_file
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H

; 929  :     fprintf(qp_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2492]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2488]
	push	eax
	mov	ecx, DWORD PTR _poc$14[ebp]
	push	ecx
	push	OFFSET ??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@
	mov	edx, DWORD PTR _qp_file
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H

; 930  :     fprintf(lambda_file, "%d %d %d\n", poc, encoder->in.width_in_lcu, encoder->in.height_in_lcu);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2492]
	push	ecx
	mov	edx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [edx+2488]
	push	eax
	mov	ecx, DWORD PTR _poc$14[ebp]
	push	ecx
	push	OFFSET ??_C@_09KAAEENOK@?$CFd?5?$CFd?5?$CFd?6@
	mov	edx, DWORD PTR _lambda_file
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H
$LN30@kvz_update:

; 931  :   }
; 932  : 
; 933  :   for(int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	mov	DWORD PTR _y_ctu$13[ebp], 0
	jmp	SHORT $LN4@kvz_update
$LN2@kvz_update:
	mov	eax, DWORD PTR _y_ctu$13[ebp]
	add	eax, 1
	mov	DWORD PTR _y_ctu$13[ebp], eax
$LN4@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _y_ctu$13[ebp]
	cmp	edx, DWORD PTR [ecx+2492]
	jge	$LN3@kvz_update

; 934  :     for (int x_ctu = 0; x_ctu < state->encoder_control->in.width_in_lcu; x_ctu++) {

	mov	DWORD PTR _x_ctu$12[ebp], 0
	jmp	SHORT $LN7@kvz_update
$LN5@kvz_update:
	mov	eax, DWORD PTR _x_ctu$12[ebp]
	add	eax, 1
	mov	DWORD PTR _x_ctu$12[ebp], eax
$LN7@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _x_ctu$12[ebp]
	cmp	edx, DWORD PTR [ecx+2488]
	jge	$LN6@kvz_update

; 935  :       int ctu_distortion = 0;

	mov	DWORD PTR _ctu_distortion$11[ebp], 0

; 936  :       lcu_stats_t *ctu = kvz_get_lcu_stats(state, x_ctu, y_ctu);

	mov	eax, DWORD PTR _y_ctu$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_ctu$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ctu$10[ebp], eax

; 937  :       for (int y = y_ctu * 64; y < MIN((y_ctu + 1) * 64, state->tile->frame->height); y++) {

	mov	eax, DWORD PTR _y_ctu$13[ebp]
	shl	eax, 6
	mov	DWORD PTR _y$9[ebp], eax
	jmp	SHORT $LN10@kvz_update
$LN8@kvz_update:
	mov	eax, DWORD PTR _y$9[ebp]
	add	eax, 1
	mov	DWORD PTR _y$9[ebp], eax
$LN10@kvz_update:
	mov	eax, DWORD PTR _y_ctu$13[ebp]
	add	eax, 1
	shl	eax, 6
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN50@kvz_update
	mov	edx, DWORD PTR _y_ctu$13[ebp]
	add	edx, 1
	shl	edx, 6
	mov	DWORD PTR tv251[ebp], edx
	jmp	SHORT $LN51@kvz_update
$LN50@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv251[ebp], eax
$LN51@kvz_update:
	mov	ecx, DWORD PTR _y$9[ebp]
	cmp	ecx, DWORD PTR tv251[ebp]
	jge	$LN9@kvz_update

; 938  :         for (int x = x_ctu * 64; x < MIN((x_ctu + 1) * 64, state->tile->frame->width); x++) {

	mov	eax, DWORD PTR _x_ctu$12[ebp]
	shl	eax, 6
	mov	DWORD PTR _x$8[ebp], eax
	jmp	SHORT $LN13@kvz_update
$LN11@kvz_update:
	mov	eax, DWORD PTR _x$8[ebp]
	add	eax, 1
	mov	DWORD PTR _x$8[ebp], eax
$LN13@kvz_update:
	mov	eax, DWORD PTR _x_ctu$12[ebp]
	add	eax, 1
	shl	eax, 6
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx+8]
	jge	SHORT $LN52@kvz_update
	mov	edx, DWORD PTR _x_ctu$12[ebp]
	add	edx, 1
	shl	edx, 6
	mov	DWORD PTR tv266[ebp], edx
	jmp	SHORT $LN53@kvz_update
$LN52@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv266[ebp], eax
$LN53@kvz_update:
	mov	ecx, DWORD PTR _x$8[ebp]
	cmp	ecx, DWORD PTR tv266[ebp]
	jge	SHORT $LN12@kvz_update

; 939  :           int temp = (int)state->tile->frame->source->y[x + y * state->encoder_control->in.width] -

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _y$9[ebp]
	imul	ecx, DWORD PTR [edx+2480]
	add	ecx, DWORD PTR _x$8[ebp]
	mov	edx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _y$9[ebp]
	imul	esi, DWORD PTR [ecx+2480]
	add	esi, DWORD PTR _x$8[ebp]
	mov	edx, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [edx+esi]
	sub	eax, ecx
	mov	DWORD PTR _temp$7[ebp], eax

; 940  :             state->tile->frame->rec->y[x + y * state->encoder_control->in.width];
; 941  :           ctu_distortion += temp * temp;

	mov	eax, DWORD PTR _temp$7[ebp]
	imul	eax, DWORD PTR _temp$7[ebp]
	add	eax, DWORD PTR _ctu_distortion$11[ebp]
	mov	DWORD PTR _ctu_distortion$11[ebp], eax

; 942  :         }        

	jmp	$LN11@kvz_update
$LN12@kvz_update:

; 943  :       }

	jmp	$LN8@kvz_update
$LN9@kvz_update:

; 944  :       ctu->distortion = (double)ctu_distortion / ctu->pixels;

	cvtsi2sd xmm0, DWORD PTR _ctu_distortion$11[ebp]
	mov	eax, DWORD PTR _ctu$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv724[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv724[ebp]
	mov	edx, DWORD PTR tv724[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, xmm1
	mov	eax, DWORD PTR _ctu$10[ebp]
	movsd	QWORD PTR [eax+56], xmm0

; 945  :       total_distortion += (double)ctu_distortion / ctu->pixels;

	cvtsi2sd xmm0, DWORD PTR _ctu_distortion$11[ebp]
	mov	eax, DWORD PTR _ctu$10[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv731[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv731[ebp]
	mov	edx, DWORD PTR tv731[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _total_distortion$[ebp]
	movsd	QWORD PTR _total_distortion$[ebp], xmm0

; 946  :       lambda += ctu->lambda / (state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2488]
	imul	ecx, DWORD PTR [eax+2492]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _ctu$10[ebp]
	movsd	xmm1, QWORD PTR [edx+24]
	divsd	xmm1, xmm0
	addsd	xmm1, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR _lambda$[ebp], xmm1

; 947  :       if(encoder->cfg.stats_file_prefix) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2460], 0
	je	$LN31@kvz_update

; 948  :         fprintf(dist_file, "%f ", ctu->distortion);

	mov	eax, DWORD PTR _ctu$10[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+56]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_03JAIJOMNP@?$CFf?5@
	mov	ecx, DWORD PTR _dist_file
	push	ecx
	call	_fprintf
	add	esp, 16					; 00000010H

; 949  :         fprintf(bits_file, "%d ", ctu->bits);

	mov	eax, DWORD PTR _ctu$10[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5@
	mov	edx, DWORD PTR _bits_file
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 950  :         fprintf(qp_file, "%d ", ctu->adjust_qp ? ctu->adjust_qp : ctu->qp);

	mov	eax, DWORD PTR _ctu$10[ebp]
	movsx	ecx, BYTE PTR [eax+69]
	test	ecx, ecx
	je	SHORT $LN54@kvz_update
	mov	edx, DWORD PTR _ctu$10[ebp]
	movsx	eax, BYTE PTR [edx+69]
	mov	DWORD PTR tv330[ebp], eax
	jmp	SHORT $LN55@kvz_update
$LN54@kvz_update:
	mov	ecx, DWORD PTR _ctu$10[ebp]
	movsx	edx, BYTE PTR [ecx+68]
	mov	DWORD PTR tv330[ebp], edx
$LN55@kvz_update:
	mov	eax, DWORD PTR tv330[ebp]
	push	eax
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5@
	mov	ecx, DWORD PTR _qp_file
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 951  :         fprintf(lambda_file, "%f ", ctu->adjust_lambda ? ctu->adjust_lambda : ctu->lambda);

	mov	eax, DWORD PTR _ctu$10[ebp]
	movsd	xmm0, QWORD PTR [eax+32]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN56@kvz_update
	mov	ecx, DWORD PTR _ctu$10[ebp]
	movsd	xmm0, QWORD PTR [ecx+32]
	movsd	QWORD PTR tv338[ebp], xmm0
	jmp	SHORT $LN57@kvz_update
$LN56@kvz_update:
	mov	edx, DWORD PTR _ctu$10[ebp]
	movsd	xmm0, QWORD PTR [edx+24]
	movsd	QWORD PTR tv338[ebp], xmm0
$LN57@kvz_update:
	sub	esp, 8
	movsd	xmm0, QWORD PTR tv338[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_03JAIJOMNP@?$CFf?5@
	mov	eax, DWORD PTR _lambda_file
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
$LN31@kvz_update:

; 952  :       }
; 953  :     }

	jmp	$LN5@kvz_update
$LN6@kvz_update:

; 954  :     if (encoder->cfg.stats_file_prefix) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2460], 0
	je	SHORT $LN32@kvz_update

; 955  :       fprintf(dist_file, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _dist_file
	push	eax
	call	_fprintf
	add	esp, 8

; 956  :       fprintf(bits_file, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _bits_file
	push	eax
	call	_fprintf
	add	esp, 8

; 957  :       fprintf(qp_file, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _qp_file
	push	eax
	call	_fprintf
	add	esp, 8

; 958  :       fprintf(lambda_file, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _lambda_file
	push	eax
	call	_fprintf
	add	esp, 8
$LN32@kvz_update:

; 959  :     }
; 960  :   }

	jmp	$LN2@kvz_update
$LN3@kvz_update:

; 961  : 
; 962  :   if(encoder->cfg.stats_file_prefix && encoder->cfg.rc_algorithm != KVZ_OBA) return;

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2460], 0
	je	SHORT $LN33@kvz_update
	mov	eax, DWORD PTR _encoder$[ebp]
	movsx	ecx, BYTE PTR [eax+2452]
	cmp	ecx, 2
	je	SHORT $LN33@kvz_update
	jmp	$LN39@kvz_update
$LN33@kvz_update:

; 963  : 
; 964  :   total_distortion /= (state->encoder_control->in.height_in_lcu * state->encoder_control->in.width_in_lcu);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2492]
	imul	ecx, DWORD PTR [eax+2488]
	cvtsi2sd xmm0, ecx
	movsd	xmm1, QWORD PTR _total_distortion$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _total_distortion$[ebp], xmm1

; 965  :   if (state->frame->is_irap) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN34@kvz_update

; 966  :     pthread_mutex_lock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 967  :     for (int y_ctu = 0; y_ctu < state->encoder_control->in.height_in_lcu; y_ctu++) {

	mov	DWORD PTR _y_ctu$6[ebp], 0
	jmp	SHORT $LN16@kvz_update
$LN14@kvz_update:
	mov	eax, DWORD PTR _y_ctu$6[ebp]
	add	eax, 1
	mov	DWORD PTR _y_ctu$6[ebp], eax
$LN16@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _y_ctu$6[ebp]
	cmp	edx, DWORD PTR [ecx+2492]
	jge	$LN15@kvz_update

; 968  :       for (int x_ctu = 0; x_ctu < state->encoder_control->in.width_in_lcu; x_ctu++) {

	mov	DWORD PTR _x_ctu$5[ebp], 0
	jmp	SHORT $LN19@kvz_update
$LN17@kvz_update:
	mov	eax, DWORD PTR _x_ctu$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x_ctu$5[ebp], eax
$LN19@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _x_ctu$5[ebp]
	cmp	edx, DWORD PTR [ecx+2488]
	jge	$LN18@kvz_update

; 969  :         lcu_stats_t *ctu = kvz_get_lcu_stats(state, x_ctu, y_ctu);

	mov	eax, DWORD PTR _y_ctu$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_ctu$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ctu$4[ebp], eax

; 970  :         state->frame->new_ratecontrol->intra_dis[x_ctu + y_ctu * state->encoder_control->in.width_in_lcu] =

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _y_ctu$6[ebp]
	imul	eax, DWORD PTR [ecx+2488]
	add	eax, DWORD PTR _x_ctu$5[ebp]
	mov	ecx, DWORD PTR [edx+212]
	mov	edx, DWORD PTR _ctu$4[ebp]
	movsd	xmm0, QWORD PTR [edx+56]
	movsd	QWORD PTR [ecx+eax*8], xmm0

; 971  :           ctu->distortion;
; 972  :         state->frame->new_ratecontrol->intra_bpp[x_ctu + y_ctu * state->encoder_control->in.width_in_lcu] =

	mov	eax, DWORD PTR _ctu$4[ebp]
	mov	ecx, DWORD PTR _ctu$4[ebp]
	mov	eax, DWORD PTR [eax]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _y_ctu$6[ebp]
	imul	esi, DWORD PTR [ecx+2488]
	add	esi, DWORD PTR _x_ctu$5[ebp]
	mov	edx, DWORD PTR [edx+208]
	mov	DWORD PTR tv803[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv803[ebp]
	mov	eax, DWORD PTR tv803[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR [edx+esi*8], xmm0

; 973  :           ctu->bits / ctu->pixels;
; 974  :       }

	jmp	$LN17@kvz_update
$LN18@kvz_update:

; 975  :     }

	jmp	$LN14@kvz_update
$LN15@kvz_update:

; 976  :     state->frame->new_ratecontrol->intra_pic_distortion = total_distortion;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR _total_distortion$[ebp]
	movsd	QWORD PTR [edx+216], xmm0

; 977  :     state->frame->new_ratecontrol->intra_pic_bpp = pic_bpp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR _pic_bpp$[ebp]
	movsd	QWORD PTR [edx+224], xmm0

; 978  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4
$LN34@kvz_update:

; 979  :   }
; 980  : 
; 981  :   pthread_mutex_lock(&state->frame->new_ratecontrol->lambda_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 276				; 00000114H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 982  :   state->frame->new_ratecontrol->previous_frame_lambda = lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR [edx+200], xmm0

; 983  :   state->frame->new_ratecontrol->previous_lambdas[layer] = lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR [edx+eax*8+144], xmm0

; 984  :   pthread_mutex_unlock(&state->frame->new_ratecontrol->lambda_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 276				; 00000114H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4

; 985  : 
; 986  :   update_pic_ck(state, pic_bpp, total_distortion, lambda, layer);

	mov	eax, DWORD PTR _layer$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _total_distortion$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _pic_bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_update_pic_ck
	add	esp, 32					; 00000020H

; 987  :   if (state->frame->num <= 4 || state->frame->is_irap){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 4
	jle	SHORT $LN37@kvz_update
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN35@kvz_update
$LN37@kvz_update:

; 988  :     for (int i = 1; i < 5; ++i) {

	mov	DWORD PTR _i$3[ebp], 1
	jmp	SHORT $LN22@kvz_update
$LN20@kvz_update:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN22@kvz_update:
	cmp	DWORD PTR _i$3[ebp], 5
	jge	SHORT $LN21@kvz_update

; 989  :       pthread_rwlock_wrlock(&state->frame->new_ratecontrol->ck_ctu_lock[i]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$3[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_wrlock
	add	esp, 4

; 990  :     }

	jmp	SHORT $LN20@kvz_update
$LN21@kvz_update:

; 991  :   }

	jmp	SHORT $LN36@kvz_update
$LN35@kvz_update:

; 992  :   else{
; 993  :     pthread_rwlock_wrlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_wrlock
	add	esp, 4
$LN36@kvz_update:

; 994  :   }
; 995  :   for(int i = 0; i < state->encoder_control->in.width_in_lcu * state->encoder_control->in.height_in_lcu; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN25@kvz_update
$LN23@kvz_update:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN25@kvz_update:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+2488]
	imul	ecx, DWORD PTR [eax+2492]
	cmp	DWORD PTR _i$2[ebp], ecx
	jge	SHORT $LN24@kvz_update

; 996  :     update_ck(state, i, layer);

	mov	eax, DWORD PTR _layer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_update_ck
	add	esp, 12					; 0000000cH

; 997  :   }

	jmp	SHORT $LN23@kvz_update
$LN24@kvz_update:

; 998  :   if (state->frame->num <= 4 || state->frame->is_irap){

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 4
	jle	SHORT $LN40@kvz_update
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN38@kvz_update
$LN40@kvz_update:

; 999  :     for (int i = 1; i < 5; ++i) {

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN28@kvz_update
$LN26@kvz_update:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN28@kvz_update:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN27@kvz_update

; 1000 :       pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[i]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_unlock
	add	esp, 4

; 1001 :     }

	jmp	SHORT $LN26@kvz_update
$LN27@kvz_update:

; 1002 :   }

	jmp	SHORT $LN39@kvz_update
$LN38@kvz_update:

; 1003 :   else{
; 1004 :     pthread_rwlock_unlock(&state->frame->new_ratecontrol->ck_ctu_lock[layer]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _layer$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+248]
	push	ecx
	call	_pthread_rwlock_unlock
	add	esp, 4
$LN39@kvz_update:

; 1005 :   }
; 1006 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 500				; 000001f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_update_after_picture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_set_ctu_qp_lambda
_TEXT	SEGMENT
tv421 = -572						; size = 8
tv352 = -572						; size = 8
tv962 = -564						; size = 8
tv901 = -564						; size = 8
tv952 = -556						; size = 8
tv891 = -556						; size = 8
tv422 = -548						; size = 8
tv353 = -548						; size = 8
tv943 = -540						; size = 8
tv882 = -540						; size = 8
tv934 = -532						; size = 8
tv873 = -532						; size = 8
tv427 = -524						; size = 8
tv387 = -524						; size = 8
tv318 = -524						; size = 8
tv199 = -524						; size = 8
tv924 = -516						; size = 8
tv863 = -516						; size = 8
tv820 = -516						; size = 8
tv785 = -516						; size = 8
tv428 = -516						; size = 8
tv200 = -516						; size = 8
tv578 = -512						; size = 4
tv562 = -512						; size = 4
tv486 = -512						; size = 4
tv450 = -512						; size = 4
tv1082 = -508						; size = 8
tv914 = -508						; size = 8
tv853 = -508						; size = 8
tv579 = -508						; size = 4
tv563 = -508						; size = 4
tv487 = -508						; size = 4
tv451 = -508						; size = 4
tv424 = -508						; size = 8
tv217 = -508						; size = 8
tv196 = -508						; size = 8
tv767 = -504						; size = 4
tv736 = -504						; size = 4
tv571 = -504						; size = 4
tv541 = -504						; size = 4
tv468 = -504						; size = 4
tv441 = -504						; size = 4
tv208 = -504						; size = 4
_aq_offset$1 = -304					; size = 4
_id$2 = -292						; size = 4
_lcu$3 = -280						; size = 8
_temp_index$4 = -264					; size = 4
_temp_index$5 = -252					; size = 4
_clip_qp$6 = -240					; size = 4
_clip_neighbor_lambda$7 = -228				; size = 8
_clip_lambda$8 = -212					; size = 8
_ctu_limit$9 = -196					; size = 4
_min_lambda$10 = -184					; size = 8
_max_lambda$11 = -168					; size = 8
_cost_per_pixel$12 = -152				; size = 8
_est_qp$ = -136						; size = 4
_est_lambda$ = -124					; size = 8
_beta$ = -108						; size = 8
_alpha$ = -92						; size = 8
_bpp$ = -76						; size = 8
_ctu$ = -60						; size = 4
_index$ = -48						; size = 4
_frame_allocation$ = -36				; size = 4
_encoder$ = -24						; size = 4
_bits$ = -12						; size = 8
_state$ = 8						; size = 4
_pos$ = 12						; size = 8
_kvz_set_ctu_qp_lambda PROC				; COMDAT

; 693  :  void kvz_set_ctu_qp_lambda(encoder_state_t * const state, vector2d_t pos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 572				; 0000023cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-572]
	mov	ecx, 143				; 0000008fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 694  :   double bits = get_ctu_bits(state, pos);

	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_get_ctu_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _bits$[ebp]

; 695  : 
; 696  :   const encoder_control_t * const encoder = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _encoder$[ebp], ecx

; 697  :   const int frame_allocation = state->encoder_control->cfg.frame_allocation;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+2451]
	mov	DWORD PTR _frame_allocation$[ebp], edx

; 698  : 
; 699  :   int index = pos.x + pos.y * state->encoder_control->in.width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp+4]
	imul	edx, DWORD PTR [ecx+2488]
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _index$[ebp], edx

; 700  :   lcu_stats_t* ctu = &state->frame->lcu_stats[index];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	add	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _ctu$[ebp], edx

; 701  :   double bpp = bits / ctu->pixels;

	mov	eax, DWORD PTR _ctu$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv736[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv736[ebp]
	mov	edx, DWORD PTR tv736[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	xmm1, QWORD PTR _bits$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _bpp$[ebp], xmm1

; 702  : 
; 703  :   double alpha;
; 704  :   double beta;
; 705  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN8@kvz_set_ct
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	SHORT $LN8@kvz_set_ct

; 706  :     pthread_mutex_lock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_lock
	add	esp, 4

; 707  :     alpha = state->frame->new_ratecontrol->intra_alpha;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR [edx+232]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 708  :     beta = state->frame->new_ratecontrol->intra_beta;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	movsd	xmm0, QWORD PTR [edx+240]
	movsd	QWORD PTR _beta$[ebp], xmm0

; 709  :     pthread_mutex_unlock(&state->frame->new_ratecontrol->intra_lock);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, 280				; 00000118H
	push	edx
	call	_pthread_mutex_unlock
	add	esp, 4

; 710  :   }

	jmp	$LN11@kvz_set_ct
$LN8@kvz_set_ct:

; 711  :   else if(state->frame->num == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN10@kvz_set_ct

; 712  :     alpha = state->frame->rc_alpha;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+128]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 713  :     beta = state->frame->rc_beta;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx+136]
	movsd	QWORD PTR _beta$[ebp], xmm0

; 714  :   }

	jmp	SHORT $LN11@kvz_set_ct
$LN10@kvz_set_ct:

; 715  :   else {
; 716  :     alpha = -state->frame->c_para[index] * state->frame->k_para[index];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _index$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+204]
	mov	ecx, DWORD PTR _index$[ebp]
	mulsd	xmm0, QWORD PTR [eax+ecx*8]
	movsd	QWORD PTR _alpha$[ebp], xmm0

; 717  :     beta = state->frame->k_para[index] - 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _index$[ebp]
	movsd	xmm0, QWORD PTR [edx+eax*8]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _beta$[ebp], xmm0
$LN11@kvz_set_ct:

; 718  :   }
; 719  : 
; 720  :   double est_lambda;
; 721  :   int est_qp;
; 722  :   if (state->frame->is_irap && encoder->cfg.intra_bit_allocation) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	$LN12@kvz_set_ct
	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2453]
	test	ecx, ecx
	je	$LN12@kvz_set_ct

; 723  :     double cost_per_pixel = (double)ctu->i_cost / ctu->pixels;

	mov	eax, DWORD PTR _ctu$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax+64]
	mov	ecx, DWORD PTR _ctu$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv767[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv767[ebp]
	mov	eax, DWORD PTR tv767[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _cost_per_pixel$12[ebp], xmm0

; 724  :     cost_per_pixel = pow(cost_per_pixel, BETA1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff406f694467382
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _cost_per_pixel$12[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _cost_per_pixel$12[ebp]

; 725  :     est_lambda = alpha / 256.0 * pow(cost_per_pixel / bpp, beta);

	movsd	xmm0, QWORD PTR _alpha$[ebp]
	divsd	xmm0, QWORD PTR __real@4070000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR _beta$[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	xmm1, QWORD PTR _cost_per_pixel$12[ebp]
	divsd	xmm1, QWORD PTR _bpp$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv1082[ebp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv785[ebp]
	movsd	xmm0, QWORD PTR tv1082[ebp]
	mulsd	xmm0, QWORD PTR tv785[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 726  :     est_qp = state->frame->QP;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	mov	DWORD PTR _est_qp$[ebp], edx

; 727  :     double max_lambda = exp(((double)est_qp + 2.49 - 13.7122) / 4.2005);

	cvtsi2sd xmm0, DWORD PTR _est_qp$[ebp]
	addsd	xmm0, QWORD PTR __real@4003eb851eb851ec
	subsd	xmm0, QWORD PTR __real@402b6ca57a786c22
	divsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _max_lambda$11[ebp]

; 728  :     double min_lambda = exp(((double)est_qp - 2.49 - 13.7122) / 4.2005);

	cvtsi2sd xmm0, DWORD PTR _est_qp$[ebp]
	subsd	xmm0, QWORD PTR __real@4003eb851eb851ec
	subsd	xmm0, QWORD PTR __real@402b6ca57a786c22
	divsd	xmm0, QWORD PTR __real@4010cd4fdf3b645a
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR _min_lambda$10[ebp]

; 729  :     est_lambda = CLIP(min_lambda, max_lambda, est_lambda);

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR _max_lambda$11[ebp]
	jbe	SHORT $LN28@kvz_set_ct
	movsd	xmm0, QWORD PTR _max_lambda$11[ebp]
	movsd	QWORD PTR tv196[ebp], xmm0
	jmp	SHORT $LN29@kvz_set_ct
$LN28@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv196[ebp], xmm0
$LN29@kvz_set_ct:
	movsd	xmm0, QWORD PTR _min_lambda$10[ebp]
	comisd	xmm0, QWORD PTR tv196[ebp]
	jbe	SHORT $LN32@kvz_set_ct
	movsd	xmm0, QWORD PTR _min_lambda$10[ebp]
	movsd	QWORD PTR tv200[ebp], xmm0
	jmp	SHORT $LN33@kvz_set_ct
$LN32@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR _max_lambda$11[ebp]
	jbe	SHORT $LN30@kvz_set_ct
	movsd	xmm0, QWORD PTR _max_lambda$11[ebp]
	movsd	QWORD PTR tv199[ebp], xmm0
	jmp	SHORT $LN31@kvz_set_ct
$LN30@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv199[ebp], xmm0
$LN31@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv199[ebp]
	movsd	QWORD PTR tv200[ebp], xmm0
$LN33@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv200[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 730  : 
; 731  :     est_qp = lambda_to_qp(est_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_lambda_to_qp
	add	esp, 8
	movsx	eax, al
	mov	DWORD PTR _est_qp$[ebp], eax

; 732  :   }

	jmp	$LN13@kvz_set_ct
$LN12@kvz_set_ct:

; 733  :   else {
; 734  :     // In case wpp is used the previous ctus may not be ready from above rows
; 735  :     const int ctu_limit = encoder->cfg.wpp ? pos.y * encoder->in.width_in_lcu : 0;

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN34@kvz_set_ct
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR _pos$[ebp+4]
	imul	edx, DWORD PTR [ecx+2488]
	mov	DWORD PTR tv208[ebp], edx
	jmp	SHORT $LN35@kvz_set_ct
$LN34@kvz_set_ct:
	mov	DWORD PTR tv208[ebp], 0
$LN35@kvz_set_ct:
	mov	eax, DWORD PTR tv208[ebp]
	mov	DWORD PTR _ctu_limit$9[ebp], eax

; 736  :     
; 737  :     est_lambda = alpha * pow(bpp, beta) * (state->frame->is_irap ? 0.5 : 1);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN36@kvz_set_ct
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv217[ebp], xmm0
	jmp	SHORT $LN37@kvz_set_ct
$LN36@kvz_set_ct:
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv217[ebp], xmm0
$LN37@kvz_set_ct:
	sub	esp, 8
	movsd	xmm0, QWORD PTR _beta$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv820[ebp]
	movsd	xmm0, QWORD PTR tv820[ebp]
	mulsd	xmm0, QWORD PTR _alpha$[ebp]
	mulsd	xmm0, QWORD PTR tv217[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 738  :     const double clip_lambda = state->frame->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR _clip_lambda$8[ebp], xmm0

; 739  : 
; 740  :     double clip_neighbor_lambda = -1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR _clip_neighbor_lambda$7[ebp], xmm0

; 741  :     int clip_qp = -1;

	mov	DWORD PTR _clip_qp$6[ebp], -1

; 742  :     if (encoder->cfg.clip_neighbour || state->frame->num == 0) {

	mov	eax, DWORD PTR _encoder$[ebp]
	movzx	ecx, BYTE PTR [eax+2454]
	test	ecx, ecx
	jne	SHORT $LN16@kvz_set_ct
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	$LN14@kvz_set_ct
$LN16@kvz_set_ct:

; 743  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _temp_index$5[ebp], eax
	jmp	SHORT $LN4@kvz_set_ct
$LN2@kvz_set_ct:
	mov	eax, DWORD PTR _temp_index$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _temp_index$5[ebp], eax
$LN4@kvz_set_ct:
	mov	eax, DWORD PTR _temp_index$5[ebp]
	cmp	eax, DWORD PTR _ctu_limit$9[ebp]
	jl	SHORT $LN3@kvz_set_ct

; 744  :         if (state->frame->lcu_stats[temp_index].lambda > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _temp_index$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+24]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN17@kvz_set_ct

; 745  :           clip_neighbor_lambda = state->frame->lcu_stats[temp_index].lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _temp_index$5[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+24]
	movsd	QWORD PTR _clip_neighbor_lambda$7[ebp], xmm0

; 746  :           break;

	jmp	SHORT $LN3@kvz_set_ct
$LN17@kvz_set_ct:

; 747  :         }
; 748  :       }

	jmp	SHORT $LN2@kvz_set_ct
$LN3@kvz_set_ct:

; 749  :       for (int temp_index = index - 1; temp_index >= ctu_limit; --temp_index) {

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _temp_index$4[ebp], eax
	jmp	SHORT $LN7@kvz_set_ct
$LN5@kvz_set_ct:
	mov	eax, DWORD PTR _temp_index$4[ebp]
	sub	eax, 1
	mov	DWORD PTR _temp_index$4[ebp], eax
$LN7@kvz_set_ct:
	mov	eax, DWORD PTR _temp_index$4[ebp]
	cmp	eax, DWORD PTR _ctu_limit$9[ebp]
	jl	SHORT $LN6@kvz_set_ct

; 750  :         if (state->frame->lcu_stats[temp_index].qp > -1) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _temp_index$4[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsx	ecx, BYTE PTR [eax+edx+68]
	cmp	ecx, -1
	jle	SHORT $LN18@kvz_set_ct

; 751  :           clip_qp = state->frame->lcu_stats[temp_index].qp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _temp_index$4[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsx	ecx, BYTE PTR [eax+edx+68]
	mov	DWORD PTR _clip_qp$6[ebp], ecx

; 752  :           break;

	jmp	SHORT $LN6@kvz_set_ct
$LN18@kvz_set_ct:

; 753  :         }
; 754  :       }

	jmp	SHORT $LN5@kvz_set_ct
$LN6@kvz_set_ct:

; 755  :     }

	jmp	$LN20@kvz_set_ct
$LN14@kvz_set_ct:

; 756  :     else {
; 757  :       
; 758  :       if (state->frame->lcu_stats[index].lambda > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsd	xmm0, QWORD PTR [eax+edx+24]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN19@kvz_set_ct

; 759  :         clip_neighbor_lambda = state->frame->previous_layer_state->frame->lcu_stats[index].lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR _index$[ebp], 72
	mov	edx, DWORD PTR [eax+148]
	movsd	xmm0, QWORD PTR [edx+ecx+24]
	movsd	QWORD PTR _clip_neighbor_lambda$7[ebp], xmm0
$LN19@kvz_set_ct:

; 760  :       }
; 761  :       if (state->frame->lcu_stats[index].qp > 0) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	edx, DWORD PTR _index$[ebp], 72
	mov	eax, DWORD PTR [ecx+148]
	movsx	ecx, BYTE PTR [eax+edx+68]
	test	ecx, ecx
	jle	SHORT $LN20@kvz_set_ct

; 762  :         clip_qp = state->frame->previous_layer_state->frame->lcu_stats[index].qp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+20]
	imul	ecx, DWORD PTR _index$[ebp], 72
	mov	edx, DWORD PTR [eax+148]
	movsx	eax, BYTE PTR [edx+ecx+68]
	mov	DWORD PTR _clip_qp$6[ebp], eax
$LN20@kvz_set_ct:

; 763  :       }
; 764  :     }
; 765  : 
; 766  : 
; 767  :     if (clip_neighbor_lambda > 0) {

	movsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN21@kvz_set_ct

; 768  :       est_lambda = CLIP(clip_neighbor_lambda * pow(2, -(1.0 + frame_allocation) / 3.0),

	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv853[ebp]
	movsd	xmm0, QWORD PTR tv853[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN38@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv863[ebp]
	movsd	xmm0, QWORD PTR tv863[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	movsd	QWORD PTR tv318[ebp], xmm0
	jmp	SHORT $LN39@kvz_set_ct
$LN38@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv318[ebp], xmm0
$LN39@kvz_set_ct:
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv873[ebp]
	movsd	xmm0, QWORD PTR tv873[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	comisd	xmm0, QWORD PTR tv318[ebp]
	jbe	SHORT $LN42@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv882[ebp]
	movsd	xmm0, QWORD PTR tv882[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	movsd	QWORD PTR tv353[ebp], xmm0
	jmp	$LN43@kvz_set_ct
$LN42@kvz_set_ct:
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv891[ebp]
	movsd	xmm0, QWORD PTR tv891[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN40@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv901[ebp]
	movsd	xmm0, QWORD PTR tv901[ebp]
	mulsd	xmm0, QWORD PTR _clip_neighbor_lambda$7[ebp]
	movsd	QWORD PTR tv352[ebp], xmm0
	jmp	SHORT $LN41@kvz_set_ct
$LN40@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv352[ebp], xmm0
$LN41@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv352[ebp]
	movsd	QWORD PTR tv353[ebp], xmm0
$LN43@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv353[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN21@kvz_set_ct:

; 769  :         clip_neighbor_lambda * pow(2.0, (1.0 + frame_allocation) / 3.0),
; 770  :         est_lambda);
; 771  :     }
; 772  : 
; 773  :     if (clip_lambda > 0) {

	movsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN22@kvz_set_ct

; 774  :       est_lambda = CLIP(clip_lambda * pow(2, -(2.0 + frame_allocation) / 3.0),

	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv914[ebp]
	movsd	xmm0, QWORD PTR tv914[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN44@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv924[ebp]
	movsd	xmm0, QWORD PTR tv924[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	movsd	QWORD PTR tv387[ebp], xmm0
	jmp	SHORT $LN45@kvz_set_ct
$LN44@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv387[ebp], xmm0
$LN45@kvz_set_ct:
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv934[ebp]
	movsd	xmm0, QWORD PTR tv934[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	comisd	xmm0, QWORD PTR tv387[ebp]
	jbe	SHORT $LN48@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv943[ebp]
	movsd	xmm0, QWORD PTR tv943[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	movsd	QWORD PTR tv422[ebp], xmm0
	jmp	$LN49@kvz_set_ct
$LN48@kvz_set_ct:
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv952[ebp]
	movsd	xmm0, QWORD PTR tv952[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	movsd	xmm1, QWORD PTR _est_lambda$[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN46@kvz_set_ct
	cvtsi2sd xmm0, DWORD PTR _frame_allocation$[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4008000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv962[ebp]
	movsd	xmm0, QWORD PTR tv962[ebp]
	mulsd	xmm0, QWORD PTR _clip_lambda$8[ebp]
	movsd	QWORD PTR tv421[ebp], xmm0
	jmp	SHORT $LN47@kvz_set_ct
$LN46@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv421[ebp], xmm0
$LN47@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv421[ebp]
	movsd	QWORD PTR tv422[ebp], xmm0
$LN49@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv422[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0

; 775  :         clip_lambda * pow(2.0, (1.0 + frame_allocation) / 3.0),
; 776  :         est_lambda);
; 777  :     }

	jmp	$LN23@kvz_set_ct
$LN22@kvz_set_ct:

; 778  :     else {
; 779  :       est_lambda = CLIP(10.0, 1000.0, est_lambda);

	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@408f400000000000
	jbe	SHORT $LN50@kvz_set_ct
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR tv424[ebp], xmm0
	jmp	SHORT $LN51@kvz_set_ct
$LN50@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv424[ebp], xmm0
$LN51@kvz_set_ct:
	movsd	xmm0, QWORD PTR __real@4024000000000000
	comisd	xmm0, QWORD PTR tv424[ebp]
	jbe	SHORT $LN54@kvz_set_ct
	movsd	xmm0, QWORD PTR __real@4024000000000000
	movsd	QWORD PTR tv428[ebp], xmm0
	jmp	SHORT $LN55@kvz_set_ct
$LN54@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	comisd	xmm0, QWORD PTR __real@408f400000000000
	jbe	SHORT $LN52@kvz_set_ct
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR tv427[ebp], xmm0
	jmp	SHORT $LN53@kvz_set_ct
$LN52@kvz_set_ct:
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR tv427[ebp], xmm0
$LN53@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv427[ebp]
	movsd	QWORD PTR tv428[ebp], xmm0
$LN55@kvz_set_ct:
	movsd	xmm0, QWORD PTR tv428[ebp]
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN23@kvz_set_ct:

; 780  :     }
; 781  : 
; 782  :     if (est_lambda < 0.1) {

	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	comisd	xmm0, QWORD PTR _est_lambda$[ebp]
	jbe	SHORT $LN24@kvz_set_ct

; 783  :       est_lambda = 0.1;

	movsd	xmm0, QWORD PTR __real@3fb999999999999a
	movsd	QWORD PTR _est_lambda$[ebp], xmm0
$LN24@kvz_set_ct:

; 784  :     }
; 785  : 
; 786  :     est_qp = lambda_to_qp(est_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_lambda_to_qp
	add	esp, 8
	movsx	eax, al
	mov	DWORD PTR _est_qp$[ebp], eax

; 787  : 
; 788  :     if( clip_qp > -1) {

	cmp	DWORD PTR _clip_qp$6[ebp], -1
	jle	$LN25@kvz_set_ct

; 789  :       est_qp = CLIP(clip_qp - 1 - frame_allocation,

	mov	eax, DWORD PTR _frame_allocation$[ebp]
	mov	ecx, DWORD PTR _clip_qp$6[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, DWORD PTR _est_qp$[ebp]
	jge	SHORT $LN56@kvz_set_ct
	mov	eax, DWORD PTR _frame_allocation$[ebp]
	mov	ecx, DWORD PTR _clip_qp$6[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR tv441[ebp], edx
	jmp	SHORT $LN57@kvz_set_ct
$LN56@kvz_set_ct:
	mov	eax, DWORD PTR _est_qp$[ebp]
	mov	DWORD PTR tv441[ebp], eax
$LN57@kvz_set_ct:
	mov	ecx, DWORD PTR _clip_qp$6[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _frame_allocation$[ebp]
	cmp	ecx, DWORD PTR tv441[ebp]
	jle	SHORT $LN60@kvz_set_ct
	mov	edx, DWORD PTR _clip_qp$6[ebp]
	sub	edx, 1
	sub	edx, DWORD PTR _frame_allocation$[ebp]
	mov	DWORD PTR tv451[ebp], edx
	jmp	SHORT $LN61@kvz_set_ct
$LN60@kvz_set_ct:
	mov	eax, DWORD PTR _frame_allocation$[ebp]
	mov	ecx, DWORD PTR _clip_qp$6[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	cmp	edx, DWORD PTR _est_qp$[ebp]
	jge	SHORT $LN58@kvz_set_ct
	mov	eax, DWORD PTR _frame_allocation$[ebp]
	mov	ecx, DWORD PTR _clip_qp$6[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR tv450[ebp], edx
	jmp	SHORT $LN59@kvz_set_ct
$LN58@kvz_set_ct:
	mov	eax, DWORD PTR _est_qp$[ebp]
	mov	DWORD PTR tv450[ebp], eax
$LN59@kvz_set_ct:
	mov	ecx, DWORD PTR tv450[ebp]
	mov	DWORD PTR tv451[ebp], ecx
$LN61@kvz_set_ct:
	mov	edx, DWORD PTR tv451[ebp]
	mov	DWORD PTR _est_qp$[ebp], edx
$LN25@kvz_set_ct:

; 790  :         clip_qp + 1 + frame_allocation,
; 791  :         est_qp);
; 792  :     }
; 793  : 
; 794  :     est_qp = CLIP(state->frame->QP - 2 - frame_allocation,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	mov	eax, DWORD PTR _frame_allocation$[ebp]
	lea	ecx, DWORD PTR [edx+eax+2]
	cmp	ecx, DWORD PTR _est_qp$[ebp]
	jge	SHORT $LN62@kvz_set_ct
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	mov	edx, DWORD PTR _frame_allocation$[ebp]
	lea	eax, DWORD PTR [ecx+edx+2]
	mov	DWORD PTR tv468[ebp], eax
	jmp	SHORT $LN63@kvz_set_ct
$LN62@kvz_set_ct:
	mov	ecx, DWORD PTR _est_qp$[ebp]
	mov	DWORD PTR tv468[ebp], ecx
$LN63@kvz_set_ct:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	sub	ecx, 2
	sub	ecx, DWORD PTR _frame_allocation$[ebp]
	cmp	ecx, DWORD PTR tv468[ebp]
	jle	SHORT $LN66@kvz_set_ct
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	sub	ecx, 2
	sub	ecx, DWORD PTR _frame_allocation$[ebp]
	mov	DWORD PTR tv487[ebp], ecx
	jmp	SHORT $LN67@kvz_set_ct
$LN66@kvz_set_ct:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	mov	edx, DWORD PTR _frame_allocation$[ebp]
	lea	eax, DWORD PTR [ecx+edx+2]
	cmp	eax, DWORD PTR _est_qp$[ebp]
	jge	SHORT $LN64@kvz_set_ct
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	mov	ecx, DWORD PTR _frame_allocation$[ebp]
	lea	edx, DWORD PTR [eax+ecx+2]
	mov	DWORD PTR tv486[ebp], edx
	jmp	SHORT $LN65@kvz_set_ct
$LN64@kvz_set_ct:
	mov	eax, DWORD PTR _est_qp$[ebp]
	mov	DWORD PTR tv486[ebp], eax
$LN65@kvz_set_ct:
	mov	ecx, DWORD PTR tv486[ebp]
	mov	DWORD PTR tv487[ebp], ecx
$LN67@kvz_set_ct:
	mov	edx, DWORD PTR tv487[ebp]
	mov	DWORD PTR _est_qp$[ebp], edx
$LN13@kvz_set_ct:

; 795  :       state->frame->QP + 2 + frame_allocation,
; 796  :       est_qp);
; 797  :   }
; 798  : 
; 799  :   state->lambda = est_lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [eax+296], xmm0

; 800  :   state->lambda_sqrt = sqrt(est_lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	eax, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [eax+304]

; 801  :   state->qp = est_qp;

	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR _est_qp$[ebp]
	mov	BYTE PTR [eax+312], cl

; 802  :   ctu->qp = est_qp;

	mov	eax, DWORD PTR _ctu$[ebp]
	mov	cl, BYTE PTR _est_qp$[ebp]
	mov	BYTE PTR [eax+68], cl

; 803  :   ctu->lambda = est_lambda;

	mov	eax, DWORD PTR _ctu$[ebp]
	movsd	xmm0, QWORD PTR _est_lambda$[ebp]
	movsd	QWORD PTR [eax+24], xmm0

; 804  :   ctu->i_cost = 0;

	mov	eax, DWORD PTR _ctu$[ebp]
	mov	DWORD PTR [eax+64], 0

; 805  : 
; 806  :   // Apply variance adaptive quantization
; 807  :   if (encoder->cfg.vaq) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2436], 0
	je	$LN26@kvz_set_ct

; 808  :     vector2d_t lcu = {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lcu$3[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _lcu$3[ebp+4], edx

; 809  :       pos.x + state->tile->lcu_offset_x,
; 810  :       pos.y + state->tile->lcu_offset_y
; 811  :     };
; 812  :     int id = lcu.x + lcu.y * state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lcu$3[ebp+4]
	imul	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _lcu$3[ebp]
	mov	DWORD PTR _id$2[ebp], eax

; 813  :     int aq_offset = round(state->frame->aq_offsets[id]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+164]
	mov	esi, esp
	mov	eax, DWORD PTR _id$2[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__round
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	call	__ftol2_sse
	mov	DWORD PTR _aq_offset$1[ebp], eax

; 814  :     state->qp += aq_offset;

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	add	ecx, DWORD PTR _aq_offset$1[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [edx+312], cl

; 815  :     // Maximum delta QP is clipped according to ITU T-REC-H.265 specification chapter 7.4.9.10 Transform unit semantics
; 816  :     // Clipping range is a function of bit depth
; 817  :     // Since this value will be later combined with qp_pred, clip to half of that instead to be safe
; 818  :     state->qp = CLIP(state->frame->QP + KVZ_QP_DELTA_MIN / 2, state->frame->QP + KVZ_QP_DELTA_MAX / 2, state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, 25					; 00000019H
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	cmp	edx, ecx
	jge	SHORT $LN68@kvz_set_ct
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	add	ecx, 25					; 00000019H
	mov	DWORD PTR tv541[ebp], ecx
	jmp	SHORT $LN69@kvz_set_ct
$LN68@kvz_set_ct:
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR [edx+312]
	mov	DWORD PTR tv541[ebp], eax
$LN69@kvz_set_ct:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	sub	eax, 13					; 0000000dH
	cmp	eax, DWORD PTR tv541[ebp]
	jle	SHORT $LN72@kvz_set_ct
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	sub	eax, 13					; 0000000dH
	mov	DWORD PTR tv563[ebp], eax
	jmp	SHORT $LN73@kvz_set_ct
$LN72@kvz_set_ct:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	add	eax, 25					; 00000019H
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, BYTE PTR [ecx+312]
	cmp	eax, edx
	jge	SHORT $LN70@kvz_set_ct
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, 25					; 00000019H
	mov	DWORD PTR tv562[ebp], edx
	jmp	SHORT $LN71@kvz_set_ct
$LN70@kvz_set_ct:
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	mov	DWORD PTR tv562[ebp], ecx
$LN71@kvz_set_ct:
	mov	edx, DWORD PTR tv562[ebp]
	mov	DWORD PTR tv563[ebp], edx
$LN73@kvz_set_ct:
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR tv563[ebp]
	mov	BYTE PTR [eax+312], cl

; 819  :     state->qp = CLIP_TO_QP(state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	cmp	ecx, 51					; 00000033H
	jle	SHORT $LN74@kvz_set_ct
	mov	DWORD PTR tv571[ebp], 51		; 00000033H
	jmp	SHORT $LN75@kvz_set_ct
$LN74@kvz_set_ct:
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR [edx+312]
	mov	DWORD PTR tv571[ebp], eax
$LN75@kvz_set_ct:
	cmp	DWORD PTR tv571[ebp], 0
	jge	SHORT $LN78@kvz_set_ct
	mov	DWORD PTR tv579[ebp], 0
	jmp	SHORT $LN79@kvz_set_ct
$LN78@kvz_set_ct:
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, BYTE PTR [ecx+312]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN76@kvz_set_ct
	mov	DWORD PTR tv578[ebp], 51		; 00000033H
	jmp	SHORT $LN77@kvz_set_ct
$LN76@kvz_set_ct:
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	mov	DWORD PTR tv578[ebp], ecx
$LN77@kvz_set_ct:
	mov	edx, DWORD PTR tv578[ebp]
	mov	DWORD PTR tv579[ebp], edx
$LN79@kvz_set_ct:
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR tv579[ebp]
	mov	BYTE PTR [eax+312], cl

; 820  :     state->lambda = qp_to_lambda(state, state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_qp_to_lambda
	add	esp, 8
	mov	eax, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [eax+296]

; 821  :     state->lambda_sqrt = sqrt(state->lambda);

	mov	eax, DWORD PTR _state$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+296]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [ecx+304]

; 822  : 
; 823  :     ctu->adjust_lambda = state->lambda;

	mov	eax, DWORD PTR _ctu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [ecx+296]
	movsd	QWORD PTR [eax+32], xmm0

; 824  :     ctu->adjust_qp = state->qp;

	mov	eax, DWORD PTR _ctu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+312]
	mov	BYTE PTR [eax+69], dl
$LN26@kvz_set_ct:

; 825  :     //ctu->qp = state->qp;
; 826  :     //ctu->lambda = state->lambda;
; 827  :   }
; 828  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN82@kvz_set_ct
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 572				; 0000023cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN82@kvz_set_ct:
	DD	1
	DD	$LN81@kvz_set_ct
$LN81@kvz_set_ct:
	DD	-280					; fffffee8H
	DD	8
	DD	$LN80@kvz_set_ct
$LN80@kvz_set_ct:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	0
_kvz_set_ctu_qp_lambda ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_set_lcu_lambda_and_qp
_TEXT	SEGMENT
tv291 = -428						; size = 8
tv255 = -428						; size = 8
tv292 = -420						; size = 8
tv256 = -420						; size = 8
tv399 = -416						; size = 4
tv383 = -416						; size = 4
tv145 = -416						; size = 4
tv627 = -412						; size = 8
tv615 = -412						; size = 4
tv599 = -412						; size = 8
tv400 = -412						; size = 4
tv384 = -412						; size = 4
tv273 = -412						; size = 8
tv243 = -412						; size = 8
tv183 = -412						; size = 4
tv146 = -412						; size = 4
tv610 = -408						; size = 4
tv586 = -408						; size = 4
tv392 = -408						; size = 4
tv362 = -408						; size = 4
tv171 = -408						; size = 4
tv134 = -408						; size = 4
_aq_offset$1 = -208					; size = 4
_id$2 = -196						; size = 4
_lcu_pos$3 = -184					; size = 8
_lambda_comp$4 = -168					; size = 8
_bpp$5 = -152						; size = 8
_lambda$6 = -136					; size = 8
_target_bpp$7 = -120					; size = 8
_target_bits$8 = -104					; size = 8
_pixels$9 = -88						; size = 4
_dqp$10 = -76						; size = 4
_roi_index$11 = -64					; size = 4
_roi$12 = -52						; size = 8
_lcu$13 = -36						; size = 8
_lcu$ = -20						; size = 4
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_pos$ = 12						; size = 8
_kvz_set_lcu_lambda_and_qp PROC				; COMDAT

; 1084 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 1085 :   const encoder_control_t * const ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 1086 :   lcu_stats_t *lcu = kvz_get_lcu_stats(state, pos.x, pos.y);

	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_kvz_get_lcu_stats
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lcu$[ebp], eax

; 1087 : 
; 1088 :   if (ctrl->cfg.roi.dqps != NULL) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2404], 0
	je	$LN2@kvz_set_lc

; 1089 :     vector2d_t lcu = {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lcu$13[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _lcu$13[ebp+4], edx

; 1090 :       pos.x + state->tile->lcu_offset_x,
; 1091 :       pos.y + state->tile->lcu_offset_y
; 1092 :     };
; 1093 :     vector2d_t roi = {

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _lcu$13[ebp]
	imul	ecx, DWORD PTR [eax+2396]
	mov	esi, DWORD PTR _ctrl$[ebp]
	mov	eax, ecx
	cdq
	idiv	DWORD PTR [esi+2488]
	mov	DWORD PTR _roi$12[ebp], eax
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _lcu$13[ebp+4]
	imul	ecx, DWORD PTR [eax+2400]
	mov	esi, DWORD PTR _ctrl$[ebp]
	mov	eax, ecx
	cdq
	idiv	DWORD PTR [esi+2492]
	mov	DWORD PTR _roi$12[ebp+4], eax

; 1094 :       lcu.x * ctrl->cfg.roi.width / ctrl->in.width_in_lcu,
; 1095 :       lcu.y * ctrl->cfg.roi.height / ctrl->in.height_in_lcu
; 1096 :     };
; 1097 :     int roi_index = roi.x + roi.y * ctrl->cfg.roi.width;

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR _roi$12[ebp+4]
	imul	ecx, DWORD PTR [eax+2396]
	add	ecx, DWORD PTR _roi$12[ebp]
	mov	DWORD PTR _roi_index$11[ebp], ecx

; 1098 :     int dqp = ctrl->cfg.roi.dqps[roi_index];

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+2404]
	mov	edx, DWORD PTR _roi_index$11[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	mov	DWORD PTR _dqp$10[ebp], eax

; 1099 :     state->qp = CLIP_TO_QP(state->frame->QP + dqp);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, DWORD PTR _dqp$10[ebp]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN11@kvz_set_lc
	mov	DWORD PTR tv134[ebp], 51		; 00000033H
	jmp	SHORT $LN12@kvz_set_lc
$LN11@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, DWORD PTR _dqp$10[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN12@kvz_set_lc:
	cmp	DWORD PTR tv134[ebp], 0
	jge	SHORT $LN15@kvz_set_lc
	mov	DWORD PTR tv146[ebp], 0
	jmp	SHORT $LN16@kvz_set_lc
$LN15@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, DWORD PTR _dqp$10[ebp]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN13@kvz_set_lc
	mov	DWORD PTR tv145[ebp], 51		; 00000033H
	jmp	SHORT $LN14@kvz_set_lc
$LN13@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, DWORD PTR _dqp$10[ebp]
	mov	DWORD PTR tv145[ebp], edx
$LN14@kvz_set_lc:
	mov	eax, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv146[ebp], eax
$LN16@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR tv146[ebp]
	mov	BYTE PTR [ecx+312], dl

; 1100 :     state->lambda = qp_to_lambda(state, state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_qp_to_lambda
	add	esp, 8
	mov	eax, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [eax+296]

; 1101 :     state->lambda_sqrt = sqrt(state->lambda);

	mov	eax, DWORD PTR _state$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+296]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [ecx+304]

; 1102 : 
; 1103 :   }

	jmp	$LN5@kvz_set_lc
$LN2@kvz_set_lc:

; 1104 :   else if (ctrl->cfg.target_bitrate > 0) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2328], 0
	jle	$LN4@kvz_set_lc

; 1105 :     const uint32_t pixels    = MIN(LCU_WIDTH, state->tile->frame->width  - LCU_WIDTH * pos.x) *

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pos$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, eax
	cmp	ecx, 64					; 00000040H
	jle	SHORT $LN17@kvz_set_lc
	mov	DWORD PTR tv171[ebp], 64		; 00000040H
	jmp	SHORT $LN18@kvz_set_lc
$LN17@kvz_set_lc:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, edx
	mov	DWORD PTR tv171[ebp], eax
$LN18@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pos$[ebp+4]
	shl	ecx, 6
	mov	edx, DWORD PTR [eax+12]
	sub	edx, ecx
	cmp	edx, 64					; 00000040H
	jle	SHORT $LN19@kvz_set_lc
	mov	DWORD PTR tv183[ebp], 64		; 00000040H
	jmp	SHORT $LN20@kvz_set_lc
$LN19@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pos$[ebp+4]
	shl	eax, 6
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, eax
	mov	DWORD PTR tv183[ebp], ecx
$LN20@kvz_set_lc:
	mov	edx, DWORD PTR tv171[ebp]
	imul	edx, DWORD PTR tv183[ebp]
	mov	DWORD PTR _pixels$9[ebp], edx

; 1106 :                                MIN(LCU_WIDTH, state->tile->frame->height - LCU_WIDTH * pos.y);
; 1107 : 
; 1108 :     if (state->frame->num > ctrl->cfg.owf) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+156]
	jle	SHORT $LN6@kvz_set_lc

; 1109 :       update_parameters(lcu->bits,

	mov	eax, DWORD PTR _lcu$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _lcu$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+24]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pixels$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcu$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_update_parameters
	add	esp, 24					; 00000018H

; 1110 :                         pixels,
; 1111 :                         lcu->lambda,
; 1112 :                         &lcu->rc_alpha,
; 1113 :                         &lcu->rc_beta);
; 1114 :     } else {

	jmp	SHORT $LN7@kvz_set_lc
$LN6@kvz_set_lc:

; 1115 :       lcu->rc_alpha = state->frame->rc_alpha;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _lcu$[ebp]
	movsd	xmm0, QWORD PTR [ecx+128]
	movsd	QWORD PTR [edx+40], xmm0

; 1116 :       lcu->rc_beta  = state->frame->rc_beta;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _lcu$[ebp]
	movsd	xmm0, QWORD PTR [ecx+136]
	movsd	QWORD PTR [edx+48], xmm0
$LN7@kvz_set_lc:

; 1117 :     }
; 1118 : 
; 1119 :     const double target_bits = lcu_allocate_bits(state, pos);

	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_lcu_allocate_bits
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR _target_bits$8[ebp]

; 1120 :     const double target_bpp  = target_bits / pixels;

	mov	eax, DWORD PTR _pixels$9[ebp]
	mov	DWORD PTR tv586[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv586[ebp]
	mov	ecx, DWORD PTR tv586[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	xmm1, QWORD PTR _target_bits$8[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _target_bpp$7[ebp], xmm1

; 1121 : 
; 1122 :     double lambda = clip_lambda(lcu->rc_alpha * pow(target_bpp, lcu->rc_beta));

	mov	eax, DWORD PTR _lcu$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _target_bpp$7[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv599[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	movsd	xmm0, QWORD PTR tv599[ebp]
	mulsd	xmm0, QWORD PTR [ecx+40]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_clip_lambda
	add	esp, 8
	fstp	QWORD PTR _lambda$6[ebp]

; 1123 :     // Clip lambda according to the equations 24 and 26 in
; 1124 :     // https://doi.org/10.1109/TIP.2014.2336550
; 1125 :     if (state->frame->num > ctrl->cfg.owf) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+156]
	jle	$LN8@kvz_set_lc

; 1126 :       const double bpp         = lcu->bits / (double)pixels;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv610[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv610[ebp]
	mov	edx, DWORD PTR tv610[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mov	eax, DWORD PTR _pixels$9[ebp]
	mov	DWORD PTR tv615[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv615[ebp]
	mov	ecx, DWORD PTR tv615[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _bpp$5[ebp], xmm0

; 1127 :       const double lambda_comp = clip_lambda(lcu->rc_alpha * pow(bpp, lcu->rc_beta));

	mov	eax, DWORD PTR _lcu$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _bpp$5[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv627[ebp]
	mov	ecx, DWORD PTR _lcu$[ebp]
	movsd	xmm0, QWORD PTR tv627[ebp]
	mulsd	xmm0, QWORD PTR [ecx+40]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_clip_lambda
	add	esp, 8
	fstp	QWORD PTR _lambda_comp$4[ebp]

; 1128 :       lambda = CLIP(lambda_comp * 0.7937005259840998,

	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff428a2f98d728b
	movsd	xmm1, QWORD PTR _lambda$6[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN21@kvz_set_lc
	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff428a2f98d728b
	movsd	QWORD PTR tv243[ebp], xmm0
	jmp	SHORT $LN22@kvz_set_lc
$LN21@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR tv243[ebp], xmm0
$LN22@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe965fea53d6e3d
	comisd	xmm0, QWORD PTR tv243[ebp]
	jbe	SHORT $LN25@kvz_set_lc
	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe965fea53d6e3d
	movsd	QWORD PTR tv256[ebp], xmm0
	jmp	SHORT $LN26@kvz_set_lc
$LN25@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff428a2f98d728b
	movsd	xmm1, QWORD PTR _lambda$6[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN23@kvz_set_lc
	movsd	xmm0, QWORD PTR _lambda_comp$4[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff428a2f98d728b
	movsd	QWORD PTR tv255[ebp], xmm0
	jmp	SHORT $LN24@kvz_set_lc
$LN23@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR tv255[ebp], xmm0
$LN24@kvz_set_lc:
	movsd	xmm0, QWORD PTR tv255[ebp]
	movsd	QWORD PTR tv256[ebp], xmm0
$LN26@kvz_set_lc:
	movsd	xmm0, QWORD PTR tv256[ebp]
	movsd	QWORD PTR _lambda$6[ebp], xmm0
$LN8@kvz_set_lc:

; 1129 :                     lambda_comp * 1.2599210498948732,
; 1130 :                     lambda);
; 1131 :     }
; 1132 :     lambda = CLIP(state->frame->lambda * 0.6299605249474366,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR __real@3ff965fea53d6e3c
	movsd	xmm1, QWORD PTR _lambda$6[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN27@kvz_set_lc
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR __real@3ff965fea53d6e3c
	movsd	QWORD PTR tv273[ebp], xmm0
	jmp	SHORT $LN28@kvz_set_lc
$LN27@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR tv273[ebp], xmm0
$LN28@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR __real@3fe428a2f98d728b
	comisd	xmm0, QWORD PTR tv273[ebp]
	jbe	SHORT $LN31@kvz_set_lc
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR __real@3fe428a2f98d728b
	movsd	QWORD PTR tv292[ebp], xmm0
	jmp	SHORT $LN32@kvz_set_lc
$LN31@kvz_set_lc:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR __real@3ff965fea53d6e3c
	movsd	xmm1, QWORD PTR _lambda$6[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN29@kvz_set_lc
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR __real@3ff965fea53d6e3c
	movsd	QWORD PTR tv291[ebp], xmm0
	jmp	SHORT $LN30@kvz_set_lc
$LN29@kvz_set_lc:
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR tv291[ebp], xmm0
$LN30@kvz_set_lc:
	movsd	xmm0, QWORD PTR tv291[ebp]
	movsd	QWORD PTR tv292[ebp], xmm0
$LN32@kvz_set_lc:
	movsd	xmm0, QWORD PTR tv292[ebp]
	movsd	QWORD PTR _lambda$6[ebp], xmm0

; 1133 :                   state->frame->lambda * 1.5874010519681994,
; 1134 :                   lambda);
; 1135 :     lambda = clip_lambda(lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_clip_lambda
	add	esp, 8
	fstp	QWORD PTR _lambda$6[ebp]

; 1136 : 
; 1137 :     state->lambda      = lambda;

	mov	eax, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR [eax+296], xmm0

; 1138 :     state->lambda_sqrt = sqrt(lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	eax, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [eax+304]

; 1139 :     state->qp          = lambda_to_qp(lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$6[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_lambda_to_qp
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+312], al

; 1140 : 
; 1141 :   } else {

	jmp	SHORT $LN5@kvz_set_lc
$LN4@kvz_set_lc:

; 1142 :     state->qp          = state->frame->QP;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	mov	al, BYTE PTR [ecx+24]
	mov	BYTE PTR [edx+312], al

; 1143 :     state->lambda      = state->frame->lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [edx+296], xmm0

; 1144 :     state->lambda_sqrt = sqrt(state->frame->lambda);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	edx, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [edx+304]
$LN5@kvz_set_lc:

; 1145 :   }
; 1146 : 
; 1147 :   lcu->lambda = state->lambda;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [ecx+296]
	movsd	QWORD PTR [eax+24], xmm0

; 1148 :   lcu->qp = state->qp;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+312]
	mov	BYTE PTR [eax+68], dl

; 1149 : 
; 1150 :   // Apply variance adaptive quantization
; 1151 :   if (ctrl->cfg.vaq) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2436], 0
	je	$LN9@kvz_set_lc

; 1152 :     vector2d_t lcu_pos = {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lcu_pos$3[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pos$[ebp+4]
	add	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _lcu_pos$3[ebp+4], edx

; 1153 :       pos.x + state->tile->lcu_offset_x,
; 1154 :       pos.y + state->tile->lcu_offset_y
; 1155 :     };
; 1156 :     int id = lcu_pos.x + lcu_pos.y * state->tile->frame->width_in_lcu;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _lcu_pos$3[ebp+4]
	imul	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _lcu_pos$3[ebp]
	mov	DWORD PTR _id$2[ebp], eax

; 1157 :     int aq_offset = round(state->frame->aq_offsets[id]);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+164]
	mov	esi, esp
	mov	eax, DWORD PTR _id$2[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+eax*8]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__round
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	call	__ftol2_sse
	mov	DWORD PTR _aq_offset$1[ebp], eax

; 1158 :     state->qp += aq_offset;    

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	add	ecx, DWORD PTR _aq_offset$1[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [edx+312], cl

; 1159 :     // Maximum delta QP is clipped according to ITU T-REC-H.265 specification chapter 7.4.9.10 Transform unit semantics
; 1160 :     // Clipping range is a function of bit depth
; 1161 :     // Since this value will be later combined with qp_pred, clip to half of that instead to be safe
; 1162 :     state->qp = CLIP(state->frame->QP + KVZ_QP_DELTA_MIN / 2, state->frame->QP + KVZ_QP_DELTA_MAX / 2, state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, 25					; 00000019H
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	cmp	edx, ecx
	jge	SHORT $LN33@kvz_set_lc
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	movsx	ecx, BYTE PTR [eax+24]
	add	ecx, 25					; 00000019H
	mov	DWORD PTR tv362[ebp], ecx
	jmp	SHORT $LN34@kvz_set_lc
$LN33@kvz_set_lc:
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR [edx+312]
	mov	DWORD PTR tv362[ebp], eax
$LN34@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	sub	eax, 13					; 0000000dH
	cmp	eax, DWORD PTR tv362[ebp]
	jle	SHORT $LN37@kvz_set_lc
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	sub	eax, 13					; 0000000dH
	mov	DWORD PTR tv384[ebp], eax
	jmp	SHORT $LN38@kvz_set_lc
$LN37@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movsx	eax, BYTE PTR [edx+24]
	add	eax, 25					; 00000019H
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, BYTE PTR [ecx+312]
	cmp	eax, edx
	jge	SHORT $LN35@kvz_set_lc
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	add	edx, 25					; 00000019H
	mov	DWORD PTR tv383[ebp], edx
	jmp	SHORT $LN36@kvz_set_lc
$LN35@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	mov	DWORD PTR tv383[ebp], ecx
$LN36@kvz_set_lc:
	mov	edx, DWORD PTR tv383[ebp]
	mov	DWORD PTR tv384[ebp], edx
$LN38@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR tv384[ebp]
	mov	BYTE PTR [eax+312], cl

; 1163 :     state->qp = CLIP_TO_QP(state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	cmp	ecx, 51					; 00000033H
	jle	SHORT $LN39@kvz_set_lc
	mov	DWORD PTR tv392[ebp], 51		; 00000033H
	jmp	SHORT $LN40@kvz_set_lc
$LN39@kvz_set_lc:
	mov	edx, DWORD PTR _state$[ebp]
	movsx	eax, BYTE PTR [edx+312]
	mov	DWORD PTR tv392[ebp], eax
$LN40@kvz_set_lc:
	cmp	DWORD PTR tv392[ebp], 0
	jge	SHORT $LN43@kvz_set_lc
	mov	DWORD PTR tv400[ebp], 0
	jmp	SHORT $LN44@kvz_set_lc
$LN43@kvz_set_lc:
	mov	ecx, DWORD PTR _state$[ebp]
	movsx	edx, BYTE PTR [ecx+312]
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN41@kvz_set_lc
	mov	DWORD PTR tv399[ebp], 51		; 00000033H
	jmp	SHORT $LN42@kvz_set_lc
$LN41@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	mov	DWORD PTR tv399[ebp], ecx
$LN42@kvz_set_lc:
	mov	edx, DWORD PTR tv399[ebp]
	mov	DWORD PTR tv400[ebp], edx
$LN44@kvz_set_lc:
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR tv400[ebp]
	mov	BYTE PTR [eax+312], cl

; 1164 :     state->lambda = qp_to_lambda(state, state->qp);

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax+312]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_qp_to_lambda
	add	esp, 8
	mov	eax, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [eax+296]

; 1165 :     state->lambda_sqrt = sqrt(state->lambda);

	mov	eax, DWORD PTR _state$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+296]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	fstp	QWORD PTR [ecx+304]

; 1166 : 
; 1167 :     lcu->adjust_lambda = state->lambda;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	movsd	xmm0, QWORD PTR [ecx+296]
	movsd	QWORD PTR [eax+32], xmm0

; 1168 :     lcu->adjust_qp = state->qp;

	mov	eax, DWORD PTR _lcu$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+312]
	mov	BYTE PTR [eax+69], dl
$LN9@kvz_set_lc:

; 1169 :   }
; 1170 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@kvz_set_lc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN49@kvz_set_lc:
	DD	3
	DD	$LN48@kvz_set_lc
$LN48@kvz_set_lc:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN45@kvz_set_lc
	DD	-52					; ffffffccH
	DD	8
	DD	$LN46@kvz_set_lc
	DD	-184					; ffffff48H
	DD	8
	DD	$LN47@kvz_set_lc
$LN47@kvz_set_lc:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN46@kvz_set_lc:
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	0
$LN45@kvz_set_lc:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	0
_kvz_set_lcu_lambda_and_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_set_picture_lambda_and_qp
_TEXT	SEGMENT
tv187 = -316						; size = 8
tv188 = -308						; size = 8
tv233 = -304						; size = 4
tv208 = -304						; size = 4
tv302 = -300						; size = 8
tv234 = -300						; size = 4
tv209 = -300						; size = 4
tv172 = -300						; size = 8
tv222 = -296						; size = 4
tv199 = -296						; size = 4
_qp$1 = -96						; size = 8
_gop_len$2 = -80					; size = 4
_gop$3 = -68						; size = 4
_lambda$4 = -56						; size = 8
_target_bpp$5 = -40					; size = 8
_pic_target_bits$6 = -24				; size = 8
_ctrl$ = -8						; size = 4
_state$ = 8						; size = 4
_kvz_set_picture_lambda_and_qp PROC			; COMDAT

; 1013 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 1014 :   const encoder_control_t * const ctrl = state->encoder_control;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctrl$[ebp], ecx

; 1015 : 
; 1016 :   if (ctrl->cfg.target_bitrate > 0) {

	mov	eax, DWORD PTR _ctrl$[ebp]
	cmp	DWORD PTR [eax+2328], 0
	jle	$LN2@kvz_set_pi

; 1017 :     // Rate control enabled
; 1018 : 
; 1019 :     if (state->frame->num > ctrl->cfg.owf) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ctrl$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+156]
	jle	SHORT $LN4@kvz_set_pi

; 1020 :       // At least one frame has been written.
; 1021 :       update_parameters(state->stats_bitstream_length * 8,

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 136				; 00000088H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 128				; 00000080H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+2504]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+288]
	shl	eax, 3
	push	eax
	call	_update_parameters
	add	esp, 24					; 00000018H
$LN4@kvz_set_pi:

; 1022 :                         ctrl->in.pixels_per_pic,
; 1023 :                         state->frame->lambda,
; 1024 :                         &state->frame->rc_alpha,
; 1025 :                         &state->frame->rc_beta);
; 1026 :     }
; 1027 : 
; 1028 :     const double pic_target_bits = pic_allocate_bits(state);

	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_pic_allocate_bits
	add	esp, 4
	fstp	QWORD PTR _pic_target_bits$6[ebp]

; 1029 :     const double target_bpp = pic_target_bits / ctrl->in.pixels_per_pic;

	mov	eax, DWORD PTR _ctrl$[ebp]
	mov	ecx, DWORD PTR [eax+2504]
	mov	edx, DWORD PTR [eax+2508]
	call	__ltod3
	movsd	xmm1, QWORD PTR _pic_target_bits$6[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _target_bpp$5[ebp], xmm1

; 1030 :     double lambda = state->frame->rc_alpha * pow(target_bpp, state->frame->rc_beta);

	mov	eax, DWORD PTR _state$[ebp]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+136]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _target_bpp$5[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv302[ebp]
	movsd	xmm0, QWORD PTR tv302[ebp]
	mulsd	xmm0, QWORD PTR [esi+128]
	movsd	QWORD PTR _lambda$4[ebp], xmm0

; 1031 :     lambda = clip_lambda(lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$4[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_clip_lambda
	add	esp, 8
	fstp	QWORD PTR _lambda$4[ebp]

; 1032 : 
; 1033 :     state->frame->lambda              = lambda;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _lambda$4[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 1034 :     state->frame->QP                  = lambda_to_qp(lambda);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _lambda$4[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_lambda_to_qp
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+24], al

; 1035 :     state->frame->cur_pic_target_bits = pic_target_bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsd	xmm0, QWORD PTR _pic_target_bits$6[ebp]
	movsd	QWORD PTR [ecx+120], xmm0

; 1036 : 
; 1037 :   } else {

	jmp	$LN3@kvz_set_pi
$LN2@kvz_set_pi:

; 1038 :     // Rate control disabled
; 1039 :     kvz_gop_config const * const gop = &ctrl->cfg.gop[state->frame->gop_offset];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+16]
	shl	edx, 6
	mov	eax, DWORD PTR _ctrl$[ebp]
	lea	ecx, DWORD PTR [eax+edx+280]
	mov	DWORD PTR _gop$3[ebp], ecx

; 1040 :     const int gop_len = ctrl->cfg.gop_len;

	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+276]
	mov	DWORD PTR _gop_len$2[ebp], ecx

; 1041 : 
; 1042 :     if (gop_len > 0 && state->frame->slicetype != KVZ_SLICE_I) {

	cmp	DWORD PTR _gop_len$2[ebp], 0
	jle	$LN5@kvz_set_pi
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+84], 2
	je	$LN5@kvz_set_pi

; 1043 :       double qp = ctrl->cfg.qp;

	mov	eax, DWORD PTR _ctrl$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax]
	movsd	QWORD PTR _qp$1[ebp], xmm0

; 1044 :       qp += gop->qp_offset;

	mov	eax, DWORD PTR _gop$3[ebp]
	movsx	ecx, BYTE PTR [eax+8]
	cvtsi2sd xmm0, ecx
	addsd	xmm0, QWORD PTR _qp$1[ebp]
	movsd	QWORD PTR _qp$1[ebp], xmm0

; 1045 :       qp += CLIP(0.0, 3.0, qp * gop->qp_model_scale + gop->qp_model_offset);

	mov	eax, DWORD PTR _gop$3[ebp]
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	mulsd	xmm0, QWORD PTR [eax+56]
	mov	ecx, DWORD PTR _gop$3[ebp]
	addsd	xmm0, QWORD PTR [ecx+48]
	comisd	xmm0, QWORD PTR __real@4008000000000000
	jbe	SHORT $LN8@kvz_set_pi
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR tv172[ebp], xmm0
	jmp	SHORT $LN9@kvz_set_pi
$LN8@kvz_set_pi:
	mov	edx, DWORD PTR _gop$3[ebp]
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	mulsd	xmm0, QWORD PTR [edx+56]
	mov	eax, DWORD PTR _gop$3[ebp]
	addsd	xmm0, QWORD PTR [eax+48]
	movsd	QWORD PTR tv172[ebp], xmm0
$LN9@kvz_set_pi:
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR tv172[ebp]
	jbe	SHORT $LN12@kvz_set_pi
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv188[ebp], xmm0
	jmp	SHORT $LN13@kvz_set_pi
$LN12@kvz_set_pi:
	mov	ecx, DWORD PTR _gop$3[ebp]
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	mulsd	xmm0, QWORD PTR [ecx+56]
	mov	edx, DWORD PTR _gop$3[ebp]
	addsd	xmm0, QWORD PTR [edx+48]
	comisd	xmm0, QWORD PTR __real@4008000000000000
	jbe	SHORT $LN10@kvz_set_pi
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR tv187[ebp], xmm0
	jmp	SHORT $LN11@kvz_set_pi
$LN10@kvz_set_pi:
	mov	eax, DWORD PTR _gop$3[ebp]
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	mulsd	xmm0, QWORD PTR [eax+56]
	mov	ecx, DWORD PTR _gop$3[ebp]
	addsd	xmm0, QWORD PTR [ecx+48]
	movsd	QWORD PTR tv187[ebp], xmm0
$LN11@kvz_set_pi:
	movsd	xmm0, QWORD PTR tv187[ebp]
	movsd	QWORD PTR tv188[ebp], xmm0
$LN13@kvz_set_pi:
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	addsd	xmm0, QWORD PTR tv188[ebp]
	movsd	QWORD PTR _qp$1[ebp], xmm0

; 1046 :       state->frame->QP = CLIP_TO_QP((int)(qp + 0.5));

	movsd	xmm0, QWORD PTR _qp$1[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	cmp	eax, 51					; 00000033H
	jle	SHORT $LN14@kvz_set_pi
	mov	DWORD PTR tv199[ebp], 51		; 00000033H
	jmp	SHORT $LN15@kvz_set_pi
$LN14@kvz_set_pi:
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si ecx, xmm0
	mov	DWORD PTR tv199[ebp], ecx
$LN15@kvz_set_pi:
	cmp	DWORD PTR tv199[ebp], 0
	jge	SHORT $LN18@kvz_set_pi
	mov	DWORD PTR tv209[ebp], 0
	jmp	SHORT $LN19@kvz_set_pi
$LN18@kvz_set_pi:
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si edx, xmm0
	cmp	edx, 51					; 00000033H
	jle	SHORT $LN16@kvz_set_pi
	mov	DWORD PTR tv208[ebp], 51		; 00000033H
	jmp	SHORT $LN17@kvz_set_pi
$LN16@kvz_set_pi:
	movsd	xmm0, QWORD PTR _qp$1[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	DWORD PTR tv208[ebp], eax
$LN17@kvz_set_pi:
	mov	ecx, DWORD PTR tv208[ebp]
	mov	DWORD PTR tv209[ebp], ecx
$LN19@kvz_set_pi:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	cl, BYTE PTR tv209[ebp]
	mov	BYTE PTR [eax+24], cl

; 1047 : 
; 1048 :     }

	jmp	$LN6@kvz_set_pi
$LN5@kvz_set_pi:

; 1049 :     else {
; 1050 :       state->frame->QP = CLIP_TO_QP(ctrl->cfg.qp + ctrl->cfg.intra_qp_offset);

	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+2428]
	mov	edx, DWORD PTR _ctrl$[ebp]
	add	ecx, DWORD PTR [edx]
	cmp	ecx, 51					; 00000033H
	jle	SHORT $LN20@kvz_set_pi
	mov	DWORD PTR tv222[ebp], 51		; 00000033H
	jmp	SHORT $LN21@kvz_set_pi
$LN20@kvz_set_pi:
	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+2428]
	mov	edx, DWORD PTR _ctrl$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR tv222[ebp], ecx
$LN21@kvz_set_pi:
	cmp	DWORD PTR tv222[ebp], 0
	jge	SHORT $LN24@kvz_set_pi
	mov	DWORD PTR tv234[ebp], 0
	jmp	SHORT $LN25@kvz_set_pi
$LN24@kvz_set_pi:
	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+2428]
	mov	edx, DWORD PTR _ctrl$[ebp]
	add	ecx, DWORD PTR [edx]
	cmp	ecx, 51					; 00000033H
	jle	SHORT $LN22@kvz_set_pi
	mov	DWORD PTR tv233[ebp], 51		; 00000033H
	jmp	SHORT $LN23@kvz_set_pi
$LN22@kvz_set_pi:
	mov	eax, DWORD PTR _ctrl$[ebp]
	movsx	ecx, BYTE PTR [eax+2428]
	mov	edx, DWORD PTR _ctrl$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR tv233[ebp], ecx
$LN23@kvz_set_pi:
	mov	eax, DWORD PTR tv233[ebp]
	mov	DWORD PTR tv234[ebp], eax
$LN25@kvz_set_pi:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	al, BYTE PTR tv234[ebp]
	mov	BYTE PTR [edx+24], al
$LN6@kvz_set_pi:

; 1051 :     }
; 1052 : 
; 1053 :     state->frame->lambda = qp_to_lambda(state, state->frame->QP);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movsx	edx, BYTE PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_qp_to_lambda
	add	esp, 8
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	fstp	QWORD PTR [edx]
$LN3@kvz_set_pi:

; 1054 :   }
; 1055 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_set_picture_lambda_and_qp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_free_rc_data
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_i$2 = -8						; size = 4
_kvz_free_rc_data PROC					; COMDAT

; 121  : void kvz_free_rc_data() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 122  :   if (data == NULL) return;

	cmp	DWORD PTR _data, 0
	jne	SHORT $LN8@kvz_free_r
	jmp	$LN1@kvz_free_r
$LN8@kvz_free_r:

; 123  : 
; 124  :   pthread_mutex_destroy(&data->ck_frame_lock);

	mov	eax, DWORD PTR _data
	add	eax, 272				; 00000110H
	push	eax
	call	_pthread_mutex_destroy
	add	esp, 4

; 125  :   pthread_mutex_destroy(&data->lambda_lock);

	mov	eax, DWORD PTR _data
	add	eax, 276				; 00000114H
	push	eax
	call	_pthread_mutex_destroy
	add	esp, 4

; 126  :   pthread_mutex_destroy(&data->intra_lock);

	mov	eax, DWORD PTR _data
	add	eax, 280				; 00000118H
	push	eax
	call	_pthread_mutex_destroy
	add	esp, 4

; 127  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; ++i) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@kvz_free_r
$LN2@kvz_free_r:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@kvz_free_r:
	cmp	DWORD PTR _i$2[ebp], 6
	jge	SHORT $LN3@kvz_free_r

; 128  :     pthread_rwlock_destroy(&data->ck_ctu_lock[i]);

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _data
	lea	edx, DWORD PTR [ecx+eax*4+248]
	push	edx
	call	_pthread_rwlock_destroy
	add	esp, 4

; 129  :   }

	jmp	SHORT $LN2@kvz_free_r
$LN3@kvz_free_r:

; 130  : 
; 131  :   if (data->intra_bpp) FREE_POINTER(data->intra_bpp);

	mov	eax, DWORD PTR _data
	cmp	DWORD PTR [eax+208], 0
	je	SHORT $LN9@kvz_free_r
	mov	esi, esp
	mov	eax, DWORD PTR _data
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _data
	mov	DWORD PTR [eax+208], 0
$LN9@kvz_free_r:

; 132  :   if (data->intra_dis) FREE_POINTER(data->intra_dis);

	mov	eax, DWORD PTR _data
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN10@kvz_free_r
	mov	esi, esp
	mov	eax, DWORD PTR _data
	mov	ecx, DWORD PTR [eax+212]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _data
	mov	DWORD PTR [eax+212], 0
$LN10@kvz_free_r:

; 133  :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@kvz_free_r
$LN5@kvz_free_r:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@kvz_free_r:
	cmp	DWORD PTR _i$1[ebp], 6
	jge	$LN6@kvz_free_r

; 134  :     if (data->c_para[i]) FREE_POINTER(data->c_para[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN11@kvz_free_r
	mov	esi, esp
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	mov	DWORD PTR [ecx+eax*4], 0
$LN11@kvz_free_r:

; 135  :     if (data->k_para[i]) FREE_POINTER(data->k_para[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	cmp	DWORD PTR [ecx+eax*4+24], 0
	je	SHORT $LN12@kvz_free_r
	mov	esi, esp
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	mov	edx, DWORD PTR [ecx+eax*4+24]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _data
	mov	DWORD PTR [ecx+eax*4+24], 0
$LN12@kvz_free_r:

; 136  :   }

	jmp	$LN5@kvz_free_r
$LN6@kvz_free_r:

; 137  :   FREE_POINTER(data);

	mov	esi, esp
	mov	eax, DWORD PTR _data
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _data, 0
$LN1@kvz_free_r:

; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_kvz_free_rc_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\rate_control.c
;	COMDAT _kvz_get_rc_data
_TEXT	SEGMENT
_buff$1 = -184						; size = 128
_j$2 = -48						; size = 4
_i$3 = -36						; size = 4
_num_lcus$ = -24					; size = 4
_i$4 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_encoder$ = 8						; size = 4
_kvz_get_rc_data PROC					; COMDAT

; 63   : kvz_rc_data * kvz_get_rc_data(const encoder_control_t * const encoder) {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __EF24DF88_rate_control@c
	call	@__CheckForDebuggerJustMyCode@4

; 64   :   if (data != NULL || encoder == NULL) return data;

	cmp	DWORD PTR _data, 0
	jne	SHORT $LN12@kvz_get_rc
	cmp	DWORD PTR _encoder$[ebp], 0
	jne	SHORT $LN11@kvz_get_rc
$LN12@kvz_get_rc:
	mov	eax, DWORD PTR _data
	jmp	$LN1@kvz_get_rc
$LN11@kvz_get_rc:

; 65   : 
; 66   :   data = calloc(1, sizeof(kvz_rc_data));

	mov	esi, esp
	push	288					; 00000120H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _data, eax

; 67   : 
; 68   :   if (data == NULL) return NULL;

	cmp	DWORD PTR _data, 0
	jne	SHORT $LN13@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN13@kvz_get_rc:

; 69   :   if (pthread_mutex_init(&data->ck_frame_lock, NULL) != 0) return NULL;

	push	0
	mov	eax, DWORD PTR _data
	add	eax, 272				; 00000110H
	push	eax
	call	_pthread_mutex_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN14@kvz_get_rc:

; 70   :   if (pthread_mutex_init(&data->lambda_lock, NULL) != 0) return NULL;

	push	0
	mov	eax, DWORD PTR _data
	add	eax, 276				; 00000114H
	push	eax
	call	_pthread_mutex_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN15@kvz_get_rc:

; 71   :   if (pthread_mutex_init(&data->intra_lock, NULL) != 0) return NULL;

	push	0
	mov	eax, DWORD PTR _data
	add	eax, 280				; 00000118H
	push	eax
	call	_pthread_mutex_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN16@kvz_get_rc:

; 72   :   for (int (i) = 0; (i) < KVZ_MAX_GOP_LAYERS; ++(i)) {

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@kvz_get_rc
$LN2@kvz_get_rc:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@kvz_get_rc:
	cmp	DWORD PTR _i$4[ebp], 6
	jge	SHORT $LN3@kvz_get_rc

; 73   :     if (pthread_rwlock_init(&data->ck_ctu_lock[i], NULL) != 0) return NULL;

	push	0
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _data
	lea	edx, DWORD PTR [ecx+eax*4+248]
	push	edx
	call	_pthread_rwlock_init
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN17@kvz_get_rc:

; 74   :   }

	jmp	SHORT $LN2@kvz_get_rc
$LN3@kvz_get_rc:

; 75   : 
; 76   :   const int num_lcus = encoder->in.width_in_lcu * encoder->in.height_in_lcu;

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	edx, DWORD PTR [eax+2488]
	imul	edx, DWORD PTR [ecx+2492]
	mov	DWORD PTR _num_lcus$[ebp], edx

; 77   : 
; 78   :   for (int i = 0; i < KVZ_MAX_GOP_LAYERS; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@kvz_get_rc
$LN5@kvz_get_rc:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@kvz_get_rc:
	cmp	DWORD PTR _i$3[ebp], 6
	jge	$LN6@kvz_get_rc

; 79   :     data->c_para[i] = malloc(sizeof(double) * num_lcus);

	mov	eax, DWORD PTR _num_lcus$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR _data
	mov	DWORD PTR [edx+ecx*4], eax

; 80   :     if (data->c_para[i] == NULL) return NULL;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN18@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN18@kvz_get_rc:

; 81   : 
; 82   :     data->k_para[i] = malloc(sizeof(double) * num_lcus);

	mov	eax, DWORD PTR _num_lcus$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR _data
	mov	DWORD PTR [edx+ecx*4+24], eax

; 83   :     if (data->k_para[i] == NULL) return NULL;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	cmp	DWORD PTR [ecx+eax*4+24], 0
	jne	SHORT $LN19@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN19@kvz_get_rc:

; 84   : 
; 85   :     data->pic_c_para[i] = 5.0;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	movsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR [ecx+eax*8+48], xmm0

; 86   :     data->pic_k_para[i] = -0.1;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	movsd	xmm0, QWORD PTR __real@bfb999999999999a
	movsd	QWORD PTR [ecx+eax*8+96], xmm0

; 87   : 
; 88   :     for (int j = 0; j < num_lcus; j++) {

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN10@kvz_get_rc
$LN8@kvz_get_rc:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN10@kvz_get_rc:
	mov	eax, DWORD PTR _j$2[ebp]
	cmp	eax, DWORD PTR _num_lcus$[ebp]
	jge	SHORT $LN9@kvz_get_rc

; 89   :       data->c_para[i][j] = 5.0;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$2[ebp]
	movsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR [edx+eax*8], xmm0

; 90   :       data->k_para[i][j] = -0.1;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _data
	mov	edx, DWORD PTR [ecx+eax*4+24]
	mov	eax, DWORD PTR _j$2[ebp]
	movsd	xmm0, QWORD PTR __real@bfb999999999999a
	movsd	QWORD PTR [edx+eax*8], xmm0

; 91   :     }

	jmp	SHORT $LN8@kvz_get_rc
$LN9@kvz_get_rc:

; 92   :   }

	jmp	$LN5@kvz_get_rc
$LN6@kvz_get_rc:

; 93   :   data->intra_bpp = calloc(num_lcus, sizeof(double));

	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _num_lcus$[ebp]
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _data
	mov	DWORD PTR [ecx+208], eax

; 94   :   if (data->intra_bpp == NULL) return NULL;

	mov	eax, DWORD PTR _data
	cmp	DWORD PTR [eax+208], 0
	jne	SHORT $LN20@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN20@kvz_get_rc:

; 95   :   data->intra_dis = calloc(num_lcus, sizeof(double));

	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _num_lcus$[ebp]
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _data
	mov	DWORD PTR [ecx+212], eax

; 96   :   if (data->intra_dis == NULL) return NULL;

	mov	eax, DWORD PTR _data
	cmp	DWORD PTR [eax+212], 0
	jne	SHORT $LN21@kvz_get_rc
	xor	eax, eax
	jmp	$LN1@kvz_get_rc
$LN21@kvz_get_rc:

; 97   : 
; 98   :   memset(data->previous_lambdas, 0, sizeof(data->previous_lambdas));

	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _data
	add	eax, 144				; 00000090H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 99   : 
; 100  :   data->previous_frame_lambda = 0.0;

	mov	eax, DWORD PTR _data
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+200], xmm0

; 101  : 
; 102  :   data->intra_pic_bpp = 0.0;

	mov	eax, DWORD PTR _data
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+224], xmm0

; 103  :   data->intra_pic_distortion = 0.0;

	mov	eax, DWORD PTR _data
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+216], xmm0

; 104  : 
; 105  :   data->intra_alpha = 6.7542000000000000;

	mov	eax, DWORD PTR _data
	movsd	xmm0, QWORD PTR __real@401b044d013a92a3
	movsd	QWORD PTR [eax+232], xmm0

; 106  :   data->intra_beta = 1.7860000000000000;

	mov	eax, DWORD PTR _data
	movsd	xmm0, QWORD PTR __real@3ffc9374bc6a7efa
	movsd	QWORD PTR [eax+240], xmm0

; 107  :   if(encoder->cfg.stats_file_prefix) {

	mov	eax, DWORD PTR _encoder$[ebp]
	cmp	DWORD PTR [eax+2460], 0
	je	$LN22@kvz_get_rc

; 108  :     char buff[128];
; 109  :     sprintf(buff, "%sbits.txt", encoder->cfg.stats_file_prefix);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2460]
	push	ecx
	push	OFFSET ??_C@_0L@NNHAOJEM@?$CFsbits?4txt@
	lea	edx, DWORD PTR _buff$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 110  :     bits_file = fopen(buff, "w");

	mov	esi, esp
	push	OFFSET ??_C@_01NOFIACDB@w@
	lea	eax, DWORD PTR _buff$1[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bits_file, eax

; 111  :     sprintf(buff, "%sdist.txt", encoder->cfg.stats_file_prefix);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2460]
	push	ecx
	push	OFFSET ??_C@_0L@HGMIJOPA@?$CFsdist?4txt@
	lea	edx, DWORD PTR _buff$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 112  :     dist_file = fopen(buff, "w");

	mov	esi, esp
	push	OFFSET ??_C@_01NOFIACDB@w@
	lea	eax, DWORD PTR _buff$1[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dist_file, eax

; 113  :     sprintf(buff, "%sqp.txt", encoder->cfg.stats_file_prefix);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2460]
	push	ecx
	push	OFFSET ??_C@_08DJGPEPCE@?$CFsqp?4txt@
	lea	edx, DWORD PTR _buff$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 114  :     qp_file = fopen(buff, "w");

	mov	esi, esp
	push	OFFSET ??_C@_01NOFIACDB@w@
	lea	eax, DWORD PTR _buff$1[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _qp_file, eax

; 115  :     sprintf(buff, "%slambda.txt", encoder->cfg.stats_file_prefix);

	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+2460]
	push	ecx
	push	OFFSET ??_C@_0N@GBELCPKG@?$CFslambda?4txt@
	lea	edx, DWORD PTR _buff$1[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 116  :     lambda_file = fopen(buff, "w");

	mov	esi, esp
	push	OFFSET ??_C@_01NOFIACDB@w@
	lea	eax, DWORD PTR _buff$1[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lambda_file, eax
$LN22@kvz_get_rc:

; 117  :   }
; 118  :   return data;

	mov	eax, DWORD PTR _data
$LN1@kvz_get_rc:

; 119  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@kvz_get_rc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@kvz_get_rc:
	DD	1
	DD	$LN25@kvz_get_rc
$LN25@kvz_get_rc:
	DD	-184					; ffffff48H
	DD	128					; 00000080H
	DD	$LN24@kvz_get_rc
$LN24@kvz_get_rc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_kvz_get_rc_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File F:\open_codec_learn_2021\kvazaar-master\src\encoderstate.h
;	COMDAT _encoder_state_must_write_vps
_TEXT	SEGMENT
tv75 = -224						; size = 4
tv73 = -220						; size = 4
_vps_period$ = -20					; size = 4
_frame$ = -8						; size = 4
_state$ = 8						; size = 4
_encoder_state_must_write_vps PROC			; COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6BE1C69C_encoderstate@h
	call	@__CheckForDebuggerJustMyCode@4

; 363  :   const int32_t frame = state->frame->num;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _frame$[ebp], edx

; 364  :   const int32_t vps_period = state->encoder_control->cfg.vps_period;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _vps_period$[ebp], edx

; 365  : 
; 366  :   return (vps_period >  0 && frame % vps_period == 0) ||

	cmp	DWORD PTR _vps_period$[ebp], 0
	jle	SHORT $LN3@encoder_st
	mov	eax, DWORD PTR _frame$[ebp]
	cdq
	idiv	DWORD PTR _vps_period$[ebp]
	test	edx, edx
	je	SHORT $LN5@encoder_st
$LN3@encoder_st:
	cmp	DWORD PTR _vps_period$[ebp], 0
	jl	SHORT $LN4@encoder_st
	cmp	DWORD PTR _frame$[ebp], 0
	je	SHORT $LN5@encoder_st
$LN4@encoder_st:
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN6@encoder_st
$LN5@encoder_st:
	mov	DWORD PTR tv73[ebp], 1
$LN6@encoder_st:
	cmp	DWORD PTR tv73[ebp], 0
	jne	SHORT $LN7@encoder_st
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN8@encoder_st
$LN7@encoder_st:
	mov	DWORD PTR tv75[ebp], 1
$LN8@encoder_st:
	mov	al, BYTE PTR tv75[ebp]

; 367  :          (vps_period >= 0 && frame == 0);
; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_encoder_state_must_write_vps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1793 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1395 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Stream$[ebp]
	push	edx
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
